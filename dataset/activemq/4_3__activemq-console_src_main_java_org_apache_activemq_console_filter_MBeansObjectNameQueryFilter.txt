6:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
6:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
10:a107823: 
1:5f1adbe: import java.io.IOException;
1:5f1adbe: import java.util.ArrayList;
1:a107823: import java.util.Iterator;
1:a107823: import java.util.List;
1:5f1adbe: 
1:5f1adbe: import javax.management.MBeanServerConnection;
1:5f1adbe: import javax.management.MalformedObjectNameException;
1:5f1adbe: import javax.management.ObjectName;
1:5f1adbe: import javax.management.QueryExp;
1:a107823: 
1:a107823: public class MBeansObjectNameQueryFilter extends AbstractQueryFilter {
1:a107823: 
1:a107823:     public static final String DEFAULT_JMX_DOMAIN = "org.apache.activemq";
1:5f1adbe:     public static final String QUERY_EXP_PREFIX = "MBeans.QueryExp.";
1:a107823: 
1:0dec0b6:     private MBeanServerConnection jmxConnection;
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates an mbeans object name query filter that will query on the given
1:0dec0b6:      * JMX connection
1:5f1adbe:      * 
1:0dec0b6:      * @param jmxConnection - JMX connection to use
1:a107823:      */
1:0dec0b6:     public MBeansObjectNameQueryFilter(MBeanServerConnection jmxConnection) {
1:a107823:         super(null);
1:0dec0b6:         this.jmxConnection = jmxConnection;
6:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Queries the JMX service using a mapping of keys and values to construct
1:5f1adbe:      * the object name
1:5f1adbe:      * 
1:a107823:      * @param queries - mapping of keys and values
1:a107823:      * @return collection of ObjectInstance that matches the query
1:5f1adbe:      * @throws MalformedObjectNameException - if the given string is an invalid
1:5f1adbe:      *                 object name
1:a107823:      * @throws IOException - if there is a problem querying the JMX context
1:a107823:      */
1:a107823:     public List query(List queries) throws MalformedObjectNameException, IOException {
1:a107823:         // Query all mbeans
1:a107823:         if (queries == null || queries.isEmpty()) {
1:a107823:             return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":*"), null);
1:a107823:         }
1:a107823: 
1:a107823:         // Constructs object name query
1:a107823:         String objNameQuery = "";
1:a107823:         String queryExp = "";
1:8ab1c8d:         String delimiter = "";
1:5f1adbe:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823:             String val = "";
1:a107823:             int pos = key.indexOf("=");
1:a107823:             if (pos >= 0) {
1:a107823:                 val = key.substring(pos + 1);
1:a107823:                 key = key.substring(0, pos);
1:881c1b7:             } else {
1:881c1b7:                 objNameQuery += delimiter + key;
1:a107823:             }
1:a107823: 
1:a107823:             if (val.startsWith(QUERY_EXP_PREFIX)) {
1:a107823:                 // do nothing as of the moment
1:5f1adbe:             } else if (!key.equals("") && !val.equals("")) {
1:8ab1c8d:                 objNameQuery += delimiter + key + "=" + val;
1:8ab1c8d:                 delimiter = ",";
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":" + objNameQuery), queryExp);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Advance query that enables you to specify both the object name and the
1:5f1adbe:      * query expression to use. Note: Query expression is currently unsupported.
1:5f1adbe:      * 
1:a107823:      * @param objName - object name to use for query
1:a107823:      * @param queryExpStr - query expression string
1:a107823:      * @return set of mbeans that matches the query
1:a107823:      * @throws IOException - if there is a problem querying the JMX context
1:a107823:      */
1:a107823:     protected List queryMBeans(ObjectName objName, String queryExpStr) throws IOException {
1:a107823:         QueryExp queryExp = createQueryExp(queryExpStr);
1:a107823: 
1:5f1adbe:         // Convert mbeans set to list to make it standard throughout the query
1:5f1adbe:         // filter
1:0dec0b6:         List mbeans = new ArrayList(jmxConnection.queryMBeans(objName, queryExp));
1:a107823: 
1:a107823:         return mbeans;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates a query expression based on the query expression string Note:
1:5f1adbe:      * currently unsupported
1:5f1adbe:      * 
1:a107823:      * @param queryExpStr - query expression string
1:a107823:      * @return the created query expression
1:a107823:      */
1:a107823:     protected QueryExp createQueryExp(String queryExpStr) {
1:a107823:         // Currently unsupported
1:a107823:         return null;
1:a107823:     }
1:a107823: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:881c1b7
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:                 objNameQuery += delimiter + key;
commit:8ab1c8d
/////////////////////////////////////////////////////////////////////////
1:         String delimiter = "";
/////////////////////////////////////////////////////////////////////////
1:                 objNameQuery += delimiter + key + "=" + val;
1:                 delimiter = ",";
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private MBeanServerConnection jmxConnection;
1:      * JMX connection
1:      * @param jmxConnection - JMX connection to use
1:     public MBeansObjectNameQueryFilter(MBeanServerConnection jmxConnection) {
1:         this.jmxConnection = jmxConnection;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List mbeans = new ArrayList(jmxConnection.queryMBeans(objName, queryExp));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.net.MalformedURLException;
1: import java.util.ArrayList;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.QueryExp;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1:     public static final String QUERY_EXP_PREFIX = "MBeans.QueryExp.";
1:      * Creates an mbeans object name query filter that will query on the given
0:      * JMX Service URL
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * Creates an mbeans objecet name query filter that will query on the given
0:      * JMX Service URL
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Queries the JMX service using a mapping of keys and values to construct
1:      * the object name
1:      * 
1:      * @throws MalformedObjectNameException - if the given string is an invalid
1:      *                 object name
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = queries.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             } else if (!key.equals("") && !val.equals("")) {
/////////////////////////////////////////////////////////////////////////
1:      * Advance query that enables you to specify both the object name and the
1:      * query expression to use. Note: Query expression is currently unsupported.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         // Convert mbeans set to list to make it standard throughout the query
1:         // filter
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Creates a query expression based on the query expression string Note:
1:      * currently unsupported
0:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.ObjectName;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.MBeanServerConnection;
0: import javax.management.QueryExp;
1: import java.util.Iterator;
1: import java.util.List;
0: import java.util.ArrayList;
0: import java.net.MalformedURLException;
0: import java.io.IOException;
1: 
1: public class MBeansObjectNameQueryFilter extends AbstractQueryFilter {
1: 
1:     public static final String DEFAULT_JMX_DOMAIN = "org.apache.activemq";
0:     public static final String QUERY_EXP_PREFIX   = "MBeans.QueryExp.";
1: 
0:     private JMXServiceURL jmxServiceUrl;
1: 
1:     /**
0:      * Creates an mbeans object name query filter that will query on the given JMX Service URL
0:      * @param jmxUrl - JMX service URL to connect to
0:      * @throws MalformedURLException
1:      */
0:     public MBeansObjectNameQueryFilter(String jmxUrl) throws MalformedURLException {
0:         this(new JMXServiceURL(jmxUrl));
1:     }
1: 
1:     /**
0:      * Creates an mbeans objecet name query filter that will query on the given JMX Service URL
0:      * @param jmxUrl - JMX service URL to connect to
1:      */
0:     public MBeansObjectNameQueryFilter(JMXServiceURL jmxUrl) {
1:         super(null);
0:         this.jmxServiceUrl = jmxUrl;
1:     }
1: 
1:     /**
0:      * Queries the JMX service using a mapping of keys and values to construct the object name
1:      * @param queries - mapping of keys and values
1:      * @return collection of ObjectInstance that matches the query
0:      * @throws MalformedObjectNameException - if the given string is an invalid object name
1:      * @throws IOException - if there is a problem querying the JMX context
1:      */
1:     public List query(List queries) throws MalformedObjectNameException, IOException {
1: 
1:         // Query all mbeans
1:         if (queries == null || queries.isEmpty()) {
1:             return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":*"), null);
1:         }
1: 
1:         // Constructs object name query
1:         String objNameQuery = "";
1:         String queryExp = "";
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String val = "";
1:             int pos = key.indexOf("=");
1:             if (pos >= 0) {
1:                 val = key.substring(pos + 1);
1:                 key = key.substring(0, pos);
1:             }
1: 
1:             if (val.startsWith(QUERY_EXP_PREFIX)) {
1:                 // do nothing as of the moment
0:             } else if (key != "" && val != "") {
0:                 objNameQuery = objNameQuery + key + "=" + val + ",";
1:             }
1:         }
1: 
0:         // Append * to object name
0:         objNameQuery = objNameQuery + "*";
1: 
1:         return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":" + objNameQuery), queryExp);
1:     }
1: 
1:     /**
0:      * Advance query that enables you to specify both the object name and the query expression to use.
0:      * Note: Query expression is currently unsupported.
1:      * @param objName - object name to use for query
1:      * @param queryExpStr - query expression string
1:      * @return set of mbeans that matches the query
1:      * @throws IOException - if there is a problem querying the JMX context
1:      */
1:     protected List queryMBeans(ObjectName objName, String queryExpStr) throws IOException {
0:         JMXConnector jmxConn = createJmxConnector();
0:         MBeanServerConnection server = jmxConn.getMBeanServerConnection();
1: 
1:         QueryExp queryExp = createQueryExp(queryExpStr);
1: 
0:         // Convert mbeans set to list to make it standard throughout the query filter
0:         List mbeans = new ArrayList(server.queryMBeans(objName, queryExp));
1: 
0:         jmxConn.close();
1: 
1:         return mbeans;
1:     }
1: 
1:     /**
0:      * Get the JMX service URL the query is connecting to.
0:      * @return JMX service URL
1:      */
0:     public JMXServiceURL getJmxServiceUrl() {
0:         return jmxServiceUrl;
1:     }
1: 
1:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
1:      */
0:     public void setJmxServiceUrl(JMXServiceURL jmxServiceUrl) {
0:         this.jmxServiceUrl = jmxServiceUrl;
1:     }
1: 
1:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
1:      */
0:     public void setJmxServiceUrl(String jmxServiceUrl) throws MalformedURLException {
0:         setJmxServiceUrl(new JMXServiceURL(jmxServiceUrl));
1:     }
1: 
1:     /**
0:      * Creates a JMX connector
0:      * @return JMX connector
0:      * @throws IOException
1:      */
0:     protected JMXConnector createJmxConnector() throws IOException {
0:         return JMXConnectorFactory.connect(getJmxServiceUrl());
1:     }
1: 
1:     /**
0:      * Creates a query expression based on the query expression string
0:      * Note: currently unsupported
1:      * @param queryExpStr - query expression string
1:      * @return the created query expression
1:      */
1:     protected QueryExp createQueryExp(String queryExpStr) {
1:         // Currently unsupported
1:         return null;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.ObjectName;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.MBeanServerConnection;
0: import javax.management.QueryExp;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.net.MalformedURLException;
0: import java.io.IOException;
0: 
0: public class MBeansObjectNameQueryFilter extends AbstractQueryFilter {
0: 
0:     public static final String DEFAULT_JMX_DOMAIN = "org.apache.activemq";
0:     public static final String QUERY_EXP_PREFIX   = "MBeans.QueryExp.";
0: 
0:     private JMXServiceURL jmxServiceUrl;
0: 
0:     /**
0:      * Creates an mbeans object name query filter that will query on the given JMX Service URL
0:      * @param jmxUrl - JMX service URL to connect to
0:      * @throws MalformedURLException
0:      */
0:     public MBeansObjectNameQueryFilter(String jmxUrl) throws MalformedURLException {
0:         this(new JMXServiceURL(jmxUrl));
0:     }
0: 
0:     /**
0:      * Creates an mbeans objecet name query filter that will query on the given JMX Service URL
0:      * @param jmxUrl - JMX service URL to connect to
0:      */
0:     public MBeansObjectNameQueryFilter(JMXServiceURL jmxUrl) {
0:         super(null);
0:         this.jmxServiceUrl = jmxUrl;
0:     }
0: 
0:     /**
0:      * Queries the JMX service using a mapping of keys and values to construct the object name
0:      * @param queries - mapping of keys and values
0:      * @return collection of ObjectInstance that matches the query
0:      * @throws MalformedObjectNameException - if the given string is an invalid object name
0:      * @throws IOException - if there is a problem querying the JMX context
0:      */
0:     public List query(List queries) throws MalformedObjectNameException, IOException {
0: 
0:         // Query all mbeans
0:         if (queries == null || queries.isEmpty()) {
0:             return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":*"), null);
0:         }
0: 
0:         // Constructs object name query
0:         String objNameQuery = "";
0:         String queryExp = "";
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String val = "";
0:             int pos = key.indexOf("=");
0:             if (pos >= 0) {
0:                 val = key.substring(pos + 1);
0:                 key = key.substring(0, pos);
0:             }
0: 
0:             if (val.startsWith(QUERY_EXP_PREFIX)) {
0:                 // do nothing as of the moment
0:             } else if (key != "" && val != "") {
0:                 objNameQuery = objNameQuery + key + "=" + val + ",";
0:             }
0:         }
0: 
0:         // Append * to object name
0:         objNameQuery = objNameQuery + "*";
0: 
0:         return queryMBeans(new ObjectName(DEFAULT_JMX_DOMAIN + ":" + objNameQuery), queryExp);
0:     }
0: 
0:     /**
0:      * Advance query that enables you to specify both the object name and the query expression to use.
0:      * Note: Query expression is currently unsupported.
0:      * @param objName - object name to use for query
0:      * @param queryExpStr - query expression string
0:      * @return set of mbeans that matches the query
0:      * @throws IOException - if there is a problem querying the JMX context
0:      */
0:     protected List queryMBeans(ObjectName objName, String queryExpStr) throws IOException {
0:         JMXConnector jmxConn = createJmxConnector();
0:         MBeanServerConnection server = jmxConn.getMBeanServerConnection();
0: 
0:         QueryExp queryExp = createQueryExp(queryExpStr);
0: 
0:         // Convert mbeans set to list to make it standard throughout the query filter
0:         List mbeans = new ArrayList(server.queryMBeans(objName, queryExp));
0: 
0:         jmxConn.close();
0: 
0:         return mbeans;
0:     }
0: 
0:     /**
0:      * Get the JMX service URL the query is connecting to.
0:      * @return JMX service URL
0:      */
0:     public JMXServiceURL getJmxServiceUrl() {
0:         return jmxServiceUrl;
0:     }
0: 
0:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
0:      */
0:     public void setJmxServiceUrl(JMXServiceURL jmxServiceUrl) {
0:         this.jmxServiceUrl = jmxServiceUrl;
0:     }
0: 
0:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
0:      */
0:     public void setJmxServiceUrl(String jmxServiceUrl) throws MalformedURLException {
0:         setJmxServiceUrl(new JMXServiceURL(jmxServiceUrl));
0:     }
0: 
0:     /**
0:      * Creates a JMX connector
0:      * @return JMX connector
0:      * @throws IOException
0:      */
0:     protected JMXConnector createJmxConnector() throws IOException {
0:         return JMXConnectorFactory.connect(getJmxServiceUrl());
0:     }
0: 
0:     /**
0:      * Creates a query expression based on the query expression string
0:      * Note: currently unsupported
0:      * @param queryExpStr - query expression string
0:      * @return the created query expression
0:      */
0:     protected QueryExp createQueryExp(String queryExpStr) {
0:         // Currently unsupported
0:         return null;
0:     }
0: }
============================================================================