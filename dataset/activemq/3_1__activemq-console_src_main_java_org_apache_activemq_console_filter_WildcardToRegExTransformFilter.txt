1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:a107823: public class WildcardToRegExTransformFilter extends WildcardTransformFilter {
1:a107823:     /**
1:5f1adbe:      * Creates a filter that is able to transform a wildcard query to a regular
1:5f1adbe:      * expression query string
1:5f1adbe:      * 
1:a107823:      * @param next - next query filter
1:a107823:      */
1:a107823:     public WildcardToRegExTransformFilter(RegExQueryFilter next) {
1:a107823:         super(next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Use to determine if a query string is a wildcard query. A query string is
1:5f1adbe:      * a wildcard query if it is a key-value pair with the format <key>=<value>
1:5f1adbe:      * and the value contains '*' and '?'.
1:5f1adbe:      * 
1:a107823:      * @param query - query string
1:a107823:      * @return true, if the query string is a wildcard query, false otherwise
1:a107823:      */
1:a107823:     protected boolean isWildcardQuery(String query) {
1:a107823:         // If the query is a key=value pair
1:a107823:         String key = query;
1:a107823:         String val = "";
1:a107823:         int pos = key.indexOf("=");
1:a107823:         if (pos >= 0) {
1:a107823:             val = key.substring(pos + 1);
1:a107823:         }
1:a107823: 
1:a107823:         // If the value contains wildcards
1:5f1adbe:         return (val.indexOf("*") >= 0) || (val.indexOf("?") >= 0);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform a wildcard query to regular expression format
1:5f1adbe:      * 
1:a107823:      * @param query - query string to transform
1:a107823:      * @return regex query string
1:a107823:      */
1:a107823:     protected String transformWildcardQuery(String query) {
1:a107823:         // Get the key=value pair
1:a107823:         String key = query;
1:a107823:         String val = "";
1:a107823:         int pos = key.indexOf("=");
1:a107823:         if (pos >= 0) {
1:a107823:             val = key.substring(pos + 1);
2:a107823:             key = key.substring(0, pos);
1:a107823:         }
1:a107823: 
1:5f1adbe:         val = val.replaceAll("[.]", "\\\\."); // Escape all dot characters.
1:5f1adbe:                                                 // From (.) to (\.)
1:5f1adbe:         val = val.replaceAll("[?]", "."); // Match single characters
1:5f1adbe:         val = val.replaceAll("[*]", ".*?"); // Match all characters, use
1:5f1adbe:                                             // reluctant quantifier
1:5f1adbe:         val = "(" + val + ")"; // Let's group the query for clarity
1:5f1adbe:         val = RegExQueryFilter.REGEX_PREFIX + val; // Flag as a regular
1:5f1adbe:                                                     // expression query
1:a107823: 
1:a107823:         return key + "=" + val;
1:a107823:     }
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:      * Creates a filter that is able to transform a wildcard query to a regular
1:      * expression query string
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Use to determine if a query string is a wildcard query. A query string is
1:      * a wildcard query if it is a key-value pair with the format <key>=<value>
1:      * and the value contains '*' and '?'.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         return (val.indexOf("*") >= 0) || (val.indexOf("?") >= 0);
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         val = val.replaceAll("[.]", "\\\\."); // Escape all dot characters.
1:                                                 // From (.) to (\.)
1:         val = val.replaceAll("[?]", "."); // Match single characters
1:         val = val.replaceAll("[*]", ".*?"); // Match all characters, use
1:                                             // reluctant quantifier
1:         val = "(" + val + ")"; // Let's group the query for clarity
1:         val = RegExQueryFilter.REGEX_PREFIX + val; // Flag as a regular
1:                                                     // expression query
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
1: public class WildcardToRegExTransformFilter extends WildcardTransformFilter {
1:     /**
0:      * Creates a filter that is able to transform a wildcard query to a regular expression query string
1:      * @param next - next query filter
1:      */
1:     public WildcardToRegExTransformFilter(RegExQueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
0:      * Use to determine if a query string is a wildcard query. A query string is a wildcard query if it is a key-value
0:      * pair with the format <key>=<value> and the value contains '*' and '?'.
1:      * @param query - query string
1:      * @return true, if the query string is a wildcard query, false otherwise
1:      */
1:     protected boolean isWildcardQuery(String query) {
1:         // If the query is a key=value pair
1:         String key = query;
1:         String val = "";
1:         int pos = key.indexOf("=");
1:         if (pos >= 0) {
1:             val = key.substring(pos + 1);
1:             key = key.substring(0, pos);
1:         }
1: 
1:         // If the value contains wildcards
0:         return ((val.indexOf("*") >= 0) || (val.indexOf("?") >= 0));
1:     }
1: 
1:     /**
1:      * Transform a wildcard query to regular expression format
1:      * @param query - query string to transform
1:      * @return regex query string
1:      */
1:     protected String transformWildcardQuery(String query) {
1:         // Get the key=value pair
1:         String key = query;
1:         String val = "";
1:         int pos = key.indexOf("=");
1:         if (pos >= 0) {
1:             val = key.substring(pos + 1);
1:             key = key.substring(0, pos);
1:         }
1: 
0:         val = val.replaceAll("[.]", "\\\\."); // Escape all dot characters. From (.) to (\.)
0:         val = val.replaceAll("[?]", ".");     // Match single characters
0:         val = val.replaceAll("[*]", ".*?");   // Match all characters, use reluctant quantifier
0:         val = "(" + val +")";                 // Let's group the query for clarity
0:         val = RegExQueryFilter.REGEX_PREFIX + val; // Flag as a regular expression query
1: 
1:         return key + "=" + val;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:5d41efc
/////////////////////////////////////////////////////////////////////////
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: public class WildcardToRegExTransformFilter extends WildcardTransformFilter {
0:     /**
0:      * Creates a filter that is able to transform a wildcard query to a regular expression query string
0:      * @param next - next query filter
0:      */
0:     public WildcardToRegExTransformFilter(RegExQueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Use to determine if a query string is a wildcard query. A query string is a wildcard query if it is a key-value
0:      * pair with the format <key>=<value> and the value contains '*' and '?'.
0:      * @param query - query string
0:      * @return true, if the query string is a wildcard query, false otherwise
0:      */
0:     protected boolean isWildcardQuery(String query) {
0:         // If the query is a key=value pair
0:         String key = query;
0:         String val = "";
0:         int pos = key.indexOf("=");
0:         if (pos >= 0) {
0:             val = key.substring(pos + 1);
0:             key = key.substring(0, pos);
0:         }
0: 
0:         // If the value contains wildcards
0:         return ((val.indexOf("*") >= 0) || (val.indexOf("?") >= 0));
0:     }
0: 
0:     /**
0:      * Transform a wildcard query to regular expression format
0:      * @param query - query string to transform
0:      * @return regex query string
0:      */
0:     protected String transformWildcardQuery(String query) {
0:         // Get the key=value pair
0:         String key = query;
0:         String val = "";
0:         int pos = key.indexOf("=");
0:         if (pos >= 0) {
0:             val = key.substring(pos + 1);
0:             key = key.substring(0, pos);
0:         }
0: 
0:         val = val.replaceAll("[.]", "\\\\."); // Escape all dot characters. From (.) to (\.)
0:         val = val.replaceAll("[?]", ".");     // Match single characters
0:         val = val.replaceAll("[*]", ".*?");   // Match all characters, use reluctant quantifier
0:         val = "(" + val +")";                 // Let's group the query for clarity
0:         val = RegExQueryFilter.REGEX_PREFIX + val; // Flag as a regular expression query
0: 
0:         return key + "=" + val;
0:     }
0: }
============================================================================