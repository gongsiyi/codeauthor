2:9807ee3: /**
1:9807ee3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9807ee3:  * contributor license agreements.  See the NOTICE file distributed with
1:9807ee3:  * this work for additional information regarding copyright ownership.
1:9807ee3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9807ee3:  * (the "License"); you may not use this file except in compliance with
1:9807ee3:  * the License.  You may obtain a copy of the License at
1:9807ee3:  *
1:9807ee3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9807ee3:  *
1:9807ee3:  * Unless required by applicable law or agreed to in writing, software
1:9807ee3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9807ee3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9807ee3:  * See the License for the specific language governing permissions and
1:9807ee3:  * limitations under the License.
2:9807ee3:  */
17:9807ee3: 
1:9807ee3: package org.apache.activemq.transport.stomp;
1:9807ee3: 
1:1236bbf: import static org.junit.Assert.assertEquals;
1:1236bbf: import static org.junit.Assert.assertNotNull;
1:1236bbf: import static org.junit.Assert.assertTrue;
1:1236bbf: 
1:1236bbf: import java.util.HashMap;
1:533cedc: import java.util.List;
1:1236bbf: 
1:1236bbf: import javax.jms.Connection;
1:1236bbf: import javax.jms.Destination;
1:1236bbf: import javax.jms.Message;
1:1236bbf: import javax.jms.MessageConsumer;
1:1236bbf: import javax.jms.MessageProducer;
1:533cedc: import javax.jms.Queue;
1:1236bbf: import javax.jms.Session;
1:533cedc: import javax.jms.Topic;
1:7525729: import javax.management.ObjectName;
1:1236bbf: 
1:9807ee3: import org.apache.activemq.ActiveMQConnection;
1:533cedc: import org.apache.activemq.broker.BrokerPlugin;
1:9807ee3: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:9807ee3: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:9807ee3: import org.apache.activemq.broker.region.policy.PolicyMap;
1:9807ee3: import org.apache.activemq.command.ActiveMQQueue;
1:533cedc: import org.apache.activemq.plugin.StatisticsBrokerPlugin;
1:1236bbf: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9807ee3: 
1:1236bbf: public class StompAdvisoryTest extends StompTestSupport {
1:533cedc:     static final String STATS_DESTINATION_PREFIX = "ActiveMQ.Statistics.Destination";
1:533cedc: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(StompAdvisoryTest.class);
1:9807ee3: 
1:9807ee3:     protected ActiveMQConnection connection;
1:9807ee3: 
1:1236bbf:     @Override
1:540a66b:     public void tearDown() throws Exception {
1:540a66b:         try {
1:540a66b:             connection.close();
1:540a66b:         } catch (Exception ex) {}
1:540a66b: 
1:540a66b:         super.tearDown();
1:540a66b:     }
1:540a66b: 
1:540a66b:     @Override
1:533cedc:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:533cedc:         plugins.add(new StatisticsBrokerPlugin());
1:533cedc:     }
1:533cedc: 
1:533cedc:     @Override
1:1236bbf:     protected void applyBrokerPolicies() throws Exception {
1:9807ee3: 
2:9807ee3:         PolicyEntry policy = new PolicyEntry();
1:db1f6fe:         policy.setAdvisoryForFastProducers(true);
2:9807ee3:         policy.setAdvisoryForConsumed(true);
2:9807ee3:         policy.setAdvisoryForDelivery(true);
2:9807ee3:         policy.setAdvisoryForDiscardingMessages(true);
2:9807ee3:         policy.setAdvisoryForSlowConsumers(true);
2:9807ee3:         policy.setAdvisoryWhenFull(true);
2:9807ee3:         policy.setProducerFlowControl(false);
1:9807ee3: 
1:9807ee3:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
2:9807ee3:         strategy.setLimit(10);
2:9807ee3:         policy.setPendingMessageLimitStrategy(strategy);
1:9807ee3:         PolicyMap pMap = new PolicyMap();
1:9807ee3:         pMap.setDefaultEntry(policy);
1:9807ee3: 
1:1236bbf:         brokerService.setDestinationPolicy(pMap);
1:1236bbf:         brokerService.setAdvisorySupport(true);
5:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testConnectionAdvisory() throws Exception {
1:540a66b:         stompConnect();
1:1263dd8: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:7525729: 
1:9807ee3:         f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertNotNull("Body is not null", f.getBody());
1:9807ee3:         assertTrue("Body should have content", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:9807ee3:     }
1:7525729: 
1:7525729:     @Test(timeout = 60000)
1:9807ee3:     public void testConnectionAdvisoryJSON() throws Exception {
1:540a66b:         stompConnect();
1:533cedc: 
1:9807ee3:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:9807ee3:         subheaders.put("transformation", Stomp.Transformations.JMS_JSON.toString());
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:9807ee3:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
1:1236bbf:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:9807ee3: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3: 
1:9807ee3:         f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertNotNull("Body is not null", f.getBody());
1:9807ee3:         assertTrue("Body should have content", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testConnectionAdvisoryXML() throws Exception {
1:540a66b:         stompConnect();
1:9807ee3: 
1:9807ee3:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:9807ee3:         subheaders.put("transformation", Stomp.Transformations.JMS_XML.toString());
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:9807ee3:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
1:1236bbf:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:9807ee3: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("<ConnectionInfo>"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3: 
1:9807ee3:         f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertNotNull("Body is not null", f.getBody());
1:9807ee3:         assertTrue("Body should have content", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("<ConnectionInfo>"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testConsumerAdvisory() throws Exception {
1:540a66b:         stompConnect();
1:9807ee3: 
1:9807ee3:         Destination dest = new ActiveMQQueue("testConsumerAdvisory");
1:1263dd8: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:9807ee3: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Consumer.>",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9807ee3:         MessageConsumer consumer = session.createConsumer(dest);
1:1236bbf:         assertNotNull(consumer);
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ConsumerInfo\":"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testProducerAdvisory() throws Exception {
1:540a66b:         stompConnect();
1:9807ee3: 
1:9807ee3:         Destination dest = new ActiveMQQueue("testProducerAdvisory");
1:1263dd8: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:9807ee3: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9807ee3:         MessageProducer producer = session.createProducer(dest);
1:9807ee3:         Message mess = session.createTextMessage("test");
1:9807ee3:         producer.send(mess);
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ProducerInfo\":"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testProducerAdvisoryXML() throws Exception {
1:540a66b:         stompConnect();
1:9807ee3: 
1:9807ee3:         Destination dest = new ActiveMQQueue("testProducerAdvisoryXML");
1:9807ee3: 
1:9807ee3:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:9807ee3:         subheaders.put("transformation", Stomp.Transformations.JMS_ADVISORY_XML.toString());
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:9807ee3:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
1:1236bbf:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:9807ee3: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9807ee3:         MessageProducer producer = session.createProducer(dest);
1:9807ee3:         Message mess = session.createTextMessage("test");
1:9807ee3:         producer.send(mess);
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("<ProducerInfo>"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testProducerAdvisoryJSON() throws Exception {
1:540a66b:         stompConnect();
1:9807ee3: 
1:9807ee3:         Destination dest = new ActiveMQQueue("testProducerAdvisoryJSON");
1:9807ee3: 
1:9807ee3:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:9807ee3:         subheaders.put("transformation", Stomp.Transformations.JMS_ADVISORY_JSON.toString());
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:9807ee3:         stompConnection.connect("system", "manager");
1:9807ee3:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
1:1236bbf:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:9807ee3: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:9807ee3: 
1:9807ee3:         // Now connect via openwire and check we get the advisory
1:1236bbf:         Connection c = cf.createConnection("system", "manager");
1:9807ee3:         c.start();
1:9807ee3: 
1:9807ee3:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9807ee3:         MessageProducer producer = session.createProducer(dest);
1:9807ee3:         Message mess = session.createTextMessage("test");
1:9807ee3:         producer.send(mess);
1:9807ee3: 
1:9807ee3:         StompFrame f = stompConnection.receive();
1:8bf987b:         LOG.debug(f.toString());
1:9807ee3:         assertEquals(f.getAction(),"MESSAGE");
1:9807ee3:         assertTrue("Should have a body", f.getBody().length() > 0);
1:9807ee3:         assertTrue(f.getBody().startsWith("{\"ProducerInfo\":"));
1:9807ee3: 
1:9807ee3:         c.stop();
1:9807ee3:         c.close();
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:533cedc:     public void testStatisticsAdvisory() throws Exception {
1:533cedc:         Connection c = cf.createConnection("system", "manager");
1:533cedc:         c.start();
1:533cedc:         final Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:533cedc:         final Topic replyTo = session.createTopic("stats");
1:533cedc: 
1:533cedc:         // Dummy Queue used to later gather statistics.
1:533cedc:         final ActiveMQQueue testQueue = new ActiveMQQueue("queueToBeTestedForStats");
1:533cedc:         final MessageProducer producer = session.createProducer(null);
1:533cedc:         Message mess = session.createTextMessage("test");
1:533cedc:         producer.send(testQueue, mess);
1:533cedc: 
1:533cedc:         // Create a request for Queue statistics
1:533cedc:         Thread child = new Thread(new Runnable() {
1:533cedc:             @Override
1:533cedc:             public void run() {
1:533cedc:                 try {
1:533cedc:                     Thread.sleep(1000);
1:533cedc:                     Queue query = session.createQueue(STATS_DESTINATION_PREFIX + testQueue.getQueueName());
1:533cedc:                     Message msg = session.createMessage();
1:533cedc:                     msg.setJMSReplyTo(replyTo);
1:533cedc:                     producer.send(query, msg);
1:533cedc:                 } catch (Exception e) {
1:533cedc:                     e.printStackTrace();
1:533cedc:                 }
1:533cedc:             }
1:533cedc:         });
1:533cedc:         child.start();
1:533cedc: 
1:540a66b:         stompConnect();
1:533cedc:         // Attempt to gather the statistics response from the previous request.
1:533cedc:         stompConnection.connect("system", "manager");
1:533cedc:         stompConnection.subscribe("/topic/" + replyTo.getTopicName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);
1:533cedc:         stompConnection.begin("TX");
1:533cedc:         StompFrame f = stompConnection.receive(5000);
1:533cedc:         stompConnection.commit("TX");
1:533cedc: 
1:533cedc:         LOG.debug(f.toString());
1:533cedc:         assertEquals(f.getAction(),"MESSAGE");
1:533cedc:         assertTrue("Should have a body", f.getBody().length() > 0);
1:533cedc:         assertTrue("Should contains memoryUsage stats", f.getBody().contains("memoryUsage"));
1:533cedc: 
1:533cedc:         c.stop();
1:533cedc:         c.close();
1:533cedc:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:7525729:     public void testDestinationAdvisoryTempQueue() throws Exception {
1:7525729: 
1:7525729:         cf.setWatchTopicAdvisories(false);
1:1263dd8: 
1:7525729:         stompConnect();
1:1263dd8: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:1263dd8: 
1:7525729:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempQueue",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:1263dd8: 
1:7525729:         // Now connect via openwire and check we get the advisory
1:7525729:         Connection connection = cf.createConnection("system", "manager");
1:7525729:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7525729:         session.createTemporaryQueue();
1:7525729:         connection.close();
1:7525729: 
1:7525729:         StompFrame f = stompConnection.receive();
1:7525729:         LOG.debug(f.toString());
1:7525729:         assertEquals(f.getAction(),"MESSAGE");
1:7525729:         assertTrue("Should have a body", f.getBody().length() > 0);
1:7525729:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:7525729:     }
1:7525729: 
1:7525729:     @Test(timeout = 60000)
1:7525729:     public void testDestinationAdvisoryTempTopic() throws Exception {
1:7525729: 
1:7525729:         cf.setWatchTopicAdvisories(false);
1:7525729: 
1:7525729:         stompConnect();
1:7525729: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:7525729: 
1:7525729:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:7525729: 
1:7525729:         // Now connect via openwire and check we get the advisory
1:7525729:         Connection connection = cf.createConnection("system", "manager");
1:7525729:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7525729:         session.createTemporaryTopic();
1:7525729:         connection.close();
1:7525729: 
1:7525729:         StompFrame f = stompConnection.receive();
1:7525729:         LOG.debug(f.toString());
1:7525729:         assertEquals(f.getAction(),"MESSAGE");
1:7525729:         assertTrue("Should have a body", f.getBody().length() > 0);
1:7525729:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:7525729:     }
1:7525729: 
1:7525729:     @Test(timeout = 60000)
1:7525729:     public void testDestinationAdvisoryCompositeTempDestinations() throws Exception {
1:7525729: 
1:7525729:         cf.setWatchTopicAdvisories(true);
1:1263dd8: 
1:1263dd8:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:1263dd8:         subheaders.put("receipt", "id-1");
1:7525729: 
1:7525729:         stompConnect();
1:7525729:         stompConnection.connect("system", "manager");
1:1263dd8:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic,/topic/ActiveMQ.Advisory.TempQueue",
1:1263dd8:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:1263dd8: 
1:1263dd8:         String frame = stompConnection.receiveFrame();
1:1263dd8:         LOG.debug("Response to subscribe was: {}", frame);
1:1263dd8:         assertTrue(frame.trim().startsWith("RECEIPT"));
1:7525729: 
1:7525729:         // Now connect via openwire and check we get the advisory
1:7525729:         Connection connection = cf.createConnection("system", "manager");
1:7525729:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7525729:         session.createTemporaryTopic();
1:7525729:         session.createTemporaryQueue();
1:9807ee3: 
1:7525729:         ObjectName[] topicSubscribers = brokerService.getAdminView().getTopicSubscribers();
1:7525729:         for (ObjectName subscription : topicSubscribers) {
1:7525729:             LOG.info("Topic Subscription: {}", subscription);
1:7525729:         }
1:7525729: 
1:7525729:         connection.close();
1:7525729: 
1:7525729:         StompFrame f = stompConnection.receive();
1:7525729:         LOG.debug(f.toString());
1:7525729:         assertEquals(f.getAction(),"MESSAGE");
1:7525729:         assertTrue("Should have a body", f.getBody().length() > 0);
1:7525729:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:7525729: 
1:7525729:         f = stompConnection.receive();
1:7525729:         LOG.debug(f.toString());
1:7525729:         assertEquals(f.getAction(),"MESSAGE");
1:7525729:         assertTrue("Should have a body", f.getBody().length() > 0);
1:7525729:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:7525729:     }
1:9807ee3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1263dd8
/////////////////////////////////////////////////////////////////////////
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:         subheaders.put("receipt", "id-1");
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
1: 
/////////////////////////////////////////////////////////////////////////
1:         subheaders.put("receipt", "id-1");
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
1: 
/////////////////////////////////////////////////////////////////////////
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Consumer.>",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:         subheaders.put("receipt", "id-1");
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
1: 
/////////////////////////////////////////////////////////////////////////
1:         subheaders.put("receipt", "id-1");
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempQueue",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("receipt", "id-1");
1: 
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic,/topic/ActiveMQ.Advisory.TempQueue",
1:             Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Response to subscribe was: {}", frame);
1:         assertTrue(frame.trim().startsWith("RECEIPT"));
commit:7525729
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testDestinationAdvisoryTempQueue() throws Exception {
1: 
1:         cf.setWatchTopicAdvisories(false);
1: 
1:         stompConnect();
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempQueue", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
1:         Connection connection = cf.createConnection("system", "manager");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createTemporaryQueue();
1:         connection.close();
1: 
1:         StompFrame f = stompConnection.receive();
1:         LOG.debug(f.toString());
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDestinationAdvisoryTempTopic() throws Exception {
1: 
1:         cf.setWatchTopicAdvisories(false);
1: 
1:         stompConnect();
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
1:         Connection connection = cf.createConnection("system", "manager");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createTemporaryTopic();
1:         connection.close();
1: 
1:         StompFrame f = stompConnection.receive();
1:         LOG.debug(f.toString());
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDestinationAdvisoryCompositeTempDestinations() throws Exception {
1: 
1:         cf.setWatchTopicAdvisories(true);
1: 
1:         stompConnect();
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.TempTopic,/topic/ActiveMQ.Advisory.TempQueue", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
1:         Connection connection = cf.createConnection("system", "manager");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createTemporaryTopic();
1:         session.createTemporaryQueue();
1: 
1:         ObjectName[] topicSubscribers = brokerService.getAdminView().getTopicSubscribers();
1:         for (ObjectName subscription : topicSubscribers) {
1:             LOG.info("Topic Subscription: {}", subscription);
1:         }
1: 
1:         connection.close();
1: 
1:         StompFrame f = stompConnection.receive();
1:         LOG.debug(f.toString());
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1: 
1:         f = stompConnection.receive();
1:         LOG.debug(f.toString());
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"DestinationInfo\":"));
1:     }
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
1:         try {
1:             connection.close();
1:         } catch (Exception ex) {}
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
commit:533cedc
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import javax.jms.Queue;
1: import javax.jms.Topic;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.plugin.StatisticsBrokerPlugin;
1:     static final String STATS_DESTINATION_PREFIX = "ActiveMQ.Statistics.Destination";
1: 
1:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:         plugins.add(new StatisticsBrokerPlugin());
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test
1:     public void testStatisticsAdvisory() throws Exception {
1:         Connection c = cf.createConnection("system", "manager");
1:         c.start();
1:         final Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Topic replyTo = session.createTopic("stats");
1: 
1:         // Dummy Queue used to later gather statistics.
1:         final ActiveMQQueue testQueue = new ActiveMQQueue("queueToBeTestedForStats");
1:         final MessageProducer producer = session.createProducer(null);
1:         Message mess = session.createTextMessage("test");
1:         producer.send(testQueue, mess);
1: 
1:         // Create a request for Queue statistics
1:         Thread child = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     Thread.sleep(1000);
1:                     Queue query = session.createQueue(STATS_DESTINATION_PREFIX + testQueue.getQueueName());
1:                     Message msg = session.createMessage();
1:                     msg.setJMSReplyTo(replyTo);
1:                     producer.send(query, msg);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         child.start();
1: 
1:         // Attempt to gather the statistics response from the previous request.
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/" + replyTo.getTopicName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);
1:         stompConnection.begin("TX");
1:         StompFrame f = stompConnection.receive(5000);
1:         stompConnection.commit("TX");
1: 
1:         LOG.debug(f.toString());
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue("Should contains memoryUsage stats", f.getBody().contains("memoryUsage"));
1: 
1:         c.stop();
1:         c.close();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.HashMap;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.junit.Test;
1: public class StompAdvisoryTest extends StompTestSupport {
1:     @Override
1:     protected void applyBrokerPolicies() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setDestinationPolicy(pMap);
1:         brokerService.setAdvisorySupport(true);
0:     @Test
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:         Connection c = cf.createConnection("system", "manager");
1:         assertNotNull(consumer);
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:                 Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1:         Connection c = cf.createConnection("system", "manager");
/////////////////////////////////////////////////////////////////////////
commit:9807ee3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.stomp;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.JmsTestSupport;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.util.URISupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.*;
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
1: 
1: /**
0:  * @version $Revision: 1461 $
1:  */
0: public class StompAdvisoryTest extends TestCase {
0:     private static final Log LOG = LogFactory.getLog(StompAdvisoryTest.class);
1: 
0:     protected ConnectionFactory factory;
1:     protected ActiveMQConnection connection;
0:     protected BrokerService broker;
1: 
0:     StompConnection stompConnection;
0:     URI tcpBrokerUri;
0:     URI stompBrokerUri;
1: 
0:     private PolicyEntry createPolicyEntry() {
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setAdvisdoryForFastProducers(true);
1:         policy.setAdvisoryForConsumed(true);
1:         policy.setAdvisoryForDelivery(true);
1:         policy.setAdvisoryForDiscardingMessages(true);
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setAdvisoryWhenFull(true);
1:         policy.setProducerFlowControl(false);
1: 
1:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
1:         strategy.setLimit(10);
1:         policy.setPendingMessageLimitStrategy(strategy);
0:         return policy;
1:     }
1: 
0:     protected BrokerService createBroker() throws Exception {
0:         BrokerService broker = BrokerFactory.createBroker(new URI("broker://()/localhost?useJmx=false"));
1: 
0:         broker.setPersistent(false);
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setAdvisdoryForFastProducers(true);
1:         policy.setAdvisoryForConsumed(true);
1:         policy.setAdvisoryForDelivery(true);
1:         policy.setAdvisoryForDiscardingMessages(true);
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setAdvisoryWhenFull(true);
1:         policy.setProducerFlowControl(false);
0:         ConstantPendingMessageLimitStrategy strategy  = new ConstantPendingMessageLimitStrategy();
1:         strategy.setLimit(10);
1:         policy.setPendingMessageLimitStrategy(strategy);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
0:         broker.setDestinationPolicy(pMap);
0:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.addConnector("tcp://localhost:0");
0:         broker.addConnector("stomp://localhost:0");
0:         return broker;
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
0:         if (System.getProperty("basedir") == null) {
0:             File file = new File(".");
0:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1: 
0:         broker = createBroker();
0:         broker.start();
1: 
0:         tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
0:         stompBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(1).getConnectUri());
0:         LOG.info("Producing using TCP uri: " + tcpBrokerUri);
0:         LOG.info("consuming using STOMP uri: " + stompBrokerUri);
1: 
0:         stompConnection = new StompConnection();
0:         stompConnection.open(new Socket("localhost", stompBrokerUri.getPort()));
1: 
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         stompConnection.disconnect();
0:         stompConnection.close();
1: 
1:     }
1: 
1:     public void testConnectionAdvisory() throws Exception {
1: 
0:         Destination dest = new ActiveMQQueue("testConnectionAdvisory");
1: 
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
0:         Map<String,String> headers = f.getHeaders();
1: 
1:         c.stop();
1:         c.close();
1: 
1:         f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertNotNull("Body is not null", f.getBody());
1:         assertTrue("Body should have content", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:     }
1: 
1:     public void testConnectionAdvisoryJSON() throws Exception {
1: 
0:         Destination dest = new ActiveMQQueue("testConnectionAdvisory");
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("transformation", Stomp.Transformations.JMS_JSON.toString());
1: 
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
0:         		Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
0:         Map<String,String> headers = f.getHeaders();
1: 
1:         c.stop();
1:         c.close();
1: 
1:         f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertNotNull("Body is not null", f.getBody());
1:         assertTrue("Body should have content", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ConnectionInfo\":"));
1:     }
1: 
1:     public void testConnectionAdvisoryXML() throws Exception {
1: 
0:         Destination dest = new ActiveMQQueue("testConnectionAdvisory");
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("transformation", Stomp.Transformations.JMS_XML.toString());
1: 
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Connection",
0:         		Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("<ConnectionInfo>"));
0:         Map<String,String> headers = f.getHeaders();
1: 
1:         c.stop();
1:         c.close();
1: 
1:         f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertNotNull("Body is not null", f.getBody());
1:         assertTrue("Body should have content", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("<ConnectionInfo>"));
1:     }
1: 
1:     public void testConsumerAdvisory() throws Exception {
1: 
1:         Destination dest = new ActiveMQQueue("testConsumerAdvisory");
1: 
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Consumer.>", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ConsumerInfo\":"));
1: 
1:         c.stop();
1:         c.close();
1:     }
1: 
1:     public void testProducerAdvisory() throws Exception {
1: 
1:         Destination dest = new ActiveMQQueue("testProducerAdvisory");
1: 
1:         stompConnection.connect("system", "manager");
0:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(dest);
1:         Message mess = session.createTextMessage("test");
1:         producer.send(mess);
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ProducerInfo\":"));
1: 
1:         c.stop();
1:         c.close();
1:     }
1: 
1:     public void testProducerAdvisoryXML() throws Exception {
1: 
1:         Destination dest = new ActiveMQQueue("testProducerAdvisoryXML");
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("transformation", Stomp.Transformations.JMS_ADVISORY_XML.toString());
1: 
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
0:         		Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(dest);
1:         Message mess = session.createTextMessage("test");
1:         producer.send(mess);
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("<ProducerInfo>"));
1: 
1:         c.stop();
1:         c.close();
1:     }
1: 
1:     public void testProducerAdvisoryJSON() throws Exception {
1: 
1:         Destination dest = new ActiveMQQueue("testProducerAdvisoryJSON");
1: 
1:         HashMap<String, String> subheaders = new HashMap<String, String>(1);
1:         subheaders.put("transformation", Stomp.Transformations.JMS_ADVISORY_JSON.toString());
1: 
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/ActiveMQ.Advisory.Producer.>",
0:         		Stomp.Headers.Subscribe.AckModeValues.AUTO, subheaders);
1: 
1:         // Now connect via openwire and check we get the advisory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
1:         c.start();
1: 
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(dest);
1:         Message mess = session.createTextMessage("test");
1:         producer.send(mess);
1: 
1:         StompFrame f = stompConnection.receive();
0:         LOG.debug(f);
1:         assertEquals(f.getAction(),"MESSAGE");
1:         assertTrue("Should have a body", f.getBody().length() > 0);
1:         assertTrue(f.getBody().startsWith("{\"ProducerInfo\":"));
1: 
1:         c.stop();
1:         c.close();
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         policy.setAdvisoryForFastProducers(true);
/////////////////////////////////////////////////////////////////////////
0:         policy.setAdvisoryForFastProducers(true);
commit:5bf3696
/////////////////////////////////////////////////////////////////////////
0:         broker.stop();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(StompAdvisoryTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(f.toString());
============================================================================