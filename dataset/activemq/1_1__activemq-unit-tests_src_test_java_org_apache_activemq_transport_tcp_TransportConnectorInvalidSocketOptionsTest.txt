1:7dfb0a2: /**
1:7dfb0a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7dfb0a2:  * contributor license agreements.  See the NOTICE file distributed with
1:7dfb0a2:  * this work for additional information regarding copyright ownership.
1:7dfb0a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7dfb0a2:  * (the "License"); you may not use this file except in compliance with
1:7dfb0a2:  * the License.  You may obtain a copy of the License at
1:7dfb0a2:  *
1:7dfb0a2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7dfb0a2:  *
1:7dfb0a2:  * Unless required by applicable law or agreed to in writing, software
1:7dfb0a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7dfb0a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7dfb0a2:  * See the License for the specific language governing permissions and
1:7dfb0a2:  * limitations under the License.
1:7dfb0a2:  */
1:7dfb0a2: package org.apache.activemq.transport.tcp;
1:7dfb0a2: 
1:7dfb0a2: import javax.jms.JMSException;
1:7dfb0a2: 
1:7dfb0a2: import junit.framework.TestCase;
1:7dfb0a2: import org.apache.activemq.ActiveMQConnectionFactory;
1:7dfb0a2: import org.apache.activemq.broker.BrokerService;
1:7dfb0a2: import org.junit.Test;
1:7dfb0a2: 
1:7dfb0a2: public class TransportConnectorInvalidSocketOptionsTest extends TestCase {
1:7dfb0a2: 
1:7dfb0a2:     @Test
1:7dfb0a2:     public void testClientParameters() throws Exception {
1:7dfb0a2:         try {
1:7dfb0a2:             new ActiveMQConnectionFactory("tcp://localhost:42?foo=bar").createConnection();
1:7dfb0a2:             fail("Should have thrown an exception");
1:7dfb0a2:         } catch (Exception e) {
1:7dfb0a2:             assertEquals(JMSException.class, e.getClass());
1:7dfb0a2:             assertEquals(IllegalArgumentException.class, e.getCause().getClass());
1:7dfb0a2:             assertEquals("Invalid connect parameters: {foo=bar}", e.getCause().getMessage());
1:7dfb0a2:         }
1:7dfb0a2:     }
1:7dfb0a2: 
1:7dfb0a2:     @Test
1:7dfb0a2:     public void testClientSocketParameters() throws Exception {
1:7dfb0a2:         BrokerService broker = null;
1:7dfb0a2: 
1:7dfb0a2:         try {
1:7dfb0a2:             broker = new BrokerService();
1:7dfb0a2:             broker.setPersistent(false);
1:7dfb0a2:             broker.addConnector("tcp://localhost:61616");
1:7dfb0a2:             broker.start();
1:7dfb0a2: 
1:7dfb0a2:             try {
1:7dfb0a2:                 new ActiveMQConnectionFactory("tcp://localhost:61616?socket.foo=bar").createConnection();
1:7dfb0a2:                 fail("Should have thrown an exception");
1:7dfb0a2:             } catch (Exception e) {
1:7dfb0a2:                 assertEquals(JMSException.class, e.getClass());
1:7dfb0a2:                 assertEquals(IllegalArgumentException.class, e.getCause().getClass());
1:7dfb0a2:                 assertEquals("Invalid socket parameters: {foo=bar}", e.getCause().getMessage());
1:7dfb0a2:             }
1:7dfb0a2:         } finally {
1:7dfb0a2:             if (broker != null) {
1:7dfb0a2:                 broker.stop();
1:7dfb0a2:             }
1:7dfb0a2:         }
1:7dfb0a2:     }
1:7dfb0a2: 
1:7dfb0a2: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:7dfb0a2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import javax.jms.JMSException;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Test;
1: 
1: public class TransportConnectorInvalidSocketOptionsTest extends TestCase {
1: 
1:     @Test
1:     public void testClientParameters() throws Exception {
1:         try {
1:             new ActiveMQConnectionFactory("tcp://localhost:42?foo=bar").createConnection();
1:             fail("Should have thrown an exception");
1:         } catch (Exception e) {
1:             assertEquals(JMSException.class, e.getClass());
1:             assertEquals(IllegalArgumentException.class, e.getCause().getClass());
1:             assertEquals("Invalid connect parameters: {foo=bar}", e.getCause().getMessage());
1:         }
1:     }
1: 
1:     @Test
1:     public void testClientSocketParameters() throws Exception {
1:         BrokerService broker = null;
1: 
1:         try {
1:             broker = new BrokerService();
1:             broker.setPersistent(false);
1:             broker.addConnector("tcp://localhost:61616");
1:             broker.start();
1: 
1:             try {
1:                 new ActiveMQConnectionFactory("tcp://localhost:61616?socket.foo=bar").createConnection();
1:                 fail("Should have thrown an exception");
1:             } catch (Exception e) {
1:                 assertEquals(JMSException.class, e.getClass());
1:                 assertEquals(IllegalArgumentException.class, e.getCause().getClass());
1:                 assertEquals("Invalid socket parameters: {foo=bar}", e.getCause().getMessage());
1:             }
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1: }
============================================================================