1:ddf0b2a: /**
1:ed11b06:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed11b06:  * contributor license agreements.  See the NOTICE file distributed with
1:ed11b06:  * this work for additional information regarding copyright ownership.
1:ed11b06:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed11b06:  * (the "License"); you may not use this file except in compliance with
1:ed11b06:  * the License.  You may obtain a copy of the License at
1:ddf0b2a:  *
1:ed11b06:  *      http://www.apache.org/licenses/LICENSE-2.0
2:ed11b06:  *
1:ed11b06:  * Unless required by applicable law or agreed to in writing, software
1:ed11b06:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed11b06:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed11b06:  * See the License for the specific language governing permissions and
1:ed11b06:  * limitations under the License.
1:ddf0b2a:  */
1:ddf0b2a: package org.apache.activemq.transport.amqp;
7:ddf0b2a: 
1:ddf0b2a: import static org.junit.Assert.assertEquals;
1:ddf0b2a: import static org.junit.Assert.assertTrue;
1:ddf0b2a: import static org.junit.Assert.fail;
1:ddf0b2a: 
1:ddf0b2a: import java.util.List;
1:ddf0b2a: import java.util.Vector;
1:ddf0b2a: 
1:ddf0b2a: import javax.jms.Connection;
1:ddf0b2a: import javax.jms.Destination;
1:ddf0b2a: import javax.jms.JMSException;
1:ddf0b2a: import javax.jms.Message;
1:ddf0b2a: import javax.jms.MessageConsumer;
1:ddf0b2a: import javax.jms.MessageListener;
1:ddf0b2a: import javax.jms.MessageProducer;
1:ddf0b2a: import javax.jms.Queue;
1:ddf0b2a: import javax.jms.Session;
1:ddf0b2a: import javax.jms.TextMessage;
1:ddf0b2a: import javax.jms.Topic;
1:ddf0b2a: 
1:ddf0b2a: import org.junit.After;
1:ddf0b2a: import org.junit.Test;
1:ddf0b2a: import org.slf4j.Logger;
1:ddf0b2a: import org.slf4j.LoggerFactory;
1:ddf0b2a: 
1:240278d: public class JMSClientRequestResponseTest extends AmqpTestSupport implements MessageListener {
1:ddf0b2a: 
1:240278d:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientRequestResponseTest.class);
1:ddf0b2a: 
1:ddf0b2a:     private Connection requestorConnection;
1:ddf0b2a:     private Destination requestDestination;
1:ddf0b2a:     private Session requestorSession;
1:ddf0b2a: 
1:ddf0b2a:     private Connection responderConnection;
1:ddf0b2a:     private MessageProducer responseProducer;
1:ddf0b2a:     private Session responderSession;
1:ddf0b2a:     private Destination replyDestination;
1:ddf0b2a: 
1:ddf0b2a:     private final List<JMSException> failures = new Vector<JMSException>();
1:ddf0b2a:     private boolean dynamicallyCreateProducer;
1:ddf0b2a:     private final boolean useAsyncConsumer = true;
1:ddf0b2a:     private Thread syncThread;
1:ddf0b2a: 
2:ddf0b2a:     @Override
1:ddf0b2a:     @After
1:ddf0b2a:     public void tearDown() throws Exception {
1:94937e8:         if (requestorConnection != null) {
1:94937e8:             try {
1:94937e8:                 requestorConnection.close();
1:94937e8:             } catch (Exception e) {}
1:94937e8:         }
1:94937e8:         if (responderConnection != null) {
1:94937e8:             try {
1:94937e8:                 responderConnection.close();
1:94937e8:             } catch (Exception e) {}
1:94937e8:         }
1:ddf0b2a: 
1:ddf0b2a:         if (syncThread != null) {
1:ddf0b2a:             syncThread.join(5000);
5:ddf0b2a:         }
1:ddf0b2a: 
1:ddf0b2a:         super.tearDown();
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     private void doSetupConnections(boolean topic) throws Exception {
1:ddf0b2a:         responderConnection = createConnection(name.getMethodName() + "-responder");
1:ddf0b2a:         responderSession = responderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ddf0b2a:         if (topic) {
1:ddf0b2a:             requestDestination = responderSession.createTopic(name.getMethodName());
1:ddf0b2a:         } else {
1:ddf0b2a:             requestDestination = responderSession.createQueue(name.getMethodName());
1:ddf0b2a:         }
1:ddf0b2a:         responseProducer = responderSession.createProducer(null);
1:ddf0b2a: 
1:ddf0b2a:         final MessageConsumer requestConsumer = responderSession.createConsumer(requestDestination);
1:ddf0b2a:         if (useAsyncConsumer) {
1:ddf0b2a:             requestConsumer.setMessageListener(this);
1:ddf0b2a:         } else {
1:ddf0b2a:             syncThread = new Thread(new Runnable() {
1:ddf0b2a:                 @Override
1:ddf0b2a:                 public void run() {
1:ddf0b2a:                     syncConsumeLoop(requestConsumer);
1:ddf0b2a:                 }
2:ddf0b2a:             });
1:ddf0b2a:             syncThread.start();
1:ddf0b2a:         }
1:ddf0b2a:         responderConnection.start();
1:ddf0b2a: 
1:ddf0b2a:         requestorConnection = createConnection(name.getMethodName() + "-requestor");
1:ddf0b2a:         requestorSession = requestorConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ddf0b2a:         if (topic) {
1:ddf0b2a:             replyDestination = requestorSession.createTemporaryTopic();
1:ddf0b2a:         } else {
1:ddf0b2a:             replyDestination = requestorSession.createTemporaryQueue();
1:ddf0b2a:         }
1:ddf0b2a:         requestorConnection.start();
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     @Test(timeout=60000)
1:ddf0b2a:     public void testRequestResponseToTempQueue() throws Exception {
1:ddf0b2a:         doSetupConnections(false);
1:ddf0b2a:         doTestRequestResponse();
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     @Test(timeout=60000)
1:ddf0b2a:     public void testRequestResponseToTempTopic() throws Exception {
1:ddf0b2a:         doSetupConnections(true);
1:ddf0b2a:         doTestRequestResponse();
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     private void doTestRequestResponse() throws Exception {
1:ddf0b2a: 
1:ddf0b2a:         MessageProducer requestProducer = requestorSession.createProducer(requestDestination);
1:ddf0b2a:         MessageConsumer replyConsumer = requestorSession.createConsumer(replyDestination);
1:ddf0b2a: 
1:ddf0b2a:         TextMessage requestMessage = requestorSession.createTextMessage("SomeRequest");
1:ddf0b2a:         requestMessage.setJMSReplyTo(replyDestination);
1:ddf0b2a:         requestProducer.send(requestMessage);
1:ddf0b2a: 
1:ddf0b2a:         LOG.info("Sent request to destination: {}", requestDestination.toString());
1:ddf0b2a: 
1:ddf0b2a:         Message msg = replyConsumer.receive(10000);
1:ddf0b2a: 
1:ddf0b2a:         if (msg instanceof TextMessage) {
1:ddf0b2a:             TextMessage replyMessage = (TextMessage)msg;
1:ddf0b2a:             LOG.info("Received reply.");
1:ddf0b2a:             LOG.info(replyMessage.toString());
1:ddf0b2a:             assertTrue("Wrong message content", replyMessage.getText().startsWith("response"));
1:ddf0b2a:         } else {
1:ddf0b2a:             fail("Should have received a reply by now");
1:ddf0b2a:         }
1:ddf0b2a:         replyConsumer.close();
1:ddf0b2a: 
1:ddf0b2a:         assertEquals("Should not have had any failures: " + failures, 0, failures.size());
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     private Connection createConnection(String clientId) throws JMSException {
1:240278d:         return JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "password", clientId);
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     protected void syncConsumeLoop(MessageConsumer requestConsumer) {
1:ddf0b2a:         try {
1:ddf0b2a:             Message message = requestConsumer.receive(5000);
1:ddf0b2a:             if (message != null) {
1:ddf0b2a:                 onMessage(message);
1:ddf0b2a:             } else {
1:ddf0b2a:                 LOG.error("No message received");
1:ddf0b2a:             }
1:ddf0b2a:         } catch (JMSException e) {
1:ddf0b2a:             onException(e);
1:ddf0b2a:         }
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     @Override
1:ddf0b2a:     public void onMessage(Message message) {
1:ddf0b2a:         try {
1:ddf0b2a:             TextMessage requestMessage = (TextMessage)message;
1:ddf0b2a: 
1:ddf0b2a:             LOG.info("Received request.");
1:ddf0b2a:             LOG.info(requestMessage.toString());
1:ddf0b2a: 
1:ddf0b2a:             Destination replyDestination = requestMessage.getJMSReplyTo();
1:ddf0b2a:             if (replyDestination instanceof Topic) {
1:ddf0b2a:                 LOG.info("Reply destination is: {}", ((Topic)replyDestination).getTopicName());
1:ddf0b2a:             } else {
1:ddf0b2a:                 LOG.info("Reply destination is: {}", ((Queue)replyDestination).getQueueName());
1:ddf0b2a:             }
1:ddf0b2a: 
1:ddf0b2a:             TextMessage replyMessage = responderSession.createTextMessage("response for: " + requestMessage.getText());
1:ddf0b2a:             replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());
1:ddf0b2a: 
1:ddf0b2a:             if (dynamicallyCreateProducer) {
1:ddf0b2a:                 responseProducer = responderSession.createProducer(replyDestination);
1:ddf0b2a:                 responseProducer.send(replyMessage);
1:ddf0b2a:             } else {
1:ddf0b2a:                 responseProducer.send(replyDestination, replyMessage);
1:ddf0b2a:             }
1:ddf0b2a: 
1:ddf0b2a:             LOG.info("Sent reply.");
1:ddf0b2a:             LOG.info(replyMessage.toString());
1:ddf0b2a:         } catch (JMSException e) {
1:ddf0b2a:             onException(e);
1:ddf0b2a:         }
1:ddf0b2a:     }
1:ddf0b2a: 
1:ddf0b2a:     protected void onException(JMSException e) {
1:ddf0b2a:         LOG.info("Caught: " + e);
1:ddf0b2a:         e.printStackTrace();
1:ddf0b2a:         failures.add(e);
1:ddf0b2a:     }
1:ddf0b2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:240278d
/////////////////////////////////////////////////////////////////////////
1: public class JMSClientRequestResponseTest extends AmqpTestSupport implements MessageListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientRequestResponseTest.class);
/////////////////////////////////////////////////////////////////////////
1:         return JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "password", clientId);
commit:36bd069
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return JmsClientContext.INSTANCE.createConnection(amqpURI, "admin", "password", clientId);
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1:         if (requestorConnection != null) {
1:             try {
1:                 requestorConnection.close();
1:             } catch (Exception e) {}
1:         }
1:         if (responderConnection != null) {
1:             try {
1:                 responderConnection.close();
1:             } catch (Exception e) {}
1:         }
commit:27833d0
/////////////////////////////////////////////////////////////////////////
commit:b2e6a41
/////////////////////////////////////////////////////////////////////////
commit:644b96a
/////////////////////////////////////////////////////////////////////////
commit:ddf0b2a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.List;
1: import java.util.Vector;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
1: import org.junit.After;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class JmsClientRequestResponseTest extends AmqpTestSupport implements MessageListener {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(JmsClientRequestResponseTest.class);
1: 
0:     @Rule public TestName name = new TestName();
1: 
1:     private Connection requestorConnection;
1:     private Destination requestDestination;
1:     private Session requestorSession;
1: 
1:     private Connection responderConnection;
1:     private MessageProducer responseProducer;
1:     private Session responderSession;
1:     private Destination replyDestination;
1: 
1:     private final List<JMSException> failures = new Vector<JMSException>();
1:     private boolean dynamicallyCreateProducer;
1:     private final boolean useAsyncConsumer = true;
1:     private Thread syncThread;
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
0:         requestorConnection.close();
0:         responderConnection.close();
1: 
1:         if (syncThread != null) {
1:             syncThread.join(5000);
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     private void doSetupConnections(boolean topic) throws Exception {
1:         responderConnection = createConnection(name.getMethodName() + "-responder");
1:         responderSession = responderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         if (topic) {
1:             requestDestination = responderSession.createTopic(name.getMethodName());
1:         } else {
1:             requestDestination = responderSession.createQueue(name.getMethodName());
1:         }
1:         responseProducer = responderSession.createProducer(null);
1: 
1:         final MessageConsumer requestConsumer = responderSession.createConsumer(requestDestination);
1:         if (useAsyncConsumer) {
1:             requestConsumer.setMessageListener(this);
1:         } else {
1:             syncThread = new Thread(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     syncConsumeLoop(requestConsumer);
1:                 }
1:             });
1:             syncThread.start();
1:         }
1:         responderConnection.start();
1: 
1:         requestorConnection = createConnection(name.getMethodName() + "-requestor");
1:         requestorSession = requestorConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         if (topic) {
1:             replyDestination = requestorSession.createTemporaryTopic();
1:         } else {
1:             replyDestination = requestorSession.createTemporaryQueue();
1:         }
1:         requestorConnection.start();
1:     }
1: 
1:     @Test(timeout=60000)
1:     public void testRequestResponseToTempQueue() throws Exception {
1:         doSetupConnections(false);
1:         doTestRequestResponse();
1:     }
1: 
1:     @Test(timeout=60000)
1:     public void testRequestResponseToTempTopic() throws Exception {
1:         doSetupConnections(true);
1:         doTestRequestResponse();
1:     }
1: 
1:     private void doTestRequestResponse() throws Exception {
1: 
1:         MessageProducer requestProducer = requestorSession.createProducer(requestDestination);
1:         MessageConsumer replyConsumer = requestorSession.createConsumer(replyDestination);
1: 
1:         TextMessage requestMessage = requestorSession.createTextMessage("SomeRequest");
1:         requestMessage.setJMSReplyTo(replyDestination);
1:         requestProducer.send(requestMessage);
1: 
1:         LOG.info("Sent request to destination: {}", requestDestination.toString());
1: 
1:         Message msg = replyConsumer.receive(10000);
1: 
1:         if (msg instanceof TextMessage) {
1:             TextMessage replyMessage = (TextMessage)msg;
1:             LOG.info("Received reply.");
1:             LOG.info(replyMessage.toString());
1:             assertTrue("Wrong message content", replyMessage.getText().startsWith("response"));
1:         } else {
1:             fail("Should have received a reply by now");
1:         }
1:         replyConsumer.close();
1: 
1:         assertEquals("Should not have had any failures: " + failures, 0, failures.size());
1:     }
1: 
1:     /**
0:      * Can be overridden in subclasses to test against a different transport suchs as NIO.
1:      *
0:      * @return the port to connect to on the Broker.
1:      */
0:     protected int getBrokerPort() {
0:         return port;
1:     }
1: 
1:     private Connection createConnection(String clientId) throws JMSException {
0:         return createConnection(clientId, false, false);
1:     }
1: 
0:     protected Connection createConnection(String clientId, boolean syncPublish, boolean useSsl) throws JMSException {
1: 
0:         int brokerPort = getBrokerPort();
0:         LOG.debug("Creating connection on port {}", brokerPort);
0:         final ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", brokerPort, "admin", "password", null, useSsl);
1: 
0:         factory.setSyncPublish(syncPublish);
0:         factory.setTopicPrefix("topic://");
0:         factory.setQueuePrefix("queue://");
1: 
0:         final Connection connection = factory.createConnection();
0:         if (clientId != null && !clientId.isEmpty()) {
0:             connection.setClientID(clientId);
1:         }
0:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
0:             public void onException(JMSException exception) {
0:                 exception.printStackTrace();
1:             }
1:         });
0:         connection.start();
0:         return connection;
1:     }
1: 
1:     protected void syncConsumeLoop(MessageConsumer requestConsumer) {
1:         try {
1:             Message message = requestConsumer.receive(5000);
1:             if (message != null) {
1:                 onMessage(message);
1:             } else {
1:                 LOG.error("No message received");
1:             }
1:         } catch (JMSException e) {
1:             onException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public void onMessage(Message message) {
1:         try {
1:             TextMessage requestMessage = (TextMessage)message;
1: 
1:             LOG.info("Received request.");
1:             LOG.info(requestMessage.toString());
1: 
1:             Destination replyDestination = requestMessage.getJMSReplyTo();
1:             if (replyDestination instanceof Topic) {
1:                 LOG.info("Reply destination is: {}", ((Topic)replyDestination).getTopicName());
1:             } else {
1:                 LOG.info("Reply destination is: {}", ((Queue)replyDestination).getQueueName());
1:             }
1: 
1:             TextMessage replyMessage = responderSession.createTextMessage("response for: " + requestMessage.getText());
1:             replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());
1: 
1:             if (dynamicallyCreateProducer) {
1:                 responseProducer = responderSession.createProducer(replyDestination);
1:                 responseProducer.send(replyMessage);
1:             } else {
1:                 responseProducer.send(replyDestination, replyMessage);
1:             }
1: 
1:             LOG.info("Sent reply.");
1:             LOG.info(replyMessage.toString());
1:         } catch (JMSException e) {
1:             onException(e);
1:         }
1:     }
1: 
1:     protected void onException(JMSException e) {
1:         LOG.info("Caught: " + e);
1:         e.printStackTrace();
1:         failures.add(e);
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e9126f3
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
0: @Ignore("Until https://issues.apache.org/jira/browse/PROTON-588 and https://issues.apache.org/jira/browse/QPID-5792 are fixed")
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:ed11b06
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: 
============================================================================