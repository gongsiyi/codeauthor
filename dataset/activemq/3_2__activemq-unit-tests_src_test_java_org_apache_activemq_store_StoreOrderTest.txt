1:24a7626: /**
1:24a7626:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:24a7626:  * contributor license agreements.  See the NOTICE file distributed with
1:24a7626:  * this work for additional information regarding copyright ownership.
1:24a7626:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:24a7626:  * (the "License"); you may not use this file except in compliance with
1:24a7626:  * the License.  You may obtain a copy of the License at
1:24a7626:  *
1:24a7626:  *      http://www.apache.org/licenses/LICENSE-2.0
1:24a7626:  *
1:24a7626:  * Unless required by applicable law or agreed to in writing, software
1:24a7626:  * distributed under the License is distributed on an "AS IS" BASIS,
1:24a7626:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:24a7626:  * See the License for the specific language governing permissions and
1:24a7626:  * limitations under the License.
1:24a7626:  */
1:24a7626: package org.apache.activemq.store;
1:24a7626: 
1:24a7626: import static org.junit.Assert.assertEquals;
1:a6a6a70: import static org.junit.Assert.assertNotNull;
1:24a7626: import static org.junit.Assert.assertTrue;
1:24a7626: import static org.junit.Assert.fail;
1:24a7626: 
1:24a7626: import java.util.concurrent.CountDownLatch;
1:24a7626: import java.util.concurrent.Executor;
1:24a7626: import java.util.concurrent.Executors;
1:24a7626: import java.util.concurrent.TimeUnit;
1:24a7626: 
1:24a7626: import javax.jms.ConnectionFactory;
1:24a7626: import javax.jms.Destination;
1:24a7626: import javax.jms.MessageConsumer;
1:24a7626: import javax.jms.MessageProducer;
1:24a7626: import javax.jms.Session;
1:24a7626: import javax.jms.TextMessage;
1:24a7626: 
1:24a7626: import org.apache.activemq.ActiveMQConnection;
1:24a7626: import org.apache.activemq.ActiveMQConnectionFactory;
1:24a7626: import org.apache.activemq.broker.BrokerService;
1:24a7626: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:24a7626: import org.apache.activemq.broker.region.policy.PolicyMap;
1:24a7626: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:24a7626: import org.junit.After;
1:24a7626: import org.junit.Before;
1:24a7626: import org.junit.Test;
1:24a7626: 
1:24a7626: //  https://issues.apache.org/activemq/browse/AMQ-2594
1:24a7626: public abstract class StoreOrderTest {
1:24a7626: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(StoreOrderTest.class);
1:24a7626:     
1:24a7626:     protected BrokerService broker;
1:24a7626:     private ActiveMQConnection connection;
1:24a7626:     public Destination destination = new ActiveMQQueue("StoreOrderTest?consumer.prefetchSize=0");
1:24a7626:     
1:24a7626:     protected abstract void setPersistentAdapter(BrokerService brokerService) throws Exception;
1:24a7626:     protected void dumpMessages() throws Exception {}
1:24a7626: 
1:24a7626:     public class TransactedSend implements Runnable {
1:24a7626: 
1:24a7626:         private CountDownLatch readyForCommit;
1:24a7626:         private CountDownLatch firstDone;
1:24a7626:         private boolean first;
1:24a7626:         private Session session;
1:24a7626:         private MessageProducer producer;
1:24a7626: 
1:24a7626:         public TransactedSend(CountDownLatch readyForCommit,
1:24a7626:                 CountDownLatch firstDone, boolean b) throws Exception {
1:24a7626:             this.readyForCommit = readyForCommit;
1:24a7626:             this.firstDone = firstDone;
1:24a7626:             this.first = b;
1:24a7626:             session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:24a7626:             producer = session.createProducer(destination);
1:24a7626:         }
1:24a7626: 
1:24a7626:         public void run() {
1:24a7626:             try {
1:24a7626:                 if (!first) {              
1:24a7626:                     firstDone.await(30, TimeUnit.SECONDS);
1:24a7626:                 }
1:24a7626:                 producer.send(session.createTextMessage(first ? "first" : "second"));
1:24a7626:                 if (first) {
1:24a7626:                     firstDone.countDown();
1:24a7626:                 }
1:24a7626:                 readyForCommit.countDown();
1:24a7626:             
1:24a7626:             } catch (Exception e) {
1:24a7626:                 e.printStackTrace();
1:24a7626:                 fail("unexpected ex on run " + e);
1:24a7626:             }
1:24a7626:         }
1:24a7626:         
1:24a7626:         public void commit() throws Exception {
1:24a7626:             session.commit();
1:24a7626:             session.close();
1:24a7626:         }
1:24a7626:     }
1:24a7626: 
1:24a7626:     @Before
1:24a7626:     public void setup() throws Exception {
1:24a7626:         broker = createBroker();
1:24a7626:         initConnection();
1:24a7626:     }
1:24a7626:     
1:24a7626:     public void initConnection() throws Exception {
1:24a7626:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:24a7626:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:24a7626:         connection.setWatchTopicAdvisories(false);
1:24a7626:         connection.start();
1:24a7626:     }
1:24a7626: 
1:24a7626:     @After
1:24a7626:     public void stopBroker() throws Exception {
1:24a7626:         if (connection != null) {
1:24a7626:             connection.close();
1:24a7626:         }
1:24a7626:         if (broker != null) {
1:24a7626:             broker.stop();
1:24a7626:         }
1:24a7626:     }
1:24a7626:     
1:24a7626:     @Test
1:a6a6a70:     public void testCompositeSendReceiveAfterRestart() throws Exception {
1:a6a6a70:         destination = new ActiveMQQueue("StoreOrderTest,SecondStoreOrderTest");
1:a6a6a70:         enqueueOneMessage();
1:a6a6a70:         
1:a6a6a70:         LOG.info("restart broker");
1:a6a6a70:         stopBroker();
1:a6a6a70:         broker = createRestartedBroker();
1:a6a6a70:         dumpMessages();
1:a6a6a70:         initConnection();
1:a6a6a70:         destination = new ActiveMQQueue("StoreOrderTest");
1:a6a6a70:         assertNotNull("got one message from first dest", receiveOne());
1:a6a6a70:         dumpMessages();
1:a6a6a70:         destination = new ActiveMQQueue("SecondStoreOrderTest");
1:a6a6a70:         assertNotNull("got one message from second dest", receiveOne());
1:24a7626:     }
1:a6a6a70:     
1:a6a6a70:     @Test
1:24a7626:     public void validateUnorderedTxCommit() throws Exception {
1:24a7626:         
1:24a7626:         Executor executor = Executors.newCachedThreadPool();
1:24a7626:         CountDownLatch readyForCommit = new CountDownLatch(2);
1:24a7626:         CountDownLatch firstDone = new CountDownLatch(1);
1:24a7626:         
1:24a7626:         TransactedSend first = new TransactedSend(readyForCommit, firstDone, true);
1:24a7626:         TransactedSend second = new TransactedSend(readyForCommit, firstDone, false);
1:24a7626:         executor.execute(first);
1:24a7626:         executor.execute(second);
1:24a7626:         
1:24a7626:         assertTrue("both started", readyForCommit.await(20, TimeUnit.SECONDS));
1:24a7626:         
1:24a7626:         LOG.info("commit out of order");        
1:24a7626:         // send interleaved so sequence id at time of commit could be reversed
1:24a7626:         second.commit();
1:24a7626:         
1:24a7626:         // force usage over the limit before second commit to flush cache
1:24a7626:         enqueueOneMessage();
1:24a7626:         
1:24a7626:         // can get lost in the cursor as it is behind the last sequenceId that was cached
1:24a7626:         first.commit();
1:24a7626:         
1:24a7626:         LOG.info("send/commit done..");
1:24a7626:         
1:24a7626:         dumpMessages();
1:24a7626:         
1:24a7626:         String received1, received2, received3 = null;
1:24a7626:         if (true) {
1:24a7626:             LOG.info("receive and rollback...");
1:24a7626:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:24a7626:             received1 = receive(session);
1:24a7626:             received2 = receive(session);
1:24a7626:             received3 = receive(session);
1:24a7626:             
1:24a7626:             assertEquals("second", received1);
1:24a7626:             assertEquals("middle", received2);
1:24a7626:             assertEquals("first", received3);
1:24a7626:             
1:24a7626:             session.rollback();
1:24a7626:             session.close();
1:24a7626:         }
1:24a7626:         
1:24a7626:         
1:24a7626:         LOG.info("restart broker");
1:24a7626:         stopBroker();
1:24a7626:         broker = createRestartedBroker();
1:24a7626:         initConnection();
1:24a7626:         
1:24a7626:         if (true) {
1:24a7626:             LOG.info("receive and rollback after restart...");
1:24a7626:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:24a7626:             received1 = receive(session);
1:24a7626:             received2 = receive(session);
1:24a7626:             received3 = receive(session);
1:24a7626:             assertEquals("second", received1);
1:24a7626:             assertEquals("middle", received2);
1:24a7626:             assertEquals("first", received3);
1:24a7626:             session.rollback();
1:24a7626:             session.close();
1:24a7626:         }
1:24a7626:         
1:24a7626:         LOG.info("receive and ack each message");
1:24a7626:         received1 = receiveOne();
1:24a7626:         received2 = receiveOne();
1:24a7626:         received3 = receiveOne();
1:24a7626:         
1:24a7626:         assertEquals("second", received1);
1:24a7626:         assertEquals("middle", received2);
1:24a7626:         assertEquals("first", received3);
1:24a7626:     }
1:24a7626:     
1:24a7626:     private void enqueueOneMessage() throws Exception {
1:24a7626:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:24a7626:         MessageProducer producer = session.createProducer(destination);
1:24a7626:         producer.send(session.createTextMessage("middle"));
1:24a7626:         session.commit();
1:24a7626:         session.close();
1:24a7626:     }
1:24a7626: 
1:24a7626: 
1:24a7626:     private String receiveOne() throws Exception {
1:24a7626:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:24a7626:         String received = receive(session);
1:24a7626:         session.commit();
1:24a7626:         session.close();
1:24a7626:         return received;
1:24a7626:     }
1:24a7626:     
1:24a7626:     private String receive(Session session) throws Exception {
1:24a7626:         MessageConsumer consumer = session.createConsumer(destination);
1:24a7626:         String result = null;
1:24a7626:         TextMessage message = (TextMessage) consumer.receive(5000);
1:24a7626:         if (message != null) {
1:24a7626:             LOG.info("got message: " + message);
1:24a7626:             result  = message.getText();
1:24a7626:         }
1:24a7626:         consumer.close();
1:24a7626:         return result;
1:24a7626:     }
1:24a7626: 
1:24a7626:     protected BrokerService createBroker() throws Exception {
1:24a7626:         boolean deleteMessagesOnStartup = true;
1:24a7626:         return startBroker(deleteMessagesOnStartup);
1:24a7626:     }
1:24a7626:     
1:24a7626:     protected BrokerService createRestartedBroker() throws Exception {
1:24a7626:         boolean deleteMessagesOnStartup = false;
1:24a7626:         return startBroker(deleteMessagesOnStartup);
1:24a7626:     }   
1:24a7626: 
1:24a7626:     protected BrokerService startBroker(boolean deleteMessagesOnStartup) throws Exception {
1:24a7626:         BrokerService newBroker = new BrokerService();   
1:24a7626:         configureBroker(newBroker);
1:24a7626:         newBroker.setDeleteAllMessagesOnStartup(deleteMessagesOnStartup);
1:24a7626:         newBroker.start();
1:24a7626:         return newBroker;
1:24a7626:     }
1:24a7626:     
1:24a7626:     protected void configureBroker(BrokerService brokerService) throws Exception {
1:24a7626:         setPersistentAdapter(brokerService);
1:24a7626:         brokerService.setAdvisorySupport(false);
1:24a7626:         
1:24a7626:         PolicyMap map = new PolicyMap();
1:24a7626:         PolicyEntry defaultEntry = new PolicyEntry();
1:24a7626:         defaultEntry.setMemoryLimit(1024*3);
1:24a7626:         defaultEntry.setCursorMemoryHighWaterMark(68);
1:a6a6a70:         defaultEntry.setExpireMessagesPeriod(0);
1:24a7626:         map.setDefaultEntry(defaultEntry);
1:24a7626:         brokerService.setDestinationPolicy(map);
1:8bf987b:     }
1:24a7626: 
1:24a7626: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(StoreOrderTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:24a7626
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: //  https://issues.apache.org/activemq/browse/AMQ-2594
1: public abstract class StoreOrderTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(StoreOrderTest.class);
1:     
1:     protected BrokerService broker;
1:     private ActiveMQConnection connection;
1:     public Destination destination = new ActiveMQQueue("StoreOrderTest?consumer.prefetchSize=0");
1:     
1:     protected abstract void setPersistentAdapter(BrokerService brokerService) throws Exception;
1:     protected void dumpMessages() throws Exception {}
1: 
1:     public class TransactedSend implements Runnable {
1: 
1:         private CountDownLatch readyForCommit;
1:         private CountDownLatch firstDone;
1:         private boolean first;
1:         private Session session;
1:         private MessageProducer producer;
1: 
1:         public TransactedSend(CountDownLatch readyForCommit,
1:                 CountDownLatch firstDone, boolean b) throws Exception {
1:             this.readyForCommit = readyForCommit;
1:             this.firstDone = firstDone;
1:             this.first = b;
1:             session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             producer = session.createProducer(destination);
1:         }
1: 
1:         public void run() {
1:             try {
1:                 if (!first) {              
1:                     firstDone.await(30, TimeUnit.SECONDS);
1:                 }
1:                 producer.send(session.createTextMessage(first ? "first" : "second"));
1:                 if (first) {
1:                     firstDone.countDown();
1:                 }
1:                 readyForCommit.countDown();
1:             
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 fail("unexpected ex on run " + e);
1:             }
1:         }
1:         
1:         public void commit() throws Exception {
1:             session.commit();
1:             session.close();
1:         }
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         broker = createBroker();
1:         initConnection();
1:     }
1:     
1:     public void initConnection() throws Exception {
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setWatchTopicAdvisories(false);
1:         connection.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1:     
1:     @Test
1:     public void validateUnorderedTxCommit() throws Exception {
1:         
1:         Executor executor = Executors.newCachedThreadPool();
1:         CountDownLatch readyForCommit = new CountDownLatch(2);
1:         CountDownLatch firstDone = new CountDownLatch(1);
1:         
1:         TransactedSend first = new TransactedSend(readyForCommit, firstDone, true);
1:         TransactedSend second = new TransactedSend(readyForCommit, firstDone, false);
1:         executor.execute(first);
1:         executor.execute(second);
1:         
1:         assertTrue("both started", readyForCommit.await(20, TimeUnit.SECONDS));
1:         
1:         LOG.info("commit out of order");        
1:         // send interleaved so sequence id at time of commit could be reversed
1:         second.commit();
1:         
1:         // force usage over the limit before second commit to flush cache
1:         enqueueOneMessage();
1:         
1:         // can get lost in the cursor as it is behind the last sequenceId that was cached
1:         first.commit();
1:         
1:         LOG.info("send/commit done..");
1:         
1:         dumpMessages();
1:         
1:         String received1, received2, received3 = null;
1:         if (true) {
1:             LOG.info("receive and rollback...");
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             received1 = receive(session);
1:             received2 = receive(session);
1:             received3 = receive(session);
1:             
1:             assertEquals("second", received1);
1:             assertEquals("middle", received2);
1:             assertEquals("first", received3);
1:             
1:             session.rollback();
1:             session.close();
1:         }
1:         
1:         
1:         LOG.info("restart broker");
1:         stopBroker();
1:         broker = createRestartedBroker();
1:         initConnection();
1:         
1:         if (true) {
1:             LOG.info("receive and rollback after restart...");
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             received1 = receive(session);
1:             received2 = receive(session);
1:             received3 = receive(session);
1:             assertEquals("second", received1);
1:             assertEquals("middle", received2);
1:             assertEquals("first", received3);
1:             session.rollback();
1:             session.close();
1:         }
1:         
1:         LOG.info("receive and ack each message");
1:         received1 = receiveOne();
1:         received2 = receiveOne();
1:         received3 = receiveOne();
1:         
1:         assertEquals("second", received1);
1:         assertEquals("middle", received2);
1:         assertEquals("first", received3);
1:     }
1:     
1:     private void enqueueOneMessage() throws Exception {
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage("middle"));
1:         session.commit();
1:         session.close();
1:     }
1: 
1: 
1:     private String receiveOne() throws Exception {
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         String received = receive(session);
1:         session.commit();
1:         session.close();
1:         return received;
1:     }
1:     
1:     private String receive(Session session) throws Exception {
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         String result = null;
1:         TextMessage message = (TextMessage) consumer.receive(5000);
1:         if (message != null) {
1:             LOG.info("got message: " + message);
1:             result  = message.getText();
1:         }
1:         consumer.close();
1:         return result;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         boolean deleteMessagesOnStartup = true;
1:         return startBroker(deleteMessagesOnStartup);
1:     }
1:     
1:     protected BrokerService createRestartedBroker() throws Exception {
1:         boolean deleteMessagesOnStartup = false;
1:         return startBroker(deleteMessagesOnStartup);
1:     }   
1: 
1:     protected BrokerService startBroker(boolean deleteMessagesOnStartup) throws Exception {
1:         BrokerService newBroker = new BrokerService();   
1:         configureBroker(newBroker);
1:         newBroker.setDeleteAllMessagesOnStartup(deleteMessagesOnStartup);
1:         newBroker.start();
1:         return newBroker;
1:     }
1:     
1:     protected void configureBroker(BrokerService brokerService) throws Exception {
1:         setPersistentAdapter(brokerService);
1:         brokerService.setAdvisorySupport(false);
1:         
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setMemoryLimit(1024*3);
1:         defaultEntry.setCursorMemoryHighWaterMark(68);
1:         map.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(map);
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1:     public void testCompositeSendReceiveAfterRestart() throws Exception {
1:         destination = new ActiveMQQueue("StoreOrderTest,SecondStoreOrderTest");
1:         enqueueOneMessage();
1:         
1:         LOG.info("restart broker");
1:         stopBroker();
1:         broker = createRestartedBroker();
1:         dumpMessages();
1:         initConnection();
1:         destination = new ActiveMQQueue("StoreOrderTest");
1:         assertNotNull("got one message from first dest", receiveOne());
1:         dumpMessages();
1:         destination = new ActiveMQQueue("SecondStoreOrderTest");
1:         assertNotNull("got one message from second dest", receiveOne());
0:     }
1:     
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         defaultEntry.setExpireMessagesPeriod(0);
============================================================================