1:57f5d49: /**
1:57f5d49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5d49:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5d49:  * this work for additional information regarding copyright ownership.
1:57f5d49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5d49:  * (the "License"); you may not use this file except in compliance with
1:57f5d49:  * the License.  You may obtain a copy of the License at
1:57f5d49:  *
1:57f5d49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5d49:  *
1:57f5d49:  * Unless required by applicable law or agreed to in writing, software
1:57f5d49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5d49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5d49:  * See the License for the specific language governing permissions and
1:57f5d49:  * limitations under the License.
1:57f5d49:  */
1:57f5d49: package org.apache.activemq.usecases;
1:57f5d49: 
1:57f5d49: import org.apache.activemq.ActiveMQConnectionFactory;
1:57f5d49: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1:57f5d49: import org.apache.activemq.broker.BrokerFactory;
1:57f5d49: import org.apache.activemq.broker.BrokerService;
1:57f5d49: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:57f5d49: import org.apache.activemq.broker.region.policy.PolicyMap;
1:57f5d49: import org.apache.activemq.command.ActiveMQQueue;
1:57f5d49: import org.apache.activemq.command.ActiveMQTopic;
1:57f5d49: import org.apache.activemq.store.PersistenceAdapter;
1:57f5d49: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:57f5d49: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:57f5d49: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:57f5d49: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1:57f5d49: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:57f5d49: import org.junit.After;
1:57f5d49: import org.junit.Before;
1:57f5d49: import org.junit.Rule;
1:57f5d49: import org.junit.rules.TestName;
1:57f5d49: import org.slf4j.Logger;
1:57f5d49: import org.slf4j.LoggerFactory;
1:57f5d49: 
1:57f5d49: import javax.jms.Connection;
1:57f5d49: import javax.jms.ConnectionFactory;
1:57f5d49: import javax.jms.Destination;
1:57f5d49: import javax.jms.MessageListener;
1:57f5d49: import java.io.IOException;
1:57f5d49: import java.util.ArrayList;
1:57f5d49: import java.util.List;
1:57f5d49: 
1:57f5d49: import static org.junit.Assert.assertTrue;
1:57f5d49: 
1:57f5d49: public abstract class DurableSubscriptionOfflineTestBase {
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineTestBase.class);
1:57f5d49:     public boolean usePrioritySupport = Boolean.TRUE;
1:57f5d49:     public int journalMaxFileLength = Journal.DEFAULT_MAX_FILE_LENGTH;
1:57f5d49:     public boolean keepDurableSubsActive = true;
1:57f5d49:     protected BrokerService broker;
1:57f5d49:     protected ActiveMQTopic topic;
1:57f5d49:     protected final List<Throwable> exceptions = new ArrayList<Throwable>();
1:57f5d49:     protected ActiveMQConnectionFactory connectionFactory;
1:57f5d49:     protected boolean isTopic = true;
1:57f5d49:     public PersistenceAdapterChoice defaultPersistenceAdapter = PersistenceAdapterChoice.KahaDB;
1:57f5d49: 
1:57f5d49:     @Rule
1:57f5d49:     public TestName testName = new TestName();
1:57f5d49: 
1:57f5d49:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:57f5d49:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:57f5d49:         connectionFactory.setWatchTopicAdvisories(false);
1:57f5d49:         return connectionFactory;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected Connection createConnection() throws Exception {
1:57f5d49:         return createConnection("cliName");
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected Connection createConnection(String name) throws Exception {
1:57f5d49:         ConnectionFactory connectionFactory1 = createConnectionFactory();
1:57f5d49:         Connection connection = connectionFactory1.createConnection();
1:57f5d49:         connection.setClientID(name);
1:57f5d49:         connection.start();
1:57f5d49:         return connection;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:57f5d49:         if (connectionFactory == null) {
1:57f5d49:             connectionFactory = createConnectionFactory();
1:57f5d49:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:57f5d49:         }
1:57f5d49:         return connectionFactory;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Before
1:57f5d49:     public void setUp() throws Exception {
1:57f5d49:         exceptions.clear();
1:57f5d49:         topic = (ActiveMQTopic) createDestination();
1:57f5d49:         createBroker();
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @After
1:57f5d49:     public void tearDown() throws Exception {
1:57f5d49:         destroyBroker();
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected void createBroker() throws Exception {
1:57f5d49:         createBroker(true);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected void createBroker(boolean deleteAllMessages) throws Exception {
1:57f5d49:         String currentTestName = getName(true);
1:57f5d49:         broker = BrokerFactory.createBroker("broker:(vm://" + currentTestName +")");
1:57f5d49:         broker.setBrokerName(currentTestName);
1:57f5d49:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:57f5d49:         broker.getManagementContext().setCreateConnector(false);
1:57f5d49:         broker.setAdvisorySupport(false);
1:57f5d49:         broker.setKeepDurableSubsActive(keepDurableSubsActive);
1:57f5d49:         broker.addConnector("tcp://0.0.0.0:0");
1:57f5d49: 
1:57f5d49:         if (usePrioritySupport) {
1:57f5d49:             PolicyEntry policy = new PolicyEntry();
1:57f5d49:             policy.setPrioritizedMessages(true);
1:57f5d49:             PolicyMap policyMap = new PolicyMap();
1:57f5d49:             policyMap.setDefaultEntry(policy);
1:57f5d49:             broker.setDestinationPolicy(policyMap);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         setDefaultPersistenceAdapter(broker);
1:57f5d49:         if (broker.getPersistenceAdapter() instanceof JDBCPersistenceAdapter) {
1:57f5d49:             // ensure it kicks in during tests
1:57f5d49:             ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).setCleanupPeriod(2*1000);
1:57f5d49:         } else if (broker.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1:57f5d49:             // have lots of journal files
1:57f5d49:             ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).setJournalMaxFileLength(journalMaxFileLength);
1:57f5d49:         }
1:cc9b9b0: 
1:cc9b9b0:         configurePlugins(broker);
1:57f5d49:         broker.start();
1:57f5d49:         broker.waitUntilStarted();
1:57f5d49:     }
1:57f5d49: 
1:cc9b9b0:     public void configurePlugins(BrokerService broker) throws Exception {
1:cc9b9b0:     }
1:cc9b9b0: 
1:57f5d49:     protected void destroyBroker() throws Exception {
1:57f5d49:         if (broker != null)
1:57f5d49:             broker.stop();
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected Destination createDestination(String subject) {
1:57f5d49:         if (isTopic) {
1:57f5d49:             return new ActiveMQTopic(subject);
1:57f5d49:         } else {
1:57f5d49:             return new ActiveMQQueue(subject);
1:57f5d49:         }
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected Destination createDestination() {
1:57f5d49:         return createDestination(getDestinationString());
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     /**
1:57f5d49:      * Returns the name of the destination used in this test case
1:57f5d49:      */
1:57f5d49:     protected String getDestinationString() {
1:57f5d49:         return getClass().getName() + "." + getName(true);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49: 
1:57f5d49:     public String getName() {
1:57f5d49:         return getName(false);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     protected String getName(boolean original) {
1:57f5d49:         String currentTestName = testName.getMethodName();
1:57f5d49:         currentTestName = currentTestName.replace("[","");
1:57f5d49:         currentTestName = currentTestName.replace("]","");
1:57f5d49:         return currentTestName;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:57f5d49:         return setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {
1:57f5d49:         PersistenceAdapter adapter = null;
1:57f5d49:         switch (choice) {
1:57f5d49:             case JDBC:
1:57f5d49:                 LOG.debug(">>>> setPersistenceAdapter to JDBC ");
1:57f5d49:                 adapter = new JDBCPersistenceAdapter();
1:57f5d49:                 break;
1:57f5d49:             case KahaDB:
1:57f5d49:                 LOG.debug(">>>> setPersistenceAdapter to KahaDB ");
1:57f5d49:                 adapter = new KahaDBPersistenceAdapter();
1:57f5d49:                 break;
1:57f5d49:             case LevelDB:
1:57f5d49:                 LOG.debug(">>>> setPersistenceAdapter to LevelDB ");
1:57f5d49:                 adapter = new LevelDBPersistenceAdapter();
1:57f5d49:                 break;
1:57f5d49:             case MEM:
1:57f5d49:                 LOG.debug(">>>> setPersistenceAdapter to MEM ");
1:57f5d49:                 adapter = new MemoryPersistenceAdapter();
1:57f5d49:                 break;
1:57f5d49:         }
1:57f5d49:         broker.setPersistenceAdapter(adapter);
1:57f5d49:         return adapter;
1:57f5d49:     }
1:57f5d49: }
1:57f5d49: 
1:57f5d49: class DurableSubscriptionOfflineTestListener implements MessageListener {
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineTestListener.class);
1:57f5d49:     int count = 0;
1:57f5d49:     String id = null;
1:57f5d49: 
1:57f5d49:     DurableSubscriptionOfflineTestListener() {}
1:57f5d49: 
1:57f5d49:     DurableSubscriptionOfflineTestListener(String id) {
1:57f5d49:         this.id = id;
1:57f5d49:     }
1:57f5d49:     @Override
1:57f5d49:     public void onMessage(javax.jms.Message message) {
1:57f5d49:         count++;
1:57f5d49:         if (id != null) {
1:57f5d49:             try {
1:57f5d49:                 LOG.info(id + ", " + message.getJMSMessageID());
1:57f5d49:             } catch (Exception ignored) {}
1:57f5d49:         }
1:57f5d49:     }
1:57f5d49: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cc9b9b0
/////////////////////////////////////////////////////////////////////////
1: 
1:         configurePlugins(broker);
1:     public void configurePlugins(BrokerService broker) throws Exception {
1:     }
1: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:57f5d49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.MessageListener;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public abstract class DurableSubscriptionOfflineTestBase {
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineTestBase.class);
1:     public boolean usePrioritySupport = Boolean.TRUE;
1:     public int journalMaxFileLength = Journal.DEFAULT_MAX_FILE_LENGTH;
1:     public boolean keepDurableSubsActive = true;
1:     protected BrokerService broker;
1:     protected ActiveMQTopic topic;
1:     protected final List<Throwable> exceptions = new ArrayList<Throwable>();
1:     protected ActiveMQConnectionFactory connectionFactory;
1:     protected boolean isTopic = true;
1:     public PersistenceAdapterChoice defaultPersistenceAdapter = PersistenceAdapterChoice.KahaDB;
1: 
1:     @Rule
1:     public TestName testName = new TestName();
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         return createConnection("cliName");
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         ConnectionFactory connectionFactory1 = createConnectionFactory();
1:         Connection connection = connectionFactory1.createConnection();
1:         connection.setClientID(name);
1:         connection.start();
1:         return connection;
1:     }
1: 
1:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         if (connectionFactory == null) {
1:             connectionFactory = createConnectionFactory();
1:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:         }
1:         return connectionFactory;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         exceptions.clear();
1:         topic = (ActiveMQTopic) createDestination();
1:         createBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         destroyBroker();
1:     }
1: 
1:     protected void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     protected void createBroker(boolean deleteAllMessages) throws Exception {
1:         String currentTestName = getName(true);
1:         broker = BrokerFactory.createBroker("broker:(vm://" + currentTestName +")");
1:         broker.setBrokerName(currentTestName);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setKeepDurableSubsActive(keepDurableSubsActive);
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         if (usePrioritySupport) {
1:             PolicyEntry policy = new PolicyEntry();
1:             policy.setPrioritizedMessages(true);
1:             PolicyMap policyMap = new PolicyMap();
1:             policyMap.setDefaultEntry(policy);
1:             broker.setDestinationPolicy(policyMap);
1:         }
1: 
1:         setDefaultPersistenceAdapter(broker);
1:         if (broker.getPersistenceAdapter() instanceof JDBCPersistenceAdapter) {
1:             // ensure it kicks in during tests
1:             ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).setCleanupPeriod(2*1000);
1:         } else if (broker.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1:             // have lots of journal files
1:             ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).setJournalMaxFileLength(journalMaxFileLength);
1:         }
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     protected Destination createDestination(String subject) {
1:         if (isTopic) {
1:             return new ActiveMQTopic(subject);
1:         } else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
1:     protected Destination createDestination() {
1:         return createDestination(getDestinationString());
1:     }
1: 
1:     /**
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
1:         return getClass().getName() + "." + getName(true);
1:     }
1: 
1: 
1:     public String getName() {
1:         return getName(false);
1:     }
1: 
1:     protected String getName(boolean original) {
1:         String currentTestName = testName.getMethodName();
1:         currentTestName = currentTestName.replace("[","");
1:         currentTestName = currentTestName.replace("]","");
1:         return currentTestName;
1:     }
1: 
1:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:         return setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:     }
1: 
1:     public PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {
1:         PersistenceAdapter adapter = null;
1:         switch (choice) {
1:             case JDBC:
1:                 LOG.debug(">>>> setPersistenceAdapter to JDBC ");
1:                 adapter = new JDBCPersistenceAdapter();
1:                 break;
1:             case KahaDB:
1:                 LOG.debug(">>>> setPersistenceAdapter to KahaDB ");
1:                 adapter = new KahaDBPersistenceAdapter();
1:                 break;
1:             case LevelDB:
1:                 LOG.debug(">>>> setPersistenceAdapter to LevelDB ");
1:                 adapter = new LevelDBPersistenceAdapter();
1:                 break;
1:             case MEM:
1:                 LOG.debug(">>>> setPersistenceAdapter to MEM ");
1:                 adapter = new MemoryPersistenceAdapter();
1:                 break;
1:         }
1:         broker.setPersistenceAdapter(adapter);
1:         return adapter;
1:     }
1: }
1: 
1: class DurableSubscriptionOfflineTestListener implements MessageListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineTestListener.class);
1:     int count = 0;
1:     String id = null;
1: 
1:     DurableSubscriptionOfflineTestListener() {}
1: 
1:     DurableSubscriptionOfflineTestListener(String id) {
1:         this.id = id;
1:     }
1:     @Override
1:     public void onMessage(javax.jms.Message message) {
1:         count++;
1:         if (id != null) {
1:             try {
1:                 LOG.info(id + ", " + message.getJMSMessageID());
1:             } catch (Exception ignored) {}
1:         }
1:     }
1: }
============================================================================