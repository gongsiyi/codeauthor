1:fc00993: /**
1:4102acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4102acc:  * contributor license agreements.  See the NOTICE file distributed with
1:4102acc:  * this work for additional information regarding copyright ownership.
1:4102acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4102acc:  * (the "License"); you may not use this file except in compliance with
1:4102acc:  * the License.  You may obtain a copy of the License at
1:4102acc:  *
1:4102acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4102acc:  *
1:4102acc:  * Unless required by applicable law or agreed to in writing, software
1:4102acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4102acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4102acc:  * See the License for the specific language governing permissions and
1:4102acc:  * limitations under the License.
1:4102acc:  */
1:4102acc: package org.apache.activemq.camel;
2:4102acc: 
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.IllegalStateException;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: 
1:4102acc: import org.apache.activemq.ActiveMQMessageProducerSupport;
1:4102acc: import org.apache.activemq.ActiveMQSession;
1:4102acc: import org.apache.activemq.util.JMSExceptionSupport;
1:4102acc: import org.apache.camel.Endpoint;
1:e183a82: import org.apache.camel.Exchange;
1:9e61ade: import org.apache.camel.ExchangePattern;
1:4102acc: import org.apache.camel.Producer;
1:e183a82: import org.apache.camel.component.jms.JmsMessage;
1:4102acc: import org.apache.camel.util.ObjectHelper;
1:4102acc: 
1:4102acc: /**
1:4102acc:  * A JMS {@link javax.jms.MessageProducer} which sends message exchanges to a
1:4102acc:  * Camel {@link Endpoint}
1:b0c2a40:  * 
1:4102acc:  * 
1:4102acc:  */
1:4102acc: public class CamelMessageProducer extends ActiveMQMessageProducerSupport {
1:ecf89a6:     
1:ecf89a6:     protected Producer producer;
1:ecf89a6: 
1:4102acc:     private final CamelDestination destination;
1:4102acc:     private final Endpoint endpoint;
1:4102acc:     private boolean closed;
1:4102acc: 
1:4102acc:     public CamelMessageProducer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:4102acc:         super(session);
1:4102acc:         this.destination = destination;
1:4102acc:         this.endpoint = endpoint;
1:4102acc:         try {
1:4102acc:             this.producer = endpoint.createProducer();
1:74a7a8b:         } catch (JMSException e) {
1:4102acc:             throw e;
1:74a7a8b:         } catch (Exception e) {
1:4102acc:             throw JMSExceptionSupport.create(e);
9:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     public CamelDestination getDestination() throws JMSException {
1:4102acc:         return destination;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public Endpoint getEndpoint() {
1:4102acc:         return endpoint;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public void close() throws JMSException {
1:4102acc:         if (!closed) {
1:4102acc:             closed = true;
1:4102acc:             try {
1:4102acc:                 producer.stop();
1:74a7a8b:             } catch (JMSException e) {
1:4102acc:                 throw e;
1:74a7a8b:             } catch (Exception e) {
1:4102acc:                 throw JMSExceptionSupport.create(e);
1:4102acc:             }
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:74a7a8b:         CamelDestination camelDestination = null;
1:e24a791:         if (ObjectHelper.equal(destination, this.destination)) {
1:4102acc:             camelDestination = this.destination;
1:74a7a8b:         } else {
1:4102acc:             // TODO support any CamelDestination?
1:4102acc:             throw new IllegalArgumentException("Invalid destination setting: " + destination + " when expected: " + this.destination);
1:4102acc:         }
1:4102acc:         try {
1:e183a82: 			Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);
1:e183a82: 			exchange.setIn(new JmsMessage(message, camelDestination.getBinding()));
1:4102acc:             producer.process(exchange);
1:74a7a8b:         } catch (JMSException e) {
1:4102acc:             throw e;
1:74a7a8b:         } catch (Exception e) {
1:4102acc:             throw JMSExceptionSupport.create(e);
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected void checkClosed() throws IllegalStateException {
1:4102acc:         if (closed) {
1:4102acc:             throw new IllegalStateException("The producer is closed");
1:74a7a8b:         }
1:4102acc:     }
1:4102acc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:9e61ade
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.ExchangePattern;
/////////////////////////////////////////////////////////////////////////
0:             JmsExchange exchange = new JmsExchange(endpoint.getContext(), ExchangePattern.InOnly, camelDestination.getBinding(), message);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected Producer producer;
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException e) {
1:             } catch (Exception e) {
1:         CamelDestination camelDestination = null;
1:         } else {
1:         } catch (JMSException e) {
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e183a82
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.Exchange;
1: import org.apache.camel.component.jms.JmsMessage;
/////////////////////////////////////////////////////////////////////////
1: 			Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);
1: 			exchange.setIn(new JmsMessage(message, camelDestination.getBinding()));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af13cfc
/////////////////////////////////////////////////////////////////////////
0:             JmsExchange exchange = new JmsExchange(endpoint, ExchangePattern.InOnly, camelDestination.getBinding(), message);
author:James Strachan
-------------------------------------------------------------------------------
commit:e24a791
/////////////////////////////////////////////////////////////////////////
1:         if (ObjectHelper.equal(destination, this.destination)) {
commit:2eefd15
/////////////////////////////////////////////////////////////////////////
0:             JmsExchange exchange = new JmsExchange(endpoint.getCamelContext(), ExchangePattern.InOnly, camelDestination.getBinding(), message);
commit:4102acc
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.ActiveMQMessageProducerSupport;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.Producer;
0: import org.apache.camel.component.jms.JmsExchange;
1: import org.apache.camel.util.ObjectHelper;
1: 
0: import javax.jms.Destination;
0: import javax.jms.IllegalStateException;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
1: 
1: /**
1:  * A JMS {@link javax.jms.MessageProducer} which sends message exchanges to a
1:  * Camel {@link Endpoint}
1:  * 
0:  * @version $Revision: $
1:  */
1: public class CamelMessageProducer extends ActiveMQMessageProducerSupport {
1:     private final CamelDestination destination;
1:     private final Endpoint endpoint;
0:     protected Producer producer;
1:     private boolean closed;
1: 
1:     public CamelMessageProducer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:         super(session);
1:         this.destination = destination;
1:         this.endpoint = endpoint;
1:         try {
1:             this.producer = endpoint.createProducer();
1:         }
0:         catch (JMSException e) {
1:             throw e;
1:         }
0:         catch (Exception e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public CamelDestination getDestination() throws JMSException {
1:         return destination;
1:     }
1: 
1:     public Endpoint getEndpoint() {
1:         return endpoint;
1:     }
1: 
1:     public void close() throws JMSException {
1:         if (!closed) {
1:             closed = true;
1:             try {
1:                 producer.stop();
1:             }
0:             catch (JMSException e) {
1:                 throw e;
1:             }
0:             catch (Exception e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:     }
1: 
1:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
0:     	CamelDestination camelDestination = null;
0:         if (ObjectHelper.equals(destination, this.destination)) {
1:             camelDestination = this.destination;
1:         }
0:         else {
1:             // TODO support any CamelDestination?
1:             throw new IllegalArgumentException("Invalid destination setting: " + destination + " when expected: " + this.destination);
1:         }
1:         try {
0:             JmsExchange exchange = new JmsExchange(endpoint.getContext(), camelDestination.getBinding(), message);
1:             producer.process(exchange);
1:         }
0:         catch (JMSException e) {
1:             throw e;
1:         }
0:         catch (Exception e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     protected void checkClosed() throws IllegalStateException {
1:         if (closed) {
1:             throw new IllegalStateException("The producer is closed");
1:         }
1:     }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
============================================================================