1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory.list;
3:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:2748ae1: import java.util.Iterator;
1:d29ca2a: import java.util.LinkedList;
1:d29ca2a: import java.util.List;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.command.ActiveMQDestination;
1:a110604: import org.apache.activemq.command.Message;
1:a110604: import org.apache.activemq.filter.DestinationFilter;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A simple fixed size {@link MessageList} where there is a single, fixed size
1:f812e34:  * list that all messages are added to for simplicity. Though this will lead to
1:f812e34:  * possibly slow recovery times as many more messages than is necessary will
1:f812e34:  * have to be iterated through for each subscription.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class SimpleMessageList implements MessageList {
1:00879cf:     private final LinkedList<MessageReference> list = new LinkedList<MessageReference>();
1:d29ca2a:     private int maximumSize = 100 * 64 * 1024;
1:d29ca2a:     private int size;
1:00879cf:     private final Object lock = new Object();
1:d29ca2a: 
1:d29ca2a:     public SimpleMessageList() {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public SimpleMessageList(int maximumSize) {
1:d29ca2a:         this.maximumSize = maximumSize;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void add(MessageReference node) {
1:d29ca2a:         int delta = node.getMessageHardRef().getSize();
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             list.add(node);
1:d29ca2a:             size += delta;
1:d29ca2a:             while (size > maximumSize) {
1:933eb2f:                 MessageReference evicted = list.removeFirst();
1:d29ca2a:                 size -= evicted.getMessageHardRef().getSize();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public List<MessageReference> getMessages(ActiveMQDestination destination) {
1:d29ca2a:         return getList();
1:d29ca2a:     }
1:f812e34: 
1:2748ae1:     public Message[] browse(ActiveMQDestination destination) {
1:933eb2f:         List<Message> result = new ArrayList<Message>();
1:f812e34:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:f812e34:         synchronized (lock) {
1:933eb2f:             for (Iterator<MessageReference> i = list.iterator(); i.hasNext();) {
1:933eb2f:                 MessageReference ref = i.next();
1:2748ae1:                 Message msg;
1:f812e34:                 msg = ref.getMessage();
1:f812e34:                 if (filter.matches(msg.getDestination())) {
1:00879cf:                     result.add(msg);
2:2748ae1:                 }
1:f812e34: 
1:2748ae1:             }
1:2748ae1:         }
1:933eb2f:         return result.toArray(new Message[result.size()]);
1:2748ae1:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns a copy of the list
1:d29ca2a:      */
1:933eb2f:     public List<MessageReference> getList() {
1:d29ca2a:         synchronized (lock) {
1:933eb2f:             return new ArrayList<MessageReference>(list);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getSize() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             return size;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void clear() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             list.clear();
1:d29ca2a:             size = 0;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
/////////////////////////////////////////////////////////////////////////
1:                 MessageReference evicted = list.removeFirst();
1:     public List<MessageReference> getMessages(ActiveMQDestination destination) {
1:         List<Message> result = new ArrayList<Message>();
1:             for (Iterator<MessageReference> i = list.iterator(); i.hasNext();) {
1:                 MessageReference ref = i.next();
/////////////////////////////////////////////////////////////////////////
1:         return result.toArray(new Message[result.size()]);
1:     public List<MessageReference> getList() {
1:             return new ArrayList<MessageReference>(list);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SimpleMessageList.class);
/////////////////////////////////////////////////////////////////////////
0:                     LOG.error("Failed to get Message from MessageReference: " + ref, e);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * list that all messages are added to for simplicity. Though this will lead to
1:  * possibly slow recovery times as many more messages than is necessary will
1:  * have to be iterated through for each subscription.
0:     static final private Log log = LogFactory.getLog(SimpleMessageList.class);
/////////////////////////////////////////////////////////////////////////
0:                 MessageReference evicted = (MessageReference)list.removeFirst();
/////////////////////////////////////////////////////////////////////////
1: 
1:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:         synchronized (lock) {
0:             for (Iterator i = list.iterator(); i.hasNext();) {
0:                 try {
1:                     msg = ref.getMessage();
1:                     if (filter.matches(msg.getDestination())) {
0:                 } catch (IOException e) {
0:                     log.error("Failed to get Message from MessageReference: " + ref, e);
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory.list;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: 
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: /**
1:  * A simple fixed size {@link MessageList} where there is a single, fixed size
0:  * list that all messages are added to for simplicity. Though this
0:  * will lead to possibly slow recovery times as many more messages
0:  * than is necessary will have to be iterated through for each subscription.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class SimpleMessageList implements MessageList {
1: 
0:     private LinkedList list = new LinkedList();
1:     private int maximumSize = 100 * 64 * 1024;
1:     private int size;
0:     private Object lock = new Object();
1: 
1:     public SimpleMessageList() {
1:     }
1: 
1:     public SimpleMessageList(int maximumSize) {
1:         this.maximumSize = maximumSize;
1:     }
1: 
1:     public void add(MessageReference node) {
1:         int delta = node.getMessageHardRef().getSize();
1:         synchronized (lock) {
1:             list.add(node);
1:             size += delta;
1:             while (size > maximumSize) {
0:                 MessageReference evicted = (MessageReference) list.removeFirst();
1:                 size -= evicted.getMessageHardRef().getSize();
1:             }
1:         }
1:     }
1: 
0:     public List getMessages(Subscription sub) {
1:         return getList();
1:     }
1: 
1:     /**
1:      * Returns a copy of the list
1:      */
0:     public List getList() {
1:         synchronized (lock) {
0:             return new ArrayList(list);
1:         }
1:     }
1: 
1:     public int getSize() {
1:         synchronized (lock) {
1:             return size;
1:         }
1:     }
1: 
1:     public void clear() {
1:         synchronized (lock) {
1:             list.clear();
1:             size = 0;
1:         }
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(SimpleMessageList.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final LinkedList<MessageReference> list = new LinkedList<MessageReference>();
1:     private final Object lock = new Object();
/////////////////////////////////////////////////////////////////////////
0:                 msg = ref.getMessage();
0:                 if (filter.matches(msg.getDestination())) {
1:                     result.add(msg);
commit:a110604
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationFilter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     public List getMessages(ActiveMQDestination destination) {
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.filter.DestinationFilter;
0: import org.apache.activemq.network.DemandForwardingBridge;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import java.io.IOException;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:     static final private Log log=LogFactory.getLog(SimpleMessageList.class);
/////////////////////////////////////////////////////////////////////////
0:     
1:     public Message[] browse(ActiveMQDestination destination) {
0:         List result = new ArrayList();
0:         DestinationFilter filter=DestinationFilter.parseFilter(destination);
0:         synchronized(lock){
0:             for (Iterator i = list.iterator(); i.hasNext();){
0:                 MessageReference ref = (MessageReference)i.next();
1:                 Message msg;
0:                 try{
0:                     msg=ref.getMessage();
0:                     if (filter.matches(msg.getDestination())){
0:                         result.add(msg);
1:                     }
0:                 }catch(IOException e){
0:                    log.error("Failed to get Message from MessageReference: " + ref,e);
1:                 }
0:                 
1:             }
1:         }
0:         return (Message[])result.toArray(new Message[result.size()]);
1:     }
============================================================================