1:c75001c: /**
1:c75001c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c75001c:  * contributor license agreements.  See the NOTICE file distributed with
1:c75001c:  * this work for additional information regarding copyright ownership.
1:c75001c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c75001c:  * (the "License"); you may not use this file except in compliance with
1:c75001c:  * the License.  You may obtain a copy of the License at
1:c75001c:  *
1:c75001c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c75001c:  *
1:c75001c:  * Unless required by applicable law or agreed to in writing, software
1:c75001c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c75001c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c75001c:  * See the License for the specific language governing permissions and
1:c75001c:  * limitations under the License.
1:c75001c:  */
1:c75001c: package org.apache.activemq.perf;
8:c75001c: 
1:f392884: import org.apache.activemq.ActiveMQConnectionFactory;
1:c75001c: import org.apache.activemq.broker.BrokerService;
1:c75001c: 
1:c75001c: /**
1:b0c2a40:  * 
1:c75001c:  */
1:c75001c: public class KahaDBDurableTopicTest extends SimpleDurableTopicTest {
1:c75001c: 
1:c75001c:     @Override
1:c75001c:     protected void setUp() throws Exception {
1:dc6dc7e:         //this.initialConsumerDelay = 10 * 1000;
1:c75001c:         super.setUp();
1:c75001c:     }
1:f392884:     
1:f392884:     @Override
1:f392884:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:f392884:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory(uri);
1:f392884:         //result.setDispatchAsync(false);
1:f392884:         return result;
1:f392884:     }
1:dc6dc7e:     
1:c75001c:     @Override
1:dc6dc7e:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:dc6dc7e:         //AMQPersistenceAdapterFactory persistenceFactory = new AMQPersistenceAdapterFactory();
1:dc6dc7e:         //persistenceFactory.setMaxFileLength(1024*16);
1:dc6dc7e:         //persistenceFactory.setPersistentIndex(true);
1:dc6dc7e:         //persistenceFactory.setCleanupInterval(10000);
1:dc6dc7e:         //answer.setPersistenceFactory(persistenceFactory);
1:c75001c:         answer.setDeleteAllMessagesOnStartup(true);
1:dc6dc7e:         answer.addConnector(uri);
1:dc6dc7e:         answer.setUseShutdownHook(false);
1:76f842d:         answer.setEnableStatistics(false);
1:c75001c:     }
1:c75001c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:76f842d
/////////////////////////////////////////////////////////////////////////
1:         answer.setEnableStatistics(false);
author:Robert Davies
-------------------------------------------------------------------------------
commit:dc6dc7e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         //this.initialConsumerDelay = 10 * 1000;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:         //AMQPersistenceAdapterFactory persistenceFactory = new AMQPersistenceAdapterFactory();
1:         //persistenceFactory.setMaxFileLength(1024*16);
1:         //persistenceFactory.setPersistentIndex(true);
1:         //persistenceFactory.setCleanupInterval(10000);
1:         //answer.setPersistenceFactory(persistenceFactory);
1:         answer.addConnector(uri);
1:         answer.setUseShutdownHook(false);
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory(uri);
1:         //result.setDispatchAsync(false);
1:         return result;
1:     }
/////////////////////////////////////////////////////////////////////////
0:         kaha.setIndexCacheSize(1000);
commit:c75001c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
0: import java.io.File;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class KahaDBDurableTopicTest extends SimpleDurableTopicTest {
1: 
1:     @Override
1:     protected void setUp() throws Exception {
0:         this.initialConsumerDelay = 10 * 1000;
1:         super.setUp();
1:     }
1: 
1:     @Override
0:     protected void configureBroker(BrokerService answer, String uri) throws Exception {
1: 
0:         File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
0:         File archiveDir = new File(dataFileDir, "archive");
0:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(dataFileDir);
0:         kaha.setDirectoryArchive(archiveDir);
0:         //kaha.setArchiveDataLogs(true);
1: 
0:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous
0:         // right now, as I have not verified
0:         // what happens if the index is updated but a journal update is lost.
0:         // Index is going to be in consistent, but can it be repaired?
0:         kaha.setEnableJournalDiskSyncs(false);
0:         // Using a bigger journal file size makes he take fewer spikes as it is
0:         // not switching files as often.
0:         // kaha.setJournalMaxFileLength(1024*1024*100);
1: 
0:         // small batch means more frequent and smaller writes
0:         kaha.setIndexWriteBatchSize(100);
0:         kaha.setIndexCacheSize(10000);
0:         // do the index write in a separate thread
0:         //kaha.setEnableIndexWriteAsync(true);
1: 
0:         answer.setPersistenceAdapter(kaha);
0:         answer.addConnector(uri);
1:         answer.setDeleteAllMessagesOnStartup(true);
1: 
1:     }
1: 
1: }
============================================================================