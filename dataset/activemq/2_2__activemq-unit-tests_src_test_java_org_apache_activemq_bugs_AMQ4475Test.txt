1:4f108ce: /**
1:4f108ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f108ce:  * contributor license agreements.  See the NOTICE file distributed with
1:4f108ce:  * this work for additional information regarding copyright ownership.
1:4f108ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f108ce:  * (the "License"); you may not use this file except in compliance with
1:4f108ce:  * the License.  You may obtain a copy of the License at
1:4f108ce:  *
1:4f108ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f108ce:  *
1:4f108ce:  * Unless required by applicable law or agreed to in writing, software
1:4f108ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f108ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f108ce:  * See the License for the specific language governing permissions and
1:4f108ce:  * limitations under the License.
1:4f108ce:  */
1:7e53814: package org.apache.activemq.bugs;
1:7e53814: 
1:7e53814: import static org.junit.Assert.assertFalse;
1:7e53814: 
1:7e53814: import java.util.ArrayList;
1:7e53814: import java.util.List;
1:7e53814: import java.util.concurrent.ExecutionException;
1:7e53814: import java.util.concurrent.ExecutorService;
1:7e53814: import java.util.concurrent.Executors;
1:7e53814: import java.util.concurrent.Future;
1:7e53814: import java.util.concurrent.TimeUnit;
1:7e53814: 
1:7e53814: import javax.jms.Connection;
1:7e53814: import javax.jms.DeliveryMode;
1:7e53814: import javax.jms.JMSException;
1:7e53814: import javax.jms.Message;
1:7e53814: import javax.jms.MessageConsumer;
1:7e53814: import javax.jms.MessageProducer;
1:7e53814: import javax.jms.Session;
1:7e53814: 
1:7e53814: import org.apache.activemq.ActiveMQConnectionFactory;
1:7e53814: import org.apache.activemq.broker.BrokerPlugin;
1:7e53814: import org.apache.activemq.broker.BrokerService;
1:7e53814: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:7e53814: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:7e53814: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7e53814: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7e53814: import org.apache.activemq.broker.util.TimeStampingBrokerPlugin;
1:7e53814: import org.apache.activemq.command.ActiveMQQueue;
1:7e53814: import org.apache.activemq.command.ActiveMQTextMessage;
1:7e53814: import org.apache.commons.logging.Log;
1:7e53814: import org.apache.commons.logging.LogFactory;
1:7e53814: import org.junit.After;
1:7e53814: import org.junit.Before;
1:7e53814: import org.junit.Test;
1:7e53814: 
1:7e53814: public class AMQ4475Test {
1:7e53814: 
1:7e53814:     private final Log LOG = LogFactory.getLog(AMQ4475Test.class);
1:7e53814: 
1:7e53814:     private final int NUM_MSGS = 1000;
1:7e53814:     private final int MAX_THREADS = 20;
1:7e53814: 
1:7e53814:     private BrokerService broker;
1:7e53814:     private String connectionUri;
1:7e53814: 
1:7e53814:     private final ExecutorService executor = Executors.newFixedThreadPool(MAX_THREADS);
1:7e53814:     private final ActiveMQQueue original = new ActiveMQQueue("jms/AQueue");
1:7e53814:     private final ActiveMQQueue rerouted = new ActiveMQQueue("jms/AQueue_proxy");
1:7e53814: 
1:7e53814:     @Before
1:7e53814:     public void setUp() throws Exception {
1:7e53814:         TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();
1:7e53814:         tsbp.setZeroExpirationOverride(432000000);
1:7e53814:         tsbp.setTtlCeiling(432000000);
1:7e53814:         tsbp.setFutureOnly(true);
1:7e53814: 
1:7e53814:         broker = new BrokerService();
1:7e53814:         broker.setPersistent(false);
1:7e53814:         broker.setUseJmx(true);
1:7e53814:         broker.setPlugins(new BrokerPlugin[] {tsbp});
1:7e53814:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:7e53814: 
1:7e53814:         // Configure Dead Letter Strategy
1:7e53814:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:7e53814:         strategy.setProcessExpired(true);
1:7e53814:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:7e53814:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:7e53814:         strategy.setProcessNonPersistent(true);
1:7e53814: 
1:7e53814:         // Add policy and individual DLQ strategy
1:7e53814:         PolicyEntry policy = new PolicyEntry();
1:7e53814:         policy.setTimeBeforeDispatchStarts(3000);
1:7e53814:         policy.setDeadLetterStrategy(strategy);
1:7e53814: 
1:7e53814:         PolicyMap pMap = new PolicyMap();
1:7e53814:         pMap.setDefaultEntry(policy);
1:7e53814: 
1:7e53814:         broker.setDestinationPolicy(pMap);
1:7e53814:         broker.start();
1:7e53814:         broker.waitUntilStarted();
1:7e53814:     }
1:7e53814: 
1:7e53814:     @After
1:7e53814:     public void after() throws Exception {
1:7e53814:         if (broker != null) {
1:7e53814:             broker.stop();
1:7e53814:             broker.waitUntilStopped();
1:7e53814:         }
1:7e53814:     }
1:7e53814: 
1:7e53814:     @Test
1:7e53814:     public void testIndividualDeadLetterAndTimeStampPlugin() {
1:7e53814:         LOG.info("Starting test ..");
1:7e53814: 
1:7e53814:         long startTime = System.nanoTime();
1:7e53814: 
1:7e53814:         // Produce to network
1:7e53814:         List<Future<ProducerTask>> tasks = new ArrayList<Future<ProducerTask>>();
1:7e53814: 
1:7e53814:         for (int index = 0; index < 1; index++) {
1:7e53814:             ProducerTask p = new ProducerTask(connectionUri, original, NUM_MSGS);
1:7e53814:             Future<ProducerTask> future = executor.submit(p, p);
1:7e53814:             tasks.add(future);
1:7e53814:         }
1:7e53814: 
1:7e53814:         ForwardingConsumerThread f1 = new ForwardingConsumerThread(original, rerouted, NUM_MSGS);
1:7e53814:         f1.start();
1:7e53814:         ConsumerThread c1 = new ConsumerThread(connectionUri, rerouted, NUM_MSGS);
1:7e53814:         c1.start();
1:7e53814: 
1:7e53814:         LOG.info("Waiting on consumers and producers to exit");
1:7e53814: 
1:7e53814:         try {
1:7e53814:             for (Future<ProducerTask> future : tasks) {
1:7e53814:                 ProducerTask e = future.get();
1:7e53814:                 LOG.info("[Completed] " + e.dest.getPhysicalName());
1:7e53814:             }
1:7e53814:             executor.shutdown();
1:7e53814:             LOG.info("Producing threads complete, waiting on ACKs");
1:7e53814:             f1.join(TimeUnit.MINUTES.toMillis(2));
1:7e53814:             c1.join(TimeUnit.MINUTES.toMillis(2));
1:7e53814:         } catch (ExecutionException e) {
1:7e53814:             LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:             throw new RuntimeException(e);
1:7e53814:         } catch (InterruptedException ie) {
1:7e53814:             LOG.warn("Caught unexpected exception: {}", ie);
1:7e53814:             throw new RuntimeException(ie);
1:7e53814:         }
1:7e53814: 
1:7e53814:         assertFalse(f1.isFailed());
1:7e53814:         assertFalse(c1.isFailed());
1:7e53814: 
1:7e53814:         long estimatedTime = System.nanoTime() - startTime;
1:7e53814: 
1:7e53814:         LOG.info("Testcase duration (seconds): " + estimatedTime / 1000000000.0);
1:7e53814:         LOG.info("Consumers and producers exited, all msgs received as expected");
1:7e53814:     }
1:7e53814: 
1:7e53814:     public class ProducerTask implements Runnable {
1:7e53814:         private final String uri;
1:7e53814:         private final ActiveMQQueue dest;
1:7e53814:         private final int count;
1:7e53814: 
1:7e53814:         public ProducerTask(String uri, ActiveMQQueue dest, int count) {
1:7e53814:             this.uri = uri;
1:7e53814:             this.dest = dest;
1:7e53814:             this.count = count;
1:7e53814:         }
1:7e53814: 
1:7e53814:         @Override
1:7e53814:         public void run() {
1:7e53814: 
1:7e53814:             Connection connection = null;
1:7e53814:             try {
1:7e53814:                 String destName = "";
1:7e53814: 
1:7e53814:                 try {
1:7e53814:                     destName = dest.getQueueName();
1:7e53814:                 } catch (JMSException e) {
1:7e53814:                     LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:                 }
1:7e53814: 
1:7e53814:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uri);
1:7e53814: 
1:7e53814:                 connection = connectionFactory.createConnection();
1:7e53814: 
1:7e53814:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7e53814:                 MessageProducer producer = session.createProducer(dest);
1:7e53814:                 connection.start();
1:7e53814: 
1:7e53814:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:7e53814: 
1:7e53814:                 String msg = "Test Message";
1:7e53814: 
1:7e53814:                 for (int i = 0; i < count; i++) {
1:7e53814:                     producer.send(session.createTextMessage(msg + dest.getQueueName() + " " + i));
1:7e53814:                 }
1:7e53814: 
1:7e53814:                 LOG.info("[" + destName + "] Sent " + count + " msgs");
1:7e53814:             } catch (Exception e) {
1:7e53814:                 LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:             } finally {
1:7e53814:                 try {
1:7e53814:                     connection.close();
1:7e53814:                 } catch (Throwable e) {
1:7e53814:                     LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:                 }
1:7e53814:             }
1:7e53814:         }
1:7e53814:     }
1:7e53814: 
1:7e53814:     public class ForwardingConsumerThread extends Thread {
1:7e53814: 
1:7e53814:         private final ActiveMQQueue original;
1:7e53814:         private final ActiveMQQueue forward;
1:7e53814:         private int blockSize = 0;
1:7e53814:         private final int PARALLEL = 1;
1:7e53814:         private boolean failed;
1:7e53814: 
1:7e53814:         public ForwardingConsumerThread(ActiveMQQueue original, ActiveMQQueue forward, int total) {
1:7e53814:             this.original = original;
1:7e53814:             this.forward = forward;
1:7e53814:             this.blockSize = total / PARALLEL;
1:7e53814:         }
1:7e53814: 
1:7e53814:         public boolean isFailed() {
1:7e53814:             return failed;
1:7e53814:         }
1:7e53814: 
1:7e53814:         @Override
1:7e53814:         public void run() {
1:7e53814:             Connection connection = null;
1:7e53814:             try {
1:7e53814: 
1:7e53814:                 for (int index = 0; index < PARALLEL; index++) {
1:7e53814: 
1:7e53814:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:7e53814: 
1:7e53814:                     connection = factory.createConnection();
1:7e53814:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7e53814:                     MessageConsumer consumer = session.createConsumer(original);
1:7e53814:                     MessageProducer producer = session.createProducer(forward);
1:7e53814:                     connection.start();
1:7e53814:                     int count = 0;
1:7e53814: 
1:7e53814:                     while (count < blockSize) {
1:7e53814: 
1:7e53814:                         Message msg1 = consumer.receive(10000);
1:7e53814:                         if (msg1 != null) {
1:7e53814:                             if (msg1 instanceof ActiveMQTextMessage) {
1:7e53814:                                 if (count % 100 == 0) {
1:7e53814:                                     LOG.info("Consuming -> " + ((ActiveMQTextMessage) msg1).getDestination() + " count=" + count);
1:7e53814:                                 }
1:7e53814: 
1:7e53814:                                 producer.send(msg1);
1:7e53814: 
1:7e53814:                                 count++;
1:7e53814:                             } else {
1:7e53814:                                 LOG.info("Skipping unknown msg type " + msg1);
1:7e53814:                             }
1:7e53814:                         } else {
1:7e53814:                             break;
1:7e53814:                         }
1:7e53814:                     }
1:7e53814: 
1:7e53814:                     LOG.info("[" + original.getQueueName() + "] completed segment (" + index + " of " + blockSize + ")");
1:7e53814:                     connection.close();
1:7e53814:                 }
1:7e53814:             } catch (Exception e) {
1:7e53814:                 LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:             } finally {
1:7e53814:                 LOG.debug(getName() + ": is stopping");
1:7e53814:                 try {
1:7e53814:                     connection.close();
1:7e53814:                 } catch (Throwable e) {
1:7e53814:                 }
1:7e53814:             }
1:7e53814:         }
1:7e53814:     }
1:7e53814: 
1:7e53814:     public class ConsumerThread extends Thread {
1:7e53814: 
1:7e53814:         private final String uri;
1:7e53814:         private final ActiveMQQueue dest;
1:7e53814:         private int blockSize = 0;
1:7e53814:         private final int PARALLEL = 1;
1:7e53814:         private boolean failed;
1:7e53814: 
1:7e53814:         public ConsumerThread(String uri, ActiveMQQueue dest, int total) {
1:7e53814:             this.uri = uri;
1:7e53814:             this.dest = dest;
1:7e53814:             this.blockSize = total / PARALLEL;
1:7e53814:         }
1:7e53814: 
1:7e53814:         public boolean isFailed() {
1:7e53814:             return failed;
1:7e53814:         }
1:7e53814: 
1:7e53814:         @Override
1:7e53814:         public void run() {
1:7e53814:             Connection connection = null;
1:7e53814:             try {
1:7e53814: 
1:7e53814:                 for (int index = 0; index < PARALLEL; index++) {
1:7e53814: 
1:7e53814:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:7e53814: 
1:7e53814:                     connection = factory.createConnection();
1:7e53814:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7e53814:                     MessageConsumer consumer = session.createConsumer(dest);
1:7e53814:                     connection.start();
1:7e53814:                     int count = 0;
1:7e53814: 
1:7e53814:                     while (count < blockSize) {
1:7e53814: 
1:7e53814:                         Object msg1 = consumer.receive(10000);
1:7e53814:                         if (msg1 != null) {
1:7e53814:                             if (msg1 instanceof ActiveMQTextMessage) {
1:7e53814:                                 if (count % 100 == 0) {
1:7e53814:                                     LOG.info("Consuming -> " + ((ActiveMQTextMessage) msg1).getDestination() + " count=" + count);
1:7e53814:                                 }
1:7e53814: 
1:7e53814:                                 count++;
1:7e53814:                             } else {
1:7e53814:                                 LOG.info("Skipping unknown msg type " + msg1);
1:7e53814:                             }
1:7e53814:                         } else {
1:7e53814:                             failed = true;
1:7e53814:                             break;
1:7e53814:                         }
1:7e53814:                     }
1:7e53814: 
1:7e53814:                     LOG.info("[" + dest.getQueueName() + "] completed segment (" + index + " of " + blockSize + ")");
1:7e53814:                     connection.close();
1:7e53814:                 }
1:7e53814:             } catch (Exception e) {
1:7e53814:                 LOG.warn("Caught unexpected exception: {}", e);
1:7e53814:             } finally {
1:7e53814:                 LOG.debug(getName() + ": is stopping");
1:7e53814:                 try {
1:7e53814:                     connection.close();
1:7e53814:                 } catch (Throwable e) {
1:7e53814:                 }
1:7e53814:             }
1:7e53814:         }
1:7e53814:     }
1:7e53814: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4f108ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7e53814
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.util.TimeStampingBrokerPlugin;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4475Test {
1: 
1:     private final Log LOG = LogFactory.getLog(AMQ4475Test.class);
1: 
1:     private final int NUM_MSGS = 1000;
1:     private final int MAX_THREADS = 20;
1: 
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     private final ExecutorService executor = Executors.newFixedThreadPool(MAX_THREADS);
1:     private final ActiveMQQueue original = new ActiveMQQueue("jms/AQueue");
1:     private final ActiveMQQueue rerouted = new ActiveMQQueue("jms/AQueue_proxy");
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();
1:         tsbp.setZeroExpirationOverride(432000000);
1:         tsbp.setTtlCeiling(432000000);
1:         tsbp.setFutureOnly(true);
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setPlugins(new BrokerPlugin[] {tsbp});
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1: 
1:         // Configure Dead Letter Strategy
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setProcessExpired(true);
1:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:         strategy.setProcessNonPersistent(true);
1: 
1:         // Add policy and individual DLQ strategy
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTimeBeforeDispatchStarts(3000);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testIndividualDeadLetterAndTimeStampPlugin() {
1:         LOG.info("Starting test ..");
1: 
1:         long startTime = System.nanoTime();
1: 
1:         // Produce to network
1:         List<Future<ProducerTask>> tasks = new ArrayList<Future<ProducerTask>>();
1: 
1:         for (int index = 0; index < 1; index++) {
1:             ProducerTask p = new ProducerTask(connectionUri, original, NUM_MSGS);
1:             Future<ProducerTask> future = executor.submit(p, p);
1:             tasks.add(future);
1:         }
1: 
1:         ForwardingConsumerThread f1 = new ForwardingConsumerThread(original, rerouted, NUM_MSGS);
1:         f1.start();
1:         ConsumerThread c1 = new ConsumerThread(connectionUri, rerouted, NUM_MSGS);
1:         c1.start();
1: 
1:         LOG.info("Waiting on consumers and producers to exit");
1: 
1:         try {
1:             for (Future<ProducerTask> future : tasks) {
1:                 ProducerTask e = future.get();
1:                 LOG.info("[Completed] " + e.dest.getPhysicalName());
1:             }
1:             executor.shutdown();
1:             LOG.info("Producing threads complete, waiting on ACKs");
1:             f1.join(TimeUnit.MINUTES.toMillis(2));
1:             c1.join(TimeUnit.MINUTES.toMillis(2));
1:         } catch (ExecutionException e) {
1:             LOG.warn("Caught unexpected exception: {}", e);
1:             throw new RuntimeException(e);
1:         } catch (InterruptedException ie) {
1:             LOG.warn("Caught unexpected exception: {}", ie);
1:             throw new RuntimeException(ie);
1:         }
1: 
1:         assertFalse(f1.isFailed());
1:         assertFalse(c1.isFailed());
1: 
1:         long estimatedTime = System.nanoTime() - startTime;
1: 
1:         LOG.info("Testcase duration (seconds): " + estimatedTime / 1000000000.0);
1:         LOG.info("Consumers and producers exited, all msgs received as expected");
1:     }
1: 
1:     public class ProducerTask implements Runnable {
1:         private final String uri;
1:         private final ActiveMQQueue dest;
1:         private final int count;
1: 
1:         public ProducerTask(String uri, ActiveMQQueue dest, int count) {
1:             this.uri = uri;
1:             this.dest = dest;
1:             this.count = count;
1:         }
1: 
1:         @Override
1:         public void run() {
1: 
1:             Connection connection = null;
1:             try {
1:                 String destName = "";
1: 
1:                 try {
1:                     destName = dest.getQueueName();
1:                 } catch (JMSException e) {
1:                     LOG.warn("Caught unexpected exception: {}", e);
1:                 }
1: 
1:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uri);
1: 
1:                 connection = connectionFactory.createConnection();
1: 
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 MessageProducer producer = session.createProducer(dest);
1:                 connection.start();
1: 
1:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:                 String msg = "Test Message";
1: 
1:                 for (int i = 0; i < count; i++) {
1:                     producer.send(session.createTextMessage(msg + dest.getQueueName() + " " + i));
1:                 }
1: 
1:                 LOG.info("[" + destName + "] Sent " + count + " msgs");
1:             } catch (Exception e) {
1:                 LOG.warn("Caught unexpected exception: {}", e);
1:             } finally {
1:                 try {
1:                     connection.close();
1:                 } catch (Throwable e) {
1:                     LOG.warn("Caught unexpected exception: {}", e);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public class ForwardingConsumerThread extends Thread {
1: 
1:         private final ActiveMQQueue original;
1:         private final ActiveMQQueue forward;
1:         private int blockSize = 0;
1:         private final int PARALLEL = 1;
1:         private boolean failed;
1: 
1:         public ForwardingConsumerThread(ActiveMQQueue original, ActiveMQQueue forward, int total) {
1:             this.original = original;
1:             this.forward = forward;
1:             this.blockSize = total / PARALLEL;
1:         }
1: 
1:         public boolean isFailed() {
1:             return failed;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             Connection connection = null;
1:             try {
1: 
1:                 for (int index = 0; index < PARALLEL; index++) {
1: 
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1: 
1:                     connection = factory.createConnection();
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageConsumer consumer = session.createConsumer(original);
1:                     MessageProducer producer = session.createProducer(forward);
1:                     connection.start();
1:                     int count = 0;
1: 
1:                     while (count < blockSize) {
1: 
1:                         Message msg1 = consumer.receive(10000);
1:                         if (msg1 != null) {
1:                             if (msg1 instanceof ActiveMQTextMessage) {
1:                                 if (count % 100 == 0) {
1:                                     LOG.info("Consuming -> " + ((ActiveMQTextMessage) msg1).getDestination() + " count=" + count);
1:                                 }
1: 
1:                                 producer.send(msg1);
1: 
1:                                 count++;
1:                             } else {
1:                                 LOG.info("Skipping unknown msg type " + msg1);
1:                             }
1:                         } else {
1:                             break;
1:                         }
1:                     }
1: 
1:                     LOG.info("[" + original.getQueueName() + "] completed segment (" + index + " of " + blockSize + ")");
1:                     connection.close();
1:                 }
1:             } catch (Exception e) {
1:                 LOG.warn("Caught unexpected exception: {}", e);
1:             } finally {
1:                 LOG.debug(getName() + ": is stopping");
1:                 try {
1:                     connection.close();
1:                 } catch (Throwable e) {
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public class ConsumerThread extends Thread {
1: 
1:         private final String uri;
1:         private final ActiveMQQueue dest;
1:         private int blockSize = 0;
1:         private final int PARALLEL = 1;
1:         private boolean failed;
1: 
1:         public ConsumerThread(String uri, ActiveMQQueue dest, int total) {
1:             this.uri = uri;
1:             this.dest = dest;
1:             this.blockSize = total / PARALLEL;
1:         }
1: 
1:         public boolean isFailed() {
1:             return failed;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             Connection connection = null;
1:             try {
1: 
1:                 for (int index = 0; index < PARALLEL; index++) {
1: 
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1: 
1:                     connection = factory.createConnection();
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageConsumer consumer = session.createConsumer(dest);
1:                     connection.start();
1:                     int count = 0;
1: 
1:                     while (count < blockSize) {
1: 
1:                         Object msg1 = consumer.receive(10000);
1:                         if (msg1 != null) {
1:                             if (msg1 instanceof ActiveMQTextMessage) {
1:                                 if (count % 100 == 0) {
1:                                     LOG.info("Consuming -> " + ((ActiveMQTextMessage) msg1).getDestination() + " count=" + count);
1:                                 }
1: 
1:                                 count++;
1:                             } else {
1:                                 LOG.info("Skipping unknown msg type " + msg1);
1:                             }
1:                         } else {
1:                             failed = true;
1:                             break;
1:                         }
1:                     }
1: 
1:                     LOG.info("[" + dest.getQueueName() + "] completed segment (" + index + " of " + blockSize + ")");
1:                     connection.close();
1:                 }
1:             } catch (Exception e) {
1:                 LOG.warn("Caught unexpected exception: {}", e);
1:             } finally {
1:                 LOG.debug(getName() + ": is stopping");
1:                 try {
1:                     connection.close();
1:                 } catch (Throwable e) {
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================