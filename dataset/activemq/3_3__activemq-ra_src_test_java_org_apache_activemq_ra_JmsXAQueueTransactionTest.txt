1:ba1bd26: /**
1:ba1bd26:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ba1bd26:  * contributor license agreements.  See the NOTICE file distributed with
1:ba1bd26:  * this work for additional information regarding copyright ownership.
1:ba1bd26:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ba1bd26:  * (the "License"); you may not use this file except in compliance with
1:ba1bd26:  * the License.  You may obtain a copy of the License at
1:1f00a39:  *
1:ba1bd26:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1f00a39:  *
1:ba1bd26:  * Unless required by applicable law or agreed to in writing, software
1:ba1bd26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ba1bd26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ba1bd26:  * See the License for the specific language governing permissions and
1:ba1bd26:  * limitations under the License.
2:1f00a39:  */
1:1f00a39: package org.apache.activemq.ra;
8:1f00a39: 
1:1f00a39: import java.io.ByteArrayOutputStream;
1:1f00a39: import java.io.DataOutputStream;
1:ba1bd26: import java.io.IOException;
1:1f00a39: 
1:1f00a39: import javax.jms.ConnectionFactory;
1:1f00a39: import javax.jms.Session;
1:ba1bd26: import javax.resource.spi.ManagedConnection;
1:1f00a39: import javax.transaction.xa.XAResource;
1:1f00a39: import javax.transaction.xa.Xid;
1:1f00a39: 
1:ba1bd26: import org.apache.activemq.ActiveMQConnection;
1:1f00a39: import org.apache.activemq.ActiveMQConnectionFactory;
1:ba1bd26: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:ba1bd26: import org.apache.activemq.JmsQueueTransactionTest;
1:1f00a39: 
1:1f00a39: public class JmsXAQueueTransactionTest extends JmsQueueTransactionTest {
1:ba1bd26: 
1:ba1bd26:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:ba1bd26:     private static final String DEFAULT_HOST = "vm://localhost?broker.dataDirectory=" + KAHADB_DIRECTORY;
1:1f00a39: 
1:1f00a39:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:1f00a39:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:1f00a39:     private XAResource xaResource;
1:1f00a39:     private static long txGenerator;
1:1f00a39:     private Xid xid;
1:02ca463: 
1:1f00a39:     @Override
1:1f00a39:     protected void setSessionTransacted() {
1:1f00a39:         resourceProvider.setTransacted(false);
1:1f00a39:         resourceProvider.setAckMode(Session.AUTO_ACKNOWLEDGE);
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     @Override
1:1f00a39:     protected ConnectionFactory newConnectionFactory() throws Exception {
1:1f00a39:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:1f00a39:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:1f00a39:         managedConnectionFactory.setUserName(org.apache.activemq.ActiveMQConnectionFactory.DEFAULT_USER);
1:1f00a39:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:1f00a39: 
1:1f00a39:         return (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:1f00a39:     }
1:1f00a39: 
2:1f00a39:     /**
1:1f00a39:      * Recreates the connection.
1:1f00a39:      *
1:1f00a39:      * @throws javax.jms.JMSException
1:1f00a39:      */
1:1f00a39:     @Override
1:1f00a39:     protected void reconnect() throws Exception {
1:1f00a39:         super.reconnect();
1:1f00a39:         ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection;
1:1f00a39:         ManagedConnection mc = proxy.getManagedConnection();
1:1f00a39:         xaResource = mc.getXAResource();
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     @Override
1:1f00a39:     protected ActiveMQPrefetchPolicy getPrefetchPolicy() {
1:1f00a39:         ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection;
1:1f00a39:         ActiveMQManagedConnection mc = proxy.getManagedConnection();
1:1f00a39:         ActiveMQConnection conn = (ActiveMQConnection) mc.getPhysicalConnection();
1:1f00a39:         return conn.getPrefetchPolicy();
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     @Override
1:1f00a39:     protected void beginTx() throws Exception {
1:1f00a39:         xid = createXid();
1:1f00a39:         xaResource.start(xid, XAResource.TMNOFLAGS);
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     @Override
1:1f00a39:     protected void commitTx() throws Exception {
1:1f00a39:         xaResource.end(xid, XAResource.TMSUCCESS);
1:1f00a39:         int result = xaResource.prepare(xid);
1:1f00a39:         if (result == XAResource.XA_OK) {
1:1f00a39:             xaResource.commit(xid, false);
1:1f00a39:         }
1:1f00a39:         xid = null;
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     @Override
1:1f00a39:     protected void rollbackTx() throws Exception {
1:1f00a39:         xaResource.end(xid, XAResource.TMSUCCESS);
1:1f00a39:         xaResource.rollback(xid);
1:1f00a39:         xid = null;
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     //This test won't work with xa tx it is overridden to do nothing here
1:1f00a39:     @Override
1:1f00a39:     public void testMessageListener() throws Exception {
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     /**
1:1f00a39:      * Sends a batch of messages and validates that the message sent before
1:1f00a39:      * session close is not consumed.
1:1f00a39:      * <p/>
1:1f00a39:      * This test only works with local transactions, not xa. so its commented out here
1:1f00a39:      *
1:1f00a39:      * @throws Exception
1:1f00a39:      */
1:1f00a39:     @Override
1:1f00a39:     public void testSendSessionClose() throws Exception {
1:1f00a39:     }
1:1f00a39: 
1:1f00a39:     public Xid createXid() throws IOException {
1:1f00a39: 
1:1f00a39:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:1f00a39:         DataOutputStream os = new DataOutputStream(baos);
1:1f00a39:         os.writeLong(++txGenerator);
1:1f00a39:         os.close();
1:1f00a39:         final byte[] bs = baos.toByteArray();
1:1f00a39: 
1:1f00a39:         return new Xid() {
1:ba1bd26:             @Override
1:1f00a39:             public int getFormatId() {
1:1f00a39:                 return 86;
1:1f00a39:             }
1:1f00a39: 
1:ba1bd26:             @Override
1:1f00a39:             public byte[] getGlobalTransactionId() {
1:1f00a39:                 return bs;
1:1f00a39:             }
1:1f00a39: 
1:ba1bd26:             @Override
1:1f00a39:             public byte[] getBranchQualifier() {
1:1f00a39:                 return bs;
1:1f00a39:             }
1:1f00a39:         };
1:1f00a39:     }
1:1f00a39: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: import java.io.IOException;
1: import javax.resource.spi.ManagedConnection;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.JmsQueueTransactionTest;
1: 
1:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:     private static final String DEFAULT_HOST = "vm://localhost?broker.dataDirectory=" + KAHADB_DIRECTORY;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:4046599
/////////////////////////////////////////////////////////////////////////
commit:02ca463
/////////////////////////////////////////////////////////////////////////
0:  * @version $Rev$ $Date$
/////////////////////////////////////////////////////////////////////////
1:     
0:     // TODO fix for XA
0:     public void testReceiveTwoThenCloseConnection() throws Exception {}
0:     public void testReceiveRollback() throws Exception {}
0:     public void testReceiveTwoThenRollback() throws Exception {}
0:     public void testReceiveTwoThenRollbackManyTimes() throws Exception {}
0:     public void testReceiveRollbackWithPrefetchOfOne() throws Exception {}
0:     public void testChangeMutableObjectInObjectMessageThenRollback() throws Exception {}
author:David Jencks
-------------------------------------------------------------------------------
commit:1f00a39
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: 
1: package org.apache.activemq.ra;
1: 
0: import java.io.IOException;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: 
1: import javax.jms.ConnectionFactory;
0: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
0: import javax.resource.spi.ManagedConnection;
0: import javax.resource.ResourceException;
1: 
0: import org.apache.activemq.*;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * @version $Rev:$ $Date:$
1:  */
1: public class JmsXAQueueTransactionTest extends JmsQueueTransactionTest {
0:     private static final String DEFAULT_HOST = "vm://localhost";
1: 
1:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:     private XAResource xaResource;
1:     private static long txGenerator;
1:     private Xid xid;
1: 
1: 
1:     @Override
1:     protected void setSessionTransacted() {
1:         resourceProvider.setTransacted(false);
1:         resourceProvider.setAckMode(Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory newConnectionFactory() throws Exception {
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:         managedConnectionFactory.setUserName(org.apache.activemq.ActiveMQConnectionFactory.DEFAULT_USER);
1:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1: 
1:         return (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:     }
1: 
1: 
1:     /**
1:      * Recreates the connection.
1:      *
1:      * @throws javax.jms.JMSException
1:      */
1:     @Override
1:     protected void reconnect() throws Exception {
1:         super.reconnect();
1:         ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection;
1:         ManagedConnection mc = proxy.getManagedConnection();
1:         xaResource = mc.getXAResource();
1:     }
1: 
1:     @Override
1:     protected ActiveMQPrefetchPolicy getPrefetchPolicy() {
1:         ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection;
1:         ActiveMQManagedConnection mc = proxy.getManagedConnection();
1:         ActiveMQConnection conn = (ActiveMQConnection) mc.getPhysicalConnection();
1:         return conn.getPrefetchPolicy();
1:     }
1: 
1:     @Override
1:     protected void beginTx() throws Exception {
1:         xid = createXid();
1:         xaResource.start(xid, XAResource.TMNOFLAGS);
1:     }
1: 
1:     @Override
1:     protected void commitTx() throws Exception {
1:         xaResource.end(xid, XAResource.TMSUCCESS);
1:         int result = xaResource.prepare(xid);
1:         if (result == XAResource.XA_OK) {
1:             xaResource.commit(xid, false);
1:         }
1:         xid = null;
1:     }
1: 
1:     @Override
1:     protected void rollbackTx() throws Exception {
1:         xaResource.end(xid, XAResource.TMSUCCESS);
1:         xaResource.rollback(xid);
1:         xid = null;
1:     }
1: 
1:     //This test won't work with xa tx it is overridden to do nothing here
1:     @Override
1:     public void testMessageListener() throws Exception {
1:     }
1: 
1:     /**
1:      * Sends a batch of messages and validates that the message sent before
1:      * session close is not consumed.
1:      * <p/>
1:      * This test only works with local transactions, not xa. so its commented out here
1:      *
1:      * @throws Exception
1:      */
1:     @Override
1:     public void testSendSessionClose() throws Exception {
1:     }
1: 
1:     public Xid createXid() throws IOException {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1: 
1:     }
1: 
1: }
============================================================================