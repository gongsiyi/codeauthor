1:8dc1c12: /**
1:8dc1c12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8dc1c12:  * contributor license agreements.  See the NOTICE file distributed with
1:8dc1c12:  * this work for additional information regarding copyright ownership.
1:8dc1c12:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8dc1c12:  * (the "License"); you may not use this file except in compliance with
1:8dc1c12:  * the License.  You may obtain a copy of the License at
1:8dc1c12:  *
1:8dc1c12:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8dc1c12:  *
1:8dc1c12:  * Unless required by applicable law or agreed to in writing, software
1:8dc1c12:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8dc1c12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8dc1c12:  * See the License for the specific language governing permissions and
1:8dc1c12:  * limitations under the License.
1:8dc1c12:  */
1:8dc1c12: package org.apache.activemq.bugs;
1:8dc1c12: 
1:8dc1c12: import static org.junit.Assert.assertEquals;
1:8dc1c12: 
1:8dc1c12: import java.io.File;
1:8dc1c12: import java.io.IOException;
1:8dc1c12: import java.lang.reflect.Field;
1:8dc1c12: import java.util.Iterator;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:8dc1c12: import java.util.concurrent.CountDownLatch;
1:8dc1c12: 
1:8dc1c12: import javax.jms.DeliveryMode;
1:8dc1c12: import javax.jms.Destination;
1:8dc1c12: import javax.jms.JMSException;
1:8dc1c12: import javax.jms.Message;
1:8dc1c12: import javax.jms.MessageConsumer;
1:8dc1c12: import javax.jms.MessageListener;
1:8dc1c12: import javax.jms.MessageProducer;
1:8dc1c12: import javax.jms.Session;
1:8dc1c12: import javax.jms.TextMessage;
1:8dc1c12: import javax.jms.Topic;
1:8dc1c12: 
1:8dc1c12: import org.apache.activemq.ActiveMQConnection;
1:8dc1c12: import org.apache.activemq.ActiveMQConnectionFactory;
1:8dc1c12: import org.apache.activemq.ActiveMQSession;
1:8dc1c12: import org.apache.activemq.broker.BrokerService;
1:8dc1c12: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:8dc1c12: import org.apache.activemq.broker.region.RegionBroker;
1:8dc1c12: import org.apache.activemq.broker.region.Subscription;
1:8dc1c12: import org.apache.activemq.broker.region.TopicRegion;
1:8dc1c12: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8dc1c12: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8dc1c12: import org.apache.activemq.command.ConsumerInfo;
1:8dc1c12: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:8dc1c12: import org.apache.activemq.util.SubscriptionKey;
1:8dc1c12: import org.junit.After;
1:8dc1c12: import org.junit.Before;
1:8dc1c12: import org.junit.Test;
1:8dc1c12: 
1:8dc1c12: public class AMQ4062Test {
1:8dc1c12: 
1:8dc1c12:     private BrokerService service;
1:8dc1c12:     private PolicyEntry policy;
1:9ef4259:     private ConcurrentMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions;
1:8dc1c12: 
1:8dc1c12:     private static final int PREFETCH_SIZE_5=5;
1:8dc1c12:     private String connectionUri;
1:8dc1c12: 
1:8dc1c12:     @Before
1:8dc1c12:     public void startBroker() throws IOException, Exception {
1:8dc1c12:         service=new BrokerService();
1:8dc1c12:         service.setPersistent(true);
1:8dc1c12:         service.setDeleteAllMessagesOnStartup(true);
1:8dc1c12:         service.setUseJmx(false);
1:8dc1c12: 
1:8dc1c12:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:8dc1c12:         File dataFile=new File("createData");
1:8dc1c12:         pa.setDirectory(dataFile);
1:8dc1c12:         pa.setJournalMaxFileLength(1024*1024*32);
1:8dc1c12: 
1:8dc1c12:         service.setPersistenceAdapter(pa);
1:8dc1c12: 
1:8dc1c12:         policy = new PolicyEntry();
1:8dc1c12:         policy.setTopic(">");
1:8dc1c12:         policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:8dc1c12:         PolicyMap pMap = new PolicyMap();
1:8dc1c12:         pMap.setDefaultEntry(policy);
1:8dc1c12: 
1:8dc1c12:         service.setDestinationPolicy(pMap);
1:8dc1c12: 
1:8dc1c12:         service.addConnector("tcp://localhost:0");
1:8dc1c12: 
1:8dc1c12:         service.start();
1:8dc1c12:         service.waitUntilStarted();
1:8dc1c12: 
1:8dc1c12:         connectionUri = service.getTransportConnectors().get(0).getPublishableConnectString();
1:8dc1c12:     }
1:8dc1c12: 
1:8dc1c12:     public void restartBroker() throws IOException, Exception {
1:8dc1c12:         service=new BrokerService();
1:8dc1c12:         service.setPersistent(true);
1:8dc1c12:         service.setUseJmx(false);
1:21b2f84:         service.setKeepDurableSubsActive(false);
1:8dc1c12: 
1:8dc1c12:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:8dc1c12:         File dataFile=new File("createData");
1:8dc1c12:         pa.setDirectory(dataFile);
1:8dc1c12:         pa.setJournalMaxFileLength(1024*1024*32);
1:8dc1c12: 
1:8dc1c12:         service.setPersistenceAdapter(pa);
1:8dc1c12: 
1:8dc1c12:         policy = new PolicyEntry();
1:8dc1c12:         policy.setTopic(">");
1:8dc1c12:         policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:8dc1c12:         PolicyMap pMap = new PolicyMap();
1:8dc1c12:         pMap.setDefaultEntry(policy);
1:8dc1c12: 
1:8dc1c12:         service.setDestinationPolicy(pMap);
1:8dc1c12:         service.addConnector("tcp://localhost:0");
1:8dc1c12:         service.start();
1:8dc1c12:         service.waitUntilStarted();
1:8dc1c12: 
1:8dc1c12:         connectionUri = service.getTransportConnectors().get(0).getPublishableConnectString();
1:8dc1c12:     }
1:8dc1c12: 
1:8dc1c12:     @After
1:8dc1c12:     public void stopBroker() throws Exception {
1:8dc1c12:         service.stop();
1:8dc1c12:         service.waitUntilStopped();
1:8dc1c12:         service = null;
1:8dc1c12:     }
1:8dc1c12: 
1:8dc1c12:     @Test
1:8dc1c12:     public void testDirableSubPrefetchRecovered() throws Exception{
1:8dc1c12: 
1:8dc1c12:         PrefetchConsumer consumer=new PrefetchConsumer(true, connectionUri);
1:8dc1c12:         consumer.recieve();
1:8dc1c12:         durableSubscriptions=getDurableSubscriptions();
1:8dc1c12:         ConsumerInfo info=getConsumerInfo(durableSubscriptions);
1:8dc1c12: 
1:8dc1c12:         //check if the prefetchSize equals to the size we set in the PolicyEntry
1:8dc1c12:         assertEquals(PREFETCH_SIZE_5, info.getPrefetchSize());
1:8dc1c12: 
1:8dc1c12:         consumer.a.countDown();
1:8dc1c12:         Producer p=new Producer(connectionUri);
1:8dc1c12:         p.send();
1:8dc1c12:         p = null;
1:8dc1c12: 
1:8dc1c12:         service.stop();
1:8dc1c12:         service.waitUntilStopped();
1:8dc1c12:         durableSubscriptions=null;
1:8dc1c12: 
1:8dc1c12:         consumer = null;
1:8dc1c12:         stopBroker();
1:8dc1c12: 
1:8dc1c12:         restartBroker();
1:8dc1c12: 
1:8dc1c12:         getDurableSubscriptions();
1:8dc1c12:         info=null;
1:8dc1c12:         info = getConsumerInfo(durableSubscriptions);
1:8dc1c12: 
1:8dc1c12:         //check if the prefetchSize equals to 0 after persistent storage recovered
1:8dc1c12:         //assertEquals(0, info.getPrefetchSize());
1:8dc1c12: 
1:8dc1c12:         consumer=new PrefetchConsumer(false, connectionUri);
1:8dc1c12:         consumer.recieve();
1:8dc1c12:         consumer.a.countDown();
1:8dc1c12: 
1:8dc1c12:         info=null;
1:8dc1c12:         info = getConsumerInfo(durableSubscriptions);
1:8dc1c12: 
1:8dc1c12:         //check if the prefetchSize is the default size for durable consumer and the PolicyEntry
1:8dc1c12:         //we set earlier take no effect
1:8dc1c12:         //assertEquals(100, info.getPrefetchSize());
1:8dc1c12:         //info.getPrefetchSize() is 100,it should be 5,because I set the PolicyEntry as follows,
1:8dc1c12:         //policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:8dc1c12:         assertEquals(5, info.getPrefetchSize());
1:8dc1c12:     }
1:8dc1c12: 
1:5219fa1:     @SuppressWarnings("unchecked")
1:9ef4259:     private ConcurrentMap<SubscriptionKey, DurableTopicSubscription> getDurableSubscriptions() throws NoSuchFieldException, IllegalAccessException {
1:8dc1c12:         if(durableSubscriptions!=null) return durableSubscriptions;
1:8dc1c12:         RegionBroker regionBroker=(RegionBroker)service.getRegionBroker();
1:8dc1c12:         TopicRegion region=(TopicRegion)regionBroker.getTopicRegion();
1:8dc1c12:         Field field=TopicRegion.class.getDeclaredField("durableSubscriptions");
1:8dc1c12:         field.setAccessible(true);
1:9ef4259:         durableSubscriptions=(ConcurrentMap<SubscriptionKey, DurableTopicSubscription>)field.get(region);
1:8dc1c12:         return durableSubscriptions;
1:8dc1c12:     }
1:8dc1c12: 
1:9ef4259:     private ConsumerInfo getConsumerInfo(ConcurrentMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions) {
1:8dc1c12:         ConsumerInfo info=null;
1:8dc1c12:         for(Iterator<DurableTopicSubscription> it=durableSubscriptions.values().iterator();it.hasNext();){
1:8dc1c12:             Subscription sub = it.next();
1:8dc1c12:             info=sub.getConsumerInfo();
1:8dc1c12:             if(info.getSubscriptionName().equals(PrefetchConsumer.SUBSCRIPTION_NAME)){
1:8dc1c12:                 return info;
1:8dc1c12:             }
1:8dc1c12:         }
1:8dc1c12:         return null;
1:8dc1c12:     }
1:8dc1c12: 
1:8dc1c12:     public class PrefetchConsumer implements MessageListener{
1:8dc1c12:         public static final String SUBSCRIPTION_NAME = "A_NAME_ABC_DEF";
1:5219fa1:         private final String user = ActiveMQConnection.DEFAULT_USER;
1:5219fa1:         private final String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:8dc1c12:         private final String uri;
1:8dc1c12:         private boolean transacted;
1:8dc1c12:         ActiveMQConnection connection;
1:8dc1c12:         Session session;
1:8dc1c12:         MessageConsumer consumer;
1:8dc1c12:         private boolean needAck=false;
1:8dc1c12:         CountDownLatch a=new CountDownLatch(1);
1:8dc1c12: 
1:8dc1c12:         public PrefetchConsumer(boolean needAck, String uri){
1:8dc1c12:             this.needAck=needAck;
1:8dc1c12:             this.uri = uri;
1:8dc1c12:         }
1:8dc1c12: 
1:8dc1c12:         public void recieve() throws Exception{
1:8dc1c12:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri);
1:8dc1c12:             connection = (ActiveMQConnection)connectionFactory.createConnection();
1:8dc1c12:             connection.setClientID("3");
1:8dc1c12:             connection.start();
1:8dc1c12: 
1:8dc1c12:             session = connection.createSession(transacted, Session.CLIENT_ACKNOWLEDGE);
1:8dc1c12:             Destination destination = session.createTopic("topic2");
1:8dc1c12:             consumer = session.createDurableSubscriber((Topic)destination,SUBSCRIPTION_NAME);
1:8dc1c12:             consumer.setMessageListener(this);
1:8dc1c12:         }
1:8dc1c12: 
1:5219fa1:         @Override
1:8dc1c12:         public void onMessage(Message message) {
1:8dc1c12:             try {
1:8dc1c12:                 a.await();
1:8dc1c12:             } catch (InterruptedException e1) {
1:8dc1c12:             }
1:8dc1c12:             if(needAck){
1:8dc1c12:                 try {
1:8dc1c12:                     message.acknowledge();
1:8dc1c12:                     consumer.close();
1:8dc1c12:                     session.close();
1:8dc1c12:                     connection.close();
1:8dc1c12:                 } catch (JMSException e) {
1:8dc1c12:                 }
1:8dc1c12:             }
1:8dc1c12:         }
1:8dc1c12:     }
1:8dc1c12: 
1:8dc1c12:     public class Producer {
1:8dc1c12: 
1:8dc1c12:         protected final String user = ActiveMQConnection.DEFAULT_USER;
1:8dc1c12: 
1:5219fa1:         private final String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:8dc1c12:         private final String uri;
1:8dc1c12:         private boolean transacted;
1:8dc1c12: 
1:8dc1c12:         public Producer(String uri) {
1:8dc1c12:             this.uri = uri;
1:8dc1c12:         }
1:8dc1c12: 
1:8dc1c12:         public void send() throws Exception{
1:8dc1c12:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri);
1:8dc1c12:             ActiveMQConnection connection = (ActiveMQConnection)connectionFactory.createConnection();
1:8dc1c12:             connection.start();
1:8dc1c12: 
1:8dc1c12:             ActiveMQSession session = (ActiveMQSession)connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:8dc1c12:             Destination destination = session.createTopic("topic2");
1:8dc1c12:             MessageProducer producer = session.createProducer(destination);
1:8dc1c12:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:8dc1c12:             for(int i=0;i<100;i++){
1:8dc1c12:                 TextMessage om=session.createTextMessage("hello from producer");
1:8dc1c12:                 producer.send(om);
1:8dc1c12:             }
1:8dc1c12:             producer.close();
1:8dc1c12:             session.close();
1:8dc1c12:             connection.close();
1:8dc1c12:         }
1:8dc1c12:     }
1:8dc1c12: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private ConcurrentMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions;
/////////////////////////////////////////////////////////////////////////
1:     private ConcurrentMap<SubscriptionKey, DurableTopicSubscription> getDurableSubscriptions() throws NoSuchFieldException, IllegalAccessException {
1:         durableSubscriptions=(ConcurrentMap<SubscriptionKey, DurableTopicSubscription>)field.get(region);
1:     private ConsumerInfo getConsumerInfo(ConcurrentMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions) {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         private final String user = ActiveMQConnection.DEFAULT_USER;
1:         private final String password = ActiveMQConnection.DEFAULT_PASSWORD;
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         private final String password = ActiveMQConnection.DEFAULT_PASSWORD;
commit:ef24cc9
commit:21b2f84
/////////////////////////////////////////////////////////////////////////
1:         service.setKeepDurableSubsActive(false);
commit:8dc1c12
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.lang.reflect.Field;
1: import java.util.Iterator;
0: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicRegion;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.SubscriptionKey;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4062Test {
1: 
1:     private BrokerService service;
1:     private PolicyEntry policy;
0:     private ConcurrentHashMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions;
1: 
1:     private static final int PREFETCH_SIZE_5=5;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void startBroker() throws IOException, Exception {
1:         service=new BrokerService();
1:         service.setPersistent(true);
1:         service.setDeleteAllMessagesOnStartup(true);
1:         service.setUseJmx(false);
1: 
1:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:         File dataFile=new File("createData");
1:         pa.setDirectory(dataFile);
1:         pa.setJournalMaxFileLength(1024*1024*32);
1: 
1:         service.setPersistenceAdapter(pa);
1: 
1:         policy = new PolicyEntry();
1:         policy.setTopic(">");
1:         policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         service.setDestinationPolicy(pMap);
1: 
1:         service.addConnector("tcp://localhost:0");
1: 
1:         service.start();
1:         service.waitUntilStarted();
1: 
1:         connectionUri = service.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     public void restartBroker() throws IOException, Exception {
1:         service=new BrokerService();
1:         service.setPersistent(true);
1:         service.setUseJmx(false);
1: 
1:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:         File dataFile=new File("createData");
1:         pa.setDirectory(dataFile);
1:         pa.setJournalMaxFileLength(1024*1024*32);
1: 
1:         service.setPersistenceAdapter(pa);
1: 
1:         policy = new PolicyEntry();
1:         policy.setTopic(">");
1:         policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         service.setDestinationPolicy(pMap);
1:         service.addConnector("tcp://localhost:0");
1:         service.start();
1:         service.waitUntilStarted();
1: 
1:         connectionUri = service.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         service.stop();
1:         service.waitUntilStopped();
1:         service = null;
1:     }
1: 
1:     @Test
1:     public void testDirableSubPrefetchRecovered() throws Exception{
1: 
1:         PrefetchConsumer consumer=new PrefetchConsumer(true, connectionUri);
1:         consumer.recieve();
1:         durableSubscriptions=getDurableSubscriptions();
1:         ConsumerInfo info=getConsumerInfo(durableSubscriptions);
1: 
1:         //check if the prefetchSize equals to the size we set in the PolicyEntry
1:         assertEquals(PREFETCH_SIZE_5, info.getPrefetchSize());
1: 
1:         consumer.a.countDown();
1:         Producer p=new Producer(connectionUri);
1:         p.send();
1:         p = null;
1: 
1:         service.stop();
1:         service.waitUntilStopped();
1:         durableSubscriptions=null;
1: 
1:         consumer = null;
1:         stopBroker();
1: 
1:         restartBroker();
1: 
1:         getDurableSubscriptions();
1:         info=null;
1:         info = getConsumerInfo(durableSubscriptions);
1: 
1:         //check if the prefetchSize equals to 0 after persistent storage recovered
1:         //assertEquals(0, info.getPrefetchSize());
1: 
1:         consumer=new PrefetchConsumer(false, connectionUri);
1:         consumer.recieve();
1:         consumer.a.countDown();
1: 
1:         info=null;
1:         info = getConsumerInfo(durableSubscriptions);
1: 
1:         //check if the prefetchSize is the default size for durable consumer and the PolicyEntry
1:         //we set earlier take no effect
1:         //assertEquals(100, info.getPrefetchSize());
1:         //info.getPrefetchSize() is 100,it should be 5,because I set the PolicyEntry as follows,
1:         //policy.setDurableTopicPrefetch(PREFETCH_SIZE_5);
1:         assertEquals(5, info.getPrefetchSize());
1:     }
1: 
0:     private ConcurrentHashMap<SubscriptionKey, DurableTopicSubscription> getDurableSubscriptions() throws NoSuchFieldException, IllegalAccessException {
1:         if(durableSubscriptions!=null) return durableSubscriptions;
1:         RegionBroker regionBroker=(RegionBroker)service.getRegionBroker();
1:         TopicRegion region=(TopicRegion)regionBroker.getTopicRegion();
1:         Field field=TopicRegion.class.getDeclaredField("durableSubscriptions");
1:         field.setAccessible(true);
0:         durableSubscriptions=(ConcurrentHashMap<SubscriptionKey, DurableTopicSubscription>)field.get(region);
1:         return durableSubscriptions;
1:     }
1: 
0:     private ConsumerInfo getConsumerInfo(ConcurrentHashMap<SubscriptionKey, DurableTopicSubscription> durableSubscriptions) {
1:         ConsumerInfo info=null;
1:         for(Iterator<DurableTopicSubscription> it=durableSubscriptions.values().iterator();it.hasNext();){
1:             Subscription sub = it.next();
1:             info=sub.getConsumerInfo();
1:             if(info.getSubscriptionName().equals(PrefetchConsumer.SUBSCRIPTION_NAME)){
1:                 return info;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public class PrefetchConsumer implements MessageListener{
1:         public static final String SUBSCRIPTION_NAME = "A_NAME_ABC_DEF";
0:         private String user = ActiveMQConnection.DEFAULT_USER;
0:         private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:         private final String uri;
1:         private boolean transacted;
1:         ActiveMQConnection connection;
1:         Session session;
1:         MessageConsumer consumer;
1:         private boolean needAck=false;
1:         CountDownLatch a=new CountDownLatch(1);
1: 
1:         public PrefetchConsumer(boolean needAck, String uri){
1:             this.needAck=needAck;
1:             this.uri = uri;
1:         }
1: 
1:         public void recieve() throws Exception{
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri);
1:             connection = (ActiveMQConnection)connectionFactory.createConnection();
1:             connection.setClientID("3");
1:             connection.start();
1: 
1:             session = connection.createSession(transacted, Session.CLIENT_ACKNOWLEDGE);
1:             Destination destination = session.createTopic("topic2");
1:             consumer = session.createDurableSubscriber((Topic)destination,SUBSCRIPTION_NAME);
1:             consumer.setMessageListener(this);
1:         }
1: 
1:         public void onMessage(Message message) {
1:             try {
1:                 a.await();
1:             } catch (InterruptedException e1) {
1:             }
1:             if(needAck){
1:                 try {
1:                     message.acknowledge();
1:                     consumer.close();
1:                     session.close();
1:                     connection.close();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public class Producer {
1: 
1:         protected final String user = ActiveMQConnection.DEFAULT_USER;
1: 
0:         private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:         private final String uri;
1:         private boolean transacted;
1: 
1:         public Producer(String uri) {
1:             this.uri = uri;
1:         }
1: 
1:         public void send() throws Exception{
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri);
1:             ActiveMQConnection connection = (ActiveMQConnection)connectionFactory.createConnection();
1:             connection.start();
1: 
1:             ActiveMQSession session = (ActiveMQSession)connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createTopic("topic2");
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             for(int i=0;i<100;i++){
1:                 TextMessage om=session.createTextMessage("hello from producer");
1:                 producer.send(om);
1:             }
1:             producer.close();
1:             session.close();
1:             connection.close();
1:         }
1:     }
1: }
============================================================================