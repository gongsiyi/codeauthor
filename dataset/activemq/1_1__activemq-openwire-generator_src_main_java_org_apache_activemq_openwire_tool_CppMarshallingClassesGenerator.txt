1:fcb5d9e: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:fcb5d9e:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fcb5d9e:  *
1:fcb5d9e:  * Unless required by applicable law or agreed to in writing, software
1:fcb5d9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fcb5d9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fcb5d9e:  * See the License for the specific language governing permissions and
1:fcb5d9e:  * limitations under the License.
1:fcb5d9e:  */
1:fcb5d9e: package org.apache.activemq.openwire.tool;
9:fcb5d9e: 
1:fcb5d9e: import java.io.PrintWriter;
1:bd0ad68: import java.util.ArrayList;
1:bd0ad68: import java.util.Collections;
1:bd0ad68: import java.util.Comparator;
1:fcb5d9e: import java.util.Iterator;
1:fcb5d9e: import java.util.List;
1:fcb5d9e: 
1:540dd5c: import org.codehaus.jam.JAnnotation;
1:540dd5c: import org.codehaus.jam.JAnnotationValue;
1:540dd5c: import org.codehaus.jam.JClass;
1:540dd5c: import org.codehaus.jam.JProperty;
1:540dd5c: 
1:fcb5d9e: /**
1:0bbc0ac:  * 
1:fcb5d9e:  */
1:bd0ad68: public class CppMarshallingClassesGenerator extends CppMarshallingHeadersGenerator {
1:fcb5d9e: 
1:fcb5d9e:     protected String getFilePostFix() {
1:fcb5d9e:         return ".cpp";
48:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:fcb5d9e:         out.print("    ");
1:fcb5d9e:         String setter = property.getSetter().getSimpleName();
1:fcb5d9e:         String type = property.getType().getSimpleName();
1:bd0ad68: 
1:fcb5d9e:         if (type.equals("boolean")) {
1:fcb5d9e:             out.println("info." + setter + "( bs.readBoolean() );");
1:540dd5c:         } else if (type.equals("byte")) {
1:fcb5d9e:             out.println("info." + setter + "( DataStreamMarshaller.readByte(dataIn) );");
1:540dd5c:         } else if (type.equals("char")) {
1:fcb5d9e:             out.println("info." + setter + "( DataStreamMarshaller.readChar(dataIn) );");
1:540dd5c:         } else if (type.equals("short")) {
1:fcb5d9e:             out.println("info." + setter + "( DataStreamMarshaller.readShort(dataIn) );");
1:540dd5c:         } else if (type.equals("int")) {
1:fcb5d9e:             out.println("info." + setter + "( DataStreamMarshaller.readInt(dataIn) );");
1:540dd5c:         } else if (type.equals("long")) {
1:fcb5d9e:             out.println("info." + setter + "( UnmarshalLong(wireFormat, dataIn, bs) );");
1:540dd5c:         } else if (type.equals("String")) {
1:fcb5d9e:             out.println("info." + setter + "( readString(dataIn, bs) );");
1:540dd5c:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:             if (size != null) {
1:fcb5d9e:                 out.println("info." + setter + "( readBytes(dataIn, " + size.asInt() + ") );");
1:540dd5c:             } else {
1:fcb5d9e:                 out.println("info." + setter + "( readBytes(dataIn, bs.readBoolean()) );");
1:bd0ad68:             }
1:540dd5c:         } else if (isThrowable(property.getType())) {
1:fcb5d9e:             out.println("info." + setter + "( unmarshalBrokerError(wireFormat, dataIn, bs) );");
1:540dd5c:         } else if (isCachedProperty(property)) {
1:fcb5d9e:             out.println("info." + setter + "( (" + type + ") unmarshalCachedObject(wireFormat, dataIn, bs) );");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("info." + setter + "( (" + type + ") unmarshalNestedObject(wireFormat, dataIn, bs) );");
1:fcb5d9e:         }
1:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:fcb5d9e:         JClass propertyType = property.getType();
1:fcb5d9e:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:fcb5d9e:         String setter = property.getGetter().getSimpleName();
1:fcb5d9e:         out.println();
1:fcb5d9e:         if (size != null) {
1:fcb5d9e:             out.println("    {");
1:fcb5d9e:             out.println("        " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:fcb5d9e:             out.println("        " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:fcb5d9e:             out.println("            value[i] = (" + arrayType + ") unmarshalNestedObject(wireFormat,dataIn, bs);");
1:fcb5d9e:             out.println("        }");
1:fcb5d9e:             out.println("        info." + setter + "( value );");
1:fcb5d9e:             out.println("    }");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("    if (bs.readBoolean()) {");
1:fcb5d9e:             out.println("        short size = DataStreamMarshaller.readShort(dataIn);");
1:fcb5d9e:             out.println("        " + arrayType + "[] value = new " + arrayType + "[size];");
1:fcb5d9e:             out.println("        for( int i=0; i < size; i++ ) {");
1:fcb5d9e:             out.println("            value[i] = (" + arrayType + ") unmarshalNestedObject(wireFormat,dataIn, bs);");
1:fcb5d9e:             out.println("        }");
1:fcb5d9e:             out.println("        info." + setter + "( value );");
1:fcb5d9e:             out.println("    }");
1:fcb5d9e:             out.println("    else {");
1:fcb5d9e:             out.println("        info." + setter + "( null );");
1:fcb5d9e:             out.println("    }");
1:fcb5d9e:         }
1:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     protected int generateMarshal1Body(PrintWriter out) {
1:bd0ad68:         List properties = getProperties();
1:fcb5d9e:         int baseSize = 0;
1:fcb5d9e:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:fcb5d9e:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:fcb5d9e:             JAnnotationValue size = annotation.getValue("size");
1:fcb5d9e:             JClass propertyType = property.getType();
1:fcb5d9e:             String type = propertyType.getSimpleName();
1:fcb5d9e:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:bd0ad68: 
1:fcb5d9e:             out.print(indent);
1:fcb5d9e:             if (type.equals("boolean")) {
1:fcb5d9e:                 out.println("bs.writeBoolean(" + getter + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:fcb5d9e:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("char")) {
1:fcb5d9e:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("short")) {
1:fcb5d9e:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("int")) {
1:fcb5d9e:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("long")) {
1:fcb5d9e:                 out.println("rc += marshal1Long(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:fcb5d9e:                 out.println("rc += writeString(" + getter + ", bs);");
1:540dd5c:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:                 if (size == null) {
1:fcb5d9e:                     out.println("bs.writeBoolean(" + getter + "!=null);");
1:fcb5d9e:                     out.println("    rc += " + getter + "==null ? 0 : " + getter + ".Length+4;");
1:540dd5c:                 } else {
1:fcb5d9e:                     baseSize += size.asInt();
1:bd0ad68:                 }
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("rc += marshalObjectArrayConstSize(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("rc += marshalObjectArray(wireFormat, " + getter + ", bs);");
1:bd0ad68:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:fcb5d9e:                 out.println("rc += marshalBrokerError(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else {
1:fcb5d9e:                 if (isCachedProperty(property)) {
1:fcb5d9e:                     out.println("rc += marshal1CachedObject(wireFormat, " + getter + ", bs);");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("rc += marshal1NestedObject(wireFormat, " + getter + ", bs);");
1:bd0ad68:                 }
1:bd0ad68:             }
1:bd0ad68:         }
1:fcb5d9e:         return baseSize;
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateMarshal2Body(PrintWriter out) {
2:fcb5d9e:         List properties = getProperties();
1:fcb5d9e:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:fcb5d9e:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:fcb5d9e:             JAnnotationValue size = annotation.getValue("size");
1:fcb5d9e:             JClass propertyType = property.getType();
1:fcb5d9e:             String type = propertyType.getSimpleName();
1:fcb5d9e:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:bd0ad68: 
1:fcb5d9e:             out.print(indent);
1:fcb5d9e:             if (type.equals("boolean")) {
1:fcb5d9e:                 out.println("bs.readBoolean();");
1:540dd5c:             } else if (type.equals("byte")) {
1:fcb5d9e:                 out.println("DataStreamMarshaller.writeByte(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("char")) {
1:fcb5d9e:                 out.println("DataStreamMarshaller.writeChar(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("short")) {
1:fcb5d9e:                 out.println("DataStreamMarshaller.writeShort(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("int")) {
1:fcb5d9e:                 out.println("DataStreamMarshaller.writeInt(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("long")) {
1:fcb5d9e:                 out.println("marshal2Long(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:fcb5d9e:                 out.println("writeString(" + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("dataOut.write(" + getter + ", 0, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("if(bs.readBoolean()) {");
1:fcb5d9e:                     out.println("       DataStreamMarshaller.writeInt(" + getter + ".Length, dataOut);");
1:fcb5d9e:                     out.println("       dataOut.write(" + getter + ");");
1:fcb5d9e:                     out.println("    }");
1:bd0ad68:                 }
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("marshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("marshalObjectArray(wireFormat, " + getter + ", dataOut, bs);");
1:fcb5d9e:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:fcb5d9e:                 out.println("marshalBrokerError(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else {
1:fcb5d9e:                 if (isCachedProperty(property)) {
1:fcb5d9e:                     out.println("marshal2CachedObject(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("marshal2NestedObject(wireFormat, " + getter + ", dataOut, bs);");
1:fcb5d9e:                 }
1:fcb5d9e:             }
1:fcb5d9e:         }
1:fcb5d9e:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c:         generateLicence(out);
1:bd0ad68: 
1:540dd5c:         out.println("#include \"marshal/" + className + ".hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using namespace apache::activemq::client::marshal;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" *  Marshalling code for Open Wire Format for " + jclass.getSimpleName() + "");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println(" *        activemq-core module");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("" + className + "::" + className + "()");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    // no-op");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("" + className + "::~" + className + "()");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    // no-op");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:bd0ad68: 
1:540dd5c:         if (!isAbstractClass()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("IDataStructure* " + className + "::createObject() ");
1:540dd5c:             out.println("{");
1:540dd5c:             out.println("    return new " + jclass.getSimpleName() + "();");
1:540dd5c:             out.println("}");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("char " + className + "::getDataStructureType() ");
1:540dd5c:             out.println("{");
1:540dd5c:             out.println("    return " + jclass.getSimpleName() + ".ID_" + jclass.getSimpleName() + ";");
1:540dd5c:             out.println("}");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /* ");
1:540dd5c:         out.println("     * Un-marshal an object instance from the data input stream");
1:540dd5c:         out.println("     */ ");
1:540dd5c:         out.println("void " + className + "::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    base.unmarshal(wireFormat, o, dataIn, bs);");
1:bd0ad68: 
1:540dd5c:         List properties = getProperties();
1:540dd5c:         boolean marshallerAware = isMarshallerAware();
1:540dd5c:         if (!properties.isEmpty() || marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    info.beforeUnmarshall(wireFormat);");
1:540dd5c:             out.println("        ");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateTightUnmarshalBody(out);
1:bd0ad68: 
1:540dd5c:         if (marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    info.afterUnmarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" * Write the booleans that this object uses to a BooleanStream");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("int " + className + "::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {");
1:540dd5c:         out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:bd0ad68: 
1:540dd5c:         if (marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    info.beforeMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    int rc = base.marshal1(wireFormat, info, bs);");
1:bd0ad68: 
1:540dd5c:         int baseSize = generateMarshal1Body(out);
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    return rc + " + baseSize + ";");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/* ");
1:540dd5c:         out.println(" * Write a object instance to data output stream");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("void " + className + "::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {");
1:540dd5c:         out.println("    base.marshal2(wireFormat, o, dataOut, bs);");
1:540dd5c: 
1:540dd5c:         if (!properties.isEmpty() || marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateMarshal2Body(out);
1:540dd5c: 
1:540dd5c:         if (marshallerAware) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    info.afterMarshall(wireFormat);");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("}");
1:bd0ad68:     }
1:540dd5c: 
1:540dd5c:     @SuppressWarnings("unchecked")
1:bd0ad68:     public void generateFactory(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("// Marshalling code for Open Wire Format");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println("//        activemq-openwire module");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"marshal/" + className + ".hpp\"");
1:540dd5c:         out.println("");
1:bd0ad68: 
1:540dd5c:         List list = new ArrayList(getConcreteClasses());
1:540dd5c:         Collections.sort(list, new Comparator() {
1:540dd5c:             public int compare(Object o1, Object o2) {
1:540dd5c:                 JClass c1 = (JClass)o1;
1:540dd5c:                 JClass c2 = (JClass)o2;
1:540dd5c:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:540dd5c:             }
1:540dd5c:         });
1:bd0ad68: 
1:540dd5c:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iter.next();
1:540dd5c:             out.println("#include \"marshal/" + jclass.getSimpleName() + "Marshaller.hpp\"");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using namespace apache::activemq::client::marshal;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("void MarshallerFactory::configure(ProtocolFormat& format) ");
1:540dd5c:         out.println("{");
1:bd0ad68: 
1:540dd5c:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iter.next();
1:540dd5c:             out.println("    format.addMarshaller(new " + jclass.getSimpleName() + "Marshaller());");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("}");
1:bd0ad68: 
1:bd0ad68:     }
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else if (type.equals("byte")) {
1:         } else if (type.equals("char")) {
1:         } else if (type.equals("short")) {
1:         } else if (type.equals("int")) {
1:         } else if (type.equals("long")) {
1:         } else if (type.equals("String")) {
1:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             } else {
1:         } else if (isThrowable(property.getType())) {
1:         } else if (isCachedProperty(property)) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:             } else if (type.equals("String")) {
1:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 } else {
1:             } else if (propertyType.isArrayType()) {
1:                 } else {
1:             } else if (isThrowable(propertyType)) {
1:             } else {
1:                 } else {
/////////////////////////////////////////////////////////////////////////
1:             JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:             } else if (type.equals("String")) {
1:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 } else {
1:             } else if (propertyType.isArrayType()) {
1:                 } else {
1:             } else if (isThrowable(propertyType)) {
1:             } else {
1:                 } else {
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("#include \"marshal/" + className + ".hpp\"");
1:         out.println("");
1:         out.println("using namespace apache::activemq::client::marshal;");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" *  Marshalling code for Open Wire Format for " + jclass.getSimpleName() + "");
1:         out.println(" *");
1:         out.println(" * NOTE!: This file is autogenerated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the Groovy scripts in the");
1:         out.println(" *        activemq-core module");
1:         out.println(" */");
1:         out.println("");
1:         out.println("" + className + "::" + className + "()");
1:         out.println("{");
1:         out.println("    // no-op");
1:         out.println("}");
1:         out.println("");
1:         out.println("" + className + "::~" + className + "()");
1:         out.println("{");
1:         out.println("    // no-op");
1:         out.println("}");
1:         out.println("");
1:         if (!isAbstractClass()) {
1:             out.println("");
1:             out.println("");
1:             out.println("IDataStructure* " + className + "::createObject() ");
1:             out.println("{");
1:             out.println("    return new " + jclass.getSimpleName() + "();");
1:             out.println("}");
1:             out.println("");
1:             out.println("char " + className + "::getDataStructureType() ");
1:             out.println("{");
1:             out.println("    return " + jclass.getSimpleName() + ".ID_" + jclass.getSimpleName() + ";");
1:             out.println("}");
1:         }
1:         out.println("");
1:         out.println("    /* ");
1:         out.println("     * Un-marshal an object instance from the data input stream");
1:         out.println("     */ ");
1:         out.println("void " + className + "::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ");
1:         out.println("{");
1:         out.println("    base.unmarshal(wireFormat, o, dataIn, bs);");
1:         List properties = getProperties();
1:         boolean marshallerAware = isMarshallerAware();
1:         if (!properties.isEmpty() || marshallerAware) {
1:             out.println("");
1:             out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:         }
1:         if (marshallerAware) {
1:             out.println("");
1:             out.println("    info.beforeUnmarshall(wireFormat);");
1:             out.println("        ");
1:         }
1:         generateTightUnmarshalBody(out);
1:         if (marshallerAware) {
1:             out.println("");
1:             out.println("    info.afterUnmarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("}");
1:         out.println("");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" * Write the booleans that this object uses to a BooleanStream");
1:         out.println(" */");
1:         out.println("int " + className + "::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {");
1:         out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:         if (marshallerAware) {
1:             out.println("");
1:             out.println("    info.beforeMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    int rc = base.marshal1(wireFormat, info, bs);");
1:         int baseSize = generateMarshal1Body(out);
1:         out.println("");
1:         out.println("    return rc + " + baseSize + ";");
1:         out.println("}");
1:         out.println("");
1:         out.println("/* ");
1:         out.println(" * Write a object instance to data output stream");
1:         out.println(" */");
1:         out.println("void " + className + "::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {");
1:         out.println("    base.marshal2(wireFormat, o, dataOut, bs);");
1:         if (!properties.isEmpty() || marshallerAware) {
1:             out.println("");
1:             out.println("    " + jclass.getSimpleName() + "& info = (" + jclass.getSimpleName() + "&) o;");
1:         }
1: 
1:         generateMarshal2Body(out);
1: 
1:         if (marshallerAware) {
1:             out.println("");
1:             out.println("    info.afterMarshall(wireFormat);");
1:         }
1: 
1:         out.println("");
1:         out.println("}");
1: 
1:     @SuppressWarnings("unchecked")
1:         generateLicence(out);
1:         out.println("");
1:         out.println("// Marshalling code for Open Wire Format");
1:         out.println("//");
1:         out.println("//");
1:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:         out.println("//        activemq-openwire module");
1:         out.println("//");
1:         out.println("");
1:         out.println("#include \"marshal/" + className + ".hpp\"");
1:         out.println("");
1:         List list = new ArrayList(getConcreteClasses());
1:         Collections.sort(list, new Comparator() {
1:             public int compare(Object o1, Object o2) {
1:                 JClass c1 = (JClass)o1;
1:                 JClass c2 = (JClass)o2;
1:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:             }
1:         });
1:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:             JClass jclass = (JClass)iter.next();
1:             out.println("#include \"marshal/" + jclass.getSimpleName() + "Marshaller.hpp\"");
1:         }
1:         out.println("");
1:         out.println("");
1:         out.println("using namespace apache::activemq::client::marshal;");
1:         out.println("");
1:         out.println("");
1:         out.println("void MarshallerFactory::configure(ProtocolFormat& format) ");
1:         out.println("{");
1:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:             JClass jclass = (JClass)iter.next();
1:             out.println("    format.addMarshaller(new " + jclass.getSimpleName() + "Marshaller());");
1:         }
1: 
1:         out.println("");
1:         out.println("}");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
1: public class CppMarshallingClassesGenerator extends CppMarshallingHeadersGenerator {
/////////////////////////////////////////////////////////////////////////
1:     
1:     
0: 	protected void generateFile(PrintWriter out) throws Exception {
0: 		generateLicence(out);
1: 		
0: out.println("#include \"marshal/"+className+".hpp\"");
0: out.println("");
0: out.println("using namespace apache::activemq::client::marshal;");
0: out.println("");
0: out.println("/*");
0: out.println(" *  Marshalling code for Open Wire Format for "+jclass.getSimpleName()+"");
0: out.println(" *");
0: out.println(" * NOTE!: This file is autogenerated - do not modify!");
0: out.println(" *        if you need to make a change, please see the Groovy scripts in the");
0: out.println(" *        activemq-core module");
0: out.println(" */");
0: out.println("");
0: out.println(""+className+"::"+className+"()");
0: out.println("{");
0: out.println("    // no-op");
0: out.println("}");
0: out.println("");
0: out.println(""+className+"::~"+className+"()");
0: out.println("{");
0: out.println("    // no-op");
0: out.println("}");
0: out.println("");
1: 
0: 		if( !isAbstractClass() ) {
0: out.println("");
0: out.println("");
0: out.println("IDataStructure* "+className+"::createObject() ");
0: out.println("{");
0: out.println("    return new "+jclass.getSimpleName()+"();");
0: out.println("}");
0: out.println("");
0: out.println("char "+className+"::getDataStructureType() ");
0: out.println("{");
0: out.println("    return "+jclass.getSimpleName()+".ID_"+jclass.getSimpleName()+";");
0: out.println("}");
1: 		}
1: 
0: out.println("");
0: out.println("    /* ");
0: out.println("     * Un-marshal an object instance from the data input stream");
0: out.println("     */ ");
0: out.println("void "+className+"::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ");
0: out.println("{");
0: out.println("    base.unmarshal(wireFormat, o, dataIn, bs);");
1:  
1: 		List properties = getProperties();
0: 		boolean marshallerAware = isMarshallerAware();
0: 		if( !properties.isEmpty() || marshallerAware )  {
0: out.println("");
0: out.println("    "+jclass.getSimpleName()+"& info = ("+jclass.getSimpleName()+"&) o;");
1: 		}
1: 
0: 		if( marshallerAware ) {
0: out.println("");
0: out.println("    info.beforeUnmarshall(wireFormat);");
0: out.println("        ");
1: 		}
1: 
0: 		generateTightUnmarshalBody(out);
1: 
0: 		if( marshallerAware ) {
0: out.println("");
0: out.println("    info.afterUnmarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("}");
0: out.println("");
0: out.println("");
0: out.println("/*");
0: out.println(" * Write the booleans that this object uses to a BooleanStream");
0: out.println(" */");
0: out.println("int "+className+"::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {");
0: out.println("    "+jclass.getSimpleName()+"& info = ("+jclass.getSimpleName()+"&) o;");
1: 
1: 
0: 		if( marshallerAware ) {
0: out.println("");
0: out.println("    info.beforeMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    int rc = base.marshal1(wireFormat, info, bs);");
1: 
0: 		int baseSize = generateMarshal1Body(out);
1:     
0: out.println("");
0: out.println("    return rc + "+baseSize+";");
0: out.println("}");
0: out.println("");
0: out.println("/* ");
0: out.println(" * Write a object instance to data output stream");
0: out.println(" */");
0: out.println("void "+className+"::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {");
0: out.println("    base.marshal2(wireFormat, o, dataOut, bs);");
1: 
0: 		if( !properties.isEmpty() || marshallerAware ) {
0: out.println("");
0: out.println("    "+jclass.getSimpleName()+"& info = ("+jclass.getSimpleName()+"&) o;");
1: 		}
1: 
0: 		generateMarshal2Body(out);
1: 
0: 		if( marshallerAware ) {
0: out.println("");
0: out.println("    info.afterMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("}");
1:     }
1:  	
1:     public void generateFactory(PrintWriter out) {
0: 		generateLicence(out);
0: out.println("");
0: out.println("// Marshalling code for Open Wire Format");
0: out.println("//");
0: out.println("//");
0: out.println("// NOTE!: This file is autogenerated - do not modify!");
0: out.println("//        if you need to make a change, please see the Groovy scripts in the");
0: out.println("//        activemq-openwire module");
0: out.println("//");
0: out.println("");
0: out.println("#include \"marshal/"+className+".hpp\"");
0: out.println("");
1: 
0: 		List list = new ArrayList(getConcreteClasses());
0: 		Collections.sort(list, new Comparator(){
0: 			public int compare(Object o1, Object o2) {
0: 				JClass c1 = (JClass) o1;
0: 				JClass c2 = (JClass) o2;
0: 				return c1.getSimpleName().compareTo(c2.getSimpleName());
0: 			}});
1: 		
0: 		for (Iterator iter = list.iterator(); iter.hasNext();) {
0: 			JClass jclass = (JClass) iter.next();
0: out.println("#include \"marshal/"+jclass.getSimpleName()+"Marshaller.hpp\"");
1: 	    }        
1: 
0: out.println("");
0: out.println("");
0: out.println("using namespace apache::activemq::client::marshal;");
0: out.println("");
0: out.println("");
0: out.println("void MarshallerFactory::configure(ProtocolFormat& format) ");
0: out.println("{");
1: 
0: 		for (Iterator iter = list.iterator(); iter.hasNext();) {
0: 			JClass jclass = (JClass) iter.next();
0: out.println("    format.addMarshaller(new "+jclass.getSimpleName()+"Marshaller());");
1: 	    }        
1: 
0: out.println("");
0: out.println("}");
1: 
1:     }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:fcb5d9e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
0: import org.codehaus.jam.JAnnotation;
0: import org.codehaus.jam.JAnnotationValue;
0: import org.codehaus.jam.JClass;
0: import org.codehaus.jam.JProperty;
1: 
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  *
0:  * @version $Revision: 381410 $
1:  */
0: public abstract class OpenWireCppMarshallingClassesScript extends OpenWireCppMarshallingHeadersScript {
1: 
1:     protected String getFilePostFix() {
1:         return ".cpp";
1:     }
1: 
1:     protected void generateUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         out.print("    ");
1:         String setter = property.getSetter().getSimpleName();
1:         String type = property.getType().getSimpleName();
1: 
1:         if (type.equals("boolean")) {
1:             out.println("info." + setter + "( bs.readBoolean() );");
1:         }
0:         else if (type.equals("byte")) {
1:             out.println("info." + setter + "( DataStreamMarshaller.readByte(dataIn) );");
1:         }
0:         else if (type.equals("char")) {
1:             out.println("info." + setter + "( DataStreamMarshaller.readChar(dataIn) );");
1:         }
0:         else if (type.equals("short")) {
1:             out.println("info." + setter + "( DataStreamMarshaller.readShort(dataIn) );");
1:         }
0:         else if (type.equals("int")) {
1:             out.println("info." + setter + "( DataStreamMarshaller.readInt(dataIn) );");
1:         }
0:         else if (type.equals("long")) {
1:             out.println("info." + setter + "( UnmarshalLong(wireFormat, dataIn, bs) );");
1:         }
0:         else if (type.equals("String")) {
1:             out.println("info." + setter + "( readString(dataIn, bs) );");
1:         }
0:         else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             if (size != null) {
1:                 out.println("info." + setter + "( readBytes(dataIn, " + size.asInt() + ") );");
1:             }
0:             else {
1:                 out.println("info." + setter + "( readBytes(dataIn, bs.readBoolean()) );");
1:             }
1:         }
0:         else if (isThrowable(property.getType())) {
1:             out.println("info." + setter + "( unmarshalBrokerError(wireFormat, dataIn, bs) );");
1:         }
0:         else if (isCachedProperty(property)) {
1:             out.println("info." + setter + "( (" + type + ") unmarshalCachedObject(wireFormat, dataIn, bs) );");
1:         }
0:         else {
1:             out.println("info." + setter + "( (" + type + ") unmarshalNestedObject(wireFormat, dataIn, bs) );");
1:         }
1:     }
1: 
1:     protected void generateUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         JClass propertyType = property.getType();
1:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:         String setter = property.getGetter().getSimpleName();
1:         out.println();
1:         if (size != null) {
1:             out.println("    {");
1:             out.println("        " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:             out.println("        " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:             out.println("            value[i] = (" + arrayType + ") unmarshalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("        }");
1:             out.println("        info." + setter + "( value );");
1:             out.println("    }");
1:         }
0:         else {
1:             out.println("    if (bs.readBoolean()) {");
1:             out.println("        short size = DataStreamMarshaller.readShort(dataIn);");
1:             out.println("        " + arrayType + "[] value = new " + arrayType + "[size];");
1:             out.println("        for( int i=0; i < size; i++ ) {");
1:             out.println("            value[i] = (" + arrayType + ") unmarshalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("        }");
1:             out.println("        info." + setter + "( value );");
1:             out.println("    }");
1:             out.println("    else {");
1:             out.println("        info." + setter + "( null );");
1:             out.println("    }");
1:         }
1:     }
1: 
1:     protected int generateMarshal1Body(PrintWriter out) {
1:         List properties = getProperties();
1:         int baseSize = 0;
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1: 
1:             out.print(indent);
1:             if (type.equals("boolean")) {
1:                 out.println("bs.writeBoolean(" + getter + ");");
1:             }
0:             else if (type.equals("byte")) {
1:                 baseSize += 1;
1:             }
0:             else if (type.equals("char")) {
1:                 baseSize += 1;
1:             }
0:             else if (type.equals("short")) {
1:                 baseSize += 1;
1:             }
0:             else if (type.equals("int")) {
1:                 baseSize += 1;
1:             }
0:             else if (type.equals("long")) {
1:                 out.println("rc += marshal1Long(wireFormat, " + getter + ", bs);");
1:             }
0:             else if (type.equals("String")) {
1:                 out.println("rc += writeString(" + getter + ", bs);");
1:             }
0:             else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 if (size == null) {
1:                     out.println("bs.writeBoolean(" + getter + "!=null);");
1:                     out.println("    rc += " + getter + "==null ? 0 : " + getter + ".Length+4;");
1:                 }
0:                 else {
1:                     baseSize += size.asInt();
1:                 }
1:             }
0:             else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("rc += marshalObjectArrayConstSize(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("rc += marshalObjectArray(wireFormat, " + getter + ", bs);");
1:                 }
1:             }
0:             else if (isThrowable(propertyType)) {
1:                 out.println("rc += marshalBrokerError(wireFormat, " + getter + ", bs);");
1:             }
0:             else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("rc += marshal1CachedObject(wireFormat, " + getter + ", bs);");
1:                 }
0:                 else {
1:                     out.println("rc += marshal1NestedObject(wireFormat, " + getter + ", bs);");
1:                 }
1:             }
1:         }
1:         return baseSize;
1:     }
1: 
1:     protected void generateMarshal2Body(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1: 
1:             out.print(indent);
1:             if (type.equals("boolean")) {
1:                 out.println("bs.readBoolean();");
1:             }
0:             else if (type.equals("byte")) {
1:                 out.println("DataStreamMarshaller.writeByte(" + getter + ", dataOut);");
1:             }
0:             else if (type.equals("char")) {
1:                 out.println("DataStreamMarshaller.writeChar(" + getter + ", dataOut);");
1:             }
0:             else if (type.equals("short")) {
1:                 out.println("DataStreamMarshaller.writeShort(" + getter + ", dataOut);");
1:             }
0:             else if (type.equals("int")) {
1:                 out.println("DataStreamMarshaller.writeInt(" + getter + ", dataOut);");
1:             }
0:             else if (type.equals("long")) {
1:                 out.println("marshal2Long(wireFormat, " + getter + ", dataOut, bs);");
1:             }
0:             else if (type.equals("String")) {
1:                 out.println("writeString(" + getter + ", dataOut, bs);");
1:             }
0:             else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 if (size != null) {
1:                     out.println("dataOut.write(" + getter + ", 0, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("if(bs.readBoolean()) {");
1:                     out.println("       DataStreamMarshaller.writeInt(" + getter + ".Length, dataOut);");
1:                     out.println("       dataOut.write(" + getter + ");");
1:                     out.println("    }");
1:                 }
1:             }
0:             else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("marshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("marshalObjectArray(wireFormat, " + getter + ", dataOut, bs);");
1:                 }
1:             }
0:             else if (isThrowable(propertyType)) {
1:                 out.println("marshalBrokerError(wireFormat, " + getter + ", dataOut, bs);");
1:             }
0:             else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("marshal2CachedObject(wireFormat, " + getter + ", dataOut, bs);");
1:                 }
0:                 else {
1:                     out.println("marshal2NestedObject(wireFormat, " + getter + ", dataOut, bs);");
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================