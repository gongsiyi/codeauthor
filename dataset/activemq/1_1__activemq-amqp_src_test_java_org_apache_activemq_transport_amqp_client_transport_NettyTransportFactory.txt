1:4b018b4: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
1:82a5839: import java.net.URI;
1:82a5839: import java.util.Map;
1:82a5839: 
1:f6d2584: import org.apache.activemq.transport.amqp.client.util.PropertyUtil;
1:82a5839: 
2:82a5839: /**
1:82a5839:  * Factory for creating the Netty based TCP Transport.
1:82a5839:  */
1:82a5839: public final class NettyTransportFactory {
1:82a5839: 
1:82a5839:     private NettyTransportFactory() {}
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Creates an instance of the given Transport and configures it using the
1:82a5839:      * properties set on the given remote broker URI.
1:82a5839:      *
1:82a5839:      * @param remoteURI
1:82a5839:      *        The URI used to connect to a remote Peer.
1:82a5839:      *
1:82a5839:      * @return a new Transport instance.
1:82a5839:      *
1:82a5839:      * @throws Exception if an error occurs while creating the Transport instance.
1:82a5839:      */
1:82a5839:     public static NettyTransport createTransport(URI remoteURI) throws Exception {
1:82a5839:         Map<String, String> map = PropertyUtil.parseQuery(remoteURI.getQuery());
1:82a5839:         Map<String, String> transportURIOptions = PropertyUtil.filterProperties(map, "transport.");
1:82a5839:         NettyTransportOptions transportOptions = null;
1:82a5839: 
1:82a5839:         remoteURI = PropertyUtil.replaceQuery(remoteURI, map);
1:82a5839: 
1:31c55f7:         if (!remoteURI.getScheme().equalsIgnoreCase("ssl") && !remoteURI.getScheme().equalsIgnoreCase("wss")) {
1:82a5839:             transportOptions = NettyTransportOptions.INSTANCE.clone();
1:82a5839:         } else {
1:82a5839:             transportOptions = NettyTransportSslOptions.INSTANCE.clone();
1:82a5839:         }
1:82a5839: 
1:82a5839:         Map<String, String> unused = PropertyUtil.setProperties(transportOptions, transportURIOptions);
1:82a5839:         if (!unused.isEmpty()) {
1:82a5839:             String msg = " Not all transport options could be set on the TCP based" +
1:82a5839:                          " Transport. Check the options are spelled correctly." +
1:82a5839:                          " Unused parameters=[" + unused + "]." +
1:82a5839:                          " This provider instance cannot be started.";
1:82a5839:             throw new IllegalArgumentException(msg);
1:82a5839:         }
1:82a5839: 
1:31c55f7:         NettyTransport result = null;
1:31c55f7: 
1:31c55f7:         switch (remoteURI.getScheme().toLowerCase()) {
1:31c55f7:             case "tcp":
1:31c55f7:             case "ssl":
1:31c55f7:                 result = new NettyTcpTransport(remoteURI, transportOptions);
1:31c55f7:                 break;
1:31c55f7:             case "ws":
1:31c55f7:             case "wss":
1:31c55f7:                 result = new NettyWSTransport(remoteURI, transportOptions);
1:31c55f7:                 break;
1:31c55f7:             default:
1:31c55f7:                 throw new IllegalArgumentException("Invalid URI Scheme: " + remoteURI.getScheme());
1:31c55f7:         }
1:82a5839: 
1:82a5839:         return result;
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:         if (!remoteURI.getScheme().equalsIgnoreCase("ssl") && !remoteURI.getScheme().equalsIgnoreCase("wss")) {
/////////////////////////////////////////////////////////////////////////
1:         NettyTransport result = null;
1: 
1:         switch (remoteURI.getScheme().toLowerCase()) {
1:             case "tcp":
1:             case "ssl":
1:                 result = new NettyTcpTransport(remoteURI, transportOptions);
1:                 break;
1:             case "ws":
1:             case "wss":
1:                 result = new NettyWSTransport(remoteURI, transportOptions);
1:                 break;
1:             default:
1:                 throw new IllegalArgumentException("Invalid URI Scheme: " + remoteURI.getScheme());
1:         }
commit:f6d2584
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.util.PropertyUtil;
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import java.net.URI;
1: import java.util.Map;
1: 
0: import org.apache.qpid.jms.util.PropertyUtil;
1: 
1: /**
1:  * Factory for creating the Netty based TCP Transport.
1:  */
1: public final class NettyTransportFactory {
1: 
1:     private NettyTransportFactory() {}
1: 
1:     /**
1:      * Creates an instance of the given Transport and configures it using the
1:      * properties set on the given remote broker URI.
1:      *
1:      * @param remoteURI
1:      *        The URI used to connect to a remote Peer.
1:      *
1:      * @return a new Transport instance.
1:      *
1:      * @throws Exception if an error occurs while creating the Transport instance.
1:      */
1:     public static NettyTransport createTransport(URI remoteURI) throws Exception {
1:         Map<String, String> map = PropertyUtil.parseQuery(remoteURI.getQuery());
1:         Map<String, String> transportURIOptions = PropertyUtil.filterProperties(map, "transport.");
1:         NettyTransportOptions transportOptions = null;
1: 
1:         remoteURI = PropertyUtil.replaceQuery(remoteURI, map);
1: 
0:         if (!remoteURI.getScheme().equalsIgnoreCase("ssl")) {
1:             transportOptions = NettyTransportOptions.INSTANCE.clone();
1:         } else {
1:             transportOptions = NettyTransportSslOptions.INSTANCE.clone();
1:         }
1: 
1:         Map<String, String> unused = PropertyUtil.setProperties(transportOptions, transportURIOptions);
1:         if (!unused.isEmpty()) {
1:             String msg = " Not all transport options could be set on the TCP based" +
1:                          " Transport. Check the options are spelled correctly." +
1:                          " Unused parameters=[" + unused + "]." +
1:                          " This provider instance cannot be started.";
1:             throw new IllegalArgumentException(msg);
1:         }
1: 
0:         NettyTransport result = new NettyTransport(remoteURI, transportOptions);
1: 
1:         return result;
1:     }
1: }
============================================================================