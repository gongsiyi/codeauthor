1:a1a973c: /**
1:a1a973c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a1a973c:  * contributor license agreements.  See the NOTICE file distributed with
1:a1a973c:  * this work for additional information regarding copyright ownership.
1:a1a973c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a1a973c:  * (the "License"); you may not use this file except in compliance with
1:a1a973c:  * the License.  You may obtain a copy of the License at
1:a1a973c:  *
1:a1a973c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a1a973c:  *
1:a1a973c:  * Unless required by applicable law or agreed to in writing, software
1:a1a973c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a1a973c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a1a973c:  * See the License for the specific language governing permissions and
1:a1a973c:  * limitations under the License.
1:a1a973c:  */
1:a1a973c: package org.apache.activemq.bugs;
1:a1a973c: 
1:a1a973c: import static org.junit.Assert.assertNotNull;
1:a1a973c: import static org.junit.Assert.assertTrue;
1:a1a973c: 
1:a1a973c: import java.io.IOException;
1:a1a973c: import java.util.ArrayList;
1:a1a973c: 
1:a1a973c: import org.apache.activemq.broker.BrokerService;
1:a1a973c: import org.apache.activemq.command.ActiveMQQueue;
1:a1a973c: import org.apache.activemq.store.PersistenceAdapter;
1:a1a973c: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:a1a973c: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:a1a973c: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:a1a973c: import org.apache.activemq.util.Wait;
1:a1a973c: import org.junit.After;
1:a1a973c: import org.junit.Before;
1:a1a973c: import org.junit.Test;
1:a1a973c: import org.slf4j.Logger;
1:a1a973c: import org.slf4j.LoggerFactory;
1:a1a973c: 
1:a1a973c: public class AMQ4220Test {
1:a1a973c: 
1:a1a973c:     static final Logger LOG = LoggerFactory.getLogger(AMQ4220Test.class);
1:a1a973c:     private final static int maxFileLength = 1024*1024*32;
1:a1a973c:     private final static String destinationName = "TEST.QUEUE";
1:a1a973c:     BrokerService broker;
1:a1a973c: 
1:a1a973c:     @Before
1:a1a973c:     public void setUp() throws Exception {
1:a1a973c:         prepareBrokerWithMultiStore(true);
1:a1a973c:         broker.start();
1:a1a973c:         broker.waitUntilStarted();
1:a1a973c:     }
1:a1a973c: 
1:a1a973c:     @After
1:a1a973c:     public void tearDown() throws Exception {
1:a1a973c:         broker.stop();
1:a1a973c:     }
1:a1a973c: 
1:a1a973c:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1:a1a973c:         BrokerService broker = new BrokerService();
1:a1a973c:         broker.setUseJmx(true);
1:a1a973c:         broker.setBrokerName("localhost");
1:a1a973c:         broker.setPersistenceAdapter(kaha);
1:a1a973c:         return broker;
1:a1a973c:     }
1:a1a973c: 
1:a1a973c:     @Test
1:a1a973c:     public void testRestartAfterQueueDelete() throws Exception {
1:a1a973c: 
1:a1a973c:         // Ensure we have an Admin View.
1:a1a973c:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:a1a973c:             @Override
1:a1a973c:             public boolean isSatisified() throws Exception {
1:a1a973c:                 return (broker.getAdminView()) != null;
1:a1a973c:             }
1:a1a973c:         }));
1:a1a973c: 
1:a1a973c: 
1:a1a973c:         LOG.info("Adding initial destination: {}", destinationName);
1:a1a973c: 
1:a1a973c:         broker.getAdminView().addQueue(destinationName);
1:a1a973c: 
1:a1a973c:         assertNotNull(broker.getDestination(new ActiveMQQueue(destinationName)));
1:a1a973c: 
1:a1a973c:         LOG.info("Removing initial destination: {}", destinationName);
1:a1a973c: 
1:a1a973c:         broker.getAdminView().removeQueue(destinationName);
1:a1a973c: 
1:a1a973c:         LOG.info("Adding back destination: {}", destinationName);
1:a1a973c: 
1:a1a973c:         broker.getAdminView().addQueue(destinationName);
1:a1a973c: 
1:a1a973c:         assertNotNull(broker.getDestination(new ActiveMQQueue(destinationName)));
1:a1a973c:     }
1:a1a973c: 
1:a1a973c:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:a1a973c:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:a1a973c:         kaha.setJournalMaxFileLength(maxFileLength);
1:a1a973c:         kaha.setCleanupInterval(5000);
1:a1a973c:         if (delete) {
1:a1a973c:             kaha.deleteAllMessages();
1:a1a973c:         }
1:a1a973c:         return kaha;
1:a1a973c:     }
1:a1a973c: 
1:a1a973c:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1:a1a973c: 
1:a1a973c:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:a1a973c:         if (deleteAllMessages) {
1:a1a973c:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:a1a973c:         }
1:a1a973c:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:a1a973c: 
1:a1a973c:         FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:a1a973c:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:a1a973c:         template.setPerDestination(true);
1:a1a973c:         adapters.add(template);
1:a1a973c: 
1:a1a973c:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:a1a973c:         broker = createBroker(multiKahaDBPersistenceAdapter);
1:a1a973c:     }
1:a1a973c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:a1a973c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4220Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ4220Test.class);
1:     private final static int maxFileLength = 1024*1024*32;
1:     private final static String destinationName = "TEST.QUEUE";
1:     BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         prepareBrokerWithMultiStore(true);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setBrokerName("localhost");
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testRestartAfterQueueDelete() throws Exception {
1: 
1:         // Ensure we have an Admin View.
1:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return (broker.getAdminView()) != null;
1:             }
1:         }));
1: 
1: 
1:         LOG.info("Adding initial destination: {}", destinationName);
1: 
1:         broker.getAdminView().addQueue(destinationName);
1: 
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(destinationName)));
1: 
1:         LOG.info("Removing initial destination: {}", destinationName);
1: 
1:         broker.getAdminView().removeQueue(destinationName);
1: 
1:         LOG.info("Adding back destination: {}", destinationName);
1: 
1:         broker.getAdminView().addQueue(destinationName);
1: 
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(destinationName)));
1:     }
1: 
1:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setJournalMaxFileLength(maxFileLength);
1:         kaha.setCleanupInterval(5000);
1:         if (delete) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1: 
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         if (deleteAllMessages) {
1:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:         }
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:         template.setPerDestination(true);
1:         adapters.add(template);
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:         broker = createBroker(multiKahaDBPersistenceAdapter);
1:     }
1: }
============================================================================