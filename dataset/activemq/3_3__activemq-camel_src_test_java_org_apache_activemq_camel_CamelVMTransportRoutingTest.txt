1:8e70e01: /**
1:8e70e01:  *
1:8e70e01:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e70e01:  * contributor license agreements.  See the NOTICE file distributed with
1:8e70e01:  * this work for additional information regarding copyright ownership.
1:8e70e01:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e70e01:  * (the "License"); you may not use this file except in compliance with
1:8e70e01:  * the License.  You may obtain a copy of the License at
1:8e70e01:  *
1:8e70e01:  * http://www.apache.org/licenses/LICENSE-2.0
1:8e70e01:  *
1:8e70e01:  * Unless required by applicable law or agreed to in writing, software
1:8e70e01:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e70e01:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e70e01:  * See the License for the specific language governing permissions and
1:8e70e01:  * limitations under the License.
1:8e70e01:  */
1:8e70e01: package org.apache.activemq.camel;
1:8e70e01: 
1:8e70e01: import javax.jms.Connection;
1:8e70e01: import javax.jms.Destination;
1:8e70e01: import javax.jms.MessageConsumer;
1:8e70e01: import javax.jms.MessageProducer;
1:8e70e01: import javax.jms.Session;
1:8e70e01: import javax.jms.TextMessage;
1:8e70e01: 
1:8e70e01: import junit.framework.TestCase;
1:8e70e01: 
1:8e70e01: import org.apache.activemq.ActiveMQConnectionFactory;
1:8e70e01: import org.apache.activemq.broker.BrokerService;
1:8e70e01: import org.apache.activemq.broker.TransportConnector;
1:8e70e01: import org.apache.activemq.camel.component.ActiveMQComponent;
1:8e70e01: import org.apache.activemq.util.ThreadTracker;
1:8e70e01: import org.apache.camel.CamelContext;
1:8e70e01: import org.apache.camel.builder.RouteBuilder;
1:8e70e01: import org.apache.camel.impl.DefaultCamelContext;
1:d4da85f: import org.junit.Assert;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8e70e01: 
1:8e70e01: // see: https://issues.apache.org/activemq/browse/AMQ-2966
1:8e70e01: public class CamelVMTransportRoutingTest extends TestCase {
1:8e70e01: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(CamelVMTransportRoutingTest.class);
1:8e70e01: 
1:8e70e01:     private BrokerService broker = null;
1:8e70e01:     private TransportConnector connector = null;
1:8e70e01:     private CamelContext camelContext = null;
1:8e70e01: 
1:8e70e01:     private Connection senderConnection;
1:8e70e01:     private Connection receiverConnection1;
1:8e70e01:     private Connection receiverConnection2;
1:8e70e01: 
1:8e70e01:     private final String MSG_STRING = "MESSAGE-TEXT";
1:8e70e01:     private final String SENDER_TOPIC = "A";
1:8e70e01:     private final String RECEIVER_TOPIC = "B";
1:8e70e01: 
1:d4da85f:     @SuppressWarnings("unused")
1:8e70e01:     public void testSendReceiveWithCamelRouteIntercepting() throws Exception {
1:8e70e01: 
1:d4da85f:         final int MSG_COUNT = 1000;
1:8e70e01: 
1:d4da85f:         Session sendSession = senderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4da85f:         Session receiverSession1 = receiverConnection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4da85f:         Session receiverSession2 = receiverConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e70e01: 
1:d4da85f:         Destination sendTo = sendSession.createTopic(SENDER_TOPIC);
1:d4da85f:         Destination receiveFrom = receiverSession1.createTopic(RECEIVER_TOPIC);
1:8e70e01: 
1:d4da85f:         TextMessage message = sendSession.createTextMessage(MSG_STRING);
1:8e70e01: 
1:d4da85f:         MessageConsumer receiver1 = receiverSession1.createConsumer(receiveFrom);
1:d4da85f:         MessageConsumer receiver2 = receiverSession2.createConsumer(receiveFrom);
1:8e70e01: 
1:d4da85f:         MessageProducer sender = sendSession.createProducer(sendTo);
1:d4da85f:         for( int i = 0; i < MSG_COUNT; ++i ) {
1:d4da85f:             sender.send(message);
1:d4da85f:         }
1:8e70e01: 
1:d4da85f:         for( int i = 0; i < MSG_COUNT; ++i ) {
1:8e70e01: 
1:d4da85f:             log.debug("Attempting Received for Message #" + i);
1:d4da85f:             TextMessage received1 = (TextMessage) receiver1.receive(5000);
1:d4da85f:             Assert.assertNotNull(received1);
1:d4da85f:             Assert.assertEquals(MSG_STRING, received1.getText());
5:8e70e01:         }
1:8e70e01:     }
1:8e70e01: 
1:8e70e01:     protected BrokerService createBroker() throws Exception {
1:8e70e01: 
1:d4da85f:         BrokerService service = new BrokerService();
1:8e70e01:         service.setPersistent(false);
1:8e70e01:         service.setUseJmx(false);
1:8e70e01:         connector = service.addConnector("tcp://localhost:0");
1:8e70e01: 
1:8e70e01:         return service;
1:8e70e01:     }
1:8e70e01: 
1:d4da85f:     @Override
1:8e70e01:     public void setUp() throws Exception {
1:8e70e01: 
1:d4da85f:         broker = createBroker();
1:d4da85f:         broker.start();
1:d4da85f:         broker.waitUntilStarted();
1:8e70e01: 
1:d4da85f:         Thread.sleep(1000);
1:8e70e01: 
1:d4da85f:         createCamelContext();
1:8e70e01: 
1:8e70e01:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri());
1:8e70e01:         senderConnection = connFactory.createConnection();
1:8e70e01:         receiverConnection1 = connFactory.createConnection();
1:8e70e01:         receiverConnection2 = connFactory.createConnection();
1:8e70e01: 
1:8e70e01:         receiverConnection1.start();
1:8e70e01:         receiverConnection2.start();
1:8e70e01:     }
1:8e70e01: 
1:d4da85f:     @Override
1:8e70e01:     public void tearDown() throws Exception {
1:8e70e01: 
1:d4da85f:         if( senderConnection != null ) {
1:d4da85f:             senderConnection.close();
1:d4da85f:         }
1:8e70e01: 
1:d4da85f:         if( receiverConnection1 != null ) {
1:d4da85f:             receiverConnection1.close();
1:d4da85f:         }
1:8e70e01: 
1:d4da85f:         if( receiverConnection2 != null ) {
1:d4da85f:             receiverConnection2.close();
1:d4da85f:         }
1:8e70e01: 
1:d4da85f:         camelContext.stop();
1:d4da85f:         broker.stop();
1:8e70e01: 
1:8e70e01:         ThreadTracker.result();
1:8e70e01:     }
1:8e70e01: 
1:8e70e01:     private void createCamelContext() throws Exception {
1:8e70e01: 
1:8e70e01:         final String fromEndpoint = "activemq:topic:" + SENDER_TOPIC;
1:8e70e01:         final String toEndpoint = "activemq:topic:" + RECEIVER_TOPIC;
1:8e70e01: 
1:d4da85f:         log.info("creating context and sending message");
1:8e70e01:         camelContext = new DefaultCamelContext();
1:8e70e01:         camelContext.addComponent("activemq",
1:d4da85f:                 ActiveMQComponent.activeMQComponent("vm://localhost?create=false&waitForStart=10000"));
1:8e70e01:         camelContext.addRoutes(new RouteBuilder() {
1:8e70e01:             @Override
1:8e70e01:             public void configure() throws Exception {
1:8e70e01:                 from(fromEndpoint).to(toEndpoint);
1:8e70e01:             }
1:8e70e01:         });
1:8e70e01:         camelContext.start();
1:8e70e01:     }
1:8e70e01: 
1:8e70e01: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
1:         final int MSG_COUNT = 1000;
1:         Session sendSession = senderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session receiverSession1 = receiverConnection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session receiverSession2 = receiverConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination sendTo = sendSession.createTopic(SENDER_TOPIC);
1:         Destination receiveFrom = receiverSession1.createTopic(RECEIVER_TOPIC);
1:         TextMessage message = sendSession.createTextMessage(MSG_STRING);
1:         MessageConsumer receiver1 = receiverSession1.createConsumer(receiveFrom);
1:         MessageConsumer receiver2 = receiverSession2.createConsumer(receiveFrom);
1:         MessageProducer sender = sendSession.createProducer(sendTo);
1:         for( int i = 0; i < MSG_COUNT; ++i ) {
1:             sender.send(message);
1:         }
1:         for( int i = 0; i < MSG_COUNT; ++i ) {
1:             log.debug("Attempting Received for Message #" + i);
1:             TextMessage received1 = (TextMessage) receiver1.receive(5000);
1:             Assert.assertNotNull(received1);
1:             Assert.assertEquals(MSG_STRING, received1.getText());
1:         BrokerService service = new BrokerService();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         Thread.sleep(1000);
1:         createCamelContext();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if( senderConnection != null ) {
1:             senderConnection.close();
1:         }
1:         if( receiverConnection1 != null ) {
1:             receiverConnection1.close();
1:         }
1:         if( receiverConnection2 != null ) {
1:             receiverConnection2.close();
1:         }
1:         camelContext.stop();
1:         broker.stop();
/////////////////////////////////////////////////////////////////////////
1:         log.info("creating context and sending message");
1:                 ActiveMQComponent.activeMQComponent("vm://localhost?create=false&waitForStart=10000"));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger log = LoggerFactory.getLogger(CamelVMTransportRoutingTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8e70e01
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.camel.component.ActiveMQComponent;
1: import org.apache.activemq.util.ThreadTracker;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.impl.DefaultCamelContext;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.junit.Assert;
1: 
1: // see: https://issues.apache.org/activemq/browse/AMQ-2966
1: public class CamelVMTransportRoutingTest extends TestCase {
1: 
0:     private static final Log log = LogFactory.getLog(CamelVMTransportRoutingTest.class);
1: 
1:     private BrokerService broker = null;
1:     private TransportConnector connector = null;
1:     private CamelContext camelContext = null;
1: 
1:     private Connection senderConnection;
1:     private Connection receiverConnection1;
1:     private Connection receiverConnection2;
1: 
1:     private final String MSG_STRING = "MESSAGE-TEXT";
1:     private final String SENDER_TOPIC = "A";
1:     private final String RECEIVER_TOPIC = "B";
1: 
1:     public void testSendReceiveWithCamelRouteIntercepting() throws Exception {
1: 
0:     	final int MSG_COUNT = 1000;
1: 
0:     	Session sendSession = senderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	Session receiverSession1 = receiverConnection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	Session receiverSession2 = receiverConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:     	Destination sendTo = sendSession.createTopic(SENDER_TOPIC);
0:     	Destination receiveFrom = receiverSession1.createTopic(RECEIVER_TOPIC);
1: 
0:     	TextMessage message = sendSession.createTextMessage(MSG_STRING);
1: 
0:     	MessageConsumer receiver1 = receiverSession1.createConsumer(receiveFrom);
0:     	MessageConsumer receiver2 = receiverSession2.createConsumer(receiveFrom);
1: 
0:     	MessageProducer sender = sendSession.createProducer(sendTo);
0:     	for( int i = 0; i < MSG_COUNT; ++i ) {
0:     		sender.send(message);
1:     	}
1: 
0:     	for( int i = 0; i < MSG_COUNT; ++i ) {
1: 
0:     		log.debug("Attempting Received for Message #" + i);
0:     		TextMessage received1 = (TextMessage) receiver1.receive(5000);
0:         	Assert.assertNotNull(received1);
0:         	Assert.assertEquals(MSG_STRING, received1.getText());
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1: 
0:     	BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         connector = service.addConnector("tcp://localhost:0");
1: 
1:         return service;
1:     }
1: 
1:     public void setUp() throws Exception {
1: 
0:     	broker = createBroker();
0:     	broker.start();
0:     	broker.waitUntilStarted();
1: 
0:     	Thread.sleep(1000);
1: 
0:     	createCamelContext();
1: 
1:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri());
1:         senderConnection = connFactory.createConnection();
1:         receiverConnection1 = connFactory.createConnection();
1:         receiverConnection2 = connFactory.createConnection();
1: 
1:         receiverConnection1.start();
1:         receiverConnection2.start();
1:     }
1: 
1:     public void tearDown() throws Exception {
1: 
0:     	if( senderConnection != null ) {
0:     		senderConnection.close();
1:     	}
1: 
0:     	if( receiverConnection1 != null ) {
0:     		receiverConnection1.close();
1:     	}
1: 
0:     	if( receiverConnection2 != null ) {
0:     		receiverConnection2.close();
1:     	}
1: 
0:     	camelContext.stop();
0:     	broker.stop();
1: 
1:         ThreadTracker.result();
1:     }
1: 
1:     private void createCamelContext() throws Exception {
1: 
1:         final String fromEndpoint = "activemq:topic:" + SENDER_TOPIC;
1:         final String toEndpoint = "activemq:topic:" + RECEIVER_TOPIC;
1: 
0:     	log.info("creating context and sending message");
1:         camelContext = new DefaultCamelContext();
1:         camelContext.addComponent("activemq",
0:         		ActiveMQComponent.activeMQComponent("vm://localhost?create=false&waitForStart=10000"));
1:         camelContext.addRoutes(new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from(fromEndpoint).to(toEndpoint);
1:             }
1:         });
1:         camelContext.start();
1:     }
1: 
1: }
============================================================================