1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:1288df5:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1288df5:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
10:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.IOException;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.LinkedNode;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.SequenceSet;
1:1288df5: import org.apache.activemq.util.IOHelper;
1:582af3e: import org.apache.activemq.util.RecoverableRandomAccessFile;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * DataFile
1:456a2ba:  */
1:456a2ba: public class DataFile extends LinkedNode<DataFile> implements Comparable<DataFile> {
1:45e59e6: 
1:946e62d:     public final static byte STANDARD_LOG_FILE = 0x0;
1:456a2ba: 
1:456a2ba:     protected final File file;
1:456a2ba:     protected final Integer dataFileId;
1:bb4a2f7:     protected volatile int length;
1:946e62d:     protected int typeCode = STANDARD_LOG_FILE;
1:76d3b46:     protected final SequenceSet corruptedBlocks = new SequenceSet();
1:62bdbb0:     protected RecoverableRandomAccessFile appendRandomAccessFile;
1:456a2ba: 
1:95f7262:     DataFile(File file, int number) {
1:456a2ba:         this.file = file;
1:456a2ba:         this.dataFileId = Integer.valueOf(number);
1:456a2ba:         length = (int)(file.exists() ? file.length() : 0);
7:456a2ba:     }
1:1288df5: 
1:456a2ba:     public File getFile() {
1:456a2ba:         return file;
1:456a2ba:     }
1:76d3b46: 
1:456a2ba:     public Integer getDataFileId() {
1:456a2ba:         return dataFileId;
1:45e59e6:     }
1:45e59e6: 
1:946e62d:     public int getTypeCode() {
1:946e62d:         return typeCode;
1:946e62d:     }
1:946e62d: 
1:946e62d:     public void setTypeCode(int typeCode) {
1:946e62d:         this.typeCode = typeCode;
1:946e62d:     }
1:946e62d: 
1:456a2ba:     public synchronized int getLength() {
1:456a2ba:         return length;
1:45e59e6:     }
1:45e59e6: 
1:456a2ba:     public void setLength(int length) {
1:456a2ba:         this.length = length;
1:456a2ba:     }
1:45e59e6: 
1:456a2ba:     public synchronized void incrementLength(int size) {
1:456a2ba:         length += size;
1:456a2ba:     }
1:45e59e6: 
1:d53b8f8:     public synchronized void decrementLength(int size) {
1:d53b8f8:         length -= size;
1:d53b8f8:     }
1:d53b8f8: 
1:1288df5:     @Override
1:946e62d:     public synchronized String toString() {
1:456a2ba:         return file.getName() + " number = " + dataFileId + " , length = " + length;
1:456a2ba:     }
1:456a2ba: 
1:62bdbb0:     public synchronized RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1:62bdbb0:         if (appendRandomAccessFile == null) {
1:62bdbb0:             appendRandomAccessFile = new RecoverableRandomAccessFile(file.getCanonicalPath(), "rw");
1:62bdbb0:         }
1:62bdbb0:         return appendRandomAccessFile;
1:62bdbb0:     }
1:62bdbb0: 
1:582af3e:     public synchronized RecoverableRandomAccessFile openRandomAccessFile() throws IOException {
1:582af3e:         return new RecoverableRandomAccessFile(file.getCanonicalPath(), "rw");
1:456a2ba:     }
1:456a2ba: 
1:582af3e:     public synchronized void closeRandomAccessFile(RecoverableRandomAccessFile file) throws IOException {
1:45e59e6:         file.close();
1:62bdbb0:         if (file == appendRandomAccessFile) {
1:62bdbb0:             appendRandomAccessFile = null;
1:62bdbb0:         }
1:45e59e6:     }
1:45e59e6: 
1:456a2ba:     public synchronized boolean delete() throws IOException {
1:456a2ba:         return file.delete();
1:45e59e6:     }
1:45e59e6: 
1:456a2ba:     public synchronized void move(File targetDirectory) throws IOException{
1:802e527:         IOHelper.moveFile(file, targetDirectory);
1:45e59e6:     }
1:1288df5: 
1:76d3b46:     public SequenceSet getCorruptedBlocks() {
1:76d3b46:         return corruptedBlocks;
1:76d3b46:     }
1:1288df5: 
1:1288df5:     @Override
1:946e62d:     public int compareTo(DataFile df) {
1:456a2ba:         return dataFileId - df.dataFileId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     @Override
1:456a2ba:     public boolean equals(Object o) {
1:456a2ba:         boolean result = false;
1:456a2ba:         if (o instanceof DataFile) {
1:456a2ba:             result = compareTo((DataFile)o) == 0;
1:456a2ba:         }
1:456a2ba:         return result;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     @Override
1:456a2ba:     public int hashCode() {
1:456a2ba:         return dataFileId;
1:45e59e6:     }
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d53b8f8
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void decrementLength(int size) {
1:         length -= size;
1:     }
1: 
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
1:     protected RecoverableRandomAccessFile appendRandomAccessFile;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1:         if (appendRandomAccessFile == null) {
1:             appendRandomAccessFile = new RecoverableRandomAccessFile(file.getCanonicalPath(), "rw");
1:         }
1:         return appendRandomAccessFile;
1:     }
1: 
1:         if (file == appendRandomAccessFile) {
1:             appendRandomAccessFile = null;
1:         }
commit:95f7262
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     DataFile(File file, int number) {
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1:     public final static byte STANDARD_LOG_FILE = 0x0;
1:     protected int typeCode = STANDARD_LOG_FILE;
/////////////////////////////////////////////////////////////////////////
1:     public int getTypeCode() {
1:         return typeCode;
1:     }
1: 
1:     public void setTypeCode(int typeCode) {
1:         this.typeCode = typeCode;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public synchronized String toString() {
/////////////////////////////////////////////////////////////////////////
1:     public int compareTo(DataFile df) {
/////////////////////////////////////////////////////////////////////////
author:Christian Posta
-------------------------------------------------------------------------------
commit:023b2ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:45e59e6
/////////////////////////////////////////////////////////////////////////
0: import java.io.RandomAccessFile;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.FileChannel;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(DataFile.class);
1: 
0:     protected long preallocationBatchWindow = 0L;
/////////////////////////////////////////////////////////////////////////
0:         preallocationBatchWindow -= size;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void preallocateJournalBatch(Journal journal, long newMessageSize) {
1: 
0:         if (preallocationBatchWindow - newMessageSize <= 0) {
0:             int preallocationBatchSize = Math.min(journal.getPreallocationBatchSize(),
0:                     journal.maxFileLength - length);
0:             doPreallocation(preallocationBatchSize);
0:             preallocationBatchWindow = preallocationBatchSize;
1:         }
1:     }
1: 
0:     private void doPreallocation(int size) {
0:         try {
0:             RecoverableRandomAccessFile file = openRandomAccessFile();
0:             FileChannel channel = file.getChannel();
1: 
0:             channel.position(length+1);
0:             ByteBuffer buffer = generateAllocation(size);
0:             channel.write(buffer);
0:             channel.force(false);
1:             file.close();
0:         } catch (IOException e) {
0:             LOG.debug("Cannot allocate batch for journal, continue without preallocation of batch...");
1:         }
1: 
1:     }
1: 
0:     private ByteBuffer generateAllocation(int size) {
0:         ByteBuffer rc = ByteBuffer.allocate(size);
0:         for (int i = 0; i < size; i++) {
0:             rc.put((byte) 0x00);
1:         }
0:         rc.flip();
0:         return rc;
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:802e527
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.moveFile(file, targetDirectory);
commit:582af3e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.RecoverableRandomAccessFile;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized RecoverableRandomAccessFile openRandomAccessFile() throws IOException {
1:         return new RecoverableRandomAccessFile(file.getCanonicalPath(), "rw");
1:     public synchronized void closeRandomAccessFile(RecoverableRandomAccessFile file) throws IOException {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1288df5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOHelper;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public synchronized String toString() {
0:         return new RandomAccessFile(file.getCanonicalPath(), "rw");
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0: 	public int compareTo(DataFile df) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
0: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.store.kahadb.disk.util.LinkedNode;
1: import org.apache.activemq.store.kahadb.disk.util.SequenceSet;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:76d3b46
/////////////////////////////////////////////////////////////////////////
0: import org.apache.kahadb.util.SequenceSet;
/////////////////////////////////////////////////////////////////////////
1:     protected final SequenceSet corruptedBlocks = new SequenceSet();
/////////////////////////////////////////////////////////////////////////
1:     public SequenceSet getCorruptedBlocks() {
1:         return corruptedBlocks;
1:     }
1:     
commit:f73b622
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.File;
1: import java.io.IOException;
0: import java.io.RandomAccessFile;
1: 
0: import org.apache.kahadb.journal.DataFileAppender.WriteCommand;
0: import org.apache.kahadb.util.IOHelper;
0: import org.apache.kahadb.util.LinkedNode;
1: 
1: /**
1:  * DataFile
0:  * 
0:  * @version $Revision$
1:  */
1: public class DataFile extends LinkedNode<DataFile> implements Comparable<DataFile> {
1: 
1:     protected final File file;
1:     protected final Integer dataFileId;
0:     protected int length;
1: 
0:     DataFile(File file, int number, int preferedSize) {
1:         this.file = file;
1:         this.dataFileId = Integer.valueOf(number);
1:         length = (int)(file.exists() ? file.length() : 0);
1:     }
1:     
1:     public File getFile() {
1:         return file;
1:     }
1: 
1:     public Integer getDataFileId() {
1:         return dataFileId;
1:     }
1: 
1:     public synchronized int getLength() {
1:         return length;
1:     }
1: 
1:     public void setLength(int length) {
1:         this.length = length;
1:     }
1: 
1:     public synchronized void incrementLength(int size) {
1:         length += size;
1:     }
1: 
0:     public synchronized String toString() {
1:         return file.getName() + " number = " + dataFileId + " , length = " + length;
1:     }
1: 
0:     public synchronized RandomAccessFile openRandomAccessFile() throws IOException {
0:         return new RandomAccessFile(file, "rw");
1:     }
1: 
0:     public synchronized void closeRandomAccessFile(RandomAccessFile file) throws IOException {
0:         file.close();
1:     }
1: 
1:     public synchronized boolean delete() throws IOException {
1:         return file.delete();
1:     }
1:     
1:     public synchronized void move(File targetDirectory) throws IOException{
0:         IOHelper.moveFile(file,targetDirectory);
1:     }
1: 
0:     public int compareTo(DataFile df) {
1:         return dataFileId - df.dataFileId;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o) {
1:         boolean result = false;
1:         if (o instanceof DataFile) {
1:             result = compareTo((DataFile)o) == 0;
1:         }
1:         return result;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         return dataFileId;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:bb4a2f7
/////////////////////////////////////////////////////////////////////////
1:     protected volatile int length;
commit:c42d980
/////////////////////////////////////////////////////////////////////////
0:     protected int length;
0:     DataFile(File file, int number, int preferedSize) {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized int getLength() {
0:     public void setLength(int length) {
commit:880f3d6
/////////////////////////////////////////////////////////////////////////
0:     protected long length;
0:     DataFile(File file, int number, long preferedSize) {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized long getLength() {
0:     public void setLength(long length) {
============================================================================