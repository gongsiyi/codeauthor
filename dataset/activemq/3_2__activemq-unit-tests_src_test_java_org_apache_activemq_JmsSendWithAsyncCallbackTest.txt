1:d4cd7f9: /**
1:d4cd7f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4cd7f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d4cd7f9:  * this work for additional information regarding copyright ownership.
1:d4cd7f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4cd7f9:  * (the "License"); you may not use this file except in compliance with
1:d4cd7f9:  * the License.  You may obtain a copy of the License at
2:d4cd7f9:  *
1:d4cd7f9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d4cd7f9:  *
1:d4cd7f9:  * Unless required by applicable law or agreed to in writing, software
1:d4cd7f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4cd7f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4cd7f9:  * See the License for the specific language governing permissions and
1:d4cd7f9:  * limitations under the License.
1:d4cd7f9:  */
1:d4cd7f9: package org.apache.activemq;
3:d4cd7f9: 
1:d4cd7f9: import java.util.concurrent.CountDownLatch;
1:d4cd7f9: 
1:f1c4a32: import javax.jms.Connection;
1:f1c4a32: import javax.jms.DeliveryMode;
1:f1c4a32: import javax.jms.JMSException;
1:f1c4a32: import javax.jms.Message;
1:f1c4a32: import javax.jms.MessageConsumer;
1:f1c4a32: import javax.jms.MessageListener;
1:f1c4a32: import javax.jms.Queue;
1:f1c4a32: import javax.jms.Session;
1:f1c4a32: 
1:f1c4a32: import org.slf4j.Logger;
1:f1c4a32: import org.slf4j.LoggerFactory;
1:f1c4a32: 
1:d4cd7f9: /**
1:f1c4a32:  *
1:d4cd7f9:  */
1:d4cd7f9: public class JmsSendWithAsyncCallbackTest extends TestSupport {
1:d4cd7f9: 
1:f1c4a32:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendWithAsyncCallbackTest.class);
1:f1c4a32: 
1:d4cd7f9:     private Connection connection;
1:d4cd7f9: 
1:6473236:     @Override
1:d4cd7f9:     protected void setUp() throws Exception {
1:d4cd7f9:         super.setUp();
1:d4cd7f9:         connection = createConnection();
1:d4cd7f9:     }
1:d4cd7f9: 
1:d4cd7f9:     /**
1:d4cd7f9:      * @see junit.framework.TestCase#tearDown()
1:d4cd7f9:      */
1:6473236:     @Override
1:d4cd7f9:     protected void tearDown() throws Exception {
1:d4cd7f9:         if (connection != null) {
1:d4cd7f9:             connection.close();
1:d4cd7f9:             connection = null;
1:d4cd7f9:         }
1:d4cd7f9:         super.tearDown();
1:d4cd7f9:     }
1:d4cd7f9: 
1:d4cd7f9:     public void testAsyncCallbackIsFaster() throws JMSException, InterruptedException {
1:d4cd7f9:         connection.start();
1:d4cd7f9: 
1:d4cd7f9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4cd7f9:         Queue queue = session.createQueue(getName());
1:d4cd7f9: 
1:d4cd7f9:         // setup a consumer to drain messages..
1:d4cd7f9:         MessageConsumer consumer = session.createConsumer(queue);
1:d4cd7f9:         consumer.setMessageListener(new MessageListener() {
1:d4cd7f9:             @Override
1:d4cd7f9:             public void onMessage(Message message) {
1:d4cd7f9:             }
1:d4cd7f9:         });
1:d4cd7f9: 
1:d4cd7f9:         // warmup...
1:6473236:         for (int i = 0; i < 10; i++) {
1:d4cd7f9:             benchmarkNonCallbackRate();
1:d4cd7f9:             benchmarkCallbackRate();
1:d4cd7f9:         }
1:d4cd7f9: 
1:d4cd7f9:         double callbackRate = benchmarkCallbackRate();
1:d4cd7f9:         double nonCallbackRate = benchmarkNonCallbackRate();
1:d4cd7f9: 
1:f1c4a32:         LOG.info(String.format("AsyncCallback Send rate: %,.2f m/s", callbackRate));
1:f1c4a32:         LOG.info(String.format("NonAsyncCallback Send rate: %,.2f m/s", nonCallbackRate));
1:d4cd7f9: 
1:d4cd7f9:         // The async style HAS to be faster than the non-async style..
1:6473236:         assertTrue("async rate[" + callbackRate + "] should beat non-async rate[" + nonCallbackRate + "]", callbackRate / nonCallbackRate > 1.5);
1:d4cd7f9:     }
1:d4cd7f9: 
1:d4cd7f9:     private double benchmarkNonCallbackRate() throws JMSException {
1:d4cd7f9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4cd7f9:         Queue queue = session.createQueue(getName());
1:d4cd7f9:         int count = 1000;
1:d4cd7f9:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(queue);
1:d4cd7f9:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d4cd7f9:         long start = System.currentTimeMillis();
1:d4cd7f9:         for (int i = 0; i < count; i++) {
1:d4cd7f9:             producer.send(session.createTextMessage("Hello"));
1:d4cd7f9:         }
1:d4cd7f9:         return 1000.0 * count / (System.currentTimeMillis() - start);
1:d4cd7f9:     }
1:d4cd7f9: 
1:d4cd7f9:     private double benchmarkCallbackRate() throws JMSException, InterruptedException {
1:d4cd7f9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4cd7f9:         Queue queue = session.createQueue(getName());
1:d4cd7f9:         int count = 1000;
1:d4cd7f9:         final CountDownLatch messagesSent = new CountDownLatch(count);
1:d4cd7f9:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(queue);
1:d4cd7f9:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d4cd7f9:         long start = System.currentTimeMillis();
1:d4cd7f9:         for (int i = 0; i < count; i++) {
1:d4cd7f9:             producer.send(session.createTextMessage("Hello"), new AsyncCallback() {
1:d4cd7f9:                 @Override
1:d4cd7f9:                 public void onSuccess() {
1:d4cd7f9:                     messagesSent.countDown();
1:d4cd7f9:                 }
1:d4cd7f9: 
1:d4cd7f9:                 @Override
1:d4cd7f9:                 public void onException(JMSException exception) {
1:d4cd7f9:                     exception.printStackTrace();
1:d4cd7f9:                 }
1:d4cd7f9:             });
1:d4cd7f9:         }
1:d4cd7f9:         messagesSent.await();
1:d4cd7f9:         return 1000.0 * count / (System.currentTimeMillis() - start);
1:d4cd7f9:     }
1:d4cd7f9: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6473236
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 10; i++) {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("async rate[" + callbackRate + "] should beat non-async rate[" + nonCallbackRate + "]", callbackRate / nonCallbackRate > 1.5);
commit:f1c4a32
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:  *
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendWithAsyncCallbackTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(String.format("AsyncCallback Send rate: %,.2f m/s", callbackRate));
1:         LOG.info(String.format("NonAsyncCallback Send rate: %,.2f m/s", nonCallbackRate));
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d4cd7f9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import javax.jms.*;
0: import javax.jms.Message;
1: import java.util.concurrent.CountDownLatch;
1: 
1: /**
1:  * 
1:  */
1: public class JmsSendWithAsyncCallbackTest extends TestSupport {
1: 
1:     private Connection connection;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1:     
1: 
1:     public void testAsyncCallbackIsFaster() throws JMSException, InterruptedException {
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getName());
1: 
1:         // setup a consumer to drain messages..
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:             }
1:         });
1: 
1:         // warmup...
0:         for(int i=0; i < 10; i++) {
1:             benchmarkNonCallbackRate();
1:             benchmarkCallbackRate();
1:         }
1: 
1:         double callbackRate = benchmarkCallbackRate();
1:         double nonCallbackRate = benchmarkNonCallbackRate();
1: 
0:         System.out.println(String.format("AsyncCallback Send rate: %,.2f m/s", callbackRate));
0:         System.out.println(String.format("NonAsyncCallback Send rate: %,.2f m/s", nonCallbackRate));
1: 
1:         // The async style HAS to be faster than the non-async style..
0:         assertTrue( callbackRate/nonCallbackRate > 1.5 );
1:     }
1: 
1:     private double benchmarkNonCallbackRate() throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getName());
1:         int count = 1000;
1:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         long start = System.currentTimeMillis();
1:         for (int i = 0; i < count; i++) {
1:             producer.send(session.createTextMessage("Hello"));
1:         }
1:         return 1000.0 * count / (System.currentTimeMillis() - start);
1:     }
1: 
1:     private double benchmarkCallbackRate() throws JMSException, InterruptedException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getName());
1:         int count = 1000;
1:         final CountDownLatch messagesSent = new CountDownLatch(count);
1:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         long start = System.currentTimeMillis();
1:         for (int i = 0; i < count; i++) {
1:             producer.send(session.createTextMessage("Hello"), new AsyncCallback() {
1:                 @Override
1:                 public void onSuccess() {
1:                     messagesSent.countDown();
1:                 }
1: 
1:                 @Override
1:                 public void onException(JMSException exception) {
1:                     exception.printStackTrace();
1:                 }
1:             });
1:         }
1:         messagesSent.await();
1:         return 1000.0 * count / (System.currentTimeMillis() - start);
1:     }
1: 
1: }
============================================================================