1:663d5db: /**
1:663d5db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:663d5db:  * contributor license agreements.  See the NOTICE file distributed with
1:663d5db:  * this work for additional information regarding copyright ownership.
1:663d5db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:663d5db:  * (the "License"); you may not use this file except in compliance with
1:663d5db:  * the License.  You may obtain a copy of the License at
1:663d5db:  *
1:663d5db:  *      http://www.apache.org/licenses/LICENSE-2.0
1:663d5db:  *
1:663d5db:  * Unless required by applicable law or agreed to in writing, software
1:663d5db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:663d5db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:663d5db:  * See the License for the specific language governing permissions and
1:663d5db:  * limitations under the License.
1:663d5db:  */
1:663d5db: package org.apache.activemq.broker.advisory;
1:663d5db: 
1:663d5db: import junit.framework.TestCase;
1:663d5db: import org.apache.activemq.ActiveMQConnectionFactory;
1:663d5db: import org.apache.activemq.advisory.AdvisorySupport;
1:663d5db: import org.apache.activemq.broker.BrokerFactory;
1:663d5db: import org.apache.activemq.broker.BrokerService;
1:663d5db: import org.apache.activemq.command.ActiveMQMessage;
1:663d5db: import org.apache.activemq.command.BrokerInfo;
1:663d5db: 
1:663d5db: import javax.jms.Connection;
1:663d5db: import javax.jms.MessageConsumer;
1:663d5db: import javax.jms.Session;
1:663d5db: import java.net.URI;
1:663d5db: 
1:663d5db: public class AdvisoryNetworkBridgeTest extends TestCase {
1:663d5db: 
1:663d5db:     BrokerService broker1;
1:663d5db:     BrokerService broker2;
1:663d5db: 
1:663d5db: 
1:663d5db:     public void testAdvisory() throws Exception {
1:3e15501:         createBroker1();
1:663d5db: 
1:663d5db:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://broker1");
1:663d5db:         Connection conn = factory.createConnection();
1:663d5db:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:663d5db:         conn.start();
1:663d5db:         MessageConsumer consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1:663d5db:         
1:663d5db:         Thread.sleep(1000);
1:663d5db: 
1:3e15501:         createBroker2();
1:7880521:         
1:663d5db:         ActiveMQMessage advisory = (ActiveMQMessage)consumer.receive(2000);
1:663d5db:         assertNotNull(advisory);
1:663d5db:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:663d5db:         assertTrue(advisory.getBooleanProperty("started"));
1:bd49b52:         assertCreatedByDuplex(advisory.getBooleanProperty("createdByDuplex"));
1:7880521:         
1:663d5db:         broker2.stop();
1:663d5db:         broker2.waitUntilStopped();
1:7880521: 
1:663d5db:         advisory = (ActiveMQMessage)consumer.receive(2000);
1:663d5db:         assertNotNull(advisory);
1:663d5db:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:663d5db:         assertFalse(advisory.getBooleanProperty("started"));
1:7880521: 
1:7880521:         conn.close();
1:7880521:     }
1:7880521: 
1:7880521:     public void testAddConsumerLater() throws Exception {
1:7880521:         createBroker1();
1:7880521: 
1:7880521:         createBroker2();
1:7880521: 
1:7880521:         Thread.sleep(1000);
1:7880521: 
1:7880521:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://broker1");
1:7880521:         Connection conn = factory.createConnection();
1:7880521:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7880521:         conn.start();
1:7880521:         MessageConsumer consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1:7880521: 
1:7880521:         ActiveMQMessage advisory = (ActiveMQMessage)consumer.receive(2000);
1:7880521:         assertNotNull(advisory);
1:7880521:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:7880521:         assertTrue(advisory.getBooleanProperty("started"));
1:7880521:         assertCreatedByDuplex(advisory.getBooleanProperty("createdByDuplex"));
1:663d5db: 
1:7880521:         broker2.stop();
1:7880521:         broker2.waitUntilStopped();
1:663d5db: 
1:7880521:         advisory = (ActiveMQMessage)consumer.receive(2000);
1:7880521:         assertNotNull(advisory);
1:7880521:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:7880521:         assertFalse(advisory.getBooleanProperty("started"));
1:663d5db: 
1:7880521:         consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1:7880521:         advisory = (ActiveMQMessage)consumer.receive(1000);
1:7880521:         assertNull(advisory);
1:7880521: 
1:7880521:         conn.close();
1:7880521: 
1:bd49b52:     }
1:663d5db: 
1:bd49b52:     public void assertCreatedByDuplex(boolean createdByDuplex) {
1:bd49b52:         assertFalse(createdByDuplex);
1:663d5db:     }
1:663d5db: 
1:3e15501:     public void createBroker1() throws Exception {
1:3e15501:         broker1 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
1:3e15501:         broker1.start();
1:3e15501:         broker1.waitUntilStarted();
1:3e15501:     }
1:3e15501: 
1:3e15501:     public void createBroker2() throws Exception {
1:3e15501:         broker2 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
1:3e15501:         broker2.start();
1:3e15501:         broker2.waitUntilStarted();
1:3e15501:     }
1:3e15501: 
1:3e15501: 
1:663d5db:     @Override
1:663d5db:     protected void tearDown() throws Exception {
1:663d5db:        broker1.stop();
1:663d5db:        broker1.waitUntilStopped();
1:663d5db: 
1:663d5db:        broker2.stop();
1:663d5db:        broker2.waitUntilStopped();
1:663d5db:     }
1:663d5db: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7880521
/////////////////////////////////////////////////////////////////////////
1: 
1:         conn.close();
1:     }
1: 
1:     public void testAddConsumerLater() throws Exception {
1:         createBroker1();
1: 
1:         createBroker2();
1: 
1:         Thread.sleep(1000);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://broker1");
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         MessageConsumer consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1: 
1:         ActiveMQMessage advisory = (ActiveMQMessage)consumer.receive(2000);
1:         assertNotNull(advisory);
1:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:         assertTrue(advisory.getBooleanProperty("started"));
1:         assertCreatedByDuplex(advisory.getBooleanProperty("createdByDuplex"));
1: 
1:         broker2.stop();
1:         broker2.waitUntilStopped();
1: 
1:         advisory = (ActiveMQMessage)consumer.receive(2000);
1:         assertNotNull(advisory);
1:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:         assertFalse(advisory.getBooleanProperty("started"));
1: 
1:         consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1:         advisory = (ActiveMQMessage)consumer.receive(1000);
1:         assertNull(advisory);
1: 
1:         conn.close();
1: 
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
1:         assertCreatedByDuplex(advisory.getBooleanProperty("createdByDuplex"));
/////////////////////////////////////////////////////////////////////////
1:     }
1:     public void assertCreatedByDuplex(boolean createdByDuplex) {
1:         assertFalse(createdByDuplex);
commit:3e15501
/////////////////////////////////////////////////////////////////////////
1:         createBroker1();
/////////////////////////////////////////////////////////////////////////
1:         createBroker2();
/////////////////////////////////////////////////////////////////////////
1:     public void createBroker1() throws Exception {
1:         broker1 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
1:         broker1.start();
1:         broker1.waitUntilStarted();
1:     }
1: 
1:     public void createBroker2() throws Exception {
1:         broker2 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
1:         broker2.start();
1:         broker2.waitUntilStarted();
1:     }
1: 
1: 
commit:663d5db
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.advisory;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.BrokerInfo;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import java.net.URI;
1: 
1: public class AdvisoryNetworkBridgeTest extends TestCase {
1: 
1:     BrokerService broker1;
1:     BrokerService broker2;
1: 
1: 
1:     public void testAdvisory() throws Exception {
0:         broker1 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
0:         broker1.start();
0:         broker1.waitUntilStarted();
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://broker1");
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         MessageConsumer consumer = sess.createConsumer(AdvisorySupport.getNetworkBridgeAdvisoryTopic());
1:         
1:         Thread.sleep(1000);
1: 
0:         broker2 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
0:         broker2.start();
0:         broker2.waitUntilStarted();
1:         
1:         ActiveMQMessage advisory = (ActiveMQMessage)consumer.receive(2000);
1:         assertNotNull(advisory);
1:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:         assertTrue(advisory.getBooleanProperty("started"));
1:         
1:         broker2.stop();
1:         broker2.waitUntilStopped();
1: 
1:         advisory = (ActiveMQMessage)consumer.receive(2000);
1:         assertNotNull(advisory);
1:         assertTrue(advisory.getDataStructure() instanceof BrokerInfo);
1:         assertFalse(advisory.getBooleanProperty("started"));
1: 
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:        broker1.stop();
1:        broker1.waitUntilStopped();
1: 
1:        broker2.stop();
1:        broker2.waitUntilStopped();
1:     }
1: }
============================================================================