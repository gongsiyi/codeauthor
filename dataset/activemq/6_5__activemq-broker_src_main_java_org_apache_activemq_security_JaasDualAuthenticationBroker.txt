1:0d05af6: /**
1:0d05af6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d05af6:  * contributor license agreements.  See the NOTICE file distributed with
1:0d05af6:  * this work for additional information regarding copyright ownership.
1:0d05af6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d05af6:  * (the "License"); you may not use this file except in compliance with
1:0d05af6:  * the License.  You may obtain a copy of the License at
1:0d05af6:  *
1:0d05af6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0d05af6:  *
1:0d05af6:  * Unless required by applicable law or agreed to in writing, software
1:0d05af6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0d05af6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d05af6:  * See the License for the specific language governing permissions and
1:0d05af6:  * limitations under the License.
1:0d05af6:  */
3:0d05af6: 
1:0d05af6: package org.apache.activemq.security;
1:0d05af6: 
1:67ccfca: import java.security.cert.X509Certificate;
1:67ccfca: 
1:0fffe21: import org.apache.activemq.broker.Broker;
1:0fffe21: import org.apache.activemq.broker.BrokerFilter;
1:0fffe21: import org.apache.activemq.broker.ConnectionContext;
1:0fffe21: import org.apache.activemq.broker.Connector;
1:0fffe21: import org.apache.activemq.broker.EmptyBroker;
1:0fffe21: import org.apache.activemq.broker.TransportConnector;
1:8b3761c: import org.apache.activemq.command.ActiveMQDestination;
1:0d05af6: import org.apache.activemq.command.ConnectionInfo;
1:0d05af6: 
1:0d05af6: /**
1:0d05af6:  * A JAAS Authentication Broker that uses different JAAS domain configurations
1:0d05af6:  * depending if the connection is over an SSL enabled Connector or not.
1:0d05af6:  *
1:0d05af6:  * This allows you to, for instance, do DN based authentication for SSL connections
1:0d05af6:  * and use a mixture of username/passwords and simple guest authentication for
1:0d05af6:  * non-SSL connections.
1:0d05af6:  * <p>
1:0d05af6:  * An example <code>login.config</code> to do do this is:
1:0d05af6:  * <pre>
1:0d05af6:  * activemq-domain {
1:0d05af6:  *   org.apache.activemq.jaas.PropertiesLoginModule sufficient
1:0d05af6:  *       debug=true
1:0d05af6:  *       org.apache.activemq.jaas.properties.user="users.properties"
1:0d05af6:  *       org.apache.activemq.jaas.properties.group="groups.properties";
1:0d05af6:  *   org.apache.activemq.jaas.GuestLoginModule sufficient
1:0d05af6:  *       debug=true
1:0d05af6:  *       org.apache.activemq.jaas.guest.user="guest"
1:0d05af6:  *       org.apache.activemq.jaas.guest.group="guests";
1:0d05af6:  * };
1:0d05af6:  *
1:0d05af6:  * activemq-ssl-domain {
1:0d05af6:  *   org.apache.activemq.jaas.TextFileCertificateLoginModule required
1:0d05af6:  *       debug=true
1:0d05af6:  *       org.apache.activemq.jaas.textfiledn.user="dns.properties"
1:0d05af6:  *       org.apache.activemq.jaas.textfiledn.group="groups.properties";
1:0d05af6:  * };
1:0d05af6:  * </pre>
1:0d05af6:  */
1:67ccfca: public class JaasDualAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
1:0d05af6:     private final JaasCertificateAuthenticationBroker sslBroker;
1:0d05af6:     private final JaasAuthenticationBroker nonSslBroker;
1:0d05af6: 
1:0d05af6: 
1:0d05af6:     /*** Simple constructor. Leaves everything to superclass.
1:0d05af6:      *
1:0d05af6:      * @param next The Broker that does the actual work for this Filter.
1:0d05af6:      * @param jaasConfiguration The JAAS domain configuration name for
1:0d05af6:      *                non-SSL connections (refer to JAAS documentation).
1:0d05af6:      * @param jaasSslConfiguration The JAAS domain configuration name for
1:0d05af6:      *                SSL connections (refer to JAAS documentation).
1:0d05af6:      */
1:0d05af6:     public JaasDualAuthenticationBroker(Broker next, String jaasConfiguration, String jaasSslConfiguration) {
1:0d05af6:         super(next);
1:0d05af6: 
1:0d05af6:         this.nonSslBroker = new JaasAuthenticationBroker(new EmptyBroker(), jaasConfiguration);
1:0d05af6:         this.sslBroker = new JaasCertificateAuthenticationBroker(new EmptyBroker(), jaasSslConfiguration);
4:0d05af6:     }
1:0d05af6: 
1:0d05af6:     /**
1:0d05af6:      * Overridden to allow for authentication using different Jaas
1:0d05af6:      * configurations depending on if the connection is SSL or not.
1:0d05af6:      *
1:0d05af6:      * @param context The context for the incoming Connection.
1:0d05af6:      * @param info The ConnectionInfo Command representing the incoming
1:0d05af6:      *                connection.
1:0d05af6:      */
1:8b3761c:     @Override
1:0d05af6:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:0d05af6:         if (context.getSecurityContext() == null) {
1:10a74ce:             if (isSSL(context, info)) {
1:0d05af6:                 this.sslBroker.addConnection(context, info);
1:6f68a94:             } else {
1:0d05af6:                 this.nonSslBroker.addConnection(context, info);
1:6f68a94:             }
1:0d05af6:             super.addConnection(context, info);
1:0d05af6:         }
1:0d05af6:     }
1:0d05af6: 
1:0d05af6:     /**
1:0d05af6:      * Overriding removeConnection to make sure the security context is cleaned.
1:0d05af6:      */
1:8b3761c:     @Override
1:0d05af6:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:6f68a94:         super.removeConnection(context, info, error);
1:10a74ce:         if (isSSL(context, info)) {
1:0d05af6:             this.sslBroker.removeConnection(context, info, error);
4:0d05af6:         } else {
1:0d05af6:             this.nonSslBroker.removeConnection(context, info, error);
1:0d05af6:         }
1:0d05af6:     }
1:8b3761c: 
1:10a74ce:     private boolean isSSL(ConnectionContext context, ConnectionInfo info) throws Exception {
1:10a74ce:         boolean sslCapable = false;
1:10a74ce:         Connector connector = context.getConnector();
1:10a74ce:         if (connector instanceof TransportConnector) {
1:10a74ce:             TransportConnector transportConnector = (TransportConnector) connector;
1:10a74ce:             sslCapable = transportConnector.getServer().isSslServer();
1:10a74ce:         }
1:10a74ce:         // AMQ-5943, also check if transport context carries X509 cert
1:10a74ce:         if (!sslCapable && info.getTransportContext() instanceof X509Certificate[]) {
1:10a74ce:             sslCapable = true;
1:10a74ce:         }
1:10a74ce:         return sslCapable;
1:10a74ce:     }
1:10a74ce: 
1:8b3761c:     @Override
1:8b3761c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:8b3761c:         // Give both a chance to clear out their contexts
1:8b3761c:         this.sslBroker.removeDestination(context, destination, timeout);
1:8b3761c:         this.nonSslBroker.removeDestination(context, destination, timeout);
1:b52c371: 
1:b52c371:         super.removeDestination(context, destination, timeout);
1:8b3761c:     }
1:67ccfca: 
1:67ccfca:     @Override
1:67ccfca:     public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:67ccfca:         if (peerCertificates != null) {
1:67ccfca:             return this.sslBroker.authenticate(username, password, peerCertificates);
1:67ccfca:         } else {
1:67ccfca:             return this.nonSslBroker.authenticate(username, password, peerCertificates);
1:67ccfca:         }
1:67ccfca:     }
1:0d05af6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:10a74ce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (isSSL(context, info)) {
/////////////////////////////////////////////////////////////////////////
1:         if (isSSL(context, info)) {
1:     private boolean isSSL(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         boolean sslCapable = false;
1:         Connector connector = context.getConnector();
1:         if (connector instanceof TransportConnector) {
1:             TransportConnector transportConnector = (TransportConnector) connector;
1:             sslCapable = transportConnector.getServer().isSslServer();
1:         }
1:         // AMQ-5943, also check if transport context carries X509 cert
1:         if (!sslCapable && info.getTransportContext() instanceof X509Certificate[]) {
1:             sslCapable = true;
1:         }
1:         return sslCapable;
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class JaasDualAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
/////////////////////////////////////////////////////////////////////////
0:             boolean isSSL = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:         if (peerCertificates != null) {
1:             return this.sslBroker.authenticate(username, password, peerCertificates);
1:         } else {
1:             return this.nonSslBroker.authenticate(username, password, peerCertificates);
1:         }
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b52c371
/////////////////////////////////////////////////////////////////////////
1: 
1:         super.removeDestination(context, destination, timeout);
commit:8b3761c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         // Give both a chance to clear out their contexts
1:         this.sslBroker.removeDestination(context, destination, timeout);
1:         this.nonSslBroker.removeDestination(context, destination, timeout);
1:     }
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.Connector;
1: import org.apache.activemq.broker.EmptyBroker;
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
0:                 isSSL = transportConnector.getServer().isSslServer();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Gary Tully
-------------------------------------------------------------------------------
commit:49e7044
/////////////////////////////////////////////////////////////////////////
0:         if (connector instanceof TransportConnector) {
0:             TransportConnector transportConnector = (TransportConnector) connector;
0:             isSSL = (transportConnector.getServer() instanceof SslTransportServer);
commit:6f68a94
/////////////////////////////////////////////////////////////////////////
0:             isSSL = (managedTransportConnector.getServer() instanceof SslTransportServer);
1:         } else {
0:             isSSL = false;
1:         }
1:         super.removeConnection(context, info, error);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0d05af6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
0: import org.apache.activemq.broker.*;
0: import org.apache.activemq.broker.jmx.ManagedTransportConnector;
1: import org.apache.activemq.command.ConnectionInfo;
1: 
0: import org.apache.activemq.transport.tcp.SslTransportServer;
1: 
1: /**
1:  * A JAAS Authentication Broker that uses different JAAS domain configurations
1:  * depending if the connection is over an SSL enabled Connector or not.
1:  *
1:  * This allows you to, for instance, do DN based authentication for SSL connections
1:  * and use a mixture of username/passwords and simple guest authentication for
1:  * non-SSL connections.
1:  * <p>
1:  * An example <code>login.config</code> to do do this is:
1:  * <pre>
1:  * activemq-domain {
1:  *   org.apache.activemq.jaas.PropertiesLoginModule sufficient
1:  *       debug=true
1:  *       org.apache.activemq.jaas.properties.user="users.properties"
1:  *       org.apache.activemq.jaas.properties.group="groups.properties";
1:  *   org.apache.activemq.jaas.GuestLoginModule sufficient
1:  *       debug=true
1:  *       org.apache.activemq.jaas.guest.user="guest"
1:  *       org.apache.activemq.jaas.guest.group="guests";
1:  * };
1:  *
1:  * activemq-ssl-domain {
1:  *   org.apache.activemq.jaas.TextFileCertificateLoginModule required
1:  *       debug=true
1:  *       org.apache.activemq.jaas.textfiledn.user="dns.properties"
1:  *       org.apache.activemq.jaas.textfiledn.group="groups.properties";
1:  * };
1:  * </pre>
1:  */
0: public class JaasDualAuthenticationBroker extends BrokerFilter {
1:     private final JaasCertificateAuthenticationBroker sslBroker;
1:     private final JaasAuthenticationBroker nonSslBroker;
1: 
1: 
1:     /*** Simple constructor. Leaves everything to superclass.
1:      *
1:      * @param next The Broker that does the actual work for this Filter.
1:      * @param jaasConfiguration The JAAS domain configuration name for
1:      *                non-SSL connections (refer to JAAS documentation).
1:      * @param jaasSslConfiguration The JAAS domain configuration name for
1:      *                SSL connections (refer to JAAS documentation).
1:      */
1:     public JaasDualAuthenticationBroker(Broker next, String jaasConfiguration, String jaasSslConfiguration) {
1:         super(next);
1: 
1:         this.nonSslBroker = new JaasAuthenticationBroker(new EmptyBroker(), jaasConfiguration);
1:         this.sslBroker = new JaasCertificateAuthenticationBroker(new EmptyBroker(), jaasSslConfiguration);
1:     }
1: 
1:     /**
1:      * Overridden to allow for authentication using different Jaas
1:      * configurations depending on if the connection is SSL or not.
1:      *
1:      * @param context The context for the incoming Connection.
1:      * @param info The ConnectionInfo Command representing the incoming
1:      *                connection.
1:      */
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         if (context.getSecurityContext() == null) {
0:             boolean isSSL;
0:             Connector connector = context.getConnector();
0:             if (connector instanceof TransportConnector) {
0:                 TransportConnector transportConnector = (TransportConnector) connector;
0:                 isSSL = (transportConnector.getServer() instanceof SslTransportServer);
1:             } else {
0:                 isSSL = false;
1:             }
1: 
0:             if (isSSL) {
1:                 this.sslBroker.addConnection(context, info);
1:             } else {
1:                 this.nonSslBroker.addConnection(context, info);
1:             }
1:             super.addConnection(context, info);
1:         }
1:     }
1: 
1:     /**
1:      * Overriding removeConnection to make sure the security context is cleaned.
1:      */
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:         boolean isSSL;
0:         Connector connector = context.getConnector();
0:         if (connector instanceof ManagedTransportConnector) {
0:             ManagedTransportConnector managedTransportConnector = (ManagedTransportConnector) connector;
0:                 isSSL = (managedTransportConnector.getServer() instanceof SslTransportServer);
1:             } else {
0:                 isSSL = false;
1:             }
0:         if (isSSL) {
1:             this.sslBroker.removeConnection(context, info, error);
1:         } else {
1:             this.nonSslBroker.removeConnection(context, info, error);
1:         }
0:         super.removeConnection(context, info, error);
1:     }
1: }
============================================================================