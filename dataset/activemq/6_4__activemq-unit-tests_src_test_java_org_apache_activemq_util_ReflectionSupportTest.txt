1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
2:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d185430: import java.util.ArrayList;
1:d29ca2a: import java.util.HashMap;
1:d185430: import java.util.List;
1:d185430: import java.util.Properties;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d185430: import org.apache.activemq.command.ActiveMQDestination;
1:d185430: import org.apache.activemq.command.ActiveMQQueue;
1:d185430: import org.apache.activemq.command.ActiveMQTopic;
1:d185430: 
1:d29ca2a: public class ReflectionSupportTest extends TestCase {
1:d185430: 	
1:d185430:     List<ActiveMQDestination> favorites = new ArrayList<ActiveMQDestination>();
1:d185430:     String favoritesString = "[queue://test, topic://test]";
1:d185430:     List<ActiveMQDestination> nonFavorites = new ArrayList<ActiveMQDestination>();
1:d185430:     String nonFavoritesString = "[topic://test1]";
1:d185430:     
1:d185430:     public void setUp() {
1:d185430:         favorites.add(new ActiveMQQueue("test"));
1:d185430:         favorites.add(new ActiveMQTopic("test"));
1:d185430:         nonFavorites.add(new ActiveMQTopic("test1"));
1:d185430:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetProperties() throws URISyntaxException {
1:d29ca2a:         SimplePojo pojo = new SimplePojo();
1:933eb2f:         HashMap<String, String> map = new HashMap<String, String>();        
1:d29ca2a:         map.put("age", "27");
1:d29ca2a:         map.put("name", "Hiram");
1:d29ca2a:         map.put("enabled", "true");
1:d185430:         map.put("uri", "test://value");        
1:d185430:         map.put("favorites", favoritesString);
1:d185430:         map.put("nonFavorites", nonFavoritesString);
1:d185430:         map.put("others", null);
1:1802116:         map.put("systems", "windows,mac");
1:d29ca2a:         
1:d29ca2a:         IntrospectionSupport.setProperties(pojo, map);
1:d29ca2a:         
1:d29ca2a:         assertEquals(27, pojo.getAge());
1:d29ca2a:         assertEquals("Hiram", pojo.getName());
1:d29ca2a:         assertEquals(true, pojo.isEnabled());
1:d29ca2a:         assertEquals(new URI("test://value"), pojo.getUri());
1:d185430:         assertEquals(favorites, pojo.getFavorites());
1:d185430:         assertEquals(nonFavorites, pojo.getNonFavorites());
1:d185430:         assertNull(pojo.getOthers());
1:1802116:         assertEquals("windows", pojo.getSystems()[0]);
1:1802116:         assertEquals("mac", pojo.getSystems()[1]);
1:d185430:     }
1:d185430:     
1:d185430:     public void testGetProperties() {
1:d185430:     	SimplePojo pojo = new SimplePojo();
1:d185430:     	pojo.setAge(31);
1:d185430:     	pojo.setName("Dejan");
1:d185430:     	pojo.setEnabled(true);
1:d185430:     	pojo.setFavorites(favorites);
1:d185430:     	pojo.setNonFavorites(nonFavorites);
1:d185430:     	pojo.setOthers(null);
1:1802116:         pojo.setSystems(new String[]{"windows", "mac"});
1:d185430:     	
1:d185430:     	Properties props = new Properties();
1:d185430:     	
1:d185430:     	IntrospectionSupport.getProperties(pojo, props, null);
1:d185430:     	
1:d185430:     	assertEquals("Dejan", props.get("name"));
1:d185430:     	assertEquals("31", props.get("age"));
1:1802116:     	assertEquals("true", props.get("enabled"));
1:d185430:     	assertEquals(favoritesString, props.get("favorites"));
1:d185430:     	assertEquals(nonFavoritesString, props.get("nonFavorites"));
1:d185430:     	assertNull(props.get("others"));
1:1802116:         assertEquals("windows,mac", props.get("systems"));
1:d29ca2a:     }
1:fbddf4f:     
1:fbddf4f:     public void testSetBoolean() {
1:fbddf4f:                   
1:fbddf4f:         TestWitBoolean target = new TestWitBoolean();
1:fbddf4f:         assertTrue(!target.getKeepAlive());
1:fbddf4f: 
1:fbddf4f:         IntrospectionSupport.setProperty(target, "keepAlive", "TRUE");
1:fbddf4f:         assertTrue(target.getKeepAlive());
1:fbddf4f:         
1:fbddf4f:         IntrospectionSupport.setProperty(target, "keepAlive", "false");
1:fbddf4f:         assertTrue(!target.getKeepAlive());
1:fbddf4f:     }
1:fbddf4f: 
1:fbddf4f:     public static class TestWitBoolean {
1:fbddf4f:         private Boolean keepAlive = new Boolean(false);
1:fbddf4f:         public Boolean getKeepAlive() {
1:fbddf4f:             return keepAlive;
1:fbddf4f:         }
1:fbddf4f:         public void setKeepAlive(Boolean keepAlive) {
1:fbddf4f:             this.keepAlive = keepAlive;
1:fbddf4f:         }
1:fbddf4f:     }
1:d29ca2a: }
1:fbddf4f: 
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:1802116
/////////////////////////////////////////////////////////////////////////
1:         map.put("systems", "windows,mac");
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("windows", pojo.getSystems()[0]);
1:         assertEquals("mac", pojo.getSystems()[1]);
/////////////////////////////////////////////////////////////////////////
1:         pojo.setSystems(new String[]{"windows", "mac"});
/////////////////////////////////////////////////////////////////////////
1:     	assertEquals("true", props.get("enabled"));
1:         assertEquals("windows,mac", props.get("systems"));
author:Gary Tully
-------------------------------------------------------------------------------
commit:fbddf4f
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSetBoolean() {
1:                   
1:         TestWitBoolean target = new TestWitBoolean();
1:         assertTrue(!target.getKeepAlive());
1: 
1:         IntrospectionSupport.setProperty(target, "keepAlive", "TRUE");
1:         assertTrue(target.getKeepAlive());
1:         
1:         IntrospectionSupport.setProperty(target, "keepAlive", "false");
1:         assertTrue(!target.getKeepAlive());
1:     }
1: 
1:     public static class TestWitBoolean {
1:         private Boolean keepAlive = new Boolean(false);
1:         public Boolean getKeepAlive() {
1:             return keepAlive;
1:         }
1:         public void setKeepAlive(Boolean keepAlive) {
1:             this.keepAlive = keepAlive;
1:         }
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d185430
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: 	
1:     List<ActiveMQDestination> favorites = new ArrayList<ActiveMQDestination>();
1:     String favoritesString = "[queue://test, topic://test]";
1:     List<ActiveMQDestination> nonFavorites = new ArrayList<ActiveMQDestination>();
1:     String nonFavoritesString = "[topic://test1]";
1:     
1:     public void setUp() {
1:         favorites.add(new ActiveMQQueue("test"));
1:         favorites.add(new ActiveMQTopic("test"));
1:         nonFavorites.add(new ActiveMQTopic("test1"));
1:     }
/////////////////////////////////////////////////////////////////////////
1:         map.put("uri", "test://value");        
1:         map.put("favorites", favoritesString);
1:         map.put("nonFavorites", nonFavoritesString);
1:         map.put("others", null);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(favorites, pojo.getFavorites());
1:         assertEquals(nonFavorites, pojo.getNonFavorites());
1:         assertNull(pojo.getOthers());
1:     }
1:     
1:     public void testGetProperties() {
1:     	SimplePojo pojo = new SimplePojo();
1:     	pojo.setAge(31);
1:     	pojo.setName("Dejan");
1:     	pojo.setEnabled(true);
1:     	pojo.setFavorites(favorites);
1:     	pojo.setNonFavorites(nonFavorites);
1:     	pojo.setOthers(null);
1:     	
1:     	Properties props = new Properties();
1:     	
1:     	IntrospectionSupport.getProperties(pojo, props, null);
1:     	
1:     	assertEquals("Dejan", props.get("name"));
1:     	assertEquals("31", props.get("age"));
0:     	assertEquals("True", props.get("enabled"));
1:     	assertEquals(favoritesString, props.get("favorites"));
1:     	assertEquals(nonFavoritesString, props.get("nonFavorites"));
1:     	assertNull(props.get("others"));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         HashMap<String, String> map = new HashMap<String, String>();        
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: 
0: import org.apache.activemq.util.IntrospectionSupport;
1: 
1: import junit.framework.TestCase;
1: 
1: public class ReflectionSupportTest extends TestCase {
1: 
1:     public void testSetProperties() throws URISyntaxException {
1:         SimplePojo pojo = new SimplePojo();
0:         HashMap map = new HashMap();        
1:         map.put("age", "27");
1:         map.put("name", "Hiram");
1:         map.put("enabled", "true");
0:         map.put("uri", "test://value");
1:         
1:         IntrospectionSupport.setProperties(pojo, map);
1:         
1:         assertEquals(27, pojo.getAge());
1:         assertEquals("Hiram", pojo.getName());
1:         assertEquals(true, pojo.isEnabled());
1:         assertEquals(new URI("test://value"), pojo.getUri());
1:     }
1: }
============================================================================