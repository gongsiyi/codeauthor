1:c0bc3e0: /**
1:c0bc3e0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0bc3e0:  * contributor license agreements.  See the NOTICE file distributed with
1:c0bc3e0:  * this work for additional information regarding copyright ownership.
1:c0bc3e0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0bc3e0:  * (the "License"); you may not use this file except in compliance with
1:c0bc3e0:  * the License.  You may obtain a copy of the License at
2:c0bc3e0:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0bc3e0:  *
1:c0bc3e0:  * Unless required by applicable law or agreed to in writing, software
1:c0bc3e0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0bc3e0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0bc3e0:  * See the License for the specific language governing permissions and
1:c0bc3e0:  * limitations under the License.
1:c0bc3e0:  */
1:c0bc3e0: package org.apache.activemq.pool;
8:c0bc3e0: 
1:4dd5b5e: import java.io.IOException;
1:4dd5b5e: import java.util.concurrent.CountDownLatch;
1:4dd5b5e: import java.util.concurrent.TimeUnit;
1:4dd5b5e: 
1:c0bc3e0: import javax.jms.Connection;
1:b66559e: import javax.jms.ConnectionFactory;
1:c0bc3e0: import javax.jms.JMSException;
1:c0bc3e0: import javax.jms.MessageProducer;
1:c0bc3e0: import javax.jms.Session;
1:c0bc3e0: 
1:b66559e: import junit.framework.TestCase;
1:c0bc3e0: import org.apache.activemq.ActiveMQConnection;
1:c0bc3e0: import org.apache.activemq.ActiveMQConnectionFactory;
1:b66559e: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:b66559e: import org.apache.activemq.EnhancedConnection;
1:b66559e: import org.apache.activemq.advisory.DestinationSource;
1:c0bc3e0: import org.apache.activemq.broker.BrokerService;
1:c0bc3e0: import org.apache.activemq.broker.TransportConnector;
1:c0bc3e0: import org.apache.activemq.command.ActiveMQQueue;
1:b66559e: import org.apache.activemq.jms.pool.PooledConnection;
1:c0bc3e0: import org.apache.activemq.test.TestSupport;
1:4dd5b5e: import org.apache.activemq.transport.TransportListener;
1:c0bc3e0: import org.apache.activemq.transport.mock.MockTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c0bc3e0: 
1:4dd5b5e: public class ConnectionFailureEvictsFromPoolTest extends TestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionFailureEvictsFromPoolTest.class);
1:230a86c:     private BrokerService broker;
1:b66559e:     TransportConnector connector;
1:230a86c: 
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         broker = new BrokerService();
1:26b69e4:         broker.setUseJmx(false);
1:230a86c:         broker.setPersistent(false);
1:b66559e:         connector = broker.addConnector("tcp://localhost:0");
1:230a86c:         broker.start();
1:b66559e:     }
1:b66559e: 
1:b66559e:     public void testEnhancedConnection() throws Exception {
1:b66559e:         XaPooledConnectionFactory pooledFactory =
2:b66559e:                 new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false"));
1:b66559e: 
1:b66559e:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:b66559e:         EnhancedConnection enhancedConnection = (EnhancedConnection)connection.getConnection();
1:b66559e:         DestinationSource destinationSource = enhancedConnection.getDestinationSource();
1:b66559e:         assertNotNull(destinationSource);
1:b66559e: 
1:b66559e:     }
1:b66559e: 
1:b66559e:     public void testEvictionXA() throws Exception {
1:b66559e:         XaPooledConnectionFactory pooledFactory =
1:004be56:                 new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory("mock:(" + connector.getConnectUri() + "?closeAsync=false)?jms.xaAckMode=1"));
1:b66559e: 
1:b66559e:         doTestEviction(pooledFactory);
1:230a86c:     }
1:4dd5b5e: 
1:230a86c:     public void testEviction() throws Exception {
1:b66559e:         PooledConnectionFactory pooledFactory =
1:b66559e:                 new PooledConnectionFactory(new ActiveMQConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false"));
1:b66559e: 
1:b66559e:         doTestEviction(pooledFactory);
1:b66559e:     }
1:b66559e: 
1:b66559e:     public void doTestEviction(ConnectionFactory pooledFactory) throws Exception {
1:4dd5b5e:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:b66559e:         ActiveMQConnection amqC = (ActiveMQConnection) connection.getConnection();
1:4dd5b5e:         final CountDownLatch gotExceptionEvent = new CountDownLatch(1);
1:4dd5b5e:         amqC.addTransportListener(new TransportListener() {
1:4dd5b5e:             public void onCommand(Object command) {
1:4dd5b5e:             }
1:4dd5b5e:             public void onException(IOException error) {
1:4dd5b5e:                 // we know connection is dead...
1:4dd5b5e:                 // listeners are fired async
1:4dd5b5e:                 gotExceptionEvent.countDown();
1:4dd5b5e:             }
1:4dd5b5e:             public void transportInterupted() {
1:4dd5b5e:             }
1:4dd5b5e:             public void transportResumed() {
1:4dd5b5e:             }
1:4dd5b5e:         });
1:26b69e4: 
1:230a86c:         sendMessage(connection);
1:4dd5b5e:         LOG.info("sent one message worked fine");
1:230a86c:         createConnectionFailure(connection);
1:230a86c:         try {
1:230a86c:             sendMessage(connection);
1:b66559e:             TestCase.fail("Expected Error");
1:230a86c:         } catch (JMSException e) {
1:4dd5b5e:         } finally {
1:4dd5b5e:             connection.close();
1:230a86c:         }
1:b66559e:         TestCase.assertTrue("exception event propagated ok", gotExceptionEvent.await(5, TimeUnit.SECONDS));
1:230a86c:         // If we get another connection now it should be a new connection that
1:230a86c:         // works.
1:4dd5b5e:         LOG.info("expect new connection after failure");
1:230a86c:         Connection connection2 = pooledFactory.createConnection();
1:230a86c:         sendMessage(connection2);
1:230a86c:     }
1:230a86c: 
1:230a86c:     private void createConnectionFailure(Connection connection) throws Exception {
1:b66559e:         ActiveMQConnection c = (ActiveMQConnection) ((PooledConnection)connection).getConnection();
1:230a86c:         MockTransport t = (MockTransport)c.getTransportChannel().narrow(MockTransport.class);
1:4dd5b5e:         t.onException(new IOException("forcing exception for " + getName() + " to force pool eviction"));
1:4dd5b5e:         LOG.info("arranged for failure, chucked exception");
1:230a86c:     }
1:230a86c: 
1:230a86c:     private void sendMessage(Connection connection) throws JMSException {
1:4dd5b5e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         MessageProducer producer = session.createProducer(new ActiveMQQueue("FOO"));
1:230a86c:         producer.send(session.createTextMessage("Test"));
1:230a86c:         session.close();
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void tearDown() throws Exception {
1:230a86c:         broker.stop();
1:230a86c:     }
7:c0bc3e0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1:                 new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory("mock:(" + connector.getConnectUri() + "?closeAsync=false)?jms.xaAckMode=1"));
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.EnhancedConnection;
1: import org.apache.activemq.advisory.DestinationSource;
1: import org.apache.activemq.jms.pool.PooledConnection;
/////////////////////////////////////////////////////////////////////////
1:     TransportConnector connector;
1:         connector = broker.addConnector("tcp://localhost:0");
1:     }
1: 
1:     public void testEnhancedConnection() throws Exception {
1:         XaPooledConnectionFactory pooledFactory =
1:                 new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false"));
1: 
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         EnhancedConnection enhancedConnection = (EnhancedConnection)connection.getConnection();
1:         DestinationSource destinationSource = enhancedConnection.getDestinationSource();
1:         assertNotNull(destinationSource);
1: 
1:     }
1: 
1:     public void testEvictionXA() throws Exception {
1:         XaPooledConnectionFactory pooledFactory =
1:                 new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false"));
1: 
1:         doTestEviction(pooledFactory);
1:         PooledConnectionFactory pooledFactory =
1:                 new PooledConnectionFactory(new ActiveMQConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false"));
1: 
1:         doTestEviction(pooledFactory);
1:     }
1: 
1:     public void doTestEviction(ConnectionFactory pooledFactory) throws Exception {
1:         ActiveMQConnection amqC = (ActiveMQConnection) connection.getConnection();
/////////////////////////////////////////////////////////////////////////
1:             TestCase.fail("Expected Error");
1:         TestCase.assertTrue("exception event propagated ok", gotExceptionEvent.await(5, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnection c = (ActiveMQConnection) ((PooledConnection)connection).getConnection();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:26b69e4
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionFailureEvictsFromPoolTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:4dd5b5e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportListener;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public class ConnectionFailureEvictsFromPoolTest extends TestSupport {
0:     private static final Log LOG = LogFactory.getLog(ConnectionFailureEvictsFromPoolTest.class);
/////////////////////////////////////////////////////////////////////////
0:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false");
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
0:         ActiveMQConnection amqC = connection.getConnection();
1:         final CountDownLatch gotExceptionEvent = new CountDownLatch(1);
1:         amqC.addTransportListener(new TransportListener() {
1:             public void onCommand(Object command) {
1:             }
1:             public void onException(IOException error) {
1:                 // we know connection is dead...
1:                 // listeners are fired async
1:                 gotExceptionEvent.countDown();
1:             }
1:             public void transportInterupted() {
1:             }
1:             public void transportResumed() {
1:             }
1:         });
1:         
1:         LOG.info("sent one message worked fine");
1:         } finally {
1:             connection.close();
0:         assertTrue("exception event propagated ok", gotExceptionEvent.await(5, TimeUnit.SECONDS));
1:         LOG.info("expect new connection after failure");
/////////////////////////////////////////////////////////////////////////
1:         t.onException(new IOException("forcing exception for " + getName() + " to force pool eviction"));
1:         LOG.info("arranged for failure, chucked exception");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService broker;
0:     private ActiveMQConnectionFactory factory;
0:     private PooledConnectionFactory pooledFactory;
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:         broker.start();
0:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri());
0:         pooledFactory = new PooledConnectionFactory(factory);
1:     }
1:     public void testEviction() throws Exception {
0:         Connection connection = pooledFactory.createConnection();
1:         sendMessage(connection);
1:         createConnectionFailure(connection);
1:         try {
1:             sendMessage(connection);
0:             fail("Expected Error");
1:         } catch (JMSException e) {
1:         }
1: 
1:         // If we get another connection now it should be a new connection that
1:         // works.
1:         Connection connection2 = pooledFactory.createConnection();
1:         sendMessage(connection2);
1:     }
1: 
1:     private void createConnectionFailure(Connection connection) throws Exception {
0:         ActiveMQConnection c = ((PooledConnection)connection).getConnection();
1:         MockTransport t = (MockTransport)c.getTransportChannel().narrow(MockTransport.class);
0:         t.stop();
1:     }
1: 
1:     private void sendMessage(Connection connection) throws JMSException {
0:         Session session = connection.createSession(false, 0);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("FOO"));
1:         producer.send(session.createTextMessage("Test"));
1:         session.close();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
commit:c0bc3e0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.test.TestSupport;
1: import org.apache.activemq.transport.mock.MockTransport;
1: 
0: public class ConnectionFailureEvictsFromPool extends TestSupport {
1: 	
0: 	private BrokerService broker;
0: 	private ActiveMQConnectionFactory factory;
0: 	private PooledConnectionFactory pooledFactory;
1: 
0: 	protected void setUp() throws Exception {
0: 		broker = new BrokerService();
0: 		broker.setPersistent(false);
0: 		TransportConnector connector = broker.addConnector("tcp://localhost:0");
0: 		broker.start();
0: 		factory = new ActiveMQConnectionFactory("mock:"+connector.getConnectUri());
0: 		pooledFactory = new PooledConnectionFactory(factory);
1: 	}
1: 	
0: 	public void testEviction() throws Exception {
0: 		Connection connection = pooledFactory.createConnection();
0: 		sendMessage(connection);
0: 		createConnectionFailure(connection);
0: 		try {
0: 			sendMessage(connection);
0: 			fail("Expected Error");
0: 		} catch ( JMSException e) {
1: 		}
1: 		
0: 		// If we get another connection now it should be a new connection that works.
0: 		Connection connection2 = pooledFactory.createConnection();
0: 		sendMessage(connection2);		
1: 	}
1: 	
0: 	private void createConnectionFailure(Connection connection) throws Exception {
0: 		ActiveMQConnection c = ((PooledConnection)connection).getConnection();
0: 		MockTransport t = (MockTransport) c.getTransportChannel().narrow(MockTransport.class);
0: 		t.stop();
1: 	}
1: 
0: 	private void sendMessage(Connection connection) throws JMSException {
0: 		Session session = connection.createSession(false, 0);
0: 		MessageProducer producer = session.createProducer(new ActiveMQQueue("FOO"));
0: 		producer.send(session.createTextMessage("Test"));
0: 		session.close();
1: 	}
1: 
0: 	protected void tearDown() throws Exception {
0: 		broker.stop();
1: 	}
1: }
============================================================================