1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.command.ActiveMQDestination;
1:f9451e5: import org.apache.activemq.command.ActiveMQQueue;
1:f9451e5: import org.apache.activemq.command.ActiveMQTempQueue;
1:f9451e5: import org.apache.activemq.command.ActiveMQTempTopic;
1:f9451e5: import org.apache.activemq.command.ActiveMQTopic;
1:f9451e5: import org.apache.activemq.filter.AnyDestination;
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.permission.WildcardPermission;
1:f9451e5: import org.junit.Before;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class DestinationActionPermissionResolverTest {
1:f9451e5: 
1:f9451e5:     private DestinationActionPermissionResolver resolver;
1:f9451e5: 
1:f9451e5:     @Before
1:f9451e5:     public void setUp() {
1:f9451e5:         this.resolver = new DestinationActionPermissionResolver();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testDefaults() {
1:f9451e5:         assertNull(resolver.getPermissionStringPrefix());
1:f9451e5:         //default is true to reflect ActiveMQ's case-sensitive destination names:
1:f9451e5:         assertTrue(resolver.isPermissionStringCaseSensitive());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testPermissionStringPrefixProp() {
1:f9451e5:         String prefix = "foo";
1:f9451e5:         resolver.setPermissionStringPrefix(prefix);
1:f9451e5:         assertEquals(prefix, resolver.getPermissionStringPrefix());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testCaseSensitiveProp() {
1:f9451e5:         resolver.setPermissionStringCaseSensitive(true);
1:f9451e5:         assertTrue(resolver.isPermissionStringCaseSensitive());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = IllegalArgumentException.class)
1:f9451e5:     public void testGetPermissionsWithNonDestinationActionInstance() {
1:f9451e5:         resolver.getPermissions(new Action() {
1:f9451e5:             @Override
1:f9451e5:             public String toString() {
1:f9451e5:                 return "foo";
1:f9451e5:             }
1:f9451e5:         });
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = IllegalArgumentException.class)
1:f9451e5:     public void testGetPermissionsWithNullArgument() {
1:f9451e5:         resolver.getPermissions((Action)null);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     void assertPermString(String perm, Collection<Permission> perms) {
1:f9451e5:         assertEquals(1, perms.size());
1:f9451e5:         assertEquals(perm, perms.iterator().next().toString());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testGetPermissionsWithTopic() {
1:f9451e5:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("topic:myTopic:create", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testGetPermissionsWithTemporaryTopic() {
1:f9451e5:         ActiveMQTempTopic topic = new ActiveMQTempTopic("myTempTopic");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "remove");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("temp-topic:myTempTopic:remove", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testGetPermissionsWithQueue() {
1:f9451e5:         ActiveMQQueue queue = new ActiveMQQueue("myQueue");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), queue, "write");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("queue:myQueue:write", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testGetPermissionsWithTemporaryQueue() {
1:f9451e5:         ActiveMQTempQueue queue = new ActiveMQTempQueue("myTempQueue");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), queue, "read");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("temp-queue:myTempQueue:read", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testPermissionWithPrefix() {
1:f9451e5:         resolver.setPermissionStringPrefix("activeMQ");
1:f9451e5:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("activeMQ:topic:myTopic:create", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     //Ensures if they explicitly set a prefix with a colon suffix that we don't add another one
1:f9451e5:     @Test
1:f9451e5:     public void testPermissionWithPrefixAndExplicitColon() {
1:f9451e5:         resolver.setPermissionStringPrefix("activeMQ:");
1:f9451e5:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:f9451e5:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:f9451e5:         Collection<Permission> perms = resolver.getPermissions(action);
1:f9451e5:         assertPermString("activeMQ:topic:myTopic:create", perms);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAlternateWildcardPermissionToStringWithMultipleActions() {
1:f9451e5:         Permission perm = resolver.createPermission("foo:bar:action1,action2");
1:f9451e5:         assertTrue(perm instanceof WildcardPermission);
1:f9451e5:         assertEquals("foo:bar:action1,action2", perm.toString());
1:f9451e5: 
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = IllegalArgumentException.class)
1:f9451e5:     public void testCreatePermissionStringWithCompositeDestination() {
1:f9451e5:         ActiveMQTopic topicA = new ActiveMQTopic("A");
1:f9451e5:         ActiveMQTopic topicB = new ActiveMQTopic("B");
1:f9451e5:         ActiveMQDestination composite = new AnyDestination(new ActiveMQDestination[]{topicA, topicB});
1:f9451e5:         resolver.createPermissionString(composite, "read");
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.command.ActiveMQTempTopic;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.AnyDestination;
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.permission.WildcardPermission;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.util.Collection;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class DestinationActionPermissionResolverTest {
1: 
1:     private DestinationActionPermissionResolver resolver;
1: 
1:     @Before
1:     public void setUp() {
1:         this.resolver = new DestinationActionPermissionResolver();
1:     }
1: 
1:     @Test
1:     public void testDefaults() {
1:         assertNull(resolver.getPermissionStringPrefix());
1:         //default is true to reflect ActiveMQ's case-sensitive destination names:
1:         assertTrue(resolver.isPermissionStringCaseSensitive());
1:     }
1: 
1:     @Test
1:     public void testPermissionStringPrefixProp() {
1:         String prefix = "foo";
1:         resolver.setPermissionStringPrefix(prefix);
1:         assertEquals(prefix, resolver.getPermissionStringPrefix());
1:     }
1: 
1:     @Test
1:     public void testCaseSensitiveProp() {
1:         resolver.setPermissionStringCaseSensitive(true);
1:         assertTrue(resolver.isPermissionStringCaseSensitive());
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testGetPermissionsWithNonDestinationActionInstance() {
1:         resolver.getPermissions(new Action() {
1:             @Override
1:             public String toString() {
1:                 return "foo";
1:             }
1:         });
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testGetPermissionsWithNullArgument() {
1:         resolver.getPermissions((Action)null);
1:     }
1: 
1:     void assertPermString(String perm, Collection<Permission> perms) {
1:         assertEquals(1, perms.size());
1:         assertEquals(perm, perms.iterator().next().toString());
1:     }
1: 
1:     @Test
1:     public void testGetPermissionsWithTopic() {
1:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("topic:myTopic:create", perms);
1:     }
1: 
1:     @Test
1:     public void testGetPermissionsWithTemporaryTopic() {
1:         ActiveMQTempTopic topic = new ActiveMQTempTopic("myTempTopic");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "remove");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("temp-topic:myTempTopic:remove", perms);
1:     }
1: 
1:     @Test
1:     public void testGetPermissionsWithQueue() {
1:         ActiveMQQueue queue = new ActiveMQQueue("myQueue");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), queue, "write");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("queue:myQueue:write", perms);
1:     }
1: 
1:     @Test
1:     public void testGetPermissionsWithTemporaryQueue() {
1:         ActiveMQTempQueue queue = new ActiveMQTempQueue("myTempQueue");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), queue, "read");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("temp-queue:myTempQueue:read", perms);
1:     }
1: 
1:     @Test
1:     public void testPermissionWithPrefix() {
1:         resolver.setPermissionStringPrefix("activeMQ");
1:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("activeMQ:topic:myTopic:create", perms);
1:     }
1: 
1:     //Ensures if they explicitly set a prefix with a colon suffix that we don't add another one
1:     @Test
1:     public void testPermissionWithPrefixAndExplicitColon() {
1:         resolver.setPermissionStringPrefix("activeMQ:");
1:         ActiveMQTopic topic = new ActiveMQTopic("myTopic");
1:         DestinationAction action = new DestinationAction(new ConnectionContext(), topic, "create");
1:         Collection<Permission> perms = resolver.getPermissions(action);
1:         assertPermString("activeMQ:topic:myTopic:create", perms);
1:     }
1: 
1:     @Test
1:     public void testAlternateWildcardPermissionToStringWithMultipleActions() {
1:         Permission perm = resolver.createPermission("foo:bar:action1,action2");
1:         assertTrue(perm instanceof WildcardPermission);
1:         assertEquals("foo:bar:action1,action2", perm.toString());
1: 
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testCreatePermissionStringWithCompositeDestination() {
1:         ActiveMQTopic topicA = new ActiveMQTopic("A");
1:         ActiveMQTopic topicB = new ActiveMQTopic("B");
1:         ActiveMQDestination composite = new AnyDestination(new ActiveMQDestination[]{topicA, topicB});
1:         resolver.createPermissionString(composite, "read");
1:     }
1: }
============================================================================