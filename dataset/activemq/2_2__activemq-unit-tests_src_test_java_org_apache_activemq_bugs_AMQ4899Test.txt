1:afded92: /**
1:afded92:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:afded92:  * contributor license agreements.  See the NOTICE file distributed with
1:afded92:  * this work for additional information regarding copyright ownership.
1:afded92:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:afded92:  * (the "License"); you may not use this file except in compliance with
1:afded92:  * the License.  You may obtain a copy of the License at
1:afded92:  *
1:afded92:  *      http://www.apache.org/licenses/LICENSE-2.0
1:afded92:  *
1:afded92:  * Unless required by applicable law or agreed to in writing, software
1:afded92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:afded92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:afded92:  * See the License for the specific language governing permissions and
1:afded92:  * limitations under the License.
1:afded92:  */
1:afded92: package org.apache.activemq.bugs;
3:afded92: 
1:6380bf3: import static org.junit.Assert.assertEquals;
1:6380bf3: 
1:6380bf3: import java.util.concurrent.CountDownLatch;
1:6380bf3: import java.util.concurrent.TimeUnit;
1:6380bf3: 
1:6380bf3: import javax.jms.Connection;
1:6380bf3: import javax.jms.Destination;
1:6380bf3: import javax.jms.JMSException;
1:6380bf3: import javax.jms.Message;
1:6380bf3: import javax.jms.MessageConsumer;
1:6380bf3: import javax.jms.MessageListener;
1:6380bf3: import javax.jms.MessageProducer;
1:6380bf3: import javax.jms.Queue;
1:6380bf3: import javax.jms.Session;
1:6380bf3: import javax.jms.TextMessage;
1:6380bf3: 
1:afded92: import org.apache.activemq.ActiveMQConnectionFactory;
1:afded92: import org.apache.activemq.broker.BrokerFactory;
1:afded92: import org.apache.activemq.broker.BrokerPlugin;
1:afded92: import org.apache.activemq.broker.BrokerService;
1:afded92: import org.apache.activemq.broker.region.DestinationInterceptor;
1:afded92: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:afded92: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:afded92: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:afded92: import org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin;
1:afded92: import org.junit.After;
1:afded92: import org.junit.Before;
1:afded92: import org.junit.Test;
1:afded92: import org.slf4j.Logger;
1:afded92: import org.slf4j.LoggerFactory;
1:afded92: 
1:afded92: public class AMQ4899Test {
1:afded92:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ4899Test.class);
1:afded92:     private static final String QUEUE_NAME="AMQ4899TestQueue";
1:afded92:     private static final String CONSUMER_QUEUE="Consumer.Orders.VirtualOrders." + QUEUE_NAME;
1:afded92:     private static final String PRODUCER_DESTINATION_NAME = "VirtualOrders." + QUEUE_NAME;
1:afded92: 
1:afded92:     private static final Integer MESSAGE_LIMIT = 20;
1:afded92:     public static final String CONSUMER_A_SELECTOR = "Order < " + 10;
1:afded92:     public static  String CONSUMER_B_SELECTOR = "Order >= " + 10;
1:6380bf3:     private final CountDownLatch consumersStarted = new CountDownLatch(2);
1:6380bf3:     private final CountDownLatch consumerAtoConsumeCount= new CountDownLatch(10);
1:6380bf3:     private final CountDownLatch consumerBtoConsumeCount = new CountDownLatch(10);
1:afded92: 
1:afded92:     private BrokerService broker;
1:afded92: 
1:afded92:     @Before
1:afded92:     public void setUp() {
1:afded92:         setupBroker("broker://()/localhost?");
1:afded92:     }
1:afded92: 
1:afded92:     @After
1:afded92:     public void tearDown() throws Exception {
1:afded92:         if (broker != null) {
1:afded92:             broker.stop();
1:afded92:             broker.waitUntilStopped();
1:afded92:         }
1:afded92:     }
1:afded92: 
1:afded92:     @Test(timeout = 60 * 1000)
1:afded92:     public void testVirtualTopicMultipleSelectors() throws Exception{
1:afded92:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:afded92:         Connection connection = factory.createConnection();
1:afded92:         connection.start();
1:afded92:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:afded92: 
1:afded92:         Queue consumerQueue = session.createQueue(CONSUMER_QUEUE);
1:afded92: 
1:afded92:         MessageListener listenerA = new AMQ4899Listener("A", consumersStarted, consumerAtoConsumeCount);
1:afded92:         MessageConsumer consumerA = session.createConsumer(consumerQueue, CONSUMER_A_SELECTOR);
1:afded92:         consumerA.setMessageListener(listenerA);
1:afded92: 
1:afded92:         MessageListener listenerB = new AMQ4899Listener("B", consumersStarted, consumerBtoConsumeCount);
1:afded92:         MessageConsumer consumerB = session.createConsumer(consumerQueue, CONSUMER_B_SELECTOR);
1:afded92:         consumerB.setMessageListener(listenerB);
1:afded92: 
1:afded92:         consumersStarted.await(10, TimeUnit.SECONDS);
1:afded92:         assertEquals("Not all consumers started in time", 0, consumersStarted.getCount());
1:afded92: 
1:afded92:         Destination producerDestination = session.createTopic(PRODUCER_DESTINATION_NAME);
1:afded92:         MessageProducer producer = session.createProducer(producerDestination);
1:afded92:         int messageIndex = 0;
1:afded92:         for (int i=0; i < MESSAGE_LIMIT; i++) {
1:afded92:             if (i==3) {
1:afded92:                 LOG.debug("Stopping consumerA");
1:afded92:                 consumerA.close();
1:afded92:             }
1:afded92: 
1:afded92:             if (i == 14) {
1:afded92:                 LOG.debug("Stopping consumer B");
1:afded92:                 consumerB.close();
1:afded92:             }
1:afded92:             String messageText = "hello " + messageIndex++ + " sent at " + new java.util.Date().toString();
1:afded92:             TextMessage message = session.createTextMessage(messageText);
1:afded92:             message.setIntProperty("Order", i);
1:afded92:             LOG.debug("Sending message [{}]", messageText);
1:afded92:             producer.send(message);
1:afded92:         }
1:afded92: 
1:afded92:         // restart consumerA
1:afded92:         LOG.debug("Restarting consumerA");
1:afded92:         consumerA = session.createConsumer(consumerQueue, CONSUMER_A_SELECTOR);
1:afded92:         consumerA.setMessageListener(listenerA);
1:afded92: 
1:afded92:         // restart consumerB
1:afded92:         LOG.debug("restarting consumerB");
1:afded92:         consumerB = session.createConsumer(consumerQueue, CONSUMER_B_SELECTOR);
1:afded92:         consumerB.setMessageListener(listenerB);
1:afded92: 
1:afded92:         consumerAtoConsumeCount.await(5, TimeUnit.SECONDS);
1:afded92:         consumerBtoConsumeCount.await(5, TimeUnit.SECONDS);
1:afded92: 
1:afded92:         LOG.debug("Unconsumed messages for consumerA {} consumerB {}", consumerAtoConsumeCount.getCount(), consumerBtoConsumeCount.getCount());
1:afded92: 
1:afded92:         assertEquals("Consumer A did not consume all messages", 0, consumerAtoConsumeCount.getCount());
1:afded92:         assertEquals("Consumer B did not consume all messages", 0, consumerBtoConsumeCount.getCount());
1:afded92: 
1:afded92:         connection.close();
1:afded92:     }
1:afded92: 
1:afded92:     /**
1:afded92:      * Setup broker with VirtualTopic configured
1:afded92:      */
1:afded92:     private void setupBroker(String uri) {
1:afded92:         try {
1:afded92:             broker = BrokerFactory.createBroker(uri);
1:afded92: 
1:afded92:             VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:afded92:             VirtualTopic virtualTopic = new VirtualTopic();
1:afded92:             virtualTopic.setName("VirtualOrders.>");
1:afded92:             virtualTopic.setSelectorAware(true);
1:afded92:             VirtualDestination[] virtualDestinations = { virtualTopic };
1:afded92:             interceptor.setVirtualDestinations(virtualDestinations);
1:afded92:             broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:afded92: 
1:afded92:             SubQueueSelectorCacheBrokerPlugin subQueueSelectorCacheBrokerPlugin = new SubQueueSelectorCacheBrokerPlugin();
1:afded92:             BrokerPlugin[] updatedPlugins = {subQueueSelectorCacheBrokerPlugin};
1:afded92:             broker.setPlugins(updatedPlugins);
1:afded92: 
1:6380bf3:             broker.setUseJmx(false);
1:afded92:             broker.start();
1:afded92:             broker.waitUntilStarted();
1:afded92:         } catch (Exception e) {
1:afded92:             LOG.error("Failed creating broker", e);
1:afded92:         }
1:afded92:     }
1:afded92: }
1:afded92: 
1:afded92: class AMQ4899Listener implements MessageListener {
1:afded92:     Logger LOG = LoggerFactory.getLogger(AMQ4899Listener.class);
1:afded92:     CountDownLatch toConsume;
1:afded92:     String id;
1:afded92: 
1:afded92:     public AMQ4899Listener(String id, CountDownLatch started, CountDownLatch toConsume) {
1:afded92:         this.id = id;
1:afded92:         this.toConsume = toConsume;
1:afded92:         started.countDown();
1:afded92:     }
1:afded92: 
1:afded92:     @Override
1:afded92:     public void onMessage(Message message) {
1:afded92:         toConsume.countDown();
1:afded92:         try {
1:afded92:             if (message instanceof TextMessage) {
1:afded92:                 TextMessage textMessage = (TextMessage) message;
1:afded92:                 LOG.debug("Listener {} received [{}]", id, textMessage.getText());
1:afded92:             } else {
1:afded92:                 LOG.error("Listener {} Expected a TextMessage, got {}", id, message.getClass().getCanonicalName());
1:afded92:             }
1:afded92:         } catch (JMSException e) {
1:afded92:             LOG.error("Unexpected JMSException in Listener " + id, e);
1:afded92:         }
1:afded92:     }
1:afded92: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6380bf3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final CountDownLatch consumersStarted = new CountDownLatch(2);
1:     private final CountDownLatch consumerAtoConsumeCount= new CountDownLatch(10);
1:     private final CountDownLatch consumerBtoConsumeCount = new CountDownLatch(10);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             broker.setUseJmx(false);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:afded92
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: public class AMQ4899Test {
1:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ4899Test.class);
1:     private static final String QUEUE_NAME="AMQ4899TestQueue";
1:     private static final String CONSUMER_QUEUE="Consumer.Orders.VirtualOrders." + QUEUE_NAME;
1:     private static final String PRODUCER_DESTINATION_NAME = "VirtualOrders." + QUEUE_NAME;
1: 
1:     private static final Integer MESSAGE_LIMIT = 20;
1:     public static final String CONSUMER_A_SELECTOR = "Order < " + 10;
1:     public static  String CONSUMER_B_SELECTOR = "Order >= " + 10;
0:     private CountDownLatch consumersStarted = new CountDownLatch(2);
0:     private CountDownLatch consumerAtoConsumeCount= new CountDownLatch(10);
0:     private CountDownLatch consumerBtoConsumeCount = new CountDownLatch(10);
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() {
1:         setupBroker("broker://()/localhost?");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testVirtualTopicMultipleSelectors() throws Exception{
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue consumerQueue = session.createQueue(CONSUMER_QUEUE);
1: 
1:         MessageListener listenerA = new AMQ4899Listener("A", consumersStarted, consumerAtoConsumeCount);
1:         MessageConsumer consumerA = session.createConsumer(consumerQueue, CONSUMER_A_SELECTOR);
1:         consumerA.setMessageListener(listenerA);
1: 
1:         MessageListener listenerB = new AMQ4899Listener("B", consumersStarted, consumerBtoConsumeCount);
1:         MessageConsumer consumerB = session.createConsumer(consumerQueue, CONSUMER_B_SELECTOR);
1:         consumerB.setMessageListener(listenerB);
1: 
1:         consumersStarted.await(10, TimeUnit.SECONDS);
1:         assertEquals("Not all consumers started in time", 0, consumersStarted.getCount());
1: 
1:         Destination producerDestination = session.createTopic(PRODUCER_DESTINATION_NAME);
1:         MessageProducer producer = session.createProducer(producerDestination);
1:         int messageIndex = 0;
1:         for (int i=0; i < MESSAGE_LIMIT; i++) {
1:             if (i==3) {
1:                 LOG.debug("Stopping consumerA");
1:                 consumerA.close();
1:             }
1: 
1:             if (i == 14) {
1:                 LOG.debug("Stopping consumer B");
1:                 consumerB.close();
1:             }
1:             String messageText = "hello " + messageIndex++ + " sent at " + new java.util.Date().toString();
1:             TextMessage message = session.createTextMessage(messageText);
1:             message.setIntProperty("Order", i);
1:             LOG.debug("Sending message [{}]", messageText);
1:             producer.send(message);
0:             Thread.sleep(100);
1:         }
0:         Thread.sleep(1 * 1000);
1: 
1:         // restart consumerA
1:         LOG.debug("Restarting consumerA");
1:         consumerA = session.createConsumer(consumerQueue, CONSUMER_A_SELECTOR);
1:         consumerA.setMessageListener(listenerA);
1: 
1:         // restart consumerB
1:         LOG.debug("restarting consumerB");
1:         consumerB = session.createConsumer(consumerQueue, CONSUMER_B_SELECTOR);
1:         consumerB.setMessageListener(listenerB);
1: 
1:         consumerAtoConsumeCount.await(5, TimeUnit.SECONDS);
1:         consumerBtoConsumeCount.await(5, TimeUnit.SECONDS);
1: 
1:         LOG.debug("Unconsumed messages for consumerA {} consumerB {}", consumerAtoConsumeCount.getCount(), consumerBtoConsumeCount.getCount());
1: 
1:         assertEquals("Consumer A did not consume all messages", 0, consumerAtoConsumeCount.getCount());
1:         assertEquals("Consumer B did not consume all messages", 0, consumerBtoConsumeCount.getCount());
1: 
1:         connection.close();
1:     }
1: 
1:     /**
1:      * Setup broker with VirtualTopic configured
1:      */
1:     private void setupBroker(String uri) {
1:         try {
1:             broker = BrokerFactory.createBroker(uri);
1: 
1:             VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:             VirtualTopic virtualTopic = new VirtualTopic();
1:             virtualTopic.setName("VirtualOrders.>");
1:             virtualTopic.setSelectorAware(true);
1:             VirtualDestination[] virtualDestinations = { virtualTopic };
1:             interceptor.setVirtualDestinations(virtualDestinations);
1:             broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1: 
1:             SubQueueSelectorCacheBrokerPlugin subQueueSelectorCacheBrokerPlugin = new SubQueueSelectorCacheBrokerPlugin();
1:             BrokerPlugin[] updatedPlugins = {subQueueSelectorCacheBrokerPlugin};
1:             broker.setPlugins(updatedPlugins);
1: 
1:             broker.start();
1:             broker.waitUntilStarted();
1:         } catch (Exception e) {
1:             LOG.error("Failed creating broker", e);
1:         }
1:     }
1: }
1: 
1: class AMQ4899Listener implements MessageListener {
1:     Logger LOG = LoggerFactory.getLogger(AMQ4899Listener.class);
1:     CountDownLatch toConsume;
1:     String id;
1: 
1:     public AMQ4899Listener(String id, CountDownLatch started, CountDownLatch toConsume) {
1:         this.id = id;
1:         this.toConsume = toConsume;
1:         started.countDown();
1:     }
1: 
1:     @Override
1:     public void onMessage(Message message) {
1:         toConsume.countDown();
1:         try {
1:             if (message instanceof TextMessage) {
1:                 TextMessage textMessage = (TextMessage) message;
1:                 LOG.debug("Listener {} received [{}]", id, textMessage.getText());
1:             } else {
1:                 LOG.error("Listener {} Expected a TextMessage, got {}", id, message.getClass().getCanonicalName());
1:             }
1:         } catch (JMSException e) {
1:             LOG.error("Unexpected JMSException in Listener " + id, e);
1:         }
1:     }
1: }
============================================================================