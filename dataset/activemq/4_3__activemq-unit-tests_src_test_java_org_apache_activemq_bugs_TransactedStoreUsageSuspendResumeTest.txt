1:0dcdab7: /**
1:0dcdab7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0dcdab7:  * contributor license agreements.  See the NOTICE file distributed with
1:0dcdab7:  * this work for additional information regarding copyright ownership.
1:0dcdab7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0dcdab7:  * (the "License"); you may not use this file except in compliance with
1:0dcdab7:  * the License.  You may obtain a copy of the License at
1:0dcdab7:  *
1:0dcdab7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0dcdab7:  *
1:0dcdab7:  * Unless required by applicable law or agreed to in writing, software
1:0dcdab7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0dcdab7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0dcdab7:  * See the License for the specific language governing permissions and
1:0dcdab7:  * limitations under the License.
1:0dcdab7:  */
1:0dcdab7: package org.apache.activemq.bugs;
3:0dcdab7: 
1:b9805f7: import static org.junit.Assert.assertTrue;
1:b9805f7: 
1:0dcdab7: import java.util.concurrent.CountDownLatch;
1:0dcdab7: import java.util.concurrent.ExecutorService;
1:0dcdab7: import java.util.concurrent.Executors;
1:0dcdab7: import java.util.concurrent.TimeUnit;
1:b9805f7: 
1:0dcdab7: import javax.jms.BytesMessage;
1:0dcdab7: import javax.jms.Connection;
1:0dcdab7: import javax.jms.ConnectionFactory;
1:0dcdab7: import javax.jms.DeliveryMode;
1:0dcdab7: import javax.jms.Destination;
1:0dcdab7: import javax.jms.Message;
1:0dcdab7: import javax.jms.MessageConsumer;
1:0dcdab7: import javax.jms.MessageProducer;
1:0dcdab7: import javax.jms.Session;
1:b9805f7: 
1:0dcdab7: import org.apache.activemq.ActiveMQConnectionFactory;
1:2166265: import org.apache.activemq.TestSupport;
1:0dcdab7: import org.apache.activemq.broker.BrokerService;
1:0dcdab7: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:144b711: import org.apache.activemq.store.kahadb.MessageDatabase;
1:144b711: import org.apache.log4j.Level;
1:0dcdab7: import org.junit.After;
1:0dcdab7: import org.junit.Assert;
1:0dcdab7: import org.junit.Before;
1:0dcdab7: import org.junit.Test;
1:0dcdab7: import org.slf4j.Logger;
1:0dcdab7: import org.slf4j.LoggerFactory;
1:0dcdab7: 
1:5b7213e: // https://issues.apache.org/jira/browse/AMQ-4262
1:0dcdab7: public class TransactedStoreUsageSuspendResumeTest {
1:0dcdab7:     private static final Logger LOG = LoggerFactory.getLogger(TransactedStoreUsageSuspendResumeTest.class);
1:0dcdab7: 
1:0dcdab7:     private static final int MAX_MESSAGES = 10000;
1:0dcdab7: 
1:0dcdab7:     private static final String QUEUE_NAME = "test.queue";
1:0dcdab7: 
1:0dcdab7:     private BrokerService broker;
1:0dcdab7: 
1:0dcdab7:     private final CountDownLatch messagesReceivedCountDown = new CountDownLatch(MAX_MESSAGES);
1:0dcdab7:     private final CountDownLatch messagesSentCountDown = new CountDownLatch(MAX_MESSAGES);
1:0dcdab7:     private final CountDownLatch consumerStartLatch = new CountDownLatch(1);
1:0dcdab7: 
1:0dcdab7:     private class ConsumerThread extends Thread {
1:0dcdab7: 
1:0dcdab7:         @Override
1:0dcdab7:         public void run() {
1:0dcdab7:             try {
1:0dcdab7: 
1:0dcdab7:                 consumerStartLatch.await(30, TimeUnit.SECONDS);
1:0dcdab7: 
1:0dcdab7:                 ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0dcdab7:                 Connection connection = factory.createConnection();
1:0dcdab7:                 connection.start();
1:0dcdab7:                 Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:0dcdab7: 
1:0dcdab7:                 // wait for producer to stop
1:0dcdab7:                 long currentSendCount;
1:0dcdab7:                 do {
1:0dcdab7:                     currentSendCount = messagesSentCountDown.getCount();
1:0dcdab7:                     TimeUnit.SECONDS.sleep(5);
1:0dcdab7:                 } while (currentSendCount != messagesSentCountDown.getCount());
1:0dcdab7: 
1:0dcdab7:                 LOG.info("Starting consumer at: " + currentSendCount);
1:0dcdab7: 
1:0dcdab7:                 MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:0dcdab7: 
1:0dcdab7:                 do {
1:2166265:                     Message message = consumer.receive(5000);
1:0dcdab7:                     if (message != null) {
1:946e62d:                         session.commit();
1:0dcdab7:                         messagesReceivedCountDown.countDown();
1:b9805f7:                     }
1:0dcdab7:                     if (messagesReceivedCountDown.getCount() % 500 == 0) {
1:0dcdab7:                         LOG.info("remaining to receive: " + messagesReceivedCountDown.getCount());
2:0dcdab7:                     }
1:0dcdab7:                 } while (messagesReceivedCountDown.getCount() != 0);
1:b9805f7:                 session.commit();
1:0dcdab7:                 consumer.close();
1:0dcdab7:                 session.close();
1:0dcdab7:                 connection.close();
1:0dcdab7:             } catch (Exception e) {
1:0dcdab7:                 Assert.fail(e.getMessage());
1:0dcdab7:             }
1:0dcdab7:         }
1:0dcdab7:     }
1:0dcdab7: 
1:0dcdab7:     @Before
1:0dcdab7:     public void setup() throws Exception {
1:0dcdab7: 
1:144b711:         // investigate liner gc issue - store usage not getting released
1:144b711:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1:144b711: 
1:0dcdab7:         broker = new BrokerService();
1:0dcdab7:         broker.setDeleteAllMessagesOnStartup(true);
1:0dcdab7:         broker.setPersistent(true);
1:0dcdab7: 
1:0dcdab7:         KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
1:971ff0d:         kahaDB.setJournalMaxFileLength(256 * 1024);
1:0dcdab7:         kahaDB.setCleanupInterval(10*1000);
1:a9521dc:         kahaDB.setCompactAcksAfterNoGC(5);
1:0dcdab7:         broker.setPersistenceAdapter(kahaDB);
1:0dcdab7: 
1:0dcdab7:         broker.getSystemUsage().getStoreUsage().setLimit(7*1024*1024);
1:0dcdab7: 
1:0dcdab7:         broker.start();
1:0dcdab7:         broker.waitUntilStarted();
1:0dcdab7:     }
1:0dcdab7: 
1:0dcdab7:     @After
1:0dcdab7:     public void tearDown() throws Exception {
1:0dcdab7:         broker.stop();
1:0dcdab7:     }
1:0dcdab7: 
1:0dcdab7:     @Test
1:0dcdab7:     public void testTransactedStoreUsageSuspendResume() throws Exception {
1:0dcdab7: 
1:0dcdab7:         ConsumerThread thread = new ConsumerThread();
1:0dcdab7:         thread.start();
1:0dcdab7:         ExecutorService sendExecutor = Executors.newSingleThreadExecutor();
1:0dcdab7:         sendExecutor.execute(new Runnable() {
1:0dcdab7:             @Override
1:0dcdab7:             public void run() {
1:0dcdab7:                 try {
1:0dcdab7:                     sendMessages();
1:0dcdab7:                 } catch (Exception ignored) {
1:0dcdab7:                 }
1:0dcdab7:             }
1:0dcdab7:         });
1:0dcdab7:         sendExecutor.shutdown();
1:a9521dc:         sendExecutor.awaitTermination(10, TimeUnit.MINUTES);
1:0dcdab7: 
1:0fb24cc:         boolean allMessagesReceived = messagesReceivedCountDown.await(10, TimeUnit.MINUTES);
1:2166265:         if (!allMessagesReceived) {
1:144b711:             LOG.info("Giving up - not all received on time...");
1:144b711:             LOG.info("System Mem Usage: " + broker.getSystemUsage().getMemoryUsage());
1:144b711:             LOG.info("System Store Usage: " +broker.getSystemUsage().getStoreUsage());
1:144b711:             LOG.info("Producer sent: " + messagesSentCountDown.getCount());
1:144b711:             LOG.info("Consumer remaining to receive: " + messagesReceivedCountDown.getCount());
1:2166265:             TestSupport.dumpAllThreads("StuckConsumer!");
1:2166265:         }
1:0dcdab7:         assertTrue("Got all messages: " + messagesReceivedCountDown, allMessagesReceived);
1:f594cda: 
1:f594cda:         // give consumers a chance to exit gracefully
1:a9521dc:         TimeUnit.SECONDS.sleep(5);
1:0dcdab7:     }
1:0dcdab7: 
1:0dcdab7:     private void sendMessages() throws Exception {
1:0dcdab7:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0dcdab7:         factory.setAlwaysSyncSend(true);
1:0dcdab7:         Connection connection = factory.createConnection();
1:0dcdab7:         connection.start();
1:0dcdab7:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:0dcdab7:         Destination queue = session.createQueue(QUEUE_NAME);
1:0dcdab7:         Destination retainQueue = session.createQueue(QUEUE_NAME + "-retain");
1:0dcdab7:         MessageProducer producer = session.createProducer(null);
1:0dcdab7: 
1:0dcdab7:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:0dcdab7:         BytesMessage message = session.createBytesMessage();
1:0dcdab7:         message.writeBytes(new byte[10]);
1:0dcdab7: 
1:971ff0d:         for (int i=0; i<1240; i++) {
1:0dcdab7:             // mostly fill the store with retained messages
1:0dcdab7:             // so consumer only has a small bit of store usage to work with
1:0dcdab7:             producer.send(retainQueue, message);
1:b9805f7:             session.commit();
1:0dcdab7:         }
1:0dcdab7: 
1:971ff0d:         // issue with gc and linear store usage
1:971ff0d:         // some daylight in needed between retainQ and regularQ to free up the store
1:971ff0d:         // log4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=TRACE
1:971ff0d:         Destination shortRetainQueue = session.createQueue(QUEUE_NAME + "-retain-short");
1:971ff0d:         for (int i=0; i<1240; i++) {
1:971ff0d:             producer.send(shortRetainQueue, message);
1:971ff0d:             session.commit();
1:971ff0d:         }
1:971ff0d: 
1:971ff0d:         MessageConsumer consumer = session.createConsumer(shortRetainQueue);
1:971ff0d:         for (int i=0; i<1240; i++) {
1:971ff0d:             consumer.receive(4000);
1:971ff0d:             session.commit();
1:971ff0d:         }
1:971ff0d: 
1:971ff0d:         LOG.info("Done with retain q. Mem Usage: " + broker.getSystemUsage().getMemoryUsage());
1:971ff0d:         LOG.info("Done with retain q. Store Usage: " +broker.getSystemUsage().getStoreUsage());
1:0dcdab7:         consumerStartLatch.countDown();
1:0dcdab7:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:0dcdab7:             producer.send(queue,  message);
1:0dcdab7:             if (i>0 && i%20 == 0) {
3:0dcdab7:                 session.commit();
1:0dcdab7:             }
1:0dcdab7:             messagesSentCountDown.countDown();
1:0dcdab7:             if (i>0 && i%500 == 0) {
1:0dcdab7:                 LOG.info("Sent : " + i);
1:0dcdab7:             }
1:0dcdab7: 
1:0dcdab7:         }
1:0dcdab7:         session.commit();
1:0dcdab7:         producer.close();
1:0dcdab7:         session.close();
1:0dcdab7:         connection.close();
1:0dcdab7:     }
1:0dcdab7: 
1:0dcdab7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0fb24cc
/////////////////////////////////////////////////////////////////////////
1:         boolean allMessagesReceived = messagesReceivedCountDown.await(10, TimeUnit.MINUTES);
commit:a9521dc
/////////////////////////////////////////////////////////////////////////
1:         kahaDB.setCompactAcksAfterNoGC(5);
/////////////////////////////////////////////////////////////////////////
1:         sendExecutor.awaitTermination(10, TimeUnit.MINUTES);
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(5);
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1:                         session.commit();
commit:b9805f7
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         if ((messagesReceivedCountDown.getCount() % (MAX_MESSAGES / 5)) == 0) {
1:                             session.commit();
1:                         }
1:                 session.commit();
author:gtully
-------------------------------------------------------------------------------
commit:144b711
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.MessageDatabase;
1: import org.apache.log4j.Level;
/////////////////////////////////////////////////////////////////////////
1:         // investigate liner gc issue - store usage not getting released
1:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1: 
/////////////////////////////////////////////////////////////////////////
0:         boolean allMessagesReceived = messagesReceivedCountDown.await(5, TimeUnit.MINUTES);
1:             LOG.info("Giving up - not all received on time...");
1:             LOG.info("System Mem Usage: " + broker.getSystemUsage().getMemoryUsage());
1:             LOG.info("System Store Usage: " +broker.getSystemUsage().getStoreUsage());
1:             LOG.info("Producer sent: " + messagesSentCountDown.getCount());
1:             LOG.info("Consumer remaining to receive: " + messagesReceivedCountDown.getCount());
commit:971ff0d
/////////////////////////////////////////////////////////////////////////
1:         kahaDB.setJournalMaxFileLength(256 * 1024);
/////////////////////////////////////////////////////////////////////////
1:         for (int i=0; i<1240; i++) {
1:         // issue with gc and linear store usage
1:         // some daylight in needed between retainQ and regularQ to free up the store
1:         // log4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=TRACE
1:         Destination shortRetainQueue = session.createQueue(QUEUE_NAME + "-retain-short");
1:         for (int i=0; i<1240; i++) {
1:             producer.send(shortRetainQueue, message);
1:             session.commit();
1:         }
1: 
1:         MessageConsumer consumer = session.createConsumer(shortRetainQueue);
1:         for (int i=0; i<1240; i++) {
1:             consumer.receive(4000);
1:             session.commit();
1:         }
1: 
1:         LOG.info("Done with retain q. Mem Usage: " + broker.getSystemUsage().getMemoryUsage());
1:         LOG.info("Done with retain q. Store Usage: " +broker.getSystemUsage().getStoreUsage());
commit:2166265
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1:                     Message message = consumer.receive(5000);
/////////////////////////////////////////////////////////////////////////
0:         boolean allMessagesReceived = messagesReceivedCountDown.await(10, TimeUnit.MINUTES);
1:         if (!allMessagesReceived) {
1:             TestSupport.dumpAllThreads("StuckConsumer!");
1:         }
commit:5b7213e
/////////////////////////////////////////////////////////////////////////
1: // https://issues.apache.org/jira/browse/AMQ-4262
commit:f594cda
/////////////////////////////////////////////////////////////////////////
1: 
1:         // give consumers a chance to exit gracefully
0:         TimeUnit.SECONDS.sleep(2);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:0dcdab7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: public class TransactedStoreUsageSuspendResumeTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(TransactedStoreUsageSuspendResumeTest.class);
1: 
1:     private static final int MAX_MESSAGES = 10000;
1: 
1:     private static final String QUEUE_NAME = "test.queue";
1: 
1:     private BrokerService broker;
1: 
1:     private final CountDownLatch messagesReceivedCountDown = new CountDownLatch(MAX_MESSAGES);
1:     private final CountDownLatch messagesSentCountDown = new CountDownLatch(MAX_MESSAGES);
1:     private final CountDownLatch consumerStartLatch = new CountDownLatch(1);
1: 
1:     private class ConsumerThread extends Thread {
1: 
1:         @Override
1:         public void run() {
1:             try {
1: 
1:                 consumerStartLatch.await(30, TimeUnit.SECONDS);
1: 
1:                 ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                 Connection connection = factory.createConnection();
1:                 connection.start();
1:                 Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:                 // wait for producer to stop
1:                 long currentSendCount;
1:                 do {
1:                     currentSendCount = messagesSentCountDown.getCount();
1:                     TimeUnit.SECONDS.sleep(5);
1:                 } while (currentSendCount != messagesSentCountDown.getCount());
1: 
1:                 LOG.info("Starting consumer at: " + currentSendCount);
1: 
1:                 MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1: 
1:                 do {
0:                     Message message = consumer.receive(1000);
1:                     if (message != null) {
1:                         session.commit();
1:                         messagesReceivedCountDown.countDown();
1:                     }
1:                     if (messagesReceivedCountDown.getCount() % 500 == 0) {
1:                         LOG.info("remaining to receive: " + messagesReceivedCountDown.getCount());
1:                     }
1:                 } while (messagesReceivedCountDown.getCount() != 0);
1:                 consumer.close();
1:                 session.close();
1:                 connection.close();
1:             } catch (Exception e) {
1:                 Assert.fail(e.getMessage());
1:             }
1:         }
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1: 
1:         KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
0:         kahaDB.setJournalMaxFileLength(500 * 1024);
1:         kahaDB.setCleanupInterval(10*1000);
1:         broker.setPersistenceAdapter(kahaDB);
1: 
1:         broker.getSystemUsage().getStoreUsage().setLimit(7*1024*1024);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testTransactedStoreUsageSuspendResume() throws Exception {
1: 
1:         ConsumerThread thread = new ConsumerThread();
1:         thread.start();
1:         ExecutorService sendExecutor = Executors.newSingleThreadExecutor();
1:         sendExecutor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     sendMessages();
1:                 } catch (Exception ignored) {
1:                 }
1:             }
1:         });
1:         sendExecutor.shutdown();
0:         sendExecutor.awaitTermination(5, TimeUnit.MINUTES);
1: 
0:         boolean allMessagesReceived = messagesReceivedCountDown.await(120, TimeUnit.SECONDS);
1:         assertTrue("Got all messages: " + messagesReceivedCountDown, allMessagesReceived);
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.setAlwaysSyncSend(true);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Destination queue = session.createQueue(QUEUE_NAME);
1:         Destination retainQueue = session.createQueue(QUEUE_NAME + "-retain");
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         BytesMessage message = session.createBytesMessage();
1:         message.writeBytes(new byte[10]);
1: 
0:         for (int i=0; i<4240; i++) {
1:             // mostly fill the store with retained messages
1:             // so consumer only has a small bit of store usage to work with
1:             producer.send(retainQueue, message);
1:             session.commit();
1:         }
1: 
1:         consumerStartLatch.countDown();
1:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:             producer.send(queue,  message);
1:             if (i>0 && i%20 == 0) {
1:                 session.commit();
1:             }
1:             messagesSentCountDown.countDown();
1:             if (i>0 && i%500 == 0) {
1:                 LOG.info("Sent : " + i);
1:             }
1: 
1:         }
1:         session.commit();
1:         producer.close();
1:         session.close();
1:         connection.close();
1:     }
1: 
1: }
============================================================================