1:3336a22: /**
1:3336a22:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3336a22:  * contributor license agreements.  See the NOTICE file distributed with
1:3336a22:  * this work for additional information regarding copyright ownership.
1:3336a22:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3336a22:  * (the "License"); you may not use this file except in compliance with
1:3336a22:  * the License.  You may obtain a copy of the License at
1:3336a22:  *
1:3336a22:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3336a22:  *
1:3336a22:  * Unless required by applicable law or agreed to in writing, software
1:3336a22:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3336a22:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3336a22:  * See the License for the specific language governing permissions and
1:3336a22:  * limitations under the License.
1:3336a22:  */
1:d22e841: package org.apache.activemq.util;
1:d22e841: import java.lang.reflect.Method;
1:d22e841: import java.util.ArrayList;
1:4b44d31: import java.util.Locale;
1:d22e841: import java.util.regex.Pattern;
1:d22e841: 
1:d22e841: import org.apache.activemq.store.jdbc.Statements;
1:d22e841: 
1:d22e841: 
1:d22e841: public class GenerateJDBCStatements {
1:d22e841:     public static String returnStatement(Object statement){
1:d22e841:     	return ((String)statement).replace("<", "&lt;").replace(">", "&gt;");
1:d22e841:     	
1:d22e841:     }
1:d22e841: 	/**
1:d22e841: 	 * @param args
1:d22e841: 	 */
1:d22e841: 	public static void main(String[] args) throws Exception{
1:d22e841:     	Statements s=new Statements();
1:d22e841:     	s.setTablePrefix("ACTIVEMQ.");
1:d22e841:     	String[] stats=s.getCreateSchemaStatements();
1:d22e841:     	System.out.println("<bean id=\"statements\" class=\"org.apache.activemq.store.jdbc.Statements\">");
1:d22e841:     	System.out.println("<property name=\"createSchemaStatements\">");
1:d22e841:     	System.out.println("<list>");
1:d22e841:     	for(int i=0; i<stats.length;i++){
1:d22e841:     		System.out.println("<value>"+stats[i]+"</value>");
1:d22e841:     	}
1:d22e841:     	System.out.println("</list>");
1:d22e841:     	System.out.println("</property>");
1:d22e841:     	
1:d22e841:     	
1:d22e841:     	Method[] methods=Statements.class.getMethods();
1:d22e841:     	Pattern sPattern= Pattern.compile("get.*Statement$");
1:d22e841:     	Pattern setPattern= Pattern.compile("set.*Statement$");
1:d22e841:     	ArrayList<String> setMethods=new ArrayList<String>();
1:d22e841:     	for(int i=0; i<methods.length;i++){
1:d22e841:     		if(setPattern.matcher(methods[i].getName()).find()){
1:d22e841:     			setMethods.add(methods[i].getName());
1:d22e841:     		}
1:d22e841:     	}
1:d22e841:     	for(int i=0; i<methods.length;i++){
1:d22e841:     		if(sPattern.matcher(methods[i].getName()).find()&&setMethods.contains(methods[i].getName().replace("get","set"))){
1:4b44d31:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase(Locale.ENGLISH)+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
1:d22e841:     		}
1:d22e841:     	}
1:d22e841:     	//for a typo is not needed if removeMessageStatment typo is corrected
1:d22e841:     	Pattern sPattern2= Pattern.compile("get.*Statment$");
1:d22e841:     	for(int i=0; i<methods.length;i++){
1:d22e841:     		if(sPattern2.matcher(methods[i].getName()).find()){
1:4b44d31:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase(Locale.ENGLISH)+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
1:d22e841:     		}
1:d22e841:     	}
1:d22e841:     	//end of generating because of typo
1:d22e841:     	
1:d22e841:     	String[] statsDrop=s.getDropSchemaStatements();
1:d22e841:     	System.out.println("<property name=\"dropSchemaStatements\">");
1:d22e841:     	System.out.println("<list>");
1:d22e841:     	for(int i=0; i<statsDrop.length;i++){
1:d22e841:     		System.out.println("<value>"+statsDrop[i]+"</value>");
1:d22e841:     	}
1:d22e841:     	System.out.println("</list>");
1:d22e841:     	System.out.println("</property>");
1:d22e841:     	System.out.println("</bean>");
1:d22e841:     	
1:d22e841: 
1:d22e841: 	}
1:d22e841: 
1:d22e841: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4b44d31
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase(Locale.ENGLISH)+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
1:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase(Locale.ENGLISH)+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:bb0aed0
/////////////////////////////////////////////////////////////////////////
0:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase()+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
0:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase()+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, (Object[])null))+"\" />");
commit:3336a22
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d22e841
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.activemq.store.jdbc.Statements;
1: 
1: 
1: public class GenerateJDBCStatements {
1:     public static String returnStatement(Object statement){
1:     	return ((String)statement).replace("<", "&lt;").replace(">", "&gt;");
1:     	
1:     }
1: 	/**
1: 	 * @param args
1: 	 */
1: 	public static void main(String[] args) throws Exception{
1:     	Statements s=new Statements();
1:     	s.setTablePrefix("ACTIVEMQ.");
1:     	String[] stats=s.getCreateSchemaStatements();
1:     	System.out.println("<bean id=\"statements\" class=\"org.apache.activemq.store.jdbc.Statements\">");
1:     	System.out.println("<property name=\"createSchemaStatements\">");
1:     	System.out.println("<list>");
1:     	for(int i=0; i<stats.length;i++){
1:     		System.out.println("<value>"+stats[i]+"</value>");
1:     	}
1:     	System.out.println("</list>");
1:     	System.out.println("</property>");
1:     	
1:     	
1:     	Method[] methods=Statements.class.getMethods();
1:     	Pattern sPattern= Pattern.compile("get.*Statement$");
1:     	Pattern setPattern= Pattern.compile("set.*Statement$");
1:     	ArrayList<String> setMethods=new ArrayList<String>();
1:     	for(int i=0; i<methods.length;i++){
1:     		if(setPattern.matcher(methods[i].getName()).find()){
1:     			setMethods.add(methods[i].getName());
1:     		}
1:     	}
1:     	for(int i=0; i<methods.length;i++){
1:     		if(sPattern.matcher(methods[i].getName()).find()&&setMethods.contains(methods[i].getName().replace("get","set"))){
0:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase()+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, null))+"\" />");
1:     		}
1:     	}
1:     	//for a typo is not needed if removeMessageStatment typo is corrected
1:     	Pattern sPattern2= Pattern.compile("get.*Statment$");
1:     	for(int i=0; i<methods.length;i++){
1:     		if(sPattern2.matcher(methods[i].getName()).find()){
0:     			System.out.println("<property name=\""+methods[i].getName().substring(3,4).toLowerCase()+methods[i].getName().substring(4)+"\" value=\""+returnStatement(methods[i].invoke(s, null))+"\" />");
1:     		}
1:     	}
1:     	//end of generating because of typo
1:     	
1:     	String[] statsDrop=s.getDropSchemaStatements();
1:     	System.out.println("<property name=\"dropSchemaStatements\">");
1:     	System.out.println("<list>");
1:     	for(int i=0; i<statsDrop.length;i++){
1:     		System.out.println("<value>"+statsDrop[i]+"</value>");
1:     	}
1:     	System.out.println("</list>");
1:     	System.out.println("</property>");
1:     	System.out.println("</bean>");
1:     	
1: 
1: 	}
1: 
1: }
============================================================================