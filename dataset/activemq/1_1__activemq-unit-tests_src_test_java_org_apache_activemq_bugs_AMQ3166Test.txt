1:fe9d99e: /*
1:fe9d99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fe9d99e:  * contributor license agreements.  See the NOTICE file distributed with
1:fe9d99e:  * this work for additional information regarding copyright ownership.
1:fe9d99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fe9d99e:  * (the "License"); you may not use this file except in compliance with
1:fe9d99e:  * the License.  You may obtain a copy of the License at
1:fe9d99e:  *
1:fe9d99e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fe9d99e:  *
1:fe9d99e:  * Unless required by applicable law or agreed to in writing, software
1:fe9d99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fe9d99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fe9d99e:  * See the License for the specific language governing permissions and
1:fe9d99e:  * limitations under the License.
1:fe9d99e:  */
1:fe9d99e: package org.apache.activemq.bugs;
1:fe9d99e: 
1:fe9d99e: import org.apache.activemq.ActiveMQConnection;
1:fe9d99e: import org.apache.activemq.ActiveMQConnectionFactory;
1:fe9d99e: import org.apache.activemq.ActiveMQMessageProducer;
1:fe9d99e: import org.apache.activemq.ActiveMQSession;
1:fe9d99e: import org.apache.activemq.AsyncCallback;
1:fe9d99e: import org.apache.activemq.broker.BrokerPlugin;
1:fe9d99e: import org.apache.activemq.broker.BrokerPluginSupport;
1:fe9d99e: import org.apache.activemq.broker.BrokerService;
1:fe9d99e: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:fe9d99e: import org.apache.activemq.broker.ProducerBrokerExchange;
1:fe9d99e: import org.apache.activemq.command.Message;
1:fe9d99e: import org.apache.activemq.command.MessageAck;
1:fe9d99e: import org.apache.activemq.transaction.Synchronization;
1:fe9d99e: import org.apache.activemq.util.Wait;
1:fe9d99e: import org.junit.After;
1:fe9d99e: import org.junit.Test;
1:fe9d99e: import org.slf4j.Logger;
1:fe9d99e: import org.slf4j.LoggerFactory;
1:fe9d99e: 
1:fe9d99e: import javax.jms.Connection;
1:fe9d99e: import javax.jms.JMSException;
1:fe9d99e: import javax.jms.MessageConsumer;
1:fe9d99e: import javax.jms.MessageProducer;
1:fe9d99e: import javax.jms.Queue;
1:fe9d99e: import javax.jms.Session;
1:fe9d99e: import javax.jms.TransactionRolledBackException;
1:fe9d99e: import javax.transaction.xa.XAException;
1:fe9d99e: import java.util.concurrent.CountDownLatch;
1:fe9d99e: import java.util.concurrent.TimeUnit;
1:fe9d99e: import java.util.concurrent.atomic.AtomicInteger;
1:fe9d99e: 
1:fe9d99e: import static org.junit.Assert.assertNotNull;
1:fe9d99e: import static org.junit.Assert.assertTrue;
1:fe9d99e: import static org.junit.Assert.fail;
1:fe9d99e: 
1:99b7a28: public class AMQ3166Test {
1:fe9d99e: 
1:fe9d99e:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3166Test.class);
1:fe9d99e: 
1:fe9d99e:     private BrokerService brokerService;
1:fe9d99e:     private AtomicInteger sendAttempts = new AtomicInteger(0);
1:fe9d99e: 
1:fe9d99e: 
1:fe9d99e:     @Test
1:fe9d99e:     public void testCommitThroughAsyncErrorNoForceRollback() throws Exception {
1:fe9d99e:         startBroker(false);
1:fe9d99e:         Connection connection = createConnection();
1:fe9d99e:         connection.start();
1:fe9d99e:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:fe9d99e:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1:fe9d99e: 
1:fe9d99e:         for (int i=0; i<10; i++) {
1:fe9d99e:             producer.send(session.createTextMessage("Hello A"));
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         session.commit();
1:fe9d99e: 
1:fe9d99e:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1:fe9d99e: 
1:fe9d99e:             @Override
1:fe9d99e:             public boolean isSatisified() throws Exception {
1:fe9d99e:                 return brokerService.getAdminView().getTotalEnqueueCount() == 1;
1:fe9d99e:             }
1:fe9d99e:         }));
1:fe9d99e: 
1:fe9d99e:         connection.close();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     @Test
1:fe9d99e:     public void testCommitThroughAsyncErrorForceRollback() throws Exception {
1:fe9d99e:         startBroker(true);
1:fe9d99e:         Connection connection = createConnection();
1:fe9d99e:         connection.start();
1:fe9d99e:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:fe9d99e:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1:fe9d99e: 
1:fe9d99e:         try {
1:fe9d99e:             for (int i = 0; i < 10; i++) {
1:fe9d99e:                 producer.send(session.createTextMessage("Hello A"));
1:fe9d99e:             }
1:fe9d99e:             session.commit();
1:fe9d99e:             fail("Expect TransactionRolledBackException");
1:fe9d99e:         } catch (JMSException expected) {
1:fe9d99e:             assertTrue(expected.getCause() instanceof XAException);
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1:fe9d99e: 
1:fe9d99e:             @Override
1:fe9d99e:             public boolean isSatisified() throws Exception {
1:fe9d99e:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:fe9d99e:             }
1:fe9d99e:         }));
1:fe9d99e: 
1:fe9d99e:         connection.close();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     @Test
1:fe9d99e:     public void testAckCommitThroughAsyncErrorForceRollback() throws Exception {
1:fe9d99e:         startBroker(true);
1:fe9d99e:         Connection connection = createConnection();
1:fe9d99e:         connection.start();
1:fe9d99e:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:fe9d99e:         Queue destination = session.createQueue("QAT");
1:fe9d99e:         MessageProducer producer = session.createProducer(destination);
1:fe9d99e:         producer.send(session.createTextMessage("Hello A"));
1:fe9d99e:         producer.close();
1:fe9d99e:         session.commit();
1:fe9d99e: 
1:fe9d99e:         MessageConsumer messageConsumer = session.createConsumer(destination);
1:fe9d99e:         assertNotNull("got message", messageConsumer.receive(4000));
1:fe9d99e: 
1:fe9d99e:         try {
1:fe9d99e:             session.commit();
1:fe9d99e:             fail("Expect TransactionRolledBackException");
1:fe9d99e:         } catch (JMSException expected) {
1:fe9d99e:             assertTrue(expected.getCause() instanceof XAException);
1:7077d2b:             assertTrue(expected.getCause().getCause() instanceof TransactionRolledBackException);
1:7077d2b:             assertTrue(expected.getCause().getCause().getCause() instanceof RuntimeException);
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         assertTrue("one message still there!", Wait.waitFor(new Wait.Condition() {
1:fe9d99e: 
1:fe9d99e:             @Override
1:fe9d99e:             public boolean isSatisified() throws Exception {
1:fe9d99e:                 return brokerService.getAdminView().getTotalMessageCount() == 1;
1:fe9d99e:             }
1:fe9d99e:         }));
1:fe9d99e: 
1:fe9d99e:         connection.close();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e: 
1:fe9d99e:     @Test
1:fe9d99e:     public void testErrorOnSyncSend() throws Exception {
1:fe9d99e:         startBroker(false);
1:fe9d99e:         ActiveMQConnection connection = (ActiveMQConnection) createConnection();
1:fe9d99e:         connection.setAlwaysSyncSend(true);
1:fe9d99e:         connection.start();
1:fe9d99e:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:fe9d99e:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1:fe9d99e: 
1:fe9d99e:         try {
1:fe9d99e:             for (int i = 0; i < 10; i++) {
1:fe9d99e:                 producer.send(session.createTextMessage("Hello A"));
1:fe9d99e:             }
1:fe9d99e:             session.commit();
1:fe9d99e:         } catch (JMSException expectedSendFail) {
1:fe9d99e:             LOG.info("Got expected: " + expectedSendFail);
1:fe9d99e:             session.rollback();
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1:fe9d99e: 
1:fe9d99e:             @Override
1:fe9d99e:             public boolean isSatisified() throws Exception {
1:fe9d99e:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:fe9d99e:             }
1:fe9d99e:         }));
1:fe9d99e: 
1:fe9d99e:         connection.close();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e: 
1:fe9d99e:     @Test
1:fe9d99e:     public void testRollbackOnAsyncErrorAmqApi() throws Exception {
1:fe9d99e:         startBroker(false);
1:fe9d99e:         ActiveMQConnection connection = (ActiveMQConnection) createConnection();
1:fe9d99e:         connection.start();
1:fe9d99e:         final ActiveMQSession session = (ActiveMQSession) connection.createSession(true, Session.SESSION_TRANSACTED);
1:fe9d99e:         int batchSize = 10;
1:fe9d99e:         final CountDownLatch batchSent = new CountDownLatch(batchSize);
1:fe9d99e:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(session.createQueue("QAT"));
1:fe9d99e: 
1:fe9d99e:         for (int i=0; i<batchSize; i++) {
1:fe9d99e:             producer.send(session.createTextMessage("Hello A"), new AsyncCallback() {
1:fe9d99e:                 @Override
1:fe9d99e:                 public void onSuccess() {
1:fe9d99e:                     batchSent.countDown();
1:fe9d99e:                 }
1:fe9d99e: 
1:fe9d99e:                 @Override
1:fe9d99e:                 public void onException(JMSException e) {
1:fe9d99e:                     session.getTransactionContext().setRollbackOnly(true);
1:fe9d99e:                     batchSent.countDown();
1:fe9d99e:                 }
1:fe9d99e:             });
1:fe9d99e: 
1:fe9d99e:             if (i==0) {
1:fe9d99e:                 // transaction context begun on first send
1:fe9d99e:                 session.getTransactionContext().addSynchronization(new Synchronization() {
1:fe9d99e:                     @Override
1:fe9d99e:                     public void beforeEnd() throws Exception {
1:fe9d99e:                         // await response to all sends in the batch
1:fe9d99e:                         if (!batchSent.await(10, TimeUnit.SECONDS)) {
1:fe9d99e:                             LOG.error("TimedOut waiting for aync send requests!");
1:fe9d99e:                             session.getTransactionContext().setRollbackOnly(true);
1:fe9d99e:                         };
1:fe9d99e:                         super.beforeEnd();
1:fe9d99e:                     }
1:fe9d99e:                 });
1:fe9d99e:             }
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         try {
1:fe9d99e:             session.commit();
1:fe9d99e:             fail("expect rollback on async error");
1:fe9d99e:         } catch (TransactionRolledBackException expected) {
1:fe9d99e:         }
1:fe9d99e: 
1:fe9d99e:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1:fe9d99e: 
1:fe9d99e:             @Override
1:fe9d99e:             public boolean isSatisified() throws Exception {
1:fe9d99e:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:fe9d99e:             }
1:fe9d99e:         }));
1:fe9d99e: 
1:fe9d99e:         connection.close();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e: 
1:fe9d99e:     private Connection createConnection() throws Exception {
1:fe9d99e:         String connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:fe9d99e:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:fe9d99e:         cf.setWatchTopicAdvisories(false);
1:fe9d99e:         return cf.createConnection();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     public void startBroker(boolean forceRollbackOnAsyncSendException) throws Exception {
1:fe9d99e:         brokerService = createBroker(forceRollbackOnAsyncSendException);
1:fe9d99e:         brokerService.start();
1:fe9d99e:         brokerService.waitUntilStarted();
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     @After
1:fe9d99e:     public void tearDown() throws Exception {
1:fe9d99e:         if (brokerService != null) {
1:fe9d99e:             brokerService.stop();
1:fe9d99e:             brokerService.waitUntilStopped();
1:fe9d99e:             brokerService = null;
1:fe9d99e:         }
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     protected BrokerService createBroker(boolean forceRollbackOnAsyncSendException) throws Exception {
1:fe9d99e:         BrokerService answer = new BrokerService();
1:fe9d99e: 
1:fe9d99e:         answer.setPersistent(true);
1:fe9d99e:         answer.setDeleteAllMessagesOnStartup(true);
1:fe9d99e:         answer.setAdvisorySupport(false);
1:fe9d99e:         answer.setRollbackOnlyOnAsyncException(forceRollbackOnAsyncSendException);
1:fe9d99e: 
1:fe9d99e:         answer.addConnector("tcp://0.0.0.0:0");
1:fe9d99e: 
1:fe9d99e:         answer.setPlugins(new BrokerPlugin[]{
1:fe9d99e:                 new BrokerPluginSupport() {
1:fe9d99e:                     @Override
1:fe9d99e:                     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:fe9d99e:                         if (ack.isStandardAck()) {
1:fe9d99e:                             throw new RuntimeException("no way, won't allow any standard ack");
1:fe9d99e:                         }
1:fe9d99e:                         super.acknowledge(consumerExchange, ack);
1:fe9d99e:                     }
1:fe9d99e: 
1:fe9d99e:                     @Override
1:fe9d99e:                     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:fe9d99e:                         if (sendAttempts.incrementAndGet() > 1) {
1:fe9d99e:                             throw new RuntimeException("no way, won't accept any messages");
1:fe9d99e:                         }
1:fe9d99e:                         super.send(producerExchange, messageSend);
1:fe9d99e:                     }
1:fe9d99e:                 }
1:fe9d99e:         });
1:fe9d99e: 
1:fe9d99e:         return answer;
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:99b7a28
/////////////////////////////////////////////////////////////////////////
1: public class AMQ3166Test {
commit:7077d2b
/////////////////////////////////////////////////////////////////////////
0: public class   {
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(expected.getCause().getCause() instanceof TransactionRolledBackException);
1:             assertTrue(expected.getCause().getCause().getCause() instanceof RuntimeException);
commit:fe9d99e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.AsyncCallback;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.transaction.Synchronization;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TransactionRolledBackException;
1: import javax.transaction.xa.XAException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
0: public class AMQ3166Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3166Test.class);
1: 
1:     private BrokerService brokerService;
1:     private AtomicInteger sendAttempts = new AtomicInteger(0);
1: 
1: 
1:     @Test
1:     public void testCommitThroughAsyncErrorNoForceRollback() throws Exception {
1:         startBroker(false);
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1: 
1:         for (int i=0; i<10; i++) {
1:             producer.send(session.createTextMessage("Hello A"));
1:         }
1: 
1:         session.commit();
1: 
1:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalEnqueueCount() == 1;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testCommitThroughAsyncErrorForceRollback() throws Exception {
1:         startBroker(true);
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1: 
1:         try {
1:             for (int i = 0; i < 10; i++) {
1:                 producer.send(session.createTextMessage("Hello A"));
1:             }
1:             session.commit();
1:             fail("Expect TransactionRolledBackException");
1:         } catch (JMSException expected) {
1:             assertTrue(expected.getCause() instanceof XAException);
1:         }
1: 
1:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testAckCommitThroughAsyncErrorForceRollback() throws Exception {
1:         startBroker(true);
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Queue destination = session.createQueue("QAT");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage("Hello A"));
1:         producer.close();
1:         session.commit();
1: 
1:         MessageConsumer messageConsumer = session.createConsumer(destination);
1:         assertNotNull("got message", messageConsumer.receive(4000));
1: 
1:         try {
1:             session.commit();
1:             fail("Expect TransactionRolledBackException");
1:         } catch (JMSException expected) {
1:             assertTrue(expected.getCause() instanceof XAException);
1:         }
1: 
1:         assertTrue("one message still there!", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalMessageCount() == 1;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
1: 
1:     @Test
1:     public void testErrorOnSyncSend() throws Exception {
1:         startBroker(false);
1:         ActiveMQConnection connection = (ActiveMQConnection) createConnection();
1:         connection.setAlwaysSyncSend(true);
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(session.createQueue("QAT"));
1: 
1:         try {
1:             for (int i = 0; i < 10; i++) {
1:                 producer.send(session.createTextMessage("Hello A"));
1:             }
1:             session.commit();
1:         } catch (JMSException expectedSendFail) {
1:             LOG.info("Got expected: " + expectedSendFail);
1:             session.rollback();
1:         }
1: 
1:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
1: 
1:     @Test
1:     public void testRollbackOnAsyncErrorAmqApi() throws Exception {
1:         startBroker(false);
1:         ActiveMQConnection connection = (ActiveMQConnection) createConnection();
1:         connection.start();
1:         final ActiveMQSession session = (ActiveMQSession) connection.createSession(true, Session.SESSION_TRANSACTED);
1:         int batchSize = 10;
1:         final CountDownLatch batchSent = new CountDownLatch(batchSize);
1:         ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(session.createQueue("QAT"));
1: 
1:         for (int i=0; i<batchSize; i++) {
1:             producer.send(session.createTextMessage("Hello A"), new AsyncCallback() {
1:                 @Override
1:                 public void onSuccess() {
1:                     batchSent.countDown();
1:                 }
1: 
1:                 @Override
1:                 public void onException(JMSException e) {
1:                     session.getTransactionContext().setRollbackOnly(true);
1:                     batchSent.countDown();
1:                 }
1:             });
1: 
1:             if (i==0) {
1:                 // transaction context begun on first send
1:                 session.getTransactionContext().addSynchronization(new Synchronization() {
1:                     @Override
1:                     public void beforeEnd() throws Exception {
1:                         // await response to all sends in the batch
1:                         if (!batchSent.await(10, TimeUnit.SECONDS)) {
1:                             LOG.error("TimedOut waiting for aync send requests!");
1:                             session.getTransactionContext().setRollbackOnly(true);
1:                         };
1:                         super.beforeEnd();
1:                     }
1:                 });
1:             }
1:         }
1: 
1:         try {
1:             session.commit();
1:             fail("expect rollback on async error");
1:         } catch (TransactionRolledBackException expected) {
1:         }
1: 
1:         assertTrue("only one message made it through", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalEnqueueCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
1: 
1:     private Connection createConnection() throws Exception {
1:         String connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:         cf.setWatchTopicAdvisories(false);
1:         return cf.createConnection();
1:     }
1: 
1:     public void startBroker(boolean forceRollbackOnAsyncSendException) throws Exception {
1:         brokerService = createBroker(forceRollbackOnAsyncSendException);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     protected BrokerService createBroker(boolean forceRollbackOnAsyncSendException) throws Exception {
1:         BrokerService answer = new BrokerService();
1: 
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.setAdvisorySupport(false);
1:         answer.setRollbackOnlyOnAsyncException(forceRollbackOnAsyncSendException);
1: 
1:         answer.addConnector("tcp://0.0.0.0:0");
1: 
1:         answer.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:                         if (ack.isStandardAck()) {
1:                             throw new RuntimeException("no way, won't allow any standard ack");
1:                         }
1:                         super.acknowledge(consumerExchange, ack);
1:                     }
1: 
1:                     @Override
1:                     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:                         if (sendAttempts.incrementAndGet() > 1) {
1:                             throw new RuntimeException("no way, won't accept any messages");
1:                         }
1:                         super.send(producerExchange, messageSend);
1:                     }
1:                 }
1:         });
1: 
1:         return answer;
1:     }
1: 
1: }
============================================================================