1:5a5056e: /**
1:5a5056e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a5056e:  * contributor license agreements.  See the NOTICE file distributed with
1:5a5056e:  * this work for additional information regarding copyright ownership.
1:5a5056e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a5056e:  * (the "License"); you may not use this file except in compliance with
1:5a5056e:  * the License.  You may obtain a copy of the License at
3:5a5056e:  *
1:5a5056e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:5a5056e:  * Unless required by applicable law or agreed to in writing, software
1:5a5056e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a5056e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a5056e:  * See the License for the specific language governing permissions and
1:5a5056e:  * limitations under the License.
1:5a5056e:  */
1:5a5056e: package org.apache.activemq.web;
2:5a5056e: 
1:5a5056e: import java.util.LinkedList;
1:5a5056e: 
1:5a5056e: import javax.jms.Connection;
1:5a5056e: import javax.jms.ConnectionFactory;
1:5a5056e: import javax.jms.JMSException;
1:5a5056e: import javax.jms.Session;
1:5a5056e: 
1:be37064: import org.apache.activemq.ActiveMQSession;
1:be37064: import org.slf4j.Logger;
1:be37064: import org.slf4j.LoggerFactory;
1:be37064: 
1:5a5056e: /**
1:5a5056e:  * A simple pool of JMS Session objects intended for use by Queue browsers.
1:5a5056e:  */
1:5a5056e: public class SessionPool {
1:5a5056e: 
1:be37064:     private static final Logger LOG = LoggerFactory.getLogger(SessionPool.class);
1:be37064: 
1:5a5056e:     private ConnectionFactory connectionFactory;
1:5a5056e:     private Connection connection;
1:03c7988:     private final LinkedList<Session> sessions = new LinkedList<Session>();
1:5a5056e: 
1:5a5056e:     public Connection getConnection() throws JMSException {
1:5a5056e:         if (checkConnection()) {
2:5a5056e:             return connection;
1:5a5056e:         }
1:5a5056e: 
1:5a5056e:         synchronized (this) {
1:03c7988:             try {
1:03c7988:                 connection = getConnectionFactory().createConnection();
1:03c7988:                 connection.start();
1:03c7988:                 return connection;
1:03c7988:             } catch (JMSException jmsEx) {
1:03c7988:                 LOG.debug("Caught exception while attempting to get a new Connection.", jmsEx);
1:03c7988:                 connection.close();
1:03c7988:                 connection = null;
1:03c7988:                 throw jmsEx;
1:03c7988:             }
1:5a5056e:         }
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     private boolean checkConnection() {
1:5a5056e:         if (connection == null) {
1:5a5056e:             return false;
1:5a5056e:         }
1:5a5056e: 
1:5a5056e:         try {
1:5a5056e:             connection.getMetaData();
1:5a5056e:             return true;
1:5a5056e:         } catch (JMSException e) {
1:5a5056e:             return false;
1:5a5056e:         }
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setConnection(Connection connection) {
1:5a5056e:         this.connection = connection;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public ConnectionFactory getConnectionFactory() {
1:5a5056e:         if (connectionFactory == null) {
1:5a5056e:             throw new IllegalStateException("No ConnectionFactory has been set for the session pool");
1:5a5056e:         }
1:5a5056e:         return connectionFactory;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:5a5056e:         this.connectionFactory = connectionFactory;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public Session borrowSession() throws JMSException {
1:5a5056e:         Session answer = null;
1:5a5056e:         synchronized (sessions) {
1:5a5056e:             if (sessions.isEmpty()) {
1:be37064:                 LOG.trace("Creating a new session.");
1:5a5056e:                 answer = createSession();
1:5a5056e:             } else {
1:be37064:                 LOG.trace("Serving session from the pool.");
1:5a5056e:                 answer = sessions.removeLast();
1:5a5056e:             }
1:5a5056e:         }
1:5a5056e:         return answer;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void returnSession(Session session) {
1:be37064:         if (session != null && !((ActiveMQSession) session).isClosed()) {
1:5a5056e:             synchronized (sessions) {
1:be37064:                 LOG.trace("Returning session to the pool.");
1:5a5056e:                 sessions.add(session);
1:5a5056e:             }
1:be37064:         } else {
1:be37064:             LOG.debug("Session closed or null, not returning to the pool.");
1:5a5056e:         }
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     protected Session createSession() throws JMSException {
1:5a5056e:         return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5a5056e:     }
1:5a5056e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:03c7988
/////////////////////////////////////////////////////////////////////////
1:     private final LinkedList<Session> sessions = new LinkedList<Session>();
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 connection = getConnectionFactory().createConnection();
1:                 connection.start();
1:                 return connection;
1:             } catch (JMSException jmsEx) {
1:                 LOG.debug("Caught exception while attempting to get a new Connection.", jmsEx);
1:                 connection.close();
1:                 connection = null;
1:                 throw jmsEx;
1:             }
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:be37064
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(SessionPool.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Creating a new session.");
1:                 LOG.trace("Serving session from the pool.");
/////////////////////////////////////////////////////////////////////////
1:         if (session != null && !((ActiveMQSession) session).isClosed()) {
1:                 LOG.trace("Returning session to the pool.");
1:         } else {
1:             LOG.debug("Session closed or null, not returning to the pool.");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import java.util.LinkedList;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: /**
1:  * A simple pool of JMS Session objects intended for use by Queue browsers.
1:  * 
0:  * @version $Revision$
1:  */
1: public class SessionPool {
1: 
1:     private ConnectionFactory connectionFactory;
1:     private Connection connection;
0:     private LinkedList<Session> sessions = new LinkedList<Session>();
1: 
1:     public Connection getConnection() throws JMSException {
1:         if (checkConnection()) {
1:             return connection;
1:         }
1: 
1:         synchronized (this) {
0:             connection = getConnectionFactory().createConnection();
0:             connection.start();
1:             return connection;
1:         }
1:     }
1: 
1:     private boolean checkConnection() {
1:         if (connection == null) {
1:             return false;
1:         }
1: 
1:         try {
1:             connection.getMetaData();
1:             return true;
1:         } catch (JMSException e) {
1:             return false;
1:         }
1:     }
1: 
1:     public void setConnection(Connection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     public ConnectionFactory getConnectionFactory() {
1:         if (connectionFactory == null) {
1:             throw new IllegalStateException("No ConnectionFactory has been set for the session pool");
1:         }
1:         return connectionFactory;
1:     }
1: 
1:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     public Session borrowSession() throws JMSException {
1:         Session answer = null;
1:         synchronized (sessions) {
1:             if (sessions.isEmpty()) {
1:                 answer = createSession();
1:             } else {
1:                 answer = sessions.removeLast();
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     public void returnSession(Session session) {
0:         if (session != null) {
1:             synchronized (sessions) {
1:                 sessions.add(session);
1:             }
1:         }
1:     }
1: 
1:     protected Session createSession() throws JMSException {
1:         return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1: }
============================================================================