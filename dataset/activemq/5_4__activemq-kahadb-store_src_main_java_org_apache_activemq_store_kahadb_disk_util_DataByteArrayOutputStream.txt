1:946e62d: /*
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:1aab71b: 
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.io.OutputStream;
1:456a2ba: import java.io.UTFDataFormatException;
1:456a2ba: 
1:946e62d: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:946e62d: import org.apache.activemq.util.ByteSequence;
1:172c290: import org.apache.activemq.util.MarshallingSupport;
1:456a2ba: 
2:456a2ba: /**
1:456a2ba:  * Optimized ByteArrayOutputStream
1:456a2ba:  */
1:946e62d: public class DataByteArrayOutputStream extends OutputStream implements DataOutput, AutoCloseable {
1:199c683:     private static final int DEFAULT_SIZE = PageFile.DEFAULT_PAGE_SIZE;
1:456a2ba:     protected byte buf[];
1:456a2ba:     protected int pos;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Creates a new byte array output stream, with a buffer capacity of the
1:456a2ba:      * specified size, in bytes.
1:0bbc0ac:      *
1:456a2ba:      * @param size the initial size.
1:456a2ba:      * @exception IllegalArgumentException if size is negative.
1:456a2ba:      */
1:456a2ba:     public DataByteArrayOutputStream(int size) {
1:456a2ba:         if (size < 0) {
1:456a2ba:             throw new IllegalArgumentException("Invalid size: " + size);
7:456a2ba:         }
1:456a2ba:         buf = new byte[size];
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Creates a new byte array output stream.
1:456a2ba:      */
1:456a2ba:     public DataByteArrayOutputStream() {
1:456a2ba:         this(DEFAULT_SIZE);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * start using a fresh byte array
1:456a2ba:      *
1:456a2ba:      * @param size
1:456a2ba:      */
1:456a2ba:     public void restart(int size) {
1:456a2ba:         buf = new byte[size];
1:456a2ba:         pos = 0;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * start using a fresh byte array
1:456a2ba:      */
1:456a2ba:     public void restart() {
1:456a2ba:         restart(DEFAULT_SIZE);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Get a ByteSequence from the stream
1:456a2ba:      *
1:456a2ba:      * @return the byte sequence
1:456a2ba:      */
1:456a2ba:     public ByteSequence toByteSequence() {
1:456a2ba:         return new ByteSequence(buf, 0, pos);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Writes the specified byte to this byte array output stream.
1:456a2ba:      *
1:456a2ba:      * @param b the byte to be written.
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:946e62d:     @Override
1:456a2ba:     public void write(int b) throws IOException {
1:456a2ba:         int newcount = pos + 1;
1:456a2ba:         ensureEnoughBuffer(newcount);
1:456a2ba:         buf[pos] = (byte)b;
1:456a2ba:         pos = newcount;
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Writes <code>len</code> bytes from the specified byte array starting at
1:456a2ba:      * offset <code>off</code> to this byte array output stream.
1:456a2ba:      *
1:456a2ba:      * @param b the data.
1:456a2ba:      * @param off the start offset in the data.
1:456a2ba:      * @param len the number of bytes to write.
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:946e62d:     @Override
1:456a2ba:     public void write(byte b[], int off, int len) throws IOException {
1:456a2ba:         if (len == 0) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         int newcount = pos + len;
1:456a2ba:         ensureEnoughBuffer(newcount);
1:456a2ba:         System.arraycopy(b, off, buf, pos, len);
1:456a2ba:         pos = newcount;
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return the underlying byte[] buffer
1:456a2ba:      */
1:456a2ba:     public byte[] getData() {
1:456a2ba:         return buf;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * reset the output stream
1:456a2ba:      */
1:456a2ba:     public void reset() {
1:456a2ba:         pos = 0;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Set the current position for writing
1:456a2ba:      *
1:456a2ba:      * @param offset
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     public void position(int offset) throws IOException {
1:456a2ba:         ensureEnoughBuffer(offset);
1:456a2ba:         pos = offset;
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int size() {
1:456a2ba:         return pos;
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeBoolean(boolean v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 1);
1:456a2ba:         buf[pos++] = (byte)(v ? 1 : 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeByte(int v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 1);
1:456a2ba:         buf[pos++] = (byte)(v >>> 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeShort(int v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 2);
1:456a2ba:         buf[pos++] = (byte)(v >>> 8);
1:456a2ba:         buf[pos++] = (byte)(v >>> 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeChar(int v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 2);
1:456a2ba:         buf[pos++] = (byte)(v >>> 8);
1:456a2ba:         buf[pos++] = (byte)(v >>> 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeInt(int v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 4);
1:456a2ba:         buf[pos++] = (byte)(v >>> 24);
1:456a2ba:         buf[pos++] = (byte)(v >>> 16);
1:456a2ba:         buf[pos++] = (byte)(v >>> 8);
1:456a2ba:         buf[pos++] = (byte)(v >>> 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeLong(long v) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + 8);
1:456a2ba:         buf[pos++] = (byte)(v >>> 56);
1:456a2ba:         buf[pos++] = (byte)(v >>> 48);
1:456a2ba:         buf[pos++] = (byte)(v >>> 40);
1:456a2ba:         buf[pos++] = (byte)(v >>> 32);
1:456a2ba:         buf[pos++] = (byte)(v >>> 24);
1:456a2ba:         buf[pos++] = (byte)(v >>> 16);
1:456a2ba:         buf[pos++] = (byte)(v >>> 8);
1:456a2ba:         buf[pos++] = (byte)(v >>> 0);
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeFloat(float v) throws IOException {
1:456a2ba:         writeInt(Float.floatToIntBits(v));
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeDouble(double v) throws IOException {
1:456a2ba:         writeLong(Double.doubleToLongBits(v));
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeBytes(String s) throws IOException {
1:456a2ba:         int length = s.length();
1:456a2ba:         for (int i = 0; i < length; i++) {
1:456a2ba:             write((byte)s.charAt(i));
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void writeChars(String s) throws IOException {
1:456a2ba:         int length = s.length();
1:456a2ba:         for (int i = 0; i < length; i++) {
1:456a2ba:             int c = s.charAt(i);
1:456a2ba:             write((c >>> 8) & 0xFF);
1:456a2ba:             write((c >>> 0) & 0xFF);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:172c290:     public void writeUTF(String text) throws IOException {
1:172c290:         long encodedsize = MarshallingSupport.countUTFBytes(text);
1:456a2ba:         if (encodedsize > 65535) {
1:456a2ba:             throw new UTFDataFormatException("encoded string too long: " + encodedsize + " bytes");
1:456a2ba:         }
1:172c290:         ensureEnoughBuffer((int)(pos + encodedsize + 2));
1:172c290:         writeShort((int)encodedsize);
1:172c290: 
1:172c290:         byte[] buffer = new byte[(int)encodedsize];
1:172c290:         MarshallingSupport.writeUTFBytesToBuffer(text, (int) encodedsize, buf, pos);
1:172c290:         pos += encodedsize;
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     private void ensureEnoughBuffer(int newcount) {
1:456a2ba:         if (newcount > buf.length) {
1:456a2ba:             byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
1:456a2ba:             System.arraycopy(buf, 0, newbuf, 0, pos);
1:456a2ba:             buf = newbuf;
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * This method is called after each write to the buffer.  This should allow subclasses
1:456a2ba:      * to take some action based on the writes, for example flushing data to an external system based on size.
1:456a2ba:      */
1:456a2ba:     protected void onWrite() throws IOException {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void skip(int size) throws IOException {
1:456a2ba:         ensureEnoughBuffer(pos + size);
1:456a2ba:         pos+=size;
1:456a2ba:         onWrite();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public ByteSequence getByteSequence() {
1:456a2ba:         return new ByteSequence(buf, 0, pos);
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:172c290
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:     public void writeUTF(String text) throws IOException {
1:         long encodedsize = MarshallingSupport.countUTFBytes(text);
1:         ensureEnoughBuffer((int)(pos + encodedsize + 2));
1:         writeShort((int)encodedsize);
1: 
1:         byte[] buffer = new byte[(int)encodedsize];
1:         MarshallingSupport.writeUTFBytesToBuffer(text, (int) encodedsize, buf, pos);
1:         pos += encodedsize;
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.util.ByteSequence;
1: public class DataByteArrayOutputStream extends OutputStream implements DataOutput, AutoCloseable {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
1: 
0: import org.apache.activemq.store.kahadb.disk.page.PageFile;
0: import org.apache.activemq.util.ByteSequence;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.UTFDataFormatException;
1: 
1: /**
1:  * Optimized ByteArrayOutputStream
1:  * 
0:  * @version $Revision$
1:  */
0: public class DataByteArrayOutputStream extends OutputStream implements DataOutput {
0:     private static final int DEFAULT_SIZE = 2048;
1:     protected byte buf[];
1:     protected int pos;
1: 
1:     /**
1:      * Creates a new byte array output stream, with a buffer capacity of the
1:      * specified size, in bytes.
1:      * 
1:      * @param size the initial size.
1:      * @exception IllegalArgumentException if size is negative.
1:      */
1:     public DataByteArrayOutputStream(int size) {
1:         if (size < 0) {
1:             throw new IllegalArgumentException("Invalid size: " + size);
1:         }
1:         buf = new byte[size];
1:     }
1: 
1:     /**
1:      * Creates a new byte array output stream.
1:      */
1:     public DataByteArrayOutputStream() {
1:         this(DEFAULT_SIZE);
1:     }
1: 
1:     /**
1:      * start using a fresh byte array
1:      * 
1:      * @param size
1:      */
1:     public void restart(int size) {
1:         buf = new byte[size];
1:         pos = 0;
1:     }
1: 
1:     /**
1:      * start using a fresh byte array
1:      */
1:     public void restart() {
1:         restart(DEFAULT_SIZE);
1:     }
1: 
1:     /**
1:      * Get a ByteSequence from the stream
1:      * 
1:      * @return the byte sequence
1:      */
1:     public ByteSequence toByteSequence() {
1:         return new ByteSequence(buf, 0, pos);
1:     }
1: 
1:     /**
1:      * Writes the specified byte to this byte array output stream.
1:      * 
1:      * @param b the byte to be written.
1:      * @throws IOException 
1:      */
1:     public void write(int b) throws IOException {
1:         int newcount = pos + 1;
1:         ensureEnoughBuffer(newcount);
1:         buf[pos] = (byte)b;
1:         pos = newcount;
1:         onWrite();
1:     }
1: 
1:     /**
1:      * Writes <code>len</code> bytes from the specified byte array starting at
1:      * offset <code>off</code> to this byte array output stream.
1:      * 
1:      * @param b the data.
1:      * @param off the start offset in the data.
1:      * @param len the number of bytes to write.
1:      * @throws IOException 
1:      */
1:     public void write(byte b[], int off, int len) throws IOException {
1:         if (len == 0) {
1:             return;
1:         }
1:         int newcount = pos + len;
1:         ensureEnoughBuffer(newcount);
1:         System.arraycopy(b, off, buf, pos, len);
1:         pos = newcount;
1:         onWrite();
1:     }
1: 
1:     /**
1:      * @return the underlying byte[] buffer
1:      */
1:     public byte[] getData() {
1:         return buf;
1:     }
1: 
1:     /**
1:      * reset the output stream
1:      */
1:     public void reset() {
1:         pos = 0;
1:     }
1: 
1:     /**
1:      * Set the current position for writing
1:      * 
1:      * @param offset
1:      * @throws IOException 
1:      */
1:     public void position(int offset) throws IOException {
1:         ensureEnoughBuffer(offset);
1:         pos = offset;
1:         onWrite();
1:     }
1: 
1:     public int size() {
1:         return pos;
1:     }
1: 
1:     public void writeBoolean(boolean v) throws IOException {
1:         ensureEnoughBuffer(pos + 1);
1:         buf[pos++] = (byte)(v ? 1 : 0);
1:         onWrite();
1:     }
1: 
1:     public void writeByte(int v) throws IOException {
1:         ensureEnoughBuffer(pos + 1);
1:         buf[pos++] = (byte)(v >>> 0);
1:         onWrite();
1:     }
1: 
1:     public void writeShort(int v) throws IOException {
1:         ensureEnoughBuffer(pos + 2);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:         onWrite();
1:     }
1: 
1:     public void writeChar(int v) throws IOException {
1:         ensureEnoughBuffer(pos + 2);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:         onWrite();
1:     }
1: 
1:     public void writeInt(int v) throws IOException {
1:         ensureEnoughBuffer(pos + 4);
1:         buf[pos++] = (byte)(v >>> 24);
1:         buf[pos++] = (byte)(v >>> 16);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:         onWrite();
1:     }
1: 
1:     public void writeLong(long v) throws IOException {
1:         ensureEnoughBuffer(pos + 8);
1:         buf[pos++] = (byte)(v >>> 56);
1:         buf[pos++] = (byte)(v >>> 48);
1:         buf[pos++] = (byte)(v >>> 40);
1:         buf[pos++] = (byte)(v >>> 32);
1:         buf[pos++] = (byte)(v >>> 24);
1:         buf[pos++] = (byte)(v >>> 16);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:         onWrite();
1:     }
1: 
1:     public void writeFloat(float v) throws IOException {
1:         writeInt(Float.floatToIntBits(v));
1:     }
1: 
1:     public void writeDouble(double v) throws IOException {
1:         writeLong(Double.doubleToLongBits(v));
1:     }
1: 
1:     public void writeBytes(String s) throws IOException {
1:         int length = s.length();
1:         for (int i = 0; i < length; i++) {
1:             write((byte)s.charAt(i));
1:         }
1:     }
1: 
1:     public void writeChars(String s) throws IOException {
1:         int length = s.length();
1:         for (int i = 0; i < length; i++) {
1:             int c = s.charAt(i);
1:             write((c >>> 8) & 0xFF);
1:             write((c >>> 0) & 0xFF);
1:         }
1:     }
1: 
0:     public void writeUTF(String str) throws IOException {
0:         int strlen = str.length();
0:         int encodedsize = 0;
0:         int c;
0:         for (int i = 0; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if ((c >= 0x0001) && (c <= 0x007F)) {
0:                 encodedsize++;
0:             } else if (c > 0x07FF) {
0:                 encodedsize += 3;
0:             } else {
0:                 encodedsize += 2;
1:             }
1:         }
1:         if (encodedsize > 65535) {
1:             throw new UTFDataFormatException("encoded string too long: " + encodedsize + " bytes");
1:         }
0:         ensureEnoughBuffer(pos + encodedsize + 2);
0:         writeShort(encodedsize);
0:         int i = 0;
0:         for (i = 0; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if (!((c >= 0x0001) && (c <= 0x007F))) {
0:                 break;
1:             }
0:             buf[pos++] = (byte)c;
1:         }
0:         for (; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if ((c >= 0x0001) && (c <= 0x007F)) {
0:                 buf[pos++] = (byte)c;
0:             } else if (c > 0x07FF) {
0:                 buf[pos++] = (byte)(0xE0 | ((c >> 12) & 0x0F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 6) & 0x3F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 0) & 0x3F));
0:             } else {
0:                 buf[pos++] = (byte)(0xC0 | ((c >> 6) & 0x1F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 0) & 0x3F));
1:             }
1:         }
1:         onWrite();
1:     }
1: 
1:     private void ensureEnoughBuffer(int newcount) {
1:         if (newcount > buf.length) {
1:             byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
1:             System.arraycopy(buf, 0, newbuf, 0, pos);
1:             buf = newbuf;
1:         }
1:     }
1:     
1:     /**
1:      * This method is called after each write to the buffer.  This should allow subclasses 
1:      * to take some action based on the writes, for example flushing data to an external system based on size. 
1:      */
1:     protected void onWrite() throws IOException {
1:     }
1: 
1:     public void skip(int size) throws IOException {
1:         ensureEnoughBuffer(pos + size);
1:         pos+=size;
1:         onWrite();
1:     }
1: 
1:     public ByteSequence getByteSequence() {
1:         return new ByteSequence(buf, 0, pos);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:199c683
/////////////////////////////////////////////////////////////////////////
0: import org.apache.kahadb.page.PageFile;
0: 
0:  *
0:  *
1:     private static final int DEFAULT_SIZE = PageFile.DEFAULT_PAGE_SIZE;
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < strlen; i++) {
0:             int charValue = str.charAt(i);
0:             if (charValue > 0 && charValue <= 127) {
0:                 buf[pos++] = (byte) charValue;
0:             } else if (charValue <= 2047) {
0:                 buf[pos++] = (byte) (0xc0 | (0x1f & (charValue >> 6)));
0:                 buf[pos++] = (byte) (0x80 | (0x3f & charValue));
0:                 buf[pos++] = (byte) (0xe0 | (0x0f & (charValue >> 12)));
0:                 buf[pos++] = (byte) (0x80 | (0x3f & (charValue >> 6)));
0:                 buf[pos++] = (byte) (0x80 | (0x3f & charValue));
0:              }
/////////////////////////////////////////////////////////////////////////
0: 
0:      * This method is called after each write to the buffer.  This should allow subclasses
0:      * to take some action based on the writes, for example flushing data to an external system based on size.
============================================================================