1:60bcc52: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d754e76:  *
1:d754e76:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d754e76:  *
1:d754e76:  * Unless required by applicable law or agreed to in writing, software
1:d754e76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d754e76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d754e76:  * See the License for the specific language governing permissions and
1:d754e76:  * limitations under the License.
1:d754e76:  */
1:d754e76: package org.apache.activemq.web;
12:d754e76: 
1:87f75b2: import java.io.IOException;
1:60bcc52: import java.io.PrintWriter;
1:87f75b2: import java.util.Enumeration;
1:87f75b2: import java.util.HashMap;
1:87f75b2: import java.util.Map;
1:d754e76: 
1:d754e76: import javax.jms.JMSException;
1:60bcc52: import javax.jms.Message;
1:d754e76: import javax.jms.Queue;
1:d754e76: import javax.jms.QueueBrowser;
1:d754e76: import javax.jms.Session;
1:d754e76: import javax.servlet.ServletException;
1:d754e76: import javax.servlet.http.HttpServlet;
1:d754e76: import javax.servlet.http.HttpServletRequest;
1:d754e76: import javax.servlet.http.HttpServletResponse;
1:d754e76: 
1:88acb0e: import org.apache.activemq.util.FactoryFinder;
1:87f75b2: import org.apache.activemq.util.IntrospectionSupport;
1:87f75b2: import org.apache.activemq.web.view.MessageRenderer;
1:60bcc52: import org.apache.activemq.web.view.XmlMessageRenderer;
1:d754e76: 
1:5f1adbe: /**
1:d754e76:  * Renders the contents of a queue using some kind of view. The URI is assumed
1:d754e76:  * to be the queue. The following parameters can be used
1:60bcc52:  * <p/>
1:d754e76:  * <ul>
1:d754e76:  * <li>view - specifies the type of the view such as simple, xml, rss</li>
1:d754e76:  * <li>selector - specifies the SQL 92 selector to apply to the queue</li>
1:d754e76:  * </ul>
1:b0c2a40:  *
1:60bcc52:  * 
1:d754e76:  */
1:d754e76: public class QueueBrowseServlet extends HttpServlet {
1:d754e76:     private static FactoryFinder factoryFinder = new FactoryFinder("META-INF/services/org/apache/activemq/web/view/");
1:d754e76: 
1:d754e76:     // Implementation methods
1:d754e76:     // -------------------------------------------------------------------------
1:d754e76:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:d754e76:         try {
1:60bcc52:             WebClient client = WebClient.getWebClient(request);
1:60bcc52:             Session session = client.getSession();
1:d754e76:             Queue queue = getQueue(request, session);
1:d754e76:             if (queue == null) {
1:d754e76:                 throw new ServletException("No queue URI specified");
1:2d3106f:             }
1:60bcc52: 
1:60bcc52:             String msgId = request.getParameter("msgId");
1:60bcc52:             if (msgId == null) {
1:60bcc52:                 MessageRenderer renderer = getMessageRenderer(request);
1:60bcc52:                 configureRenderer(request, renderer);
1:60bcc52: 
1:60bcc52:                 String selector = getSelector(request);
1:60bcc52:                 QueueBrowser browser = session.createBrowser(queue, selector);
1:60bcc52:                 renderer.renderMessages(request, response, browser);
1:60bcc52:             }
1:60bcc52:             else {
1:60bcc52:                 XmlMessageRenderer renderer = new XmlMessageRenderer();
1:60bcc52:                 QueueBrowser browser = session.createBrowser(queue, "JMSMessageID='" + msgId + "'");
1:60bcc52:                 if (!browser.getEnumeration().hasMoreElements()) {
1:60bcc52:                     response.sendError(HttpServletResponse.SC_NOT_FOUND);
1:60bcc52:                     return;
1:60bcc52:                 }
1:60bcc52:                 Message message = (Message) browser.getEnumeration().nextElement();
1:60bcc52: 
1:60bcc52:                 PrintWriter writer = response.getWriter();
1:60bcc52:                 renderer.renderMessage(writer, request, response, browser, message);
1:60bcc52:                 writer.flush();
1:60bcc52:             }
1:60bcc52:         }
1:60bcc52:         catch (JMSException e) {
1:d754e76:             throw new ServletException(e);
1:2d3106f:         }
22:d754e76:     }
1:d754e76: 
1:d754e76:     protected MessageRenderer getMessageRenderer(HttpServletRequest request) throws IOException, ServletException {
1:d754e76:         String style = request.getParameter("view");
1:d754e76:         if (style == null) {
1:d754e76:             style = "simple";
1:d754e76:         }
1:d754e76:         try {
1:60bcc52:             return (MessageRenderer) factoryFinder.newInstance(style);
1:60bcc52:         }
1:60bcc52:         catch (IllegalAccessException e) {
1:d754e76:             throw new NoSuchViewStyleException(style, e);
1:60bcc52:         }
1:60bcc52:         catch (InstantiationException e) {
1:d754e76:             throw new NoSuchViewStyleException(style, e);
1:60bcc52:         }
1:60bcc52:         catch (ClassNotFoundException e) {
1:d754e76:             throw new NoSuchViewStyleException(style, e);
1:d754e76:         }
1:d754e76:     }
1:d754e76: 
1:60bcc52:     @SuppressWarnings("unchecked")
1:d754e76:     protected void configureRenderer(HttpServletRequest request, MessageRenderer renderer) {
1:540dd5c:         Map<String, String> properties = new HashMap<String, String>();
1:60bcc52:         for (Enumeration<String> iter = request.getParameterNames(); iter.hasMoreElements();) {
1:60bcc52:             String name = (String) iter.nextElement();
1:d754e76:             properties.put(name, request.getParameter(name));
1:d754e76:         }
1:d754e76:         IntrospectionSupport.setProperties(renderer, properties);
1:d754e76:     }
1:d754e76: 
1:d754e76:     protected String getSelector(HttpServletRequest request) {
1:d754e76:         return request.getParameter("selector");
1:d754e76:     }
1:d754e76: 
1:d754e76:     protected Queue getQueue(HttpServletRequest request, Session session) throws JMSException {
1:d754e76:         String uri = request.getPathInfo();
1:540dd5c:         if (uri == null) {
1:d754e76:             return null;
1:540dd5c:         }
1:d754e76: 
1:d754e76:         // replace URI separator with JMS destination separator
1:d754e76:         if (uri.startsWith("/")) {
1:d754e76:             uri = uri.substring(1);
1:540dd5c:             if (uri.length() == 0) {
1:d754e76:                 return null;
1:540dd5c:             }
1:d754e76:         }
1:d754e76:         uri = uri.replace('/', '.');
1:d754e76: 
1:d754e76:         return session.createQueue(uri);
1:d754e76:     }
1:d754e76: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0: // TODO Why do we implement our own session pool?
0: // TODO This doesn't work, since nobody will be setting the connection factory
0: // (because nobody is able to). Just use the WebClient?
0:     private LinkedList<Session> sessions = new LinkedList<Session>();
/////////////////////////////////////////////////////////////////////////
0:             } else {
/////////////////////////////////////////////////////////////////////////
0:         } catch (JMSException e) {
0:         } finally {
/////////////////////////////////////////////////////////////////////////
0:             return (MessageRenderer)factoryFinder.newInstance(style);
0:         } catch (IllegalAccessException e) {
0:         } catch (InstantiationException e) {
0:         } catch (ClassNotFoundException e) {
1:         Map<String, String> properties = new HashMap<String, String>();
0:         for (Enumeration iter = request.getParameterNames(); iter.hasMoreElements();) {
0:             String name = (String)iter.nextElement();
/////////////////////////////////////////////////////////////////////////
0:             } else {
0:                 answer = sessions.removeLast();
/////////////////////////////////////////////////////////////////////////
1:         if (uri == null) {
1:         }
1:             if (uri.length() == 0) {
1:             }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
1: /**
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.FactoryFinder;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:60bcc52
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.web.view.XmlMessageRenderer;
1:  * <p/>
1:  *
1:             WebClient client = WebClient.getWebClient(request);
1:             Session session = client.getSession();
1: 
1:             String msgId = request.getParameter("msgId");
1:             if (msgId == null) {
1:                 MessageRenderer renderer = getMessageRenderer(request);
1:                 configureRenderer(request, renderer);
1: 
1:                 String selector = getSelector(request);
1:                 QueueBrowser browser = session.createBrowser(queue, selector);
1:                 renderer.renderMessages(request, response, browser);
1:             }
1:             else {
1:                 XmlMessageRenderer renderer = new XmlMessageRenderer();
1:                 QueueBrowser browser = session.createBrowser(queue, "JMSMessageID='" + msgId + "'");
1:                 if (!browser.getEnumeration().hasMoreElements()) {
1:                     response.sendError(HttpServletResponse.SC_NOT_FOUND);
1:                     return;
1:                 }
1:                 Message message = (Message) browser.getEnumeration().nextElement();
1: 
1:                 PrintWriter writer = response.getWriter();
1:                 renderer.renderMessage(writer, request, response, browser, message);
1:                 writer.flush();
1:             }
1:         }
1:         catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:             return (MessageRenderer) factoryFinder.newInstance(style);
1:         }
1:         catch (IllegalAccessException e) {
1:         }
1:         catch (InstantiationException e) {
1:         }
1:         catch (ClassNotFoundException e) {
1:     @SuppressWarnings("unchecked")
1:         for (Enumeration<String> iter = request.getParameterNames(); iter.hasMoreElements();) {
1:             String name = (String) iter.nextElement();
/////////////////////////////////////////////////////////////////////////
commit:2d3106f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:             String uri = getServletContext().getInitParameter("org.apache.activemq.brokerURL");
0:             if (uri != null) {
0:                 connectionFactory = new ActiveMQConnectionFactory(uri);
1:             }
0:             else {
0:                 throw new IllegalStateException("missing ConnectionFactory in QueueBrowserServlet");
1:             }
commit:87f75b2
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Enumeration;
1: import java.util.HashMap;
0: import java.util.LinkedList;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.FactoryFinder;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.web.view.MessageRenderer;
/////////////////////////////////////////////////////////////////////////
0: //TODO Why do we implement our own session pool?
0: //TODO This doesn't work, since nobody will be setting the connection factory (because nobody is able to). Just use the WebClient?
/////////////////////////////////////////////////////////////////////////
0:         	throw new IllegalStateException("missing ConnectionFactory in QueueBrowserServlet");
commit:d754e76
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import org.apache.activeio.util.FactoryFinder;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.web.view.MessageRenderer;
1: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
0: import java.io.IOException;
0: import java.util.Enumeration;
0: import java.util.HashMap;
0: import java.util.LinkedList;
0: import java.util.Map;
1: 
0: /**
1:  * Renders the contents of a queue using some kind of view. The URI is assumed
1:  * to be the queue. The following parameters can be used
1:  * 
1:  * <ul>
1:  * <li>view - specifies the type of the view such as simple, xml, rss</li>
1:  * <li>selector - specifies the SQL 92 selector to apply to the queue</li>
1:  * </ul>
1:  * 
0:  * @version $Revision: $
1:  */
1: public class QueueBrowseServlet extends HttpServlet {
1: 
1:     private static FactoryFinder factoryFinder = new FactoryFinder("META-INF/services/org/apache/activemq/web/view/");
1: 
0:     private ConnectionFactory connectionFactory;
0:     private Connection connection;
0:     private LinkedList sessions = new LinkedList();
1: 
0:     public Connection getConnection() throws JMSException {
0:         if (connection == null) {
0:             connection = getConnectionFactory().createConnection();
0:             connection.start();
1:         }
0:         return connection;
1:     }
1: 
0:     public void setConnection(Connection connection) {
0:         this.connection = connection;
1:     }
1: 
0:     public ConnectionFactory getConnectionFactory() {
0:         if (connectionFactory == null) {
0:             // TODO support remote brokers too
0:             connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         }
0:         return connectionFactory;
1:     }
1: 
0:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
0:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
0:         Session session = null;
1:         try {
0:             session = borrowSession();
1:             Queue queue = getQueue(request, session);
1:             if (queue == null) {
1:                 throw new ServletException("No queue URI specified");
1:             }
0:             String selector = getSelector(request);
0:             QueueBrowser browser = session.createBrowser(queue, selector);
0:             MessageRenderer renderer = getMessageRenderer(request);
0:             configureRenderer(request, renderer);
0:             renderer.renderMessages(request, response, browser);
1:         }
0:         catch (JMSException e) {
1:             throw new ServletException(e);
1:         }
0:         finally {
0:             returnSession(session);
1:         }
1:     }
1: 
1:     protected MessageRenderer getMessageRenderer(HttpServletRequest request) throws IOException, ServletException {
1:         String style = request.getParameter("view");
1:         if (style == null) {
1:             style = "simple";
1:         }
1:         try {
0:             return (MessageRenderer) factoryFinder.newInstance(style);
1:         }
0:         catch (IllegalAccessException e) {
1:             throw new NoSuchViewStyleException(style, e);
1:         }
0:         catch (InstantiationException e) {
1:             throw new NoSuchViewStyleException(style, e);
1:         }
0:         catch (ClassNotFoundException e) {
1:             throw new NoSuchViewStyleException(style, e);
1:         }
1:     }
1: 
1:     protected void configureRenderer(HttpServletRequest request, MessageRenderer renderer) {
0:         Map properties = new HashMap();
0:         for (Enumeration iter = request.getParameterNames(); iter.hasMoreElements(); ) {
0:             String name = (String) iter.nextElement();
1:             properties.put(name, request.getParameter(name));
1:         }
1:         IntrospectionSupport.setProperties(renderer, properties);
1:     }
1: 
0:     protected Session borrowSession() throws JMSException {
0:         Session answer = null;
0:         synchronized (sessions) {
0:             if (sessions.isEmpty()) {
0:                 answer = createSession();
1:             }
0:             else {
0:                 answer = (Session) sessions.removeLast();
1:             }
1:         }
0:         return answer;
1:     }
1: 
0:     protected void returnSession(Session session) {
0:         if (session != null) {
0:             synchronized (sessions) {
0:                 sessions.add(session);
1:             }
1:         }
1:     }
1: 
0:     protected Session createSession() throws JMSException {
0:         return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected String getSelector(HttpServletRequest request) {
1:         return request.getParameter("selector");
1:     }
1: 
1:     protected Queue getQueue(HttpServletRequest request, Session session) throws JMSException {
1:         String uri = request.getPathInfo();
0:         if (uri == null)
1:             return null;
1: 
1:         // replace URI separator with JMS destination separator
1:         if (uri.startsWith("/")) {
1:             uri = uri.substring(1);
0:             if (uri.length() == 0)
1:                 return null;
1:         }
1:         uri = uri.replace('/', '.');
1: 
0:         System.out.println("destination uri = " + uri);
1: 
1:         return session.createQueue(uri);
1:     }
1: 
1: }
============================================================================