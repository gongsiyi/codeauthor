1:7ca2596: /**
1:7ca2596:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ca2596:  * contributor license agreements.  See the NOTICE file distributed with
1:7ca2596:  * this work for additional information regarding copyright ownership.
1:7ca2596:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ca2596:  * (the "License"); you may not use this file except in compliance with
1:7ca2596:  * the License.  You may obtain a copy of the License at
1:7ca2596:  *
1:7ca2596:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ca2596:  *
1:7ca2596:  * Unless required by applicable law or agreed to in writing, software
1:7ca2596:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ca2596:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ca2596:  * See the License for the specific language governing permissions and
1:7ca2596:  * limitations under the License.
1:7ca2596:  */
1:7ca2596: 
1:7ca2596: package org.apache.activemq.camel.camelplugin;
1:7ca2596: 
1:7ca2596: import org.apache.activemq.ActiveMQConnectionFactory;
1:7ca2596: import org.apache.activemq.broker.BrokerRegistry;
1:7ca2596: import org.apache.activemq.broker.BrokerService;
1:7ca2596: import org.apache.activemq.command.ActiveMQQueue;
1:7ca2596: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:7ca2596: import org.junit.After;
1:7ca2596: import org.junit.Before;
1:7ca2596: import org.junit.Test;
1:7ca2596: import org.springframework.core.io.ClassPathResource;
1:7ca2596: import org.springframework.core.io.FileSystemResource;
1:7ca2596: import org.springframework.core.io.Resource;
1:7ca2596: 
1:7ca2596: import javax.jms.Connection;
1:7ca2596: import javax.jms.MessageConsumer;
1:7ca2596: import javax.jms.MessageListener;
1:7ca2596: import javax.jms.MessageProducer;
1:7ca2596: import javax.jms.Session;
1:7ca2596: import javax.jms.Topic;
1:7ca2596: import java.util.concurrent.CountDownLatch;
1:7ca2596: import java.util.concurrent.TimeUnit;
1:7ca2596: 
1:7ca2596: import static org.junit.Assert.assertEquals;
1:7ca2596: 
1:7ca2596: public class CamelPluginConfigTest {
1:7ca2596: 
1:7ca2596:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/camel/camelplugin/";
1:7ca2596:     protected static final String TOPIC_NAME = "test.topic";
1:7ca2596:     protected static final String QUEUE_NAME = "test.queue";
1:7ca2596: 
1:7ca2596:     protected BrokerService brokerService;
1:7ca2596:     protected ActiveMQConnectionFactory factory;
1:7ca2596:     protected Connection producerConnection;
1:7ca2596:     protected Connection consumerConnection;
1:7ca2596:     protected Session consumerSession;
1:7ca2596:     protected Session producerSession;
1:7ca2596: 
1:7ca2596:     protected int messageCount = 1000;
1:7ca2596:     protected int timeOutInSeconds = 10;
1:7ca2596: 
1:7ca2596:     @Before
1:7ca2596:     public void setUp() throws Exception {
1:7ca2596:         brokerService = createBroker(new FileSystemResource(CONF_ROOT + "camel-routes-activemq.xml"));
1:7ca2596: 
1:7ca2596:         factory = new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:7ca2596:         consumerConnection = factory.createConnection();
1:7ca2596:         consumerConnection.start();
1:7ca2596:         producerConnection = factory.createConnection();
1:7ca2596:         producerConnection.start();
1:7ca2596:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7ca2596: 
1:7ca2596:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     protected BrokerService createBroker(String resource) throws Exception {
1:7ca2596:         return createBroker(new ClassPathResource(resource));
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     protected BrokerService createBroker(Resource resource) throws Exception {
1:7ca2596: 
1:7ca2596:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:7ca2596:         BrokerService broker = factory.createBroker(resource.getURI());
1:7ca2596:         return broker;
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @After
1:7ca2596:     public void tearDown() throws Exception {
1:7ca2596:         if (producerConnection != null) {
1:7ca2596:             producerConnection.close();
1:7ca2596:         }
1:7ca2596:         if (consumerConnection != null) {
1:7ca2596:             consumerConnection.close();
1:7ca2596:         }
1:7ca2596:         if (brokerService != null) {
1:7ca2596:             brokerService.stop();
1:7ca2596:         }
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Test
1:7ca2596:     public void testReRouteAll() throws Exception {
1:7ca2596:         Thread.sleep(2000);
1:7ca2596:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1:7ca2596: 
1:7ca2596:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
1:7ca2596: 
1:7ca2596:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:7ca2596:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:7ca2596:         consumer.setMessageListener(new MessageListener() {
1:7ca2596:             @Override
1:7ca2596:             public void onMessage(javax.jms.Message message) {
1:7ca2596:                 try {
1:7ca2596:                     latch.countDown();
1:7ca2596:                 } catch (Throwable e) {
1:7ca2596:                     e.printStackTrace();
1:7ca2596:                 }
1:7ca2596:             }
1:7ca2596:         });
1:7ca2596:         MessageProducer producer = producerSession.createProducer(topic);
1:7ca2596: 
1:7ca2596:         for (int i = 0; i < messageCount; i++) {
1:7ca2596:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:7ca2596:             producer.send(message);
1:7ca2596:         }
1:7ca2596: 
1:7ca2596:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:7ca2596:         assertEquals(0, latch.getCount());
1:7ca2596: 
1:7ca2596:     }
1:7ca2596: }
============================================================================
author:Rob Davies
-------------------------------------------------------------------------------
commit:7ca2596
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.camel.camelplugin;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.FileSystemResource;
1: import org.springframework.core.io.Resource;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class CamelPluginConfigTest {
1: 
1:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/camel/camelplugin/";
1:     protected static final String TOPIC_NAME = "test.topic";
1:     protected static final String QUEUE_NAME = "test.queue";
1: 
1:     protected BrokerService brokerService;
1:     protected ActiveMQConnectionFactory factory;
1:     protected Connection producerConnection;
1:     protected Connection consumerConnection;
1:     protected Session consumerSession;
1:     protected Session producerSession;
1: 
1:     protected int messageCount = 1000;
1:     protected int timeOutInSeconds = 10;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker(new FileSystemResource(CONF_ROOT + "camel-routes-activemq.xml"));
1: 
1:         factory = new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:         consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1:         producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1: 
1:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:         BrokerService broker = factory.createBroker(resource.getURI());
1:         return broker;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (producerConnection != null) {
1:             producerConnection.close();
1:         }
1:         if (consumerConnection != null) {
1:             consumerConnection.close();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testReRouteAll() throws Exception {
1:         Thread.sleep(2000);
1:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1: 
1:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 try {
1:                     latch.countDown();
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         MessageProducer producer = producerSession.createProducer(topic);
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0, latch.getCount());
1: 
1:     }
1: }
============================================================================