1:c14dc3a: /**
1:c14dc3a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c14dc3a:  * contributor license agreements.  See the NOTICE file distributed with
1:c14dc3a:  * this work for additional information regarding copyright ownership.
1:c14dc3a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c14dc3a:  * (the "License"); you may not use this file except in compliance with
1:c14dc3a:  * the License.  You may obtain a copy of the License at
1:c14dc3a:  *
1:c14dc3a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c14dc3a:  *
1:c14dc3a:  * Unless required by applicable law or agreed to in writing, software
1:c14dc3a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c14dc3a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c14dc3a:  * See the License for the specific language governing permissions and
1:c14dc3a:  * limitations under the License.
1:c14dc3a:  */
1:c14dc3a: package org.apache.activemq;
1:c14dc3a: 
1:c14dc3a: import java.util.ArrayList;
1:c14dc3a: import java.util.LinkedList;
1:c14dc3a: import java.util.List;
1:c14dc3a: import org.apache.activemq.command.MessageDispatch;
1:c14dc3a: 
1:c14dc3a: public class FifoMessageDispatchChannel implements MessageDispatchChannel {
1:c14dc3a: 
1:c14dc3a:     private final Object mutex = new Object();
1:c14dc3a:     private final LinkedList<MessageDispatch> list;
1:c14dc3a:     private boolean closed;
1:c14dc3a:     private boolean running;
1:c14dc3a: 
1:c14dc3a:     public FifoMessageDispatchChannel() {
1:c14dc3a:         this.list = new LinkedList<MessageDispatch>();
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#enqueue(org.apache.activemq.command.MessageDispatch)
1:c14dc3a:      */
1:c14dc3a:     public void enqueue(MessageDispatch message) {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             list.addLast(message);
1:c14dc3a:             mutex.notify();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#enqueueFirst(org.apache.activemq.command.MessageDispatch)
1:c14dc3a:      */
1:c14dc3a:     public void enqueueFirst(MessageDispatch message) {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             list.addFirst(message);
1:c14dc3a:             mutex.notify();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#isEmpty()
1:c14dc3a:      */
1:c14dc3a:     public boolean isEmpty() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             return list.isEmpty();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#dequeue(long)
1:c14dc3a:      */
1:c14dc3a:     public MessageDispatch dequeue(long timeout) throws InterruptedException {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             // Wait until the consumer is ready to deliver messages.
1:c14dc3a:             while (timeout != 0 && !closed && (list.isEmpty() || !running)) {
1:c14dc3a:                 if (timeout == -1) {
1:c14dc3a:                     mutex.wait();
1:c14dc3a:                 } else {
1:c14dc3a:                     mutex.wait(timeout);
1:c14dc3a:                     break;
1:c14dc3a:                 }
1:c14dc3a:             }
1:c14dc3a:             if (closed || !running || list.isEmpty()) {
1:c14dc3a:                 return null;
1:c14dc3a:             }
1:c14dc3a:             return list.removeFirst();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#dequeueNoWait()
1:c14dc3a:      */
1:c14dc3a:     public MessageDispatch dequeueNoWait() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             if (closed || !running || list.isEmpty()) {
1:c14dc3a:                 return null;
1:c14dc3a:             }
1:c14dc3a:             return list.removeFirst();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#peek()
1:c14dc3a:      */
1:c14dc3a:     public MessageDispatch peek() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             if (closed || !running || list.isEmpty()) {
1:c14dc3a:                 return null;
1:c14dc3a:             }
1:c14dc3a:             return list.getFirst();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#start()
1:c14dc3a:      */
1:c14dc3a:     public void start() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             running = true;
1:c14dc3a:             mutex.notifyAll();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#stop()
1:c14dc3a:      */
1:c14dc3a:     public void stop() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             running = false;
1:c14dc3a:             mutex.notifyAll();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#close()
1:c14dc3a:      */
1:c14dc3a:     public void close() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             if (!closed) {
1:c14dc3a:                 running = false;
1:c14dc3a:                 closed = true;
1:c14dc3a:             }
1:c14dc3a:             mutex.notifyAll();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#clear()
1:c14dc3a:      */
1:c14dc3a:     public void clear() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             list.clear();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#isClosed()
1:c14dc3a:      */
1:c14dc3a:     public boolean isClosed() {
1:c14dc3a:         return closed;
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#size()
1:c14dc3a:      */
1:c14dc3a:     public int size() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             return list.size();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#getMutex()
1:c14dc3a:      */
1:c14dc3a:     public Object getMutex() {
1:c14dc3a:         return mutex;
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#isRunning()
1:c14dc3a:      */
1:c14dc3a:     public boolean isRunning() {
1:c14dc3a:         return running;
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     /* (non-Javadoc)
1:c14dc3a:      * @see org.apache.activemq.MessageDispatchChannelI#removeAll()
1:c14dc3a:      */
1:c14dc3a:     public List<MessageDispatch> removeAll() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             ArrayList<MessageDispatch> rc = new ArrayList<MessageDispatch>(list);
1:c14dc3a:             list.clear();
1:c14dc3a:             return rc;
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: 
1:c14dc3a:     @Override
1:c14dc3a:     public String toString() {
1:c14dc3a:         synchronized (mutex) {
1:c14dc3a:             return list.toString();
1:c14dc3a:         }
1:c14dc3a:     }
1:c14dc3a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Robert Davies
-------------------------------------------------------------------------------
commit:c14dc3a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: import org.apache.activemq.command.MessageDispatch;
1: 
1: public class FifoMessageDispatchChannel implements MessageDispatchChannel {
1: 
1:     private final Object mutex = new Object();
1:     private final LinkedList<MessageDispatch> list;
1:     private boolean closed;
1:     private boolean running;
1: 
1:     public FifoMessageDispatchChannel() {
1:         this.list = new LinkedList<MessageDispatch>();
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#enqueue(org.apache.activemq.command.MessageDispatch)
1:      */
1:     public void enqueue(MessageDispatch message) {
1:         synchronized (mutex) {
1:             list.addLast(message);
1:             mutex.notify();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#enqueueFirst(org.apache.activemq.command.MessageDispatch)
1:      */
1:     public void enqueueFirst(MessageDispatch message) {
1:         synchronized (mutex) {
1:             list.addFirst(message);
1:             mutex.notify();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#isEmpty()
1:      */
1:     public boolean isEmpty() {
1:         synchronized (mutex) {
1:             return list.isEmpty();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#dequeue(long)
1:      */
1:     public MessageDispatch dequeue(long timeout) throws InterruptedException {
1:         synchronized (mutex) {
1:             // Wait until the consumer is ready to deliver messages.
1:             while (timeout != 0 && !closed && (list.isEmpty() || !running)) {
1:                 if (timeout == -1) {
1:                     mutex.wait();
1:                 } else {
1:                     mutex.wait(timeout);
1:                     break;
1:                 }
1:             }
1:             if (closed || !running || list.isEmpty()) {
1:                 return null;
1:             }
1:             return list.removeFirst();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#dequeueNoWait()
1:      */
1:     public MessageDispatch dequeueNoWait() {
1:         synchronized (mutex) {
1:             if (closed || !running || list.isEmpty()) {
1:                 return null;
1:             }
1:             return list.removeFirst();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#peek()
1:      */
1:     public MessageDispatch peek() {
1:         synchronized (mutex) {
1:             if (closed || !running || list.isEmpty()) {
1:                 return null;
1:             }
1:             return list.getFirst();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#start()
1:      */
1:     public void start() {
1:         synchronized (mutex) {
1:             running = true;
1:             mutex.notifyAll();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#stop()
1:      */
1:     public void stop() {
1:         synchronized (mutex) {
1:             running = false;
1:             mutex.notifyAll();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#close()
1:      */
1:     public void close() {
1:         synchronized (mutex) {
1:             if (!closed) {
1:                 running = false;
1:                 closed = true;
1:             }
1:             mutex.notifyAll();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#clear()
1:      */
1:     public void clear() {
1:         synchronized (mutex) {
1:             list.clear();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#isClosed()
1:      */
1:     public boolean isClosed() {
1:         return closed;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#size()
1:      */
1:     public int size() {
1:         synchronized (mutex) {
1:             return list.size();
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#getMutex()
1:      */
1:     public Object getMutex() {
1:         return mutex;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#isRunning()
1:      */
1:     public boolean isRunning() {
1:         return running;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.MessageDispatchChannelI#removeAll()
1:      */
1:     public List<MessageDispatch> removeAll() {
1:         synchronized (mutex) {
1:             ArrayList<MessageDispatch> rc = new ArrayList<MessageDispatch>(list);
1:             list.clear();
1:             return rc;
1:         }
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         synchronized (mutex) {
1:             return list.toString();
1:         }
1:     }
1: }
============================================================================