1:72a59c4: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:72a59c4:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72a59c4:  *
1:72a59c4:  * Unless required by applicable law or agreed to in writing, software
1:72a59c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72a59c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72a59c4:  * See the License for the specific language governing permissions and
1:72a59c4:  * limitations under the License.
1:72a59c4:  */
1:72a59c4: /**
1:72a59c4:  * The SimpleQueueSender class consists only of a main method,
1:72a59c4:  * which sends several messages to a queue.
1:72a59c4:  *
1:72a59c4:  * Run this program in conjunction with SimpleQueueReceiver.
1:72a59c4:  * Specify a queue name on the command line when you run the
1:72a59c4:  * program.  By default, the program sends one message.  Specify
1:72a59c4:  * a number after the queue name to send that number of messages.
1:72a59c4:  */
1:72a59c4: package org.apache.activemq.simple;
3:72a59c4: 
1:72a59c4: import javax.jms.Connection;
1:72a59c4: import javax.jms.ConnectionFactory;
1:72a59c4: import javax.jms.Destination;
1:72a59c4: import javax.jms.JMSException;
1:72a59c4: import javax.jms.MessageProducer;
1:72a59c4: import javax.jms.Session;
1:72a59c4: import javax.jms.TextMessage;
1:72a59c4: 
1:72a59c4: import org.apache.activemq.ActiveMQConnectionFactory;
1:72a59c4: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:72a59c4: 
1:5f1adbe: public final class Producer {
1:5f1adbe: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(Producer.class);
1:72a59c4: 
1:5f1adbe:     private Producer() {
1:5f1adbe:     }
1:5f1adbe: 
1:72a59c4:     public static void main(String[] args) throws JMSException, InterruptedException {
1:72a59c4: 
1:72a59c4:         String url = "peer://localhost1/groupA?persistent=false";
1:5f1adbe:         if (args.length > 0) {
1:72a59c4:             url = args[0];
1:72a59c4:         }
1:72a59c4: 
1:72a59c4:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:72a59c4:         Destination destination = new ActiveMQQueue("TEST.QUEUE");
1:72a59c4: 
1:72a59c4:         Connection connection = connectionFactory.createConnection();
1:72a59c4:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:72a59c4:         MessageProducer producer = session.createProducer(destination);
1:72a59c4:         TextMessage message = session.createTextMessage();
1:72a59c4:         for (int i = 0; i < 1000; i++) {
1:72a59c4:             message.setText("This is message " + (i + 1));
1:5f1adbe:             LOG.info("Sending message: " + message.getText());
1:72a59c4:             producer.send(message);
1:72a59c4:             Thread.sleep(1000);
1:72a59c4:         }
1:72a59c4:         connection.close();
1:5f1adbe: 
1:72a59c4:     }
1:72a59c4: }
1:72a59c4: 
1:72a59c4: // END SNIPPET: demo
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(Producer.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public final class Producer {
0:     private static final Log LOG = LogFactory.getLog(Producer.class);
1: 
1:     private Producer() {
1:     }
1: 
1:         if (args.length > 0) {
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sending message: " + message.getText());
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:72a59c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: /**
1:  * The SimpleQueueSender class consists only of a main method,
1:  * which sends several messages to a queue.
1:  *
1:  * Run this program in conjunction with SimpleQueueReceiver.
1:  * Specify a queue name on the command line when you run the
1:  * program.  By default, the program sends one message.  Specify
1:  * a number after the queue name to send that number of messages.
1:  */
1: package org.apache.activemq.simple;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: public class Producer {
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(Producer.class);
1:     
1:     public static void main(String[] args) throws JMSException, InterruptedException {
1: 
1:         String url = "peer://localhost1/groupA?persistent=false";
0:         if( args.length>0 ) {
1:             url = args[0];
1:         }
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:         Destination destination = new ActiveMQQueue("TEST.QUEUE");
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage();
1:         for (int i = 0; i < 1000; i++) {
1:             message.setText("This is message " + (i + 1));
0:             log.info("Sending message: " + message.getText());
1:             producer.send(message);
1:             Thread.sleep(1000);
1:         }
1:         connection.close();
1:         
1:     }
1: }
1: 
1: // END SNIPPET: demo
============================================================================