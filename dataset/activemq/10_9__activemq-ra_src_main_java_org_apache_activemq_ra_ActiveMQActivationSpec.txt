24:3bd948f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
22:3bd948f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3bd948f:  *
1:3bd948f:  * Unless required by applicable law or agreed to in writing, software
1:3bd948f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bd948f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bd948f:  * See the License for the specific language governing permissions and
1:3bd948f:  * limitations under the License.
24:3bd948f:  */
1:fd4bb60: package org.apache.activemq.ra;
23:3bd948f: 
1:3bd948f: import java.beans.IntrospectionException;
1:3bd948f: import java.beans.PropertyDescriptor;
1:32446c1: import java.io.Serializable;
1:3bd948f: import java.util.ArrayList;
1:3bd948f: import java.util.Iterator;
1:3bd948f: import java.util.List;
1:32446c1: 
1:3bd948f: import javax.jms.Queue;
1:3bd948f: import javax.jms.Session;
1:3bd948f: import javax.jms.Topic;
1:3bd948f: import javax.resource.ResourceException;
1:3bd948f: import javax.resource.spi.InvalidPropertyException;
1:3bd948f: import javax.resource.spi.ResourceAdapter;
1:3bd948f: 
1:3bd948f: import org.apache.activemq.RedeliveryPolicy;
1:fd4bb60: import org.apache.activemq.command.ActiveMQDestination;
1:fd4bb60: import org.apache.activemq.command.ActiveMQQueue;
1:fd4bb60: import org.apache.activemq.command.ActiveMQTopic;
1:fd4bb60: import org.apache.activemq.selector.SelectorParser;
1:3bd948f: 
1:3bd948f: /**
1:3bd948f:  * Configures the inbound JMS consumer specification using ActiveMQ
1:3bd948f:  * 
1:3bd948f:  * @org.apache.xbean.XBean element="activationSpec"
1:0bbc0ac:  *  $Date: 2007-08-11 17:29:21 -0400 (Sat, 11 Aug
1:540dd5c:  *          2007) $
1:3bd948f:  */
1:3bd948f: public class ActiveMQActivationSpec implements MessageActivationSpec, Serializable {
1:3bd948f: 
1:540dd5c:     /** Auto-acknowledge constant for <code>acknowledgeMode</code> property * */
1:3bd948f:     public static final String AUTO_ACKNOWLEDGE_MODE = "Auto-acknowledge";
1:3bd948f:     /** Dups-ok-acknowledge constant for <code>acknowledgeMode</code> property * */
1:540dd5c:     public static final String DUPS_OK_ACKNOWLEDGE_MODE = "Dups-ok-acknowledge";
1:3bd948f:     /** Durable constant for <code>subscriptionDurability</code> property * */
1:3bd948f:     public static final String DURABLE_SUBSCRIPTION = "Durable";
1:3bd948f:     /** NonDurable constant for <code>subscriptionDurability</code> property * */
1:3bd948f:     public static final String NON_DURABLE_SUBSCRIPTION = "NonDurable";
1:3bd948f:     public static final int INVALID_ACKNOWLEDGE_MODE = -1;
1:540dd5c: 
1:540dd5c:     private static final long serialVersionUID = -7153087544100459975L;
1:540dd5c: 
1:3bd948f:     private transient MessageResourceAdapter resourceAdapter;
1:3bd948f:     private String destinationType;
1:3bd948f:     private String messageSelector;
1:3bd948f:     private String destination;
1:3bd948f:     private String acknowledgeMode = AUTO_ACKNOWLEDGE_MODE;
1:3bd948f:     private String userName;
1:3bd948f:     private String password;
1:3bd948f:     private String clientId;
1:3bd948f:     private String subscriptionName;
1:540dd5c:     private String subscriptionDurability = NON_DURABLE_SUBSCRIPTION;
1:3bd948f:     private String noLocal = "false";
1:3bd948f:     private String useRAManagedTransaction = "false";
1:540dd5c:     private String maxSessions = "10";
1:540dd5c:     private String maxMessagesPerSessions = "10";
1:3bd948f:     private String enableBatch = "false";
1:3bd948f:     private String maxMessagesPerBatch = "10";
1:9becfc0:     private String trustStore;
1:9becfc0:     private String trustStorePassword;
1:9becfc0:     private String keyStore;
1:9becfc0:     private String keyStorePassword;
1:9becfc0:     private String keyStoreKeyPassword;
1:3bd948f:     private RedeliveryPolicy redeliveryPolicy;
1:7bc7178:     private boolean useJndi;
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ActivationSpec#validate()
1:3bd948f:      */
1:3bd948f:     public void validate() throws InvalidPropertyException {
1:540dd5c:         List<String> errorMessages = new ArrayList<String>();
1:540dd5c:         List<PropertyDescriptor> propsNotSet = new ArrayList<PropertyDescriptor>();
1:3bd948f:         try {
1:540dd5c:             if (!isValidDestination(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("destination", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidDestinationType(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("destinationType", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidAcknowledgeMode(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("acknowledgeMode", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidSubscriptionDurability(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("subscriptionDurability", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidClientId(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("clientId", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidSubscriptionName(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("subscriptionName", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidMaxMessagesPerSessions(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerSessions", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidMaxSessions(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("maxSessions", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidMessageSelector(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("messageSelector", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidNoLocal(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("noLocal", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidUseRAManagedTransaction(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("useRAManagedTransaction", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidEnableBatch(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("enableBatch", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c:             if (!isValidMaxMessagesPerBatch(errorMessages)) {
1:3bd948f:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerBatch", ActiveMQActivationSpec.class));
1:540dd5c:             }
1:540dd5c: 
1:3bd948f:         } catch (IntrospectionException e) {
1:3bd948f:             e.printStackTrace();
5:3bd948f:         }
1:540dd5c: 
1:3bd948f:         if (propsNotSet.size() > 0) {
1:3bd948f:             StringBuffer b = new StringBuffer();
1:3bd948f:             b.append("Invalid settings:");
1:540dd5c:             for (Iterator<String> iter = errorMessages.iterator(); iter.hasNext();) {
1:3bd948f:                 b.append(" ");
1:3bd948f:                 b.append(iter.next());
1:3bd948f:             }
1:3bd948f:             InvalidPropertyException e = new InvalidPropertyException(b.toString());
1:540dd5c:             final PropertyDescriptor[] descriptors = propsNotSet.toArray(new PropertyDescriptor[propsNotSet.size()]);
1:3bd948f:             e.setInvalidPropertyDescriptors(descriptors);
1:3bd948f:             throw e;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidUseRAManagedTransaction(List<String> errorMessages) {
1:3bd948f:         try {
1:f585d88:             new Boolean(useRAManagedTransaction);
1:3bd948f:             return true;
1:3bd948f:         } catch (Throwable e) {
1:540dd5c:             //
1:3bd948f:         }
1:f585d88:         errorMessages.add("useRAManagedTransaction must be set to: true or false.");
2:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidNoLocal(List<String> errorMessages) {
1:3bd948f:         try {
2:3bd948f:             new Boolean(noLocal);
1:3bd948f:             return true;
1:3bd948f:         } catch (Throwable e) {
1:540dd5c:             //
1:3bd948f:         }
2:3bd948f:         errorMessages.add("noLocal must be set to: true or false.");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidMessageSelector(List<String> errorMessages) {
1:3bd948f:         try {
1:540dd5c:             if (!isEmpty(messageSelector)) {
1:1ab76f7:                 SelectorParser.parse(messageSelector);
1:3bd948f:             }
1:3bd948f:             return true;
1:3bd948f:         } catch (Throwable e) {
1:e7794fa:             errorMessages.add("messageSelector not set to valid message selector: " + e);
1:3bd948f:             return false;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidMaxSessions(List<String> errorMessages) {
1:3bd948f:         try {
1:540dd5c:             if (Integer.parseInt(maxSessions) > 0) {
1:3bd948f:                 return true;
1:3bd948f:             }
1:3bd948f:         } catch (NumberFormatException e) {
1:540dd5c:             //
1:3bd948f:         }
1:3bd948f:         errorMessages.add("maxSessions must be set to number > 0");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidMaxMessagesPerSessions(List<String> errorMessages) {
1:3bd948f:         try {
1:540dd5c:             if (Integer.parseInt(maxMessagesPerSessions) > 0) {
1:3bd948f:                 return true;
1:3bd948f:             }
1:3bd948f:         } catch (NumberFormatException e) {
1:540dd5c:             //
1:3bd948f:         }
1:3bd948f:         errorMessages.add("maxMessagesPerSessions must be set to number > 0");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidMaxMessagesPerBatch(List<String> errorMessages) {
1:3bd948f:         try {
1:540dd5c:             if (Integer.parseInt(maxMessagesPerBatch) > 0) {
1:3bd948f:                 return true;
1:3bd948f:             }
1:3bd948f:         } catch (NumberFormatException e) {
1:540dd5c:             //
1:3bd948f:         }
1:3bd948f:         errorMessages.add("maxMessagesPerBatch must be set to number > 0");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidEnableBatch(List<String> errorMessages) {
1:3bd948f:         try {
1:3bd948f:             new Boolean(enableBatch);
1:3bd948f:             return true;
1:3bd948f:         } catch (Throwable e) {
1:540dd5c:             //
1:3bd948f:         }
1:3bd948f:         errorMessages.add("enableBatch must be set to: true or false");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public ResourceAdapter getResourceAdapter() {
1:3bd948f:         return resourceAdapter;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)
1:3bd948f:      */
1:3bd948f:     public void setResourceAdapter(ResourceAdapter resourceAdapter) throws ResourceException {
1:540dd5c:         // spec section 5.3.3
1:3bd948f:         if (this.resourceAdapter != null) {
1:3bd948f:             throw new ResourceException("ResourceAdapter already set");
1:3bd948f:         }
1:3bd948f:         if (!(resourceAdapter instanceof MessageResourceAdapter)) {
1:3bd948f:             throw new ResourceException("ResourceAdapter is not of type: " + MessageResourceAdapter.class.getName());
1:3bd948f:         }
1:540dd5c:         this.resourceAdapter = (MessageResourceAdapter)resourceAdapter;
1:3bd948f:     }
1:3bd948f: 
1:540dd5c:     // ///////////////////////////////////////////////////////////////////////
7:3bd948f:     //
1:3bd948f:     // Java Bean getters and setters for this ActivationSpec class.
1:3bd948f:     //
1:540dd5c:     // ///////////////////////////////////////////////////////////////////////
1:3bd948f:     public String getDestinationType() {
1:3bd948f:         if (!isEmpty(destinationType)) {
1:3bd948f:             return destinationType;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @param destinationType The destinationType to set.
1:3bd948f:      */
1:3bd948f:     public void setDestinationType(String destinationType) {
1:3bd948f:         this.destinationType = destinationType;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     public String getPassword() {
1:540dd5c:         if (!isEmpty(password)) {
1:3bd948f:             return password;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setPassword(String password) {
1:3bd948f:         this.password = password;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getUserName() {
1:540dd5c:         if (!isEmpty(userName)) {
1:3bd948f:             return userName;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setUserName(String userName) {
1:3bd948f:         this.userName = userName;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     public String getMessageSelector() {
1:3bd948f:         if (!isEmpty(messageSelector)) {
1:3bd948f:             return messageSelector;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @param messageSelector The messageSelector to set.
1:3bd948f:      */
1:3bd948f:     public void setMessageSelector(String messageSelector) {
1:3bd948f:         this.messageSelector = messageSelector;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getNoLocal() {
1:3bd948f:         return noLocal;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @param noLocal The noLocal to set.
1:3bd948f:      */
1:3bd948f:     public void setNoLocal(String noLocal) {
1:540dd5c:         if (noLocal != null) {
1:3bd948f:             this.noLocal = noLocal;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getAcknowledgeMode() {
1:3bd948f:         if (!isEmpty(acknowledgeMode)) {
1:3bd948f:             return acknowledgeMode;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setAcknowledgeMode(String acknowledgeMode) {
1:3bd948f:         this.acknowledgeMode = acknowledgeMode;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     public String getClientId() {
1:3bd948f:         if (!isEmpty(clientId)) {
1:3bd948f:             return clientId;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:540dd5c:     public void setClientId(String clientId) {
1:540dd5c:         this.clientId = clientId;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getDestination() {
1:3bd948f:         if (!isEmpty(destination)) {
1:3bd948f:             return destination;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setDestination(String destination) {
1:3bd948f:         this.destination = destination;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getSubscriptionDurability() {
1:540dd5c:         if (!isEmpty(subscriptionDurability)) {
1:3bd948f:             return subscriptionDurability;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setSubscriptionDurability(String subscriptionDurability) {
1:3bd948f:         this.subscriptionDurability = subscriptionDurability;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getSubscriptionName() {
1:3bd948f:         if (!isEmpty(subscriptionName)) {
1:3bd948f:             return subscriptionName;
1:3bd948f:         }
1:3bd948f:         return null;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setSubscriptionName(String subscriptionName) {
1:3bd948f:         this.subscriptionName = subscriptionName;
1:3bd948f:     }
1:540dd5c: 
1:aa87faa:     public boolean isValidSubscriptionName(List<String> errorMessages) {
1:540dd5c:         if (!isDurableSubscription() ? true : subscriptionName != null && subscriptionName.trim().length() > 0) {
1:3bd948f:             return true;
1:540dd5c:         }
1:3bd948f:         errorMessages.add("subscriptionName must be set since durable subscription was requested.");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidClientId(List<String> errorMessages) {
1:540dd5c:         if (!isDurableSubscription() ? true : clientId != null && clientId.trim().length() > 0) {
1:3bd948f:             return true;
1:3bd948f:         }
1:3bd948f:         errorMessages.add("clientId must be set since durable subscription was requested.");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public boolean isDurableSubscription() {
1:3bd948f:         return DURABLE_SUBSCRIPTION.equals(subscriptionDurability);
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidSubscriptionDurability(List<String> errorMessages) {
1:3fc0546:         // subscriptionDurability only applies to Topics
1:540dd5c:         if (DURABLE_SUBSCRIPTION.equals(subscriptionDurability) && getDestinationType() != null && !Topic.class.getName().equals(getDestinationType())) {
1:540dd5c:             errorMessages.add("subscriptionDurability cannot be set to: " + DURABLE_SUBSCRIPTION + " when destinationType is set to " + Queue.class.getName()
1:540dd5c:                               + " as it is only valid when destinationType is set to " + Topic.class.getName() + ".");
1:3fc0546:             return false;
1:3fc0546:         }
1:540dd5c:         if (NON_DURABLE_SUBSCRIPTION.equals(subscriptionDurability) || DURABLE_SUBSCRIPTION.equals(subscriptionDurability)) {
1:3bd948f:             return true;
1:540dd5c:         }
1:540dd5c:         errorMessages.add("subscriptionDurability must be set to: " + NON_DURABLE_SUBSCRIPTION + " or " + DURABLE_SUBSCRIPTION + ".");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidAcknowledgeMode(List<String> errorMessages) {
1:540dd5c:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) || DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1:3bd948f:             return true;
1:540dd5c:         }
1:540dd5c:         errorMessages.add("acknowledgeMode must be set to: " + AUTO_ACKNOWLEDGE_MODE + " or " + DUPS_OK_ACKNOWLEDGE_MODE + ".");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidDestinationType(List<String> errorMessages) {
1:540dd5c:         if (Queue.class.getName().equals(destinationType) || Topic.class.getName().equals(destinationType)) {
1:3bd948f:             return true;
1:540dd5c:         }
1:540dd5c:         errorMessages.add("destinationType must be set to: " + Queue.class.getName() + " or " + Topic.class.getName() + ".");
1:3bd948f:         return false;
1:3bd948f:     }
1:3bd948f: 
1:aa87faa:     public boolean isValidDestination(List<String> errorMessages) {
1:540dd5c:         if (!(destination == null || destination.equals(""))) {
1:3bd948f:             return true;
1:540dd5c:         }
1:3bd948f:         errorMessages.add("destination is a required field and must be set to the destination name.");
1:3bd948f:         return false;
1:3bd948f:     }
1:540dd5c: 
1:aa87faa:     public boolean isEmpty(String value) {
1:3bd948f:         return value == null || "".equals(value.trim());
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:540dd5c:     @Override
1:540dd5c:     public String toString() {
1:540dd5c:         return "ActiveMQActivationSpec{" + "acknowledgeMode='" + acknowledgeMode + "'" + ", destinationType='" + destinationType + "'" + ", messageSelector='" + messageSelector + "'"
1:540dd5c:                + ", destination='" + destination + "'" + ", clientId='" + clientId + "'" + ", subscriptionName='" + subscriptionName + "'" + ", subscriptionDurability='" + subscriptionDurability
1:7bc7178:                + "'" + ", useJndi='"+ useJndi + "'" +"}";
1:3bd948f:     }
1:3bd948f: 
1:540dd5c:     public int getAcknowledgeModeForSession() {
1:540dd5c:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1:3bd948f:             return Session.AUTO_ACKNOWLEDGE;
1:540dd5c:         } else if (DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1:3bd948f:             return Session.DUPS_OK_ACKNOWLEDGE;
1:3bd948f:         } else {
1:3bd948f:             return INVALID_ACKNOWLEDGE_MODE;
1:3bd948f:         }
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     /**
1:540dd5c:      * A helper method mostly for use in Dependency Injection containers which
1:540dd5c:      * allows you to customize the destination and destinationType properties
1:3bd948f:      * from a single ActiveMQDestination POJO
1:3bd948f:      */
1:3bd948f:     public void setActiveMQDestination(ActiveMQDestination destination) {
1:3bd948f:         setDestination(destination.getPhysicalName());
1:3bd948f:         if (destination instanceof Queue) {
1:3bd948f:             setDestinationType(Queue.class.getName());
1:540dd5c:         } else {
1:3bd948f:             setDestinationType(Topic.class.getName());
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public ActiveMQDestination createDestination() {
1:540dd5c:         if (isEmpty(destinationType) || isEmpty(destination)) {
1:3bd948f:             return null;
1:540dd5c:         }
1:540dd5c: 
1:3bd948f:         ActiveMQDestination dest = null;
1:3bd948f:         if (Queue.class.getName().equals(destinationType)) {
1:3bd948f:             dest = new ActiveMQQueue(destination);
1:3bd948f:         } else if (Topic.class.getName().equals(destinationType)) {
1:3bd948f:             dest = new ActiveMQTopic(destination);
1:3bd948f:         } else {
1:3bd948f:             assert false : "Execution should never reach here";
1:3bd948f:         }
1:3bd948f:         return dest;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getMaxMessagesPerSessions() {
1:2256ec0:         return maxMessagesPerSessions;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setMaxMessagesPerSessions(String maxMessagesPerSessions) {
1:540dd5c:         if (maxMessagesPerSessions != null) {
1:3bd948f:             this.maxMessagesPerSessions = maxMessagesPerSessions;
1:540dd5c:         }
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getMaxSessions() {
1:3bd948f:         return maxSessions;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setMaxSessions(String maxSessions) {
1:540dd5c:         if (maxSessions != null) {
1:3bd948f:             this.maxSessions = maxSessions;
1:3bd948f:         }
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     public String getUseRAManagedTransaction() {
1:3bd948f:         return useRAManagedTransaction;
1:3bd948f:     }
1:540dd5c: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setUseRAManagedTransaction(String useRAManagedTransaction) {
1:540dd5c:         if (useRAManagedTransaction != null) {
1:3bd948f:             this.useRAManagedTransaction = useRAManagedTransaction;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public int getMaxMessagesPerSessionsIntValue() {
1:3bd948f:         return Integer.parseInt(maxMessagesPerSessions);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public int getMaxSessionsIntValue() {
1:3bd948f:         return Integer.parseInt(maxSessions);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public boolean isUseRAManagedTransactionEnabled() {
1:2256ec0:         return Boolean.valueOf(useRAManagedTransaction).booleanValue();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public boolean getNoLocalBooleanValue() {
1:2256ec0:         return Boolean.valueOf(noLocal).booleanValue();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getEnableBatch() {
1:3bd948f:         return enableBatch;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setEnableBatch(String enableBatch) {
1:3bd948f:         if (enableBatch != null) {
1:3bd948f:             this.enableBatch = enableBatch;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public boolean getEnableBatchBooleanValue() {
1:2256ec0:         return Boolean.valueOf(enableBatch).booleanValue();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public int getMaxMessagesPerBatchIntValue() {
1:3bd948f:         return Integer.parseInt(maxMessagesPerBatch);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public String getMaxMessagesPerBatch() {
1:2256ec0:         return maxMessagesPerBatch;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setMaxMessagesPerBatch(String maxMessagesPerBatch) {
1:3bd948f:         if (maxMessagesPerBatch != null) {
1:3bd948f:             this.maxMessagesPerBatch = maxMessagesPerBatch;
1:3bd948f:         }
1:3bd948f:     }
1:3bd948f: 
1:9cc9873:     public double getBackOffMultiplier() {
1:3bd948f:         if (redeliveryPolicy == null) {
1:3bd948f:             return 0;
1:3bd948f:         }
1:3bd948f:         return redeliveryPolicy.getBackOffMultiplier();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public long getInitialRedeliveryDelay() {
1:3bd948f:         if (redeliveryPolicy == null) {
1:3bd948f:             return 0;
1:3bd948f:         }
1:3bd948f:         return redeliveryPolicy.getInitialRedeliveryDelay();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public int getMaximumRedeliveries() {
1:3bd948f:         if (redeliveryPolicy == null) {
1:3bd948f:             return 0;
1:3bd948f:         }
1:3bd948f:         return redeliveryPolicy.getMaximumRedeliveries();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     public boolean isUseExponentialBackOff() {
1:3bd948f:         if (redeliveryPolicy == null) {
1:3bd948f:             return false;
1:3bd948f:         }
1:3bd948f:         return redeliveryPolicy.isUseExponentialBackOff();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:8fba621:     public void setBackOffMultiplier(double backOffMultiplier) {
1:3bd948f:         lazyCreateRedeliveryPolicy().setBackOffMultiplier(backOffMultiplier);
1:3bd948f:     }
1:8fba621:     
1:8fba621:     public long getMaximumRedeliveryDelay() {
1:8fba621:         if (redeliveryPolicy == null) {
1:8fba621:             return 0;
1:8fba621:         }
1:8fba621:         return redeliveryPolicy.getMaximumRedeliveryDelay();
1:8fba621:     }
1:8fba621:     
1:8fba621:     public void setMaximumRedeliveryDelay(long maximumRedeliveryDelay) {
1:8fba621:         lazyCreateRedeliveryPolicy().setMaximumRedeliveryDelay(maximumRedeliveryDelay);
1:8fba621:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setInitialRedeliveryDelay(long initialRedeliveryDelay) {
1:3bd948f:         lazyCreateRedeliveryPolicy().setInitialRedeliveryDelay(initialRedeliveryDelay);
1:1d71cb7:         redeliveryPolicy.setRedeliveryDelay(initialRedeliveryDelay);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setMaximumRedeliveries(int maximumRedeliveries) {
1:3bd948f:         lazyCreateRedeliveryPolicy().setMaximumRedeliveries(maximumRedeliveries);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * 
1:3bd948f:      */
1:3bd948f:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:3bd948f:         lazyCreateRedeliveryPolicy().setUseExponentialBackOff(useExponentialBackOff);
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     // don't use getter to avoid causing introspection errors in containers
1:3bd948f:     public RedeliveryPolicy redeliveryPolicy() {
1:3bd948f:         return redeliveryPolicy;
1:3bd948f:     }
1:7bc7178: 
1:aa87faa:     public RedeliveryPolicy lazyCreateRedeliveryPolicy() {
1:3bd948f:         if (redeliveryPolicy == null) {
1:3bd948f:             redeliveryPolicy = new RedeliveryPolicy();
1:3bd948f:         }
1:3bd948f:         return redeliveryPolicy;
1:3bd948f:     }
1:3bd948f:     
1:7bc7178:     public void setUseJndi(boolean useJndi) {
1:7bc7178:         this.useJndi = useJndi;
1:7bc7178:     }
1:7bc7178:     
1:7bc7178:     public boolean isUseJndi() {
1:7bc7178:         return useJndi;
1:7bc7178:     }
1:9becfc0: 
1:9becfc0:     public String getTrustStore() {
1:9becfc0:         if (!isEmpty(trustStore)) {
1:9becfc0:             return trustStore;
1:9becfc0:         }
1:9becfc0:         return null;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setTrustStore(String trustStore) {
1:9becfc0:         this.trustStore = trustStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getTrustStorePassword() {
1:9becfc0:         if (!isEmpty(trustStorePassword)) {
1:9becfc0:             return trustStorePassword;
1:9becfc0:         }
1:9becfc0:         return null;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setTrustStorePassword(String trustStorePassword) {
1:9becfc0:         this.trustStorePassword = trustStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStore() {
1:9becfc0:         if (!isEmpty(keyStore)) {
1:9becfc0:             return keyStore;
1:9becfc0:         }
1:9becfc0:         return null;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStore(String keyStore) {
1:9becfc0:         this.keyStore = keyStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStorePassword() {
1:9becfc0:         if (!isEmpty(keyStorePassword)) {
1:9becfc0:             return keyStorePassword;
1:9becfc0:         }
1:9becfc0:         return null;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStorePassword(String keyStorePassword) {
1:9becfc0:         this.keyStorePassword = keyStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStoreKeyPassword() {
1:9becfc0:         if (!isEmpty(keyStoreKeyPassword)) {
1:9becfc0:             return keyStoreKeyPassword;
1:9becfc0:         }
1:9becfc0:         return null;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:9becfc0:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:9becfc0:     }
1:3bd948f: }
============================================================================
author:Andy Taylor
-------------------------------------------------------------------------------
commit:9becfc0
/////////////////////////////////////////////////////////////////////////
1:     private String trustStore;
1:     private String trustStorePassword;
1:     private String keyStore;
1:     private String keyStorePassword;
1:     private String keyStoreKeyPassword;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getTrustStore() {
1:         if (!isEmpty(trustStore)) {
1:             return trustStore;
1:         }
1:         return null;
1:     }
1: 
1:     public void setTrustStore(String trustStore) {
1:         this.trustStore = trustStore;
1:     }
1: 
1:     public String getTrustStorePassword() {
1:         if (!isEmpty(trustStorePassword)) {
1:             return trustStorePassword;
1:         }
1:         return null;
1:     }
1: 
1:     public void setTrustStorePassword(String trustStorePassword) {
1:         this.trustStorePassword = trustStorePassword;
1:     }
1: 
1:     public String getKeyStore() {
1:         if (!isEmpty(keyStore)) {
1:             return keyStore;
1:         }
1:         return null;
1:     }
1: 
1:     public void setKeyStore(String keyStore) {
1:         this.keyStore = keyStore;
1:     }
1: 
1:     public String getKeyStorePassword() {
1:         if (!isEmpty(keyStorePassword)) {
1:             return keyStorePassword;
1:         }
1:         return null;
1:     }
1: 
1:     public void setKeyStorePassword(String keyStorePassword) {
1:         this.keyStorePassword = keyStorePassword;
1:     }
1: 
1:     public String getKeyStoreKeyPassword() {
1:         if (!isEmpty(keyStoreKeyPassword)) {
1:             return keyStoreKeyPassword;
1:         }
1:         return null;
1:     }
1: 
1:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:1d71cb7
/////////////////////////////////////////////////////////////////////////
1:         redeliveryPolicy.setRedeliveryDelay(initialRedeliveryDelay);
author:Christian Posta
-------------------------------------------------------------------------------
commit:7bc7178
/////////////////////////////////////////////////////////////////////////
1:     private boolean useJndi;
/////////////////////////////////////////////////////////////////////////
1:                + "'" + ", useJndi='"+ useJndi + "'" +"}";
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setUseJndi(boolean useJndi) {
1:         this.useJndi = useJndi;
1:     }
1:     
1:     public boolean isUseJndi() {
1:         return useJndi;
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:8fba621
/////////////////////////////////////////////////////////////////////////
1:     public void setBackOffMultiplier(double backOffMultiplier) {
1:     
1:     public long getMaximumRedeliveryDelay() {
1:         if (redeliveryPolicy == null) {
1:             return 0;
1:         }
1:         return redeliveryPolicy.getMaximumRedeliveryDelay();
1:     }
1:     
1:     public void setMaximumRedeliveryDelay(long maximumRedeliveryDelay) {
1:         lazyCreateRedeliveryPolicy().setMaximumRedeliveryDelay(maximumRedeliveryDelay);
1:     }
commit:e7794fa
/////////////////////////////////////////////////////////////////////////
1:             errorMessages.add("messageSelector not set to valid message selector: " + e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  *  $Date: 2007-08-11 17:29:21 -0400 (Sat, 11 Aug
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0:  * @version $Revision$ $Date: 2007-08-11 17:29:21 -0400 (Sat, 11 Aug
1:  *          2007) $
1:     /** Auto-acknowledge constant for <code>acknowledgeMode</code> property * */
1:     public static final String DUPS_OK_ACKNOWLEDGE_MODE = "Dups-ok-acknowledge";
1: 
1:     private static final long serialVersionUID = -7153087544100459975L;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String subscriptionDurability = NON_DURABLE_SUBSCRIPTION;
1:     private String maxSessions = "10";
1:     private String maxMessagesPerSessions = "10";
1:         List<String> errorMessages = new ArrayList<String>();
1:         List<PropertyDescriptor> propsNotSet = new ArrayList<PropertyDescriptor>();
1:             if (!isValidDestination(errorMessages)) {
1:             }
1:             if (!isValidDestinationType(errorMessages)) {
1:             }
1:             if (!isValidAcknowledgeMode(errorMessages)) {
1:             }
1:             if (!isValidSubscriptionDurability(errorMessages)) {
1:             }
1:             if (!isValidClientId(errorMessages)) {
1:             }
1:             if (!isValidSubscriptionName(errorMessages)) {
1:             }
1:             if (!isValidMaxMessagesPerSessions(errorMessages)) {
1:             }
1:             if (!isValidMaxSessions(errorMessages)) {
1:             }
1:             if (!isValidMessageSelector(errorMessages)) {
1:             }
1:             if (!isValidNoLocal(errorMessages)) {
1:             }
1:             if (!isValidUseRAManagedTransaction(errorMessages)) {
1:             }
1:             if (!isValidEnableBatch(errorMessages)) {
1:             }
1:             if (!isValidMaxMessagesPerBatch(errorMessages)) {
1:             }
1: 
1:             for (Iterator<String> iter = errorMessages.iterator(); iter.hasNext();) {
1:             final PropertyDescriptor[] descriptors = propsNotSet.toArray(new PropertyDescriptor[propsNotSet.size()]);
0:     private boolean isValidUseRAManagedTransaction(List<String> errorMessages) {
1:             //
0:     private boolean isValidNoLocal(List<String> errorMessages) {
1:             //
0:     private boolean isValidMessageSelector(List<String> errorMessages) {
1:             if (!isEmpty(messageSelector)) {
0:             errorMessages.add("messageSelector not set to valid message selector: " + e.getMessage());
0:     private boolean isValidMaxSessions(List<String> errorMessages) {
1:             if (Integer.parseInt(maxSessions) > 0) {
1:             //
0:     private boolean isValidMaxMessagesPerSessions(List<String> errorMessages) {
1:             if (Integer.parseInt(maxMessagesPerSessions) > 0) {
1:             //
0:     private boolean isValidMaxMessagesPerBatch(List<String> errorMessages) {
1:             if (Integer.parseInt(maxMessagesPerBatch) > 0) {
1:             //
0:     private boolean isValidEnableBatch(List<String> errorMessages) {
1:             //
/////////////////////////////////////////////////////////////////////////
1:         // spec section 5.3.3
1:         this.resourceAdapter = (MessageResourceAdapter)resourceAdapter;
1:     // ///////////////////////////////////////////////////////////////////////
1:     // ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (!isEmpty(password)) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (!isEmpty(userName)) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (noLocal != null) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setClientId(String clientId) {
1:         this.clientId = clientId;
/////////////////////////////////////////////////////////////////////////
1:         if (!isEmpty(subscriptionDurability)) {
/////////////////////////////////////////////////////////////////////////
1: 
0:     private boolean isValidSubscriptionName(List<String> errorMessages) {
1:         if (!isDurableSubscription() ? true : subscriptionName != null && subscriptionName.trim().length() > 0) {
1:         }
0:     private boolean isValidClientId(List<String> errorMessages) {
1:         if (!isDurableSubscription() ? true : clientId != null && clientId.trim().length() > 0) {
/////////////////////////////////////////////////////////////////////////
0:     private boolean isValidSubscriptionDurability(List<String> errorMessages) {
1:         if (DURABLE_SUBSCRIPTION.equals(subscriptionDurability) && getDestinationType() != null && !Topic.class.getName().equals(getDestinationType())) {
1:             errorMessages.add("subscriptionDurability cannot be set to: " + DURABLE_SUBSCRIPTION + " when destinationType is set to " + Queue.class.getName()
1:                               + " as it is only valid when destinationType is set to " + Topic.class.getName() + ".");
1:         if (NON_DURABLE_SUBSCRIPTION.equals(subscriptionDurability) || DURABLE_SUBSCRIPTION.equals(subscriptionDurability)) {
1:         }
1:         errorMessages.add("subscriptionDurability must be set to: " + NON_DURABLE_SUBSCRIPTION + " or " + DURABLE_SUBSCRIPTION + ".");
0:     private boolean isValidAcknowledgeMode(List<String> errorMessages) {
1:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) || DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1:         }
1:         errorMessages.add("acknowledgeMode must be set to: " + AUTO_ACKNOWLEDGE_MODE + " or " + DUPS_OK_ACKNOWLEDGE_MODE + ".");
0:     private boolean isValidDestinationType(List<String> errorMessages) {
1:         if (Queue.class.getName().equals(destinationType) || Topic.class.getName().equals(destinationType)) {
1:         }
1:         errorMessages.add("destinationType must be set to: " + Queue.class.getName() + " or " + Topic.class.getName() + ".");
0:     private boolean isValidDestination(List<String> errorMessages) {
1:         if (!(destination == null || destination.equals(""))) {
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return "ActiveMQActivationSpec{" + "acknowledgeMode='" + acknowledgeMode + "'" + ", destinationType='" + destinationType + "'" + ", messageSelector='" + messageSelector + "'"
1:                + ", destination='" + destination + "'" + ", clientId='" + clientId + "'" + ", subscriptionName='" + subscriptionName + "'" + ", subscriptionDurability='" + subscriptionDurability
0:                + "'" + "}";
1:     public int getAcknowledgeModeForSession() {
1:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1:         } else if (DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode)) {
1: 
1:      * A helper method mostly for use in Dependency Injection containers which
1:      * allows you to customize the destination and destinationType properties
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         if (isEmpty(destinationType) || isEmpty(destination)) {
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (maxMessagesPerSessions != null) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:         if (maxSessions != null) {
1: 
1: 
1:         if (useRAManagedTransaction != null) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3fc0546
/////////////////////////////////////////////////////////////////////////
1:         // subscriptionDurability only applies to Topics
0:         if ( DURABLE_SUBSCRIPTION.equals(subscriptionDurability) &&
0:              getDestinationType() != null && !Topic.class.getName().equals(getDestinationType())) {
0:             errorMessages.add("subscriptionDurability cannot be set to: "+DURABLE_SUBSCRIPTION+" when destinationType is set to "+
0:                 Queue.class.getName()+" as it is only valid when destinationType is set to "+Topic.class.getName()+".");
1:             return false;
1:         }
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean 
commit:32446c1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQActivationSpec implements ActivationSpec, Serializable {
0:     private static final long serialVersionUID = -7153087544100459975L;
1:     
/////////////////////////////////////////////////////////////////////////
0:     private transient ActiveMQResourceAdapter resourceAdapter;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.selector.SelectorParser;
author:David Jencks
-------------------------------------------------------------------------------
commit:f585d88
/////////////////////////////////////////////////////////////////////////
1:             new Boolean(useRAManagedTransaction);
1:         errorMessages.add("useRAManagedTransaction must be set to: true or false.");
author:Robert Davies
-------------------------------------------------------------------------------
commit:9cc9873
/////////////////////////////////////////////////////////////////////////
1:     public double getBackOffMultiplier() {
commit:2256ec0
/////////////////////////////////////////////////////////////////////////
1:         return maxMessagesPerSessions;
/////////////////////////////////////////////////////////////////////////
1:         return Boolean.valueOf(useRAManagedTransaction).booleanValue();
1:         return Boolean.valueOf(noLocal).booleanValue();
/////////////////////////////////////////////////////////////////////////
1:         return Boolean.valueOf(enableBatch).booleanValue();
/////////////////////////////////////////////////////////////////////////
1:         return maxMessagesPerBatch;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1ab76f7
/////////////////////////////////////////////////////////////////////////
1:                 SelectorParser.parse(messageSelector);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa87faa
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidUseRAManagedTransaction(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidNoLocal(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidMessageSelector(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidMaxSessions(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidMaxMessagesPerSessions(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidMaxMessagesPerBatch(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidEnableBatch(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidSubscriptionName(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidClientId(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidSubscriptionDurability(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidAcknowledgeMode(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidDestinationType(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidDestination(List<String> errorMessages) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmpty(String value) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public RedeliveryPolicy lazyCreateRedeliveryPolicy() {
commit:3bd948f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.ra;
1: 
1: import java.beans.IntrospectionException;
1: import java.beans.PropertyDescriptor;
0: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.InvalidPropertyException;
1: import javax.resource.spi.ResourceAdapter;
1: 
1: import org.apache.activemq.RedeliveryPolicy;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.selector.SelectorParser;
1: 
1: /**
1:  * Configures the inbound JMS consumer specification using ActiveMQ
1:  * 
1:  * @org.apache.xbean.XBean element="activationSpec"
1:  * 
0:  * @version $Revision$ $Date$
1:  */
1: public class ActiveMQActivationSpec implements MessageActivationSpec, Serializable {
1: 
0:     private static final long serialVersionUID = -7153087544100459975L;
1:     
0:     /** Auto-acknowledge constant for <code>acknowledgeMode</code> property **/
1:     public static final String AUTO_ACKNOWLEDGE_MODE = "Auto-acknowledge";
1:     /** Dups-ok-acknowledge constant for <code>acknowledgeMode</code> property * */
0:     public static final String DUPS_OK_ACKNOWLEDGE_MODE = "Dups-ok-acknowledge";    
1:     /** Durable constant for <code>subscriptionDurability</code> property * */
1:     public static final String DURABLE_SUBSCRIPTION = "Durable";
1:     /** NonDurable constant for <code>subscriptionDurability</code> property * */
1:     public static final String NON_DURABLE_SUBSCRIPTION = "NonDurable";
1:     
1:     /**
1:      * 
1:      */
1:     public static final int INVALID_ACKNOWLEDGE_MODE = -1;
1:     
1:     private transient MessageResourceAdapter resourceAdapter;
1:     private String destinationType;
1:     private String messageSelector;
1:     private String destination;
1:     private String acknowledgeMode = AUTO_ACKNOWLEDGE_MODE;
1:     private String userName;
1:     private String password;
1:     private String clientId;
1:     private String subscriptionName;
0:     private String subscriptionDurability = NON_DURABLE_SUBSCRIPTION;    
1:     private String noLocal = "false";
1:     private String useRAManagedTransaction = "false";
0:     private String maxSessions="10";
0:     private String maxMessagesPerSessions="10";
1:     private String enableBatch = "false";
1:     private String maxMessagesPerBatch = "10";
1:     private RedeliveryPolicy redeliveryPolicy;
1: 
1:     
1:     /**
1:      * @see javax.resource.spi.ActivationSpec#validate()
1:      */
1:     public void validate() throws InvalidPropertyException {
0:         List errorMessages = new ArrayList();
0:         List propsNotSet = new ArrayList();
1:         try {
0:             if (!isValidDestination(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("destination", ActiveMQActivationSpec.class));
0:             if (!isValidDestinationType(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("destinationType", ActiveMQActivationSpec.class));
0:             if (!isValidAcknowledgeMode(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("acknowledgeMode", ActiveMQActivationSpec.class));
0:             if (!isValidSubscriptionDurability(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("subscriptionDurability", ActiveMQActivationSpec.class));
0:             if (!isValidClientId(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("clientId", ActiveMQActivationSpec.class));
0:             if (!isValidSubscriptionName(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("subscriptionName", ActiveMQActivationSpec.class));
0:             if (!isValidMaxMessagesPerSessions(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerSessions", ActiveMQActivationSpec.class));
0:             if (!isValidMaxSessions(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("maxSessions", ActiveMQActivationSpec.class));
0:             if (!isValidMessageSelector(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("messageSelector", ActiveMQActivationSpec.class));
0:             if (!isValidNoLocal(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("noLocal", ActiveMQActivationSpec.class));
0:             if (!isValidUseRAManagedTransaction(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("useRAManagedTransaction", ActiveMQActivationSpec.class));
0:             if (!isValidEnableBatch(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("enableBatch", ActiveMQActivationSpec.class));
0:             if (!isValidMaxMessagesPerBatch(errorMessages))
1:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerBatch", ActiveMQActivationSpec.class));
1: 
1:             
1:         } catch (IntrospectionException e) {
1:             e.printStackTrace();
1:         }
1:         
1:         if (propsNotSet.size() > 0) {
1:             StringBuffer b = new StringBuffer();
1:             b.append("Invalid settings:");
0:             for (Iterator iter = errorMessages.iterator(); iter.hasNext();) {
1:                 b.append(" ");
1:                 b.append(iter.next());
1:             }
1:             InvalidPropertyException e = new InvalidPropertyException(b.toString());
0:             final PropertyDescriptor[] descriptors = (PropertyDescriptor[]) propsNotSet.toArray(new PropertyDescriptor[propsNotSet.size()]);
1:             e.setInvalidPropertyDescriptors(descriptors);
1:             throw e;
1:         }
1:     }
1: 
0:     private boolean isValidUseRAManagedTransaction(List errorMessages) {
1:         try {
1:             new Boolean(noLocal);
1:             return true;
1:         } catch (Throwable e) {
1:         	//
1:         }
1:         errorMessages.add("noLocal must be set to: true or false.");
1:         return false;
1:     }
1: 
0:     private boolean isValidNoLocal(List errorMessages) {
1:         try {
1:             new Boolean(noLocal);
1:             return true;
1:         } catch (Throwable e) {
1:         	//
1:         }
1:         errorMessages.add("noLocal must be set to: true or false.");
1:         return false;
1:     }
1: 
0:     private boolean isValidMessageSelector(List errorMessages) {
1:         try {
0:             if( !isEmpty(messageSelector) ) {
0:                 new SelectorParser().parse(messageSelector);
1:             }
1:             return true;
1:         } catch (Throwable e) {
0:             errorMessages.add("messageSelector not set to valid message selector: "+e.getMessage());
1:             return false;
1:         }
1:     }
1: 
0:     private boolean isValidMaxSessions(List errorMessages) {
1:         try {
0:             if( Integer.parseInt(maxSessions) > 0 ) {
1:                 return true;
1:             }
1:         } catch (NumberFormatException e) {
1:         	//
1:         }
1:         errorMessages.add("maxSessions must be set to number > 0");
1:         return false;
1:     }
1: 
0:     private boolean isValidMaxMessagesPerSessions(List errorMessages) {
1:         try {
0:             if( Integer.parseInt(maxMessagesPerSessions) > 0 ) {
1:                 return true;
1:             }
1:         } catch (NumberFormatException e) {
1:         	//
1:         }
1:         errorMessages.add("maxMessagesPerSessions must be set to number > 0");
1:         return false;
1:     }
1: 
0:     private boolean isValidMaxMessagesPerBatch(List errorMessages) {
1:         try {
0:             if( Integer.parseInt(maxMessagesPerBatch) > 0 ) {
1:                 return true;
1:             }
1:         } catch (NumberFormatException e) {
1:         	//
1:         }
1:         errorMessages.add("maxMessagesPerBatch must be set to number > 0");
1:         return false;
1:     }
1: 
0:     private boolean isValidEnableBatch(List errorMessages) {
1:         try {
1:             new Boolean(enableBatch);
1:             return true;
1:         } catch (Throwable e) {
1:         	//
1:         }
1:         errorMessages.add("enableBatch must be set to: true or false");
1:         return false;
1:     }
1: 
1:     /**
0:      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()
1:      */
1:     public ResourceAdapter getResourceAdapter() {
1:         return resourceAdapter;
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)
1:      */
1:     public void setResourceAdapter(ResourceAdapter resourceAdapter) throws ResourceException {
0:         //spec section 5.3.3
1:         if (this.resourceAdapter != null) {
1:             throw new ResourceException("ResourceAdapter already set");
1:         }
1:         if (!(resourceAdapter instanceof MessageResourceAdapter)) {
1:             throw new ResourceException("ResourceAdapter is not of type: " + MessageResourceAdapter.class.getName());
1:         }
0:         this.resourceAdapter = (MessageResourceAdapter) resourceAdapter;
1:     }
1: 
1: 
0:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     // Java Bean getters and setters for this ActivationSpec class.
1:     //
0:     /////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @return Returns the destinationType.
1:      */
1:     public String getDestinationType() {
1:         if (!isEmpty(destinationType)) {
1:             return destinationType;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @param destinationType The destinationType to set.
1:      */
1:     public void setDestinationType(String destinationType) {
1:         this.destinationType = destinationType;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public String getPassword() {
0:         if (!isEmpty(password)) {                
1:             return password;
1:         }
1:         return null;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public String getUserName() {
0:         if (!isEmpty(userName)) {        
1:             return userName;
1:         }
1:         return null;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1:     
1:     /**
0:      * @return Returns the messageSelector.
1:      */
1:     public String getMessageSelector() {
1:         if (!isEmpty(messageSelector)) {
1:             return messageSelector;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @param messageSelector The messageSelector to set.
1:      */
1:     public void setMessageSelector(String messageSelector) {
1:         this.messageSelector = messageSelector;
1:     }
1: 
1:     /**
0:      * @return Returns the noLocal.
1:      */
1:     public String getNoLocal() {
1:         return noLocal;
1:     }
1: 
1:     /**
1:      * @param noLocal The noLocal to set.
1:      */
1:     public void setNoLocal(String noLocal) {
0:         if( noLocal!=null ) {
1:             this.noLocal = noLocal;
1:         }
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public String getAcknowledgeMode() {
1:         if (!isEmpty(acknowledgeMode)) {
1:             return acknowledgeMode;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setAcknowledgeMode(String acknowledgeMode) {
1:         this.acknowledgeMode = acknowledgeMode;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public String getClientId() {
1:         if (!isEmpty(clientId)) {
1:             return clientId;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * 
1:      */
0:     public void setClientId(String clientId) {        
0:         this.clientId = clientId;            
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public String getDestination() {
1:         if (!isEmpty(destination)) {
1:             return destination;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setDestination(String destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public String getSubscriptionDurability() {
0:         if (!isEmpty(subscriptionDurability)) {                
1:             return subscriptionDurability;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setSubscriptionDurability(String subscriptionDurability) {
1:         this.subscriptionDurability = subscriptionDurability;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public String getSubscriptionName() {
1:         if (!isEmpty(subscriptionName)) {
1:             return subscriptionName;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setSubscriptionName(String subscriptionName) {
1:         this.subscriptionName = subscriptionName;
1:     }
1:     
0:     private boolean isValidSubscriptionName(List errorMessages) {
0:         if( !isDurableSubscription() ? true : subscriptionName != null && subscriptionName.trim().length() > 0 ) {
1:             return true;
1:         } 
1:         errorMessages.add("subscriptionName must be set since durable subscription was requested.");
1:         return false;
1:     }
1: 
0:     private boolean isValidClientId(List errorMessages) {
0:         if( !isDurableSubscription() ? true : clientId != null && clientId.trim().length() > 0 ) {
1:             return true;
1:         }
1:         errorMessages.add("clientId must be set since durable subscription was requested.");
1:         return false;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public boolean isDurableSubscription() {
1:         return DURABLE_SUBSCRIPTION.equals(subscriptionDurability);
1:     }
1: 
0:     private boolean isValidSubscriptionDurability(List errorMessages) {
0:         // subscriptionDurability only applies to Topics
0:         if ( DURABLE_SUBSCRIPTION.equals(subscriptionDurability) &&
0:              getDestinationType() != null && !Topic.class.getName().equals(getDestinationType())) {
0:             errorMessages.add("subscriptionDurability cannot be set to: "+DURABLE_SUBSCRIPTION+" when destinationType is set to "+
0:                 Queue.class.getName()+" as it is only valid when destinationType is set to "+Topic.class.getName()+".");
1:             return false;
1:         }
0:         if (NON_DURABLE_SUBSCRIPTION.equals(subscriptionDurability) || DURABLE_SUBSCRIPTION.equals(subscriptionDurability))
1:             return true;
0:         errorMessages.add("subscriptionDurability must be set to: "+NON_DURABLE_SUBSCRIPTION+" or "+DURABLE_SUBSCRIPTION+".");
1:         return false;
1:     }
1: 
0:     private boolean isValidAcknowledgeMode(List errorMessages) {
0:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) || DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode))
1:             return true;
0:         errorMessages.add("acknowledgeMode must be set to: "+AUTO_ACKNOWLEDGE_MODE+" or "+DUPS_OK_ACKNOWLEDGE_MODE+".");
1:         return false;
1:     }
1: 
0:     private boolean isValidDestinationType(List errorMessages) {
0:         if (Queue.class.getName().equals(destinationType) || Topic.class.getName().equals(destinationType))
1:             return true;
0:         errorMessages.add("destinationType must be set to: "+Queue.class.getName()+" or "+Topic.class.getName()+".");
1:         return false;
1:     }
1: 
0:     private boolean isValidDestination(List errorMessages) {
0:         if(!(destination == null || destination.equals(""))) 
1:             return true;
1:         errorMessages.add("destination is a required field and must be set to the destination name.");
1:         return false;
1:     }
1:      
0:     private boolean isEmpty(String value) {
1:         return value == null || "".equals(value.trim());
1:     }
1: 
1:     /**
1:      * 
1:      */
0:    @Override
0: public String toString() {
0:         return "ActiveMQActivationSpec{" +
0:                 "acknowledgeMode='" + acknowledgeMode + "'" +
0:                 ", destinationType='" + destinationType + "'" +
0:                 ", messageSelector='" + messageSelector + "'" +
0:                 ", destination='" + destination + "'" +
0:                 ", clientId='" + clientId + "'" +
0:                 ", subscriptionName='" + subscriptionName + "'" +
0:                 ", subscriptionDurability='" + subscriptionDurability + "'" +
0:                 "}";
1:     }
1: 
0:    public int getAcknowledgeModeForSession() {
0:         if( AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) ) {
1:             return Session.AUTO_ACKNOWLEDGE;
0:         } else if( DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode) ) {
1:             return Session.DUPS_OK_ACKNOWLEDGE;
1:         } else {
1:             return INVALID_ACKNOWLEDGE_MODE;
1:         }
1:     }
1:     
1:     /**
0:      * A helper method mostly for use in Dependency Injection containers
0:      * which allows you to customize the destination and destinationType properties
1:      * from a single ActiveMQDestination POJO
1:      */
1:     public void setActiveMQDestination(ActiveMQDestination destination) {
1:         setDestination(destination.getPhysicalName());
1:         if (destination instanceof Queue) {
1:             setDestinationType(Queue.class.getName());
1:         }
0:         else {
1:             setDestinationType(Topic.class.getName());
1:         }
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public ActiveMQDestination createDestination() {
0:         if( isEmpty(destinationType) || isEmpty(destination) )
1:             return null;
1:         
1:         ActiveMQDestination dest = null;
1:         if (Queue.class.getName().equals(destinationType)) {
1:             dest = new ActiveMQQueue(destination);
1:         } else if (Topic.class.getName().equals(destinationType)) {
1:             dest = new ActiveMQTopic(destination);
1:         } else {
1:             assert false : "Execution should never reach here";
1:         }
1:         return dest;
1:     }
1: 
1:     public String getMaxMessagesPerSessions() {
0:         return maxMessagesPerSessions.toString();
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public void setMaxMessagesPerSessions(String maxMessagesPerSessions) {
0:         if( maxMessagesPerSessions!=null ) {
1:             this.maxMessagesPerSessions = maxMessagesPerSessions;
1:         }
1:     }    
1: 
1:     /**
1:      * 
1:      */
1:     public String getMaxSessions() {
1:         return maxSessions;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setMaxSessions(String maxSessions) {
0:         if( maxSessions!=null ) {
1:             this.maxSessions = maxSessions;
1:         }
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public String getUseRAManagedTransaction() {
1:         return useRAManagedTransaction;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public void setUseRAManagedTransaction(String useRAManagedTransaction) {
0:         if( useRAManagedTransaction!=null ) {
1:             this.useRAManagedTransaction = useRAManagedTransaction;
1:         }
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public int getMaxMessagesPerSessionsIntValue() {
1:         return Integer.parseInt(maxMessagesPerSessions);
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public int getMaxSessionsIntValue() {
1:         return Integer.parseInt(maxSessions);
1:     }
1: 
1:     public boolean isUseRAManagedTransactionEnabled() {
0:         return new Boolean(useRAManagedTransaction).booleanValue();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public boolean getNoLocalBooleanValue() {
0:         return new Boolean(noLocal).booleanValue();
1:     }
1: 
1:     public String getEnableBatch() {
1:         return enableBatch;
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setEnableBatch(String enableBatch) {
1:         if (enableBatch != null) {
1:             this.enableBatch = enableBatch;
1:         }
1:     }
1: 
1:     public boolean getEnableBatchBooleanValue() {
0:         return new Boolean(enableBatch).booleanValue();
1:     }
1: 
1:     public int getMaxMessagesPerBatchIntValue() {
1:         return Integer.parseInt(maxMessagesPerBatch);
1:     }
1: 
1:     public String getMaxMessagesPerBatch() {
0:         return maxMessagesPerBatch.toString();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setMaxMessagesPerBatch(String maxMessagesPerBatch) {
1:         if (maxMessagesPerBatch != null) {
1:             this.maxMessagesPerBatch = maxMessagesPerBatch;
1:         }
1:     }
1: 
1:     /**
1:      * 
1:      */
0:     public short getBackOffMultiplier() {
1:         if (redeliveryPolicy == null) {
1:             return 0;
1:         }
1:         return redeliveryPolicy.getBackOffMultiplier();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public long getInitialRedeliveryDelay() {
1:         if (redeliveryPolicy == null) {
1:             return 0;
1:         }
1:         return redeliveryPolicy.getInitialRedeliveryDelay();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public int getMaximumRedeliveries() {
1:         if (redeliveryPolicy == null) {
1:             return 0;
1:         }
1:         return redeliveryPolicy.getMaximumRedeliveries();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public boolean isUseExponentialBackOff() {
1:         if (redeliveryPolicy == null) {
1:             return false;
1:         }
1:         return redeliveryPolicy.isUseExponentialBackOff();
1:     }
1: 
1:     /**
1:      * 
1:      */
0:     public void setBackOffMultiplier(short backOffMultiplier) {
1:         lazyCreateRedeliveryPolicy().setBackOffMultiplier(backOffMultiplier);
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setInitialRedeliveryDelay(long initialRedeliveryDelay) {
1:         lazyCreateRedeliveryPolicy().setInitialRedeliveryDelay(initialRedeliveryDelay);
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setMaximumRedeliveries(int maximumRedeliveries) {
1:         lazyCreateRedeliveryPolicy().setMaximumRedeliveries(maximumRedeliveries);
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:         lazyCreateRedeliveryPolicy().setUseExponentialBackOff(useExponentialBackOff);
1:     }
1: 
1:     // don't use getter to avoid causing introspection errors in containers
1:     /**
1:      * 
1:      */
1:     public RedeliveryPolicy redeliveryPolicy() {
1:         return redeliveryPolicy;
1:     }
1:     
0:     protected RedeliveryPolicy lazyCreateRedeliveryPolicy() {
1:         if (redeliveryPolicy == null) {
1:             redeliveryPolicy = new RedeliveryPolicy();
1:         }
1:         return redeliveryPolicy;
1:     }
1: }
1: 
commit:d7355e7
/////////////////////////////////////////////////////////////////////////
commit:3fcd7ca
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean element="activationSpec"
commit:27a677f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.RedeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
0:     private RedeliveryPolicy redeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
0:     public short getBackOffMultiplier() {
0:         if (redeliveryPolicy == null) {
0:             return 0;
0:         }
0:         return redeliveryPolicy.getBackOffMultiplier();
0:     }
0: 
0:     public long getInitialRedeliveryDelay() {
0:         if (redeliveryPolicy == null) {
0:             return 0;
0:         }
0:         return redeliveryPolicy.getInitialRedeliveryDelay();
0:     }
0: 
0:     public int getMaximumRedeliveries() {
0:         if (redeliveryPolicy == null) {
0:             return 0;
0:         }
0:         return redeliveryPolicy.getMaximumRedeliveries();
0:     }
0: 
0:     public boolean isUseExponentialBackOff() {
0:         if (redeliveryPolicy == null) {
0:             return false;
0:         }
0:         return redeliveryPolicy.isUseExponentialBackOff();
0:     }
0: 
0:     public void setBackOffMultiplier(short backOffMultiplier) {
0:         lazyCreateRedeliveryPolicy().setBackOffMultiplier(backOffMultiplier);
0:     }
0: 
0:     public void setInitialRedeliveryDelay(long initialRedeliveryDelay) {
0:         lazyCreateRedeliveryPolicy().setInitialRedeliveryDelay(initialRedeliveryDelay);
0:     }
0: 
0:     public void setMaximumRedeliveries(int maximumRedeliveries) {
0:         lazyCreateRedeliveryPolicy().setMaximumRedeliveries(maximumRedeliveries);
0:     }
0: 
0:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
0:         lazyCreateRedeliveryPolicy().setUseExponentialBackOff(useExponentialBackOff);
0:     }
0: 
0:     // don't use getter to avoid causing introspection errors in containers
0:     public RedeliveryPolicy redeliveryPolicy() {
0:         return redeliveryPolicy;
0:     }
0:     
0:     protected RedeliveryPolicy lazyCreateRedeliveryPolicy() {
0:         if (redeliveryPolicy == null) {
0:             redeliveryPolicy = new RedeliveryPolicy();
0:         }
0:         return redeliveryPolicy;
0:     }
0: 
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  *
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  *
0:  **/
0: package org.activemq.ra;
0: 
0: import java.beans.IntrospectionException;
0: import java.beans.PropertyDescriptor;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import javax.jms.Topic;
0: import javax.resource.ResourceException;
0: import javax.resource.spi.ActivationSpec;
0: import javax.resource.spi.InvalidPropertyException;
0: import javax.resource.spi.ResourceAdapter;
0: 
0: import org.activemq.command.ActiveMQDestination;
0: import org.activemq.command.ActiveMQQueue;
0: import org.activemq.command.ActiveMQTopic;
0: import org.activemq.selector.SelectorParser;
0: 
0: /**
0:  * Configures the inbound JMS consumer specification using ActiveMQ
0:  * 
0:  * @org.xbean.XBean 
0:  * 
0:  * @version $Revision$ $Date$
0:  */
0: public class ActiveMQActivationSpec implements ActivationSpec {
0: 
0:     /** Auto-acknowledge constant for <code>acknowledgeMode</code> property **/
0:     public static final String AUTO_ACKNOWLEDGE_MODE = "Auto-acknowledge";
0:     /** Dups-ok-acknowledge constant for <code>acknowledgeMode</code> property * */
0:     public static final String DUPS_OK_ACKNOWLEDGE_MODE = "Dups-ok-acknowledge";    
0:     /** Durable constant for <code>subscriptionDurability</code> property * */
0:     public static final String DURABLE_SUBSCRIPTION = "Durable";
0:     /** NonDurable constant for <code>subscriptionDurability</code> property * */
0:     public static final String NON_DURABLE_SUBSCRIPTION = "NonDurable";
0:     
0:     public static final int INVALID_ACKNOWLEDGE_MODE = -1;
0:     
0:     private ActiveMQResourceAdapter resourceAdapter;
0:     private String destinationType;
0:     private String messageSelector;
0:     private String destination;
0:     private String acknowledgeMode = AUTO_ACKNOWLEDGE_MODE;
0:     private String userName;
0:     private String password;
0:     private String clientId;
0:     private String subscriptionName;
0:     private String subscriptionDurability = NON_DURABLE_SUBSCRIPTION;    
0:     private String noLocal = "false";
0:     private String useRAManagedTransaction = "false";
0:     private String maxSessions="10";
0:     private String maxMessagesPerSessions="10";
0:     private String enableBatch = "false";
0:     private String maxMessagesPerBatch = "10";
0: 
0:     
0:     /**
0:      * @see javax.resource.spi.ActivationSpec#validate()
0:      */
0:     public void validate() throws InvalidPropertyException {
0:         List errorMessages = new ArrayList();
0:         List propsNotSet = new ArrayList();
0:         try {
0:             if (!isValidDestination(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("destination", ActiveMQActivationSpec.class));
0:             if (!isValidDestinationType(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("destinationType", ActiveMQActivationSpec.class));
0:             if (!isValidAcknowledgeMode(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("acknowledgeMode", ActiveMQActivationSpec.class));
0:             if (!isValidSubscriptionDurability(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("subscriptionDurability", ActiveMQActivationSpec.class));
0:             if (!isValidClientId(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("clientId", ActiveMQActivationSpec.class));
0:             if (!isValidSubscriptionName(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("subscriptionName", ActiveMQActivationSpec.class));
0:             if (!isValidMaxMessagesPerSessions(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerSessions", ActiveMQActivationSpec.class));
0:             if (!isValidMaxSessions(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("maxSessions", ActiveMQActivationSpec.class));
0:             if (!isValidMessageSelector(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("messageSelector", ActiveMQActivationSpec.class));
0:             if (!isValidNoLocal(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("noLocal", ActiveMQActivationSpec.class));
0:             if (!isValidUseRAManagedTransaction(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("useRAManagedTransaction", ActiveMQActivationSpec.class));
0:             if (!isValidEnableBatch(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("enableBatch", ActiveMQActivationSpec.class));
0:             if (!isValidMaxMessagesPerBatch(errorMessages))
0:                 propsNotSet.add(new PropertyDescriptor("maxMessagesPerBatch", ActiveMQActivationSpec.class));
0: 
0:             
0:         } catch (IntrospectionException e) {
0:             e.printStackTrace();
0:         }
0:         
0:         if (propsNotSet.size() > 0) {
0:             StringBuffer b = new StringBuffer();
0:             b.append("Invalid settings:");
0:             for (Iterator iter = errorMessages.iterator(); iter.hasNext();) {
0:                 b.append(" ");
0:                 b.append(iter.next());
0:             }
0:             InvalidPropertyException e = new InvalidPropertyException(b.toString());
0:             final PropertyDescriptor[] descriptors = (PropertyDescriptor[]) propsNotSet.toArray(new PropertyDescriptor[propsNotSet.size()]);
0:             e.setInvalidPropertyDescriptors(descriptors);
0:             throw e;
0:         }
0:     }
0: 
0:     private boolean isValidUseRAManagedTransaction(List errorMessages) {
0:         try {
0:             new Boolean(noLocal);
0:             return true;
0:         } catch (Throwable e) {
0:         }
0:         errorMessages.add("noLocal must be set to: true or false.");
0:         return false;
0:     }
0: 
0:     private boolean isValidNoLocal(List errorMessages) {
0:         try {
0:             new Boolean(noLocal);
0:             return true;
0:         } catch (Throwable e) {
0:         }
0:         errorMessages.add("noLocal must be set to: true or false.");
0:         return false;
0:     }
0: 
0:     private boolean isValidMessageSelector(List errorMessages) {
0:         try {
0:             if( !isEmpty(messageSelector) ) {
0:                 new SelectorParser().parse(messageSelector);
0:             }
0:             return true;
0:         } catch (Throwable e) {
0:             errorMessages.add("messageSelector not set to valid message selector: "+e.getMessage());
0:             return false;
0:         }
0:     }
0: 
0:     private boolean isValidMaxSessions(List errorMessages) {
0:         try {
0:             if( Integer.parseInt(maxSessions) > 0 ) {
0:                 return true;
0:             }
0:         } catch (NumberFormatException e) {
0:         }
0:         errorMessages.add("maxSessions must be set to number > 0");
0:         return false;
0:     }
0: 
0:     private boolean isValidMaxMessagesPerSessions(List errorMessages) {
0:         try {
0:             if( Integer.parseInt(maxMessagesPerSessions) > 0 ) {
0:                 return true;
0:             }
0:         } catch (NumberFormatException e) {
0:         }
0:         errorMessages.add("maxMessagesPerSessions must be set to number > 0");
0:         return false;
0:     }
0: 
0:     private boolean isValidMaxMessagesPerBatch(List errorMessages) {
0:         try {
0:             if( Integer.parseInt(maxMessagesPerBatch) > 0 ) {
0:                 return true;
0:             }
0:         } catch (NumberFormatException e) {
0:         }
0:         errorMessages.add("maxMessagesPerBatch must be set to number > 0");
0:         return false;
0:     }
0: 
0:     private boolean isValidEnableBatch(List errorMessages) {
0:         try {
0:             new Boolean(enableBatch);
0:             return true;
0:         } catch (Throwable e) {
0:         }
0:         errorMessages.add("enableBatch must be set to: true or false");
0:         return false;
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()
0:      */
0:     public ResourceAdapter getResourceAdapter() {
0:         return resourceAdapter;
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)
0:      */
0:     public void setResourceAdapter(ResourceAdapter resourceAdapter) throws ResourceException {
0:         //spec section 5.3.3
0:         if (this.resourceAdapter != null) {
0:             throw new ResourceException("ResourceAdapter already set");
0:         }
0:         if (!(resourceAdapter instanceof ActiveMQResourceAdapter)) {
0:             throw new ResourceException("ResourceAdapter is not of type: " + ActiveMQResourceAdapter.class.getName());
0:         }
0:         this.resourceAdapter = (ActiveMQResourceAdapter) resourceAdapter;
0:     }
0: 
0: 
0:     /////////////////////////////////////////////////////////////////////////
0:     //
0:     // Java Bean getters and setters for this ActivationSpec class.
0:     //
0:     /////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return Returns the destinationType.
0:      */
0:     public String getDestinationType() {
0:         if (!isEmpty(destinationType)) {
0:             return destinationType;
0:         }
0:         return null;
0:     }
0: 
0:     /**
0:      * @param destinationType The destinationType to set.
0:      */
0:     public void setDestinationType(String destinationType) {
0:         this.destinationType = destinationType;
0:     }
0:     
0:     public String getPassword() {
0:         if (!isEmpty(password)) {                
0:             return password;
0:         }
0:         return null;
0:     }
0:     
0:     public void setPassword(String password) {
0:         this.password = password;
0:     }
0: 
0:     public String getUserName() {
0:         if (!isEmpty(userName)) {        
0:             return userName;
0:         }
0:         return null;
0:     }
0:     
0:     public void setUserName(String userName) {
0:         this.userName = userName;
0:     }
0:     
0:     /**
0:      * @return Returns the messageSelector.
0:      */
0:     public String getMessageSelector() {
0:         if (!isEmpty(messageSelector)) {
0:             return messageSelector;
0:         }
0:         return null;
0:     }
0: 
0:     /**
0:      * @param messageSelector The messageSelector to set.
0:      */
0:     public void setMessageSelector(String messageSelector) {
0:         this.messageSelector = messageSelector;
0:     }
0: 
0:     /**
0:      * @return Returns the noLocal.
0:      */
0:     public String getNoLocal() {
0:         return noLocal;
0:     }
0: 
0:     /**
0:      * @param noLocal The noLocal to set.
0:      */
0:     public void setNoLocal(String noLocal) {
0:         if( noLocal!=null ) {
0:             this.noLocal = noLocal;
0:         }
0:     }
0: 
0:     public String getAcknowledgeMode() {
0:         if (!isEmpty(acknowledgeMode)) {
0:             return acknowledgeMode;
0:         }
0:         return null;
0:     }
0: 
0:     public void setAcknowledgeMode(String acknowledgeMode) {
0:         this.acknowledgeMode = acknowledgeMode;
0:     }
0:     
0:     public String getClientId() {
0:         if (!isEmpty(clientId)) {
0:             return clientId;
0:         }
0:         return null;
0:     }
0: 
0:     public void setClientId(String clientId) {        
0:         this.clientId = clientId;            
0:     }
0: 
0:     public String getDestination() {
0:         if (!isEmpty(destination)) {
0:             return destination;
0:         }
0:         return null;
0:     }
0: 
0:     public void setDestination(String destination) {
0:         this.destination = destination;
0:     }
0: 
0:     public String getSubscriptionDurability() {
0:         if (!isEmpty(subscriptionDurability)) {                
0:             return subscriptionDurability;
0:         }
0:         return null;
0:     }
0: 
0:     public void setSubscriptionDurability(String subscriptionDurability) {
0:         this.subscriptionDurability = subscriptionDurability;
0:     }
0: 
0:     public String getSubscriptionName() {
0:         if (!isEmpty(subscriptionName)) {
0:             return subscriptionName;
0:         }
0:         return null;
0:     }
0: 
0:     public void setSubscriptionName(String subscriptionName) {
0:         this.subscriptionName = subscriptionName;
0:     }
0:     
0:     private boolean isValidSubscriptionName(List errorMessages) {
0:         if( !isDurableSubscription() ? true : subscriptionName != null && subscriptionName.trim().length() > 0 ) {
0:             return true;
0:         } 
0:         errorMessages.add("subscriptionName must be set since durable subscription was requested.");
0:         return false;
0:     }
0: 
0:     private boolean isValidClientId(List errorMessages) {
0:         if( !isDurableSubscription() ? true : clientId != null && clientId.trim().length() > 0 ) {
0:             return true;
0:         }
0:         errorMessages.add("clientId must be set since durable subscription was requested.");
0:         return false;
0:     }
0: 
0:     public boolean isDurableSubscription() {
0:         return DURABLE_SUBSCRIPTION.equals(subscriptionDurability);
0:     }
0: 
0:     private boolean isValidSubscriptionDurability(List errorMessages) {
0:         if (NON_DURABLE_SUBSCRIPTION.equals(subscriptionDurability) || DURABLE_SUBSCRIPTION.equals(subscriptionDurability))
0:             return true;
0:         errorMessages.add("subscriptionDurability must be set to: "+NON_DURABLE_SUBSCRIPTION+" or "+DURABLE_SUBSCRIPTION+".");
0:         return false;
0:     }
0: 
0:     private boolean isValidAcknowledgeMode(List errorMessages) {
0:         if (AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) || DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode))
0:             return true;
0:         errorMessages.add("acknowledgeMode must be set to: "+AUTO_ACKNOWLEDGE_MODE+" or "+DUPS_OK_ACKNOWLEDGE_MODE+".");
0:         return false;
0:     }
0: 
0:     private boolean isValidDestinationType(List errorMessages) {
0:         if (Queue.class.getName().equals(destinationType) || Topic.class.getName().equals(destinationType))
0:             return true;
0:         errorMessages.add("destinationType must be set to: "+Queue.class.getName()+" or "+Topic.class.getName()+".");
0:         return false;
0:     }
0: 
0:     private boolean isValidDestination(List errorMessages) {
0:         if(!(destination == null || destination.equals(""))) 
0:             return true;
0:         errorMessages.add("destination is a required field and must be set to the destination name.");
0:         return false;
0:     }
0:      
0:     private boolean isEmpty(String value) {
0:         return value == null || "".equals(value.trim());
0:     }
0: 
0:    public String toString() {
0:         return "ActiveMQActivationSpec{" +
0:                 "acknowledgeMode='" + acknowledgeMode + "'" +
0:                 ", destinationType='" + destinationType + "'" +
0:                 ", messageSelector='" + messageSelector + "'" +
0:                 ", destination='" + destination + "'" +
0:                 ", clientId='" + clientId + "'" +
0:                 ", subscriptionName='" + subscriptionName + "'" +
0:                 ", subscriptionDurability='" + subscriptionDurability + "'" +
0:                 "}";
0:     }
0: 
0:     public int getAcknowledgeModeForSession() { 
0:         if( AUTO_ACKNOWLEDGE_MODE.equals(acknowledgeMode) ) {
0:             return Session.AUTO_ACKNOWLEDGE;
0:         } else if( DUPS_OK_ACKNOWLEDGE_MODE.equals(acknowledgeMode) ) {
0:             return Session.DUPS_OK_ACKNOWLEDGE;
0:         } else {
0:             return INVALID_ACKNOWLEDGE_MODE;
0:         }
0:     }
0:     
0:     /**
0:      * A helper method mostly for use in Dependency Injection containers
0:      * which allows you to customize the destination and destinationType properties
0:      * from a single ActiveMQDestination POJO
0:      */
0:     public void setActiveMQDestination(ActiveMQDestination destination) {
0:         setDestination(destination.getPhysicalName());
0:         if (destination instanceof Queue) {
0:             setDestinationType(Queue.class.getName());
0:         }
0:         else {
0:             setDestinationType(Topic.class.getName());
0:         }
0:     }
0: 
0:     public ActiveMQDestination createDestination() {
0:         if( isEmpty(destinationType) || isEmpty(destination) )
0:             return null;
0:         
0:         ActiveMQDestination dest = null;
0:         if (Queue.class.getName().equals(destinationType)) {
0:             dest = new ActiveMQQueue(destination);
0:         } else if (Topic.class.getName().equals(destinationType)) {
0:             dest = new ActiveMQTopic(destination);
0:         } else {
0:             assert false : "Execution should never reach here";
0:         }
0:         return dest;
0:     }
0: 
0:     public String getMaxMessagesPerSessions() {
0:         return maxMessagesPerSessions.toString();
0:     }
0:     
0:     public void setMaxMessagesPerSessions(String maxMessagesPerSessions) {
0:         if( maxMessagesPerSessions!=null ) {
0:             this.maxMessagesPerSessions = maxMessagesPerSessions;
0:         }
0:     }
0:     
0: 
0:     public String getMaxSessions() {
0:         return maxSessions;
0:     }
0:     public void setMaxSessions(String maxSessions) {
0:         if( maxSessions!=null ) {
0:             this.maxSessions = maxSessions;
0:         }
0:     }
0:     
0:     public String getUseRAManagedTransaction() {
0:         return useRAManagedTransaction;
0:     }
0:     
0:     public void setUseRAManagedTransaction(String useRAManagedTransaction) {
0:         if( useRAManagedTransaction!=null ) {
0:             this.useRAManagedTransaction = useRAManagedTransaction;
0:         }
0:     }
0: 
0:     public int getMaxMessagesPerSessionsIntValue() {
0:         return Integer.parseInt(maxMessagesPerSessions);
0:     }
0: 
0:     public int getMaxSessionsIntValue() {
0:         return Integer.parseInt(maxSessions);
0:     }
0: 
0:     public boolean isUseRAManagedTransactionEnabled() {
0:         return new Boolean(useRAManagedTransaction).booleanValue();
0:     }
0: 
0:     public boolean getNoLocalBooleanValue() {
0:         return new Boolean(noLocal).booleanValue();
0:     }
0: 
0:     public String getEnableBatch() {
0:         return enableBatch;
0:     }
0: 
0:     public void setEnableBatch(String enableBatch) {
0:         if (enableBatch != null) {
0:             this.enableBatch = enableBatch;
0:         }
0:     }
0: 
0:     public boolean getEnableBatchBooleanValue() {
0:         return new Boolean(enableBatch).booleanValue();
0:     }
0: 
0:     public int getMaxMessagesPerBatchIntValue() {
0:         return Integer.parseInt(maxMessagesPerBatch);
0:     }
0: 
0:     public String getMaxMessagesPerBatch() {
0:         return maxMessagesPerBatch.toString();
0:     }
0: 
0:     public void setMaxMessagesPerBatch(String maxMessagesPerBatch) {
0:         if (maxMessagesPerBatch != null) {
0:             this.maxMessagesPerBatch = maxMessagesPerBatch;
0:         }
0:     }
0: 
0: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
0:  * Licensed under the Apache License, Version 2.0 (the "License");
/////////////////////////////////////////////////////////////////////////
0:  */
============================================================================