1:257a79d: /**
1:257a79d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:257a79d:  * contributor license agreements.  See the NOTICE file distributed with
1:257a79d:  * this work for additional information regarding copyright ownership.
1:257a79d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:257a79d:  * (the "License"); you may not use this file except in compliance with
1:257a79d:  * the License.  You may obtain a copy of the License at
1:257a79d:  *
1:257a79d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:257a79d:  *
1:257a79d:  * Unless required by applicable law or agreed to in writing, software
1:257a79d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:257a79d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:257a79d:  * See the License for the specific language governing permissions and
1:257a79d:  * limitations under the License.
1:257a79d:  */
1:257a79d: package org.apache.activemq.util;
1:257a79d: 
1:2a815c2: import java.io.*;
1:257a79d: import java.net.ServerSocket;
1:257a79d: import java.util.ArrayList;
1:257a79d: import java.util.Collections;
1:257a79d: import java.util.List;
1:2a815c2: import java.util.concurrent.atomic.AtomicLong;
1:257a79d: 
1:257a79d: import javax.net.ServerSocketFactory;
1:2a815c2: import javax.transaction.xa.Xid;
1:257a79d: 
1:257a79d: public class TestUtils {
1:257a79d: 
1:257a79d:     public static final int DEFAULT_PORT = 61616;
1:257a79d: 
1:257a79d:     public static int findOpenPort() {
1:257a79d:         return findOpenPorts(1).get(0);
1:257a79d:     }
1:257a79d: 
1:257a79d:     public static List<Integer> findOpenPorts(int count) {
1:257a79d:         if (count <= 0) {
1:257a79d:             return Collections.emptyList();
1:257a79d:         }
1:257a79d: 
1:257a79d:         List<ServerSocket> sockets = new ArrayList<ServerSocket>(count);
1:257a79d:         List<Integer> ports = new ArrayList<Integer>(count);
1:257a79d:         List<Integer> safeSet = new ArrayList<Integer>(count);
1:257a79d: 
1:257a79d:         // Pre-fill with a sane default set.
1:257a79d:         for (int i = 0; i < count; ++i) {
1:257a79d:             safeSet.add(DEFAULT_PORT + i);
1:257a79d:         }
1:257a79d: 
1:257a79d:         try {
1:257a79d:             for (int i = 0; i < count; ++i) {
1:257a79d:                 ServerSocket socket = ServerSocketFactory.getDefault().createServerSocket(0);
1:257a79d: 
1:257a79d:                 sockets.add(socket);
1:257a79d:                 ports.add(socket.getLocalPort());
1:257a79d:             }
1:257a79d:         } catch (IOException e) {
1:257a79d:             return safeSet;
1:257a79d:         } finally {
1:257a79d:             for (ServerSocket socket : sockets) {
1:257a79d:                 try {
1:257a79d:                     socket.close();
1:257a79d:                 } catch (IOException e) {}
1:257a79d:             }
1:257a79d:         }
1:257a79d: 
1:257a79d:         return ports;
1:257a79d:     }
1:2a815c2: 
1:2a815c2:     private static AtomicLong txGenerator = new AtomicLong(System.currentTimeMillis());
1:2a815c2:     public static Xid createXid() throws IOException {
1:2a815c2: 
1:2a815c2:         java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
1:2a815c2:         DataOutputStream os = new DataOutputStream(baos);
1:2a815c2:         os.writeLong(txGenerator.incrementAndGet());
1:2a815c2:         os.close();
1:2a815c2:         final byte[] bs = baos.toByteArray();
1:2a815c2: 
1:2a815c2:         return new Xid() {
1:2a815c2:             @Override
1:2a815c2:             public int getFormatId() {
1:2a815c2:                 return 86;
1:2a815c2:             }
1:2a815c2: 
1:2a815c2:             @Override
1:2a815c2:             public byte[] getGlobalTransactionId() {
1:2a815c2:                 return bs;
1:2a815c2:             }
1:2a815c2: 
1:2a815c2:             @Override
1:2a815c2:             public byte[] getBranchQualifier() {
1:2a815c2:                 return bs;
1:2a815c2:             }
1:2a815c2:         };
1:2a815c2:     }
1:2a815c2: 
1:257a79d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2a815c2
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.transaction.xa.Xid;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static AtomicLong txGenerator = new AtomicLong(System.currentTimeMillis());
1:     public static Xid createXid() throws IOException {
1: 
1:         java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(txGenerator.incrementAndGet());
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             @Override
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             @Override
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             @Override
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:257a79d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import javax.net.ServerSocketFactory;
1: 
1: public class TestUtils {
1: 
1:     public static final int DEFAULT_PORT = 61616;
1: 
1:     public static int findOpenPort() {
1:         return findOpenPorts(1).get(0);
1:     }
1: 
1:     public static List<Integer> findOpenPorts(int count) {
1:         if (count <= 0) {
1:             return Collections.emptyList();
1:         }
1: 
1:         List<ServerSocket> sockets = new ArrayList<ServerSocket>(count);
1:         List<Integer> ports = new ArrayList<Integer>(count);
1:         List<Integer> safeSet = new ArrayList<Integer>(count);
1: 
1:         // Pre-fill with a sane default set.
1:         for (int i = 0; i < count; ++i) {
1:             safeSet.add(DEFAULT_PORT + i);
1:         }
1: 
1:         try {
1:             for (int i = 0; i < count; ++i) {
1:                 ServerSocket socket = ServerSocketFactory.getDefault().createServerSocket(0);
1: 
1:                 sockets.add(socket);
1:                 ports.add(socket.getLocalPort());
1:             }
1:         } catch (IOException e) {
1:             return safeSet;
1:         } finally {
1:             for (ServerSocket socket : sockets) {
1:                 try {
1:                     socket.close();
1:                 } catch (IOException e) {}
1:             }
1:         }
1: 
1:         return ports;
1:     }
1: }
============================================================================