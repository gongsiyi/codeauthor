1:00879cf: /**
1:00879cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:00879cf:  * contributor license agreements.  See the NOTICE file distributed with
1:00879cf:  * this work for additional information regarding copyright ownership.
1:00879cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:00879cf:  * (the "License"); you may not use this file except in compliance with
1:00879cf:  * the License.  You may obtain a copy of the License at
1:00879cf:  *
1:00879cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:00879cf:  *
1:00879cf:  * Unless required by applicable law or agreed to in writing, software
1:00879cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:00879cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00879cf:  * See the License for the specific language governing permissions and
1:00879cf:  * limitations under the License.
1:00879cf:  */
1:00879cf: package org.apache.activemq.broker.region.cursors;
5:00879cf: 
1:2b84cd6: import static org.apache.activemq.broker.region.cursors.OrderedPendingList.getValues;
1:c1b58d3: 
1:c1b58d3: import java.util.ArrayDeque;
1:cb1b92b: import java.util.Collection;
1:c1b58d3: import java.util.Deque;
1:00879cf: import java.util.HashMap;
1:00879cf: import java.util.Iterator;
1:f47b370: import java.util.List;
1:00879cf: import java.util.Map;
1:cb1b92b: 
1:00879cf: import org.apache.activemq.broker.region.MessageReference;
1:00879cf: import org.apache.activemq.command.MessageId;
1:734fb7d: import org.apache.activemq.management.SizeStatisticImpl;
1:2b84cd6: 
1:00879cf: public class PrioritizedPendingList implements PendingList {
1:2b84cd6: 
1:cb1b92b:     private static final Integer MAX_PRIORITY = 10;
1:00879cf:     private final OrderedPendingList[] lists = new OrderedPendingList[MAX_PRIORITY];
1:cb1b92b:     private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
1:734fb7d:     private final SizeStatisticImpl messageSize;
1:734fb7d:     private final PendingMessageHelper pendingMessageHelper;
1:734fb7d: 
1:cb1b92b: 
1:00879cf:     public PrioritizedPendingList() {
1:00879cf:         for (int i = 0; i < MAX_PRIORITY; i++) {
1:00879cf:             this.lists[i] = new OrderedPendingList();
5:00879cf:         }
1:734fb7d:         messageSize = new SizeStatisticImpl("messageSize", "The size in bytes of the pending messages");
1:734fb7d:         messageSize.setEnabled(true);
1:734fb7d:         pendingMessageHelper = new PendingMessageHelper(map, messageSize);
1:00879cf:     }
1:cb1b92b: 
1:f47b370:     @Override
1:00879cf:     public PendingNode addMessageFirst(MessageReference message) {
1:00879cf:         PendingNode node = getList(message).addMessageFirst(message);
1:734fb7d:         this.pendingMessageHelper.addToMap(message, node);
1:00879cf:         return node;
1:f47b370:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public PendingNode addMessageLast(MessageReference message) {
1:00879cf:         PendingNode node = getList(message).addMessageLast(message);
1:734fb7d:         this.pendingMessageHelper.addToMap(message, node);
1:00879cf:         return node;
1:f47b370:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public void clear() {
1:00879cf:         for (int i = 0; i < MAX_PRIORITY; i++) {
1:00879cf:             this.lists[i].clear();
1:00879cf:         }
1:00879cf:         this.map.clear();
1:734fb7d:         this.messageSize.reset();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public boolean isEmpty() {
1:00879cf:         return this.map.isEmpty();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public Iterator<MessageReference> iterator() {
1:00879cf:         return new PrioritizedPendingListIterator();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:9c9b856:     public PendingNode remove(MessageReference message) {
1:9c9b856:         PendingNode node = null;
1:00879cf:         if (message != null) {
1:734fb7d:             node = this.pendingMessageHelper.removeFromMap(message);
2:00879cf:             if (node != null) {
2:00879cf:                 node.getList().removeNode(node);
1:cb1b92b:             }
1:cb1b92b:         }
1:9c9b856:         return node;
1:00879cf:     }
1:e947927: 
1:734fb7d:     @Override
1:00879cf:     public int size() {
1:00879cf:         return this.map.size();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:734fb7d:     public long messageSize() {
1:734fb7d:         return this.messageSize.getTotalSize();
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     @Override
1:00879cf:     public String toString() {
1:00879cf:         return "PrioritizedPendingList(" + System.identityHashCode(this) + ")";
1:00879cf:     }
1:00879cf: 
1:00879cf:     protected int getPriority(MessageReference message) {
1:00879cf:         int priority = javax.jms.Message.DEFAULT_PRIORITY;
1:00879cf:         if (message.getMessageId() != null) {
1:c4425ca:             priority = Math.max(message.getMessage().getPriority(), 0);
1:00879cf:             priority = Math.min(priority, 9);
1:00879cf:         }
1:00879cf:         return priority;
1:00879cf:     }
1:00879cf: 
1:00879cf:     protected OrderedPendingList getList(MessageReference msg) {
1:00879cf:         return lists[getPriority(msg)];
1:00879cf:     }
1:00879cf: 
1:c1b58d3:     private final class PrioritizedPendingListIterator implements Iterator<MessageReference> {
1:c1b58d3: 
1:c1b58d3:         private final Deque<Iterator<MessageReference>> iterators = new ArrayDeque<Iterator<MessageReference>>();
1:c1b58d3: 
1:c1b58d3:         private Iterator<MessageReference> current;
1:c1b58d3:         private MessageReference currentMessage;
1:00879cf: 
1:00879cf:         PrioritizedPendingListIterator() {
1:c1b58d3:             for (OrderedPendingList list : lists) {
1:c1b58d3:                 if (!list.isEmpty()) {
1:c1b58d3:                     iterators.push(list.iterator());
1:00879cf:                 }
1:00879cf:             }
1:c1b58d3: 
1:c1b58d3:             current = iterators.poll();
1:00879cf:         }
1:c1b58d3: 
1:734fb7d:         @Override
1:00879cf:         public boolean hasNext() {
1:c1b58d3:             while (current != null) {
1:c1b58d3:                 if (current.hasNext()) {
1:c1b58d3:                     return true;
1:c1b58d3:                 } else {
1:c1b58d3:                     current = iterators.poll();
1:c1b58d3:                 }
1:c1b58d3:             }
1:c1b58d3: 
1:c1b58d3:             return false;
1:00879cf:         }
1:00879cf: 
1:734fb7d:         @Override
1:00879cf:         public MessageReference next() {
1:c1b58d3:             MessageReference result = null;
1:c1b58d3: 
1:c1b58d3:             while (current != null) {
1:c1b58d3:                 if (current.hasNext()) {
1:c1b58d3:                     result = currentMessage = current.next();
1:c1b58d3:                     break;
1:c1b58d3:                 } else {
1:c1b58d3:                     current = iterators.poll();
1:c1b58d3:                 }
1:c1b58d3:             }
1:c1b58d3: 
1:c1b58d3:             return result;
1:00879cf:         }
1:00879cf: 
1:734fb7d:         @Override
1:00879cf:         public void remove() {
1:c1b58d3:             if (currentMessage != null) {
1:c1b58d3:                 pendingMessageHelper.removeFromMap(currentMessage);
1:c1b58d3:                 current.remove();
1:c1b58d3:                 currentMessage = null;
1:00879cf:             }
1:00879cf:         }
1:00879cf:     }
1:00879cf: 
1:e947927:     @Override
1:cb1b92b:     public boolean contains(MessageReference message) {
1:8363c99:         if (message != null) {
1:8363c99:             return this.map.containsKey(message.getMessageId());
1:cb1b92b:         }
1:cb1b92b:         return false;
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Override
1:cb1b92b:     public Collection<MessageReference> values() {
1:2b84cd6:         return getValues(this);
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Override
1:cb1b92b:     public void addAll(PendingList pendingList) {
1:cb1b92b:         for(MessageReference messageReference : pendingList) {
1:cb1b92b:             addMessageLast(messageReference);
1:cb1b92b:         }
1:00879cf:     }
1:00879cf: 
1:cb1b92b:     @Override
1:e947927:     public MessageReference get(MessageId messageId) {
1:e947927:         PendingNode node = map.get(messageId);
1:e947927:         if (node != null) {
1:e947927:             return node.getMessage();
1:e947927:         }
1:e947927:         return null;
1:f47b370:     }
1:f47b370: 
1:e947927: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:604f707
/////////////////////////////////////////////////////////////////////////
commit:f47b370
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public void insertAtHead(List<MessageReference> list) {
0:         // behave like addAll - pure order within priority lists is not required
0:         if (list != null) {
0:             for (MessageReference ref: list) {
0:                 addMessageLast(ref);
1:             }
1:         }
1:     }
1: 
commit:2b84cd6
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.apache.activemq.broker.region.cursors.OrderedPendingList.getValues;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return getValues(this);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c1b58d3
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.broker.region.cursors.OrderedPendingList.getValues;
1: 
1: import java.util.ArrayDeque;
1: import java.util.Deque;
/////////////////////////////////////////////////////////////////////////
1:     private final class PrioritizedPendingListIterator implements Iterator<MessageReference> {
1: 
1:         private final Deque<Iterator<MessageReference>> iterators = new ArrayDeque<Iterator<MessageReference>>();
1: 
1:         private Iterator<MessageReference> current;
1:         private MessageReference currentMessage;
1:             for (OrderedPendingList list : lists) {
1:                 if (!list.isEmpty()) {
1:                     iterators.push(list.iterator());
1: 
1:             current = iterators.poll();
1: 
1:             while (current != null) {
1:                 if (current.hasNext()) {
1:                     return true;
1:                 } else {
1:                     current = iterators.poll();
1:                 }
1:             }
1: 
1:             return false;
1:             MessageReference result = null;
1: 
1:             while (current != null) {
1:                 if (current.hasNext()) {
1:                     result = currentMessage = current.next();
1:                     break;
1:                 } else {
1:                     current = iterators.poll();
1:                 }
1:             }
1: 
1:             return result;
1:             if (currentMessage != null) {
1:                 pendingMessageHelper.removeFromMap(currentMessage);
1:                 current.remove();
1:                 currentMessage = null;
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:8363c99
/////////////////////////////////////////////////////////////////////////
1:         if (message != null) {
1:             return this.map.containsKey(message.getMessageId());
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.management.SizeStatisticImpl;
1:     private final SizeStatisticImpl messageSize;
1:     private final PendingMessageHelper pendingMessageHelper;
1: 
1:         messageSize = new SizeStatisticImpl("messageSize", "The size in bytes of the pending messages");
1:         messageSize.setEnabled(true);
1:         pendingMessageHelper = new PendingMessageHelper(map, messageSize);
1:     @Override
1:         this.pendingMessageHelper.addToMap(message, node);
1:     @Override
1:         this.pendingMessageHelper.addToMap(message, node);
1:     @Override
1:         this.messageSize.reset();
1:     @Override
1:     @Override
1:     @Override
1:             node = this.pendingMessageHelper.removeFromMap(message);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public long messageSize() {
1:         return this.messageSize.getTotalSize();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
0:                 pendingMessageHelper.removeFromMap(node.getMessage());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e947927
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public MessageReference get(MessageId messageId) {
1:         PendingNode node = map.get(messageId);
1:         if (node != null) {
1:             return node.getMessage();
1:         }
1:         return null;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:cb1b92b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
1: 
1:     private static final Integer MAX_PRIORITY = 10;
1:     private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
1:     }
1:     @Override
1:     public boolean contains(MessageReference message) {
0:         if (map.values().contains(message)) {
0:             return true;
1:         return false;
1:     }
1: 
1:     @Override
1:     public Collection<MessageReference> values() {
0:         List<MessageReference> messageReferences = new ArrayList<MessageReference>();
0:         for (PendingNode pendingNode : map.values()) {
0:             messageReferences.add(pendingNode.getMessage());
1:         }
0:         return messageReferences;
1:     }
1: 
1:     @Override
1:     public void addAll(PendingList pendingList) {
1:         for(MessageReference messageReference : pendingList) {
1:             addMessageLast(messageReference);
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9c9b856
/////////////////////////////////////////////////////////////////////////
1:     public PendingNode remove(MessageReference message) {
1:         PendingNode node = null;
0:             node = this.map.remove(message.getMessageId());
1:         return node;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:c4425ca
/////////////////////////////////////////////////////////////////////////
1:             priority = Math.max(message.getMessage().getPriority(), 0);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
0: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
0: import java.util.List;
1: import java.util.Map;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.MessageId;
1: 
1: public class PrioritizedPendingList implements PendingList {
0:     static final Integer MAX_PRIORITY = 10;
1:     private final OrderedPendingList[] lists = new OrderedPendingList[MAX_PRIORITY];
0:     final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
1: 
1:     public PrioritizedPendingList() {
1:         for (int i = 0; i < MAX_PRIORITY; i++) {
1:             this.lists[i] = new OrderedPendingList();
1:         }
1:     }
1:     public PendingNode addMessageFirst(MessageReference message) {
1:         PendingNode node = getList(message).addMessageFirst(message);
0:         this.map.put(message.getMessageId(), node);
1:         return node;
1:     }
1: 
1:     public PendingNode addMessageLast(MessageReference message) {
1:         PendingNode node = getList(message).addMessageLast(message);
0:         this.map.put(message.getMessageId(), node);
1:         return node;
1:     }
1: 
1:     public void clear() {
1:         for (int i = 0; i < MAX_PRIORITY; i++) {
1:             this.lists[i].clear();
1:         }
1:         this.map.clear();
1:     }
1: 
1:     public boolean isEmpty() {
1:         return this.map.isEmpty();
1:     }
1: 
1:     public Iterator<MessageReference> iterator() {
1:         return new PrioritizedPendingListIterator();
1:     }
1: 
0:     public void remove(MessageReference message) {
1:         if (message != null) {
0:             PendingNode node = this.map.remove(message.getMessageId());
1:             if (node != null) {
1:                 node.getList().removeNode(node);
1:             }
1:         }
1:     }
1: 
1:     public int size() {
1:         return this.map.size();
1:     }
1: 
0:     @Override
1:     public String toString() {
1:         return "PrioritizedPendingList(" + System.identityHashCode(this) + ")";
1:     }
1: 
1:     protected int getPriority(MessageReference message) {
1:         int priority = javax.jms.Message.DEFAULT_PRIORITY;
1:         if (message.getMessageId() != null) {
0:             Math.max(message.getMessage().getPriority(), 0);
1:             priority = Math.min(priority, 9);
1:         }
1:         return priority;
1:     }
1: 
1:     protected OrderedPendingList getList(MessageReference msg) {
1:         return lists[getPriority(msg)];
1:     }
1: 
0:     private class PrioritizedPendingListIterator implements Iterator<MessageReference> {
0:         private int index = 0;
0:         private int currentIndex = 0;
0:         List<PendingNode> list = new ArrayList<PendingNode>(size());
1: 
1:         PrioritizedPendingListIterator() {
0:             for (int i = MAX_PRIORITY - 1; i >= 0; i--) {
0:                 OrderedPendingList orderedPendingList = lists[i];
0:                 if (!orderedPendingList.isEmpty()) {
0:                     list.addAll(orderedPendingList.getAsList());
1:                 }
1:             }
1:         }
1:         public boolean hasNext() {
0:             return list.size() > index;
1:         }
1: 
1:         public MessageReference next() {
0:             PendingNode node = list.get(this.index);
0:             this.currentIndex = this.index;
0:             this.index++;
0:             return node.getMessage();
1:         }
1: 
1:         public void remove() {
0:             PendingNode node = list.get(this.currentIndex);
1:             if (node != null) {
0:                 map.remove(node.getMessage().getMessageId());
1:                 node.getList().removeNode(node);
1:             }
1: 
1:         }
1: 
1:     }
1: 
1: }
============================================================================