1:c42b874: /**
1:c42b874:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c42b874:  * contributor license agreements.  See the NOTICE file distributed with
1:c42b874:  * this work for additional information regarding copyright ownership.
1:c42b874:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c42b874:  * (the "License"); you may not use this file except in compliance with
1:c42b874:  * the License.  You may obtain a copy of the License at
1:c42b874:  *
1:c42b874:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c42b874:  *
1:c42b874:  * Unless required by applicable law or agreed to in writing, software
1:c42b874:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c42b874:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c42b874:  * See the License for the specific language governing permissions and
1:c42b874:  * limitations under the License.
1:c42b874:  */
1:6885ff0: package org.apache.activemq.network;
9:c42b874: 
1:59f8cfc: import java.net.URI;
1:59f8cfc: import java.util.concurrent.CountDownLatch;
1:59f8cfc: import java.util.concurrent.TimeUnit;
1:59f8cfc: 
1:59f8cfc: import javax.jms.Connection;
1:59f8cfc: import javax.jms.Destination;
1:59f8cfc: import javax.jms.JMSException;
1:59f8cfc: import javax.jms.Message;
1:59f8cfc: import javax.jms.MessageConsumer;
1:59f8cfc: import javax.jms.MessageListener;
1:59f8cfc: import javax.jms.Session;
1:59f8cfc: import javax.management.ObjectName;
1:59f8cfc: 
1:6885ff0: import org.apache.activemq.ActiveMQConnectionFactory;
1:c42b874: import org.apache.activemq.broker.BrokerService;
1:c42b874: import org.apache.activemq.broker.TransportConnector;
1:c42b874: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:c42b874: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:c42b874: import org.apache.activemq.store.PersistenceAdapter;
1:c42b874: import org.apache.commons.lang.ArrayUtils;
1:c42b874: import org.fusesource.hawtdispatch.Dispatch;
1:59f8cfc: import org.fusesource.mqtt.client.BlockingConnection;
1:59f8cfc: import org.fusesource.mqtt.client.MQTT;
1:59f8cfc: import org.fusesource.mqtt.client.QoS;
1:c42b874: import org.fusesource.mqtt.client.Topic;
1:59f8cfc: import org.fusesource.mqtt.client.Tracer;
1:c42b874: import org.fusesource.mqtt.codec.MQTTFrame;
1:c42b874: import org.junit.Test;
1:c42b874: import org.slf4j.Logger;
1:c42b874: import org.slf4j.LoggerFactory;
1:c42b874: 
1:c42b874: /**
1:c42b874:  * Created by ceposta
1:c42b874:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:c42b874:  */
1:c42b874: public class MQTTNetworkOfBrokersFailoverTest extends NetworkTestSupport {
1:c42b874: 
1:c42b874:     private static final Logger LOG = LoggerFactory.getLogger(MQTTNetworkOfBrokersFailoverTest.class);
1:c42b874:     private int localBrokerMQTTPort = -1;
1:c42b874:     private int remoteBrokerMQTTPort = -1;
1:c42b874: 
1:59f8cfc:     @Override
1:c42b874:     protected void setUp() throws Exception {
1:c42b874:         useJmx=true;
1:c42b874:         super.setUp();
1:c42b874: 
1:c42b874:         URI ncUri = new URI("static:(" + connector.getConnectUri().toString() + ")");
1:c42b874:         NetworkConnector nc = new DiscoveryNetworkConnector(ncUri);
1:c42b874:         nc.setDuplex(true);
1:c42b874:         remoteBroker.addNetworkConnector(nc);
1:c42b874:         nc.start();
1:c42b874: 
1:c42b874:         // mqtt port should have been assigned by now
1:c42b874:         assertFalse(localBrokerMQTTPort == -1);
1:c42b874:         assertFalse(remoteBrokerMQTTPort == -1);
1:c42b874:     }
1:c42b874: 
1:59f8cfc:     @Override
1:c42b874:     protected void tearDown() throws Exception {
1:c42b874:         if (remoteBroker.isStarted()) {
1:c42b874:             remoteBroker.stop();
1:c42b874:             remoteBroker.waitUntilStopped();
1:c42b874:         }
1:c42b874:         if (broker.isStarted()) {
1:c42b874:             broker.stop();
1:c42b874:             broker.waitUntilStopped();
1:c42b874:         }
1:c42b874:         super.tearDown();
1:c42b874:     }
1:c42b874: 
1:c42b874:     @Test
1:c42b874:     public void testNoStaleSubscriptionAcrossNetwork() throws Exception {
1:c42b874: 
1:c42b874:         // before we get started, we want an async way to be able to know when
1:c42b874:         // the durable consumer has been networked so we can assert that it indeed
1:c42b874:         // would have a durable subscriber. for example, when we subscribe on remote broker,
1:c42b874:         // a network-sub would be created on local broker and we want to listen for when that
1:c42b874:         // even happens. we do that with advisory messages and a latch:
1:c42b874:         CountDownLatch consumerNetworked = listenForConsumersOn(broker);
1:c42b874: 
1:c42b874:         // create a subscription with Clean == 0 (durable sub for QoS==1 && QoS==2)
1:c42b874:         // on the remote broker. this sub should still be there after we disconnect
1:c42b874:         MQTT remoteMqtt = createMQTTTcpConnection("foo", false, remoteBrokerMQTTPort);
1:c42b874:         BlockingConnection remoteConn = remoteMqtt.blockingConnection();
1:c42b874:         remoteConn.connect();
1:c42b874:         remoteConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1:0d9eedc: 
1:0d9eedc:         assertTrue("No destination detected!", consumerNetworked.await(1, TimeUnit.SECONDS));
1:0d9eedc:         assertQueueExistsOn(remoteBroker, "Consumer.foo_AT_LEAST_ONCE.VirtualTopic.foo.bar");
1:0d9eedc:         assertQueueExistsOn(broker, "Consumer.foo_AT_LEAST_ONCE.VirtualTopic.foo.bar");
1:c42b874:         remoteConn.disconnect();
1:c42b874: 
1:c42b874:         // now we reconnect the same sub on the local broker, again with clean==0
1:c42b874:         MQTT localMqtt = createMQTTTcpConnection("foo", false, localBrokerMQTTPort);
1:c42b874:         BlockingConnection localConn = localMqtt.blockingConnection();
1:c42b874:         localConn.connect();
1:c42b874:         localConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1:c42b874: 
1:c42b874:         // now let's connect back up to remote broker and send a message
1:c42b874:         remoteConn = remoteMqtt.blockingConnection();
1:c42b874:         remoteConn.connect();
1:c42b874:         remoteConn.publish("foo/bar", "Hello, World!".getBytes(), QoS.AT_LEAST_ONCE, false);
1:c42b874: 
1:c42b874:         // now we should see that message on the local broker because the subscription
1:c42b874:         // should have been properly networked... we'll give a sec of grace for the
1:c42b874:         // networking and forwarding to have happened properly
1:6885ff0:         org.fusesource.mqtt.client.Message msg = localConn.receive(100, TimeUnit.SECONDS);
1:c42b874:         assertNotNull(msg);
1:c42b874:         msg.ack();
1:c42b874:         String response = new String(msg.getPayload());
1:c42b874:         assertEquals("Hello, World!", response);
1:6885ff0:         assertEquals("foo/bar", msg.getTopic());
1:c42b874: 
1:c42b874:         // Now... we SHOULD NOT see a message on the remote broker because we already
1:c42b874:         // consumed it on the local broker... having the same message on the remote broker
1:c42b874:         // would effectively give us duplicates in a distributed topic scenario:
1:c42b874:         remoteConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1:c42b874:         msg = remoteConn.receive(500, TimeUnit.MILLISECONDS);
1:59f8cfc:         assertNull("We have duplicate messages across the cluster for a distributed topic", msg);
1:c42b874:     }
1:c42b874: 
1:c42b874:     private CountDownLatch listenForConsumersOn(BrokerService broker) throws Exception {
1:c42b874:         final CountDownLatch latch = new CountDownLatch(1);
1:c42b874: 
1:c42b874:         URI brokerUri = broker.getVmConnectorURI();
1:c42b874: 
1:c42b874:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUri.toASCIIString());
1:c42b874:         final Connection connection = cf.createConnection();
1:0d9eedc:         connection.start();
1:c42b874:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0d9eedc:         Destination dest = session.createTopic("ActiveMQ.Advisory.Consumer.Queue.Consumer.foo:AT_LEAST_ONCE.VirtualTopic.foo.bar");
1:c42b874:         MessageConsumer consumer = session.createConsumer(dest);
1:c42b874:         consumer.setMessageListener(new MessageListener() {
1:c42b874:             @Override
1:c42b874:             public void onMessage(Message message) {
1:c42b874:                 latch.countDown();
1:c42b874:                 // shutdown this connection
1:c42b874:                 Dispatch.getGlobalQueue().execute(new Runnable() {
1:c42b874:                     @Override
1:c42b874:                     public void run() {
1:c42b874:                         try {
1:c42b874:                             session.close();
1:c42b874:                             connection.close();
1:c42b874:                         } catch (JMSException e) {
1:c42b874:                             e.printStackTrace();
1:c42b874:                         }
1:c42b874:                     }
1:c42b874:                 });
1:c42b874:             }
1:c42b874:         });
1:c42b874: 
1:c42b874:         return latch;
1:c42b874:     }
1:c42b874: 
1:0d9eedc:     private void assertQueueExistsOn(BrokerService broker, String queueName) throws Exception {
1:0d9eedc:         BrokerViewMBean brokerView = broker.getAdminView();
1:0d9eedc:         ObjectName[] queueNames = brokerView.getQueues();
1:0d9eedc:         assertEquals(1, queueNames.length);
1:0d9eedc: 
1:0d9eedc:         assertTrue(queueNames[0].toString().contains(queueName));
1:0d9eedc:     }
1:c42b874: 
1:59f8cfc:     @SuppressWarnings("unused")
1:c42b874:     private void assertOneDurableSubOn(BrokerService broker, String subName) throws Exception {
1:c42b874:         BrokerViewMBean brokerView = broker.getAdminView();
1:c42b874:         ObjectName[] activeDurableSubs = brokerView.getDurableTopicSubscribers();
1:c42b874:         ObjectName[] inactiveDurableSubs = brokerView.getInactiveDurableTopicSubscribers();
1:c42b874:         ObjectName[] allDurables = (ObjectName[]) ArrayUtils.addAll(activeDurableSubs, inactiveDurableSubs);
1:c42b874:         assertEquals(1, allDurables.length);
1:c42b874: 
1:c42b874:         // at this point our assertions should prove that we have only on durable sub
1:c42b874:         DurableSubscriptionViewMBean durableSubView = (DurableSubscriptionViewMBean)
1:c42b874:                 broker.getManagementContext().newProxyInstance(allDurables[0], DurableSubscriptionViewMBean.class, true);
1:c42b874: 
1:c42b874:         assertEquals(subName, durableSubView.getClientId());
1:c42b874:     }
1:c42b874: 
1:c42b874:     @Override
1:c42b874:     protected BrokerService createBroker() throws Exception {
1:c42b874:         BrokerService broker =  super.createBroker();
1:c42b874:         broker.setPersistent(true);
1:c42b874:         broker.setBrokerName("local");
1:c42b874:         broker.setDataDirectory("target/activemq-data");
1:c42b874:         broker.setDeleteAllMessagesOnStartup(true);
1:0d9eedc:         TransportConnector tc = broker.addConnector(getDefaultMQTTTransportConnectorUri());
1:c42b874:         localBrokerMQTTPort = tc.getConnectUri().getPort();
1:c42b874:         return broker;
1:c42b874:     }
1:c42b874: 
1:c42b874:     @Override
1:c42b874:     protected BrokerService createRemoteBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:c42b874:         BrokerService broker = super.createRemoteBroker(persistenceAdapter);
1:c42b874:         broker.setPersistent(true);
1:c42b874:         broker.setDeleteAllMessagesOnStartup(true);
1:c42b874:         broker.setDataDirectory("target/activemq-data");
1:0d9eedc:         TransportConnector tc = broker.addConnector(getDefaultMQTTTransportConnectorUri());
1:c42b874:         remoteBrokerMQTTPort = tc.getConnectUri().getPort();
1:c42b874:         return broker;
1:c42b874:     }
1:c42b874: 
1:0d9eedc:     private String getDefaultMQTTTransportConnectorUri(){
1:59f8cfc:         return "mqtt://localhost:0?transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:0d9eedc:     }
1:0d9eedc: 
1:c42b874:     private MQTT createMQTTTcpConnection(String clientId, boolean clean, int port) throws Exception {
1:c42b874:         MQTT mqtt = new MQTT();
1:c42b874:         mqtt.setConnectAttemptsMax(1);
1:c42b874:         mqtt.setReconnectAttemptsMax(0);
1:c42b874:         mqtt.setTracer(createTracer());
1:c42b874:         if (clientId != null) {
1:c42b874:             mqtt.setClientId(clientId);
1:c42b874:         }
1:c42b874:         mqtt.setCleanSession(clean);
1:c42b874:         mqtt.setHost("localhost", port);
1:c42b874:         return mqtt;
1:c42b874:     }
1:c42b874: 
1:c42b874:     protected Tracer createTracer() {
1:c42b874:         return new Tracer() {
1:c42b874:             @Override
1:c42b874:             public void onReceive(MQTTFrame frame) {
1:c42b874:                 LOG.info("Client Received:\n" + frame);
1:c42b874:             }
1:c42b874: 
1:c42b874:             @Override
1:c42b874:             public void onSend(MQTTFrame frame) {
1:c42b874:                 LOG.info("Client Sent:\n" + frame);
1:c42b874:             }
1:c42b874: 
1:c42b874:             @Override
1:c42b874:             public void debug(String message, Object... args) {
1:c42b874:                 LOG.info(String.format(message, args));
1:c42b874:             }
1:c42b874:         };
1:c42b874:     }
1:c42b874: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6885ff0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.network;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         org.fusesource.mqtt.client.Message msg = localConn.receive(100, TimeUnit.SECONDS);
1:         assertEquals("foo/bar", msg.getTopic());
commit:59f8cfc
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Tracer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertNull("We have duplicate messages across the cluster for a distributed topic", msg);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return "mqtt://localhost:0?transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
/////////////////////////////////////////////////////////////////////////
author:Christian Posta
-------------------------------------------------------------------------------
commit:0d9eedc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("No destination detected!", consumerNetworked.await(1, TimeUnit.SECONDS));
1:         assertQueueExistsOn(remoteBroker, "Consumer.foo_AT_LEAST_ONCE.VirtualTopic.foo.bar");
1:         assertQueueExistsOn(broker, "Consumer.foo_AT_LEAST_ONCE.VirtualTopic.foo.bar");
/////////////////////////////////////////////////////////////////////////
1:         connection.start();
1:         Destination dest = session.createTopic("ActiveMQ.Advisory.Consumer.Queue.Consumer.foo:AT_LEAST_ONCE.VirtualTopic.foo.bar");
/////////////////////////////////////////////////////////////////////////
1:     private void assertQueueExistsOn(BrokerService broker, String queueName) throws Exception {
1:         BrokerViewMBean brokerView = broker.getAdminView();
1:         ObjectName[] queueNames = brokerView.getQueues();
1:         assertEquals(1, queueNames.length);
1: 
1:         assertTrue(queueNames[0].toString().contains(queueName));
1:     }
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector tc = broker.addConnector(getDefaultMQTTTransportConnectorUri());
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector tc = broker.addConnector(getDefaultMQTTTransportConnectorUri());
1:     private String getDefaultMQTTTransportConnectorUri(){
0:         return "mqtt://localhost:0?transport.subscriptionStrategyName=mqtt-virtual-topic-subscriptions";
1:     }
1: 
commit:c42b874
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.network.DiscoveryNetworkConnector;
0: import org.apache.activemq.network.NetworkConnector;
0: import org.apache.activemq.network.NetworkTestSupport;
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.util.Wait;
1: import org.apache.commons.lang.ArrayUtils;
1: import org.fusesource.hawtdispatch.Dispatch;
0: import org.fusesource.mqtt.client.*;
1: import org.fusesource.mqtt.client.Topic;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import javax.jms.Message;
0: import javax.management.ObjectName;
0: import java.net.URI;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Created by ceposta
1:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:  */
1: public class MQTTNetworkOfBrokersFailoverTest extends NetworkTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTNetworkOfBrokersFailoverTest.class);
1: 
0:     private final String subName = "Subscriber1";
0:     private final String subName2 = "Subscriber2";
0:     private final String topicName = "TEST.FOO";
1:     private int localBrokerMQTTPort = -1;
1:     private int remoteBrokerMQTTPort = -1;
1: 
1:     protected void setUp() throws Exception {
1:         useJmx=true;
1:         super.setUp();
1: 
1:         URI ncUri = new URI("static:(" + connector.getConnectUri().toString() + ")");
1:         NetworkConnector nc = new DiscoveryNetworkConnector(ncUri);
1:         nc.setDuplex(true);
1:         remoteBroker.addNetworkConnector(nc);
1:         nc.start();
1: 
1:         // mqtt port should have been assigned by now
1:         assertFalse(localBrokerMQTTPort == -1);
1:         assertFalse(remoteBrokerMQTTPort == -1);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (remoteBroker.isStarted()) {
1:             remoteBroker.stop();
1:             remoteBroker.waitUntilStopped();
1:         }
1:         if (broker.isStarted()) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Test
1:     public void testNoStaleSubscriptionAcrossNetwork() throws Exception {
1: 
1:         // before we get started, we want an async way to be able to know when
1:         // the durable consumer has been networked so we can assert that it indeed
1:         // would have a durable subscriber. for example, when we subscribe on remote broker,
1:         // a network-sub would be created on local broker and we want to listen for when that
1:         // even happens. we do that with advisory messages and a latch:
1:         CountDownLatch consumerNetworked = listenForConsumersOn(broker);
1: 
1: 
1:         // create a subscription with Clean == 0 (durable sub for QoS==1 && QoS==2)
1:         // on the remote broker. this sub should still be there after we disconnect
1:         MQTT remoteMqtt = createMQTTTcpConnection("foo", false, remoteBrokerMQTTPort);
1:         BlockingConnection remoteConn = remoteMqtt.blockingConnection();
1:         remoteConn.connect();
1:         remoteConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1:         remoteConn.disconnect();
1: 
0:         consumerNetworked.await(1, TimeUnit.SECONDS);
0:         assertOneDurableSubOn(remoteBroker, "foo");
0:         assertOneDurableSubOn(broker, "NC_localhost_inbound_local");
1: 
1:         // now we reconnect the same sub on the local broker, again with clean==0
1:         MQTT localMqtt = createMQTTTcpConnection("foo", false, localBrokerMQTTPort);
1:         BlockingConnection localConn = localMqtt.blockingConnection();
1:         localConn.connect();
1:         localConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1: 
1:         // now let's connect back up to remote broker and send a message
1:         remoteConn = remoteMqtt.blockingConnection();
1:         remoteConn.connect();
1:         remoteConn.publish("foo/bar", "Hello, World!".getBytes(), QoS.AT_LEAST_ONCE, false);
1: 
1:         // now we should see that message on the local broker because the subscription
1:         // should have been properly networked... we'll give a sec of grace for the
1:         // networking and forwarding to have happened properly
0:         org.fusesource.mqtt.client.Message msg = localConn.receive(1, TimeUnit.SECONDS);
1:         assertNotNull(msg);
1:         msg.ack();
1:         String response = new String(msg.getPayload());
1:         assertEquals("Hello, World!", response);
1: 
1:         // Now... we SHOULD NOT see a message on the remote broker because we already
1:         // consumed it on the local broker... having the same message on the remote broker
1:         // would effectively give us duplicates in a distributed topic scenario:
1:         remoteConn.subscribe(new Topic[]{new Topic("foo/bar", QoS.AT_LEAST_ONCE)});
1:         msg = remoteConn.receive(500, TimeUnit.MILLISECONDS);
0:         assertNull("We have duplicate messages across the cluster for a distributed topic",
0:                 msg);
1: 
1:     }
1: 
1:     private CountDownLatch listenForConsumersOn(BrokerService broker) throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(1);
1: 
1:         URI brokerUri = broker.getVmConnectorURI();
0:         System.out.println(brokerUri.toASCIIString());
1: 
1:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUri.toASCIIString());
1:         final Connection connection = cf.createConnection();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination dest = session.createTopic("ActiveMQ.Advisory.Consumer.Topic.foo.bar.>");
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
0:                 System.out.println("got message! " + message);
1:                 latch.countDown();
1:                 // shutdown this connection
1:                 Dispatch.getGlobalQueue().execute(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             session.close();
1:                             connection.close();
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 });
1:             }
1:         });
1: 
1: 
1:         return latch;
1:     }
1: 
1: 
1:     private void assertOneDurableSubOn(BrokerService broker, String subName) throws Exception {
1:         BrokerViewMBean brokerView = broker.getAdminView();
1:         ObjectName[] activeDurableSubs = brokerView.getDurableTopicSubscribers();
1:         ObjectName[] inactiveDurableSubs = brokerView.getInactiveDurableTopicSubscribers();
1:         ObjectName[] allDurables = (ObjectName[]) ArrayUtils.addAll(activeDurableSubs, inactiveDurableSubs);
1:         assertEquals(1, allDurables.length);
1: 
1:         // at this point our assertions should prove that we have only on durable sub
1:         DurableSubscriptionViewMBean durableSubView = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(allDurables[0], DurableSubscriptionViewMBean.class, true);
1: 
1:         assertEquals(subName, durableSubView.getClientId());
1:     }
1: 
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker =  super.createBroker();
1:         broker.setPersistent(true);
1:         broker.setBrokerName("local");
1:         broker.setDataDirectory("target/activemq-data");
1:         broker.setDeleteAllMessagesOnStartup(true);
0:         TransportConnector tc = broker.addConnector("mqtt://localhost:0");
1:         localBrokerMQTTPort = tc.getConnectUri().getPort();
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected BrokerService createRemoteBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:         BrokerService broker = super.createRemoteBroker(persistenceAdapter);
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setDataDirectory("target/activemq-data");
0:         TransportConnector tc = broker.addConnector("mqtt://localhost:0");
1:         remoteBrokerMQTTPort = tc.getConnectUri().getPort();
1:         return broker;
1:     }
1: 
1:     private MQTT createMQTTTcpConnection(String clientId, boolean clean, int port) throws Exception {
1:         MQTT mqtt = new MQTT();
1:         mqtt.setConnectAttemptsMax(1);
1:         mqtt.setReconnectAttemptsMax(0);
1:         mqtt.setTracer(createTracer());
1:         if (clientId != null) {
1:             mqtt.setClientId(clientId);
1:         }
1:         mqtt.setCleanSession(clean);
1:         mqtt.setHost("localhost", port);
1:         return mqtt;
1:     }
1: 
1:     protected Tracer createTracer() {
1:         return new Tracer() {
1:             @Override
1:             public void onReceive(MQTTFrame frame) {
1:                 LOG.info("Client Received:\n" + frame);
1:             }
1: 
1:             @Override
1:             public void onSend(MQTTFrame frame) {
1:                 LOG.info("Client Sent:\n" + frame);
1:             }
1: 
1:             @Override
1:             public void debug(String message, Object... args) {
1:                 LOG.info(String.format(message, args));
1:             }
1:         };
1:     }
1: 
1: }
============================================================================