1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.http;
4:40a7d3b: 
1:540dd5c: import java.net.URI;
1:40a7d3b: import javax.servlet.ServletException;
1:40a7d3b: 
1:540dd5c: import org.apache.activemq.broker.BrokerService;
1:540dd5c: import org.apache.activemq.transport.TransportAcceptListener;
1:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * This servlet embeds an ActiveMQ broker inside a servlet engine which is ideal
1:40a7d3b:  * for deploying ActiveMQ inside a WAR and using this servlet as a HTTP tunnel.
1:b0c2a40:  * 
1:5be5a62:  * 
1:40a7d3b:  */
1:40a7d3b: public class HttpEmbeddedTunnelServlet extends HttpTunnelServlet {
1:40a7d3b:     private static final long serialVersionUID = -3705734740251302361L;
1:540dd5c: 
1:cd3f28f:     protected BrokerService broker;
1:cd3f28f:     protected HttpTransportServer transportConnector;
1:40a7d3b: 
1:40a7d3b:     public synchronized void init() throws ServletException {
1:40a7d3b:         // lets initialize the ActiveMQ broker
1:40a7d3b:         try {
1:40a7d3b:             if (broker == null) {
1:40a7d3b:                 broker = createBroker();
1:cd3f28f: 
1:cd3f28f:                 // Add the servlet connector
1:cd3f28f:                 String url = getConnectorURL();
1:ee4c8ee:                 HttpTransportFactory factory = new HttpTransportFactory();
1:ee4c8ee:                 transportConnector = (HttpTransportServer) factory.doBind(new URI(url));
1:cd3f28f:                 broker.addConnector(transportConnector);
1:cd3f28f: 
1:8abcfd1:                 String brokerURL = getServletContext().getInitParameter("org.apache.activemq.brokerURL");
1:cd3f28f:                 if (brokerURL != null) {
1:cd3f28f:                     log("Listening for internal communication on: " + brokerURL);
1:cd3f28f:                 }
3:40a7d3b:             }
1:40a7d3b:             broker.start();
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             throw new ServletException("Failed to start embedded broker: " + e, e);
1:40a7d3b:         }
1:40a7d3b:         // now lets register the listener
1:40a7d3b:         TransportAcceptListener listener = transportConnector.getAcceptListener();
1:40a7d3b:         getServletContext().setAttribute("transportChannelListener", listener);
1:40a7d3b:         super.init();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Factory method to create a new broker
1:5be5a62:      * 
1:40a7d3b:      * @throws Exception
1:40a7d3b:      */
1:40a7d3b:     protected BrokerService createBroker() throws Exception {
1:40a7d3b:         BrokerService answer = new BrokerService();
1:40a7d3b:         return answer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected String getConnectorURL() {
1:40a7d3b:         return "http://localhost/" + getServletContext().getServletContextName();
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.TransportAcceptListener;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.transport.TransportAcceptListener;
/////////////////////////////////////////////////////////////////////////
1:         String brokerURL = getServletContext().getInitParameter("org.apache.activemq.brokerURL");
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
1:                 HttpTransportFactory factory = new HttpTransportFactory();
1:                 transportConnector = (HttpTransportServer) factory.doBind(new URI(url));
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:cd3f28f
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService broker;
1:     protected HttpTransportServer transportConnector;
1: 
1:                 // Add the servlet connector
1:                 String url = getConnectorURL();
0:                 transportConnector = new HttpTransportServer(new URI(url));
1:                 broker.addConnector(transportConnector);
1: 
0:                 String brokerURL = getServletContext().getInitParameter("org.apache.activemq.brokerURL");
1:                 if (brokerURL != null) {
1:                     log("Listening for internal communication on: " + brokerURL);
1:                 }
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.http;
1: 
0: import org.activemq.broker.BrokerService;
0: import org.activemq.transport.TransportAcceptListener;
1: 
1: import javax.servlet.ServletException;
1: 
0: import java.net.URI;
1: 
1: /**
1:  * This servlet embeds an ActiveMQ broker inside a servlet engine which is ideal
1:  * for deploying ActiveMQ inside a WAR and using this servlet as a HTTP tunnel.
0:  * 
0:  * @version $Revision$
1:  */
1: public class HttpEmbeddedTunnelServlet extends HttpTunnelServlet {
1:     private static final long serialVersionUID = -3705734740251302361L;
1:     
0:     private BrokerService broker;
0:     private HttpTransportServer transportConnector;
1: 
1:     public synchronized void init() throws ServletException {
1:         // lets initialize the ActiveMQ broker
1:         try {
1:             if (broker == null) {
1:                 broker = createBroker();
1:             }
1:             broker.start();
1:         }
0:         catch (Exception e) {
1:             throw new ServletException("Failed to start embedded broker: " + e, e);
1:         }
1:         // now lets register the listener
1:         TransportAcceptListener listener = transportConnector.getAcceptListener();
1:         getServletContext().setAttribute("transportChannelListener", listener);
1:         super.init();
1:     }
1: 
1:     /**
1:      * Factory method to create a new broker
0:      * 
1:      * @throws Exception
1:      */
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
0:         String url = getConnectorURL();
0:         transportConnector = new HttpTransportServer(new URI(url));
0:         answer.addConnector(transportConnector);
1: 
0:         String brokerURL = getServletContext().getInitParameter("org.activemq.brokerURL");
0:         if (brokerURL != null) {
0:             log("Listening for internal communication on: " + brokerURL);
1:         }
1:         return answer;
1:     }
1: 
1:     protected String getConnectorURL() {
1:         return "http://localhost/" + getServletContext().getServletContextName();
1:     }
1: }
============================================================================