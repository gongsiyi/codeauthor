1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
2:bf07137: 
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: import org.apache.activemq.filter.MessageEvaluationContext;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Interface required for objects that will be registered as functions for use in selectors.  Handles parse-
1:bf07137:  * time and evaluation-time operations.
1:bf07137:  */
1:bf07137: public interface FilterFunction {
1:bf07137:     /**
1:bf07137:      * Check whether the function, as it is used, is valid.  Checking arguments here will return errors
1:bf07137:      * to clients at the time invalid selectors are initially specified, rather than waiting until the selector is
1:bf07137:      * applied to a message.
1:bf07137:      *
1:bf07137:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:bf07137:      * @return true - if the function call is valid; false - otherwise.
1:bf07137:      */
1:bf07137:     public boolean isValid(FunctionCallExpression expr);
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Determine whether the function, as it will be called, returns a boolean value.  Called during
1:bf07137:      * expression parsing after the full expression for the function call, including its arguments, has
1:bf07137:      * been parsed.  This allows functions with variable return types to function as boolean expressions in
1:bf07137:      * selectors without sacrificing parse-time checking.
1:bf07137:      *
1:bf07137:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:bf07137:      * @return true - if the function returns a boolean value for its use in the given expression;
1:bf07137:      * false - otherwise.
1:bf07137:      */
1:bf07137:     public boolean returnsBoolean(FunctionCallExpression expr);
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evaluate the function call in the given context.  The arguments must be evaluated, as-needed, by the
1:bf07137:      * function.  Note that boolean expressions must return Boolean objects.
1:bf07137:      *
1:bf07137:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:bf07137:      * @param    MessageEvaluationContext message - the context within which to evaluate the call.
1:bf07137:      */
1:bf07137:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:bf07137:             throws javax.jms.JMSException;
1:bf07137: }
1:bf07137: 
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:50e4d07
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import org.apache.activemq.filter.FunctionCallExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
1:  * Interface required for objects that will be registered as functions for use in selectors.  Handles parse-
1:  * time and evaluation-time operations.
1:  */
1: 
1: public interface FilterFunction {
1:     /**
1:      * Check whether the function, as it is used, is valid.  Checking arguments here will return errors
1:      * to clients at the time invalid selectors are initially specified, rather than waiting until the selector is
1:      * applied to a message.
1:      *
1:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:      * @return true - if the function call is valid; false - otherwise.
1:      */
1:     public boolean isValid(FunctionCallExpression expr);
1: 
1:     /**
1:      * Determine whether the function, as it will be called, returns a boolean value.  Called during
1:      * expression parsing after the full expression for the function call, including its arguments, has
1:      * been parsed.  This allows functions with variable return types to function as boolean expressions in
1:      * selectors without sacrificing parse-time checking.
1:      *
1:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:      * @return true - if the function returns a boolean value for its use in the given expression;
1:      * false - otherwise.
1:      */
1:     public boolean returnsBoolean(FunctionCallExpression expr);
1: 
1: 
1:     /**
1:      * Evaluate the function call in the given context.  The arguments must be evaluated, as-needed, by the
1:      * function.  Note that boolean expressions must return Boolean objects.
1:      *
1:      * @param    FunctionCallExpression expr - the full expression of the function call, as used.
1:      * @param    MessageEvaluationContext message - the context within which to evaluate the call.
1:      */
1:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:             throws javax.jms.JMSException;
1: }
1: 
============================================================================