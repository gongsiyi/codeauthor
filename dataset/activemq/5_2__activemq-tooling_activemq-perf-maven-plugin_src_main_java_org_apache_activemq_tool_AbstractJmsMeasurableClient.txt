1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
1:a88906f: 
1:540dd5c: import java.util.concurrent.atomic.AtomicLong;
1:a88906f: 
1:a88906f: import javax.jms.ConnectionFactory;
1:a88906f: 
1:540dd5c: import org.apache.activemq.tool.sampler.MeasurableClient;
1:a88906f: 
1:a88906f: public abstract class AbstractJmsMeasurableClient extends AbstractJmsClient implements MeasurableClient {
1:46bc26c: 
1:a88906f:     protected AtomicLong throughput = new AtomicLong(0);
1:a88906f: 
1:540dd5c:     public AbstractJmsMeasurableClient(ConnectionFactory factory) {
1:540dd5c:         super(factory);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void reset() {
1:a88906f:         setThroughput(0);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public long getThroughput() {
1:a88906f:         return throughput.get();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setThroughput(long val) {
1:a88906f:         throughput.set(val);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void incThroughput() {
1:a88906f:         throughput.incrementAndGet();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void incThroughput(long val) {
1:a88906f:         throughput.addAndGet(val);
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:46bc26c
/////////////////////////////////////////////////////////////////////////
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
1: import org.apache.activemq.tool.sampler.MeasurableClient;
1:     public AbstractJmsMeasurableClient(ConnectionFactory factory) {
1:         super(factory);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicLong;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import org.apache.activemq.tool.sampler.MeasurableClient;
1: 
1: import javax.jms.ConnectionFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicLong;
1: 
1: public abstract class AbstractJmsMeasurableClient extends AbstractJmsClient implements MeasurableClient {
1:     protected AtomicLong throughput = new AtomicLong(0);
1: 
0:     public AbstractJmsMeasurableClient( ConnectionFactory factory) {
0:         super( factory);
1:     }
1: 
1:     public void reset() {
1:         setThroughput(0);
1:     }
1: 
1:     public long getThroughput() {
1:         return throughput.get();
1:     }
1: 
1:     public void setThroughput(long val) {
1:         throughput.set(val);
1:     }
1: 
1:     public void incThroughput() {
1:         throughput.incrementAndGet();
1:     }
1: 
1:     public void incThroughput(long val) {
1:         throughput.addAndGet(val);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
commit:4b2f479
/////////////////////////////////////////////////////////////////////////
0:     private static int clientCounter;
0:     
0:     private int clientNumber;
0:     
0:     public synchronized int getClientNumber() {
0:         if (clientNumber == 0) {
0:             clientNumber = incrementClientCounter();
0:         }
0:         return clientNumber;
0:     }
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected static synchronized int incrementClientCounter() {
0:         return ++clientCounter;
0:     }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.sampler.MeasurableClient;
0: 
0: import javax.jms.ConnectionFactory;
0: 
0: public abstract class AbstractJmsMeasurableClient extends AbstractJmsClient implements MeasurableClient {
0: 
0:     public AbstractJmsMeasurableClient( ConnectionFactory factory) {
0:         super( factory);
0:     }
/////////////////////////////////////////////////////////////////////////
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0:     protected String clientName = null;
0:         return clientName;
0:     }
0: 
0:     public void setClientName(String clientName) {
0:         this.clientName = clientName;
/////////////////////////////////////////////////////////////////////////
commit:5f5bff6
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
0: public class JmsPerformanceSupport extends JmsClientSupport implements PerfMeasurable {
/////////////////////////////////////////////////////////////////////////
0:     public String getClientName() {
0:         try {
0:             return getConnection().getClientID();
0:         } catch (JMSException e) {
0:             return "";
0:         }
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
commit:3a92ec3
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicLong;
0: 
0:     protected AtomicLong throughput = new AtomicLong(0);
/////////////////////////////////////////////////////////////////////////
0:         return throughput.get();
0:     public void setThroughput(long val) {
0:         throughput.set(val);
0:     public void incThroughput() {
0:         throughput.incrementAndGet();
0:     public void incThroughput(long val) {
0:         throughput.addAndGet(val);
/////////////////////////////////////////////////////////////////////////
0: 
0:     public String getClientName() {
0:         return getClientID();
0:     }
commit:29eef80
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import java.util.HashMap;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Map getClientSettings() {
0:         Map settings = new HashMap();
0:         settings.put("client.server", getServerType());
0:         settings.put("client.factoryClass", getFactoryClass());
0:         settings.put("client.clientID", getClientID());
0:         settings.putAll(getFactorySettings());
0:         settings.putAll(getConnectionSettings());
0:         settings.putAll(getSessionSettings());
0:         settings.putAll(getQueueSettings());
0:         settings.putAll(getTopicSettings());
0:         settings.putAll(getProducerSettings());
0:         settings.putAll(getConsumerSettings());
0:         settings.putAll(getMessageSettings());
0: 
0:         return settings;
0:     }
commit:8afd2f6
/////////////////////////////////////////////////////////////////////////
0:     public void reset() {
0:         setThroughput(0);
0:     }
0: 
0:     public synchronized void setThroughput(long val) {
0:     public synchronized void incThroughput() {
0:     public synchronized void incThroughput(long val) {
commit:e45af98
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: public class JmsPerfClientSupport extends JmsConfigurableClientSupport implements PerfMeasurable {
0: 
0:     protected long throughput   = 0;
0:     protected long interval     = 1000; // 1 sec
0:     protected long duration     = 1000 * 60 * 10; // 10 min
0:     protected long rampUpTime   = 1000 * 60 * 1;  // 1 min
0:     protected long rampDownTime = 1000 * 60 * 1;  // 1 min
0: 
0:     protected PerfEventListener listener = null;
0: 
0:     public long getThroughput() {
0:         return throughput;
0:     }
0: 
0:     public void setThroughput(long val) {
0:         this.throughput = val;
0:     }
0: 
0:     public void incThroughput() {
0:         throughput++;
0:     }
0: 
0:     public void incThroughput(long val) {
0:         throughput += val;
0:     }
0: 
0:     public long getInterval() {
0:         return interval;
0:     }
0: 
0:     public void setInterval(long val) {
0:         this.interval = val;
0:     }
0: 
0:     public long getDuration() {
0:         return duration;
0:     }
0: 
0:     public void setDuration(long val) {
0:         this.duration = val;
0:     }
0: 
0:     public long getRampUpTime() {
0:         return rampUpTime;
0:     }
0: 
0:     public void setRampUpTime(long val) {
0:         this.rampUpTime = val;
0:     }
0: 
0:     public long getRampDownTime() {
0:         return rampDownTime;
0:     }
0: 
0:     public void setRampDownTime(long val) {
0:         this.rampDownTime = val;
0:     }
0: 
0:     public void setPerfEventListener(PerfEventListener listener) {
0:         this.listener = listener;
0:     }
0: 
0:     public PerfEventListener getPerfEventListener() {
0:         return listener;
0:     }
0: }
============================================================================