1:26198c2: /**
1:26198c2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:26198c2:  * contributor license agreements.  See the NOTICE file distributed with
1:26198c2:  * this work for additional information regarding copyright ownership.
1:26198c2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:26198c2:  * (the "License"); you may not use this file except in compliance with
1:26198c2:  * the License.  You may obtain a copy of the License at
3:26198c2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26198c2:  *
1:26198c2:  * Unless required by applicable law or agreed to in writing, software
1:26198c2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26198c2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26198c2:  * See the License for the specific language governing permissions and
1:26198c2:  * limitations under the License.
1:26198c2:  */
1:26198c2: package org.apache.activemq.broker.util;
1:26198c2: 
1:26198c2: import org.apache.activemq.broker.BrokerPluginSupport;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:9a8f6e4: import org.apache.activemq.broker.region.Destination;
1:8340dec: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:8340dec: import org.apache.activemq.command.ActiveMQDestination;
1:8340dec: import org.apache.activemq.command.ActiveMQMessage;
1:26198c2: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:26198c2: 
1:26198c2: /**
1:26198c2:  * A Broker interceptor which updates a JMS Client's timestamp on the message
1:f812e34:  * with a broker timestamp. Useful when the clocks on client machines are known
1:f812e34:  * to not be correct and you can only trust the time set on the broker machines.
1:8340dec:  *
1:f812e34:  * Enabling this plugin will break JMS compliance since the timestamp that the
1:f812e34:  * producer sees on the messages after as send() will be different from the
1:f812e34:  * timestamp the consumer will observe when he receives the message. This plugin
1:f812e34:  * is not enabled in the default ActiveMQ configuration.
1:8340dec:  *
1:82d7182:  * 2 new attributes have been added which will allow the administrator some override control
1:82d7182:  * over the expiration time for incoming messages:
1:26198c2:  *
1:82d7182:  * Attribute 'zeroExpirationOverride' can be used to apply an expiration
1:82d7182:  * time to incoming messages with no expiration defined (messages that would never expire)
1:26198c2:  *
1:82d7182:  * Attribute 'ttlCeiling' can be used to apply a limit to the expiration time
1:8340dec:  *
1:f812e34:  * @org.apache.xbean.XBean element="timeStampingBrokerPlugin"
1:8340dec:  *
1:b0c2a40:  *
1:26198c2:  */
1:f812e34: public class TimeStampingBrokerPlugin extends BrokerPluginSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TimeStampingBrokerPlugin.class);
1:8340dec:     /**
1:82d7182:     * variable which (when non-zero) is used to override
1:82d7182:     * the expiration date for messages that arrive with
1:82d7182:     * no expiration date set (in Milliseconds).
1:82d7182:     */
1:82d7182:     long zeroExpirationOverride = 0;
1:26198c2: 
1:8340dec:     /**
1:82d7182:     * variable which (when non-zero) is used to limit
1:8340dec:     * the expiration date (in Milliseconds).
1:82d7182:     */
1:82d7182:     long ttlCeiling = 0;
1:8340dec: 
1:dd957fa:     /**
1:dd957fa:      * If true, the plugin will not update timestamp to past values
1:dd957fa:      * False by default
1:dd957fa:      */
1:dd957fa:     boolean futureOnly = false;
1:8340dec: 
1:8340dec: 
4:82d7182:     /**
1:b50ede6:      * if true, update timestamp even if message has passed through a network
1:b50ede6:      * default false
1:b50ede6:      */
1:b50ede6:     boolean processNetworkMessages = false;
1:dd957fa: 
1:8340dec:     /**
1:82d7182:     * setter method for zeroExpirationOverride
1:82d7182:     */
1:82d7182:     public void setZeroExpirationOverride(long ttl)
1:82d7182:     {
1:82d7182:         this.zeroExpirationOverride = ttl;
1:26198c2:     }
5:82d7182: 
1:8340dec:     /**
1:82d7182:     * setter method for ttlCeiling
1:82d7182:     */
1:82d7182:     public void setTtlCeiling(long ttlCeiling)
1:82d7182:     {
1:82d7182:         this.ttlCeiling = ttlCeiling;
1:26198c2:     }
1:82d7182: 
1:8340dec:     public void setFutureOnly(boolean futureOnly) {
1:8340dec:         this.futureOnly = futureOnly;
1:8340dec:     }
1:dd957fa: 
1:8340dec:     public void setProcessNetworkMessages(Boolean processNetworkMessages) {
1:8340dec:         this.processNetworkMessages = processNetworkMessages;
1:8340dec:     }
1:8340dec: 
1:8340dec:     @Override
1:f812e34:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:8340dec: 
1:8340dec:         if (message.getTimestamp() > 0 && !isDestinationDLQ(message) &&
1:8340dec:            (processNetworkMessages || (message.getBrokerPath() == null || message.getBrokerPath().length == 0))) {
1:b50ede6:             // timestamp not been disabled and has not passed through a network or processNetworkMessages=true
1:8340dec: 
1:47183ae:             long oldExpiration = message.getExpiration();
1:47183ae:             long newTimeStamp = System.currentTimeMillis();
1:82d7182:             long timeToLive = zeroExpirationOverride;
1:27a6f1c:             long oldTimestamp = message.getTimestamp();
1:47183ae:             if (oldExpiration > 0) {
1:82d7182:                 timeToLive = oldExpiration - oldTimestamp;
1:26198c2:             }
1:82d7182:             if (timeToLive > 0 && ttlCeiling > 0 && timeToLive > ttlCeiling) {
1:82d7182:                 timeToLive = ttlCeiling;
1:dd957fa:             }
1:82d7182:             long expiration = timeToLive + newTimeStamp;
1:8340dec:             // In the scenario that the Broker is behind the clients we never want to set the
1:8340dec:             // Timestamp and Expiration in the past
1:8340dec:             if(!futureOnly || (expiration > oldExpiration)) {
1:8340dec:                 if (timeToLive > 0 && expiration > 0) {
1:8340dec:                     message.setExpiration(expiration);
1:8340dec:                 }
1:8340dec:                 message.setTimestamp(newTimeStamp);
1:e1bbde7:                 LOG.debug("Set message {} timestamp from {} to {}", new Object[]{ message.getMessageId(), oldTimestamp, newTimeStamp });
1:8340dec:             }
1:8340dec:         }
1:f812e34:         super.send(producerExchange, message);
1:f812e34:     }
1:8340dec: 
1:8340dec:     private boolean isDestinationDLQ(Message message) {
1:8340dec:         DeadLetterStrategy deadLetterStrategy;
1:8340dec:         Message tmp;
1:8340dec: 
1:9a8f6e4:         Destination regionDestination = (Destination) message.getRegionDestination();
1:9a8f6e4:         if (message != null && regionDestination != null) {
1:9a8f6e4:             deadLetterStrategy = regionDestination.getDeadLetterStrategy();
1:7e53814:             if (deadLetterStrategy != null && message.getOriginalDestination() != null) {
1:8340dec:                 // Cheap copy, since we only need two fields
1:8340dec:                 tmp = new ActiveMQMessage();
1:8340dec:                 tmp.setDestination(message.getOriginalDestination());
1:9a8f6e4:                 tmp.setRegionDestination(regionDestination);
1:8340dec: 
1:8340dec:                 // Determine if we are headed for a DLQ
1:8340dec:                 ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(tmp, null);
1:8340dec:                 if (deadLetterDestination.equals(message.getDestination())) {
1:8340dec:                     return true;
1:8340dec:                 }
1:8340dec:             }
1:8340dec:         }
1:8340dec:         return false;
1:8340dec:     }
2:dd957fa: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Set message {} timestamp from {} to {}", new Object[]{ message.getMessageId(), oldTimestamp, newTimeStamp });
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7e53814
/////////////////////////////////////////////////////////////////////////
1:             if (deadLetterStrategy != null && message.getOriginalDestination() != null) {
commit:8340dec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:     /**
1:     /**
1:     * the expiration date (in Milliseconds).
1: 
1: 
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     public void setFutureOnly(boolean futureOnly) {
1:         this.futureOnly = futureOnly;
1:     }
1:     public void setProcessNetworkMessages(Boolean processNetworkMessages) {
1:         this.processNetworkMessages = processNetworkMessages;
1:     }
1: 
1:     @Override
1: 
1:         if (message.getTimestamp() > 0 && !isDestinationDLQ(message) &&
1:            (processNetworkMessages || (message.getBrokerPath() == null || message.getBrokerPath().length == 0))) {
1: 
/////////////////////////////////////////////////////////////////////////
1:             // In the scenario that the Broker is behind the clients we never want to set the
1:             // Timestamp and Expiration in the past
1:             if(!futureOnly || (expiration > oldExpiration)) {
1:                 if (timeToLive > 0 && expiration > 0) {
1:                     message.setExpiration(expiration);
1:                 }
1:                 message.setTimestamp(newTimeStamp);
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Set message " + message.getMessageId() + " timestamp from " + oldTimestamp + " to " + newTimeStamp);
1:                 }
1:             }
1: 
1:     private boolean isDestinationDLQ(Message message) {
1:         DeadLetterStrategy deadLetterStrategy;
1:         Message tmp;
1: 
0:         if (message != null && message.getRegionDestination() != null) {
0:             deadLetterStrategy = message.getRegionDestination().getDeadLetterStrategy();
0:             if (deadLetterStrategy != null) {
1:                 // Cheap copy, since we only need two fields
1:                 tmp = new ActiveMQMessage();
1:                 tmp.setDestination(message.getOriginalDestination());
0:                 tmp.setRegionDestination(message.getRegionDestination());
1: 
1:                 // Determine if we are headed for a DLQ
1:                 ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(tmp, null);
1:                 if (deadLetterDestination.equals(message.getDestination())) {
1:                     return true;
1:                 }
1:             }
1:         }
1:         return false;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:         Destination regionDestination = (Destination) message.getRegionDestination();
1:         if (message != null && regionDestination != null) {
1:             deadLetterStrategy = regionDestination.getDeadLetterStrategy();
1:                 tmp.setRegionDestination(regionDestination);
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * with a broker timestamp. Useful when the clocks on client machines are known
1:  * to not be correct and you can only trust the time set on the broker machines.
1:  * Enabling this plugin will break JMS compliance since the timestamp that the
1:  * producer sees on the messages after as send() will be different from the
1:  * timestamp the consumer will observe when he receives the message. This plugin
1:  * is not enabled in the default ActiveMQ configuration.
1:  * @org.apache.xbean.XBean element="timeStampingBrokerPlugin"
1: public class TimeStampingBrokerPlugin extends BrokerPluginSupport {
1:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
0:         if (message.getTimestamp() > 0
0:             && (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) {
0:             // timestamp not been disabled and has not passed through a network
1:         super.send(producerExchange, message);
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:26198c2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import org.apache.activemq.broker.BrokerPluginSupport;
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.Message;
1: 
1: 
1: /**
1:  * A Broker interceptor which updates a JMS Client's timestamp on the message
0:  * with a broker timestamp.  Useful when the clocks on client machines are known to
0:  * not be correct and you can only trust the time set on the broker machines.
1:  * 
0:  * Enabling this plugin will break JMS compliance since the timestamp that the producer
0:  * sees on the messages after as send() will be different from the timestamp the consumer
0:  * will observe when he receives the message.  This plugin is not enabled in the default
0:  * ActiveMQ configuration.
1:  * 
0:  * @org.apache.xbean.XBean element="timeStampingBrokerPlugin" 
1:  * 
0:  * @version $Revision$
1:  */
0: public class TimeStampingBrokerPlugin  extends BrokerPluginSupport {
0: 	public void send(ConnectionContext context, Message message) throws Exception {
0:         if (message.getTimestamp() > 0 && (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) { 
0:             //timestamp not been disabled and has not passed through a network
0:             message.setTimestamp(System.currentTimeMillis());
1:         }
0: 		super.send(context, message);
1: 	}
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TimeStampingBrokerPlugin.class);
commit:dd957fa
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * If true, the plugin will not update timestamp to past values
1:      * False by default
1:      */
1:     boolean futureOnly = false;
/////////////////////////////////////////////////////////////////////////
0: 	public void setFutureOnly(boolean futureOnly) {
0: 		this.futureOnly = futureOnly;
1: 	}
1: 
0: 	public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 			//In the scenario that the Broker is behind the clients we never want to set the Timestamp and Expiration in the past 
0: 			if(!futureOnly || (expiration > oldExpiration)) {
0: 				if (timeToLive > 0 && expiration > 0) {
0: 					message.setExpiration(expiration);
1: 				}
0: 				message.setTimestamp(newTimeStamp);
1: 			}
commit:a49ba6c
/////////////////////////////////////////////////////////////////////////
commit:82d7182
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:  * 2 new attributes have been added which will allow the administrator some override control
1:  * over the expiration time for incoming messages:
0:  *
1:  * Attribute 'zeroExpirationOverride' can be used to apply an expiration
1:  * time to incoming messages with no expiration defined (messages that would never expire)
0:  *
1:  * Attribute 'ttlCeiling' can be used to apply a limit to the expiration time
0:  *
1: 
0:     private static final Log LOG = LogFactory.getLog(TimeStampingBrokerPlugin.class);
1: 
1:     /** 
1:     * variable which (when non-zero) is used to override
1:     * the expiration date for messages that arrive with
1:     * no expiration date set (in Milliseconds).
1:     */
1:     long zeroExpirationOverride = 0;
1: 
1:     /** 
1:     * variable which (when non-zero) is used to limit
0:     * the expiration date (in Milliseconds).  
1:     */
1:     long ttlCeiling = 0;
1: 
1:     /** 
1:     * setter method for zeroExpirationOverride
1:     */
1:     public void setZeroExpirationOverride(long ttl)
1:     {
1:         this.zeroExpirationOverride = ttl;
0:     }
1: 
1:     /** 
1:     * setter method for ttlCeiling
1:     */
1:     public void setTtlCeiling(long ttlCeiling)
1:     {
1:         this.ttlCeiling = ttlCeiling;
0:     }
1: 
0:             message.setTimestamp(newTimeStamp);
1:             long timeToLive = zeroExpirationOverride;
1:                 timeToLive = oldExpiration - oldTimestamp;
0:             }
1:             if (timeToLive > 0 && ttlCeiling > 0 && timeToLive > ttlCeiling) {
1:                 timeToLive = ttlCeiling;
0:             }
1:             long expiration = timeToLive + newTimeStamp;
0:             if (timeToLive > 0 && expiration > 0) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:b50ede6
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:     /**
1:      * if true, update timestamp even if message has passed through a network
1:      * default false
1:      */
1:     boolean processNetworkMessages = false;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public void setProcessNetworkMessages(Boolean processNetworkMessages) {
0: 	    this.processNetworkMessages = processNetworkMessages;
0: 	}
0:             && (processNetworkMessages || (message.getBrokerPath() == null || message.getBrokerPath().length == 0))) {
1:             // timestamp not been disabled and has not passed through a network or processNetworkMessages=true
author:Robert Davies
-------------------------------------------------------------------------------
commit:27a6f1c
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TimeStampingBrokerPlugin.class);
/////////////////////////////////////////////////////////////////////////
0: 	@Override
0:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:             long oldTimestamp = message.getTimestamp();
/////////////////////////////////////////////////////////////////////////
0: 				if (LOG.isDebugEnabled()) {
0: 				    LOG.debug("Set message " + message.getMessageId() + " timestamp from " + oldTimestamp + " to " + newTimeStamp);
0: 				}
commit:47183ae
/////////////////////////////////////////////////////////////////////////
1:             long oldExpiration = message.getExpiration();
1:             long newTimeStamp = System.currentTimeMillis();
1:             if (oldExpiration > 0) {
0:                 long oldTimestamp = message.getTimestamp();
0:                 long timeToLive = oldExpiration-oldTimestamp;
0:                 long expiration = timeToLive+newTimeStamp;
0:                 message.setExpiration(expiration);
0:             }
0:             message.setTimestamp(newTimeStamp);
commit:a401575
/////////////////////////////////////////////////////////////////////////
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
0: 	public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
0: 		super.send(producerExchange, message);
============================================================================