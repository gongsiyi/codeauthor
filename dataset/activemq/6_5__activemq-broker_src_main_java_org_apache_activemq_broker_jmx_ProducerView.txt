1:7092b19: /**
1:7092b19:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7092b19:  * contributor license agreements.  See the NOTICE file distributed with
1:7092b19:  * this work for additional information regarding copyright ownership.
1:7092b19:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7092b19:  * (the "License"); you may not use this file except in compliance with
1:7092b19:  * the License.  You may obtain a copy of the License at
1:7092b19:  *
1:7092b19:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7092b19:  *
1:7092b19:  * Unless required by applicable law or agreed to in writing, software
1:7092b19:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7092b19:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7092b19:  * See the License for the specific language governing permissions and
1:7092b19:  * limitations under the License.
1:7092b19:  */
1:7092b19: package org.apache.activemq.broker.jmx;
1:629b18c: 
1:0736953: import org.apache.activemq.broker.ProducerBrokerExchange;
1:7092b19: import org.apache.activemq.command.ActiveMQDestination;
1:7092b19: import org.apache.activemq.command.ProducerInfo;
2:7092b19: 
1:7092b19: public class ProducerView implements ProducerViewMBean {
1:7092b19: 
1:7092b19:     protected final ProducerInfo info;
1:7092b19:     protected final String clientId;
1:f5dcc9d:     protected final String userName;
1:7092b19:     protected final ManagedRegionBroker broker;
1:7092b19: 
1:629b18c:     protected ActiveMQDestination lastUsedDestination;
1:629b18c: 
1:f5dcc9d:     public ProducerView(ProducerInfo info, String clientId, String userName, ManagedRegionBroker broker) {
1:7092b19:         this.info = info;
1:7092b19:         this.clientId = clientId;
1:f5dcc9d:         this.userName = userName;
1:7092b19:         this.broker = broker;
2:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public String getClientId() {
1:7092b19:         return this.clientId;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public String getConnectionId() {
3:7092b19:         if (info != null) {
1:7092b19:             return info.getProducerId().getConnectionId();
1:7092b19:         }
1:7092b19:         return "NOTSET";
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public long getSessionId() {
1:7092b19:         if (info != null) {
1:7092b19:             return info.getProducerId().getSessionId();
1:7092b19:         }
1:7092b19:         return 0;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:6d48b4b:     public String getProducerId() {
1:6d48b4b:         if (info != null) {
1:6d48b4b:             return info.getProducerId().toString();
1:6d48b4b:         }
1:6d48b4b:         return "NOTSET";
1:6d48b4b:     }
1:6d48b4b: 
1:6d48b4b:     @Override
1:7092b19:     public String getDestinationName() {
1:629b18c:         if (info != null && info.getDestination() != null) {
4:7092b19:             ActiveMQDestination dest = info.getDestination();
1:7092b19:             return dest.getPhysicalName();
1:629b18c:         } else if (this.lastUsedDestination != null) {
1:629b18c:             return this.lastUsedDestination.getPhysicalName();
1:7092b19:         }
1:7092b19:         return "NOTSET";
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public boolean isDestinationQueue() {
1:7092b19:         if (info != null) {
1:629b18c:             if (info.getDestination() != null) {
1:629b18c:                 ActiveMQDestination dest = info.getDestination();
1:629b18c:                 return dest.isQueue();
1:629b18c:             } else if(lastUsedDestination != null) {
1:629b18c:                 return lastUsedDestination.isQueue();
1:629b18c:             }
1:7092b19:         }
1:7092b19:         return false;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public boolean isDestinationTopic() {
1:7092b19:         if (info != null) {
1:629b18c:             if (info.getDestination() != null) {
1:629b18c:                 ActiveMQDestination dest = info.getDestination();
1:629b18c:                 return dest.isTopic();
1:629b18c:             } else if(lastUsedDestination != null) {
1:629b18c:                 return lastUsedDestination.isTopic();
1:629b18c:             }
1:7092b19:         }
1:7092b19:         return false;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public boolean isDestinationTemporary() {
1:7092b19:         if (info != null) {
1:629b18c:             if (info.getDestination() != null) {
1:629b18c:                 ActiveMQDestination dest = info.getDestination();
1:629b18c:                 return dest.isTemporary();
1:629b18c:             } else if(lastUsedDestination != null) {
1:629b18c:                 return lastUsedDestination.isTemporary();
1:629b18c:             }
1:7092b19:         }
1:7092b19:         return false;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:7092b19:     public int getProducerWindowSize() {
1:7092b19:         if (info != null) {
1:7092b19:             return info.getWindowSize();
1:7092b19:         }
1:7092b19:         return 0;
1:7092b19:     }
1:7092b19: 
1:7092b19:     @Override
1:c2ad0c3:     @Deprecated
1:7092b19:     public boolean isDispatchAsync() {
1:7092b19:         return false;
1:7092b19:     }
1:7092b19: 
1:7092b19:     /**
1:7092b19:      * @return pretty print
1:7092b19:      */
1:c2ad0c3:     @Override
1:7092b19:     public String toString() {
1:7092b19:         return "ProducerView: " + getClientId() + ":" + getConnectionId();
1:7092b19:     }
1:7092b19: 
1:629b18c:     /**
1:629b18c:      * Set the last used Destination name for a Dynamic Destination Producer.
1:629b18c:      */
1:629b18c:     void setLastUsedDestinationName(ActiveMQDestination destinationName) {
1:629b18c:         this.lastUsedDestination = destinationName;
1:629b18c:     }
1:f5dcc9d: 
1:f5dcc9d:     @Override
1:f5dcc9d:     public String getUserName() {
1:f5dcc9d:         return userName;
1:f5dcc9d:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public boolean isProducerBlocked() {
1:0736953:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:0736953:         if (producerBrokerExchange != null){
1:0736953:             return producerBrokerExchange.isBlockedForFlowControl();
1:0736953:         }
1:0736953:         return false;
1:0736953:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public long getTotalTimeBlocked() {
1:0736953:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:0736953:         if (producerBrokerExchange != null){
1:0736953:             return producerBrokerExchange.getTotalTimeBlocked();
1:0736953:         }
1:0736953:         return 0;
1:0736953:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public int getPercentageBlocked() {
1:0736953:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:0736953:         if (producerBrokerExchange != null){
1:0736953:             return producerBrokerExchange.getPercentageBlocked();
1:0736953:         }
1:0736953:         return 0;
1:0736953:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public void resetFlowControlStats() {
1:0736953:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:0736953:         if (producerBrokerExchange != null){
1:0736953:             producerBrokerExchange.resetFlowControl();
1:0736953:         }
1:0736953:     }
1:07ec890: 
1:07ec890:     @Override
1:07ec890:     public void resetStatistics() {
1:07ec890:        if (info != null){
1:6683eb6:            info.resetSentCount();
1:07ec890:        }
1:07ec890:     }
1:07ec890: 
1:07ec890:     @Override
1:07ec890:     public long getSentCount() {
1:6683eb6:         return info != null ? info.getSentCount() :0;
1:07ec890:     }
1:7092b19: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c2ad0c3
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:     @Override
author:rajdavies
-------------------------------------------------------------------------------
commit:6683eb6
/////////////////////////////////////////////////////////////////////////
1:            info.resetSentCount();
1:         return info != null ? info.getSentCount() :0;
author:Rob Davies
-------------------------------------------------------------------------------
commit:07ec890
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void resetStatistics() {
1:        if (info != null){
0:            info.getSentCount().reset();
1:        }
1:     }
1: 
1:     @Override
1:     public long getSentCount() {
0:         return info != null ? info.getSentCount().getCount() :0;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:0736953
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean isProducerBlocked() {
1:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:         if (producerBrokerExchange != null){
1:             return producerBrokerExchange.isBlockedForFlowControl();
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public long getTotalTimeBlocked() {
1:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:         if (producerBrokerExchange != null){
1:             return producerBrokerExchange.getTotalTimeBlocked();
1:         }
1:         return 0;
1:     }
1: 
1:     @Override
1:     public int getPercentageBlocked() {
1:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:         if (producerBrokerExchange != null){
1:             return producerBrokerExchange.getPercentageBlocked();
1:         }
1:         return 0;
1:     }
1: 
1:     @Override
1:     public void resetFlowControlStats() {
1:         ProducerBrokerExchange producerBrokerExchange = broker.getBrokerService().getProducerBrokerExchange(info);
1:         if (producerBrokerExchange != null){
1:             producerBrokerExchange.resetFlowControl();
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1:     protected final String userName;
1:     public ProducerView(ProducerInfo info, String clientId, String userName, ManagedRegionBroker broker) {
1:         this.userName = userName;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String getUserName() {
1:         return userName;
1:     }
commit:6d48b4b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public String getProducerId() {
1:         if (info != null) {
1:             return info.getProducerId().toString();
1:         }
1:         return "NOTSET";
1:     }
1: 
1:     @Override
commit:629b18c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination lastUsedDestination;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (info != null && info.getDestination() != null) {
1:         } else if (this.lastUsedDestination != null) {
1:             return this.lastUsedDestination.getPhysicalName();
/////////////////////////////////////////////////////////////////////////
1:             if (info.getDestination() != null) {
1:                 ActiveMQDestination dest = info.getDestination();
1:                 return dest.isQueue();
1:             } else if(lastUsedDestination != null) {
1:                 return lastUsedDestination.isQueue();
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (info.getDestination() != null) {
1:                 ActiveMQDestination dest = info.getDestination();
1:                 return dest.isTopic();
1:             } else if(lastUsedDestination != null) {
1:                 return lastUsedDestination.isTopic();
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (info.getDestination() != null) {
1:                 ActiveMQDestination dest = info.getDestination();
1:                 return dest.isTemporary();
1:             } else if(lastUsedDestination != null) {
1:                 return lastUsedDestination.isTemporary();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Set the last used Destination name for a Dynamic Destination Producer.
1:      */
1:     void setLastUsedDestinationName(ActiveMQDestination destinationName) {
1:         this.lastUsedDestination = destinationName;
1:     }
commit:7092b19
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ProducerInfo;
1: 
1: public class ProducerView implements ProducerViewMBean {
1: 
1:     protected final ProducerInfo info;
1:     protected final String clientId;
1:     protected final ManagedRegionBroker broker;
1: 
0:     public ProducerView(ProducerInfo info, String clientId, ManagedRegionBroker broker) {
1:         this.info = info;
1:         this.clientId = clientId;
1:         this.broker = broker;
1:     }
1: 
1:     @Override
1:     public String getClientId() {
1:         return this.clientId;
1:     }
1: 
1:     @Override
1:     public String getConnectionId() {
1:         if (info != null) {
1:             return info.getProducerId().getConnectionId();
1:         }
1:         return "NOTSET";
1:     }
1: 
1:     @Override
1:     public long getSessionId() {
1:         if (info != null) {
1:             return info.getProducerId().getSessionId();
1:         }
1:         return 0;
1:     }
1: 
1:     @Override
1:     public String getDestinationName() {
1:         if (info != null) {
1:             ActiveMQDestination dest = info.getDestination();
1:             return dest.getPhysicalName();
1:         }
1:         return "NOTSET";
1:     }
1: 
1:     @Override
1:     public boolean isDestinationQueue() {
1:         if (info != null) {
1:             ActiveMQDestination dest = info.getDestination();
0:             return dest.isQueue();
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isDestinationTopic() {
1:         if (info != null) {
1:             ActiveMQDestination dest = info.getDestination();
0:             return dest.isTopic();
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isDestinationTemporary() {
1:         if (info != null) {
1:             ActiveMQDestination dest = info.getDestination();
0:             return dest.isTemporary();
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public int getProducerWindowSize() {
1:         if (info != null) {
1:             return info.getWindowSize();
1:         }
1:         return 0;
1:     }
1: 
1:     @Override
1:     public boolean isDispatchAsync() {
1:         if (info != null) {
0:             return info.isDispatchAsync();
1:         }
1:         return false;
1:     }
1: 
1:     /**
1:      * @return pretty print
1:      */
1:     public String toString() {
1:         return "ProducerView: " + getClientId() + ":" + getConnectionId();
1:     }
1: 
1: }
============================================================================