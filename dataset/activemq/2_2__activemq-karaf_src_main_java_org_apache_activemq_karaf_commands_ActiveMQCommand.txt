1:d1fa2ba: /**
1:d1fa2ba:  *
1:d1fa2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d1fa2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:d1fa2ba:  * this work for additional information regarding copyright ownership.
1:d1fa2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d1fa2ba:  * (the "License"); you may not use this file except in compliance with
1:d1fa2ba:  * the License.  You may obtain a copy of the License at
1:d1fa2ba:  *
1:d1fa2ba:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d1fa2ba:  *
1:d1fa2ba:  *  Unless required by applicable law or agreed to in writing, software
1:d1fa2ba:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:d1fa2ba:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d1fa2ba:  *  See the License for the specific language governing permissions and
1:d1fa2ba:  *  limitations under the License.
1:d1fa2ba:  */
1:d1fa2ba: package org.apache.activemq.karaf.commands;
2:d1fa2ba: 
1:2f47288: import java.lang.reflect.Field;
1:2f47288: import java.lang.reflect.Type;
1:2f47288: import java.util.ArrayList;
1:2f47288: import java.util.HashMap;
1:2f47288: import java.util.Iterator;
1:2f47288: import java.util.List;
1:2f47288: import java.util.Map;
1:2f47288: 
1:d1fa2ba: import org.apache.felix.gogo.commands.Action;
1:d1fa2ba: import org.apache.felix.gogo.commands.Argument;
1:d1fa2ba: import org.apache.felix.gogo.commands.basic.AbstractCommand;
1:d1fa2ba: import org.apache.felix.gogo.commands.basic.ActionPreparator;
1:d1fa2ba: import org.apache.felix.gogo.commands.basic.DefaultActionPreparator;
1:2f47288: import org.apache.felix.service.command.CommandSession;
1:d1fa2ba: import org.apache.karaf.shell.console.BlueprintContainerAware;
1:d1fa2ba: import org.apache.karaf.shell.console.BundleContextAware;
1:d1fa2ba: import org.apache.karaf.shell.console.CompletableFunction;
1:d1fa2ba: import org.apache.karaf.shell.console.Completer;
1:d1fa2ba: import org.apache.karaf.shell.console.commands.GenericType;
1:d1fa2ba: import org.osgi.framework.BundleContext;
1:d1fa2ba: import org.osgi.service.blueprint.container.BlueprintContainer;
1:d1fa2ba: import org.osgi.service.blueprint.container.Converter;
1:d1fa2ba: 
1:d1fa2ba: /**
1:d1fa2ba:  * Base command to process options and wrap native ActiveMQ console commands.
1:d1fa2ba:  */
1:d1fa2ba: public class ActiveMQCommand extends AbstractCommand implements CompletableFunction
1:d1fa2ba: {
1:d1fa2ba:     protected BlueprintContainer blueprintContainer;
1:d1fa2ba:     protected Converter blueprintConverter;
1:d1fa2ba:     protected String actionId;
1:d1fa2ba:     protected List<Completer> completers;
1:d1fa2ba: 
1:d1fa2ba:     public void setBlueprintContainer(BlueprintContainer blueprintContainer) {
1:d1fa2ba:         this.blueprintContainer = blueprintContainer;
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     public void setBlueprintConverter(Converter blueprintConverter) {
1:d1fa2ba:         this.blueprintConverter = blueprintConverter;
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     public void setActionId(String actionId) {
1:d1fa2ba:         this.actionId = actionId;
1:d1fa2ba:     }
1:d1fa2ba: 
1:2f47288:     @Override
1:d1fa2ba:     public List<Completer> getCompleters() {
1:d1fa2ba:         return completers;
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     public void setCompleters(List<Completer> completers) {
1:d1fa2ba:         this.completers = completers;
1:d1fa2ba:     }
1:d1fa2ba: 
1:2f47288:     @Override
1:d1fa2ba:     protected ActionPreparator getPreparator() throws Exception {
1:d1fa2ba:         return new ActiveMQActionPreparator();
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     class ActiveMQActionPreparator extends DefaultActionPreparator {
1:d1fa2ba:         @Override
1:d1fa2ba:         public boolean prepare(Action action, CommandSession session, List<Object> params) throws Exception
1:d1fa2ba:         {
1:d1fa2ba:             Map<Argument, Field> arguments = new HashMap<Argument, Field>();
1:d1fa2ba:             List<Argument> orderedArguments = new ArrayList<Argument>();
1:d1fa2ba:             // Introspect
1:d1fa2ba:             for (Class type = action.getClass(); type != null; type = type.getSuperclass()) {
1:d1fa2ba:                 for (Field field : type.getDeclaredFields()) {
1:d1fa2ba:                     Argument argument = field.getAnnotation(Argument.class);
1:d1fa2ba:                     if (argument != null) {
1:d1fa2ba:                         arguments.put(argument, field);
1:d1fa2ba:                         int index = argument.index();
1:d1fa2ba:                         while (orderedArguments.size() <= index) {
1:d1fa2ba:                             orderedArguments.add(null);
1:d1fa2ba:                         }
1:d1fa2ba:                         if (orderedArguments.get(index) != null) {
1:d1fa2ba:                             throw new IllegalArgumentException("Duplicate argument index: " + index);
1:d1fa2ba:                         }
1:d1fa2ba:                         orderedArguments.set(index, argument);
1:d1fa2ba:                     }
1:d1fa2ba:                 }
1:d1fa2ba:             }
1:d1fa2ba:             // Check indexes are correct
1:d1fa2ba:             for (int i = 0; i < orderedArguments.size(); i++) {
1:d1fa2ba:                 if (orderedArguments.get(i) == null) {
1:d1fa2ba:                     throw new IllegalArgumentException("Missing argument for index: " + i);
1:d1fa2ba:                 }
1:d1fa2ba:             }
1:d1fa2ba:             // Populate
1:d1fa2ba:             Map<Argument, Object> argumentValues = new HashMap<Argument, Object>();
1:d1fa2ba:             int argIndex = 0;
1:d1fa2ba:             for (Iterator<Object> it = params.iterator(); it.hasNext();) {
1:d1fa2ba:                 Object param = it.next();
1:d1fa2ba:                 if (argIndex >= orderedArguments.size()) {
1:d1fa2ba:                     throw new IllegalArgumentException("Too many arguments specified");
1:d1fa2ba:                 }
1:d1fa2ba:                 Argument argument = orderedArguments.get(argIndex);
1:d1fa2ba:                 if (!argument.multiValued()) {
1:d1fa2ba:                     argIndex++;
1:d1fa2ba:                 }
1:d1fa2ba:                 if (argument.multiValued()) {
1:d1fa2ba:                     List<Object> l = (List<Object>) argumentValues.get(argument);
1:d1fa2ba:                     if (l == null) {
1:d1fa2ba:                         l = new ArrayList<Object>();
1:d1fa2ba:                         argumentValues.put(argument, l);
1:d1fa2ba:                     }
1:d1fa2ba:                     l.add(param);
1:d1fa2ba:                 } else {
1:d1fa2ba:                     argumentValues.put(argument, param);
1:d1fa2ba:                 }
1:d1fa2ba:             }
1:d1fa2ba: 
1:548aa1e:             if (argumentValues.size() == 1 && arguments.size() == 1) {
1:548aa1e:                 Object val = argumentValues.values().iterator().next();
1:548aa1e:                 // short circut convert via blueprint... cause all our commands match this
1:548aa1e:                 // bluepring was failing to convert the last long param to a string for browse
1:548aa1e:                 // where dest is a numeric value - activemq-karaf-itests
1:548aa1e:                 // see: org.apache.activemq.karaf.itest.ActiveMQBrokerFeatureTest.test()
1:548aa1e:                 if (val instanceof List) {
1:548aa1e:                     Field field = arguments.values().iterator().next();
1:548aa1e:                     List<Object> values = (List<Object>) val;
1:548aa1e:                     ArrayList<String> convertedValues = new ArrayList<String>(values.size());
1:548aa1e:                     for (Object o : values) {
1:548aa1e:                         convertedValues.add(String.valueOf(o));
1:548aa1e:                     }
1:548aa1e:                     field.setAccessible(true);
1:548aa1e:                     field.set(action, convertedValues);
1:548aa1e:                     return true;
1:548aa1e:                 }
1:548aa1e:             }
1:548aa1e: 
1:d1fa2ba:             for (Map.Entry<Argument, Object> entry : argumentValues.entrySet()) {
1:d1fa2ba:                 Field field = arguments.get(entry.getKey());
1:d1fa2ba:                 Object value = convert(action, session, entry.getValue(), field.getGenericType());
1:d1fa2ba:                 field.setAccessible(true);
1:d1fa2ba:                 field.set(action, value);
1:d1fa2ba:             }
1:d1fa2ba:             return true;
1:d1fa2ba:         }
1:d1fa2ba: 
1:d1fa2ba:         @Override
1:d1fa2ba:         protected Object convert(Action action, CommandSession commandSession, Object o, Type type) throws Exception {
1:d1fa2ba:             return blueprintConverter.convert(o, new GenericType(type));
1:d1fa2ba:         }
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     @Override
1:d28be4d:     public Action createNewAction() {
1:d1fa2ba:         Action action = (Action) blueprintContainer.getComponentInstance(actionId);
1:d1fa2ba:         if (action instanceof BlueprintContainerAware) {
1:d1fa2ba:             ((BlueprintContainerAware) action).setBlueprintContainer(blueprintContainer);
1:d1fa2ba:         }
1:d1fa2ba:         if (action instanceof BundleContextAware) {
1:d1fa2ba:             BundleContext context = (BundleContext) blueprintContainer.getComponentInstance("blueprintBundleContext");
1:d1fa2ba:             ((BundleContextAware) action).setBundleContext(context);
1:d1fa2ba:         }
1:d1fa2ba:         return action;
1:d1fa2ba:     }
1:d1fa2ba: 
1:eff1194:     @Override
1:eff1194:     public Map<String, Completer> getOptionalCompleters() {
1:eff1194:         //TODO implement completers
1:eff1194:         return null;
1:eff1194:     }
1:d1fa2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:548aa1e
/////////////////////////////////////////////////////////////////////////
1:             if (argumentValues.size() == 1 && arguments.size() == 1) {
1:                 Object val = argumentValues.values().iterator().next();
1:                 // short circut convert via blueprint... cause all our commands match this
1:                 // bluepring was failing to convert the last long param to a string for browse
1:                 // where dest is a numeric value - activemq-karaf-itests
1:                 // see: org.apache.activemq.karaf.itest.ActiveMQBrokerFeatureTest.test()
1:                 if (val instanceof List) {
1:                     Field field = arguments.values().iterator().next();
1:                     List<Object> values = (List<Object>) val;
1:                     ArrayList<String> convertedValues = new ArrayList<String>(values.size());
1:                     for (Object o : values) {
1:                         convertedValues.add(String.valueOf(o));
1:                     }
1:                     field.setAccessible(true);
1:                     field.set(action, convertedValues);
1:                     return true;
1:                 }
1:             }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:eff1194
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Map<String, Completer> getOptionalCompleters() {
1:         //TODO implement completers
1:         return null;
1:     }
commit:2f47288
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Type;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.felix.service.command.CommandSession;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:d28be4d
/////////////////////////////////////////////////////////////////////////
1:     public Action createNewAction() {
commit:d1fa2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.activemq.karaf.commands;
1: 
1: import org.apache.felix.gogo.commands.Action;
1: import org.apache.felix.gogo.commands.Argument;
1: import org.apache.felix.gogo.commands.basic.AbstractCommand;
1: import org.apache.felix.gogo.commands.basic.ActionPreparator;
1: import org.apache.felix.gogo.commands.basic.DefaultActionPreparator;
1: import org.apache.karaf.shell.console.BlueprintContainerAware;
1: import org.apache.karaf.shell.console.BundleContextAware;
1: import org.apache.karaf.shell.console.CompletableFunction;
1: import org.apache.karaf.shell.console.Completer;
1: import org.apache.karaf.shell.console.commands.GenericType;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.blueprint.container.Converter;
0: import org.osgi.service.command.CommandSession;
1: 
0: import java.lang.reflect.Field;
0: import java.lang.reflect.Type;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
1: 
1: /**
1:  * Base command to process options and wrap native ActiveMQ console commands.
1:  */
1: public class ActiveMQCommand extends AbstractCommand implements CompletableFunction
1: {
1:     protected BlueprintContainer blueprintContainer;
1:     protected Converter blueprintConverter;
1:     protected String actionId;
1:     protected List<Completer> completers;
1: 
1:     public void setBlueprintContainer(BlueprintContainer blueprintContainer) {
1:         this.blueprintContainer = blueprintContainer;
1:     }
1: 
1:     public void setBlueprintConverter(Converter blueprintConverter) {
1:         this.blueprintConverter = blueprintConverter;
1:     }
1: 
1:     public void setActionId(String actionId) {
1:         this.actionId = actionId;
1:     }
1: 
1:     public List<Completer> getCompleters() {
1:         return completers;
1:     }
1: 
1:     public void setCompleters(List<Completer> completers) {
1:         this.completers = completers;
1:     }
1: 
1:     @Override
1:     protected ActionPreparator getPreparator() throws Exception {
1:         return new ActiveMQActionPreparator();
1:     }
1: 
1:     class ActiveMQActionPreparator extends DefaultActionPreparator {
1:         @Override
1:         public boolean prepare(Action action, CommandSession session, List<Object> params) throws Exception
1:         {
1:             Map<Argument, Field> arguments = new HashMap<Argument, Field>();
1:             List<Argument> orderedArguments = new ArrayList<Argument>();
1:             // Introspect
1:             for (Class type = action.getClass(); type != null; type = type.getSuperclass()) {
1:                 for (Field field : type.getDeclaredFields()) {
1:                     Argument argument = field.getAnnotation(Argument.class);
1:                     if (argument != null) {
1:                         arguments.put(argument, field);
1:                         int index = argument.index();
1:                         while (orderedArguments.size() <= index) {
1:                             orderedArguments.add(null);
1:                         }
1:                         if (orderedArguments.get(index) != null) {
1:                             throw new IllegalArgumentException("Duplicate argument index: " + index);
1:                         }
1:                         orderedArguments.set(index, argument);
1:                     }
1:                 }
1:             }
1:             // Check indexes are correct
1:             for (int i = 0; i < orderedArguments.size(); i++) {
1:                 if (orderedArguments.get(i) == null) {
1:                     throw new IllegalArgumentException("Missing argument for index: " + i);
1:                 }
1:             }
1:             // Populate
1:             Map<Argument, Object> argumentValues = new HashMap<Argument, Object>();
1:             int argIndex = 0;
1:             for (Iterator<Object> it = params.iterator(); it.hasNext();) {
1:                 Object param = it.next();
1:                 if (argIndex >= orderedArguments.size()) {
1:                     throw new IllegalArgumentException("Too many arguments specified");
1:                 }
1:                 Argument argument = orderedArguments.get(argIndex);
1:                 if (!argument.multiValued()) {
1:                     argIndex++;
1:                 }
1:                 if (argument.multiValued()) {
1:                     List<Object> l = (List<Object>) argumentValues.get(argument);
1:                     if (l == null) {
1:                         l = new ArrayList<Object>();
1:                         argumentValues.put(argument, l);
1:                     }
1:                     l.add(param);
1:                 } else {
1:                     argumentValues.put(argument, param);
1:                 }
1:             }
1: 
1:             for (Map.Entry<Argument, Object> entry : argumentValues.entrySet()) {
1:                 Field field = arguments.get(entry.getKey());
1:                 Object value = convert(action, session, entry.getValue(), field.getGenericType());
1:                 field.setAccessible(true);
1:                 field.set(action, value);
1:             }
1:             return true;
1:         }
1: 
1:         @Override
1:         protected Object convert(Action action, CommandSession commandSession, Object o, Type type) throws Exception {
1:             return blueprintConverter.convert(o, new GenericType(type));
1:         }
1:     }
1: 
0:     protected Action createNewAction() throws Exception {
1:         Action action = (Action) blueprintContainer.getComponentInstance(actionId);
1:         if (action instanceof BlueprintContainerAware) {
1:             ((BlueprintContainerAware) action).setBlueprintContainer(blueprintContainer);
1:         }
1:         if (action instanceof BundleContextAware) {
1:             BundleContext context = (BundleContext) blueprintContainer.getComponentInstance("blueprintBundleContext");
1:             ((BundleContextAware) action).setBundleContext(context);
1:         }
1:         return action;
1:     }
1: 
1: }
============================================================================