1:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
1:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
11:b08ae50: 
1:b08ae50: import java.io.File;
1:b08ae50: import java.io.FileInputStream;
1:b08ae50: import java.io.IOException;
1:b08ae50: import java.io.InputStream;
1:b08ae50: import java.net.MalformedURLException;
1:b08ae50: import java.net.URL;
1:b08ae50: 
1:b08ae50: import javax.jms.JMSException;
1:b08ae50: 
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:b08ae50: import org.apache.commons.net.ftp.FTPClient;
1:b08ae50: 
1:b08ae50: /**
1:b08ae50:  * A FTP implementation of {@link BlobUploadStrategy}.
1:b08ae50:  */
1:af159dd: public class FTPBlobUploadStrategy extends FTPStrategy implements BlobUploadStrategy {
1:b08ae50: 
1:01cda85:     public FTPBlobUploadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException {
1:01cda85:         super(transferPolicy);
1:01cda85:     }
1:af159dd: 
1:01cda85:     @Override
1:01cda85:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
1:12b26b6:         try(FileInputStream fis = new FileInputStream(file)) {
1:12b26b6:             return uploadStream(message, fis);
1:12b26b6:         }
1:01cda85:     }
1:af159dd: 
1:01cda85:     @Override
1:01cda85:     public URL uploadStream(ActiveMQBlobMessage message, InputStream in)
1:01cda85:             throws JMSException, IOException {
1:01cda85: 
1:01cda85:         FTPClient ftp = createFTP();
1:01cda85:         try {
1:01cda85:             String path = url.getPath();
1:af159dd:             String workingDir = path.substring(0, path.lastIndexOf("/"));
1:01cda85:             String filename = message.getMessageId().toString().replaceAll(":", "_");
1:af159dd:             ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
1:01cda85: 
1:af159dd:             String url;
1:af159dd:             if(!ftp.changeWorkingDirectory(workingDir)) {
1:01cda85:                 url = this.url.toString().replaceFirst(this.url.getPath(), "")+"/";
1:af159dd:             } else {
1:01cda85:                 url = this.url.toString();
2:af159dd:             }
1:01cda85: 
1:01cda85:             if (!ftp.storeFile(filename, in)) {
1:01cda85:                 throw new JMSException("FTP store failed: " + ftp.getReplyString());
1:01cda85:             }
1:01cda85:             return new URL(url + filename);
1:01cda85:         } finally {
1:01cda85:             ftp.quit();
1:01cda85:             ftp.disconnect();
1:01cda85:         }
1:01cda85: 
1:01cda85:     }
1:af159dd: 
1:af159dd: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:         try(FileInputStream fis = new FileInputStream(file)) {
1:             return uploadStream(message, fis);
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:01cda85
/////////////////////////////////////////////////////////////////////////
1:     public FTPBlobUploadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException {
1:         super(transferPolicy);
1:     }
1:     @Override
1:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
0:         return uploadStream(message, new FileInputStream(file));
1:     }
1:     @Override
1:     public URL uploadStream(ActiveMQBlobMessage message, InputStream in)
1:             throws JMSException, IOException {
1: 
1:         FTPClient ftp = createFTP();
1:         try {
1:             String path = url.getPath();
1:             String filename = message.getMessageId().toString().replaceAll(":", "_");
1: 
1:                 url = this.url.toString().replaceFirst(this.url.getPath(), "")+"/";
1:                 url = this.url.toString();
1: 
1:             if (!ftp.storeFile(filename, in)) {
1:                 throw new JMSException("FTP store failed: " + ftp.getReplyString());
1:             }
1:             return new URL(url + filename);
1:         } finally {
1:             ftp.quit();
1:             ftp.disconnect();
1:         }
1: 
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class FTPBlobUploadStrategy extends FTPStrategy implements BlobUploadStrategy {
0: 		super(transferPolicy);
0: 	public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
1: 
0: 	    FTPClient ftp = createFTP();
0: 	    try {
0:     		String path = url.getPath();
1:             String workingDir = path.substring(0, path.lastIndexOf("/"));
0:     		String filename = message.getMessageId().toString().replaceAll(":", "_");
1:             ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
1:             
1:             String url;
1:             if(!ftp.changeWorkingDirectory(workingDir)) {
0:             	url = this.url.toString().replaceFirst(this.url.getPath(), "")+"/";
1:             } else {
0:             	url = this.url.toString();
1:             }
1:             
0:     		if (!ftp.storeFile(filename, in)) {
0:     		    throw new JMSException("FTP store failed: " + ftp.getReplyString());
1:     		}
0:     		return new URL(url + filename);
0: 	    } finally {
0:     		ftp.quit();
0:     		ftp.disconnect();
1: 	    }
commit:3af93f1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0: 		if (!ftp.storeFile(filename, in)) {
0: 		    throw new JMSException("FTP store failed: " + ftp.getReplyString());
0: 		}
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.net.ConnectException;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: import org.apache.commons.net.ftp.FTPClient;
1: 
1: /**
1:  * A FTP implementation of {@link BlobUploadStrategy}.
1:  */
0: public class FTPBlobUploadStrategy implements BlobUploadStrategy {
1: 	
0: 	private URL url;
0: 	private String ftpUser = "";
0: 	private String ftpPass = "";
0: 	private BlobTransferPolicy transferPolicy;
1: 	
0: 	public FTPBlobUploadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException {
0: 		this.transferPolicy = transferPolicy;
0: 		this.url = new URL(this.transferPolicy.getUploadUrl());
1: 		
0: 		setUserInformation(url.getUserInfo());
0: 	}
1: 
0: 	public URL uploadFile(ActiveMQBlobMessage message, File file)
0: 			throws JMSException, IOException {
0: 		return uploadStream(message, new FileInputStream(file));
0: 	}
1: 
0: 	public URL uploadStream(ActiveMQBlobMessage message, InputStream in)
0: 			throws JMSException, IOException {
0: 		String connectUrl = url.getHost();
0: 		int port = url.getPort() < 1 ? 21 : url.getPort();
1: 		
0: 		FTPClient ftp = new FTPClient();
0: 		try {
0:         	ftp.connect(connectUrl, port);
0:         } catch(ConnectException e) {
0:         	throw new JMSException("Problem connecting the FTP-server");
0:         }
0: 		if(!ftp.login(ftpUser, ftpPass)) {
0: 			ftp.quit();
0: 			ftp.disconnect();
0: 			throw new JMSException("Cant Authentificate to FTP-Server");
0: 		}
0: 		String path = url.getPath();
0:         String workingDir = path.substring(0, path.lastIndexOf("/"));
0: 		String filename = message.getMessageId().toString().replaceAll(":", "_");
0:         ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
1:         
0:         String url;
0:         if(!ftp.changeWorkingDirectory(workingDir)) {
0:         	url = this.url.toString().replaceFirst(this.url.getPath(), "")+"/";
0:         } else {
0:         	url = this.url.toString();
0:         }
1:         
0: 		ftp.storeFile(filename, in);
0: 		ftp.quit();
0: 		ftp.disconnect();
1: 		
0: 		return new URL(url + filename);
0: 	}
1: 	
0: 	private void setUserInformation(String userInfo) {
0: 		if(userInfo != null) {
0: 			String[] userPass = userInfo.split(":");
0: 			if(userPass.length > 0) this.ftpUser = userPass[0];
0: 			if(userPass.length > 1) this.ftpPass = userPass[1];
0: 		} else {
0: 			this.ftpUser = "anonymous";
0: 			this.ftpPass = "anonymous";
0: 		}
0: 	}
1: 
0: }
============================================================================