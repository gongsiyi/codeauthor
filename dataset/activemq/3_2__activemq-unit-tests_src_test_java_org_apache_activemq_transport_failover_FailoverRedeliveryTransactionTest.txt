1:2030097: /**
1:2030097:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2030097:  * contributor license agreements.  See the NOTICE file distributed with
1:2030097:  * this work for additional information regarding copyright ownership.
1:2030097:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2030097:  * (the "License"); you may not use this file except in compliance with
1:2030097:  * the License.  You may obtain a copy of the License at
1:2030097:  *
1:2030097:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2030097:  *
1:2030097:  * Unless required by applicable law or agreed to in writing, software
1:2030097:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2030097:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2030097:  * See the License for the specific language governing permissions and
1:2030097:  * limitations under the License.
1:2030097:  */
1:2030097: package org.apache.activemq.transport.failover;
3:2030097: 
1:2030097: import junit.framework.Test;
1:2030097: import org.apache.activemq.ActiveMQConnectionFactory;
1:2030097: import org.apache.activemq.broker.BrokerService;
1:266d23e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:266d23e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2030097: 
1:2030097: public class FailoverRedeliveryTransactionTest extends FailoverTransactionTest {
1:2030097: 
1:2030097:     public static Test suite() {
1:2030097:         return suite(FailoverRedeliveryTransactionTest.class);
3:2030097:     }
1:2030097: 
2:2030097:     @Override
1:2030097:     public void configureConnectionFactory(ActiveMQConnectionFactory factory) {
1:2030097:         super.configureConnectionFactory(factory);
1:601f54f:         factory.setTransactedIndividualAck(true);
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:2030097:         BrokerService brokerService = super.createBroker(deleteAllMessagesOnStartup, bindAddress);
1:266d23e:         PolicyMap policyMap = new PolicyMap();
1:266d23e:         PolicyEntry defaultEntry = new PolicyEntry();
1:266d23e:         defaultEntry.setPersistJMSRedelivered(true);
1:266d23e:         policyMap.setDefaultEntry(defaultEntry);
1:266d23e:         brokerService.setDestinationPolicy(policyMap);
1:2030097:         return brokerService;
1:2030097:     }
1:2030097: 
1:2030097:     // no point rerunning these
1:2030097:     @Override
1:2030097:     public void testFailoverProducerCloseBeforeTransaction() throws Exception {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void initCombosForTestFailoverCommitReplyLost() {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void testFailoverCommitReplyLost() throws Exception {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:721d623:     public void testFailoverCommitReplyLostWithDestinationPathSeparator() throws Exception {
1:721d623:     }
1:721d623: 
1:721d623:     @Override
1:2030097:     public void initCombosForTestFailoverSendReplyLost() {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void testFailoverSendReplyLost() throws Exception {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void initCombosForTestFailoverConnectionSendReplyLost() {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void testFailoverConnectionSendReplyLost() throws Exception {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void testFailoverProducerCloseBeforeTransactionFailWhenDisabled() throws Exception {
1:2030097:     }
1:2030097: 
1:2030097:     @Override
1:2030097:     public void testFailoverMultipleProducerCloseBeforeTransaction() throws Exception {
1:2030097:     }
1:2030097: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setPersistJMSRedelivered(true);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(policyMap);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:721d623
/////////////////////////////////////////////////////////////////////////
1:     public void testFailoverCommitReplyLostWithDestinationPathSeparator() throws Exception {
1:     }
1: 
1:     @Override
commit:601f54f
/////////////////////////////////////////////////////////////////////////
1:         factory.setTransactedIndividualAck(true);
commit:2030097
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
0: import java.io.IOException;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: 
1: public class FailoverRedeliveryTransactionTest extends FailoverTransactionTest {
1: 
1:     public static Test suite() {
1:         return suite(FailoverRedeliveryTransactionTest.class);
1:     }
1: 
1:     @Override
1:     public void configureConnectionFactory(ActiveMQConnectionFactory factory) {
1:         super.configureConnectionFactory(factory);
0:         factory.setImmediateAck(true);
1:     }
1: 
1:     @Override
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         BrokerService brokerService = super.createBroker(deleteAllMessagesOnStartup, bindAddress);
0:         configurePersistenceAdapter(brokerService);
1:         return brokerService;
1:     }
1: 
0:     private void configurePersistenceAdapter(BrokerService brokerService) throws IOException {
0:          KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter();
0:          kahaDBPersistenceAdapter.setRewriteOnRedelivery(true);
1:     }
1: 
1:     @Override
0:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
0:         PersistenceAdapter persistenceAdapter = super.setDefaultPersistenceAdapter(broker);
0:         configurePersistenceAdapter(broker);
0:         return persistenceAdapter;
1:     }
1: 
1:     // no point rerunning these
1:     @Override
1:     public void testFailoverProducerCloseBeforeTransaction() throws Exception {
1:     }
1: 
1:     @Override
1:     public void initCombosForTestFailoverCommitReplyLost() {
1:     }
1: 
1:     @Override
1:     public void testFailoverCommitReplyLost() throws Exception {
1:     }
1: 
1:     @Override
1:     public void initCombosForTestFailoverSendReplyLost() {
1:     }
1: 
1:     @Override
1:     public void testFailoverSendReplyLost() throws Exception {
1:     }
1: 
1:     @Override
1:     public void initCombosForTestFailoverConnectionSendReplyLost() {
1:     }
1: 
1:     @Override
1:     public void testFailoverConnectionSendReplyLost() throws Exception {
1:     }
1: 
1:     @Override
1:     public void testFailoverProducerCloseBeforeTransactionFailWhenDisabled() throws Exception {
1:     }
1: 
1:     @Override
1:     public void testFailoverMultipleProducerCloseBeforeTransaction() throws Exception {
1:     }
1: }
============================================================================