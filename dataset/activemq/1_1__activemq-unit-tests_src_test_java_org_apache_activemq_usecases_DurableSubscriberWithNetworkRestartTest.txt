1:c1c82be: /**
1:c1c82be:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c1c82be:  * contributor license agreements.  See the NOTICE file distributed with
1:c1c82be:  * this work for additional information regarding copyright ownership.
1:c1c82be:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c1c82be:  * (the "License"); you may not use this file except in compliance with
1:c1c82be:  * the License.  You may obtain a copy of the License at
1:c1c82be:  *
1:c1c82be:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c1c82be:  *
1:c1c82be:  * Unless required by applicable law or agreed to in writing, software
1:c1c82be:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1c82be:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1c82be:  * See the License for the specific language governing permissions and
1:c1c82be:  * limitations under the License.
1:c1c82be:  */
1:c1c82be: package org.apache.activemq.usecases;
1:c1c82be: 
1:c1c82be: import java.net.MalformedURLException;
1:c1c82be: import java.net.URI;
1:c1c82be: import java.util.Set;
1:c1c82be: import javax.jms.Connection;
1:c1c82be: import javax.jms.DeliveryMode;
1:c1c82be: import javax.jms.Message;
1:c1c82be: import javax.jms.MessageConsumer;
1:c1c82be: import javax.jms.MessageProducer;
1:c1c82be: import javax.jms.Session;
1:c1c82be: import javax.management.ObjectName;
1:c1c82be: import org.apache.activemq.ActiveMQConnectionFactory;
1:c1c82be: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:c1c82be: import org.apache.activemq.broker.BrokerService;
1:c1c82be: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c1c82be: import org.apache.activemq.broker.region.policy.PolicyMap;
1:c1c82be: import org.apache.activemq.command.ActiveMQTopic;
1:c1c82be: import org.apache.activemq.network.NetworkConnector;
1:c1c82be: import org.apache.activemq.util.Wait;
1:c1c82be: import org.apache.commons.logging.Log;
1:c1c82be: import org.apache.commons.logging.LogFactory;
1:c1c82be: 
1:c1c82be: 
1:c1c82be: import static org.junit.Assume.assumeNotNull;
1:c1c82be: 
1:c1c82be: 
1:c1c82be: public class DurableSubscriberWithNetworkRestartTest extends JmsMultipleBrokersTestSupport {
1:c1c82be:     private static final Log LOG = LogFactory.getLog(DurableSubscriberWithNetworkRestartTest.class);
1:c1c82be:     private static final String HUB = "HubBroker";
1:c1c82be:     private static final String SPOKE = "SpokeBroker";
1:c1c82be:     protected static final int MESSAGE_COUNT = 10;
1:c1c82be:     public boolean dynamicOnly = false;
1:c1c82be: 
1:c1c82be:     public void testSendOnAReceiveOnBWithTransportDisconnectDynamicOnly() throws Exception {
1:c1c82be:         dynamicOnly = true;
1:c1c82be:         try {
1:c1c82be:             testSendOnAReceiveOnBWithTransportDisconnect();
1:c1c82be:         } finally {
1:c1c82be:             dynamicOnly = false;
1:c1c82be:         }
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:c1c82be:         bridge(SPOKE, HUB);
1:c1c82be:         startAllBrokers();
1:c1c82be: 
1:c1c82be:         verifyDuplexBridgeMbean();
1:c1c82be: 
1:c1c82be:         // Setup connection
1:c1c82be:         URI hubURI = brokers.get(HUB).broker.getTransportConnectors().get(0).getPublishableConnectURI();
1:c1c82be:         URI spokeURI = brokers.get(SPOKE).broker.getTransportConnectors().get(0).getPublishableConnectURI();
1:c1c82be:         ActiveMQConnectionFactory facHub = new ActiveMQConnectionFactory(hubURI);
1:c1c82be:         ActiveMQConnectionFactory facSpoke = new ActiveMQConnectionFactory(spokeURI);
1:c1c82be:         Connection conHub = facHub.createConnection();
1:c1c82be:         Connection conSpoke = facSpoke.createConnection();
1:c1c82be:         conHub.setClientID("clientHUB");
1:c1c82be:         conSpoke.setClientID("clientSPOKE");
1:c1c82be:         conHub.start();
1:c1c82be:         conSpoke.start();
1:c1c82be:         Session sesHub = conHub.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c1c82be:         Session sesSpoke = conSpoke.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c1c82be: 
1:c1c82be:         ActiveMQTopic topic = new ActiveMQTopic("TEST.FOO");
1:c1c82be:         String consumerName = "consumerName";
1:c1c82be: 
1:c1c82be:         // Setup consumers
1:c1c82be:         MessageConsumer remoteConsumer = sesHub.createDurableSubscriber(topic, consumerName);
1:c1c82be:         sleep(1000);
1:c1c82be:         remoteConsumer.close();
1:c1c82be: 
1:c1c82be:         // Setup producer
1:c1c82be:         MessageProducer localProducer = sesSpoke.createProducer(topic);
1:c1c82be:         localProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:c1c82be: 
1:c1c82be:         final String payloadString = new String(new byte[10*1024]);
1:c1c82be:         // Send messages
1:c1c82be:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:c1c82be:             Message test = sesSpoke.createTextMessage("test-" + i);
1:c1c82be:             test.setStringProperty("payload", payloadString);
1:c1c82be:             localProducer.send(test);
1:c1c82be:         }
1:c1c82be:         localProducer.close();
1:c1c82be: 
1:c1c82be:         final String options = "?persistent=true&useJmx=true&deleteAllMessagesOnStartup=false";
1:c1c82be:         for (int i=0;i<2;i++) {
1:c1c82be:             brokers.get(SPOKE).broker.stop();
1:c1c82be:             sleep(1000);
1:c1c82be:             createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:c1c82be:             bridge(SPOKE, HUB);
1:c1c82be:             brokers.get(SPOKE).broker.start();
1:c1c82be:             LOG.info("restarted spoke..:" + i);
1:c1c82be: 
1:c1c82be:             assertTrue("got mbeans on restart", Wait.waitFor(new Wait.Condition() {
1:c1c82be:                 @Override
1:c1c82be:                 public boolean isSatisified() throws Exception {
1:c1c82be:                     return countMbeans( brokers.get(HUB).broker, "networkBridge", 20000) == (dynamicOnly ? 1 : 2);
1:c1c82be:                 }
1:c1c82be:             }));
1:c1c82be:         }
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     private void verifyDuplexBridgeMbean() throws Exception {
1:c1c82be:         assertEquals(1, countMbeans( brokers.get(HUB).broker, "networkBridge", 5000));
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     private int countMbeans(BrokerService broker, String type, int timeout) throws Exception {
1:c1c82be:         final long expiryTime = System.currentTimeMillis() + timeout;
1:c1c82be: 
1:c1c82be:         if (!type.contains("=")) {
1:c1c82be:             type = type + "=*";
1:c1c82be:         }
1:c1c82be: 
1:c1c82be:         final ObjectName beanName = new ObjectName("org.apache.activemq:type=Broker,brokerName="
1:c1c82be:                 + broker.getBrokerName() + "," + type +",*");
1:c1c82be:         Set<ObjectName> mbeans = null;
1:c1c82be:         int count = 0;
1:c1c82be:         do {
1:c1c82be:             if (timeout > 0) {
1:c1c82be:                 Thread.sleep(100);
1:c1c82be:             }
1:c1c82be: 
1:c1c82be:             mbeans = broker.getManagementContext().queryNames(beanName, null);
1:c1c82be:             if (mbeans != null) {
1:c1c82be:                 count = mbeans.size();
1:c1c82be:                 LOG.info("Found: " + count + ", matching type: " +type);
1:c1c82be:                 for (ObjectName objectName : mbeans) {
1:c1c82be:                     LOG.info("" + objectName);
1:c1c82be:                 }
1:c1c82be:                 //} else {
1:c1c82be:                 //logAllMbeans(broker);
1:c1c82be:             }
1:c1c82be:         } while ((mbeans == null || mbeans.isEmpty()) && expiryTime > System.currentTimeMillis());
1:c1c82be: 
1:c1c82be:         // If port 1099 is in use when the Broker starts, starting the jmx connector
1:c1c82be:         // will fail.  So, if we have no mbsc to query, skip the test.
1:c1c82be:         if (timeout > 0) {
1:c1c82be:             assumeNotNull(mbeans);
1:c1c82be:         }
1:c1c82be: 
1:c1c82be:         return count;
1:c1c82be: 
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     private void logAllMbeans(BrokerService broker) throws MalformedURLException {
1:c1c82be:         try {
1:c1c82be:             // trace all existing MBeans
1:c1c82be:             Set<?> all = broker.getManagementContext().queryNames(null, null);
1:c1c82be:             LOG.info("Total MBean count=" + all.size());
1:c1c82be:             for (Object o : all) {
1:c1c82be:                 //ObjectInstance bean = (ObjectInstance)o;
1:c1c82be:                 LOG.info(o);
1:c1c82be:             }
1:c1c82be:         } catch (Exception ignored) {
1:c1c82be:             LOG.warn("getMBeanServer ex: " + ignored);
1:c1c82be:         }
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     public NetworkConnector bridge(String from, String to) throws Exception {
1:c1c82be:         NetworkConnector networkConnector = bridgeBrokers(from, to, dynamicOnly, -1, true);
1:c1c82be:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:c1c82be:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:c1c82be:         networkConnector.setConsumerTTL(1);
1:c1c82be:         networkConnector.setDuplex(true);
1:c1c82be:         return networkConnector;
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     @Override
1:c1c82be:     protected void startAllBrokers() throws Exception {
1:c1c82be:         // Ensure HUB is started first so bridge will be active from the get go
1:c1c82be:         BrokerItem brokerItem = brokers.get(HUB);
1:c1c82be:         brokerItem.broker.start();
1:c1c82be:         brokerItem = brokers.get(SPOKE);
1:c1c82be:         brokerItem.broker.start();
1:c1c82be:         sleep(600);
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     public void setUp() throws Exception {
1:c1c82be:         super.setAutoFail(false);
1:c1c82be:         super.setUp();
1:c1c82be:         createBrokers(true);
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     private void createBrokers(boolean del) throws Exception {
1:c1c82be:         final String options = "?persistent=true&useJmx=true&deleteAllMessagesOnStartup=" + del;
1:c1c82be:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:c1c82be:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     protected void configureBroker(BrokerService broker) {
1:c1c82be:         broker.setKeepDurableSubsActive(false);
1:c1c82be:         broker.getManagementContext().setCreateConnector(false);
1:c1c82be:         PolicyMap defaultPolcyMap = new PolicyMap();
1:c1c82be:         PolicyEntry defaultPolicy = new PolicyEntry();
1:c1c82be:         //defaultPolicy.setUseCache(false);
1:c1c82be:         if (broker.getBrokerName().equals(HUB)) {
1:c1c82be:             defaultPolicy.setStoreUsageHighWaterMark(2);
1:c1c82be:             broker.getSystemUsage().getStoreUsage().setLimit(1*1024*1024);
1:c1c82be:         }
1:c1c82be:         defaultPolcyMap.setDefaultEntry(defaultPolicy);
1:c1c82be:         broker.setDestinationPolicy(defaultPolcyMap);
1:c1c82be:         broker.getSystemUsage().getMemoryUsage().setLimit(100*1024*1024);
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     public void tearDown() throws Exception {
1:c1c82be:         super.tearDown();
1:c1c82be:     }
1:c1c82be: 
1:c1c82be:     private void sleep(int milliSecondTime) {
1:c1c82be:         try {
1:c1c82be:             Thread.sleep(milliSecondTime);
1:c1c82be:         } catch (InterruptedException igonred) {
1:c1c82be:         }
1:c1c82be:     }
1:c1c82be: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c1c82be
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.util.Set;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: import static org.junit.Assume.assumeNotNull;
1: 
1: 
1: public class DurableSubscriberWithNetworkRestartTest extends JmsMultipleBrokersTestSupport {
1:     private static final Log LOG = LogFactory.getLog(DurableSubscriberWithNetworkRestartTest.class);
1:     private static final String HUB = "HubBroker";
1:     private static final String SPOKE = "SpokeBroker";
1:     protected static final int MESSAGE_COUNT = 10;
1:     public boolean dynamicOnly = false;
1: 
1:     public void testSendOnAReceiveOnBWithTransportDisconnectDynamicOnly() throws Exception {
1:         dynamicOnly = true;
1:         try {
1:             testSendOnAReceiveOnBWithTransportDisconnect();
1:         } finally {
1:             dynamicOnly = false;
1:         }
1:     }
1: 
1:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:         bridge(SPOKE, HUB);
1:         startAllBrokers();
1: 
1:         verifyDuplexBridgeMbean();
1: 
1:         // Setup connection
1:         URI hubURI = brokers.get(HUB).broker.getTransportConnectors().get(0).getPublishableConnectURI();
1:         URI spokeURI = brokers.get(SPOKE).broker.getTransportConnectors().get(0).getPublishableConnectURI();
1:         ActiveMQConnectionFactory facHub = new ActiveMQConnectionFactory(hubURI);
1:         ActiveMQConnectionFactory facSpoke = new ActiveMQConnectionFactory(spokeURI);
1:         Connection conHub = facHub.createConnection();
1:         Connection conSpoke = facSpoke.createConnection();
1:         conHub.setClientID("clientHUB");
1:         conSpoke.setClientID("clientSPOKE");
1:         conHub.start();
1:         conSpoke.start();
1:         Session sesHub = conHub.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session sesSpoke = conSpoke.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQTopic topic = new ActiveMQTopic("TEST.FOO");
1:         String consumerName = "consumerName";
1: 
1:         // Setup consumers
1:         MessageConsumer remoteConsumer = sesHub.createDurableSubscriber(topic, consumerName);
1:         sleep(1000);
1:         remoteConsumer.close();
1: 
1:         // Setup producer
1:         MessageProducer localProducer = sesSpoke.createProducer(topic);
1:         localProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         final String payloadString = new String(new byte[10*1024]);
1:         // Send messages
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             Message test = sesSpoke.createTextMessage("test-" + i);
1:             test.setStringProperty("payload", payloadString);
1:             localProducer.send(test);
1:         }
1:         localProducer.close();
1: 
1:         final String options = "?persistent=true&useJmx=true&deleteAllMessagesOnStartup=false";
1:         for (int i=0;i<2;i++) {
1:             brokers.get(SPOKE).broker.stop();
1:             sleep(1000);
1:             createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:             bridge(SPOKE, HUB);
1:             brokers.get(SPOKE).broker.start();
1:             LOG.info("restarted spoke..:" + i);
1: 
1:             assertTrue("got mbeans on restart", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return countMbeans( brokers.get(HUB).broker, "networkBridge", 20000) == (dynamicOnly ? 1 : 2);
1:                 }
1:             }));
1:         }
1:     }
1: 
1:     private void verifyDuplexBridgeMbean() throws Exception {
1:         assertEquals(1, countMbeans( brokers.get(HUB).broker, "networkBridge", 5000));
1:     }
1: 
1:     private int countMbeans(BrokerService broker, String type, int timeout) throws Exception {
1:         final long expiryTime = System.currentTimeMillis() + timeout;
1: 
1:         if (!type.contains("=")) {
1:             type = type + "=*";
1:         }
1: 
1:         final ObjectName beanName = new ObjectName("org.apache.activemq:type=Broker,brokerName="
1:                 + broker.getBrokerName() + "," + type +",*");
1:         Set<ObjectName> mbeans = null;
1:         int count = 0;
1:         do {
1:             if (timeout > 0) {
1:                 Thread.sleep(100);
1:             }
1: 
1:             mbeans = broker.getManagementContext().queryNames(beanName, null);
1:             if (mbeans != null) {
1:                 count = mbeans.size();
1:                 LOG.info("Found: " + count + ", matching type: " +type);
1:                 for (ObjectName objectName : mbeans) {
1:                     LOG.info("" + objectName);
1:                 }
1:                 //} else {
1:                 //logAllMbeans(broker);
1:             }
1:         } while ((mbeans == null || mbeans.isEmpty()) && expiryTime > System.currentTimeMillis());
1: 
1:         // If port 1099 is in use when the Broker starts, starting the jmx connector
1:         // will fail.  So, if we have no mbsc to query, skip the test.
1:         if (timeout > 0) {
1:             assumeNotNull(mbeans);
1:         }
1: 
1:         return count;
1: 
1:     }
1: 
1:     private void logAllMbeans(BrokerService broker) throws MalformedURLException {
1:         try {
1:             // trace all existing MBeans
1:             Set<?> all = broker.getManagementContext().queryNames(null, null);
1:             LOG.info("Total MBean count=" + all.size());
1:             for (Object o : all) {
1:                 //ObjectInstance bean = (ObjectInstance)o;
1:                 LOG.info(o);
1:             }
1:         } catch (Exception ignored) {
1:             LOG.warn("getMBeanServer ex: " + ignored);
1:         }
1:     }
1: 
1:     public NetworkConnector bridge(String from, String to) throws Exception {
1:         NetworkConnector networkConnector = bridgeBrokers(from, to, dynamicOnly, -1, true);
1:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:         networkConnector.setConsumerTTL(1);
1:         networkConnector.setDuplex(true);
1:         return networkConnector;
1:     }
1: 
1:     @Override
1:     protected void startAllBrokers() throws Exception {
1:         // Ensure HUB is started first so bridge will be active from the get go
1:         BrokerItem brokerItem = brokers.get(HUB);
1:         brokerItem.broker.start();
1:         brokerItem = brokers.get(SPOKE);
1:         brokerItem.broker.start();
1:         sleep(600);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(false);
1:         super.setUp();
1:         createBrokers(true);
1:     }
1: 
1:     private void createBrokers(boolean del) throws Exception {
1:         final String options = "?persistent=true&useJmx=true&deleteAllMessagesOnStartup=" + del;
1:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:     }
1: 
1:     protected void configureBroker(BrokerService broker) {
1:         broker.setKeepDurableSubsActive(false);
1:         broker.getManagementContext().setCreateConnector(false);
1:         PolicyMap defaultPolcyMap = new PolicyMap();
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         //defaultPolicy.setUseCache(false);
1:         if (broker.getBrokerName().equals(HUB)) {
1:             defaultPolicy.setStoreUsageHighWaterMark(2);
1:             broker.getSystemUsage().getStoreUsage().setLimit(1*1024*1024);
1:         }
1:         defaultPolcyMap.setDefaultEntry(defaultPolicy);
1:         broker.setDestinationPolicy(defaultPolcyMap);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(100*1024*1024);
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }
1:     }
1: }
============================================================================