2:8733d17: /**
1:8733d17:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8733d17:  * contributor license agreements.  See the NOTICE file distributed with
1:8733d17:  * this work for additional information regarding copyright ownership.
1:8733d17:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8733d17:  * (the "License"); you may not use this file except in compliance with
1:8733d17:  * the License.  You may obtain a copy of the License at
8:8733d17:  *
1:8733d17:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:8733d17:  * Unless required by applicable law or agreed to in writing, software
1:8733d17:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8733d17:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8733d17:  * See the License for the specific language governing permissions and
1:8733d17:  * limitations under the License.
2:8733d17:  */
1:8733d17: package org.apache.activemq.ra;
7:8733d17: 
1:8733d17: import javax.jms.JMSException;
1:da36f78: 
1:8733d17: import org.apache.activemq.ActiveMQConnection;
1:8733d17: import org.apache.activemq.ActiveMQConnectionFactory;
1:9becfc0: import org.apache.activemq.ActiveMQSslConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8733d17: 
1:8733d17: /**
1:da36f78:  * Abstract base class providing support for creating physical connections to an
1:da36f78:  * ActiveMQ instance.
1:da36f78:  *
1:da36f78:  *
1:8733d17:  */
1:8733d17: public class ActiveMQConnectionSupport {
1:da36f78: 
1:8733d17:     private ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
1:8bf987b:     protected Logger log = LoggerFactory.getLogger(getClass());
1:da36f78: 
1:8733d17:     /**
1:8733d17:      * Creates a factory for obtaining physical connections to an Active MQ
1:da36f78:      * broker. The factory is configured with the given configuration
1:da36f78:      * information.
1:da36f78:      *
1:da36f78:      * @param connectionRequestInfo
1:da36f78:      *        the configuration request information
1:9becfc0:      * @param activationSpec
1:8733d17:      * @return the connection factory
1:da36f78:      * @throws java.lang.IllegalArgumentException
1:da36f78:      *         if the server URL given in the configuration information is not a
1:da36f78:      *         valid URL
1:8733d17:      */
1:9becfc0:     protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo, MessageActivationSpec activationSpec) {
1:da36f78:         // ActiveMQSslConnectionFactory defaults to TCP anyway
1:9becfc0:         ActiveMQConnectionFactory factory = new ActiveMQSslConnectionFactory();
1:9becfc0:         connectionRequestInfo.configure(factory, activationSpec);
1:8733d17:         return factory;
10:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:da36f78:      * Creates a new physical connection to an Active MQ broker identified by
1:da36f78:      * given connection request information.
1:da36f78:      *
1:da36f78:      * @param connectionRequestInfo
1:da36f78:      *        the connection request information identifying the broker and any
1:da36f78:      *        required connection parameters, e.g. username/password
1:8733d17:      * @return the physical connection
1:da36f78:      * @throws JMSException
1:da36f78:      *         if the connection could not be established
1:8733d17:      */
1:9becfc0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException {
1:9becfc0:         return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo, null));
1:9becfc0:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * Creates a new physical connection to an Active MQ broker using a given
1:da36f78:      * connection factory and credentials supplied in connection request
1:da36f78:      * information.
1:da36f78:      *
1:da36f78:      * @param connectionRequestInfo
1:da36f78:      *        the connection request information containing the credentials to
1:da36f78:      *        use for the connection request
1:8733d17:      * @return the physical connection
1:da36f78:      * @throws JMSException
1:da36f78:      *         if the connection could not be established
1:8733d17:      */
1:da36f78:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo, ActiveMQConnectionFactory connectionFactory)
1:da36f78:         throws JMSException {
1:8733d17:         String userName = connectionRequestInfo.getUserName();
1:8733d17:         String password = connectionRequestInfo.getPassword();
1:8733d17:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
1:8733d17: 
1:8733d17:         String clientId = connectionRequestInfo.getClientid();
1:da36f78:         if (clientId != null && clientId.length() > 0) {
1:8733d17:             physicalConnection.setClientID(clientId);
1:8733d17:         }
1:8733d17:         return physicalConnection;
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * Gets the connection request information.
1:da36f78:      *
1:8733d17:      * @return the connection request information
1:8733d17:      */
1:da36f78:     public ActiveMQConnectionRequestInfo getInfo() {
1:8733d17:         return info;
1:8733d17:     }
1:da36f78: 
1:8733d17:     /**
1:8733d17:      * Sets the connection request information as a whole.
1:da36f78:      *
1:da36f78:      * @param connectionRequestInfo
1:da36f78:      *        the connection request information
1:8733d17:      */
1:da36f78:     protected void setInfo(ActiveMQConnectionRequestInfo connectionRequestInfo) {
1:8733d17:         info = connectionRequestInfo;
1:da36f78:         if (log.isDebugEnabled()) {
1:9e13901:             log.debug(this + ", setting [info] to: " + info);
1:9e13901:         }
1:9e13901:     }
1:8733d17: 
1:8733d17:     protected boolean notEqual(Object o1, Object o2) {
1:8733d17:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
1:8733d17:     }
1:8733d17: 
1:8733d17:     protected String emptyToNull(String value) {
1:da36f78:         if (value == null || value.length() == 0) {
1:8733d17:             return null;
1:da36f78:         } else {
1:8733d17:             return value;
1:8733d17:         }
1:8733d17:     }
1:8733d17: 
1:8733d17:     protected String defaultValue(String value, String defaultValue) {
1:8733d17:         if (value != null) {
1:8733d17:             return value;
1:8733d17:         }
1:8733d17:         return defaultValue;
1:8733d17:     }
1:8733d17: 
1:8733d17:     // ///////////////////////////////////////////////////////////////////////
1:8733d17:     //
1:8733d17:     // Java Bean getters and setters for this ResourceAdapter class.
1:8733d17:     //
1:8733d17:     // ///////////////////////////////////////////////////////////////////////
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return client id
1:8733d17:      */
1:8733d17:     public String getClientid() {
1:8733d17:         return emptyToNull(info.getClientid());
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param clientid
1:8733d17:      */
1:8733d17:     public void setClientid(String clientid) {
1:da36f78:         if (log.isDebugEnabled()) {
1:9e13901:             log.debug(this + ", setting [clientid] to: " + clientid);
1:8733d17:         }
1:8733d17:         info.setClientid(clientid);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return password
1:8733d17:      */
1:8733d17:     public String getPassword() {
1:8733d17:         return emptyToNull(info.getPassword());
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param password
1:8733d17:      */
1:8733d17:     public void setPassword(String password) {
1:da36f78:         if (log.isDebugEnabled()) {
1:9e13901:             log.debug(this + ", setting [password] property");
1:8733d17:         }
1:8733d17:         info.setPassword(password);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return server URL
1:8733d17:      */
1:8733d17:     public String getServerUrl() {
1:8733d17:         return info.getServerUrl();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param url
1:8733d17:      */
1:8733d17:     public void setServerUrl(String url) {
1:da36f78:         if (log.isDebugEnabled()) {
1:9e13901:             log.debug(this + ", setting [serverUrl] to: " + url);
1:8733d17:         }
1:8733d17:         info.setServerUrl(url);
1:9becfc0:     }
1:8733d17: 
1:e39db56:     public String getTrustStore() {
1:e39db56:         return info.getTrustStore();
1:e39db56:     }
1:e39db56: 
1:9becfc0:     public void setTrustStore(String trustStore) {
1:da36f78:         if (log.isDebugEnabled()) {
1:da36f78:             log.debug(this + ", setting [trustStore] to: " + trustStore);
1:da36f78:         }
1:9becfc0:         info.setTrustStore(trustStore);
1:9becfc0:     }
1:9becfc0: 
1:e39db56:     public String getTrustStorePassword() {
1:e39db56:         return info.getTrustStorePassword();
1:e39db56:     }
1:e39db56: 
1:9becfc0:     public void setTrustStorePassword(String trustStorePassword) {
1:da36f78:         if (log.isDebugEnabled()) {
1:da36f78:             log.debug(this + ", setting [trustStorePassword] to: " + trustStorePassword);
1:da36f78:         }
1:9becfc0:         info.setTrustStorePassword(trustStorePassword);
1:9becfc0:     }
1:9becfc0: 
1:e39db56:     public String getKeyStore() {
1:e39db56:         return info.getKeyStore();
1:e39db56:     }
1:e39db56: 
1:9becfc0:     public void setKeyStore(String keyStore) {
1:da36f78:         if (log.isDebugEnabled()) {
1:da36f78:             log.debug(this + ", setting [keyStore] to: " + keyStore);
1:da36f78:         }
1:9becfc0:         info.setKeyStore(keyStore);
1:9becfc0:     }
1:9becfc0: 
1:e39db56:     public String getKeyStorePassword() {
1:e39db56:         return info.getKeyStorePassword();
1:e39db56:     }
1:e39db56: 
1:9becfc0:     public void setKeyStorePassword(String keyStorePassword) {
1:da36f78:         if (log.isDebugEnabled()) {
1:da36f78:             log.debug(this + ", setting [keyStorePassword] to: " + keyStorePassword);
1:da36f78:         }
1:9becfc0:         info.setKeyStorePassword(keyStorePassword);
1:9becfc0:     }
1:9becfc0: 
1:e39db56:     public String getKeyStoreKeyPassword() {
1:e39db56:         return info.getKeyStoreKeyPassword();
1:e39db56:     }
1:e39db56: 
1:9becfc0:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:da36f78:         if (log.isDebugEnabled()) {
1:da36f78:             log.debug(this + ", setting [keyStoreKeyPassword] to: " + keyStoreKeyPassword);
1:da36f78:         }
1:9becfc0:         info.setKeyStoreKeyPassword(keyStoreKeyPassword);
1:9becfc0:     }
1:9becfc0: 
1:8733d17:     /**
1:8733d17:      * @return user name
1:8733d17:      */
1:8733d17:     public String getUserName() {
1:8733d17:         return emptyToNull(info.getUserName());
1:9becfc0:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param userid
1:8733d17:      */
1:8733d17:     public void setUserName(String userid) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [userName] to: " + userid);
1:9becfc0:         }
1:8733d17:         info.setUserName(userid);
1:9becfc0:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return durable topic prefetch
1:8733d17:      */
1:8733d17:     public Integer getDurableTopicPrefetch() {
1:8733d17:         return info.getDurableTopicPrefetch();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:00bdf00:      * @param optimizeDurableTopicPrefetch
1:00bdf00:      */
1:00bdf00:     public void setOptimizeDurableTopicPrefetch(Integer optimizeDurableTopicPrefetch) {
1:da36f78:         if (log.isDebugEnabled()) {
1:00bdf00:             log.debug("setting [optimizeDurableTopicPrefetch] to: " + optimizeDurableTopicPrefetch);
1:00bdf00:         }
1:00bdf00:         info.setOptimizeDurableTopicPrefetch(optimizeDurableTopicPrefetch);
1:00bdf00:     }
1:00bdf00: 
1:00bdf00:     /**
1:00bdf00:      * @return durable topic prefetch
1:00bdf00:      */
1:00bdf00:     public Integer getOptimizeDurableTopicPrefetch() {
1:00bdf00:         return info.getOptimizeDurableTopicPrefetch();
1:00bdf00:     }
1:00bdf00: 
1:00bdf00:     /**
1:8733d17:      * @param durableTopicPrefetch
1:8733d17:      */
1:8733d17:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [durableTopicPrefetch] to: " + durableTopicPrefetch);
1:8733d17:         }
1:8733d17:         info.setDurableTopicPrefetch(durableTopicPrefetch);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return initial redelivery delay
1:8733d17:      */
1:8733d17:     public Long getInitialRedeliveryDelay() {
1:8733d17:         return info.getInitialRedeliveryDelay();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param value
1:8733d17:      */
1:8733d17:     public void setInitialRedeliveryDelay(Long value) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [initialRedeliveryDelay] to: " + value);
1:8733d17:         }
1:8733d17:         info.setInitialRedeliveryDelay(value);
1:8733d17:     }
1:8fba621: 
1:8fba621:     /**
1:8fba621:      * @return initial redelivery delay
1:8fba621:      */
1:8fba621:     public Long getMaximumRedeliveryDelay() {
1:8fba621:         return info.getMaximumRedeliveryDelay();
1:8fba621:     }
1:8fba621: 
1:8fba621:     /**
1:8fba621:      * @param value
1:8fba621:      */
1:8fba621:     public void setMaximumRedeliveryDelay(Long value) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8fba621:             log.debug("setting [maximumRedeliveryDelay] to: " + value);
1:8fba621:         }
1:8fba621:         info.setMaximumRedeliveryDelay(value);
1:8fba621:     }
1:8fba621: 
1:8733d17:     /**
1:8733d17:      * @return input stream prefetch
1:8733d17:      */
1:da36f78:     @Deprecated
1:8733d17:     public Integer getInputStreamPrefetch() {
1:da36f78:         return 0;
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return maximum redeliveries
1:8733d17:      */
1:8733d17:     public Integer getMaximumRedeliveries() {
1:8733d17:         return info.getMaximumRedeliveries();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param value
1:8733d17:      */
1:8733d17:     public void setMaximumRedeliveries(Integer value) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [maximumRedeliveries] to: " + value);
1:8733d17:         }
1:8733d17:         info.setMaximumRedeliveries(value);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return queue browser prefetch
1:8733d17:      */
1:8733d17:     public Integer getQueueBrowserPrefetch() {
1:8733d17:         return info.getQueueBrowserPrefetch();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param queueBrowserPrefetch
1:8733d17:      */
1:8733d17:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [queueBrowserPrefetch] to: " + queueBrowserPrefetch);
1:8733d17:         }
1:8733d17:         info.setQueueBrowserPrefetch(queueBrowserPrefetch);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return queue prefetch
1:8733d17:      */
1:8733d17:     public Integer getQueuePrefetch() {
1:8733d17:         return info.getQueuePrefetch();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param queuePrefetch
1:8733d17:      */
1:8733d17:     public void setQueuePrefetch(Integer queuePrefetch) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [queuePrefetch] to: " + queuePrefetch);
1:8733d17:         }
1:8733d17:         info.setQueuePrefetch(queuePrefetch);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return redelivery backoff multiplier
1:8733d17:      */
1:9cc9873:     public Double getRedeliveryBackOffMultiplier() {
1:8733d17:         return info.getRedeliveryBackOffMultiplier();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param value
1:8733d17:      */
1:37b9cb8:     public void setRedeliveryBackOffMultiplier(Double value) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [redeliveryBackOffMultiplier] to: " + value);
1:8733d17:         }
1:8733d17:         info.setRedeliveryBackOffMultiplier(value);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return redelivery use exponential backoff
1:8733d17:      */
1:8733d17:     public Boolean getRedeliveryUseExponentialBackOff() {
1:8733d17:         return info.getRedeliveryUseExponentialBackOff();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param value
1:8733d17:      */
1:8733d17:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [redeliveryUseExponentialBackOff] to: " + value);
1:8733d17:         }
1:8733d17:         info.setRedeliveryUseExponentialBackOff(value);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return topic prefetch
1:8733d17:      */
1:8733d17:     public Integer getTopicPrefetch() {
1:8733d17:         return info.getTopicPrefetch();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param topicPrefetch
1:8733d17:      */
1:8733d17:     public void setTopicPrefetch(Integer topicPrefetch) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [topicPrefetch] to: " + topicPrefetch);
1:8733d17:         }
1:8733d17:         info.setTopicPrefetch(topicPrefetch);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param i
1:8733d17:      */
1:8733d17:     public void setAllPrefetchValues(Integer i) {
1:8733d17:         info.setAllPrefetchValues(i);
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return use inbound session enabled
1:8733d17:      */
1:8733d17:     public boolean isUseInboundSessionEnabled() {
1:8733d17:         return info.isUseInboundSessionEnabled();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @return use inbound session
1:8733d17:      */
1:8733d17:     public Boolean getUseInboundSession() {
1:8733d17:         return info.getUseInboundSession();
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @param useInboundSession
1:8733d17:      */
1:8733d17:     public void setUseInboundSession(Boolean useInboundSession) {
1:da36f78:         if (log.isDebugEnabled()) {
1:8733d17:             log.debug("setting [useInboundSession] to: " + useInboundSession);
1:8733d17:         }
1:8733d17:         info.setUseInboundSession(useInboundSession);
1:8733d17:     }
1:9e13901: 
1:9e13901:     public boolean isUseSessionArgs() {
1:9e13901:         return info.isUseSessionArgs();
1:9e13901:     }
1:9e13901: 
1:9e13901:     public Boolean getUseSessionArgs() {
1:9e13901:         return info.getUseSessionArgs();
1:9e13901:     }
1:9e13901: 
1:9e13901:     /**
1:da36f78:      * if true, calls to managed connection factory.connection.createSession
1:da36f78:      * will respect the passed in args. When false (default) the args are
1:da36f78:      * ignored b/c the container will do transaction demarcation via xa or local
1:da36f78:      * transaction rar contracts. This option is useful when a managed
1:da36f78:      * connection is used in plain jms mode and a jms transacted session session
1:da36f78:      * is required.
1:da36f78:      *
1:9e13901:      * @param useSessionArgs
1:9e13901:      */
1:9e13901:     public void setUseSessionArgs(Boolean useSessionArgs) {
1:da36f78:         if (log.isDebugEnabled()) {
1:9e13901:             log.debug(this + ", setting [useSessionArgs] to: " + useSessionArgs);
1:9e13901:         }
1:9e13901:         info.setUseSessionArgs(useSessionArgs);
1:9e13901:     }
1:8733d17: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e39db56
/////////////////////////////////////////////////////////////////////////
1:     public String getTrustStore() {
1:         return info.getTrustStore();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getTrustStorePassword() {
1:         return info.getTrustStorePassword();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStore() {
1:         return info.getKeyStore();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStorePassword() {
1:         return info.getKeyStorePassword();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStoreKeyPassword() {
1:         return info.getKeyStoreKeyPassword();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da36f78
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * Abstract base class providing support for creating physical connections to an
1:  * ActiveMQ instance.
1:  *
1:  *
1: 
1: 
1:      * broker. The factory is configured with the given configuration
1:      * information.
1:      *
1:      * @param connectionRequestInfo
1:      *        the configuration request information
1:      * @throws java.lang.IllegalArgumentException
1:      *         if the server URL given in the configuration information is not a
1:      *         valid URL
1:         // ActiveMQSslConnectionFactory defaults to TCP anyway
1:      * Creates a new physical connection to an Active MQ broker identified by
1:      * given connection request information.
1:      *
1:      * @param connectionRequestInfo
1:      *        the connection request information identifying the broker and any
1:      *        required connection parameters, e.g. username/password
1:      * @throws JMSException
1:      *         if the connection could not be established
/////////////////////////////////////////////////////////////////////////
1:      * connection factory and credentials supplied in connection request
1:      * information.
1:      *
1:      * @param connectionRequestInfo
1:      *        the connection request information containing the credentials to
1:      *        use for the connection request
1:      * @throws JMSException
1:      *         if the connection could not be established
1:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo, ActiveMQConnectionFactory connectionFactory)
1:         throws JMSException {
1:         if (clientId != null && clientId.length() > 0) {
/////////////////////////////////////////////////////////////////////////
1:      *
1:     public ActiveMQConnectionRequestInfo getInfo() {
1: 
1:      *
1:      * @param connectionRequestInfo
1:      *        the connection request information
1:     protected void setInfo(ActiveMQConnectionRequestInfo connectionRequestInfo) {
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (value == null || value.length() == 0) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
1:         if (log.isDebugEnabled()) {
1:             log.debug(this + ", setting [trustStore] to: " + trustStore);
1:         }
1:         if (log.isDebugEnabled()) {
1:             log.debug(this + ", setting [trustStorePassword] to: " + trustStorePassword);
1:         }
1:         if (log.isDebugEnabled()) {
1:             log.debug(this + ", setting [keyStore] to: " + keyStore);
1:         }
1:         if (log.isDebugEnabled()) {
1:             log.debug(this + ", setting [keyStorePassword] to: " + keyStorePassword);
1:         }
1:         if (log.isDebugEnabled()) {
1:             log.debug(this + ", setting [keyStoreKeyPassword] to: " + keyStoreKeyPassword);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:         return 0;
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:      * if true, calls to managed connection factory.connection.createSession
1:      * will respect the passed in args. When false (default) the args are
1:      * ignored b/c the container will do transaction demarcation via xa or local
1:      * transaction rar contracts. This option is useful when a managed
1:      * connection is used in plain jms mode and a jms transacted session session
1:      * is required.
1:      *
1:         if (log.isDebugEnabled()) {
author:Andy Taylor
-------------------------------------------------------------------------------
commit:9becfc0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSslConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:      * @param activationSpec
1:     protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo, MessageActivationSpec activationSpec) {
0:         //ActiveMQSslConnectionFactory defaults to TCP anyway
1:         ActiveMQConnectionFactory factory = new ActiveMQSslConnectionFactory();
1:         connectionRequestInfo.configure(factory, activationSpec);
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException {
1:         return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo, null));
/////////////////////////////////////////////////////////////////////////
1:     public void setTrustStore(String trustStore) {
0:         if ( log.isDebugEnabled() ) {
0:                     log.debug(this + ", setting [trustStore] to: " + trustStore);
1:                 }
1:         info.setTrustStore(trustStore);
1:     }
1: 
1:     public void setTrustStorePassword(String trustStorePassword) {
0:         if ( log.isDebugEnabled() ) {
0:                     log.debug(this + ", setting [trustStorePassword] to: " + trustStorePassword);
1:                 }
1:         info.setTrustStorePassword(trustStorePassword);
1:     }
1: 
1:     public void setKeyStore(String keyStore) {
0:         if ( log.isDebugEnabled() ) {
0:                     log.debug(this + ", setting [keyStore] to: " + keyStore);
1:                 }
1:         info.setKeyStore(keyStore);
1:     }
1: 
1:     public void setKeyStorePassword(String keyStorePassword) {
0:         if ( log.isDebugEnabled() ) {
0:                     log.debug(this + ", setting [keyStorePassword] to: " + keyStorePassword);
1:                 }
1:         info.setKeyStorePassword(keyStorePassword);
1:     }
1: 
1:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
0:         if ( log.isDebugEnabled() ) {
0:                     log.debug(this + ", setting [keyStoreKeyPassword] to: " + keyStoreKeyPassword);
1:                 }
1:         info.setKeyStoreKeyPassword(keyStoreKeyPassword);
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:9e13901
/////////////////////////////////////////////////////////////////////////
0:         if ( log.isDebugEnabled() ) {
1:             log.debug(this + ", setting [info] to: " + info);
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:             log.debug(this + ", setting [clientid] to: " + clientid);
/////////////////////////////////////////////////////////////////////////
1:             log.debug(this + ", setting [password] property");
/////////////////////////////////////////////////////////////////////////
1:             log.debug(this + ", setting [serverUrl] to: " + url);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseSessionArgs() {
1:         return info.isUseSessionArgs();
1:     }
1: 
1:     public Boolean getUseSessionArgs() {
1:         return info.getUseSessionArgs();
1:     }
1: 
1:     /**
0:      * if true, calls to managed connection factory.connection.createSession will
0:      * respect the passed in args. When false (default) the args are ignored b/c
0:      * the container will do transaction demarcation via xa or local transaction rar
0:      * contracts.
0:      * This option is useful when a managed connection is used in plain jms mode
0:      * and a jms transacted session session is required.
1:      * @param useSessionArgs
1:      */
1:     public void setUseSessionArgs(Boolean useSessionArgs) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug(this + ", setting [useSessionArgs] to: " + useSessionArgs);
1:         }
1:         info.setUseSessionArgs(useSessionArgs);
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:00bdf00
/////////////////////////////////////////////////////////////////////////
1:      * @param optimizeDurableTopicPrefetch
1:      */
1:     public void setOptimizeDurableTopicPrefetch(Integer optimizeDurableTopicPrefetch) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [optimizeDurableTopicPrefetch] to: " + optimizeDurableTopicPrefetch);
1:         }
1:         info.setOptimizeDurableTopicPrefetch(optimizeDurableTopicPrefetch);
1:     }
1: 
1:     /**
1:      * @return durable topic prefetch
1:      */
1:     public Integer getOptimizeDurableTopicPrefetch() {
1:         return info.getOptimizeDurableTopicPrefetch();
1:     }
1: 
1:     /**
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected Logger log = LoggerFactory.getLogger(getClass());
author:Gary Tully
-------------------------------------------------------------------------------
commit:8fba621
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return initial redelivery delay
1:      */
1:     public Long getMaximumRedeliveryDelay() {
1:         return info.getMaximumRedeliveryDelay();
1:     }
1: 
1:     /**
1:      * @param value
1:      */
1:     public void setMaximumRedeliveryDelay(Long value) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [maximumRedeliveryDelay] to: " + value);
1:         }
1:         info.setMaximumRedeliveryDelay(value);
1:     }
1: 
commit:37b9cb8
/////////////////////////////////////////////////////////////////////////
1:     public void setRedeliveryBackOffMultiplier(Double value) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:aa62069
/////////////////////////////////////////////////////////////////////////
0:     public ActiveMQConnection makeConnection(
author:Robert Davies
-------------------------------------------------------------------------------
commit:9cc9873
/////////////////////////////////////////////////////////////////////////
1:     public Double getRedeliveryBackOffMultiplier() {
commit:8733d17
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.ra;
1: 
1: import javax.jms.JMSException;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * Abstract base class providing support for creating physical
0:  * connections to an ActiveMQ instance.
1:  * 
0:  * @version $Revision$
1:  */
1: public class ActiveMQConnectionSupport {
1:     
1:     private ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
0:     protected Log log = LogFactory.getLog(getClass());
1:     
1:     /**
1:      * Creates a factory for obtaining physical connections to an Active MQ
0:      * broker. The factory is configured with the given configuration information.
1:      * 
0:      * @param connectionRequestInfo the configuration request information
1:      * @return the connection factory
0:      * @throws java.lang.IllegalArgumentException if the server URL given in the
0:      * configuration information is not a valid URL
1:      */
0:     protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         connectionRequestInfo.configure(factory);
1:         return factory;
1:     }
1: 
1:     /**
0:      * Creates a new physical connection to an Active MQ broker identified by given
0:      * connection request information.
1:      * 
0:      * @param connectionRequestInfo the connection request information identifying the broker and any
0:      * required connection parameters, e.g. username/password
1:      * @return the physical connection
0:      * @throws JMSException if the connection could not be established
1:      */
0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
0:         return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
1:     }
1: 
1:     /**
1:      * Creates a new physical connection to an Active MQ broker using a given
0:      * connection factory and credentials supplied in connection request information.
1:      * 
0:      * @param connectionRequestInfo the connection request information containing the credentials to use
0:      * for the connection request
1:      * @return the physical connection
0:      * @throws JMSException if the connection could not be established
1:      */
0:     protected ActiveMQConnection makeConnection(
0:             ActiveMQConnectionRequestInfo connectionRequestInfo,
0:             ActiveMQConnectionFactory connectionFactory) throws JMSException
0:     {
1:         String userName = connectionRequestInfo.getUserName();
1:         String password = connectionRequestInfo.getPassword();
1:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
1: 
1:         String clientId = connectionRequestInfo.getClientid();
0:         if ( clientId != null && clientId.length() > 0 )
0:         {
1:             physicalConnection.setClientID(clientId);
1:         }
1:         return physicalConnection;
1:     }
1: 
1:     /**
1:      * Gets the connection request information.
1:      * 
1:      * @return the connection request information
1:      */
0:     public ActiveMQConnectionRequestInfo getInfo()
0:     {
1:         return info;
1:     }
1:     
1:     /**
1:      * Sets the connection request information as a whole.
1:      * 
0:      * @param the connection request information
1:      */
0:     protected void setInfo(ActiveMQConnectionRequestInfo connectionRequestInfo){
1:         info = connectionRequestInfo;
1:     }    
1: 
1:     protected boolean notEqual(Object o1, Object o2) {
1:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
1:     }
1: 
1:     protected String emptyToNull(String value) {
0:         if (value == null || value.length() == 0)
0:         {
1:             return null;
1:         }
0:         else
0:         {
1:             return value;
1:         }
1:     }
1: 
1:     protected String defaultValue(String value, String defaultValue) {
1:         if (value != null) {
1:             return value;
1:         }
1:         return defaultValue;
1:     }
1: 
1:     // ///////////////////////////////////////////////////////////////////////
1:     //
1:     // Java Bean getters and setters for this ResourceAdapter class.
1:     //
1:     // ///////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return client id
1:      */
1:     public String getClientid() {
1:         return emptyToNull(info.getClientid());
1:     }
1: 
1:     /**
1:      * @param clientid
1:      */
1:     public void setClientid(String clientid) {
0:         if ( log.isDebugEnabled() ) {
0:             log.debug("setting [clientid] to: " + clientid);
1:         }
1:         info.setClientid(clientid);
1:     }
1: 
1:     /**
1:      * @return password
1:      */
1:     public String getPassword() {
1:         return emptyToNull(info.getPassword());
1:     }
1: 
1:     /**
1:      * @param password
1:      */
1:     public void setPassword(String password) {
0:         if ( log.isDebugEnabled() ) {
0:             log.debug("setting [password] property");
1:         }
1:         info.setPassword(password);
1:     }
1: 
1:     /**
1:      * @return server URL
1:      */
1:     public String getServerUrl() {
1:         return info.getServerUrl();
1:     }
1: 
1:     /**
1:      * @param url
1:      */
1:     public void setServerUrl(String url) {
0:         if ( log.isDebugEnabled() ) {
0:             log.debug("setting [serverUrl] to: " + url);
1:         }
1:         info.setServerUrl(url);
1:     }
1: 
1:     /**
1:      * @return user name
1:      */
1:     public String getUserName() {
1:         return emptyToNull(info.getUserName());
1:     }
1: 
1:     /**
1:      * @param userid
1:      */
1:     public void setUserName(String userid) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [userName] to: " + userid);
1:         }
1:         info.setUserName(userid);
1:     }
1: 
1:     /**
1:      * @return durable topic prefetch
1:      */
1:     public Integer getDurableTopicPrefetch() {
1:         return info.getDurableTopicPrefetch();
1:     }
1: 
1:     /**
1:      * @param durableTopicPrefetch
1:      */
1:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [durableTopicPrefetch] to: " + durableTopicPrefetch);
1:         }
1:         info.setDurableTopicPrefetch(durableTopicPrefetch);
1:     }
1: 
1:     /**
1:      * @return initial redelivery delay
1:      */
1:     public Long getInitialRedeliveryDelay() {
1:         return info.getInitialRedeliveryDelay();
1:     }
1: 
1:     /**
1:      * @param value
1:      */
1:     public void setInitialRedeliveryDelay(Long value) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [initialRedeliveryDelay] to: " + value);
1:         }
1:         info.setInitialRedeliveryDelay(value);
1:     }
1: 
1:     /**
1:      * @return input stream prefetch
1:      */
1:     public Integer getInputStreamPrefetch() {
0:         return info.getInputStreamPrefetch();
1:     }
1: 
1:     /**
0:      * @param inputStreamPrefetch
1:      */
0:     public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
0:         if ( log.isDebugEnabled() ) {
0:             log.debug("setting [inputStreamPrefetch] to: " + inputStreamPrefetch);
1:         }
0:         info.setInputStreamPrefetch(inputStreamPrefetch);
1:     }
1: 
1:     /**
1:      * @return maximum redeliveries
1:      */
1:     public Integer getMaximumRedeliveries() {
1:         return info.getMaximumRedeliveries();
1:     }
1: 
1:     /**
1:      * @param value
1:      */
1:     public void setMaximumRedeliveries(Integer value) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [maximumRedeliveries] to: " + value);
1:         }
1:         info.setMaximumRedeliveries(value);
1:     }
1: 
1:     /**
1:      * @return queue browser prefetch
1:      */
1:     public Integer getQueueBrowserPrefetch() {
1:         return info.getQueueBrowserPrefetch();
1:     }
1: 
1:     /**
1:      * @param queueBrowserPrefetch
1:      */
1:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [queueBrowserPrefetch] to: " + queueBrowserPrefetch);
1:         }
1:         info.setQueueBrowserPrefetch(queueBrowserPrefetch);
1:     }
1: 
1:     /**
1:      * @return queue prefetch
1:      */
1:     public Integer getQueuePrefetch() {
1:         return info.getQueuePrefetch();
1:     }
1: 
1:     /**
1:      * @param queuePrefetch
1:      */
1:     public void setQueuePrefetch(Integer queuePrefetch) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [queuePrefetch] to: " + queuePrefetch);
1:         }
1:         info.setQueuePrefetch(queuePrefetch);
1:     }
1: 
1:     /**
1:      * @return redelivery backoff multiplier
1:      */
0:     public Short getRedeliveryBackOffMultiplier() {
1:         return info.getRedeliveryBackOffMultiplier();
1:     }
1: 
1:     /**
1:      * @param value
1:      */
0:     public void setRedeliveryBackOffMultiplier(Short value) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [redeliveryBackOffMultiplier] to: " + value);
1:         }
1:         info.setRedeliveryBackOffMultiplier(value);
1:     }
1: 
1:     /**
1:      * @return redelivery use exponential backoff
1:      */
1:     public Boolean getRedeliveryUseExponentialBackOff() {
1:         return info.getRedeliveryUseExponentialBackOff();
1:     }
1: 
1:     /**
1:      * @param value
1:      */
1:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [redeliveryUseExponentialBackOff] to: " + value);
1:         }
1:         info.setRedeliveryUseExponentialBackOff(value);
1:     }
1: 
1:     /**
1:      * @return topic prefetch
1:      */
1:     public Integer getTopicPrefetch() {
1:         return info.getTopicPrefetch();
1:     }
1: 
1:     /**
1:      * @param topicPrefetch
1:      */
1:     public void setTopicPrefetch(Integer topicPrefetch) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [topicPrefetch] to: " + topicPrefetch);
1:         }
1:         info.setTopicPrefetch(topicPrefetch);
1:     }
1: 
1:     /**
1:      * @param i
1:      */
1:     public void setAllPrefetchValues(Integer i) {
1:         info.setAllPrefetchValues(i);
1:     }
1: 
1:     /**
1:      * @return use inbound session enabled
1:      */
1:     public boolean isUseInboundSessionEnabled() {
1:         return info.isUseInboundSessionEnabled();
1:     }
1: 
1:     /**
1:      * @return use inbound session
1:      */
1:     public Boolean getUseInboundSession() {
1:         return info.getUseInboundSession();
1:     }
1: 
1:     /**
1:      * @param useInboundSession
1:      */
1:     public void setUseInboundSession(Boolean useInboundSession) {
0:         if ( log.isDebugEnabled() ) {
1:             log.debug("setting [useInboundSession] to: " + useInboundSession);
1:         }
1:         info.setUseInboundSession(useInboundSession);
1:     }
1: 
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:185711e
/////////////////////////////////////////////////////////////////////////
0:      * @param connectionRequestInfo the connection request information
============================================================================