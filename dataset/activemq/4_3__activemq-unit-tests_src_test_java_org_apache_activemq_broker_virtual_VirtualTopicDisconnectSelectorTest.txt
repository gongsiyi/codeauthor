1:1b9f5f6: /**
1:1b9f5f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1b9f5f6:  * contributor license agreements.  See the NOTICE file distributed with
1:1b9f5f6:  * this work for additional information regarding copyright ownership.
1:1b9f5f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1b9f5f6:  * (the "License"); you may not use this file except in compliance with
1:1b9f5f6:  * the License.  You may obtain a copy of the License at
1:1b9f5f6:  *
1:1b9f5f6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1b9f5f6:  *
1:1b9f5f6:  * Unless required by applicable law or agreed to in writing, software
1:1b9f5f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1b9f5f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1b9f5f6:  * See the License for the specific language governing permissions and
1:1b9f5f6:  * limitations under the License.
1:1b9f5f6:  */
1:1b9f5f6: package org.apache.activemq.broker.virtual;
1:1b9f5f6: 
1:1b9f5f6: import java.net.URI;
1:1b9f5f6: 
1:1b9f5f6: import javax.jms.Connection;
1:1b9f5f6: import javax.jms.Destination;
1:1b9f5f6: import javax.jms.JMSException;
1:1b9f5f6: import javax.jms.Message;
1:1b9f5f6: import javax.jms.MessageConsumer;
1:1b9f5f6: import javax.jms.MessageListener;
1:1b9f5f6: import javax.jms.MessageProducer;
1:1b9f5f6: import javax.jms.Session;
1:1b9f5f6: import javax.jms.TextMessage;
1:1b9f5f6: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:1b9f5f6: import org.apache.activemq.broker.BrokerService;
1:1b9f5f6: import org.apache.activemq.command.ActiveMQQueue;
1:1b9f5f6: import org.apache.activemq.command.ActiveMQTopic;
1:340728f: import org.apache.activemq.plugin.SubQueueSelectorCacheBroker;
1:1b9f5f6: import org.apache.activemq.spring.ConsumerBean;
1:1b9f5f6: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:1b9f5f6: import org.slf4j.Logger;
1:1b9f5f6: import org.slf4j.LoggerFactory;
1:1b9f5f6: 
1:1b9f5f6: /**
1:1b9f5f6:  * Test case for  https://issues.apache.org/jira/browse/AMQ-3004
1:1b9f5f6:  */
1:1b9f5f6: 
1:1b9f5f6: public class VirtualTopicDisconnectSelectorTest extends EmbeddedBrokerTestSupport {
1:1b9f5f6: 
1:1b9f5f6:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicDisconnectSelectorTest.class);
1:1b9f5f6:     protected Connection connection;
1:1b9f5f6: 
1:61cbe46:     public void testVirtualTopicSelectorDisconnect() throws Exception {
1:61cbe46:         testVirtualTopicDisconnect("odd = 'no'", 3000, 1500);
1:61cbe46:     }
1:61cbe46: 
1:61cbe46:     public void testVirtualTopicNoSelectorDisconnect() throws Exception {
1:61cbe46:         testVirtualTopicDisconnect(null, 3000, 3000);
1:61cbe46:     }
1:61cbe46: 
1:61cbe46:     public void testVirtualTopicDisconnect(String messageSelector, int total , int expected) throws Exception {
1:1b9f5f6:         if (connection == null) {
1:1b9f5f6:             connection = createConnection();
1:1b9f5f6:         }
1:1b9f5f6:         connection.start();
1:1b9f5f6: 
1:1b9f5f6:         final ConsumerBean messageList = new ConsumerBean();
1:1b9f5f6: 
1:1b9f5f6:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:1b9f5f6: 
1:1b9f5f6:         Destination producerDestination = getProducerDestination();
1:1b9f5f6:         Destination destination = getConsumerDsetination();
1:1b9f5f6: 
1:1b9f5f6:         LOG.info("Sending to: " + producerDestination);
1:1b9f5f6:         LOG.info("Consuming from: " + destination );
1:1b9f5f6: 
1:61cbe46:         MessageConsumer consumer = createConsumer(session, destination, messageSelector);
1:1b9f5f6: 
1:1b9f5f6:         MessageListener listener = new MessageListener(){
1:1b9f5f6:             public void onMessage(Message message){
1:1b9f5f6:                 messageList.onMessage(message);
1:1b9f5f6:                 try {
1:1b9f5f6:                     message.acknowledge();
1:1b9f5f6:                 } catch (JMSException e) {
1:1b9f5f6:                     e.printStackTrace();
1:1b9f5f6:                 }
1:1b9f5f6:             }
1:1b9f5f6:         };
1:1b9f5f6: 
1:1b9f5f6:         consumer.setMessageListener(listener);
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6:         // create topic producer
1:1b9f5f6:         MessageProducer producer = session.createProducer(producerDestination);
1:1b9f5f6:         assertNotNull(producer);
1:1b9f5f6: 
1:1b9f5f6:         int disconnectCount = total/3;
1:1b9f5f6:         int reconnectCount = (total * 2)/3;
1:1b9f5f6: 
1:1b9f5f6:         for (int i = 0; i < total; i++) {
1:1b9f5f6:             producer.send(createMessage(session, i));
1:1b9f5f6: 
1:1b9f5f6:             if (i==disconnectCount){
1:1b9f5f6:                consumer.close();
1:1b9f5f6:             }
1:1b9f5f6:             if (i==reconnectCount){
1:61cbe46:                 consumer = createConsumer(session, destination, messageSelector);
1:1b9f5f6:                 consumer.setMessageListener(listener);
1:1b9f5f6:             }
1:1b9f5f6:         }
1:1b9f5f6: 
1:61cbe46:         assertMessagesArrived(messageList, expected ,10000);
1:1b9f5f6:     }
1:1b9f5f6:             
1:340728f:     protected ActiveMQQueue getConsumerDsetination() {
1:1b9f5f6:         return new ActiveMQQueue("Consumer.VirtualTopic.TEST");
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6:     protected Destination getProducerDestination() {
1:1b9f5f6:         return new ActiveMQTopic("VirtualTopic.TEST");
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     protected void setUp() throws Exception {
1:1b9f5f6:         super.setUp();
1:61cbe46:     }
1:61cbe46: 
1:61cbe46:     protected MessageConsumer createConsumer(Session session, Destination destination, String messageSelector) throws JMSException {
1:61cbe46:         if (messageSelector != null) {
1:61cbe46:             return session.createConsumer(destination, messageSelector);
1:61cbe46:         } else {
1:61cbe46:             return session.createConsumer(destination);
1:61cbe46:         }
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:1b9f5f6:         TextMessage textMessage = session.createTextMessage("message: " + i);
1:1b9f5f6:         if (i % 2 != 0) {
1:1b9f5f6:             textMessage.setStringProperty("odd", "yes");
1:1b9f5f6:         } else {
1:1b9f5f6:             textMessage.setStringProperty("odd", "no");
1:1b9f5f6:         }
1:1b9f5f6:         textMessage.setIntProperty("i", i);
1:1b9f5f6:         return textMessage;
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6:     protected void assertMessagesArrived(ConsumerBean messageList, int expected, long timeout) {
1:1b9f5f6:         messageList.assertMessagesArrived(expected,timeout);
1:1b9f5f6: 
1:1b9f5f6:         messageList.flushMessages();
1:1b9f5f6: 
1:1b9f5f6:         
1:1b9f5f6:         LOG.info("validate no other messages on queues");
1:1b9f5f6:         try {
1:1b9f5f6:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1b9f5f6:                 
1:1b9f5f6:             Destination destination1 = getConsumerDsetination();
1:1b9f5f6: 
1:1b9f5f6:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:1b9f5f6:             c1.setMessageListener(messageList);
1:1b9f5f6: 
1:1b9f5f6:             
1:1b9f5f6:             LOG.info("send one simple message that should go to both consumers");
1:1b9f5f6:             MessageProducer producer = session.createProducer(getProducerDestination());
1:1b9f5f6:             assertNotNull(producer);
1:1b9f5f6:             
1:1b9f5f6:             producer.send(session.createTextMessage("Last Message"));
1:1b9f5f6:             
1:1b9f5f6:             messageList.assertMessagesArrived(1);
1:1b9f5f6: 
1:1b9f5f6:         } catch (JMSException e) {
1:1b9f5f6:             e.printStackTrace();
1:1b9f5f6:             fail("unexpeced ex while waiting for last messages: " + e);
1:1b9f5f6:         }
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6:     protected String getBrokerConfigUri() {
1:1b9f5f6:         return "org/apache/activemq/broker/virtual/disconnected-selector.xml";
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     protected BrokerService createBroker() throws Exception {
1:1b9f5f6:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:1b9f5f6:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1:1b9f5f6:         return answer;
1:1b9f5f6:     }
1:340728f: 
1:1b9f5f6: 
1:340728f:     protected void startBroker() throws Exception {
1:340728f:         super.startBroker();
1:340728f:         // start with a clean slate
1:340728f:         SubQueueSelectorCacheBroker selectorCacheBroker  = (SubQueueSelectorCacheBroker) broker.getBroker().getAdaptor(SubQueueSelectorCacheBroker.class);
1:340728f:         selectorCacheBroker.deleteAllSelectorsForDestination(getConsumerDsetination().getQualifiedName());
1:340728f:     }
1:1b9f5f6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:340728f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.plugin.SubQueueSelectorCacheBroker;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQQueue getConsumerDsetination() {
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void startBroker() throws Exception {
1:         super.startBroker();
1:         // start with a clean slate
1:         SubQueueSelectorCacheBroker selectorCacheBroker  = (SubQueueSelectorCacheBroker) broker.getBroker().getAdaptor(SubQueueSelectorCacheBroker.class);
1:         selectorCacheBroker.deleteAllSelectorsForDestination(getConsumerDsetination().getQualifiedName());
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:61cbe46
/////////////////////////////////////////////////////////////////////////
1:     public void testVirtualTopicSelectorDisconnect() throws Exception {
1:         testVirtualTopicDisconnect("odd = 'no'", 3000, 1500);
1:     }
1: 
1:     public void testVirtualTopicNoSelectorDisconnect() throws Exception {
1:         testVirtualTopicDisconnect(null, 3000, 3000);
1:     }
1: 
1:     public void testVirtualTopicDisconnect(String messageSelector, int total , int expected) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer consumer = createConsumer(session, destination, messageSelector);
/////////////////////////////////////////////////////////////////////////
1:                 consumer = createConsumer(session, destination, messageSelector);
1:         assertMessagesArrived(messageList, expected ,10000);
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     protected MessageConsumer createConsumer(Session session, Destination destination, String messageSelector) throws JMSException {
1:         if (messageSelector != null) {
1:             return session.createConsumer(destination, messageSelector);
1:         } else {
1:             return session.createConsumer(destination);
1:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1b9f5f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test case for  https://issues.apache.org/jira/browse/AMQ-3004
1:  */
1: 
1: public class VirtualTopicDisconnectSelectorTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicDisconnectSelectorTest.class);
1:     protected Connection connection;
0:     protected int total = 3000;
0:     protected String messageSelector;
1: 
0:     public void testVirtualTopicDisconnect() throws Exception {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1: 
1:         final ConsumerBean messageList = new ConsumerBean();
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         Destination producerDestination = getProducerDestination();
1:         Destination destination = getConsumerDsetination();
1: 
1:         LOG.info("Sending to: " + producerDestination);
1:         LOG.info("Consuming from: " + destination );
1: 
0:         MessageConsumer consumer = session.createConsumer(destination, messageSelector);
1: 
1:         MessageListener listener = new MessageListener(){
1:             public void onMessage(Message message){
1:                 messageList.onMessage(message);
1:                 try {
1:                     message.acknowledge();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         consumer.setMessageListener(listener);
1: 
1: 
1:         // create topic producer
1:         MessageProducer producer = session.createProducer(producerDestination);
1:         assertNotNull(producer);
1: 
1:         int disconnectCount = total/3;
1:         int reconnectCount = (total * 2)/3;
1: 
1:         for (int i = 0; i < total; i++) {
1:             producer.send(createMessage(session, i));
1: 
1:             if (i==disconnectCount){
1:                consumer.close();
1:             }
1:             if (i==reconnectCount){
0:                 consumer = session.createConsumer(destination, messageSelector);
1:                 consumer.setMessageListener(listener);
1:             }
1:         }
1: 
0:         assertMessagesArrived(messageList,total/2,10000);
1:     }
1:             
0:     protected Destination getConsumerDsetination() {
1:         return new ActiveMQQueue("Consumer.VirtualTopic.TEST");
1:     }
1: 
1: 
1:     protected Destination getProducerDestination() {
1:         return new ActiveMQTopic("VirtualTopic.TEST");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         messageSelector = "odd = 'no'";
1:     }
1: 
1:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:         TextMessage textMessage = session.createTextMessage("message: " + i);
1:         if (i % 2 != 0) {
1:             textMessage.setStringProperty("odd", "yes");
1:         } else {
1:             textMessage.setStringProperty("odd", "no");
1:         }
1:         textMessage.setIntProperty("i", i);
1:         return textMessage;
1:     }
1: 
1: 
1: 
1:     protected void assertMessagesArrived(ConsumerBean messageList, int expected, long timeout) {
1:         messageList.assertMessagesArrived(expected,timeout);
1: 
1:         messageList.flushMessages();
1: 
1:         
1:         LOG.info("validate no other messages on queues");
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 
1:             Destination destination1 = getConsumerDsetination();
1: 
1:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:             c1.setMessageListener(messageList);
1: 
1:             
1:             LOG.info("send one simple message that should go to both consumers");
1:             MessageProducer producer = session.createProducer(getProducerDestination());
1:             assertNotNull(producer);
1:             
1:             producer.send(session.createTextMessage("Last Message"));
1:             
1:             messageList.assertMessagesArrived(1);
1: 
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:             fail("unexpeced ex while waiting for last messages: " + e);
1:         }
1:     }
1: 
1: 
1:     protected String getBrokerConfigUri() {
1:         return "org/apache/activemq/broker/virtual/disconnected-selector.xml";
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1:         return answer;
1:     }
1: 
1: }
============================================================================