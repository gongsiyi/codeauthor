1:dd0ed17: /**
1:dd0ed17:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd0ed17:  * contributor license agreements.  See the NOTICE file distributed with
1:dd0ed17:  * this work for additional information regarding copyright ownership.
1:dd0ed17:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd0ed17:  * (the "License"); you may not use this file except in compliance with
1:dd0ed17:  * the License.  You may obtain a copy of the License at
1:dd0ed17:  *
1:dd0ed17:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dd0ed17:  *
1:dd0ed17:  * Unless required by applicable law or agreed to in writing, software
1:dd0ed17:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dd0ed17:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd0ed17:  * See the License for the specific language governing permissions and
1:dd0ed17:  * limitations under the License.
1:dd0ed17:  */
1:1a59827: package org.apache.activemq.store.kahadb;
9:dd0ed17: 
1:dd0ed17: import static org.junit.Assert.assertEquals;
1:dd0ed17: import static org.junit.Assert.assertFalse;
1:1a59827: import static org.junit.Assert.assertNull;
1:dd0ed17: import static org.junit.Assert.assertTrue;
1:dd0ed17: 
1:dd0ed17: import java.io.File;
1:1a59827: import java.lang.reflect.Field;
1:dd0ed17: import java.util.concurrent.TimeUnit;
1:dd0ed17: 
1:dd0ed17: import org.apache.activemq.broker.ConnectionContext;
1:dd0ed17: import org.apache.activemq.command.ActiveMQQueue;
1:dd0ed17: import org.apache.activemq.command.ActiveMQTextMessage;
1:dd0ed17: import org.apache.activemq.command.MessageId;
1:dd0ed17: import org.apache.activemq.store.MessageStore;
1:1a59827: import org.apache.activemq.store.kahadb.disk.journal.FileAppender;
1:1a59827: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:dd0ed17: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
1:1a59827: import org.apache.activemq.store.kahadb.disk.journal.Location;
1:dd0ed17: import org.junit.After;
1:dd0ed17: import org.junit.Rule;
1:dd0ed17: import org.junit.Test;
1:dd0ed17: import org.junit.rules.TemporaryFolder;
1:dd0ed17: import org.junit.rules.Timeout;
1:dd0ed17: 
1:dd0ed17: public class JournalSyncStrategyTest  {
1:dd0ed17: 
1:dd0ed17:     @Rule
1:dd0ed17:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:dd0ed17: 
1:dd0ed17:     @Rule
1:dd0ed17:     public Timeout globalTimeout= new Timeout(10, TimeUnit.SECONDS);
1:dd0ed17: 
1:dd0ed17:     private KahaDBStore store;
1:dd0ed17:     private int defaultJournalLength = 10 * 1024;
1:dd0ed17: 
1:dd0ed17:     @After
1:dd0ed17:     public void after() throws Exception {
1:dd0ed17:         if (store != null) {
1:dd0ed17:             store.stop();
4:dd0ed17:         }
1:dd0ed17:     }
1:dd0ed17: 
2:dd0ed17:     @Test
1:dd0ed17:     public void testPeriodicSync()throws Exception {
2:dd0ed17:         store = configureStore(JournalDiskSyncStrategy.PERIODIC);
1:1a59827:         store.setJournalDiskSyncInterval(800);
2:dd0ed17:         store.start();
2:dd0ed17:         final Journal journal = store.getJournal();
2:dd0ed17:         assertTrue(journal.isJournalDiskSyncPeriodic());
2:dd0ed17:         assertFalse(store.isEnableJournalDiskSyncs());
1:1a59827:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.PERIODIC.name());
1:0d824a8:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.PERIODIC);
1:1a59827:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.PERIODIC);
1:1a59827:         assertEquals(store.getJournalDiskSyncInterval(), 800);
1:dd0ed17: 
1:1a59827:         Location l = store.lastAsyncJournalUpdate.get();
1:dd0ed17: 
1:dd0ed17:         //write a message to the store
1:1a59827:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:dd0ed17:         writeMessage(messageStore, 1);
1:dd0ed17: 
1:1a59827:         //make sure message write causes the lastAsyncJournalUpdate to be set with a new value
1:1a59827:         assertFalse(store.lastAsyncJournalUpdate.get().equals(l));
1:dd0ed17:     }
1:dd0ed17: 
1:dd0ed17:     @Test
1:dd0ed17:     public void testAlwaysSync()throws Exception {
1:dd0ed17:         store = configureStore(JournalDiskSyncStrategy.ALWAYS);
1:dd0ed17:         store.start();
1:dd0ed17:         assertFalse(store.getJournal().isJournalDiskSyncPeriodic());
1:dd0ed17:         assertTrue(store.isEnableJournalDiskSyncs());
1:1a59827:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.ALWAYS.name());
1:0d824a8:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.ALWAYS);
1:1a59827:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.ALWAYS);
1:1a59827: 
1:1a59827:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:1a59827:         writeMessage(messageStore, 1);
1:1a59827:         assertNull(store.lastAsyncJournalUpdate.get());
1:dd0ed17:     }
1:dd0ed17: 
1:dd0ed17:     @Test
1:dd0ed17:     public void testNeverSync() throws Exception {
1:dd0ed17:         store = configureStore(JournalDiskSyncStrategy.NEVER);
1:dd0ed17:         store.start();
1:dd0ed17:         assertFalse(store.getJournal().isJournalDiskSyncPeriodic());
1:dd0ed17:         assertFalse(store.isEnableJournalDiskSyncs());
1:1a59827:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.NEVER.name());
1:0d824a8:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.NEVER);
1:1a59827:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.NEVER);
1:1a59827: 
1:1a59827:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:1a59827:         writeMessage(messageStore, 1);
1:1a59827:         assertNull(store.lastAsyncJournalUpdate.get());
1:dd0ed17:     }
1:dd0ed17: 
1:dd0ed17:     private KahaDBStore configureStore(JournalDiskSyncStrategy strategy) throws Exception {
1:dd0ed17:         KahaDBStore store = new KahaDBStore();
1:dd0ed17:         store.setJournalMaxFileLength(defaultJournalLength);
1:dd0ed17:         store.deleteAllMessages();
1:dd0ed17:         store.setDirectory(dataFileDir.getRoot());
1:dd0ed17:         if (strategy != null) {
1:dd0ed17:             store.setJournalDiskSyncStrategy(strategy.name());
1:dd0ed17:         }
1:dd0ed17: 
1:dd0ed17:         return store;
1:dd0ed17:     }
1:dd0ed17: 
1:dd0ed17:     private void writeMessage(final MessageStore messageStore, int num) throws Exception {
1:dd0ed17:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:dd0ed17:         message.setText("testtesttest");
1:dd0ed17:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:" + num);
1:dd0ed17:         messageId.setBrokerSequenceId(num);
1:dd0ed17:         message.setMessageId(messageId);
1:dd0ed17:         messageStore.addMessage(new ConnectionContext(), message);
1:dd0ed17:     }
1:dd0ed17: 
1:dd0ed17: 
1:dd0ed17: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0d824a8
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.PERIODIC);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.ALWAYS);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(store.getJournalDiskSyncStrategyEnum(), JournalDiskSyncStrategy.NEVER);
commit:1a59827
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb;
1: import static org.junit.Assert.assertNull;
1: import java.lang.reflect.Field;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.FileAppender;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.apache.activemq.store.kahadb.disk.journal.Location;
/////////////////////////////////////////////////////////////////////////
1:         store.setJournalDiskSyncInterval(800);
1:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.PERIODIC.name());
1:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.PERIODIC);
1:         assertEquals(store.getJournalDiskSyncInterval(), 800);
1:         Location l = store.lastAsyncJournalUpdate.get();
1:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:         //make sure message write causes the lastAsyncJournalUpdate to be set with a new value
1:         assertFalse(store.lastAsyncJournalUpdate.get().equals(l));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.ALWAYS.name());
1:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.ALWAYS);
1: 
1:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:         writeMessage(messageStore, 1);
1:         assertNull(store.lastAsyncJournalUpdate.get());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(store.getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.NEVER.name());
1:         assertEquals(store.getJournal().getJournalDiskSyncStrategy(), JournalDiskSyncStrategy.NEVER);
1: 
1:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1:         writeMessage(messageStore, 1);
1:         assertNull(store.lastAsyncJournalUpdate.get());
commit:dd0ed17
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
0: import org.apache.activemq.util.Wait;
0: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.After;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.junit.rules.Timeout;
1: 
1: public class JournalSyncStrategyTest  {
1: 
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     @Rule
1:     public Timeout globalTimeout= new Timeout(10, TimeUnit.SECONDS);
1: 
1:     private KahaDBStore store;
1:     private int defaultJournalLength = 10 * 1024;
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (store != null) {
1:             store.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testPeriodicSync()throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.PERIODIC);
1:         store.start();
1:         final Journal journal = store.getJournal();
1:         assertTrue(journal.isJournalDiskSyncPeriodic());
1:         assertFalse(store.isEnableJournalDiskSyncs());
1: 
0:         MessageStore messageStore = store.createQueueMessageStore(new ActiveMQQueue("test"));
1: 
1:         //write a message to the store
1:         writeMessage(messageStore, 1);
1: 
0:         //Make sure the flag was set to true
0:         assertTrue(Wait.waitFor(new Condition() {
1: 
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return journal.currentFileNeedSync.get();
1:             }
0:         }));
1: 
0:         //Make sure a disk sync was done by the executor because a message was added
0:         //which will cause the flag to be set to false
0:         assertTrue(Wait.waitFor(new Condition() {
1: 
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return !journal.currentFileNeedSync.get();
1:             }
0:         }));
1: 
1:     }
1: 
1:     @Test
0:     public void testSyncRotate()throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.PERIODIC);
0:         //Set a long interval to make sure it isn't called in this test
0:         store.setJournalDiskSyncInterval(10 * 1000);
1:         store.start();
1: 
1:         final Journal journal = store.getJournal();
1:         assertTrue(journal.isJournalDiskSyncPeriodic());
1:         assertFalse(store.isEnableJournalDiskSyncs());
0:         assertEquals(10 * 1000, store.getJournalDiskSyncInterval());
0:         journal.currentFileNeedSync.set(true);        //Make sure a disk sync was done by the executor because a message was added
1: 
0:         //get the current file but pass in a size greater than the
0:         //journal length to trigger a rotation so we can verify that it was synced
0:         journal.getCurrentDataFile(2 * defaultJournalLength);
1: 
0:         //verify a sync was called (which will set this flag to false)
0:         assertFalse(journal.currentFileNeedSync.get());
1:     }
1: 
1:     @Test
1:     public void testAlwaysSync()throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.ALWAYS);
1:         store.start();
1:         assertFalse(store.getJournal().isJournalDiskSyncPeriodic());
1:         assertTrue(store.isEnableJournalDiskSyncs());
1:     }
1: 
1:     @Test
1:     public void testNeverSync() throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.NEVER);
1:         store.start();
1:         assertFalse(store.getJournal().isJournalDiskSyncPeriodic());
1:         assertFalse(store.isEnableJournalDiskSyncs());
1:     }
1: 
1:     private KahaDBStore configureStore(JournalDiskSyncStrategy strategy) throws Exception {
1:         KahaDBStore store = new KahaDBStore();
1:         store.setJournalMaxFileLength(defaultJournalLength);
1:         store.deleteAllMessages();
1:         store.setDirectory(dataFileDir.getRoot());
1:         if (strategy != null) {
1:             store.setJournalDiskSyncStrategy(strategy.name());
1:         }
1: 
1:         return store;
1:     }
1: 
1:     private void writeMessage(final MessageStore messageStore, int num) throws Exception {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setText("testtesttest");
1:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:" + num);
1:         messageId.setBrokerSequenceId(num);
1:         message.setMessageId(messageId);
1:         messageStore.addMessage(new ConnectionContext(), message);
1:     }
1: 
1: 
1: }
============================================================================