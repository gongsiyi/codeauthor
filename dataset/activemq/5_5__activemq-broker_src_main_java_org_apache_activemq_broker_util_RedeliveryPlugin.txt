1:ac8c8d1: /**
1:ac8c8d1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ac8c8d1:  * contributor license agreements.  See the NOTICE file distributed with
1:ac8c8d1:  * this work for additional information regarding copyright ownership.
1:ac8c8d1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ac8c8d1:  * (the "License"); you may not use this file except in compliance with
1:ac8c8d1:  * the License.  You may obtain a copy of the License at
1:ac8c8d1:  *
1:ac8c8d1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ac8c8d1:  *
1:ac8c8d1:  * Unless required by applicable law or agreed to in writing, software
1:ac8c8d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ac8c8d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ac8c8d1:  * See the License for the specific language governing permissions and
1:ac8c8d1:  * limitations under the License.
1:ac8c8d1:  */
1:ac8c8d1: package org.apache.activemq.broker.util;
1:ac8c8d1: 
1:ac8c8d1: import java.io.IOException;
1:0bb9013: 
1:ac8c8d1: import org.apache.activemq.RedeliveryPolicy;
1:ac8c8d1: import org.apache.activemq.ScheduledMessage;
1:ac8c8d1: import org.apache.activemq.broker.Broker;
1:ac8c8d1: import org.apache.activemq.broker.BrokerPluginSupport;
1:ac8c8d1: import org.apache.activemq.broker.ConnectionContext;
1:ac8c8d1: import org.apache.activemq.broker.ProducerBrokerExchange;
1:9a8f6e4: import org.apache.activemq.broker.region.Destination;
1:ac8c8d1: import org.apache.activemq.broker.region.MessageReference;
1:ac8c8d1: import org.apache.activemq.broker.region.Subscription;
1:ac8c8d1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:ac8c8d1: import org.apache.activemq.command.ActiveMQDestination;
1:ac8c8d1: import org.apache.activemq.command.ActiveMQQueue;
1:ac8c8d1: import org.apache.activemq.command.ActiveMQTopic;
1:ac8c8d1: import org.apache.activemq.command.Message;
1:ac8c8d1: import org.apache.activemq.command.ProducerInfo;
1:ac8c8d1: import org.apache.activemq.filter.AnyDestination;
1:ac8c8d1: import org.apache.activemq.state.ProducerState;
1:ac8c8d1: import org.slf4j.Logger;
1:ac8c8d1: import org.slf4j.LoggerFactory;
1:ac8c8d1: 
1:ac8c8d1: /**
1:ac8c8d1:  * Replace regular DLQ handling with redelivery via a resend to the original destination
1:ac8c8d1:  * after a delay
1:ac8c8d1:  * A destination matching RedeliveryPolicy controls the quantity and delay for re-sends
1:ac8c8d1:  * If there is no matching policy or an existing policy limit is exceeded by default
1:ac8c8d1:  * regular DLQ processing resumes. This is controlled via sendToDlqIfMaxRetriesExceeded
1:ac8c8d1:  * and fallbackToDeadLetter
1:ac8c8d1:  *
1:ac8c8d1:  * @org.apache.xbean.XBean element="redeliveryPlugin"
1:ac8c8d1:  */
1:ac8c8d1: public class RedeliveryPlugin extends BrokerPluginSupport {
1:ac8c8d1:     private static final Logger LOG = LoggerFactory.getLogger(RedeliveryPlugin.class);
1:ac8c8d1:     public static final String REDELIVERY_DELAY = "redeliveryDelay";
1:ac8c8d1: 
1:ac8c8d1:     RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:ac8c8d1:     boolean sendToDlqIfMaxRetriesExceeded = true;
1:ac8c8d1:     private boolean fallbackToDeadLetter = true;
1:ac8c8d1: 
1:ac8c8d1:     @Override
1:ac8c8d1:     public Broker installPlugin(Broker broker) throws Exception {
1:ac8c8d1:         if (!broker.getBrokerService().isSchedulerSupport()) {
1:ac8c8d1:             throw new IllegalStateException("RedeliveryPlugin requires schedulerSupport=true on the broker");
3:ac8c8d1:         }
1:ac8c8d1:         validatePolicyDelay(1000);
1:ac8c8d1:         return super.installPlugin(broker);
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     /*
1:ac8c8d1:      * sending to dlq is called as part of a poison ack processing, before the message is acknowledged  and removed
1:ac8c8d1:      * by the destination so a delay is vital to avoid resending before it has been consumed
1:ac8c8d1:      */
1:ac8c8d1:     private void validatePolicyDelay(long limit) {
1:ac8c8d1:         final ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")});
1:ac8c8d1:         for (Object entry : redeliveryPolicyMap.get(matchAll)) {
1:ac8c8d1:             RedeliveryPolicy redeliveryPolicy = (RedeliveryPolicy) entry;
1:ac8c8d1:             validateLimit(limit, redeliveryPolicy);
1:ac8c8d1:         }
1:ac8c8d1:         RedeliveryPolicy defaultEntry = redeliveryPolicyMap.getDefaultEntry();
1:ac8c8d1:         if (defaultEntry != null) {
1:ac8c8d1:             validateLimit(limit, defaultEntry);
1:ac8c8d1:         }
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     private void validateLimit(long limit, RedeliveryPolicy redeliveryPolicy) {
1:ac8c8d1:         if (redeliveryPolicy.getInitialRedeliveryDelay() < limit) {
1:ac8c8d1:             throw new IllegalStateException("RedeliveryPolicy initialRedeliveryDelay must exceed: " + limit + ". " + redeliveryPolicy);
1:ac8c8d1:         }
1:ac8c8d1:         if (redeliveryPolicy.getRedeliveryDelay() < limit) {
1:ac8c8d1:             throw new IllegalStateException("RedeliveryPolicy redeliveryDelay must exceed: " + limit + ". " + redeliveryPolicy);
1:ac8c8d1:         }
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     public RedeliveryPolicyMap getRedeliveryPolicyMap() {
1:ac8c8d1:         return redeliveryPolicyMap;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     public void setRedeliveryPolicyMap(RedeliveryPolicyMap redeliveryPolicyMap) {
1:ac8c8d1:         this.redeliveryPolicyMap = redeliveryPolicyMap;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     public boolean isSendToDlqIfMaxRetriesExceeded() {
1:ac8c8d1:         return sendToDlqIfMaxRetriesExceeded;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     /**
1:ac8c8d1:      * What to do if the maxretries on a matching redelivery policy is exceeded.
1:ac8c8d1:      * when true, the region broker DLQ processing will be used via sendToDeadLetterQueue
1:ac8c8d1:      * when false, there is no action
1:ac8c8d1:      * @param sendToDlqIfMaxRetriesExceeded
1:ac8c8d1:      */
1:ac8c8d1:     public void setSendToDlqIfMaxRetriesExceeded(boolean sendToDlqIfMaxRetriesExceeded) {
1:ac8c8d1:         this.sendToDlqIfMaxRetriesExceeded = sendToDlqIfMaxRetriesExceeded;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     public boolean isFallbackToDeadLetter() {
1:ac8c8d1:         return fallbackToDeadLetter;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     /**
1:ac8c8d1:      * What to do if there is no matching redelivery policy for a destination.
1:ac8c8d1:      * when true, the region broker DLQ processing will be used via sendToDeadLetterQueue
1:ac8c8d1:      * when false, there is no action
1:ac8c8d1:      * @param fallbackToDeadLetter
1:ac8c8d1:      */
1:ac8c8d1:     public void setFallbackToDeadLetter(boolean fallbackToDeadLetter) {
1:ac8c8d1:         this.fallbackToDeadLetter = fallbackToDeadLetter;
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     @Override
1:708be6d:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause) {
1:fdd0534:         if (messageReference.isExpired()) {
1:ac8c8d1:             // there are two uses of  sendToDeadLetterQueue, we are only interested in valid messages
1:708be6d:             return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:ac8c8d1:         } else {
1:ac8c8d1:             try {
1:9a8f6e4:                 Destination regionDestination = (Destination) messageReference.getRegionDestination();
1:9a8f6e4:                 final RedeliveryPolicy redeliveryPolicy = redeliveryPolicyMap.getEntryFor(regionDestination.getActiveMQDestination());
1:ac8c8d1:                 if (redeliveryPolicy != null) {
1:fc15f13:                     final int maximumRedeliveries = redeliveryPolicy.getMaximumRedeliveries();
1:ac8c8d1:                     int redeliveryCount = messageReference.getRedeliveryCounter();
1:fc15f13:                     if (RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES == maximumRedeliveries || redeliveryCount < maximumRedeliveries) {
1:ac8c8d1: 
1:1d71cb7:                         long delay = redeliveryPolicy.getInitialRedeliveryDelay();
1:1d71cb7:                         for (int i = 0; i < redeliveryCount; i++) {
1:1d71cb7:                             delay = redeliveryPolicy.getNextRedeliveryDelay(delay);
1:1d71cb7:                         }
1:ac8c8d1: 
1:ac8c8d1:                         scheduleRedelivery(context, messageReference, delay, ++redeliveryCount);
1:ac8c8d1:                     } else if (isSendToDlqIfMaxRetriesExceeded()) {
1:708be6d:                         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:ac8c8d1:                     } else {
1:e1bbde7:                         LOG.debug("Discarding message that exceeds max redelivery count({}), {}", maximumRedeliveries, messageReference.getMessageId());
1:ac8c8d1:                     }
1:ac8c8d1:                 } else if (isFallbackToDeadLetter()) {
1:708be6d:                     return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:ac8c8d1:                 } else {
1:e1bbde7:                     LOG.debug("Ignoring dlq request for: {}, RedeliveryPolicy not found (and no fallback) for: {}", messageReference.getMessageId(), regionDestination.getActiveMQDestination());
1:ac8c8d1:                 }
1:ac8c8d1: 
1:0bb9013:                 return false;
1:ac8c8d1:             } catch (Exception exception) {
1:ac8c8d1:                 // abort the ack, will be effective if client use transactions or individual ack with sync send
1:ac8c8d1:                 RuntimeException toThrow =  new RuntimeException("Failed to schedule redelivery for: " + messageReference.getMessageId(), exception);
1:ac8c8d1:                 LOG.error(toThrow.toString(), exception);
1:ac8c8d1:                 throw toThrow;
1:ac8c8d1:             }
1:ac8c8d1:         }
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     private void scheduleRedelivery(ConnectionContext context, MessageReference messageReference, long delay, int redeliveryCount) throws Exception {
1:ac8c8d1:         if (LOG.isTraceEnabled()) {
1:9a8f6e4:             Destination regionDestination = (Destination) messageReference.getRegionDestination();
1:e1bbde7:             LOG.trace("redelivery #{} of: {} with delay: {}, dest: {}", new Object[]{
1:e1bbde7:                     redeliveryCount, messageReference.getMessageId(), delay, regionDestination.getActiveMQDestination()
1:e1bbde7:             });
1:ac8c8d1:         }
1:ac8c8d1:         final Message old = messageReference.getMessage();
1:ac8c8d1:         Message message = old.copy();
1:ac8c8d1: 
1:ac8c8d1:         message.setTransactionId(null);
1:ac8c8d1:         message.setMemoryUsage(null);
1:ac8c8d1:         message.removeProperty(ScheduledMessage.AMQ_SCHEDULED_ID);
1:ac8c8d1: 
1:ac8c8d1:         message.setProperty(REDELIVERY_DELAY, delay);
1:ac8c8d1:         message.setProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:ac8c8d1:         message.setRedeliveryCounter(redeliveryCount);
1:ac8c8d1: 
1:ac8c8d1:         boolean originalFlowControl = context.isProducerFlowControl();
1:ac8c8d1:         try {
1:ac8c8d1:             context.setProducerFlowControl(false);
1:ac8c8d1:             ProducerInfo info = new ProducerInfo();
1:ac8c8d1:             ProducerState state = new ProducerState(info);
1:ac8c8d1:             ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:ac8c8d1:             producerExchange.setProducerState(state);
1:ac8c8d1:             producerExchange.setMutable(true);
1:ac8c8d1:             producerExchange.setConnectionContext(context);
1:ac8c8d1:             context.getBroker().send(producerExchange, message);
1:ac8c8d1:         } finally {
1:ac8c8d1:             context.setProducerFlowControl(originalFlowControl);
1:ac8c8d1:         }
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1d71cb7
/////////////////////////////////////////////////////////////////////////
1:                         long delay = redeliveryPolicy.getInitialRedeliveryDelay();
1:                         for (int i = 0; i < redeliveryCount; i++) {
1:                             delay = redeliveryPolicy.getNextRedeliveryDelay(delay);
1:                         }
/////////////////////////////////////////////////////////////////////////
commit:c07514f
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Discarding message that exceeds max redelivery count({}), {}", maximumRedeliveries, messageReference.getMessageId());
1:                     LOG.debug("Ignoring dlq request for: {}, RedeliveryPolicy not found (and no fallback) for: {}", messageReference.getMessageId(), regionDestination.getActiveMQDestination());
/////////////////////////////////////////////////////////////////////////
1:             LOG.trace("redelivery #{} of: {} with delay: {}, dest: {}", new Object[]{
1:                     redeliveryCount, messageReference.getMessageId(), delay, regionDestination.getActiveMQDestination()
1:             });
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause) {
1:             return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
/////////////////////////////////////////////////////////////////////////
1:                         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:                     return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
commit:fc15f13
/////////////////////////////////////////////////////////////////////////
1:                     final int maximumRedeliveries = redeliveryPolicy.getMaximumRedeliveries();
1:                     if (RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES == maximumRedeliveries || redeliveryCount < maximumRedeliveries) {
/////////////////////////////////////////////////////////////////////////
0:                         LOG.debug("Discarding message that exceeds max redelivery count( " + maximumRedeliveries + "), " + messageReference.getMessageId());
commit:fdd0534
/////////////////////////////////////////////////////////////////////////
1:         if (messageReference.isExpired()) {
commit:ac8c8d1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import java.io.IOException;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.filter.AnyDestination;
1: import org.apache.activemq.state.ProducerState;
0: import org.apache.activemq.util.BrokerSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Replace regular DLQ handling with redelivery via a resend to the original destination
1:  * after a delay
1:  * A destination matching RedeliveryPolicy controls the quantity and delay for re-sends
1:  * If there is no matching policy or an existing policy limit is exceeded by default
1:  * regular DLQ processing resumes. This is controlled via sendToDlqIfMaxRetriesExceeded
1:  * and fallbackToDeadLetter
1:  *
1:  * @org.apache.xbean.XBean element="redeliveryPlugin"
1:  */
1: public class RedeliveryPlugin extends BrokerPluginSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(RedeliveryPlugin.class);
1:     public static final String REDELIVERY_DELAY = "redeliveryDelay";
1: 
1:     RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:     boolean sendToDlqIfMaxRetriesExceeded = true;
1:     private boolean fallbackToDeadLetter = true;
1: 
1:     @Override
1:     public Broker installPlugin(Broker broker) throws Exception {
1:         if (!broker.getBrokerService().isSchedulerSupport()) {
1:             throw new IllegalStateException("RedeliveryPlugin requires schedulerSupport=true on the broker");
1:         }
1:         validatePolicyDelay(1000);
1:         return super.installPlugin(broker);
1:     }
1: 
1:     /*
1:      * sending to dlq is called as part of a poison ack processing, before the message is acknowledged  and removed
1:      * by the destination so a delay is vital to avoid resending before it has been consumed
1:      */
1:     private void validatePolicyDelay(long limit) {
1:         final ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")});
1:         for (Object entry : redeliveryPolicyMap.get(matchAll)) {
1:             RedeliveryPolicy redeliveryPolicy = (RedeliveryPolicy) entry;
1:             validateLimit(limit, redeliveryPolicy);
1:         }
1:         RedeliveryPolicy defaultEntry = redeliveryPolicyMap.getDefaultEntry();
1:         if (defaultEntry != null) {
1:             validateLimit(limit, defaultEntry);
1:         }
1:     }
1: 
1:     private void validateLimit(long limit, RedeliveryPolicy redeliveryPolicy) {
1:         if (redeliveryPolicy.getInitialRedeliveryDelay() < limit) {
1:             throw new IllegalStateException("RedeliveryPolicy initialRedeliveryDelay must exceed: " + limit + ". " + redeliveryPolicy);
1:         }
1:         if (redeliveryPolicy.getRedeliveryDelay() < limit) {
1:             throw new IllegalStateException("RedeliveryPolicy redeliveryDelay must exceed: " + limit + ". " + redeliveryPolicy);
1:         }
1:     }
1: 
1:     public RedeliveryPolicyMap getRedeliveryPolicyMap() {
1:         return redeliveryPolicyMap;
1:     }
1: 
1:     public void setRedeliveryPolicyMap(RedeliveryPolicyMap redeliveryPolicyMap) {
1:         this.redeliveryPolicyMap = redeliveryPolicyMap;
1:     }
1: 
1:     public boolean isSendToDlqIfMaxRetriesExceeded() {
1:         return sendToDlqIfMaxRetriesExceeded;
1:     }
1: 
1:     /**
1:      * What to do if the maxretries on a matching redelivery policy is exceeded.
1:      * when true, the region broker DLQ processing will be used via sendToDeadLetterQueue
1:      * when false, there is no action
1:      * @param sendToDlqIfMaxRetriesExceeded
1:      */
1:     public void setSendToDlqIfMaxRetriesExceeded(boolean sendToDlqIfMaxRetriesExceeded) {
1:         this.sendToDlqIfMaxRetriesExceeded = sendToDlqIfMaxRetriesExceeded;
1:     }
1: 
1:     public boolean isFallbackToDeadLetter() {
1:         return fallbackToDeadLetter;
1:     }
1: 
1:     /**
1:      * What to do if there is no matching redelivery policy for a destination.
1:      * when true, the region broker DLQ processing will be used via sendToDeadLetterQueue
1:      * when false, there is no action
1:      * @param fallbackToDeadLetter
1:      */
1:     public void setFallbackToDeadLetter(boolean fallbackToDeadLetter) {
1:         this.fallbackToDeadLetter = fallbackToDeadLetter;
1:     }
1: 
1:     @Override
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription) {
0:         if (next.get().isExpired(messageReference)) {
1:             // there are two uses of  sendToDeadLetterQueue, we are only interested in valid messages
0:             super.sendToDeadLetterQueue(context, messageReference, subscription);
1:         } else {
1:             try {
0:                 final RedeliveryPolicy redeliveryPolicy = redeliveryPolicyMap.getEntryFor(messageReference.getRegionDestination().getActiveMQDestination());
1:                 if (redeliveryPolicy != null) {
1:                     int redeliveryCount = messageReference.getRedeliveryCounter();
0:                     if (redeliveryCount < redeliveryPolicy.getMaximumRedeliveries()) {
1: 
0:                         long delay = ( redeliveryCount == 0 ?
0:                                 redeliveryPolicy.getInitialRedeliveryDelay() :
0:                                 redeliveryPolicy.getNextRedeliveryDelay(getExistingDelay(messageReference)));
1: 
1:                         scheduleRedelivery(context, messageReference, delay, ++redeliveryCount);
1:                     } else if (isSendToDlqIfMaxRetriesExceeded()) {
0:                         super.sendToDeadLetterQueue(context, messageReference, subscription);
1:                     } else {
0:                         LOG.debug("Discarding message that exceeds max redelivery count, " + messageReference.getMessageId());
1:                     }
1:                 } else if (isFallbackToDeadLetter()) {
0:                     super.sendToDeadLetterQueue(context, messageReference, subscription);
1:                 } else {
0:                     LOG.debug("Ignoring dlq request for:" + messageReference.getMessageId()  + ", RedeliveryPolicy not found (and no fallback) for: " + messageReference.getRegionDestination().getActiveMQDestination());
1:                 }
1:             } catch (Exception exception) {
1:                 // abort the ack, will be effective if client use transactions or individual ack with sync send
1:                 RuntimeException toThrow =  new RuntimeException("Failed to schedule redelivery for: " + messageReference.getMessageId(), exception);
1:                 LOG.error(toThrow.toString(), exception);
1:                 throw toThrow;
1:             }
1:         }
1:     }
1: 
1:     private void scheduleRedelivery(ConnectionContext context, MessageReference messageReference, long delay, int redeliveryCount) throws Exception {
1:         if (LOG.isTraceEnabled()) {
0:             LOG.trace("redelivery #" + redeliveryCount + " of: " + messageReference.getMessageId() + " with delay: "
0:                     + delay + ", dest: " + messageReference.getRegionDestination().getActiveMQDestination());
1:         }
1:         final Message old = messageReference.getMessage();
1:         Message message = old.copy();
1: 
1:         message.setTransactionId(null);
1:         message.setMemoryUsage(null);
0:         message.setMarshalledProperties(null);
1:         message.removeProperty(ScheduledMessage.AMQ_SCHEDULED_ID);
1: 
1:         message.setProperty(REDELIVERY_DELAY, delay);
1:         message.setProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:         message.setRedeliveryCounter(redeliveryCount);
1: 
1:         boolean originalFlowControl = context.isProducerFlowControl();
1:         try {
1:             context.setProducerFlowControl(false);
1:             ProducerInfo info = new ProducerInfo();
1:             ProducerState state = new ProducerState(info);
1:             ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:             producerExchange.setProducerState(state);
1:             producerExchange.setMutable(true);
1:             producerExchange.setConnectionContext(context);
1:             context.getBroker().send(producerExchange, message);
1:         } finally {
1:             context.setProducerFlowControl(originalFlowControl);
1:         }
1:     }
1: 
0:     private int getExistingDelay(MessageReference messageReference) throws IOException {
0:         Object val = messageReference.getMessage().getProperty(REDELIVERY_DELAY);
0:         if (val instanceof Long) {
0:             return ((Long)val).intValue();
1:         }
0:         return 0;
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription) {
0:             return super.sendToDeadLetterQueue(context, messageReference, subscription);
/////////////////////////////////////////////////////////////////////////
0:                         return super.sendToDeadLetterQueue(context, messageReference, subscription);
0:                     return super.sendToDeadLetterQueue(context, messageReference, subscription);
0: 
1:                 return false;
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 Destination regionDestination = (Destination) messageReference.getRegionDestination();
1:                 final RedeliveryPolicy redeliveryPolicy = redeliveryPolicyMap.getEntryFor(regionDestination.getActiveMQDestination());
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("Ignoring dlq request for:" + messageReference.getMessageId() + ", RedeliveryPolicy not found (and no fallback) for: " + regionDestination.getActiveMQDestination());
/////////////////////////////////////////////////////////////////////////
1:             Destination regionDestination = (Destination) messageReference.getRegionDestination();
0:                     + delay + ", dest: " + regionDestination.getActiveMQDestination());
============================================================================