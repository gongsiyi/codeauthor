1:7f883f6: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
2:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:e6f5d30: package org.apache.activemq.broker.jmx;
1:e6f5d30: 
1:383d12e: import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
1:2bd0e57: import org.apache.activemq.broker.scheduler.Job;
1:eb034b4: import org.apache.activemq.command.ActiveMQBlobMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQBytesMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQMapMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQObjectMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQStreamMessage;
1:e6f5d30: import org.apache.activemq.command.ActiveMQTextMessage;
1:2bd0e57: import org.fusesource.hawtbuf.UTF8Buffer;
1:e6f5d30: 
1:e6f5d30: import javax.jms.DeliveryMode;
1:e6f5d30: import javax.jms.JMSException;
1:e6f5d30: import javax.management.openmbean.ArrayType;
1:e6f5d30: import javax.management.openmbean.CompositeData;
1:e6f5d30: import javax.management.openmbean.CompositeDataSupport;
1:e6f5d30: import javax.management.openmbean.CompositeType;
1:e6f5d30: import javax.management.openmbean.OpenDataException;
1:e6f5d30: import javax.management.openmbean.OpenType;
1:e6f5d30: import javax.management.openmbean.SimpleType;
1:3dd6575: import javax.management.openmbean.TabularDataSupport;
1:3dd6575: import javax.management.openmbean.TabularType;
1:e6f5d30: import java.io.IOException;
1:e6f5d30: import java.util.ArrayList;
1:6f124c1: import java.util.Arrays;
1:e6f5d30: import java.util.Date;
1:e6f5d30: import java.util.HashMap;
1:ecf89a6: import java.util.List;
1:e6f5d30: import java.util.Map;
1:2bd0e57: import java.util.Set;
1:e6f5d30: 
1:ecf89a6: public final class OpenTypeSupport {
1:e6f5d30: 
1:2019a21:     public interface OpenTypeFactory {
1:e6f5d30:         CompositeType getCompositeType() throws OpenDataException;
1:230a86c: 
1:ecf89a6:         Map<String, Object> getFields(Object o) throws OpenDataException;
1:e6f5d30:     }
1:230a86c: 
1:c7c8e53:     private static final Map<Class, AbstractOpenTypeFactory> OPEN_TYPE_FACTORIES = new HashMap<Class, AbstractOpenTypeFactory>();
1:230a86c: 
1:2019a21:     public abstract static class AbstractOpenTypeFactory implements OpenTypeFactory {
1:230a86c: 
1:e6f5d30:         private CompositeType compositeType;
1:c7c8e53:         private final List<String> itemNamesList = new ArrayList<String>();
1:c7c8e53:         private final List<String> itemDescriptionsList = new ArrayList<String>();
1:c7c8e53:         private final List<OpenType> itemTypesList = new ArrayList<OpenType>();
1:230a86c: 
1:a4c7488:         public synchronized CompositeType getCompositeType() throws OpenDataException {
1:230a86c:             if (compositeType == null) {
1:e6f5d30:                 init();
1:e6f5d30:                 compositeType = createCompositeType();
1:e6f5d30:             }
1:e6f5d30:             return compositeType;
1:e6f5d30:         }
1:230a86c: 
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:         }
1:230a86c: 
1:e6f5d30:         protected CompositeType createCompositeType() throws OpenDataException {
1:ecf89a6:             String[] itemNames = itemNamesList.toArray(new String[itemNamesList.size()]);
1:ecf89a6:             String[] itemDescriptions = itemDescriptionsList.toArray(new String[itemDescriptionsList.size()]);
1:ecf89a6:             OpenType[] itemTypes = itemTypesList.toArray(new OpenType[itemTypesList.size()]);
1:230a86c:             return new CompositeType(getTypeName(), getDescription(), itemNames, itemDescriptions, itemTypes);
1:e6f5d30:         }
1:230a86c: 
1:fc00993:         protected abstract String getTypeName();
1:230a86c: 
1:e6f5d30:         protected void addItem(String name, String description, OpenType type) {
1:e6f5d30:             itemNamesList.add(name);
1:e6f5d30:             itemDescriptionsList.add(description);
1:e6f5d30:             itemTypesList.add(type);
1:e6f5d30:         }
1:e6f5d30: 
1:e6f5d30:         protected String getDescription() {
1:e6f5d30:             return getTypeName();
1:e6f5d30:         }
1:e6f5d30: 
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:ecf89a6:             Map<String, Object> rc = new HashMap<String, Object>();
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:e6f5d30:     }
1:230a86c: 
1:e6f5d30:     static class MessageOpenTypeFactory extends AbstractOpenTypeFactory {
1:3dd6575:         protected TabularType stringPropertyTabularType;
1:3dd6575:         protected TabularType booleanPropertyTabularType;
1:3dd6575:         protected TabularType bytePropertyTabularType;
1:3dd6575:         protected TabularType shortPropertyTabularType;
1:3dd6575:         protected TabularType intPropertyTabularType;
1:3dd6575:         protected TabularType longPropertyTabularType;
1:3dd6575:         protected TabularType floatPropertyTabularType;
1:3dd6575:         protected TabularType doublePropertyTabularType;
1:230a86c: 
1:ed96e2e:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQMessage.class.getName();
1:e6f5d30:         }
1:230a86c: 
1:ed96e2e:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e6f5d30:             addItem("JMSCorrelationID", "JMSCorrelationID", SimpleType.STRING);
1:e6f5d30:             addItem("JMSDestination", "JMSDestination", SimpleType.STRING);
1:e6f5d30:             addItem("JMSMessageID", "JMSMessageID", SimpleType.STRING);
1:e6f5d30:             addItem("JMSReplyTo", "JMSReplyTo", SimpleType.STRING);
1:e6f5d30:             addItem("JMSType", "JMSType", SimpleType.STRING);
1:e6f5d30:             addItem("JMSDeliveryMode", "JMSDeliveryMode", SimpleType.STRING);
1:e6f5d30:             addItem("JMSExpiration", "JMSExpiration", SimpleType.LONG);
1:e6f5d30:             addItem("JMSPriority", "JMSPriority", SimpleType.INTEGER);
1:e6f5d30:             addItem("JMSRedelivered", "JMSRedelivered", SimpleType.BOOLEAN);
1:e6f5d30:             addItem("JMSTimestamp", "JMSTimestamp", SimpleType.DATE);
1:e10f75c:             addItem(CompositeDataConstants.JMSXGROUP_ID, "Message Group ID", SimpleType.STRING);
1:e10f75c:             addItem(CompositeDataConstants.JMSXGROUP_SEQ, "Message Group Sequence Number", SimpleType.INTEGER);
1:9c75fe7:             addItem(CompositeDataConstants.JMSXUSER_ID, "The user that sent the message", SimpleType.STRING);
1:6f124c1:             addItem(CompositeDataConstants.BROKER_PATH, "Brokers traversed", SimpleType.STRING);
1:e10f75c:             addItem(CompositeDataConstants.ORIGINAL_DESTINATION, "Original Destination Before Senting To DLQ", SimpleType.STRING);
1:3dd6575:             addItem(CompositeDataConstants.PROPERTIES, "User Properties Text", SimpleType.STRING);
1:e6f5d30: 
1:3dd6575:             // now lets expose the type safe properties
1:3dd6575:             stringPropertyTabularType = createTabularType(String.class, SimpleType.STRING);
1:3dd6575:             booleanPropertyTabularType = createTabularType(Boolean.class, SimpleType.BOOLEAN);
1:3dd6575:             bytePropertyTabularType = createTabularType(Byte.class, SimpleType.BYTE);
1:3dd6575:             shortPropertyTabularType = createTabularType(Short.class, SimpleType.SHORT);
1:3dd6575:             intPropertyTabularType = createTabularType(Integer.class, SimpleType.INTEGER);
1:3dd6575:             longPropertyTabularType = createTabularType(Long.class, SimpleType.LONG);
1:3dd6575:             floatPropertyTabularType = createTabularType(Float.class, SimpleType.FLOAT);
1:3dd6575:             doublePropertyTabularType = createTabularType(Double.class, SimpleType.DOUBLE);
1:e6f5d30: 
1:3dd6575:             addItem(CompositeDataConstants.STRING_PROPERTIES, "User String Properties", stringPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.BOOLEAN_PROPERTIES, "User Boolean Properties", booleanPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.BYTE_PROPERTIES, "User Byte Properties", bytePropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.SHORT_PROPERTIES, "User Short Properties", shortPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.INT_PROPERTIES, "User Integer Properties", intPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.LONG_PROPERTIES, "User Long Properties", longPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.FLOAT_PROPERTIES, "User Float Properties", floatPropertyTabularType);
1:3dd6575:             addItem(CompositeDataConstants.DOUBLE_PROPERTIES, "User Double Properties", doublePropertyTabularType);
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:230a86c:             ActiveMQMessage m = (ActiveMQMessage)o;
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:e6f5d30:             rc.put("JMSCorrelationID", m.getJMSCorrelationID());
1:230a86c:             rc.put("JMSDestination", "" + m.getJMSDestination());
1:e6f5d30:             rc.put("JMSMessageID", m.getJMSMessageID());
1:a634647:             rc.put("JMSReplyTo",toString(m.getJMSReplyTo()));
1:e6f5d30:             rc.put("JMSType", m.getJMSType());
1:230a86c:             rc.put("JMSDeliveryMode", m.getJMSDeliveryMode() == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON-PERSISTENT");
1:d36c0d4:             rc.put("JMSExpiration", Long.valueOf(m.getJMSExpiration()));
1:d36c0d4:             rc.put("JMSPriority", Integer.valueOf(m.getJMSPriority()));
1:d36c0d4:             rc.put("JMSRedelivered", Boolean.valueOf(m.getJMSRedelivered()));
1:e6f5d30:             rc.put("JMSTimestamp", new Date(m.getJMSTimestamp()));
1:e10f75c:             rc.put(CompositeDataConstants.JMSXGROUP_ID, m.getGroupID());
1:e10f75c:             rc.put(CompositeDataConstants.JMSXGROUP_SEQ, m.getGroupSequence());
1:9c75fe7:             rc.put(CompositeDataConstants.JMSXUSER_ID, m.getUserID());
1:6f124c1:             rc.put(CompositeDataConstants.BROKER_PATH, Arrays.toString(m.getBrokerPath()));
1:e10f75c:             rc.put(CompositeDataConstants.ORIGINAL_DESTINATION, toString(m.getOriginalDestination()));
1:e6f5d30:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.PROPERTIES, "" + m.getProperties());
1:e6f5d30:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.PROPERTIES, "");
1:e6f5d30:             }
1:7113c5e: 
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.STRING_PROPERTIES, createTabularData(m, stringPropertyTabularType, String.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.STRING_PROPERTIES, new TabularDataSupport(stringPropertyTabularType));
1:e6f5d30:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.BOOLEAN_PROPERTIES, createTabularData(m, booleanPropertyTabularType, Boolean.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.BOOLEAN_PROPERTIES, new TabularDataSupport(booleanPropertyTabularType));
1:e6f5d30:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.BYTE_PROPERTIES, createTabularData(m, bytePropertyTabularType, Byte.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.BYTE_PROPERTIES, new TabularDataSupport(bytePropertyTabularType));
1:e6f5d30:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.SHORT_PROPERTIES, createTabularData(m, shortPropertyTabularType, Short.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.SHORT_PROPERTIES, new TabularDataSupport(shortPropertyTabularType));
1:3dd6575:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.INT_PROPERTIES, createTabularData(m, intPropertyTabularType, Integer.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.INT_PROPERTIES, new TabularDataSupport(intPropertyTabularType));
1:3dd6575:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.LONG_PROPERTIES, createTabularData(m, longPropertyTabularType, Long.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.LONG_PROPERTIES, new TabularDataSupport(longPropertyTabularType));
1:3dd6575:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.FLOAT_PROPERTIES, createTabularData(m, floatPropertyTabularType, Float.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.FLOAT_PROPERTIES, new TabularDataSupport(floatPropertyTabularType));
1:3dd6575:             }
1:3dd6575:             try {
1:3dd6575:                 rc.put(CompositeDataConstants.DOUBLE_PROPERTIES, createTabularData(m, doublePropertyTabularType, Double.class));
1:3dd6575:             } catch (IOException e) {
1:3dd6575:                 rc.put(CompositeDataConstants.DOUBLE_PROPERTIES, new TabularDataSupport(doublePropertyTabularType));
1:3dd6575:             }
1:e6f5d30:             return rc;
1:3dd6575:         }
1:e6f5d30: 
1:a634647:         protected String toString(Object value) {
1:a634647:             if (value == null) {
1:a634647:                 return null;
1:a634647:             }
1:a634647:             return value.toString();
1:a634647:         }
1:e6f5d30: 
1:e6f5d30: 
1:3dd6575:         protected <T> TabularType createTabularType(Class<T> type, OpenType openType) throws OpenDataException {
1:3dd6575:             String typeName = "java.util.Map<java.lang.String, " + type.getName() + ">";
1:3dd6575:             String[] keyValue = new String[]{"key", "value"};
1:3dd6575:             OpenType[] openTypes = new OpenType[]{SimpleType.STRING, openType};
1:3dd6575:             CompositeType rowType = new CompositeType(typeName, typeName, keyValue, keyValue, openTypes);
1:3dd6575:             return new TabularType(typeName, typeName, rowType, new String[]{"key"});
1:3dd6575:         }
1:e6f5d30: 
1:3dd6575:         protected TabularDataSupport createTabularData(ActiveMQMessage m, TabularType type, Class valueType) throws IOException, OpenDataException {
1:3dd6575:             TabularDataSupport answer = new TabularDataSupport(type);
1:3dd6575:             Set<Map.Entry<String,Object>> entries = m.getProperties().entrySet();
1:3dd6575:             for (Map.Entry<String, Object> entry : entries) {
1:3dd6575:                 Object value = entry.getValue();
1:2bd0e57:                 if (value instanceof UTF8Buffer && valueType.equals(String.class)) {
1:2bd0e57:                     String actual = value.toString();
1:2bd0e57:                     CompositeDataSupport compositeData = createTabularRowValue(type, entry.getKey(), actual);
1:2bd0e57:                     answer.put(compositeData);
1:2bd0e57:                 }
1:3dd6575:                 if (valueType.isInstance(value)) {
1:3dd6575:                     CompositeDataSupport compositeData = createTabularRowValue(type, entry.getKey(), value);
1:3dd6575:                     answer.put(compositeData);
1:3dd6575:                 }
1:3dd6575:             }
1:3dd6575:             return answer;
1:3dd6575:         }
1:e6f5d30: 
1:3dd6575:         protected CompositeDataSupport createTabularRowValue(TabularType type, String key, Object value) throws OpenDataException {
1:3dd6575:             Map<String,Object> fields = new HashMap<String, Object>();
1:3dd6575:             fields.put("key", key);
1:3dd6575:             fields.put("value", value);
1:3dd6575:             return new CompositeDataSupport(type.getRowType(), fields);
1:3dd6575:         }
1:3dd6575:     }
1:e6f5d30: 
1:e6f5d30:     static class ByteMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:230a86c: 
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQBytesMessage.class.getName();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e10f75c:             addItem(CompositeDataConstants.BODY_LENGTH, "Body length", SimpleType.LONG);
1:e10f75c:             addItem(CompositeDataConstants.BODY_PREVIEW, "Body preview", new ArrayType(1, SimpleType.BYTE));
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:230a86c:             ActiveMQBytesMessage m = (ActiveMQBytesMessage)o;
1:9edeb21:             m.setReadOnlyBody(true);
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:230a86c:             long length = 0;
1:e6f5d30:             try {
1:e6f5d30:                 length = m.getBodyLength();
1:e10f75c:                 rc.put(CompositeDataConstants.BODY_LENGTH, Long.valueOf(length));
1:e6f5d30:             } catch (JMSException e) {
1:e10f75c:                 rc.put(CompositeDataConstants.BODY_LENGTH, Long.valueOf(0));
1:e6f5d30:             }
1:e6f5d30:             try {
1:230a86c:                 byte preview[] = new byte[(int)Math.min(length, 255)];
1:e6f5d30:                 m.readBytes(preview);
1:482be54:                 m.reset();
1:230a86c: 
1:230a86c:                 // This is whack! Java 1.5 JMX spec does not support primitive
1:230a86c:                 // arrays!
1:7113c5e:                 // In 1.6 it seems it is supported.. but until then...
1:230a86c:                 Byte data[] = new Byte[preview.length];
1:7113c5e:                 for (int i = 0; i < data.length; i++) {
1:230a86c:                     data[i] = new Byte(preview[i]);
1:230a86c:                 }
1:230a86c: 
1:e10f75c:                 rc.put(CompositeDataConstants.BODY_PREVIEW, data);
1:e6f5d30:             } catch (JMSException e) {
1:e10f75c:                 rc.put(CompositeDataConstants.BODY_PREVIEW, new Byte[] {});
1:7113c5e:             }
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:230a86c: 
1:e6f5d30:     }
1:230a86c: 
1:e6f5d30:     static class MapMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:7113c5e: 
1:c7c8e53:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQMapMessage.class.getName();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e10f75c:             addItem(CompositeDataConstants.CONTENT_MAP, "Content map", SimpleType.STRING);
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:230a86c:             ActiveMQMapMessage m = (ActiveMQMapMessage)o;
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:e6f5d30:             try {
1:e10f75c:                 rc.put(CompositeDataConstants.CONTENT_MAP, "" + m.getContentMap());
1:e6f5d30:             } catch (JMSException e) {
1:e10f75c:                 rc.put(CompositeDataConstants.CONTENT_MAP, "");
1:e6f5d30:             }
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:e6f5d30:     }
1:230a86c: 
1:e6f5d30:     static class ObjectMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:c7c8e53:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQObjectMessage.class.getName();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:e6f5d30:     }
1:e6f5d30: 
1:e6f5d30:     static class StreamMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:c7c8e53:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQStreamMessage.class.getName();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:e6f5d30:     }
1:e6f5d30: 
1:e6f5d30:     static class TextMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected String getTypeName() {
1:e6f5d30:             return ActiveMQTextMessage.class.getName();
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:e6f5d30:         protected void init() throws OpenDataException {
1:e6f5d30:             super.init();
1:e10f75c:             addItem(CompositeDataConstants.MESSAGE_TEXT, CompositeDataConstants.MESSAGE_TEXT, SimpleType.STRING);
1:e6f5d30:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ecf89a6:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:230a86c:             ActiveMQTextMessage m = (ActiveMQTextMessage)o;
1:ecf89a6:             Map<String, Object> rc = super.getFields(o);
1:e6f5d30:             try {
1:e10f75c:                 rc.put(CompositeDataConstants.MESSAGE_TEXT, "" + m.getText());
1:e6f5d30:             } catch (JMSException e) {
1:e10f75c:                 rc.put(CompositeDataConstants.MESSAGE_TEXT, "");
1:e6f5d30:             }
1:e6f5d30:             return rc;
1:e6f5d30:         }
1:e6f5d30:     }
1:230a86c: 
1:e6f5d30: 
1:c7c8e53:     static class JobOpenTypeFactory extends AbstractOpenTypeFactory {
1:e6f5d30: 
1:c7c8e53:         @Override
1:ed96e2e:         protected String getTypeName() {
1:c7c8e53:             return Job.class.getName();
1:3dd6575:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:ed96e2e:         protected void init() throws OpenDataException {
1:ed96e2e:             super.init();
1:c7c8e53:             addItem("jobId", "jobId", SimpleType.STRING);
1:c7c8e53:             addItem("cronEntry", "Cron entry", SimpleType.STRING);
1:c7c8e53:             addItem("start", "start time", SimpleType.STRING);
1:e3154c3:             addItem("delay", "initial delay", SimpleType.LONG);
1:c7c8e53:             addItem("next", "next time", SimpleType.STRING);
1:c7c8e53:             addItem("period", "period between jobs", SimpleType.LONG);
1:c7c8e53:             addItem("repeat", "number of times to repeat", SimpleType.INTEGER);
1:ed96e2e:         }
1:e6f5d30: 
1:c7c8e53:         @Override
1:c7c8e53:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:c7c8e53:             Job job = (Job) o;
1:c7c8e53:             Map<String, Object> rc = super.getFields(o);
1:c7c8e53:             rc.put("jobId", job.getJobId());
1:c7c8e53:             rc.put("cronEntry", "" + job.getCronEntry());
1:c7c8e53:             rc.put("start", job.getStartTime());
1:e3154c3:             rc.put("delay", job.getDelay());
1:c7c8e53:             rc.put("next", job.getNextExecutionTime());
1:c7c8e53:             rc.put("period", job.getPeriod());
1:c7c8e53:             rc.put("repeat", job.getRepeat());
1:c7c8e53:             return rc;
2:c7c8e53:         }
1:c7c8e53:     }
1:e6f5d30: 
1:eb034b4:     static class ActiveMQBlobMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:e6f5d30: 
1:eb034b4:         @Override
1:eb034b4:         protected String getTypeName() {
1:eb034b4:             return ActiveMQBlobMessage.class.getName();
1:eb034b4:         }
1:e6f5d30: 
1:eb034b4:         @Override
1:eb034b4:         protected void init() throws OpenDataException {
1:eb034b4:             super.init();
1:e10f75c:             addItem(CompositeDataConstants.MESSAGE_URL, "Body Url", SimpleType.STRING);
1:eb034b4:         }
1:e6f5d30: 
1:eb034b4:         @Override
1:eb034b4:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:eb034b4:             ActiveMQBlobMessage m = (ActiveMQBlobMessage)o;
1:eb034b4:             Map<String, Object> rc = super.getFields(o);
1:eb034b4:             try {
1:e10f75c:                 rc.put(CompositeDataConstants.MESSAGE_URL, "" + m.getURL().toString());
1:eb034b4:             } catch (JMSException e) {
1:e10f75c:                 rc.put(CompositeDataConstants.MESSAGE_URL, "");
1:eb034b4:             }
1:eb034b4:             return rc;
1:eb034b4:         }
1:eb034b4:     }
1:e6f5d30: 
1:383d12e:     static class SlowConsumerEntryOpenTypeFactory extends AbstractOpenTypeFactory {
1:383d12e:        @Override
1:383d12e:         protected String getTypeName() {
1:383d12e:             return SlowConsumerEntry.class.getName();
1:383d12e:         }
1:e6f5d30: 
1:383d12e:         @Override
1:383d12e:         protected void init() throws OpenDataException {
1:383d12e:             super.init();
1:383d12e:             addItem("subscription", "the subscription view", SimpleType.OBJECTNAME);
1:383d12e:             addItem("slowCount", "number of times deemed slow", SimpleType.INTEGER);
1:383d12e:             addItem("markCount", "number of periods remaining slow", SimpleType.INTEGER);
1:383d12e:         }
1:eb034b4: 
1:383d12e:         @Override
1:383d12e:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:383d12e:             SlowConsumerEntry entry = (SlowConsumerEntry) o;
1:383d12e:             Map<String, Object> rc = super.getFields(o);
1:383d12e:             rc.put("subscription", entry.getSubscription());
1:383d12e:             rc.put("slowCount", Integer.valueOf(entry.getSlowCount()));
1:383d12e:             rc.put("markCount", Integer.valueOf(entry.getMarkCount()));
1:383d12e:             return rc;
1:383d12e:         }
1:383d12e:     }
1:eb034b4: 
1:973909a:     static class HealthStatusOpenTypeFactory extends AbstractOpenTypeFactory {
1:c7c8e53:         @Override
1:c7c8e53:         protected String getTypeName() {
1:973909a:             return HealthStatus.class.getName();
1:c7c8e53:         }
1:eb034b4: 
1:c7c8e53:         @Override
1:c7c8e53:         protected void init() throws OpenDataException {
1:c7c8e53:             super.init();
1:973909a:             addItem("healthId", "health check id", SimpleType.STRING);
1:973909a:             addItem("level", "severity", SimpleType.STRING);
1:973909a:             addItem("message", "severity", SimpleType.STRING);
1:ed96e2e:             addItem("resource", "event resource", SimpleType.STRING);
1:ed96e2e:         }
1:eb034b4: 
1:ed96e2e:         @Override
1:ed96e2e:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:973909a:             HealthStatus event = (HealthStatus) o;
1:ed96e2e:             Map<String, Object> rc = super.getFields(o);
1:973909a:             rc.put("healthId", event.getHealthId());
1:973909a:             rc.put("level", event.getLevel());
1:973909a:             rc.put("message", event.getMessage());
1:ed96e2e:             rc.put("resource", event.getResource());
1:ed96e2e:             return rc;
1:ed96e2e:         }
1:ed96e2e:     }
1:eb034b4: 
1:e6f5d30:     static {
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQMessage.class, new MessageOpenTypeFactory());
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQBytesMessage.class, new ByteMessageOpenTypeFactory());
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQMapMessage.class, new MapMessageOpenTypeFactory());
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQObjectMessage.class, new ObjectMessageOpenTypeFactory());
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQStreamMessage.class, new StreamMessageOpenTypeFactory());
1:fc00993:         OPEN_TYPE_FACTORIES.put(ActiveMQTextMessage.class, new TextMessageOpenTypeFactory());
1:c7c8e53:         OPEN_TYPE_FACTORIES.put(Job.class, new JobOpenTypeFactory());
1:383d12e:         OPEN_TYPE_FACTORIES.put(SlowConsumerEntry.class, new SlowConsumerEntryOpenTypeFactory());
1:eb034b4:         OPEN_TYPE_FACTORIES.put(ActiveMQBlobMessage.class, new ActiveMQBlobMessageOpenTypeFactory());
1:973909a:         OPEN_TYPE_FACTORIES.put(HealthStatus.class, new HealthStatusOpenTypeFactory());
1:e6f5d30:     }
1:e6f5d30: 
1:ecf89a6:     private OpenTypeSupport() {
1:ecf89a6:     }
1:ecf89a6: 
1:c7c8e53:     public static OpenTypeFactory getFactory(Class<?> clazz) throws OpenDataException {
1:ecf89a6:         return OPEN_TYPE_FACTORIES.get(clazz);
1:e6f5d30:     }
1:e6f5d30: 
1:383d12e:     public static CompositeData convert(Object message) throws OpenDataException {
1:e6f5d30:         OpenTypeFactory f = getFactory(message.getClass());
1:ecf89a6:         if (f == null) {
1:230a86c:             throw new OpenDataException("Cannot create a CompositeData for type: " + message.getClass().getName());
1:ecf89a6:         }
1:e6f5d30:         CompositeType ct = f.getCompositeType();
1:ecf89a6:         Map<String, Object> fields = f.getFields(message);
1:e6f5d30:         return new CompositeDataSupport(ct, fields);
1:e6f5d30:     }
1:e6f5d30: 
1:e6f5d30: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a4c7488
/////////////////////////////////////////////////////////////////////////
1:         public synchronized CompositeType getCompositeType() throws OpenDataException {
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:9c75fe7
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.JMSXUSER_ID, "The user that sent the message", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:             rc.put(CompositeDataConstants.JMSXUSER_ID, m.getUserID());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2019a21
/////////////////////////////////////////////////////////////////////////
1:     public interface OpenTypeFactory {
/////////////////////////////////////////////////////////////////////////
1:     public abstract static class AbstractOpenTypeFactory implements OpenTypeFactory {
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: public final class OpenTypeSupport {
1:         Map<String, Object> getFields(Object o) throws OpenDataException;
0:     private static final Map<Class, MessageOpenTypeFactory> OPEN_TYPE_FACTORIES = new HashMap<Class, MessageOpenTypeFactory>();
0:         private List<String> itemNamesList = new ArrayList<String>();
0:         private List<String> itemDescriptionsList = new ArrayList<String>();
0:         private List<OpenType> itemTypesList = new ArrayList<OpenType>();
/////////////////////////////////////////////////////////////////////////
1:             String[] itemNames = itemNamesList.toArray(new String[itemNamesList.size()]);
1:             String[] itemDescriptions = itemDescriptionsList.toArray(new String[itemDescriptionsList.size()]);
1:             OpenType[] itemTypes = itemTypesList.toArray(new OpenType[itemTypesList.size()]);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Map<String, Object> rc = super.getFields(o);
/////////////////////////////////////////////////////////////////////////
1:     private OpenTypeSupport() {
1:     }
1:     
0:     public static OpenTypeFactory getFactory(Class<? extends Message> clazz) throws OpenDataException {
1:         return OPEN_TYPE_FACTORIES.get(clazz);
1:         if (f == null) {
1:         }
1:         Map<String, Object> fields = f.getFields(message);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final HashMap OPEN_TYPE_FACTORIES = new HashMap();
/////////////////////////////////////////////////////////////////////////
1:         protected abstract String getTypeName();
/////////////////////////////////////////////////////////////////////////
1:         OPEN_TYPE_FACTORIES.put(ActiveMQMessage.class, new MessageOpenTypeFactory());
1:         OPEN_TYPE_FACTORIES.put(ActiveMQBytesMessage.class, new ByteMessageOpenTypeFactory());
1:         OPEN_TYPE_FACTORIES.put(ActiveMQMapMessage.class, new MapMessageOpenTypeFactory());
1:         OPEN_TYPE_FACTORIES.put(ActiveMQObjectMessage.class, new ObjectMessageOpenTypeFactory());
1:         OPEN_TYPE_FACTORIES.put(ActiveMQStreamMessage.class, new StreamMessageOpenTypeFactory());
1:         OPEN_TYPE_FACTORIES.put(ActiveMQTextMessage.class, new TextMessageOpenTypeFactory());
0:         return (OpenTypeFactory)OPEN_TYPE_FACTORIES.get(clazz);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:         Map getFields(Object o) throws OpenDataException;
1: 
1: 
1: 
0:         ArrayList itemNamesList = new ArrayList();
0:         ArrayList itemDescriptionsList = new ArrayList();
0:         ArrayList itemTypesList = new ArrayList();
1: 
1:             if (compositeType == null) {
1: 
0:             String[] itemNames = (String[])itemNamesList.toArray(new String[itemNamesList.size()]);
0:             String[] itemDescriptions = (String[])itemDescriptionsList.toArray(new String[itemDescriptionsList.size()]);
0:             OpenType[] itemTypes = (OpenType[])itemTypesList.toArray(new OpenType[itemTypesList.size()]);
1:             return new CompositeType(getTypeName(), getDescription(), itemNames, itemDescriptions, itemTypes);
1: 
/////////////////////////////////////////////////////////////////////////
0:             HashMap rc = new HashMap();
1: 
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage m = (ActiveMQMessage)o;
1:             rc.put("JMSDestination", "" + m.getJMSDestination());
0:             rc.put("JMSReplyTo", "" + m.getJMSReplyTo());
1:             rc.put("JMSDeliveryMode", m.getJMSDeliveryMode() == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON-PERSISTENT");
0:                 rc.put("Properties", "" + m.getProperties());
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             addItem("BodyPreview", "Body preview", new ArrayType(1, SimpleType.BYTE));
1:             ActiveMQBytesMessage m = (ActiveMQBytesMessage)o;
1:             long length = 0;
/////////////////////////////////////////////////////////////////////////
1:                 byte preview[] = new byte[(int)Math.min(length, 255)];
1: 
1:                 // This is whack! Java 1.5 JMX spec does not support primitive
1:                 // arrays!
1:                 Byte data[] = new Byte[preview.length];
1:                     data[i] = new Byte(preview[i]);
1:                 }
1: 
0:                 rc.put("BodyPreview", new byte[] {});
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMapMessage m = (ActiveMQMapMessage)o;
0:             long length = 0;
0:                 rc.put("ContentMap", "" + m.getContentMap());
1: 
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQObjectMessage m = (ActiveMQObjectMessage)o;
1: 
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQStreamMessage m = (ActiveMQStreamMessage)o;
1: 
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQTextMessage m = (ActiveMQTextMessage)o;
0:                 rc.put("Text", "" + m.getText());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         return (OpenTypeFactory)openTypeFactories.get(clazz);
1: 
0:         if (f == null)
1:             throw new OpenDataException("Cannot create a CompositeData for type: " + message.getClass().getName());
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:7113c5e
/////////////////////////////////////////////////////////////////////////
1:                 
0:                 // This is whack!  Java 1.5 JMX spec does not support primitive arrays!
1:                 // In 1.6 it seems it is supported.. but until then...
0:                 Byte data[] = new Byte[ preview.length ];
1:                 for (int i = 0; i < data.length; i++) {
0: 					data[i] = new Byte(preview[i]);
1: 				}
1:                 
0:                 rc.put("BodyPreview", data);
commit:e6f5d30
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Date;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.OpenType;
1: import javax.management.openmbean.SimpleType;
1: 
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.Message;
1: 
0: public class OpenTypeSupport {
1: 
0:     interface OpenTypeFactory {
1:         CompositeType getCompositeType() throws OpenDataException;
0:         Map getFields( Object o ) throws OpenDataException;
1:     }
1:     
0:     private static final HashMap openTypeFactories = new HashMap();
1:   
0:     abstract static class AbstractOpenTypeFactory implements OpenTypeFactory {
1:         
1:         private CompositeType compositeType;
0:         ArrayList itemNamesList = new ArrayList();            
0:         ArrayList itemDescriptionsList = new ArrayList();            
0:         ArrayList itemTypesList = new ArrayList();            
1:         
0:         public CompositeType getCompositeType() throws OpenDataException {
0:             if( compositeType == null ) {
1:                 init();
1:                 compositeType = createCompositeType();
1:             }
1:             return compositeType;
1:         }
1:         
1:         protected void init() throws OpenDataException {
1:         }
1: 
1:         protected CompositeType createCompositeType() throws OpenDataException {
0:             String[] itemNames = (String[]) itemNamesList.toArray(new String[itemNamesList.size()]);
0:             String[] itemDescriptions = (String[]) itemDescriptionsList.toArray(new String[itemDescriptionsList.size()]);
0:             OpenType[] itemTypes = (OpenType[]) itemTypesList.toArray(new OpenType[itemTypesList.size()]);            
0:             return new CompositeType(getTypeName(), getDescription(), itemNames, itemDescriptions, itemTypes);        
1:         }
1:         
0:         abstract protected String getTypeName();
1: 
1:         protected void addItem(String name, String description, OpenType type) {
1:             itemNamesList.add(name);
1:             itemDescriptionsList.add(description);
1:             itemTypesList.add(type);
1:         }
1: 
1: 
1:         protected String getDescription() {
1:             return getTypeName();
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             HashMap rc = new HashMap(); 
1:             return rc;
1:         }
1:     }
1: 
1:     static class MessageOpenTypeFactory extends AbstractOpenTypeFactory {
1:         
1:         protected String getTypeName() {
1:             return ActiveMQMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
1:             addItem("JMSCorrelationID", "JMSCorrelationID", SimpleType.STRING);
1:             addItem("JMSDestination", "JMSDestination", SimpleType.STRING);
1:             addItem("JMSMessageID", "JMSMessageID", SimpleType.STRING);
1:             addItem("JMSReplyTo", "JMSReplyTo", SimpleType.STRING);
1:             addItem("JMSType", "JMSType", SimpleType.STRING);
1:             addItem("JMSDeliveryMode", "JMSDeliveryMode", SimpleType.STRING);
1:             addItem("JMSExpiration", "JMSExpiration", SimpleType.LONG);
1:             addItem("JMSPriority", "JMSPriority", SimpleType.INTEGER);
1:             addItem("JMSRedelivered", "JMSRedelivered", SimpleType.BOOLEAN);
1:             addItem("JMSTimestamp", "JMSTimestamp", SimpleType.DATE);
0:             addItem("Properties", "Properties", SimpleType.STRING);
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQMessage m = (ActiveMQMessage) o;
0:             Map rc = super.getFields(o);
1:             rc.put("JMSCorrelationID", m.getJMSCorrelationID());
0:             rc.put("JMSDestination", ""+m.getJMSDestination());
1:             rc.put("JMSMessageID", m.getJMSMessageID());
0:             rc.put("JMSReplyTo", ""+m.getJMSReplyTo());
1:             rc.put("JMSType", m.getJMSType());
0:             rc.put("JMSDeliveryMode", m.getJMSDeliveryMode()==DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON-PERSISTENT");
0:             rc.put("JMSExpiration", new Long(m.getJMSExpiration()));
0:             rc.put("JMSPriority", new Integer(m.getJMSPriority()));
0:             rc.put("JMSRedelivered", new Boolean(m.getJMSRedelivered()));
1:             rc.put("JMSTimestamp", new Date(m.getJMSTimestamp()));
1:             try {
0:                 rc.put("Properties", ""+m.getProperties());
1:             } catch (IOException e) {
0:                 rc.put("Properties", "");
1:             }
1:             return rc;
1:         }
1:     }
1: 
1:     static class ByteMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:         
1:         protected String getTypeName() {
1:             return ActiveMQBytesMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
0:             addItem("BodyLength", "Body length", SimpleType.LONG);
0:             addItem("BodyPreview", "Body preview", new ArrayType(1,SimpleType.BYTE));
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQBytesMessage m = (ActiveMQBytesMessage) o;
0:             Map rc = super.getFields(o);
0:             long length=0;
1:             try {
1:                 length = m.getBodyLength();
0:                 rc.put("BodyLength", new Long(length));
1:             } catch (JMSException e) {
0:                 rc.put("BodyLength", new Long(0));
1:             }
1:             try {
0:                 byte preview[] = new byte[ (int)Math.min(length, 255) ];
1:                 m.readBytes(preview);
0:                 rc.put("BodyPreview", preview);
1:             } catch (JMSException e) {
0:                 rc.put("BodyPreview", new byte[]{});
1:             }
1:             return rc;
1:         }
1:         
1:     }
1:     
1:     static class MapMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:         protected String getTypeName() {
1:             return ActiveMQMapMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
0:             addItem("ContentMap", "Content map", SimpleType.STRING);
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQMapMessage m = (ActiveMQMapMessage) o;
0:             Map rc = super.getFields(o);
0:             long length=0;
1:             try {
0:                 rc.put("ContentMap", ""+m.getContentMap());
1:             } catch (JMSException e) {
0:                 rc.put("ContentMap", "");
1:             }
1:             return rc;
1:         }
1:     }
1:     
1:     static class ObjectMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:         protected String getTypeName() {
1:             return ActiveMQObjectMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQObjectMessage m = (ActiveMQObjectMessage) o;
0:             Map rc = super.getFields(o);
1:             return rc;
1:         }
1:     }
1:     
1:     static class StreamMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:         protected String getTypeName() {
1:             return ActiveMQStreamMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQStreamMessage m = (ActiveMQStreamMessage) o;
0:             Map rc = super.getFields(o);
1:             return rc;
1:         }
1:     }
1:     
1:     static class TextMessageOpenTypeFactory extends MessageOpenTypeFactory {
1:         protected String getTypeName() {
1:             return ActiveMQTextMessage.class.getName();
1:         }
1: 
1:         protected void init() throws OpenDataException {
1:             super.init();
0:             addItem("Text", "Text", SimpleType.STRING);
1:         }
1: 
0:         public Map getFields(Object o) throws OpenDataException {
0:             ActiveMQTextMessage m = (ActiveMQTextMessage) o;
0:             Map rc = super.getFields(o);
1:             try {
0:                 rc.put("Text", ""+m.getText());
1:             } catch (JMSException e) {
0:                 rc.put("Text", "");
1:             }
1:             return rc;
1:         }
1:     }
1:     
1:     static {
0:         openTypeFactories.put(ActiveMQMessage.class, new MessageOpenTypeFactory());
0:         openTypeFactories.put(ActiveMQBytesMessage.class, new ByteMessageOpenTypeFactory());
0:         openTypeFactories.put(ActiveMQMapMessage.class, new MapMessageOpenTypeFactory());
0:         openTypeFactories.put(ActiveMQObjectMessage.class, new ObjectMessageOpenTypeFactory());
0:         openTypeFactories.put(ActiveMQStreamMessage.class, new StreamMessageOpenTypeFactory());
0:         openTypeFactories.put(ActiveMQTextMessage.class, new TextMessageOpenTypeFactory());
1:     }
1:     
0:     public static OpenTypeFactory getFactory(Class clazz) throws OpenDataException {
0:         return (OpenTypeFactory) openTypeFactories.get(clazz);
1:     }
1:     
0:     public static CompositeData convert(Message message) throws OpenDataException {
1:         OpenTypeFactory f = getFactory(message.getClass());
0:         if( f == null )
0:             throw new OpenDataException("Cannot create a CompositeData for type: "+message.getClass().getName());
1:         CompositeType ct = f.getCompositeType();
0:         Map fields = f.getFields(message);
1:         return new CompositeDataSupport(ct, fields);
1:     }
1: 
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:6f124c1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.BROKER_PATH, "Brokers traversed", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:             rc.put(CompositeDataConstants.BROKER_PATH, Arrays.toString(m.getBrokerPath()));
commit:e10f75c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.JMSXGROUP_ID, "Message Group ID", SimpleType.STRING);
1:             addItem(CompositeDataConstants.JMSXGROUP_SEQ, "Message Group Sequence Number", SimpleType.INTEGER);
1:             addItem(CompositeDataConstants.ORIGINAL_DESTINATION, "Original Destination Before Senting To DLQ", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:             rc.put(CompositeDataConstants.JMSXGROUP_ID, m.getGroupID());
1:             rc.put(CompositeDataConstants.JMSXGROUP_SEQ, m.getGroupSequence());
1:             rc.put(CompositeDataConstants.ORIGINAL_DESTINATION, toString(m.getOriginalDestination()));
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.BODY_LENGTH, "Body length", SimpleType.LONG);
1:             addItem(CompositeDataConstants.BODY_PREVIEW, "Body preview", new ArrayType(1, SimpleType.BYTE));
/////////////////////////////////////////////////////////////////////////
1:                 rc.put(CompositeDataConstants.BODY_LENGTH, Long.valueOf(length));
1:                 rc.put(CompositeDataConstants.BODY_LENGTH, Long.valueOf(0));
/////////////////////////////////////////////////////////////////////////
1:                 rc.put(CompositeDataConstants.BODY_PREVIEW, data);
1:                 rc.put(CompositeDataConstants.BODY_PREVIEW, new Byte[] {});
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.CONTENT_MAP, "Content map", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:                 rc.put(CompositeDataConstants.CONTENT_MAP, "" + m.getContentMap());
1:                 rc.put(CompositeDataConstants.CONTENT_MAP, "");
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.MESSAGE_TEXT, CompositeDataConstants.MESSAGE_TEXT, SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:                 rc.put(CompositeDataConstants.MESSAGE_TEXT, "" + m.getText());
1:                 rc.put(CompositeDataConstants.MESSAGE_TEXT, "");
/////////////////////////////////////////////////////////////////////////
1:             addItem(CompositeDataConstants.MESSAGE_URL, "Body Url", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
1:                 rc.put(CompositeDataConstants.MESSAGE_URL, "" + m.getURL().toString());
1:                 rc.put(CompositeDataConstants.MESSAGE_URL, "");
commit:a1d3245
/////////////////////////////////////////////////////////////////////////
0:                 rc.put(BODY_PREVIEW, new Byte[] {});
commit:9edeb21
/////////////////////////////////////////////////////////////////////////
1:             m.setReadOnlyBody(true);
commit:eb034b4
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.MESSAGE_URL;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQBlobMessage;
/////////////////////////////////////////////////////////////////////////
1:     static class ActiveMQBlobMessageOpenTypeFactory extends MessageOpenTypeFactory {
1: 
1:         @Override
1:         protected String getTypeName() {
1:             return ActiveMQBlobMessage.class.getName();
1:         }
1: 
1:         @Override
1:         protected void init() throws OpenDataException {
1:             super.init();
0:             addItem(MESSAGE_URL, "Body Url", SimpleType.STRING);
1:         }
1: 
1:         @Override
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             ActiveMQBlobMessage m = (ActiveMQBlobMessage)o;
1:             Map<String, Object> rc = super.getFields(o);
1:             try {
0:                 rc.put(MESSAGE_URL, "" + m.getURL().toString());
1:             } catch (JMSException e) {
0:                 rc.put(MESSAGE_URL, "");
1:             }
1:             return rc;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         OPEN_TYPE_FACTORIES.put(ActiveMQBlobMessage.class, new ActiveMQBlobMessageOpenTypeFactory());
commit:383d12e
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
/////////////////////////////////////////////////////////////////////////
1:     static class SlowConsumerEntryOpenTypeFactory extends AbstractOpenTypeFactory {
1:        @Override
1:         protected String getTypeName() {
1:             return SlowConsumerEntry.class.getName();
1:         }
1:         @Override
1:         protected void init() throws OpenDataException {
1:             super.init();
1:             addItem("subscription", "the subscription view", SimpleType.OBJECTNAME);
1:             addItem("slowCount", "number of times deemed slow", SimpleType.INTEGER);
1:             addItem("markCount", "number of periods remaining slow", SimpleType.INTEGER);
1:         }
0: 
1:         @Override
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             SlowConsumerEntry entry = (SlowConsumerEntry) o;
1:             Map<String, Object> rc = super.getFields(o);
1:             rc.put("subscription", entry.getSubscription());
1:             rc.put("slowCount", Integer.valueOf(entry.getSlowCount()));
1:             rc.put("markCount", Integer.valueOf(entry.getMarkCount()));
1:             return rc;
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         OPEN_TYPE_FACTORIES.put(SlowConsumerEntry.class, new SlowConsumerEntryOpenTypeFactory());
/////////////////////////////////////////////////////////////////////////
1:     public static CompositeData convert(Object message) throws OpenDataException {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2bd0e57
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
1: import org.apache.activemq.broker.scheduler.Job;
0: import org.apache.activemq.command.ActiveMQBlobMessage;
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.ActiveMQMapMessage;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.apache.activemq.command.ActiveMQStreamMessage;
0: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.fusesource.hawtbuf.UTF8Buffer;
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Date;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:                 if (value instanceof UTF8Buffer && valueType.equals(String.class)) {
1:                     String actual = value.toString();
1:                     CompositeDataSupport compositeData = createTabularRowValue(type, entry.getKey(), actual);
1:                     answer.put(compositeData);
1:                 }
commit:482be54
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:                 m.reset();
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:973909a
/////////////////////////////////////////////////////////////////////////
1:     static class HealthStatusOpenTypeFactory extends AbstractOpenTypeFactory {
1:             return HealthStatus.class.getName();
1:             addItem("healthId", "health check id", SimpleType.STRING);
1:             addItem("level", "severity", SimpleType.STRING);
1:             addItem("message", "severity", SimpleType.STRING);
1:             HealthStatus event = (HealthStatus) o;
1:             rc.put("healthId", event.getHealthId());
1:             rc.put("level", event.getLevel());
1:             rc.put("message", event.getMessage());
/////////////////////////////////////////////////////////////////////////
1:         OPEN_TYPE_FACTORIES.put(HealthStatus.class, new HealthStatusOpenTypeFactory());
commit:dd64c8b
/////////////////////////////////////////////////////////////////////////
0:             addItem(ORIGINAL_DESTINATION, "Original Destination Before Senting To DLQ", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
0:             rc.put(ORIGINAL_DESTINATION, toString(m.getOriginalDestination()));
commit:a634647
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:             rc.put("JMSReplyTo",toString(m.getJMSReplyTo()));
/////////////////////////////////////////////////////////////////////////
1:         protected String toString(Object value) {
1:             if (value == null) {
1:                 return null;
1:             }
1:             return value.toString();
1:         }
0: 
commit:3dd6575
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.TabularType;
1: import javax.management.openmbean.TabularDataSupport;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.*;
/////////////////////////////////////////////////////////////////////////
1:         protected TabularType stringPropertyTabularType;
1:         protected TabularType booleanPropertyTabularType;
1:         protected TabularType bytePropertyTabularType;
1:         protected TabularType shortPropertyTabularType;
1:         protected TabularType intPropertyTabularType;
1:         protected TabularType longPropertyTabularType;
1:         protected TabularType floatPropertyTabularType;
1:         protected TabularType doublePropertyTabularType;
/////////////////////////////////////////////////////////////////////////
0:             addItem(JMSXGROUP_ID, "Message Group ID", SimpleType.STRING);
0:             addItem(JMSXGROUP_SEQ, "Message Group Sequence Number", SimpleType.INTEGER);
1:             addItem(CompositeDataConstants.PROPERTIES, "User Properties Text", SimpleType.STRING);
0: 
1:             // now lets expose the type safe properties
1:             stringPropertyTabularType = createTabularType(String.class, SimpleType.STRING);
1:             booleanPropertyTabularType = createTabularType(Boolean.class, SimpleType.BOOLEAN);
1:             bytePropertyTabularType = createTabularType(Byte.class, SimpleType.BYTE);
1:             shortPropertyTabularType = createTabularType(Short.class, SimpleType.SHORT);
1:             intPropertyTabularType = createTabularType(Integer.class, SimpleType.INTEGER);
1:             longPropertyTabularType = createTabularType(Long.class, SimpleType.LONG);
1:             floatPropertyTabularType = createTabularType(Float.class, SimpleType.FLOAT);
1:             doublePropertyTabularType = createTabularType(Double.class, SimpleType.DOUBLE);
0: 
1:             addItem(CompositeDataConstants.STRING_PROPERTIES, "User String Properties", stringPropertyTabularType);
1:             addItem(CompositeDataConstants.BOOLEAN_PROPERTIES, "User Boolean Properties", booleanPropertyTabularType);
1:             addItem(CompositeDataConstants.BYTE_PROPERTIES, "User Byte Properties", bytePropertyTabularType);
1:             addItem(CompositeDataConstants.SHORT_PROPERTIES, "User Short Properties", shortPropertyTabularType);
1:             addItem(CompositeDataConstants.INT_PROPERTIES, "User Integer Properties", intPropertyTabularType);
1:             addItem(CompositeDataConstants.LONG_PROPERTIES, "User Long Properties", longPropertyTabularType);
1:             addItem(CompositeDataConstants.FLOAT_PROPERTIES, "User Float Properties", floatPropertyTabularType);
1:             addItem(CompositeDataConstants.DOUBLE_PROPERTIES, "User Double Properties", doublePropertyTabularType);
/////////////////////////////////////////////////////////////////////////
0:             rc.put(JMSXGROUP_ID, m.getGroupID());
0:             rc.put(JMSXGROUP_SEQ, m.getGroupSequence());
1:                 rc.put(CompositeDataConstants.PROPERTIES, "" + m.getProperties());
1:                 rc.put(CompositeDataConstants.PROPERTIES, "");
1:             }
0: 
1:             try {
1:                 rc.put(CompositeDataConstants.STRING_PROPERTIES, createTabularData(m, stringPropertyTabularType, String.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.STRING_PROPERTIES, new TabularDataSupport(stringPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.BOOLEAN_PROPERTIES, createTabularData(m, booleanPropertyTabularType, Boolean.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.BOOLEAN_PROPERTIES, new TabularDataSupport(booleanPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.BYTE_PROPERTIES, createTabularData(m, bytePropertyTabularType, Byte.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.BYTE_PROPERTIES, new TabularDataSupport(bytePropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.SHORT_PROPERTIES, createTabularData(m, shortPropertyTabularType, Short.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.SHORT_PROPERTIES, new TabularDataSupport(shortPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.INT_PROPERTIES, createTabularData(m, intPropertyTabularType, Integer.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.INT_PROPERTIES, new TabularDataSupport(intPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.LONG_PROPERTIES, createTabularData(m, longPropertyTabularType, Long.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.LONG_PROPERTIES, new TabularDataSupport(longPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.FLOAT_PROPERTIES, createTabularData(m, floatPropertyTabularType, Float.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.FLOAT_PROPERTIES, new TabularDataSupport(floatPropertyTabularType));
1:             }
1:             try {
1:                 rc.put(CompositeDataConstants.DOUBLE_PROPERTIES, createTabularData(m, doublePropertyTabularType, Double.class));
1:             } catch (IOException e) {
1:                 rc.put(CompositeDataConstants.DOUBLE_PROPERTIES, new TabularDataSupport(doublePropertyTabularType));
0: 
0: 
1:         protected <T> TabularType createTabularType(Class<T> type, OpenType openType) throws OpenDataException {
1:             String typeName = "java.util.Map<java.lang.String, " + type.getName() + ">";
1:             String[] keyValue = new String[]{"key", "value"};
1:             OpenType[] openTypes = new OpenType[]{SimpleType.STRING, openType};
1:             CompositeType rowType = new CompositeType(typeName, typeName, keyValue, keyValue, openTypes);
1:             return new TabularType(typeName, typeName, rowType, new String[]{"key"});
1:         }
0: 
1:         protected TabularDataSupport createTabularData(ActiveMQMessage m, TabularType type, Class valueType) throws IOException, OpenDataException {
1:             TabularDataSupport answer = new TabularDataSupport(type);
1:             Set<Map.Entry<String,Object>> entries = m.getProperties().entrySet();
1:             for (Map.Entry<String, Object> entry : entries) {
1:                 Object value = entry.getValue();
1:                 if (valueType.isInstance(value)) {
1:                     CompositeDataSupport compositeData = createTabularRowValue(type, entry.getKey(), value);
1:                     answer.put(compositeData);
1:                 }
1:             }
1:             return answer;
1:         }
0: 
1:         protected CompositeDataSupport createTabularRowValue(TabularType type, String key, Object value) throws OpenDataException {
1:             Map<String,Object> fields = new HashMap<String, Object>();
1:             fields.put("key", key);
1:             fields.put("value", value);
1:             return new CompositeDataSupport(type.getRowType(), fields);
1:         }
0: 
0:             addItem(BODY_LENGTH, "Body length", SimpleType.LONG);
0:             addItem(BODY_PREVIEW, "Body preview", new ArrayType(1, SimpleType.BYTE));
/////////////////////////////////////////////////////////////////////////
0:                 rc.put(BODY_LENGTH, Long.valueOf(length));
0:                 rc.put(BODY_LENGTH, Long.valueOf(0));
/////////////////////////////////////////////////////////////////////////
0:                 rc.put(BODY_PREVIEW, data);
0:                 rc.put(BODY_PREVIEW, new byte[] {});
/////////////////////////////////////////////////////////////////////////
0: 
0:             addItem(CONTENT_MAP, "Content map", SimpleType.STRING);
0:                 rc.put(CONTENT_MAP, "" + m.getContentMap());
0:                 rc.put(CONTENT_MAP, "");
/////////////////////////////////////////////////////////////////////////
0: 
0:             addItem(MESSAGE_TEXT, MESSAGE_TEXT, SimpleType.STRING);
0:                 rc.put(MESSAGE_TEXT, "" + m.getText());
0:                 rc.put(MESSAGE_TEXT, "");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ed96e2e
/////////////////////////////////////////////////////////////////////////
0:     static class StatusEventOpenTypeFactory extends AbstractOpenTypeFactory {
1:         @Override
1:         protected String getTypeName() {
0:             return StatusEvent.class.getName();
1:         }
0: 
1:         @Override
1:         protected void init() throws OpenDataException {
1:             super.init();
0:             addItem("id", "event id", SimpleType.STRING);
1:             addItem("resource", "event resource", SimpleType.STRING);
1:         }
0: 
1:         @Override
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
0:             StatusEvent event = (StatusEvent) o;
1:             Map<String, Object> rc = super.getFields(o);
0:             rc.put("id", event.getId());
1:             rc.put("resource", event.getResource());
1:             return rc;
1:         }
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         OPEN_TYPE_FACTORIES.put(StatusEvent.class, new StatusEventOpenTypeFactory());
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
1:             addItem("delay", "initial delay", SimpleType.LONG);
/////////////////////////////////////////////////////////////////////////
1:             rc.put("delay", job.getDelay());
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.BODY_LENGTH;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.BODY_PREVIEW;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.CONTENT_MAP;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.JMSXGROUP_ID;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.JMSXGROUP_SEQ;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.MESSAGE_TEXT;
0: import static org.apache.activemq.broker.jmx.CompositeDataConstants.ORIGINAL_DESTINATION;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.management.openmbean.TabularType;
0: import org.apache.activemq.broker.scheduler.Job;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<Class, AbstractOpenTypeFactory> OPEN_TYPE_FACTORIES = new HashMap<Class, AbstractOpenTypeFactory>();
1:         private final List<String> itemNamesList = new ArrayList<String>();
1:         private final List<String> itemDescriptionsList = new ArrayList<String>();
1:         private final List<OpenType> itemTypesList = new ArrayList<OpenType>();
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
0:     
0: 
1:     static class JobOpenTypeFactory extends AbstractOpenTypeFactory {
0: 
1:         @Override
1:         protected String getTypeName() {
1:             return Job.class.getName();
1:         }
0: 
1:         @Override
1:         protected void init() throws OpenDataException {
1:             super.init();
1:             addItem("jobId", "jobId", SimpleType.STRING);
1:             addItem("cronEntry", "Cron entry", SimpleType.STRING);
1:             addItem("start", "start time", SimpleType.STRING);
1:             addItem("next", "next time", SimpleType.STRING);
1:             addItem("period", "period between jobs", SimpleType.LONG);
1:             addItem("repeat", "number of times to repeat", SimpleType.INTEGER);
1:         }
0: 
1:         @Override
1:         public Map<String, Object> getFields(Object o) throws OpenDataException {
1:             Job job = (Job) o;
1:             Map<String, Object> rc = super.getFields(o);
1:             rc.put("jobId", job.getJobId());
1:             rc.put("cronEntry", "" + job.getCronEntry());
1:             rc.put("start", job.getStartTime());
1:             rc.put("next", job.getNextExecutionTime());
1:             rc.put("period", job.getPeriod());
1:             rc.put("repeat", job.getRepeat());
1:             return rc;
1:         }
1:     }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         OPEN_TYPE_FACTORIES.put(Job.class, new JobOpenTypeFactory());
1:     public static OpenTypeFactory getFactory(Class<?> clazz) throws OpenDataException {
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:             rc.put("JMSExpiration", Long.valueOf(m.getJMSExpiration()));
1:             rc.put("JMSPriority", Integer.valueOf(m.getJMSPriority()));
1:             rc.put("JMSRedelivered", Boolean.valueOf(m.getJMSRedelivered()));
/////////////////////////////////////////////////////////////////////////
0:                 rc.put("BodyLength", Long.valueOf(length));
0:                 rc.put("BodyLength", Long.valueOf(0));
============================================================================