2:1ee0017: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
6:dd1d660:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dd1d660:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:1ee0017:  */
1:dd1d660: package org.apache.activemq;
1:1ee0017: 
1:dd1d660: import org.apache.activemq.command.MessageId;
1:9dd11cb: 
1:1ee0017: /**
1:dd1d660:  * Provides basic audit functions for Messages
1:b2f7ba7:  * 
1:dd1d660:  * 
1:9dd11cb:  */
1:a6a6a70: public class ActiveMQMessageAudit extends ActiveMQMessageAuditNoSync {
1:1ee0017: 
1:a6a6a70:     private static final long serialVersionUID = 1L;
6:1ee0017: 
1:1ee0017:     /**
1:2a58f4c:      * Default Constructor windowSize = 2048, maximumNumberOfProducersToTrack =
1:2a58f4c:      * 64
1:1ee0017:      */
1:230a86c:     public ActiveMQMessageAudit() {
1:a6a6a70:         super();
1:9dd11cb:     }
1:9dd11cb: 
1:9dd11cb:     /**
1:dd1d660:      * Construct a MessageAudit
1:b2f7ba7:      * 
1:1ee0017:      * @param auditDepth range of ids to track
1:230a86c:      * @param maximumNumberOfProducersToTrack number of producers expected in
1:230a86c:      *                the system
1:1ee0017:      */
1:1ee0017:     public ActiveMQMessageAudit(int auditDepth, final int maximumNumberOfProducersToTrack) {
1:a6a6a70:         super(auditDepth, maximumNumberOfProducersToTrack);
1:1ee0017:     }
1:9dd11cb:     
1:a6a6a70:     @Override
1:a6a6a70:     public boolean isDuplicate(String id) {
1:a6a6a70:         synchronized (this) {
1:a6a6a70:             return super.isDuplicate(id);
1:1ee0017:         }
1:1ee0017:     }
1:1ee0017: 
1:a6a6a70:     @Override
1:a6a6a70:     public boolean isDuplicate(final MessageId id) {
1:a6a6a70:         synchronized (this) {
1:a6a6a70:             return super.isDuplicate(id);
1:1ee0017:         }
2:1ee0017:     }
1:1ee0017: 
1:a6a6a70:     @Override
1:a6a6a70:     public void rollback(final  MessageId id) {
1:a6a6a70:         synchronized (this) {
1:a6a6a70:             super.rollback(id);
1:1ee0017:         }
1:1ee0017:     }
1:1ee0017:     
1:a6a6a70:     @Override
1:a6a6a70:     public boolean isInOrder(final String id) {
1:a6a6a70:         synchronized (this) {
1:a6a6a70:             return super.isInOrder(id);
1:1ee0017:         }
1:1ee0017:     }
1:14e7689:     
1:a6a6a70:     @Override
1:a6a6a70:     public boolean isInOrder(final MessageId id) {
1:a6a6a70:         synchronized (this) {
1:7eb8f0f:             return super.isInOrder(id);
1:1ee0017:         }
1:1ee0017:     }
1:1ee0017: 
1:14e7689:     public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) {
1:14e7689:         synchronized (this) {
1:14e7689:             super.setMaximumNumberOfProducersToTrack(maximumNumberOfProducersToTrack);
1:14e7689:         }
1:14e7689:     }
1:1ee0017: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Robert Davies
-------------------------------------------------------------------------------
commit:14e7689
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) {
1:         synchronized (this) {
1:             super.setMaximumNumberOfProducersToTrack(maximumNumberOfProducersToTrack);
1:         }
1:     }
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
0:     private static final int DEFAULT_WINDOW_SIZE = 2048;
0:     private static final int MAXIMUM_PRODUCER_COUNT = 64;
/////////////////////////////////////////////////////////////////////////
0:      * @param message 
0:      * @return
1:      */
0:     public synchronized boolean isInOrder(final MessageReference message) {
0:         return isInOrder(message.getMessageId());
1:     }
1:     
1:     /**
0:      * Check the MessageId is in order
0:         boolean answer = false;
1: 
0:                 if (bab == null) {
0:                     bab = new BitArrayBin(auditDepth);
0:                     map.put(pid, bab);
0:                 answer = bab.isInOrder(id.getProducerSequenceId());
1: 
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private int auditDepth;
0:     private int maximumNumberOfProducersToTrack;
0:     private LRUCache<Object, BitArrayBin> map;
/////////////////////////////////////////////////////////////////////////
1:      * @param auditDepth range of ids to track
1:     public ActiveMQMessageAudit(int auditDepth, final int maximumNumberOfProducersToTrack) {
0:         this.auditDepth = auditDepth;
0:         this.maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack;
0:         this.map = new LRUCache<Object, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
1:     }
1:     
1:     /**
0:      * @return the auditDepth
1:      */
0:     public int getAuditDepth() {
0:         return auditDepth;
1:     }
1: 
1:     /**
0:      * @param auditDepth the auditDepth to set
1:      */
0:     public void setAuditDepth(int auditDepth) {
0:         this.auditDepth = auditDepth;
1:     }
1: 
1:     /**
0:      * @return the maximumNumberOfProducersToTrack
1:      */
0:     public int getMaximumNumberOfProducersToTrack() {
0:         return maximumNumberOfProducersToTrack;
1:     }
1: 
1:     /**
0:      * @param maximumNumberOfProducersToTrack the maximumNumberOfProducersToTrack to set
1:      */
0:     public void setMaximumNumberOfProducersToTrack(
0:             int maximumNumberOfProducersToTrack) {
0:         this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
0:         this.map.setMaxCacheSize(maximumNumberOfProducersToTrack);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDuplicate(Message message) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:                 bab = new BitArrayBin(auditDepth);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDuplicate(final MessageReference message) {
0:         return isDuplicate(id);
/////////////////////////////////////////////////////////////////////////
0:     public synchronized boolean isDuplicate(final MessageId id) {
/////////////////////////////////////////////////////////////////////////
0:                     bab = new BitArrayBin(auditDepth);
/////////////////////////////////////////////////////////////////////////
0:     public void rollback(final MessageReference message) {
0:         rollback(id);
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void rollback(final  MessageId id) {
/////////////////////////////////////////////////////////////////////////
1:     
0:     /**
0:      * Check the message is in order
0:      * @param msg
0:      * @return
0:      * @throws JMSException
0:      */
0:     public boolean isInOrder(Message msg) throws JMSException {
0:         return isInOrder(msg.getJMSMessageID());
1:     }
1:     
0:     /**
0:      * Check the message id is in order
0:      * @param id
0:      * @return
0:      */
0:     public synchronized boolean isInOrder(final String id) {
0:         boolean answer = true;
1:         
0:         if (id != null) {
0:             String seed = IdGenerator.getSeedFromId(id);
0:             if (seed != null) {
0:                 BitArrayBin bab = map.get(seed);
0:                 if (bab != null) {
0:                     long index = IdGenerator.getSequenceFromId(id);
0:                     answer = bab.isInOrder(index);
1:                 }
1:                
1:             }
1:         }
0:         return answer;
1:     }
1:     
0:     /**
0:      * Check the MessageId is in order
0:      * @param id
0:      * @return
0:      */
0:     public synchronized boolean isInOrder(final MessageId id) {
0:         boolean answer = true;
1:         
0:         if (id != null) {
0:             ProducerId pid = id.getProducerId();
0:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
0:                 if (bab != null) {
0:                     answer = bab.isInOrder(id.getProducerSequenceId());
1:                 }
1:                
1:             }
1:         }
0:         return answer;
1:     }
1: 
commit:b2f7ba7
/////////////////////////////////////////////////////////////////////////
0:      * Checks if this message has been seen before
0:     public boolean isDuplicateMessageReference(final MessageReference message) {
0:         return isDuplicateMessageId(id);
0:     }
0:     
0:     /**
0:      * Checks if this messageId has been seen before
1:      * 
0:      * @param id
0:      * @return true if the message is a duplicate
0:      */
0:     public synchronized boolean isDuplicateMessageId(final MessageId id) {
0:         boolean answer = false;
0:         
/////////////////////////////////////////////////////////////////////////
0:      * mark this message as being received
0:     public void rollbackMessageReference(final MessageReference message) {
0:         rollbackMessageId(id);
0:     }
0:     
0:     /**
0:      * mark this message as being received
1:      * 
0:      * @param id
0:      */
0:     public synchronized void rollbackMessageId(final  MessageId id) {
commit:dd1d660
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0:  */
0: 
1: package org.apache.activemq;
0: 
0: import java.util.LinkedHashMap;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.util.BitArrayBin;
0: import org.apache.activemq.util.IdGenerator;
0: import org.apache.activemq.util.LRUCache;
0: 
0: /**
1:  * Provides basic audit functions for Messages
1:  * 
0:  * @version $Revision: 1.1.1.1 $
0:  */
0: public class ActiveMQMessageAudit{
0: 
0:     private static final int DEFAULT_WINDOW_SIZE=1024;
0:     private static final int MAXIMUM_PRODUCER_COUNT=128;
0:     private int windowSize;
0:     private LinkedHashMap<Object,BitArrayBin> map;
0: 
0:     /**
0:      * Default Constructor windowSize = 1024, maximumNumberOfProducersToTrack = 128
0:      */
0:     public ActiveMQMessageAudit(){
0:         this(DEFAULT_WINDOW_SIZE,MAXIMUM_PRODUCER_COUNT);
0:     }
0: 
0:     /**
1:      * Construct a MessageAudit
1:      * 
0:      * @param windowSize range of ids to track
0:      * @param maximumNumberOfProducersToTrack number of producers expected in the system
0:      */
0:     public ActiveMQMessageAudit(int windowSize,final int maximumNumberOfProducersToTrack){
0:         this.windowSize=windowSize;
0:         map=new LRUCache<Object,BitArrayBin>(maximumNumberOfProducersToTrack,maximumNumberOfProducersToTrack,0.75f,true);
0:     }
0: 
0:     /**
0:      * Checks if this message has beeb seen before
1:      * 
0:      * @param message
0:      * @return true if the message is a duplicate
0:      * @throws JMSException
0:      */
0:     public boolean isDuplicateMessage(Message message) throws JMSException{
0:         return isDuplicate(message.getJMSMessageID());
0:     }
0: 
0:     /**
0:      * checks whether this messageId has been seen before and adds this messageId to the list
1:      * 
0:      * @param id
0:      * @return true if the message is a duplicate
0:      */
0:     public synchronized boolean isDuplicate(String id){
0:         boolean answer=false;
0:         String seed=IdGenerator.getSeedFromId(id);
0:         if(seed!=null){
0:             BitArrayBin bab=map.get(seed);
0:             if(bab==null){
0:                 bab=new BitArrayBin(windowSize);
0:                 map.put(seed,bab);
0:             }
0:             long index=IdGenerator.getSequenceFromId(id);
0:             if(index>=0){
0:                 answer=bab.setBit(index,true);
0:             }
0:         }
0:         return answer;
0:     }
0: 
0:     /**
0:      * Checks if this message has beeb seen before
1:      * 
0:      * @param message
0:      * @return true if the message is a duplicate
0:      */
0:     public synchronized boolean isDuplicateMessageReference(final MessageReference message){
0:         boolean answer=false;
0:         MessageId id=message.getMessageId();
0:         if(id!=null){
0:             ProducerId pid=id.getProducerId();
0:             if(pid!=null){
0:                 BitArrayBin bab=map.get(pid);
0:                 if(bab==null){
0:                     bab=new BitArrayBin(windowSize);
0:                     map.put(pid,bab);
0:                 }
0:                 answer=bab.setBit(id.getProducerSequenceId(),true);
0:             }
0:         }
0:         return answer;
0:     }
0:     
0:     /**
0:      * uun mark this messager as being received
0:      * @param message
0:      */
0:     public synchronized void rollbackMessageReference(final MessageReference message){
0:         MessageId id=message.getMessageId();
0:         if(id!=null){
0:             ProducerId pid=id.getProducerId();
0:             if(pid!=null){
0:                 BitArrayBin bab=map.get(pid);
0:                 if(bab!=null){
0:                     bab.setBit(id.getProducerSequenceId(),false);
0:                 }
0:             }
0:         }
0:     }
0: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:     private Map<Object, BitArrayBin> map;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQMessageAudit {
0:     private static final int DEFAULT_WINDOW_SIZE = 1024;
0:     private static final int MAXIMUM_PRODUCER_COUNT = 128;
0:     private LinkedHashMap<Object, BitArrayBin> map;
0:      * Default Constructor windowSize = 1024, maximumNumberOfProducersToTrack =
0:      * 128
1:     public ActiveMQMessageAudit() {
0:         this(DEFAULT_WINDOW_SIZE, MAXIMUM_PRODUCER_COUNT);
1:      * @param maximumNumberOfProducersToTrack number of producers expected in
1:      *                the system
0:     public ActiveMQMessageAudit(int windowSize, final int maximumNumberOfProducersToTrack) {
0:         this.windowSize = windowSize;
0:         map = new LRUCache<Object, BitArrayBin>(maximumNumberOfProducersToTrack, maximumNumberOfProducersToTrack, 0.75f, true);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDuplicateMessage(Message message) throws JMSException {
0:      * checks whether this messageId has been seen before and adds this
0:      * messageId to the list
0:     public synchronized boolean isDuplicate(String id) {
0:         boolean answer = false;
0:         String seed = IdGenerator.getSeedFromId(id);
0:         if (seed != null) {
0:             BitArrayBin bab = map.get(seed);
0:             if (bab == null) {
0:                 bab = new BitArrayBin(windowSize);
0:                 map.put(seed, bab);
0:             long index = IdGenerator.getSequenceFromId(id);
0:             if (index >= 0) {
0:                 answer = bab.setBit(index, true);
/////////////////////////////////////////////////////////////////////////
0:     public synchronized boolean isDuplicateMessageReference(final MessageReference message) {
0:         boolean answer = false;
0:         MessageId id = message.getMessageId();
0:         if (id != null) {
0:             ProducerId pid = id.getProducerId();
0:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
0:                 if (bab == null) {
0:                     bab = new BitArrayBin(windowSize);
0:                     map.put(pid, bab);
0:                 answer = bab.setBit(id.getProducerSequenceId(), true);
0: 
0:      * 
0:     public synchronized void rollbackMessageReference(final MessageReference message) {
0:         MessageId id = message.getMessageId();
0:         if (id != null) {
0:             ProducerId pid = id.getProducerId();
0:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
0:                 if (bab != null) {
0:                     bab.setBit(id.getProducerSequenceId(), false);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7eb8f0f
/////////////////////////////////////////////////////////////////////////
1:             return super.isInOrder(id);
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQMessageAudit extends ActiveMQMessageAuditNoSync {
1:     private static final long serialVersionUID = 1L;
1:         super();
/////////////////////////////////////////////////////////////////////////
1:         super(auditDepth, maximumNumberOfProducersToTrack);
1:     @Override
1:     public boolean isDuplicate(String id) {
1:         synchronized (this) {
1:             return super.isDuplicate(id);
1:     @Override
1:     public boolean isDuplicate(final MessageId id) {
1:         synchronized (this) {
1:             return super.isDuplicate(id);
1:     @Override
1:     public void rollback(final  MessageId id) {
1:         synchronized (this) {
1:             super.rollback(id);
1:     @Override
1:     public boolean isInOrder(final String id) {
1:         synchronized (this) {
1:             return super.isInOrder(id);
1:     @Override
1:     public boolean isInOrder(final MessageId id) {
1:         synchronized (this) {
0:             return isInOrder(id);
commit:c8e518b
/////////////////////////////////////////////////////////////////////////
0:      * Checks if this message has been seen before
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2a58f4c
/////////////////////////////////////////////////////////////////////////
0:     public static final int DEFAULT_WINDOW_SIZE = 2048;
0:     public static final int MAXIMUM_PRODUCER_COUNT = 64;
1:      * Default Constructor windowSize = 2048, maximumNumberOfProducersToTrack =
1:      * 64
============================================================================