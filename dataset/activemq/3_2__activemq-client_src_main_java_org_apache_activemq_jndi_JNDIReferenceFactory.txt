1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:a107823:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.jndi;
2:a107823: 
1:74a7a8b: import java.util.Enumeration;
1:a107823: import java.util.Hashtable;
1:a107823: import java.util.Properties;
1:74a7a8b: 
1:74a7a8b: import javax.naming.Context;
1:74a7a8b: import javax.naming.Name;
1:74a7a8b: import javax.naming.NamingException;
1:74a7a8b: import javax.naming.Reference;
1:74a7a8b: import javax.naming.StringRefAddr;
1:74a7a8b: import javax.naming.spi.ObjectFactory;
1:74a7a8b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a107823: 
1:a107823: /**
1:a107823:  * Converts objects implementing JNDIStorable into a property fields so they can
1:a107823:  * be stored and regenerated from JNDI
1:a107823:  */
1:a107823: public class JNDIReferenceFactory implements ObjectFactory {
1:a107823: 
1:8bf987b:     static Logger log = LoggerFactory.getLogger(JNDIReferenceFactory.class);
1:a107823: 
1:a107823:     /**
1:a107823:      * This will be called by a JNDIprovider when a Reference is retrieved from
1:a107823:      * a JNDI store - and generates the orignal instance
1:74a7a8b:      * 
1:74a7a8b:      * @param object the Reference object
1:74a7a8b:      * @param name the JNDI name
1:74a7a8b:      * @param nameCtx the context
1:a107823:      * @param environment the environment settings used by JNDI
1:a107823:      * @return the instance built from the Reference object
1:74a7a8b:      * @throws Exception if building the instance from Reference fails (usually
1:74a7a8b:      *                 class not found)
1:a107823:      */
1:a107823:     public Object getObjectInstance(Object object, Name name, Context nameCtx, Hashtable environment) throws Exception {
1:a107823:         Object result = null;
1:a107823:         if (object instanceof Reference) {
1:74a7a8b:             Reference reference = (Reference)object;
1:a107823: 
1:a107823:             if (log.isTraceEnabled()) {
1:a107823:                 log.trace("Getting instance of " + reference.getClassName());
4:a107823:             }
1:a107823: 
1:a107823:             Class theClass = loadClass(this, reference.getClassName());
1:a107823:             if (JNDIStorableInterface.class.isAssignableFrom(theClass)) {
1:a107823: 
1:74a7a8b:                 JNDIStorableInterface store = (JNDIStorableInterface)theClass.newInstance();
1:a107823:                 Properties properties = new Properties();
1:a107823:                 for (Enumeration iter = reference.getAll(); iter.hasMoreElements();) {
1:a107823: 
1:74a7a8b:                     StringRefAddr addr = (StringRefAddr)iter.nextElement();
1:a107823:                     properties.put(addr.getType(), (addr.getContent() == null) ? "" : addr.getContent());
1:a107823: 
1:a107823:                 }
1:a107823:                 store.setProperties(properties);
1:a107823:                 result = store;
1:a107823:             }
1:74a7a8b:         } else {
1:a107823:             log.error("Object " + object + " is not a reference - cannot load");
1:a107823:             throw new RuntimeException("Object " + object + " is not a reference");
1:a107823:         }
1:a107823:         return result;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Create a Reference instance from a JNDIStorable object
1:74a7a8b:      * 
1:a107823:      * @param instanceClassName
1:a107823:      * @param po
1:74a7a8b:      * @return
1:74a7a8b:      * @throws NamingException
1:a107823:      */
1:a107823: 
1:a107823:     public static Reference createReference(String instanceClassName, JNDIStorableInterface po) throws NamingException {
1:a107823:         if (log.isTraceEnabled()) {
1:a107823:             log.trace("Creating reference: " + instanceClassName + "," + po);
1:a107823:         }
1:a107823:         Reference result = new Reference(instanceClassName, JNDIReferenceFactory.class.getName(), null);
1:a107823:         try {
1:a107823:             Properties props = po.getProperties();
1:a107823:             for (Enumeration iter = props.propertyNames(); iter.hasMoreElements();) {
1:74a7a8b:                 String key = (String)iter.nextElement();
1:a107823:                 String value = props.getProperty(key);
1:a107823:                 javax.naming.StringRefAddr addr = new javax.naming.StringRefAddr(key, value);
1:a107823:                 result.add(addr);
1:a107823:             }
1:74a7a8b:         } catch (Exception e) {
1:a107823:             log.error(e.getMessage(), e);
1:a107823:             throw new NamingException(e.getMessage());
1:a107823:         }
1:a107823:         return result;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the class loader for a named class
1:74a7a8b:      * 
1:a107823:      * @param thisObj
1:a107823:      * @param className
1:74a7a8b:      * @return
1:74a7a8b:      * @throws ClassNotFoundException
1:a107823:      */
1:a107823: 
1:a107823:     public static Class loadClass(Object thisObj, String className) throws ClassNotFoundException {
1:a107823:         // tryu local ClassLoader first.
1:a107823:         ClassLoader loader = thisObj.getClass().getClassLoader();
1:a107823:         Class theClass;
1:a107823:         if (loader != null) {
1:a107823:             theClass = loader.loadClass(className);
1:74a7a8b:         } else {
1:a107823:             // Will be null in jdk1.1.8
1:a107823:             // use default classLoader
1:a107823:             theClass = Class.forName(className);
1:a107823:         }
1:a107823:         return theClass;
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
1: import javax.naming.Reference;
1: import javax.naming.StringRefAddr;
1: import javax.naming.spi.ObjectFactory;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @param object the Reference object
1:      * @param name the JNDI name
1:      * @param nameCtx the context
1:      * @throws Exception if building the instance from Reference fails (usually
1:      *                 class not found)
1:             Reference reference = (Reference)object;
/////////////////////////////////////////////////////////////////////////
1:                 JNDIStorableInterface store = (JNDIStorableInterface)theClass.newInstance();
1:                     StringRefAddr addr = (StringRefAddr)iter.nextElement();
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @return
1:      * @throws NamingException
/////////////////////////////////////////////////////////////////////////
1:                 String key = (String)iter.nextElement();
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @return
1:      * @throws ClassNotFoundException
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.naming.spi.ObjectFactory;
0: import javax.naming.Name;
0: import javax.naming.Context;
0: import javax.naming.Reference;
0: import javax.naming.StringRefAddr;
0: import javax.naming.NamingException;
1: import java.util.Hashtable;
1: import java.util.Properties;
0: import java.util.Enumeration;
1: 
1: /**
1:  * Converts objects implementing JNDIStorable into a property fields so they can
1:  * be stored and regenerated from JNDI
1:  */
1: public class JNDIReferenceFactory implements ObjectFactory {
1: 
0:     static Log log = LogFactory.getLog(JNDIReferenceFactory.class);
1: 
1:     /**
1:      * This will be called by a JNDIprovider when a Reference is retrieved from
1:      * a JNDI store - and generates the orignal instance
1:      *
0:      * @param object      the Reference object
0:      * @param name        the JNDI name
0:      * @param nameCtx     the context
1:      * @param environment the environment settings used by JNDI
1:      * @return the instance built from the Reference object
0:      * @throws Exception if building the instance from Reference fails (usually class
0:      *                   not found)
1:      */
1:     public Object getObjectInstance(Object object, Name name, Context nameCtx, Hashtable environment) throws Exception {
1:         Object result = null;
1:         if (object instanceof Reference) {
0:             Reference reference = (Reference) object;
1: 
1:             if (log.isTraceEnabled()) {
1:                 log.trace("Getting instance of " + reference.getClassName());
1:             }
1: 
1:             Class theClass = loadClass(this, reference.getClassName());
1:             if (JNDIStorableInterface.class.isAssignableFrom(theClass)) {
1: 
0:                 JNDIStorableInterface store = (JNDIStorableInterface) theClass.newInstance();
1:                 Properties properties = new Properties();
1:                 for (Enumeration iter = reference.getAll(); iter.hasMoreElements();) {
1: 
0:                     StringRefAddr addr = (StringRefAddr) iter.nextElement();
1:                     properties.put(addr.getType(), (addr.getContent() == null) ? "" : addr.getContent());
1: 
1:                 }
1:                 store.setProperties(properties);
1:                 result = store;
1:             }
1:         }
0:         else {
1:             log.error("Object " + object + " is not a reference - cannot load");
1:             throw new RuntimeException("Object " + object + " is not a reference");
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Create a Reference instance from a JNDIStorable object
1:      *
1:      * @param instanceClassName
1:      * @param po
0:      * @return @throws
0:      *         NamingException
1:      */
1: 
1:     public static Reference createReference(String instanceClassName, JNDIStorableInterface po) throws NamingException {
1:         if (log.isTraceEnabled()) {
1:             log.trace("Creating reference: " + instanceClassName + "," + po);
1:         }
1:         Reference result = new Reference(instanceClassName, JNDIReferenceFactory.class.getName(), null);
1:         try {
1:             Properties props = po.getProperties();
1:             for (Enumeration iter = props.propertyNames(); iter.hasMoreElements();) {
0:                 String key = (String) iter.nextElement();
1:                 String value = props.getProperty(key);
1:                 javax.naming.StringRefAddr addr = new javax.naming.StringRefAddr(key, value);
1:                 result.add(addr);
1:             }
1:         }
0:         catch (Exception e) {
1:             log.error(e.getMessage(), e);
1:             throw new NamingException(e.getMessage());
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Retrieve the class loader for a named class
1:      *
1:      * @param thisObj
1:      * @param className
0:      * @return @throws
0:      *         ClassNotFoundException
1:      */
1: 
1:     public static Class loadClass(Object thisObj, String className) throws ClassNotFoundException {
1:         // tryu local ClassLoader first.
1:         ClassLoader loader = thisObj.getClass().getClassLoader();
1:         Class theClass;
1:         if (loader != null) {
1:             theClass = loader.loadClass(className);
1:         }
0:         else {
1:             // Will be null in jdk1.1.8
1:             // use default classLoader
1:             theClass = Class.forName(className);
1:         }
1:         return theClass;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     static Logger log = LoggerFactory.getLogger(JNDIReferenceFactory.class);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:b9a4dee
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.jndi;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import javax.naming.spi.ObjectFactory;
0: import javax.naming.Name;
0: import javax.naming.Context;
0: import javax.naming.Reference;
0: import javax.naming.StringRefAddr;
0: import javax.naming.NamingException;
0: import java.util.Hashtable;
0: import java.util.Properties;
0: import java.util.Enumeration;
0: 
0: /**
0:  * Converts objects implementing JNDIStorable into a property fields so they can
0:  * be stored and regenerated from JNDI
0:  */
0: public class JNDIReferenceFactory implements ObjectFactory {
0: 
0:     static Log log = LogFactory.getLog(JNDIReferenceFactory.class);
0: 
0:     /**
0:      * This will be called by a JNDIprovider when a Reference is retrieved from
0:      * a JNDI store - and generates the orignal instance
0:      *
0:      * @param object      the Reference object
0:      * @param name        the JNDI name
0:      * @param nameCtx     the context
0:      * @param environment the environment settings used by JNDI
0:      * @return the instance built from the Reference object
0:      * @throws Exception if building the instance from Reference fails (usually class
0:      *                   not found)
0:      */
0:     public Object getObjectInstance(Object object, Name name, Context nameCtx, Hashtable environment) throws Exception {
0:         Object result = null;
0:         if (object instanceof Reference) {
0:             Reference reference = (Reference) object;
0: 
0:             if (log.isTraceEnabled()) {
0:                 log.trace("Getting instance of " + reference.getClassName());
0:             }
0: 
0:             Class theClass = loadClass(this, reference.getClassName());
0:             if (JNDIStorableInterface.class.isAssignableFrom(theClass)) {
0: 
0:                 JNDIStorableInterface store = (JNDIStorableInterface) theClass.newInstance();
0:                 Properties properties = new Properties();
0:                 for (Enumeration iter = reference.getAll(); iter.hasMoreElements();) {
0: 
0:                     StringRefAddr addr = (StringRefAddr) iter.nextElement();
0:                     properties.put(addr.getType(), (addr.getContent() == null) ? "" : addr.getContent());
0: 
0:                 }
0:                 store.setProperties(properties);
0:                 result = store;
0:             }
0:         }
0:         else {
0:             log.error("Object " + object + " is not a reference - cannot load");
0:             throw new RuntimeException("Object " + object + " is not a reference");
0:         }
0:         return result;
0:     }
0: 
0:     /**
0:      * Create a Reference instance from a JNDIStorable object
0:      *
0:      * @param instanceClassName
0:      * @param po
0:      * @return @throws
0:      *         NamingException
0:      */
0: 
0:     public static Reference createReference(String instanceClassName, JNDIStorableInterface po) throws NamingException {
0:         if (log.isTraceEnabled()) {
0:             log.trace("Creating reference: " + instanceClassName + "," + po);
0:         }
0:         Reference result = new Reference(instanceClassName, JNDIReferenceFactory.class.getName(), null);
0:         try {
0:             Properties props = po.getProperties();
0:             for (Enumeration iter = props.propertyNames(); iter.hasMoreElements();) {
0:                 String key = (String) iter.nextElement();
0:                 String value = props.getProperty(key);
0:                 javax.naming.StringRefAddr addr = new javax.naming.StringRefAddr(key, value);
0:                 result.add(addr);
0:             }
0:         }
0:         catch (Exception e) {
0:             log.error(e.getMessage(), e);
0:             throw new NamingException(e.getMessage());
0:         }
0:         return result;
0:     }
0: 
0:     /**
0:      * Retrieve the class loader for a named class
0:      *
0:      * @param thisObj
0:      * @param className
0:      * @return @throws
0:      *         ClassNotFoundException
0:      */
0: 
0:     public static Class loadClass(Object thisObj, String className) throws ClassNotFoundException {
0:         // tryu local ClassLoader first.
0:         ClassLoader loader = thisObj.getClass().getClassLoader();
0:         Class theClass;
0:         if (loader != null) {
0:             theClass = loader.loadClass(className);
0:         }
0:         else {
0:             // Will be null in jdk1.1.8
0:             // use default classLoader
0:             theClass = Class.forName(className);
0:         }
0:         return theClass;
0:     }
0: 
0: }
============================================================================