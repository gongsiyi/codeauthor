1:8b8e726: /**
1:8b8e726:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8b8e726:  * contributor license agreements.  See the NOTICE file distributed with
1:8b8e726:  * this work for additional information regarding copyright ownership.
1:8b8e726:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8b8e726:  * (the "License"); you may not use this file except in compliance with
1:8b8e726:  * the License.  You may obtain a copy of the License at
1:8b8e726:  *
1:8b8e726:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b8e726:  *
1:8b8e726:  * Unless required by applicable law or agreed to in writing, software
1:8b8e726:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b8e726:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b8e726:  * See the License for the specific language governing permissions and
1:8b8e726:  * limitations under the License.
1:8b8e726:  */
1:8b8e726: package org.apache.activemq;
1:8b8e726: 
1:8b8e726: import java.io.File;
1:8b8e726: import java.io.FileInputStream;
1:8b8e726: import java.io.FileOutputStream;
1:1fdc2c4: import java.util.Date;
1:8b8e726: import java.util.concurrent.TimeUnit;
1:8b8e726: import org.apache.activemq.broker.BrokerFactory;
1:8b8e726: import org.apache.activemq.broker.BrokerService;
1:8b8e726: import org.apache.activemq.spring.Utils;
1:8b8e726: import org.junit.After;
1:1fdc2c4: import org.junit.Rule;
1:1fdc2c4: import org.junit.rules.TestWatcher;
1:1fdc2c4: import org.junit.runner.Description;
1:8b8e726: import org.slf4j.Logger;
1:8b8e726: import org.slf4j.LoggerFactory;
1:8b8e726: import org.springframework.core.io.Resource;
1:8b8e726: 
1:8b8e726: public class RuntimeConfigTestSupport {
1:8b8e726:     public static final Logger LOG = LoggerFactory.getLogger(RuntimeConfigTestSupport.class);
1:8b8e726: 
1:8b8e726:     public static final int SLEEP = 4; // seconds
1:8b8e726:     public static final String EMPTY_UPDATABLE_CONFIG = "emptyUpdatableConfig1000" ;
1:43c3cae:     protected BrokerService brokerService;
1:8b8e726: 
1:1fdc2c4:     @Rule
1:1fdc2c4:     public TestWatcher watchman = new TestWatcher() {
1:1fdc2c4:         @Override
1:1fdc2c4:         public void starting(Description description) {
1:1fdc2c4:           LOG.info("{} being run...", description.getMethodName());
1:1fdc2c4:         }
1:1fdc2c4:     };
1:1fdc2c4: 
1:8b8e726:     public void startBroker(String configFileName) throws Exception {
1:8b8e726:         brokerService = createBroker(configFileName);
1:8b8e726:         brokerService.start();
1:8b8e726:         brokerService.waitUntilStarted();
1:1fdc2c4: 
1:1fdc2c4:         // File system lastMod time granularity can be up to 2 seconds
1:1fdc2c4:         TimeUnit.SECONDS.sleep(SLEEP);
1:8b8e726:     }
1:8b8e726: 
1:8b8e726:     public BrokerService createBroker(String configFileName) throws Exception {
1:8b8e726:         brokerService = new BrokerService();
1:8b8e726:         return BrokerFactory.createBroker("xbean:org/apache/activemq/" + configFileName + ".xml");
1:8b8e726:     }
1:8b8e726: 
1:8b8e726:     protected void applyNewConfig(String configName, String newConfigName) throws Exception {
1:8b8e726:         applyNewConfig(configName, newConfigName, 0l);
1:8b8e726:     }
1:8b8e726: 
1:8b8e726:     protected void applyNewConfig(String configName, String newConfigName, long sleep) throws Exception {
1:8b8e726:         Resource resource = Utils.resourceFromString("org/apache/activemq");
1:4a01e40:         File file = new File(resource.getFile(), configName + ".xml");
1:4a01e40:         FileOutputStream current = new FileOutputStream(file);
1:8b8e726:         FileInputStream modifications = new FileInputStream(new File(resource.getFile(), newConfigName + ".xml"));
1:8b8e726:         modifications.getChannel().transferTo(0, Long.MAX_VALUE, current.getChannel());
1:8b8e726:         current.flush();
1:1fdc2c4:         current.getChannel().force(true);
1:4a01e40:         current.close();
1:4a01e40:         modifications.close();
1:1fdc2c4:         LOG.info("Updated: " + file + " (" + file.lastModified() + ") " + new Date(file.lastModified()));
1:8b8e726: 
1:8b8e726:         if (sleep > 0) {
1:8b8e726:             // wait for mods to kick in
1:8b8e726:             TimeUnit.SECONDS.sleep(sleep);
1:8b8e726:         }
1:8b8e726:     }
1:8b8e726: 
1:8b8e726:     @After
1:8b8e726:     public void stopBroker() throws Exception {
1:8b8e726:         brokerService.stop();
1:8d480b4:         brokerService.waitUntilStopped();
1:8b8e726:     }
1:8b8e726: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService brokerService;
author:gtully
-------------------------------------------------------------------------------
commit:1fdc2c4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
1: import org.junit.Rule;
1: import org.junit.rules.TestWatcher;
1: import org.junit.runner.Description;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TestWatcher watchman = new TestWatcher() {
1:         @Override
1:         public void starting(Description description) {
1:           LOG.info("{} being run...", description.getMethodName());
1:         }
1:     };
1: 
1: 
1:         // File system lastMod time granularity can be up to 2 seconds
1:         TimeUnit.SECONDS.sleep(SLEEP);
/////////////////////////////////////////////////////////////////////////
1:         current.getChannel().force(true);
1:         LOG.info("Updated: " + file + " (" + file.lastModified() + ") " + new Date(file.lastModified()));
commit:4a01e40
/////////////////////////////////////////////////////////////////////////
1:         File file = new File(resource.getFile(), configName + ".xml");
1:         FileOutputStream current = new FileOutputStream(file);
1:         current.close();
1:         modifications.close();
0:         LOG.info("Updated: " + file);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d480b4
/////////////////////////////////////////////////////////////////////////
1:         brokerService.waitUntilStopped();
commit:8b8e726
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.spring.Utils;
1: import org.junit.After;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.Resource;
1: 
1: public class RuntimeConfigTestSupport {
1:     public static final Logger LOG = LoggerFactory.getLogger(RuntimeConfigTestSupport.class);
1: 
1:     public static final int SLEEP = 4; // seconds
1:     public static final String EMPTY_UPDATABLE_CONFIG = "emptyUpdatableConfig1000" ;
0:     BrokerService brokerService;
1: 
1:     public void startBroker(String configFileName) throws Exception {
1:         brokerService = createBroker(configFileName);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     public BrokerService createBroker(String configFileName) throws Exception {
1:         brokerService = new BrokerService();
1:         return BrokerFactory.createBroker("xbean:org/apache/activemq/" + configFileName + ".xml");
1:     }
1: 
1:     protected void applyNewConfig(String configName, String newConfigName) throws Exception {
1:         applyNewConfig(configName, newConfigName, 0l);
1:     }
1: 
1:     protected void applyNewConfig(String configName, String newConfigName, long sleep) throws Exception {
1:         Resource resource = Utils.resourceFromString("org/apache/activemq");
0:         FileOutputStream current = new FileOutputStream(new File(resource.getFile(), configName + ".xml"));
1:         FileInputStream modifications = new FileInputStream(new File(resource.getFile(), newConfigName + ".xml"));
1:         modifications.getChannel().transferTo(0, Long.MAX_VALUE, current.getChannel());
1:         current.flush();
0:         LOG.info("Updated: " + current.getChannel());
1: 
1:         if (sleep > 0) {
1:             // wait for mods to kick in
1:             TimeUnit.SECONDS.sleep(sleep);
1:         }
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         brokerService.stop();
1:     }
1: }
============================================================================