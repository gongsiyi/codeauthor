1:6552287: /**
1:6552287:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6552287:  * contributor license agreements.  See the NOTICE file distributed with
1:6552287:  * this work for additional information regarding copyright ownership.
1:6552287:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6552287:  * (the "License"); you may not use this file except in compliance with
1:6552287:  * the License.  You may obtain a copy of the License at
1:6552287:  *
1:6552287:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6552287:  *
1:6552287:  * Unless required by applicable law or agreed to in writing, software
1:6552287:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6552287:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6552287:  * See the License for the specific language governing permissions and
1:6552287:  * limitations under the License.
1:6552287:  */
1:6552287: package org.apache.activemq.bugs;
1:6552287: 
1:6552287: import static org.junit.Assert.assertEquals;
1:6552287: 
1:6552287: import java.util.ArrayList;
1:6552287: import java.util.concurrent.CountDownLatch;
1:6552287: import java.util.concurrent.CyclicBarrier;
1:6552287: import java.util.concurrent.TimeUnit;
1:6552287: 
1:6552287: import javax.jms.Connection;
1:6552287: import javax.jms.Destination;
1:6552287: import javax.jms.JMSException;
1:6552287: import javax.jms.Message;
1:6552287: import javax.jms.MessageConsumer;
1:6552287: import javax.jms.MessageListener;
1:6552287: import javax.jms.Session;
1:6552287: 
1:6552287: import org.apache.activemq.ActiveMQConnectionFactory;
1:6552287: import org.apache.activemq.advisory.AdvisoryBroker;
1:6552287: import org.apache.activemq.broker.BrokerService;
1:6552287: import org.apache.activemq.broker.ConnectionContext;
1:6552287: import org.apache.activemq.command.ActiveMQDestination;
1:6552287: import org.apache.activemq.command.ActiveMQQueue;
1:6552287: import org.apache.activemq.command.ConnectionId;
1:6552287: import org.apache.activemq.command.ConnectionInfo;
1:6552287: import org.apache.activemq.command.ConsumerId;
1:6552287: import org.apache.activemq.command.ConsumerInfo;
1:6552287: import org.apache.activemq.command.SessionId;
1:6552287: import org.apache.activemq.command.SessionInfo;
1:6552287: import org.junit.After;
1:6552287: import org.junit.Before;
1:6552287: import org.junit.Ignore;
1:6552287: import org.junit.Test;
1:6552287: import org.slf4j.Logger;
1:6552287: import org.slf4j.LoggerFactory;
1:6552287: 
1:6552287: public class AMQ4853Test {
1:6552287: 
1:6552287:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4853Test.class);
1:6552287:     private static BrokerService brokerService;
1:6552287:     private static final String BROKER_ADDRESS = "tcp://localhost:0";
1:6552287:     private static final ActiveMQQueue DESTINATION = new ActiveMQQueue("TEST.QUEUE");
1:6552287:     private CountDownLatch cycleDoneLatch;
1:6552287: 
1:6552287:     private String connectionUri;
1:6552287: 
1:6552287:     @Before
1:6552287:     public void setUp() throws Exception {
1:6552287:         brokerService = new BrokerService();
1:6552287:         brokerService.setPersistent(false);
1:6552287:         brokerService.setUseJmx(false);
1:6552287:         brokerService.setAdvisorySupport(true);
1:6552287:         brokerService.setDeleteAllMessagesOnStartup(true);
1:6552287:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:6552287: 
1:6552287:         brokerService.start();
1:6552287:         brokerService.waitUntilStarted();
1:6552287:     }
1:6552287: 
1:6552287:     @After
1:6552287:     public void tearDown() throws Exception {
1:6552287:         brokerService.stop();
1:6552287:         brokerService.waitUntilStopped();
1:6552287:     }
1:6552287: 
1:6552287:     /**
1:6552287:      * Test to shows the performance of the removing consumers while other stay active.
1:6552287:      * @throws Exception
1:6552287:      */
1:6552287:     @Ignore
1:6552287:     @Test
1:6552287:     public void test() throws Exception {
1:6552287: 
1:6552287:         // Create a stable set of consumers to fill in the advisory broker's consumer list.
1:6552287:         ArrayList<Consumer> fixedConsumers = new ArrayList<Consumer>(100);
1:6552287:         for (int i = 0; i < 200; ++i) {
1:6552287:             fixedConsumers.add(new Consumer());
1:6552287:         }
1:6552287: 
1:6552287:         // Create a set of consumers that comes online for a short time and then
1:6552287:         // goes offline again.  Cycles will repeat as each batch completes
1:6552287:         final int fixedDelayConsumers = 300;
1:6552287:         final int fixedDelayCycles = 25;
1:6552287: 
1:6552287:         final CountDownLatch fixedDelayCycleLatch = new CountDownLatch(fixedDelayCycles);
1:6552287: 
1:6552287:         // Update so done method can track state.
1:6552287:         cycleDoneLatch = fixedDelayCycleLatch;
1:6552287: 
1:6552287:         CyclicBarrier barrier = new CyclicBarrier(fixedDelayConsumers, new Runnable() {
1:6552287:             @Override
1:6552287:             public void run() {
1:6552287:                 LOG.info("Fixed delay consumers cycle {} completed.", fixedDelayCycleLatch.getCount());
1:6552287:                 fixedDelayCycleLatch.countDown();
1:6552287:             }
1:6552287:         });
1:6552287: 
1:6552287:         for (int i = 0; i < fixedDelayConsumers; ++i) {
1:6552287:             new Thread(new FixedDelyConsumer(barrier)).start();
1:6552287:         }
1:6552287: 
1:6552287:         fixedDelayCycleLatch.await(10, TimeUnit.MINUTES);
1:6552287: 
1:6552287:         // Clean up.
1:6552287: 
1:6552287:         for (Consumer consumer : fixedConsumers) {
1:6552287:             consumer.close();
1:6552287:         }
1:6552287:         fixedConsumers.clear();
1:6552287:     }
1:6552287: 
1:6552287:     private ConnectionInfo createConnectionInfo() {
1:6552287:         ConnectionId id = new ConnectionId();
1:6552287:         id.setValue("ID:123456789:0:1");
1:6552287: 
1:6552287:         ConnectionInfo info = new ConnectionInfo();
1:6552287:         info.setConnectionId(id);
1:6552287:         return info;
1:6552287:     }
1:6552287: 
1:6552287:     private SessionInfo createSessionInfo(ConnectionInfo connection) {
1:6552287:         SessionId id = new SessionId(connection.getConnectionId(), 1);
1:6552287: 
1:6552287:         SessionInfo info = new SessionInfo();
1:6552287:         info.setSessionId(id);
1:6552287: 
1:6552287:         return info;
1:6552287:     }
1:6552287: 
1:6552287:     public ConsumerInfo createConsumerInfo(SessionInfo session, int value, ActiveMQDestination destination) {
1:6552287:         ConsumerId id = new ConsumerId();
1:6552287:         id.setConnectionId(session.getSessionId().getConnectionId());
1:6552287:         id.setSessionId(1);
1:6552287:         id.setValue(value);
1:6552287: 
1:6552287:         ConsumerInfo info = new ConsumerInfo();
1:6552287:         info.setConsumerId(id);
1:6552287:         info.setDestination(destination);
1:6552287:         return info;
1:6552287:     }
1:6552287: 
1:6552287:     /**
1:6552287:      * Test to shows the performance impact of removing consumers in various scenarios.
1:6552287:      * @throws Exception
1:6552287:      */
1:6552287:     @Ignore
1:6552287:     @Test
1:6552287:     public void testPerformanceOfRemovals() throws Exception {
1:6552287:         // setup
1:6552287:         AdvisoryBroker testObj = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:6552287:         ActiveMQDestination destination = new ActiveMQQueue("foo");
1:6552287:         ConnectionInfo connectionInfo = createConnectionInfo();
1:6552287:         ConnectionContext connectionContext = new ConnectionContext(connectionInfo);
1:6552287:         connectionContext.setBroker(brokerService.getBroker());
1:6552287:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:6552287: 
1:6552287:         long start = System.currentTimeMillis();
1:6552287: 
1:6552287:         for (int i = 0; i < 200; ++i) {
1:6552287: 
1:6552287:             for (int j = 1; j <= 500; j++) {
1:6552287:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:                 testObj.addConsumer(connectionContext, consumerInfo);
1:6552287:             }
1:6552287: 
1:6552287:             for (int j = 500; j > 0; j--) {
1:6552287:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:                 testObj.removeConsumer(connectionContext, consumerInfo);
1:6552287:             }
1:6552287: 
1:6552287:             for (int j = 1; j <= 500; j++) {
1:6552287:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:                 testObj.addConsumer(connectionContext, consumerInfo);
1:6552287:             }
1:6552287: 
1:6552287:             for (int j = 1; j <= 500; j++) {
1:6552287:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:                 testObj.removeConsumer(connectionContext, consumerInfo);
1:6552287:             }
1:6552287:         }
1:6552287: 
1:6552287:         long finish = System.currentTimeMillis();
1:6552287: 
1:6552287:         long totalTime = finish - start;
1:6552287: 
1:6552287:         LOG.info("Total test time: {} seconds", TimeUnit.MILLISECONDS.toSeconds(totalTime));
1:6552287: 
1:6552287:         assertEquals(0, testObj.getAdvisoryConsumers().size());
1:6552287:     }
1:6552287: 
1:6552287:     @Test
1:6552287:     public void testEqualsNeeded() throws Exception {
1:6552287:         // setup
1:6552287:         AdvisoryBroker testObj = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:6552287:         ActiveMQDestination destination = new ActiveMQQueue("foo");
1:6552287:         ConnectionInfo connectionInfo = createConnectionInfo();
1:6552287:         ConnectionContext connectionContext = new ConnectionContext(connectionInfo);
1:6552287:         connectionContext.setBroker(brokerService.getBroker());
1:6552287:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:6552287: 
1:6552287:         for (int j = 1; j <= 5; j++) {
1:6552287:             ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:             testObj.addConsumer(connectionContext, consumerInfo);
1:6552287:         }
1:6552287: 
1:6552287:         for (int j = 1; j <= 5; j++) {
1:6552287:             ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:6552287:             testObj.removeConsumer(connectionContext, consumerInfo);
1:6552287:         }
1:6552287: 
1:6552287:         assertEquals(0, testObj.getAdvisoryConsumers().size());
1:6552287:     }
1:6552287: 
1:6552287:     private boolean done() {
1:6552287:         if (cycleDoneLatch == null) {
1:6552287:             return true;
1:6552287:         }
1:6552287:         return cycleDoneLatch.getCount() == 0;
1:6552287:     }
1:6552287: 
1:6552287:     class Consumer implements MessageListener {
1:6552287: 
1:6552287:         Connection connection;
1:6552287:         Session session;
1:6552287:         Destination destination;
1:6552287:         MessageConsumer consumer;
1:6552287: 
1:6552287:         Consumer() throws JMSException {
1:6552287:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:6552287:             connection = factory.createConnection();
1:6552287:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6552287:             consumer = session.createConsumer(DESTINATION);
1:6552287:             consumer.setMessageListener(this);
1:6552287:             connection.start();
1:6552287:         }
1:6552287: 
1:6552287:         @Override
1:6552287:         public void onMessage(Message message) {
1:6552287:         }
1:6552287: 
1:6552287:         public void close() {
1:6552287:             try {
1:6552287:                 connection.close();
1:6552287:             } catch(Exception e) {
1:6552287:             }
1:6552287: 
1:6552287:             connection = null;
1:6552287:             session = null;
1:6552287:             consumer = null;
1:6552287:         }
1:6552287:     }
1:6552287: 
1:6552287:     class FixedDelyConsumer implements Runnable {
1:6552287: 
1:6552287:         private final CyclicBarrier barrier;
1:6552287:         private final int sleepInterval;
1:6552287: 
1:6552287:         public FixedDelyConsumer(CyclicBarrier barrier) {
1:6552287:             this.barrier = barrier;
1:6552287:             this.sleepInterval = 1000;
1:6552287:         }
1:6552287: 
1:6552287:         public FixedDelyConsumer(CyclicBarrier barrier, int sleepInterval) {
1:6552287:             this.barrier = barrier;
1:6552287:             this.sleepInterval = sleepInterval;
1:6552287:         }
1:6552287: 
1:6552287:         @Override
1:6552287:         public void run() {
1:6552287:             while (!done()) {
1:6552287: 
1:6552287:                 try {
1:6552287:                     Consumer consumer = new Consumer();
1:6552287:                     TimeUnit.MILLISECONDS.sleep(sleepInterval);
1:6552287:                     consumer.close();
1:6552287:                     barrier.await();
1:6552287:                 } catch (Exception ex) {
1:6552287:                     return;
1:6552287:                 }
1:6552287:             }
1:6552287:         }
1:6552287:     }
1:6552287: 
1:6552287: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6552287
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.ArrayList;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.CyclicBarrier;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisoryBroker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.SessionId;
1: import org.apache.activemq.command.SessionInfo;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4853Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4853Test.class);
1:     private static BrokerService brokerService;
1:     private static final String BROKER_ADDRESS = "tcp://localhost:0";
1:     private static final ActiveMQQueue DESTINATION = new ActiveMQQueue("TEST.QUEUE");
1:     private CountDownLatch cycleDoneLatch;
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(true);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     /**
1:      * Test to shows the performance of the removing consumers while other stay active.
1:      * @throws Exception
1:      */
1:     @Ignore
1:     @Test
1:     public void test() throws Exception {
1: 
1:         // Create a stable set of consumers to fill in the advisory broker's consumer list.
1:         ArrayList<Consumer> fixedConsumers = new ArrayList<Consumer>(100);
1:         for (int i = 0; i < 200; ++i) {
1:             fixedConsumers.add(new Consumer());
1:         }
1: 
1:         // Create a set of consumers that comes online for a short time and then
1:         // goes offline again.  Cycles will repeat as each batch completes
1:         final int fixedDelayConsumers = 300;
1:         final int fixedDelayCycles = 25;
1: 
1:         final CountDownLatch fixedDelayCycleLatch = new CountDownLatch(fixedDelayCycles);
1: 
1:         // Update so done method can track state.
1:         cycleDoneLatch = fixedDelayCycleLatch;
1: 
1:         CyclicBarrier barrier = new CyclicBarrier(fixedDelayConsumers, new Runnable() {
1:             @Override
1:             public void run() {
1:                 LOG.info("Fixed delay consumers cycle {} completed.", fixedDelayCycleLatch.getCount());
1:                 fixedDelayCycleLatch.countDown();
1:             }
1:         });
1: 
1:         for (int i = 0; i < fixedDelayConsumers; ++i) {
1:             new Thread(new FixedDelyConsumer(barrier)).start();
1:         }
1: 
1:         fixedDelayCycleLatch.await(10, TimeUnit.MINUTES);
1: 
1:         // Clean up.
1: 
1:         for (Consumer consumer : fixedConsumers) {
1:             consumer.close();
1:         }
1:         fixedConsumers.clear();
1:     }
1: 
1:     private ConnectionInfo createConnectionInfo() {
1:         ConnectionId id = new ConnectionId();
1:         id.setValue("ID:123456789:0:1");
1: 
1:         ConnectionInfo info = new ConnectionInfo();
1:         info.setConnectionId(id);
1:         return info;
1:     }
1: 
1:     private SessionInfo createSessionInfo(ConnectionInfo connection) {
1:         SessionId id = new SessionId(connection.getConnectionId(), 1);
1: 
1:         SessionInfo info = new SessionInfo();
1:         info.setSessionId(id);
1: 
1:         return info;
1:     }
1: 
1:     public ConsumerInfo createConsumerInfo(SessionInfo session, int value, ActiveMQDestination destination) {
1:         ConsumerId id = new ConsumerId();
1:         id.setConnectionId(session.getSessionId().getConnectionId());
1:         id.setSessionId(1);
1:         id.setValue(value);
1: 
1:         ConsumerInfo info = new ConsumerInfo();
1:         info.setConsumerId(id);
1:         info.setDestination(destination);
1:         return info;
1:     }
1: 
1:     /**
1:      * Test to shows the performance impact of removing consumers in various scenarios.
1:      * @throws Exception
1:      */
1:     @Ignore
1:     @Test
1:     public void testPerformanceOfRemovals() throws Exception {
1:         // setup
1:         AdvisoryBroker testObj = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:         ActiveMQDestination destination = new ActiveMQQueue("foo");
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         ConnectionContext connectionContext = new ConnectionContext(connectionInfo);
1:         connectionContext.setBroker(brokerService.getBroker());
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1: 
1:         long start = System.currentTimeMillis();
1: 
1:         for (int i = 0; i < 200; ++i) {
1: 
1:             for (int j = 1; j <= 500; j++) {
1:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:                 testObj.addConsumer(connectionContext, consumerInfo);
1:             }
1: 
1:             for (int j = 500; j > 0; j--) {
1:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:                 testObj.removeConsumer(connectionContext, consumerInfo);
1:             }
1: 
1:             for (int j = 1; j <= 500; j++) {
1:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:                 testObj.addConsumer(connectionContext, consumerInfo);
1:             }
1: 
1:             for (int j = 1; j <= 500; j++) {
1:                 ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:                 testObj.removeConsumer(connectionContext, consumerInfo);
1:             }
1:         }
1: 
1:         long finish = System.currentTimeMillis();
1: 
1:         long totalTime = finish - start;
1: 
1:         LOG.info("Total test time: {} seconds", TimeUnit.MILLISECONDS.toSeconds(totalTime));
1: 
1:         assertEquals(0, testObj.getAdvisoryConsumers().size());
1:     }
1: 
1:     @Test
1:     public void testEqualsNeeded() throws Exception {
1:         // setup
1:         AdvisoryBroker testObj = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:         ActiveMQDestination destination = new ActiveMQQueue("foo");
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         ConnectionContext connectionContext = new ConnectionContext(connectionInfo);
1:         connectionContext.setBroker(brokerService.getBroker());
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1: 
1:         for (int j = 1; j <= 5; j++) {
1:             ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:             testObj.addConsumer(connectionContext, consumerInfo);
1:         }
1: 
1:         for (int j = 1; j <= 5; j++) {
1:             ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, j, destination);
1:             testObj.removeConsumer(connectionContext, consumerInfo);
1:         }
1: 
1:         assertEquals(0, testObj.getAdvisoryConsumers().size());
1:     }
1: 
1:     private boolean done() {
1:         if (cycleDoneLatch == null) {
1:             return true;
1:         }
1:         return cycleDoneLatch.getCount() == 0;
1:     }
1: 
1:     class Consumer implements MessageListener {
1: 
1:         Connection connection;
1:         Session session;
1:         Destination destination;
1:         MessageConsumer consumer;
1: 
1:         Consumer() throws JMSException {
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:             connection = factory.createConnection();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             consumer = session.createConsumer(DESTINATION);
1:             consumer.setMessageListener(this);
1:             connection.start();
1:         }
1: 
1:         @Override
1:         public void onMessage(Message message) {
1:         }
1: 
1:         public void close() {
1:             try {
1:                 connection.close();
1:             } catch(Exception e) {
1:             }
1: 
1:             connection = null;
1:             session = null;
1:             consumer = null;
1:         }
1:     }
1: 
1:     class FixedDelyConsumer implements Runnable {
1: 
1:         private final CyclicBarrier barrier;
1:         private final int sleepInterval;
1: 
1:         public FixedDelyConsumer(CyclicBarrier barrier) {
1:             this.barrier = barrier;
1:             this.sleepInterval = 1000;
1:         }
1: 
1:         public FixedDelyConsumer(CyclicBarrier barrier, int sleepInterval) {
1:             this.barrier = barrier;
1:             this.sleepInterval = sleepInterval;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             while (!done()) {
1: 
1:                 try {
1:                     Consumer consumer = new Consumer();
1:                     TimeUnit.MILLISECONDS.sleep(sleepInterval);
1:                     consumer.close();
1:                     barrier.await();
1:                 } catch (Exception ex) {
1:                     return;
1:                 }
1:             }
1:         }
1:     }
1: 
1: }
============================================================================