1:c43eda3: /**
1:c43eda3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c43eda3:  * contributor license agreements.  See the NOTICE file distributed with
1:c43eda3:  * this work for additional information regarding copyright ownership.
1:c43eda3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c43eda3:  * (the "License"); you may not use this file except in compliance with
1:c43eda3:  * the License.  You may obtain a copy of the License at
1:c43eda3:  *
1:c43eda3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c43eda3:  *
1:c43eda3:  * Unless required by applicable law or agreed to in writing, software
1:c43eda3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c43eda3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c43eda3:  * See the License for the specific language governing permissions and
1:c43eda3:  * limitations under the License.
1:c43eda3:  */
1:c43eda3: package org.apache.activemq.security;
1:c43eda3: 
1:c43eda3: 
1:c43eda3: import java.net.URI;
1:c43eda3: import java.util.HashMap;
1:adb7fcc: import java.util.concurrent.TimeUnit;
1:b1ea29e: import java.util.concurrent.atomic.AtomicBoolean;
1:b1ea29e: import java.util.concurrent.atomic.AtomicReference;
1:c43eda3: 
1:adb7fcc: import javax.jms.Connection;
1:adb7fcc: import javax.jms.DeliveryMode;
1:adb7fcc: import javax.jms.QueueBrowser;
1:adb7fcc: import javax.jms.Session;
1:c43eda3: import javax.management.MBeanServerConnection;
1:c43eda3: import javax.management.MBeanServerInvocationHandler;
1:c43eda3: import javax.management.ObjectName;
1:c43eda3: import javax.management.remote.JMXConnector;
1:c43eda3: import javax.management.remote.JMXConnectorFactory;
1:c43eda3: import javax.management.remote.JMXServiceURL;
1:c43eda3: 
1:c43eda3: import junit.framework.TestCase;
1:c43eda3: 
1:adb7fcc: import org.apache.activemq.ActiveMQConnectionFactory;
1:c43eda3: import org.apache.activemq.broker.BrokerFactory;
1:c43eda3: import org.apache.activemq.broker.BrokerService;
1:b1ea29e: import org.apache.activemq.broker.TransportConnection;
1:b1ea29e: import org.apache.activemq.broker.TransportConnector;
1:c43eda3: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:adb7fcc: import org.apache.activemq.command.ActiveMQQueue;
1:b1ea29e: import org.apache.activemq.transport.stomp.StompConnection;
1:b1ea29e: import org.apache.activemq.util.DefaultTestAppender;
1:b1ea29e: import org.apache.log4j.Appender;
1:b1ea29e: import org.apache.log4j.spi.LoggingEvent;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c43eda3: 
1:c43eda3: public class SecurityJMXTest extends TestCase {
1:c43eda3: 
1:4f57744:     private static final Logger LOG = LoggerFactory.getLogger(SecurityJMXTest.class);
1:c43eda3:     private BrokerService broker;
1:c43eda3: 
1:4096f91:     @Override
1:c43eda3:     public void setUp() throws Exception {
1:c43eda3:         broker = createBroker();
1:4096f91:         broker.waitUntilStarted();
1:c43eda3:     }
1:c43eda3: 
1:4096f91:     @Override
1:c43eda3:     public void tearDown() throws Exception {
1:4096f91:         broker.stop();
1:c43eda3:     }
1:c43eda3: 
1:b1ea29e:     public void testDeniedViaStompNoStackTrace() throws Exception {
1:b1ea29e:         final AtomicBoolean gotExpected = new AtomicBoolean(false);
1:b1ea29e:         final AtomicReference<Object> stackTrace = new AtomicReference<Object>();
1:b1ea29e: 
1:b1ea29e:         final Appender appender = new DefaultTestAppender() {
1:b1ea29e:             public void doAppend(LoggingEvent event) {
1:b1ea29e:                 String message =  event.getMessage().toString();
1:b1ea29e:                 if (message.contains("Async error occurred")) {
1:b1ea29e:                     gotExpected.set(true);
1:b1ea29e:                     stackTrace.set(event.getThrowableInformation());
1:b1ea29e:                 }
1:b1ea29e:             }
1:b1ea29e:         };
1:b1ea29e: 
1:b1ea29e:         final org.apache.log4j.Logger toVerify = org.apache.log4j.Logger.getLogger(TransportConnection.class.getName() + ".Service");
1:b1ea29e: 
1:b1ea29e:         toVerify.addAppender(appender);
1:b1ea29e: 
1:b1ea29e:         try {
1:b1ea29e: 
1:b1ea29e:             TransportConnector stomp = broker.addConnector("stomp://localhost:0");
1:b1ea29e:             broker.startTransportConnector(stomp);
1:b1ea29e:             StompConnection stompConnection = new StompConnection();
1:b1ea29e:             stompConnection.open(stomp.getConnectUri().getHost(), stomp.getConnectUri().getPort());
1:b1ea29e:             stompConnection.connect("guest", "password");
1:b1ea29e:             // async sub
1:b1ea29e:             stompConnection.subscribe("/queue/USERS.Q");
1:b1ea29e:             stompConnection.receive(1000);
1:b1ea29e:             stompConnection.close();
1:b1ea29e: 
1:b1ea29e:         } finally {
1:b1ea29e:             toVerify.removeAppender(appender);
1:b1ea29e:         }
1:b1ea29e: 
1:b1ea29e:         assertTrue("Got async error:", gotExpected.get());
1:b1ea29e:         assertNull("No stack trace", stackTrace.get());
1:b1ea29e:     }
1:b1ea29e: 
1:b1ea29e: 
1:c43eda3:     public void testMoveMessages() throws Exception {
1:2c73c3d:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi");
1:c43eda3:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
1:c43eda3:         connector.connect();
1:c43eda3:         MBeanServerConnection connection = connector.getMBeanServerConnection();
1:4096f91:         ObjectName name = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost," +
1:4096f91:                 "destinationType=Queue,destinationName=TEST.Q");
1:4096f91:         QueueViewMBean queueMbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1:c43eda3:         String msgId = queueMbean.sendTextMessage("test", "system", "manager");
1:c43eda3:         queueMbean.moveMessageTo(msgId, "TEST1.Q");
1:c43eda3:     }
1:c43eda3: 
1:adb7fcc:     public void testBrowseExpiredMessages() throws Exception {
1:adb7fcc:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi");
1:adb7fcc:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
1:adb7fcc:         connector.connect();
1:adb7fcc:         MBeanServerConnection connection = connector.getMBeanServerConnection();
1:4096f91:         ObjectName name = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost," +
1:4096f91:                 "destinationType=Queue,destinationName=TEST.Q");
1:4096f91:         QueueViewMBean queueMbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1:adb7fcc:         HashMap<String, String> headers = new HashMap<String, String>();
1:fc8c8d3:         headers.put("timeToLive", Long.toString(2000));
1:adb7fcc:         headers.put("JMSDeliveryMode", Integer.toString(DeliveryMode.PERSISTENT));
1:4096f91:         queueMbean.sendTextMessage(headers, "test", "system", "manager");
1:adb7fcc:         // allow message to expire on the queue
1:49bb4bf:         TimeUnit.SECONDS.sleep(4);
1:c43eda3: 
1:adb7fcc:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection("system", "manager");
1:adb7fcc:         c.start();
4:4096f91: 
1:adb7fcc:         // browser consumer will force expriation check on addConsumer
1:adb7fcc:         QueueBrowser browser = c.createSession(false, Session.AUTO_ACKNOWLEDGE).createBrowser(new ActiveMQQueue("TEST.Q"));
1:adb7fcc:         assertTrue("no message in the q", !browser.getEnumeration().hasMoreElements());
1:4096f91: 
1:adb7fcc:         // verify dlq got the message, no security exception as brokers context is now used
1:4096f91:         browser = c.createSession(false, Session.AUTO_ACKNOWLEDGE).createBrowser(new ActiveMQQueue("ActiveMQ.DLQ"));
1:adb7fcc:         assertTrue("one message in the dlq", browser.getEnumeration().hasMoreElements());
2:4096f91:     }
1:4096f91: 
1:c43eda3:     protected BrokerService createBroker() throws Exception {
1:c43eda3:         return createBroker("org/apache/activemq/security/simple-auth-broker.xml");
1:c43eda3:     }
1:c43eda3: 
1:c43eda3:     protected BrokerService createBroker(String uri) throws Exception {
1:c43eda3:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:c43eda3:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:c43eda3:     }
1:c43eda3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b1ea29e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:     public void testDeniedViaStompNoStackTrace() throws Exception {
1:         final AtomicBoolean gotExpected = new AtomicBoolean(false);
1:         final AtomicReference<Object> stackTrace = new AtomicReference<Object>();
1: 
1:         final Appender appender = new DefaultTestAppender() {
1:             public void doAppend(LoggingEvent event) {
1:                 String message =  event.getMessage().toString();
1:                 if (message.contains("Async error occurred")) {
1:                     gotExpected.set(true);
1:                     stackTrace.set(event.getThrowableInformation());
1:                 }
1:             }
1:         };
1: 
1:         final org.apache.log4j.Logger toVerify = org.apache.log4j.Logger.getLogger(TransportConnection.class.getName() + ".Service");
1: 
1:         toVerify.addAppender(appender);
1: 
1:         try {
1: 
1:             TransportConnector stomp = broker.addConnector("stomp://localhost:0");
1:             broker.startTransportConnector(stomp);
1:             StompConnection stompConnection = new StompConnection();
1:             stompConnection.open(stomp.getConnectUri().getHost(), stomp.getConnectUri().getPort());
1:             stompConnection.connect("guest", "password");
1:             // async sub
1:             stompConnection.subscribe("/queue/USERS.Q");
1:             stompConnection.receive(1000);
1:             stompConnection.close();
1: 
1:         } finally {
1:             toVerify.removeAppender(appender);
1:         }
1: 
1:         assertTrue("Got async error:", gotExpected.get());
1:         assertNull("No stack trace", stackTrace.get());
1:     }
1: 
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4f57744
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SecurityJMXTest.class);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fc8c8d3
/////////////////////////////////////////////////////////////////////////
1:         headers.put("timeToLive", Long.toString(2000));
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 	private static final Logger LOG = LoggerFactory.getLogger(SimpleAuthenticationPluginTest.class);
commit:c43eda3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: 
1: import java.net.URI;
1: import java.util.HashMap;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectName;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SecurityJMXTest extends TestCase {
1: 	
0: 	private static final Log LOG = LogFactory.getLog(SimpleAuthenticationPluginTest.class);
1: 	private BrokerService broker; 
1: 	
1: 	public void setUp() throws Exception {
1: 		broker = createBroker();
0: 		Thread.sleep(500);
1: 	}
1: 
1: 	public void tearDown() throws Exception {
1: 	}
1: 
1: 	public void testMoveMessages() throws Exception {
0: 		JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi");
1: 		JMXConnector connector = JMXConnectorFactory.connect(url, null);
1: 		connector.connect();
1: 		MBeanServerConnection connection = connector.getMBeanServerConnection();
0: 		ObjectName name = new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=TEST.Q");
0: 		QueueViewMBean queueMbean = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1: 		String msgId = queueMbean.sendTextMessage("test", "system", "manager");
1: 		queueMbean.moveMessageTo(msgId, "TEST1.Q");
1: 	}
1: 	
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/security/simple-auth-broker.xml");
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: 	
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:4096f91
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(SimpleAuthenticationPluginTest.class);
0:     private BrokerService broker;
1:     @Override
0:     public void setUp() throws Exception {
0:         broker = createBroker();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @Override
0:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1:         ObjectName name = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost," +
1:                 "destinationType=Queue,destinationName=TEST.Q");
1:         QueueViewMBean queueMbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1: 
1:         ObjectName name = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost," +
1:                 "destinationType=Queue,destinationName=TEST.Q");
1:         QueueViewMBean queueMbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1:         queueMbean.sendTextMessage(headers, "test", "system", "manager");
1: 
1: 
1: 
1:         browser = c.createSession(false, Session.AUTO_ACKNOWLEDGE).createBrowser(new ActiveMQQueue("ActiveMQ.DLQ"));
1: 
/////////////////////////////////////////////////////////////////////////
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:49bb4bf
/////////////////////////////////////////////////////////////////////////
0: 
0: 		Thread.sleep(1000);
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(4);
author:Gary Tully
-------------------------------------------------------------------------------
commit:adb7fcc
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
0: 	    broker.stop();
/////////////////////////////////////////////////////////////////////////
0:     
0:     
1:     public void testBrowseExpiredMessages() throws Exception {
1:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi");
1:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
1:         connector.connect();
1:         MBeanServerConnection connection = connector.getMBeanServerConnection();
0:         ObjectName name = new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=TEST.Q");
0:         QueueViewMBean queueMbean = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("JMSExpiration", Long.toString(System.currentTimeMillis() + 2000));
1:         headers.put("JMSDeliveryMode", Integer.toString(DeliveryMode.PERSISTENT));
0:         String msgId = queueMbean.sendTextMessage(headers, "test", "system", "manager");
1:         // allow message to expire on the queue
0:         TimeUnit.SECONDS.sleep(3);
0:         
1:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection("system", "manager");
1:         c.start();
0:         
1:         // browser consumer will force expriation check on addConsumer
1:         QueueBrowser browser = c.createSession(false, Session.AUTO_ACKNOWLEDGE).createBrowser(new ActiveMQQueue("TEST.Q"));
1:         assertTrue("no message in the q", !browser.getEnumeration().hasMoreElements());
0:         
1:         // verify dlq got the message, no security exception as brokers context is now used
0:         browser = c.createSession(false, Session.AUTO_ACKNOWLEDGE).createBrowser(new ActiveMQQueue("ActiveMQ.DLQ"));  
1:         assertTrue("one message in the dlq", browser.getEnumeration().hasMoreElements());
0:     }
0:     
commit:2c73c3d
/////////////////////////////////////////////////////////////////////////
0:     public void testMoveMessages() throws Exception {
1:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi");
0:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
0:         connector.connect();
0:         MBeanServerConnection connection = connector.getMBeanServerConnection();
0:         ObjectName name = new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=TEST.Q");
0:         QueueViewMBean queueMbean = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(connection, name, QueueViewMBean.class, true);
0:         String msgId = queueMbean.sendTextMessage("test", "system", "manager");
0:         queueMbean.moveMessageTo(msgId, "TEST1.Q");
0:     }
commit:c19e939
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		broker.waitUntilStarted();
============================================================================