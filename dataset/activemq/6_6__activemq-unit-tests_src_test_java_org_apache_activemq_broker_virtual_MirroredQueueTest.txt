1:42b768a: /**
1:42b768a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:42b768a:  * contributor license agreements.  See the NOTICE file distributed with
1:42b768a:  * this work for additional information regarding copyright ownership.
1:42b768a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:42b768a:  * (the "License"); you may not use this file except in compliance with
1:42b768a:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:42b768a:  *      http://www.apache.org/licenses/LICENSE-2.0
2:42b768a:  *
1:42b768a:  * Unless required by applicable law or agreed to in writing, software
1:42b768a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:42b768a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:42b768a:  * See the License for the specific language governing permissions and
1:42b768a:  * limitations under the License.
1:42b768a:  */
1:42b768a: package org.apache.activemq.broker.virtual;
3:42b768a: 
1:42b768a: import javax.jms.Connection;
1:42b768a: import javax.jms.Destination;
1:42b768a: import javax.jms.MessageConsumer;
1:42b768a: import javax.jms.MessageProducer;
1:42b768a: import javax.jms.Session;
1:16f2d75: import javax.jms.TemporaryQueue;
1:b6e3ca7: 
1:42b768a: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:42b768a: import org.apache.activemq.broker.BrokerService;
1:16f2d75: import org.apache.activemq.broker.region.RegionBroker;
1:42b768a: import org.apache.activemq.command.ActiveMQQueue;
1:42b768a: import org.apache.activemq.command.ActiveMQTopic;
1:42b768a: import org.apache.activemq.spring.ConsumerBean;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:42b768a: 
1:42b768a: /**
1:b6e3ca7:  *
1:42b768a:  */
1:42b768a: public class MirroredQueueTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(MirroredQueueTest.class);
1:42b768a:     private Connection connection;
1:42b768a: 
1:42b768a:     public void testSendingToQueueIsMirrored() throws Exception {
1:42b768a:         if (connection == null) {
1:42b768a:             connection = createConnection();
2:42b768a:         }
1:42b768a:         connection.start();
1:16f2d75: 
1:42b768a:         ConsumerBean messageList = new ConsumerBean();
1:42b768a:         messageList.setVerbose(true);
1:42b768a: 
1:42b768a:         Destination consumeDestination = createConsumeDestination();
1:42b768a: 
1:02c6892:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42b768a:         LOG.info("Consuming from: " + consumeDestination);
1:42b768a: 
1:42b768a:         MessageConsumer c1 = session.createConsumer(consumeDestination);
1:42b768a:         c1.setMessageListener(messageList);
1:42b768a: 
1:42b768a:         // create topic producer
1:42b768a:         ActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());
1:42b768a:         LOG.info("Sending to: " + sendDestination);
1:42b768a: 
1:42b768a:         MessageProducer producer = session.createProducer(sendDestination);
1:42b768a:         assertNotNull(producer);
1:42b768a: 
1:42b768a:         int total = 10;
1:42b768a:         for (int i = 0; i < total; i++) {
1:42b768a:             producer.send(session.createTextMessage("message: " + i));
1:42b768a:         }
1:42b768a: 
1:42b768a:         ///Thread.sleep(1000000);
1:42b768a: 
1:42b768a:         messageList.assertMessagesArrived(total);
1:42b768a: 
1:42b768a:         LOG.info("Received: " + messageList);
1:42b768a:     }
1:b6e3ca7: 
1:16f2d75:     public void testTempMirroredQueuesClearDown() throws Exception{
1:16f2d75:         if (connection == null) {
1:16f2d75:             connection = createConnection();
1:16f2d75:         }
1:16f2d75:         connection.start();
1:42b768a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:16f2d75:         TemporaryQueue tempQueue = session.createTemporaryQueue();
1:16f2d75:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
1:16f2d75:                 RegionBroker.class);
1:b6e3ca7:         assertTrue(rb.getDestinationMap().size()==5);
1:16f2d75:         tempQueue.delete();
1:b6e3ca7:         assertTrue(rb.getDestinationMap().size()==4);
1:16f2d75:     }
1:42b768a: 
1:42b768a:     protected Destination createConsumeDestination() {
1:42b768a:         return new ActiveMQTopic("VirtualTopic.Mirror." + getQueueName());
1:42b768a:     }
1:42b768a: 
1:42b768a:     protected String getQueueName() {
1:42b768a:         return "My.Queue";
1:42b768a:     }
1:42b768a: 
1:42b768a:     @Override
1:42b768a:     protected BrokerService createBroker() throws Exception {
1:42b768a:         BrokerService answer = new BrokerService();
1:42b768a:         answer.setUseMirroredQueues(true);
1:42b768a:         answer.setPersistent(isPersistent());
1:42b768a:         answer.addConnector(bindAddress);
1:42b768a:         return answer;
1:42b768a:     }
1:42b768a: 
1:b6e3ca7:     @Override
1:42b768a:     protected void tearDown() throws Exception {
1:42b768a:         if (connection != null) {
1:42b768a:             connection.close();
1:42b768a:         }
1:42b768a:         super.tearDown();
1:8bf987b:     }
1:42b768a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:b6e3ca7
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(rb.getDestinationMap().size()==5);
1:         assertTrue(rb.getDestinationMap().size()==4);
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(MirroredQueueTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:02c6892
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TemporaryQueue;
1: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testTempMirroredQueuesClearDown() throws Exception{
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
0:         Session session = connection.createSession(false, 0);
1:         TemporaryQueue tempQueue = session.createTemporaryQueue();
1:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
1:                 RegionBroker.class);
0:         assertTrue(rb.getDestinationMap().size()==4);
1:         tempQueue.delete();
0:         assertTrue(rb.getDestinationMap().size()==3);        
1:     }
commit:5ac6f3a
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:42b768a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: $
1:  */
1: public class MirroredQueueTest extends EmbeddedBrokerTestSupport {
0:     private static final transient Log LOG = LogFactory.getLog(MirroredQueueTest.class);
1:     private Connection connection;
1: 
1:     public void testSendingToQueueIsMirrored() throws Exception {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1: 
1:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1: 
1:         Destination consumeDestination = createConsumeDestination();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         LOG.info("Consuming from: " + consumeDestination);
1: 
1:         MessageConsumer c1 = session.createConsumer(consumeDestination);
1:         c1.setMessageListener(messageList);
1: 
1:         // create topic producer
1:         ActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());
1:         LOG.info("Sending to: " + sendDestination);
1: 
1:         MessageProducer producer = session.createProducer(sendDestination);
1:         assertNotNull(producer);
1: 
1:         int total = 10;
1:         for (int i = 0; i < total; i++) {
1:             producer.send(session.createTextMessage("message: " + i));
1:         }
1: 
1:         ///Thread.sleep(1000000);
1: 
1:         messageList.assertMessagesArrived(total);
1: 
1:         LOG.info("Received: " + messageList);
0:         System.out.println("Received: " + messageList.flushMessages());
1:     }
1: 
1:     protected Destination createConsumeDestination() {
1:         return new ActiveMQTopic("VirtualTopic.Mirror." + getQueueName());
1:     }
1: 
1:     protected String getQueueName() {
1:         return "My.Queue";
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseMirroredQueues(true);
1:         answer.setPersistent(isPersistent());
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: }
============================================================================