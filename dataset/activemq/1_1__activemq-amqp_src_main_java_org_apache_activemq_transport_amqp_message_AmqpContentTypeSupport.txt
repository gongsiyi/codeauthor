1:d54e21b: /*
1:d54e21b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d54e21b:  * contributor license agreements.  See the NOTICE file distributed with
1:d54e21b:  * this work for additional information regarding copyright ownership.
1:d54e21b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d54e21b:  * (the "License"); you may not use this file except in compliance with
1:d54e21b:  * the License.  You may obtain a copy of the License at
1:d54e21b:  *
1:d54e21b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d54e21b:  *
1:d54e21b:  * Unless required by applicable law or agreed to in writing, software
1:d54e21b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d54e21b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d54e21b:  * See the License for the specific language governing permissions and
1:d54e21b:  * limitations under the License.
1:d54e21b:  */
1:d54e21b: package org.apache.activemq.transport.amqp.message;
1:d54e21b: 
1:d54e21b: import java.nio.charset.Charset;
1:d54e21b: import java.nio.charset.IllegalCharsetNameException;
1:d54e21b: import java.nio.charset.StandardCharsets;
1:d54e21b: import java.nio.charset.UnsupportedCharsetException;
1:d54e21b: import java.util.StringTokenizer;
1:d54e21b: 
1:d54e21b: public final class AmqpContentTypeSupport {
1:d54e21b: 
1:d54e21b:     private static final String UTF_8 = "UTF-8";
1:d54e21b:     private static final String CHARSET = "charset";
1:d54e21b:     private static final String TEXT = "text";
1:d54e21b:     private static final String APPLICATION = "application";
1:d54e21b:     private static final String JAVASCRIPT = "javascript";
1:d54e21b:     private static final String XML = "xml";
1:d54e21b:     private static final String XML_VARIANT = "+xml";
1:d54e21b:     private static final String JSON = "json";
1:d54e21b:     private static final String JSON_VARIANT = "+json";
1:d54e21b:     private static final String XML_DTD = "xml-dtd";
1:d54e21b:     private static final String ECMASCRIPT = "ecmascript";
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * @param contentType
1:d54e21b:      *        the contentType of the received message
1:d54e21b:      * @return the character set to use, or null if not to treat the message as
1:d54e21b:      *         text
1:d54e21b:      * @throws InvalidContentTypeException
1:d54e21b:      *         if the content-type is invalid in some way.
1:d54e21b:      */
1:d54e21b:     public static Charset parseContentTypeForTextualCharset(final String contentType) throws InvalidContentTypeException {
1:d54e21b:         if (contentType == null || contentType.trim().isEmpty()) {
1:d54e21b:             throw new InvalidContentTypeException("Content type can't be null or empty");
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         int subTypeSeparator = contentType.indexOf("/");
1:d54e21b:         if (subTypeSeparator == -1) {
1:d54e21b:             throw new InvalidContentTypeException("Content type has no '/' separator: " + contentType);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         final String type = contentType.substring(0, subTypeSeparator).toLowerCase().trim();
1:d54e21b: 
1:d54e21b:         String subTypePart = contentType.substring(subTypeSeparator + 1).toLowerCase().trim();
1:d54e21b: 
1:d54e21b:         String parameterPart = null;
1:d54e21b:         int parameterSeparator = subTypePart.indexOf(";");
1:d54e21b:         if (parameterSeparator != -1) {
1:d54e21b:             if (parameterSeparator < subTypePart.length() - 1) {
1:d54e21b:                 parameterPart = contentType.substring(subTypeSeparator + 1).toLowerCase().trim();
1:d54e21b:             }
1:d54e21b:             subTypePart = subTypePart.substring(0, parameterSeparator).trim();
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         if (subTypePart.isEmpty()) {
1:d54e21b:             throw new InvalidContentTypeException("Content type has no subtype after '/'" + contentType);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         final String subType = subTypePart;
1:d54e21b: 
1:d54e21b:         if (isTextual(type, subType)) {
1:d54e21b:             String charset = findCharset(parameterPart);
1:d54e21b:             if (charset == null) {
1:d54e21b:                 charset = UTF_8;
1:d54e21b:             }
1:d54e21b: 
1:d54e21b:             if (UTF_8.equals(charset)) {
1:d54e21b:                 return StandardCharsets.UTF_8;
1:d54e21b:             } else {
1:d54e21b:                 try {
1:d54e21b:                     return Charset.forName(charset);
1:d54e21b:                 } catch (IllegalCharsetNameException icne) {
1:d54e21b:                     throw new InvalidContentTypeException("Illegal charset: " + charset);
1:d54e21b:                 } catch (UnsupportedCharsetException uce) {
1:d54e21b:                     throw new InvalidContentTypeException("Unsupported charset: " + charset);
1:d54e21b:                 }
1:d54e21b:             }
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return null;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- Internal Content Type utilities ----------------------------------//
1:d54e21b: 
1:d54e21b:     private static boolean isTextual(String type, String subType) {
1:d54e21b:         if (TEXT.equals(type)) {
1:d54e21b:             return true;
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         if (APPLICATION.equals(type)) {
1:d54e21b:             if (XML.equals(subType) || JSON.equals(subType) || JAVASCRIPT.equals(subType) || subType.endsWith(XML_VARIANT) || subType.endsWith(JSON_VARIANT)
1:d54e21b:                 || XML_DTD.equals(subType) || ECMASCRIPT.equals(subType)) {
1:d54e21b:                 return true;
1:d54e21b:             }
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return false;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private static String findCharset(String paramaterPart) {
1:d54e21b:         String charset = null;
1:d54e21b: 
1:d54e21b:         if (paramaterPart != null) {
1:d54e21b:             StringTokenizer tokenizer = new StringTokenizer(paramaterPart, ";");
1:d54e21b:             while (tokenizer.hasMoreTokens()) {
1:d54e21b:                 String parameter = tokenizer.nextToken().trim();
1:d54e21b:                 int eqIndex = parameter.indexOf('=');
1:d54e21b:                 if (eqIndex != -1) {
1:d54e21b:                     String name = parameter.substring(0, eqIndex);
1:d54e21b:                     if (CHARSET.equalsIgnoreCase(name.trim())) {
1:d54e21b:                         String value = unquote(parameter.substring(eqIndex + 1));
1:d54e21b: 
1:d54e21b:                         charset = value.toUpperCase();
1:d54e21b:                         break;
1:d54e21b:                     }
1:d54e21b:                 }
1:d54e21b:             }
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return charset;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private static String unquote(String s) {
1:d54e21b:         if (s.length() > 1 && (s.startsWith("\"") && s.endsWith("\""))) {
1:d54e21b:             return s.substring(1, s.length() - 1);
1:d54e21b:         } else {
1:d54e21b:             return s;
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import java.nio.charset.Charset;
1: import java.nio.charset.IllegalCharsetNameException;
1: import java.nio.charset.StandardCharsets;
1: import java.nio.charset.UnsupportedCharsetException;
1: import java.util.StringTokenizer;
1: 
1: public final class AmqpContentTypeSupport {
1: 
1:     private static final String UTF_8 = "UTF-8";
1:     private static final String CHARSET = "charset";
1:     private static final String TEXT = "text";
1:     private static final String APPLICATION = "application";
1:     private static final String JAVASCRIPT = "javascript";
1:     private static final String XML = "xml";
1:     private static final String XML_VARIANT = "+xml";
1:     private static final String JSON = "json";
1:     private static final String JSON_VARIANT = "+json";
1:     private static final String XML_DTD = "xml-dtd";
1:     private static final String ECMASCRIPT = "ecmascript";
1: 
1:     /**
1:      * @param contentType
1:      *        the contentType of the received message
1:      * @return the character set to use, or null if not to treat the message as
1:      *         text
1:      * @throws InvalidContentTypeException
1:      *         if the content-type is invalid in some way.
1:      */
1:     public static Charset parseContentTypeForTextualCharset(final String contentType) throws InvalidContentTypeException {
1:         if (contentType == null || contentType.trim().isEmpty()) {
1:             throw new InvalidContentTypeException("Content type can't be null or empty");
1:         }
1: 
1:         int subTypeSeparator = contentType.indexOf("/");
1:         if (subTypeSeparator == -1) {
1:             throw new InvalidContentTypeException("Content type has no '/' separator: " + contentType);
1:         }
1: 
1:         final String type = contentType.substring(0, subTypeSeparator).toLowerCase().trim();
1: 
1:         String subTypePart = contentType.substring(subTypeSeparator + 1).toLowerCase().trim();
1: 
1:         String parameterPart = null;
1:         int parameterSeparator = subTypePart.indexOf(";");
1:         if (parameterSeparator != -1) {
1:             if (parameterSeparator < subTypePart.length() - 1) {
1:                 parameterPart = contentType.substring(subTypeSeparator + 1).toLowerCase().trim();
1:             }
1:             subTypePart = subTypePart.substring(0, parameterSeparator).trim();
1:         }
1: 
1:         if (subTypePart.isEmpty()) {
1:             throw new InvalidContentTypeException("Content type has no subtype after '/'" + contentType);
1:         }
1: 
1:         final String subType = subTypePart;
1: 
1:         if (isTextual(type, subType)) {
1:             String charset = findCharset(parameterPart);
1:             if (charset == null) {
1:                 charset = UTF_8;
1:             }
1: 
1:             if (UTF_8.equals(charset)) {
1:                 return StandardCharsets.UTF_8;
1:             } else {
1:                 try {
1:                     return Charset.forName(charset);
1:                 } catch (IllegalCharsetNameException icne) {
1:                     throw new InvalidContentTypeException("Illegal charset: " + charset);
1:                 } catch (UnsupportedCharsetException uce) {
1:                     throw new InvalidContentTypeException("Unsupported charset: " + charset);
1:                 }
1:             }
1:         }
1: 
1:         return null;
1:     }
1: 
1:     //----- Internal Content Type utilities ----------------------------------//
1: 
1:     private static boolean isTextual(String type, String subType) {
1:         if (TEXT.equals(type)) {
1:             return true;
1:         }
1: 
1:         if (APPLICATION.equals(type)) {
1:             if (XML.equals(subType) || JSON.equals(subType) || JAVASCRIPT.equals(subType) || subType.endsWith(XML_VARIANT) || subType.endsWith(JSON_VARIANT)
1:                 || XML_DTD.equals(subType) || ECMASCRIPT.equals(subType)) {
1:                 return true;
1:             }
1:         }
1: 
1:         return false;
1:     }
1: 
1:     private static String findCharset(String paramaterPart) {
1:         String charset = null;
1: 
1:         if (paramaterPart != null) {
1:             StringTokenizer tokenizer = new StringTokenizer(paramaterPart, ";");
1:             while (tokenizer.hasMoreTokens()) {
1:                 String parameter = tokenizer.nextToken().trim();
1:                 int eqIndex = parameter.indexOf('=');
1:                 if (eqIndex != -1) {
1:                     String name = parameter.substring(0, eqIndex);
1:                     if (CHARSET.equalsIgnoreCase(name.trim())) {
1:                         String value = unquote(parameter.substring(eqIndex + 1));
1: 
1:                         charset = value.toUpperCase();
1:                         break;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         return charset;
1:     }
1: 
1:     private static String unquote(String s) {
1:         if (s.length() > 1 && (s.startsWith("\"") && s.endsWith("\""))) {
1:             return s.substring(1, s.length() - 1);
1:         } else {
1:             return s;
1:         }
1:     }
1: }
============================================================================