2:5a5056e: /**
1:5a5056e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a5056e:  * contributor license agreements.  See the NOTICE file distributed with
1:5a5056e:  * this work for additional information regarding copyright ownership.
1:5a5056e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a5056e:  * (the "License"); you may not use this file except in compliance with
1:5a5056e:  * the License.  You may obtain a copy of the License at
1:b514d3f:  *
1:5a5056e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:5a5056e:  * Unless required by applicable law or agreed to in writing, software
1:5a5056e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a5056e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a5056e:  * See the License for the specific language governing permissions and
1:5a5056e:  * limitations under the License.
2:5a5056e:  */
1:5a5056e: package org.apache.activemq.web;
2:17e0b00: 
1:93ccd9f: import java.util.ArrayList;
1:93ccd9f: import java.util.Collection;
1:93ccd9f: import java.util.Collections;
1:93ccd9f: import java.util.Iterator;
1:93ccd9f: import java.util.List;
1:b514d3f: import java.util.Set;
1:0d58477: 
1:ac3d088: import javax.management.InstanceNotFoundException;
1:0d58477: import javax.management.ObjectName;
1:0d58477: import javax.management.QueryExp;
1:17e0b00: import javax.management.openmbean.CompositeData;
1:17e0b00: import javax.management.openmbean.TabularData;
1:ebcab05: 
1:0d58477: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.ConnectionViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.ManagementContext;
1:0d58477: import org.apache.activemq.broker.jmx.NetworkBridgeViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.NetworkConnectorViewMBean;
1:ac3d088: import org.apache.activemq.broker.jmx.ProducerViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1:0d58477: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:b64b8ba: import org.apache.activemq.web.util.ExceptionUtils;
1:b514d3f: import org.springframework.util.StringUtils;
1:b514d3f: 
1:b514d3f: /**
1:5a5056e:  * A useful base class for an implementation of {@link BrokerFacade}
1:0d58477:  *
1:0d58477:  *
1:b514d3f:  */
1:5a5056e: public abstract class BrokerFacadeSupport implements BrokerFacade {
1:5a5056e:     public abstract ManagementContext getManagementContext();
1:1f35514:     public abstract Set queryNames(ObjectName name, QueryExp query) throws Exception;
1:1f35514:     public abstract Object newProxyInstance( ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) throws Exception;
1:17e0b00: 
1:0d58477:     @Override
1:b514d3f:     public Collection<QueueViewMBean> getQueues() throws Exception {
1:5a5056e:         BrokerViewMBean broker = getBrokerAdmin();
1:5a5056e:         if (broker == null) {
1:5a5056e:             return Collections.EMPTY_LIST;
10:93ccd9f:         }
1:5a5056e:         ObjectName[] queues = broker.getQueues();
1:5a5056e:         return getManagedObjects(queues, QueueViewMBean.class);
1:b514d3f:     }
1:3c4848b: 
1:0d58477:     @Override
1:b514d3f:     public Collection<TopicViewMBean> getTopics() throws Exception {
1:5a5056e:         BrokerViewMBean broker = getBrokerAdmin();
1:5a5056e:         if (broker == null) {
1:5a5056e:             return Collections.EMPTY_LIST;
1:93ccd9f:         }
1:ae2504a:         ObjectName[] topics = broker.getTopics();
1:ae2504a:         return getManagedObjects(topics, TopicViewMBean.class);
1:ae2504a:     }
1:ae2504a: 
1:ae2504a:     @Override
1:ae2504a:     public Collection<SubscriptionViewMBean> getTopicSubscribers(String topicName) throws Exception {
1:ae2504a:         String brokerName = getBrokerName();
1:ae2504a:         topicName = StringUtils.replace(topicName, "\"", "_");
1:ae2504a:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:ae2504a:                 + ",destinationType=Topic,destinationName=" + topicName + ",endpoint=Consumer,*");
1:ae2504a:         Set<ObjectName> queryResult = queryNames(query, null);
1:ae2504a:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:ae2504a:     }
1:ae2504a: 
1:ae2504a:     @Override
1:ae2504a:     public Collection<SubscriptionViewMBean> getNonDurableTopicSubscribers() throws Exception {
1:ae2504a:         BrokerViewMBean broker = getBrokerAdmin();
1:ae2504a:         if (broker == null) {
1:ae2504a:             return Collections.EMPTY_LIST;
1:ae2504a:         }
1:ae2504a:         ObjectName[] subscribers = broker.getTopicSubscribers();
1:ae2504a:         return getManagedObjects(subscribers, SubscriptionViewMBean.class);
1:93ccd9f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     public Collection<DurableSubscriptionViewMBean> getDurableTopicSubscribers() throws Exception {
1:5a5056e:         BrokerViewMBean broker = getBrokerAdmin();
1:5a5056e:         if (broker == null) {
1:5a5056e:             return Collections.EMPTY_LIST;
1:93ccd9f:         }
1:ae2504a:         ObjectName[] subscribers = broker.getDurableTopicSubscribers();
1:ae2504a:         return getManagedObjects(subscribers, DurableSubscriptionViewMBean.class);
1:93ccd9f:     }
1:b514d3f: 
1:0d58477:     @Override
1:4fc1712:     public Collection<DurableSubscriptionViewMBean> getInactiveDurableTopicSubscribers() throws Exception {
1:4fc1712:         BrokerViewMBean broker = getBrokerAdmin();
1:4fc1712:         if (broker == null) {
1:4fc1712:             return Collections.EMPTY_LIST;
1:4fc1712:         }
1:ae2504a:         ObjectName[] subscribers = broker.getInactiveDurableTopicSubscribers();
1:ae2504a:         return getManagedObjects(subscribers, DurableSubscriptionViewMBean.class);
1:4fc1712:     }
1:4fc1712: 
1:0d58477:     @Override
1:5a5056e:     public QueueViewMBean getQueue(String name) throws Exception {
1:5a5056e:         return (QueueViewMBean) getDestinationByName(getQueues(), name);
1:93ccd9f:     }
1:b514d3f: 
1:0d58477:     @Override
1:5a5056e:     public TopicViewMBean getTopic(String name) throws Exception {
1:5a5056e:         return (TopicViewMBean) getDestinationByName(getTopics(), name);
1:b514d3f:     }
1:b514d3f: 
1:93ccd9f:     protected DestinationViewMBean getDestinationByName(Collection<? extends DestinationViewMBean> collection,
1:93ccd9f:             String name) {
1:b514d3f:         Iterator<? extends DestinationViewMBean> iter = collection.iterator();
1:b514d3f:         while (iter.hasNext()) {
1:ac3d088:             try {
1:ac3d088:                 DestinationViewMBean destinationViewMBean = iter.next();
1:ac3d088:                 if (name.equals(destinationViewMBean.getName())) {
1:ac3d088:                     return destinationViewMBean;
1:ac3d088:                 }
1:ac3d088:             } catch (Exception ex) {
1:b64b8ba:                 if (!ExceptionUtils.isRootCause(ex, InstanceNotFoundException.class)) {
1:ac3d088:                     // Only throw if not an expected InstanceNotFoundException exception
1:ac3d088:                     throw ex;
1:ac3d088:                 }
1:b514d3f:             }
1:b514d3f:         }
1:b514d3f:         return null;
1:b514d3f:     }
1:b514d3f: 
1:b514d3f:     @SuppressWarnings("unchecked")
1:1f35514:     protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) throws Exception {
1:b514d3f:         List<T> answer = new ArrayList<T>();
1:b514d3f:         for (int i = 0; i < names.length; i++) {
1:b514d3f:             ObjectName name = names[i];
1:1f35514:             T value = (T) newProxyInstance(name, type, true);
1:b514d3f:             if (value != null) {
1:b514d3f:                 answer.add(value);
1:b514d3f:             }
1:b514d3f:         }
1:b514d3f:         return answer;
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:b514d3f:     public Collection<ConnectionViewMBean> getConnections() throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:8ab1c8d:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=clientConnectors,connectorName=*,connectionName=*");
1:92b4d68: 
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:93ccd9f:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ConnectionViewMBean.class);
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:93ccd9f:     public Collection<String> getConnections(String connectorName) throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:4cbd91d:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:0d58477:             + ",connector=clientConnectors,connectorName=" + connectorName + ",connectionViewType=clientId" + ",connectionName=*");        Set<ObjectName> queryResult = queryNames(query, null);
1:b514d3f:         Collection<String> result = new ArrayList<String>(queryResult.size());
1:b514d3f:         for (ObjectName on : queryResult) {
1:4cbd91d:             String name = StringUtils.replace(on.getKeyProperty("connectionName"), "_", ":");
1:b514d3f:             result.add(name);
1:b514d3f:         }
1:b514d3f:         return result;
1:b514d3f:     }
1:d0a1a00: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:93ccd9f:     public ConnectionViewMBean getConnection(String connectionName) throws Exception {
1:b514d3f:         connectionName = StringUtils.replace(connectionName, ":", "_");
1:b514d3f:         String brokerName = getBrokerName();
1:4cbd91d:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:4cbd91d:                 + ",connector=clientConnectors,*,connectionName=" + connectionName);
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:b514d3f:         if (queryResult.size() == 0)
1:b514d3f:             return null;
1:b514d3f:         ObjectName objectName = queryResult.iterator().next();
1:1f35514:         return (ConnectionViewMBean) newProxyInstance(objectName, ConnectionViewMBean.class,
1:17e0b00:                 true);
1:b514d3f:     }
1:d0a1a00: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:b514d3f:     public Collection<String> getConnectors() throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:4cbd91d:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=clientConnectors,connectorName=*");
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:b514d3f:         Collection<String> result = new ArrayList<String>(queryResult.size());
1:b514d3f:         for (ObjectName on : queryResult)
1:4cbd91d:             result.add(on.getKeyProperty("connectorName"));
1:b514d3f:         return result;
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     public ConnectorViewMBean getConnector(String name) throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:4cbd91d:         ObjectName objectName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:4cbd91d:                 + ",connector=clientConnectors,connectorName=" + name);
1:1f35514:         return (ConnectorViewMBean) newProxyInstance(objectName, ConnectorViewMBean.class, true);
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:93ccd9f:     public Collection<NetworkConnectorViewMBean> getNetworkConnectors() throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:351a339:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=networkConnectors,networkConnectorName=*");
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:93ccd9f:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]),
1:93ccd9f:                 NetworkConnectorViewMBean.class);
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:ebcab05:     public Collection<NetworkBridgeViewMBean> getNetworkBridges() throws Exception {
1:ebcab05:         String brokerName = getBrokerName();
1:351a339:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=networkConnectors,networkConnectorName=*,networkBridge=*");
1:ebcab05:         Set<ObjectName> queryResult = queryNames(query, null);
1:ebcab05:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]),
1:ebcab05:                 NetworkBridgeViewMBean.class);
1:ebcab05:     }
1:ebcab05: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:93ccd9f:     public Collection<SubscriptionViewMBean> getQueueConsumers(String queueName) throws Exception {
1:b514d3f:         String brokerName = getBrokerName();
1:fed39c3:         queueName = StringUtils.replace(queueName, "\"", "_");
1:603dc66:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:603dc66:                 + ",destinationType=Queue,destinationName=" + queueName + ",endpoint=Consumer,*");
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:93ccd9f:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:b514d3f:     @SuppressWarnings("unchecked")
1:db1e3fc:     public Collection<ProducerViewMBean> getQueueProducers(String queueName) throws Exception {
1:db1e3fc:         String brokerName = getBrokerName();
1:db1e3fc:         queueName = StringUtils.replace(queueName, "\"", "_");
1:db1e3fc:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:db1e3fc:                 + ",destinationType=Queue,destinationName=" + queueName + ",endpoint=Producer,*");
1:db1e3fc:         Set<ObjectName> queryResult = queryNames(query, null);
1:db1e3fc:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ProducerViewMBean.class);
1:db1e3fc:     }
1:db1e3fc: 
1:db1e3fc:     @Override
1:db1e3fc:     @SuppressWarnings("unchecked")
1:db1e3fc:     public Collection<ProducerViewMBean> getTopicProducers(String topicName) throws Exception {
1:db1e3fc:         String brokerName = getBrokerName();
1:db1e3fc:         topicName = StringUtils.replace(topicName, "\"", "_");
1:db1e3fc:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:db1e3fc:                 + ",destinationType=Topic,destinationName=" + topicName + ",endpoint=Producer,*");
1:db1e3fc:         Set<ObjectName> queryResult = queryNames(query, null);
1:db1e3fc:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ProducerViewMBean.class);
1:db1e3fc:     }
1:db1e3fc: 
1:db1e3fc:     @Override
1:db1e3fc:     @SuppressWarnings("unchecked")
1:93ccd9f:     public Collection<SubscriptionViewMBean> getConsumersOnConnection(String connectionName) throws Exception {
1:b514d3f:         connectionName = StringUtils.replace(connectionName, ":", "_");
1:b514d3f:         String brokerName = getBrokerName();
1:f4f033c:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:f4f033c:                 + ",*,endpoint=Consumer,clientId=" + connectionName);
1:1f35514:         Set<ObjectName> queryResult = queryNames(query, null);
1:93ccd9f:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:b514d3f:     }
1:b514d3f: 
1:0d58477:     @Override
1:17e0b00:     public JobSchedulerViewMBean getJobScheduler() throws Exception {
1:17e0b00:         ObjectName name = getBrokerAdmin().getJMSJobScheduler();
1:1f35514:         return (JobSchedulerViewMBean) newProxyInstance(name, JobSchedulerViewMBean.class, true);
1:17e0b00:     }
1:b514d3f: 
1:0d58477:     @Override
1:17e0b00:     public Collection<JobFacade> getScheduledJobs() throws Exception {
1:17e0b00:         JobSchedulerViewMBean jobScheduler = getJobScheduler();
1:17e0b00:         List<JobFacade> result = new ArrayList<JobFacade>();
1:17e0b00:         TabularData table = jobScheduler.getAllJobs();
1:17e0b00:         for (Object object : table.values()) {
1:17e0b00:             CompositeData cd = (CompositeData) object;
1:17e0b00:             JobFacade jf = new JobFacade(cd);
1:17e0b00:             result.add(jf);
1:17e0b00:         }
1:17e0b00:         return result;
1:17e0b00:     }
1:b514d3f: 
1:b514d3f: 
1:0d58477:     @Override
1:d0a1a00:     public boolean isJobSchedulerStarted() {
1:d0a1a00:         try {
1:d0a1a00:             JobSchedulerViewMBean jobScheduler = getJobScheduler();
1:d0a1a00:             return true;
1:d0a1a00:         } catch (Exception e) {
1:d0a1a00:             return false;
1:3c4848b:         }
1:d0a1a00:     }
1:d0a1a00: }
============================================================================
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:b64b8ba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.web.util.ExceptionUtils;
/////////////////////////////////////////////////////////////////////////
1:                 if (!ExceptionUtils.isRootCause(ex, InstanceNotFoundException.class)) {
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ac3d088
/////////////////////////////////////////////////////////////////////////
1: import javax.management.InstanceNotFoundException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.ProducerViewMBean;
0: import org.apache.commons.lang.exception.ExceptionUtils;
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 DestinationViewMBean destinationViewMBean = iter.next();
1:                 if (name.equals(destinationViewMBean.getName())) {
1:                     return destinationViewMBean;
1:                 }
1:             } catch (Exception ex) {
0:                 Class<InstanceNotFoundException> infe = InstanceNotFoundException.class;
0:                 if (!infe.isInstance(ex) && !infe.isInstance(ExceptionUtils.getRootCause(ex))) {
1:                     // Only throw if not an expected InstanceNotFoundException exception
1:                     throw ex;
1:                 }
author:artnaseef
-------------------------------------------------------------------------------
commit:ae2504a
/////////////////////////////////////////////////////////////////////////
1:         ObjectName[] topics = broker.getTopics();
1:         return getManagedObjects(topics, TopicViewMBean.class);
1:     }
1: 
1:     @Override
1:     public Collection<SubscriptionViewMBean> getTopicSubscribers(String topicName) throws Exception {
1:         String brokerName = getBrokerName();
1:         topicName = StringUtils.replace(topicName, "\"", "_");
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",destinationType=Topic,destinationName=" + topicName + ",endpoint=Consumer,*");
1:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:     }
1: 
1:     @Override
1:     public Collection<SubscriptionViewMBean> getNonDurableTopicSubscribers() throws Exception {
1:         BrokerViewMBean broker = getBrokerAdmin();
1:         if (broker == null) {
1:             return Collections.EMPTY_LIST;
1:         }
1:         ObjectName[] subscribers = broker.getTopicSubscribers();
1:         return getManagedObjects(subscribers, SubscriptionViewMBean.class);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName[] subscribers = broker.getDurableTopicSubscribers();
1:         return getManagedObjects(subscribers, DurableSubscriptionViewMBean.class);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName[] subscribers = broker.getInactiveDurableTopicSubscribers();
1:         return getManagedObjects(subscribers, DurableSubscriptionViewMBean.class);
commit:db1e3fc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.ProducerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     public Collection<ProducerViewMBean> getQueueProducers(String queueName) throws Exception {
1:         String brokerName = getBrokerName();
1:         queueName = StringUtils.replace(queueName, "\"", "_");
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",destinationType=Queue,destinationName=" + queueName + ",endpoint=Producer,*");
1:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ProducerViewMBean.class);
1:     }
1: 
1:     @Override
1:     @SuppressWarnings("unchecked")
1:     public Collection<ProducerViewMBean> getTopicProducers(String topicName) throws Exception {
1:         String brokerName = getBrokerName();
1:         topicName = StringUtils.replace(topicName, "\"", "_");
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",destinationType=Topic,destinationName=" + topicName + ",endpoint=Producer,*");
1:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ProducerViewMBean.class);
1:     }
1: 
1:     @Override
1:     @SuppressWarnings("unchecked")
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0d58477
/////////////////////////////////////////////////////////////////////////
1: 
1: import javax.management.ObjectName;
1: import javax.management.QueryExp;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.ConnectionViewMBean;
1: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.broker.jmx.NetworkBridgeViewMBean;
1: import org.apache.activemq.broker.jmx.NetworkConnectorViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:  *
1:  *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             + ",connector=clientConnectors,connectorName=" + connectorName + ",connectionViewType=clientId" + ",connectionName=*");        Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8ab1c8d
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=clientConnectors,connectorName=*,connectionName=*");
commit:351a339
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=networkConnectors,networkConnectorName=*");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=networkConnectors,networkConnectorName=*,networkBridge=*");
commit:f4f033c
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",*,endpoint=Consumer,clientId=" + connectionName);
commit:4cbd91d
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
0:                 + ",connector=clientConnectors,connectorName=" + connectorName + ",connectionName=*");
1:             String name = StringUtils.replace(on.getKeyProperty("connectionName"), "_", ":");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",connector=clientConnectors,*,connectionName=" + connectionName);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName + ",connector=clientConnectors,connectorName=*");
1:             result.add(on.getKeyProperty("connectorName"));
1:         ObjectName objectName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",connector=clientConnectors,connectorName=" + name);
commit:603dc66
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName
1:                 + ",destinationType=Queue,destinationName=" + queueName + ",endpoint=Consumer,*");
commit:3c4848b
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isSlave() throws Exception {
0:         return getBrokerAdmin().isSlave();
1:     }
commit:92b4d68
/////////////////////////////////////////////////////////////////////////
0: import javax.management.*;
/////////////////////////////////////////////////////////////////////////
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=Connection,ConnectorName=*,Connection=*");
1: 
/////////////////////////////////////////////////////////////////////////
0:                 + ",Type=Connection,ConnectorName=" + connectorName + ",Connection=*");
commit:ebcab05
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.activemq.broker.jmx.*;
/////////////////////////////////////////////////////////////////////////
1:     public Collection<NetworkBridgeViewMBean> getNetworkBridges() throws Exception {
1:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=NetworkBridge,*");
1:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]),
1:                 NetworkBridgeViewMBean.class);
1:     }
1: 
commit:d0a1a00
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public boolean isJobSchedulerStarted() {
1:         try {
1:             JobSchedulerViewMBean jobScheduler = getJobScheduler();
1:             return true;
1:         } catch (Exception e) {
1:             return false;
1:         }
1:     }
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1:     public Collection<DurableSubscriptionViewMBean> getInactiveDurableTopicSubscribers() throws Exception {
1:         BrokerViewMBean broker = getBrokerAdmin();
1:         if (broker == null) {
1:             return Collections.EMPTY_LIST;
1:         }
0:         ObjectName[] queues = broker.getInactiveDurableTopicSubscribers();
0:         return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
1:     }
1: 
commit:1f35514
/////////////////////////////////////////////////////////////////////////
0: import javax.management.QueryExp;
/////////////////////////////////////////////////////////////////////////
1:     public abstract Set queryNames(ObjectName name, QueryExp query) throws Exception;
1:     public abstract Object newProxyInstance( ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) throws Exception {
1:             T value = (T) newProxyInstance(name, type, true);
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return (ConnectionViewMBean) newProxyInstance(objectName, ConnectionViewMBean.class,
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
1:         return (ConnectorViewMBean) newProxyInstance(objectName, ConnectorViewMBean.class, true);
1:         Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> queryResult = queryNames(query, null);
/////////////////////////////////////////////////////////////////////////
0:         Set<ObjectName> queryResult = queryNames(query, null);
1:         return (JobSchedulerViewMBean) newProxyInstance(name, JobSchedulerViewMBean.class, true);
commit:fed39c3
/////////////////////////////////////////////////////////////////////////
1:         queueName = StringUtils.replace(queueName, "\"", "_");
commit:b514d3f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
0: import javax.management.MBeanServerConnection;
0: import org.apache.activemq.broker.jmx.ConnectionViewMBean;
0: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.NetworkConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1: import org.springframework.util.StringUtils;
/////////////////////////////////////////////////////////////////////////
1:     public Collection<QueueViewMBean> getQueues() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public Collection<TopicViewMBean> getTopics() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public Collection<DurableSubscriptionViewMBean> getDurableTopicSubscribers() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     protected DestinationViewMBean getDestinationByName(
0: 			Collection<? extends DestinationViewMBean> collection, String name) {
1: 		Iterator<? extends DestinationViewMBean> iter = collection.iterator();
1: 		while (iter.hasNext()) {
0: 			DestinationViewMBean destinationViewMBean = iter.next();
0: 			if (name.equals(destinationViewMBean.getName())) {
0: 				return destinationViewMBean;
1: 			}
1: 		}
1: 		return null;
1: 	}
1:     @SuppressWarnings("unchecked")
0: 	protected <T> Collection<T> getManagedObjects(ObjectName[] names,
0: 			Class<T> type) {
1: 		List<T> answer = new ArrayList<T>();
0: 		MBeanServer mbeanServer = getManagementContext().getMBeanServer();
0: 		if (mbeanServer != null) {
1: 			for (int i = 0; i < names.length; i++) {
1: 				ObjectName name = names[i];
0: 				T value = (T) MBeanServerInvocationHandler.newProxyInstance(
0: 						mbeanServer, name, type, true);
1: 				if (value != null) {
1: 					answer.add(value);
1: 				}
1: 			}
1: 		}
1: 		return answer;
1: 	}
1: 
1:     
1:     /**
0: 	 * Get the MBeanServer connection.
1: 	 * 
0: 	 * @return not <code>null</code>
0: 	 * @throws Exception
1: 	 */
0: 	protected MBeanServerConnection getMBeanServerConnection() throws Exception {
0: 		return getManagementContext().getMBeanServer();
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	public Collection<ConnectionViewMBean> getConnections() throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=Connection,*");
0: 		System.out.println(query);
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
0: 		return getManagedObjects(queryResult.toArray(new ObjectName[queryResult
0: 				.size()]), ConnectionViewMBean.class);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	public Collection<String> getConnections(String connectorName)
0: 			throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=Connection,ConnectorName="
0: 				+ connectorName + ",*");
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
1: 
1: 		Collection<String> result = new ArrayList<String>(queryResult.size());
1: 		for (ObjectName on : queryResult) {
0: 			String name = StringUtils.replace(on.getKeyProperty("Connection"),
0: 					"_", ":");
1: 			result.add(name);
1: 		}
1: 		return result;
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	public ConnectionViewMBean getConnection(String connectionName)
0: 			throws Exception {
1: 		connectionName = StringUtils.replace(connectionName, ":", "_");
1: 
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=Connection,*,Connection="
0: 				+ connectionName);
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
1: 		if (queryResult.size() == 0)
1: 			return null;
1: 		ObjectName objectName = queryResult.iterator().next();
0: 		return (ConnectionViewMBean) MBeanServerInvocationHandler
0: 				.newProxyInstance(connection, objectName,
0: 						ConnectionViewMBean.class, true);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	public Collection<String> getConnectors() throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=Connector,*");
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
1: 
1: 		Collection<String> result = new ArrayList<String>(queryResult.size());
1: 		for (ObjectName on : queryResult)
0: 			result.add(on.getKeyProperty("ConnectorName"));
1: 		return result;
1: 	}
1: 
1: 	public ConnectorViewMBean getConnector(String name) throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName objectName = new ObjectName(
0: 				"org.apache.activemq:BrokerName=" + brokerName
0: 						+ ",Type=Connector,ConnectorName=" + name);
0: 		return (ConnectorViewMBean) MBeanServerInvocationHandler
0: 				.newProxyInstance(connection, objectName,
0: 						ConnectorViewMBean.class, true);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	public Collection<NetworkConnectorViewMBean> getNetworkConnectors()
0: 			throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=NetworkConnector,*");
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
0: 		return getManagedObjects(queryResult.toArray(new ObjectName[queryResult
0: 				.size()]), NetworkConnectorViewMBean.class);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	public Collection<SubscriptionViewMBean> getQueueConsumers(String queueName)
0: 			throws Exception {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName
0: 				+ ",Type=Subscription,destinationType=Queue,destinationName="
0: 				+ queueName + ",*");
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
0: 		return getManagedObjects(queryResult.toArray(new ObjectName[queryResult
0: 				.size()]), SubscriptionViewMBean.class);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	public Collection<SubscriptionViewMBean> getConsumersOnConnection(
0: 			String connectionName) throws Exception {
1: 		connectionName = StringUtils.replace(connectionName, ":", "_");
1: 
0: 		MBeanServerConnection connection = getMBeanServerConnection();
1: 		String brokerName = getBrokerName();
0: 		ObjectName query = new ObjectName("org.apache.activemq:BrokerName="
0: 				+ brokerName + ",Type=Subscription,clientId=" + connectionName
0: 				+ ",*");
0: 		Set<ObjectName> queryResult = connection.queryNames(query, null);
0: 		return getManagedObjects(queryResult.toArray(new ObjectName[queryResult
0: 				.size()]), SubscriptionViewMBean.class);
1: 	}
1:     
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:17e0b00
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
0: import org.apache.activemq.broker.jmx.ConnectionViewMBean;
0: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.DestinationViewMBean;
0: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.broker.jmx.NetworkConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.TopicViewMBean;
0: import org.springframework.util.StringUtils;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return (ConnectionViewMBean) getManagementContext().newProxyInstance(objectName, ConnectionViewMBean.class,
1:                 true);
/////////////////////////////////////////////////////////////////////////
0:         return (ConnectorViewMBean) getManagementContext().newProxyInstance(objectName, ConnectorViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public JobSchedulerViewMBean getJobScheduler() throws Exception {
1:         ObjectName name = getBrokerAdmin().getJMSJobScheduler();
0:         return (JobSchedulerViewMBean) getManagementContext().newProxyInstance(name, JobSchedulerViewMBean.class, true);
1:     }
1: 
1:     public Collection<JobFacade> getScheduledJobs() throws Exception {
1:         JobSchedulerViewMBean jobScheduler = getJobScheduler();
1:         List<JobFacade> result = new ArrayList<JobFacade>();
1:         TabularData table = jobScheduler.getAllJobs();
1:         for (Object object : table.values()) {
1:             CompositeData cd = (CompositeData) object;
1:             JobFacade jf = new JobFacade(cd);
1:             result.add(jf);
1:         }
1:         return result;
1:     }
commit:93ccd9f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
0: import java.util.Set;
0: import javax.management.ObjectName;
0:  * 
/////////////////////////////////////////////////////////////////////////
1:     protected DestinationViewMBean getDestinationByName(Collection<? extends DestinationViewMBean> collection,
1:             String name) {
0:         Iterator<? extends DestinationViewMBean> iter = collection.iterator();
0:         while (iter.hasNext()) {
0:             DestinationViewMBean destinationViewMBean = iter.next();
0:             if (name.equals(destinationViewMBean.getName())) {
0:                 return destinationViewMBean;
1:             }
1:         }
0:         return null;
1:     }
0:     protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) {
0:         List<T> answer = new ArrayList<T>();
0:         for (int i = 0; i < names.length; i++) {
0:             ObjectName name = names[i];
0:             T value = (T) getManagementContext().newProxyInstance(name, type, true);
0:             if (value != null) {
0:                 answer.add(value);
1:             }
1:         }
0:         return answer;
1:     }
0:    
0:     @SuppressWarnings("unchecked")
0:     public Collection<ConnectionViewMBean> getConnections() throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=Connection,*");
0:         System.out.println(query);
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), ConnectionViewMBean.class);
1:     }
0:     @SuppressWarnings("unchecked")
1:     public Collection<String> getConnections(String connectorName) throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName
0:                 + ",Type=Connection,ConnectorName=" + connectorName + ",*");
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
0:         Collection<String> result = new ArrayList<String>(queryResult.size());
0:         for (ObjectName on : queryResult) {
0:             String name = StringUtils.replace(on.getKeyProperty("Connection"), "_", ":");
0:             result.add(name);
1:         }
0:         return result;
1:     }
0:     @SuppressWarnings("unchecked")
1:     public ConnectionViewMBean getConnection(String connectionName) throws Exception {
0:         connectionName = StringUtils.replace(connectionName, ":", "_");
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName
0:                 + ",Type=Connection,*,Connection=" + connectionName);
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
0:         if (queryResult.size() == 0)
0:             return null;
0:         ObjectName objectName = queryResult.iterator().next();
0:         return (ConnectionViewMBean) getManagementContext().newProxyInstance(objectName,
0:                 ConnectionViewMBean.class, true);
1:     }
0:     @SuppressWarnings("unchecked")
0:     public Collection<String> getConnectors() throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=Connector,*");
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
0:         Collection<String> result = new ArrayList<String>(queryResult.size());
0:         for (ObjectName on : queryResult)
0:             result.add(on.getKeyProperty("ConnectorName"));
0:         return result;
1:     }
0:     public ConnectorViewMBean getConnector(String name) throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName objectName = new ObjectName("org.apache.activemq:BrokerName=" + brokerName
0:                 + ",Type=Connector,ConnectorName=" + name);
0:         return (ConnectorViewMBean) getManagementContext().newProxyInstance(objectName,
0:                 ConnectorViewMBean.class, true);
1:     }
0:     @SuppressWarnings("unchecked")
1:     public Collection<NetworkConnectorViewMBean> getNetworkConnectors() throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=NetworkConnector,*");
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]),
1:                 NetworkConnectorViewMBean.class);
1:     }
0:     @SuppressWarnings("unchecked")
1:     public Collection<SubscriptionViewMBean> getQueueConsumers(String queueName) throws Exception {
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName
0:                 + ",Type=Subscription,destinationType=Queue,destinationName=" + queueName + ",*");
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:     }
0:     @SuppressWarnings("unchecked")
1:     public Collection<SubscriptionViewMBean> getConsumersOnConnection(String connectionName) throws Exception {
0:         connectionName = StringUtils.replace(connectionName, ":", "_");
0:         String brokerName = getBrokerName();
0:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName
0:                 + ",Type=Subscription,clientId=" + connectionName + ",*");
0:         Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
1:         return getManagedObjects(queryResult.toArray(new ObjectName[queryResult.size()]), SubscriptionViewMBean.class);
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
0: 
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
0: 
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
0: import org.apache.activemq.broker.jmx.DestinationViewMBean;
0: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.jmx.TopicViewMBean;
0: 
1: /**
1:  * A useful base class for an implementation of {@link BrokerFacade}
0:  *
0:  * @version $Revision$
1:  */
1: public abstract class BrokerFacadeSupport implements BrokerFacade {
1:     public abstract ManagementContext getManagementContext();
0: 
0:     public Collection<Object> getQueues() throws Exception {
1:         BrokerViewMBean broker = getBrokerAdmin();
1:         if (broker == null) {
1:             return Collections.EMPTY_LIST;
0:         }
1:         ObjectName[] queues = broker.getQueues();
1:         return getManagedObjects(queues, QueueViewMBean.class);
0:     }
0: 
0:     public Collection<Object> getTopics() throws Exception {
1:         BrokerViewMBean broker = getBrokerAdmin();
1:         if (broker == null) {
1:             return Collections.EMPTY_LIST;
0:         }
0:         ObjectName[] queues = broker.getTopics();
0:         return getManagedObjects(queues, TopicViewMBean.class);
0:     }
0: 
0:     public Collection<Object> getDurableTopicSubscribers() throws Exception {
1:         BrokerViewMBean broker = getBrokerAdmin();
1:         if (broker == null) {
1:             return Collections.EMPTY_LIST;
0:         }
0:         ObjectName[] queues = broker.getDurableTopicSubscribers();
0:         return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
0:     }
0: 
1:     public QueueViewMBean getQueue(String name) throws Exception {
1:         return (QueueViewMBean) getDestinationByName(getQueues(), name);
0:     }
0: 
1:     public TopicViewMBean getTopic(String name) throws Exception {
1:         return (TopicViewMBean) getDestinationByName(getTopics(), name);
0:     }
0: 
0:     protected DestinationViewMBean getDestinationByName(Collection<Object> collection, String name) {
0:         Iterator<Object> iter = collection.iterator();
0:         while (iter.hasNext()) {
0:             DestinationViewMBean destinationViewMBean = (DestinationViewMBean) iter.next();
0:             if (name.equals(destinationViewMBean.getName())) {
0:                 return destinationViewMBean;
0:             }
0:         }
0:         return null;
0:     }
0: 
0:     protected Collection<Object> getManagedObjects(ObjectName[] names, Class type) {
0:         List<Object> answer = new ArrayList<Object>();
0:         MBeanServer mbeanServer = getManagementContext().getMBeanServer();
0:         if (mbeanServer != null) {
0:             for (int i = 0; i < names.length; i++) {
0:                 ObjectName name = names[i];
0:                 Object value = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, type, true);
0:                 if (value != null) {
0:                     answer.add(value);
0:                 }
0:             }
0:         }
0:         return answer;
0:     }
0: }
============================================================================