1:8f4ebbb: /**
1:8f4ebbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f4ebbb:  * contributor license agreements.  See the NOTICE file distributed with
1:8f4ebbb:  * this work for additional information regarding copyright ownership.
1:8f4ebbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f4ebbb:  * (the "License"); you may not use this file except in compliance with
1:8f4ebbb:  * the License.  You may obtain a copy of the License at
1:8f4ebbb:  *
1:8f4ebbb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f4ebbb:  *
1:8f4ebbb:  * Unless required by applicable law or agreed to in writing, software
1:8f4ebbb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f4ebbb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f4ebbb:  * See the License for the specific language governing permissions and
1:8f4ebbb:  * limitations under the License.
1:8f4ebbb:  */
1:8f4ebbb: package org.apache.activemq.broker.inteceptor;
1:8f4ebbb: 
1:8f4ebbb: import java.util.Set;
1:8f4ebbb: 
1:8f4ebbb: import org.apache.activemq.broker.Broker;
1:8f4ebbb: import org.apache.activemq.broker.BrokerFilter;
1:8f4ebbb: import org.apache.activemq.broker.ConnectionContext;
1:8f4ebbb: import org.apache.activemq.broker.ProducerBrokerExchange;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQDestination;
1:8f4ebbb: import org.apache.activemq.command.Message;
1:8f4ebbb: import org.apache.activemq.command.ProducerInfo;
1:8f4ebbb: import org.apache.activemq.filter.DestinationMap;
1:8f4ebbb: import org.apache.activemq.state.ProducerState;
1:8f4ebbb: 
1:8f4ebbb: class MessageInterceptorFilter extends BrokerFilter {
1:8f4ebbb:     private DestinationMap interceptorMap = new DestinationMap();
1:8f4ebbb: 
1:8f4ebbb:     MessageInterceptorFilter(Broker next) {
1:8f4ebbb:         super(next);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     MessageInterceptor addMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:8f4ebbb:         return messageInterceptor;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     void removeMessageInterceptor(String destinationName, MessageInterceptor interceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:         interceptorMap.remove(activeMQDestination, interceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     MessageInterceptor addMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:8f4ebbb:         return messageInterceptor;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     void removeMessageInterceptorForQueue(String destinationName, MessageInterceptor interceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:         interceptorMap.remove(activeMQDestination, interceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     MessageInterceptor addMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.TOPIC_TYPE);
1:8f4ebbb:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:8f4ebbb:         return messageInterceptor;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     void removeMessageInterceptorForTopic(String destinationName, MessageInterceptor interceptor) {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.TOPIC_TYPE);
1:8f4ebbb:         interceptorMap.remove(activeMQDestination, interceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     MessageInterceptor addMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:8f4ebbb:         return messageInterceptor;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     void removeMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor interceptor) {
1:8f4ebbb:         interceptorMap.remove(activeMQDestination, interceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     /**
1:8f4ebbb:      * Re-inject into the Broker chain
1:8f4ebbb:      */
1:8f4ebbb: 
1:8f4ebbb:     void injectMessage(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:8f4ebbb:         ProducerBrokerExchange pe = producerExchange;
1:8f4ebbb:         if (pe == null) {
1:8f4ebbb:             pe = new ProducerBrokerExchange();
1:8f4ebbb:             ConnectionContext cc = new ConnectionContext();
1:8f4ebbb:             cc.setBroker(this.getRoot());
1:8f4ebbb:             pe.setConnectionContext(cc);
1:8f4ebbb:             pe.setMutable(true);
1:8f4ebbb:             pe.setProducerState(new ProducerState(new ProducerInfo()));
1:8f4ebbb:         }
1:8f4ebbb:         super.send(pe, messageSend);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     @Override
1:8f4ebbb:     public void send(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = messageSend.getDestination();
1:8f4ebbb:         if (!interceptorMap.isEmpty() && activeMQDestination != null) {
1:8f4ebbb:             Set<MessageInterceptor> set = interceptorMap.get(activeMQDestination);
1:8f4ebbb:             if (set != null && !set.isEmpty()) {
1:8f4ebbb:                 for (MessageInterceptor mi : set) {
1:8f4ebbb:                     mi.intercept(producerExchange, messageSend);
1:8f4ebbb:                 }
1:8f4ebbb:             } else {
1:8f4ebbb:                 super.send(producerExchange, messageSend);
1:8f4ebbb:             }
1:8f4ebbb: 
1:8f4ebbb:         } else {
1:8f4ebbb:             super.send(producerExchange, messageSend);
1:8f4ebbb:         }
1:8f4ebbb:     }
1:8f4ebbb: }
============================================================================
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.inteceptor;
1: 
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.state.ProducerState;
1: 
1: class MessageInterceptorFilter extends BrokerFilter {
1:     private DestinationMap interceptorMap = new DestinationMap();
1: 
1:     MessageInterceptorFilter(Broker next) {
1:         super(next);
1:     }
1: 
1: 
1:     MessageInterceptor addMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:         return messageInterceptor;
1:     }
1: 
1:     void removeMessageInterceptor(String destinationName, MessageInterceptor interceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:         interceptorMap.remove(activeMQDestination, interceptor);
1:     }
1: 
1: 
1:     MessageInterceptor addMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:         return messageInterceptor;
1:     }
1: 
1:     void removeMessageInterceptorForQueue(String destinationName, MessageInterceptor interceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:         interceptorMap.remove(activeMQDestination, interceptor);
1:     }
1: 
1: 
1:     MessageInterceptor addMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.TOPIC_TYPE);
1:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:         return messageInterceptor;
1:     }
1: 
1:     void removeMessageInterceptorForTopic(String destinationName, MessageInterceptor interceptor) {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.TOPIC_TYPE);
1:         interceptorMap.remove(activeMQDestination, interceptor);
1:     }
1: 
1:     MessageInterceptor addMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor messageInterceptor) {
1:         interceptorMap.put(activeMQDestination, messageInterceptor);
1:         return messageInterceptor;
1:     }
1: 
1:     void removeMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor interceptor) {
1:         interceptorMap.remove(activeMQDestination, interceptor);
1:     }
1: 
1: 
1:     /**
1:      * Re-inject into the Broker chain
1:      */
1: 
1:     void injectMessage(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:         ProducerBrokerExchange pe = producerExchange;
1:         if (pe == null) {
1:             pe = new ProducerBrokerExchange();
1:             ConnectionContext cc = new ConnectionContext();
1:             cc.setBroker(this.getRoot());
1:             pe.setConnectionContext(cc);
1:             pe.setMutable(true);
1:             pe.setProducerState(new ProducerState(new ProducerInfo()));
1:         }
1:         super.send(pe, messageSend);
1:     }
1: 
1: 
1:     @Override
1:     public void send(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:         ActiveMQDestination activeMQDestination = messageSend.getDestination();
1:         if (!interceptorMap.isEmpty() && activeMQDestination != null) {
1:             Set<MessageInterceptor> set = interceptorMap.get(activeMQDestination);
1:             if (set != null && !set.isEmpty()) {
1:                 for (MessageInterceptor mi : set) {
1:                     mi.intercept(producerExchange, messageSend);
1:                 }
1:             } else {
1:                 super.send(producerExchange, messageSend);
1:             }
1: 
1:         } else {
1:             super.send(producerExchange, messageSend);
1:         }
1:     }
1: }
============================================================================