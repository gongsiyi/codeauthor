1:078a101: /**
1:078a101:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:078a101:  * contributor license agreements.  See the NOTICE file distributed with
1:078a101:  * this work for additional information regarding copyright ownership.
1:078a101:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:078a101:  * (the "License"); you may not use this file except in compliance with
1:078a101:  * the License.  You may obtain a copy of the License at
1:078a101:  *
1:078a101:  *      http://www.apache.org/licenses/LICENSE-2.0
1:078a101:  *
1:078a101:  * Unless required by applicable law or agreed to in writing, software
1:078a101:  * distributed under the License is distributed on an "AS IS" BASIS,
1:078a101:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:078a101:  * See the License for the specific language governing permissions and
1:078a101:  * limitations under the License.
1:078a101:  */
1:078a101: package org.apache.activemq.bugs;
1:078a101: 
1:078a101: import static org.junit.Assert.assertNotNull;
1:078a101: import static org.junit.Assert.assertNull;
1:078a101: 
1:078a101: import javax.jms.Destination;
1:078a101: import javax.jms.JMSException;
1:078a101: import javax.jms.MessageConsumer;
1:078a101: import javax.jms.MessageProducer;
1:078a101: import javax.jms.Session;
1:078a101: import javax.management.MalformedObjectNameException;
1:078a101: import javax.management.ObjectName;
1:078a101: 
1:078a101: import org.apache.activemq.ActiveMQConnection;
1:078a101: import org.apache.activemq.ActiveMQConnectionFactory;
1:078a101: import org.apache.activemq.broker.BrokerService;
1:078a101: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:078a101: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:078a101: import org.apache.activemq.broker.region.policy.PolicyMap;
1:078a101: import org.junit.After;
1:078a101: import org.junit.Before;
1:078a101: import org.junit.Rule;
1:078a101: import org.junit.Test;
1:078a101: import org.junit.rules.TestName;
1:078a101: import org.slf4j.Logger;
1:078a101: import org.slf4j.LoggerFactory;
1:078a101: 
1:078a101: /**
1:078a101:  * Test for AMQ-6000 issue with pause / resume feature.
1:078a101:  */
1:078a101: public class AMQ6000Test {
1:078a101: 
1:6541bef:     private static Logger LOG = LoggerFactory.getLogger(AMQ6000Test.class);
1:078a101: 
1:078a101:     private ActiveMQConnection connection;
1:078a101:     private BrokerService broker;
1:078a101:     private String connectionUri;
1:078a101: 
1:078a101:     @Rule
1:078a101:     public TestName name = new TestName();
1:078a101: 
1:078a101:     @Before
1:078a101:     public void setUp() throws Exception {
1:078a101:         broker = new BrokerService();
1:078a101:         broker.setUseJmx(true);
1:078a101:         broker.setPersistent(false);
1:078a101: 
1:078a101:         PolicyMap policyMap = new PolicyMap();
1:078a101:         PolicyEntry defaultEntry = new PolicyEntry();
1:078a101:         defaultEntry.setExpireMessagesPeriod(0);
1:078a101:         defaultEntry.setUseCache(false);
1:078a101:         policyMap.setDefaultEntry(defaultEntry);
1:078a101: 
1:078a101:         broker.setDestinationPolicy(policyMap);
1:078a101:         broker.addConnector("tcp://localhost:0");
1:078a101:         broker.start();
1:078a101:         broker.waitUntilStarted();
1:078a101: 
1:078a101:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:078a101: 
1:078a101:         connection = createConnection();
1:078a101:     }
1:078a101: 
1:078a101:     @After
1:078a101:     public void tearDown() throws Exception {
1:078a101:         if (connection != null) {
1:078a101:             try {
1:078a101:                 connection.close();
1:078a101:             } catch (Exception e) {}
1:078a101:         }
1:078a101: 
1:078a101:         if (broker != null) {
1:078a101:             broker.stop();
1:078a101:             broker.waitUntilStopped();
1:078a101:         }
1:078a101:     }
1:078a101: 
1:078a101:     @Test(timeout = 30000)
1:078a101:     public void testResumeNotDispatching() throws Exception {
1:078a101:         sendMessage();
1:078a101: 
1:078a101:         connection.start();
1:078a101: 
1:078a101:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:078a101:         Destination destination = session.createQueue(name.getMethodName());
1:078a101: 
1:078a101:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:078a101:         LOG.info("Pausing Queue");
1:078a101:         queueView.pause();
1:078a101: 
1:078a101:         MessageConsumer consumer = session.createConsumer(destination);
1:078a101:         assertNull(consumer.receive(100));
1:078a101: 
1:078a101:         LOG.info("Resuming Queue");
1:078a101:         queueView.resume();
1:078a101: 
1:078a101:         assertNotNull(consumer.receive(2000));
1:078a101:     }
1:078a101: 
1:078a101:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:078a101:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:078a101:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:078a101:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:078a101:         return proxy;
1:078a101:     }
1:078a101: 
1:078a101:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:078a101:         return new ActiveMQConnectionFactory(connectionUri);
1:078a101:     }
1:078a101: 
1:078a101:     protected ActiveMQConnection createConnection() throws Exception {
1:078a101:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:078a101:     }
1:078a101: 
1:078a101:     private void sendMessage() throws Exception {
1:078a101:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:078a101:         Destination destination = session.createQueue(name.getMethodName());
1:078a101:         MessageProducer producer = session.createProducer(destination);
1:078a101:         producer.send(session.createMessage());
1:078a101:         session.close();
1:078a101:     }
1:078a101: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6541bef
/////////////////////////////////////////////////////////////////////////
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ6000Test.class);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:078a101
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test for AMQ-6000 issue with pause / resume feature.
1:  */
1: public class AMQ6000Test {
1: 
0:     private static Logger LOG = LoggerFactory.getLogger(AMQ5921Test.class);
1: 
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setPersistent(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         defaultEntry.setUseCache(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testResumeNotDispatching() throws Exception {
1:         sendMessage();
1: 
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1: 
1:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:         LOG.info("Pausing Queue");
1:         queueView.pause();
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         assertNull(consumer.receive(100));
1: 
1:         LOG.info("Resuming Queue");
1:         queueView.resume();
1: 
1:         assertNotNull(consumer.receive(2000));
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
1: 
1:     private void sendMessage() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createMessage());
1:         session.close();
1:     }
1: }
commit:0c72e5d
commit:848adc4
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.bugs;
0: 
0: import javax.jms.BytesMessage;
0: import javax.jms.DeliveryMode;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class AMQ6000Test {
0: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6000Test.class);
0: 
0:     private BrokerService brokerService;
0:     private String connectionUri;
0: 
0:     @Before
0:     public void setUp() throws Exception {
0:         brokerService = new BrokerService();
0:         brokerService.setPersistent(false);
0:         brokerService.setUseJmx(false);
0:         brokerService.addConnector("nio://0.0.0.0:0?"
0:             + "wireFormat.maxInactivityDurationInitalDelay=1000&wireFormat.maxInactivityDuration=300");
0:         brokerService.start();
0: 
0:         connectionUri = brokerService.getTransportConnectorByScheme("nio").getPublishableConnectString();
0:     }
0: 
0:     @After
0:     public void tearDown() throws Exception {
0:         brokerService.stop();
0:         brokerService.waitUntilStopped();
0:     }
0: 
0:     @Test
0:     public void testReadCounter() throws Exception {
0:         LOG.info("Connecting to: {}", connectionUri);
0: 
0:         byte[] payload = new byte[50 * 1024 * 1024];
0: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?useInactivityMonitor=false");
0:         final ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
0:         connection.start();
0: 
0:         LOG.info("Connected to: {}", connection.getTransport());
0: 
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Queue queue = session.createQueue("test");
0:         MessageProducer producer = session.createProducer(queue);
0:         BytesMessage message = session.createBytesMessage();
0: 
0:         message.writeBytes(payload);
0: 
0:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
0:         producer.send(message);
0: 
0:         connection.close();
0:     }
0: }
============================================================================