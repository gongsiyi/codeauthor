1:e7703f7: /**
1:e7703f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e7703f7:  * contributor license agreements.  See the NOTICE file distributed with
1:e7703f7:  * this work for additional information regarding copyright ownership.
1:e7703f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e7703f7:  * (the "License"); you may not use this file except in compliance with
1:e7703f7:  * the License.  You may obtain a copy of the License at
1:e7703f7:  *
1:e7703f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e7703f7:  *
1:e7703f7:  * Unless required by applicable law or agreed to in writing, software
1:e7703f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e7703f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e7703f7:  * See the License for the specific language governing permissions and
1:e7703f7:  * limitations under the License.
1:e7703f7:  */
1:e7703f7: package org.apache.activemq.state;
1:e7703f7: 
1:e7703f7: import static org.junit.Assert.assertEquals;
1:e7703f7: import static org.junit.Assert.assertTrue;
1:e7703f7: 
1:e7703f7: import java.io.IOException;
1:e7703f7: import java.util.UUID;
1:e7703f7: 
1:e7703f7: import org.apache.activemq.command.ActiveMQQueue;
1:e7703f7: import org.apache.activemq.command.ConnectionId;
1:e7703f7: import org.apache.activemq.command.ConsumerId;
1:e7703f7: import org.apache.activemq.command.MessagePull;
1:e7703f7: import org.apache.activemq.command.SessionId;
1:e7703f7: import org.junit.After;
1:e7703f7: import org.junit.Before;
1:e7703f7: import org.junit.Test;
1:e7703f7: 
1:e7703f7: public class ConnectionStateTrackerTest {
1:e7703f7: 
1:e7703f7:     private final ActiveMQQueue queue = new ActiveMQQueue("Test");
1:e7703f7:     private ConnectionId testConnectionId;
1:e7703f7:     private SessionId testSessionId;
1:e7703f7: 
1:e7703f7:     private int connectionId = 0;
1:e7703f7:     private int sessionId = 0;
1:e7703f7:     private int consumerId = 0;
1:e7703f7: 
1:e7703f7:     @Before
1:e7703f7:     public void setUp() throws Exception {
1:e7703f7:         testConnectionId = createConnectionId();
1:e7703f7:         testSessionId = createSessionId(testConnectionId);
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     @After
1:e7703f7:     public void tearDown() throws Exception {
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     @Test
1:e7703f7:     public void testCacheSizeWithMessagePulls() throws IOException {
1:e7703f7: 
1:e7703f7:         final ConsumerId consumer1 = createConsumerId(testSessionId);
1:e7703f7: 
1:e7703f7:         ConnectionStateTracker tracker = new ConnectionStateTracker();
1:e7703f7: 
1:e7703f7:         assertEquals(0, tracker.getCurrentCacheSize());
1:e7703f7: 
1:e7703f7:         MessagePull pullCommand = createPullCommand(consumer1);
1:e7703f7:         tracker.track(pullCommand);
1:e7703f7: 
1:e7703f7:         assertEquals(0, tracker.getCurrentCacheSize());
1:e7703f7: 
1:e7703f7:         tracker.trackBack(pullCommand);
1:e7703f7:         long currentSize = tracker.getCurrentCacheSize();
1:e7703f7: 
1:e7703f7:         assertTrue(currentSize > 0);
1:e7703f7: 
1:e7703f7:         pullCommand = createPullCommand(consumer1);
1:e7703f7:         tracker.track(pullCommand);
1:e7703f7:         tracker.trackBack(pullCommand);
1:e7703f7: 
1:e7703f7:         assertEquals(currentSize, tracker.getCurrentCacheSize());
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     private MessagePull createPullCommand(ConsumerId id) {
1:e7703f7:         MessagePull pullCommand = new MessagePull();
1:e7703f7:         pullCommand.setDestination(queue);
1:e7703f7:         pullCommand.setConsumerId(id);
1:e7703f7:         return pullCommand;
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     private ConnectionId createConnectionId() {
1:e7703f7:         ConnectionId id = new ConnectionId();
1:e7703f7:         id.setValue(UUID.randomUUID() + ":" + connectionId++);
1:e7703f7:         return id;
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     private SessionId createSessionId(ConnectionId connectionId) {
1:e7703f7:         return new SessionId(connectionId, sessionId++);
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     private ConsumerId createConsumerId(SessionId sessionId) {
1:e7703f7:         return new ConsumerId(sessionId, consumerId++);
1:e7703f7:     }
1:e7703f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e7703f7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.state;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.util.UUID;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.SessionId;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class ConnectionStateTrackerTest {
1: 
1:     private final ActiveMQQueue queue = new ActiveMQQueue("Test");
1:     private ConnectionId testConnectionId;
1:     private SessionId testSessionId;
1: 
1:     private int connectionId = 0;
1:     private int sessionId = 0;
1:     private int consumerId = 0;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         testConnectionId = createConnectionId();
1:         testSessionId = createSessionId(testConnectionId);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:     }
1: 
1:     @Test
1:     public void testCacheSizeWithMessagePulls() throws IOException {
1: 
1:         final ConsumerId consumer1 = createConsumerId(testSessionId);
1: 
1:         ConnectionStateTracker tracker = new ConnectionStateTracker();
1: 
1:         assertEquals(0, tracker.getCurrentCacheSize());
1: 
1:         MessagePull pullCommand = createPullCommand(consumer1);
1:         tracker.track(pullCommand);
1: 
1:         assertEquals(0, tracker.getCurrentCacheSize());
1: 
1:         tracker.trackBack(pullCommand);
1:         long currentSize = tracker.getCurrentCacheSize();
1: 
1:         assertTrue(currentSize > 0);
1: 
1:         pullCommand = createPullCommand(consumer1);
1:         tracker.track(pullCommand);
1:         tracker.trackBack(pullCommand);
1: 
1:         assertEquals(currentSize, tracker.getCurrentCacheSize());
1:     }
1: 
1:     private MessagePull createPullCommand(ConsumerId id) {
1:         MessagePull pullCommand = new MessagePull();
1:         pullCommand.setDestination(queue);
1:         pullCommand.setConsumerId(id);
1:         return pullCommand;
1:     }
1: 
1:     private ConnectionId createConnectionId() {
1:         ConnectionId id = new ConnectionId();
1:         id.setValue(UUID.randomUUID() + ":" + connectionId++);
1:         return id;
1:     }
1: 
1:     private SessionId createSessionId(ConnectionId connectionId) {
1:         return new SessionId(connectionId, sessionId++);
1:     }
1: 
1:     private ConsumerId createConsumerId(SessionId sessionId) {
1:         return new ConsumerId(sessionId, consumerId++);
1:     }
1: }
============================================================================