2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.security;
31:d29ca2a: 
1:9c75fe7: import java.lang.management.ManagementFactory;
1:74a7a8b: import java.net.URL;
1:3dbc9c9: import java.security.Principal;
1:74a7a8b: import java.util.Arrays;
1:74a7a8b: import java.util.HashMap;
1:74a7a8b: import java.util.HashSet;
1:3dbc9c9: import java.util.Map;
1:3dbc9c9: import java.util.Set;
1:74a7a8b: 
1:74a7a8b: import junit.framework.Test;
1:094f007: import org.apache.activemq.CombinationTestSupport;
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:4686ec5: import org.apache.activemq.broker.BrokerPlugin;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.filter.DestinationMap;
1:c1f5c77: import org.apache.activemq.jaas.GroupPrincipal;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:9c75fe7: import javax.jms.*;
1:9c75fe7: import javax.management.MBeanServer;
1:9c75fe7: import javax.management.MalformedObjectNameException;
1:9c75fe7: import javax.management.ObjectName;
1:9c75fe7: import javax.management.openmbean.CompositeData;
1:9c75fe7: 
1:d29ca2a: /**
1:d29ca2a:  * Tests that the broker allows/fails access to destinations based on the
1:d29ca2a:  * security policy installed on the broker.
1:3dbc9c9:  *
1:3dbc9c9:  *
1:d29ca2a:  */
1:4686ec5: public class SimpleSecurityBrokerSystemTest extends SecurityTestSupport {
1:0525772:     private static final Logger LOG = LoggerFactory.getLogger(SimpleSecurityBrokerSystemTest.class);
1:d29ca2a: 
1:7646526:     public static final GroupPrincipal GUESTS = new GroupPrincipal("guests");
1:7646526:     public static final GroupPrincipal USERS = new GroupPrincipal("users");
1:7646526:     public static final GroupPrincipal ADMINS = new GroupPrincipal("admins");
1:7646526:     public static Principal WILDCARD;
1:0525772:     static {
1:0525772:         try {
1:0525772:          WILDCARD = (Principal) DefaultAuthorizationMap.createGroupPrincipal("*", GroupPrincipal.class.getName());
1:0525772:         } catch (Exception e) {
1:0525772:             LOG.error("Failed to make wildcard principal", e);
1:0525772:         }
1:0525772:     }
1:d29ca2a: 
1:4686ec5:     public BrokerPlugin authorizationPlugin;
1:4686ec5:     public BrokerPlugin authenticationPlugin;
1:d29ca2a: 
1:d29ca2a:     static {
1:d29ca2a:         String path = System.getProperty("java.security.auth.login.config");
1:affd134:         if (path == null) {
1:d29ca2a:             URL resource = SimpleSecurityBrokerSystemTest.class.getClassLoader().getResource("login.config");
1:affd134:             if (resource != null) {
1:d29ca2a:                 path = resource.getFile();
1:d29ca2a:                 System.setProperty("java.security.auth.login.config", path);
35:d29ca2a:             }
1:d29ca2a:         }
1:fc00993:         LOG.info("Path to login config: " + path);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(SimpleSecurityBrokerSystemTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:9c75fe7:     /**
1:9c75fe7:      * @throws javax.jms.JMSException
1:9c75fe7:      */
1:9c75fe7:     public void testPopulateJMSXUserID() throws Exception {
1:9c75fe7:         destination = new ActiveMQQueue("TEST");
1:9c75fe7:         Connection connection = factory.createConnection("system", "manager");
1:9c75fe7:         connections.add(connection);
1:9c75fe7:         connection.start();
1:9c75fe7: 
1:9c75fe7:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9c75fe7:         sendMessages(session, destination, 1);
1:9c75fe7: 
1:9c75fe7:         // make sure that the JMSXUserID is exposed over JMX
1:9c75fe7:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:9c75fe7:         CompositeData[] browse = (CompositeData[]) mbs.invoke(new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"), "browse", null, null);
1:9c75fe7:         assertEquals("system", browse[0].get("JMSXUserID"));
1:9c75fe7: 
1:9c75fe7:         // And also via JMS.
1:9c75fe7:         MessageConsumer consumer = session.createConsumer(destination);
1:9c75fe7:         Message m = consumer.receive(1000);
1:fd67eef:         assertTrue(m.propertyExists("JMSXUserID"));
1:9c75fe7:         assertEquals("system",  m.getStringProperty("JMSXUserID"));
1:9c75fe7:     }
1:9c75fe7: 
1:affd134:     public static AuthorizationMap createAuthorizationMap() {
1:9a7443a:         DestinationMap readAccess = new DefaultAuthorizationMap();
1:fc00993:         readAccess.put(new ActiveMQQueue(">"), ADMINS);
1:fc00993:         readAccess.put(new ActiveMQQueue("USERS.>"), USERS);
1:fc00993:         readAccess.put(new ActiveMQQueue("GUEST.>"), GUESTS);
1:fc00993:         readAccess.put(new ActiveMQTopic(">"), ADMINS);
1:fc00993:         readAccess.put(new ActiveMQTopic("USERS.>"), USERS);
1:fc00993:         readAccess.put(new ActiveMQTopic("GUEST.>"), GUESTS);
1:d29ca2a: 
1:9a7443a:         DestinationMap writeAccess = new DefaultAuthorizationMap();
1:fc00993:         writeAccess.put(new ActiveMQQueue(">"), ADMINS);
1:fc00993:         writeAccess.put(new ActiveMQQueue("USERS.>"), USERS);
1:fc00993:         writeAccess.put(new ActiveMQQueue("GUEST.>"), USERS);
1:fc00993:         writeAccess.put(new ActiveMQQueue("GUEST.>"), GUESTS);
1:fc00993:         writeAccess.put(new ActiveMQTopic(">"), ADMINS);
1:fc00993:         writeAccess.put(new ActiveMQTopic("USERS.>"), USERS);
1:fc00993:         writeAccess.put(new ActiveMQTopic("GUEST.>"), USERS);
1:fc00993:         writeAccess.put(new ActiveMQTopic("GUEST.>"), GUESTS);
1:d29ca2a: 
1:0525772:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:0525772:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:d29ca2a: 
1:9a7443a:         DestinationMap adminAccess = new DefaultAuthorizationMap();
1:fc00993:         adminAccess.put(new ActiveMQTopic(">"), ADMINS);
1:fc00993:         adminAccess.put(new ActiveMQTopic(">"), USERS);
1:fc00993:         adminAccess.put(new ActiveMQTopic(">"), GUESTS);
1:fc00993:         adminAccess.put(new ActiveMQQueue(">"), ADMINS);
1:fc00993:         adminAccess.put(new ActiveMQQueue(">"), USERS);
1:fc00993:         adminAccess.put(new ActiveMQQueue(">"), GUESTS);
1:d29ca2a: 
1:9f59397:         return new SimpleAuthorizationMap(writeAccess, readAccess, adminAccess);
1:d29ca2a:     }
1:d29ca2a: 
1:7646526:     public static class SimpleAuthenticationFactory implements BrokerPlugin {
1:9f59397:         public Broker installPlugin(Broker broker) {
1:d29ca2a: 
1:933eb2f:             HashMap<String, String> u = new HashMap<String, String>();
1:d29ca2a:             u.put("system", "manager");
1:d29ca2a:             u.put("user", "password");
1:d29ca2a:             u.put("guest", "password");
1:d29ca2a: 
1:3dbc9c9:             Map<String, Set<Principal>> groups = new HashMap<String, Set<Principal>>();
1:3dbc9c9:             groups.put("system", new HashSet<Principal>(Arrays.asList(new Principal[] {ADMINS, USERS})));
1:3dbc9c9:             groups.put("user", new HashSet<Principal>(Arrays.asList(new Principal[] {USERS})));
1:3dbc9c9:             groups.put("guest", new HashSet<Principal>(Arrays.asList(new Principal[] {GUESTS})));
1:d29ca2a: 
1:d29ca2a:             return new SimpleAuthenticationBroker(broker, u, groups);
1:d29ca2a:         }
1:d29ca2a: 
3:d29ca2a:         public String toString() {
1:d29ca2a:             return "SimpleAuthenticationBroker";
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:d29ca2a:      */
1:d29ca2a:     public void initCombos() {
1:933eb2f:         addCombinationValues("authorizationPlugin",
1:933eb2f:                              new Object[] {new AuthorizationPlugin(createAuthorizationMap())});
1:933eb2f:         addCombinationValues("authenticationPlugin", new Object[] {new SimpleAuthenticationFactory(),
1:933eb2f:                                                                    new JaasAuthenticationPlugin()});
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:094f007:         BrokerService broker = super.createBroker();
1:9c75fe7:         broker.setPopulateJMSXUserID(true);
1:9c75fe7:         broker.setUseAuthenticatedPrincipalForJMSXUserID(true);
1:ecf89a6:         broker.setPlugins(new BrokerPlugin[] {authorizationPlugin, authenticationPlugin});
1:d29ca2a:         broker.setPersistent(false);
2:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:7646526
/////////////////////////////////////////////////////////////////////////
1:     public static final GroupPrincipal GUESTS = new GroupPrincipal("guests");
1:     public static final GroupPrincipal USERS = new GroupPrincipal("users");
1:     public static final GroupPrincipal ADMINS = new GroupPrincipal("admins");
1:     public static Principal WILDCARD;
/////////////////////////////////////////////////////////////////////////
1:     public static class SimpleAuthenticationFactory implements BrokerPlugin {
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:fd67eef
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(m.propertyExists("JMSXUserID"));
commit:9c75fe7
/////////////////////////////////////////////////////////////////////////
1: import java.lang.management.ManagementFactory;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
1: import javax.management.MBeanServer;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @throws javax.jms.JMSException
1:      */
1:     public void testPopulateJMSXUserID() throws Exception {
1:         destination = new ActiveMQQueue("TEST");
1:         Connection connection = factory.createConnection("system", "manager");
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         sendMessages(session, destination, 1);
1: 
1:         // make sure that the JMSXUserID is exposed over JMX
1:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:         CompositeData[] browse = (CompositeData[]) mbs.invoke(new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"), "browse", null, null);
1:         assertEquals("system", browse[0].get("JMSXUserID"));
1: 
1:         // And also via JMS.
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message m = consumer.receive(1000);
1:         assertEquals("system",  m.getStringProperty("JMSXUserID"));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker.setPopulateJMSXUserID(true);
1:         broker.setUseAuthenticatedPrincipalForJMSXUserID(true);
author:gtully
-------------------------------------------------------------------------------
commit:0525772
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleSecurityBrokerSystemTest.class);
0:     static Principal WILDCARD;
1:     static {
1:         try {
1:          WILDCARD = (Principal) DefaultAuthorizationMap.createGroupPrincipal("*", GroupPrincipal.class.getName());
1:         } catch (Exception e) {
1:             LOG.error("Failed to make wildcard principal", e);
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
1: import java.util.Map;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:             Map<String, Set<Principal>> groups = new HashMap<String, Set<Principal>>();
1:             groups.put("system", new HashSet<Principal>(Arrays.asList(new Principal[] {ADMINS, USERS})));
1:             groups.put("user", new HashSet<Principal>(Arrays.asList(new Principal[] {USERS})));
1:             groups.put("guest", new HashSet<Principal>(Arrays.asList(new Principal[] {GUESTS})));
author:Gary Tully
-------------------------------------------------------------------------------
commit:9a7443a
/////////////////////////////////////////////////////////////////////////
1:         DestinationMap readAccess = new DefaultAuthorizationMap();
/////////////////////////////////////////////////////////////////////////
1:         DestinationMap writeAccess = new DefaultAuthorizationMap();
/////////////////////////////////////////////////////////////////////////
1:         DestinationMap adminAccess = new DefaultAuthorizationMap();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SimpleSecurityBrokerSystemTest.class);
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, String> u = new HashMap<String, String>();
0:             HashMap<String, HashSet<Object>> groups = new HashMap<String, HashSet<Object>>();
0:             groups.put("system", new HashSet<Object>(Arrays.asList(new Object[] {ADMINS, USERS})));
0:             groups.put("user", new HashSet<Object>(Arrays.asList(new Object[] {USERS})));
0:             groups.put("guest", new HashSet<Object>(Arrays.asList(new Object[] {GUESTS})));
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("authorizationPlugin",
1:                              new Object[] {new AuthorizationPlugin(createAuthorizationMap())});
1:         addCombinationValues("authenticationPlugin", new Object[] {new SimpleAuthenticationFactory(),
1:                                                                    new JaasAuthenticationPlugin()});
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:             groups.put("system", new HashSet(Arrays.asList(new Object[] {ADMINS, USERS})));
0:             groups.put("user", new HashSet(Arrays.asList(new Object[] {USERS})));
0:             groups.put("guest", new HashSet(Arrays.asList(new Object[] {GUESTS})));
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("authorizationPlugin", new Object[] {new AuthorizationPlugin(createAuthorizationMap()),});
0:         addCombinationValues("authenticationPlugin", new Object[] {new SimpleAuthenticationFactory(), new JaasAuthenticationPlugin(),});
1:         broker.setPlugins(new BrokerPlugin[] {authorizationPlugin, authenticationPlugin});
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.MessageSendTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SimpleSecurityBrokerSystemTest.class);
0:     static final GroupPrincipal GUESTS = new GroupPrincipal("guests");
0:     static final GroupPrincipal USERS = new GroupPrincipal("users");
0:     static final GroupPrincipal ADMINS = new GroupPrincipal("admins");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Path to login config: " + path);
/////////////////////////////////////////////////////////////////////////
1:         readAccess.put(new ActiveMQQueue(">"), ADMINS);
1:         readAccess.put(new ActiveMQQueue("USERS.>"), USERS);
1:         readAccess.put(new ActiveMQQueue("GUEST.>"), GUESTS);
1:         readAccess.put(new ActiveMQTopic(">"), ADMINS);
1:         readAccess.put(new ActiveMQTopic("USERS.>"), USERS);
1:         readAccess.put(new ActiveMQTopic("GUEST.>"), GUESTS);
1:         writeAccess.put(new ActiveMQQueue(">"), ADMINS);
1:         writeAccess.put(new ActiveMQQueue("USERS.>"), USERS);
1:         writeAccess.put(new ActiveMQQueue("GUEST.>"), USERS);
1:         writeAccess.put(new ActiveMQQueue("GUEST.>"), GUESTS);
1:         writeAccess.put(new ActiveMQTopic(">"), ADMINS);
1:         writeAccess.put(new ActiveMQTopic("USERS.>"), USERS);
1:         writeAccess.put(new ActiveMQTopic("GUEST.>"), USERS);
1:         writeAccess.put(new ActiveMQTopic("GUEST.>"), GUESTS);
0:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), GUESTS);
0:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), USERS);
0:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), GUESTS);
0:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), USERS);
1:         adminAccess.put(new ActiveMQTopic(">"), ADMINS);
1:         adminAccess.put(new ActiveMQTopic(">"), USERS);
1:         adminAccess.put(new ActiveMQTopic(">"), GUESTS);
1:         adminAccess.put(new ActiveMQQueue(">"), ADMINS);
1:         adminAccess.put(new ActiveMQQueue(">"), USERS);
1:         adminAccess.put(new ActiveMQQueue(">"), GUESTS);
/////////////////////////////////////////////////////////////////////////
0:             groups.put("system", new HashSet(Arrays.asList(new Object[] { ADMINS, USERS })));
0:             groups.put("user", new HashSet(Arrays.asList(new Object[] { USERS })));
0:             groups.put("guest", new HashSet(Arrays.asList(new Object[] { GUESTS })));
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: 
1: import junit.framework.Test;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Path to login config: " + path);
commit:e6efdb1
/////////////////////////////////////////////////////////////////////////
0:             adminAccess.put(new ActiveMQTopic(">"), admins);
0:             adminAccess.put(new ActiveMQTopic(">"), users);
0:             adminAccess.put(new ActiveMQTopic(">"), guests);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:c1f5c77
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jaas.GroupPrincipal;
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import java.io.IOException;
0: import java.net.URL;
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: 
0: import junit.framework.Test;
1: 
0: import org.activemq.jaas.GroupPrincipal;
0: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.DestinationMap;
0: import org.apache.activemq.security.JaasAuthenticationBroker;
0: import org.apache.activemq.security.SimpleAuthenticationBroker;
0: import org.apache.activemq.security.SimpleAuthorizationBroker;
1: 
1: /**
1:  * Tests that the broker allows/fails access to destinations based on the
1:  * security policy installed on the broker.
1:  *
0:  * @version $Revision$
1:  */
0: public class SimpleSecurityBrokerSystemTest extends JmsTestSupport {
1: 
0:     static final GroupPrincipal guests = new GroupPrincipal("guests");
0:     static final GroupPrincipal users = new GroupPrincipal("users");
0:     static final GroupPrincipal admins = new GroupPrincipal("admins");
1: 
0:     public ActiveMQDestination destination;
0:     public SecurityFactory authorizationFactory;
0:     public SecurityFactory authenticationFactory;
1: 
0:     interface SecurityFactory {
0:         public  Broker create(Broker broker);
1:     }
1: 
0:     class SimpleAuthorizationFactory implements SecurityFactory {
0:         public  Broker create(Broker broker) {
1: 
0:             DestinationMap readAccess = new DestinationMap();
0:             readAccess.put(new ActiveMQQueue(">"), admins);
0:             readAccess.put(new ActiveMQQueue("USERS.>"), users);
0:             readAccess.put(new ActiveMQQueue("GUEST.>"), guests);
0:             readAccess.put(new ActiveMQTopic(">"), admins);
0:             readAccess.put(new ActiveMQTopic("USERS.>"), users);
0:             readAccess.put(new ActiveMQTopic("GUEST.>"), guests);
1: 
0:             DestinationMap writeAccess = new DestinationMap();
0:             writeAccess.put(new ActiveMQQueue(">"), admins);
0:             writeAccess.put(new ActiveMQQueue("USERS.>"), users);
0:             writeAccess.put(new ActiveMQQueue("GUEST.>"), users);
0:             writeAccess.put(new ActiveMQQueue("GUEST.>"), guests);
0:             writeAccess.put(new ActiveMQTopic(">"), admins);
0:             writeAccess.put(new ActiveMQTopic("USERS.>"), users);
0:             writeAccess.put(new ActiveMQTopic("GUEST.>"), users);
0:             writeAccess.put(new ActiveMQTopic("GUEST.>"), guests);
1: 
0:             readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), guests);
0:             readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), users);
0:             writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), guests);
0:             writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), users);
1: 
0:             DestinationMap adminAccess = new DestinationMap();
0:             adminAccess.put(new ActiveMQQueue(">"), admins);
0:             adminAccess.put(new ActiveMQQueue(">"), users);
0:             adminAccess.put(new ActiveMQQueue(">"), guests);
1: 
0:             return new SimpleAuthorizationBroker(broker, writeAccess, readAccess, adminAccess);
1:         }
1:         public String toString() {
0:             return "SimpleAuthorizationBroker";
1:         }
1:     }
1: 
0:     class SimpleAuthenticationFactory implements SecurityFactory {
0:         public  Broker create(Broker broker) {
1: 
0:             HashMap u = new HashMap();
1:             u.put("system", "manager");
1:             u.put("user", "password");
1:             u.put("guest", "password");
1: 
0:             HashMap groups = new HashMap();
0:             groups.put("system", new HashSet(Arrays.asList(new Object[]{admins, users})));
0:             groups.put("user", new HashSet(Arrays.asList(new Object[]{users})));
0:             groups.put("guest", new HashSet(Arrays.asList(new Object[]{guests})));
1: 
1:             return new SimpleAuthenticationBroker(broker, u, groups);
1:         }
1:         public String toString() {
1:             return "SimpleAuthenticationBroker";
1:         }
1:     }
1: 
1:     static {
1:         String path = System.getProperty("java.security.auth.login.config");
0:         if( path == null ) {
1:             URL resource = SimpleSecurityBrokerSystemTest.class.getClassLoader().getResource("login.config");
0:             if( resource!=null ) {
1:                 path = resource.getFile();
1:                 System.setProperty("java.security.auth.login.config", path);
1:             }
1:         }
0:         System.out.println("Path to login config: "+path);
1:     }
1: 
0:     class JaasAuthenticationFactory implements SecurityFactory {
0:         public  Broker create(Broker broker) {
0:             return new JaasAuthenticationBroker(broker, "activemq-test-domain");
1:         }
1:         public String toString() {
0:             return "JassAuthenticationBroker";
1:         }
1:     }
1: 
1:     public static Test suite() {
1:         return suite(SimpleSecurityBrokerSystemTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     public void initCombos() {
0:         addCombinationValues("authorizationFactory", new Object[] {
0:                 new SimpleAuthorizationFactory(),
0:         });
0:         addCombinationValues("authenticationFactory", new Object[] {
0:                 new SimpleAuthenticationFactory(),
0:                 new JaasAuthenticationFactory(),
0:         });
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
0:         BrokerService broker = new BrokerService() {
0:             protected Broker addInterceptors(Broker broker) throws IOException {
0:                 broker = super.addInterceptors(broker);
0:                 broker = authorizationFactory.create(broker);
0:                 broker = authenticationFactory.create(broker);
1:                 return broker;
1:             }
0:         };
1:         broker.setPersistent(false);
1:         return broker;
1:     }
1: 
0:     public void initCombosForTestUserReceiveFails() {
0:         addCombinationValues("userName", new Object[] {"user"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("TEST"),
0:                 new ActiveMQTopic("TEST"),
0:                 new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("GUEST.BAR"),
0:         });
1:     }
0:     public void testUserReceiveFails() throws JMSException {
0:         doReceive(true);
1:     }
1: 
1: 
0:     public void initCombosForTestInvalidAuthentication() {
0:         addCombinationValues("userName", new Object[] {"user"});
0:         addCombinationValues("password", new Object[] {"password"});
1:     }
0:     public void testInvalidAuthentication() throws JMSException {
0:         try {
0:             // No user id
0:             Connection c= factory.createConnection();
0:             connections.add(c);
0:             c.start();
0:             fail("Expected exception.");
0:         } catch (JMSException e) {
1:         }
1: 
0:         try {
0:             // Bad password
0:             Connection c = factory.createConnection("user", "krap");
0:             connections.add(c);
0:             c.start();
0:             fail("Expected exception.");
0:         } catch (JMSException e) {
1:         }
1: 
0:         try {
0:             // Bad userid
0:             Connection c = factory.createConnection("userkrap", null);
0:             connections.add(c);
0:             c.start();
0:             fail("Expected exception.");
0:         } catch (JMSException e) {
1:         }
1:     }
1: 
0:     public void initCombosForTestUserReceiveSucceeds() {
0:         addCombinationValues("userName", new Object[] {"user"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"),
0:         });
1:     }
0:     public void testUserReceiveSucceeds() throws JMSException {
0:         doReceive(false);
1:     }
1: 
1: 
0:     public void initCombosForTestGuestReceiveSucceeds() {
0:         addCombinationValues("userName", new Object[] {"guest"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("GUEST.BAR"),
0:         });
1:     }
0:     public void testGuestReceiveSucceeds() throws JMSException {
0:         doReceive(false);
1:     }
1: 
0:     public void initCombosForTestGuestReceiveFails() {
0:         addCombinationValues("userName", new Object[] {"guest"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("TEST"),
0:                 new ActiveMQTopic("TEST"),
0:                 new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"),
0:         });
1:     }
0:     public void testGuestReceiveFails() throws JMSException {
0:         doReceive(true);
1:     }
1: 
1: 
0:     public void initCombosForTestUserSendSucceeds() {
0:         addCombinationValues("userName", new Object[] {"user"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("USERS.FOO"),
0:                 new ActiveMQTopic("GUEST.BAR"),
0:         });
1:     }
0:     public void testUserSendSucceeds() throws JMSException {
0:         doSend(false);
1:     }
1: 
0:     public void initCombosForTestUserSendFails() {
0:         addCombinationValues("userName", new Object[] {"user"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("TEST"),
0:                 new ActiveMQTopic("TEST"),
0:         });
1:     }
0:     public void testUserSendFails() throws JMSException {
0:         doSend(true);
1:     }
1: 
1: 
0:     public void initCombosForTestGuestSendFails() {
0:         addCombinationValues("userName", new Object[] {"guest"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("TEST"),
0:                 new ActiveMQTopic("TEST"),
0:                 new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"),
0:         });
1:     }
0:     public void testGuestSendFails() throws JMSException {
0:         doSend(true);
1:     }
1: 
0:     public void initCombosForTestGuestSendSucceeds() {
0:         addCombinationValues("userName", new Object[] {"guest"});
0:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {
0:                 new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("GUEST.BAR"),
0:         });
1:     }
0:     public void testGuestSendSucceeds() throws JMSException {
0:         doSend(false);
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
0:     public void doSend(boolean fail) throws JMSException {
1: 
0:         Connection adminConnection = factory.createConnection("system", "manager");
0:         connections.add(adminConnection);
1: 
0:         adminConnection.start();
0:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = adminSession.createConsumer(destination);
1: 
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         try {
0:             sendMessages(session, destination, 1);
0:         } catch (JMSException e) {
0:             // If test is expected to fail, the cause must only be a SecurityException
0:             // otherwise rethrow the exception
0:             if (!fail || !(e.getCause() instanceof SecurityException)) {
0:             	throw e;
1:             }
1:         }
1: 
0:         Message m = consumer.receive(1000);
0:         if(fail)
0:             assertNull(m);
0:         else {
0:             assertNotNull(m);
0:             assertEquals("0", ((TextMessage)m).getText());
0:             assertNull(consumer.receiveNoWait());
1:         }
1: 
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
0:     public void doReceive(boolean fail) throws JMSException {
1: 
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer=null;
0:         try {
0:             consumer = session.createConsumer(destination);
0:             if( fail )
0:                 fail("Expected failure due to security constraint.");
0:         } catch (JMSException e) {
0:             if (fail && e.getCause() instanceof SecurityException)
0:                 return;
0:             throw e;
1:         }
1: 
0:         Connection adminConnection = factory.createConnection("system", "manager");
0:         connections.add(adminConnection);
0:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         sendMessages(adminSession, destination, 1);
1: 
0:         Message m = consumer.receive(1000);
0:         assertNotNull(m);
0:         assertEquals("0", ((TextMessage)m).getText());
0:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(SimpleSecurityBrokerSystemTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     static class SimpleAuthenticationFactory implements BrokerPlugin {
author:James Strachan
-------------------------------------------------------------------------------
commit:094f007
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.CombinationTestSupport;
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * @see {@link CombinationTestSupport}
0:      */
1:         BrokerService broker = super.createBroker();
commit:a8dfa1f
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("authenticationPlugin", new Object[] { new SimpleAuthenticationFactory(), new JaasAuthenticationPlugin(), });
commit:affd134
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:     static {
0:         String path = System.getProperty("java.security.auth.login.config");
1:         if (path == null) {
0:             URL resource = SimpleSecurityBrokerSystemTest.class.getClassLoader().getResource("login.config");
1:             if (resource != null) {
0:                 path = resource.getFile();
0:                 System.setProperty("java.security.auth.login.config", path);
0:             }
0:         }
0:         System.out.println("Path to login config: " + path);
0:     }
0: 
0:     public static Test suite() {
0:         return suite(SimpleSecurityBrokerSystemTest.class);
0:     }
0: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(suite());
0:     }
0: 
1:     public static AuthorizationMap createAuthorizationMap() {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9f59397
/////////////////////////////////////////////////////////////////////////
0:  * 
/////////////////////////////////////////////////////////////////////////
0:     public AuthorizationMap createAuthorizationMap() {
0:         DestinationMap readAccess = new DestinationMap();
0:         readAccess.put(new ActiveMQQueue(">"), admins);
0:         readAccess.put(new ActiveMQQueue("USERS.>"), users);
0:         readAccess.put(new ActiveMQQueue("GUEST.>"), guests);
0:         readAccess.put(new ActiveMQTopic(">"), admins);
0:         readAccess.put(new ActiveMQTopic("USERS.>"), users);
0:         readAccess.put(new ActiveMQTopic("GUEST.>"), guests);
0:         DestinationMap writeAccess = new DestinationMap();
0:         writeAccess.put(new ActiveMQQueue(">"), admins);
0:         writeAccess.put(new ActiveMQQueue("USERS.>"), users);
0:         writeAccess.put(new ActiveMQQueue("GUEST.>"), users);
0:         writeAccess.put(new ActiveMQQueue("GUEST.>"), guests);
0:         writeAccess.put(new ActiveMQTopic(">"), admins);
0:         writeAccess.put(new ActiveMQTopic("USERS.>"), users);
0:         writeAccess.put(new ActiveMQTopic("GUEST.>"), users);
0:         writeAccess.put(new ActiveMQTopic("GUEST.>"), guests);
0:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), guests);
0:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), users);
0:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), guests);
0:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), users);
0:         DestinationMap adminAccess = new DestinationMap();
0:         adminAccess.put(new ActiveMQTopic(">"), admins);
0:         adminAccess.put(new ActiveMQTopic(">"), users);
0:         adminAccess.put(new ActiveMQTopic(">"), guests);
0:         adminAccess.put(new ActiveMQQueue(">"), admins);
0:         adminAccess.put(new ActiveMQQueue(">"), users);
0:         adminAccess.put(new ActiveMQQueue(">"), guests);
1:         return new SimpleAuthorizationMap(writeAccess, readAccess, adminAccess);
1:         public Broker installPlugin(Broker broker) {
/////////////////////////////////////////////////////////////////////////
0:             groups.put("system", new HashSet(Arrays.asList(new Object[] { admins, users })));
0:             groups.put("user", new HashSet(Arrays.asList(new Object[] { users })));
0:             groups.put("guest", new HashSet(Arrays.asList(new Object[] { guests })));
0: 
/////////////////////////////////////////////////////////////////////////
0:         if (path == null) {
0:             if (resource != null) {
0:         System.out.println("Path to login config: " + path);
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("authorizationPlugin", new Object[] { new AuthorizationPlugin(createAuthorizationMap()), });
0:         addCombinationValues("authenticationPlugin", new Object[] { new SimpleAuthenticationFactory(), new JassAuthenticationPlugin(), });
0:         broker.setPlugins(new BrokerPlugin[] { authorizationPlugin, authenticationPlugin });
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("GUEST.BAR"), });
0: 
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0: 
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO"), });
0: 
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"), });
0: 
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"), });
0: 
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("USERS.FOO"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("USERS.FOO"),
0:                 new ActiveMQTopic("GUEST.BAR"), });
0: 
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), });
0: 
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"), });
0: 
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"), });
commit:4686ec5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.filter.DestinationMap;
0: import org.apache.activemq.jaas.GroupPrincipal;
0: 
1: public class SimpleSecurityBrokerSystemTest extends SecurityTestSupport {
1:     public BrokerPlugin authorizationPlugin;
1:     public BrokerPlugin authenticationPlugin;
0:     class SimpleAuthorizationFactory implements BrokerPlugin {
0:         public  Broker installPlugin(Broker broker) {
/////////////////////////////////////////////////////////////////////////
0:     class SimpleAuthenticationFactory implements BrokerPlugin {
0:         public  Broker installPlugin(Broker broker) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("authorizationPlugin", new Object[] {
0:         addCombinationValues("authenticationPlugin", new Object[] {
0:                 new JassAuthenticationPlugin(),
0:         BrokerService broker = new BrokerService();
0:         broker.setPlugins(new BrokerPlugin[] {authorizationPlugin, authenticationPlugin});
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================