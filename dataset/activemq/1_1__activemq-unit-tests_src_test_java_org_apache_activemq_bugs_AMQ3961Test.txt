1:3c39db8: /**
1:3c39db8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c39db8:  * contributor license agreements.  See the NOTICE file distributed with
1:3c39db8:  * this work for additional information regarding copyright ownership.
1:3c39db8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c39db8:  * (the "License"); you may not use this file except in compliance with
1:3c39db8:  * the License.  You may obtain a copy of the License at
1:3c39db8:  *
1:3c39db8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3c39db8:  *
1:3c39db8:  * Unless required by applicable law or agreed to in writing, software
1:3c39db8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c39db8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c39db8:  * See the License for the specific language governing permissions and
1:3c39db8:  * limitations under the License.
1:3c39db8:  */
1:3c39db8: package org.apache.activemq.bugs;
1:3c39db8: 
1:3c39db8: import static org.junit.Assert.assertEquals;
1:3c39db8: 
1:3c39db8: import java.util.Iterator;
1:3c39db8: import java.util.LinkedList;
1:3c39db8: import java.util.List;
1:3c39db8: 
1:3c39db8: import javax.jms.ConnectionConsumer;
1:3c39db8: import javax.jms.JMSException;
1:3c39db8: import javax.jms.Message;
1:3c39db8: import javax.jms.MessageListener;
1:3c39db8: import javax.jms.ServerSession;
1:3c39db8: import javax.jms.ServerSessionPool;
1:3c39db8: import javax.jms.Session;
1:3c39db8: import javax.jms.TopicConnection;
1:3c39db8: import javax.jms.TopicPublisher;
1:3c39db8: import javax.jms.TopicSession;
1:3c39db8: import javax.jms.TopicSubscriber;
1:3c39db8: 
1:3c39db8: import org.apache.activemq.ActiveMQConnectionFactory;
1:3c39db8: import org.apache.activemq.broker.BrokerService;
1:3c39db8: import org.apache.activemq.command.ActiveMQTopic;
1:3c39db8: import org.junit.After;
1:3c39db8: import org.junit.Before;
1:3c39db8: import org.junit.Test;
1:3c39db8: 
1:3c39db8: public class AMQ3961Test {
1:3c39db8: 
1:3c39db8:     private static BrokerService brokerService;
1:3c39db8:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:3c39db8: 
1:3c39db8:     private ActiveMQConnectionFactory connectionFactory;
1:3c39db8:     private String connectionUri;
1:3c39db8: 
1:3c39db8:     @Before
1:3c39db8:     public void setUp() throws Exception {
1:3c39db8:         brokerService = new BrokerService();
1:3c39db8:         brokerService.setPersistent(false);
1:3c39db8:         brokerService.setUseJmx(true);
1:3c39db8:         brokerService.setDeleteAllMessagesOnStartup(true);
1:3c39db8:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:3c39db8:         brokerService.start();
1:3c39db8:         brokerService.waitUntilStarted();
1:3c39db8: 
1:3c39db8:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:3c39db8:     }
1:3c39db8: 
1:3c39db8:     @After
1:3c39db8:     public void tearDown() throws Exception {
1:3c39db8:         brokerService.stop();
1:3c39db8:         brokerService.waitUntilStopped();
1:3c39db8:     }
1:3c39db8: 
1:3c39db8:     public class TestServerSessionPool implements ServerSessionPool {
1:3c39db8: 
1:5219fa1:         private final TopicConnection connection;
1:3c39db8: 
1:3c39db8:         public TestServerSessionPool(final TopicConnection connection) {
1:3c39db8:             this.connection = connection;
1:3c39db8:         }
1:3c39db8: 
1:3c39db8:         @Override
1:3c39db8:         public ServerSession getServerSession() throws JMSException {
1:3c39db8:             final TopicSession topicSession = connection.createTopicSession(true, Session.AUTO_ACKNOWLEDGE);
1:3c39db8:             return new TestServerSession(topicSession);
1:3c39db8:         }
1:3c39db8:     }
1:3c39db8: 
1:3c39db8:     public class TestServerSession implements ServerSession, MessageListener {
1:3c39db8: 
1:5219fa1:         private final TopicSession session;
1:3c39db8: 
1:3c39db8:         public TestServerSession(final TopicSession session) throws JMSException {
1:3c39db8:             this.session = session;
1:3c39db8:             session.setMessageListener(this);
1:3c39db8:         }
1:3c39db8: 
1:3c39db8:         @Override
1:3c39db8:         public Session getSession() throws JMSException {
1:3c39db8:             return session;
1:3c39db8:         }
1:3c39db8: 
1:3c39db8:         @Override
1:3c39db8:         public void start() throws JMSException {
1:3c39db8:             session.run();
1:3c39db8:         }
1:3c39db8: 
1:3c39db8:         @Override
1:3c39db8:         public void onMessage(final Message message) {
1:3c39db8:             synchronized (processedSessions) {
1:3c39db8:                 processedSessions.add(this);
1:3c39db8:             }
1:3c39db8:         }
1:3c39db8:     }
1:3c39db8: 
1:3c39db8:     public static final int MESSAGE_COUNT = 16;
1:5219fa1:     private final List<TestServerSession> processedSessions = new LinkedList<TestServerSession>();
1:5219fa1:     private final List<TestServerSession> committedSessions = new LinkedList<TestServerSession>();
1:3c39db8: 
1:3c39db8:     @Test
1:3c39db8:     public void testPrefetchInDurableSubscription() throws Exception {
1:3c39db8:         final ActiveMQTopic topic = new ActiveMQTopic("TestTopic");
1:3c39db8: 
1:3c39db8:         final TopicConnection initialSubConnection = connectionFactory.createTopicConnection();
1:3c39db8:         initialSubConnection.setClientID("TestClient");
1:3c39db8:         initialSubConnection.start();
1:3c39db8:         final TopicSession initialSubSession = initialSubConnection.createTopicSession(false, Session.CLIENT_ACKNOWLEDGE);
1:3c39db8:         final TopicSubscriber initialSubscriber = initialSubSession.createDurableSubscriber(topic, "TestSubscriber");
1:3c39db8: 
1:3c39db8:         initialSubscriber.close();
1:3c39db8:         initialSubSession.close();
1:3c39db8:         initialSubConnection.close();
1:3c39db8: 
1:3c39db8:         final TopicConnection publisherConnection = connectionFactory.createTopicConnection();
1:3c39db8:         publisherConnection.start();
1:3c39db8:         final TopicSession publisherSession = publisherConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3c39db8:         final TopicPublisher publisher = publisherSession.createPublisher(topic);
1:3c39db8:         for (int i = 1; i <= MESSAGE_COUNT; i++) {
1:3c39db8:             final Message msg = publisherSession.createTextMessage("Message #" + i);
1:3c39db8:             publisher.publish(msg);
1:3c39db8:         }
1:3c39db8:         publisher.close();
1:3c39db8:         publisherSession.close();
1:3c39db8:         publisherConnection.close();
1:3c39db8: 
1:3c39db8:         final TopicConnection connection = connectionFactory.createTopicConnection();
1:3c39db8:         connection.setClientID("TestClient");
1:3c39db8:         connection.start();
1:3c39db8:         final TestServerSessionPool pool = new TestServerSessionPool(connection);
1:3c39db8:         final ConnectionConsumer connectionConsumer = connection.createDurableConnectionConsumer(topic, "TestSubscriber", null, pool, 1);
1:3c39db8:         while (true) {
1:3c39db8:             int lastMsgCount = 0;
1:3c39db8:             int msgCount = 0;
1:3c39db8:             do {
1:3c39db8:                 lastMsgCount = msgCount;
1:3c39db8:                 Thread.sleep(200L);
1:3c39db8:                 synchronized (processedSessions) {
1:3c39db8:                     msgCount = processedSessions.size();
1:3c39db8:                 }
1:3c39db8:             } while (lastMsgCount < msgCount);
1:3c39db8: 
1:3c39db8:             if (lastMsgCount == 0) {
1:3c39db8:                 break;
1:3c39db8:             }
1:3c39db8: 
1:3c39db8:             final LinkedList<TestServerSession> collected;
1:3c39db8:             synchronized (processedSessions) {
1:3c39db8:                 collected = new LinkedList<TestServerSession>(processedSessions);
1:3c39db8:                 processedSessions.clear();
1:3c39db8:             }
1:3c39db8: 
1:3c39db8:             final Iterator<TestServerSession> sessions = collected.iterator();
1:3c39db8:             while (sessions.hasNext()) {
1:3c39db8:                 final TestServerSession session = sessions.next();
1:3c39db8:                 committedSessions.add(session);
1:3c39db8:                 session.getSession().commit();
1:3c39db8:                 session.getSession().close();
1:3c39db8:             }
1:3c39db8:         }
1:3c39db8: 
1:3c39db8:         connectionConsumer.close();
1:3c39db8:         final TopicSession finalSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3c39db8:         finalSession.unsubscribe("TestSubscriber");
1:3c39db8:         finalSession.close();
1:3c39db8:         connection.close();
1:3c39db8:         assertEquals(MESSAGE_COUNT, committedSessions.size());
1:3c39db8:     }
1:3c39db8: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         private final TopicConnection connection;
/////////////////////////////////////////////////////////////////////////
1:         private final TopicSession session;
/////////////////////////////////////////////////////////////////////////
1:     private final List<TestServerSession> processedSessions = new LinkedList<TestServerSession>();
1:     private final List<TestServerSession> committedSessions = new LinkedList<TestServerSession>();
commit:ef24cc9
commit:3c39db8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.ServerSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3961Test {
1: 
0:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3934Test.class);
1:     private static BrokerService brokerService;
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     public class TestServerSessionPool implements ServerSessionPool {
1: 
0:         private TopicConnection connection;
1: 
1:         public TestServerSessionPool(final TopicConnection connection) {
1:             this.connection = connection;
1:         }
1: 
1:         @Override
1:         public ServerSession getServerSession() throws JMSException {
1:             final TopicSession topicSession = connection.createTopicSession(true, Session.AUTO_ACKNOWLEDGE);
1:             return new TestServerSession(topicSession);
1:         }
1:     }
1: 
1:     public class TestServerSession implements ServerSession, MessageListener {
1: 
0:         private TopicSession session;
1: 
1:         public TestServerSession(final TopicSession session) throws JMSException {
1:             this.session = session;
1:             session.setMessageListener(this);
1:         }
1: 
1:         @Override
1:         public Session getSession() throws JMSException {
1:             return session;
1:         }
1: 
1:         @Override
1:         public void start() throws JMSException {
1:             session.run();
1:         }
1: 
1:         @Override
1:         public void onMessage(final Message message) {
1:             synchronized (processedSessions) {
1:                 processedSessions.add(this);
1:             }
1:         }
1:     }
1: 
1:     public static final int MESSAGE_COUNT = 16;
0:     private List<TestServerSession> processedSessions = new LinkedList<TestServerSession>();
0:     private List<TestServerSession> committedSessions = new LinkedList<TestServerSession>();
1: 
1:     @Test
1:     public void testPrefetchInDurableSubscription() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic("TestTopic");
1: 
1:         final TopicConnection initialSubConnection = connectionFactory.createTopicConnection();
1:         initialSubConnection.setClientID("TestClient");
1:         initialSubConnection.start();
1:         final TopicSession initialSubSession = initialSubConnection.createTopicSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final TopicSubscriber initialSubscriber = initialSubSession.createDurableSubscriber(topic, "TestSubscriber");
1: 
1:         initialSubscriber.close();
1:         initialSubSession.close();
1:         initialSubConnection.close();
1: 
1:         final TopicConnection publisherConnection = connectionFactory.createTopicConnection();
1:         publisherConnection.start();
1:         final TopicSession publisherSession = publisherConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final TopicPublisher publisher = publisherSession.createPublisher(topic);
1:         for (int i = 1; i <= MESSAGE_COUNT; i++) {
1:             final Message msg = publisherSession.createTextMessage("Message #" + i);
1:             publisher.publish(msg);
1:         }
1:         publisher.close();
1:         publisherSession.close();
1:         publisherConnection.close();
1: 
1:         final TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.setClientID("TestClient");
1:         connection.start();
1:         final TestServerSessionPool pool = new TestServerSessionPool(connection);
1:         final ConnectionConsumer connectionConsumer = connection.createDurableConnectionConsumer(topic, "TestSubscriber", null, pool, 1);
1:         while (true) {
1:             int lastMsgCount = 0;
1:             int msgCount = 0;
1:             do {
1:                 lastMsgCount = msgCount;
1:                 Thread.sleep(200L);
1:                 synchronized (processedSessions) {
1:                     msgCount = processedSessions.size();
1:                 }
1:             } while (lastMsgCount < msgCount);
1: 
1:             if (lastMsgCount == 0) {
1:                 break;
1:             }
1: 
1:             final LinkedList<TestServerSession> collected;
1:             synchronized (processedSessions) {
1:                 collected = new LinkedList<TestServerSession>(processedSessions);
1:                 processedSessions.clear();
1:             }
1: 
1:             final Iterator<TestServerSession> sessions = collected.iterator();
1:             while (sessions.hasNext()) {
1:                 final TestServerSession session = sessions.next();
1:                 committedSessions.add(session);
1:                 session.getSession().commit();
1:                 session.getSession().close();
1:             }
1:         }
1: 
1:         connectionConsumer.close();
1:         final TopicSession finalSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         finalSession.unsubscribe("TestSubscriber");
1:         finalSession.close();
1:         connection.close();
1:         assertEquals(MESSAGE_COUNT, committedSessions.size());
1:     }
1: }
============================================================================