1:26807cd: /**
1:26807cd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:26807cd:  * contributor license agreements.  See the NOTICE file distributed with
1:26807cd:  * this work for additional information regarding copyright ownership.
1:26807cd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:26807cd:  * (the "License"); you may not use this file except in compliance with
1:26807cd:  * the License.  You may obtain a copy of the License at
1:26807cd:  *
1:26807cd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26807cd:  *
1:26807cd:  * Unless required by applicable law or agreed to in writing, software
1:26807cd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26807cd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26807cd:  * See the License for the specific language governing permissions and
1:26807cd:  * limitations under the License.
1:26807cd:  */
1:26807cd: package org.apache.activemq.bugs;
4:26807cd: 
1:5667e4d: import static org.junit.Assert.assertEquals;
1:5667e4d: import static org.junit.Assert.assertTrue;
1:5667e4d: 
1:26807cd: import java.util.concurrent.TimeUnit;
1:5667e4d: 
1:26807cd: import javax.jms.Connection;
1:26807cd: import javax.jms.JMSException;
1:26807cd: import javax.jms.Message;
1:26807cd: import javax.jms.MessageConsumer;
1:26807cd: import javax.jms.MessageProducer;
1:26807cd: import javax.jms.Session;
1:5667e4d: 
1:26807cd: import org.apache.activemq.ActiveMQConnection;
1:26807cd: import org.apache.activemq.ActiveMQConnectionFactory;
1:26807cd: import org.apache.activemq.RedeliveryPolicy;
1:26807cd: import org.apache.activemq.broker.BrokerService;
1:26807cd: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1:26807cd: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:26807cd: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:26807cd: import org.apache.activemq.broker.region.policy.PolicyMap;
1:26807cd: import org.apache.activemq.command.ActiveMQQueue;
1:26807cd: import org.junit.After;
1:26807cd: import org.junit.Before;
1:26807cd: import org.junit.Test;
1:26807cd: import org.slf4j.Logger;
1:26807cd: import org.slf4j.LoggerFactory;
1:26807cd: 
1:26807cd: public class AMQ5274Test {
1:5667e4d:     private static Logger LOG = LoggerFactory.getLogger(AMQ5274Test.class);
1:26807cd: 
1:5667e4d:     private String activemqURL;
1:5667e4d:     private BrokerService brokerService;
1:5667e4d:     private final ActiveMQQueue dest = new ActiveMQQueue("TestQ");
1:26807cd: 
1:26807cd:     @Before
1:26807cd:     public void startBroker() throws Exception {
1:26807cd:         brokerService = new BrokerService();
1:26807cd:         brokerService.setPersistent(false);
1:5667e4d:         brokerService.getManagementContext().setCreateConnector(false);
1:26807cd:         PolicyMap policyMap = new PolicyMap();
1:26807cd:         PolicyEntry defaultPolicy = new PolicyEntry();
1:26807cd:         defaultPolicy.setExpireMessagesPeriod(1000);
1:26807cd:         policyMap.setDefaultEntry(defaultPolicy);
1:26807cd:         brokerService.setDestinationPolicy(policyMap);
1:26807cd:         activemqURL = brokerService.addConnector("tcp://localhost:0").getPublishableConnectString();
1:26807cd:         brokerService.start();
1:26807cd:     }
1:26807cd: 
1:26807cd:     @After
1:26807cd:     public void stopBroker() throws Exception {
1:26807cd:         if (brokerService != null) {
1:26807cd:             brokerService.stop();
1:26807cd:         }
1:26807cd:     }
1:26807cd: 
1:26807cd:     @Test
1:26807cd:     public void test() throws Exception {
1:26807cd:         LOG.info("Starting Test");
1:26807cd:         assertTrue(brokerService.isStarted());
1:26807cd: 
1:26807cd:         produce();
1:26807cd:         consumeAndRollback();
1:26807cd: 
1:26807cd:         // check reported queue size using JMX
1:26807cd:         long queueSize = getQueueSize();
1:26807cd:         assertEquals("Queue " + dest.getPhysicalName() + " not empty, reporting " + queueSize + " messages.", 0, queueSize);
1:26807cd:     }
1:26807cd: 
1:26807cd:     private void consumeAndRollback() throws JMSException, InterruptedException {
1:26807cd:         ActiveMQConnection connection = createConnection();
1:26807cd:         RedeliveryPolicy noRedelivery = new RedeliveryPolicy();
1:26807cd:         noRedelivery.setMaximumRedeliveries(0);
1:26807cd:         connection.setRedeliveryPolicy(noRedelivery);
1:26807cd:         connection.start();
1:26807cd:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:26807cd:         MessageConsumer consumer = session.createConsumer(dest);
1:26807cd:         Message m;
1:5667e4d:         while ((m = consumer.receive(4000)) != null) {
1:26807cd:             LOG.info("Got:" + m);
1:26807cd:             TimeUnit.SECONDS.sleep(1);
1:26807cd:             session.rollback();
1:26807cd:         }
2:26807cd:         connection.close();
1:26807cd:     }
1:26807cd: 
1:26807cd:     private void produce() throws Exception {
1:26807cd:         Connection connection = createConnection();
1:26807cd:         connection.start();
1:26807cd: 
1:26807cd:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26807cd:         MessageProducer producer = session.createProducer(dest);
1:26807cd:         producer.setTimeToLive(10000);
1:5667e4d:         for (int i = 0; i < 20; i++) {
1:5667e4d:             producer.send(session.createTextMessage("i=" + i));
1:26807cd:         }
1:5667e4d:         connection.close();
1:26807cd:     }
1:26807cd: 
1:26807cd:     private ActiveMQConnection createConnection() throws JMSException {
1:26807cd:         return (ActiveMQConnection) new ActiveMQConnectionFactory(activemqURL).createConnection();
1:26807cd:     }
1:26807cd: 
1:26807cd:     public long getQueueSize() throws Exception {
1:26807cd:         long queueSize = 0;
1:26807cd:         try {
1:5667e4d:             QueueViewMBean queueViewMBean = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:5667e4d:                 BrokerMBeanSupport.createDestinationName(brokerService.getBrokerObjectName(), dest), QueueViewMBean.class, false);
1:26807cd:             queueSize = queueViewMBean.getQueueSize();
1:26807cd:             LOG.info("QueueSize for destination {} is {}", dest, queueSize);
1:26807cd:         } catch (Exception ex) {
1:5667e4d:             LOG.error("Error retrieving QueueSize from JMX ", ex);
1:5667e4d:             throw ex;
1:26807cd:         }
1:26807cd:         return queueSize;
1:26807cd:     }
1:26807cd: 
1:26807cd: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5667e4d
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ5274Test.class);
1:     private String activemqURL;
1:     private BrokerService brokerService;
1:     private final ActiveMQQueue dest = new ActiveMQQueue("TestQ");
1:         brokerService.getManagementContext().setCreateConnector(false);
/////////////////////////////////////////////////////////////////////////
1:         while ((m = consumer.receive(4000)) != null) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 20; i++) {
1:             producer.send(session.createTextMessage("i=" + i));
1:         connection.close();
1:             QueueViewMBean queueViewMBean = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:                 BrokerMBeanSupport.createDestinationName(brokerService.getBrokerObjectName(), dest), QueueViewMBean.class, false);
1:             LOG.error("Error retrieving QueueSize from JMX ", ex);
1:             throw ex;
author:gtully
-------------------------------------------------------------------------------
commit:26807cd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ5274Test {
0:     static Logger LOG = LoggerFactory.getLogger(AMQ5274Test.class);
0:     String activemqURL;
0:     BrokerService brokerService;
0:     ActiveMQQueue dest = new ActiveMQQueue("TestQ");
1: 
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setExpireMessagesPeriod(1000);
1:         policyMap.setDefaultEntry(defaultPolicy);
1:         brokerService.setDestinationPolicy(policyMap);
1:         activemqURL = brokerService.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void test() throws Exception {
1:         LOG.info("Starting Test");
1:         assertTrue(brokerService.isStarted());
1: 
1:         produce();
1:         consumeAndRollback();
1: 
1:         // check reported queue size using JMX
1:         long queueSize = getQueueSize();
1:         assertEquals("Queue " + dest.getPhysicalName() + " not empty, reporting " + queueSize + " messages.", 0, queueSize);
1:     }
1: 
1:     private void consumeAndRollback() throws JMSException, InterruptedException {
1:         ActiveMQConnection connection = createConnection();
1:         RedeliveryPolicy noRedelivery = new RedeliveryPolicy();
1:         noRedelivery.setMaximumRedeliveries(0);
1:         connection.setRedeliveryPolicy(noRedelivery);
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         Message m;
0:         while ( (m = consumer.receive(4000)) != null) {
1:             LOG.info("Got:" + m);
1:             TimeUnit.SECONDS.sleep(1);
1:             session.rollback();
1:         }
1:         connection.close();
1:     }
1: 
1:     private void produce() throws Exception {
1:         Connection connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setTimeToLive(10000);
0:         for (int i=0;i<20;i++) {
0:             producer.send(session.createTextMessage("i="+i));
1:         }
1:        connection.close();
1:     }
1: 
1:     private ActiveMQConnection createConnection() throws JMSException {
1:         return (ActiveMQConnection) new ActiveMQConnectionFactory(activemqURL).createConnection();
1:     }
1: 
1: 
1:     public long getQueueSize() throws Exception {
1:         long queueSize = 0;
1:         try {
0:             QueueViewMBean queueViewMBean = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(BrokerMBeanSupport.createDestinationName(brokerService.getBrokerObjectName(), dest), QueueViewMBean.class, false);
1:             queueSize = queueViewMBean.getQueueSize();
1:             LOG.info("QueueSize for destination {} is {}", dest, queueSize);
1:         } catch (Exception ex) {
0:            LOG.error("Error retrieving QueueSize from JMX ", ex);
0:            throw ex;
1:         }
1:         return queueSize;
1:     }
1: 
1: }
============================================================================