1:511b9b6: /**
1:511b9b6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:511b9b6:  * contributor license agreements.  See the NOTICE file distributed with
1:511b9b6:  * this work for additional information regarding copyright ownership.
1:511b9b6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:511b9b6:  * (the "License"); you may not use this file except in compliance with
1:511b9b6:  * the License.  You may obtain a copy of the License at
1:511b9b6:  * <p>
1:511b9b6:  * http://www.apache.org/licenses/LICENSE-2.0
1:511b9b6:  * <p>
1:511b9b6:  * Unless required by applicable law or agreed to in writing, software
1:511b9b6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:511b9b6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:511b9b6:  * See the License for the specific language governing permissions and
1:511b9b6:  * limitations under the License.
1:511b9b6:  */
1:511b9b6: package org.apache.activemq.usecases;
1:511b9b6: 
1:511b9b6: import org.apache.activemq.ActiveMQConnection;
1:511b9b6: import org.apache.activemq.ActiveMQConnectionFactory;
1:511b9b6: import org.apache.activemq.broker.BrokerService;
1:511b9b6: import org.apache.activemq.broker.region.cursors.AbstractStoreCursor;
1:511b9b6: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:511b9b6: import org.apache.activemq.broker.region.policy.PolicyMap;
1:511b9b6: import org.apache.activemq.command.ActiveMQTopic;
1:511b9b6: import org.apache.activemq.util.DefaultTestAppender;
1:511b9b6: import org.apache.log4j.Appender;
1:511b9b6: import org.apache.log4j.Level;
1:511b9b6: import org.apache.log4j.spi.LoggingEvent;
1:511b9b6: import org.junit.After;
1:511b9b6: import org.junit.Before;
1:511b9b6: import org.junit.Test;
1:511b9b6: import org.slf4j.Logger;
1:511b9b6: import org.slf4j.LoggerFactory;
1:511b9b6: 
1:511b9b6: import javax.jms.Connection;
1:511b9b6: import javax.jms.MessageProducer;
1:511b9b6: import javax.jms.Session;
1:511b9b6: import javax.jms.TextMessage;
1:511b9b6: import javax.jms.TopicSubscriber;
1:511b9b6: 
1:511b9b6: import java.util.concurrent.atomic.AtomicBoolean;
1:511b9b6: 
1:511b9b6: import static org.junit.Assert.assertFalse;
1:511b9b6: import static org.junit.Assert.fail;
1:511b9b6: 
1:511b9b6: public class DurableSubCacheTest {
1:511b9b6:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubCacheTest.class);
1:511b9b6: 
1:511b9b6: 
1:511b9b6:     private final ActiveMQTopic topic = new ActiveMQTopic("T1");
1:511b9b6:     private BrokerService broker;
1:511b9b6: 
1:511b9b6:     @Before
1:511b9b6:     public void setUp() throws Exception {
1:511b9b6: 
1:511b9b6:         broker = createAndStartBroker();
1:511b9b6:         broker.waitUntilStarted();
1:511b9b6:     }
1:511b9b6: 
1:511b9b6: 
1:511b9b6:     private BrokerService createAndStartBroker()
1:511b9b6:             throws Exception {
1:511b9b6:         BrokerService broker = new BrokerService();
1:511b9b6:         broker.setDeleteAllMessagesOnStartup(true);
1:511b9b6:         broker.setUseJmx(false);
1:511b9b6:         broker.setAdvisorySupport(false);
1:511b9b6:         broker.getSystemUsage().getMemoryUsage().setLimit(100 * 1024);
1:511b9b6: 
1:511b9b6:         PolicyMap policyMap = new PolicyMap();
1:511b9b6:         PolicyEntry policy = new PolicyEntry();
1:511b9b6:         policy.setCursorMemoryHighWaterMark(20);
1:511b9b6:         policyMap.put(topic, policy);
1:511b9b6:         broker.setDestinationPolicy(policyMap);
1:511b9b6: 
1:511b9b6:         broker.start();
1:511b9b6: 
1:511b9b6:         return broker;
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     @After
1:511b9b6:     public void tearDown() throws Exception {
1:511b9b6:         broker.stop();
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     @Test
1:511b9b6:     public void testCacheExhaustion() throws Exception {
1:511b9b6:         doTestCacheExhaustion(1000);
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     @Test
1:511b9b6:     public void testCacheExhaustionPrefetch0() throws Exception {
1:511b9b6:         doTestCacheExhaustion(0);
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     public void doTestCacheExhaustion(int prefetch) throws Exception {
1:511b9b6: 
1:511b9b6:         createDurableSub(topic, "my_sub_1");
1:511b9b6: 
1:511b9b6:         publishMesssages(topic, 20);
1:511b9b6: 
1:511b9b6:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger(AbstractStoreCursor.class.getCanonicalName());
1:511b9b6:         final AtomicBoolean failed = new AtomicBoolean(false);
1:511b9b6: 
1:511b9b6:         Appender appender = new DefaultTestAppender() {
1:511b9b6:             @Override
1:511b9b6:             public void doAppend(LoggingEvent event) {
1:511b9b6:                 if (event.getLevel() == Level.WARN) {
1:511b9b6:                     LOG.info("Got warn event:" + event.getRenderedMessage());
1:511b9b6:                     failed.set(true);
1:511b9b6:                 }
1:511b9b6:             }
1:511b9b6:         };
1:511b9b6:         log4jLogger.addAppender(appender);
1:511b9b6: 
1:511b9b6:         try {
1:511b9b6:             consumeDurableSub(topic, "my_sub_1", 20, prefetch);
1:511b9b6:         } finally {
1:511b9b6:             log4jLogger.removeAppender(appender);
1:511b9b6:         }
1:511b9b6: 
1:511b9b6:         assertFalse("no warning from the cursor", failed.get());
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     private void publishMesssages(ActiveMQTopic topic, int messageCount) throws Exception {
1:511b9b6: 
1:511b9b6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:511b9b6:         connectionFactory.setWatchTopicAdvisories(false);
1:511b9b6:         Connection con = connectionFactory.createConnection();
1:511b9b6:         con.start();
1:511b9b6: 
1:511b9b6:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:511b9b6:         MessageProducer producer = session.createProducer(topic);
1:511b9b6: 
1:511b9b6:         try {
1:511b9b6:             String textMessage = new String(new byte[1024]);
1:511b9b6:             TextMessage msg = session.createTextMessage(textMessage);
1:511b9b6: 
1:511b9b6:             for (int i = 0; i < messageCount; i++) {
1:511b9b6:                 producer.send(msg);
1:511b9b6:             }
1:511b9b6:         } finally {
1:511b9b6:             con.close();
1:511b9b6:         }
1:511b9b6: 
1:511b9b6:     }
1:511b9b6: 
1:511b9b6: 
1:511b9b6:     private void createDurableSub(ActiveMQTopic topic, String subID) throws Exception {
1:511b9b6: 
1:511b9b6: 
1:511b9b6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:511b9b6:         connectionFactory.setWatchTopicAdvisories(false);
1:511b9b6:         Connection con = connectionFactory.createConnection();
1:511b9b6:         con.setClientID("CONNECTION-" + subID);
1:511b9b6:         con.start();
1:511b9b6: 
1:511b9b6:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:511b9b6: 
1:511b9b6:         session.createDurableSubscriber(topic, subID, null, true);
1:511b9b6:         session.close();
1:511b9b6:         con.close();
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     private void consumeDurableSub(ActiveMQTopic topic, String subID, int messageCount) throws Exception {
1:511b9b6:         consumeDurableSub(topic, subID, messageCount, 1000);
1:511b9b6:     }
1:511b9b6: 
1:511b9b6:     private void consumeDurableSub(ActiveMQTopic topic, String subID, int messageCount, int prefetch) throws Exception {
1:511b9b6: 
1:511b9b6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:511b9b6:         ActiveMQConnection con = (ActiveMQConnection) connectionFactory.createConnection();
1:511b9b6:         con.setClientID("CONNECTION-" + subID);
1:511b9b6:         con.getPrefetchPolicy().setAll(prefetch);
1:511b9b6:         con.start();
1:511b9b6: 
1:511b9b6:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:511b9b6: 
1:511b9b6:         TopicSubscriber topicSubscriber
1:511b9b6:                 = session.createDurableSubscriber(topic, subID, null, true);
1:511b9b6: 
1:511b9b6:         try {
1:511b9b6: 
1:511b9b6:             for (int i = 0; i < messageCount; i++) {
1:511b9b6:                 javax.jms.Message message = topicSubscriber.receive(4000l);
1:511b9b6:                 if (message == null) {
1:511b9b6:                     fail("should have received a message");
1:511b9b6:                 }
1:511b9b6:             }
1:511b9b6: 
1:511b9b6:         } finally {
1:511b9b6:             con.close();
1:511b9b6:         }
1:511b9b6:     }
1:511b9b6: 
1:511b9b6: 
1:511b9b6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:511b9b6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.cursors.AbstractStoreCursor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.TopicSubscriber;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.fail;
1: 
1: public class DurableSubCacheTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubCacheTest.class);
1: 
1: 
1:     private final ActiveMQTopic topic = new ActiveMQTopic("T1");
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = createAndStartBroker();
1:         broker.waitUntilStarted();
1:     }
1: 
1: 
1:     private BrokerService createAndStartBroker()
1:             throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(100 * 1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setCursorMemoryHighWaterMark(20);
1:         policyMap.put(topic, policy);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.start();
1: 
1:         return broker;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testCacheExhaustion() throws Exception {
1:         doTestCacheExhaustion(1000);
1:     }
1: 
1:     @Test
1:     public void testCacheExhaustionPrefetch0() throws Exception {
1:         doTestCacheExhaustion(0);
1:     }
1: 
1:     public void doTestCacheExhaustion(int prefetch) throws Exception {
1: 
1:         createDurableSub(topic, "my_sub_1");
1: 
1:         publishMesssages(topic, 20);
1: 
1:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger(AbstractStoreCursor.class.getCanonicalName());
1:         final AtomicBoolean failed = new AtomicBoolean(false);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel() == Level.WARN) {
1:                     LOG.info("Got warn event:" + event.getRenderedMessage());
1:                     failed.set(true);
1:                 }
1:             }
1:         };
1:         log4jLogger.addAppender(appender);
1: 
1:         try {
1:             consumeDurableSub(topic, "my_sub_1", 20, prefetch);
1:         } finally {
1:             log4jLogger.removeAppender(appender);
1:         }
1: 
1:         assertFalse("no warning from the cursor", failed.get());
1:     }
1: 
1:     private void publishMesssages(ActiveMQTopic topic, int messageCount) throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         Connection con = connectionFactory.createConnection();
1:         con.start();
1: 
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(topic);
1: 
1:         try {
1:             String textMessage = new String(new byte[1024]);
1:             TextMessage msg = session.createTextMessage(textMessage);
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 producer.send(msg);
1:             }
1:         } finally {
1:             con.close();
1:         }
1: 
1:     }
1: 
1: 
1:     private void createDurableSub(ActiveMQTopic topic, String subID) throws Exception {
1: 
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         Connection con = connectionFactory.createConnection();
1:         con.setClientID("CONNECTION-" + subID);
1:         con.start();
1: 
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         session.createDurableSubscriber(topic, subID, null, true);
1:         session.close();
1:         con.close();
1:     }
1: 
1:     private void consumeDurableSub(ActiveMQTopic topic, String subID, int messageCount) throws Exception {
1:         consumeDurableSub(topic, subID, messageCount, 1000);
1:     }
1: 
1:     private void consumeDurableSub(ActiveMQTopic topic, String subID, int messageCount, int prefetch) throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         ActiveMQConnection con = (ActiveMQConnection) connectionFactory.createConnection();
1:         con.setClientID("CONNECTION-" + subID);
1:         con.getPrefetchPolicy().setAll(prefetch);
1:         con.start();
1: 
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber topicSubscriber
1:                 = session.createDurableSubscriber(topic, subID, null, true);
1: 
1:         try {
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 javax.jms.Message message = topicSubscriber.receive(4000l);
1:                 if (message == null) {
1:                     fail("should have received a message");
1:                 }
1:             }
1: 
1:         } finally {
1:             con.close();
1:         }
1:     }
1: 
1: 
1: }
============================================================================