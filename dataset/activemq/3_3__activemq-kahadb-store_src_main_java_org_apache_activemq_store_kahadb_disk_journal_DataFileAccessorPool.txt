1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
2:456a2ba: 
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.ArrayList;
1:456a2ba: import java.util.HashMap;
1:456a2ba: import java.util.Iterator;
1:456a2ba: import java.util.List;
1:456a2ba: import java.util.Map;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Used to pool DataFileAccessors.
1:456a2ba:  *
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:456a2ba: public class DataFileAccessorPool {
1:456a2ba: 
1:f73b622:     private final Journal journal;
1:456a2ba:     private final Map<Integer, Pool> pools = new HashMap<Integer, Pool>();
1:456a2ba:     private boolean closed;
1:456a2ba:     private int maxOpenReadersPerFile = 5;
1:456a2ba: 
1:456a2ba:     class Pool {
1:456a2ba: 
1:456a2ba:         private final DataFile file;
1:456a2ba:         private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>();
1:456a2ba:         private int openCounter;
1:456a2ba:         private boolean disposed;
1:456a2ba: 
1:456a2ba:         public Pool(DataFile file) {
1:456a2ba:             this.file = file;
3:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public DataFileAccessor openDataFileReader() throws IOException {
1:456a2ba:             DataFileAccessor rc = null;
1:456a2ba:             if (pool.isEmpty()) {
1:f73b622:                 rc = new DataFileAccessor(journal, file);
1:456a2ba:             } else {
1:f73b622:                 rc = pool.remove(pool.size() - 1);
1:456a2ba:             }
1:456a2ba:             openCounter++;
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public synchronized void closeDataFileReader(DataFileAccessor reader) {
1:456a2ba:             openCounter--;
1:456a2ba:             if (pool.size() >= maxOpenReadersPerFile || disposed) {
1:456a2ba:                 reader.dispose();
1:456a2ba:             } else {
1:456a2ba:                 pool.add(reader);
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public synchronized boolean isUsed() {
1:d427952:             return openCounter > 0;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public synchronized void dispose() {
1:456a2ba:             for (DataFileAccessor reader : pool) {
1:456a2ba:                 reader.dispose();
1:456a2ba:             }
1:456a2ba:             pool.clear();
1:456a2ba:             disposed = true;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public synchronized int getOpenCounter() {
1:456a2ba:             return openCounter;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public DataFileAccessorPool(Journal dataManager) {
1:f73b622:         this.journal = dataManager;
1:456a2ba:     }
1:456a2ba: 
1:d427952:     public synchronized int size() {
1:d427952:         return pools.size();
1:456a2ba:     }
1:456a2ba: 
1:d427952:     public synchronized void disposeUnused() {
1:f73b622:         for (Iterator<Pool> iter = pools.values().iterator(); iter.hasNext();) {
1:f73b622:             Pool pool = iter.next();
1:456a2ba:             if (!pool.isUsed()) {
1:456a2ba:                 pool.dispose();
1:456a2ba:                 iter.remove();
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized void disposeDataFileAccessors(DataFile dataFile) {
1:456a2ba:         if (closed) {
1:456a2ba:             throw new IllegalStateException("Closed.");
1:456a2ba:         }
1:456a2ba:         Pool pool = pools.get(dataFile.getDataFileId());
1:456a2ba:         if (pool != null) {
1:456a2ba:             if (pool.getOpenCounter() == 0) {
1:456a2ba:                 pool.dispose();
1:456a2ba:                 pools.remove(dataFile.getDataFileId());
1:456a2ba:             } else {
1:456a2ba:                 throw new IllegalStateException("The data file is still in use: " + dataFile + ", use count: " + pool.getOpenCounter());
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized DataFileAccessor openDataFileAccessor(DataFile dataFile) throws IOException {
1:456a2ba:         if (closed) {
1:456a2ba:             throw new IOException("Closed.");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         Pool pool = pools.get(dataFile.getDataFileId());
1:456a2ba:         if (pool == null) {
1:456a2ba:             pool = new Pool(dataFile);
1:456a2ba:             pools.put(dataFile.getDataFileId(), pool);
1:456a2ba:         }
1:456a2ba:         return pool.openDataFileReader();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized void closeDataFileAccessor(DataFileAccessor reader) {
1:456a2ba:         Pool pool = pools.get(reader.getDataFile().getDataFileId());
1:456a2ba:         if (pool == null || closed) {
1:456a2ba:             reader.dispose();
1:456a2ba:         } else {
1:456a2ba:             pool.closeDataFileReader(reader);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public synchronized void close() {
1:456a2ba:         if (closed) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         closed = true;
1:cdba931:         for (Pool pool : pools.values()) {
1:456a2ba:             pool.dispose();
1:456a2ba:         }
1:456a2ba:         pools.clear();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d427952
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return openCounter > 0;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int size() {
1:         return pools.size();
1:     public synchronized void disposeUnused() {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
commit:715010a
commit:f73b622
/////////////////////////////////////////////////////////////////////////
1:     private final Journal journal;
/////////////////////////////////////////////////////////////////////////
1:                 rc = new DataFileAccessor(journal, file);
1:                 rc = pool.remove(pool.size() - 1);
/////////////////////////////////////////////////////////////////////////
1:         this.journal = dataManager;
1:         for (Iterator<Pool> iter = pools.values().iterator(); iter.hasNext();) {
1:             Pool pool = iter.next();
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Used to pool DataFileAccessors.
1:  * 
1:  * @author chirino
1:  */
1: public class DataFileAccessorPool {
1: 
0:     private final Journal dataManager;
1:     private final Map<Integer, Pool> pools = new HashMap<Integer, Pool>();
1:     private boolean closed;
1:     private int maxOpenReadersPerFile = 5;
1: 
1:     class Pool {
1: 
1:         private final DataFile file;
1:         private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>();
0:         private boolean used;
1:         private int openCounter;
1:         private boolean disposed;
1: 
1:         public Pool(DataFile file) {
1:             this.file = file;
1:         }
1: 
1:         public DataFileAccessor openDataFileReader() throws IOException {
1:             DataFileAccessor rc = null;
1:             if (pool.isEmpty()) {
0:                 rc = new DataFileAccessor(dataManager, file);
1:             } else {
0:                 rc = (DataFileAccessor)pool.remove(pool.size() - 1);
1:             }
0:             used = true;
1:             openCounter++;
1:             return rc;
1:         }
1: 
1:         public synchronized void closeDataFileReader(DataFileAccessor reader) {
1:             openCounter--;
1:             if (pool.size() >= maxOpenReadersPerFile || disposed) {
1:                 reader.dispose();
1:             } else {
1:                 pool.add(reader);
1:             }
1:         }
1: 
0:         public synchronized void clearUsedMark() {
0:             used = false;
1:         }
1: 
1:         public synchronized boolean isUsed() {
0:             return used;
1:         }
1: 
1:         public synchronized void dispose() {
1:             for (DataFileAccessor reader : pool) {
1:                 reader.dispose();
1:             }
1:             pool.clear();
1:             disposed = true;
1:         }
1: 
1:         public synchronized int getOpenCounter() {
1:             return openCounter;
1:         }
1: 
1:     }
1: 
1:     public DataFileAccessorPool(Journal dataManager) {
0:         this.dataManager = dataManager;
1:     }
1: 
0:     synchronized void clearUsedMark() {
0:         for (Iterator iter = pools.values().iterator(); iter.hasNext();) {
0:             Pool pool = (Pool)iter.next();
0:             pool.clearUsedMark();
1:         }
1:     }
1: 
0:     synchronized void disposeUnused() {
0:         for (Iterator<Pool> iter = pools.values().iterator(); iter.hasNext();) {
0:             Pool pool = iter.next();
1:             if (!pool.isUsed()) {
1:                 pool.dispose();
1:                 iter.remove();
1:             }
1:         }
1:     }
1: 
1:     synchronized void disposeDataFileAccessors(DataFile dataFile) {
1:         if (closed) {
1:             throw new IllegalStateException("Closed.");
1:         }
1:         Pool pool = pools.get(dataFile.getDataFileId());
1:         if (pool != null) {
1:             if (pool.getOpenCounter() == 0) {
1:                 pool.dispose();
1:                 pools.remove(dataFile.getDataFileId());
1:             } else {
1:                 throw new IllegalStateException("The data file is still in use: " + dataFile + ", use count: " + pool.getOpenCounter());
1:             }
1:         }
1:     }
1: 
1:     synchronized DataFileAccessor openDataFileAccessor(DataFile dataFile) throws IOException {
1:         if (closed) {
1:             throw new IOException("Closed.");
1:         }
1: 
1:         Pool pool = pools.get(dataFile.getDataFileId());
1:         if (pool == null) {
1:             pool = new Pool(dataFile);
1:             pools.put(dataFile.getDataFileId(), pool);
1:         }
1:         return pool.openDataFileReader();
1:     }
1: 
1:     synchronized void closeDataFileAccessor(DataFileAccessor reader) {
1:         Pool pool = pools.get(reader.getDataFile().getDataFileId());
1:         if (pool == null || closed) {
1:             reader.dispose();
1:         } else {
1:             pool.closeDataFileReader(reader);
1:         }
1:     }
1: 
1:     public synchronized void close() {
1:         if (closed) {
1:             return;
1:         }
1:         closed = true;
0:         for (Iterator<Pool> iter = pools.values().iterator(); iter.hasNext();) {
0:             Pool pool = iter.next();
1:             pool.dispose();
1:         }
1:         pools.clear();
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:cdba931
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:         for (Pool pool : pools.values()) {
/////////////////////////////////////////////////////////////////////////
0:         for (Pool pool : pools.values()) {
============================================================================