1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
2:a107823: 
1:60646c9: import org.apache.activemq.console.CommandContext;
1:60646c9: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:60646c9: 
1:a107823: import java.io.InputStream;
1:a107823: import java.io.PrintStream;
1:60646c9: import java.util.*;
1:5f1adbe: 
1:a107823: public class ShellCommand extends AbstractCommand {
1:a107823: 
1:540ebc6:     private boolean interactive;
1:93ee7d9:     private String[] helpFile;
1:a107823: 
1:540ebc6:     public ShellCommand() {
1:540ebc6:         this(false);
4:4b8822f:     }
1:a107823: 
1:540ebc6:     public ShellCommand(boolean interactive) {
1:540ebc6:         this.interactive = interactive;
1:60646c9:         ArrayList<String> help = new ArrayList<String>();
1:60646c9:         help.addAll(Arrays.asList(new String[] {
1:60646c9:                     interactive ? "Usage: [task] [task-options] [task data]" : "Usage: Main [--extdir <dir>] [task] [task-options] [task data]",
1:60646c9:                     "",
1:60646c9:                     "Tasks:"}));
1:60646c9: 
1:60646c9:         ArrayList<Command> commands = getCommands();
1:60646c9:         Collections.sort(commands, new Comparator<Command>() {
1:60646c9:             @Override
1:60646c9:             public int compare(Command command, Command command1) {
1:60646c9:                 return command.getName().compareTo(command1.getName());
1:60646c9:             }
1:60646c9:         });
1:60646c9: 
1:60646c9:         for( Command command: commands) {
1:60646c9:             help.add(String.format("    %-24s - %s", command.getName(), command.getOneLineDescription()));
1:60646c9:         }
1:60646c9: 
1:60646c9:         help.addAll(Arrays.asList(new String[] {
1:60646c9:                     "",
1:60646c9:                     "Task Options (Options specific to each task):",
1:60646c9:                     "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
1:60646c9:                     "    --version       - Display the version information.",
1:60646c9:                     "    -h,-?,--help    - Display this help information. To display task specific help, use " + (interactive ? "" : "Main ") + "[task] -h,-?,--help",
1:60646c9:                     "",
1:60646c9:                     "Task Data:",
1:60646c9:                     "    - Information needed by each specific task.",
1:60646c9:                     "",
1:60646c9:                     "JMX system property options:",
1:60646c9:                     "    -Dactivemq.jmx.url=<jmx service uri> (default is: 'service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi')",
1:60646c9:                     "    -Dactivemq.jmx.user=<user name>",
1:60646c9:                     "    -Dactivemq.jmx.password=<password>",
1:60646c9:                     ""
1:60646c9:                 }));
1:60646c9: 
1:60646c9:         this.helpFile = help.toArray(new String[help.size()]);
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "shell";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Runs the activemq sub shell";
1:4b8822f:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Main method to run a command shell client.
1:5f1adbe:      * 
1:a107823:      * @param args - command line arguments
1:a107823:      * @param in - input stream to use
1:a107823:      * @param out - output stream to use
1:a107823:      * @return 0 for a successful run, -1 if there are any exception
1:a107823:      */
1:a107823:     public static int main(String[] args, InputStream in, PrintStream out) {
1:54eb93e:         
1:54eb93e:         CommandContext context = new CommandContext();
1:54eb93e:         context.setFormatter(new CommandShellOutputFormatter(out));
1:a107823: 
1:a107823:         // Convert arguments to list for easier management
1:5f1adbe:         List<String> tokens = new ArrayList<String>(Arrays.asList(args));
1:a107823: 
1:a107823:         ShellCommand main = new ShellCommand();
1:a107823:         try {
1:54eb93e:             main.setCommandContext(context);
1:a107823:             main.execute(tokens);
1:a107823:             return 0;
1:a107823:         } catch (Exception e) {
1:54eb93e:             context.printException(e);
1:e2221e3:             return 1;
1:a107823:         }
1:a107823:     }
1:a107823: 
1:7d14ddb:     public static void main(String[] args) {
1:7d14ddb:         main(args, System.in, System.out);
1:7d14ddb:     }
1:7d14ddb: 
1:540ebc6:     public boolean isInteractive() {
1:540ebc6:         return interactive;
1:4b8822f:     }
1:a107823: 
1:540ebc6:     public void setInteractive(boolean interactive) {
1:540ebc6:         this.interactive = interactive;
1:4b8822f:     }
1:a107823: 
1:a107823:     /**
1:f30b0d8:      * Parses for specific command task.
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void runTask(List<String> tokens) throws Exception {
1:5f1adbe: 
1:a107823:         // Process task token
1:5f1adbe:         if (tokens.size() > 0) {
1:54eb93e:             Command command=null;
1:a107823:             String taskToken = (String)tokens.remove(0);
1:60646c9: 
1:60646c9: 
1:60646c9:             for( Command c: getCommands() ) {
1:60646c9:                 if( taskToken.equals(c.getName()) ) {
1:60646c9:                     command = c;
1:60646c9:                     break;
1:60646c9:                 }
1:a107823:             }
1:60646c9:             if( command == null ) {
1:60646c9:                 if (taskToken.equals("help")) {
1:60646c9:                     printHelp();
1:60646c9:                 } else {
1:60646c9:                     printHelp();
1:60646c9:                 }
1:60646c9:             }
1:60646c9: 
1:54eb93e:             if( command!=null ) {
1:54eb93e:                 command.setCommandContext(context);
1:54eb93e:                 command.execute(tokens);
1:54eb93e:             }
2:a107823:         } else {
2:f30b0d8:             printHelp();
1:a107823:         }
1:54eb93e: 
1:a107823:     }
1:5f1adbe: 
1:60646c9:     ArrayList<Command> getCommands() {
1:60646c9:         ServiceLoader<Command> loader = ServiceLoader.load(Command.class);
1:5da7ab3:         Iterator<Command> iterator = loader.iterator();
1:60646c9:         ArrayList<Command> rc = new ArrayList<Command>();
1:5da7ab3:         boolean done = false;
1:5da7ab3:         while (!done) {
1:5da7ab3:             try {
1:5da7ab3:                 if( iterator.hasNext() ) {
1:5da7ab3:                     rc.add(iterator.next());
1:5da7ab3:                 } else {
1:5da7ab3:                     done = true;
1:5da7ab3:                 }
1:5da7ab3:             } catch (ServiceConfigurationError e) {
1:5da7ab3:                 // it's ok, some commands may not load if their dependencies
1:5da7ab3:                 // are not available.
1:5da7ab3:             }
1:60646c9:         }
1:60646c9:         return rc;
1:60646c9:     }
1:60646c9: 
1:a107823: 	/**
1:a107823:      * Print the help messages for the browse command
1:a107823:      */
1:a107823:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:a107823:     }
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e2221e3
/////////////////////////////////////////////////////////////////////////
1:             return 1;
commit:7d14ddb
/////////////////////////////////////////////////////////////////////////
1:     public static void main(String[] args) {
1:         main(args, System.in, System.out);
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:5da7ab3
/////////////////////////////////////////////////////////////////////////
1:         Iterator<Command> iterator = loader.iterator();
1:         boolean done = false;
1:         while (!done) {
1:             try {
1:                 if( iterator.hasNext() ) {
1:                     rc.add(iterator.next());
1:                 } else {
1:                     done = true;
1:                 }
1:             } catch (ServiceConfigurationError e) {
1:                 // it's ok, some commands may not load if their dependencies
1:                 // are not available.
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.CommandContext;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: 
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> help = new ArrayList<String>();
1:         help.addAll(Arrays.asList(new String[] {
1:                     interactive ? "Usage: [task] [task-options] [task data]" : "Usage: Main [--extdir <dir>] [task] [task-options] [task data]",
1:                     "",
1:                     "Tasks:"}));
1: 
1:         ArrayList<Command> commands = getCommands();
1:         Collections.sort(commands, new Comparator<Command>() {
1:             @Override
1:             public int compare(Command command, Command command1) {
1:                 return command.getName().compareTo(command1.getName());
1:             }
1:         });
1: 
1:         for( Command command: commands) {
1:             help.add(String.format("    %-24s - %s", command.getName(), command.getOneLineDescription()));
1:         }
1: 
1:         help.addAll(Arrays.asList(new String[] {
1:                     "",
1:                     "Task Options (Options specific to each task):",
1:                     "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
1:                     "    --version       - Display the version information.",
1:                     "    -h,-?,--help    - Display this help information. To display task specific help, use " + (interactive ? "" : "Main ") + "[task] -h,-?,--help",
1:                     "",
1:                     "Task Data:",
1:                     "    - Information needed by each specific task.",
1:                     "",
1:                     "JMX system property options:",
1:                     "    -Dactivemq.jmx.url=<jmx service uri> (default is: 'service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi')",
1:                     "    -Dactivemq.jmx.user=<user name>",
1:                     "    -Dactivemq.jmx.password=<password>",
1:                     ""
1:                 }));
1: 
1:         this.helpFile = help.toArray(new String[help.size()]);
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return "shell";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Runs the activemq sub shell";
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             for( Command c: getCommands() ) {
1:                 if( taskToken.equals(c.getName()) ) {
1:                     command = c;
1:                     break;
1:                 }
1:             if( command == null ) {
1:                 if (taskToken.equals("help")) {
1:                     printHelp();
1:                 } else {
1:                     printHelp();
1:                 }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:     ArrayList<Command> getCommands() {
1:         ServiceLoader<Command> loader = ServiceLoader.load(Command.class);
1:         ArrayList<Command> rc = new ArrayList<Command>();
0:         for( Command command: loader ) {
0:             rc.add(command);
1:         }
1:         return rc;
1:     }
1: 
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
0:             "    export          - Exports a stopped brokers data files to an archive file",
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("export")) {
0:                 command = new StoreExportCommand();
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.console.CommandContext;
/////////////////////////////////////////////////////////////////////////
1:         
1:         CommandContext context = new CommandContext();
1:         context.setFormatter(new CommandShellOutputFormatter(out));
1:             main.setCommandContext(context);
1:             context.printException(e);
/////////////////////////////////////////////////////////////////////////
1:             Command command=null;
0:                 command = new StartCommand();
0:                 command = new ShutdownCommand();
0:                 command = new ListCommand();
0:                 command = new QueryCommand();
0:                 command = new BstatCommand();
0:                 command = new AmqBrowseCommand();
0:                 command = new PurgeCommand();
1:             
1:             if( command!=null ) {
1:                 command.setCommandContext(context);
1:                 command.execute(tokens);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
1: 
0: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0:         this.helpFile = new String[] {
0:             interactive ? "Usage: [task] [task-options] [task data]" : "Usage: Main [--extdir <dir>] [task] [task-options] [task data]", 
0:             "",
0:             "Tasks (default task is start):",
0:             "    start           - Creates and starts a broker using a configuration file, or a broker URI.",
0:             "    stop            - Stops a running broker specified by the broker name.",
0:             "    list            - Lists all available brokers in the specified JMX context.",
0:             "    query           - Display selected broker component's attributes and statistics.",
0:             "    browse          - Display selected messages in a specified destination.",
0:             "",
0:             "Task Options (Options specific to each task):",
0:             "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
0:             "    --version       - Display the version information.",
0:             "    -h,-?,--help    - Display this help information. To display task specific help, use " + (interactive ? "" : "Main ") + "[task] -h,-?,--help", 
0:             "",
0:             "Task Data:",
0:             "    - Information needed by each specific task.",
0:             ""
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         List<String> tokens = new ArrayList<String>(Arrays.asList(args));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected void runTask(List<String> tokens) throws Exception {
1: 
1:         if (tokens.size() > 0) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: 
0: import java.util.List;
0: import java.util.Arrays;
0: import java.util.ArrayList;
1: import java.io.InputStream;
1: import java.io.PrintStream;
1: 
1: public class ShellCommand extends AbstractCommand {
1: 
1:     /**
1:      * Main method to run a command shell client.
1:      * @param args - command line arguments
1:      * @param in - input stream to use
1:      * @param out - output stream to use
1:      * @return 0 for a successful run, -1 if there are any exception
1:      */
1:     public static int main(String[] args, InputStream in, PrintStream out) {
0:         GlobalWriter.instantiate(new CommandShellOutputFormatter(out));
1: 
1:         // Convert arguments to list for easier management
0:         List tokens = new ArrayList(Arrays.asList(args));
1: 
1:         ShellCommand main = new ShellCommand();
1:         try {
1:             main.execute(tokens);
1:             return 0;
1:         } catch (Exception e) {
0:             GlobalWriter.printException(e);
0:             return -1;
1:         }
1:     }
1: 
1:     /**
0:      * Parses for specific command task, default task is a start task.
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
1:         
1:         // Process task token
0:         if( tokens.size() > 0 ) {
1:             String taskToken = (String)tokens.remove(0);
0:             if (taskToken.equals("start")) {
0:                 new StartCommand().execute(tokens);
0:             } else if (taskToken.equals("stop")) {
0:                 new ShutdownCommand().execute(tokens);
0:             } else if (taskToken.equals("list")) {
0:                 new ListCommand().execute(tokens);
0:             } else if (taskToken.equals("query")) {
0:                 new QueryCommand().execute(tokens);
0:             } else if (taskToken.equals("browse")) {
0:                 new AmqBrowseCommand().execute(tokens);
0:             } else if (taskToken.equals("purge")) {
0:                 new PurgeCommand().execute(tokens);
1:             } else {
0:                 // If not valid task, push back to list
0:                 tokens.add(0, taskToken);
0:                 new StartCommand().execute(tokens);
1:             }
1:         } else {
0:             new StartCommand().execute(tokens);
1:         }
1:         
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
0:     protected String[] helpFile = new String[] {
0:         "Usage: Main [--extdir <dir>] [task] [task-options] [task data]",
0:         "",
0:         "Tasks (default task is start):",
0:         "    start           - Creates and starts a broker using a configuration file, or a broker URI.",
0:         "    stop            - Stops a running broker specified by the broker name.",
0:         "    list            - Lists all available brokers in the specified JMX context.",
0:         "    query           - Display selected broker component's attributes and statistics.",
0:         "    browse          - Display selected messages in a specified destination.",
0:         "",
0:         "Task Options (Options specific to each task):",
0:         "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
0:         "    --version       - Display the version information.",
0:         "    -h,-?,--help    - Display this help information. To display task specific help, use Main [task] -h,-?,--help",
0:         "",
0:         "Task Data:",
0:         "    - Information needed by each specific task.",
0:         ""
0:     };
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:477a78c
/////////////////////////////////////////////////////////////////////////
0:             "Tasks:",
/////////////////////////////////////////////////////////////////////////
0:             "",
0:             "JMX system property options:",
0:             "    -Dactivemq.jmx.url=<jmx service uri> (default is: 'service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi')",
0:             "    -Dactivemq.jmx.user=<user name>",
0:             "    -Dactivemq.jmx.password=<password>",
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:28bc447
/////////////////////////////////////////////////////////////////////////
0:             "    encrypt         - Encrypts given text",
0:             "    decrypt         - Decrypts given text",
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("encrypt")) {
0:                 command = new EncryptCommand();
0:             } else if (taskToken.equals("decrypt")) {
0:                 command = new DecryptCommand();
commit:f30cd72
/////////////////////////////////////////////////////////////////////////
0:             "    purge           - Delete selected destination's messages that matches the message selector",
commit:e0ee613
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.console.command.store.amq.AMQJournalToolCommand;
/////////////////////////////////////////////////////////////////////////
0:             "    create          - Creates a runnable broker instance in the specified path",
0:             "    journal-audit   - Allows you to view records stored in the persistent journal.",
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("create")) {
0:                 command = new CreateCommand();
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("journal-audit")) {
0:                 command = new AMQJournalToolCommand();
/////////////////////////////////////////////////////////////////////////
0: 	/**
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:f30b0d8
/////////////////////////////////////////////////////////////////////////
1:      * Parses for specific command task.
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("bstat")) {
0:                 new BstatCommand().execute(tokens);
/////////////////////////////////////////////////////////////////////////
1:                 printHelp();
1:             printHelp();
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0:                 new AmqBrowseCommand().execute(tokens);
0:             } else if (taskToken.equals("purge")) {
0:                 new PurgeCommand().execute(tokens);
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: import org.apache.activemq.broker.console.formatter.CommandShellOutputFormatter;
0: 
0: import java.util.List;
0: import java.util.Arrays;
0: import java.util.ArrayList;
0: import java.io.InputStream;
0: import java.io.PrintStream;
0: 
0: public class ShellCommand extends AbstractCommand {
0: 
0:     /**
0:      * Main method to run a command shell client.
0:      * @param args - command line arguments
0:      * @param in - input stream to use
0:      * @param out - output stream to use
0:      * @return 0 for a successful run, -1 if there are any exception
0:      */
0:     public static int main(String[] args, InputStream in, PrintStream out) {
0:         GlobalWriter.instantiate(new CommandShellOutputFormatter(out));
0: 
0:         // Convert arguments to list for easier management
0:         List tokens = new ArrayList(Arrays.asList(args));
0: 
0:         ShellCommand main = new ShellCommand();
0:         try {
0:             main.execute(tokens);
0:             return 0;
0:         } catch (Exception e) {
0:             GlobalWriter.printException(e);
0:             return -1;
1:         }
1:     }
0: 
0:     /**
0:      * Parses for specific command task, default task is a start task.
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void runTask(List tokens) throws Exception {
0:         
0:         // Process task token
0:         if( tokens.size() > 0 ) {
0:             String taskToken = (String)tokens.remove(0);
0:             if (taskToken.equals("start")) {
0:                 new StartCommand().execute(tokens);
0:             } else if (taskToken.equals("stop")) {
0:                 new ShutdownCommand().execute(tokens);
0:             } else if (taskToken.equals("list")) {
0:                 new ListCommand().execute(tokens);
0:             } else if (taskToken.equals("query")) {
0:                 new QueryCommand().execute(tokens);
0:             } else if (taskToken.equals("browse")) {
0:                 new BrowseCommand().execute(tokens);
0:             } else {
0:                 // If not valid task, push back to list
0:                 tokens.add(0, taskToken);
0:                 new StartCommand().execute(tokens);
1:             }
0:         } else {
0:             new StartCommand().execute(tokens);
1:         }
0:         
1:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Usage: Main [--extdir <dir>] [task] [task-options] [task data]",
0:         "",
0:         "Tasks (default task is start):",
0:         "    start           - Creates and starts a broker using a configuration file, or a broker URI.",
0:         "    stop            - Stops a running broker specified by the broker name.",
0:         "    list            - Lists all available brokers in the specified JMX context.",
0:         "    query           - Display selected broker component's attributes and statistics.",
0:         "    browse          - Display selected messages in a specified destination.",
0:         "",
0:         "Task Options (Options specific to each task):",
0:         "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
0:         "    --version       - Display the version information.",
0:         "    -h,-?,--help    - Display this help information. To display task specific help, use Main [task] -h,-?,--help",
0:         "",
0:         "Task Data:",
0:         "    - Information needed by each specific task.",
0:         ""
0:     };
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:93ee7d9
/////////////////////////////////////////////////////////////////////////
1:     private String[] helpFile;
/////////////////////////////////////////////////////////////////////////
0:         this.helpFile = new String[]{
0:                 (interactive ? "Usage: [task] [task-options] [task data]" : "Usage: Main [--extdir <dir>] [task] [task-options] [task data]"),
0:                 "",
0:                 "Tasks (default task is start):",
0:                 "    start           - Creates and starts a broker using a configuration file, or a broker URI.",
0:                 "    stop            - Stops a running broker specified by the broker name.",
0:                 "    list            - Lists all available brokers in the specified JMX context.",
0:                 "    query           - Display selected broker component's attributes and statistics.",
0:                 "    browse          - Display selected messages in a specified destination.",
0:                 "",
0:                 "Task Options (Options specific to each task):",
0:                 "    --extdir <dir>  - Add the jar files in the directory to the classpath.",
0:                 "    --version       - Display the version information.",
0:                 "    -h,-?,--help    - Display this help information. To display task specific help, use " + (interactive ? "" : "Main ") + "[task] -h,-?,--help",
0:                 "",
0:                 "Task Data:",
0:                 "    - Information needed by each specific task.",
0:                 ""
0:         };
/////////////////////////////////////////////////////////////////////////
commit:540ebc6
/////////////////////////////////////////////////////////////////////////
1:     private boolean interactive;
0: 
0: 
1:     public ShellCommand() {
1:         this(false);
0:     }
0: 
1:     public ShellCommand(boolean interactive) {
1:         this.interactive = interactive;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isInteractive() {
1:         return interactive;
0:     }
0: 
1:     public void setInteractive(boolean interactive) {
1:         this.interactive = interactive;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:             } else if (taskToken.equals("help")) {
0:                 printHelp();
============================================================================