1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
2:0f9a347: 
1:cdd5150: import java.io.IOException;
1:cdd5150: import java.net.Socket;
1:cdd5150: import java.net.URI;
1:cdd5150: import java.net.UnknownHostException;
1:cdd5150: import java.nio.ByteBuffer;
1:7319697: 
1:f2653e6: import javax.net.SocketFactory;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:f2653e6: 
1:f2653e6: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:f2653e6: import org.apache.activemq.wireformat.WireFormat;
1:f2653e6: 
1:cdd5150: public class AmqpNioSslTransport extends NIOSSLTransport {
1:61a3eab: 
1:61a3eab:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1:f2653e6: 
1:cdd5150:     public AmqpNioSslTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:cdd5150:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:61a3eab: 
1:61a3eab:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:7319697:     }
1:04ee70a: 
1:cdd5150:     public AmqpNioSslTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:04ee70a:         super(wireFormat, socket, null, null, null);
1:04ee70a: 
1:04ee70a:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public AmqpNioSslTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
1:61a3eab: 
1:61a3eab:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:7319697:     }
1:7319697: 
1:cdd5150:     @Override
1:cdd5150:     protected void initializeStreams() throws IOException {
1:cdd5150:         super.initializeStreams();
1:cdd5150:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
1:04ee70a:             serviceRead();
1:0f9a347:         }
1:0f9a347:     }
1:0f9a347: 
1:cdd5150:     @Override
1:cdd5150:     protected void processCommand(ByteBuffer plain) throws Exception {
1:61a3eab:         frameReader.parse(plain);
1:0f9a347:     }
1:04ee70a: 
1:04ee70a:     /* (non-Javadoc)
1:04ee70a:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#secureRead(java.nio.ByteBuffer)
1:04ee70a:      */
1:04ee70a: 
1:04ee70a:     @Override
1:ed0e786:     protected void doInit() throws Exception {
1:04ee70a:         if (initBuffer != null) {
1:04ee70a:             nextFrameSize = -1;
1:04ee70a:         }
1:ed0e786:         super.doInit();
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected int secureRead(ByteBuffer plain) throws Exception {
1:04ee70a:         if (initBuffer != null) {
1:04ee70a:             initBuffer.buffer.flip();
1:04ee70a:             if (initBuffer.buffer.hasRemaining()) {
1:04ee70a:                 plain.flip();
1:04ee70a:                 for (int i =0; i < 8; i++) {
1:04ee70a:                     plain.put(initBuffer.buffer.get());
1:04ee70a:                 }
1:04ee70a:                 plain.flip();
1:04ee70a:                 processCommand(plain);
1:04ee70a:                 initBuffer.buffer.clear();
1:04ee70a:                 return 8;
1:04ee70a:             }
1:04ee70a:         }
1:04ee70a:         return super.secureRead(plain);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:0f9a347: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1:     protected void doInit() throws Exception {
1:         super.doInit();
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLEngine;
/////////////////////////////////////////////////////////////////////////
1:         super(wireFormat, socket, null, null, null);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:     }
1: 
1:     public AmqpNioSslTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#secureRead(java.nio.ByteBuffer)
1:      */
1: 
1:     @Override
0:     protected void doInit() {
1:         if (initBuffer != null) {
1:             nextFrameSize = -1;
1:             serviceRead();
1: 
1:         }
1:     }
1: 
1:     @Override
1:     protected int secureRead(ByteBuffer plain) throws Exception {
1:         if (initBuffer != null) {
1:             initBuffer.buffer.flip();
1:             if (initBuffer.buffer.hasRemaining()) {
1:                 plain.flip();
1:                 for (int i =0; i < 8; i++) {
1:                     plain.put(initBuffer.buffer.get());
1:                 }
1:                 plain.flip();
1:                 processCommand(plain);
1:                 initBuffer.buffer.clear();
1:                 return 8;
1:             }
1:         }
1:         return super.secureRead(plain);
1:     }
1: 
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8b36701
/////////////////////////////////////////////////////////////////////////
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static final Logger LOG = LoggerFactory.getLogger(AmqpNioSslTransport.class);
1: 
1:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
/////////////////////////////////////////////////////////////////////////
1:         frameReader.parse(plain);
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: 
0:     private final AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
commit:7319697
/////////////////////////////////////////////////////////////////////////
0:     private final ByteBuffer magic = ByteBuffer.allocate(8);
/////////////////////////////////////////////////////////////////////////
0:         if (magic.position() != 8) {
1: 
0:             while (payload.hasRemaining() && magic.position() < 8) {
0:                 magic.put(payload.get());
1:             }
1: 
0:             if (!magic.hasRemaining()) {
0:                 magic.flip();
0:                 doConsume(new AmqpHeader(new Buffer(magic)));
0:                 magic.position(8);
0:         if (payload.hasRemaining()) {
0:             doConsume(AmqpSupport.toBuffer(payload));
1:         }
commit:0f9a347
/////////////////////////////////////////////////////////////////////////
0: import javax.net.SocketFactory;
1: 
0: import org.apache.activemq.transport.nio.NIOSSLTransport;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.hawtbuf.Buffer;
1: 
0:     private boolean magicRead;
1: 
/////////////////////////////////////////////////////////////////////////
0:         byte[] fill = new byte[plain.remaining()];
0:         plain.get(fill);
0: 
0:         ByteBuffer payload = ByteBuffer.wrap(fill);
0: 
0:         if (!magicRead) {
0:             if (payload.remaining() >= 8) {
0:                 magicRead = true;
0:                 Buffer magic = new Buffer(8);
0:                 for (int i = 0; i < 8; i++) {
0:                     magic.data[i] = payload.get();
1:                 }
0:                 doConsume(new AmqpHeader(magic));
1:             }
1:         }
0: 
0:         doConsume(AmqpSupport.toBuffer(payload));
1:     }
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:87420cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
/////////////////////////////////////////////////////////////////////////
0:         amqpNioTransportHelper.processCommand(plain);
commit:2360fb8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.nio.NIOSSLTransport;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.hawtbuf.Buffer;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: import javax.net.SocketFactory;
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0:     private DataInputStream amqpHeaderValue = new DataInputStream(new ByteArrayInputStream(new byte[]{'A', 'M', 'Q', 'P'}));
0:     public final Integer AMQP_HEADER_VALUE = amqpHeaderValue.readInt();
0:     private static final Logger LOG = LoggerFactory.getLogger(AmqpNioSslTransport.class);
0:     private boolean magicConsumed = false;
/////////////////////////////////////////////////////////////////////////
0:         // Are we waiting for the next Command or are we building on the current one?  The
0:         // frame size is in the first 4 bytes.
0:         if (nextFrameSize == -1) {
0:             // We can get small packets that don't give us enough for the frame size
0:             // so allocate enough for the initial size value and
0:             if (plain.remaining() < 4) {
0:                 if (currentBuffer == null) {
0:                     currentBuffer = ByteBuffer.allocate(4);
0:                 }
0:                 // Go until we fill the integer sized current buffer.
0:                 while (currentBuffer.hasRemaining() && plain.hasRemaining()) {
0:                     currentBuffer.put(plain.get());
0:                 }
0:                 // Didn't we get enough yet to figure out next frame size.
0:                 if (currentBuffer.hasRemaining()) {
0:                     return;
0:                 } else {
0:                     currentBuffer.flip();
0:                     nextFrameSize = currentBuffer.getInt();
0:                 }
0:             } else {
0:                 // Either we are completing a previous read of the next frame size or its
0:                 // fully contained in plain already.
0:                 if (currentBuffer != null) {
0:                     // Finish the frame size integer read and get from the current buffer.
0:                     while (currentBuffer.hasRemaining()) {
0:                         currentBuffer.put(plain.get());
0:                     }
0:                     currentBuffer.flip();
0:                     nextFrameSize = currentBuffer.getInt();
0:                 } else {
0:                     nextFrameSize = plain.getInt();
0:                 }
0:         // There are three possibilities when we get here.  We could have a partial frame,
0:         // a full frame, or more than 1 frame
0:         while (true) {
0:             LOG.debug("Entering while loop with plain.position {} remaining {} ", plain.position(), plain.remaining());
0:             // handle headers, which start with 'A','M','Q','P' rather than size
0:             if (nextFrameSize == AMQP_HEADER_VALUE) {
0:                 nextFrameSize = handleAmqpHeader(plain);
0:                 if (nextFrameSize == -1) {
0:                     return;
0:                 }
0:             }
0: 
0:             validateFrameSize(nextFrameSize);
0: 
0:             // now we have the data, let's reallocate and try to fill it,  (currentBuffer.putInt() is called
0:             // because we need to put back the 4 bytes we read to determine the size)
0:             currentBuffer = ByteBuffer.allocate(nextFrameSize );
0:             currentBuffer.putInt(nextFrameSize);
0:             if (currentBuffer.remaining() >= plain.remaining()) {
0:                 currentBuffer.put(plain);
0:             } else {
0:                 byte[] fill = new byte[currentBuffer.remaining()];
0:                 plain.get(fill);
0:                 currentBuffer.put(fill);
0:             }
0: 
0:             // Either we have enough data for a new command or we have to wait for some more.  If hasRemaining is true,
0:             // we have not filled the buffer yet, i.e. we haven't received the full frame.
0:             if (currentBuffer.hasRemaining()) {
0:                 return;
0:             } else {
0:                 currentBuffer.flip();
0:                 LOG.debug("Calling doConsume with position {} limit {}", currentBuffer.position(), currentBuffer.limit());
0:                 doConsume(AmqpSupport.toBuffer(currentBuffer));
0: 
0:                 // Determine if there are more frames to process
0:                 if (plain.hasRemaining()) {
0:                     if (plain.remaining() < 4) {
0:                         nextFrameSize = 4;
0:                     } else {
0:                         nextFrameSize = plain.getInt();
0:                     }
0:                 } else {
0:                     nextFrameSize = -1;
0:                     currentBuffer = null;
0:                     return;
0:                 }
0:             }
0: 
0:     private void validateFrameSize(int frameSize) throws IOException {
0:         if (nextFrameSize > AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE) {
0:             throw new IOException("Frame size of " + nextFrameSize +
0:                     "larger than max allowed " + AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE);
0:         }
0:     }
0: 
0:     private int handleAmqpHeader(ByteBuffer plain) {
0:         int nextFrameSize;
0: 
0:         LOG.debug("Consuming AMQP_HEADER");
0:         currentBuffer = ByteBuffer.allocate(8);
0:         currentBuffer.putInt(AMQP_HEADER_VALUE);
0:         while (currentBuffer.hasRemaining()) {
0:             currentBuffer.put(plain.get());
0:         }
0:         currentBuffer.flip();
0:         if (!magicConsumed) {   // The first case we see is special and has to be handled differently
0:             doConsume(new AmqpHeader(new Buffer(currentBuffer)));
0:             magicConsumed = true;
0:         } else {
0:             doConsume(AmqpSupport.toBuffer(currentBuffer));
0:         }
0: 
0:         if (plain.hasRemaining()) {
0:             if (plain.remaining() < 4) {
0:                 nextFrameSize = 4;
0:             } else {
0:                 nextFrameSize = plain.getInt();
0:             }
0:         } else {
0:             nextFrameSize = -1;
0:             currentBuffer = null;
0:         }
0:         return nextFrameSize;
0:     }
0: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
0: 
0: import org.apache.activemq.transport.nio.NIOSSLTransport;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.hawtbuf.Buffer;
0: import org.fusesource.hawtbuf.DataByteArrayInputStream;
0: 
0: import javax.net.SocketFactory;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
0: 
1: public class AmqpNioSslTransport extends NIOSSLTransport {
0: 
1:     public AmqpNioSslTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
0:     }
0: 
1:     public AmqpNioSslTransport(WireFormat wireFormat, Socket socket) throws IOException {
0:         super(wireFormat, socket);
0:     }
0: 
1:     @Override
1:     protected void initializeStreams() throws IOException {
1:         super.initializeStreams();
1:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
0:             serviceRead();
0:         }
0:     }
0: 
1:     @Override
1:     protected void processCommand(ByteBuffer plain) throws Exception {
0:         doConsume(AmqpSupport.toBuffer(plain));
0:     }
0: 
0: }
============================================================================