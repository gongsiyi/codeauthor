1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: 
1:3f32507: /*
1:3f32507: DurableChat application
1:3f32507: 
1:3f32507: A basic JMS Application that uses:
1:3f32507:     - Publish and Subscribe
1:3f32507:     - Durable Subsciptions
1:3f32507:     - Persistent Messages
1:3f32507: 
1:3f32507: This sample publishes and subscribes to a specified topic.
1:3f32507: Text you enter is published to the topic with the user name.
1:3f32507: The message will persist for ten minutes if the subscriber is not available.
1:3f32507: If the subscriber reconnects within that time, the message is delivered.
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java DurableChat -b <broker:port> -u <username> -p <password>
1:3f32507:       -b broker:port points to your message broker
1:3f32507:                      Default: tcp://localhost:61616
1:3f32507:       -u username    must be unique (but is not checked)
1:3f32507:       -p password    password for user (not checked)
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - In separate console windows, start instances of the application
1:3f32507:     under unique user names.For example:
1:3f32507:        java DurableChat -b tcp://localhost:61616 -u ACCOUNTING
1:3f32507:        java DurableChat -b tcp://localhost:61616 -u LEGAL
1:3f32507:   - Enter text and then press Enter to publish the message.
1:3f32507:   - See messages appear under the various user names as you
1:3f32507:     enter messages in each console window.
1:3f32507:   - Stop a session by pressing CTRL+C in its console window.
1:3f32507:   - Keep sending messages in other sessions.
1:3f32507:   - Restart the subscriber username session that was stopped.
1:3f32507:   - Note that the "missed" messages are still available if the restart is
1:3f32507:     within thirty minutes.
1:3f32507: 
1:3f32507: */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: 
1:3f32507: public class DurableChat implements
1:3f32507:      javax.jms.MessageListener      // to handle message subscriptions
1:3f32507: {
1:3f32507:     private static final String APP_TOPIC = "jms.samples.durablechat";
1:3f32507:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:3f32507:     private static final String DEFAULT_PASSWORD = "password";
1:3f32507:     private static final long   MESSAGE_LIFESPAN = 1800000; //30 minutes
1:3f32507: 
1:3f32507:     private javax.jms.Connection connection = null;
1:3f32507:     private javax.jms.Session pubSession = null;
1:3f32507:     private javax.jms.Session subSession = null;
1:3f32507: 
1:3f32507: 
1:3f32507:     public void DurableChatter(String broker, String username, String password)
1:3f32507:     {
1:3f32507:         javax.jms.MessageProducer publisher = null;
1:3f32507:         javax.jms.MessageConsumer subscriber = null;
1:3f32507:         javax.jms.Topic topic = null;
1:3f32507: 
1:3f32507:         //Create a connection:
1:3f32507:         try{
1:3f32507:             javax.jms.ConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507:             connection = factory.createConnection (username, password);
1:3f32507: 
1:3f32507:             //Durable Subscriptions are indexed by username, clientID and subscription name
1:3f32507:             //It is a good practice to set the clientID:
1:3f32507:             connection.setClientID(username);
1:3f32507:             pubSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:             subSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse){
1:3f32507:             System.err.println ("Error: Cannot connect to Broker - " + broker);
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         //Create Publisher and Durable Subscriber:
1:3f32507:         try{
1:3f32507: 
1:3f32507:             topic = pubSession.createTopic(APP_TOPIC);
1:3f32507:             subscriber = subSession.createDurableSubscriber(topic, username);
1:3f32507:             subscriber.setMessageListener(this);
1:3f32507:             publisher = pubSession.createProducer(topic);
1:3f32507:             connection.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse){
1:3f32507:             System.out.println("Error: connection not started.");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         //Wait for user input
1:3f32507:         try
1:3f32507:         {
1:3f32507:             System.out.println("\nDurableChat application:\n"
1:3f32507:             					+ "========================\n"
1:3f32507:             					+ "The user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1:3f32507: 								+ "The application will publish messages to the " + APP_TOPIC + " topic.\n"
1:3f32507:                                 + "The application also creates a durable subscription to that topic to consume any messages published there.\n\n"
1:3f32507:                                 + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
1:3f32507:             java.io.BufferedReader stdin =
1:3f32507:                 new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
1:3f32507:             while (true)
1:3f32507:             {
1:3f32507:                 String s = stdin.readLine();
1:3f32507: 
1:3f32507:                 if(s == null){
1:3f32507:                     exit();
1:3f32507:                 }
1:3f32507:                 else if (s.length()>0)
1:3f32507:                 {
1:3f32507:                     try
1:3f32507:                     {
1:3f32507:                         javax.jms.TextMessage msg = pubSession.createTextMessage();
1:3f32507:                         msg.setText(username + ": " + s);
1:3f32507:                         //Publish the message persistantly:
1:3f32507:                         publisher.send(
1:3f32507:                             msg,                               //message
1:3f32507:                             javax.jms.DeliveryMode.PERSISTENT, //publish persistently
1:3f32507:                             javax.jms.Message.DEFAULT_PRIORITY,//priority
1:3f32507:                             MESSAGE_LIFESPAN);                 //Time to Live
1:3f32507:                     }
1:3f32507:                     catch (javax.jms.JMSException jmse){
1:3f32507:                         System.err.println("Error publishing message:" + jmse.getMessage());
1:3f32507:                     }
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch (java.io.IOException ioe)
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Message Handler**/
1:3f32507:     public void onMessage( javax.jms.Message aMessage)
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             // Cast the message as a text message.
1:3f32507:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1:3f32507: 
1:3f32507:             // This handler reads a single String from the
1:3f32507:             // message and prints it to the standard output.
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 String string = textMessage.getText();
1:3f32507:                 System.out.println( string );
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch (java.lang.RuntimeException rte)
1:3f32507:         {
1:3f32507:             rte.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507: 
1:3f32507: 
1:3f32507:     /** Cleanup resources cleanly and exit. */
1:3f32507:     private void exit()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connection.close();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.exit(0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     //
1:3f32507:     // NOTE: the remainder of this sample deals with reading arguments
1:3f32507:     // and does not utilize any JMS classes or code.
1:3f32507:     //
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String argv[]) {
1:3f32507:         // Is there anything to do?
1:3f32507:         if (argv.length == 0) {
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Values to be read from parameters
1:3f32507:         String broker    = DEFAULT_BROKER_NAME;
1:3f32507:         String username  = null;
1:3f32507:         String password  = DEFAULT_PASSWORD;
1:3f32507: 
1:3f32507:         // Check parameters
1:3f32507:         for (int i = 0; i < argv.length; i++) {
1:3f32507:             String arg = argv[i];
1:3f32507: 
1:3f32507: 
1:3f32507:             if (arg.equals("-b")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing broker name:port");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 broker = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-u")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing user name");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 username = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-p")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing password");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 password = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-h")) {
1:3f32507:                 printUsage();
1:3f32507:                 System.exit(1);
1:3f32507:             }
1:3f32507: 
1:3f32507:             // Invalid argument
1:3f32507:             System.err.println ("error: unexpected argument: "+arg);
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Check values read in.
1:3f32507:         if (username == null) {
1:3f32507:             System.err.println ("error: user name must be supplied");
1:3f32507:             printUsage();
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Start the JMS client for the "chat".
1:3f32507:         DurableChat durableChat = new DurableChat();
1:3f32507:         durableChat.DurableChatter (broker, username, password);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage() {
1:3f32507: 
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("usage: java DurableChat (options) ...\n\n");
1:3f32507:         use.append("options:\n");
1:3f32507:         use.append("  -b name:port Specify name:port of broker.\n");
1:3f32507:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:3f32507:         use.append("  -u username  Specify unique user name. (Required)\n");
1:3f32507:         use.append("  -p password  Specify password for user.\n");
1:3f32507:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
1:3f32507:         use.append("  -h           This help screen.\n");
1:3f32507:         System.err.println (use);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
1:3f32507: 
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: /*
1: DurableChat application
1: 
1: A basic JMS Application that uses:
1:     - Publish and Subscribe
1:     - Durable Subsciptions
1:     - Persistent Messages
1: 
1: This sample publishes and subscribes to a specified topic.
1: Text you enter is published to the topic with the user name.
1: The message will persist for ten minutes if the subscriber is not available.
1: If the subscriber reconnects within that time, the message is delivered.
1: 
1: Usage:
1:   java DurableChat -b <broker:port> -u <username> -p <password>
1:       -b broker:port points to your message broker
1:                      Default: tcp://localhost:61616
1:       -u username    must be unique (but is not checked)
1:       -p password    password for user (not checked)
1: 
1: Suggested demonstration:
1:   - In separate console windows, start instances of the application
1:     under unique user names.For example:
1:        java DurableChat -b tcp://localhost:61616 -u ACCOUNTING
1:        java DurableChat -b tcp://localhost:61616 -u LEGAL
1:   - Enter text and then press Enter to publish the message.
1:   - See messages appear under the various user names as you
1:     enter messages in each console window.
1:   - Stop a session by pressing CTRL+C in its console window.
1:   - Keep sending messages in other sessions.
1:   - Restart the subscriber username session that was stopped.
1:   - Note that the "missed" messages are still available if the restart is
1:     within thirty minutes.
1: 
1: */
1: import org.apache.activemq.*;
1: 
1: 
1: public class DurableChat implements
1:      javax.jms.MessageListener      // to handle message subscriptions
1: {
1:     private static final String APP_TOPIC = "jms.samples.durablechat";
1:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:     private static final String DEFAULT_PASSWORD = "password";
1:     private static final long   MESSAGE_LIFESPAN = 1800000; //30 minutes
1: 
1:     private javax.jms.Connection connection = null;
1:     private javax.jms.Session pubSession = null;
1:     private javax.jms.Session subSession = null;
1: 
1: 
1:     public void DurableChatter(String broker, String username, String password)
1:     {
1:         javax.jms.MessageProducer publisher = null;
1:         javax.jms.MessageConsumer subscriber = null;
1:         javax.jms.Topic topic = null;
1: 
1:         //Create a connection:
1:         try{
1:             javax.jms.ConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:             connection = factory.createConnection (username, password);
1: 
1:             //Durable Subscriptions are indexed by username, clientID and subscription name
1:             //It is a good practice to set the clientID:
1:             connection.setClientID(username);
1:             pubSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:             subSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse){
1:             System.err.println ("Error: Cannot connect to Broker - " + broker);
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         //Create Publisher and Durable Subscriber:
1:         try{
1: 
1:             topic = pubSession.createTopic(APP_TOPIC);
1:             subscriber = subSession.createDurableSubscriber(topic, username);
1:             subscriber.setMessageListener(this);
1:             publisher = pubSession.createProducer(topic);
1:             connection.start();
1:         }
1:         catch (javax.jms.JMSException jmse){
1:             System.out.println("Error: connection not started.");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         //Wait for user input
1:         try
1:         {
1:             System.out.println("\nDurableChat application:\n"
1:             					+ "========================\n"
1:             					+ "The user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1: 								+ "The application will publish messages to the " + APP_TOPIC + " topic.\n"
1:                                 + "The application also creates a durable subscription to that topic to consume any messages published there.\n\n"
1:                                 + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
1:             java.io.BufferedReader stdin =
1:                 new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
1:             while (true)
1:             {
1:                 String s = stdin.readLine();
1: 
1:                 if(s == null){
1:                     exit();
1:                 }
1:                 else if (s.length()>0)
1:                 {
1:                     try
1:                     {
1:                         javax.jms.TextMessage msg = pubSession.createTextMessage();
1:                         msg.setText(username + ": " + s);
1:                         //Publish the message persistantly:
1:                         publisher.send(
1:                             msg,                               //message
1:                             javax.jms.DeliveryMode.PERSISTENT, //publish persistently
1:                             javax.jms.Message.DEFAULT_PRIORITY,//priority
1:                             MESSAGE_LIFESPAN);                 //Time to Live
1:                     }
1:                     catch (javax.jms.JMSException jmse){
1:                         System.err.println("Error publishing message:" + jmse.getMessage());
1:                     }
1:                 }
1:             }
1:         }
1:         catch (java.io.IOException ioe)
1:         {
1:             ioe.printStackTrace();
1:         }
1:     }
1: 
1:     /** Message Handler**/
1:     public void onMessage( javax.jms.Message aMessage)
1:     {
1:         try
1:         {
1:             // Cast the message as a text message.
1:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1: 
1:             // This handler reads a single String from the
1:             // message and prints it to the standard output.
1:             try
1:             {
1:                 String string = textMessage.getText();
1:                 System.out.println( string );
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1:         catch (java.lang.RuntimeException rte)
1:         {
1:             rte.printStackTrace();
1:         }
1:     }
1: 
1: 
1: 
1:     /** Cleanup resources cleanly and exit. */
1:     private void exit()
1:     {
1:         try
1:         {
1:             connection.close();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1: 
1:         System.exit(0);
1:     }
1: 
1:     //
1:     // NOTE: the remainder of this sample deals with reading arguments
1:     // and does not utilize any JMS classes or code.
1:     //
1: 
1:     /** Main program entry point. */
1:     public static void main(String argv[]) {
1:         // Is there anything to do?
1:         if (argv.length == 0) {
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         // Values to be read from parameters
1:         String broker    = DEFAULT_BROKER_NAME;
1:         String username  = null;
1:         String password  = DEFAULT_PASSWORD;
1: 
1:         // Check parameters
1:         for (int i = 0; i < argv.length; i++) {
1:             String arg = argv[i];
1: 
1: 
1:             if (arg.equals("-b")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing broker name:port");
1:                     System.exit(1);
1:                 }
1:                 broker = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-u")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing user name");
1:                     System.exit(1);
1:                 }
1:                 username = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-p")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing password");
1:                     System.exit(1);
1:                 }
1:                 password = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-h")) {
1:                 printUsage();
1:                 System.exit(1);
1:             }
1: 
1:             // Invalid argument
1:             System.err.println ("error: unexpected argument: "+arg);
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         // Check values read in.
1:         if (username == null) {
1:             System.err.println ("error: user name must be supplied");
1:             printUsage();
1:         }
1: 
1:         // Start the JMS client for the "chat".
1:         DurableChat durableChat = new DurableChat();
1:         durableChat.DurableChatter (broker, username, password);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage() {
1: 
1:         StringBuffer use = new StringBuffer();
1:         use.append("usage: java DurableChat (options) ...\n\n");
1:         use.append("options:\n");
1:         use.append("  -b name:port Specify name:port of broker.\n");
1:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:         use.append("  -u username  Specify unique user name. (Required)\n");
1:         use.append("  -p password  Specify password for user.\n");
1:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
1:         use.append("  -h           This help screen.\n");
1:         System.err.println (use);
1:     }
1: 
1: }
1: 
commit:ed11b06
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: /*
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0: Copyright 2001-2008, Progress Software Corporation -  All Rights Reserved
0: 
0: DurableChat application
0: 
0: A basic JMS Application that uses:
0:     - Publish and Subscribe
0:     - Durable Subsciptions
0:     - Persistent Messages
0: 
0: This sample publishes and subscribes to a specified topic.
0: Text you enter is published to the topic with the user name.
0: The message will persist for ten minutes if the subscriber is not available.
0: If the subscriber reconnects within that time, the message is delivered.
0: 
0: Usage:
0:   java DurableChat -b <broker:port> -u <username> -p <password>
0:       -b broker:port points to your message broker
0:                      Default: tcp://localhost:61616
0:       -u username    must be unique (but is not checked)
0:       -p password    password for user (not checked)
0: 
0: Suggested demonstration:
0:   - In separate console windows, start instances of the application
0:     under unique user names.For example:
0:        java DurableChat -b tcp://localhost:61616 -u ACCOUNTING
0:        java DurableChat -b tcp://localhost:61616 -u LEGAL
0:   - Enter text and then press Enter to publish the message.
0:   - See messages appear under the various user names as you
0:     enter messages in each console window.
0:   - Stop a session by pressing CTRL+C in its console window.
0:   - Keep sending messages in other sessions.
0:   - Restart the subscriber username session that was stopped.
0:   - Note that the "missed" messages are still available if the restart is
0:     within thirty minutes.
0: 
0: */
0: import org.apache.activemq.*;
0: 
0: 
0: public class DurableChat implements
0:      javax.jms.MessageListener      // to handle message subscriptions
0: {
0:     private static final String APP_TOPIC = "jms.samples.durablechat";
0:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
0:     private static final String DEFAULT_PASSWORD = "password";
0:     private static final long   MESSAGE_LIFESPAN = 1800000; //30 minutes
0: 
0:     private javax.jms.Connection connection = null;
0:     private javax.jms.Session pubSession = null;
0:     private javax.jms.Session subSession = null;
0: 
0: 
0:     public void DurableChatter(String broker, String username, String password)
0:     {
0:         javax.jms.MessageProducer publisher = null;
0:         javax.jms.MessageConsumer subscriber = null;
0:         javax.jms.Topic topic = null;
0: 
0:         //Create a connection:
0:         try{
0:             javax.jms.ConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0:             connection = factory.createConnection (username, password);
0: 
0:             //Durable Subscriptions are indexed by username, clientID and subscription name
0:             //It is a good practice to set the clientID:
0:             connection.setClientID(username);
0:             pubSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:             subSession = connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse){
0:             System.err.println ("Error: Cannot connect to Broker - " + broker);
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         //Create Publisher and Durable Subscriber:
0:         try{
0: 
0:             topic = pubSession.createTopic(APP_TOPIC);
0:             subscriber = subSession.createDurableSubscriber(topic, username);
0:             subscriber.setMessageListener(this);
0:             publisher = pubSession.createProducer(topic);
0:             connection.start();
0:         }
0:         catch (javax.jms.JMSException jmse){
0:             System.out.println("Error: connection not started.");
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         //Wait for user input
0:         try
0:         {
0:             System.out.println("\nDurableChat application:\n"
0:             					+ "========================\n"
0:             					+ "The user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
0: 								+ "The application will publish messages to the " + APP_TOPIC + " topic.\n"
0:                                 + "The application also creates a durable subscription to that topic to consume any messages published there.\n\n"
0:                                 + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
0:             java.io.BufferedReader stdin =
0:                 new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
0:             while (true)
0:             {
0:                 String s = stdin.readLine();
0: 
0:                 if(s == null){
0:                     exit();
0:                 }
0:                 else if (s.length()>0)
0:                 {
0:                     try
0:                     {
0:                         javax.jms.TextMessage msg = pubSession.createTextMessage();
0:                         msg.setText(username + ": " + s);
0:                         //Publish the message persistantly:
0:                         publisher.send(
0:                             msg,                               //message
0:                             javax.jms.DeliveryMode.PERSISTENT, //publish persistently
0:                             javax.jms.Message.DEFAULT_PRIORITY,//priority
0:                             MESSAGE_LIFESPAN);                 //Time to Live
0:                     }
0:                     catch (javax.jms.JMSException jmse){
0:                         System.err.println("Error publishing message:" + jmse.getMessage());
0:                     }
0:                 }
0:             }
0:         }
0:         catch (java.io.IOException ioe)
0:         {
0:             ioe.printStackTrace();
0:         }
0:     }
0: 
0:     /** Message Handler**/
0:     public void onMessage( javax.jms.Message aMessage)
0:     {
0:         try
0:         {
0:             // Cast the message as a text message.
0:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
0: 
0:             // This handler reads a single String from the
0:             // message and prints it to the standard output.
0:             try
0:             {
0:                 String string = textMessage.getText();
0:                 System.out.println( string );
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:         }
0:         catch (java.lang.RuntimeException rte)
0:         {
0:             rte.printStackTrace();
0:         }
0:     }
0: 
0: 
0: 
0:     /** Cleanup resources cleanly and exit. */
0:     private void exit()
0:     {
0:         try
0:         {
0:             connection.close();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0: 
0:         System.exit(0);
0:     }
0: 
0:     //
0:     // NOTE: the remainder of this sample deals with reading arguments
0:     // and does not utilize any JMS classes or code.
0:     //
0: 
0:     /** Main program entry point. */
0:     public static void main(String argv[]) {
0:         // Is there anything to do?
0:         if (argv.length == 0) {
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         // Values to be read from parameters
0:         String broker    = DEFAULT_BROKER_NAME;
0:         String username  = null;
0:         String password  = DEFAULT_PASSWORD;
0: 
0:         // Check parameters
0:         for (int i = 0; i < argv.length; i++) {
0:             String arg = argv[i];
0: 
0: 
0:             if (arg.equals("-b")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing broker name:port");
0:                     System.exit(1);
0:                 }
0:                 broker = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-u")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing user name");
0:                     System.exit(1);
0:                 }
0:                 username = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-p")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing password");
0:                     System.exit(1);
0:                 }
0:                 password = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-h")) {
0:                 printUsage();
0:                 System.exit(1);
0:             }
0: 
0:             // Invalid argument
0:             System.err.println ("error: unexpected argument: "+arg);
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         // Check values read in.
0:         if (username == null) {
0:             System.err.println ("error: user name must be supplied");
0:             printUsage();
0:         }
0: 
0:         // Start the JMS client for the "chat".
0:         DurableChat durableChat = new DurableChat();
0:         durableChat.DurableChatter (broker, username, password);
0: 
0:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage() {
0: 
0:         StringBuffer use = new StringBuffer();
0:         use.append("usage: java DurableChat (options) ...\n\n");
0:         use.append("options:\n");
0:         use.append("  -b name:port Specify name:port of broker.\n");
0:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
0:         use.append("  -u username  Specify unique user name. (Required)\n");
0:         use.append("  -p password  Specify password for user.\n");
0:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
0:         use.append("  -h           This help screen.\n");
0:         System.err.println (use);
0:     }
0: 
0: }
0: 
============================================================================