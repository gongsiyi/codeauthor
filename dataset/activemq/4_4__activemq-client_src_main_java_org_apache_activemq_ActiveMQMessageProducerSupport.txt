1:fc00993: /**
1:677c22b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:677c22b:  * contributor license agreements.  See the NOTICE file distributed with
1:677c22b:  * this work for additional information regarding copyright ownership.
1:677c22b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:677c22b:  * (the "License"); you may not use this file except in compliance with
1:677c22b:  * the License.  You may obtain a copy of the License at
2:677c22b:  *
1:677c22b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:677c22b:  *
1:677c22b:  * Unless required by applicable law or agreed to in writing, software
1:677c22b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:677c22b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:677c22b:  * See the License for the specific language governing permissions and
1:677c22b:  * limitations under the License.
1:677c22b:  */
1:677c22b: package org.apache.activemq;
1:677c22b: 
1:74a7a8b: import javax.jms.DeliveryMode;
1:74a7a8b: import javax.jms.Destination;
1:677c22b: import javax.jms.IllegalStateException;
1:74a7a8b: import javax.jms.JMSException;
1:677c22b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageProducer;
1:677c22b: 
1:677c22b: /**
1:677c22b:  * A useful base class for implementing a {@link MessageProducer}
1:b0c2a40:  *
1:53f789b:  *
1:677c22b:  */
1:677c22b: public abstract class ActiveMQMessageProducerSupport implements MessageProducer, Closeable {
1:677c22b:     protected ActiveMQSession session;
1:677c22b:     protected boolean disableMessageID;
1:677c22b:     protected boolean disableMessageTimestamp;
1:677c22b:     protected int defaultDeliveryMode;
1:677c22b:     protected int defaultPriority;
1:677c22b:     protected long defaultTimeToLive;
1:114a923:     protected int sendTimeout=0;
1:677c22b: 
1:677c22b:     public ActiveMQMessageProducerSupport(ActiveMQSession session) {
1:677c22b:         this.session = session;
1:677c22b:         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sets whether message IDs are disabled.
1:677c22b:      * <P>
1:677c22b:      * Since message IDs take some effort to create and increase a message's
1:677c22b:      * size, some JMS providers may be able to optimize message overhead if
1:677c22b:      * they are given a hint that the message ID is not used by an application.
1:677c22b:      * By calling the <CODE>setDisableMessageID</CODE> method on this message
1:677c22b:      * producer, a JMS client enables this potential optimization for all
1:677c22b:      * messages sent by this message producer. If the JMS provider accepts this
1:677c22b:      * hint, these messages must have the message ID set to null; if the
1:677c22b:      * provider ignores the hint, the message ID must be set to its normal
1:677c22b:      * unique value.
1:677c22b:      * <P>
1:677c22b:      * Message IDs are enabled by default.
1:677c22b:      *
1:677c22b:      * @param value indicates if message IDs are disabled
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:677c22b:      *                      some internal error.
1:677c22b:      */
1:677c22b:     public void setDisableMessageID(boolean value) throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         this.disableMessageID = value;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Gets an indication of whether message IDs are disabled.
1:677c22b:      *
1:677c22b:      * @return an indication of whether message IDs are disabled
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to determine if message IDs are
1:677c22b:      *                      disabled due to some internal error.
1:677c22b:      */
1:677c22b:     public boolean getDisableMessageID() throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         return this.disableMessageID;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sets whether message timestamps are disabled.
1:677c22b:      * <P>
1:677c22b:      * Since timestamps take some effort to create and increase a message's
1:677c22b:      * size, some JMS providers may be able to optimize message overhead if
1:677c22b:      * they are given a hint that the timestamp is not used by an application.
1:677c22b:      * By calling the <CODE>setDisableMessageTimestamp</CODE> method on this
1:677c22b:      * message producer, a JMS client enables this potential optimization for
1:677c22b:      * all messages sent by this message producer. If the JMS provider accepts
1:677c22b:      * this hint, these messages must have the timestamp set to zero; if the
1:677c22b:      * provider ignores the hint, the timestamp must be set to its normal
1:677c22b:      * value.
1:677c22b:      * <P>
1:677c22b:      * Message timestamps are enabled by default.
1:677c22b:      *
1:677c22b:      * @param value indicates if message timestamps are disabled
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:677c22b:      *                      some internal error.
1:677c22b:      */
1:677c22b:     public void setDisableMessageTimestamp(boolean value) throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         this.disableMessageTimestamp = value;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Gets an indication of whether message timestamps are disabled.
1:677c22b:      *
1:677c22b:      * @return an indication of whether message timestamps are disabled
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:677c22b:      *                      some internal error.
1:677c22b:      */
1:677c22b:     public boolean getDisableMessageTimestamp() throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         return this.disableMessageTimestamp;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sets the producer's default delivery mode.
1:677c22b:      * <P>
1:677c22b:      * Delivery mode is set to <CODE>PERSISTENT</CODE> by default.
1:677c22b:      *
1:677c22b:      * @param newDeliveryMode the message delivery mode for this message producer; legal
1:677c22b:      *                        values are <code>DeliveryMode.NON_PERSISTENT</code> and
1:677c22b:      *                        <code>DeliveryMode.PERSISTENT</code>
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to
1:677c22b:      *                      some internal error.
1:677c22b:      * @see javax.jms.MessageProducer#getDeliveryMode
1:677c22b:      * @see javax.jms.DeliveryMode#NON_PERSISTENT
1:677c22b:      * @see javax.jms.DeliveryMode#PERSISTENT
1:677c22b:      * @see javax.jms.Message#DEFAULT_DELIVERY_MODE
1:677c22b:      */
1:677c22b:     public void setDeliveryMode(int newDeliveryMode) throws JMSException {
1:677c22b:         if (newDeliveryMode != DeliveryMode.PERSISTENT && newDeliveryMode != DeliveryMode.NON_PERSISTENT) {
1:53f789b:             throw new javax.jms.IllegalStateException("unknown delivery mode: " + newDeliveryMode);
1:677c22b:         }
1:677c22b:         checkClosed();
1:677c22b:         this.defaultDeliveryMode = newDeliveryMode;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Gets the producer's default delivery mode.
1:677c22b:      *
1:677c22b:      * @return the message delivery mode for this message producer
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:677c22b:      *                      some internal error.
1:677c22b:      */
1:677c22b:     public int getDeliveryMode() throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         return this.defaultDeliveryMode;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sets the producer's default priority.
1:677c22b:      * <P>
1:677c22b:      * The JMS API defines ten levels of priority value, with 0 as the lowest
1:677c22b:      * priority and 9 as the highest. Clients should consider priorities 0-4 as
1:677c22b:      * gradations of normal priority and priorities 5-9 as gradations of
1:677c22b:      * expedited priority. Priority is set to 4 by default.
1:677c22b:      *
1:677c22b:      * @param newDefaultPriority the message priority for this message producer; must be a
1:677c22b:      *                           value between 0 and 9
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to
1:677c22b:      *                      some internal error.
1:677c22b:      * @see javax.jms.MessageProducer#getPriority
1:677c22b:      * @see javax.jms.Message#DEFAULT_PRIORITY
1:677c22b:      */
1:677c22b:     public void setPriority(int newDefaultPriority) throws JMSException {
1:677c22b:         if (newDefaultPriority < 0 || newDefaultPriority > 9) {
1:677c22b:             throw new IllegalStateException("default priority must be a value between 0 and 9");
1:677c22b:         }
1:677c22b:         checkClosed();
1:677c22b:         this.defaultPriority = newDefaultPriority;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Gets the producer's default priority.
1:677c22b:      *
1:677c22b:      * @return the message priority for this message producer
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:677c22b:      *                      some internal error.
1:677c22b:      * @see javax.jms.MessageProducer#setPriority
1:677c22b:      */
1:677c22b:     public int getPriority() throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         return this.defaultPriority;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sets the default length of time in milliseconds from its dispatch time
1:677c22b:      * that a produced message should be retained by the message system.
1:677c22b:      * <P>
1:677c22b:      * Time to live is set to zero by default.
1:677c22b:      *
1:677c22b:      * @param timeToLive the message time to live in milliseconds; zero is unlimited
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to set the time to live due to
1:677c22b:      *                      some internal error.
1:677c22b:      * @see javax.jms.MessageProducer#getTimeToLive
1:677c22b:      * @see javax.jms.Message#DEFAULT_TIME_TO_LIVE
1:677c22b:      */
1:677c22b:     public void setTimeToLive(long timeToLive) throws JMSException {
1:74a7a8b:         if (timeToLive < 0L) {
1:677c22b:             throw new IllegalStateException("cannot set a negative timeToLive");
1:677c22b:         }
1:677c22b:         checkClosed();
1:677c22b:         this.defaultTimeToLive = timeToLive;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Gets the default length of time in milliseconds from its dispatch time
1:677c22b:      * that a produced message should be retained by the message system.
1:677c22b:      *
1:677c22b:      * @return the message time to live in milliseconds; zero is unlimited
1:677c22b:      * @throws javax.jms.JMSException if the JMS provider fails to get the time to live due to
1:677c22b:      *                      some internal error.
1:677c22b:      * @see javax.jms.MessageProducer#setTimeToLive
1:677c22b:      */
1:677c22b:     public long getTimeToLive() throws JMSException {
1:677c22b:         checkClosed();
1:677c22b:         return this.defaultTimeToLive;
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sends a message using the <CODE>MessageProducer</CODE>'s default
1:677c22b:      * delivery mode, priority, and time to live.
1:677c22b:      *
1:677c22b:      * @param message the message to send
1:677c22b:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:677c22b:      *                                     internal error.
1:677c22b:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:677c22b:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>
1:677c22b:      *                                     MessageProducer</CODE> with an invalid destination.
1:677c22b:      * @throws UnsupportedOperationException
1:677c22b:      *                                     if a client uses this method with a <CODE>
1:677c22b:      *                                     MessageProducer</CODE> that did not specify a
1:677c22b:      *                                     destination at creation time.
1:677c22b:      * @see javax.jms.Session#createProducer
1:677c22b:      * @see javax.jms.MessageProducer
1:677c22b:      * @since 1.1
1:677c22b:      */
1:677c22b:     public void send(Message message) throws JMSException {
1:677c22b:         this.send(this.getDestination(),
1:677c22b:                   message,
1:677c22b:                   this.defaultDeliveryMode,
1:677c22b:                   this.defaultPriority,
1:677c22b:                   this.defaultTimeToLive);
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sends a message to the destination, specifying delivery mode, priority,
1:677c22b:      * and time to live.
1:677c22b:      *
1:677c22b:      * @param message      the message to send
1:677c22b:      * @param deliveryMode the delivery mode to use
1:677c22b:      * @param priority     the priority for this message
1:677c22b:      * @param timeToLive   the message's lifetime (in milliseconds)
1:677c22b:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:677c22b:      *                                     internal error.
1:677c22b:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:677c22b:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>
1:677c22b:      *                                     MessageProducer</CODE> with an invalid destination.
1:677c22b:      * @throws UnsupportedOperationException
1:677c22b:      *                                     if a client uses this method with a <CODE>
1:677c22b:      *                                     MessageProducer</CODE> that did not specify a
1:677c22b:      *                                     destination at creation time.
1:677c22b:      * @see javax.jms.Session#createProducer
1:677c22b:      * @since 1.1
1:677c22b:      */
1:677c22b:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:677c22b:         this.send(this.getDestination(),
1:677c22b:                   message,
1:677c22b:                   deliveryMode,
1:677c22b:                   priority,
1:677c22b:                   timeToLive);
1:677c22b:     }
1:677c22b: 
1:677c22b:     /**
1:677c22b:      * Sends a message to a destination for an unidentified message producer.
1:677c22b:      * Uses the <CODE>MessageProducer</CODE>'s default delivery mode,
1:677c22b:      * priority, and time to live.
1:677c22b:      * <P>
1:677c22b:      * Typically, a message producer is assigned a destination at creation
1:677c22b:      * time; however, the JMS API also supports unidentified message producers,
1:677c22b:      * which require that the destination be supplied every time a message is
1:677c22b:      * sent.
1:677c22b:      *
1:677c22b:      * @param destination the destination to send this message to
1:677c22b:      * @param message     the message to send
1:677c22b:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:677c22b:      *                                     internal error.
1:677c22b:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:677c22b:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid destination.
1:677c22b:      * @throws UnsupportedOperationException
1:677c22b:      *                                     if a client uses this method with a <CODE>
1:677c22b:      *                                     MessageProducer</CODE> that specified a destination at
1:677c22b:      *                                     creation time.
1:677c22b:      * @see javax.jms.Session#createProducer
1:677c22b:      * @see javax.jms.MessageProducer
1:677c22b:      */
1:677c22b:     public void send(Destination destination, Message message) throws JMSException {
1:677c22b:         this.send(destination,
1:677c22b:                   message,
1:677c22b:                   this.defaultDeliveryMode,
1:677c22b:                   this.defaultPriority,
1:677c22b:                   this.defaultTimeToLive);
1:677c22b:     }
1:677c22b: 
1:677c22b: 
1:677c22b:     protected abstract void checkClosed() throws IllegalStateException;
1:114a923: 
1:114a923:     /**
1:114a923:      * @return the sendTimeout
1:114a923:      */
1:114a923:     public int getSendTimeout() {
1:114a923:         return sendTimeout;
1:114a923:     }
1:114a923: 
1:114a923:     /**
1:114a923:      * @param sendTimeout the sendTimeout to set
1:114a923:      */
1:114a923:     public void setSendTimeout(int sendTimeout) {
1:114a923:         this.sendTimeout = sendTimeout;
1:114a923:     }
1:677c22b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
/////////////////////////////////////////////////////////////////////////
1:         if (timeToLive < 0L) {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:53f789b
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             throw new javax.jms.IllegalStateException("unknown delivery mode: " + newDeliveryMode);
author:Robert Davies
-------------------------------------------------------------------------------
commit:114a923
/////////////////////////////////////////////////////////////////////////
1:     protected int sendTimeout=0;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the sendTimeout
1:      */
1:     public int getSendTimeout() {
1:         return sendTimeout;
1:     }
1: 
1:     /**
1:      * @param sendTimeout the sendTimeout to set
1:      */
1:     public void setSendTimeout(int sendTimeout) {
1:         this.sendTimeout = sendTimeout;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:677c22b
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import javax.jms.*;
1: import javax.jms.IllegalStateException;
1: import javax.jms.Message;
1: 
1: /**
1:  * A useful base class for implementing a {@link MessageProducer}
1:  *
0:  * @version $Revision: $
1:  */
1: public abstract class ActiveMQMessageProducerSupport implements MessageProducer, Closeable {
1:     protected ActiveMQSession session;
1:     protected boolean disableMessageID;
1:     protected boolean disableMessageTimestamp;
1:     protected int defaultDeliveryMode;
1:     protected int defaultPriority;
1:     protected long defaultTimeToLive;
1: 
1:     public ActiveMQMessageProducerSupport(ActiveMQSession session) {
1:         this.session = session;
1:         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
1:     }
1: 
1:     /**
1:      * Sets whether message IDs are disabled.
1:      * <P>
1:      * Since message IDs take some effort to create and increase a message's
1:      * size, some JMS providers may be able to optimize message overhead if
1:      * they are given a hint that the message ID is not used by an application.
1:      * By calling the <CODE>setDisableMessageID</CODE> method on this message
1:      * producer, a JMS client enables this potential optimization for all
1:      * messages sent by this message producer. If the JMS provider accepts this
1:      * hint, these messages must have the message ID set to null; if the
1:      * provider ignores the hint, the message ID must be set to its normal
1:      * unique value.
1:      * <P>
1:      * Message IDs are enabled by default.
1:      *
1:      * @param value indicates if message IDs are disabled
1:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:      *                      some internal error.
1:      */
1:     public void setDisableMessageID(boolean value) throws JMSException {
1:         checkClosed();
1:         this.disableMessageID = value;
1:     }
1: 
1:     /**
1:      * Gets an indication of whether message IDs are disabled.
1:      *
1:      * @return an indication of whether message IDs are disabled
1:      * @throws javax.jms.JMSException if the JMS provider fails to determine if message IDs are
1:      *                      disabled due to some internal error.
1:      */
1:     public boolean getDisableMessageID() throws JMSException {
1:         checkClosed();
1:         return this.disableMessageID;
1:     }
1: 
1:     /**
1:      * Sets whether message timestamps are disabled.
1:      * <P>
1:      * Since timestamps take some effort to create and increase a message's
1:      * size, some JMS providers may be able to optimize message overhead if
1:      * they are given a hint that the timestamp is not used by an application.
1:      * By calling the <CODE>setDisableMessageTimestamp</CODE> method on this
1:      * message producer, a JMS client enables this potential optimization for
1:      * all messages sent by this message producer. If the JMS provider accepts
1:      * this hint, these messages must have the timestamp set to zero; if the
1:      * provider ignores the hint, the timestamp must be set to its normal
1:      * value.
1:      * <P>
1:      * Message timestamps are enabled by default.
1:      *
1:      * @param value indicates if message timestamps are disabled
1:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:      *                      some internal error.
1:      */
1:     public void setDisableMessageTimestamp(boolean value) throws JMSException {
1:         checkClosed();
1:         this.disableMessageTimestamp = value;
1:     }
1: 
1:     /**
1:      * Gets an indication of whether message timestamps are disabled.
1:      *
1:      * @return an indication of whether message timestamps are disabled
1:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:      *                      some internal error.
1:      */
1:     public boolean getDisableMessageTimestamp() throws JMSException {
1:         checkClosed();
1:         return this.disableMessageTimestamp;
1:     }
1: 
1:     /**
1:      * Sets the producer's default delivery mode.
1:      * <P>
1:      * Delivery mode is set to <CODE>PERSISTENT</CODE> by default.
1:      *
1:      * @param newDeliveryMode the message delivery mode for this message producer; legal
1:      *                        values are <code>DeliveryMode.NON_PERSISTENT</code> and
1:      *                        <code>DeliveryMode.PERSISTENT</code>
1:      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to
1:      *                      some internal error.
1:      * @see javax.jms.MessageProducer#getDeliveryMode
1:      * @see javax.jms.DeliveryMode#NON_PERSISTENT
1:      * @see javax.jms.DeliveryMode#PERSISTENT
1:      * @see javax.jms.Message#DEFAULT_DELIVERY_MODE
1:      */
1:     public void setDeliveryMode(int newDeliveryMode) throws JMSException {
1:         if (newDeliveryMode != DeliveryMode.PERSISTENT && newDeliveryMode != DeliveryMode.NON_PERSISTENT) {
0:             throw new javax.jms.IllegalStateException("unkown delivery mode: " + newDeliveryMode);
1:         }
1:         checkClosed();
1:         this.defaultDeliveryMode = newDeliveryMode;
1:     }
1: 
1:     /**
1:      * Gets the producer's default delivery mode.
1:      *
1:      * @return the message delivery mode for this message producer
1:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:      *                      some internal error.
1:      */
1:     public int getDeliveryMode() throws JMSException {
1:         checkClosed();
1:         return this.defaultDeliveryMode;
1:     }
1: 
1:     /**
1:      * Sets the producer's default priority.
1:      * <P>
1:      * The JMS API defines ten levels of priority value, with 0 as the lowest
1:      * priority and 9 as the highest. Clients should consider priorities 0-4 as
1:      * gradations of normal priority and priorities 5-9 as gradations of
1:      * expedited priority. Priority is set to 4 by default.
1:      *
1:      * @param newDefaultPriority the message priority for this message producer; must be a
1:      *                           value between 0 and 9
1:      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to
1:      *                      some internal error.
1:      * @see javax.jms.MessageProducer#getPriority
1:      * @see javax.jms.Message#DEFAULT_PRIORITY
1:      */
1:     public void setPriority(int newDefaultPriority) throws JMSException {
1:         if (newDefaultPriority < 0 || newDefaultPriority > 9) {
1:             throw new IllegalStateException("default priority must be a value between 0 and 9");
1:         }
1:         checkClosed();
1:         this.defaultPriority = newDefaultPriority;
1:     }
1: 
1:     /**
1:      * Gets the producer's default priority.
1:      *
1:      * @return the message priority for this message producer
1:      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to
1:      *                      some internal error.
1:      * @see javax.jms.MessageProducer#setPriority
1:      */
1:     public int getPriority() throws JMSException {
1:         checkClosed();
1:         return this.defaultPriority;
1:     }
1: 
1:     /**
1:      * Sets the default length of time in milliseconds from its dispatch time
1:      * that a produced message should be retained by the message system.
1:      * <P>
1:      * Time to live is set to zero by default.
1:      *
1:      * @param timeToLive the message time to live in milliseconds; zero is unlimited
1:      * @throws javax.jms.JMSException if the JMS provider fails to set the time to live due to
1:      *                      some internal error.
1:      * @see javax.jms.MessageProducer#getTimeToLive
1:      * @see javax.jms.Message#DEFAULT_TIME_TO_LIVE
1:      */
1:     public void setTimeToLive(long timeToLive) throws JMSException {
0:         if (timeToLive < 0l) {
1:             throw new IllegalStateException("cannot set a negative timeToLive");
1:         }
1:         checkClosed();
1:         this.defaultTimeToLive = timeToLive;
1:     }
1: 
1:     /**
1:      * Gets the default length of time in milliseconds from its dispatch time
1:      * that a produced message should be retained by the message system.
1:      *
1:      * @return the message time to live in milliseconds; zero is unlimited
1:      * @throws javax.jms.JMSException if the JMS provider fails to get the time to live due to
1:      *                      some internal error.
1:      * @see javax.jms.MessageProducer#setTimeToLive
1:      */
1:     public long getTimeToLive() throws JMSException {
1:         checkClosed();
1:         return this.defaultTimeToLive;
1:     }
1: 
1:     /**
1:      * Sends a message using the <CODE>MessageProducer</CODE>'s default
1:      * delivery mode, priority, and time to live.
1:      *
1:      * @param message the message to send
1:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:      *                                     internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>
1:      *                                     MessageProducer</CODE> with an invalid destination.
1:      * @throws UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>
1:      *                                     MessageProducer</CODE> that did not specify a
1:      *                                     destination at creation time.
1:      * @see javax.jms.Session#createProducer
1:      * @see javax.jms.MessageProducer
1:      * @since 1.1
1:      */
1:     public void send(Message message) throws JMSException {
1:         this.send(this.getDestination(),
1:                   message,
1:                   this.defaultDeliveryMode,
1:                   this.defaultPriority,
1:                   this.defaultTimeToLive);
1:     }
1: 
1:     /**
1:      * Sends a message to the destination, specifying delivery mode, priority,
1:      * and time to live.
1:      *
1:      * @param message      the message to send
1:      * @param deliveryMode the delivery mode to use
1:      * @param priority     the priority for this message
1:      * @param timeToLive   the message's lifetime (in milliseconds)
1:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:      *                                     internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>
1:      *                                     MessageProducer</CODE> with an invalid destination.
1:      * @throws UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>
1:      *                                     MessageProducer</CODE> that did not specify a
1:      *                                     destination at creation time.
1:      * @see javax.jms.Session#createProducer
1:      * @since 1.1
1:      */
1:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         this.send(this.getDestination(),
1:                   message,
1:                   deliveryMode,
1:                   priority,
1:                   timeToLive);
1:     }
1: 
1:     /**
1:      * Sends a message to a destination for an unidentified message producer.
1:      * Uses the <CODE>MessageProducer</CODE>'s default delivery mode,
1:      * priority, and time to live.
1:      * <P>
1:      * Typically, a message producer is assigned a destination at creation
1:      * time; however, the JMS API also supports unidentified message producers,
1:      * which require that the destination be supplied every time a message is
1:      * sent.
1:      *
1:      * @param destination the destination to send this message to
1:      * @param message     the message to send
1:      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some
1:      *                                     internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid destination.
1:      * @throws UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>
1:      *                                     MessageProducer</CODE> that specified a destination at
1:      *                                     creation time.
1:      * @see javax.jms.Session#createProducer
1:      * @see javax.jms.MessageProducer
1:      */
1:     public void send(Destination destination, Message message) throws JMSException {
1:         this.send(destination,
1:                   message,
1:                   this.defaultDeliveryMode,
1:                   this.defaultPriority,
1:                   this.defaultTimeToLive);
1:     }
1: 
1: 
1:     protected abstract void checkClosed() throws IllegalStateException;
1: }
============================================================================