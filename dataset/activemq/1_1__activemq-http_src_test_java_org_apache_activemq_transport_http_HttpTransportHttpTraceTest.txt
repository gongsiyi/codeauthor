1:473b328: /**
1:473b328:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:473b328:  * contributor license agreements.  See the NOTICE file distributed with
1:473b328:  * this work for additional information regarding copyright ownership.
1:473b328:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:473b328:  * (the "License"); you may not use this file except in compliance with
1:473b328:  * the License.  You may obtain a copy of the License at
1:473b328:  *
1:473b328:  *      http://www.apache.org/licenses/LICENSE-2.0
1:473b328:  *
1:473b328:  * Unless required by applicable law or agreed to in writing, software
1:473b328:  * distributed under the License is distributed on an "AS IS" BASIS,
1:473b328:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:473b328:  * See the License for the specific language governing permissions and
1:473b328:  * limitations under the License.
1:473b328:  */
1:473b328: 
1:473b328: package org.apache.activemq.transport.http;
1:473b328: 
1:473b328: import java.util.Collection;
1:473b328: 
1:473b328: import org.apache.activemq.broker.BrokerService;
1:473b328: import org.apache.activemq.broker.TransportConnector;
1:473b328: import org.junit.After;
1:473b328: import org.junit.Before;
1:473b328: import org.junit.Test;
1:473b328: import org.junit.runner.RunWith;
1:473b328: import org.junit.runners.Parameterized;
1:473b328: import org.junit.runners.Parameterized.Parameters;
1:473b328: 
1:473b328: @RunWith(Parameterized.class)
1:473b328: public class HttpTransportHttpTraceTest {
1:473b328: 
1:473b328:     private BrokerService broker;
1:473b328:     private String uri;
1:473b328: 
1:473b328:     protected String enableTraceParam;
1:473b328:     private int expectedStatus;
1:473b328: 
1:473b328: 
1:473b328:     @Before
1:473b328:     public void setUp() throws Exception {
1:473b328:         additionalConfig();
1:473b328: 
1:473b328:         broker = new BrokerService();
1:473b328:         TransportConnector connector = broker.addConnector(getConnectorUri());
1:473b328:         broker.setPersistent(false);
1:473b328:         broker.setUseJmx(false);
1:473b328:         broker.deleteAllMessages();
1:473b328:         broker.addConnector(connector);
1:473b328:         broker.start();
1:473b328: 
1:473b328:         uri = connector.getPublishableConnectString();
1:473b328:     }
1:473b328: 
1:473b328:     protected String getConnectorUri() {
1:473b328:         return "http://localhost:0?" + enableTraceParam;
1:473b328:     }
1:473b328: 
1:473b328:     protected void additionalConfig() {
1:473b328: 
1:473b328:     }
1:473b328: 
1:473b328:     @After
1:473b328:     public void tearDown() throws Exception {
1:473b328:         broker.stop();
1:473b328:     }
1:473b328: 
1:473b328:     @Parameters
1:473b328:     public static Collection<Object[]> data() {
1:473b328:         return HttpTraceTestSupport.getTestParameters();
1:473b328:     }
1:473b328: 
1:473b328:     public HttpTransportHttpTraceTest(final String enableTraceParam, final int expectedStatus) {
1:473b328:         this.enableTraceParam = enableTraceParam;
1:473b328:         this.expectedStatus = expectedStatus;
1:473b328:     }
1:473b328: 
1:473b328:     /**
1:473b328:      * This tests whether the TRACE method is enabled or not
1:473b328:      * @throws Exception
1:473b328:      */
1:473b328:     @Test(timeout=10000)
1:473b328:     public void testHttpTraceEnabled() throws Exception {
1:473b328:         HttpTraceTestSupport.testHttpTraceEnabled(uri, expectedStatus);
1:473b328:     }
1:473b328: 
1:473b328: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:473b328
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.http;
1: 
1: import java.util.Collection;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class HttpTransportHttpTraceTest {
1: 
1:     private BrokerService broker;
1:     private String uri;
1: 
1:     protected String enableTraceParam;
1:     private int expectedStatus;
1: 
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         additionalConfig();
1: 
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector(getConnectorUri());
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.deleteAllMessages();
1:         broker.addConnector(connector);
1:         broker.start();
1: 
1:         uri = connector.getPublishableConnectString();
1:     }
1: 
1:     protected String getConnectorUri() {
1:         return "http://localhost:0?" + enableTraceParam;
1:     }
1: 
1:     protected void additionalConfig() {
1: 
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return HttpTraceTestSupport.getTestParameters();
1:     }
1: 
1:     public HttpTransportHttpTraceTest(final String enableTraceParam, final int expectedStatus) {
1:         this.enableTraceParam = enableTraceParam;
1:         this.expectedStatus = expectedStatus;
1:     }
1: 
1:     /**
1:      * This tests whether the TRACE method is enabled or not
1:      * @throws Exception
1:      */
1:     @Test(timeout=10000)
1:     public void testHttpTraceEnabled() throws Exception {
1:         HttpTraceTestSupport.testHttpTraceEnabled(uri, expectedStatus);
1:     }
1: 
1: }
============================================================================