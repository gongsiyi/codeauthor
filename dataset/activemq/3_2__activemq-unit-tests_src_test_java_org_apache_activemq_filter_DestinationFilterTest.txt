1:7d5131e: /**
1:7d5131e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d5131e:  * contributor license agreements.  See the NOTICE file distributed with
1:7d5131e:  * this work for additional information regarding copyright ownership.
1:7d5131e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d5131e:  * (the "License"); you may not use this file except in compliance with
1:7d5131e:  * the License.  You may obtain a copy of the License at
1:7d5131e:  *
1:7d5131e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d5131e:  *
1:7d5131e:  * Unless required by applicable law or agreed to in writing, software
1:7d5131e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d5131e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d5131e:  * See the License for the specific language governing permissions and
1:7d5131e:  * limitations under the License.
1:7d5131e:  */
1:7d5131e: package org.apache.activemq.filter;
1:7d5131e: 
1:7d5131e: import org.apache.activemq.command.ActiveMQQueue;
1:7d5131e: import org.apache.activemq.command.ActiveMQTopic;
1:7d5131e: 
1:7d5131e: import junit.framework.TestCase;
1:7d5131e: 
1:7d5131e: public class DestinationFilterTest extends TestCase {
1:7d5131e: 
1:7d5131e: 	public void testPrefixFilter() throws Exception {
1:7d5131e: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue(">"));
1:7d5131e: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof PrefixDestinationFilter);
1:7d5131e: 		System.out.println(filter);
1:7d5131e: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic(">")));
1:7d5131e: 	}
1:7d5131e: 
1:7d5131e: 	public void testWildcardFilter() throws Exception {
1:7d5131e: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*"));
1:7d5131e: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof WildcardDestinationFilter);
1:7d5131e: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1:7d5131e: 	}
1:7d5131e: 
1:7d5131e: 	public void testCompositeFilter() throws Exception {
1:7d5131e: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.B,B.C"));
1:7d5131e: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof CompositeDestinationFilter);
1:7d5131e: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1:7d5131e: 	}
1:291ec5e: 
1:291ec5e:     public void testMatchesChild() throws Exception{
1:291ec5e:         DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*.C"));
1:291ec5e:         assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B.C")));
1:291ec5e: 
1:291ec5e:         filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*"));
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B")));
1:291ec5e:         assertFalse("Filter did match", filter.matches(new ActiveMQQueue("A")));
1:291ec5e:     }
1:291ec5e: 
1:291ec5e:     public void testMatchesAny() throws Exception{
1:291ec5e:         DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.>.>"));
1:291ec5e: 
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.C")));
1:291ec5e: 
1:291ec5e:         assertFalse("Filter did match", filter.matches(new ActiveMQQueue("B")));
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B")));
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B.C.D.E.F")));
1:291ec5e:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A")));
1:291ec5e:     }
1:7d5131e: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:291ec5e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testMatchesChild() throws Exception{
1:         DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*.C"));
1:         assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B.C")));
1: 
1:         filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*"));
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B")));
1:         assertFalse("Filter did match", filter.matches(new ActiveMQQueue("A")));
1:     }
1: 
1:     public void testMatchesAny() throws Exception{
1:         DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.>.>"));
1: 
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.C")));
1: 
1:         assertFalse("Filter did match", filter.matches(new ActiveMQQueue("B")));
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B")));
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A.B.C.D.E.F")));
1:         assertTrue("Filter did not match", filter.matches(new ActiveMQQueue("A")));
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7d5131e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: import junit.framework.TestCase;
1: 
1: public class DestinationFilterTest extends TestCase {
1: 
1: 	public void testPrefixFilter() throws Exception {
1: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue(">"));
1: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof PrefixDestinationFilter);
1: 		System.out.println(filter);
1: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic(">")));
1: 	}
1: 
1: 	public void testWildcardFilter() throws Exception {
1: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.*"));
1: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof WildcardDestinationFilter);
1: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1: 	}
1: 
1: 	public void testCompositeFilter() throws Exception {
1: 		DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue("A.B,B.C"));
1: 		assertTrue("Filter not parsed well: " + filter.getClass(), filter instanceof CompositeDestinationFilter);
1: 		assertFalse("Filter matched wrong destination type", filter.matches(new ActiveMQTopic("A.B")));
1: 	}
1: }
============================================================================