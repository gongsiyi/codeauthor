1:ed4d6f6: /**
1:ed4d6f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed4d6f6:  * contributor license agreements.  See the NOTICE file distributed with
1:ed4d6f6:  * this work for additional information regarding copyright ownership.
1:ed4d6f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed4d6f6:  * (the "License"); you may not use this file except in compliance with
1:ed4d6f6:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:ed4d6f6:  *      http://www.apache.org/licenses/LICENSE-2.0
2:ed4d6f6:  *
1:ed4d6f6:  * Unless required by applicable law or agreed to in writing, software
1:ed4d6f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed4d6f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed4d6f6:  * See the License for the specific language governing permissions and
1:ed4d6f6:  * limitations under the License.
1:ed4d6f6:  */
1:ed4d6f6: package org.apache.activemq.advisory;
1:85ebf36: 
1:ed4d6f6: import javax.jms.Connection;
1:85ebf36: import javax.jms.MessageConsumer;
1:85ebf36: import javax.jms.MessageProducer;
1:ed4d6f6: import javax.jms.Session;
1:85ebf36: import javax.jms.TemporaryQueue;
1:85ebf36: import javax.jms.TemporaryTopic;
1:85ebf36: 
1:ed4d6f6: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:b2681b9: import org.apache.activemq.broker.region.Destination;
1:85ebf36: import org.apache.activemq.broker.region.RegionBroker;
1:b2681b9: import org.slf4j.Logger;
1:b2681b9: import org.slf4j.LoggerFactory;
15:ed4d6f6: 
1:ed4d6f6: /**
1:b2681b9:  *
1:ed4d6f6:  */
1:5d84ead: public class TempDestLoadTest extends EmbeddedBrokerTestSupport {
1:b2681b9: 
1:b2681b9:     private static final Logger LOG = LoggerFactory.getLogger(TempDestLoadTest.class);
1:b2681b9: 
1:ed4d6f6:     protected int consumerCounter;
1:ed4d6f6:     private Connection connection;
1:ed4d6f6:     private Session session;
1:85ebf36:     private static final int MESSAGE_COUNT = 2000;
1:b2681b9: 
1:ed4d6f6:     public void testLoadTempAdvisoryQueues() throws Exception {
1:5d84ead: 
1:85ebf36:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:85ebf36:             TemporaryQueue tempQueue = session.createTemporaryQueue();
1:85ebf36:             MessageConsumer consumer = session.createConsumer(tempQueue);
1:85ebf36:             MessageProducer producer = session.createProducer(tempQueue);
1:85ebf36:             consumer.close();
1:85ebf36:             producer.close();
1:ed4d6f6:             tempQueue.delete();
2:ed4d6f6:         }
1:85ebf36: 
1:ed4d6f6:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(
1:ed4d6f6:                 AdvisoryBroker.class);
1:b2681b9: 
1:85ebf36:         assertTrue(ab.getAdvisoryDestinations().size() == 0);
1:85ebf36:         assertTrue(ab.getAdvisoryConsumers().size() == 0);
1:85ebf36:         assertTrue(ab.getAdvisoryProducers().size() == 0);
1:b2681b9: 
1:b2681b9:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);
1:b2681b9: 
1:b2681b9:         for (Destination dest : rb.getDestinationMap().values()) {
1:b2681b9:             LOG.debug("Destination: {}", dest);
1:b2681b9:         }
1:b2681b9: 
1:b2681b9:         // there should be at least 2 destinations - advisories -
1:b2681b9:         // 1 for the connection + 1 generic ones
1:b2681b9:         assertTrue("Should be at least 2 destinations", rb.getDestinationMap().size() > 2);
1:85ebf36:     }
1:b2681b9: 
1:85ebf36:     public void testLoadTempAdvisoryTopics() throws Exception {
1:85ebf36:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:85ebf36:             TemporaryTopic tempTopic =  session.createTemporaryTopic();
1:85ebf36:             MessageConsumer consumer = session.createConsumer(tempTopic);
1:85ebf36:             MessageProducer producer = session.createProducer(tempTopic);
1:85ebf36:             consumer.close();
1:85ebf36:             producer.close();
1:85ebf36:             tempTopic.delete();
1:85ebf36:         }
1:b2681b9: 
1:85ebf36:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(
1:85ebf36:                 AdvisoryBroker.class);
1:ed4d6f6:         assertTrue(ab.getAdvisoryDestinations().size() == 0);
1:ed4d6f6:         assertTrue(ab.getAdvisoryConsumers().size() == 0);
1:ed4d6f6:         assertTrue(ab.getAdvisoryProducers().size() == 0);
2:85ebf36:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
2:85ebf36:                 RegionBroker.class);
1:b2681b9: 
1:b2681b9:         for (Destination dest : rb.getDestinationMap().values()) {
1:b2681b9:             LOG.debug("Destination: {}", dest);
1:b2681b9:         }
1:85ebf36: 
1:b2681b9:         // there should be at least 2 destinations - advisories -
1:b2681b9:         // 1 for the connection + 1 generic ones
1:b2681b9:         assertTrue("Should be at least 2 destinations", rb.getDestinationMap().size() > 2);
1:ed4d6f6:     }
1:85ebf36: 
1:b2681b9:     @Override
1:ed4d6f6:     protected void setUp() throws Exception {
1:ed4d6f6:         super.setUp();
1:ed4d6f6:         connection = createConnection();
1:ed4d6f6:         connection.start();
1:874e935:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ed4d6f6:     }
1:85ebf36: 
1:b2681b9:     @Override
1:ed4d6f6:     protected void tearDown() throws Exception {
1:ed4d6f6:         if (connection != null) {
1:ed4d6f6:             connection.close();
1:ed4d6f6:         }
1:ed4d6f6:         super.tearDown();
1:ed4d6f6:     }
1:ed4d6f6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:b2681b9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:  *
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(TempDestLoadTest.class);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);
1: 
1:         for (Destination dest : rb.getDestinationMap().values()) {
1:             LOG.debug("Destination: {}", dest);
1:         }
1: 
1:         // there should be at least 2 destinations - advisories -
1:         // 1 for the connection + 1 generic ones
1:         assertTrue("Should be at least 2 destinations", rb.getDestinationMap().size() > 2);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (Destination dest : rb.getDestinationMap().values()) {
1:             LOG.debug("Destination: {}", dest);
1:         }
1: 
1:         // there should be at least 2 destinations - advisories -
1:         // 1 for the connection + 1 generic ones
1:         assertTrue("Should be at least 2 destinations", rb.getDestinationMap().size() > 2);
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:874e935
/////////////////////////////////////////////////////////////////////////
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:         //there should be 2 destinations - advisories - 
0:         //1 for the connection + 1 generic ones
0:         assertTrue(rb.getDestinationMap().size()==2);            
/////////////////////////////////////////////////////////////////////////
0:         //there should be 2 destinations - advisories - 
0:         //1 for the connection + 1 generic ones
0:         assertTrue(rb.getDestinationMap().size()==2);        
commit:5d84ead
/////////////////////////////////////////////////////////////////////////
1: public class TempDestLoadTest extends EmbeddedBrokerTestSupport {
1:         
/////////////////////////////////////////////////////////////////////////
commit:85ebf36
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import org.apache.activemq.broker.region.RegionBroker;
/////////////////////////////////////////////////////////////////////////
1:     private static final int MESSAGE_COUNT = 2000;
1:     
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             TemporaryQueue tempQueue = session.createTemporaryQueue();
1:             MessageConsumer consumer = session.createConsumer(tempQueue);
1:             MessageProducer producer = session.createProducer(tempQueue);
1:             consumer.close();
1:             producer.close();
1:                
1:         assertTrue(ab.getAdvisoryDestinations().size() == 0);
1:         assertTrue(ab.getAdvisoryConsumers().size() == 0);
1:         assertTrue(ab.getAdvisoryProducers().size() == 0);
1:                
1:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
1:                 RegionBroker.class);
0:         //there should be 3 destinations - advisories - 
0:         //1 for the connection + 2 generic ones
0:         assertTrue(rb.getDestinationMap().size()==3);            
1:     }
1:     
1:     public void testLoadTempAdvisoryTopics() throws Exception {
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             TemporaryTopic tempTopic =  session.createTemporaryTopic();
1:             MessageConsumer consumer = session.createConsumer(tempTopic);
1:             MessageProducer producer = session.createProducer(tempTopic);
1:             consumer.close();
1:             producer.close();
1:             tempTopic.delete();
1:         }
1: 
1:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(
1:                 AdvisoryBroker.class);
1:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
1:                 RegionBroker.class);
0:         //there should be 3 destinations - advisories - 
0:         //1 for the connection + 2 generic ones
0:         assertTrue(rb.getDestinationMap().size()==3);        
1:         
commit:ed4d6f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.command.ActiveMQTempQueue;
1: 
1: /**
0:  * @version $Revision: 397249 $
1:  */
0: public class TempDestLoadTest extends EmbeddedBrokerTestSupport implements
0:         ConsumerListener {
1:   
1:     protected int consumerCounter;
1:     private Connection connection;
1:     private Session session;
0:     private ActiveMQTempQueue tempQueue;
1:     
1:     
1:     public void testLoadTempAdvisoryQueues() throws Exception {
1: 
0:         int count = 100;
0:         for (int i = 0; i < count; i++) {
0:             tempQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
1:             tempQueue.delete();
1:         }
1: 
1:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(
1:                 AdvisoryBroker.class);
1:         assertTrue(ab.getAdvisoryDestinations().size() == 0);
1:         assertTrue(ab.getAdvisoryConsumers().size() == 0);
1:         assertTrue(ab.getAdvisoryProducers().size() == 0);
1: 
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:         connection.start();
0:         session = connection.createSession(false, 0);
1: 
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     
0:     public void onConsumerEvent(ConsumerEvent event) {        
1:     }
1: 
1: }
============================================================================