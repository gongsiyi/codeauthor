1:068c646: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:068c646:  */
1:068c646: package org.apache.activemq.network;
1:5684d09: 
1:74a7a8b: import java.io.IOException;
1:e73ab34: 
1:25703fb: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:5684d09: import org.apache.activemq.broker.region.RegionBroker;
1:2117768: import org.apache.activemq.broker.region.Subscription;
1:5684d09: import org.apache.activemq.broker.region.TopicRegion;
1:068c646: import org.apache.activemq.command.ActiveMQDestination;
1:b593aca: import org.apache.activemq.command.ConsumerId;
1:b593aca: import org.apache.activemq.command.ConsumerInfo;
1:a038655: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:b593aca: import org.apache.activemq.filter.DestinationFilter;
1:068c646: import org.apache.activemq.transport.Transport;
1:d206621: import org.apache.activemq.util.NetworkBridgeUtils;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9d9d4cd: 
1:068c646: /**
1:068c646:  * Consolidates subscriptions
1:068c646:  */
1:f812e34: public class DurableConduitBridge extends ConduitBridge {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DurableConduitBridge.class);
1:74a7a8b: 
1:2117768:     @Override
1:a95c6db:     public String toString() {
1:6c5732b:         return "DurableConduitBridge:" + configuration.getBrokerName() + "->" + getRemoteBrokerName();
1:a95c6db:     }
1:068c646:     /**
1:068c646:      * Constructor
1:f812e34:      *
1:f812e34:      * @param configuration
1:7f883f6:      *
1:068c646:      * @param localBroker
1:068c646:      * @param remoteBroker
1:068c646:      */
1:f812e34:     public DurableConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker,
1:f812e34:                                 Transport remoteBroker) {
1:f812e34:         super(configuration, localBroker, remoteBroker);
1:e73ab34:     }
1:e73ab34: 
1:068c646:     /**
1:400b1fc:      * Subscriptions for these destinations are always created
1:7f883f6:      *
1:068c646:      */
1:2117768:     @Override
1:f812e34:     protected void setupStaticDestinations() {
1:068c646:         super.setupStaticDestinations();
1:05f82a9:         ActiveMQDestination[] dests = configuration.isDynamicOnly() ? null : durableDestinations;
1:f812e34:         if (dests != null) {
1:a80acbb:             for (ActiveMQDestination dest : dests) {
1:f812e34:                 if (isPermissableDestination(dest) && !doesConsumerExist(dest)) {
1:f812e34:                     try {
1:2117768:                         //Filtering by non-empty subscriptions, see AMQ-5875
1:2117768:                         if (dest.isTopic()) {
1:5684d09:                             RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:5684d09:                             TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:e73ab34: 
1:a439a0c:                             String candidateSubName = getSubscriberName(dest);
1:5684d09:                             for (Subscription subscription : topicRegion.getDurableSubscriptions().values()) {
1:2117768:                                 String subName = subscription.getConsumerInfo().getSubscriptionName();
1:96ce14b:                                 String clientId = subscription.getContext().getClientId();
1:96ce14b:                                 if (subName != null && subName.equals(candidateSubName) && clientId.startsWith(configuration.getName())) {
1:3953b9a:                                     DemandSubscription sub = createDemandSubscription(dest, subName);
1:96ce14b:                                     if (sub != null) {
1:96ce14b:                                         sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
1:96ce14b:                                         sub.setStaticallyIncluded(true);
1:96ce14b:                                         addSubscription(sub);
1:96ce14b:                                         break;
1:96ce14b:                                     }
1:e73ab34:                                 }
1:2117768:                             }
1:2117768:                         }
1:f812e34:                     } catch (IOException e) {
1:e1bbde7:                         LOG.error("Failed to add static destination {}", dest, e);
1:2117768:                     }
1:e1bbde7:                     LOG.trace("Forwarding messages for durable destination: {}", dest);
1:a038655:                 } else if (configuration.isSyncDurableSubs() && !isPermissableDestination(dest)) {
1:a038655:                     if (dest.isTopic()) {
1:a038655:                         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:a038655:                         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:a038655: 
1:a038655:                         String candidateSubName = getSubscriberName(dest);
1:a038655:                         for (Subscription subscription : topicRegion.getDurableSubscriptions().values()) {
1:a038655:                             String subName = subscription.getConsumerInfo().getSubscriptionName();
1:25703fb:                             if (subName != null && subName.equals(candidateSubName) &&
1:25703fb:                                     subscription instanceof DurableTopicSubscription) {
1:a038655:                                try {
1:25703fb:                                     DurableTopicSubscription durableSub = (DurableTopicSubscription) subscription;
1:25703fb:                                     //check the clientId so we only remove subs for the matching bridge
1:25703fb:                                     if (durableSub.getSubscriptionKey().getClientId().equals(localClientId)) {
1:25703fb:                                         // remove the NC subscription as it is no longer for a permissible dest
1:25703fb:                                         RemoveSubscriptionInfo sending = new RemoveSubscriptionInfo();
1:25703fb:                                         sending.setClientId(localClientId);
1:25703fb:                                         sending.setSubscriptionName(subName);
1:25703fb:                                         sending.setConnectionId(this.localConnectionInfo.getConnectionId());
1:25703fb:                                         localBroker.oneway(sending);
1:25703fb:                                     }
1:a038655:                                 } catch (IOException e) {
1:a038655:                                     LOG.debug("Exception removing NC durable subscription: {}", subName, e);
1:a038655:                                     serviceRemoteException(e);
1:a038655:                                 }
1:a038655:                                 break;
1:a038655:                             }
1:a038655:                         }
1:a038655:                     }
1:ecf89a6:                 }
1:b593aca:             }
1:b593aca:         }
6:b593aca:     }
1:e73ab34: 
1:2117768:     @Override
1:f812e34:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException {
1:d206621:         boolean isForcedDurable = NetworkBridgeUtils.isForcedDurable(info,
1:d206621:                 dynamicallyIncludedDestinations, staticallyIncludedDestinations);
1:e73ab34: 
1:e73ab34:         if (addToAlreadyInterestedConsumers(info, isForcedDurable)) {
1:b593aca:             return null; // don't want this subscription added
1:b593aca:         }
1:f9cc04e:         //add our original id to ourselves
1:f9cc04e:         info.addNetworkConsumerId(info.getConsumerId());
1:e73ab34:         ConsumerId forcedDurableId = isForcedDurable ? info.getConsumerId() : null;
1:e73ab34: 
1:e73ab34:         if(info.isDurable() || isForcedDurable) {
1:400b1fc:             // set the subscriber name to something reproducible
1:333158a:             info.setSubscriptionName(getSubscriberName(info.getDestination()));
1:9d9d4cd:             // and override the consumerId with something unique so that it won't
1:9d9d4cd:             // be removed if the durable subscriber (at the other end) goes away
1:41211c7:            info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
1:a80acbb:                                consumerIdGenerator.getNextSequenceId()));
1:96ce14b:         }
1:8b0bb33:         info.setSelector(null);
1:e73ab34:         DemandSubscription demandSubscription = doCreateDemandSubscription(info);
1:e73ab34:         if (forcedDurableId != null) {
1:e73ab34:             demandSubscription.addForcedDurableConsumer(forcedDurableId);
1:e73ab34:             forcedDurableRemoteId.add(forcedDurableId);
1:e73ab34:         }
1:e73ab34:         return demandSubscription;
1:e73ab34:     }
1:e73ab34: 
1:f812e34:     protected String getSubscriberName(ActiveMQDestination dest) {
1:05f82a9:         String subscriberName = DURABLE_SUB_PREFIX + configuration.getBrokerName() + "_" + dest.getPhysicalName();
1:c7be305:         return subscriberName;
1:e73ab34:     }
1:e73ab34: 
1:f812e34:     protected boolean doesConsumerExist(ActiveMQDestination dest) {
1:f812e34:         DestinationFilter filter = DestinationFilter.parseFilter(dest);
1:a80acbb:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
1:f812e34:             if (filter.matches(ds.getLocalInfo().getDestination())) {
1:b593aca:                 return true;
1:e73ab34:             }
1:e73ab34:         }
3:e73ab34:         return false;
1:e73ab34:     }
1:c7be305: }
============================================================================
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:41211c7
/////////////////////////////////////////////////////////////////////////
1:            info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:96ce14b
/////////////////////////////////////////////////////////////////////////
1:                                 String clientId = subscription.getContext().getClientId();
1:                                 if (subName != null && subName.equals(candidateSubName) && clientId.startsWith(configuration.getName())) {
1:                                     if (sub != null) {
1:                                         sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
1:                                         sub.setStaticallyIncluded(true);
1:                                         addSubscription(sub);
1:                                         break;
1:                                     }
/////////////////////////////////////////////////////////////////////////
0:             //Only do this for direct bridge consumers - proxy network consumers we don't
0:             //want to replace the consumerId or cleanup won't happen properly
0:             if (info.getBrokerPath().length == 1 || (info.getBrokerPath().length > 1 && info.getBrokerPath()[0] == remoteBrokerPath[0])) {
0:                 info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
1:             }
commit:25703fb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:                             if (subName != null && subName.equals(candidateSubName) &&
1:                                     subscription instanceof DurableTopicSubscription) {
1:                                     DurableTopicSubscription durableSub = (DurableTopicSubscription) subscription;
1:                                     //check the clientId so we only remove subs for the matching bridge
1:                                     if (durableSub.getSubscriptionKey().getClientId().equals(localClientId)) {
1:                                         // remove the NC subscription as it is no longer for a permissible dest
1:                                         RemoveSubscriptionInfo sending = new RemoveSubscriptionInfo();
1:                                         sending.setClientId(localClientId);
1:                                         sending.setSubscriptionName(subName);
1:                                         sending.setConnectionId(this.localConnectionInfo.getConnectionId());
1:                                         localBroker.oneway(sending);
1:                                     }
commit:d206621
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.NetworkBridgeUtils;
/////////////////////////////////////////////////////////////////////////
1:         boolean isForcedDurable = NetworkBridgeUtils.isForcedDurable(info,
1:                 dynamicallyIncludedDestinations, staticallyIncludedDestinations);
/////////////////////////////////////////////////////////////////////////
commit:a038655
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
1:                 } else if (configuration.isSyncDurableSubs() && !isPermissableDestination(dest)) {
1:                     if (dest.isTopic()) {
1:                         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:                         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1: 
1:                         String candidateSubName = getSubscriberName(dest);
1:                         for (Subscription subscription : topicRegion.getDurableSubscriptions().values()) {
1:                             String subName = subscription.getConsumerInfo().getSubscriptionName();
0:                             if (subName != null && subName.equals(candidateSubName)) {
1:                                try {
0:                                     // remove the NC subscription as it is no longer for a permissable dest
0:                                     RemoveSubscriptionInfo sending = new RemoveSubscriptionInfo();
0:                                     sending.setClientId(localClientId);
0:                                     sending.setSubscriptionName(subName);
0:                                     sending.setConnectionId(this.localConnectionInfo.getConnectionId());
0:                                     localBroker.oneway(sending);
1:                                 } catch (IOException e) {
1:                                     LOG.debug("Exception removing NC durable subscription: {}", subName, e);
1:                                     serviceRemoteException(e);
1:                                 }
1:                                 break;
1:                             }
1:                         }
1:                     }
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.TypeConversionSupport;
/////////////////////////////////////////////////////////////////////////
0:         boolean isForcedDurable = isForcedDurable(info);
1: 
1:         if (addToAlreadyInterestedConsumers(info, isForcedDurable)) {
1:         ConsumerId forcedDurableId = isForcedDurable ? info.getConsumerId() : null;
1:         if(info.isDurable() || isForcedDurable) {
/////////////////////////////////////////////////////////////////////////
1:         DemandSubscription demandSubscription = doCreateDemandSubscription(info);
1:         if (forcedDurableId != null) {
1:             demandSubscription.addForcedDurableConsumer(forcedDurableId);
1:             forcedDurableRemoteId.add(forcedDurableId);
1:         }
1:         return demandSubscription;
1:     }
1: 
1: 
0:     private boolean isForcedDurable(ConsumerInfo info) {
0:         if (info.isDurable()) {
1:             return false;
1:         }
1: 
0:         ActiveMQDestination destination = info.getDestination();
0:         if (AdvisorySupport.isAdvisoryTopic(destination) || destination.isTemporary() ||
0:                 destination.isQueue()) {
1:             return false;
1:         }
1: 
0:         ActiveMQDestination matching = findMatchingDestination(dynamicallyIncludedDestinations, destination);
0:         if (matching != null) {
0:             return isDestForcedDurable(matching);
1:         }
0:         matching = findMatchingDestination(staticallyIncludedDestinations, destination);
0:         if (matching != null) {
0:             return isDestForcedDurable(matching);
1:         }
1:         return false;
1:     }
1: 
0:     private boolean isDestForcedDurable(ActiveMQDestination destination) {
0:         final Map<String, String> options = destination.getOptions();
1: 
0:         boolean isForceDurable = false;
0:         if (options != null) {
0:             isForceDurable = (boolean) TypeConversionSupport.convert(options.get("forceDurable"), boolean.class);
1:         }
1: 
0:         return isForceDurable;
commit:3953b9a
/////////////////////////////////////////////////////////////////////////
1:                                     DemandSubscription sub = createDemandSubscription(dest, subName);
commit:5684d09
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.TopicRegion;
/////////////////////////////////////////////////////////////////////////
1:                             RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:                             TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1: 
1:                             for (Subscription subscription : topicRegion.getDurableSubscriptions().values()) {
0:                                     sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
commit:2117768
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                         //Filtering by non-empty subscriptions, see AMQ-5875
1:                         if (dest.isTopic()) {
0:                             sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
0:                             for (Subscription subscription : this.getRegionSubscriptions(dest)) {
0:                                 String clientId = subscription.getContext().getClientId();
1:                                 String subName = subscription.getConsumerInfo().getSubscriptionName();
0:                                 if (clientId != null && clientId.equals(sub.getLocalInfo().getClientId())
0:                                         && subName != null && subName.equals(sub.getLocalInfo().getSubscriptionName())) {
0:                                     addSubscription(sub);
0:                                     break;
1:                                 }
1:                             }
0:                         } else {
0:                             addSubscription(sub);
1:                         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:a439a0c
/////////////////////////////////////////////////////////////////////////
1:                             String candidateSubName = getSubscriberName(dest);
0:                                 if (subName != null && subName.equals(candidateSubName)) {
0:                                     DemandSubscription sub = createDemandSubscription(dest);
0:                                     sub.setStaticallyIncluded(true);
commit:83f519c
/////////////////////////////////////////////////////////////////////////
0:                     sub.setStaticallyIncluded(true);
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
1:         return "DurableConduitBridge:" + configuration.getBrokerName() + "->" + getRemoteBrokerName();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                         LOG.error("Failed to add static destination {}", dest, e);
1:                     LOG.trace("Forwarding messages for durable destination: {}", dest);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:     public String toString() {
0:         return "DurableConduitBridge";
1:     }
commit:05f82a9
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination[] dests = configuration.isDynamicOnly() ? null : durableDestinations;
/////////////////////////////////////////////////////////////////////////
1:         String subscriberName = DURABLE_SUB_PREFIX + configuration.getBrokerName() + "_" + dest.getPhysicalName();
commit:9d9d4cd
/////////////////////////////////////////////////////////////////////////
1: 
1:             // and override the consumerId with something unique so that it won't
1:             // be removed if the durable subscriber (at the other end) goes away
0:             info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(), consumerIdGenerator
0:                     .getNextSequenceId()));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isTraceEnabled()) {
1:                     }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DurableConduitBridge.class);
/////////////////////////////////////////////////////////////////////////
0:                         LOG.error("Failed to add static destination " + dest, e);
0:                     if (LOG.isTraceEnabled())
0:                         LOG.trace("Forwarding messages for durable destination: " + dest);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0: 
1: public class DurableConduitBridge extends ConduitBridge {
0:     static final private Log log = LogFactory.getLog(DurableConduitBridge.class);
1:      * 
1:      * @param configuration
1:     public DurableConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker,
1:                                 Transport remoteBroker) {
1:         super(configuration, localBroker, remoteBroker);
1:     protected void setupStaticDestinations() {
0:         ActiveMQDestination[] dests = durableDestinations;
1:         if (dests != null) {
0:             for (int i = 0; i < dests.length; i++) {
0:                 ActiveMQDestination dest = dests[i];
1:                 if (isPermissableDestination(dest) && !doesConsumerExist(dest)) {
0:                     DemandSubscription sub = createDemandSubscription(dest);
0:                     if (dest.isTopic()) {
1:                     try {
1:                     } catch (IOException e) {
0:                         log.error("Failed to add static destination " + dest, e);
0:                     if (log.isTraceEnabled())
0:                         log.trace("Forwarding messages for durable destination: " + dest);
1:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException {
0:         if (addToAlreadyInterestedConsumers(info)) {
0:         if (info.isDurable() || (info.getDestination().isQueue() && !info.getDestination().isTemporary())) {
0:             info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(), consumerIdGenerator
0:                 .getNextSequenceId()));
0:         if (info.isDurable()) {
0: 
0: 
1:     protected String getSubscriberName(ActiveMQDestination dest) {
0:         String subscriberName = configuration.getBrokerName() + "_" + dest.getPhysicalName();
1:     protected boolean doesConsumerExist(ActiveMQDestination dest) {
1:         DestinationFilter filter = DestinationFilter.parseFilter(dest);
0:         for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext();) {
0:             DemandSubscription ds = (DemandSubscription)i.next();
1:             if (filter.matches(ds.getLocalInfo().getDestination())) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:333158a
/////////////////////////////////////////////////////////////////////////
0:                         sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
/////////////////////////////////////////////////////////////////////////
1:             info.setSubscriptionName(getSubscriberName(info.getDestination()));
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      *
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
1:             for (ActiveMQDestination dest : dests) {
/////////////////////////////////////////////////////////////////////////
0:             info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
1:                                consumerIdGenerator.getNextSequenceId()));
/////////////////////////////////////////////////////////////////////////
1:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableConduitBridge.class);
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
1:         info.setSelector(null);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f9cc04e
/////////////////////////////////////////////////////////////////////////
1:         //add our original id to ourselves
1:         info.addNetworkConsumerId(info.getConsumerId());
0:         if (info.isDurable() || (info.getDestination().isQueue() && !info.getDestination().isTemporary())) {  
commit:54114cc
/////////////////////////////////////////////////////////////////////////
0:         String subscriberName = configuration.getBrokerName()+"_"+dest.getPhysicalName();
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0:      * @param configuration 
0:     public DurableConduitBridge(NetworkBridgeConfiguration configuration,Transport localBroker,Transport remoteBroker){
0:         super(configuration,localBroker,remoteBroker);
/////////////////////////////////////////////////////////////////////////
0:         String subscriberName = configuration.getLocalBrokerName()+"_"+dest.getPhysicalName();
commit:c7be305
/////////////////////////////////////////////////////////////////////////
0:                         sub.getLocalInfo().setSubcriptionName(getSubscriberName(dest));
/////////////////////////////////////////////////////////////////////////
0:            
0:             info.setSubcriptionName(getSubscriberName(info.getDestination()));
0:     
0:     protected String getSubscriberName(ActiveMQDestination dest){
0:         String subscriberName = getLocalBrokerName()+"_"+dest.getPhysicalName();
1:         return subscriberName;
1:     }
commit:6c1d45e
/////////////////////////////////////////////////////////////////////////
0:                         sub.getLocalInfo().setSubcriptionName(getLocalBrokerName()+"_"+name);
commit:b593aca
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: import java.util.Iterator;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.filter.DestinationFilter;
/////////////////////////////////////////////////////////////////////////
0: 
0:      * 
0: 
0:      * 
0:     protected void setupStaticDestinations(){
0:                 if(isPermissableDestination(dest) && !doesConsumerExist(dest)){
0:                     if(dest.isTopic()){
0:                         sub.getLocalInfo().setSubcriptionName(getLocalBrokerName());
1:                     }
0:                     try{
0:                         addSubscription(sub);
0:                     }catch(IOException e){
0:                         log.error("Failed to add static destination "+dest,e);
1:                     }
/////////////////////////////////////////////////////////////////////////
0:     protected DemandSubscription createDemandSubscription(ConsumerInfo info){
0:         if(addToAlreadyInterestedConsumers(info)){
1:             return null; // don't want this subscription added
1:         }
0:         // not matched so create a new one
0:         // but first, if it's durable - changed set the
0:         // ConsumerId here - so it won't be removed if the
0:         // durable subscriber goes away on the other end
0:         if(info.isDurable()||(info.getDestination().isQueue()&&!info.getDestination().isTemporary())){
0:             info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),consumerIdGenerator.getNextSequenceId()));
1:         }
0:         if(info.isDurable()){
0:             // set the subscriber name to something reproducable
0:             info.setSubcriptionName(getLocalBrokerName());
1:         }
0:         return doCreateDemandSubscription(info);
1:     }
0: 
0:     protected boolean doesConsumerExist(ActiveMQDestination dest){
0:         DestinationFilter filter=DestinationFilter.parseFilter(dest);
0:         for(Iterator i=subscriptionMapByLocalId.values().iterator();i.hasNext();){
0:             DemandSubscription ds=(DemandSubscription) i.next();
0:             if(filter.matches(ds.getLocalInfo().getDestination())){
1:                 return true;
1:             }
1:         }
0:         return false;
1:     }
commit:068c646
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import java.io.IOException;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
1: /**
1:  * Consolidates subscriptions
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class DurableConduitBridge extends ConduitBridge{
0:     static final private Log log=LogFactory.getLog(DurableConduitBridge.class);
1:     /**
1:      * Constructor
1:      * @param localBroker
1:      * @param remoteBroker
1:      */
0:     public DurableConduitBridge(Transport localBroker,Transport remoteBroker){
0:         super(localBroker,remoteBroker);
0:     }
0:     
1:     /**
0:      * Subscriptions for these desitnations are always created
0:      * @throws IOException 
0:      *
1:      */
0:     protected void setupStaticDestinations() throws IOException{
1:         super.setupStaticDestinations();
0:         ActiveMQDestination[] dests=durableDestinations;
0:         if(dests!=null){
0:             for(int i=0;i<dests.length;i++){
0:                 ActiveMQDestination dest=dests[i];
0:                 if(isPermissableDestination(dest)){
0:                     DemandSubscription sub=createDemandSubscription(dest);
0:                     addSubscription(sub);
0:                     if(log.isTraceEnabled())
0:                         log.trace("Forwarding messages for durable destination: "+dest);
0:                 }
0:             }
0:         }
0:     }
0: 
0: }
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.io.IOException;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:      * Subscriptions for these destinations are always created
/////////////////////////////////////////////////////////////////////////
0:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException{
/////////////////////////////////////////////////////////////////////////
1:             // set the subscriber name to something reproducible
============================================================================