1:4b4ce4a: /**
1:4b4ce4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b4ce4a:  * contributor license agreements.  See the NOTICE file distributed with
1:4b4ce4a:  * this work for additional information regarding copyright ownership.
1:4b4ce4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b4ce4a:  * (the "License"); you may not use this file except in compliance with
1:4b4ce4a:  * the License.  You may obtain a copy of the License at
1:4b4ce4a:  *
1:4b4ce4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b4ce4a:  *
1:4b4ce4a:  * Unless required by applicable law or agreed to in writing, software
1:4b4ce4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b4ce4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b4ce4a:  * See the License for the specific language governing permissions and
1:4b4ce4a:  * limitations under the License.
1:4b4ce4a:  */
1:4b4ce4a: package org.apache.activemq.transport.failover;
17:4b4ce4a: 
1:4b4ce4a: import java.io.IOException;
1:4b4ce4a: import java.net.*;
1:4b4ce4a: import java.util.*;
1:4acd132: import java.util.concurrent.CountDownLatch;
1:4acd132: 
1:4b4ce4a: import javax.jms.Connection;
1:4b4ce4a: import javax.net.ServerSocketFactory;
1:4b4ce4a: 
1:4b4ce4a: import junit.framework.TestCase;
1:4b4ce4a: 
1:4b4ce4a: import org.apache.activemq.ActiveMQConnectionFactory;
1:6d31ed7: import org.apache.activemq.util.Wait;
1:4b4ce4a: 
1:4b4ce4a: public class SlowConnectionTest extends TestCase {
1:6d31ed7: 
1:4acd132:     private CountDownLatch socketReadyLatch = new CountDownLatch(1);
1:6d31ed7: 
1:4b4ce4a:     public void testSlowConnection() throws Exception {
1:6d31ed7: 
1:4b4ce4a:         MockBroker broker = new MockBroker();
1:4b4ce4a:         broker.start();
1:4acd132: 
1:4acd132:         socketReadyLatch.await();
1:4acd132:         int timeout = 1000;
1:4acd132:         URI tcpUri = new URI("tcp://localhost:" + broker.ss.getLocalPort() + "?soTimeout=" + timeout + "&trace=true&connectionTimeout=" + timeout + "&wireFormat.maxInactivityDurationInitalDelay=" + timeout);
1:6d31ed7: 
1:4acd132:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")");
1:4acd132:         final Connection connection = cf.createConnection();
1:6d31ed7: 
1:4b4ce4a:         new Thread(new Runnable() {
1:4b4ce4a:             public void run() {
1:4b4ce4a:                 try { connection.start(); } catch (Throwable ignored) {}
5:4b4ce4a:             }
1:4b4ce4a:         }).start();
1:6d31ed7: 
1:4b4ce4a:         int count = 0;
1:6d31ed7:         assertTrue("Transport count: " + count + ", expected <= 1", Wait.waitFor(new Wait.Condition(){
1:6d31ed7:             public boolean isSatisified() throws Exception {
1:6d31ed7:                 int count = 0;
1:6d31ed7:                 for (Thread thread : Thread.getAllStackTraces().keySet()) {
1:6d31ed7:                     if (thread.getName().contains("ActiveMQ Transport")) { count++; }
1:6d31ed7:                 }
1:6d31ed7:                 return count == 1;
1:6d31ed7:         }}));
1:6d31ed7: 
1:4b4ce4a:         broker.interrupt();
1:4b4ce4a:         broker.join();
1:6d31ed7:     }
1:6d31ed7: 
1:4b4ce4a:     class MockBroker extends Thread {
1:4acd132:         ServerSocket ss = null;
1:4acd132:         public MockBroker() {
1:4acd132:             super("MockBroker");
1:4acd132:         }
1:6d31ed7: 
1:4b4ce4a:         public void run() {
1:6d31ed7: 
1:4b4ce4a:             List<Socket> inProgress = new ArrayList<Socket>();
1:4b4ce4a:             ServerSocketFactory factory = ServerSocketFactory.getDefault();
1:6d31ed7: 
1:4b4ce4a:             try {
1:4acd132:                 ss = factory.createServerSocket(0);
1:4acd132:                 ss.setSoTimeout(5000);
1:6d31ed7: 
1:4acd132:                 socketReadyLatch.countDown();
1:4b4ce4a:                 while (!interrupted()) {
1:4b4ce4a:                     inProgress.add(ss.accept());    // eat socket
1:4b4ce4a:                 }
1:4acd132:             } catch (java.net.SocketTimeoutException expected) {
1:4b4ce4a:             } catch (Exception e) {
1:4b4ce4a:                 e.printStackTrace();
1:4b4ce4a:             } finally {
1:4b4ce4a:                 try { ss.close(); } catch (IOException ignored) {}
1:6d31ed7:                 for (Socket s : inProgress) {
1:4b4ce4a:                     try { s.close(); } catch (IOException ignored) {}
1:6d31ed7:                 }
1:6d31ed7:             }
1:4b4ce4a:         }
1:4b4ce4a:     }
1:4b4ce4a: }
1:4acd132: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6d31ed7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: 
1: 
1: 
1: 
1: 
1: 
1:         assertTrue("Transport count: " + count + ", expected <= 1", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 int count = 0;
1:                 for (Thread thread : Thread.getAllStackTraces().keySet()) {
1:                     if (thread.getName().contains("ActiveMQ Transport")) { count++; }
1:                 }
1:                 return count == 1;
1:         }}));
1: 
1:     }
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 for (Socket s : inProgress) {
1:                 }
1:             }
author:Gary Tully
-------------------------------------------------------------------------------
commit:4acd132
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1:     private CountDownLatch socketReadyLatch = new CountDownLatch(1);
1: 
1:         socketReadyLatch.await();
1:         int timeout = 1000;
1:         URI tcpUri = new URI("tcp://localhost:" + broker.ss.getLocalPort() + "?soTimeout=" + timeout + "&trace=true&connectionTimeout=" + timeout + "&wireFormat.maxInactivityDurationInitalDelay=" + timeout);
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")");
1:         final Connection connection = cf.createConnection();
1: 
/////////////////////////////////////////////////////////////////////////
1:         ServerSocket ss = null;
1:         public MockBroker() {
1:             super("MockBroker");
1:         }
1:                 ss = factory.createServerSocket(0);
1:                 ss.setSoTimeout(5000);
1:                 socketReadyLatch.countDown();
1:             } catch (java.net.SocketTimeoutException expected) {
commit:4b4ce4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.io.IOException;
1: import java.net.*;
1: import java.util.*;
1: 
1: import javax.jms.Connection;
1: import javax.net.ServerSocketFactory;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: public class SlowConnectionTest extends TestCase {
1:         
1:     public void testSlowConnection() throws Exception {
1:         
0:         int timeout = 1000;
0:         URI tcpUri = new URI("tcp://localhost:61616?soTimeout=" + timeout + "&trace=true&connectionTimeout=" + timeout + "&wireFormat.maxInactivityDurationInitalDelay=" + timeout);
1:         
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")");
0:         final Connection connection = cf.createConnection();
1:         
1:         MockBroker broker = new MockBroker();
1:         broker.start();
1:         
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 try { connection.start(); } catch (Throwable ignored) {}
1:             }
1:         }).start();
1:         
0:         Thread.sleep(timeout * 5);
1:         
1:         int count = 0;
0:         for (Thread thread : Thread.getAllStackTraces().keySet()) {
0:             if (thread.getName().contains("ActiveMQ Transport")) { count++; }
1:         }
1:         
1:         broker.interrupt();
1:         broker.join();
1:         
0:         assertTrue("Transport count: " + count + ", expected <= 1", count <= 1);        
1:     }   
1:     
1:     class MockBroker extends Thread {
1:         
1:         public void run() {
1:             
1:             List<Socket> inProgress = new ArrayList<Socket>();
1:             ServerSocketFactory factory = ServerSocketFactory.getDefault();
0:             ServerSocket ss = null;
1:             
1:             try {
0:                 ss = factory.createServerSocket(61616);
1:                 
1:                 while (!interrupted()) {
1:                     inProgress.add(ss.accept());    // eat socket
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             } finally {
1:                 try { ss.close(); } catch (IOException ignored) {}
0:                 for (Socket s : inProgress) {               
1:                     try { s.close(); } catch (IOException ignored) {}
1:                 }               
1:             }           
1:         }
1:     }
1: }
1: 
============================================================================