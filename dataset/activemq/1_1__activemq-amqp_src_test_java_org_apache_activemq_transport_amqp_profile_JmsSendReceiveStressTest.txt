1:7cf7fba: /*
1:7cf7fba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7cf7fba:  * contributor license agreements.  See the NOTICE file distributed with
1:7cf7fba:  * this work for additional information regarding copyright ownership.
1:7cf7fba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7cf7fba:  * (the "License"); you may not use this file except in compliance with
1:7cf7fba:  * the License.  You may obtain a copy of the License at
1:7cf7fba:  *
1:7cf7fba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7cf7fba:  *
1:7cf7fba:  * Unless required by applicable law or agreed to in writing, software
1:7cf7fba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7cf7fba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7cf7fba:  * See the License for the specific language governing permissions and
1:7cf7fba:  * limitations under the License.
1:7cf7fba:  */
1:7cf7fba: package org.apache.activemq.transport.amqp.profile;
1:7cf7fba: 
1:7cf7fba: import static org.junit.Assert.assertNotNull;
1:7cf7fba: import static org.junit.Assert.assertTrue;
1:7cf7fba: 
1:7cf7fba: import java.util.Vector;
1:7cf7fba: import java.util.concurrent.ExecutorService;
1:7cf7fba: import java.util.concurrent.Executors;
1:7cf7fba: import java.util.concurrent.TimeUnit;
1:7cf7fba: import java.util.concurrent.atomic.AtomicLong;
1:7cf7fba: 
1:7cf7fba: import javax.jms.BytesMessage;
1:7cf7fba: import javax.jms.DeliveryMode;
1:7cf7fba: import javax.jms.MessageConsumer;
1:7cf7fba: import javax.jms.MessageProducer;
1:7cf7fba: import javax.jms.Queue;
1:7cf7fba: import javax.jms.Session;
1:7cf7fba: 
1:7cf7fba: import org.apache.activemq.ActiveMQSession;
1:7cf7fba: import org.apache.activemq.broker.BrokerService;
1:7cf7fba: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7cf7fba: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7cf7fba: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:7cf7fba: import org.apache.activemq.transport.amqp.JMSClientTestSupport;
1:7cf7fba: import org.apache.qpid.jms.JmsConnection;
1:7cf7fba: import org.apache.qpid.jms.JmsConnectionFactory;
1:7cf7fba: import org.junit.Before;
1:7cf7fba: import org.junit.Ignore;
1:7cf7fba: import org.junit.Test;
1:7cf7fba: import org.slf4j.Logger;
1:7cf7fba: import org.slf4j.LoggerFactory;
1:7cf7fba: 
1:7cf7fba: @Ignore("Use for profiling and memory testing")
1:7cf7fba: public class JmsSendReceiveStressTest extends JMSClientTestSupport  {
1:7cf7fba: 
1:7cf7fba:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveStressTest.class);
1:7cf7fba: 
1:7cf7fba:     public static final int PAYLOAD_SIZE = 64 * 1024;
1:7cf7fba: 
1:7cf7fba:     private final byte[] payload = new byte[PAYLOAD_SIZE];
1:7cf7fba:     private final int parallelProducer = 1;
1:7cf7fba:     private final int parallelConsumer = 1;
1:7cf7fba:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
1:7cf7fba:     private JmsConnectionFactory factory;
1:7cf7fba: 
1:7cf7fba:     private final long NUM_SENDS = 1000000;
1:7cf7fba: 
1:7cf7fba:     @Override
1:7cf7fba:     @Before
1:7cf7fba:     public void setUp() throws Exception {
1:7cf7fba:         super.setUp();
1:7cf7fba: 
1:7cf7fba:         for (int i = 0; i < PAYLOAD_SIZE; ++i) {
1:7cf7fba:             payload[i] = (byte) (i % 255);
1:7cf7fba:         }
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     @Test
1:7cf7fba:     public void testProduceConsume() throws Exception {
1:7cf7fba:         factory = new JmsConnectionFactory(getAmqpURI(getAmqpConnectionURIOptions()));
1:7cf7fba:         factory.setForceAsyncAcks(true);
1:7cf7fba:         factory.setForceAsyncSend(false);
1:7cf7fba:         factory.setForceSyncSend(false);
1:7cf7fba: 
1:7cf7fba:         final AtomicLong sharedSendCount = new AtomicLong(NUM_SENDS);
1:7cf7fba:         final AtomicLong sharedReceiveCount = new AtomicLong(NUM_SENDS);
1:7cf7fba: 
1:7cf7fba:         Thread.sleep(2000);
1:7cf7fba: 
1:7cf7fba:         long start = System.currentTimeMillis();
1:7cf7fba:         ExecutorService executorService = Executors.newFixedThreadPool(parallelConsumer + parallelProducer);
1:7cf7fba: 
1:7cf7fba:         for (int i = 0; i < parallelConsumer; i++) {
1:7cf7fba:             executorService.execute(new Runnable() {
1:7cf7fba:                 @Override
1:7cf7fba:                 public void run() {
1:7cf7fba:                     try {
1:7cf7fba:                         consumeMessages(sharedReceiveCount);
1:7cf7fba:                     } catch (Throwable e) {
1:7cf7fba:                         exceptions.add(e);
1:7cf7fba:                     }
1:7cf7fba:                 }
1:7cf7fba:             });
1:7cf7fba:         }
1:7cf7fba:         for (int i = 0; i < parallelProducer; i++) {
1:7cf7fba:             executorService.execute(new Runnable() {
1:7cf7fba:                 @Override
1:7cf7fba:                 public void run() {
1:7cf7fba:                     try {
1:7cf7fba:                         publishMessages(sharedSendCount);
1:7cf7fba:                     } catch (Throwable e) {
1:7cf7fba:                         exceptions.add(e);
1:7cf7fba:                     }
1:7cf7fba:                 }
1:7cf7fba:             });
1:7cf7fba:         }
1:7cf7fba: 
1:7cf7fba:         executorService.shutdown();
1:7cf7fba:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:7cf7fba:         assertTrue("Producers done in time", executorService.isTerminated());
1:7cf7fba:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:7cf7fba: 
1:7cf7fba:         double duration = System.currentTimeMillis() - start;
1:7cf7fba:         LOG.info("Duration:            " + duration + "ms");
1:7cf7fba:         LOG.info("Rate:                " + (NUM_SENDS * 1000 / duration) + "m/s");
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     private void consumeMessages(AtomicLong count) throws Exception {
1:7cf7fba:         JmsConnection connection = (JmsConnection) factory.createConnection();
1:7cf7fba:         connection.start();
1:7cf7fba:         Session session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:7cf7fba:         Queue queue = session.createQueue(getDestinationName());
1:7cf7fba:         MessageConsumer consumer = session.createConsumer(queue);
1:7cf7fba:         long v;
1:7cf7fba:         while ((v = count.decrementAndGet()) > 0) {
1:7cf7fba:             if ((count.get() % 10000) == 0) {
1:7cf7fba:                 LOG.info("Received message: {}", NUM_SENDS - count.get());
1:7cf7fba:             }
1:7cf7fba:             assertNotNull("got message " + v, consumer.receive(15000));
1:7cf7fba:         }
1:7cf7fba:         LOG.info("Received message: {}", NUM_SENDS);
1:7cf7fba: 
1:7cf7fba:         consumer.close();
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     private void publishMessages(AtomicLong count) throws Exception {
1:7cf7fba:         JmsConnection connection = (JmsConnection) factory.createConnection();
1:7cf7fba:         connection.start();
1:7cf7fba:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7cf7fba:         Queue queue = session.createQueue(getDestinationName());
1:7cf7fba: 
1:7cf7fba:         MessageProducer producer = session.createProducer(queue);
1:7cf7fba:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:7cf7fba: 
1:7cf7fba:         while (count.getAndDecrement() > 0) {
1:7cf7fba:             BytesMessage message = session.createBytesMessage();
1:7cf7fba:             message.writeBytes(payload);
1:7cf7fba:             producer.send(message);
1:7cf7fba:             if ((count.get() % 10000) == 0) {
1:7cf7fba:                 LOG.info("Sent message: {}", NUM_SENDS - count.get());
1:7cf7fba:             }
1:7cf7fba:         }
1:7cf7fba:         producer.close();
1:7cf7fba:         connection.close();
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     @Override
1:7cf7fba:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:7cf7fba:         PolicyEntry policyEntry = new PolicyEntry();
1:7cf7fba:         policyEntry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:7cf7fba:         policyEntry.setPrioritizedMessages(false);
1:7cf7fba:         policyEntry.setExpireMessagesPeriod(0);
1:7cf7fba:         policyEntry.setEnableAudit(false);
1:7cf7fba:         policyEntry.setOptimizedDispatch(true);
1:7cf7fba:         policyEntry.setQueuePrefetch(1); // ensure no contention on add with
1:7cf7fba:                                          // matched producer/consumer
1:7cf7fba: 
1:7cf7fba:         PolicyMap policyMap = new PolicyMap();
1:7cf7fba:         policyMap.setDefaultEntry(policyEntry);
1:7cf7fba:         brokerService.setDestinationPolicy(policyMap);
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     @Override
1:7cf7fba:     protected String getAmqpTransformer() {
1:7cf7fba:         return "jms";
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     private String getAmqpConnectionURIOptions() {
1:7cf7fba:         return "jms.presettlePolicy.presettleAll=false";
1:7cf7fba:     }
1:7cf7fba: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7cf7fba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.profile;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.transport.amqp.JMSClientTestSupport;
1: import org.apache.qpid.jms.JmsConnection;
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @Ignore("Use for profiling and memory testing")
1: public class JmsSendReceiveStressTest extends JMSClientTestSupport  {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveStressTest.class);
1: 
1:     public static final int PAYLOAD_SIZE = 64 * 1024;
1: 
1:     private final byte[] payload = new byte[PAYLOAD_SIZE];
1:     private final int parallelProducer = 1;
1:     private final int parallelConsumer = 1;
1:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
1:     private JmsConnectionFactory factory;
1: 
1:     private final long NUM_SENDS = 1000000;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         for (int i = 0; i < PAYLOAD_SIZE; ++i) {
1:             payload[i] = (byte) (i % 255);
1:         }
1:     }
1: 
1:     @Test
1:     public void testProduceConsume() throws Exception {
1:         factory = new JmsConnectionFactory(getAmqpURI(getAmqpConnectionURIOptions()));
1:         factory.setForceAsyncAcks(true);
1:         factory.setForceAsyncSend(false);
1:         factory.setForceSyncSend(false);
1: 
1:         final AtomicLong sharedSendCount = new AtomicLong(NUM_SENDS);
1:         final AtomicLong sharedReceiveCount = new AtomicLong(NUM_SENDS);
1: 
1:         Thread.sleep(2000);
1: 
1:         long start = System.currentTimeMillis();
1:         ExecutorService executorService = Executors.newFixedThreadPool(parallelConsumer + parallelProducer);
1: 
1:         for (int i = 0; i < parallelConsumer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         consumeMessages(sharedReceiveCount);
1:                     } catch (Throwable e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1:         for (int i = 0; i < parallelProducer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         publishMessages(sharedSendCount);
1:                     } catch (Throwable e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:         assertTrue("Producers done in time", executorService.isTerminated());
1:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1: 
1:         double duration = System.currentTimeMillis() - start;
1:         LOG.info("Duration:            " + duration + "ms");
1:         LOG.info("Rate:                " + (NUM_SENDS * 1000 / duration) + "m/s");
1:     }
1: 
1:     private void consumeMessages(AtomicLong count) throws Exception {
1:         JmsConnection connection = (JmsConnection) factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         long v;
1:         while ((v = count.decrementAndGet()) > 0) {
1:             if ((count.get() % 10000) == 0) {
1:                 LOG.info("Received message: {}", NUM_SENDS - count.get());
1:             }
1:             assertNotNull("got message " + v, consumer.receive(15000));
1:         }
1:         LOG.info("Received message: {}", NUM_SENDS);
1: 
1:         consumer.close();
1:     }
1: 
1:     private void publishMessages(AtomicLong count) throws Exception {
1:         JmsConnection connection = (JmsConnection) factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         while (count.getAndDecrement() > 0) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(payload);
1:             producer.send(message);
1:             if ((count.get() % 10000) == 0) {
1:                 LOG.info("Sent message: {}", NUM_SENDS - count.get());
1:             }
1:         }
1:         producer.close();
1:         connection.close();
1:     }
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policyEntry.setPrioritizedMessages(false);
1:         policyEntry.setExpireMessagesPeriod(0);
1:         policyEntry.setEnableAudit(false);
1:         policyEntry.setOptimizedDispatch(true);
1:         policyEntry.setQueuePrefetch(1); // ensure no contention on add with
1:                                          // matched producer/consumer
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policyEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return "jms";
1:     }
1: 
1:     private String getAmqpConnectionURIOptions() {
1:         return "jms.presettlePolicy.presettleAll=false";
1:     }
1: }
============================================================================