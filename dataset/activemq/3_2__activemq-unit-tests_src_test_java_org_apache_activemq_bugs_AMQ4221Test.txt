1:c73027d: /**
1:c73027d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c73027d:  * contributor license agreements.  See the NOTICE file distributed with
1:c73027d:  * this work for additional information regarding copyright ownership.
1:c73027d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c73027d:  * (the "License"); you may not use this file except in compliance with
1:c73027d:  * the License.  You may obtain a copy of the License at
1:c73027d:  *
1:c73027d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c73027d:  *
1:c73027d:  * Unless required by applicable law or agreed to in writing, software
1:c73027d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c73027d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c73027d:  * See the License for the specific language governing permissions and
1:c73027d:  * limitations under the License.
1:c73027d:  */
1:c73027d: package org.apache.activemq.bugs;
1:c73027d: 
1:c73027d: import java.util.HashSet;
1:15412ba: import java.util.LinkedList;
1:c73027d: import java.util.concurrent.CountDownLatch;
1:c73027d: import java.util.concurrent.ExecutorService;
1:c73027d: import java.util.concurrent.Executors;
1:c73027d: import java.util.concurrent.TimeUnit;
1:c73027d: import java.util.concurrent.atomic.AtomicBoolean;
1:c73027d: import java.util.concurrent.atomic.AtomicInteger;
1:c73027d: import javax.jms.BytesMessage;
1:c73027d: import javax.jms.Connection;
1:c73027d: import javax.jms.DeliveryMode;
1:c73027d: import javax.jms.JMSException;
1:c73027d: import javax.jms.Message;
1:c73027d: import javax.jms.MessageConsumer;
1:c73027d: import javax.jms.MessageProducer;
1:c73027d: import javax.jms.Session;
1:c73027d: import junit.framework.Test;
1:c73027d: import org.apache.activemq.ActiveMQConnectionFactory;
1:c73027d: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:c73027d: import org.apache.activemq.TestSupport;
1:c73027d: import org.apache.activemq.broker.BrokerService;
1:c73027d: import org.apache.activemq.broker.TransportConnector;
1:c73027d: import org.apache.activemq.broker.region.DestinationStatistics;
1:c73027d: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:c73027d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c73027d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:c73027d: import org.apache.activemq.command.ActiveMQDestination;
1:c73027d: import org.apache.activemq.command.ActiveMQQueue;
1:c73027d: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1:c73027d: import org.apache.activemq.util.DefaultTestAppender;
1:c73027d: import org.apache.log4j.Level;
1:c73027d: import org.apache.log4j.LogManager;
1:c73027d: import org.apache.log4j.spi.LoggingEvent;
1:c73027d: import org.slf4j.Logger;
1:c73027d: import org.slf4j.LoggerFactory;
1:c73027d: 
1:c73027d: public class AMQ4221Test extends TestSupport {
1:c73027d:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4221Test.class);
1:c73027d:     public int PAYLOAD_SIZE_BYTES = 4 * 1024;
1:c73027d:     public int NUM_TO_SEND = 60000;
1:c73027d:     public int NUM_CONCURRENT_PRODUCERS = 20;
1:c73027d:     public int QUEUE_COUNT = 1;
1:c73027d:     public int TMP_JOURNAL_MAX_FILE_SIZE = 10 * 1024 * 1024;
1:c73027d: 
1:c73027d:     public int DLQ_PURGE_INTERVAL = 30000;
1:c73027d: 
1:c73027d:     public int MESSAGE_TIME_TO_LIVE = 20000;
1:c73027d:     public int EXPIRE_SWEEP_PERIOD = 200;
1:c73027d:     public int TMP_JOURNAL_GC_PERIOD = 50;
1:c73027d:     public int RECEIVE_POLL_PERIOD = 4000;
1:c73027d:     private int RECEIVE_BATCH = 5000;
1:c73027d: 
1:c73027d:     final byte[] payload = new byte[PAYLOAD_SIZE_BYTES];
1:c73027d:     final AtomicInteger counter = new AtomicInteger(0);
1:c73027d:     final HashSet<Throwable> exceptions = new HashSet<Throwable>();
1:c73027d:     BrokerService brokerService;
1:c73027d:     private String brokerUrlString;
1:c73027d:     ExecutorService executorService = Executors.newCachedThreadPool();
1:c73027d:     final AtomicBoolean done = new AtomicBoolean(false);
1:15412ba:     final LinkedList<String> errorsInLog = new LinkedList<String>();
1:c73027d: 
1:c73027d:     public static Test suite() {
1:c73027d:         return suite(AMQ4221Test.class);
2:c73027d:     }
1:c73027d: 
1:c73027d:     @Override
1:c73027d:     public void setUp() throws Exception {
1:c73027d: 
1:c73027d:         LogManager.getRootLogger().addAppender(new DefaultTestAppender() {
1:c73027d: 
1:c73027d:             @Override
1:c73027d:             public void doAppend(LoggingEvent event) {
1:c73027d:                 if (event.getLevel().isGreaterOrEqual(Level.ERROR)) {
1:15412ba:                     System.err.println("Fail on error in log: " + event.getMessage());
1:c73027d:                     done.set(true);
1:15412ba:                     errorsInLog.add(event.getRenderedMessage());
1:c73027d:                 }
1:c73027d:             }
1:c73027d:         });
1:c73027d: 
1:c73027d:         done.set(false);
1:15412ba:         errorsInLog.clear();
1:c73027d:         brokerService = new BrokerService();
1:c73027d:         brokerService.setDeleteAllMessagesOnStartup(true);
1:c73027d:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("ActiveMQ.DLQ")});
1:c73027d: 
1:c73027d:         PolicyEntry defaultPolicy = new PolicyEntry();
1:c73027d:         defaultPolicy.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:c73027d:         defaultPolicy.setExpireMessagesPeriod(EXPIRE_SWEEP_PERIOD);
1:c73027d:         defaultPolicy.setProducerFlowControl(false);
1:c73027d:         defaultPolicy.setMemoryLimit(50 * 1024 * 1024);
1:c73027d: 
1:c73027d:         brokerService.getSystemUsage().getMemoryUsage().setLimit(50 * 1024 * 1024);
1:c73027d: 
1:c73027d: 
1:c73027d:         PolicyMap destinationPolicyMap = new PolicyMap();
1:c73027d:         destinationPolicyMap.setDefaultEntry(defaultPolicy);
1:c73027d:         brokerService.setDestinationPolicy(destinationPolicyMap);
1:c73027d: 
1:c73027d: 
1:c73027d:         PListStoreImpl tempDataStore = new PListStoreImpl();
1:c73027d:         tempDataStore.setDirectory(brokerService.getTmpDataDirectory());
1:c73027d:         tempDataStore.setJournalMaxFileLength(TMP_JOURNAL_MAX_FILE_SIZE);
1:c73027d:         tempDataStore.setCleanupInterval(TMP_JOURNAL_GC_PERIOD);
1:c73027d:         tempDataStore.setIndexPageSize(200);
1:c73027d:         tempDataStore.setIndexEnablePageCaching(false);
1:c73027d: 
1:c73027d:         brokerService.setTempDataStore(tempDataStore);
1:c73027d:         brokerService.setAdvisorySupport(false);
1:c73027d:         TransportConnector tcp = brokerService.addConnector("tcp://localhost:0");
1:c73027d:         brokerService.start();
1:c73027d:         brokerUrlString = tcp.getPublishableConnectString();
1:c73027d:     }
1:c73027d: 
1:c73027d:     @Override
1:c73027d:     public void tearDown() throws Exception {
1:c73027d:         brokerService.stop();
1:c73027d:         brokerService.waitUntilStopped();
1:c73027d:         executorService.shutdownNow();
1:c73027d:     }
1:c73027d: 
1:c73027d:     public void testProduceConsumeExpireHalf() throws Exception {
1:c73027d: 
1:c73027d:         final org.apache.activemq.broker.region.Queue dlq =
1:c73027d:                 (org.apache.activemq.broker.region.Queue) getDestination(brokerService, new ActiveMQQueue("ActiveMQ.DLQ"));
1:c73027d: 
1:c73027d:         if (DLQ_PURGE_INTERVAL > 0) {
1:c73027d:             executorService.execute(new Runnable() {
1:c73027d:                 @Override
2:c73027d:                 public void run() {
1:c73027d:                     while (!done.get()) {
1:c73027d:                         try {
1:c73027d:                             Thread.sleep(DLQ_PURGE_INTERVAL);
1:c73027d:                             LOG.info("Purge DLQ, current size: " + dlq.getDestinationStatistics().getMessages().getCount());
1:c73027d:                             dlq.purge();
1:c73027d:                         } catch (InterruptedException allDone) {
1:c73027d:                         } catch (Throwable e) {
1:c73027d:                             e.printStackTrace();
1:c73027d:                             exceptions.add(e);
1:c73027d:                         }
1:c73027d:                     }
1:c73027d:                 }
1:c73027d:             });
1:c73027d: 
1:c73027d:         }
1:c73027d: 
1:c73027d:         final CountDownLatch latch = new CountDownLatch(QUEUE_COUNT);
1:c73027d:         for (int i = 0; i < QUEUE_COUNT; i++) {
1:c73027d:             final int id = i;
1:c73027d:             executorService.execute(new Runnable() {
1:c73027d:                 @Override
1:c73027d:                 public void run() {
1:c73027d:                     try {
1:c73027d:                         doProduceConsumeExpireHalf(id, latch);
1:c73027d:                     } catch (Throwable e) {
1:c73027d:                         e.printStackTrace();
1:c73027d:                         exceptions.add(e);
1:c73027d:                     }
1:c73027d:                 }
1:c73027d:             });
1:c73027d:         }
1:c73027d: 
1:c73027d:         while (!done.get()) {
1:c73027d:             done.set(latch.await(5, TimeUnit.SECONDS));
1:c73027d:         }
1:c73027d:         executorService.shutdown();
1:c73027d:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:c73027d: 
1:c73027d:         assertTrue("no exceptions:" + exceptions, exceptions.isEmpty());
1:15412ba:         assertTrue("No ERROR in log:" + errorsInLog, errorsInLog.isEmpty());
1:c73027d: 
1:c73027d:     }
1:c73027d: 
1:c73027d:     public void doProduceConsumeExpireHalf(int id, CountDownLatch latch) throws Exception {
1:c73027d: 
1:c73027d:         final ActiveMQQueue queue = new ActiveMQQueue("Q" + id);
1:c73027d: 
1:c73027d:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:c73027d:         ActiveMQPrefetchPolicy prefecthPolicy = new ActiveMQPrefetchPolicy();
1:c73027d:         prefecthPolicy.setAll(0);
1:c73027d:         factory.setPrefetchPolicy(prefecthPolicy);
1:c73027d:         Connection connection = factory.createConnection();
1:c73027d:         connection.start();
1:c73027d:         final MessageConsumer consumer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(queue, "on = 'true'");
1:c73027d: 
1:c73027d:         executorService.execute(new Runnable() {
1:c73027d:             @Override
1:c73027d:             public void run() {
1:c73027d:                 try {
1:c73027d:                     while (!done.get()) {
1:c73027d:                         Thread.sleep(RECEIVE_POLL_PERIOD);
1:c73027d:                         for (int i = 0; i < RECEIVE_BATCH && !done.get(); i++) {
1:c73027d: 
1:c73027d:                             Message message = consumer.receive(1000);
1:c73027d:                             if (message != null) {
1:c73027d:                                 counter.incrementAndGet();
1:c73027d:                                 if (counter.get() > 0 && counter.get() % 500 == 0) {
1:c73027d:                                     LOG.info("received: " + counter.get() + ", " + message.getJMSDestination().toString());
1:c73027d:                                 }
1:c73027d:                             }
1:c73027d:                         }
1:c73027d:                     }
1:c73027d:                 } catch (JMSException ignored) {
1:c73027d: 
1:c73027d:                 } catch (Exception e) {
1:c73027d:                     e.printStackTrace();
1:c73027d:                     exceptions.add(e);
1:c73027d:                 }
1:c73027d:             }
1:c73027d:         });
1:c73027d: 
1:c73027d:         final AtomicInteger accumulator = new AtomicInteger(0);
1:c73027d:         final CountDownLatch producersDone = new CountDownLatch(NUM_CONCURRENT_PRODUCERS);
1:c73027d: 
1:c73027d:         for (int i = 0; i < NUM_CONCURRENT_PRODUCERS; i++) {
1:c73027d:             executorService.execute(new Runnable() {
1:c73027d:                 @Override
1:c73027d:                 public void run() {
1:c73027d:                     try {
1:c73027d:                         Connection sendConnection = factory.createConnection();
1:c73027d:                         sendConnection.start();
1:c73027d:                         Session sendSession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c73027d:                         MessageProducer producer = sendSession.createProducer(queue);
1:c73027d:                         producer.setTimeToLive(MESSAGE_TIME_TO_LIVE);
1:c73027d:                         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:c73027d: 
1:c73027d:                         while (accumulator.incrementAndGet() < NUM_TO_SEND && !done.get()) {
1:c73027d:                             BytesMessage message = sendSession.createBytesMessage();
1:c73027d:                             message.writeBytes(payload);
1:c73027d:                             message.setStringProperty("on", String.valueOf(accumulator.get() % 2 == 0));
1:c73027d:                             producer.send(message);
1:c73027d: 
1:c73027d:                         }
1:c73027d:                         producersDone.countDown();
1:c73027d:                     } catch (Exception e) {
1:c73027d:                         e.printStackTrace();
1:c73027d:                         exceptions.add(e);
1:c73027d:                     }
1:c73027d:                 }
1:c73027d:             });
1:c73027d:         }
1:c73027d: 
1:c73027d:         producersDone.await(10, TimeUnit.MINUTES);
1:c73027d: 
1:c73027d:         final DestinationStatistics view = getDestinationStatistics(brokerService, queue);
1:c73027d:         LOG.info("total expired so far " + view.getExpired().getCount() + ", " + queue.getQueueName());
1:c73027d:         latch.countDown();
1:c73027d:     }
1:c73027d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:15412ba
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
/////////////////////////////////////////////////////////////////////////
1:     final LinkedList<String> errorsInLog = new LinkedList<String>();
/////////////////////////////////////////////////////////////////////////
1:                     System.err.println("Fail on error in log: " + event.getMessage());
1:                     errorsInLog.add(event.getRenderedMessage());
1:         errorsInLog.clear();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("No ERROR in log:" + errorsInLog, errorsInLog.isEmpty());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c73027d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.HashSet;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.LogManager;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4221Test extends TestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4221Test.class);
1:     public int PAYLOAD_SIZE_BYTES = 4 * 1024;
1:     public int NUM_TO_SEND = 60000;
1:     public int NUM_CONCURRENT_PRODUCERS = 20;
1:     public int QUEUE_COUNT = 1;
1:     public int TMP_JOURNAL_MAX_FILE_SIZE = 10 * 1024 * 1024;
1: 
1:     public int DLQ_PURGE_INTERVAL = 30000;
1: 
1:     public int MESSAGE_TIME_TO_LIVE = 20000;
1:     public int EXPIRE_SWEEP_PERIOD = 200;
1:     public int TMP_JOURNAL_GC_PERIOD = 50;
1:     public int RECEIVE_POLL_PERIOD = 4000;
1:     private int RECEIVE_BATCH = 5000;
1: 
1:     final byte[] payload = new byte[PAYLOAD_SIZE_BYTES];
1:     final AtomicInteger counter = new AtomicInteger(0);
1:     final HashSet<Throwable> exceptions = new HashSet<Throwable>();
1:     BrokerService brokerService;
1:     private String brokerUrlString;
1:     ExecutorService executorService = Executors.newCachedThreadPool();
1:     final AtomicBoolean done = new AtomicBoolean(false);
1: 
1:     public static Test suite() {
1:         return suite(AMQ4221Test.class);
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1: 
1:         LogManager.getRootLogger().addAppender(new DefaultTestAppender() {
1: 
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().isGreaterOrEqual(Level.ERROR)) {
0:                     System.err.println("exit on error: " + event.getMessage());
1:                     done.set(true);
0:                     new Thread() {
1:                         public void run() {
0:                             System.exit(787);
1:                         }
0:                     }.start();
1:                 }
1:             }
1:         });
1: 
1:         done.set(false);
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("ActiveMQ.DLQ")});
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:         defaultPolicy.setExpireMessagesPeriod(EXPIRE_SWEEP_PERIOD);
1:         defaultPolicy.setProducerFlowControl(false);
1:         defaultPolicy.setMemoryLimit(50 * 1024 * 1024);
1: 
1:         brokerService.getSystemUsage().getMemoryUsage().setLimit(50 * 1024 * 1024);
1: 
1: 
1:         PolicyMap destinationPolicyMap = new PolicyMap();
1:         destinationPolicyMap.setDefaultEntry(defaultPolicy);
1:         brokerService.setDestinationPolicy(destinationPolicyMap);
1: 
1: 
1:         PListStoreImpl tempDataStore = new PListStoreImpl();
1:         tempDataStore.setDirectory(brokerService.getTmpDataDirectory());
1:         tempDataStore.setJournalMaxFileLength(TMP_JOURNAL_MAX_FILE_SIZE);
1:         tempDataStore.setCleanupInterval(TMP_JOURNAL_GC_PERIOD);
1:         tempDataStore.setIndexPageSize(200);
1:         tempDataStore.setIndexEnablePageCaching(false);
1: 
1:         brokerService.setTempDataStore(tempDataStore);
1:         brokerService.setAdvisorySupport(false);
1:         TransportConnector tcp = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         brokerUrlString = tcp.getPublishableConnectString();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:         executorService.shutdownNow();
1:     }
1: 
1:     public void testProduceConsumeExpireHalf() throws Exception {
1: 
1:         final org.apache.activemq.broker.region.Queue dlq =
1:                 (org.apache.activemq.broker.region.Queue) getDestination(brokerService, new ActiveMQQueue("ActiveMQ.DLQ"));
1: 
1:         if (DLQ_PURGE_INTERVAL > 0) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     while (!done.get()) {
1:                         try {
1:                             Thread.sleep(DLQ_PURGE_INTERVAL);
1:                             LOG.info("Purge DLQ, current size: " + dlq.getDestinationStatistics().getMessages().getCount());
1:                             dlq.purge();
1:                         } catch (InterruptedException allDone) {
1:                         } catch (Throwable e) {
1:                             e.printStackTrace();
1:                             exceptions.add(e);
1:                         }
1:                     }
1:                 }
1:             });
1: 
1:         }
1: 
1:         final CountDownLatch latch = new CountDownLatch(QUEUE_COUNT);
1:         for (int i = 0; i < QUEUE_COUNT; i++) {
1:             final int id = i;
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         doProduceConsumeExpireHalf(id, latch);
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         while (!done.get()) {
1:             done.set(latch.await(5, TimeUnit.SECONDS));
1:         }
1:         executorService.shutdown();
1:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1: 
1:         assertTrue("no exceptions:" + exceptions, exceptions.isEmpty());
1: 
1:     }
1: 
1:     public void doProduceConsumeExpireHalf(int id, CountDownLatch latch) throws Exception {
1: 
1:         final ActiveMQQueue queue = new ActiveMQQueue("Q" + id);
1: 
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:         ActiveMQPrefetchPolicy prefecthPolicy = new ActiveMQPrefetchPolicy();
1:         prefecthPolicy.setAll(0);
1:         factory.setPrefetchPolicy(prefecthPolicy);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         final MessageConsumer consumer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(queue, "on = 'true'");
1: 
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (!done.get()) {
1:                         Thread.sleep(RECEIVE_POLL_PERIOD);
1:                         for (int i = 0; i < RECEIVE_BATCH && !done.get(); i++) {
1: 
1:                             Message message = consumer.receive(1000);
1:                             if (message != null) {
1:                                 counter.incrementAndGet();
1:                                 if (counter.get() > 0 && counter.get() % 500 == 0) {
1:                                     LOG.info("received: " + counter.get() + ", " + message.getJMSDestination().toString());
1:                                 }
1:                             }
1:                         }
1:                     }
1:                 } catch (JMSException ignored) {
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                     exceptions.add(e);
1:                 }
1:             }
1:         });
1: 
1:         final AtomicInteger accumulator = new AtomicInteger(0);
1:         final CountDownLatch producersDone = new CountDownLatch(NUM_CONCURRENT_PRODUCERS);
1: 
1:         for (int i = 0; i < NUM_CONCURRENT_PRODUCERS; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         Connection sendConnection = factory.createConnection();
1:                         sendConnection.start();
1:                         Session sendSession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         MessageProducer producer = sendSession.createProducer(queue);
1:                         producer.setTimeToLive(MESSAGE_TIME_TO_LIVE);
1:                         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:                         while (accumulator.incrementAndGet() < NUM_TO_SEND && !done.get()) {
1:                             BytesMessage message = sendSession.createBytesMessage();
1:                             message.writeBytes(payload);
1:                             message.setStringProperty("on", String.valueOf(accumulator.get() % 2 == 0));
1:                             producer.send(message);
1: 
1:                         }
1:                         producersDone.countDown();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         producersDone.await(10, TimeUnit.MINUTES);
1: 
1:         final DestinationStatistics view = getDestinationStatistics(brokerService, queue);
1:         LOG.info("total expired so far " + view.getExpired().getCount() + ", " + queue.getQueueName());
1:         latch.countDown();
1:     }
1: }
============================================================================