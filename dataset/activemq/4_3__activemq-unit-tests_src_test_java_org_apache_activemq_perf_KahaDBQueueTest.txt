1:d98ea37: /**
1:d98ea37:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d98ea37:  * contributor license agreements.  See the NOTICE file distributed with
1:d98ea37:  * this work for additional information regarding copyright ownership.
1:d98ea37:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d98ea37:  * (the "License"); you may not use this file except in compliance with
1:d98ea37:  * the License.  You may obtain a copy of the License at
1:d98ea37:  *
1:d98ea37:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d98ea37:  *
1:d98ea37:  * Unless required by applicable law or agreed to in writing, software
1:d98ea37:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d98ea37:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d98ea37:  * See the License for the specific language governing permissions and
1:d98ea37:  * limitations under the License.
1:d98ea37:  */
1:d98ea37: package org.apache.activemq.perf;
3:d98ea37: 
1:d98ea37: import java.io.File;
1:d98ea37: import org.apache.activemq.broker.BrokerService;
1:dc6dc7e: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:d98ea37: 
1:d98ea37: /**
1:0bbc0ac:  * 
1:d98ea37:  */
1:d98ea37: public class KahaDBQueueTest extends SimpleQueueTest {
1:d98ea37: 
1:ee55abb:     @Override
1:c75001c:     protected void setUp() throws Exception {
1:dc6dc7e:         this.numberOfDestinations = 25;
1:dc6dc7e:         this.numberofProducers = 1;
1:c75001c:         super.setUp();
1:c75001c:     }
1:c75001c:     @Override
1:d98ea37:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:d98ea37: 
1:d98ea37:         File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
1:ee55abb:         File archiveDir = new File(dataFileDir,"archive");
1:dc6dc7e:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:d98ea37:         kaha.setDirectory(dataFileDir);
1:ee55abb:         kaha.setDirectoryArchive(archiveDir);
1:dc6dc7e:         kaha.setArchiveDataLogs(false);
1:d98ea37: 
1:d98ea37:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
1:d98ea37:         // what happens if the index is updated but a journal update is lost.
1:d98ea37:         // Index is going to be in consistent, but can it be repaired?
1:dc6dc7e:         kaha.setEnableJournalDiskSyncs(true);
1:d98ea37:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
1:ee55abb:         //kaha.setJournalMaxFileLength(1024*1024*100);
1:d98ea37:         
1:d98ea37:         // small batch means more frequent and smaller writes
1:dc6dc7e:         //kaha.setIndexWriteBatchSize(100);
1:d98ea37:         // do the index write in a separate thread
1:d98ea37:         kaha.setEnableIndexWriteAsync(true);
1:f392884:         kaha.setIndexCacheSize(10000);
1:d98ea37:         
1:d98ea37:         answer.setPersistenceAdapter(kaha);
1:d98ea37:         answer.addConnector(uri);
1:d98ea37:         answer.setDeleteAllMessagesOnStartup(true);
1:d98ea37: 
1:d98ea37:     }
1:d98ea37: 
1:d98ea37: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:dc6dc7e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         this.numberOfDestinations = 25;
1:         this.numberofProducers = 1;
/////////////////////////////////////////////////////////////////////////
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setArchiveDataLogs(false);
1:         kaha.setEnableJournalDiskSyncs(true);
1:         //kaha.setIndexWriteBatchSize(100);
commit:f392884
/////////////////////////////////////////////////////////////////////////
0:        // this.initialConsumerDelay = 10 * 1000;
/////////////////////////////////////////////////////////////////////////
0:         kaha.setEnableJournalDiskSyncs(false);
/////////////////////////////////////////////////////////////////////////
1:         kaha.setIndexCacheSize(10000);
commit:c75001c
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws Exception {
0:         this.initialConsumerDelay = 10 * 1000;
1:         super.setUp();
1:     }
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         //kaha.setEnableJournalDiskSyncs(false);
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         File archiveDir = new File(dataFileDir,"archive");
1:         kaha.setDirectoryArchive(archiveDir);
0:         kaha.setArchiveDataLogs(true);
1:         //kaha.setJournalMaxFileLength(1024*1024*100);
author:Gary Tully
-------------------------------------------------------------------------------
commit:d98ea37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class KahaDBQueueTest extends SimpleQueueTest {
1: 
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1: 
1:         File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
1: 
0:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1: 
1:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
1:         // what happens if the index is updated but a journal update is lost.
1:         // Index is going to be in consistent, but can it be repaired?
0:         kaha.setEnableJournalDiskSyncs(false);
1:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
0:         kaha.setJournalMaxFileLength(1024*100);
1:         
1:         // small batch means more frequent and smaller writes
0:         kaha.setIndexWriteBatchSize(100);
1:         // do the index write in a separate thread
1:         kaha.setEnableIndexWriteAsync(true);
1:         
1:         answer.setPersistenceAdapter(kaha);
1:         answer.addConnector(uri);
1:         answer.setDeleteAllMessagesOnStartup(true);
1: 
1:     }
1: 
1: }
============================================================================