2:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
2:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
1:933eb2f: 
1:a677c21: import java.net.URI;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:74a7a8b: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: import javax.jms.Topic;
1:74a7a8b: 
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.broker.BrokerFactory;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:069a567: import org.apache.activemq.store.PersistenceAdapter;
1:a677c21: import org.apache.activemq.util.IdGenerator;
1:230a86c: 
1:a1b8df5: public class ReliableReconnectTest extends org.apache.activemq.TestSupport {
2:a677c21:     
1:a677c21:     protected static final int MESSAGE_COUNT = 100;
1:3f98639:     protected static final String DEFAULT_BROKER_URL = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:933eb2f:     private static final int RECEIVE_TIMEOUT = 10000;
1:933eb2f:     
1:a677c21:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:a677c21:     protected String consumerClientId;
1:a677c21:     protected Destination destination;
1:a677c21:     protected AtomicBoolean closeBroker = new AtomicBoolean(false);
1:a677c21:     protected AtomicInteger messagesReceived = new AtomicInteger(0);
1:a677c21:     protected BrokerService broker;
1:230a86c:     protected int firstBatch = MESSAGE_COUNT / 10;
1:933eb2f:     private IdGenerator idGen = new IdGenerator();
1:a677c21: 
1:a677c21:     public ReliableReconnectTest() {
5:a677c21:     }
1:a677c21: 
1:a677c21:     protected void setUp() throws Exception {
1:a1b8df5:         this.setAutoFail(true);
1:a677c21:         consumerClientId = idGen.generateId();
1:a677c21:         super.setUp();
1:a677c21:         topic = true;
1:a677c21:         destination = createDestination(getClass().getName());
1:a677c21:     }
1:225d2bf:     
1:225d2bf:     protected void tearDown() throws Exception {
1:225d2bf:         if (broker!=null) {
1:225d2bf:             broker.stop();
1:225d2bf:         }
1:225d2bf:     }
1:a677c21: 
1:a677c21:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:3f98639:         return new ActiveMQConnectionFactory();
1:a677c21:     }
1:a677c21: 
1:069a567:     protected void startBroker(boolean deleteOnStart) throws JMSException {
1:a677c21:         try {
1:a677c21:             broker = BrokerFactory.createBroker(new URI("broker://()/localhost"));
1:225d2bf:             broker.setUseShutdownHook(false);
1:069a567:             broker.setDeleteAllMessagesOnStartup(deleteOnStart);
1:069a567:            
1:069a567:             broker.setUseJmx(false);
1:a677c21:             broker.addConnector(DEFAULT_BROKER_URL);
1:a677c21:             broker.start();
1:a677c21:         } catch (Exception e) {
1:a677c21:             e.printStackTrace();
1:069a567:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Connection createConsumerConnection() throws Exception {
1:a677c21:         Connection consumerConnection = getConnectionFactory().createConnection();
1:a677c21:         consumerConnection.setClientID(consumerClientId);
1:a677c21:         consumerConnection.start();
1:a677c21:         return consumerConnection;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected MessageConsumer createConsumer(Connection con) throws Exception {
1:a677c21:         Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         return s.createDurableSubscriber((Topic)destination, "TestFred");
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void spawnConsumer() {
1:a677c21:         Thread thread = new Thread(new Runnable() {
1:a677c21:             public void run() {
1:a677c21:                 try {
1:a677c21:                     Connection consumerConnection = createConsumerConnection();
1:a677c21:                     MessageConsumer consumer = createConsumer(consumerConnection);
1:230a86c:                     // consume some messages
1:a677c21: 
1:230a86c:                     for (int i = 0; i < firstBatch; i++) {
1:a677c21:                         Message msg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:                         if (msg != null) {
1:230a86c:                             // log.info("GOT: " + msg);
1:a677c21:                             messagesReceived.incrementAndGet();
1:a677c21:                         }
1:a677c21:                     }
1:a677c21:                     synchronized (closeBroker) {
1:a677c21:                         closeBroker.set(true);
1:a677c21:                         closeBroker.notify();
1:a677c21:                     }
1:a677c21:                     Thread.sleep(2000);
1:230a86c:                     for (int i = firstBatch; i < MESSAGE_COUNT; i++) {
1:a677c21:                         Message msg = consumer.receive(RECEIVE_TIMEOUT);
1:230a86c:                         // log.info("GOT: " + msg);
1:a677c21:                         if (msg != null) {
1:a677c21:                             messagesReceived.incrementAndGet();
1:a677c21:                         }
1:a677c21:                     }
1:a677c21:                     consumerConnection.close();
1:a677c21:                     synchronized (messagesReceived) {
1:a677c21:                         messagesReceived.notify();
1:a677c21:                     }
1:230a86c:                 } catch (Throwable e) {
1:a677c21:                     e.printStackTrace();
1:a677c21:                 }
1:a677c21:             }
1:a677c21:         });
1:a677c21:         thread.start();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testReconnect() throws Exception {
1:069a567:         startBroker(true);
1:230a86c:         // register an interest as a durable subscriber
1:a677c21:         Connection consumerConnection = createConsumerConnection();
1:a677c21:         createConsumer(consumerConnection);
1:a677c21:         consumerConnection.close();
1:230a86c:         // send some messages ...
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.setClientID(idGen.generateId());
1:a677c21:         connection.start();
1:a677c21:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = producerSession.createProducer(destination);
1:a677c21:         TextMessage msg = producerSession.createTextMessage();
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:a677c21:             msg.setText("msg: " + i);
1:a677c21:             producer.send(msg);
1:a677c21:         }
1:a677c21:         connection.close();
1:a677c21:         spawnConsumer();
1:a677c21:         synchronized (closeBroker) {
1:a677c21:             if (!closeBroker.get()) {
1:a677c21:                 closeBroker.wait();
1:a677c21:             }
1:a677c21:         }
1:230a86c:         // System.err.println("Stopping broker");
1:a677c21:         broker.stop();
1:069a567:         startBroker(false);
1:230a86c:         // System.err.println("Started Broker again");
1:a677c21:         synchronized (messagesReceived) {
1:a677c21:             if (messagesReceived.get() < MESSAGE_COUNT) {
1:a677c21:                 messagesReceived.wait(60000);
1:a677c21:             }
1:a677c21:         }
1:230a86c:         // assertTrue(messagesReceived.get() == MESSAGE_COUNT);
1:a677c21:         int count = messagesReceived.get();
1:a677c21:         assertTrue("Not enough messages received: " + count, count > firstBatch);
1:86cbdfd:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static final int RECEIVE_TIMEOUT = 10000;
1:     
/////////////////////////////////////////////////////////////////////////
1:     private IdGenerator idGen = new IdGenerator();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.BrokerService;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected int firstBatch = MESSAGE_COUNT / 10;
/////////////////////////////////////////////////////////////////////////
1:         return s.createDurableSubscriber((Topic)destination, "TestFred");
/////////////////////////////////////////////////////////////////////////
1:                     // consume some messages
1:                     for (int i = 0; i < firstBatch; i++) {
1:                             // log.info("GOT: " + msg);
/////////////////////////////////////////////////////////////////////////
1:                     for (int i = firstBatch; i < MESSAGE_COUNT; i++) {
1:                         // log.info("GOT: " + msg);
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:         // register an interest as a durable subscriber
1:         // send some messages ...
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
/////////////////////////////////////////////////////////////////////////
1:         // System.err.println("Stopping broker");
1:         // System.err.println("Started Broker again");
1:         // assertTrue(messagesReceived.get() == MESSAGE_COUNT);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: }
commit:b68267a
/////////////////////////////////////////////////////////////////////////
0: //        System.err.println("Stopping broker");
0: //        System.err.println("Started Broker again");
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:a1b8df5
/////////////////////////////////////////////////////////////////////////
1: public class ReliableReconnectTest extends org.apache.activemq.TestSupport {
/////////////////////////////////////////////////////////////////////////
1:         this.setAutoFail(true);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3f98639
/////////////////////////////////////////////////////////////////////////
1:     protected static final String DEFAULT_BROKER_URL = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory();
commit:069a567
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:     protected static final String DEFAULT_BROKER_URL = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
/////////////////////////////////////////////////////////////////////////
1:     protected void startBroker(boolean deleteOnStart) throws JMSException {
1:             broker.setDeleteAllMessagesOnStartup(deleteOnStart);
1:            
1:             broker.setUseJmx(false);
0:             PersistenceAdapter adaptor = broker.getPersistenceAdapter();
0:             if (adaptor instanceof AMQPersistenceAdapter) {
0:                 ((AMQPersistenceAdapter)adaptor).setDisableLocking(true);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         startBroker(true);
/////////////////////////////////////////////////////////////////////////
1:         startBroker(false);
commit:225d2bf
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void tearDown() throws Exception {
1:         if (broker!=null) {
1:             broker.stop();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:             broker.setUseShutdownHook(false);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
0: import java.util.HashMap;
1: import java.net.URI;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
0: import javax.jms.ObjectMessage;
0: import javax.jms.Queue;
0: import javax.jms.QueueConnection;
0: import javax.jms.QueueReceiver;
0: import javax.jms.QueueSender;
0: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.test.TestSupport;
1: import org.apache.activemq.util.IdGenerator;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class ReliableReconnectTest extends TestSupport {
0:     private static final int RECEIVE_TIMEOUT = 10000;
1:     protected static final int MESSAGE_COUNT = 100;
0:     protected static final String DEFAULT_BROKER_URL = "vm://localhost";
0:     private IdGenerator idGen = new IdGenerator();
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:     protected String consumerClientId;
1:     protected Destination destination;
1:     protected AtomicBoolean closeBroker = new AtomicBoolean(false);
1:     protected AtomicInteger messagesReceived = new AtomicInteger(0);
1:     protected BrokerService broker;
0:     protected int firstBatch = MESSAGE_COUNT/10;
1: 
1:     public ReliableReconnectTest() {
1:     }
1: 
0:     public ReliableReconnectTest(String n) {
0:         super(n);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         consumerClientId = idGen.generateId();
1:         super.setUp();
1:         topic = true;
1:         destination = createDestination(getClass().getName());
1:     }
1: 
1:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
0:         String url = "failover://" + DEFAULT_BROKER_URL;
0:         return new ActiveMQConnectionFactory(url);
1:     }
1: 
0:     protected void startBroker() throws JMSException {
1:         try {
1:             broker = BrokerFactory.createBroker(new URI("broker://()/localhost"));
1:             broker.addConnector(DEFAULT_BROKER_URL);
1:             broker.start();
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     protected Connection createConsumerConnection() throws Exception {
1:         Connection consumerConnection = getConnectionFactory().createConnection();
1:         consumerConnection.setClientID(consumerClientId);
1:         consumerConnection.start();
1:         return consumerConnection;
1:     }
1: 
1:     protected MessageConsumer createConsumer(Connection con) throws Exception {
1:         Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         return s.createDurableSubscriber((Topic) destination, "TestFred");
1:     }
1: 
1:     protected void spawnConsumer() {
1:         Thread thread = new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     Connection consumerConnection = createConsumerConnection();
1:                     MessageConsumer consumer = createConsumer(consumerConnection);
0:                     //consume some messages
1: 
0:                     for (int i = 0;i < firstBatch;i++) {
1:                         Message msg = consumer.receive(RECEIVE_TIMEOUT);
1:                         if (msg != null) {
0:                             //log.info("GOT: " + msg);
1:                             messagesReceived.incrementAndGet();
1:                         }
1:                     }
1:                     synchronized (closeBroker) {
1:                         closeBroker.set(true);
1:                         closeBroker.notify();
1:                     }
1:                     Thread.sleep(2000);
0:                     for (int i = firstBatch;i < MESSAGE_COUNT;i++) {
1:                         Message msg = consumer.receive(RECEIVE_TIMEOUT);
0:                         //log.info("GOT: " + msg);
1:                         if (msg != null) {
1:                             messagesReceived.incrementAndGet();
1:                         }
1:                     }
1:                     consumerConnection.close();
1:                     synchronized (messagesReceived) {
1:                         messagesReceived.notify();
1:                     }
1:                 }
0:                 catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         thread.start();
1:     }
1: 
1:     public void testReconnect() throws Exception {
0:         startBroker();
0:         //register an interest as a durable subscriber
1:         Connection consumerConnection = createConsumerConnection();
1:         createConsumer(consumerConnection);
1:         consumerConnection.close();
0:         //send some messages ...
1:         Connection connection = createConnection();
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         TextMessage msg = producerSession.createTextMessage();
0:         for (int i = 0;i < MESSAGE_COUNT;i++) {
1:             msg.setText("msg: " + i);
1:             producer.send(msg);
1:         }
1:         connection.close();
1:         spawnConsumer();
1:         synchronized (closeBroker) {
1:             if (!closeBroker.get()) {
1:                 closeBroker.wait();
1:             }
1:         }
0:         System.err.println("Stopping broker");
1:         broker.stop();
0:         startBroker();
0:         System.err.println("Started Broker again");
1:         synchronized (messagesReceived) {
1:             if (messagesReceived.get() < MESSAGE_COUNT) {
1:                 messagesReceived.wait(60000);
1:             }
1:         }
0:         //assertTrue(messagesReceived.get() == MESSAGE_COUNT);
1:         int count = messagesReceived.get();
1:         assertTrue("Not enough messages received: " + count, count > firstBatch);
1:     }
1: }
============================================================================