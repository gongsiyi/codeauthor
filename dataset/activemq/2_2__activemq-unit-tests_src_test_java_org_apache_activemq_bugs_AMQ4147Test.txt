1:3da9b07: /*
1:972176e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:972176e:  * contributor license agreements.  See the NOTICE file distributed with
1:972176e:  * this work for additional information regarding copyright ownership.
1:972176e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:972176e:  * (the "License"); you may not use this file except in compliance with
1:972176e:  * the License.  You may obtain a copy of the License at
1:972176e:  *
1:972176e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:972176e:  *
1:972176e:  * Unless required by applicable law or agreed to in writing, software
1:972176e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:972176e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:972176e:  * See the License for the specific language governing permissions and
1:972176e:  * limitations under the License.
1:972176e:  */
1:972176e: package org.apache.activemq.bugs;
2:972176e: 
1:972176e: import java.net.URI;
1:972176e: import java.util.concurrent.Semaphore;
1:972176e: 
1:972176e: import javax.jms.Message;
1:972176e: import javax.jms.MessageListener;
1:972176e: 
1:972176e: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:972176e: import org.apache.activemq.broker.BrokerService;
1:972176e: import org.apache.activemq.broker.region.Destination;
1:972176e: import org.apache.activemq.command.ActiveMQDestination;
1:972176e: import org.apache.activemq.network.DemandForwardingBridgeSupport;
1:972176e: import org.apache.activemq.util.MessageIdList;
1:972176e: import org.apache.activemq.util.Wait;
1:972176e: 
2:972176e: /**
1:972176e:  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} when
1:972176e:  * bridges are VM-to-VM. Specifically, memory usage from the local broker is
1:972176e:  * manipulated by the remote broker.
1:972176e:  */
1:972176e: public class AMQ4147Test extends JmsMultipleBrokersTestSupport {
1:3da9b07: 
1:972176e:     /**
1:972176e:      * This test demonstrates the bug: namely, when a message is bridged over
1:972176e:      * the VMTransport, its memory usage continues to refer to the originating
1:972176e:      * broker. As a result, memory usage is never accounted for on the remote
1:972176e:      * broker, and the local broker's memory usage is only decreased once the
1:972176e:      * message is consumed on the remote broker.
1:972176e:      */
1:972176e:     public void testVMTransportRemoteMemoryUsage() throws Exception {
1:972176e:         BrokerService broker1 = createBroker(new URI(
1:3da9b07:                 "broker:(vm://broker1)/broker1?persistent=false&useJmx=false"));
1:972176e: 
1:972176e:         BrokerService broker2 = createBroker(new URI(
1:3da9b07:                 "broker:(vm://broker2)/broker2?persistent=false&useJmx=false"));
1:972176e: 
1:972176e:         startAllBrokers();
1:972176e: 
1:972176e:         // Forward messages from broker1 to broker2 over the VM transport.
1:972176e:         bridgeBrokers("broker1", "broker2").start();
1:972176e: 
1:972176e:         // Verify that broker1 and broker2's test queues have no memory usage.
1:972176e:         ActiveMQDestination testQueue = createDestination(
1:972176e:                 AMQ4147Test.class.getSimpleName() + ".queue", false);
1:972176e:         final Destination broker1TestQueue = broker1.getDestination(testQueue);
1:972176e:         final Destination broker2TestQueue = broker2.getDestination(testQueue);
1:972176e: 
1:972176e:         assertEquals(0, broker1TestQueue.getMemoryUsage().getUsage());
1:972176e:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1:972176e: 
1:972176e:         // Produce a message to broker1's test queue and verify that broker1's
1:972176e:         // memory usage has increased, but broker2 still has no memory usage.
1:972176e:         sendMessages("broker1", testQueue, 1);
1:972176e:         assertTrue(broker1TestQueue.getMemoryUsage().getUsage() > 0);
1:972176e:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1:972176e: 
1:972176e:         // Create a consumer on broker2 that is synchronized to allow detection
1:972176e:         // of "in flight" messages to the consumer.
1:972176e:         MessageIdList broker2Messages = getBrokerMessages("broker2");
1:972176e:         final Semaphore consumerReady = new Semaphore(0);
1:972176e:         final Semaphore consumerProceed = new Semaphore(0);
1:972176e: 
1:972176e:         broker2Messages.setParent(new MessageListener() {
1:972176e:             @Override
1:972176e:             public void onMessage(Message message) {
1:972176e:                 consumerReady.release();
1:972176e:                 try {
1:972176e:                     consumerProceed.acquire();
1:972176e:                 } catch (InterruptedException ex) {
1:972176e:                     Thread.currentThread().interrupt();
1:972176e:                 }
1:972176e:             }
1:972176e:         });
1:972176e: 
1:972176e:         createConsumer("broker2", testQueue);
1:972176e: 
1:972176e:         // Verify that when broker2's consumer receives the message, the memory
1:972176e:         // usage has moved broker1 to broker2. The first assertion is expected
1:972176e:         // to fail due to the bug; the try/finally ensures the consumer is
1:972176e:         // released prior to failure so that the broker can shut down.
1:972176e:         consumerReady.acquire();
1:972176e: 
1:972176e:         try {
1:972176e:             assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:                 @Override
1:972176e:                 public boolean isSatisified() throws Exception {
1:972176e:                     return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:                 }
1:972176e:             }));
1:972176e:             assertTrue(broker2TestQueue.getMemoryUsage().getUsage() > 0);
1:972176e:         } finally {
1:3da9b07:             // Consume the message and verify that there is no more memory usage.
1:972176e:             consumerProceed.release();
1:972176e:         }
1:972176e: 
1:972176e:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:             @Override
1:972176e:             public boolean isSatisified() throws Exception {
1:972176e:                 return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:             }
1:972176e:         }));
1:972176e:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:             @Override
1:972176e:             public boolean isSatisified() throws Exception {
1:972176e:                 return broker2TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:             }
1:972176e:         }));
1:972176e:     }
1:972176e: 
1:972176e:     /**
1:972176e:      * This test demonstrates that the bug is VMTransport-specific and does not
1:972176e:      * occur when bridges occur using other protocols.
1:972176e:      */
1:972176e:     public void testTcpTransportRemoteMemoryUsage() throws Exception {
1:972176e:         BrokerService broker1 = createBroker(new URI(
1:3da9b07:                 "broker:(vm://broker1)/broker1?persistent=false&useJmx=false"));
1:972176e: 
1:972176e:         BrokerService broker2 = createBroker(new URI(
1:3da9b07:                 "broker:(tcp://localhost:0)/broker2?persistent=false&useJmx=false"));
1:972176e: 
1:972176e:         startAllBrokers();
1:972176e: 
1:972176e:         // Forward messages from broker1 to broker2 over the TCP transport.
1:972176e:         bridgeBrokers("broker1", "broker2").start();
1:972176e: 
1:972176e:         // Verify that broker1 and broker2's test queues have no memory usage.
1:972176e:         ActiveMQDestination testQueue = createDestination(
1:972176e:                 AMQ4147Test.class.getSimpleName() + ".queue", false);
1:972176e:         final Destination broker1TestQueue = broker1.getDestination(testQueue);
1:972176e:         final Destination broker2TestQueue = broker2.getDestination(testQueue);
1:972176e: 
1:972176e:         assertEquals(0, broker1TestQueue.getMemoryUsage().getUsage());
1:972176e:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1:972176e: 
1:972176e:         // Produce a message to broker1's test queue and verify that broker1's
1:972176e:         // memory usage has increased, but broker2 still has no memory usage.
1:972176e:         sendMessages("broker1", testQueue, 1);
1:972176e:         assertTrue(broker1TestQueue.getMemoryUsage().getUsage() > 0);
1:972176e:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1:972176e: 
1:972176e:         // Create a consumer on broker2 that is synchronized to allow detection
1:972176e:         // of "in flight" messages to the consumer.
1:972176e:         MessageIdList broker2Messages = getBrokerMessages("broker2");
1:972176e:         final Semaphore consumerReady = new Semaphore(0);
1:972176e:         final Semaphore consumerProceed = new Semaphore(0);
1:972176e: 
1:972176e:         broker2Messages.setParent(new MessageListener() {
1:972176e:             @Override
1:972176e:             public void onMessage(Message message) {
1:972176e:                 consumerReady.release();
1:972176e:                 try {
1:972176e:                     consumerProceed.acquire();
1:972176e:                 } catch (InterruptedException ex) {
1:972176e:                     Thread.currentThread().interrupt();
1:972176e:                 }
1:972176e:             }
1:972176e:         });
1:972176e: 
1:972176e:         createConsumer("broker2", testQueue);
1:972176e: 
1:972176e:         // Verify that when broker2's consumer receives the message, the memory
1:972176e:         // usage has moved broker1 to broker2.
1:972176e:         consumerReady.acquire();
1:972176e: 
1:972176e:         try {
1:972176e:             assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:                 @Override
1:972176e:                 public boolean isSatisified() throws Exception {
1:972176e:                     return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:                 }
1:972176e:             }));
1:972176e:             assertTrue(broker2TestQueue.getMemoryUsage().getUsage() > 0);
1:972176e:         } finally {
1:3da9b07:             // Consume the message and verify that there is no more memory usage.
1:972176e:             consumerProceed.release();
1:972176e:         }
1:972176e: 
1:972176e:         // Pause to allow ACK to be processed.
1:972176e:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:             @Override
1:972176e:             public boolean isSatisified() throws Exception {
1:972176e:                 return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:             }
1:972176e:         }));
1:972176e:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:972176e:             @Override
1:972176e:             public boolean isSatisified() throws Exception {
1:972176e:                 return broker2TestQueue.getMemoryUsage().getUsage() == 0;
1:972176e:             }
1:972176e:         }));
1:972176e:     }
1:972176e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3da9b07
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 "broker:(vm://broker1)/broker1?persistent=false&useJmx=false"));
1:                 "broker:(vm://broker2)/broker2?persistent=false&useJmx=false"));
/////////////////////////////////////////////////////////////////////////
1:             // Consume the message and verify that there is no more memory usage.
/////////////////////////////////////////////////////////////////////////
1:                 "broker:(vm://broker1)/broker1?persistent=false&useJmx=false"));
1:                 "broker:(tcp://localhost:0)/broker2?persistent=false&useJmx=false"));
/////////////////////////////////////////////////////////////////////////
1:             // Consume the message and verify that there is no more memory usage.
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:972176e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: import java.util.concurrent.Semaphore;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.DemandForwardingBridgeSupport;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.Wait;
1: 
1: /**
1:  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} when
1:  * bridges are VM-to-VM. Specifically, memory usage from the local broker is
1:  * manipulated by the remote broker.
1:  */
1: public class AMQ4147Test extends JmsMultipleBrokersTestSupport {
1:     /**
1:      * This test demonstrates the bug: namely, when a message is bridged over
1:      * the VMTransport, its memory usage continues to refer to the originating
1:      * broker. As a result, memory usage is never accounted for on the remote
1:      * broker, and the local broker's memory usage is only decreased once the
1:      * message is consumed on the remote broker.
1:      */
1:     public void testVMTransportRemoteMemoryUsage() throws Exception {
1:         BrokerService broker1 = createBroker(new URI(
0:                 "broker:(vm://broker1)/broker1?persistent=false"));
1: 
1:         BrokerService broker2 = createBroker(new URI(
0:                 "broker:(vm://broker2)/broker2?persistent=false"));
1: 
1:         startAllBrokers();
1: 
1:         // Forward messages from broker1 to broker2 over the VM transport.
1:         bridgeBrokers("broker1", "broker2").start();
1: 
1:         // Verify that broker1 and broker2's test queues have no memory usage.
1:         ActiveMQDestination testQueue = createDestination(
1:                 AMQ4147Test.class.getSimpleName() + ".queue", false);
1:         final Destination broker1TestQueue = broker1.getDestination(testQueue);
1:         final Destination broker2TestQueue = broker2.getDestination(testQueue);
1: 
1:         assertEquals(0, broker1TestQueue.getMemoryUsage().getUsage());
1:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1: 
1:         // Produce a message to broker1's test queue and verify that broker1's
1:         // memory usage has increased, but broker2 still has no memory usage.
1:         sendMessages("broker1", testQueue, 1);
1:         assertTrue(broker1TestQueue.getMemoryUsage().getUsage() > 0);
1:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1: 
1:         // Create a consumer on broker2 that is synchronized to allow detection
1:         // of "in flight" messages to the consumer.
1:         MessageIdList broker2Messages = getBrokerMessages("broker2");
1:         final Semaphore consumerReady = new Semaphore(0);
1:         final Semaphore consumerProceed = new Semaphore(0);
1: 
1:         broker2Messages.setParent(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 consumerReady.release();
1:                 try {
1:                     consumerProceed.acquire();
1:                 } catch (InterruptedException ex) {
1:                     Thread.currentThread().interrupt();
1:                 }
1:             }
1:         });
1: 
1:         createConsumer("broker2", testQueue);
1: 
1:         // Verify that when broker2's consumer receives the message, the memory
1:         // usage has moved broker1 to broker2. The first assertion is expected
1:         // to fail due to the bug; the try/finally ensures the consumer is
1:         // released prior to failure so that the broker can shut down.
1:         consumerReady.acquire();
1: 
1:         try {
1:             assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:                 }
1:             }));
1:             assertTrue(broker2TestQueue.getMemoryUsage().getUsage() > 0);
1:         } finally {
0:             // Consume the message and verify that there is no more memory
0:             // usage.
1:             consumerProceed.release();
1:         }
1: 
1:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:             }
1:         }));
1:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker2TestQueue.getMemoryUsage().getUsage() == 0;
1:             }
1:         }));
1:     }
1: 
1:     /**
1:      * This test demonstrates that the bug is VMTransport-specific and does not
1:      * occur when bridges occur using other protocols.
1:      */
1:     public void testTcpTransportRemoteMemoryUsage() throws Exception {
1:         BrokerService broker1 = createBroker(new URI(
0:                 "broker:(vm://broker1)/broker1?persistent=false"));
1: 
1:         BrokerService broker2 = createBroker(new URI(
0:                 "broker:(tcp://localhost:61616)/broker2?persistent=false"));
1: 
1:         startAllBrokers();
1: 
1:         // Forward messages from broker1 to broker2 over the TCP transport.
1:         bridgeBrokers("broker1", "broker2").start();
1: 
1:         // Verify that broker1 and broker2's test queues have no memory usage.
1:         ActiveMQDestination testQueue = createDestination(
1:                 AMQ4147Test.class.getSimpleName() + ".queue", false);
1:         final Destination broker1TestQueue = broker1.getDestination(testQueue);
1:         final Destination broker2TestQueue = broker2.getDestination(testQueue);
1: 
1:         assertEquals(0, broker1TestQueue.getMemoryUsage().getUsage());
1:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1: 
1:         // Produce a message to broker1's test queue and verify that broker1's
1:         // memory usage has increased, but broker2 still has no memory usage.
1:         sendMessages("broker1", testQueue, 1);
1:         assertTrue(broker1TestQueue.getMemoryUsage().getUsage() > 0);
1:         assertEquals(0, broker2TestQueue.getMemoryUsage().getUsage());
1: 
1:         // Create a consumer on broker2 that is synchronized to allow detection
1:         // of "in flight" messages to the consumer.
1:         MessageIdList broker2Messages = getBrokerMessages("broker2");
1:         final Semaphore consumerReady = new Semaphore(0);
1:         final Semaphore consumerProceed = new Semaphore(0);
1: 
1:         broker2Messages.setParent(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 consumerReady.release();
1:                 try {
1:                     consumerProceed.acquire();
1:                 } catch (InterruptedException ex) {
1:                     Thread.currentThread().interrupt();
1:                 }
1:             }
1:         });
1: 
1:         createConsumer("broker2", testQueue);
1: 
1:         // Verify that when broker2's consumer receives the message, the memory
1:         // usage has moved broker1 to broker2.
1:         consumerReady.acquire();
1: 
1:         try {
1:             assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:                 }
1:             }));
1:             assertTrue(broker2TestQueue.getMemoryUsage().getUsage() > 0);
1:         } finally {
0:             // Consume the message and verify that there is no more memory
0:             // usage.
1:             consumerProceed.release();
1:         }
1: 
1:         // Pause to allow ACK to be processed.
1:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker1TestQueue.getMemoryUsage().getUsage() == 0;
1:             }
1:         }));
1:         assertTrue("Memory Usage Should be Zero: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker2TestQueue.getMemoryUsage().getUsage() == 0;
1:             }
1:         }));
1:     }
1: }
============================================================================