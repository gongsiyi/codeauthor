1:0227c08: /**
1:0227c08:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0227c08:  * contributor license agreements.  See the NOTICE file distributed with
1:0227c08:  * this work for additional information regarding copyright ownership.
1:0227c08:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0227c08:  * (the "License"); you may not use this file except in compliance with
1:0227c08:  * the License.  You may obtain a copy of the License at
1:0227c08:  *
1:0227c08:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0227c08:  *
1:0227c08:  * Unless required by applicable law or agreed to in writing, software
1:0227c08:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0227c08:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0227c08:  * See the License for the specific language governing permissions and
1:0227c08:  * limitations under the License.
1:0227c08:  */
1:0227c08: package org.apache.activemq.bugs;
2:0227c08: 
1:0227c08: import static org.junit.Assert.assertFalse;
1:0227c08: import static org.junit.Assert.assertTrue;
1:0227c08: 
1:0227c08: import java.util.concurrent.CountDownLatch;
1:0227c08: import java.util.concurrent.ExecutorService;
1:0227c08: import java.util.concurrent.Executors;
1:0227c08: import java.util.concurrent.TimeUnit;
1:0227c08: 
1:0227c08: import javax.jms.Connection;
1:0227c08: import javax.jms.ConnectionFactory;
1:0227c08: import javax.jms.JMSException;
1:0227c08: import javax.jms.MessageConsumer;
1:0227c08: import javax.jms.Session;
1:0227c08: 
1:0227c08: import org.apache.activemq.ActiveMQConnectionFactory;
1:0227c08: import org.apache.activemq.broker.BrokerService;
1:0227c08: import org.apache.activemq.broker.TransportConnector;
1:0227c08: import org.junit.After;
1:0227c08: import org.junit.Before;
1:0227c08: import org.junit.Test;
1:cf62d58: import org.slf4j.Logger;
1:cf62d58: import org.slf4j.LoggerFactory;
1:0227c08: 
1:0227c08: public class AMQ3932Test {
1:cf62d58:     static final Logger LOG = LoggerFactory.getLogger(AMQ3932Test.class);
1:0227c08:     private Connection connection;
1:0227c08:     private BrokerService broker;
1:0227c08: 
1:0227c08:     @Before
1:0227c08:     public void setUp() throws Exception {
1:0227c08:         broker = new BrokerService();
1:0227c08:         broker.setPersistent(false);
1:0227c08:         broker.setUseJmx(false);
1:0227c08:         TransportConnector tcpConnector = broker.addConnector("tcp://localhost:0");
1:0227c08:         broker.start();
1:0227c08: 
1:0227c08:         ConnectionFactory factory = new ActiveMQConnectionFactory(
1:0227c08:                 "failover:("+ tcpConnector.getPublishableConnectString() +")?jms.prefetchPolicy.queuePrefetch=0");
1:0227c08:         connection = factory.createConnection();
1:0227c08:         connection.start();
1:0227c08:     }
1:0227c08: 
1:0227c08:     @After
1:0227c08:     public void tearDown() throws Exception {
1:0227c08:         connection.close();
1:0227c08: 
1:0227c08:         if (broker != null) {
1:0227c08:             broker.stop();
1:0227c08:             broker.waitUntilStopped();
1:0227c08:             broker = null;
1:0227c08:         }
1:0227c08:     }
1:0227c08: 
1:0227c08:     @Test
1:0227c08:     public void testPlainReceiveBlocks() throws Exception {
1:0227c08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0227c08:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1:0227c08: 
1:0227c08:         broker.stop();
1:0227c08:         broker.waitUntilStopped();
1:0227c08:         broker = null;
1:0227c08: 
1:0227c08:         final CountDownLatch done = new CountDownLatch(1);
1:0227c08:         final CountDownLatch started = new CountDownLatch(1);
1:0227c08:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:0227c08: 
1:0227c08:         executor.execute(new Runnable() {
1:0227c08:             public void run() {
1:0227c08:                 try {
1:0227c08:                     started.countDown();
1:cf62d58:                     LOG.info("Entering into a Sync receive call");
1:0227c08:                     consumer.receive();
1:0227c08:                 } catch (JMSException e) {
1:0227c08:                 }
1:0227c08:                 done.countDown();
1:0227c08:             }
1:0227c08:         });
1:0227c08: 
1:0227c08:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:0227c08:         assertFalse(done.await(20, TimeUnit.SECONDS));
1:0227c08:     }
1:0227c08: 
1:0227c08:     @Test
1:0227c08:     public void testHungReceiveNoWait() throws Exception {
1:0227c08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0227c08:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1:0227c08: 
1:0227c08:         broker.stop();
1:0227c08:         broker.waitUntilStopped();
1:0227c08:         broker = null;
1:0227c08: 
1:0227c08:         final CountDownLatch done = new CountDownLatch(1);
1:0227c08:         final CountDownLatch started = new CountDownLatch(1);
1:0227c08:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:0227c08: 
1:0227c08:         executor.execute(new Runnable() {
1:0227c08:             public void run() {
1:0227c08:                 try {
1:0227c08:                     started.countDown();
1:cf62d58:                     LOG.info("Entering into a Sync receiveNoWait call");
1:0227c08:                     consumer.receiveNoWait();
1:0227c08:                 } catch (JMSException e) {
1:0227c08:                 }
1:0227c08:                 done.countDown();
1:0227c08:             }
1:0227c08:         });
1:0227c08: 
1:0227c08:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:0227c08:         assertTrue(done.await(20, TimeUnit.SECONDS));
1:0227c08:     }
1:0227c08: 
1:0227c08:     @Test
1:0227c08:     public void testHungReceiveTimed() throws Exception {
1:0227c08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0227c08:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1:0227c08: 
1:0227c08:         broker.stop();
1:0227c08:         broker.waitUntilStopped();
1:0227c08:         broker = null;
1:0227c08: 
1:0227c08:         final CountDownLatch done = new CountDownLatch(1);
1:0227c08:         final CountDownLatch started = new CountDownLatch(1);
1:0227c08:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:0227c08: 
1:0227c08:         executor.execute(new Runnable() {
1:0227c08:             public void run() {
1:0227c08:                 try {
1:0227c08:                     started.countDown();
1:cf62d58:                     LOG.info("Entering into a timed Sync receive call");
1:0227c08:                     consumer.receive(10);
1:0227c08:                 } catch (JMSException e) {
1:0227c08:                 }
1:0227c08:                 done.countDown();
1:0227c08:             }
1:0227c08:         });
1:0227c08: 
1:0227c08:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:0227c08:         assertTrue(done.await(20, TimeUnit.SECONDS));
1:0227c08:     }
1:0227c08: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ3932Test.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Entering into a Sync receive call");
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Entering into a Sync receiveNoWait call");
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Entering into a timed Sync receive call");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0227c08
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.mortbay.log.Log;
1: 
1: public class AMQ3932Test {
1: 
1:     private Connection connection;
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         TransportConnector tcpConnector = broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 "failover:("+ tcpConnector.getPublishableConnectString() +")?jms.prefetchPolicy.queuePrefetch=0");
1:         connection = factory.createConnection();
1:         connection.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         connection.close();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     @Test
1:     public void testPlainReceiveBlocks() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = null;
1: 
1:         final CountDownLatch done = new CountDownLatch(1);
1:         final CountDownLatch started = new CountDownLatch(1);
1:         ExecutorService executor = Executors.newSingleThreadExecutor();
1: 
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     started.countDown();
0:                     Log.info("Entering into a Sync receive call");
1:                     consumer.receive();
1:                 } catch (JMSException e) {
1:                 }
1:                 done.countDown();
1:             }
1:         });
1: 
1:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:         assertFalse(done.await(20, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test
1:     public void testHungReceiveNoWait() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = null;
1: 
1:         final CountDownLatch done = new CountDownLatch(1);
1:         final CountDownLatch started = new CountDownLatch(1);
1:         ExecutorService executor = Executors.newSingleThreadExecutor();
1: 
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     started.countDown();
0:                     Log.info("Entering into a Sync receiveNoWait call");
1:                     consumer.receiveNoWait();
1:                 } catch (JMSException e) {
1:                 }
1:                 done.countDown();
1:             }
1:         });
1: 
1:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:         assertTrue(done.await(20, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test
1:     public void testHungReceiveTimed() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = null;
1: 
1:         final CountDownLatch done = new CountDownLatch(1);
1:         final CountDownLatch started = new CountDownLatch(1);
1:         ExecutorService executor = Executors.newSingleThreadExecutor();
1: 
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     started.countDown();
0:                     Log.info("Entering into a timed Sync receive call");
1:                     consumer.receive(10);
1:                 } catch (JMSException e) {
1:                 }
1:                 done.countDown();
1:             }
1:         });
1: 
1:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:         assertTrue(done.await(20, TimeUnit.SECONDS));
1:     }
1: }
============================================================================