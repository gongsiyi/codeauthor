1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.page;
1:456a2ba: 
1:456a2ba: import java.io.DataInputStream;
1:456a2ba: import java.io.DataOutputStream;
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.io.InputStream;
1:456a2ba: import java.io.OutputStream;
1:456a2ba: import java.util.HashSet;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
1:456a2ba: 
1:456a2ba: import junit.framework.TestCase;
1:456a2ba: 
1:199c683: @SuppressWarnings("rawtypes")
1:456a2ba: public class PageFileTest extends TestCase {
1:456a2ba: 
1:456a2ba:     public void testCRUD() throws IOException {
1:456a2ba: 
1:456a2ba:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:456a2ba:         pf.delete();
1:456a2ba:         pf.load();
1:456a2ba: 
1:456a2ba:         HashSet<String> expected = new HashSet<String>();
1:456a2ba: 
1:456a2ba:         // Insert some data into the page file.
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         for (int i = 0; i < 100; i++) {
1:456a2ba:             Page<String> page = tx.allocate();
1:456a2ba:             assertEquals(Page.PAGE_FREE_TYPE, page.getType());
1:456a2ba: 
1:456a2ba:             String t = "page:" + i;
1:456a2ba:             expected.add(t);
1:456a2ba:             page.set(t);
1:456a2ba:             tx.store(page, StringMarshaller.INSTANCE, false);
1:456a2ba:             tx.commit();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Reload it...
1:456a2ba:         pf.unload();
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba: 
1:456a2ba:         // Iterate it to make sure they are still there..
1:456a2ba:         HashSet<String> actual = new HashSet<String>();
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             actual.add(page.get());
1:456a2ba:         }
1:456a2ba:         assertEquals(expected, actual);
1:38d85be: 
1:456a2ba:         // Remove the odd records..
1:456a2ba:         for (int i = 0; i < 100; i++) {
1:456a2ba:             if (i % 2 == 0) {
1:456a2ba:                 break;
1:456a2ba:             }
1:456a2ba:             String t = "page:" + i;
1:456a2ba:             expected.remove(t);
1:456a2ba:         }
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             if (!expected.contains(page.get())) {
1:456a2ba:                 tx.free(page);
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:         tx.commit();
1:456a2ba: 
1:456a2ba:         // Reload it...
1:456a2ba:         pf.unload();
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba: 
1:456a2ba:         // Iterate it to make sure the even records are still there..
1:456a2ba:         actual.clear();
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             actual.add((String)page.get());
1:456a2ba:         }
1:456a2ba:         assertEquals(expected, actual);
1:456a2ba: 
1:456a2ba:         // Update the records...
1:456a2ba:         HashSet<String> t = expected;
1:456a2ba:         expected = new HashSet<String>();
1:456a2ba:         for (String s : t) {
1:456a2ba:             expected.add(s + ":updated");
1:456a2ba:         }
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             page.set(page.get() + ":updated");
1:456a2ba:             tx.store(page, StringMarshaller.INSTANCE, false);
1:456a2ba:         }
1:456a2ba:         tx.commit();
1:456a2ba: 
1:456a2ba:         // Reload it...
1:456a2ba:         pf.unload();
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba: 
1:456a2ba:         // Iterate it to make sure the updated records are still there..
1:456a2ba:         actual.clear();
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             actual.add(page.get());
1:456a2ba:         }
1:456a2ba:         assertEquals(expected, actual);
1:456a2ba: 
1:456a2ba:         pf.unload();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testStreams() throws IOException {
1:456a2ba: 
1:456a2ba:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:456a2ba:         pf.delete();
1:456a2ba:         pf.load();
1:456a2ba: 
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         Page page = tx.allocate();
1:456a2ba:         tx.commit();
1:456a2ba: 
1:456a2ba:         OutputStream pos = tx.openOutputStream(page, true);
1:456a2ba:         DataOutputStream os = new DataOutputStream(pos);
1:456a2ba:         for (int i = 0; i < 10000; i++) {
1:456a2ba:             os.writeUTF("Test string:" + i);
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         os.close();
1:456a2ba:         tx.commit();
1:456a2ba: 
1:456a2ba:         // Reload the page file.
1:456a2ba:         pf.unload();
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba: 
1:456a2ba:         InputStream pis = tx.openInputStream(page);
1:456a2ba:         DataInputStream is = new DataInputStream(pis);
1:456a2ba:         for (int i = 0; i < 10000; i++) {
1:456a2ba:             assertEquals("Test string:" + i, is.readUTF());
1:456a2ba:         }
1:456a2ba:         assertEquals(-1, is.read());
1:456a2ba:         is.close();
1:456a2ba: 
1:456a2ba:         pf.unload();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testAddRollback() throws IOException {
1:456a2ba: 
1:456a2ba:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:456a2ba:         pf.delete();
1:456a2ba:         pf.load();
1:456a2ba: 
1:456a2ba:         HashSet<String> expected = new HashSet<String>();
1:456a2ba: 
1:456a2ba:         // Insert some data into the page file.
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         for (int i = 0; i < 100; i++) {
1:456a2ba:             Page<String> page = tx.allocate();
1:456a2ba:             assertEquals(Page.PAGE_FREE_TYPE, page.getType());
1:456a2ba: 
1:456a2ba:             String t = "page:" + i;
1:456a2ba:             page.set(t);
1:456a2ba:             tx.store(page, StringMarshaller.INSTANCE, false);
1:456a2ba: 
1:456a2ba:             // Rollback every other insert.
1:456a2ba:             if (i % 2 == 0) {
1:456a2ba:                 expected.add(t);
1:456a2ba:                 tx.commit();
1:456a2ba:             } else {
1:456a2ba:                 tx.rollback();
1:456a2ba:             }
1:456a2ba: 
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Reload it...
1:456a2ba:         pf.unload();
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba: 
1:456a2ba:         // Iterate it to make sure they are still there..
1:456a2ba:         HashSet<String> actual = new HashSet<String>();
1:456a2ba:         for (Page<String> page : tx) {
1:456a2ba:             tx.load(page, StringMarshaller.INSTANCE);
1:456a2ba:             actual.add(page.get());
1:456a2ba:         }
1:456a2ba:         assertEquals(expected, actual);
1:456a2ba:     }
1:456a2ba: 
1:38d85be:     //Test for AMQ-6590
1:38d85be:     public void testFreePageRecoveryUncleanShutdown() throws Exception {
1:38d85be: 
1:38d85be:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:38d85be:         pf.delete();
1:38d85be:         pf.setEnableRecoveryFile(false);
1:38d85be:         pf.load();
1:38d85be: 
1:38d85be:         //Allocate 10 free pages
1:38d85be:         Transaction tx = pf.tx();
1:38d85be:         tx.allocate(10);
1:38d85be:         tx.commit();
1:38d85be:         pf.flush();
1:38d85be: 
1:38d85be:         //Load a second instance on the same directory fo the page file which
1:38d85be:         //simulates an unclean shutdown from the previous run
1:38d85be:         PageFile pf2 = new PageFile(new File("target/test-data"), getName());
1:38d85be:         pf2.setEnableRecoveryFile(false);
1:38d85be:         pf2.load();
1:38d85be: 
1:38d85be:         long freePages = pf2.getFreePageCount();
1:38d85be:         pf.unload();
1:38d85be:         pf2.unload();
1:38d85be: 
1:38d85be:         //Make sure that all 10 pages are still tracked
1:38d85be:         assertEquals(10, freePages);
1:38d85be:     }
1:456a2ba: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:83511c9
/////////////////////////////////////////////////////////////////////////
commit:38d85be
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Field;
0: import org.apache.activemq.util.RecoverableRandomAccessFile;
/////////////////////////////////////////////////////////////////////////
1: 
1:     //Test for AMQ-6590
1:     public void testFreePageRecoveryUncleanShutdown() throws Exception {
1: 
1:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:         pf.delete();
1:         pf.setEnableRecoveryFile(false);
1:         pf.load();
1: 
1:         //Allocate 10 free pages
1:         Transaction tx = pf.tx();
1:         tx.allocate(10);
1:         tx.commit();
1:         pf.flush();
1: 
1:         //Load a second instance on the same directory fo the page file which
1:         //simulates an unclean shutdown from the previous run
1:         PageFile pf2 = new PageFile(new File("target/test-data"), getName());
1:         pf2.setEnableRecoveryFile(false);
1:         pf2.load();
1: 
1:         long freePages = pf2.getFreePageCount();
1:         pf.unload();
1:         pf2.unload();
1: 
1:         //Make sure that all 10 pages are still tracked
1:         assertEquals(10, freePages);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6010bd3
commit:199c683
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("rawtypes")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.page;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.page;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.HashSet;
1: 
0: import org.apache.kahadb.util.StringMarshaller;
1: 
1: import junit.framework.TestCase;
1: 
1: public class PageFileTest extends TestCase {
1: 
1:     public void testCRUD() throws IOException {
1: 
1:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:         pf.delete();
1:         pf.load();
1: 
1:         HashSet<String> expected = new HashSet<String>();
1: 
1:         // Insert some data into the page file.
1:         Transaction tx = pf.tx();
1:         for (int i = 0; i < 100; i++) {
1:             Page<String> page = tx.allocate();
1:             assertEquals(Page.PAGE_FREE_TYPE, page.getType());
1: 
1:             String t = "page:" + i;
1:             expected.add(t);
1:             page.set(t);
1:             tx.store(page, StringMarshaller.INSTANCE, false);
1:             tx.commit();
1:         }
1: 
1:         // Reload it...
1:         pf.unload();
1:         pf.load();
1:         tx = pf.tx();
1: 
1:         // Iterate it to make sure they are still there..
1:         HashSet<String> actual = new HashSet<String>();
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             actual.add(page.get());
1:         }
1:         assertEquals(expected, actual);
1: 
1:         // Remove the odd records..
1:         for (int i = 0; i < 100; i++) {
1:             if (i % 2 == 0) {
1:                 break;
1:             }
1:             String t = "page:" + i;
1:             expected.remove(t);
1:         }
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             if (!expected.contains(page.get())) {
1:                 tx.free(page);
1:             }
1:         }
1:         tx.commit();
1: 
1:         // Reload it...
1:         pf.unload();
1:         pf.load();
1:         tx = pf.tx();
1: 
1:         // Iterate it to make sure the even records are still there..
1:         actual.clear();
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             actual.add((String)page.get());
1:         }
1:         assertEquals(expected, actual);
1: 
1:         // Update the records...
1:         HashSet<String> t = expected;
1:         expected = new HashSet<String>();
1:         for (String s : t) {
1:             expected.add(s + ":updated");
1:         }
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             page.set(page.get() + ":updated");
1:             tx.store(page, StringMarshaller.INSTANCE, false);
1:         }
1:         tx.commit();
1: 
1:         // Reload it...
1:         pf.unload();
1:         pf.load();
1:         tx = pf.tx();
1: 
1:         // Iterate it to make sure the updated records are still there..
1:         actual.clear();
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             actual.add(page.get());
1:         }
1:         assertEquals(expected, actual);
1: 
1:         pf.unload();
1:     }
1: 
1:     public void testStreams() throws IOException {
1: 
1:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:         pf.delete();
1:         pf.load();
1: 
1:         Transaction tx = pf.tx();
1:         Page page = tx.allocate();
1:         tx.commit();
1: 
1:         OutputStream pos = tx.openOutputStream(page, true);
1:         DataOutputStream os = new DataOutputStream(pos);
1:         for (int i = 0; i < 10000; i++) {
1:             os.writeUTF("Test string:" + i);
1:         }
1: 
1:         os.close();
1:         tx.commit();
1: 
1:         // Reload the page file.
1:         pf.unload();
1:         pf.load();
1:         tx = pf.tx();
1: 
1:         InputStream pis = tx.openInputStream(page);
1:         DataInputStream is = new DataInputStream(pis);
1:         for (int i = 0; i < 10000; i++) {
1:             assertEquals("Test string:" + i, is.readUTF());
1:         }
1:         assertEquals(-1, is.read());
1:         is.close();
1: 
1:         pf.unload();
1:     }
1: 
1:     public void testAddRollback() throws IOException {
1: 
1:         PageFile pf = new PageFile(new File("target/test-data"), getName());
1:         pf.delete();
1:         pf.load();
1: 
1:         HashSet<String> expected = new HashSet<String>();
1: 
1:         // Insert some data into the page file.
1:         Transaction tx = pf.tx();
1:         for (int i = 0; i < 100; i++) {
1:             Page<String> page = tx.allocate();
1:             assertEquals(Page.PAGE_FREE_TYPE, page.getType());
1: 
1:             String t = "page:" + i;
1:             page.set(t);
1:             tx.store(page, StringMarshaller.INSTANCE, false);
1: 
1:             // Rollback every other insert.
1:             if (i % 2 == 0) {
1:                 expected.add(t);
1:                 tx.commit();
1:             } else {
1:                 tx.rollback();
1:             }
1: 
1:         }
1: 
1:         // Reload it...
1:         pf.unload();
1:         pf.load();
1:         tx = pf.tx();
1: 
1:         // Iterate it to make sure they are still there..
1:         HashSet<String> actual = new HashSet<String>();
1:         for (Page<String> page : tx) {
1:             tx.load(page, StringMarshaller.INSTANCE);
1:             actual.add(page.get());
1:         }
1:         assertEquals(expected, actual);
1:     }
1: }
============================================================================