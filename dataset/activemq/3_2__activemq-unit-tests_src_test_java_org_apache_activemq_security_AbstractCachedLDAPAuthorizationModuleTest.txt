1:1f862ba: /**
1:1f862ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1f862ba:  * contributor license agreements.  See the NOTICE file distributed with
1:1f862ba:  * this work for additional information regarding copyright ownership.
1:1f862ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1f862ba:  * (the "License"); you may not use this file except in compliance with
1:1f862ba:  * the License.  You may obtain a copy of the License at
1:1f862ba:  *
1:1f862ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1f862ba:  *
1:1f862ba:  * Unless required by applicable law or agreed to in writing, software
1:1f862ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1f862ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1f862ba:  * See the License for the specific language governing permissions and
1:1f862ba:  * limitations under the License.
1:1f862ba:  */
1:1f862ba: package org.apache.activemq.security;
1:1f862ba: 
1:1f862ba: import org.apache.activemq.command.ActiveMQQueue;
1:1f862ba: import org.apache.activemq.jaas.UserPrincipal;
1:1f862ba: import org.apache.directory.shared.ldap.model.message.ModifyRequest;
1:1f862ba: import org.junit.Test;
1:1f862ba: 
1:1f862ba: import java.util.Set;
1:1f862ba: 
1:1f862ba: import static org.junit.Assert.assertEquals;
1:1f862ba: import static org.junit.Assert.assertTrue;
1:1f862ba: 
1:1f862ba: public abstract class AbstractCachedLDAPAuthorizationModuleTest 
1:1f862ba:     extends AbstractCachedLDAPAuthorizationMapLegacyTest {
1:1f862ba: 
1:1f862ba:     static final UserPrincipal JDOE = new UserPrincipal("jdoe");
1:1f862ba: 
1:1f862ba:     @Test
1:1f862ba:     public void testQuery() throws Exception {
1:1f862ba:         map.query();
1:1f862ba:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("TEST.FOOBAR"));
1:1f862ba:         assertEquals("set size: " + readACLs, 3, readACLs.size());
1:1f862ba:         assertTrue("Contains admin group", readACLs.contains(ADMINS));
1:1f862ba:         assertTrue("Contains users group", readACLs.contains(USERS));
1:1f862ba:         assertTrue("Contains jdoe user", readACLs.contains(JDOE));
1:1f862ba: 
1:1f862ba:         Set<?> failedACLs = map.getReadACLs(new ActiveMQQueue("FAILED"));
1:1f862ba:         assertEquals("set size: " + failedACLs, 0, failedACLs.size());
1:1f862ba:         
1:1f862ba:         super.testQuery();
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @Override
1:1f862ba:     protected final void setupModifyRequest(ModifyRequest request) {
1:1f862ba:         request.remove("member", getMemberAttributeValueForModifyRequest());
1:1f862ba:     }
1:1f862ba:     
1:1f862ba:     protected abstract String getMemberAttributeValueForModifyRequest();
1:1f862ba: 
1:1f862ba:     @Override
1:7c9fec6:     protected SimpleCachedLDAPAuthorizationMap createMap() {
1:7c9fec6:         SimpleCachedLDAPAuthorizationMap map = super.createMap();
1:1f862ba:         map.setLegacyGroupMapping(false);
1:1f862ba:         return map;
1:1f862ba:     }
1:1f862ba: }
1:1f862ba: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
/////////////////////////////////////////////////////////////////////////
1:     protected SimpleCachedLDAPAuthorizationMap createMap() {
1:         SimpleCachedLDAPAuthorizationMap map = super.createMap();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f862ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.jaas.UserPrincipal;
1: import org.apache.directory.shared.ldap.model.message.ModifyRequest;
1: import org.junit.Test;
1: 
1: import java.util.Set;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public abstract class AbstractCachedLDAPAuthorizationModuleTest 
1:     extends AbstractCachedLDAPAuthorizationMapLegacyTest {
1: 
1:     static final UserPrincipal JDOE = new UserPrincipal("jdoe");
1: 
1:     @Test
1:     public void testQuery() throws Exception {
1:         map.query();
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("TEST.FOOBAR"));
1:         assertEquals("set size: " + readACLs, 3, readACLs.size());
1:         assertTrue("Contains admin group", readACLs.contains(ADMINS));
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains jdoe user", readACLs.contains(JDOE));
1: 
1:         Set<?> failedACLs = map.getReadACLs(new ActiveMQQueue("FAILED"));
1:         assertEquals("set size: " + failedACLs, 0, failedACLs.size());
1:         
1:         super.testQuery();
1:     }
1: 
1:     @Override
1:     protected final void setupModifyRequest(ModifyRequest request) {
1:         request.remove("member", getMemberAttributeValueForModifyRequest());
1:     }
1:     
1:     protected abstract String getMemberAttributeValueForModifyRequest();
1: 
1:     @Override
0:     protected CachedLDAPAuthorizationMap createMap() {
0:         CachedLDAPAuthorizationMap map = super.createMap();
1:         map.setLegacyGroupMapping(false);
1:         return map;
1:     }
1: }
1: 
============================================================================