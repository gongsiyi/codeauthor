1:fc00993: /**
1:1a3f54c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a3f54c:  * contributor license agreements.  See the NOTICE file distributed with
1:1a3f54c:  * this work for additional information regarding copyright ownership.
1:1a3f54c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a3f54c:  * (the "License"); you may not use this file except in compliance with
1:1a3f54c:  * the License.  You may obtain a copy of the License at
1:1a3f54c:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a3f54c:  *
1:1a3f54c:  * Unless required by applicable law or agreed to in writing, software
1:1a3f54c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a3f54c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a3f54c:  * See the License for the specific language governing permissions and
1:1a3f54c:  * limitations under the License.
1:1a3f54c:  */
1:1a3f54c: package org.apache.activemq.transport.tcp;
24:1a3f54c: 
1:1a3f54c: import java.io.IOException;
1:1a3f54c: import java.net.URI;
1:1a3f54c: import java.net.URISyntaxException;
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:74a7a8b: import java.util.concurrent.atomic.AtomicReference;
1:1a3f54c: 
1:1a3f54c: import org.apache.activemq.CombinationTestSupport;
1:1a3f54c: import org.apache.activemq.command.CommandTypes;
1:1a3f54c: import org.apache.activemq.command.WireFormatInfo;
1:1a3f54c: import org.apache.activemq.transport.Transport;
1:1a3f54c: import org.apache.activemq.transport.TransportAcceptListener;
1:1a3f54c: import org.apache.activemq.transport.TransportFactory;
1:1a3f54c: import org.apache.activemq.transport.TransportListener;
1:1a3f54c: import org.apache.activemq.transport.TransportServer;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:1a3f54c: 
1:1a3f54c: public class WireformatNegociationTest extends CombinationTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(WireformatNegociationTest.class);
1:230a86c: 
1:1a3f54c:     private TransportServer server;
1:1a3f54c:     private Transport clientTransport;
1:1a3f54c:     private Transport serverTransport;
1:230a86c: 
1:1a3f54c:     private final AtomicReference<WireFormatInfo> clientWF = new AtomicReference<WireFormatInfo>();
1:1a3f54c:     private final AtomicReference<WireFormatInfo> serverWF = new AtomicReference<WireFormatInfo>();
1:1a3f54c:     private final AtomicReference<Exception> asyncError = new AtomicReference<Exception>();
1:1a3f54c:     private final AtomicBoolean ignoreAsycError = new AtomicBoolean();
1:230a86c: 
1:1a3f54c:     private final CountDownLatch negociationCounter = new CountDownLatch(2);
1:230a86c: 
1:1a3f54c:     protected void setUp() throws Exception {
1:1a3f54c:         super.setUp();
5:1a3f54c:     }
1:1a3f54c: 
1:1a3f54c:     /**
1:1a3f54c:      * @throws Exception
1:1a3f54c:      * @throws URISyntaxException
1:1a3f54c:      */
1:1a3f54c:     private void startClient(String uri) throws Exception, URISyntaxException {
1:1a3f54c:         clientTransport = TransportFactory.connect(new URI(uri));
1:1a3f54c:         clientTransport.setTransportListener(new TransportListener() {
1:1a3f54c:             public void onCommand(Object command) {
1:230a86c:                 if (command instanceof WireFormatInfo) {
1:230a86c:                     clientWF.set((WireFormatInfo)command);
1:230a86c:                     negociationCounter.countDown();
1:1a3f54c:                 }
1:1a3f54c:             }
1:230a86c: 
1:230a86c:             public void onException(IOException error) {
1:230a86c:                 if (!ignoreAsycError.get()) {
1:fc00993:                     LOG.info("Client transport error: ", error);
1:230a86c:                     asyncError.set(error);
1:230a86c:                     negociationCounter.countDown();
1:230a86c:                 }
1:230a86c:             }
1:230a86c: 
1:1a3f54c:             public void transportInterupted() {
1:1a3f54c:             }
1:230a86c: 
1:1a3f54c:             public void transportResumed() {
1:230a86c:             }
1:230a86c:         });
1:1a3f54c:         clientTransport.start();
1:1a3f54c:     }
1:230a86c: 
1:1a3f54c:     /**
1:1a3f54c:      * @throws IOException
1:1a3f54c:      * @throws URISyntaxException
1:1a3f54c:      * @throws Exception
1:1a3f54c:      */
1:230a86c:     private void startServer(String uri) throws IOException, URISyntaxException, Exception {
1:5d99c99:         server = TransportFactory.bind(new URI(uri));
1:230a86c:         server.setAcceptListener(new TransportAcceptListener() {
1:1a3f54c:             public void onAccept(Transport transport) {
1:1a3f54c:                 try {
1:fc00993:                     LOG.info("[" + getName() + "] Server Accepted a Connection");
1:1a3f54c:                     serverTransport = transport;
1:1a3f54c:                     serverTransport.setTransportListener(new TransportListener() {
1:1a3f54c:                         public void onCommand(Object command) {
1:230a86c:                             if (command instanceof WireFormatInfo) {
1:230a86c:                                 serverWF.set((WireFormatInfo)command);
1:230a86c:                                 negociationCounter.countDown();
1:230a86c:                             }
1:230a86c:                         }
1:230a86c: 
1:230a86c:                         public void onException(IOException error) {
1:230a86c:                             if (!ignoreAsycError.get()) {
1:fc00993:                                 LOG.info("Server transport error: ", error);
1:230a86c:                                 asyncError.set(error);
1:230a86c:                                 negociationCounter.countDown();
1:230a86c:                             }
1:1a3f54c:                         }
1:230a86c: 
1:1a3f54c:                         public void transportInterupted() {
1:1a3f54c:                         }
1:230a86c: 
1:1a3f54c:                         public void transportResumed() {
1:1a3f54c:                         }
1:230a86c:                     });
1:1a3f54c:                     serverTransport.start();
1:1a3f54c:                 } catch (Exception e) {
1:1a3f54c:                     e.printStackTrace();
1:1a3f54c:                 }
1:1a3f54c:             }
1:1a3f54c: 
1:1a3f54c:             public void onAcceptError(Exception error) {
1:1a3f54c:                 error.printStackTrace();
1:1a3f54c:             }
1:1a3f54c:         });
1:1a3f54c:         server.start();
1:1a3f54c:     }
1:230a86c: 
1:1a3f54c:     protected void tearDown() throws Exception {
1:230a86c:         ignoreAsycError.set(true);
1:1a3f54c:         try {
1:fc00993:             if (clientTransport != null) {
1:1a3f54c:                 clientTransport.stop();
1:fc00993:             }
1:fc00993:             if (serverTransport != null) {
1:1a3f54c:                 serverTransport.stop();
1:fc00993:             }
1:fc00993:             if (server != null) {
1:1a3f54c:                 server.stop();
1:fc00993:             }
1:1a3f54c:         } catch (Throwable e) {
1:1a3f54c:             e.printStackTrace();
1:1a3f54c:         }
1:1a3f54c:         super.tearDown();
1:1a3f54c:     }
1:230a86c: 
1:1a3f54c:     /**
1:1a3f54c:      * @throws Exception
1:1a3f54c:      */
1:e5e99d7:     public void testWireFormatInfoSeverVersion1() throws Exception {
1:230a86c: 
1:230a86c:         startServer("tcp://localhost:61616?wireFormat.version=1");
1:1a3f54c:         startClient("tcp://localhost:61616");
1:230a86c: 
1:1a3f54c:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:230a86c:         assertNull("Async error: " + asyncError, asyncError.get());
1:230a86c: 
1:1a3f54c:         assertNotNull(clientWF.get());
1:1a3f54c:         assertEquals(1, clientWF.get().getVersion());
1:230a86c: 
1:1a3f54c:         assertNotNull(serverWF.get());
1:1a3f54c:         assertEquals(1, serverWF.get().getVersion());
1:1a3f54c:     }
1:230a86c: 
1:1a3f54c:     /**
1:1a3f54c:      * @throws Exception
1:1a3f54c:      */
1:e5e99d7:     public void testWireFormatInfoClientVersion1() throws Exception {
1:230a86c: 
1:230a86c:         startServer("tcp://localhost:61616");
1:1a3f54c:         startClient("tcp://localhost:61616?wireFormat.version=1");
1:230a86c: 
1:1a3f54c:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:230a86c:         assertNull("Async error: " + asyncError, asyncError.get());
1:230a86c: 
1:1a3f54c:         assertNotNull(clientWF.get());
1:1a3f54c:         assertEquals(1, clientWF.get().getVersion());
1:230a86c: 
1:1a3f54c:         assertNotNull(serverWF.get());
1:1a3f54c:         assertEquals(1, serverWF.get().getVersion());
1:1a3f54c:     }
1:230a86c: 
1:1a3f54c:     /**
1:1a3f54c:      * @throws Exception
1:1a3f54c:      */
1:e5e99d7:     public void testWireFormatInfoCurrentVersion() throws Exception {
1:230a86c: 
1:230a86c:         startServer("tcp://localhost:61616");
1:1a3f54c:         startClient("tcp://localhost:61616");
1:1a3f54c: 
1:1a3f54c:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:230a86c:         assertNull("Async error: " + asyncError, asyncError.get());
1:1a3f54c: 
1:1a3f54c:         assertNotNull(clientWF.get());
1:8d3ca90:         assertEquals(CommandTypes.PROTOCOL_VERSION, clientWF.get().getVersion());
1:230a86c: 
1:1a3f54c:         assertNotNull(serverWF.get());
1:8d3ca90:         assertEquals(CommandTypes.PROTOCOL_VERSION, serverWF.get().getVersion());
1:1a3f54c:     }
1:f7cba2a:     
1:e5e99d7:     public void testWireFormatInactivityDurationInitialDelay() throws Exception {
1:f7cba2a: 
1:f7cba2a:         startServer("tcp://localhost:61616");
1:f7cba2a:         startClient("tcp://localhost:61616?wireFormat.maxInactivityDurationInitalDelay=60000");
1:f7cba2a: 
1:f7cba2a:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:f7cba2a:         assertNull("Async error: " + asyncError, asyncError.get());
1:f7cba2a: 
1:f7cba2a:         assertNotNull(clientWF.get());
1:1a3f54c:         assertEquals(CommandTypes.PROTOCOL_VERSION, clientWF.get().getVersion());
1:f7cba2a: 
1:f7cba2a:         assertNotNull(serverWF.get());
1:1a3f54c:         assertEquals(CommandTypes.PROTOCOL_VERSION, serverWF.get().getVersion());
1:f7cba2a:     }
1:1a3f54c: 
1:e5e99d7:     public void testWireFormatMaxFrameSize() throws Exception {
1:e5e99d7: 
1:e5e99d7:         startServer("tcp://localhost:61616");
1:e5e99d7:         startClient("tcp://localhost:61616?wireFormat.maxFrameSize=1048576");
1:e5e99d7: 
1:e5e99d7:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:e5e99d7:         assertNull("Async error: " + asyncError, asyncError.get());
1:e5e99d7: 
1:e5e99d7:         assertNotNull(clientWF.get());
1:e5e99d7:         assertEquals(1048576, clientWF.get().getMaxFrameSize());
1:e5e99d7: 
1:e5e99d7:         assertNotNull(serverWF.get());
1:e5e99d7:         assertEquals(1048576, serverWF.get().getMaxFrameSize());
1:e5e99d7:     }
1:e5e99d7: 
1:1a3f54c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e5e99d7
/////////////////////////////////////////////////////////////////////////
1:     public void testWireFormatInfoSeverVersion1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testWireFormatInfoClientVersion1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testWireFormatInfoCurrentVersion() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testWireFormatInactivityDurationInitialDelay() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testWireFormatMaxFrameSize() throws Exception {
1: 
1:         startServer("tcp://localhost:61616");
1:         startClient("tcp://localhost:61616?wireFormat.maxFrameSize=1048576");
1: 
1:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:         assertNull("Async error: " + asyncError, asyncError.get());
1: 
1:         assertNotNull(clientWF.get());
1:         assertEquals(1048576, clientWF.get().getMaxFrameSize());
1: 
1:         assertNotNull(serverWF.get());
1:         assertEquals(1048576, serverWF.get().getMaxFrameSize());
1:     }
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(WireformatNegociationTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(CommandTypes.PROTOCOL_VERSION, clientWF.get().getVersion());
1:         assertEquals(CommandTypes.PROTOCOL_VERSION, serverWF.get().getVersion());
commit:f7cba2a
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void testWireFomatInactivityDurationInitalDelay() throws Exception {
1: 
1:         startServer("tcp://localhost:61616");
1:         startClient("tcp://localhost:61616?wireFormat.maxInactivityDurationInitalDelay=60000");
1: 
1:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
1:         assertNull("Async error: " + asyncError, asyncError.get());
1: 
1:         assertNotNull(clientWF.get());
0:         assertEquals(5, clientWF.get().getVersion());
1: 
1:         assertNotNull(serverWF.get());
0:         assertEquals(5, serverWF.get().getVersion());
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:         server = TransportFactory.bind(new URI(uri));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(WireformatNegociationTest.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Client transport error: ", error);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("[" + getName() + "] Server Accepted a Connection");
/////////////////////////////////////////////////////////////////////////
1:                                 LOG.info("Server transport error: ", error);
/////////////////////////////////////////////////////////////////////////
1:             if (clientTransport != null) {
1:             }
1:             if (serverTransport != null) {
1:             }
1:             if (server != null) {
1:             }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (command instanceof WireFormatInfo) {
1:                     clientWF.set((WireFormatInfo)command);
1:                     negociationCounter.countDown();
1: 
1:             public void onException(IOException error) {
1:                 if (!ignoreAsycError.get()) {
0:                     log.info("Client transport error: ", error);
1:                     asyncError.set(error);
1:                     negociationCounter.countDown();
1:                 }
1:             }
1: 
1: 
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:     private void startServer(String uri) throws IOException, URISyntaxException, Exception {
1:         server.setAcceptListener(new TransportAcceptListener() {
0:                     log.info("[" + getName() + "] Server Accepted a Connection");
1:                             if (command instanceof WireFormatInfo) {
1:                                 serverWF.set((WireFormatInfo)command);
1:                                 negociationCounter.countDown();
1: 
1:                         public void onException(IOException error) {
1:                             if (!ignoreAsycError.get()) {
0:                                 log.info("Server transport error: ", error);
1:                                 asyncError.set(error);
1:                                 negociationCounter.countDown();
1:                             }
1:                         }
1: 
1: 
1:                         }
1:                     });
/////////////////////////////////////////////////////////////////////////
1: 
1:         ignoreAsycError.set(true);
0:             if (clientTransport != null)
0:             if (serverTransport != null)
0:             if (server != null)
1: 
1: 
1:         startServer("tcp://localhost:61616?wireFormat.version=1");
1: 
1:         assertNull("Async error: " + asyncError, asyncError.get());
1: 
1: 
1: 
1: 
1:         startServer("tcp://localhost:61616");
1: 
1:         assertNull("Async error: " + asyncError, asyncError.get());
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         startServer("tcp://localhost:61616");
1: 
1:         assertNull("Async error: " + asyncError, asyncError.get());
1: 
1: 
commit:1a3f54c
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.command.CommandTypes;
1: import org.apache.activemq.command.WireFormatInfo;
0: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportAcceptListener;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.TransportServer;
1: 
0: import javax.net.SocketFactory;
1: 
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
0: import java.util.concurrent.atomic.AtomicReference;
1: 
1: 
1: public class WireformatNegociationTest extends CombinationTestSupport {
1:     
1:     private TransportServer server;
1:     private Transport clientTransport;
1:     private Transport serverTransport;
1:     
1:     private final AtomicReference<WireFormatInfo> clientWF = new AtomicReference<WireFormatInfo>();
1:     private final AtomicReference<WireFormatInfo> serverWF = new AtomicReference<WireFormatInfo>();
1:     private final AtomicReference<Exception> asyncError = new AtomicReference<Exception>();
1:     private final AtomicBoolean ignoreAsycError = new AtomicBoolean();
1:     
1:     private final CountDownLatch negociationCounter = new CountDownLatch(2);
1:             
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * @throws Exception
1:      * @throws URISyntaxException
1:      */
1:     private void startClient(String uri) throws Exception, URISyntaxException {
1:         clientTransport = TransportFactory.connect(new URI(uri));
1:         clientTransport.setTransportListener(new TransportListener() {
1:             public void onCommand(Object command) {
0:             	if( command instanceof WireFormatInfo ) {
0:             		clientWF.set((WireFormatInfo) command);
0:             		negociationCounter.countDown();
1:             	}
1:             }
0:             public void onException(IOException error) {
0:                 if( !ignoreAsycError.get() ) {
0:                     log.info("Client transport error: ", error);
0:                     asyncError.set(error);
0:             		negociationCounter.countDown();
1:                 }
1:             }
1:             public void transportInterupted() {
1:             }
1:             public void transportResumed() {
0:             }});
1:         clientTransport.start();
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      * @throws Exception
1:      */
0:     private void startServer(String uri ) throws IOException, URISyntaxException, Exception {
0:         server = TransportFactory.bind("localhost", new URI(uri));
0:         server.setAcceptListener(new TransportAcceptListener(){
1:             public void onAccept(Transport transport) {
1:                 try {
0:                     log.info("["+getName()+"] Server Accepted a Connection");
1:                     serverTransport = transport;
1:                     serverTransport.setTransportListener(new TransportListener() {
1:                         public void onCommand(Object command) {
0:                         	if( command instanceof WireFormatInfo ) {
0:                         		serverWF.set((WireFormatInfo) command);
0:                         		negociationCounter.countDown();
1:                         	}
1:                         }
0:                         public void onException(IOException error) {
0:                             if( !ignoreAsycError.get() ) {
0:                                 log.info("Server transport error: ", error);
0:                                 asyncError.set(error);
0:                         		negociationCounter.countDown();
1:                             }
1:                         }
1:                         public void transportInterupted() {
1:                         }
1:                         public void transportResumed() {
0:                         }});
1:                     serverTransport.start();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:             public void onAcceptError(Exception error) {
1:                 error.printStackTrace();
1:             }
1:         });
1:         server.start();
1:     }
1:     
1:     protected void tearDown() throws Exception {
0:     	ignoreAsycError.set(true);
1:         try {
0:             if( clientTransport!=null )
1:                 clientTransport.stop();
0:             if( serverTransport!=null )
1:                 serverTransport.stop();
0:             if( server!=null )
1:                 server.stop();
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:         }
1:         super.tearDown();
1:     }
1:     
1:     
1:     /**
1:      * @throws Exception
1:      */
0:     public void testWireFomatInfoSeverVersion1() throws Exception {
1:         
0:     	startServer("tcp://localhost:61616?wireFormat.version=1");
1:         startClient("tcp://localhost:61616");
1:         
1:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
0:         assertNull("Async error: "+asyncError, asyncError.get());
1:         
1:         assertNotNull(clientWF.get());
1:         assertEquals(1, clientWF.get().getVersion());
1:         
1:         assertNotNull(serverWF.get());
1:         assertEquals(1, serverWF.get().getVersion());
1:     }
1:     
1:     /**
1:      * @throws Exception
1:      */
0:     public void testWireFomatInfoClientVersion1() throws Exception {
1:         
0:     	startServer("tcp://localhost:61616");
1:         startClient("tcp://localhost:61616?wireFormat.version=1");
1:         
1:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
0:         assertNull("Async error: "+asyncError, asyncError.get());
1:         
1:         assertNotNull(clientWF.get());
1:         assertEquals(1, clientWF.get().getVersion());
1:         
1:         assertNotNull(serverWF.get());
1:         assertEquals(1, serverWF.get().getVersion());
1:     }
1: 
1:     /**
1:      * @throws Exception
1:      */
0:     public void testWireFomatInfoCurrentVersion() throws Exception {
1:         
0:     	startServer("tcp://localhost:61616");
1:         startClient("tcp://localhost:61616");
1:         
1:         assertTrue("Connect timeout", negociationCounter.await(10, TimeUnit.SECONDS));
0:         assertNull("Async error: "+asyncError, asyncError.get());
1:         
1:         assertNotNull(clientWF.get());
1:         assertEquals(CommandTypes.PROTOCOL_VERSION, clientWF.get().getVersion());
1:         
1:         assertNotNull(serverWF.get());
1:         assertEquals(CommandTypes.PROTOCOL_VERSION, serverWF.get().getVersion());
1:     }
1: 
1: }
============================================================================