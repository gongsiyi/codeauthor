1:6b18edc: /**
1:6b18edc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b18edc:  * contributor license agreements.  See the NOTICE file distributed with
1:6b18edc:  * this work for additional information regarding copyright ownership.
1:6b18edc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b18edc:  * (the "License"); you may not use this file except in compliance with
1:6b18edc:  * the License.  You may obtain a copy of the License at
1:6b18edc:  *
1:6b18edc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6b18edc:  *
1:6b18edc:  * Unless required by applicable law or agreed to in writing, software
1:6b18edc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b18edc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b18edc:  * See the License for the specific language governing permissions and
1:6b18edc:  * limitations under the License.
1:6b18edc:  */
1:6b18edc: package org.apache.activemq.bugs;
7:6b18edc: 
1:6b18edc: import static org.junit.Assert.assertFalse;
1:6b18edc: import static org.junit.Assert.assertTrue;
1:6b18edc: 
1:6b18edc: import java.util.Properties;
1:6b18edc: import java.util.concurrent.CountDownLatch;
1:6b18edc: import java.util.concurrent.TimeUnit;
1:6b18edc: 
1:6b18edc: import javax.jms.Message;
1:6b18edc: import javax.jms.MessageListener;
1:6b18edc: import javax.jms.Queue;
1:6b18edc: import javax.jms.QueueConnection;
1:6b18edc: import javax.jms.QueueConnectionFactory;
1:6b18edc: import javax.jms.QueueReceiver;
1:6b18edc: import javax.jms.QueueSession;
1:6b18edc: import javax.jms.Session;
1:6b18edc: import javax.jms.TextMessage;
1:6b18edc: import javax.jms.Topic;
1:6b18edc: import javax.jms.TopicConnection;
1:6b18edc: import javax.jms.TopicConnectionFactory;
1:6b18edc: import javax.jms.TopicPublisher;
1:6b18edc: import javax.jms.TopicSession;
1:6b18edc: import javax.jms.TopicSubscriber;
1:6b18edc: import javax.naming.InitialContext;
1:6b18edc: 
1:6b18edc: import org.apache.activemq.broker.BrokerService;
1:6b18edc: import org.junit.After;
1:6b18edc: import org.junit.Before;
1:6b18edc: import org.junit.Test;
1:f3d84ae: import org.slf4j.Logger;
1:f3d84ae: import org.slf4j.LoggerFactory;
1:6b18edc: 
1:6b18edc: public class AMQ2084Test {
1:6b18edc: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2084Test.class);
1:6b18edc:     BrokerService broker;
1:6b18edc:     CountDownLatch qreceived;
1:f3d84ae:     String connectionUri;
1:f3d84ae: 
1:6b18edc:     @Before
1:6b18edc:     public void startBroker() throws Exception {
1:6b18edc:         broker = new BrokerService();
1:6b18edc:         broker.setPersistent(false);
1:f3d84ae:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:6b18edc:         broker.start();
1:f3d84ae: 
1:6b18edc:         qreceived = new CountDownLatch(1);
1:6b18edc:     }
1:f3d84ae: 
1:6b18edc:     @After
1:6b18edc:     public void stopBroker() throws Exception {
1:6b18edc:         if (broker != null) {
1:6b18edc:             broker.stop();
1:6b18edc:         }
1:6b18edc:     }
1:f3d84ae: 
1:6b18edc:     public void listenQueue(final String queueName, final String selectors) {
1:6b18edc:         try {
1:6b18edc:             Properties props = new Properties();
1:6b18edc:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:f3d84ae:             props.put("java.naming.provider.url", connectionUri);
1:6b18edc:             props.put("queue.queueName", queueName);
1:6b18edc: 
1:6b18edc:             javax.naming.Context ctx = new InitialContext(props);
1:6b18edc:             QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("ConnectionFactory");
1:6b18edc:             QueueConnection conn = factory.createQueueConnection();
1:6b18edc:             final Queue queue = (Queue) ctx.lookup("queueName");
1:6b18edc:             QueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:6b18edc:             QueueReceiver receiver = session.createReceiver(queue, selectors);
1:6b18edc:             System.out.println("Message Selector: " + receiver.getMessageSelector());
1:6b18edc:             receiver.setMessageListener(new MessageListener() {
1:6b18edc:                 public void onMessage(Message message) {
1:6b18edc:                     try {
1:6b18edc:                         if (message instanceof TextMessage) {
1:6b18edc:                             TextMessage txtMsg = (TextMessage) message;
1:6b18edc:                             String msg = txtMsg.getText();
1:6b18edc:                             LOG.info("Queue Message Received: " + queueName + " - " + msg);
1:6b18edc:                             qreceived.countDown();
1:f3d84ae: 
1:6b18edc:                         }
1:6b18edc:                         message.acknowledge();
1:6b18edc:                     } catch (Throwable e) {
1:6b18edc:                         e.printStackTrace();
1:6b18edc:                     }
1:6b18edc:                 }
1:6b18edc:             });
1:6b18edc:             conn.start();
1:6b18edc:         } catch (Exception e) {
1:6b18edc:             e.printStackTrace();
1:6b18edc:         }
1:6b18edc:     }
1:6b18edc: 
1:6b18edc:     public void listenTopic(final String topicName, final String selectors) {
1:6b18edc:         try {
1:6b18edc:             Properties props = new Properties();
1:6b18edc:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:f3d84ae:             props.put("java.naming.provider.url", connectionUri);
1:6b18edc:             props.put("topic.topicName", topicName);
1:6b18edc: 
1:6b18edc:             javax.naming.Context ctx = new InitialContext(props);
1:6b18edc:             TopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup("ConnectionFactory");
1:6b18edc:             TopicConnection conn = factory.createTopicConnection();
1:6b18edc:             final Topic topic = (Topic) ctx.lookup("topicName");
1:6b18edc:             TopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:6b18edc:             TopicSubscriber receiver = session.createSubscriber(topic, selectors, false);
1:6b18edc: 
1:6b18edc:             receiver.setMessageListener(new MessageListener() {
1:6b18edc:                 public void onMessage(Message message) {
1:6b18edc:                     try {
1:6b18edc:                         if (message instanceof TextMessage) {
1:6b18edc:                             TextMessage txtMsg = (TextMessage) message;
1:6b18edc:                             String msg = txtMsg.getText();
1:6b18edc:                             LOG.info("Topic Message Received: " + topicName + " - " + msg);
1:6b18edc:                         }
1:6b18edc:                         message.acknowledge();
1:6b18edc:                     } catch (Exception e) {
1:6b18edc:                         e.printStackTrace();
1:6b18edc:                     }
1:6b18edc:                 }
1:6b18edc:             });
1:6b18edc:             conn.start();
1:6b18edc:         } catch (Exception e) {
1:6b18edc:             e.printStackTrace();
1:6b18edc:         }
1:6b18edc:     }
1:6b18edc: 
1:6b18edc:     public void publish(String topicName, String message) {
1:6b18edc:         try {
1:6b18edc:             Properties props = new Properties();
1:6b18edc:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:f3d84ae:             props.put("java.naming.provider.url", connectionUri);
1:6b18edc:             props.put("topic.topicName", topicName);
1:6b18edc:             javax.naming.Context ctx = new InitialContext(props);
1:6b18edc:             TopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup("ConnectionFactory");
1:6b18edc:             TopicConnection conn = factory.createTopicConnection();
1:6b18edc:             Topic topic = (Topic) ctx.lookup("topicName");
1:6b18edc:             TopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:6b18edc:             TopicPublisher publisher = session.createPublisher(topic);
1:6b18edc:             if (message != null) {
1:6b18edc:                 Message msg = session.createTextMessage(message);
1:6b18edc:                 publisher.send(msg);
1:6b18edc:             }
1:6b18edc:         } catch (Exception e) {
1:6b18edc:             e.printStackTrace();
1:6b18edc:         }
1:6b18edc:     }
1:6b18edc: 
1:6b18edc:     @Test
1:6b18edc:     public void tryXpathSelectorMatch() throws Exception {
1:6b18edc:         String xPath = "XPATH '//books//book[@lang=''en'']'";
1:6b18edc:         listenQueue("Consumer.Sample.VirtualTopic.TestXpath", xPath);
1:6b18edc:         publish("VirtualTopic.TestXpath", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>");
1:f3d84ae:         assertTrue("topic received: ", qreceived.await(20, TimeUnit.SECONDS));
1:6b18edc:     }
1:f3d84ae: 
1:6b18edc:     @Test
1:6b18edc:     public void tryXpathSelectorNoMatch() throws Exception {
1:6b18edc:         String xPath = "XPATH '//books//book[@lang=''es'']'";
1:6b18edc:         listenQueue("Consumer.Sample.VirtualTopic.TestXpath", xPath);
1:6b18edc:         publish("VirtualTopic.TestXpath", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>");
1:f3d84ae:         assertFalse("topic did not receive unmatched", qreceived.await(5, TimeUnit.SECONDS));
1:6b18edc:     }
1:6b18edc: 
1:6b18edc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:f3d84ae
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     String connectionUri;
1: 
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1: 
1: 
1: 
1:             props.put("java.naming.provider.url", connectionUri);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             props.put("java.naming.provider.url", connectionUri);
/////////////////////////////////////////////////////////////////////////
1:             props.put("java.naming.provider.url", connectionUri);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("topic received: ", qreceived.await(20, TimeUnit.SECONDS));
1: 
1:         assertFalse("topic did not receive unmatched", qreceived.await(5, TimeUnit.SECONDS));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2084Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b18edc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Properties;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.QueueReceiver;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicConnectionFactory;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: import javax.naming.InitialContext;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ2084Test {
1: 
0:     private static final Log LOG = LogFactory.getLog(AMQ2084Test.class);
1:     BrokerService broker;
1:     CountDownLatch qreceived;
1:     
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
0:         broker.addConnector("tcp://localhost:61616");
1:         broker.start();
1:         
1:         qreceived = new CountDownLatch(1);
1:     }
1:     
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1:     
1:     public void listenQueue(final String queueName, final String selectors) {
1:         try {
1:             Properties props = new Properties();
1:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
0:             props.put("java.naming.provider.url", "tcp://localhost:61616");
1:             props.put("queue.queueName", queueName);
1: 
1:             javax.naming.Context ctx = new InitialContext(props);
1:             QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("ConnectionFactory");
1:             QueueConnection conn = factory.createQueueConnection();
1:             final Queue queue = (Queue) ctx.lookup("queueName");
1:             QueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:             QueueReceiver receiver = session.createReceiver(queue, selectors);
1:             System.out.println("Message Selector: " + receiver.getMessageSelector());
1:             receiver.setMessageListener(new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     try {
1:                         if (message instanceof TextMessage) {
1:                             TextMessage txtMsg = (TextMessage) message;
1:                             String msg = txtMsg.getText();
1:                             LOG.info("Queue Message Received: " + queueName + " - " + msg);
1:                             qreceived.countDown();
1:                             
1:                         }
1:                         message.acknowledge();
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:             conn.start();
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void listenTopic(final String topicName, final String selectors) {
1:         try {
1:             Properties props = new Properties();
1:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
0:             props.put("java.naming.provider.url", "tcp://localhost:61616");
1:             props.put("topic.topicName", topicName);
1: 
1:             javax.naming.Context ctx = new InitialContext(props);
1:             TopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup("ConnectionFactory");
1:             TopicConnection conn = factory.createTopicConnection();
1:             final Topic topic = (Topic) ctx.lookup("topicName");
1:             TopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:             TopicSubscriber receiver = session.createSubscriber(topic, selectors, false);
1: 
1:             receiver.setMessageListener(new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     try {
1:                         if (message instanceof TextMessage) {
1:                             TextMessage txtMsg = (TextMessage) message;
1:                             String msg = txtMsg.getText();
1:                             LOG.info("Topic Message Received: " + topicName + " - " + msg);
1:                         }
1:                         message.acknowledge();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:             conn.start();
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void publish(String topicName, String message) {
1:         try {
1:             Properties props = new Properties();
1:             props.put("java.naming.factory.initial", "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
0:             props.put("java.naming.provider.url", "tcp://localhost:61616");
1:             props.put("topic.topicName", topicName);
1:             javax.naming.Context ctx = new InitialContext(props);
1:             TopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup("ConnectionFactory");
1:             TopicConnection conn = factory.createTopicConnection();
1:             Topic topic = (Topic) ctx.lookup("topicName");
1:             TopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:             TopicPublisher publisher = session.createPublisher(topic);
1:             if (message != null) {
1:                 Message msg = session.createTextMessage(message);
1:                 publisher.send(msg);
1:             }
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     @Test
1:     public void tryXpathSelectorMatch() throws Exception {
1:         String xPath = "XPATH '//books//book[@lang=''en'']'";
1:         listenQueue("Consumer.Sample.VirtualTopic.TestXpath", xPath);
1:         publish("VirtualTopic.TestXpath", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>");
0:         assertTrue("topic received: ", qreceived.await(20, TimeUnit.SECONDS));        
1:     }
1:     
1:     @Test
1:     public void tryXpathSelectorNoMatch() throws Exception {
1:         String xPath = "XPATH '//books//book[@lang=''es'']'";
1:         listenQueue("Consumer.Sample.VirtualTopic.TestXpath", xPath);
1:         publish("VirtualTopic.TestXpath", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>");
0:         assertFalse("topic did not receive unmatched", qreceived.await(5, TimeUnit.SECONDS));        
1:     }
1: 
1: }
============================================================================