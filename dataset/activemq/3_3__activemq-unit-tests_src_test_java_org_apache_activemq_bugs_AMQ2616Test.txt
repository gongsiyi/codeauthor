1:ac0462a: /**
1:ac0462a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ac0462a:  * contributor license agreements.  See the NOTICE file distributed with
1:ac0462a:  * this work for additional information regarding copyright ownership.
1:ac0462a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ac0462a:  * (the "License"); you may not use this file except in compliance with
1:ac0462a:  * the License.  You may obtain a copy of the License at
1:ac0462a:  *
1:ac0462a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ac0462a:  *
1:ac0462a:  * Unless required by applicable law or agreed to in writing, software
1:ac0462a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ac0462a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ac0462a:  * See the License for the specific language governing permissions and
1:ac0462a:  * limitations under the License.
1:ac0462a:  */
1:ac0462a: package org.apache.activemq.bugs;
1:42e51a3: 
1:809d5b9: import static org.junit.Assert.assertFalse;
1:809d5b9: import static org.junit.Assert.assertTrue;
1:809d5b9: 
1:ac0462a: import java.io.File;
1:809d5b9: 
1:ac0462a: import javax.jms.BytesMessage;
1:ac0462a: import javax.jms.Connection;
1:ac0462a: import javax.jms.MessageProducer;
1:ac0462a: import javax.jms.Queue;
1:ac0462a: import javax.jms.Session;
1:809d5b9: 
1:ac0462a: import org.apache.activemq.ActiveMQConnectionFactory;
1:ac0462a: import org.apache.activemq.broker.BrokerService;
1:ac0462a: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:ac0462a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ac0462a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ac0462a: import org.apache.activemq.command.ActiveMQQueue;
1:ac0462a: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:ac0462a: import org.apache.activemq.util.IOHelper;
1:809d5b9: import org.apache.activemq.util.Wait;
1:809d5b9: import org.junit.After;
1:809d5b9: import org.junit.Before;
1:809d5b9: import org.junit.Rule;
1:809d5b9: import org.junit.Test;
1:809d5b9: import org.junit.rules.TestName;
1:42e51a3: 
1:809d5b9: public class AMQ2616Test {
1:809d5b9: 
1:809d5b9:     @Rule
1:809d5b9:     public TestName test = new TestName();
1:809d5b9: 
1:ac0462a:     private static final int NUMBER = 2000;
1:ac0462a:     private BrokerService brokerService;
1:42e51a3:     private final String ACTIVEMQ_BROKER_BIND = "tcp://0.0.0.0:0";
1:42e51a3: 
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:809d5b9:     @Test(timeout = 90000)
1:809d5b9:     public void testQueueResourcesReleased() throws Exception {
1:42e51a3:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(connectionUri);
2:ac0462a:         Connection tempConnection = fac.createConnection();
2:ac0462a:         tempConnection.start();
2:ac0462a:         Session tempSession = tempConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ac0462a:         Queue tempQueue = tempSession.createTemporaryQueue();
1:42e51a3: 
2:ac0462a:         Connection testConnection = fac.createConnection();
1:809d5b9:         final long startUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
2:ac0462a:         Session testSession = testConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ac0462a:         MessageProducer testProducer = testSession.createProducer(tempQueue);
1:809d5b9:         byte[] payload = new byte[1024 * 4];
1:809d5b9: 
1:809d5b9:         for (int i = 0; i < NUMBER; i++) {
2:ac0462a:             BytesMessage msg = testSession.createBytesMessage();
2:ac0462a:             msg.writeBytes(payload);
2:ac0462a:             testProducer.send(msg);
4:ac0462a:         }
1:809d5b9: 
2:ac0462a:         long endUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:809d5b9:         assertFalse(startUsage == endUsage);
2:ac0462a:         tempConnection.close();
1:809d5b9: 
1:809d5b9:         assertTrue("Usage should return to original", Wait.waitFor(new Wait.Condition() {
1:809d5b9: 
1:809d5b9:             @Override
1:809d5b9:             public boolean isSatisified() throws Exception {
1:809d5b9:                 return brokerService.getSystemUsage().getMemoryUsage().getUsage() == startUsage;
1:809d5b9:             }
1:809d5b9:         }));
1:ac0462a:     }
1:241af09: 
1:809d5b9:     @Before
1:809d5b9:     public void setUp() throws Exception {
1:ac0462a:         // Start an embedded broker up.
1:ac0462a:         brokerService = new BrokerService();
10:ac0462a: 
1:ac0462a:         KahaDBPersistenceAdapter adaptor = new KahaDBPersistenceAdapter();
1:ac0462a:         adaptor.setEnableJournalDiskSyncs(false);
1:ac0462a:         File file = new File("target/AMQ2616Test");
1:ac0462a:         IOHelper.mkdirs(file);
1:ac0462a:         IOHelper.deleteChildren(file);
1:ac0462a:         adaptor.setDirectory(file);
1:ac0462a:         brokerService.setPersistenceAdapter(adaptor);
1:ac0462a: 
1:ac0462a:         PolicyMap policyMap = new PolicyMap();
1:ac0462a:         PolicyEntry pe = new PolicyEntry();
1:ac0462a:         pe.setMemoryLimit(10 * 1024 * 1024);
1:ac0462a:         pe.setOptimizedDispatch(true);
1:ac0462a:         pe.setProducerFlowControl(false);
1:ac0462a:         pe.setExpireMessagesPeriod(1000);
1:ac0462a:         pe.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:ac0462a:         policyMap.put(new ActiveMQQueue(">"), pe);
1:809d5b9: 
1:ac0462a:         brokerService.setDestinationPolicy(policyMap);
1:ac0462a:         brokerService.getSystemUsage().getMemoryUsage().setLimit(20 * 1024 * 1024);
1:ac0462a:         brokerService.getSystemUsage().getTempUsage().setLimit(200 * 1024 * 1024);
1:ac0462a:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:ac0462a:         brokerService.start();
1:42e51a3:         brokerService.waitUntilStarted();
1:42e51a3: 
1:42e51a3:         connectionUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:42e51a3: 
1:809d5b9:         new ActiveMQQueue(test.getMethodName());
1:ac0462a:     }
1:ac0462a: 
1:809d5b9:     @After
1:809d5b9:     public void tearDown() throws Exception {
1:ac0462a:         brokerService.stop();
1:809d5b9:         brokerService = null;
1:ac0462a:     }
1:ac0462a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:809d5b9
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: public class AMQ2616Test {
1: 
1:     @Rule
1:     public TestName test = new TestName();
1: 
1:     @Test(timeout = 90000)
1:     public void testQueueResourcesReleased() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         final long startUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:         byte[] payload = new byte[1024 * 4];
1: 
1:         for (int i = 0; i < NUMBER; i++) {
1: 
1:         assertFalse(startUsage == endUsage);
1: 
1:         assertTrue("Usage should return to original", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getSystemUsage().getMemoryUsage().getUsage() == startUsage;
1:             }
1:         }));
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         new ActiveMQQueue(test.getMethodName());
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService = null;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final String ACTIVEMQ_BROKER_BIND = "tcp://0.0.0.0:0";
0:     private final AtomicBoolean shutdown = new AtomicBoolean();
1: 
1:     private String connectionUri;
1: 
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(connectionUri);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerService.waitUntilStarted();
1: 
1:         connectionUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:241af09
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    
commit:ac0462a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
0: import java.util.ArrayList;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
0: import javax.jms.Topic;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.IOHelper;
1: 
0: public class AMQ2616Test extends TestCase {
1:     private static final int NUMBER = 2000;
1:     private BrokerService brokerService;
0:     private final ArrayList<Thread> threads = new ArrayList<Thread>();
0:     String ACTIVEMQ_BROKER_BIND = "tcp://0.0.0.0:61616";
0:     AtomicBoolean shutdown = new AtomicBoolean();
1:     
0:     public void testQueueResourcesReleased() throws Exception{
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_BIND);
1:         Connection tempConnection = fac.createConnection();
1:         tempConnection.start();
1:         Session tempSession = tempConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue tempQueue = tempSession.createTemporaryQueue();
0:         final MessageConsumer tempConsumer = tempSession.createConsumer(tempQueue);
1:                
1:         Connection testConnection = fac.createConnection();
0:         long startUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:         Session testSession = testConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer testProducer = testSession.createProducer(tempQueue);
0:         byte[] payload = new byte[1024*4];
0:         for (int i = 0; i < NUMBER; i++ ) {
1:             BytesMessage msg = testSession.createBytesMessage();
1:             msg.writeBytes(payload);
1:             testProducer.send(msg);
1:         }
1:         long endUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
0:         assertFalse(startUsage==endUsage);
1:         tempConnection.close();
0:         Thread.sleep(1000);
0:         endUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
0:         assertEquals(startUsage,endUsage);
1:     }
1:     
0:     public void testTopicResourcesReleased() throws Exception{
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_BIND);
1:         Connection tempConnection = fac.createConnection();
1:         tempConnection.start();
1:         Session tempSession = tempConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic tempTopic = tempSession.createTemporaryTopic();
0:         final MessageConsumer tempConsumer = tempSession.createConsumer(tempTopic);
1:                
1:         Connection testConnection = fac.createConnection();
0:         long startUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:         Session testSession = testConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer testProducer = testSession.createProducer(tempTopic);
0:         byte[] payload = new byte[1024*4];
0:         for (int i = 0; i < NUMBER; i++ ) {
1:             BytesMessage msg = testSession.createBytesMessage();
1:             msg.writeBytes(payload);
1:             testProducer.send(msg);
1:         }
1:         long endUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
0:         assertFalse(startUsage==endUsage);
1:         tempConnection.close();
0:         Thread.sleep(1000);
0:         endUsage = brokerService.getSystemUsage().getMemoryUsage().getUsage();
0:         assertEquals(startUsage,endUsage);
1:     }
1:     
1:     
0:     @Override
0:     protected void setUp() throws Exception {
1:         // Start an embedded broker up.
1:         brokerService = new BrokerService();
1: 
1:         KahaDBPersistenceAdapter adaptor = new KahaDBPersistenceAdapter();
1:         adaptor.setEnableJournalDiskSyncs(false);
1:         File file = new File("target/AMQ2616Test");
1:         IOHelper.mkdirs(file);
1:         IOHelper.deleteChildren(file);
1:         adaptor.setDirectory(file);
1:         brokerService.setPersistenceAdapter(adaptor);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setMemoryLimit(10 * 1024 * 1024);
1:         pe.setOptimizedDispatch(true);
1:         pe.setProducerFlowControl(false);
1:         pe.setExpireMessagesPeriod(1000);
1:         pe.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:         policyMap.put(new ActiveMQQueue(">"), pe);
1:         brokerService.setDestinationPolicy(policyMap);
1:         brokerService.getSystemUsage().getMemoryUsage().setLimit(20 * 1024 * 1024);
1:         brokerService.getSystemUsage().getTempUsage().setLimit(200 * 1024 * 1024);
1:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:         brokerService.start();
0:         new ActiveMQQueue(getName());
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         // Stop any running threads.
0:         shutdown.set(true);
0:         for (Thread t : threads) {
0:             t.interrupt();
0:             t.join();
1:         }
1:         brokerService.stop();
1:     }
1: 
1: }
============================================================================