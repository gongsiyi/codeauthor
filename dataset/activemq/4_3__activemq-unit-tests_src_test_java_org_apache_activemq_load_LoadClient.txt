1:0640cb7: /**
1:0640cb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0640cb7:  * contributor license agreements.  See the NOTICE file distributed with
1:0640cb7:  * this work for additional information regarding copyright ownership.
1:0640cb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0640cb7:  * (the "License"); you may not use this file except in compliance with
1:0640cb7:  * the License.  You may obtain a copy of the License at
1:0640cb7:  *
1:0640cb7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0640cb7:  *
1:0640cb7:  * Unless required by applicable law or agreed to in writing, software
1:0640cb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0640cb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0640cb7:  * See the License for the specific language governing permissions and
1:0640cb7:  * limitations under the License.
1:0640cb7:  */
1:0640cb7: package org.apache.activemq.load;
2:0640cb7: 
1:0640cb7: import javax.jms.Connection;
1:0640cb7: import javax.jms.ConnectionFactory;
1:0640cb7: import javax.jms.DeliveryMode;
1:0640cb7: import javax.jms.Destination;
1:0640cb7: import javax.jms.JMSException;
1:0640cb7: import javax.jms.MessageConsumer;
1:0640cb7: import javax.jms.MessageProducer;
1:0640cb7: import javax.jms.Session;
1:0640cb7: import javax.jms.TextMessage;
1:0640cb7: 
1:3d10acc: import org.apache.activemq.ActiveMQMessageAudit;
1:0640cb7: import org.apache.activemq.perf.PerfRate;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:0640cb7: 
1:0640cb7: /**
1:b0c2a40:  * 
1:0640cb7:  */
1:0640cb7: public class LoadClient implements Runnable{
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LoadClient.class);
1:3d10acc:     protected static int SLEEP_TIME = 2;
1:0640cb7:     protected String name;
1:0640cb7:     protected ConnectionFactory factory;
1:0640cb7:     protected Connection connection;
1:0640cb7:     protected Destination startDestination;
1:0640cb7:     protected Destination nextDestination;
1:0640cb7:     protected Session session;
1:0640cb7:     protected MessageConsumer consumer;
1:0640cb7:     protected MessageProducer producer;
1:0640cb7:     protected PerfRate rate = new PerfRate();
1:0640cb7:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:3d10acc:     protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:3d10acc:     protected boolean connectionPerMessage = false;
1:3d10acc:     protected boolean running;
1:3d10acc:     protected int timeout = 10000;
1:0640cb7:     
1:0640cb7: 
1:0640cb7:     public LoadClient(String name,ConnectionFactory factory) {
1:0640cb7:        this.name=name;
1:0640cb7:        this.factory = factory;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:    
1:0640cb7: 
1:0640cb7:     public synchronized void start() throws JMSException {
1:0640cb7:         if (!running) {
1:0640cb7:             rate.reset();
1:0640cb7:             running = true;
1:0640cb7:             if (!connectionPerMessage) {
1:0640cb7:                 connection = factory.createConnection();
1:0640cb7:                 connection.start();
1:0640cb7:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3d10acc:                 consumer = session.createConsumer(getConsumeDestination());
1:3d10acc:                 producer = session.createProducer(getSendDestination());
1:0640cb7:                 producer.setDeliveryMode(this.deliveryMode);
1:0640cb7:                 
1:0640cb7:             }
1:0640cb7:             
1:0640cb7:             Thread t = new  Thread(this);
1:0640cb7:             t.setName(name);
1:0640cb7:             t.start();
1:0640cb7:         }
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     public void stop() throws JMSException, InterruptedException {
1:0640cb7:         running = false;
1:3d10acc:         if(connection != null) {
1:3d10acc:             connection.stop();
1:3d10acc:         }
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     
1:0640cb7:     public void run() {
1:0640cb7:         try {
1:0640cb7:             while (running) {
1:0640cb7:                 String result = consume();
1:3d10acc:                 if(result != null) {
1:3d10acc:                     send(result);
1:3d10acc:                     rate.increment();
1:0640cb7:                 }
1:3d10acc:                 else if (running) {
1:3d10acc:                     LOG.error(name + " Failed to consume!");
1:3d10acc:                 }
1:0640cb7:             }
1:0640cb7:         } catch (Throwable e) {
1:0640cb7:             e.printStackTrace();
1:0640cb7:         } 
1:0640cb7:     }
1:0640cb7:     
1:3d10acc:     protected String consume() throws Exception {
1:0640cb7:         Connection con  = null;
1:0640cb7:         MessageConsumer c = consumer;
1:0640cb7:         if (connectionPerMessage){
1:0640cb7:             con = factory.createConnection();
1:0640cb7:             con.start();
1:0640cb7:             Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3d10acc:             c = s.createConsumer(getConsumeDestination());
1:0640cb7:         }
1:0640cb7:         TextMessage result = (TextMessage) c.receive(timeout);
1:3d10acc:         if (result != null) {
1:3d10acc:             if (audit.isDuplicate(result.getJMSMessageID())) {
1:3d10acc:                 throw new JMSException("Received duplicate " + result.getText());
1:3d10acc:             }
1:3d10acc:             if (!audit.isInOrder(result.getJMSMessageID())) {
1:3d10acc:                 throw new JMSException("Out of order " + result.getText());
1:3d10acc:             }
1:3d10acc:             
1:3d10acc:             if (connectionPerMessage) {
1:3d10acc:                 Thread.sleep(SLEEP_TIME);//give the broker a chance
1:3d10acc:                 con.close();
1:3d10acc:             }
1:0640cb7:         }
1:0640cb7:         return result != null ? result.getText() : null;
1:0640cb7:     }
1:0640cb7:     
1:3d10acc:     protected void send(String text) throws Exception {
1:0640cb7:         Connection con  = connection;
1:0640cb7:         MessageProducer p = producer;
1:0640cb7:         Session s = session;
1:0640cb7:         if (connectionPerMessage){
1:0640cb7:             con = factory.createConnection();
1:0640cb7:             con.start();
1:0640cb7:             s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3d10acc:             p = s.createProducer(getSendDestination());
1:0640cb7:             p.setDeliveryMode(deliveryMode);
1:0640cb7:         }
1:0640cb7:         TextMessage message = s.createTextMessage(text);
1:0640cb7:         p.send(message);
2:0640cb7:         if (connectionPerMessage) {
1:3d10acc:             Thread.sleep(SLEEP_TIME);//give the broker a chance
2:0640cb7:             con.close();
1:0640cb7:         }
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public String getName() {
1:0640cb7:         return name;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setName(String name) {
1:0640cb7:         this.name = name;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public Destination getStartDestination() {
1:0640cb7:         return startDestination;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setStartDestination(Destination startDestination) {
1:0640cb7:         this.startDestination = startDestination;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public Destination getNextDestination() {
1:0640cb7:         return nextDestination;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setNextDestination(Destination nextDestination) {
1:0640cb7:         this.nextDestination = nextDestination;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public int getDeliveryMode() {
1:0640cb7:         return deliveryMode;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setDeliveryMode(int deliveryMode) {
1:0640cb7:         this.deliveryMode = deliveryMode;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public boolean isConnectionPerMessage() {
1:0640cb7:         return connectionPerMessage;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setConnectionPerMessage(boolean connectionPerMessage) {
1:0640cb7:         this.connectionPerMessage = connectionPerMessage;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public int getTimeout() {
1:0640cb7:         return timeout;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: 
1:0640cb7: 
1:0640cb7:     public void setTimeout(int timeout) {
1:0640cb7:         this.timeout = timeout;
1:0640cb7:     }
1:3d10acc:     
1:3d10acc:     protected Destination getSendDestination() {
1:3d10acc:         return nextDestination;
1:3d10acc:     }
1:3d10acc:     
1:3d10acc:     protected Destination getConsumeDestination() {
1:3d10acc:         return startDestination;
1:3d10acc:     }
1:0640cb7: 
1:0640cb7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LoadClient.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3d10acc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageAudit;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(LoadClient.class);
1:     protected static int SLEEP_TIME = 2;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:     protected boolean connectionPerMessage = false;
1:     protected boolean running;
1:     protected int timeout = 10000;
/////////////////////////////////////////////////////////////////////////
1:                 consumer = session.createConsumer(getConsumeDestination());
1:                 producer = session.createProducer(getSendDestination());
/////////////////////////////////////////////////////////////////////////
1:         if(connection != null) {
1:             connection.stop();
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 if(result != null) {
1:                     send(result);
1:                     rate.increment();
1:                 else if (running) {
1:                     LOG.error(name + " Failed to consume!");
1:                 }
1:     protected String consume() throws Exception {
1:             c = s.createConsumer(getConsumeDestination());
1:         if (result != null) {
1:             if (audit.isDuplicate(result.getJMSMessageID())) {
1:                 throw new JMSException("Received duplicate " + result.getText());
1:             }
1:             if (!audit.isInOrder(result.getJMSMessageID())) {
1:                 throw new JMSException("Out of order " + result.getText());
1:             }
1:             
1:             if (connectionPerMessage) {
1:                 Thread.sleep(SLEEP_TIME);//give the broker a chance
1:                 con.close();
1:             }
1:     protected void send(String text) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             p = s.createProducer(getSendDestination());
1:             Thread.sleep(SLEEP_TIME);//give the broker a chance
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected Destination getSendDestination() {
1:         return nextDestination;
1:     }
1:     
1:     protected Destination getConsumeDestination() {
1:         return startDestination;
1:     }
commit:0640cb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.load;
1: 
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.perf.PerfRate;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class LoadClient implements Runnable{
1:     protected String name;
1:     protected ConnectionFactory factory;
1:     protected Connection connection;
1:     protected Destination startDestination;
1:     protected Destination nextDestination;
1:     protected Session session;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected PerfRate rate = new PerfRate();
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
0:     private boolean connectionPerMessage = false;
0:     private boolean running;
0:     private int timeout = 10000;
1:     
1: 
1:     public LoadClient(String name,ConnectionFactory factory) {
1:        this.name=name;
1:        this.factory = factory;
1:     }
1: 
1:    
1: 
1:     public synchronized void start() throws JMSException {
1:         if (!running) {
1:             rate.reset();
1:             running = true;
1:             if (!connectionPerMessage) {
1:                 connection = factory.createConnection();
1:                 connection.start();
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 consumer = session.createConsumer(this.startDestination);
0:                 producer = session.createProducer(this.nextDestination);
1:                 producer.setDeliveryMode(this.deliveryMode);
1:                 
1:             }
1:             
1:             Thread t = new  Thread(this);
1:             t.setName(name);
1:             t.start();
1:         }
1:     }
1: 
1:     public void stop() throws JMSException, InterruptedException {
1:         running = false;
0:         connection.stop();
1:     }
1: 
1:     
1:     public void run() {
1:         try {
1:             while (running) {
1:                 String result = consume();
0:                 if (result == null && running) {
0:                     throw new Exception(name + "Failed to consume ");
1:                 }
0:                 send(result);
0:                 rate.increment();
1:             }
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:         } 
1:     }
1:     
0:     protected String consume() throws JMSException {
1:         Connection con  = null;
1:         MessageConsumer c = consumer;
1:         if (connectionPerMessage){
1:             con = factory.createConnection();
1:             con.start();
1:             Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             c = s.createConsumer(startDestination);
1:         }
1:         TextMessage result = (TextMessage) c.receive(timeout);
1:         if (connectionPerMessage) {
1:             con.close();
1:         }
1:         return result != null ? result.getText() : null;
1:     }
1:     
0:     protected void send(String text) throws JMSException {
1:         Connection con  = connection;
1:         MessageProducer p = producer;
1:         Session s = session;
1:         if (connectionPerMessage){
1:             con = factory.createConnection();
1:             con.start();
1:             s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             p = s.createProducer(nextDestination);
1:             p.setDeliveryMode(deliveryMode);
1:         }
1:         TextMessage message = s.createTextMessage(text);
1:         p.send(message);
0:         //System.out.println(name + " SENT " + text + " TO " + nextDestination);
1:         if (connectionPerMessage) {
1:             con.close();
1:         }
1:     }
1: 
1: 
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1: 
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
1: 
1: 
1:     public Destination getStartDestination() {
1:         return startDestination;
1:     }
1: 
1: 
1: 
1:     public void setStartDestination(Destination startDestination) {
1:         this.startDestination = startDestination;
1:     }
1: 
1: 
1: 
1:     public Destination getNextDestination() {
1:         return nextDestination;
1:     }
1: 
1: 
1: 
1:     public void setNextDestination(Destination nextDestination) {
1:         this.nextDestination = nextDestination;
1:     }
1: 
1: 
1: 
1:     public int getDeliveryMode() {
1:         return deliveryMode;
1:     }
1: 
1: 
1: 
1:     public void setDeliveryMode(int deliveryMode) {
1:         this.deliveryMode = deliveryMode;
1:     }
1: 
1: 
1: 
1:     public boolean isConnectionPerMessage() {
1:         return connectionPerMessage;
1:     }
1: 
1: 
1: 
1:     public void setConnectionPerMessage(boolean connectionPerMessage) {
1:         this.connectionPerMessage = connectionPerMessage;
1:     }
1: 
1: 
1: 
1:     public int getTimeout() {
1:         return timeout;
1:     }
1: 
1: 
1: 
1:     public void setTimeout(int timeout) {
1:         this.timeout = timeout;
1:     }
1: 
1: }
============================================================================