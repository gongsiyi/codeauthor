1:41c9366: /**
1:41c9366:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41c9366:  * contributor license agreements.  See the NOTICE file distributed with
1:41c9366:  * this work for additional information regarding copyright ownership.
1:41c9366:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41c9366:  * (the "License"); you may not use this file except in compliance with
1:41c9366:  * the License.  You may obtain a copy of the License at
1:41c9366:  *
1:41c9366:  *      http://www.apache.org/licenses/LICENSE-2.0
1:41c9366:  *
1:41c9366:  * Unless required by applicable law or agreed to in writing, software
1:41c9366:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41c9366:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41c9366:  * See the License for the specific language governing permissions and
1:41c9366:  * limitations under the License.
1:41c9366:  */
1:41c9366: package org.apache.activemq.network;
1:41c9366: 
1:41c9366: import static org.junit.Assert.assertEquals;
1:c7d559f: import static org.junit.Assert.assertNotNull;
1:c7d559f: import static org.junit.Assert.assertTrue;
1:41c9366: 
1:41c9366: import java.net.URI;
1:41c9366: import java.util.Arrays;
1:41c9366: import java.util.UUID;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:41c9366: 
1:41c9366: import javax.jms.BytesMessage;
1:41c9366: import javax.jms.Connection;
1:41c9366: import javax.jms.DeliveryMode;
1:41c9366: import javax.jms.MapMessage;
1:41c9366: import javax.jms.Message;
1:41c9366: import javax.jms.MessageConsumer;
1:41c9366: import javax.jms.MessageProducer;
1:41c9366: import javax.jms.Session;
1:41c9366: import javax.jms.StreamMessage;
1:41c9366: 
1:41c9366: import org.apache.activemq.ActiveMQConnection;
1:41c9366: import org.apache.activemq.ActiveMQConnectionFactory;
1:41c9366: import org.apache.activemq.broker.BrokerService;
1:41c9366: import org.apache.activemq.command.ActiveMQBytesMessage;
1:41c9366: import org.apache.activemq.command.ActiveMQDestination;
1:41c9366: import org.apache.activemq.command.ActiveMQMapMessage;
1:41c9366: import org.apache.activemq.command.ActiveMQObjectMessage;
1:41c9366: import org.apache.activemq.command.ActiveMQStreamMessage;
1:41c9366: import org.apache.activemq.command.ActiveMQTextMessage;
1:41c9366: import org.apache.activemq.command.ActiveMQTopic;
1:41c9366: import org.apache.activemq.command.ConsumerId;
1:41c9366: import org.apache.activemq.util.Wait;
1:41c9366: import org.apache.activemq.xbean.BrokerFactoryBean;
1:41c9366: import org.junit.After;
1:41c9366: import org.junit.Before;
1:41c9366: import org.junit.Test;
1:41c9366: import org.slf4j.Logger;
1:41c9366: import org.slf4j.LoggerFactory;
1:41c9366: import org.springframework.context.support.AbstractApplicationContext;
1:41c9366: import org.springframework.core.io.ClassPathResource;
1:41c9366: import org.springframework.core.io.Resource;
1:41c9366: 
1:41c9366: public class CompressionOverNetworkTest {
1:41c9366: 
1:9352655:     protected static final int RECEIVE_TIMEOUT_MILLS = 10000;
1:41c9366:     protected static final int MESSAGE_COUNT = 10;
1:41c9366:     private static final Logger LOG = LoggerFactory.getLogger(CompressionOverNetworkTest.class);
1:41c9366: 
1:41c9366:     protected AbstractApplicationContext context;
1:41c9366:     protected Connection localConnection;
1:41c9366:     protected Connection remoteConnection;
1:41c9366:     protected BrokerService localBroker;
1:41c9366:     protected BrokerService remoteBroker;
1:41c9366:     protected Session localSession;
1:41c9366:     protected Session remoteSession;
1:9352655:     protected ActiveMQDestination included;
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testCompressedOverCompressedNetwork() throws Exception {
1:41c9366: 
1:41c9366:         ActiveMQConnection localAmqConnection = (ActiveMQConnection) localConnection;
1:41c9366:         localAmqConnection.setUseCompression(true);
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         StringBuilder payload = new StringBuilder("test-");
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             payload.append(UUID.randomUUID().toString());
1:41c9366:         }
1:41c9366: 
1:41c9366:         Message test = localSession.createTextMessage(payload.toString());
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQTextMessage message = (ActiveMQTextMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366:         assertEquals(payload.toString(), message.getText());
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testTextMessageCompression() throws Exception {
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         StringBuilder payload = new StringBuilder("test-");
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             payload.append(UUID.randomUUID().toString());
1:41c9366:         }
1:41c9366: 
1:41c9366:         Message test = localSession.createTextMessage(payload.toString());
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQTextMessage message = (ActiveMQTextMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366:         assertEquals(payload.toString(), message.getText());
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testBytesMessageCompression() throws Exception {
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         StringBuilder payload = new StringBuilder("test-");
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             payload.append(UUID.randomUUID().toString());
1:41c9366:         }
1:41c9366: 
1:41c9366:         byte[] bytes = payload.toString().getBytes("UTF-8");
1:41c9366: 
1:41c9366:         BytesMessage test = localSession.createBytesMessage();
1:41c9366:         test.writeBytes(bytes);
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQBytesMessage message = (ActiveMQBytesMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366:         assertTrue(message.getContent().getLength() < bytes.length);
1:41c9366: 
1:41c9366:         byte[] result = new byte[bytes.length];
1:41c9366:         assertEquals(bytes.length, message.readBytes(result));
1:41c9366:         assertEquals(-1, message.readBytes(result));
1:41c9366: 
1:41c9366:         for(int i = 0; i < bytes.length; ++i) {
1:41c9366:             assertEquals(bytes[i], result[i]);
1:41c9366:         }
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testStreamMessageCompression() throws Exception {
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         StreamMessage test = localSession.createStreamMessage();
1:41c9366: 
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             test.writeString("test string: " + i);
1:41c9366:         }
1:41c9366: 
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQStreamMessage message = (ActiveMQStreamMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366: 
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             assertEquals("test string: " + i, message.readString());
1:41c9366:         }
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testMapMessageCompression() throws Exception {
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         MapMessage test = localSession.createMapMessage();
1:41c9366: 
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             test.setString(Integer.toString(i), "test string: " + i);
1:41c9366:         }
1:41c9366: 
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQMapMessage message = (ActiveMQMapMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366: 
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             assertEquals("test string: " + i, message.getString(Integer.toString(i)));
1:41c9366:         }
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Test
1:41c9366:     public void testObjectMessageCompression() throws Exception {
1:41c9366: 
1:41c9366:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:41c9366:         MessageProducer producer = localSession.createProducer(included);
1:41c9366:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41c9366: 
1:41c9366:         waitForConsumerRegistration(localBroker, 1, included);
1:41c9366: 
1:41c9366:         StringBuilder payload = new StringBuilder("test-");
1:41c9366:         for (int i = 0; i < 100; ++i) {
1:41c9366:             payload.append(UUID.randomUUID().toString());
1:41c9366:         }
1:41c9366: 
1:41c9366:         Message test = localSession.createObjectMessage(payload.toString());
1:41c9366:         producer.send(test);
1:9352655:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
1:41c9366:         assertNotNull(msg);
1:41c9366:         ActiveMQObjectMessage message = (ActiveMQObjectMessage) msg;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366:         assertEquals(payload.toString(), message.getObject());
1:41c9366:     }
1:41c9366: 
1:41c9366:     private void waitForConsumerRegistration(final BrokerService brokerService, final int min, final ActiveMQDestination destination) throws Exception {
1:41c9366:         assertTrue("Internal bridge consumers registered in time", Wait.waitFor(new Wait.Condition() {
1:41c9366:             @Override
1:41c9366:             public boolean isSatisified() throws Exception {
1:41c9366:                 Object[] bridges = brokerService.getNetworkConnectors().get(0).bridges.values().toArray();
1:41c9366:                 if (bridges.length > 0) {
1:41c9366:                     LOG.info(brokerService + " bridges "  + Arrays.toString(bridges));
1:41c9366:                     DemandForwardingBridgeSupport demandForwardingBridgeSupport = (DemandForwardingBridgeSupport) bridges[0];
1:9ef4259:                     ConcurrentMap<ConsumerId, DemandSubscription> forwardingBridges = demandForwardingBridgeSupport.getLocalSubscriptionMap();
1:41c9366:                     LOG.info(brokerService + " bridge "  + demandForwardingBridgeSupport + ", localSubs: " + forwardingBridges);
1:41c9366:                     if (!forwardingBridges.isEmpty()) {
1:41c9366:                         for (DemandSubscription demandSubscription : forwardingBridges.values()) {
1:41c9366:                             if (demandSubscription.getLocalInfo().getDestination().equals(destination)) {
1:41c9366:                                 LOG.info(brokerService + " DemandSubscription "  + demandSubscription + ", size: " + demandSubscription.size());
1:41c9366:                                 return demandSubscription.size() >= min;
1:41c9366:                             }
1:41c9366:                         }
1:41c9366:                     }
1:41c9366:                 }
1:41c9366:                 return false;
1:41c9366:             }
1:41c9366:         }));
1:41c9366:     }
1:41c9366: 
1:41c9366:     @Before
1:41c9366:     public void setUp() throws Exception {
1:41c9366:         doSetUp(true);
1:41c9366:     }
1:41c9366: 
1:41c9366:     @After
1:41c9366:     public void tearDown() throws Exception {
1:41c9366:         doTearDown();
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected void doTearDown() throws Exception {
1:30d3162:         try {
1:30d3162:             localConnection.close();
1:30d3162:             remoteConnection.close();
1:30d3162:         } catch (Exception ignored) {}
1:30d3162:         try {
1:30d3162:             localBroker.stop();
1:30d3162:         } finally {
1:30d3162:             remoteBroker.stop();
1:30d3162:         }
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:41c9366:         localBroker = createLocalBroker();
1:41c9366:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:41c9366:         localBroker.start();
1:41c9366:         localBroker.waitUntilStarted();
1:41c9366:         remoteBroker = createRemoteBroker();
1:41c9366:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:41c9366:         remoteBroker.start();
1:41c9366:         remoteBroker.waitUntilStarted();
1:41c9366:         URI localURI = localBroker.getVmConnectorURI();
1:41c9366:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:41c9366:         fac.setAlwaysSyncSend(true);
1:41c9366:         fac.setDispatchAsync(false);
1:41c9366:         localConnection = fac.createConnection();
1:41c9366:         localConnection.setClientID("clientId");
1:41c9366:         localConnection.start();
1:41c9366:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:41c9366:         fac = new ActiveMQConnectionFactory(remoteURI);
1:41c9366:         remoteConnection = fac.createConnection();
1:41c9366:         remoteConnection.setClientID("clientId");
1:41c9366:         remoteConnection.start();
1:41c9366:         included = new ActiveMQTopic("include.test.bar");
1:41c9366:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41c9366:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected String getRemoteBrokerURI() {
1:41c9366:         return "org/apache/activemq/network/remoteBroker.xml";
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected String getLocalBrokerURI() {
1:41c9366:         return "org/apache/activemq/network/localBroker.xml";
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected BrokerService createBroker(String uri) throws Exception {
1:41c9366:         Resource resource = new ClassPathResource(uri);
1:41c9366:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:41c9366:         resource = new ClassPathResource(uri);
1:41c9366:         factory = new BrokerFactoryBean(resource);
1:41c9366:         factory.afterPropertiesSet();
1:41c9366:         BrokerService result = factory.getBroker();
1:41c9366: 
1:41c9366:         for (NetworkConnector connector : result.getNetworkConnectors()) {
1:41c9366:             connector.setUseCompression(true);
1:41c9366:         }
1:41c9366: 
1:41c9366:         return result;
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected BrokerService createLocalBroker() throws Exception {
1:41c9366:         return createBroker(getLocalBrokerURI());
1:41c9366:     }
1:41c9366: 
1:41c9366:     protected BrokerService createRemoteBroker() throws Exception {
1:41c9366:         return createBroker(getRemoteBrokerURI());
1:41c9366:     }
1:41c9366: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:30d3162
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             localConnection.close();
1:             remoteConnection.close();
1:         } catch (Exception ignored) {}
1:         try {
1:             localBroker.stop();
1:         } finally {
1:             remoteBroker.stop();
1:         }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:                     ConcurrentMap<ConsumerId, DemandSubscription> forwardingBridges = demandForwardingBridgeSupport.getLocalSubscriptionMap();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
commit:ef24cc9
commit:41c9366
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
0: import static junit.framework.Assert.assertNotNull;
0: import static junit.framework.Assert.assertTrue;
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.UUID;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: public class CompressionOverNetworkTest {
1: 
1:     protected static final int MESSAGE_COUNT = 10;
1:     private static final Logger LOG = LoggerFactory.getLogger(CompressionOverNetworkTest.class);
1: 
1:     protected AbstractApplicationContext context;
1:     protected Connection localConnection;
1:     protected Connection remoteConnection;
1:     protected BrokerService localBroker;
1:     protected BrokerService remoteBroker;
1:     protected Session localSession;
1:     protected Session remoteSession;
0:     protected ActiveMQTopic included;
1: 
1:     @Test
1:     public void testCompressedOverCompressedNetwork() throws Exception {
1: 
1:         ActiveMQConnection localAmqConnection = (ActiveMQConnection) localConnection;
1:         localAmqConnection.setUseCompression(true);
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         StringBuilder payload = new StringBuilder("test-");
1:         for (int i = 0; i < 100; ++i) {
1:             payload.append(UUID.randomUUID().toString());
1:         }
1: 
1:         Message test = localSession.createTextMessage(payload.toString());
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQTextMessage message = (ActiveMQTextMessage) msg;
1:         assertTrue(message.isCompressed());
1:         assertEquals(payload.toString(), message.getText());
1:     }
1: 
1:     @Test
1:     public void testTextMessageCompression() throws Exception {
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         StringBuilder payload = new StringBuilder("test-");
1:         for (int i = 0; i < 100; ++i) {
1:             payload.append(UUID.randomUUID().toString());
1:         }
1: 
1:         Message test = localSession.createTextMessage(payload.toString());
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQTextMessage message = (ActiveMQTextMessage) msg;
1:         assertTrue(message.isCompressed());
1:         assertEquals(payload.toString(), message.getText());
1:     }
1: 
1:     @Test
1:     public void testBytesMessageCompression() throws Exception {
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         StringBuilder payload = new StringBuilder("test-");
1:         for (int i = 0; i < 100; ++i) {
1:             payload.append(UUID.randomUUID().toString());
1:         }
1: 
1:         byte[] bytes = payload.toString().getBytes("UTF-8");
1: 
1:         BytesMessage test = localSession.createBytesMessage();
1:         test.writeBytes(bytes);
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000*6000);
1:         assertNotNull(msg);
1:         ActiveMQBytesMessage message = (ActiveMQBytesMessage) msg;
1:         assertTrue(message.isCompressed());
1:         assertTrue(message.getContent().getLength() < bytes.length);
1: 
1:         byte[] result = new byte[bytes.length];
1:         assertEquals(bytes.length, message.readBytes(result));
1:         assertEquals(-1, message.readBytes(result));
1: 
1:         for(int i = 0; i < bytes.length; ++i) {
1:             assertEquals(bytes[i], result[i]);
1:         }
1:     }
1: 
1:     @Test
1:     public void testStreamMessageCompression() throws Exception {
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         StreamMessage test = localSession.createStreamMessage();
1: 
1:         for (int i = 0; i < 100; ++i) {
1:             test.writeString("test string: " + i);
1:         }
1: 
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQStreamMessage message = (ActiveMQStreamMessage) msg;
1:         assertTrue(message.isCompressed());
1: 
1:         for (int i = 0; i < 100; ++i) {
1:             assertEquals("test string: " + i, message.readString());
1:         }
1:     }
1: 
1:     @Test
1:     public void testMapMessageCompression() throws Exception {
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         MapMessage test = localSession.createMapMessage();
1: 
1:         for (int i = 0; i < 100; ++i) {
1:             test.setString(Integer.toString(i), "test string: " + i);
1:         }
1: 
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQMapMessage message = (ActiveMQMapMessage) msg;
1:         assertTrue(message.isCompressed());
1: 
1:         for (int i = 0; i < 100; ++i) {
1:             assertEquals("test string: " + i, message.getString(Integer.toString(i)));
1:         }
1:     }
1: 
1:     @Test
1:     public void testObjectMessageCompression() throws Exception {
1: 
1:         MessageConsumer consumer1 = remoteSession.createConsumer(included);
1:         MessageProducer producer = localSession.createProducer(included);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         waitForConsumerRegistration(localBroker, 1, included);
1: 
1:         StringBuilder payload = new StringBuilder("test-");
1:         for (int i = 0; i < 100; ++i) {
1:             payload.append(UUID.randomUUID().toString());
1:         }
1: 
1:         Message test = localSession.createObjectMessage(payload.toString());
1:         producer.send(test);
0:         Message msg = consumer1.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQObjectMessage message = (ActiveMQObjectMessage) msg;
1:         assertTrue(message.isCompressed());
1:         assertEquals(payload.toString(), message.getObject());
1:     }
1: 
1:     private void waitForConsumerRegistration(final BrokerService brokerService, final int min, final ActiveMQDestination destination) throws Exception {
1:         assertTrue("Internal bridge consumers registered in time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Object[] bridges = brokerService.getNetworkConnectors().get(0).bridges.values().toArray();
1:                 if (bridges.length > 0) {
1:                     LOG.info(brokerService + " bridges "  + Arrays.toString(bridges));
1:                     DemandForwardingBridgeSupport demandForwardingBridgeSupport = (DemandForwardingBridgeSupport) bridges[0];
0:                     ConcurrentHashMap<ConsumerId, DemandSubscription> forwardingBridges = demandForwardingBridgeSupport.getLocalSubscriptionMap();
1:                     LOG.info(brokerService + " bridge "  + demandForwardingBridgeSupport + ", localSubs: " + forwardingBridges);
1:                     if (!forwardingBridges.isEmpty()) {
1:                         for (DemandSubscription demandSubscription : forwardingBridges.values()) {
1:                             if (demandSubscription.getLocalInfo().getDestination().equals(destination)) {
1:                                 LOG.info(brokerService + " DemandSubscription "  + demandSubscription + ", size: " + demandSubscription.size());
1:                                 return demandSubscription.size() >= min;
1:                             }
1:                         }
1:                     }
1:                 }
1:                 return false;
1:             }
1:         }));
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         doSetUp(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         doTearDown();
1:     }
1: 
1:     protected void doTearDown() throws Exception {
0:         localConnection.close();
0:         remoteConnection.close();
0:         localBroker.stop();
0:         remoteBroker.stop();
1:     }
1: 
1:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:         localBroker = createLocalBroker();
1:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1:         URI localURI = localBroker.getVmConnectorURI();
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         fac.setAlwaysSyncSend(true);
1:         fac.setDispatchAsync(false);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID("clientId");
1:         localConnection.start();
1:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:         fac = new ActiveMQConnectionFactory(remoteURI);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID("clientId");
1:         remoteConnection.start();
1:         included = new ActiveMQTopic("include.test.bar");
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected String getRemoteBrokerURI() {
1:         return "org/apache/activemq/network/remoteBroker.xml";
1:     }
1: 
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/localBroker.xml";
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         Resource resource = new ClassPathResource(uri);
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         resource = new ClassPathResource(uri);
1:         factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1:         BrokerService result = factory.getBroker();
1: 
1:         for (NetworkConnector connector : result.getNetworkConnectors()) {
1:             connector.setUseCompression(true);
1:         }
1: 
1:         return result;
1:     }
1: 
1:     protected BrokerService createLocalBroker() throws Exception {
1:         return createBroker(getLocalBrokerURI());
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         return createBroker(getRemoteBrokerURI());
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:9352655
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:     protected static final int RECEIVE_TIMEOUT_MILLS = 10000;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination included;
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer1.receive(RECEIVE_TIMEOUT_MILLS);
/////////////////////////////////////////////////////////////////////////
0:         remoteBroker = createRemoteBroker();
0:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
0:         remoteBroker.start();
0:         remoteBroker.waitUntilStarted();
============================================================================