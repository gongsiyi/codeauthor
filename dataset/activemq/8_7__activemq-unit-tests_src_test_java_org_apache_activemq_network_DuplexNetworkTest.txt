1:f1240b2: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:f1240b2:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f1240b2:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:f1240b2:  */
1:f1240b2: package org.apache.activemq.network;
1:13729a3: 
1:e5a94bf: import java.util.concurrent.TimeUnit;
1:e5a94bf: 
1:c7d559f: import static org.junit.Assert.assertEquals;
1:c7d559f: import static org.junit.Assert.assertTrue;
1:c7d559f: 
1:4e81437: import javax.jms.MessageProducer;
1:4e81437: import javax.jms.TemporaryQueue;
1:c7d559f: 
1:f1240b2: import org.apache.activemq.broker.BrokerService;
1:8012f28: import org.apache.activemq.util.Wait;
1:c3e57ec: import org.junit.Test;
1:e5a94bf: import org.slf4j.Logger;
1:e5a94bf: import org.slf4j.LoggerFactory;
1:c3e57ec: 
1:230a86c: public class DuplexNetworkTest extends SimpleNetworkTest {
1:e5a94bf:     private static final Logger LOG = LoggerFactory.getLogger(DuplexNetworkTest.class);
1:c3e57ec: 
1:1a5ad28:     @Override
1:230a86c:     protected String getLocalBrokerURI() {
1:f1240b2:         return "org/apache/activemq/network/duplexLocalBroker.xml";
1:f1240b2:     }
1:13729a3: 
1:1a5ad28:     @Override
1:230a86c:     protected BrokerService createRemoteBroker() throws Exception {
1:230a86c:         BrokerService broker = new BrokerService();
1:13729a3:         broker.setBrokerName("remoteBroker");
1:e5a94bf:         broker.addConnector("tcp://localhost:61617?transport.connectAttemptTimeout=2000");
1:f1240b2:         return broker;
1:f1240b2:     }
1:c3e57ec: 
1:c3e57ec:     @Test
1:4e81437:     public void testTempQueues() throws Exception {
1:4e81437:         TemporaryQueue temp = localSession.createTemporaryQueue();
1:4e81437:         MessageProducer producer = localSession.createProducer(temp);
1:4e81437:         producer.send(localSession.createTextMessage("test"));
2:4e81437:         Thread.sleep(100);
1:4e81437:         assertEquals("Destination not created", 1, remoteBroker.getAdminView().getTemporaryQueues().length);
1:4e81437:         temp.delete();
1:8012f28: 
1:8012f28:         assertTrue("Destination not deleted", Wait.waitFor(new Wait.Condition() {
1:8012f28:             @Override
1:8012f28:             public boolean isSatisified() throws Exception {
1:8012f28:                 return 0 == remoteBroker.getAdminView().getTemporaryQueues().length;
1:8012f28:             }
1:8012f28:         }));
1:f1240b2:     }
1:e5a94bf: 
1:e5a94bf:     @Test
1:e5a94bf:     public void testStaysUp() throws Exception {
1:e5a94bf:         int bridgeIdentity = getBridgeId();
1:e5a94bf:         LOG.info("Bridges: " + bridgeIdentity);
1:e5a94bf:         TimeUnit.SECONDS.sleep(5);
1:e5a94bf:         assertEquals("Same bridges", bridgeIdentity, getBridgeId());
1:e5a94bf:     }
1:e5a94bf: 
1:e5a94bf:     private int getBridgeId() {
1:e5a94bf:         int id = 0;
1:e5a94bf:         while (id == 0) {
1:e5a94bf:             try {
1:e5a94bf:                 id = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next().hashCode();
1:e5a94bf:             } catch (Throwable tryAgainInABit) {
1:e5a94bf:                 try {
1:e5a94bf:                     TimeUnit.MILLISECONDS.sleep(500);
1:e5a94bf:                 } catch (InterruptedException ignored) {
1:e5a94bf:                 }
1:e5a94bf:             }
1:e5a94bf:         }
1:e5a94bf:         return id;
1:e5a94bf:     }
1:e5a94bf: 
1:10c998b:     @Override
1:10c998b:     protected void assertNetworkBridgeStatistics(final long expectedLocalSent, final long expectedRemoteSent) throws Exception {
1:10c998b: 
1:10c998b:         final NetworkBridge localBridge = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next();
1:10c998b: 
1:10c998b:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:10c998b:             @Override
1:10c998b:             public boolean isSatisified() throws Exception {
1:10c998b:                 return expectedLocalSent == localBridge.getNetworkBridgeStatistics().getDequeues().getCount() &&
1:10c998b:                         expectedRemoteSent == localBridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:10c998b:             }
1:10c998b:         }));
1:10c998b: 
1:10c998b:     }
1:10c998b: 
1:4e81437: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:10c998b
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void assertNetworkBridgeStatistics(final long expectedLocalSent, final long expectedRemoteSent) throws Exception {
1: 
1:         final NetworkBridge localBridge = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next();
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return expectedLocalSent == localBridge.getNetworkBridgeStatistics().getDequeues().getCount() &&
1:                         expectedRemoteSent == localBridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:             }
1:         }));
1: 
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:e5a94bf
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DuplexNetworkTest.class);
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:61617?transport.connectAttemptTimeout=2000");
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testStaysUp() throws Exception {
1:         int bridgeIdentity = getBridgeId();
1:         LOG.info("Bridges: " + bridgeIdentity);
1:         TimeUnit.SECONDS.sleep(5);
1:         assertEquals("Same bridges", bridgeIdentity, getBridgeId());
1:     }
1: 
1:     private int getBridgeId() {
1:         int id = 0;
1:         while (id == 0) {
1:             try {
1:                 id = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next().hashCode();
1:             } catch (Throwable tryAgainInABit) {
1:                 try {
1:                     TimeUnit.MILLISECONDS.sleep(500);
1:                 } catch (InterruptedException ignored) {
1:                 }
1:             }
1:         }
1:         return id;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
0: import static junit.framework.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("Destination not deleted", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == remoteBroker.getAdminView().getTemporaryQueues().length;
1:             }
1:         }));
commit:c3e57ec
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
1: 
0: import static junit.framework.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
commit:dbefbec
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:13729a3
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:         broker.setBrokerName("remoteBroker");
commit:f1240b2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
0: 
1: package org.apache.activemq.network;
0: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: public class DuplexNetworkTest extends SimpleNetworkTest{
0: 
0:     protected static final Log log=LogFactory.getLog(DuplexNetworkTest.class);
0: /*
0:     protected String getLocalBrokerURI(){
1:         return "org/apache/activemq/network/duplexLocalBroker.xml";
1:     }
1:     */
0: 
0:     protected BrokerService createRemoteBroker() throws Exception{
0:         BrokerService broker=new BrokerService();
0:         broker.addConnector("tcp://localhost:61617");
1:         return broker;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4e81437
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageProducer;
1: import javax.jms.TemporaryQueue;
0: 
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testTempQueues() throws Exception {
1:         TemporaryQueue temp = localSession.createTemporaryQueue();
1:         MessageProducer producer = localSession.createProducer(temp);
1:         producer.send(localSession.createTextMessage("test"));
1:         Thread.sleep(100);
1:         assertEquals("Destination not created", 1, remoteBroker.getAdminView().getTemporaryQueues().length);
1:         temp.delete();
1:         Thread.sleep(100);
0:         assertEquals("Destination not deleted", 0, remoteBroker.getAdminView().getTemporaryQueues().length);
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DuplexNetworkTest.class);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class DuplexNetworkTest extends SimpleNetworkTest {
0:     protected static final Log log = LogFactory.getLog(DuplexNetworkTest.class);
1:     protected String getLocalBrokerURI() {
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
============================================================================