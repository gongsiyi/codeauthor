1:760c629: /**
1:760c629:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:760c629:  * contributor license agreements.  See the NOTICE file distributed with
1:760c629:  * this work for additional information regarding copyright ownership.
1:760c629:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:760c629:  * (the "License"); you may not use this file except in compliance with
1:760c629:  * the License.  You may obtain a copy of the License at
1:760c629:  *
1:760c629:  *      http://www.apache.org/licenses/LICENSE-2.0
1:760c629:  *
1:760c629:  * Unless required by applicable law or agreed to in writing, software
1:760c629:  * distributed under the License is distributed on an "AS IS" BASIS,
1:760c629:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:760c629:  * See the License for the specific language governing permissions and
1:760c629:  * limitations under the License.
1:760c629:  */
1:760c629: package org.apache.activemq.bugs;
7:760c629: 
1:11497e9: import static org.junit.Assert.fail;
1:11497e9: 
1:11497e9: import java.io.File;
1:11497e9: import java.util.ArrayList;
1:11497e9: import java.util.List;
1:11497e9: import java.util.concurrent.atomic.AtomicBoolean;
1:11497e9: 
1:760c629: import org.apache.activemq.broker.BrokerService;
1:760c629: import org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy;
1:760c629: import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;
1:760c629: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:760c629: import org.apache.activemq.broker.region.policy.PolicyMap;
1:760c629: import org.apache.activemq.transport.stomp.Stomp;
1:760c629: import org.apache.activemq.transport.stomp.StompConnection;
1:760c629: import org.apache.activemq.util.DefaultTestAppender;
1:760c629: import org.apache.log4j.Appender;
1:760c629: import org.apache.log4j.Logger;
1:760c629: import org.apache.log4j.spi.LoggingEvent;
1:760c629: import org.junit.After;
1:760c629: import org.junit.Before;
1:760c629: import org.junit.Test;
1:760c629: 
1:760c629: public class AMQ3622Test {
1:11497e9: 
1:760c629:     protected BrokerService broker;
1:760c629:     protected AtomicBoolean failed = new AtomicBoolean(false);
1:760c629:     protected String connectionUri;
1:760c629:     protected Appender appender = new DefaultTestAppender() {
1:760c629: 
1:760c629:         @Override
1:760c629:         public void doAppend(LoggingEvent event) {
1:760c629:             System.err.println(event.getMessage());
1:760c629:             if (event.getThrowableInformation() != null) {
1:760c629:                 if (event.getThrowableInformation().getThrowable() instanceof NullPointerException) {
1:760c629:                     failed.set(true);
1:760c629:                 }
1:760c629:             }
1:760c629:         }
1:760c629:     };
1:760c629: 
1:760c629:     @Before
1:760c629:     public void before() throws Exception {
1:760c629:         Logger.getRootLogger().addAppender(appender);
1:760c629: 
1:760c629:         broker = new BrokerService();
1:760c629:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:760c629:         broker.setPersistent(true);
1:760c629:         broker.setDeleteAllMessagesOnStartup(true);
1:760c629:         PolicyEntry policy = new PolicyEntry();
1:760c629:         policy.setTopic(">");
1:760c629:         policy.setProducerFlowControl(false);
1:760c629:         policy.setMemoryLimit(1 * 1024 * 1024);
1:760c629:         policy.setPendingSubscriberPolicy(new FilePendingSubscriberMessageStoragePolicy());
1:760c629:         policy.setSubscriptionRecoveryPolicy(new LastImageSubscriptionRecoveryPolicy());
1:760c629:         policy.setExpireMessagesPeriod(500);
1:760c629:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:11497e9: 
1:760c629:         entries.add(policy);
1:760c629:         PolicyMap pMap = new PolicyMap();
1:760c629:         pMap.setPolicyEntries(entries);
1:760c629:         broker.setDestinationPolicy(pMap);
1:760c629: 
1:760c629:         connectionUri = broker.addConnector("stomp://localhost:0").getPublishableConnectString();
1:760c629: 
1:760c629:         broker.start();
1:760c629:         broker.waitUntilStarted();
1:760c629:     }
1:760c629: 
1:760c629:     @After
1:760c629:     public void after() throws Exception {
1:760c629:         broker.stop();
1:760c629:         broker.waitUntilStopped();
1:760c629:         Logger.getRootLogger().removeAppender(appender);
1:760c629:     }
1:11497e9: 
1:760c629:     @Test
1:760c629:     public void go() throws Exception {
1:760c629:         StompConnection connection = new StompConnection();
1:11497e9:         Integer port = Integer.parseInt(connectionUri.split(":")[2]);
1:11497e9:         connection.open("localhost", port);        
1:760c629:         connection.connect("", "");
1:760c629:         connection.subscribe("/topic/foobar", Stomp.Headers.Subscribe.AckModeValues.CLIENT);
1:760c629:         connection.disconnect();
1:760c629:         Thread.sleep(1000);
1:11497e9: 
1:760c629:         if (failed.get()) {
1:760c629:             fail("Received NullPointerException");
1:760c629:         }
1:760c629:     }
1:760c629: 
1:760c629: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:11497e9
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Integer port = Integer.parseInt(connectionUri.split(":")[2]);
1:         connection.open("localhost", port);        
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:760c629
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.io.File;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import static org.junit.Assert.fail;
1: 
1: public class AMQ3622Test {
1:     
1:     protected BrokerService broker;
1:     protected AtomicBoolean failed = new AtomicBoolean(false);
1:     protected String connectionUri;
1:     protected Appender appender = new DefaultTestAppender() {
1: 
1:         @Override
1:         public void doAppend(LoggingEvent event) {
1:             System.err.println(event.getMessage());
1:             if (event.getThrowableInformation() != null) {
1:                 if (event.getThrowableInformation().getThrowable() instanceof NullPointerException) {
1:                     failed.set(true);
1:                 }
1:             }
1:         }
1:     };
1: 
1:     @Before
1:     public void before() throws Exception {
1:         Logger.getRootLogger().addAppender(appender);
1: 
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTopic(">");
1:         policy.setProducerFlowControl(false);
1:         policy.setMemoryLimit(1 * 1024 * 1024);
1:         policy.setPendingSubscriberPolicy(new FilePendingSubscriberMessageStoragePolicy());
1:         policy.setSubscriptionRecoveryPolicy(new LastImageSubscriptionRecoveryPolicy());
1:         policy.setExpireMessagesPeriod(500);
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         
1:         entries.add(policy);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(pMap);
1: 
1:         connectionUri = broker.addConnector("stomp://localhost:0").getPublishableConnectString();
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         Logger.getRootLogger().removeAppender(appender);
1:     }
1:     
1:     @Test
1:     public void go() throws Exception {
1:         StompConnection connection = new StompConnection();
0:         connection.open("localhost", Integer.parseInt(connectionUri.replace("stomp://localhost:", "")));
1:         connection.connect("", "");
1:         connection.subscribe("/topic/foobar", Stomp.Headers.Subscribe.AckModeValues.CLIENT);
1:         connection.disconnect();
1:         Thread.sleep(1000);
1:         
1:         if (failed.get()) {
1:             fail("Received NullPointerException");
1:         }
1:     }
1: 
1: }
============================================================================