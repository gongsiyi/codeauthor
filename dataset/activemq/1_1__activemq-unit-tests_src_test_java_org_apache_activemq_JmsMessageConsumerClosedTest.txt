1:a095e9b: /**
1:a095e9b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a095e9b:  * contributor license agreements.  See the NOTICE file distributed with
1:a095e9b:  * this work for additional information regarding copyright ownership.
1:a095e9b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a095e9b:  * (the "License"); you may not use this file except in compliance with
1:a095e9b:  * the License.  You may obtain a copy of the License at
1:a095e9b:  *
1:a095e9b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a095e9b:  *
1:a095e9b:  * Unless required by applicable law or agreed to in writing, software
1:a095e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a095e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a095e9b:  * See the License for the specific language governing permissions and
1:a095e9b:  * limitations under the License.
1:a095e9b:  */
1:a095e9b: package org.apache.activemq;
1:a095e9b: 
1:a095e9b: import static org.junit.Assert.assertNull;
1:a095e9b: 
1:a095e9b: import javax.jms.Connection;
1:a095e9b: import javax.jms.Destination;
1:a095e9b: import javax.jms.IllegalStateException;
1:a095e9b: import javax.jms.Message;
1:a095e9b: import javax.jms.MessageConsumer;
1:a095e9b: import javax.jms.MessageListener;
1:a095e9b: import javax.jms.Session;
1:a095e9b: 
1:a095e9b: import org.apache.activemq.broker.BrokerService;
1:a095e9b: import org.junit.After;
1:a095e9b: import org.junit.Before;
1:a095e9b: import org.junit.Test;
1:a095e9b: 
1:a095e9b: /**
1:a095e9b:  * Test behavior of JMS MessageConsumer API implementation when closed.
1:a095e9b:  */
1:a095e9b: public class JmsMessageConsumerClosedTest {
1:a095e9b: 
1:a095e9b:     private Connection connection;
1:a095e9b:     private MessageConsumer consumer;
1:a095e9b:     private Destination destination;
1:a095e9b:     private BrokerService brokerService;
1:a095e9b: 
1:a095e9b:     protected BrokerService createBroker() throws Exception {
1:a095e9b:         BrokerService brokerService = new BrokerService();
1:a095e9b: 
1:a095e9b:         brokerService.setPersistent(false);
1:a095e9b:         brokerService.setUseJmx(false);
1:a095e9b:         brokerService.setAdvisorySupport(false);
1:a095e9b: 
1:a095e9b:         return brokerService;
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     protected MessageConsumer createClosedConsumer() throws Exception {
1:a095e9b:         MessageConsumer consumer = createConsumer();
1:a095e9b:         consumer.close();
1:a095e9b:         return consumer;
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     protected MessageConsumer createConsumer() throws Exception {
1:a095e9b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:a095e9b:         connection = factory.createConnection();
1:a095e9b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a095e9b:         destination = session.createTopic("test");
1:a095e9b:         return session.createConsumer(destination);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Before
1:a095e9b:     public void setUp() throws Exception {
1:a095e9b:         brokerService = createBroker();
1:a095e9b:         brokerService.start();
1:a095e9b:         brokerService.waitUntilStarted();
1:a095e9b: 
1:a095e9b:         consumer = createClosedConsumer();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @After
1:a095e9b:     public void tearDown() throws Exception {
1:a095e9b:         try {
1:a095e9b:             if (connection != null) {
1:a095e9b:                 connection.close();
1:a095e9b:             }
1:a095e9b:         } catch (Exception ex) {}
1:a095e9b: 
1:a095e9b:         if (brokerService != null) {
1:a095e9b:             brokerService.stop();
1:a095e9b:             brokerService.waitUntilStopped();
1:a095e9b:         }
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout = 30000)
1:a095e9b:     public void testCloseWhileReceiveIsBlocked() throws Exception {
1:a095e9b:         final MessageConsumer consumer = createConsumer();
1:a095e9b: 
1:a095e9b:         Thread closer = new Thread(new Runnable() {
1:a095e9b: 
1:a095e9b:             @Override
1:a095e9b:             public void run() {
1:a095e9b:                 try {
1:a095e9b:                     Thread.sleep(2000);
1:a095e9b:                     consumer.close();
1:a095e9b:                 } catch (Exception ex) {}
1:a095e9b:             }
1:a095e9b:         });
1:a095e9b:         closer.start();
1:a095e9b: 
1:a095e9b:         assertNull(consumer.receive());
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout = 30000)
1:a095e9b:     public void testCloseWhileTimedReceiveIsBlocked() throws Exception {
1:a095e9b:         final MessageConsumer consumer = createConsumer();
1:a095e9b: 
1:a095e9b:         Thread closer = new Thread(new Runnable() {
1:a095e9b: 
1:a095e9b:             @Override
1:a095e9b:             public void run() {
1:a095e9b:                 try {
1:a095e9b:                     Thread.sleep(2000);
1:a095e9b:                     consumer.close();
1:a095e9b:                 } catch (Exception ex) {}
1:a095e9b:             }
1:a095e9b:         });
1:a095e9b:         closer.start();
1:a095e9b: 
1:a095e9b:         assertNull(consumer.receive(5000));
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetMessageSelectorFails() throws Exception {
1:a095e9b:         consumer.getMessageSelector();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetMessageListenerFails() throws Exception {
1:a095e9b:         consumer.getMessageListener();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetMessageListenerFails() throws Exception {
1:a095e9b:         consumer.setMessageListener(new MessageListener() {
1:a095e9b:             @Override
1:a095e9b:             public void onMessage(Message message) {
1:a095e9b:             }
1:a095e9b:         });
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testRreceiveFails() throws Exception {
1:a095e9b:         consumer.receive();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testRreceiveTimedFails() throws Exception {
1:a095e9b:         consumer.receive(11);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testRreceiveNoWaitFails() throws Exception {
1:a095e9b:         consumer.receiveNoWait();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000)
1:a095e9b:     public void testClose() throws Exception {
1:a095e9b:         consumer.close();
1:a095e9b:     }
1:a095e9b: }
1:a095e9b: 
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a095e9b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test behavior of JMS MessageConsumer API implementation when closed.
1:  */
1: public class JmsMessageConsumerClosedTest {
1: 
1:     private Connection connection;
1:     private MessageConsumer consumer;
1:     private Destination destination;
1:     private BrokerService brokerService;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1: 
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1: 
1:         return brokerService;
1:     }
1: 
1:     protected MessageConsumer createClosedConsumer() throws Exception {
1:         MessageConsumer consumer = createConsumer();
1:         consumer.close();
1:         return consumer;
1:     }
1: 
1:     protected MessageConsumer createConsumer() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = session.createTopic("test");
1:         return session.createConsumer(destination);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         consumer = createClosedConsumer();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         } catch (Exception ex) {}
1: 
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testCloseWhileReceiveIsBlocked() throws Exception {
1:         final MessageConsumer consumer = createConsumer();
1: 
1:         Thread closer = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     Thread.sleep(2000);
1:                     consumer.close();
1:                 } catch (Exception ex) {}
1:             }
1:         });
1:         closer.start();
1: 
1:         assertNull(consumer.receive());
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testCloseWhileTimedReceiveIsBlocked() throws Exception {
1:         final MessageConsumer consumer = createConsumer();
1: 
1:         Thread closer = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     Thread.sleep(2000);
1:                     consumer.close();
1:                 } catch (Exception ex) {}
1:             }
1:         });
1:         closer.start();
1: 
1:         assertNull(consumer.receive(5000));
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetMessageSelectorFails() throws Exception {
1:         consumer.getMessageSelector();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetMessageListenerFails() throws Exception {
1:         consumer.getMessageListener();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetMessageListenerFails() throws Exception {
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:             }
1:         });
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testRreceiveFails() throws Exception {
1:         consumer.receive();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testRreceiveTimedFails() throws Exception {
1:         consumer.receive(11);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testRreceiveNoWaitFails() throws Exception {
1:         consumer.receiveNoWait();
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testClose() throws Exception {
1:         consumer.close();
1:     }
1: }
1: 
============================================================================