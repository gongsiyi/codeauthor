1:ea1dad7: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:ea1dad7:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ea1dad7:  *
1:ea1dad7:  * Unless required by applicable law or agreed to in writing, software
1:ea1dad7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ea1dad7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ea1dad7:  * See the License for the specific language governing permissions and
1:ea1dad7:  * limitations under the License.
1:ea1dad7:  */
1:ea1dad7: package org.apache.activemq.xbean;
5:ea1dad7: 
1:ea1dad7: import java.util.HashMap;
1:ea1dad7: 
1:ea1dad7: import org.apache.activemq.broker.BrokerService;
1:ea1dad7: import org.springframework.beans.factory.DisposableBean;
1:ea1dad7: import org.springframework.beans.factory.FactoryBean;
1:ea1dad7: import org.springframework.beans.factory.InitializingBean;
1:ea1dad7: import org.springframework.core.io.Resource;
1:ea1dad7: 
1:ea1dad7: /**
1:f812e34:  * Used to share a single broker even if you have multiple broker bean
1:f812e34:  * definitions. A use case is where you have multiple web applications that want
1:f812e34:  * to start an embedded broker but only the first one to deploy should actually
1:f812e34:  * start it.
1:b0c2a40:  * 
1:ea1dad7:  * 
1:ea1dad7:  */
1:ea1dad7: public class PooledBrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean {
1:f812e34: 
1:933eb2f:     static final HashMap<String, SharedBroker> SHARED_BROKER_MAP = new HashMap<String, SharedBroker>();
1:ea1dad7: 
1:ea1dad7:     private boolean start;
1:ea1dad7:     private Resource config;
1:f812e34: 
1:ea1dad7:     static class SharedBroker {
1:ea1dad7:         BrokerFactoryBean factory;
1:ea1dad7:         int refCount;
1:ea1dad7:     }
1:f812e34: 
1:ea1dad7:     public void afterPropertiesSet() throws Exception {
1:fc00993:         synchronized (SHARED_BROKER_MAP) {
1:933eb2f:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
1:f812e34:             if (sharedBroker == null) {
1:ea1dad7:                 sharedBroker = new SharedBroker();
1:ea1dad7:                 sharedBroker.factory = new BrokerFactoryBean();
1:ea1dad7:                 sharedBroker.factory.setConfig(config);
1:ea1dad7:                 sharedBroker.factory.setStart(start);
1:ea1dad7:                 sharedBroker.factory.afterPropertiesSet();
1:fc00993:                 SHARED_BROKER_MAP.put(config.getFilename(), sharedBroker);
1:ea1dad7:             }
1:ea1dad7:             sharedBroker.refCount++;
1:ea1dad7:         }
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public void destroy() throws Exception {
1:fc00993:         synchronized (SHARED_BROKER_MAP) {
1:933eb2f:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
1:f812e34:             if (sharedBroker != null) {
1:ea1dad7:                 sharedBroker.refCount--;
1:f812e34:                 if (sharedBroker.refCount == 0) {
1:ea1dad7:                     sharedBroker.factory.destroy();
1:fc00993:                     SHARED_BROKER_MAP.remove(config.getFilename());
1:ea1dad7:                 }
1:ea1dad7:             }
1:ea1dad7:         }
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public Resource getConfig() {
1:ea1dad7:         return config;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public Object getObject() throws Exception {
1:fc00993:         synchronized (SHARED_BROKER_MAP) {
1:933eb2f:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
1:f812e34:             if (sharedBroker != null) {
1:ea1dad7:                 return sharedBroker.factory.getObject();
1:ea1dad7:             }
1:ea1dad7:         }
1:ea1dad7:         return null;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public Class getObjectType() {
1:ea1dad7:         return BrokerService.class;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public boolean isSingleton() {
1:ea1dad7:         return true;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public boolean isStart() {
1:ea1dad7:         return start;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public void setConfig(Resource config) {
1:ea1dad7:         this.config = config;
1:ea1dad7:     }
1:ea1dad7: 
1:ea1dad7:     public void setStart(boolean start) {
1:f812e34:         this.start = start;
1:ea1dad7:     }
1:f812e34: 
1:ea1dad7: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     static final HashMap<String, SharedBroker> SHARED_BROKER_MAP = new HashMap<String, SharedBroker>();
/////////////////////////////////////////////////////////////////////////
1:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
/////////////////////////////////////////////////////////////////////////
1:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
/////////////////////////////////////////////////////////////////////////
1:             SharedBroker sharedBroker = SHARED_BROKER_MAP.get(config.getFilename());
/////////////////////////////////////////////////////////////////////////
0:     public Class<BrokerService> getObjectType() {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     static final HashMap SHARED_BROKER_MAP = new HashMap();
/////////////////////////////////////////////////////////////////////////
1:         synchronized (SHARED_BROKER_MAP) {
0:             SharedBroker sharedBroker = (SharedBroker)SHARED_BROKER_MAP.get(config.getFilename());
1:                 SHARED_BROKER_MAP.put(config.getFilename(), sharedBroker);
1:         synchronized (SHARED_BROKER_MAP) {
0:             SharedBroker sharedBroker = (SharedBroker)SHARED_BROKER_MAP.get(config.getFilename());
1:                     SHARED_BROKER_MAP.remove(config.getFilename());
/////////////////////////////////////////////////////////////////////////
1:         synchronized (SHARED_BROKER_MAP) {
0:             SharedBroker sharedBroker = (SharedBroker)SHARED_BROKER_MAP.get(config.getFilename());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Used to share a single broker even if you have multiple broker bean
1:  * definitions. A use case is where you have multiple web applications that want
1:  * to start an embedded broker but only the first one to deploy should actually
1:  * start it.
1: 
1: 
1: 
0:         synchronized (sharedBrokerMap) {
0:             SharedBroker sharedBroker = (SharedBroker)sharedBrokerMap.get(config.getFilename());
1:             if (sharedBroker == null) {
/////////////////////////////////////////////////////////////////////////
0:         synchronized (sharedBrokerMap) {
0:             SharedBroker sharedBroker = (SharedBroker)sharedBrokerMap.get(config.getFilename());
1:             if (sharedBroker != null) {
1:                 if (sharedBroker.refCount == 0) {
/////////////////////////////////////////////////////////////////////////
0:         synchronized (sharedBrokerMap) {
0:             SharedBroker sharedBroker = (SharedBroker)sharedBrokerMap.get(config.getFilename());
1:             if (sharedBroker != null) {
/////////////////////////////////////////////////////////////////////////
1:         this.start = start;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:ea1dad7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
1: import java.util.HashMap;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.springframework.beans.factory.DisposableBean;
1: import org.springframework.beans.factory.FactoryBean;
1: import org.springframework.beans.factory.InitializingBean;
1: import org.springframework.core.io.Resource;
1: 
1: /**
0:  * Used to share a single broker even if you have multiple broker bean definitions.
1:  * 
0:  * A use case is where you have multiple web applications that want to start an embedded broker
0:  * but only the first one to deploy should actually start it.
1:  * 
0:  * @version $Revision$
1:  */
1: public class PooledBrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean {
1: 
0:     static final HashMap sharedBrokerMap = new HashMap();
1:     
1:     private boolean start;
1:     private Resource config;
1:     
1:     static class SharedBroker {
1:         BrokerFactoryBean factory;
1:         int refCount;
1:     }
1:     
1:     public void afterPropertiesSet() throws Exception {
0:         synchronized( sharedBrokerMap ) {
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config);
0:             if( sharedBroker == null ) {
1:                 sharedBroker = new SharedBroker();
1:                 sharedBroker.factory = new BrokerFactoryBean();
1:                 sharedBroker.factory.setConfig(config);
1:                 sharedBroker.factory.setStart(start);
1:                 sharedBroker.factory.afterPropertiesSet();
0:                 sharedBrokerMap.put(config, sharedBroker);
1:             }
1:             sharedBroker.refCount++;
1:         }
1:     }
1: 
1:     public void destroy() throws Exception {
0:         synchronized( sharedBrokerMap ) {
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config);
0:             if( sharedBroker != null ) {
1:                 sharedBroker.refCount--;
0:                 if( sharedBroker.refCount==0 ) {
1:                     sharedBroker.factory.destroy();
0:                     sharedBrokerMap.remove(config);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public Resource getConfig() {
1:         return config;
1:     }
1: 
1:     public Object getObject() throws Exception {
0:         synchronized( sharedBrokerMap ) {
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config);
0:             if( sharedBroker != null ) {
1:                 return sharedBroker.factory.getObject();
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public Class getObjectType() {
1:         return BrokerService.class;
1:     }
1: 
1:     public boolean isSingleton() {
1:         return true;
1:     }
1: 
1:     public boolean isStart() {
1:         return start;
1:     }
1: 
1:     public void setConfig(Resource config) {
1:         this.config = config;
1:     }
1: 
1:     public void setStart(boolean start) {
0:         this.start=start;
1:     }
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:76de7c0
/////////////////////////////////////////////////////////////////////////
0:     public Class getObjectType() {
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:2b903d4
/////////////////////////////////////////////////////////////////////////
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config.getFilename());
0:                 sharedBrokerMap.put(config.getFilename(), sharedBroker);
/////////////////////////////////////////////////////////////////////////
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config.getFilename());
0:                     sharedBrokerMap.remove(config.getFilename());
/////////////////////////////////////////////////////////////////////////
0:             SharedBroker sharedBroker = (SharedBroker) sharedBrokerMap.get(config.getFilename());
============================================================================