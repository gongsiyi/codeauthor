1:0771df3: /**
1:0771df3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0771df3:  * contributor license agreements.  See the NOTICE file distributed with
1:0771df3:  * this work for additional information regarding copyright ownership.
1:0771df3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0771df3:  * (the "License"); you may not use this file except in compliance with
1:0771df3:  * the License.  You may obtain a copy of the License at
1:0771df3:  *
1:0771df3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0771df3:  *
1:0771df3:  * Unless required by applicable law or agreed to in writing, software
1:0771df3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0771df3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0771df3:  * See the License for the specific language governing permissions and
1:0771df3:  * limitations under the License.
1:0771df3:  */
13:0771df3: 
1:0771df3: package org.apache.activemq.transport.ws;
1:c6f9db8: 
1:3b4aadc: import java.net.InetSocketAddress;
1:3b4aadc: import java.net.URI;
1:3b4aadc: import java.util.Map;
1:3b4aadc: 
1:2128d4d: import javax.servlet.Servlet;
1:2128d4d: 
1:31c55f7: import org.apache.activemq.broker.BrokerService;
1:31c55f7: import org.apache.activemq.broker.BrokerServiceAware;
1:0771df3: import org.apache.activemq.command.BrokerInfo;
1:da138e3: import org.apache.activemq.transport.SocketConnectorFactory;
1:cb895f0: import org.apache.activemq.transport.WebTransportServerSupport;
1:f44c3d2: import org.apache.activemq.transport.ws.jetty9.WSServlet;
1:c6f9db8: import org.apache.activemq.util.IntrospectionSupport;
1:0771df3: import org.apache.activemq.util.ServiceStopper;
1:4fb8083: import org.eclipse.jetty.security.ConstraintSecurityHandler;
1:0771df3: import org.eclipse.jetty.server.Connector;
1:0771df3: import org.eclipse.jetty.server.Server;
1:e778467: import org.eclipse.jetty.servlet.ServletContextHandler;
1:0771df3: import org.eclipse.jetty.servlet.ServletHolder;
1:bc2bc86: import org.slf4j.Logger;
1:bc2bc86: import org.slf4j.LoggerFactory;
1:cb895f0: 
1:0771df3: /**
1:0771df3:  * Creates a web server and registers web socket server
1:0771df3:  *
1:0771df3:  */
1:31c55f7: public class WSTransportServer extends WebTransportServerSupport implements BrokerServiceAware {
1:08b8a35: 
1:bc2bc86:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportServer.class);
1:bc2bc86: 
1:31c55f7:     private BrokerService brokerService;
1:31c55f7:     private WSServlet servlet;
1:31c55f7: 
1:0771df3:     public WSTransportServer(URI location) {
1:0771df3:         super(location);
1:0771df3:         this.bindAddress = location;
1:da138e3:         socketConnectorFactory = new SocketConnectorFactory();
1:3f82625:     }
1:4fb8083: 
1:46e67a1:     @Override
1:0771df3:     protected void doStart() throws Exception {
1:3f82625:         createServer();
1:4fb8083: 
1:0771df3:         if (connector == null) {
1:bc2e2d9:             connector = socketConnectorFactory.createConnector(server);
1:4fb8083:         }
1:4fb8083: 
1:46e67a1:         URI boundTo = bind();
1:cb895f0: 
1:08b8a35:         ServletContextHandler contextHandler =
1:4fb8083:                 new ServletContextHandler(server, "/", ServletContextHandler.SECURITY);
1:cb895f0: 
1:0771df3:         ServletHolder holder = new ServletHolder();
1:4fb8083: 
1:4fb8083:         //AMQ-6182 - disabling trace by default
1:4fb8083:         configureTraceMethod((ConstraintSecurityHandler) contextHandler.getSecurityHandler(),
1:473b328:                 httpOptions.isEnableTrace());
1:4fb8083: 
1:9b0316b:         Map<String, Object> webSocketOptions = IntrospectionSupport.extractProperties(transportOptions, "websocket.");
1:9b0316b:         for(Map.Entry<String,Object> webSocketEntry : webSocketOptions.entrySet()) {
1:9b0316b:             Object value = webSocketEntry.getValue();
1:9b0316b:             if (value != null) {
1:9b0316b:                 holder.setInitParameter(webSocketEntry.getKey(), value.toString());
1:4fb8083:             }
1:4fb8083:         }
1:9b0316b: 
1:2128d4d:         holder.setServlet(createWSServlet());
1:08b8a35:         contextHandler.addServlet(holder, "/");
1:da138e3: 
1:0771df3:         contextHandler.setAttribute("acceptListener", getAcceptListener());
1:0771df3: 
1:0771df3:         server.start();
1:0771df3: 
1:46e67a1:         // Update the Connect To URI with our actual location in case the configured port
1:46e67a1:         // was set to zero so that we report the actual port we are listening on.
1:0771df3: 
1:f44c3d2:         int port = getConnectorLocalPort();
1:3f82625:         if (port == -1) {
1:3f82625:             port = boundTo.getPort();
1:4fb8083:         }
1:0771df3: 
1:46e67a1:         setConnectURI(new URI(boundTo.getScheme(),
1:46e67a1:                               boundTo.getUserInfo(),
1:46e67a1:                               boundTo.getHost(),
1:46e67a1:                               port,
1:46e67a1:                               boundTo.getPath(),
1:46e67a1:                               boundTo.getQuery(),
1:46e67a1:                               boundTo.getFragment()));
1:bc2bc86: 
1:bc2bc86:         LOG.info("Listening for connections at {}", getConnectURI());
1:2128d4d:     }
1:2128d4d: 
1:2128d4d:     private Servlet createWSServlet() throws Exception {
1:31c55f7:         servlet = new WSServlet();
1:34eb1ee:         servlet.setTransportOptions(transportOptions);
1:31c55f7:         servlet.setBrokerService(brokerService);
1:31c55f7: 
1:34eb1ee:         return servlet;
1:2128d4d:     }
1:f44c3d2: 
1:3f82625:     private int getConnectorLocalPort() throws Exception {
1:3f82625:         return (Integer)connector.getClass().getMethod("getLocalPort").invoke(connector);
1:4fb8083:     }
1:4fb8083: 
1:46e67a1:     @Override
1:0771df3:     protected void doStop(ServiceStopper stopper) throws Exception {
1:0771df3:         Server temp = server;
1:0771df3:         server = null;
1:0771df3:         if (temp != null) {
1:0771df3:             temp.stop();
1:3f82625:         }
1:9b0316b:     }
1:3f82625: 
1:46e67a1:     @Override
1:0771df3:     public InetSocketAddress getSocketAddress() {
1:0771df3:         return null;
1:c6f9db8:     }
1:0771df3: 
1:46e67a1:     @Override
1:0771df3:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:da138e3:     }
1:da138e3: 
1:da138e3:     protected void setConnector(Connector connector) {
1:da138e3:         this.connector = connector;
1:4fb8083:     }
1:4fb8083: 
1:da138e3:     @Override
1:da138e3:     public void setTransportOption(Map<String, Object> transportOptions) {
1:2e2d5dd:         // String transport from options and
1:9b0316b:         Map<String, Object> socketOptions = IntrospectionSupport.extractProperties(transportOptions, "transport.");
1:9b0316b:         socketConnectorFactory.setTransportOptions(socketOptions);
1:2e2d5dd:         transportOptions.putAll(socketOptions);
1:2e2d5dd:         super.setTransportOption(transportOptions);
1:c6f9db8:     }
1:c6f9db8: 
1:0fffe21:     @Override
1:0fffe21:     public boolean isSslServer() {
1:0fffe21:         return false;
1:c6f9db8:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setBrokerService(BrokerService brokerService) {
1:31c55f7:         this.brokerService = brokerService;
1:31c55f7:         if (servlet != null) {
1:31c55f7:             servlet.setBrokerService(brokerService);
1:31c55f7:         }
1:31c55f7:     }
1:da138e3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:         // String transport from options and
1:         transportOptions.putAll(socketOptions);
1:         super.setTransportOption(transportOptions);
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
/////////////////////////////////////////////////////////////////////////
1: public class WSTransportServer extends WebTransportServerSupport implements BrokerServiceAware {
1:     private BrokerService brokerService;
1:     private WSServlet servlet;
1: 
/////////////////////////////////////////////////////////////////////////
1:         servlet = new WSServlet();
1:         servlet.setBrokerService(brokerService);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:         if (servlet != null) {
1:             servlet.setBrokerService(brokerService);
1:         }
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:34eb1ee
/////////////////////////////////////////////////////////////////////////
0:         WSServlet servlet = new WSServlet();
1:         servlet.setTransportOptions(transportOptions);
1:         return servlet;
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:473b328
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 httpOptions.isEnableTrace());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super.setTransportOption(socketOptions);
commit:4fb8083
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.security.ConstraintMapping;
1: import org.eclipse.jetty.security.ConstraintSecurityHandler;
0: import org.eclipse.jetty.util.security.Constraint;
/////////////////////////////////////////////////////////////////////////
1:                 new ServletContextHandler(server, "/", ServletContextHandler.SECURITY);
1: 
1:         //AMQ-6182 - disabling trace by default
1:         configureTraceMethod((ConstraintSecurityHandler) contextHandler.getSecurityHandler(),
0:                 getHttpOptions().isEnableTrace());
1: 
/////////////////////////////////////////////////////////////////////////
0:     private void configureTraceMethod(ConstraintSecurityHandler securityHandler,
0:             boolean enableTrace) {
0:         Constraint constraint = new Constraint();
0:         constraint.setName("trace-security");
0:         //If enableTrace is true, then we want to set authenticate to false to allow it
0:         constraint.setAuthenticate(!enableTrace);
0:         ConstraintMapping mapping = new ConstraintMapping();
0:         mapping.setConstraint(constraint);
0:         mapping.setMethod("TRACE");
0:         mapping.setPathSpec("/");
0:         securityHandler.addConstraintMapping(mapping);
1:     }
1: 
0:     protected static class HttpOptions {
0:         private boolean enableTrace = false;
1: 
0:         public boolean isEnableTrace() {
0:             return enableTrace;
1:         }
1: 
0:         public void setEnableTrace(boolean enableTrace) {
0:             this.enableTrace = enableTrace;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected HttpOptions getHttpOptions() {
0:         HttpOptions httpOptions = new HttpOptions();
0:         if (transportOptions != null) {
0:             Map<String, Object> httpOptionsMap = IntrospectionSupport.extractProperties(transportOptions, "http.");
0:             IntrospectionSupport.setProperties(httpOptions, httpOptionsMap);
1:         }
0:         return httpOptions;
1:     }
1: 
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.ws.jetty9.WSServlet;
/////////////////////////////////////////////////////////////////////////
1:         int port = getConnectorLocalPort();
/////////////////////////////////////////////////////////////////////////
0:         return new WSServlet();
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:2128d4d
/////////////////////////////////////////////////////////////////////////
1: import javax.servlet.Servlet;
1: 
/////////////////////////////////////////////////////////////////////////
1:         holder.setServlet(createWSServlet());
/////////////////////////////////////////////////////////////////////////
1:     private Servlet createWSServlet() throws Exception {
0:         if (Server.getVersion().startsWith("9")) {
0:             return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty9.WSServlet", true,
0:                                           getClass().getClassLoader()).newInstance();
1:         }
0:         return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty8.WSServlet", true,
0:                                       getClass().getClassLoader()).newInstance();
1:     }
1: 
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1:         createServer();
/////////////////////////////////////////////////////////////////////////
0:         if (Server.getVersion().startsWith("8")) {
0:             holder.setServlet(new org.apache.activemq.transport.ws.jetty8.WSServlet());
0:         } else {
0:             holder.setServlet(new org.apache.activemq.transport.ws.jetty9.WSServlet());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         int port = getConnectorLocalPort(); 
1:         if (port == -1) {
1:             port = boundTo.getPort();
/////////////////////////////////////////////////////////////////////////
1:     private int getConnectorLocalPort() throws Exception {
1:         return (Integer)connector.getClass().getMethod("getLocalPort").invoke(connector);
1:     }
1:     
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
1:             connector = socketConnectorFactory.createConnector(server);
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:bc2bc86
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportServer.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         LOG.info("Listening for connections at {}", getConnectURI());
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
1: import java.net.URI;
1: import java.util.Map;
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:33ec1cf
/////////////////////////////////////////////////////////////////////////
0:         holder.setServlet(new WSServlet());
commit:fa29678
/////////////////////////////////////////////////////////////////////////
commit:9b0316b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> webSocketOptions = IntrospectionSupport.extractProperties(transportOptions, "websocket.");
1:         for(Map.Entry<String,Object> webSocketEntry : webSocketOptions.entrySet()) {
1:             Object value = webSocketEntry.getValue();
1:             if (value != null) {
1:                 holder.setInitParameter(webSocketEntry.getKey(), value.toString());
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> socketOptions = IntrospectionSupport.extractProperties(transportOptions, "transport.");
1:         socketConnectorFactory.setTransportOptions(socketOptions);
commit:c6f9db8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
0:     int maxTextMessageSize = -1;
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (maxTextMessageSize != -1) {
0:             holder.setInitParameter("maxTextMessageSize", String.valueOf(maxTextMessageSize));
1:         }
/////////////////////////////////////////////////////////////////////////
0:         IntrospectionSupport.setProperties(this, transportOptions);
0:     public int getMaxTextMessageSize() {
0:         return maxTextMessageSize;
1:     }
1: 
0:     public void setMaxTextMessageSize(int maxTextMessageSize) {
0:         this.maxTextMessageSize = maxTextMessageSize;
1:     }
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.WebTransportServerSupport;
0: import org.apache.activemq.util.InetAddressUtil;
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0: public class WSTransportServer extends WebTransportServerSupport {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         URI bind = getBindLocation();
1: 
0:         bind();
/////////////////////////////////////////////////////////////////////////
0:         setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), host, connector.getLocalPort(), bind.getPath(), bind.getQuery(), bind.getFragment()));
commit:da138e3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.SocketConnectorFactory;
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     protected SocketConnectorFactory socketConnectorFactory;
1:         socketConnectorFactory = new SocketConnectorFactory();
0:             connector = socketConnectorFactory.createConnector();
/////////////////////////////////////////////////////////////////////////
1:     protected void setConnector(Connector connector) {
1:         this.connector = connector;
1:     }
1: 
1:     @Override
1:     public void setTransportOption(Map<String, Object> transportOptions) {
0:         socketConnectorFactory.setTransportOptions(transportOptions);
0:         super.setTransportOption(transportOptions);
1:     }
1: 
commit:08b8a35
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
1: 
0: import java.net.InetSocketAddress;
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:             connector = new SelectChannelConnector();
0:         connector.setServer(server);
0:         server.addConnector(connector);
1:         ServletContextHandler contextHandler =
0:                 new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY);
0:         holder.setServlet(new StompServlet());
1:         contextHandler.addServlet(holder, "/");
commit:0771df3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.ws;
1: 
0: import java.net.InetSocketAddress;
0: import java.net.URI;
1: 
1: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.transport.TransportServerSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.bio.SocketConnector;
0: import org.eclipse.jetty.server.handler.ContextHandler;
0: import org.eclipse.jetty.server.session.SessionHandler;
0: import org.eclipse.jetty.servlet.ServletHandler;
1: import org.eclipse.jetty.servlet.ServletHolder;
0: import org.eclipse.jetty.servlet.ServletMapping;
1: 
1: /**
1:  * Creates a web server and registers web socket server
1:  *
1:  */
0: public class WSTransportServer extends TransportServerSupport {
1:     
0:     private URI bindAddress;
0:     private Server server;
0:     private Connector connector;
1:     
1:     public WSTransportServer(URI location) {
1:         super(location);
1:         this.bindAddress = location;
0:     }
1: 
1:     protected void doStart() throws Exception {
0:         server = new Server();
1:         if (connector == null) {
0:             connector = new SocketConnector();
0:         }
0:         connector.setHost(bindAddress.getHost());
0:         connector.setPort(bindAddress.getPort());
0:         server.setConnectors(new Connector[] {
0:                 connector
0:         });
1:         
0:         ContextHandler contextHandler = new ContextHandler();
0:         contextHandler.setContextPath("/");
0:         contextHandler.setServer(server);
0:         server.setHandler(contextHandler);
1: 
0:         SessionHandler sessionHandler = new SessionHandler();
0:         contextHandler.setHandler(sessionHandler);
1: 
0:         ServletHandler servletHandler = new ServletHandler();
0:         sessionHandler.setHandler(servletHandler);
1:         
1:         ServletHolder holder = new ServletHolder();
0:         holder.setName("WSStomp");
0:         holder.setClassName(StompServlet.class.getName());
0:         servletHandler.setServlets(new ServletHolder[] {
0:             holder
0:         });
1: 
0:         ServletMapping mapping = new ServletMapping();
0:         mapping.setServletName("WSStomp");
0:         mapping.setPathSpec("/*");
0:         servletHandler.setServletMappings(new ServletMapping[] {
0:             mapping
0:         });
1: 
1:         contextHandler.setAttribute("acceptListener", getAcceptListener());
1:         
1:         server.start();
0:     }
1: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         Server temp = server;
1:         server = null;
1:         if (temp != null) {
1:             temp.stop();
0:         }
0:     }
1: 
1:     public InetSocketAddress getSocketAddress() {
1:         return null;
0:     }
1: 
1:     public void setBrokerInfo(BrokerInfo brokerInfo) {
0:     }
1: 
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:46e67a1
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         URI boundTo = bind();
/////////////////////////////////////////////////////////////////////////
0: 
1:         // Update the Connect To URI with our actual location in case the configured port
1:         // was set to zero so that we report the actual port we are listening on.
0: 
0:         int port = boundTo.getPort();
0:         if (connector.getLocalPort() != -1) {
0:             port = connector.getLocalPort();
0:         }
0: 
1:         setConnectURI(new URI(boundTo.getScheme(),
1:                               boundTo.getUserInfo(),
1:                               boundTo.getHost(),
1:                               port,
1:                               boundTo.getPath(),
1:                               boundTo.getQuery(),
1:                               boundTo.getFragment()));
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isSslServer() {
1:         return false;
0:     }
0: 
commit:e778467
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.servlet.ServletContextHandler;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:         ServletContextHandler contextHandler = new ServletContextHandler();
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
============================================================================