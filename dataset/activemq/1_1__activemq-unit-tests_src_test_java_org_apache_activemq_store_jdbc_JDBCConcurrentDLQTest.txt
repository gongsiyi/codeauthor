1:c50dc6f: /**
1:c50dc6f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c50dc6f:  * contributor license agreements.  See the NOTICE file distributed with
1:c50dc6f:  * this work for additional information regarding copyright ownership.
1:c50dc6f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c50dc6f:  * (the "License"); you may not use this file except in compliance with
1:c50dc6f:  * the License.  You may obtain a copy of the License at
1:c50dc6f:  * <p>
1:c50dc6f:  * http://www.apache.org/licenses/LICENSE-2.0
1:c50dc6f:  * <p>
1:c50dc6f:  * Unless required by applicable law or agreed to in writing, software
1:c50dc6f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c50dc6f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c50dc6f:  * See the License for the specific language governing permissions and
1:c50dc6f:  * limitations under the License.
1:c50dc6f:  */
1:c50dc6f: package org.apache.activemq.store.jdbc;
1:c50dc6f: 
1:c50dc6f: import org.apache.activemq.ActiveMQConnection;
1:c50dc6f: import org.apache.activemq.ActiveMQConnectionFactory;
1:c50dc6f: import org.apache.activemq.RedeliveryPolicy;
1:c50dc6f: import org.apache.activemq.broker.BrokerService;
1:c50dc6f: import org.apache.activemq.broker.region.RegionBroker;
1:c50dc6f: import org.apache.activemq.command.ActiveMQQueue;
1:c50dc6f: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:c50dc6f: import org.apache.activemq.util.DefaultTestAppender;
1:c50dc6f: import org.apache.log4j.Appender;
1:c50dc6f: import org.apache.log4j.Level;
1:c50dc6f: import org.junit.After;
1:c50dc6f: import org.junit.Before;
1:c50dc6f: import org.junit.Test;
1:c50dc6f: import org.slf4j.Logger;
1:c50dc6f: import org.slf4j.LoggerFactory;
1:c50dc6f: 
1:c50dc6f: import javax.jms.*;
1:c50dc6f: import java.io.IOException;
1:c50dc6f: import java.util.concurrent.ExecutorService;
1:c50dc6f: import java.util.concurrent.Executors;
1:c50dc6f: import java.util.concurrent.TimeUnit;
1:c50dc6f: import java.util.concurrent.atomic.AtomicBoolean;
1:c50dc6f: import java.util.concurrent.atomic.AtomicInteger;
1:c50dc6f: 
1:c50dc6f: import static org.junit.Assert.assertEquals;
1:c50dc6f: import static org.junit.Assert.assertFalse;
1:c50dc6f: import static org.junit.Assert.assertTrue;
1:c50dc6f: 
1:c50dc6f: 
1:c50dc6f: public class JDBCConcurrentDLQTest {
1:c50dc6f: 
1:c50dc6f:     private static final Logger LOG = LoggerFactory.getLogger(JDBCConcurrentDLQTest.class);
1:c50dc6f: 
1:c50dc6f:     BrokerService broker;
1:c50dc6f:     JDBCPersistenceAdapter jdbcPersistenceAdapter;
1:c50dc6f:     Appender appender = null;
1:c50dc6f:     final AtomicBoolean gotError = new AtomicBoolean(false);
1:c50dc6f: 
1:c50dc6f:     @Before
1:c50dc6f:     public void setUp() throws Exception {
1:c50dc6f:         gotError.set(false);
1:c50dc6f:         broker = createBroker();
1:c50dc6f:         broker.start();
1:c50dc6f:         broker.waitUntilStarted();
1:c50dc6f: 
1:c50dc6f:         appender = new DefaultTestAppender() {
1:c50dc6f:             @Override
1:c50dc6f:             public void doAppend(org.apache.log4j.spi.LoggingEvent event) {
1:c50dc6f:                 if (event.getLevel().toInt() > Level.INFO_INT) {
1:c50dc6f:                     LOG.error("Got error from log:" + event.getRenderedMessage());
1:c50dc6f:                     gotError.set(true);
1:c50dc6f:                 }
1:c50dc6f:             }
1:c50dc6f:         };
1:c50dc6f:     }
1:c50dc6f: 
1:c50dc6f:     @After
1:c50dc6f:     public void tearDown() throws Exception {
1:c50dc6f:         org.apache.log4j.Logger.getLogger(RegionBroker.class).removeAppender(appender);
1:c50dc6f:         org.apache.log4j.Logger.getLogger(JDBCPersistenceAdapter.class).removeAppender(appender);
1:c50dc6f: 
1:c50dc6f:         broker.stop();
1:c50dc6f:     }
1:c50dc6f: 
1:c50dc6f:     protected BrokerService createBroker() throws Exception {
1:c50dc6f:         broker = new BrokerService();
1:c50dc6f:         broker.setUseJmx(true);
1:c50dc6f:         broker.setAdvisorySupport(false);
1:c50dc6f:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:c50dc6f:         jdbcPersistenceAdapter.setUseLock(false);
1:c50dc6f:         broker.setPersistenceAdapter(jdbcPersistenceAdapter);
1:c50dc6f:         broker.setDeleteAllMessagesOnStartup(true);
1:c50dc6f:         broker.addConnector("tcp://0.0.0.0:0");
1:c50dc6f:         return broker;
1:c50dc6f:     }
1:c50dc6f: 
1:c50dc6f: 
1:c50dc6f:     @Test
1:c50dc6f:     public void testConcurrentDlqOk() throws Exception {
1:c50dc6f: 
1:c50dc6f:         final Destination dest = new ActiveMQQueue("DD");
1:c50dc6f: 
1:c50dc6f:         final ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:c50dc6f:         amq.setWatchTopicAdvisories(false);
1:c50dc6f: 
1:c50dc6f:         broker.setIoExceptionHandler(new DefaultIOExceptionHandler() {
1:c50dc6f:             @Override
1:c50dc6f:             public void handle(IOException exception) {
1:c50dc6f:                 LOG.error("handle IOException from store", exception);
1:c50dc6f:                 gotError.set(true);
1:c50dc6f:             }
1:c50dc6f:         });
1:c50dc6f:         org.apache.log4j.Logger.getLogger(RegionBroker.class).addAppender(appender);
1:c50dc6f:         org.apache.log4j.Logger.getLogger(JDBCPersistenceAdapter.class).addAppender(appender);
1:c50dc6f: 
1:c50dc6f:         final int numMessages = 100;
1:c50dc6f:         final AtomicInteger consumed = new AtomicInteger(numMessages);
1:c50dc6f:         produceMessages(amq, dest, numMessages);
1:c50dc6f:         ExecutorService executorService = Executors.newCachedThreadPool();
1:c50dc6f: 
1:c50dc6f:         for (int i = 0; i < 50; i++) {
1:c50dc6f:             executorService.execute(new Runnable() {
1:c50dc6f:                 @Override
1:c50dc6f:                 public void run() {
1:c50dc6f:                     Connection connection = null;
1:c50dc6f:                     Session session = null;
1:c50dc6f:                     MessageConsumer consumer = null;
1:c50dc6f: 
1:c50dc6f:                     try {
1:c50dc6f:                         connection = amq.createConnection();
1:c50dc6f:                         connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:c50dc6f:                             public void onException(javax.jms.JMSException e) {
1:c50dc6f:                                 e.printStackTrace();
1:c50dc6f:                             }
1:c50dc6f:                         });
1:c50dc6f: 
1:c50dc6f:                         //set custom redelivery policy with 0 retries to force move to DLQ
1:c50dc6f:                         RedeliveryPolicy queuePolicy = new RedeliveryPolicy();
1:c50dc6f:                         queuePolicy.setMaximumRedeliveries(0);
1:c50dc6f:                         ((ActiveMQConnection) connection).setRedeliveryPolicy(queuePolicy);
1:c50dc6f:                         connection.start();
1:c50dc6f: 
1:c50dc6f:                         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c50dc6f: 
1:c50dc6f:                         consumer = session.createConsumer(dest);
1:c50dc6f: 
1:c50dc6f:                         while (consumed.get() > 0 && !gotError.get()) {
1:c50dc6f:                             Message message = consumer.receive(4000);
1:c50dc6f:                             if (message != null) {
1:c50dc6f:                                 consumed.decrementAndGet();
1:c50dc6f:                                 session.rollback();
1:c50dc6f:                             }
1:c50dc6f:                         }
1:c50dc6f:                     } catch (Exception e) {
1:c50dc6f:                         LOG.error("Error on consumption", e);
1:c50dc6f:                         gotError.set(true);
1:c50dc6f:                     } finally {
1:c50dc6f:                         try {
1:c50dc6f:                             if (connection != null) {
1:c50dc6f:                                 connection.close();
1:c50dc6f:                             }
1:c50dc6f:                         } catch (Exception ignored) {}
1:c50dc6f:                     }
1:c50dc6f: 
1:c50dc6f:                 }
1:c50dc6f:             });
1:c50dc6f:         }
1:c50dc6f: 
1:c50dc6f:         executorService.shutdown();
1:c50dc6f:         boolean allComplete = executorService.awaitTermination(60, TimeUnit.SECONDS);
1:c50dc6f:         executorService.shutdownNow();
1:c50dc6f:         LOG.info("Total messages: " + broker.getAdminView().getTotalMessageCount());
1:c50dc6f:         LOG.info("Total enqueues: " + broker.getAdminView().getTotalEnqueueCount());
1:c50dc6f:         LOG.info("Total deueues: " + broker.getAdminView().getTotalDequeueCount());
1:c50dc6f: 
1:c50dc6f:         assertTrue(allComplete);
1:c50dc6f:         assertEquals("all consumed", 0l, consumed.get());
1:c50dc6f:         assertEquals("all messages get to the dlq", numMessages * 2, broker.getAdminView().getTotalEnqueueCount());
1:c50dc6f:         assertEquals("all messages acked", numMessages, broker.getAdminView().getTotalDequeueCount());
1:c50dc6f:         assertFalse("no error", gotError.get());
1:c50dc6f: 
1:c50dc6f:     }
1:c50dc6f: 
1:c50dc6f:     private void produceMessages(ActiveMQConnectionFactory amq, Destination dest, int numMessages) throws JMSException {
1:c50dc6f:         Connection connection = amq.createConnection();
1:c50dc6f: 
1:c50dc6f:         connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:c50dc6f:             public void onException(javax.jms.JMSException e) {
1:c50dc6f:                 e.printStackTrace();
1:c50dc6f:             }
1:c50dc6f:         });
1:c50dc6f:         connection.start();
1:c50dc6f: 
1:c50dc6f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c50dc6f:         MessageProducer producer = session.createProducer(dest);
1:c50dc6f:         long counter = 0;
1:c50dc6f:         TextMessage message = session.createTextMessage();
1:c50dc6f: 
1:c50dc6f:         for (int i = 0; i < numMessages; i++) {
1:c50dc6f:             producer.send(message);
1:c50dc6f:             counter++;
1:c50dc6f: 
1:c50dc6f:             if ((counter % 50) == 0) {
1:c50dc6f:                 LOG.info("sent " + counter + " messages");
1:c50dc6f:             }
1:c50dc6f:         }
1:c50dc6f: 
1:c50dc6f:         if (connection != null) {
1:c50dc6f:             connection.close();
1:c50dc6f:         }
1:c50dc6f:     }
1:c50dc6f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c50dc6f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: import java.io.IOException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: public class JDBCConcurrentDLQTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCConcurrentDLQTest.class);
1: 
1:     BrokerService broker;
1:     JDBCPersistenceAdapter jdbcPersistenceAdapter;
1:     Appender appender = null;
1:     final AtomicBoolean gotError = new AtomicBoolean(false);
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         gotError.set(false);
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(org.apache.log4j.spi.LoggingEvent event) {
1:                 if (event.getLevel().toInt() > Level.INFO_INT) {
1:                     LOG.error("Got error from log:" + event.getRenderedMessage());
1:                     gotError.set(true);
1:                 }
1:             }
1:         };
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         org.apache.log4j.Logger.getLogger(RegionBroker.class).removeAppender(appender);
1:         org.apache.log4j.Logger.getLogger(JDBCPersistenceAdapter.class).removeAppender(appender);
1: 
1:         broker.stop();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:         jdbcPersistenceAdapter.setUseLock(false);
1:         broker.setPersistenceAdapter(jdbcPersistenceAdapter);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         return broker;
1:     }
1: 
1: 
1:     @Test
1:     public void testConcurrentDlqOk() throws Exception {
1: 
1:         final Destination dest = new ActiveMQQueue("DD");
1: 
1:         final ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         amq.setWatchTopicAdvisories(false);
1: 
1:         broker.setIoExceptionHandler(new DefaultIOExceptionHandler() {
1:             @Override
1:             public void handle(IOException exception) {
1:                 LOG.error("handle IOException from store", exception);
1:                 gotError.set(true);
1:             }
1:         });
1:         org.apache.log4j.Logger.getLogger(RegionBroker.class).addAppender(appender);
1:         org.apache.log4j.Logger.getLogger(JDBCPersistenceAdapter.class).addAppender(appender);
1: 
1:         final int numMessages = 100;
1:         final AtomicInteger consumed = new AtomicInteger(numMessages);
1:         produceMessages(amq, dest, numMessages);
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1: 
1:         for (int i = 0; i < 50; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     Connection connection = null;
1:                     Session session = null;
1:                     MessageConsumer consumer = null;
1: 
1:                     try {
1:                         connection = amq.createConnection();
1:                         connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:                             public void onException(javax.jms.JMSException e) {
1:                                 e.printStackTrace();
1:                             }
1:                         });
1: 
1:                         //set custom redelivery policy with 0 retries to force move to DLQ
1:                         RedeliveryPolicy queuePolicy = new RedeliveryPolicy();
1:                         queuePolicy.setMaximumRedeliveries(0);
1:                         ((ActiveMQConnection) connection).setRedeliveryPolicy(queuePolicy);
1:                         connection.start();
1: 
1:                         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:                         consumer = session.createConsumer(dest);
1: 
1:                         while (consumed.get() > 0 && !gotError.get()) {
1:                             Message message = consumer.receive(4000);
1:                             if (message != null) {
1:                                 consumed.decrementAndGet();
1:                                 session.rollback();
1:                             }
1:                         }
1:                     } catch (Exception e) {
1:                         LOG.error("Error on consumption", e);
1:                         gotError.set(true);
1:                     } finally {
1:                         try {
1:                             if (connection != null) {
1:                                 connection.close();
1:                             }
1:                         } catch (Exception ignored) {}
1:                     }
1: 
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         boolean allComplete = executorService.awaitTermination(60, TimeUnit.SECONDS);
1:         executorService.shutdownNow();
1:         LOG.info("Total messages: " + broker.getAdminView().getTotalMessageCount());
1:         LOG.info("Total enqueues: " + broker.getAdminView().getTotalEnqueueCount());
1:         LOG.info("Total deueues: " + broker.getAdminView().getTotalDequeueCount());
1: 
1:         assertTrue(allComplete);
1:         assertEquals("all consumed", 0l, consumed.get());
1:         assertEquals("all messages get to the dlq", numMessages * 2, broker.getAdminView().getTotalEnqueueCount());
1:         assertEquals("all messages acked", numMessages, broker.getAdminView().getTotalDequeueCount());
1:         assertFalse("no error", gotError.get());
1: 
1:     }
1: 
1:     private void produceMessages(ActiveMQConnectionFactory amq, Destination dest, int numMessages) throws JMSException {
1:         Connection connection = amq.createConnection();
1: 
1:         connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:             public void onException(javax.jms.JMSException e) {
1:                 e.printStackTrace();
1:             }
1:         });
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(dest);
1:         long counter = 0;
1:         TextMessage message = session.createTextMessage();
1: 
1:         for (int i = 0; i < numMessages; i++) {
1:             producer.send(message);
1:             counter++;
1: 
1:             if ((counter % 50) == 0) {
1:                 LOG.info("sent " + counter + " messages");
1:             }
1:         }
1: 
1:         if (connection != null) {
1:             connection.close();
1:         }
1:     }
1: }
============================================================================