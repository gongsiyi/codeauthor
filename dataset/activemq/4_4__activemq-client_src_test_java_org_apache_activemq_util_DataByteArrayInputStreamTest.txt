1:c2f7128: /**
1:c2f7128:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c2f7128:  * contributor license agreements.  See the NOTICE file distributed with
1:c2f7128:  * this work for additional information regarding copyright ownership.
1:c2f7128:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c2f7128:  * (the "License"); you may not use this file except in compliance with
1:c2f7128:  * the License.  You may obtain a copy of the License at
1:c2f7128:  *
1:c2f7128:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c2f7128:  *
1:c2f7128:  * Unless required by applicable law or agreed to in writing, software
1:c2f7128:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2f7128:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2f7128:  * See the License for the specific language governing permissions and
1:c2f7128:  * limitations under the License.
1:c2f7128:  */
1:c2f7128: package org.apache.activemq.util;
2:0701d7d: 
1:18300c6: import static org.junit.Assert.assertEquals;
1:0701d7d: 
1:18300c6: import org.junit.Test;
1:18300c6: 
1:18300c6: public class DataByteArrayInputStreamTest {
1:0701d7d: 
1:c2f7128:     /**
1:c2f7128:      * https://issues.apache.org/activemq/browse/AMQ-1911
1:c2f7128:      */
1:18300c6:     @Test
1:c2f7128:     public void testNonAscii() throws Exception {
1:3602973:         doMarshallUnMarshallValidation("mei\u00DFen");
1:18300c6: 
1:0701d7d:         String accumulator = new String();
1:18300c6: 
1:c2f7128:         int test = 0; // int to get Supplementary chars
1:c2f7128:         while(Character.isDefined(test)) {
1:0701d7d:             String toTest = String.valueOf((char)test);
1:0701d7d:             accumulator += toTest;
1:0701d7d:             doMarshallUnMarshallValidation(toTest);
1:c2f7128:             test++;
1:c2f7128:         }
1:18300c6: 
1:c2f7128:         int massiveThreeByteCharValue = 0x0FFF;
1:0701d7d:         String toTest = String.valueOf((char)massiveThreeByteCharValue);
1:0701d7d:         accumulator += toTest;
1:c2f7128:         doMarshallUnMarshallValidation(String.valueOf((char)massiveThreeByteCharValue));
1:18300c6: 
1:0701d7d:         // Altogether
1:0701d7d:         doMarshallUnMarshallValidation(accumulator);
1:18300c6: 
1:0701d7d:         // the three byte values
1:0701d7d:         char t = '\u0800';
1:0701d7d:         final char max =  '\uffff';
1:0701d7d:         accumulator = String.valueOf(t);
1:0701d7d:         while (t < max) {
1:0701d7d:             String val = String.valueOf(t);
1:0701d7d:             accumulator += val;
1:0701d7d:             doMarshallUnMarshallValidation(val);
1:0701d7d:             t++;
1:0701d7d:         }
1:18300c6: 
1:0701d7d:         // Altogether so long as it is not too big
1:0701d7d:         while (accumulator.length() > 20000) {
1:0701d7d:             accumulator = accumulator.substring(20000);
1:0701d7d:         }
1:0701d7d:         doMarshallUnMarshallValidation(accumulator);
1:c2f7128:     }
1:18300c6: 
1:3602973:     void doMarshallUnMarshallValidation(String value) throws Exception {
1:c2f7128:         DataByteArrayOutputStream out = new DataByteArrayOutputStream();
1:c2f7128:         out.writeBoolean(true);
1:c2f7128:         out.writeUTF(value);
1:c2f7128:         out.close();
1:18300c6: 
1:c2f7128:         DataByteArrayInputStream in = new DataByteArrayInputStream(out.getData());
1:c2f7128:         in.readBoolean();
1:c2f7128:         String readBack = in.readUTF();
1:c2f7128:         assertEquals(value, readBack);
1:c2f7128:     }
1:3cd5529: 
1:3cd5529:     @Test
1:3cd5529:     public void testReadLong() throws Exception {
1:3cd5529:         DataByteArrayOutputStream out = new DataByteArrayOutputStream(8);
1:3cd5529:         out.writeLong(Long.MAX_VALUE);
1:3cd5529:         out.close();
1:3cd5529: 
1:3cd5529:         DataByteArrayInputStream in = new DataByteArrayInputStream(out.getData());
1:3cd5529:         long readBack = in.readLong();
1:3cd5529:         assertEquals(Long.MAX_VALUE, readBack);
1:3cd5529:     }
1:c2f7128: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3cd5529
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testReadLong() throws Exception {
1:         DataByteArrayOutputStream out = new DataByteArrayOutputStream(8);
1:         out.writeLong(Long.MAX_VALUE);
1:         out.close();
1: 
1:         DataByteArrayInputStream in = new DataByteArrayInputStream(out.getData());
1:         long readBack = in.readLong();
1:         assertEquals(Long.MAX_VALUE, readBack);
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import org.junit.Test;
1: 
1: public class DataByteArrayInputStreamTest {
1:     @Test
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3602973
/////////////////////////////////////////////////////////////////////////
1:         doMarshallUnMarshallValidation("mei\u00DFen");
/////////////////////////////////////////////////////////////////////////
1:     void doMarshallUnMarshallValidation(String value) throws Exception {
commit:9a8f6e4
author:Gary Tully
-------------------------------------------------------------------------------
commit:0701d7d
/////////////////////////////////////////////////////////////////////////
1:         String accumulator = new String();
1:         
1:             String toTest = String.valueOf((char)test);
1:             accumulator += toTest;
1:             doMarshallUnMarshallValidation(toTest);
1:         String toTest = String.valueOf((char)massiveThreeByteCharValue);
1:         accumulator += toTest;
1:         
1:         // Altogether
1:         doMarshallUnMarshallValidation(accumulator);
1:         
1:         // the three byte values
1:         char t = '\u0800';
1:         final char max =  '\uffff';
1:         accumulator = String.valueOf(t);
1:         while (t < max) {
1:             String val = String.valueOf(t);
1:             accumulator += val;
1:             doMarshallUnMarshallValidation(val);
1:             t++;
1:         }
1:         
1:         // Altogether so long as it is not too big
1:         while (accumulator.length() > 20000) {
1:             accumulator = accumulator.substring(20000);
1:         }
1:         doMarshallUnMarshallValidation(accumulator);
commit:c2f7128
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
0: 
0: import junit.framework.TestCase;
0: 
0: public class DataByteArrayInputStreamTest extends TestCase {
0: 
1:     /**
1:      * https://issues.apache.org/activemq/browse/AMQ-1911
1:      */
1:     public void testNonAscii() throws Exception {
0:         doMarshallUnMarshallValidation("mei√üen");
0:         
1:         int test = 0; // int to get Supplementary chars
1:         while(Character.isDefined(test)) {
0:             doMarshallUnMarshallValidation(String.valueOf((char)test));
1:             test++;
1:         }
0:         
1:         int massiveThreeByteCharValue = 0x0FFF;
1:         doMarshallUnMarshallValidation(String.valueOf((char)massiveThreeByteCharValue));
1:     }
0:     
0:     void doMarshallUnMarshallValidation(String value) throws Exception {        
1:         DataByteArrayOutputStream out = new DataByteArrayOutputStream();
1:         out.writeBoolean(true);
1:         out.writeUTF(value);
1:         out.close();
0:         
1:         DataByteArrayInputStream in = new DataByteArrayInputStream(out.getData());
1:         in.readBoolean();
1:         String readBack = in.readUTF();
1:         assertEquals(value, readBack);
1:     }
1: }
============================================================================