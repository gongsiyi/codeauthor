1:3222767: /**
1:3222767:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3222767:  * contributor license agreements.  See the NOTICE file distributed with
1:3222767:  * this work for additional information regarding copyright ownership.
1:3222767:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3222767:  * (the "License"); you may not use this file except in compliance with
1:3222767:  * the License.  You may obtain a copy of the License at
1:3222767:  *
1:3222767:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3222767:  *
1:3222767:  * Unless required by applicable law or agreed to in writing, software
1:3222767:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3222767:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3222767:  * See the License for the specific language governing permissions and
1:3222767:  * limitations under the License.
1:3222767:  */
1:3222767: 
1:3222767: package org.apache.activemq.bugs;
1:3222767: 
1:3222767: import javax.jms.Connection;
1:3222767: import javax.jms.DeliveryMode;
1:3222767: import javax.jms.MessageProducer;
1:3222767: import javax.jms.Session;
1:3222767: import java.util.concurrent.atomic.AtomicBoolean;
3:7fdfdeb: 
1:3222767: import org.apache.activemq.ActiveMQConnectionFactory;
1:3222767: import org.apache.activemq.broker.BrokerService;
1:3222767: import org.apache.activemq.broker.util.LoggingBrokerPlugin;
1:3222767: import org.apache.activemq.util.DefaultTestAppender;
1:3222767: import org.apache.log4j.Appender;
1:3222767: import org.apache.log4j.Logger;
1:3222767: import org.apache.log4j.spi.LoggingEvent;
1:7fdfdeb: import org.junit.After;
1:7fdfdeb: import org.junit.Before;
1:7fdfdeb: import org.junit.Test;
1:3222767: 
1:9249315: import static org.junit.Assert.assertFalse;
1:f2837ba: import static org.junit.Assert.assertTrue;
1:3222767: 
1:7fdfdeb: public class AMQ3779Test {
1:f2837ba: 
1:7fdfdeb:     private static final Logger LOG = Logger.getLogger(AMQ3779Test.class);
1:3222767:     private static final String qName = "QNameToFind";
1:3222767: 
1:7fdfdeb:     private BrokerService brokerService;
1:7fdfdeb:     private Appender appender;
1:7fdfdeb:     private final AtomicBoolean ok = new AtomicBoolean(false);
1:9249315:     private final AtomicBoolean gotZeroSize = new AtomicBoolean(false);
1:9249315:     
1:7fdfdeb:     @Before
1:7fdfdeb:     public void setUp() throws Exception {
1:7fdfdeb:         ok.set(false);
1:3222767: 
1:7fdfdeb:         appender = new DefaultTestAppender() {
1:3222767:             @Override
1:3222767:             public void doAppend(LoggingEvent event) {
1:3222767:                 if (event.getLoggerName().toString().contains(qName)) {
1:3222767:                     ok.set(true);
1:3222767:                 }
1:9249315: 
1:9249315:                 if (event.getMessage().toString().contains("Sending") && event.getMessage().toString().contains("size = 0")) {
1:9249315:                     gotZeroSize.set(true);
1:9249315:                 }
1:3222767:             }
1:3222767:         };
1:3222767: 
1:7fdfdeb:         Logger.getRootLogger().addAppender(appender);
1:3222767: 
1:3222767:         try {
1:7fdfdeb:             brokerService = new BrokerService();
1:3222767:             LoggingBrokerPlugin loggingBrokerPlugin = new LoggingBrokerPlugin();
1:3222767:             loggingBrokerPlugin.setPerDestinationLogger(true);
1:3222767:             loggingBrokerPlugin.setLogAll(true);
1:7fdfdeb:             brokerService.setPlugins(new LoggingBrokerPlugin[]{loggingBrokerPlugin});
1:3222767: 
1:7fdfdeb:             brokerService.setPersistent(false);
1:7fdfdeb:             brokerService.setUseJmx(false);
1:7fdfdeb:             brokerService.start();
1:3222767:         } finally {
2:7fdfdeb:             LOG.removeAppender(appender);
1:3222767:         }
1:7fdfdeb:     }
1:3222767: 
1:7fdfdeb:     @After
1:7fdfdeb:     public void tearDown() throws Exception {
1:7fdfdeb:         try {
1:7fdfdeb:             if (brokerService != null) {
1:7fdfdeb:                 brokerService.stop();
1:7fdfdeb:                 brokerService.waitUntilStopped();
1:7fdfdeb:             }
1:7fdfdeb:         } finally {
1:f2837ba:            Logger.getRootLogger().removeAppender(appender);
1:7fdfdeb:         }
1:f2837ba: 
1:7fdfdeb:     }
1:7fdfdeb: 
1:7fdfdeb:     @Test(timeout = 60000)
1:3222767:     public void testLogPerDest() throws Exception {
1:7fdfdeb:         Connection connection = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI()).createConnection();
1:3222767:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3222767:         MessageProducer messageProducer = session.createProducer(session.createQueue(qName));
1:3222767:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:3222767:         connection.start();
1:3222767: 
1:3222767:         messageProducer.send(session.createTextMessage("Hi"));
1:3222767:         connection.close();
1:3222767: 
1:3222767:         assertTrue("got expected log message", ok.get());
1:9249315: 
1:9249315:         assertFalse("did not get zero size in send message", gotZeroSize.get());
1:3222767:     }
1:3222767: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:9249315
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean gotZeroSize = new AtomicBoolean(false);
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1:                 if (event.getMessage().toString().contains("Sending") && event.getMessage().toString().contains("size = 0")) {
1:                     gotZeroSize.set(true);
1:                 }
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertFalse("did not get zero size in send message", gotZeroSize.get());
commit:3222767
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.AutoFailTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.util.LoggingBrokerPlugin;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
0: public class AMQ3779Test extends AutoFailTestSupport {
1: 
0:     private static final Logger logger = Logger.getLogger(AMQ3779Test.class);
1:     private static final String qName = "QNameToFind";
1: 
1:     public void testLogPerDest() throws Exception {
1: 
0:         final AtomicBoolean ok = new AtomicBoolean(false);
0:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLoggerName().toString().contains(qName)) {
1:                     ok.set(true);
1:                 }
1:             }
1:         };
0:         logger.getRootLogger().addAppender(appender);
1: 
1:         try {
1: 
0:             BrokerService broker = new BrokerService();
1:             LoggingBrokerPlugin loggingBrokerPlugin = new LoggingBrokerPlugin();
1:             loggingBrokerPlugin.setPerDestinationLogger(true);
1:             loggingBrokerPlugin.setLogAll(true);
0:             broker.setPlugins(new LoggingBrokerPlugin[]{loggingBrokerPlugin});
0:             broker.start();
1: 
1: 
0:             Connection connection = new ActiveMQConnectionFactory(broker.getVmConnectorURI()).createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer messageProducer = session.createProducer(session.createQueue(qName));
1:             messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             connection.start();
1: 
1:             messageProducer.send(session.createTextMessage("Hi"));
1:             connection.close();
1: 
1:             assertTrue("got expected log message", ok.get());
1:         } finally {
0:             logger.removeAppender(appender);
1:         }
1:     }
1: }
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:f2837ba
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1:            Logger.getRootLogger().removeAppender(appender);
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7fdfdeb
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class AMQ3779Test {
1:     private static final Logger LOG = Logger.getLogger(AMQ3779Test.class);
1:     private BrokerService brokerService;
1:     private Appender appender;
1:     private final AtomicBoolean ok = new AtomicBoolean(false);
1:     @Before
1:     public void setUp() throws Exception {
1:         ok.set(false);
1: 
1:         appender = new DefaultTestAppender() {
/////////////////////////////////////////////////////////////////////////
0: 
1:         Logger.getRootLogger().addAppender(appender);
1:             brokerService = new BrokerService();
1:             brokerService.setPlugins(new LoggingBrokerPlugin[]{loggingBrokerPlugin});
1:             brokerService.setPersistent(false);
1:             brokerService.setUseJmx(false);
1:             brokerService.start();
1:             LOG.removeAppender(appender);
0: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             if (brokerService != null) {
1:                 brokerService.stop();
1:                 brokerService.waitUntilStopped();
1:             }
1:         } finally {
1:             LOG.removeAppender(appender);
1:         }
1:     }
0: 
1:     @Test(timeout = 60000)
0:     public void testLogPerDest() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI()).createConnection();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer messageProducer = session.createProducer(session.createQueue(qName));
0:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
0:         connection.start();
0: 
0:         messageProducer.send(session.createTextMessage("Hi"));
0:         connection.close();
0: 
0:         assertTrue("got expected log message", ok.get());
1:     }
============================================================================