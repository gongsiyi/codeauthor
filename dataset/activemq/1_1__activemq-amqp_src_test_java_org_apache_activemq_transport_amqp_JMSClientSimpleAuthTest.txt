2:ebe54c4: /**
1:ebe54c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ebe54c4:  * contributor license agreements.  See the NOTICE file distributed with
1:ebe54c4:  * this work for additional information regarding copyright ownership.
1:ebe54c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ebe54c4:  * (the "License"); you may not use this file except in compliance with
1:ebe54c4:  * the License.  You may obtain a copy of the License at
1:ebe54c4:  *
1:ebe54c4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ebe54c4:  *
1:ebe54c4:  * Unless required by applicable law or agreed to in writing, software
1:ebe54c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ebe54c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ebe54c4:  * See the License for the specific language governing permissions and
1:ebe54c4:  * limitations under the License.
2:ebe54c4:  */
1:36bd069: package org.apache.activemq.transport.amqp;
1:36bd069: 
1:edc1599: import static org.junit.Assert.assertEquals;
1:edc1599: import static org.junit.Assert.assertNotNull;
1:edc1599: import static org.junit.Assert.assertTrue;
1:edc1599: import static org.junit.Assert.fail;
1:36bd069: 
1:edc1599: import java.net.URI;
1:edc1599: 
1:edc1599: import javax.jms.Connection;
1:edc1599: import javax.jms.JMSException;
1:bb83bf5: import javax.jms.JMSSecurityException;
1:edc1599: import javax.jms.Message;
1:edc1599: import javax.jms.MessageConsumer;
1:edc1599: import javax.jms.MessageProducer;
1:36bd069: import javax.jms.Queue;
1:edc1599: import javax.jms.Session;
1:edc1599: import javax.jms.TextMessage;
1:edc1599: 
1:ebe54c4: import org.apache.activemq.broker.BrokerFactory;
1:ebe54c4: import org.apache.activemq.broker.BrokerService;
1:ebe54c4: import org.junit.After;
1:ebe54c4: import org.junit.Before;
1:e333fd9: import org.junit.Rule;
1:ebe54c4: import org.junit.Test;
1:e333fd9: import org.junit.rules.TestName;
1:ebe54c4: import org.slf4j.Logger;
1:ebe54c4: import org.slf4j.LoggerFactory;
1:80322ce: 
1:240278d: public class JMSClientSimpleAuthTest {
1:80322ce: 
1:e333fd9:     @Rule public TestName name = new TestName();
1:e333fd9: 
1:240278d:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientSimpleAuthTest.class);
1:edc1599: 
1:80322ce:     private final String SIMPLE_AUTH_AMQP_BROKER_XML =
1:80322ce:         "org/apache/activemq/transport/amqp/simple-auth-amqp-broker.xml";
1:80322ce:     private BrokerService brokerService;
1:e333fd9:     private Connection connection;
1:240278d:     private URI amqpURI;
13:ebe54c4: 
1:ebe54c4:     @Before
1:ebe54c4:     public void setUp() throws Exception {
1:e333fd9:         LOG.info("========== starting: " + getTestName() + " ==========");
1:ebe54c4:         startBroker();
6:ebe54c4:     }
1:ebe54c4: 
1:ebe54c4:     @After
1:ebe54c4:     public void stopBroker() throws Exception {
1:e333fd9:         if (connection != null) {
1:e333fd9:             try {
1:e333fd9:                 connection.close();
1:e333fd9:             } catch (Exception ex) {}
1:e333fd9:             connection = null;
1:e333fd9:         }
1:e333fd9: 
1:ebe54c4:         if (brokerService != null) {
1:ebe54c4:             brokerService.stop();
1:ebe54c4:             brokerService = null;
1:ebe54c4:         }
1:e333fd9: 
1:e333fd9:         LOG.info("========== finished: " + getTestName() + " ==========");
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     public String getTestName() {
1:e333fd9:         return name.getMethodName();
1:ebe54c4:     }
1:ebe54c4: 
1:ebe54c4:     @Test(timeout = 10000)
1:ebe54c4:     public void testNoUserOrPassword() throws Exception {
1:ebe54c4:         try {
1:e333fd9:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "", "");
1:ebe54c4:             connection.start();
1:ebe54c4:             fail("Expected JMSException");
1:bb83bf5:         } catch (JMSSecurityException ex) {
1:67ccfca:             LOG.debug("Failed to authenticate connection with no user / password.");
1:ebe54c4:         }
1:ebe54c4:     }
1:36bd069: 
1:ebe54c4:     @Test(timeout = 10000)
1:ebe54c4:     public void testUnknownUser() throws Exception {
1:ebe54c4:         try {
1:e333fd9:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "nosuchuser", "blah");
1:ebe54c4:             connection.start();
1:ebe54c4:             fail("Expected JMSException");
1:bb83bf5:         } catch (JMSSecurityException ex) {
1:e333fd9:             LOG.debug("Failed to authenticate connection with unknown user ID");
1:ebe54c4:         }
1:ebe54c4:     }
1:36bd069: 
1:ebe54c4:     @Test(timeout = 10000)
1:ebe54c4:     public void testKnownUserWrongPassword() throws Exception {
1:ebe54c4:         try {
1:e333fd9:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "wrongPassword");
1:ebe54c4:             connection.start();
1:ebe54c4:             fail("Expected JMSException");
1:bb83bf5:         } catch (JMSSecurityException ex) {
1:e333fd9:             LOG.debug("Failed to authenticate connection with incorrect password.");
1:ebe54c4:         }
1:ebe54c4:     }
1:36bd069: 
1:2ec586f:     @Test(timeout = 30000)
1:67ccfca:     public void testRepeatedWrongPasswordAttempts() throws Exception {
1:67ccfca:         for (int i = 0; i < 25; ++i) {
1:67ccfca:             Connection connection = null;
1:67ccfca:             try {
1:67ccfca:                 connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "wrongPassword");
1:67ccfca:                 connection.start();
1:67ccfca:                 fail("Expected JMSException");
1:67ccfca:             } catch (JMSSecurityException ex) {
1:e333fd9:                 LOG.debug("Failed to authenticate connection with incorrect password.");
1:67ccfca:             } finally {
1:67ccfca:                 if (connection != null) {
1:67ccfca:                     connection.close();
1:67ccfca:                 }
1:67ccfca:             }
1:67ccfca:         }
1:67ccfca:     }
1:67ccfca: 
1:67ccfca:     @Test(timeout = 30000)
1:ebe54c4:     public void testSendReceive() throws Exception {
1:e333fd9:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
4:ebe54c4:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2ec586f:         Queue queue = session.createQueue("USERS.txQueue");
1:ebe54c4:         MessageProducer p = session.createProducer(queue);
1:ebe54c4:         TextMessage message = null;
1:ebe54c4:         message = session.createTextMessage();
1:ebe54c4:         String messageText = "hello  sent at " + new java.util.Date().toString();
1:ebe54c4:         message.setText(messageText);
1:ebe54c4:         p.send(message);
1:2ec586f: 
1:ebe54c4:         // Get the message we just sent
1:ebe54c4:         MessageConsumer consumer = session.createConsumer(queue);
1:ebe54c4:         connection.start();
1:ebe54c4:         Message msg = consumer.receive(5000);
1:ebe54c4:         assertNotNull(msg);
1:ebe54c4:         assertTrue(msg instanceof TextMessage);
1:ebe54c4:         TextMessage textMessage = (TextMessage) msg;
1:ebe54c4:         assertEquals(messageText, textMessage.getText());
1:ebe54c4:         connection.close();
1:67ccfca:     }
1:ebe54c4: 
1:ebe54c4:     @Test(timeout = 30000)
1:490436c:     public void testProducerNotAuthorized() throws Exception {
1:490436c:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "guest", "guestPassword");
1:490436c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:490436c:         Queue queue = session.createQueue("USERS.txQueue");
1:490436c:         try {
1:490436c:             session.createProducer(queue);
1:490436c:             fail("Should not be able to produce here.");
1:490436c:         } catch (JMSSecurityException jmsSE) {
1:490436c:             LOG.info("Caught expected exception");
1:490436c:         }
1:490436c:     }
1:490436c: 
1:490436c:     @Test(timeout = 30000)
1:490436c:     public void testAnonymousProducerNotAuthorized() throws Exception {
1:490436c:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "guest", "guestPassword");
1:490436c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:490436c:         Queue queue = session.createQueue("USERS.txQueue");
1:490436c:         MessageProducer producer = session.createProducer(null);
1:490436c: 
1:490436c:         try {
1:490436c:             producer.send(queue, session.createTextMessage());
1:490436c:             fail("Should not be able to produce here.");
1:490436c:         } catch (JMSSecurityException jmsSE) {
1:490436c:             LOG.info("Caught expected exception");
1:490436c:         }
1:490436c:     }
1:490436c: 
1:490436c:     @Test(timeout = 30000)
1:2ec586f:     public void testCreateTemporaryQueueNotAuthorized() throws JMSException {
1:e333fd9:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
1:2ec586f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2ec586f: 
1:2ec586f:         try {
1:2ec586f:             session.createTemporaryQueue();
1:2ec586f:         } catch (JMSSecurityException jmsse) {
1:2ec586f:         } catch (JMSException jmse) {
1:2ec586f:             LOG.info("Client should have thrown a JMSSecurityException but only threw JMSException");
1:2ec586f:         }
1:2ec586f: 
1:2ec586f:         // Should not be fatal
1:2ec586f:         assertNotNull(connection.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:2ec586f:     }
1:2ec586f: 
1:2ec586f:     @Test(timeout = 30000)
1:2ec586f:     public void testCreateTemporaryTopicNotAuthorized() throws JMSException {
1:e333fd9:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
1:2ec586f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2ec586f: 
1:2ec586f:         try {
1:2ec586f:             session.createTemporaryTopic();
1:2ec586f:         } catch (JMSSecurityException jmsse) {
1:2ec586f:         } catch (JMSException jmse) {
1:2ec586f:             LOG.info("Client should have thrown a JMSSecurityException but only threw JMSException");
1:2ec586f:         }
1:2ec586f: 
1:2ec586f:         // Should not be fatal
1:2ec586f:         assertNotNull(connection.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:2ec586f:     }
1:2ec586f: 
1:ebe54c4:     protected BrokerService createBroker() throws Exception {
1:ebe54c4:         return createBroker(SIMPLE_AUTH_AMQP_BROKER_XML);
1:ebe54c4:     }
1:2ec586f: 
1:ebe54c4:     protected BrokerService createBroker(String uri) throws Exception {
1:e1bbde7:         LOG.debug(">>>>> Loading broker configuration from the classpath with URI: {}", uri);
1:ebe54c4:         return BrokerFactory.createBroker(new URI("xbean:" +  uri));
1:ebe54c4:     }
1:ebe54c4: 
1:ebe54c4:     public void startBroker() throws Exception {
1:ebe54c4:         brokerService = createBroker();
1:ebe54c4:         brokerService.start();
1:240278d:         amqpURI = brokerService.getTransportConnectorByName("amqp").getPublishableConnectURI();
1:ebe54c4:         brokerService.waitUntilStarted();
1:ebe54c4:     }
1:ebe54c4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:490436c
/////////////////////////////////////////////////////////////////////////
1:     public void testProducerNotAuthorized() throws Exception {
1:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "guest", "guestPassword");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("USERS.txQueue");
1:         try {
1:             session.createProducer(queue);
1:             fail("Should not be able to produce here.");
1:         } catch (JMSSecurityException jmsSE) {
1:             LOG.info("Caught expected exception");
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testAnonymousProducerNotAuthorized() throws Exception {
1:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "guest", "guestPassword");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("USERS.txQueue");
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         try {
1:             producer.send(queue, session.createTextMessage());
1:             fail("Should not be able to produce here.");
1:         } catch (JMSSecurityException jmsSE) {
1:             LOG.info("Caught expected exception");
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
commit:e333fd9
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1:     @Rule public TestName name = new TestName();
1: 
1:     private Connection connection;
1:         LOG.info("========== starting: " + getTestName() + " ==========");
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception ex) {}
1:             connection = null;
1:         }
1: 
1: 
1:         LOG.info("========== finished: " + getTestName() + " ==========");
1:     }
1: 
1:     public String getTestName() {
1:         return name.getMethodName();
1:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "", "");
/////////////////////////////////////////////////////////////////////////
1:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "nosuchuser", "blah");
1:             LOG.debug("Failed to authenticate connection with unknown user ID");
1:             connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "wrongPassword");
1:             LOG.debug("Failed to authenticate connection with incorrect password.");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Failed to authenticate connection with incorrect password.");
/////////////////////////////////////////////////////////////////////////
1:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
/////////////////////////////////////////////////////////////////////////
1:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
/////////////////////////////////////////////////////////////////////////
1:         connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
/////////////////////////////////////////////////////////////////////////
commit:3051882
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testRepeatedWrongPasswordAttempts() throws Exception {
1:         for (int i = 0; i < 25; ++i) {
1:             Connection connection = null;
1:             try {
1:                 connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "wrongPassword");
1:                 connection.start();
1:                 fail("Expected JMSException");
1:             } catch (JMSSecurityException ex) {
1:                 LOG.debug("Failed to authenticate connection with no user / password.");
0:             } catch (JMSException e) {
0:                 Exception linkedException = e.getLinkedException();
0:                 if (linkedException != null && linkedException instanceof ConnectionClosedException) {
0:                     ConnectionClosedException cce = (ConnectionClosedException) linkedException;
0:                     assertEquals("Error{condition=unauthorized-access,description=User name [user] or password is invalid.}", cce.getRemoteError().toString());
0:                 } else {
0:                     LOG.error("Unexpected Exception", e);
0:                     fail("Unexpected exception: " + e.getMessage());
1:                 }
1:             } finally {
1:                 if (connection != null) {
1:                     connection.close();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
/////////////////////////////////////////////////////////////////////////
commit:2ec586f
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue("USERS.txQueue");
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
1:     public void testCreateTemporaryQueueNotAuthorized() throws JMSException {
0:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         try {
1:             session.createTemporaryQueue();
1:         } catch (JMSSecurityException jmsse) {
1:         } catch (JMSException jmse) {
1:             LOG.info("Client should have thrown a JMSSecurityException but only threw JMSException");
1:         }
1: 
1:         // Should not be fatal
1:         assertNotNull(connection.createSession(false, Session.AUTO_ACKNOWLEDGE));
1: 
0:         session.close();
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testCreateTemporaryTopicNotAuthorized() throws JMSException {
0:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         try {
1:             session.createTemporaryTopic();
1:         } catch (JMSSecurityException jmsse) {
1:         } catch (JMSException jmse) {
1:             LOG.info("Client should have thrown a JMSSecurityException but only threw JMSException");
1:         }
1: 
1:         // Should not be fatal
1:         assertNotNull(connection.createSession(false, Session.AUTO_ACKNOWLEDGE));
1: 
0:         session.close();
1:     }
1: 
commit:bb83bf5
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSSecurityException;
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSSecurityException ex) {
0:             LOG.debug("Failed to authenticate connection with no user / password.");
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSSecurityException ex) {
0:             LOG.debug("Failed to authenticate connection with no user / password.");
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSSecurityException ex) {
0:             LOG.debug("Failed to authenticate connection with no user / password.");
commit:240278d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class JMSClientSimpleAuthTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientSimpleAuthTest.class);
1:     private URI amqpURI;
/////////////////////////////////////////////////////////////////////////
0:             Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "", "");
/////////////////////////////////////////////////////////////////////////
0:             Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "nosuchuser", "blah");
/////////////////////////////////////////////////////////////////////////
0:             Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "wrongPassword");
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "user", "userPassword");
/////////////////////////////////////////////////////////////////////////
1:         amqpURI = brokerService.getTransportConnectorByName("amqp").getPublishableConnectURI();
commit:36bd069
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.amqp;
1: 
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             factory.setQueuePrefix("queue://");
0:             factory.setTopicPrefix("topic://");
1: 
/////////////////////////////////////////////////////////////////////////
0:             factory.setQueuePrefix("queue://");
0:             factory.setTopicPrefix("topic://");
1: 
/////////////////////////////////////////////////////////////////////////
0:             factory.setQueuePrefix("queue://");
0:             factory.setTopicPrefix("topic://");
1: 
/////////////////////////////////////////////////////////////////////////
0:         factory.setQueuePrefix("queue://");
0:         factory.setTopicPrefix("topic://");
1: 
0:         Queue queue = session.createQueue("txQueue");
commit:94937e8
/////////////////////////////////////////////////////////////////////////
0:             Thread.sleep(500);
commit:80322ce
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(SimpleAMQPAuthTest.class);
1: 
1:     private final String SIMPLE_AUTH_AMQP_BROKER_XML =
1:         "org/apache/activemq/transport/amqp/simple-auth-amqp-broker.xml";
1:     private BrokerService brokerService;
0:     private int port;
/////////////////////////////////////////////////////////////////////////
0:         port = brokerService.getTransportConnectorByName("amqp").getPublishableConnectURI().getPort();
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(">>>>> Loading broker configuration from the classpath with URI: {}", uri);
commit:edc1599
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
0:             connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
0:             connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ebe54c4
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport.amqp;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.qpid.amqp_1_0.client.ConnectionClosedException;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import java.net.URI;
1: 
0: import static org.junit.Assert.*;
1: 
1: /**
0:  * @author Kevin Earls
1:  */
0: public class SimpleAMQPAuthTest {
0:     public static final String SIMPLE_AUTH_AMQP_BROKER_XML = "org/apache/activemq/transport/amqp/simple-auth-amqp-broker.xml";
0:     public BrokerService brokerService;
0:     protected static final Logger LOG = LoggerFactory.getLogger(SimpleAMQPAuthTest.class);
0:     protected int port = 5672;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testNoUserOrPassword() throws Exception {
1:         try {
0:             ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "", "");
0:             Connection connection = factory.createConnection();
0:             connection.setExceptionListener(new ExceptionListener() {
0:                 @Override
0:                 public void onException(JMSException exception) {
0:                     LOG.error("Unexpected exception ", exception);
0:                     exception.printStackTrace();
1:                 }
0:             });
1:             connection.start();
0:             Thread.sleep(1000);
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fail("Expected JMSException");
0:         } catch (JMSException e) {
0:             Exception linkedException = e.getLinkedException();
0:             if (linkedException != null && linkedException instanceof ConnectionClosedException) {
0:                 ConnectionClosedException cce = (ConnectionClosedException) linkedException;
0:                 assertEquals("Error{condition=unauthorized-access,description=User name [null] or password is invalid.}", cce.getRemoteError().toString());
0:             } else {
0:                 LOG.error("Unexpected Exception", e);
0:                 fail("Unexpected exception: " + e.getMessage());
1:             }
1:         }
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testUnknownUser() throws Exception {
1:         try {
0:             ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "admin", "password");
0:             Connection connection = factory.createConnection("nosuchuser", "blah");
1:             connection.start();
0:             Thread.sleep(500);
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fail("Expected JMSException");
0:         } catch (JMSException e)  {
0:             Exception linkedException = e.getLinkedException();
0:             if (linkedException != null && linkedException instanceof ConnectionClosedException) {
0:                 ConnectionClosedException cce = (ConnectionClosedException) linkedException;
0:                 assertEquals("Error{condition=unauthorized-access,description=User name [nosuchuser] or password is invalid.}", cce.getRemoteError().toString());
0:             } else {
0:                 LOG.error("Unexpected Exception", e);
0:                 fail("Unexpected exception: " + e.getMessage());
1:             }
1:         }
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testKnownUserWrongPassword() throws Exception {
1:         try {
0:             ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "admin", "password");
0:             Connection connection = factory.createConnection("user", "wrongPassword");
1:             connection.start();
0:             Thread.sleep(500);
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fail("Expected JMSException");
0:         } catch (JMSException e) {
0:             Exception linkedException = e.getLinkedException();
0:             if (linkedException != null && linkedException instanceof ConnectionClosedException) {
0:                 ConnectionClosedException cce = (ConnectionClosedException) linkedException;
0:                 assertEquals("Error{condition=unauthorized-access,description=User name [user] or password is invalid.}", cce.getRemoteError().toString());
0:             } else {
0:                 LOG.error("Unexpected Exception", e);
0:                 fail("Unexpected exception: " + e.getMessage());
1:             }
1:         }
1:     }
1: 
1: 
1:     @Test(timeout = 30000)
1:     public void testSendReceive() throws Exception {
0:         ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "admin", "password");
0:         Connection connection = factory.createConnection("user", "userPassword");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         QueueImpl queue = new QueueImpl("queue://txqueue");
1:         MessageProducer p = session.createProducer(queue);
1:         TextMessage message = null;
1:         message = session.createTextMessage();
1:         String messageText = "hello  sent at " + new java.util.Date().toString();
1:         message.setText(messageText);
1:         p.send(message);
1: 
1:         // Get the message we just sent
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         connection.start();
1:         Message msg = consumer.receive(5000);
1:         assertNotNull(msg);
1:         assertTrue(msg instanceof TextMessage);
1:         TextMessage textMessage = (TextMessage) msg;
1:         assertEquals(messageText, textMessage.getText());
1:         connection.close();
1:     }
1: 
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker(SIMPLE_AUTH_AMQP_BROKER_XML);
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
0:         LOG.debug(">>>>> Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" +  uri));
1:     }
1: 
1:     public void startBroker() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1: }
1: 
============================================================================