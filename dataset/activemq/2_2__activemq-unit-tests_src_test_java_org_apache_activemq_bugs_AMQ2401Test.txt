1:7f534db: /**
1:7f534db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f534db:  * contributor license agreements.  See the NOTICE file distributed with
1:7f534db:  * this work for additional information regarding copyright ownership.
1:7f534db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f534db:  * (the "License"); you may not use this file except in compliance with
1:7f534db:  * the License.  You may obtain a copy of the License at
1:8314d86:  *
1:7f534db:  *      http://www.apache.org/licenses/LICENSE-2.0
2:8314d86:  *
1:7f534db:  * Unless required by applicable law or agreed to in writing, software
1:7f534db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f534db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f534db:  * See the License for the specific language governing permissions and
1:7f534db:  * limitations under the License.
3:7f534db:  */
1:7f534db: package org.apache.activemq.bugs;
14:7f534db: 
1:7f534db: import java.io.File;
1:7f534db: import java.util.ArrayList;
1:7f534db: import java.util.concurrent.CountDownLatch;
1:7f534db: import java.util.concurrent.TimeUnit;
1:7f534db: import java.util.concurrent.TimeoutException;
1:7f534db: 
1:7f534db: import javax.jms.BytesMessage;
1:7f534db: import javax.jms.Connection;
1:7f534db: import javax.jms.JMSException;
1:7f534db: import javax.jms.Message;
1:7f534db: import javax.jms.MessageConsumer;
1:7f534db: import javax.jms.MessageListener;
1:7f534db: import javax.jms.MessageProducer;
1:7f534db: import javax.jms.Session;
1:7f534db: 
1:e724226: import junit.framework.TestCase;
1:e724226: 
1:7f534db: import org.apache.activemq.ActiveMQConnection;
1:7f534db: import org.apache.activemq.ActiveMQConnectionFactory;
1:7f534db: import org.apache.activemq.broker.BrokerService;
1:7f534db: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7f534db: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7f534db: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:8314d86: import org.slf4j.Logger;
1:8314d86: import org.slf4j.LoggerFactory;
1:7f534db: 
1:7f534db: /**
1:7f534db:  * An AMQ-2401 Test
1:7f534db:  */
1:e724226: public class AMQ2401Test extends TestCase implements MessageListener {
1:e724226:     private BrokerService broker;
1:7f534db:     private ActiveMQConnectionFactory factory;
1:7f534db:     private static final int SEND_COUNT = 500;
1:7f534db:     private static final int CONSUMER_COUNT = 50;
1:7f534db:     private static final int PRODUCER_COUNT = 1;
1:7f534db:     private static final int LOG_INTERVAL = 10;
1:7f534db: 
1:8314d86:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2401Test.class);
1:8314d86: 
1:e724226:     private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
1:e724226:     private int count = 0;
1:e724226:     private CountDownLatch latch;
1:7f534db: 
1:e724226:     @Override
1:7f534db:     protected void setUp() throws Exception {
1:7f534db:         broker = new BrokerService();
1:7f534db:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "AMQ2401Test");
1:7f534db:         broker.setDeleteAllMessagesOnStartup(true);
1:e724226:         String connectionUri = broker.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
1:7f534db:         PolicyMap policies = new PolicyMap();
1:7f534db:         PolicyEntry entry = new PolicyEntry();
1:7f534db:         entry.setMemoryLimit(1024 * 100);
1:7f534db:         entry.setProducerFlowControl(true);
1:7f534db:         entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:7f534db:         entry.setQueue(">");
1:7f534db:         policies.setDefaultEntry(entry);
1:7f534db:         broker.setDestinationPolicy(policies);
1:e724226:         broker.setUseJmx(false);
1:7f534db:         broker.start();
1:7f534db:         broker.waitUntilStarted();
1:7f534db: 
1:e724226:         factory = new ActiveMQConnectionFactory(connectionUri);
1:7f534db:         super.setUp();
1:7f534db:     }
1:8314d86: 
1:e724226:     @Override
1:7f534db:     protected void tearDown() throws Exception {
1:7f534db:         broker.stop();
1:e724226:         broker.waitUntilStopped();
1:7f534db:     }
1:7f534db: 
1:7f534db:     public void testDupsOk() throws Exception {
1:7f534db: 
1:7f534db:         TestProducer p = null;
1:7f534db:         TestConsumer c = null;
1:7f534db:         try {
1:7f534db:             latch = new CountDownLatch(SEND_COUNT);
1:8314d86: 
1:e724226:             for (int i = 0; i < CONSUMER_COUNT; i++) {
1:7f534db:                 TestConsumer consumer = new TestConsumer();
1:7f534db:                 consumer.start();
1:7f534db:                 services.add(consumer);
1:7f534db:             }
1:e724226:             for (int i = 0; i < PRODUCER_COUNT; i++) {
1:7f534db:                 TestProducer producer = new TestProducer();
1:7f534db:                 producer.start();
1:7f534db:                 services.add(producer);
1:7f534db:             }
1:7f534db: 
1:e724226:             waitForMessageReceipt(TimeUnit.SECONDS.toMillis(30));
1:7f534db:         } finally {
1:7f534db:             if (p != null) {
1:7f534db:                 p.close();
1:7f534db:             }
1:7f534db: 
1:7f534db:             if (c != null) {
1:7f534db:                 c.close();
1:7f534db:             }
1:7f534db:         }
1:7f534db:     }
1:7f534db: 
1:e724226:     @Override
1:7f534db:     public void onMessage(Message message) {
1:7f534db:         latch.countDown();
1:7f534db:         if (++count % LOG_INTERVAL == 0) {
1:8314d86:             LOG.debug("Received message " + count);
1:7f534db:         }
1:e724226: 
1:7f534db:         try {
1:8314d86:             Thread.sleep(1);
1:7f534db:         } catch (InterruptedException e) {
1:7f534db:             Thread.currentThread().interrupt();
1:7f534db:         }
1:7f534db:     }
1:8314d86: 
1:7f534db:     /**
1:7f534db:      * @throws InterruptedException
1:7f534db:      * @throws TimeoutException
1:7f534db:      */
1:7f534db:     private void waitForMessageReceipt(long timeout) throws InterruptedException, TimeoutException {
1:7f534db:         if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {
1:e724226:             throw new TimeoutException(String.format("Consumner didn't receive expected # of messages, %d of %d received.", latch.getCount(), SEND_COUNT));
1:7f534db:         }
1:7f534db:     }
1:8314d86: 
1:7f534db:     private interface Service {
1:7f534db:         public void start() throws Exception;
1:7f534db:         public void close();
1:7f534db:     }
1:7f534db: 
1:7f534db:     private class TestProducer implements Runnable, Service {
2:7f534db:         Thread thread;
1:7f534db:         BytesMessage message;
1:7f534db: 
1:7f534db:         Connection connection;
1:7f534db:         Session session;
1:7f534db:         MessageProducer producer;
1:7f534db: 
1:7f534db:         TestProducer() throws Exception {
1:7f534db:             thread = new Thread(this, "TestProducer");
1:7f534db:             connection = factory.createConnection();
1:7f534db:             connection.start();
1:7f534db:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:7f534db:             producer = session.createProducer(session.createQueue("AMQ2401Test"));
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void start() {
1:7f534db:             thread.start();
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void run() {
1:7f534db: 
1:7f534db:             int count = SEND_COUNT / PRODUCER_COUNT;
1:7f534db:             for (int i = 1; i <= count; i++) {
1:7f534db:                 try {
1:e724226:                     if ((i % LOG_INTERVAL) == 0) {
1:8314d86:                         LOG.debug("Sending: " + i);
1:7f534db:                     }
1:7f534db:                     message = session.createBytesMessage();
1:7f534db:                     message.writeBytes(new byte[1024]);
1:7f534db:                     producer.send(message);
1:7f534db:                 } catch (JMSException jmse) {
1:7f534db:                     jmse.printStackTrace();
1:7f534db:                     break;
1:7f534db:                 }
1:7f534db:             }
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void close() {
1:7f534db:             try {
1:7f534db:                 connection.close();
1:7f534db:             } catch (JMSException e) {
1:7f534db:             }
1:7f534db:         }
1:7f534db:     }
1:7f534db: 
1:7f534db:     private class TestConsumer implements Runnable, Service {
1:7f534db:         ActiveMQConnection connection;
1:7f534db:         Session session;
1:7f534db:         MessageConsumer consumer;
1:7f534db: 
1:7f534db:         TestConsumer() throws Exception {
1:7f534db:             factory.setOptimizeAcknowledge(false);
1:7f534db:             connection = (ActiveMQConnection) factory.createConnection();
1:7f534db: 
1:7f534db:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:7f534db:             consumer = session.createConsumer(session.createQueue("AMQ2401Test"));
1:7f534db: 
1:7f534db:             consumer.setMessageListener(AMQ2401Test.this);
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void start() throws Exception {
1:7f534db:             connection.start();
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void close() {
1:7f534db:             try {
1:7f534db:                 connection.close();
1:7f534db:             } catch (JMSException e) {
1:7f534db:             }
1:7f534db:         }
1:7f534db: 
1:e724226:         @Override
1:7f534db:         public void run() {
1:7f534db:             while (latch.getCount() > 0) {
1:7f534db:                 try {
1:7f534db:                     onMessage(consumer.receive());
1:7f534db:                 } catch (Exception e) {
1:7f534db:                     e.printStackTrace();
1:7f534db:                 }
1:7f534db:             }
1:7f534db:         }
1:7f534db:     }
1:7f534db: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:e724226
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class AMQ2401Test extends TestCase implements MessageListener {
1:     private BrokerService broker;
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
1:     private int count = 0;
1:     private CountDownLatch latch;
1:     @Override
1:         String connectionUri = broker.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
1:         factory = new ActiveMQConnectionFactory(connectionUri);
1:     @Override
1:         broker.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             for (int i = 0; i < PRODUCER_COUNT; i++) {
1:             waitForMessageReceipt(TimeUnit.SECONDS.toMillis(30));
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:             throw new TimeoutException(String.format("Consumner didn't receive expected # of messages, %d of %d received.", latch.getCount(), SEND_COUNT));
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:                     if ((i % LOG_INTERVAL) == 0) {
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:8314d86
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2401Test.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             waitForMessageReceipt(TimeUnit.SECONDS.toMillis(30));
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1:             LOG.debug("Received message " + count);
1:             Thread.sleep(1);
1: 
1:      *
0:             throw new TimeoutException(String.format(
0:                 "Consumner didn't receive expected # of messages, %d of %d received.",
0:                 latch.getCount(), SEND_COUNT ));
1: 
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Sending: " + i);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:          *
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7f534db
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  * An AMQ-2401 Test
0:  * 
1:  */
0: public class AMQ2401Test extends TestCase implements MessageListener{
0:     BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private static final int SEND_COUNT = 500;
1:     private static final int CONSUMER_COUNT = 50;
1:     private static final int PRODUCER_COUNT = 1;
1:     private static final int LOG_INTERVAL = 10;
1: 
0:     private ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
0:     int count = 0;
0:     CountDownLatch latch;
1: 
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "AMQ2401Test");
1:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.addConnector("tcp://0.0.0.0:2401");
1:         PolicyMap policies = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setMemoryLimit(1024 * 100);
1:         entry.setProducerFlowControl(true);
1:         entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         entry.setQueue(">");
1:         policies.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(policies);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
0:         factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:2401");
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void testDupsOk() throws Exception {
1: 
1:         TestProducer p = null;
1:         TestConsumer c = null;
1:         try {
1: 
1:             latch = new CountDownLatch(SEND_COUNT);
1:             
0:             for(int i = 0; i < CONSUMER_COUNT; i++)
0:             {
1:                 TestConsumer consumer = new TestConsumer();
1:                 consumer.start();
1:                 services.add(consumer);
1:             }
0:             for(int i = 0; i < PRODUCER_COUNT; i++)
0:             {
1:                 TestProducer producer = new TestProducer();
1:                 producer.start();
1:                 services.add(producer);
1:             }
0:             waitForMessageReceipt(3000);
1: 
1:         } finally {
1:             if (p != null) {
1:                 p.close();
1:             }
1: 
1:             if (c != null) {
1:                 c.close();
1:             }
1:         }
1: 
1:     }
1:     
0:     /*
0:      * (non-Javadoc)
0:      * 
0:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:      */
1:     public void onMessage(Message message) {
1:         latch.countDown();
1:         if (++count % LOG_INTERVAL == 0) {
0:             System.out.println("Received message " + count);
1:         }
1:         try {
0:             Thread.currentThread().sleep(1);
1:         } catch (InterruptedException e) {
1:             Thread.currentThread().interrupt();
1:         }
1:         
1:     }
1: 
1:     /**
1:      * @throws InterruptedException
1:      * @throws TimeoutException
0:      * 
1:      */
1:     private void waitForMessageReceipt(long timeout) throws InterruptedException, TimeoutException {
0:         // TODO Auto-generated method stub
1:         if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {
0:             throw new TimeoutException("Consumner didn't receive messages");
1:         }
1:     }
1:     
1:     private interface Service {
1:         public void start() throws Exception;
1: 
1:         public void close();
1:     }
1: 
1:     private class TestProducer implements Runnable, Service {
1:         Thread thread;
1:         BytesMessage message;
1: 
1:         Connection connection;
1:         Session session;
1:         MessageProducer producer;
1: 
1:         TestProducer() throws Exception {
1:             thread = new Thread(this, "TestProducer");
1:             connection = factory.createConnection();
1:             connection.start();
1:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:             producer = session.createProducer(session.createQueue("AMQ2401Test"));
1: 
1:         }
1: 
1:         public void start() {
1:             thread.start();
1:         }
1: 
1:         public void run() {
1: 
1:             int count = SEND_COUNT / PRODUCER_COUNT;
1:             for (int i = 1; i <= count; i++) {
1:                 try {
0:                     if( (i% LOG_INTERVAL)==0 ) {
0:                         System.out.println("Sending: " + i);
1:                     }
1:                     message = session.createBytesMessage();
1:                     message.writeBytes(new byte[1024]);
1:                     producer.send(message);
1:                 } catch (JMSException jmse) {
1:                     jmse.printStackTrace();
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         public void close() {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:             }
1:         }
1:     }
1: 
1:     
1:     private class TestConsumer implements Runnable, Service {
1:         ActiveMQConnection connection;
1:         Session session;
1:         MessageConsumer consumer;
1:         Thread thread;
1: 
1:         TestConsumer() throws Exception {
1:             factory.setOptimizeAcknowledge(false);
1:             connection = (ActiveMQConnection) factory.createConnection();
1: 
1:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:             consumer = session.createConsumer(session.createQueue("AMQ2401Test"));
1: 
1:             consumer.setMessageListener(AMQ2401Test.this);
1:         }
1: 
1:         public void start() throws Exception {
1:             connection.start();
1:         }
1: 
1:         public void close() {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:             }
1:         }
1: 
0:         /*
0:          * (non-Javadoc)
0:          * 
0:          * @see java.lang.Runnable#run()
1:          */
1:         public void run() {
1:             while (latch.getCount() > 0) {
1:                 try {
1:                     onMessage(consumer.receive());
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:         }
1: 
1:     }
1: }
============================================================================