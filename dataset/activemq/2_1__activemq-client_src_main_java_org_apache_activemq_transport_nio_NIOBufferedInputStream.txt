1:d4133c4: /**
1:d4133c4:  *
1:d4133c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4133c4:  * contributor license agreements.  See the NOTICE file distributed with
1:d4133c4:  * this work for additional information regarding copyright ownership.
1:d4133c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4133c4:  * (the "License"); you may not use this file except in compliance with
1:d4133c4:  * the License.  You may obtain a copy of the License at
1:d4133c4:  *
1:d4133c4:  * http://www.apache.org/licenses/LICENSE-2.0
1:d4133c4:  *
1:d4133c4:  * Unless required by applicable law or agreed to in writing, software
1:d4133c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4133c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4133c4:  * See the License for the specific language governing permissions and
1:d4133c4:  * limitations under the License.
1:d4133c4:  */
1:d4133c4: package org.apache.activemq.transport.nio;
1:d4133c4: 
1:d4133c4: import java.io.IOException;
1:d4133c4: import java.io.InputStream;
1:d4133c4: import java.nio.ByteBuffer;
1:d4133c4: import java.nio.channels.Channel;
1:d4133c4: import java.nio.channels.ClosedChannelException;
1:d4133c4: import java.nio.channels.ReadableByteChannel;
1:d4133c4: import java.nio.channels.SelectionKey;
1:d4133c4: import java.nio.channels.Selector;
1:d4133c4: import java.nio.channels.SocketChannel;
1:d4133c4: 
1:d4133c4: /**
1:d4133c4:  * Implementation of InputStream using Java NIO channel,direct buffer and
1:d4133c4:  * Selector
1:d4133c4:  */
1:d4133c4: public class NIOBufferedInputStream extends InputStream {
1:d4133c4: 
1:d4133c4:     private final static int BUFFER_SIZE = 8192;
1:d4133c4: 
1:d4133c4:     private SocketChannel sc = null;
1:d4133c4: 
1:d4133c4:     private ByteBuffer bb = null;
1:d4133c4: 
1:d4133c4:     private Selector rs = null;
1:d4133c4: 
1:d4133c4:     public NIOBufferedInputStream(ReadableByteChannel channel, int size)
1:d4133c4:             throws ClosedChannelException, IOException {
1:d4133c4: 
1:d4133c4:         if (size <= 0) {
1:d4133c4:             throw new IllegalArgumentException("Buffer size <= 0");
1:d4133c4:         }
1:d4133c4: 
1:d4133c4:         this.bb = ByteBuffer.allocateDirect(size);
1:d4133c4:         this.sc = (SocketChannel) channel;
1:d4133c4: 
1:d4133c4:         this.sc.configureBlocking(false);
1:d4133c4: 
1:d4133c4:         this.rs = Selector.open();
1:d4133c4: 
1:d4133c4:         sc.register(rs, SelectionKey.OP_READ);
1:d4133c4: 
1:d4133c4:         bb.position(0);
1:d4133c4:         bb.limit(0);
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public NIOBufferedInputStream(ReadableByteChannel channel)
1:d4133c4:             throws ClosedChannelException, IOException {
1:d4133c4:         this(channel, BUFFER_SIZE);
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public int available() throws IOException {
1:d4133c4:         if (!rs.isOpen())
1:d4133c4:             throw new IOException("Input Stream Closed");
1:d4133c4: 
1:d4133c4:         return bb.remaining();
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public void close() throws IOException {
1:d4133c4:         if (rs.isOpen()) {
1:d4133c4:             rs.close();
1:d4133c4: 
1:d4133c4:             if (sc.isOpen()) {
1:d4133c4:                 sc.socket().shutdownInput();
1:d4133c4:                 sc.socket().close();
1:d4133c4:             }
1:d4133c4: 
1:d4133c4:             bb = null;
1:d4133c4:             sc = null;
1:d4133c4:         }
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public int read() throws IOException {
1:d4133c4:         if (!rs.isOpen())
1:d4133c4:             throw new IOException("Input Stream Closed");
1:d4133c4: 
1:d4133c4:         if (!bb.hasRemaining()) {
1:d4133c4:             try {
1:d4133c4:                 fill(1);
1:d4133c4:             } catch (ClosedChannelException e) {
1:d4133c4:                 close();
1:d4133c4:                 return -1;
1:d4133c4:             }
1:d4133c4:         }
1:d4133c4: 
1:d4133c4:         return (bb.get() & 0xFF);
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public int read(byte[] b, int off, int len) throws IOException {
1:d4133c4:         int bytesCopied = -1;
1:d4133c4: 
1:d4133c4:         if (!rs.isOpen())
1:d4133c4:             throw new IOException("Input Stream Closed");
1:d4133c4: 
1:d4133c4:         while (bytesCopied == -1) {
1:d4133c4:             if (bb.hasRemaining()) {
1:d4133c4:                 bytesCopied = (len < bb.remaining() ? len : bb.remaining());
1:d4133c4:                 bb.get(b, off, bytesCopied);
1:d4133c4:             } else {
1:d4133c4:                 try {
1:d4133c4:                     fill(1);
1:d4133c4:                 } catch (ClosedChannelException e) {
1:d4133c4:                     close();
1:d4133c4:                     return -1;
1:d4133c4:                 }
1:d4133c4:             }
1:d4133c4:         }
1:d4133c4: 
1:d4133c4:         return bytesCopied;
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     public long skip(long n) throws IOException {
1:d4133c4:         long skiped = 0;
1:d4133c4: 
1:d4133c4:         if (!rs.isOpen())
1:d4133c4:             throw new IOException("Input Stream Closed");
1:d4133c4: 
1:d4133c4:         while (n > 0) {
1:d4133c4:             if (n <= bb.remaining()) {
1:d4133c4:                 skiped += n;
1:d4133c4:                 bb.position(bb.position() + (int) n);
1:d4133c4:                 n = 0;
1:d4133c4:             } else {
1:d4133c4:                 skiped += bb.remaining();
1:d4133c4:                 n -= bb.remaining();
1:d4133c4: 
1:d4133c4:                 bb.position(bb.limit());
1:d4133c4: 
1:d4133c4:                 try {
1:d4133c4:                     fill((int) n);
1:d4133c4:                 } catch (ClosedChannelException e) {
1:d4133c4:                     close();
1:d4133c4:                     return skiped;
1:d4133c4:                 }
1:d4133c4:             }
1:d4133c4:         }
1:d4133c4: 
1:d4133c4:         return skiped;
1:d4133c4:     }
1:d4133c4: 
1:d4133c4:     private void fill(int n) throws IOException, ClosedChannelException {
1:d4133c4:         int bytesRead = -1;
1:d4133c4: 
1:d4133c4:         if ((n <= 0) || (n <= bb.remaining()))
1:d4133c4:             return;
1:d4133c4: 
1:d4133c4:         bb.compact();
1:d4133c4: 
1:d4133c4:         n = (bb.remaining() < n ? bb.remaining() : n);
1:d4133c4: 
1:d4133c4:         for (;;) {
1:d4133c4:             bytesRead = sc.read(bb);
1:d4133c4: 
1:d4133c4:             if (bytesRead == -1)
1:d4133c4:                 throw new ClosedChannelException();
1:d4133c4: 
1:d4133c4:             n -= bytesRead;
1:d4133c4: 
1:d4133c4:             if (n <= 0)
1:d4133c4:                 break;
1:d4133c4: 
1:d4133c4:             rs.select(0);
1:d4133c4:             rs.selectedKeys().clear();
1:d4133c4:         }
1:d4133c4: 
1:d4133c4:         bb.flip();
1:d4133c4:     }
1:d4133c4: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d4133c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.Channel;
1: import java.nio.channels.ClosedChannelException;
1: import java.nio.channels.ReadableByteChannel;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.Selector;
1: import java.nio.channels.SocketChannel;
1: 
1: /**
1:  * Implementation of InputStream using Java NIO channel,direct buffer and
1:  * Selector
1:  */
1: public class NIOBufferedInputStream extends InputStream {
1: 
1:     private final static int BUFFER_SIZE = 8192;
1: 
1:     private SocketChannel sc = null;
1: 
1:     private ByteBuffer bb = null;
1: 
1:     private Selector rs = null;
1: 
1:     public NIOBufferedInputStream(ReadableByteChannel channel, int size)
1:             throws ClosedChannelException, IOException {
1: 
1:         if (size <= 0) {
1:             throw new IllegalArgumentException("Buffer size <= 0");
1:         }
1: 
1:         this.bb = ByteBuffer.allocateDirect(size);
1:         this.sc = (SocketChannel) channel;
1: 
1:         this.sc.configureBlocking(false);
1: 
1:         this.rs = Selector.open();
1: 
1:         sc.register(rs, SelectionKey.OP_READ);
1: 
1:         bb.position(0);
1:         bb.limit(0);
1:     }
1: 
1:     public NIOBufferedInputStream(ReadableByteChannel channel)
1:             throws ClosedChannelException, IOException {
1:         this(channel, BUFFER_SIZE);
1:     }
1: 
1:     public int available() throws IOException {
1:         if (!rs.isOpen())
1:             throw new IOException("Input Stream Closed");
1: 
1:         return bb.remaining();
1:     }
1: 
1:     public void close() throws IOException {
1:         if (rs.isOpen()) {
1:             rs.close();
1: 
1:             if (sc.isOpen()) {
1:                 sc.socket().shutdownInput();
1:                 sc.socket().close();
1:             }
1: 
1:             bb = null;
1:             sc = null;
1:         }
1:     }
1: 
1:     public int read() throws IOException {
1:         if (!rs.isOpen())
1:             throw new IOException("Input Stream Closed");
1: 
1:         if (!bb.hasRemaining()) {
1:             try {
1:                 fill(1);
1:             } catch (ClosedChannelException e) {
1:                 close();
1:                 return -1;
1:             }
1:         }
1: 
1:         return (bb.get() & 0xFF);
1:     }
1: 
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         int bytesCopied = -1;
1: 
1:         if (!rs.isOpen())
1:             throw new IOException("Input Stream Closed");
1: 
1:         while (bytesCopied == -1) {
1:             if (bb.hasRemaining()) {
1:                 bytesCopied = (len < bb.remaining() ? len : bb.remaining());
1:                 bb.get(b, off, bytesCopied);
1:             } else {
1:                 try {
1:                     fill(1);
1:                 } catch (ClosedChannelException e) {
1:                     close();
1:                     return -1;
1:                 }
1:             }
1:         }
1: 
1:         return bytesCopied;
1:     }
1: 
1:     public long skip(long n) throws IOException {
1:         long skiped = 0;
1: 
1:         if (!rs.isOpen())
1:             throw new IOException("Input Stream Closed");
1: 
1:         while (n > 0) {
1:             if (n <= bb.remaining()) {
1:                 skiped += n;
1:                 bb.position(bb.position() + (int) n);
1:                 n = 0;
1:             } else {
1:                 skiped += bb.remaining();
1:                 n -= bb.remaining();
1: 
1:                 bb.position(bb.limit());
1: 
1:                 try {
1:                     fill((int) n);
1:                 } catch (ClosedChannelException e) {
1:                     close();
1:                     return skiped;
1:                 }
1:             }
1:         }
1: 
1:         return skiped;
1:     }
1: 
1:     private void fill(int n) throws IOException, ClosedChannelException {
1:         int bytesRead = -1;
1: 
1:         if ((n <= 0) || (n <= bb.remaining()))
1:             return;
1: 
1:         bb.compact();
1: 
1:         n = (bb.remaining() < n ? bb.remaining() : n);
1: 
1:         for (;;) {
1:             bytesRead = sc.read(bb);
1: 
1:             if (bytesRead == -1)
1:                 throw new ClosedChannelException();
1: 
1:             n -= bytesRead;
1: 
1:             if (n <= 0)
1:                 break;
1: 
1:             rs.select(0);
1:             rs.selectedKeys().clear();
1:         }
1: 
1:         bb.flip();
1:     }
1: }
============================================================================