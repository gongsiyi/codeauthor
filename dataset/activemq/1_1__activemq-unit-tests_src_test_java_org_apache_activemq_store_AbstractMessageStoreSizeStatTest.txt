2:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
2:785b16b:  */
1:785b16b: package org.apache.activemq.store;
31:785b16b: 
1:785b16b: import static org.junit.Assert.assertTrue;
1:de24980: 
1:785b16b: import java.io.IOException;
1:785b16b: import java.net.URI;
1:734fb7d: import java.util.concurrent.atomic.AtomicLong;
1:785b16b: 
1:785b16b: import javax.jms.Connection;
1:785b16b: import javax.jms.DeliveryMode;
1:785b16b: 
1:785b16b: import org.apache.activemq.ActiveMQConnectionFactory;
1:785b16b: import org.apache.activemq.broker.BrokerService;
1:785b16b: import org.apache.activemq.broker.TransportConnector;
1:785b16b: import org.apache.activemq.broker.region.Destination;
1:a49d46e: import org.apache.activemq.util.Wait;
1:a49d46e: import org.apache.activemq.util.Wait.Condition;
1:785b16b: import org.junit.After;
1:785b16b: import org.junit.Before;
1:785b16b: import org.junit.Test;
1:785b16b: import org.slf4j.Logger;
1:785b16b: import org.slf4j.LoggerFactory;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test checks that KahaDB properly sets the new storeMessageSize statistic.
1:785b16b:  *
1:785b16b:  * AMQ-5748
1:785b16b:  *
1:785b16b:  */
1:734fb7d: public abstract class AbstractMessageStoreSizeStatTest extends AbstractStoreStatTestSupport {
1:785b16b:     protected static final Logger LOG = LoggerFactory
1:785b16b:             .getLogger(AbstractMessageStoreSizeStatTest.class);
1:785b16b: 
1:785b16b: 
1:785b16b:     protected BrokerService broker;
1:785b16b:     protected URI brokerConnectURI;
1:785b16b:     protected String defaultQueueName = "test.queue";
1:a49d46e:     protected String defaultTopicName = "test.topic";
1:785b16b: 
1:785b16b:     @Before
1:785b16b:     public void startBroker() throws Exception {
1:785b16b:         setUpBroker(true);
13:785b16b:     }
1:734fb7d: 
1:785b16b:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1:a49d46e: 
1:785b16b:         broker = new BrokerService();
1:785b16b:         this.initPersistence(broker);
1:785b16b:         //set up a transport
1:785b16b:         TransportConnector connector = broker
1:785b16b:                 .addConnector(new TransportConnector());
1:785b16b:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:785b16b:         connector.setName("tcp");
1:a49d46e: 
1:785b16b:         broker.start();
1:785b16b:         broker.waitUntilStarted();
1:785b16b:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:a49d46e: 
1:a49d46e:     }
1:a49d46e: 
1:785b16b:     @After
1:785b16b:     public void stopBroker() throws Exception {
1:785b16b:         broker.stop();
1:785b16b:         broker.waitUntilStopped();
1:a49d46e:     }
1:a49d46e: 
1:734fb7d:     @Override
1:734fb7d:     protected BrokerService getBroker() {
1:734fb7d:         return this.broker;
1:a49d46e:     }
1:a49d46e: 
1:734fb7d:     @Override
1:734fb7d:     protected URI getBrokerConnectURI() {
1:734fb7d:         return this.brokerConnectURI;
1:734fb7d:     }
1:a49d46e: 
1:734fb7d:     protected abstract void initPersistence(BrokerService brokerService) throws IOException;
1:734fb7d: 
1:d2bd152:     @Test(timeout=60000)
1:734fb7d:     public void testMessageSize() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d: 
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:734fb7d:     }
1:734fb7d: 
1:d2bd152:     @Test(timeout=60000)
1:734fb7d:     public void testMessageSizeAfterConsumption() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d: 
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:de24980: 
1:a49d46e:         consumeTestQueueMessages();
1:a49d46e: 
1:785b16b:         verifyStats(dest, 0, 0);
1:a49d46e:     }
1:785b16b: 
1:d2bd152:     @Test(timeout=60000)
1:a49d46e:     public void testMessageSizeOneDurable() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:a49d46e:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:a49d46e:         connection.setClientID("clientId");
1:a49d46e:         connection.start();
1:a49d46e: 
1:734fb7d:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 200, publishedMessageSize);
1:785b16b: 
1:785b16b:         //verify the count and size
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:a49d46e: 
1:a49d46e:         //consume all messages
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //All messages should now be gone
1:a49d46e:         verifyStats(dest, 0, 0);
1:a49d46e: 
1:a49d46e:         connection.close();
1:a49d46e:     }
1:a49d46e: 
1:d2bd152:     @Test(timeout=60000)
1:a49d46e:     public void testMessageSizeTwoDurables() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:a49d46e:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:a49d46e:         connection.setClientID("clientId");
1:a49d46e:         connection.start();
1:a49d46e: 
1:734fb7d:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 200, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //verify the count and size
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:a49d46e: 
1:a49d46e:         //consume messages just for sub1
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //There is still a durable that hasn't consumed so the messages should exist
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:785b16b: 
1:a49d46e:         connection.stop();
1:785b16b: 
1:785b16b:     }
1:785b16b: 
4:785b16b:     @Test
1:785b16b:     public void testMessageSizeAfterDestinationDeletion() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:a49d46e: 
1:785b16b:         //check that the size is 0 after deletion
1:785b16b:         broker.removeDestination(dest.getActiveMQDestination());
1:785b16b:         verifyStats(dest, 0, 0);
1:785b16b:     }
1:a49d46e: 
1:734fb7d:     @Test
1:734fb7d:     public void testQueueBrowserMessageSize() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d: 
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:734fb7d:         browseTestQueueMessages(dest.getName());
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:734fb7d:     }
1:734fb7d: 
1:a49d46e:     protected void verifyStats(Destination dest, final int count, final long minimumSize) throws Exception {
1:a49d46e:         final MessageStore messageStore = dest.getMessageStore();
1:a49d46e:         final MessageStoreStatistics storeStats = dest.getMessageStore().getMessageStoreStatistics();
1:a49d46e: 
1:5ec4513:         assertTrue(Wait.waitFor(new Condition() {
1:a49d46e:             @Override
1:a49d46e:             public boolean isSatisified() throws Exception {
1:a49d46e:                 return (count == messageStore.getMessageCount()) && (messageStore.getMessageCount() ==
1:a49d46e:                         storeStats.getMessageCount().getCount()) && (messageStore.getMessageSize() ==
1:785b16b:                 messageStore.getMessageStoreStatistics().getMessageSize().getTotalSize());
1:a49d46e:             }
1:5ec4513:         }));
1:a49d46e: 
1:785b16b:         if (count > 0) {
1:785b16b:             assertTrue(storeStats.getMessageSize().getTotalSize() > minimumSize);
1:5ec4513:             assertTrue(Wait.waitFor(new Condition() {
1:a49d46e:                 @Override
1:a49d46e:                 public boolean isSatisified() throws Exception {
1:a49d46e:                     return storeStats.getMessageSize().getTotalSize() > minimumSize;
1:a49d46e:                 }
1:5ec4513:             }));
1:785b16b:         } else {
1:5ec4513:             assertTrue(Wait.waitFor(new Condition() {
1:a49d46e:                 @Override
1:a49d46e:                 public boolean isSatisified() throws Exception {
1:a49d46e:                     return storeStats.getMessageSize().getTotalSize() == 0;
1:a49d46e:                 }
1:5ec4513:             }));
1:785b16b:         }
1:785b16b:     }
1:785b16b: 
1:785b16b: 
1:734fb7d:     protected Destination publishTestQueueMessages(int count, AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:         return publishTestQueueMessages(count, defaultQueueName, DeliveryMode.PERSISTENT,
1:734fb7d:                 AbstractStoreStatTestSupport.defaultMessageSize, publishedMessageSize);
1:785b16b:     }
1:785b16b: 
1:734fb7d:     protected Destination publishTestQueueMessages(int count, String queueName, AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:         return publishTestQueueMessages(count, queueName, DeliveryMode.PERSISTENT,
1:734fb7d:                 AbstractStoreStatTestSupport.defaultMessageSize, publishedMessageSize);
1:785b16b:     }
1:785b16b: 
1:a49d46e:     protected Destination consumeTestQueueMessages() throws Exception {
1:a49d46e:         return consumeTestQueueMessages(defaultQueueName);
1:a49d46e:     }
1:a49d46e: 
1:734fb7d:     protected Destination consumeDurableTestMessages(Connection connection, String sub, int size,
1:734fb7d:             AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:         return consumeDurableTestMessages(connection, sub, size, defaultTopicName, publishedMessageSize);
1:785b16b:     }
1:785b16b: 
1:734fb7d:     protected Destination publishTestMessagesDurable(Connection connection, String[] subNames,
1:734fb7d:             int publishSize, int expectedSize, AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:        return publishTestMessagesDurable(connection, subNames, defaultTopicName,
1:734fb7d:                 publishSize, expectedSize, AbstractStoreStatTestSupport.defaultMessageSize,
1:734fb7d:                 publishedMessageSize, true);
1:785b16b:     }
1:785b16b: 
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:5ec4513
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Wait.waitFor(new Condition() {
1:         }));
1:             assertTrue(Wait.waitFor(new Condition() {
1:             }));
1:             assertTrue(Wait.waitFor(new Condition() {
1:             }));
commit:d2bd152
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
commit:8a09b7e
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractMessageStoreSizeStatTest extends AbstractStoreStatTestSupport {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected BrokerService getBroker() {
1:         return this.broker;
1:     @Override
1:     protected URI getBrokerConnectURI() {
1:         return this.brokerConnectURI;
1:     }
1:     protected abstract void initPersistence(BrokerService brokerService) throws IOException;
1: 
0:     @Test(timeout=10000)
1:     public void testMessageSize() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1: 
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:     }
1: 
0:     @Test(timeout=10000)
1:     public void testMessageSizeAfterConsumption() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1: 
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
0:     @Test(timeout=10000)
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
/////////////////////////////////////////////////////////////////////////
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
/////////////////////////////////////////////////////////////////////////
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:     @Test
1:     public void testQueueBrowserMessageSize() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1: 
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         browseTestQueueMessages(dest.getName());
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected Destination publishTestQueueMessages(int count, AtomicLong publishedMessageSize) throws Exception {
1:         return publishTestQueueMessages(count, defaultQueueName, DeliveryMode.PERSISTENT,
1:                 AbstractStoreStatTestSupport.defaultMessageSize, publishedMessageSize);
1:     protected Destination publishTestQueueMessages(int count, String queueName, AtomicLong publishedMessageSize) throws Exception {
1:         return publishTestQueueMessages(count, queueName, DeliveryMode.PERSISTENT,
1:                 AbstractStoreStatTestSupport.defaultMessageSize, publishedMessageSize);
1:     protected Destination consumeDurableTestMessages(Connection connection, String sub, int size,
1:             AtomicLong publishedMessageSize) throws Exception {
1:         return consumeDurableTestMessages(connection, sub, size, defaultTopicName, publishedMessageSize);
1:     protected Destination publishTestMessagesDurable(Connection connection, String[] subNames,
1:             int publishSize, int expectedSize, AtomicLong publishedMessageSize) throws Exception {
1:        return publishTestMessagesDurable(connection, subNames, defaultTopicName,
1:                 publishSize, expectedSize, AbstractStoreStatTestSupport.defaultMessageSize,
1:                 publishedMessageSize, true);
commit:a49d46e
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.TopicSubscriber;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:     protected String defaultTopicName = "test.topic";
/////////////////////////////////////////////////////////////////////////
0:         Destination dest = publishTestQueueMessages(200);
0:         Destination dest = publishTestQueueMessages(200);
1:         consumeTestQueueMessages();
1: 
1:     public void testMessageSizeOneDurable() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
0:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 200);
1:         //consume all messages
0:         consumeDurableTestMessages(connection, "sub1", 200);
1: 
1:         //All messages should now be gone
1:         verifyStats(dest, 0, 0);
1: 
1:         connection.close();
1:     }
1: 
0:     @Test(timeout=10000)
1:     public void testMessageSizeTwoDurables() throws Exception {
1: 
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
0:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 200);
1: 
1:         //verify the count and size
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
1:         //consume messages just for sub1
0:         consumeDurableTestMessages(connection, "sub1", 200);
1: 
1:         //There is still a durable that hasn't consumed so the messages should exist
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
1:         connection.stop();
1: 
0:         Destination dest = publishTestQueueMessages(200);
/////////////////////////////////////////////////////////////////////////
1:     protected void verifyStats(Destination dest, final int count, final long minimumSize) throws Exception {
1:         final MessageStore messageStore = dest.getMessageStore();
1:         final MessageStoreStatistics storeStats = dest.getMessageStore().getMessageStoreStatistics();
1: 
0:         Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return (count == messageStore.getMessageCount()) && (messageStore.getMessageCount() ==
1:                         storeStats.getMessageCount().getCount()) && (messageStore.getMessageSize() ==
1:             }
0:         });
1: 
0:             Wait.waitFor(new Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return storeStats.getMessageSize().getTotalSize() > minimumSize;
1:                 }
0:             });
0:             Wait.waitFor(new Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return storeStats.getMessageSize().getTotalSize() == 0;
1:                 }
0:             });
/////////////////////////////////////////////////////////////////////////
0:     protected Destination publishTestQueueMessages(int count) throws Exception {
0:         return publishTestQueueMessages(count, defaultQueueName);
0:     protected Destination publishTestQueueMessages(int count, String queueName) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             connection.close();
1:     protected Destination consumeTestQueueMessages() throws Exception {
1:         return consumeTestQueueMessages(defaultQueueName);
0:     protected Destination consumeDurableTestMessages(Connection connection, String sub, int size) throws Exception {
0:         return consumeDurableTestMessages(connection, sub, size, defaultTopicName);
1:     }
1: 
0:     protected Destination consumeTestQueueMessages(String queueName) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     protected Destination consumeDurableTestMessages(Connection connection, String sub, int size, String topicName) throws Exception {
0:                 topicName);
1: 
0:         Destination dest = broker.getDestination(activeMqTopic);
1: 
0:         Session session = connection.createSession(false,
0:                 QueueSession.AUTO_ACKNOWLEDGE);
0:         Topic topic = session.createTopic(topicName);
1: 
0:         try {
0:             TopicSubscriber consumer = session.createDurableSubscriber(topic, sub);
0:             for (int i = 0; i < size; i++) {
0:                 consumer.receive();
1:             }
1: 
0:         } finally {
0:             session.close();
1:         }
1: 
0:         return dest;
1:     }
1: 
0:     protected Destination publishTestMessagesDurable(Connection connection, String[] subNames, int publishSize, int expectedSize) throws Exception {
0:         // create a new queue
0:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
0:                 defaultTopicName);
1: 
0:         Topic topic = session.createTopic(defaultTopicName);
0:         for (String subName : subNames) {
0:             session.createDurableSubscriber(topic, subName);
1:         }
/////////////////////////////////////////////////////////////////////////
0:             for (int i = 0; i < publishSize; i++) {
0:             //verify the view has expected messages
0:             assertEquals(subNames.length, subs.length);
0:             assertEquals(expectedSize, data.length);
0:             session.close();
commit:de24980
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.ObjectName;
0: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.TabularData;
0: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
/////////////////////////////////////////////////////////////////////////
0:         // browse the durable sub - this test is to verify that browsing (which calls createTopicMessageStore)
0:         //in KahaDBStore will not create a brand new store (ie uses the cache) If the cache is not used,
0:         //then the statistics won't be updated properly because a new store would overwrite the old store
0:         //which is still in use
0:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1: 
/////////////////////////////////////////////////////////////////////////
0:             //verify the view has 200 messages
0:             assertEquals(1, subs.length);
0:             ObjectName subName = subs[0];
0:             DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
0:                     broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
0:             CompositeData[] data  = sub.browse();
0:             assertNotNull(data);
0:             assertEquals(200, data.length);
1: 
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.URI;
0: import java.util.Random;
1: 
0: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.QueueSession;
0: import javax.jms.Session;
0: import javax.jms.Topic;
0: import javax.jms.TopicSession;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test checks that KahaDB properly sets the new storeMessageSize statistic.
1:  *
1:  * AMQ-5748
1:  *
1:  */
0: public abstract class AbstractMessageStoreSizeStatTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(AbstractMessageStoreSizeStatTest.class);
1: 
1: 
1:     protected BrokerService broker;
1:     protected URI brokerConnectURI;
1:     protected String defaultQueueName = "test.queue";
0:     protected static int messageSize = 1000;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         setUpBroker(true);
1:     }
1: 
1:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1: 
1:         broker = new BrokerService();
1:         this.initPersistence(broker);
1:         //set up a transport
1:         TransportConnector connector = broker
1:                 .addConnector(new TransportConnector());
1:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:         connector.setName("tcp");
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1: 
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
0:     protected abstract void initPersistence(BrokerService brokerService) throws IOException;
1: 
1:     @Test
0:     public void testMessageSize() throws Exception {
0:         Destination dest = publishTestMessages(200);
0:         verifyStats(dest, 200, 200 * messageSize);
1:     }
1: 
1:     @Test
0:     public void testMessageSizeAfterConsumption() throws Exception {
1: 
0:         Destination dest = publishTestMessages(200);
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
0:         consumeTestMessages();
0:         Thread.sleep(3000);
1:         verifyStats(dest, 0, 0);
1:     }
1: 
1:     @Test
0:     public void testMessageSizeDurable() throws Exception {
1: 
0:         Destination dest = publishTestMessagesDurable();
1: 
1:         //verify the count and size
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
1:     }
1: 
1:     @Test
1:     public void testMessageSizeAfterDestinationDeletion() throws Exception {
0:         Destination dest = publishTestMessages(200);
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
1:         //check that the size is 0 after deletion
1:         broker.removeDestination(dest.getActiveMQDestination());
1:         verifyStats(dest, 0, 0);
1:     }
1: 
0:     protected void verifyStats(Destination dest, int count, long minimumSize) throws Exception {
0:         MessageStore messageStore = dest.getMessageStore();
0:         MessageStoreStatistics storeStats = dest.getMessageStore().getMessageStoreStatistics();
0:         assertEquals(messageStore.getMessageCount(), count);
0:         assertEquals(messageStore.getMessageCount(),
0:                 storeStats.getMessageCount().getCount());
0:         assertEquals(messageStore.getMessageSize(),
1:                 messageStore.getMessageStoreStatistics().getMessageSize().getTotalSize());
1:         if (count > 0) {
1:             assertTrue(storeStats.getMessageSize().getTotalSize() > minimumSize);
1:         } else {
0:             assertEquals(storeStats.getMessageSize().getTotalSize(), 0);
1:         }
1:     }
1: 
1:     /**
0:      * Generate random 1 megabyte messages
0:      * @param session
0:      * @return
0:      * @throws JMSException
1:      */
0:     protected BytesMessage createMessage(Session session) throws JMSException {
0:         final BytesMessage message = session.createBytesMessage();
0:         final byte[] data = new byte[messageSize];
0:         final Random rng = new Random();
0:         rng.nextBytes(data);
0:         message.writeBytes(data);
0:         return message;
1:     }
1: 
1: 
0:     protected Destination publishTestMessages(int count) throws Exception {
0:         return publishTestMessages(count, defaultQueueName);
1:     }
1: 
0:     protected Destination publishTestMessages(int count, String queueName) throws Exception {
0:         // create a new queue
0:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
0:                 queueName);
1: 
0:         Destination dest = broker.getDestination(activeMqQueue);
1: 
0:         // Start the connection
0:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI)
0:         .createConnection();
0:         connection.setClientID("clientId" + queueName);
0:         connection.start();
0:         Session session = connection.createSession(false,
0:                 QueueSession.AUTO_ACKNOWLEDGE);
0:         Queue queue = session.createQueue(queueName);
1: 
0:         try {
0:             // publish a bunch of non-persistent messages to fill up the temp
0:             // store
0:             MessageProducer prod = session.createProducer(queue);
0:             prod.setDeliveryMode(DeliveryMode.PERSISTENT);
0:             for (int i = 0; i < count; i++) {
0:                 prod.send(createMessage(session));
1:             }
1: 
0:         } finally {
0:             connection.stop();
1:         }
1: 
0:         return dest;
1:     }
1: 
0:     protected Destination consumeTestMessages() throws Exception {
0:         return consumeTestMessages(defaultQueueName);
1:     }
1: 
0:     protected Destination consumeTestMessages(String queueName) throws Exception {
0:         // create a new queue
0:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
0:                 queueName);
1: 
0:         Destination dest = broker.getDestination(activeMqQueue);
1: 
0:         // Start the connection
0:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI)
0:         .createConnection();
0:         connection.setClientID("clientId2" + queueName);
0:         connection.start();
0:         Session session = connection.createSession(false,
0:                 QueueSession.AUTO_ACKNOWLEDGE);
0:         Queue queue = session.createQueue(queueName);
1: 
0:         try {
0:             MessageConsumer consumer = session.createConsumer(queue);
0:             for (int i = 0; i < 200; i++) {
0:                 consumer.receive();
1:             }
1: 
0:         } finally {
0:             connection.stop();
1:         }
1: 
0:         return dest;
1:     }
1: 
0:     protected Destination publishTestMessagesDurable() throws Exception {
0:         // create a new queue
0:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
0:                 "test.topic");
1: 
0:         Destination dest = broker.getDestination(activeMqTopic);
1: 
0:         // Start the connection
0:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI)
0:         .createConnection();
0:         connection.setClientID("clientId");
0:         connection.start();
0:         Session session = connection.createSession(false,
0:                 TopicSession.AUTO_ACKNOWLEDGE);
0:         Topic topic = session.createTopic("test.topic");
0:         session.createDurableSubscriber(topic, "sub1");
1: 
0:         try {
0:             // publish a bunch of non-persistent messages to fill up the temp
0:             // store
0:             MessageProducer prod = session.createProducer(topic);
0:             prod.setDeliveryMode(DeliveryMode.PERSISTENT);
0:             for (int i = 0; i < 200; i++) {
0:                 prod.send(createMessage(session));
1:             }
1: 
0:         } finally {
0:             connection.stop();
1:         }
1: 
0:         return dest;
1:     }
1: 
1: }
============================================================================