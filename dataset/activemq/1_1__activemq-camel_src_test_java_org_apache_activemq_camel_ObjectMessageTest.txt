1:7951037: /**
1:7951037:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7951037:  * contributor license agreements.  See the NOTICE file distributed with
1:7951037:  * this work for additional information regarding copyright ownership.
1:7951037:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7951037:  * (the "License"); you may not use this file except in compliance with
1:7951037:  * the License.  You may obtain a copy of the License at
1:7951037:  *
1:7951037:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7951037:  *
1:7951037:  * Unless required by applicable law or agreed to in writing, software
1:7951037:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7951037:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7951037:  * See the License for the specific language governing permissions and
1:7951037:  * limitations under the License.
1:7951037:  */
1:7951037: package org.apache.activemq.camel;
1:7951037: 
1:7951037: import org.apache.activemq.ActiveMQConnectionFactory;
1:7951037: import org.apache.camel.Exchange;
1:7951037: import org.apache.camel.component.jms.JmsBinding;
1:7951037: import org.apache.camel.component.jms.JmsMessage;
1:7951037: import org.apache.camel.component.mock.MockEndpoint;
1:7951037: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:7951037: import org.apache.camel.util.ExchangeHelper;
1:7951037: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1:7951037: import org.junit.Test;
1:7951037: import org.springframework.context.support.AbstractApplicationContext;
1:7951037: 
1:7951037: import javax.jms.*;
1:7951037: import java.util.concurrent.TimeUnit;
1:7951037: 
1:7951037: public class ObjectMessageTest extends CamelSpringTestSupport {
1:7951037: 
1:7951037:     @Test
1:7951037:     public void testUntrusted() throws Exception {
1:7951037:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:7951037:         Connection conn = factory.createConnection();
1:7951037:         conn.start();
1:7951037:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7951037:         MessageProducer producer = sess.createProducer(sess.createTopic("foo"));
1:7951037:         ObjectMessage msg = sess.createObjectMessage();
1:7951037:         ObjectPayload payload = new ObjectPayload();
1:7951037:         payload.payload = "test";
1:7951037:         msg.setObject(payload);
1:7951037:         producer.send(msg);
1:7951037: 
1:7951037:         Thread.sleep(1000);
1:7951037: 
1:7951037:         MockEndpoint resultActiveMQ = resolveMandatoryEndpoint("mock:result-activemq", MockEndpoint.class);
1:7951037:         resultActiveMQ.expectedMessageCount(1);
1:7951037:         resultActiveMQ.assertIsSatisfied();
1:7951037:         assertCorrectObjectReceived(resultActiveMQ);
1:7951037: 
1:7951037:         MockEndpoint resultTrusted = resolveMandatoryEndpoint("mock:result-trusted", MockEndpoint.class);
1:7951037:         resultTrusted.expectedMessageCount(1);
1:7951037:         resultTrusted.assertIsSatisfied();
1:7951037:         assertCorrectObjectReceived(resultTrusted);
1:7951037: 
1:7951037:         MockEndpoint resultCamel = resolveMandatoryEndpoint("mock:result-camel", MockEndpoint.class);
1:eeec0c0:         resultCamel.expectedMessageCount(1);
1:eeec0c0:         resultCamel.assertIsNotSatisfied();
1:eeec0c0: 
1:eeec0c0:         MockEndpoint resultEmpty = resolveMandatoryEndpoint("mock:result-empty", MockEndpoint.class);
1:eeec0c0:         resultEmpty.expectedMessageCount(1);
1:eeec0c0:         resultEmpty.assertIsNotSatisfied();
1:7951037: 
1:7951037:     }
1:7951037: 
1:7951037:     protected void assertCorrectObjectReceived(MockEndpoint result) {
1:7951037:         Exchange exchange = result.getReceivedExchanges().get(0);
1:7951037:         // This should be a JMS Exchange
1:7951037:         assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class));
1:7951037:         JmsMessage in = (JmsMessage) exchange.getIn();
1:7951037:         assertNotNull(in);
1:7951037:         assertIsInstanceOf(ObjectMessage.class, in.getJmsMessage());
1:7951037: 
1:7951037:         ObjectPayload received = exchange.getIn().getBody(ObjectPayload.class);
1:7951037:         assertEquals("test", received.payload);
1:7951037:     }
1:7951037: 
1:7951037:     @Override
1:7951037:     protected AbstractApplicationContext createApplicationContext() {
1:7951037:         AbstractApplicationContext context = new ClassPathXmlApplicationContext("org/apache/activemq/camel/jms-object-message.xml");
1:7951037:         return context;
1:7951037:     }
1:7951037: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:eeec0c0
/////////////////////////////////////////////////////////////////////////
1:         resultCamel.expectedMessageCount(1);
1:         resultCamel.assertIsNotSatisfied();
1: 
1:         MockEndpoint resultEmpty = resolveMandatoryEndpoint("mock:result-empty", MockEndpoint.class);
1:         resultEmpty.expectedMessageCount(1);
1:         resultEmpty.assertIsNotSatisfied();
commit:7951037
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.component.jms.JmsBinding;
1: import org.apache.camel.component.jms.JmsMessage;
1: import org.apache.camel.component.mock.MockEndpoint;
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
1: import org.apache.camel.util.ExchangeHelper;
1: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1: import org.junit.Test;
1: import org.springframework.context.support.AbstractApplicationContext;
1: 
1: import javax.jms.*;
1: import java.util.concurrent.TimeUnit;
1: 
1: public class ObjectMessageTest extends CamelSpringTestSupport {
1: 
1:     @Test
1:     public void testUntrusted() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = sess.createProducer(sess.createTopic("foo"));
1:         ObjectMessage msg = sess.createObjectMessage();
1:         ObjectPayload payload = new ObjectPayload();
1:         payload.payload = "test";
1:         msg.setObject(payload);
1:         producer.send(msg);
1: 
1:         Thread.sleep(1000);
1: 
1:         MockEndpoint resultActiveMQ = resolveMandatoryEndpoint("mock:result-activemq", MockEndpoint.class);
1:         resultActiveMQ.expectedMessageCount(1);
1:         resultActiveMQ.assertIsSatisfied();
1:         assertCorrectObjectReceived(resultActiveMQ);
1: 
1:         MockEndpoint resultTrusted = resolveMandatoryEndpoint("mock:result-trusted", MockEndpoint.class);
1:         resultTrusted.expectedMessageCount(1);
1:         resultTrusted.assertIsSatisfied();
1:         assertCorrectObjectReceived(resultTrusted);
1: 
1:         MockEndpoint resultCamel = resolveMandatoryEndpoint("mock:result-camel", MockEndpoint.class);
0:         resultCamel.expectedMessageCount(0);
0:         resultCamel.assertIsSatisfied(1, TimeUnit.SECONDS);
1: 
1:     }
1: 
1:     protected void assertCorrectObjectReceived(MockEndpoint result) {
1:         Exchange exchange = result.getReceivedExchanges().get(0);
1:         // This should be a JMS Exchange
1:         assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class));
1:         JmsMessage in = (JmsMessage) exchange.getIn();
1:         assertNotNull(in);
1:         assertIsInstanceOf(ObjectMessage.class, in.getJmsMessage());
1: 
1:         ObjectPayload received = exchange.getIn().getBody(ObjectPayload.class);
1:         assertEquals("test", received.payload);
1:     }
1: 
1:     @Override
1:     protected AbstractApplicationContext createApplicationContext() {
1:         AbstractApplicationContext context = new ClassPathXmlApplicationContext("org/apache/activemq/camel/jms-object-message.xml");
1:         return context;
1:     }
1: }
============================================================================