1:9f53e2b: /**
1:9f53e2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f53e2b:  * contributor license agreements.  See the NOTICE file distributed with
1:9f53e2b:  * this work for additional information regarding copyright ownership.
1:9f53e2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f53e2b:  * (the "License"); you may not use this file except in compliance with
1:9f53e2b:  * the License.  You may obtain a copy of the License at
1:9f53e2b:  *
1:9f53e2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f53e2b:  *
1:9f53e2b:  * Unless required by applicable law or agreed to in writing, software
1:9f53e2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f53e2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f53e2b:  * See the License for the specific language governing permissions and
1:9f53e2b:  * limitations under the License.
1:9f53e2b:  */
1:f395c70: package org.apache.activemq.jms.pool;
2:f395c70: 
1:f395c70: import java.util.concurrent.Executors;
1:f395c70: 
1:f395c70: import javax.jms.Connection;
1:f395c70: import javax.jms.ConnectionFactory;
1:f395c70: import javax.jms.JMSException;
1:f395c70: import javax.jms.Message;
1:f395c70: import javax.jms.MessageConsumer;
1:f395c70: import javax.jms.MessageProducer;
1:f395c70: import javax.jms.Session;
1:f395c70: import javax.jms.TemporaryQueue;
1:f395c70: import javax.jms.TextMessage;
1:f395c70: 
1:f395c70: import org.apache.activemq.ActiveMQConnectionFactory;
1:f395c70: import org.junit.Test;
1:f395c70: import org.slf4j.Logger;
1:f395c70: import org.slf4j.LoggerFactory;
1:f395c70: 
1:e6597c4: public class PooledConnectionTempQueueTest extends JmsPoolTestSupport {
1:f395c70: 
1:f395c70:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionTempQueueTest.class);
1:f395c70: 
1:f395c70:     protected static final String SERVICE_QUEUE = "queue1";
1:f395c70: 
1:e6597c4:     @Test(timeout = 60000)
1:f395c70:     public void testTempQueueIssue() throws JMSException, InterruptedException {
1:e6597c4:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:e6597c4:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
1:f395c70:         final PooledConnectionFactory cf = new PooledConnectionFactory();
1:f395c70:         cf.setConnectionFactory(factory);
1:f395c70: 
1:f395c70:         Connection connection = cf.createConnection();
1:f395c70:         connection.start();
1:f395c70:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f395c70: 
1:f395c70:         LOG.info("First connection was {}", connection);
1:f395c70: 
1:f395c70:         // This order seems to matter to reproduce the issue
1:f395c70:         connection.close();
1:f395c70:         session.close();
1:f395c70: 
1:f395c70:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:f395c70:             @Override
1:f395c70:             public void run() {
1:f395c70:                 try {
1:f395c70:                     receiveAndRespondWithMessageIdAsCorrelationId(cf, SERVICE_QUEUE);
1:f395c70:                 } catch (JMSException e) {
1:f395c70:                     e.printStackTrace();
1:f395c70:                 }
1:f395c70:             }
1:f395c70:         });
1:f395c70: 
1:f395c70:         sendWithReplyToTemp(cf, SERVICE_QUEUE);
1:27ce49f: 
1:27ce49f:         cf.stop();
1:f395c70:     }
1:f395c70: 
1:f395c70:     private void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException,
1:f395c70:         InterruptedException {
1:f395c70:         Connection con = cf.createConnection();
1:f395c70:         con.start();
1:f395c70:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f395c70:         TemporaryQueue tempQueue = session.createTemporaryQueue();
1:f395c70:         TextMessage msg = session.createTextMessage("Request");
1:f395c70:         msg.setJMSReplyTo(tempQueue);
1:f395c70:         MessageProducer producer = session.createProducer(session.createQueue(serviceQueue));
1:f395c70:         producer.send(msg);
1:f395c70: 
1:f395c70:         // This sleep also seems to matter
1:e6597c4:         Thread.sleep(3000);
1:f395c70: 
1:f395c70:         MessageConsumer consumer = session.createConsumer(tempQueue);
1:f395c70:         Message replyMsg = consumer.receive();
1:e6597c4:         LOG.debug("Reply message: {}", replyMsg);
1:f395c70: 
1:f395c70:         consumer.close();
1:f395c70: 
1:f395c70:         producer.close();
1:f395c70:         session.close();
1:f395c70:         con.close();
1:f395c70:     }
1:f395c70: 
1:f395c70:     public void receiveAndRespondWithMessageIdAsCorrelationId(ConnectionFactory connectionFactory,
1:f395c70:                                                               String queueName) throws JMSException {
1:f395c70:         Connection con = connectionFactory.createConnection();
1:f395c70:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f395c70:         MessageConsumer consumer = session.createConsumer(session.createQueue(queueName));
1:f395c70:         final javax.jms.Message inMessage = consumer.receive();
1:f395c70: 
1:f395c70:         String requestMessageId = inMessage.getJMSMessageID();
1:e6597c4:         LOG.debug("Received message " + requestMessageId);
1:f395c70:         final TextMessage replyMessage = session.createTextMessage("Result");
1:f395c70:         replyMessage.setJMSCorrelationID(inMessage.getJMSMessageID());
1:f395c70:         final MessageProducer producer = session.createProducer(inMessage.getJMSReplyTo());
1:e6597c4:         LOG.debug("Sending reply to " + inMessage.getJMSReplyTo());
1:f395c70:         producer.send(replyMessage);
1:f395c70: 
1:f395c70:         producer.close();
1:f395c70:         consumer.close();
1:f395c70:         session.close();
1:f395c70:         con.close();
1:f395c70:     }
1:f395c70: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: 
1:         cf.stop();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: public class PooledConnectionTempQueueTest extends JmsPoolTestSupport {
1:     @Test(timeout = 60000)
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(3000);
1:         LOG.debug("Reply message: {}", replyMsg);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Received message " + requestMessageId);
1:         LOG.debug("Sending reply to " + inMessage.getJMSReplyTo());
/////////////////////////////////////////////////////////////////////////
commit:f395c70
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
1: 
1: import java.util.concurrent.Executors;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class PooledConnectionTempQueueTest {
1: 
1:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionTempQueueTest.class);
1: 
1:     protected static final String SERVICE_QUEUE = "queue1";
1: 
0:     @Test
1:     public void testTempQueueIssue() throws JMSException, InterruptedException {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         final PooledConnectionFactory cf = new PooledConnectionFactory();
1:         cf.setConnectionFactory(factory);
1: 
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         LOG.info("First connection was {}", connection);
1: 
1:         // This order seems to matter to reproduce the issue
1:         connection.close();
1:         session.close();
1: 
1:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     receiveAndRespondWithMessageIdAsCorrelationId(cf, SERVICE_QUEUE);
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         sendWithReplyToTemp(cf, SERVICE_QUEUE);
1:     }
1: 
1:     private void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException,
1:         InterruptedException {
1:         Connection con = cf.createConnection();
1:         con.start();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue tempQueue = session.createTemporaryQueue();
1:         TextMessage msg = session.createTextMessage("Request");
1:         msg.setJMSReplyTo(tempQueue);
1:         MessageProducer producer = session.createProducer(session.createQueue(serviceQueue));
1:         producer.send(msg);
1: 
1:         // This sleep also seems to matter
0:         Thread.sleep(5000);
1: 
1:         MessageConsumer consumer = session.createConsumer(tempQueue);
1:         Message replyMsg = consumer.receive();
0:         System.out.println(replyMsg.getJMSCorrelationID());
1: 
1:         consumer.close();
1: 
1:         producer.close();
1:         session.close();
1:         con.close();
1:     }
1: 
1:     public void receiveAndRespondWithMessageIdAsCorrelationId(ConnectionFactory connectionFactory,
1:                                                               String queueName) throws JMSException {
1:         Connection con = connectionFactory.createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(session.createQueue(queueName));
1:         final javax.jms.Message inMessage = consumer.receive();
1: 
1:         String requestMessageId = inMessage.getJMSMessageID();
0:         System.out.println("Received message " + requestMessageId);
1:         final TextMessage replyMessage = session.createTextMessage("Result");
1:         replyMessage.setJMSCorrelationID(inMessage.getJMSMessageID());
1:         final MessageProducer producer = session.createProducer(inMessage.getJMSReplyTo());
0:         System.out.println("Sending reply to " + inMessage.getJMSReplyTo());
1:         producer.send(replyMessage);
1: 
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         con.close();
1:     }
1: 
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9f53e2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================