1:5b5d494: /**
1:5b5d494:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5b5d494:  * contributor license agreements.  See the NOTICE file distributed with
1:5b5d494:  * this work for additional information regarding copyright ownership.
1:5b5d494:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5b5d494:  * (the "License"); you may not use this file except in compliance with
1:5b5d494:  * the License.  You may obtain a copy of the License at
1:5b5d494:  *
1:5b5d494:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5b5d494:  *
1:5b5d494:  * Unless required by applicable law or agreed to in writing, software
1:5b5d494:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5b5d494:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b5d494:  * See the License for the specific language governing permissions and
1:5b5d494:  * limitations under the License.
1:5b5d494:  */
1:5b5d494: package org.apache.activemq.bugs;
2:5b5d494: 
1:5219fa1: import static org.junit.Assert.assertNotNull;
1:5219fa1: import static org.junit.Assert.assertTrue;
1:5219fa1: 
1:5b5d494: import javax.jms.Connection;
1:5b5d494: import javax.jms.ConnectionFactory;
1:5b5d494: import javax.jms.JMSException;
1:5b5d494: import javax.jms.MessageConsumer;
1:5b5d494: import javax.jms.Queue;
1:5b5d494: import javax.jms.QueueConnection;
1:5b5d494: import javax.jms.QueueSession;
1:5b5d494: import javax.jms.Session;
1:5b5d494: import javax.jms.TopicConnection;
1:5b5d494: import javax.jms.TopicSession;
1:5b5d494: 
1:5b5d494: import org.apache.activemq.ActiveMQConnectionFactory;
1:5b5d494: import org.apache.activemq.broker.BrokerService;
1:5b5d494: import org.junit.After;
1:5b5d494: import org.junit.Before;
1:5b5d494: import org.junit.Test;
1:5b5d494: 
1:5b5d494: public class AMQ2213Test
1:5b5d494: {
1:5b5d494:     BrokerService broker;
1:5b5d494:     ConnectionFactory factory;
1:5b5d494:     Connection connection;
1:5b5d494:     Session session;
1:5b5d494:     Queue queue;
1:5b5d494:     MessageConsumer consumer;
1:5b5d494: 
1:5b5d494:     public void createBroker(boolean deleteAll) throws Exception {
1:5b5d494:         broker = new BrokerService();
1:5b5d494:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:5b5d494:         broker.setDataDirectory("target/AMQ3145Test");
1:5b5d494:         broker.setUseJmx(true);
1:5b5d494:         broker.getManagementContext().setCreateConnector(false);
1:5b5d494:         broker.addConnector("tcp://localhost:0");
1:5b5d494:         broker.start();
1:5b5d494:         broker.waitUntilStarted();
1:5b5d494:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:5b5d494:         connection = factory.createConnection();
1:5b5d494:         connection.start();
1:5b5d494:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:5b5d494:     }
1:5b5d494: 
1:5b5d494:     @Before
1:5b5d494:     public void createBroker() throws Exception {
1:5b5d494:         createBroker(true);
1:5b5d494:     }
1:5b5d494: 
1:5b5d494:     @After
1:5b5d494:     public void tearDown() throws Exception {
1:5b5d494:         if (consumer != null) {
1:5b5d494:             consumer.close();
1:5b5d494:         }
1:5b5d494:         session.close();
1:5b5d494:         connection.stop();
1:5b5d494:         connection.close();
1:5b5d494:         broker.stop();
1:5b5d494:     }
1:5b5d494: 
1:5b5d494:     @Test
1:5b5d494:     public void testEqualsGenericSession() throws JMSException
1:5b5d494:     {
1:5219fa1:         assertNotNull(this.connection);
1:5b5d494:         Session sess = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5219fa1:         assertTrue(sess.equals(sess));
1:5b5d494:     }
1:5b5d494: 
1:5b5d494:     @Test
1:5b5d494:     public void testEqualsTopicSession() throws JMSException
1:5b5d494:     {
1:5219fa1:         assertNotNull(this.connection);
1:5219fa1:         assertTrue(this.connection instanceof TopicConnection);
1:5b5d494:         TopicSession sess = ((TopicConnection)this.connection).createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:5219fa1:         assertTrue(sess.equals(sess));
1:5b5d494:     }
1:5b5d494: 
1:5b5d494:     @Test
1:5b5d494:     public void testEqualsQueueSession() throws JMSException
1:5b5d494:     {
1:5219fa1:         assertNotNull(this.connection);
1:5219fa1:         assertTrue(this.connection instanceof QueueConnection);
1:5b5d494:         QueueSession sess = ((QueueConnection)this.connection).createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:5219fa1:         assertTrue(sess.equals(sess));
1:5b5d494:     }
1:5b5d494: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(this.connection);
1:         assertTrue(sess.equals(sess));
1:         assertNotNull(this.connection);
1:         assertTrue(this.connection instanceof TopicConnection);
1:         assertTrue(sess.equals(sess));
1:         assertNotNull(this.connection);
1:         assertTrue(this.connection instanceof QueueConnection);
1:         assertTrue(sess.equals(sess));
commit:ef24cc9
commit:5b5d494
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ2213Test
1: {
1:     BrokerService broker;
1:     ConnectionFactory factory;
1:     Connection connection;
1:     Session session;
1:     Queue queue;
1:     MessageConsumer consumer;
1: 
1:     public void createBroker(boolean deleteAll) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:         broker.setDataDirectory("target/AMQ3145Test");
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:         connection = factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (consumer != null) {
1:             consumer.close();
1:         }
1:         session.close();
1:         connection.stop();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testEqualsGenericSession() throws JMSException
1:     {
0:         Assert.assertNotNull(this.connection);
1:         Session sess = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Assert.assertTrue(sess.equals(sess));
1:     }
1: 
1:     @Test
1:     public void testEqualsTopicSession() throws JMSException
1:     {
0:         Assert.assertNotNull(this.connection);
0:         Assert.assertTrue(this.connection instanceof TopicConnection);
1:         TopicSession sess = ((TopicConnection)this.connection).createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Assert.assertTrue(sess.equals(sess));
1:     }
1: 
1:     @Test
1:     public void testEqualsQueueSession() throws JMSException
1:     {
0:         Assert.assertNotNull(this.connection);
0:         Assert.assertTrue(this.connection instanceof QueueConnection);
1:         QueueSession sess = ((QueueConnection)this.connection).createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Assert.assertTrue(sess.equals(sess));
1:     }
1: }
============================================================================