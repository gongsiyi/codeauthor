1:433912f: /**
1:433912f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:433912f:  * contributor license agreements.  See the NOTICE file distributed with
1:433912f:  * this work for additional information regarding copyright ownership.
1:433912f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:433912f:  * (the "License"); you may not use this file except in compliance with
1:433912f:  * the License.  You may obtain a copy of the License at
1:433912f:  *
1:433912f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:433912f:  *
1:433912f:  * Unless required by applicable law or agreed to in writing, software
1:433912f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:433912f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:433912f:  * See the License for the specific language governing permissions and
1:433912f:  * limitations under the License.
1:433912f:  */
1:433912f: package org.apache.activemq.broker.scheduler.memory;
1:433912f: 
1:433912f: import static org.junit.Assert.assertEquals;
1:433912f: 
1:433912f: import java.io.File;
1:433912f: import java.util.ArrayList;
1:433912f: import java.util.List;
1:433912f: 
1:433912f: import org.apache.activemq.broker.scheduler.Job;
1:433912f: import org.apache.activemq.broker.scheduler.JobScheduler;
1:433912f: import org.apache.activemq.util.ByteSequence;
1:433912f: import org.apache.activemq.util.IOHelper;
1:433912f: import org.junit.Test;
1:433912f: import org.slf4j.Logger;
1:433912f: import org.slf4j.LoggerFactory;
1:433912f: 
1:433912f: /**
1:433912f:  *
1:433912f:  */
1:433912f: public class InMemoryJobSchedulerStoreTest {
1:433912f: 
1:433912f:     private static final Logger LOG = LoggerFactory.getLogger(InMemoryJobSchedulerStoreTest.class);
1:433912f: 
1:433912f:     @Test(timeout = 120 * 1000)
1:433912f:     public void testRestart() throws Exception {
1:433912f:         InMemoryJobSchedulerStore store = new InMemoryJobSchedulerStore();
1:433912f:         File directory = new File("target/test/ScheduledDB");
1:433912f:         IOHelper.mkdirs(directory);
1:433912f:         IOHelper.deleteChildren(directory);
1:433912f:         store.setDirectory(directory);
1:433912f:         final int NUMBER = 1000;
1:433912f:         store.start();
1:433912f:         List<ByteSequence> list = new ArrayList<ByteSequence>();
1:433912f:         for (int i = 0; i < NUMBER; i++) {
1:433912f:             ByteSequence buff = new ByteSequence(new String("testjob" + i).getBytes());
1:433912f:             list.add(buff);
1:433912f:         }
1:433912f: 
1:433912f:         JobScheduler js = store.getJobScheduler("test");
1:433912f:         js.startDispatching();
1:433912f:         int count = 0;
1:433912f:         long startTime = 10 * 60 * 1000;
1:433912f:         long period = startTime;
1:433912f:         for (ByteSequence job : list) {
1:433912f:             js.schedule("id:" + (count++), job, "", startTime, period, -1);
1:433912f:         }
1:433912f: 
1:433912f:         List<Job> test = js.getAllJobs();
1:433912f:         LOG.debug("Found {} jobs in the store before restart", test.size());
1:433912f:         assertEquals(list.size(), test.size());
1:433912f:         store.stop();
1:433912f:         store.start();
1:433912f:         js = store.getJobScheduler("test");
1:433912f:         test = js.getAllJobs();
1:433912f:         LOG.debug("Found {} jobs in the store after restart", test.size());
1:433912f:         assertEquals(0, test.size());
1:433912f:     }
1:433912f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler.memory;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.scheduler.Job;
1: import org.apache.activemq.broker.scheduler.JobScheduler;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
1: public class InMemoryJobSchedulerStoreTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(InMemoryJobSchedulerStoreTest.class);
1: 
1:     @Test(timeout = 120 * 1000)
1:     public void testRestart() throws Exception {
1:         InMemoryJobSchedulerStore store = new InMemoryJobSchedulerStore();
1:         File directory = new File("target/test/ScheduledDB");
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         store.setDirectory(directory);
1:         final int NUMBER = 1000;
1:         store.start();
1:         List<ByteSequence> list = new ArrayList<ByteSequence>();
1:         for (int i = 0; i < NUMBER; i++) {
1:             ByteSequence buff = new ByteSequence(new String("testjob" + i).getBytes());
1:             list.add(buff);
1:         }
1: 
1:         JobScheduler js = store.getJobScheduler("test");
1:         js.startDispatching();
1:         int count = 0;
1:         long startTime = 10 * 60 * 1000;
1:         long period = startTime;
1:         for (ByteSequence job : list) {
1:             js.schedule("id:" + (count++), job, "", startTime, period, -1);
1:         }
1: 
1:         List<Job> test = js.getAllJobs();
1:         LOG.debug("Found {} jobs in the store before restart", test.size());
1:         assertEquals(list.size(), test.size());
1:         store.stop();
1:         store.start();
1:         js = store.getJobScheduler("test");
1:         test = js.getAllJobs();
1:         LOG.debug("Found {} jobs in the store after restart", test.size());
1:         assertEquals(0, test.size());
1:     }
1: }
============================================================================