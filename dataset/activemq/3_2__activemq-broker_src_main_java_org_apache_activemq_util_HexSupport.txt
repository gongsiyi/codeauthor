1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0a52fe7:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
5:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to convert to hex from byte arrays and back.
1:5e05df1:  *
1:5e05df1:  *
1:d29ca2a:  */
1:933eb2f: public final class HexSupport {
1:5e05df1: 
1:d29ca2a:     private static final String[] HEX_TABLE = new String[]{
1:d29ca2a:         "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
1:d29ca2a:         "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
1:d29ca2a:         "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
1:d29ca2a:         "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
1:d29ca2a:         "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
1:d29ca2a:         "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
1:d29ca2a:         "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
1:d29ca2a:         "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
1:d29ca2a:         "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
1:d29ca2a:         "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
1:d29ca2a:         "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
1:d29ca2a:         "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
1:d29ca2a:         "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
1:d29ca2a:         "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
1:d29ca2a:         "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
1:d29ca2a:         "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff",
1:d29ca2a:     };
1:0a52fe7:     private static final int[] INT_OFFSETS = new int[]{
1:5e05df1:         24,16,8,0
1:0a52fe7:     };
1:5e05df1: 
1:933eb2f:     private HexSupport() {
1:933eb2f:     }
1:5e05df1: 
1:d29ca2a:     /**
1:d29ca2a:      * @param hex
1:5e05df1:      * @return array of bytes
1:d29ca2a:      */
1:fc00993:     public static byte[] toBytesFromHex(String hex) {
1:d29ca2a:         byte rc[] = new byte[hex.length() / 2];
1:d29ca2a:         for (int i = 0; i < rc.length; i++) {
1:d29ca2a:             String h = hex.substring(i * 2, i * 2 + 2);
1:d29ca2a:             int x = Integer.parseInt(h, 16);
1:d29ca2a:             rc[i] = (byte) x;
2:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:933eb2f: 
1:d29ca2a:     /**
1:d29ca2a:      * @param bytes
1:5e05df1:      * @return string hex value
1:d29ca2a:      */
1:fc00993:     public static String toHexFromBytes(byte[] bytes) {
1:d29ca2a:         StringBuffer rc = new StringBuffer(bytes.length * 2);
1:d29ca2a:         for (int i = 0; i < bytes.length; i++) {
1:d29ca2a:             rc.append(HEX_TABLE[0xFF & bytes[i]]);
1:d29ca2a:         }
1:d29ca2a:         return rc.toString();
1:d29ca2a:     }
1:0a52fe7: 
1:0a52fe7:     /**
1:5e05df1:      *
1:5e05df1:      * @param value
1:0a52fe7:      * @param trim if the leading 0's should be trimmed off.
1:5e05df1:      * @return string hex value
1:0a52fe7:      */
1:0a52fe7:     public static String toHexFromInt(int value, boolean trim) {
1:0a52fe7:         StringBuffer rc = new StringBuffer(INT_OFFSETS.length*2);
1:0a52fe7:         for (int i = 0; i < INT_OFFSETS.length; i++) {
1:5e05df1:             int b = 0xFF & (value>>INT_OFFSETS[i]);
1:5e05df1:             if( !(trim && b == 0) ) {
1:5e05df1:                 rc.append(HEX_TABLE[b]);
1:5e05df1:                 trim=false;
1:5e05df1:             }
1:0a52fe7:         }
1:5e05df1: 
1:0a52fe7:         return rc.toString();
1:0a52fe7:     }
1:0a52fe7: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:         24,16,8,0
1: 
1: 
1:      * @return array of bytes
/////////////////////////////////////////////////////////////////////////
1:      * @return string hex value
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param value
1:      * @return string hex value
1:             int b = 0xFF & (value>>INT_OFFSETS[i]);
1:             if( !(trim && b == 0) ) {
1:                 rc.append(HEX_TABLE[b]);
1:                 trim=false;
1:             }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:0a52fe7
/////////////////////////////////////////////////////////////////////////
1:     private static final int[] INT_OFFSETS = new int[]{
0:     	24,16,8,0
1:     };
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * 
0:      * @param value 
1:      * @param trim if the leading 0's should be trimmed off.
0:      * @return
1:      */
1:     public static String toHexFromInt(int value, boolean trim) {
1:         StringBuffer rc = new StringBuffer(INT_OFFSETS.length*2);
1:         for (int i = 0; i < INT_OFFSETS.length; i++) {
0:         	int b = 0xFF & (value>>INT_OFFSETS[i]);
0:         	if( !(trim && b == 0) ) { 
0:         		rc.append(HEX_TABLE[b]);
0:         		trim=false;
1:         	}
1:         }
1:         return rc.toString();
1:     }
1: 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class HexSupport {
/////////////////////////////////////////////////////////////////////////
1:     private HexSupport() {
1:     }
1:     
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public static byte[] toBytesFromHex(String hex) {
/////////////////////////////////////////////////////////////////////////
1:     public static String toHexFromBytes(byte[] bytes) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: /**
1:  * Used to convert to hex from byte arrays and back.
0:  * 
0:  * @version $Revision: 1.2 $
1:  */
0: public class HexSupport {
1:     
1:     private static final String[] HEX_TABLE = new String[]{
1:         "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
1:         "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
1:         "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
1:         "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
1:         "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
1:         "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
1:         "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
1:         "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
1:         "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
1:         "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
1:         "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
1:         "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
1:         "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
1:         "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
1:         "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
1:         "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff",
1:     };
1:     
1:     /**
1:      * @param hex
0:      * @return
1:      */
0:     static public byte[] toBytesFromHex(String hex) {
1:         byte rc[] = new byte[hex.length() / 2];
1:         for (int i = 0; i < rc.length; i++) {
1:             String h = hex.substring(i * 2, i * 2 + 2);
1:             int x = Integer.parseInt(h, 16);
1:             rc[i] = (byte) x;
1:         }
1:         return rc;
1:     }
1: 
1:     /**
1:      * @param bytes
0:      * @return
1:      */
0:     static public String toHexFromBytes(byte[] bytes) {
1:         StringBuffer rc = new StringBuffer(bytes.length * 2);
1:         for (int i = 0; i < bytes.length; i++) {
1:             rc.append(HEX_TABLE[0xFF & bytes[i]]);
1:         }
1:         return rc.toString();
1:     }
1: 
1: }
============================================================================