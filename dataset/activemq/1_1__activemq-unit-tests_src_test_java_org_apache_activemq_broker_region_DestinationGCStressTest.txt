1:e415d29: /**
1:e415d29:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e415d29:  * contributor license agreements.  See the NOTICE file distributed with
1:e415d29:  * this work for additional information regarding copyright ownership.
1:e415d29:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e415d29:  * (the "License"); you may not use this file except in compliance with
1:e415d29:  * the License.  You may obtain a copy of the License at
1:e415d29:  *
1:e415d29:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e415d29:  *
1:e415d29:  * Unless required by applicable law or agreed to in writing, software
1:e415d29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e415d29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e415d29:  * See the License for the specific language governing permissions and
1:e415d29:  * limitations under the License.
1:e415d29:  */
1:e415d29: package org.apache.activemq.broker.region;
1:e415d29: 
1:e415d29: import org.apache.activemq.ActiveMQConnectionFactory;
1:e415d29: import org.apache.activemq.broker.BrokerService;
1:e415d29: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:e415d29: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e415d29: import org.apache.activemq.command.ActiveMQTopic;
1:e415d29: import org.apache.activemq.util.DefaultTestAppender;
1:6d14e4e: import org.apache.activemq.util.Wait;
1:e415d29: import org.apache.log4j.Appender;
1:e415d29: import org.apache.log4j.Level;
1:e415d29: import org.apache.log4j.spi.LoggingEvent;
1:e415d29: import org.junit.After;
1:e415d29: import org.junit.Before;
1:e415d29: import org.junit.Test;
1:e415d29: import org.slf4j.Logger;
1:e415d29: import org.slf4j.LoggerFactory;
1:e415d29: 
1:e415d29: import javax.jms.Connection;
1:e415d29: import javax.jms.Message;
1:e415d29: import javax.jms.MessageConsumer;
1:e415d29: import javax.jms.MessageProducer;
1:e415d29: import javax.jms.Session;
1:e415d29: import java.util.concurrent.ExecutorService;
1:e415d29: import java.util.concurrent.Executors;
1:e415d29: import java.util.concurrent.TimeUnit;
1:e415d29: import java.util.concurrent.atomic.AtomicBoolean;
1:e415d29: import java.util.concurrent.atomic.AtomicInteger;
1:e415d29: 
1:d86c98a: import static org.junit.Assert.assertEquals;
1:e415d29: import static org.junit.Assert.assertFalse;
1:e415d29: 
1:e415d29: public class DestinationGCStressTest {
1:e415d29: 
1:e415d29:     protected static final Logger logger = LoggerFactory.getLogger(DestinationGCStressTest.class);
1:e415d29: 
1:e415d29: 
1:e415d29:     private BrokerService brokerService;
1:e415d29: 
1:e415d29:     @Before
1:e415d29:     public void setUp() throws Exception {
1:e415d29:         brokerService = createBroker();
1:e415d29:         brokerService.start();
1:e415d29:         brokerService.waitUntilStarted();
1:e415d29:     }
1:0ee4f5b: 
1:e415d29:     @After
1:e415d29:     public void tearDown() throws Exception {
1:e415d29:         if (brokerService != null) {
1:e415d29:             brokerService.stop();
1:e415d29:             brokerService.waitUntilStopped();
1:e415d29:         }
1:e415d29:     }
1:e415d29: 
1:e415d29:     protected BrokerService createBroker() throws Exception {
1:e415d29:         BrokerService broker = new BrokerService();
1:e415d29:         broker.setPersistent(false);
1:e415d29:         broker.setUseJmx(false);
1:e415d29:         broker.setSchedulePeriodForDestinationPurge(1);
1:e415d29:         broker.setMaxPurgedDestinationsPerSweep(100);
1:e415d29:         broker.setAdvisorySupport(false);
1:e415d29: 
1:e415d29:         PolicyEntry entry = new PolicyEntry();
1:e415d29:         entry.setGcInactiveDestinations(true);
1:e415d29:         entry.setInactiveTimeoutBeforeGC(1);
1:e415d29:         PolicyMap map = new PolicyMap();
1:e415d29:         map.setDefaultEntry(entry);
1:e415d29:         broker.setDestinationPolicy(map);
1:e415d29: 
1:e415d29:         return broker;
1:e415d29:     }
1:e415d29: 
1:0ee4f5b:     @Test(timeout = 60000)
1:e415d29:     public void testClashWithPublishAndGC() throws Exception {
1:0ee4f5b: 
1:e415d29:         org.apache.log4j.Logger log4jLogger =
1:e415d29:                 org.apache.log4j.Logger.getLogger(RegionBroker.class);
1:e415d29:         final AtomicBoolean failed = new AtomicBoolean(false);
1:e415d29: 
1:e415d29:         Appender appender = new DefaultTestAppender() {
1:e415d29:             @Override
1:e415d29:             public void doAppend(LoggingEvent event) {
1:e415d29:                 if (event.getLevel().equals(Level.ERROR) && event.getMessage().toString().startsWith("Failed to remove inactive")) {
1:e415d29:                     logger.info("received unexpected log message: " + event.getMessage());
1:e415d29:                     failed.set(true);
1:e415d29:                 }
1:e415d29:             }
1:e415d29:         };
1:e415d29:         log4jLogger.addAppender(appender);
1:e415d29:         try {
1:e415d29: 
1:d86c98a:             final AtomicInteger max = new AtomicInteger(20000);
1:e415d29: 
1:e415d29:             final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:e415d29:             factory.setWatchTopicAdvisories(false);
1:e415d29:             Connection connection = factory.createConnection();
1:e415d29:             connection.start();
1:e415d29:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e415d29: 
1:e415d29:             final MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1:e415d29: 
1:e415d29:             ExecutorService executorService = Executors.newCachedThreadPool();
1:e415d29:             for (int i = 0; i < 1; i++) {
1:e415d29:                 executorService.submit(new Runnable() {
1:0ee4f5b:                     @Override
1:e415d29:                     public void run() {
1:e415d29:                         try {
1:e415d29:                             Connection c = factory.createConnection();
1:e415d29:                             c.start();
1:e415d29:                             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e415d29:                             MessageProducer producer = s.createProducer(null);
1:64b3203:                             Message message = s.createTextMessage();
1:e415d29:                             int j;
1:e415d29:                             while ((j = max.decrementAndGet()) > 0) {
1:e415d29:                                 producer.send(new ActiveMQTopic("A." + j), message);
1:e415d29:                             }
1:e415d29:                         } catch (Exception ignored) {
1:0ee4f5b:                             ignored.printStackTrace();
1:e415d29:                         }
1:e415d29:                     }
1:e415d29:                 });
1:e415d29:             }
1:e415d29: 
1:e415d29:             executorService.shutdown();
1:e415d29:             executorService.awaitTermination(60, TimeUnit.SECONDS);
1:e415d29: 
1:e415d29:             logger.info("Done");
1:6d14e4e: 
1:e415d29:             connection.close();
1:e415d29: 
1:e415d29:         } finally {
1:e415d29:             log4jLogger.removeAppender(appender);
1:e415d29:         }
1:e415d29:         assertFalse("failed on unexpected log event", failed.get());
1:d86c98a: 
1:e415d29:     }
1:d86c98a: 
1:d86c98a:     @Test(timeout = 60000)
1:0ee4f5b:     public void testAddRemoveWildcardWithGc() throws Exception {
1:0ee4f5b: 
1:0ee4f5b:         org.apache.log4j.Logger log4jLogger =
1:0ee4f5b:                 org.apache.log4j.Logger.getLogger(RegionBroker.class);
1:0ee4f5b:         final AtomicBoolean failed = new AtomicBoolean(false);
1:0ee4f5b: 
1:0ee4f5b:         Appender appender = new DefaultTestAppender() {
1:0ee4f5b:             @Override
1:0ee4f5b:             public void doAppend(LoggingEvent event) {
1:0ee4f5b:                 if (event.getLevel().equals(Level.ERROR) && event.getMessage().toString().startsWith("Failed to remove inactive")) {
1:0ee4f5b:                     logger.info("received unexpected log message: " + event.getMessage());
1:0ee4f5b:                     failed.set(true);
1:0ee4f5b:                 }
1:0ee4f5b:             }
1:0ee4f5b:         };
1:0ee4f5b:         log4jLogger.addAppender(appender);
1:0ee4f5b:         try {
1:0ee4f5b: 
1:6d14e4e:             final AtomicInteger max = new AtomicInteger(10000);
1:0ee4f5b: 
1:0ee4f5b:             final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0ee4f5b:             factory.setWatchTopicAdvisories(false);
1:0ee4f5b:             Connection connection = factory.createConnection();
1:0ee4f5b:             connection.start();
1:0ee4f5b:             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ee4f5b: 
1:0ee4f5b:             ExecutorService executorService = Executors.newCachedThreadPool();
1:0ee4f5b:             for (int i = 0; i < 1; i++) {
1:0ee4f5b:                 executorService.submit(new Runnable() {
1:d86c98a:                     @Override
1:0ee4f5b:                     public void run() {
1:0ee4f5b:                         try {
1:0ee4f5b:                             Connection c = factory.createConnection();
1:0ee4f5b:                             c.start();
1:0ee4f5b:                             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ee4f5b:                             MessageProducer producer = s.createProducer(null);
1:0ee4f5b:                             Message message = s.createTextMessage();
1:0ee4f5b:                             int j;
1:0ee4f5b:                             while ((j = max.decrementAndGet()) > 0) {
1:0ee4f5b:                                 producer.send(new ActiveMQTopic("A." + j), message);
1:0ee4f5b:                             }
1:0ee4f5b:                         } catch (Exception ignored) {
1:0ee4f5b:                             ignored.printStackTrace();
1:0ee4f5b:                         }
1:0ee4f5b:                     }
1:0ee4f5b:                 });
1:0ee4f5b:             }
1:0ee4f5b: 
1:0ee4f5b:             executorService.submit(new Runnable() {
1:0ee4f5b:                 @Override
1:0ee4f5b:                 public void run() {
1:d86c98a:                     for (int i = 0; i < 1000; i++) {
1:0ee4f5b:                         try {
1:0ee4f5b:                             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1:0ee4f5b:                             messageConsumer.close();
1:d86c98a: 
1:0ee4f5b:                         } catch (Exception ignored) {
1:0ee4f5b:                         }
1:0ee4f5b:                     }
1:0ee4f5b:                 }
1:0ee4f5b:             });
1:0ee4f5b: 
1:0ee4f5b:             executorService.shutdown();
1:0ee4f5b:             executorService.awaitTermination(60, TimeUnit.SECONDS);
1:0ee4f5b: 
1:0ee4f5b:             logger.info("Done");
1:0ee4f5b: 
1:0ee4f5b: 
1:6d14e4e:             Wait.waitFor(new Wait.Condition() {
1:6d14e4e:                 @Override
1:6d14e4e:                 public boolean isSatisified() throws Exception {
1:6d14e4e:                     int len = ((RegionBroker)brokerService.getRegionBroker()).getTopicRegion().getDestinationMap().size();
1:6d14e4e:                     logger.info("Num topics: " + len);
1:6d14e4e:                     return len == 0;
1:6d14e4e:                 }
1:6d14e4e:             });
1:6d14e4e: 
1:0ee4f5b:             connection.close();
1:0ee4f5b: 
1:0ee4f5b:         } finally {
1:0ee4f5b:             log4jLogger.removeAppender(appender);
1:0ee4f5b:         }
1:0ee4f5b:         assertFalse("failed on unexpected log event", failed.get());
1:e415d29: 
1:0ee4f5b:     }
1:e415d29: 
1:e415d29:     @Test(timeout = 60000)
1:d86c98a:     public void testAllDestsSeeSub() throws Exception {
1:d86c98a: 
1:d86c98a:         final AtomicInteger foundDestWithMissingSub = new AtomicInteger(0);
1:d86c98a: 
1:d86c98a:         final AtomicInteger max = new AtomicInteger(20000);
1:d86c98a: 
1:d86c98a:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:d86c98a:         factory.setWatchTopicAdvisories(false);
1:d86c98a:         Connection connection = factory.createConnection();
1:d86c98a:         connection.start();
1:d86c98a:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d86c98a: 
1:d86c98a:         ExecutorService executorService = Executors.newCachedThreadPool();
1:d86c98a:         for (int i = 0; i < 1; i++) {
1:d86c98a:             executorService.submit(new Runnable() {
1:d86c98a:                 @Override
1:d86c98a:                 public void run() {
1:d86c98a:                     try {
1:d86c98a:                         Connection c = factory.createConnection();
1:d86c98a:                         c.start();
1:d86c98a:                         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d86c98a:                         MessageProducer producer = s.createProducer(null);
1:d86c98a:                         Message message = s.createTextMessage();
1:d86c98a:                         int j;
1:d86c98a:                         while ((j = max.decrementAndGet()) > 0) {
1:d86c98a:                             producer.send(new ActiveMQTopic("A." + j), message);
1:d86c98a:                         }
1:d86c98a:                     } catch (Exception ignored) {
1:d86c98a:                         ignored.printStackTrace();
1:d86c98a:                     }
1:d86c98a:                 }
1:d86c98a:             });
1:d86c98a:         }
1:d86c98a: 
1:d86c98a:         executorService.submit(new Runnable() {
1:e415d29:             @Override
1:d86c98a:             public void run() {
1:d86c98a:                 for (int i = 0; i < 1000; i++) {
1:d86c98a:                     try {
1:d86c98a:                         MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1:d86c98a:                         if (destMissingSub(foundDestWithMissingSub)) {
1:d86c98a:                             break;
1:d86c98a:                         }
1:d86c98a:                         messageConsumer.close();
1:d86c98a: 
1:d86c98a:                     } catch (Exception ignored) {
1:d86c98a:                     }
1:d86c98a:                 }
1:d86c98a:             }
1:d86c98a:         });
1:d86c98a: 
1:d86c98a:         executorService.shutdown();
1:d86c98a:         executorService.awaitTermination(60, TimeUnit.SECONDS);
1:d86c98a:         connection.close();
1:e415d29: 
1:d86c98a:         assertEquals("no dests missing sub", 0, foundDestWithMissingSub.get());
1:d86c98a: 
1:d86c98a:     }
1:e415d29: 
1:d86c98a:     private boolean destMissingSub(AtomicInteger tally) {
1:d86c98a:         for (Destination destination :
1:d86c98a:                 ((RegionBroker)brokerService.getRegionBroker()).getTopicRegion().getDestinationMap().values()) {
1:d86c98a:             if (destination.getConsumers().isEmpty()) {
1:d86c98a:                 tally.incrementAndGet();
1:d86c98a:                 return true;
1:d86c98a:             }
1:d86c98a:         }
1:d86c98a:         return false;
1:d86c98a:     }
1:e415d29: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6d14e4e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:             final AtomicInteger max = new AtomicInteger(10000);
/////////////////////////////////////////////////////////////////////////
1: 
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     int len = ((RegionBroker)brokerService.getRegionBroker()).getTopicRegion().getDestinationMap().size();
1:                     logger.info("Num topics: " + len);
1:                     return len == 0;
1:                 }
1:             });
1: 
commit:d86c98a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:             final AtomicInteger max = new AtomicInteger(20000);
/////////////////////////////////////////////////////////////////////////
1:                     for (int i = 0; i < 1000; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testAllDestsSeeSub() throws Exception {
1: 
1:         final AtomicInteger foundDestWithMissingSub = new AtomicInteger(0);
1: 
1:         final AtomicInteger max = new AtomicInteger(20000);
1: 
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         for (int i = 0; i < 1; i++) {
1:             executorService.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         Connection c = factory.createConnection();
1:                         c.start();
1:                         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         MessageProducer producer = s.createProducer(null);
1:                         Message message = s.createTextMessage();
1:                         int j;
1:                         while ((j = max.decrementAndGet()) > 0) {
1:                             producer.send(new ActiveMQTopic("A." + j), message);
1:                         }
1:                     } catch (Exception ignored) {
1:                         ignored.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 for (int i = 0; i < 1000; i++) {
1:                     try {
1:                         MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1:                         if (destMissingSub(foundDestWithMissingSub)) {
1:                             break;
1:                         }
1:                         messageConsumer.close();
1: 
1:                     } catch (Exception ignored) {
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(60, TimeUnit.SECONDS);
1:         connection.close();
1: 
1:         assertEquals("no dests missing sub", 0, foundDestWithMissingSub.get());
1: 
1:     }
1: 
1:     private boolean destMissingSub(AtomicInteger tally) {
1:         for (Destination destination :
1:                 ((RegionBroker)brokerService.getRegionBroker()).getTopicRegion().getDestinationMap().values()) {
1:             if (destination.getConsumers().isEmpty()) {
1:                 tally.incrementAndGet();
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
commit:0ee4f5b
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testAddRemoveWildcardWithGc() throws Exception {
1: 
1:         org.apache.log4j.Logger log4jLogger =
1:                 org.apache.log4j.Logger.getLogger(RegionBroker.class);
1:         final AtomicBoolean failed = new AtomicBoolean(false);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().equals(Level.ERROR) && event.getMessage().toString().startsWith("Failed to remove inactive")) {
1:                     logger.info("received unexpected log message: " + event.getMessage());
1:                     failed.set(true);
1:                 }
1:             }
1:         };
1:         log4jLogger.addAppender(appender);
1:         try {
1: 
0:             final AtomicInteger max = new AtomicInteger(10000);
1: 
1:             final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:             factory.setWatchTopicAdvisories(false);
1:             Connection connection = factory.createConnection();
1:             connection.start();
1:             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             ExecutorService executorService = Executors.newCachedThreadPool();
1:             for (int i = 0; i < 1; i++) {
1:                 executorService.submit(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             Connection c = factory.createConnection();
1:                             c.start();
1:                             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                             MessageProducer producer = s.createProducer(null);
1:                             Message message = s.createTextMessage();
1:                             int j;
1:                             while ((j = max.decrementAndGet()) > 0) {
1:                                 producer.send(new ActiveMQTopic("A." + j), message);
1:                             }
1:                         } catch (Exception ignored) {
1:                             ignored.printStackTrace();
1:                         }
1:                     }
1:                 });
1:             }
1: 
1:             executorService.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
0:                     for (int i = 0; i < 100; i++) {
1:                         try {
1:                             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1:                             messageConsumer.close();
1: 
1:                         } catch (Exception ignored) {
1:                             ignored.printStackTrace();
1:                         }
1:                     }
1:                 }
1:             });
1: 
1:             executorService.shutdown();
1:             executorService.awaitTermination(60, TimeUnit.SECONDS);
1: 
1:             logger.info("Done");
1: 
1:             connection.close();
1: 
1:         } finally {
1:             log4jLogger.removeAppender(appender);
1:         }
1:         assertFalse("failed on unexpected log event", failed.get());
1: 
1:     }
commit:64b3203
/////////////////////////////////////////////////////////////////////////
1:                             Message message = s.createTextMessage();
commit:e415d29
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: public class DestinationGCStressTest {
1: 
1:     protected static final Logger logger = LoggerFactory.getLogger(DestinationGCStressTest.class);
1: 
1: 
1:     private BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setSchedulePeriodForDestinationPurge(1);
1:         broker.setMaxPurgedDestinationsPerSweep(100);
1:         broker.setAdvisorySupport(false);
1: 
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setGcInactiveDestinations(true);
1:         entry.setInactiveTimeoutBeforeGC(1);
1:         PolicyMap map = new PolicyMap();
1:         map.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(map);
1: 
1:         return broker;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testClashWithPublishAndGC() throws Exception {
1: 
1:         org.apache.log4j.Logger log4jLogger =
1:                 org.apache.log4j.Logger.getLogger(RegionBroker.class);
1:         final AtomicBoolean failed = new AtomicBoolean(false);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().equals(Level.ERROR) && event.getMessage().toString().startsWith("Failed to remove inactive")) {
1:                     logger.info("received unexpected log message: " + event.getMessage());
1:                     failed.set(true);
1:                 }
1:             }
1:         };
1:         log4jLogger.addAppender(appender);
1:         try {
1: 
0:             final AtomicInteger max = new AtomicInteger(20000);
1: 
1:             final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:             factory.setWatchTopicAdvisories(false);
1:             Connection connection = factory.createConnection();
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             final MessageConsumer messageConsumer = session.createConsumer(new ActiveMQTopic(">"));
1: 
1:             ExecutorService executorService = Executors.newCachedThreadPool();
1:             for (int i = 0; i < 1; i++) {
1:                 executorService.submit(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             Connection c = factory.createConnection();
1:                             c.start();
1:                             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                             MessageProducer producer = s.createProducer(null);
0:                             Message message = session.createTextMessage();
1:                             int j;
1:                             while ((j = max.decrementAndGet()) > 0) {
1:                                 producer.send(new ActiveMQTopic("A." + j), message);
1:                             }
1:                         } catch (Exception ignored) {
0:                             ignored.printStackTrace();
1:                         }
1:                     }
1:                 });
1:             }
1: 
1:             executorService.shutdown();
1:             executorService.awaitTermination(60, TimeUnit.SECONDS);
1: 
1:             logger.info("Done");
1: 
1:             connection.close();
1: 
1:         } finally {
1:             log4jLogger.removeAppender(appender);
1:         }
1:         assertFalse("failed on unexpected log event", failed.get());
1: 
1:     }
1: }
============================================================================