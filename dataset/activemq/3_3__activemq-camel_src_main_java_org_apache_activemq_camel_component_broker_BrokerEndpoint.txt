1:b92a315: /**
1:b92a315:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b92a315:  * contributor license agreements.  See the NOTICE file distributed with
1:b92a315:  * this work for additional information regarding copyright ownership.
1:b92a315:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b92a315:  * (the "License"); you may not use this file except in compliance with
1:b92a315:  * the License.  You may obtain a copy of the License at
1:b92a315:  *
1:b92a315:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b92a315:  *
1:b92a315:  * Unless required by applicable law or agreed to in writing, software
1:b92a315:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b92a315:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b92a315:  * See the License for the specific language governing permissions and
1:b92a315:  * limitations under the License.
1:b92a315:  */
1:b92a315: package org.apache.activemq.camel.component.broker;
7:b92a315: 
1:b92a315: import java.util.List;
1:b92a315: import java.util.concurrent.CopyOnWriteArrayList;
1:b92a315: 
1:b92a315: import org.apache.activemq.broker.ProducerBrokerExchange;
1:b92a315: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1:b92a315: import org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry;
1:b92a315: import org.apache.activemq.command.ActiveMQDestination;
1:b92a315: import org.apache.activemq.command.Message;
1:b92a315: import org.apache.camel.Consumer;
1:b92a315: import org.apache.camel.MultipleConsumersSupport;
1:b92a315: import org.apache.camel.Processor;
1:b92a315: import org.apache.camel.Producer;
1:b92a315: import org.apache.camel.Service;
1:b92a315: import org.apache.camel.api.management.ManagedResource;
1:b92a315: import org.apache.camel.impl.DefaultEndpoint;
1:6097401: import org.apache.camel.spi.Metadata;
1:b92a315: import org.apache.camel.spi.UriEndpoint;
1:b92a315: import org.apache.camel.spi.UriParam;
1:b92a315: import org.apache.camel.spi.UriPath;
1:b92a315: import org.apache.camel.util.UnsafeUriCharactersEncoder;
1:b92a315: 
1:b92a315: @ManagedResource(description = "Managed Camel Broker Endpoint")
1:9f04014: @UriEndpoint(scheme = "broker", syntax = "broker:destination", consumerClass = BrokerConsumer.class, title = "Broker", label = "messaging")
1:b92a315: public class BrokerEndpoint extends DefaultEndpoint implements MultipleConsumersSupport, Service {
1:5469d80: 
1:b92a315:     static final String PRODUCER_BROKER_EXCHANGE = "producerBrokerExchange";
1:b92a315: 
1:b92a315:     private MessageInterceptorRegistry messageInterceptorRegistry;
1:b92a315:     private List<MessageInterceptor> messageInterceptorList = new CopyOnWriteArrayList<MessageInterceptor>();
1:b92a315: 
1:6097401:     @UriPath(name = "destination") @Metadata(required = "true")
1:6097401:     private String destinationName;
1:6097401:     private final ActiveMQDestination destination;
1:6097401:     @UriParam
1:6097401:     private final BrokerConfiguration configuration;
1:6097401: 
1:6097401:     public BrokerEndpoint(String uri, BrokerComponent component, String destinationName, ActiveMQDestination destination, BrokerConfiguration configuration) {
1:b92a315:         super(UnsafeUriCharactersEncoder.encode(uri), component);
1:6097401:         this.destinationName = destinationName;
1:b92a315:         this.destination = destination;
1:b92a315:         this.configuration = configuration;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public Producer createProducer() throws Exception {
1:b92a315:         BrokerProducer producer = new BrokerProducer(this);
1:b92a315:         return producer;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public Consumer createConsumer(Processor processor) throws Exception {
1:b92a315:         BrokerConsumer consumer = new BrokerConsumer(this, processor);
1:b92a315:         configureConsumer(consumer);
1:b92a315:         return consumer;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public boolean isSingleton() {
1:b92a315:         return false;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public boolean isMultipleConsumersSupported() {
1:b92a315:         return true;
1:b92a315:     }
1:b92a315: 
1:b92a315:     public ActiveMQDestination getDestination() {
1:b92a315:         return destination;
1:b92a315:     }
1:b92a315: 
1:6097401:     /**
1:6097401:      * The name of the JMS destination
1:6097401:      */
1:6097401:     public String getDestinationName() {
1:6097401:         return destinationName;
1:6097401:     }
1:6097401: 
1:b92a315:     @Override
1:b92a315:     protected void doStart() throws Exception {
1:b92a315:         super.doStart();
1:6097401:         messageInterceptorRegistry = MessageInterceptorRegistry.getInstance().get(configuration.getBrokerName());
1:b92a315:         for (MessageInterceptor messageInterceptor : messageInterceptorList) {
1:b92a315:             addMessageInterceptor(messageInterceptor);
1:b92a315:         }
1:b92a315:         messageInterceptorList.clear();
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     protected void doStop() throws Exception {
1:b92a315:         super.doStop();
1:b92a315:     }
1:b92a315: 
1:b92a315:     protected void addMessageInterceptor(MessageInterceptor messageInterceptor) {
1:b92a315:         if (isStarted()) {
1:b92a315:             messageInterceptorRegistry.addMessageInterceptor(destination, messageInterceptor);
1:b92a315:         } else {
1:b92a315:             messageInterceptorList.add(messageInterceptor);
1:b92a315:         }
1:b92a315:     }
1:b92a315: 
1:b92a315:     protected void removeMessageInterceptor(MessageInterceptor messageInterceptor) {
1:b92a315:         messageInterceptorRegistry.removeMessageInterceptor(destination, messageInterceptor);
1:b92a315:     }
1:b92a315: 
1:b92a315:     protected void inject(ProducerBrokerExchange producerBrokerExchange, Message message) throws Exception {
1:8d31e44:         ProducerBrokerExchange pbe = producerBrokerExchange;
1:b92a315:         if (message != null) {
1:8d31e44:             message.setDestination(destination);
1:8d31e44:             if (producerBrokerExchange != null && producerBrokerExchange.getRegionDestination() != null){
1:8d31e44:                 if (!producerBrokerExchange.getRegionDestination().getActiveMQDestination().equals(destination)){
1:8d31e44:                      //The message broker will create a new ProducerBrokerExchange with the
1:8d31e44:                      //correct region broker set
1:8d31e44:                      pbe = null;
1:8d31e44:                 }
1:b92a315:             }
1:8d31e44: 
1:8d31e44:             messageInterceptorRegistry.injectMessage(pbe, message);
1:b92a315:         }
1:b92a315:     }
1:b92a315: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:9f04014
/////////////////////////////////////////////////////////////////////////
1: @UriEndpoint(scheme = "broker", syntax = "broker:destination", consumerClass = BrokerConsumer.class, title = "Broker", label = "messaging")
commit:6097401
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.spi.Metadata;
0: @UriEndpoint(scheme = "broker", consumerClass = BrokerConsumer.class, syntax = "broker:destination", label = "messaging")
1:     @UriPath(name = "destination") @Metadata(required = "true")
1:     private String destinationName;
1:     private final ActiveMQDestination destination;
1:     @UriParam
1:     private final BrokerConfiguration configuration;
1: 
1:     public BrokerEndpoint(String uri, BrokerComponent component, String destinationName, ActiveMQDestination destination, BrokerConfiguration configuration) {
1:         this.destinationName = destinationName;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The name of the JMS destination
1:      */
1:     public String getDestinationName() {
1:         return destinationName;
1:     }
1: 
1:         messageInterceptorRegistry = MessageInterceptorRegistry.getInstance().get(configuration.getBrokerName());
commit:5469d80
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:rajdavies
-------------------------------------------------------------------------------
commit:8d31e44
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         messageInterceptorRegistry =  MessageInterceptorRegistry.getInstance().get(configuration.getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:         ProducerBrokerExchange pbe = producerBrokerExchange;
1:             message.setDestination(destination);
1:             if (producerBrokerExchange != null && producerBrokerExchange.getRegionDestination() != null){
1:                 if (!producerBrokerExchange.getRegionDestination().getActiveMQDestination().equals(destination)){
1:                      //The message broker will create a new ProducerBrokerExchange with the
1:                      //correct region broker set
1:                      pbe = null;
1:                 }
1: 
1:             messageInterceptorRegistry.injectMessage(pbe, message);
author:Robert Davies
-------------------------------------------------------------------------------
commit:b92a315
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component.broker;
1: 
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1: import org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry;
0: import org.apache.activemq.broker.view.MessageBrokerView;
0: import org.apache.activemq.broker.view.MessageBrokerViewRegistry;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.camel.Consumer;
1: import org.apache.camel.MultipleConsumersSupport;
1: import org.apache.camel.Processor;
1: import org.apache.camel.Producer;
1: import org.apache.camel.Service;
1: import org.apache.camel.api.management.ManagedResource;
1: import org.apache.camel.impl.DefaultEndpoint;
1: import org.apache.camel.spi.UriEndpoint;
1: import org.apache.camel.spi.UriParam;
1: import org.apache.camel.spi.UriPath;
1: import org.apache.camel.util.UnsafeUriCharactersEncoder;
1: 
1: @ManagedResource(description = "Managed Camel Broker Endpoint")
0: @UriEndpoint(scheme = "broker", consumerClass = BrokerConsumer.class)
1: 
1: public class BrokerEndpoint extends DefaultEndpoint implements MultipleConsumersSupport, Service {
1:     static final String PRODUCER_BROKER_EXCHANGE = "producerBrokerExchange";
1: 
0:     @UriParam
0:     private final BrokerConfiguration configuration;
0:     private MessageBrokerView messageBrokerView;
1:     private MessageInterceptorRegistry messageInterceptorRegistry;
1: 
1: 
0:     @UriPath
0:     private final ActiveMQDestination destination;
1:     private List<MessageInterceptor> messageInterceptorList = new CopyOnWriteArrayList<MessageInterceptor>();
1: 
0:     public BrokerEndpoint(String uri, BrokerComponent component, ActiveMQDestination destination, BrokerConfiguration configuration) {
1:         super(UnsafeUriCharactersEncoder.encode(uri), component);
1:         this.destination = destination;
1:         this.configuration = configuration;
1:     }
1: 
1:     @Override
1:     public Producer createProducer() throws Exception {
1:         BrokerProducer producer = new BrokerProducer(this);
1:         return producer;
1:     }
1: 
1:     @Override
1:     public Consumer createConsumer(Processor processor) throws Exception {
1:         BrokerConsumer consumer = new BrokerConsumer(this, processor);
1:         configureConsumer(consumer);
1:         return consumer;
1:     }
1: 
1: 
1:     @Override
1:     public boolean isSingleton() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isMultipleConsumersSupported() {
1:         return true;
1:     }
1: 
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         super.doStart();
0:         messageBrokerView = MessageBrokerViewRegistry.getInstance().lookup(configuration.getBrokerName());
0:         messageInterceptorRegistry = new MessageInterceptorRegistry(messageBrokerView.getBrokerService());
1:         for (MessageInterceptor messageInterceptor : messageInterceptorList) {
1:             addMessageInterceptor(messageInterceptor);
1:         }
1:         messageInterceptorList.clear();
1:     }
1: 
1:     @Override
1:     protected void doStop() throws Exception {
1:         super.doStop();
1:     }
1: 
1:     protected void addMessageInterceptor(MessageInterceptor messageInterceptor) {
1:         if (isStarted()) {
1:             messageInterceptorRegistry.addMessageInterceptor(destination, messageInterceptor);
1:         } else {
1:             messageInterceptorList.add(messageInterceptor);
1:         }
1:     }
1: 
1:     protected void removeMessageInterceptor(MessageInterceptor messageInterceptor) {
1:         messageInterceptorRegistry.removeMessageInterceptor(destination, messageInterceptor);
1: 
1:     }
1: 
1:     protected void inject(ProducerBrokerExchange producerBrokerExchange, Message message) throws Exception {
1:         if (message != null) {
0:             if (message.getDestination() == null) {
0:                 message.setDestination(destination);
1:             }
0:             messageInterceptorRegistry.injectMessage(producerBrokerExchange, message);
1:         }
1:     }
1: }
============================================================================