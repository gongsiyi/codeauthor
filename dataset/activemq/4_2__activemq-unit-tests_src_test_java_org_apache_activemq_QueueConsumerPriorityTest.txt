1:2a153b0: /**
1:2a153b0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a153b0:  * contributor license agreements.  See the NOTICE file distributed with
1:2a153b0:  * this work for additional information regarding copyright ownership.
1:2a153b0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a153b0:  * (the "License"); you may not use this file except in compliance with
1:2a153b0:  * the License.  You may obtain a copy of the License at
1:2a153b0:  *
1:2a153b0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a153b0:  *
1:2a153b0:  * Unless required by applicable law or agreed to in writing, software
1:2a153b0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a153b0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a153b0:  * See the License for the specific language governing permissions and
1:2a153b0:  * limitations under the License.
1:2a153b0:  */
1:2a153b0: package org.apache.activemq;
6:2a153b0: 
1:2a153b0: import javax.jms.Connection;
1:2a153b0: import javax.jms.ConnectionFactory;
1:2a153b0: import javax.jms.JMSException;
1:2a153b0: import javax.jms.Message;
1:2a153b0: import javax.jms.MessageConsumer;
1:2a153b0: import javax.jms.MessageProducer;
1:2a153b0: import javax.jms.Session;
1:2a153b0: 
1:2a153b0: import junit.framework.TestCase;
1:c7d559f: 
1:2a153b0: import org.apache.activemq.command.ActiveMQQueue;
1:2a153b0: 
1:2a153b0: public class QueueConsumerPriorityTest extends TestCase {
1:2a153b0: 
1:2a153b0:     private static final String VM_BROKER_URL = "vm://localhost?broker.persistent=false&broker.useJmx=true";
1:2a153b0: 
1:2a153b0:     public QueueConsumerPriorityTest(String name) {
1:2a153b0:         super(name);
1:2a153b0:     }
1:2a153b0: 
1:c7d559f:     @Override
1:2a153b0:     protected void setUp() throws Exception {
1:2a153b0:         super.setUp();
1:2a153b0:     }
1:2a153b0: 
1:c7d559f:     @Override
1:2a153b0:     protected void tearDown() throws Exception {
1:2a153b0:         super.tearDown();
1:2a153b0:     }
1:2a153b0: 
1:2a153b0:     private Connection createConnection(final boolean start) throws JMSException {
1:2a153b0:         ConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:2a153b0:         Connection conn = cf.createConnection();
1:2a153b0:         if (start) {
1:2a153b0:             conn.start();
1:2a153b0:         }
1:2a153b0:         return conn;
1:2a153b0:     }
1:2a153b0: 
1:2a153b0:     public void testQueueConsumerPriority() throws JMSException, InterruptedException {
1:2a153b0:         Connection conn = createConnection(true);
1:2a153b0: 
1:2a153b0:         Session consumerLowPriority = null;
1:2a153b0:         Session consumerHighPriority = null;
1:2a153b0:         Session senderSession = null;
1:2a153b0: 
1:2a153b0:         try {
1:2a153b0: 
1:2a153b0:             consumerLowPriority = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a153b0:             consumerHighPriority = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c7d559f:             assertNotNull(consumerHighPriority);
1:2a153b0:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a153b0:             String queueName = getClass().getName();
1:2a153b0:             ActiveMQQueue low = new ActiveMQQueue(queueName+"?consumer.priority=1");
1:2a153b0:             MessageConsumer lowConsumer = consumerLowPriority.createConsumer(low);
1:2a153b0: 
1:2a153b0:             ActiveMQQueue high = new ActiveMQQueue(queueName+"?consumer.priority=2");
1:2a153b0:             MessageConsumer highConsumer = consumerLowPriority.createConsumer(high);
1:2a153b0: 
1:2a153b0:             ActiveMQQueue senderQueue = new ActiveMQQueue(queueName);
1:2a153b0: 
1:2a153b0:             MessageProducer producer = senderSession.createProducer(senderQueue);
1:2a153b0: 
1:2a153b0:             Message msg = senderSession.createTextMessage("test");
1:2a153b0:             for (int i =0; i< 10000;i++) {
1:2a153b0:                 producer.send(msg);
1:c7d559f:                 assertNotNull("null on iteration: " + i, highConsumer.receive(500));
1:2a153b0:             }
1:c7d559f:             assertNull(lowConsumer.receive(2000));
1:c7d559f: 
1:2a153b0:         } finally {
1:2a153b0:             conn.close();
1:2a153b0:         }
1:2a153b0:     }
1:2a153b0: }
1:2a153b0: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(consumerHighPriority);
/////////////////////////////////////////////////////////////////////////
1:                 assertNotNull("null on iteration: " + i, highConsumer.receive(500));
1:             assertNull(lowConsumer.receive(2000));
1: 
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:2c73c3d
/////////////////////////////////////////////////////////////////////////
0:                 Assert.assertNotNull("null on iteration: " + i, highConsumer.receive(500));
0:             Assert.assertNull(lowConsumer.receive(2000));
commit:2407a7b
/////////////////////////////////////////////////////////////////////////
0:                 Assert.assertNotNull("null on iteration: " + i, highConsumer.receive(100));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fee7f6a
/////////////////////////////////////////////////////////////////////////
0:                 Assert.assertNotNull("null on iteration: " + i, highConsumer.receive(200));
author:Robert Davies
-------------------------------------------------------------------------------
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import junit.framework.Assert;
1: import junit.framework.TestCase;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: public class QueueConsumerPriorityTest extends TestCase {
1: 
1:     private static final String VM_BROKER_URL = "vm://localhost?broker.persistent=false&broker.useJmx=true";
1: 
1:     public QueueConsumerPriorityTest(String name) {
1:         super(name);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     private Connection createConnection(final boolean start) throws JMSException {
1:         ConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:         Connection conn = cf.createConnection();
1:         if (start) {
1:             conn.start();
1:         }
1:         return conn;
1:     }
1: 
1:     public void testQueueConsumerPriority() throws JMSException, InterruptedException {
1:         Connection conn = createConnection(true);
1: 
1:         Session consumerLowPriority = null;
1:         Session consumerHighPriority = null;
1:         Session senderSession = null;
1: 
1:         try {
1: 
1:             consumerLowPriority = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             consumerHighPriority = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             String queueName = getClass().getName();
1:             ActiveMQQueue low = new ActiveMQQueue(queueName+"?consumer.priority=1");
1:             MessageConsumer lowConsumer = consumerLowPriority.createConsumer(low);
1: 
1:             ActiveMQQueue high = new ActiveMQQueue(queueName+"?consumer.priority=2");
1:             MessageConsumer highConsumer = consumerLowPriority.createConsumer(high);
1: 
1:             ActiveMQQueue senderQueue = new ActiveMQQueue(queueName);
1: 
1:             MessageProducer producer = senderSession.createProducer(senderQueue);
1: 
1:             Message msg = senderSession.createTextMessage("test");
1:             for (int i =0; i< 10000;i++) {
1:                 producer.send(msg);
0:                 Assert.assertNotNull(highConsumer.receive(100));
1:             }
0:             Assert.assertNull( lowConsumer.receive(500));
1:             
1:            
1:         } finally {
1:             conn.close();
1:         }
1: 
1:     }
1: 
1: 
1: }
1: 
============================================================================