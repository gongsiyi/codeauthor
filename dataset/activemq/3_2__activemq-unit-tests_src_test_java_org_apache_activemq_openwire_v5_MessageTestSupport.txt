1:3b08860: /**
1:3b08860:  *
1:3b08860:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3b08860:  * contributor license agreements.  See the NOTICE file distributed with
1:3b08860:  * this work for additional information regarding copyright ownership.
1:3b08860:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3b08860:  * (the "License"); you may not use this file except in compliance with
1:3b08860:  * the License.  You may obtain a copy of the License at
1:3b08860:  *
1:3b08860:  * http://www.apache.org/licenses/LICENSE-2.0
1:3b08860:  *
1:3b08860:  * Unless required by applicable law or agreed to in writing, software
1:3b08860:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3b08860:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3b08860:  * See the License for the specific language governing permissions and
1:3b08860:  * limitations under the License.
1:3b08860:  */
1:3b08860: package org.apache.activemq.openwire.v5;
2:3b08860: 
1:3b08860: import org.apache.activemq.command.*;
1:3b08860: 
1:3b08860: 
1:3b08860: /**
1:3b08860:  * Test case for the OpenWire marshalling for Message
1:3b08860:  *
1:3b08860:  *
1:3b08860:  * NOTE!: This file is auto generated - do not modify!
1:3b08860:  *        if you need to make a change, please see the modify the groovy scripts in the
1:3b08860:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:3b08860:  *        this file.
1:0bbc0ac:  *
1:3b08860:  * 
1:3b08860:  */
1:3b08860: public abstract class MessageTestSupport extends BaseCommandTestSupport {
1:3b08860: 
1:3b08860: 
1:3b08860:     protected void populateObject(Object object) throws Exception {
1:3b08860:         super.populateObject(object);
1:3b08860:         Message info = (Message) object;
1:3b08860: 
1:3b08860:         info.setProducerId(createProducerId("ProducerId:1"));
1:3b08860:         info.setDestination(createActiveMQDestination("Destination:2"));
1:3b08860:         info.setTransactionId(createTransactionId("TransactionId:3"));
1:3b08860:         info.setOriginalDestination(createActiveMQDestination("OriginalDestination:4"));
1:3b08860:         info.setMessageId(createMessageId("MessageId:5"));
1:3b08860:         info.setOriginalTransactionId(createTransactionId("OriginalTransactionId:6"));
1:3b08860:         info.setGroupID("GroupID:7");
1:3b08860:         info.setGroupSequence(1);
1:3b08860:         info.setCorrelationId("CorrelationId:8");
1:3b08860:         info.setPersistent(true);
1:3b08860:         info.setExpiration(1);
1:3b08860:         info.setPriority((byte) 1);
1:3b08860:         info.setReplyTo(createActiveMQDestination("ReplyTo:9"));
1:3b08860:         info.setTimestamp(2);
1:3b08860:         info.setType("Type:10");
1:3b08860:         {
1:3b08860:             byte data[] = "Content:11".getBytes();
1:3b08860:             info.setContent(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1:3b08860: }
1:3b08860:         {
1:3b08860:             byte data[] = "MarshalledProperties:12".getBytes();
1:3b08860:             info.setMarshalledProperties(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1:3b08860: }
1:3b08860:         info.setDataStructure(createDataStructure("DataStructure:13"));
1:3b08860:         info.setTargetConsumerId(createConsumerId("TargetConsumerId:14"));
1:3b08860:         info.setCompressed(false);
1:3b08860:         info.setRedeliveryCounter(2);
1:3b08860:         {
1:3b08860:             BrokerId value[] = new BrokerId[2];
1:3b08860:             for( int i=0; i < 2; i++ ) {
1:3b08860:                 value[i] = createBrokerId("BrokerPath:15");
1:3b08860:             }
1:3b08860:             info.setBrokerPath(value);
1:3b08860:         }
1:3b08860:         info.setArrival(3);
1:3b08860:         info.setUserID("UserID:16");
1:3b08860:         info.setRecievedByDFBridge(true);
1:3b08860:         info.setDroppable(false);
1:3b08860:         {
1:3b08860:             BrokerId value[] = new BrokerId[2];
1:3b08860:             for( int i=0; i < 2; i++ ) {
1:3b08860:                 value[i] = createBrokerId("Cluster:17");
1:3b08860:             }
1:3b08860:             info.setCluster(value);
1:3b08860:         }
1:3b08860:         info.setBrokerInTime(4);
1:3b08860:         info.setBrokerOutTime(5);
1:3b08860:     }
1:3b08860: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:3b08860
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v5;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
1: 
0: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: /**
1:  * Test case for the OpenWire marshalling for Message
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public abstract class MessageTestSupport extends BaseCommandTestSupport {
1: 
1: 
1:     protected void populateObject(Object object) throws Exception {
1:         super.populateObject(object);
1:         Message info = (Message) object;
1: 
1:         info.setProducerId(createProducerId("ProducerId:1"));
1:         info.setDestination(createActiveMQDestination("Destination:2"));
1:         info.setTransactionId(createTransactionId("TransactionId:3"));
1:         info.setOriginalDestination(createActiveMQDestination("OriginalDestination:4"));
1:         info.setMessageId(createMessageId("MessageId:5"));
1:         info.setOriginalTransactionId(createTransactionId("OriginalTransactionId:6"));
1:         info.setGroupID("GroupID:7");
1:         info.setGroupSequence(1);
1:         info.setCorrelationId("CorrelationId:8");
1:         info.setPersistent(true);
1:         info.setExpiration(1);
1:         info.setPriority((byte) 1);
1:         info.setReplyTo(createActiveMQDestination("ReplyTo:9"));
1:         info.setTimestamp(2);
1:         info.setType("Type:10");
1:         {
1:             byte data[] = "Content:11".getBytes();
1:             info.setContent(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1: }
1:         {
1:             byte data[] = "MarshalledProperties:12".getBytes();
1:             info.setMarshalledProperties(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1: }
1:         info.setDataStructure(createDataStructure("DataStructure:13"));
1:         info.setTargetConsumerId(createConsumerId("TargetConsumerId:14"));
1:         info.setCompressed(false);
1:         info.setRedeliveryCounter(2);
1:         {
1:             BrokerId value[] = new BrokerId[2];
1:             for( int i=0; i < 2; i++ ) {
1:                 value[i] = createBrokerId("BrokerPath:15");
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         info.setArrival(3);
1:         info.setUserID("UserID:16");
1:         info.setRecievedByDFBridge(true);
1:         info.setDroppable(false);
1:         {
1:             BrokerId value[] = new BrokerId[2];
1:             for( int i=0; i < 2; i++ ) {
1:                 value[i] = createBrokerId("Cluster:17");
1:             }
1:             info.setCluster(value);
1:         }
1:         info.setBrokerInTime(4);
1:         info.setBrokerOutTime(5);
1:     }
1: }
============================================================================