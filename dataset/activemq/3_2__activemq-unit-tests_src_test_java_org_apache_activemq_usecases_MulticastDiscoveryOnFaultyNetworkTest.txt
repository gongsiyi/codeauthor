1:6b4509c: /**
1:6b4509c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b4509c:  * contributor license agreements.  See the NOTICE file distributed with
1:6b4509c:  * this work for additional information regarding copyright ownership.
1:6b4509c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b4509c:  * (the "License"); you may not use this file except in compliance with
1:6b4509c:  * the License.  You may obtain a copy of the License at
1:6b4509c:  *
1:6b4509c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6b4509c:  *
1:6b4509c:  * Unless required by applicable law or agreed to in writing, software
1:6b4509c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b4509c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b4509c:  * See the License for the specific language governing permissions and
1:6b4509c:  * limitations under the License.
1:6b4509c:  */
1:6b4509c: package org.apache.activemq.usecases;
3:6b4509c: 
1:6b4509c: import java.net.URI;
1:6b4509c: import java.util.List;
1:6b4509c: 
1:6b4509c: import javax.jms.Destination;
1:6b4509c: import javax.jms.MessageConsumer;
1:6b4509c: import javax.jms.TextMessage;
1:6b4509c: 
1:6b4509c: import junit.framework.Test;
1:6b4509c: 
1:6b4509c: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:6b4509c: import org.apache.activemq.broker.BrokerService;
1:6b4509c: import org.apache.activemq.broker.TransportConnector;
1:6b4509c: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:6b4509c: import org.apache.activemq.network.NetworkConnector;
1:6b4509c: import org.apache.activemq.util.MessageIdList;
1:6b4509c: 
1:6b4509c: 
1:6b4509c: public class MulticastDiscoveryOnFaultyNetworkTest extends JmsMultipleBrokersTestSupport {
1:6b4509c:     protected static final int MESSAGE_COUNT = 200;
1:6b4509c:     private static final String HUB = "HubBroker";
1:6b4509c:     private static final String SPOKE = "SpokeBroker";
1:e5d616d:     public boolean useDuplexNetworkBridge = true;
1:e5d616d:     public boolean useStaticDiscovery = false;
1:6b4509c: 
1:6b4509c:     public void initCombosForTestSendOnAFaultyTransport() {
1:6b4509c:         addCombinationValues( "useDuplexNetworkBridge", new Object[]{ Boolean.TRUE , Boolean.FALSE } );
1:e5d616d:         addCombinationValues( "useStaticDiscovery", new Object[]{ Boolean.TRUE , Boolean.FALSE } );
3:6b4509c:     }
1:6b4509c:     
1:6b4509c:     public void testSendOnAFaultyTransport() throws Exception {
1:6b4509c:         bridgeBrokers(SPOKE, HUB);
1:6b4509c: 
1:6b4509c:         startAllBrokers();
1:6b4509c: 
1:6b4509c:         // Setup destination
1:6b4509c:         Destination dest = createDestination("TEST.FOO", false);
1:6b4509c:         
1:6b4509c:         // Setup consumers
1:6b4509c:         MessageConsumer client = createConsumer(HUB, dest);
1:6b4509c:         
1:6b4509c:         // allow subscription information to flow back to Spoke
1:6b4509c:         sleep(600);
1:6b4509c:         
1:6b4509c:         // Send messages
1:6b4509c:         sendMessages(SPOKE, dest, MESSAGE_COUNT);
1:6b4509c: 
1:6b4509c:         MessageIdList msgs = getConsumerMessages(HUB, client);
1:6b4509c: 	msgs.setMaximumDuration(200000L);
1:6b4509c:         msgs.waitForMessagesToArrive(MESSAGE_COUNT);
1:6b4509c: 
1:6b4509c:         assertTrue("At least message " + MESSAGE_COUNT + 
1:6b4509c:                 " must be recieved, duplicates are expected, count=" + msgs.getMessageCount(),
1:6b4509c:                 MESSAGE_COUNT <= msgs.getMessageCount());
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     
1:6b4509c:     @Override
1:6b4509c:     protected void startAllBrokers() throws Exception {
1:6b4509c:         // Ensure HUB is started first so bridge will be active from the get go
1:6b4509c:         BrokerItem brokerItem = brokers.get(HUB);
1:6b4509c:         brokerItem.broker.start();
1:6b4509c:         brokerItem = brokers.get(SPOKE);
1:6b4509c:         brokerItem.broker.start();
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     public void setUp() throws Exception {
1:6b4509c:         super.setAutoFail(true);
1:6b4509c:         super.setUp();
1:6b4509c:         final String options = "?persistent=false&useJmx=false&deleteAllMessagesOnStartup=true";
1:6b4509c:         createBroker(new URI("broker:(tcpfaulty://localhost:61617)/" + HUB + options));
1:6b4509c:         createBroker(new URI("broker:(tcpfaulty://localhost:61616)/" + SPOKE + options));
1:6b4509c:     }
1:6b4509c:     
1:6b4509c:     public static Test suite() {
1:6b4509c:         return suite(MulticastDiscoveryOnFaultyNetworkTest.class);
1:6b4509c:     }
1:6b4509c:        
1:6b4509c:     @Override
1:6b4509c:     protected void onSend(int i, TextMessage msg) {
1:6b4509c:         sleep(50);
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     private void sleep(int milliSecondTime) {
1:6b4509c:         try {
1:6b4509c:             Thread.sleep(milliSecondTime);
1:6b4509c:         } catch (InterruptedException igonred) {
1:6b4509c:         }    
1:6b4509c:     }
1:6b4509c: 
1:6b4509c: 
1:6b4509c:     @Override
1:9041c3f:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
1:e5d616d:         String networkDisoveryUrlString = useStaticDiscovery ?
1:e5d616d:                 "static:(" + remoteBroker.getTransportConnectors().get(0).getPublishableConnectString() + ")?useExponentialBackOff=false" :
1:e5d616d:                 "multicast://default?group=TESTERIC&useLocalHost=false";
1:e5d616d: 
1:e5d616d:         DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI(networkDisoveryUrlString));
1:6b4509c:         connector.setDynamicOnly(dynamicOnly);
1:6b4509c:         connector.setNetworkTTL(networkTTL);
1:e5d616d:         connector.setDuplex(useDuplexNetworkBridge);
1:6b4509c:         maxSetupTime = 2000;
1:e5d616d:         if (!useStaticDiscovery) {
1:e5d616d:             List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:e5d616d:             if (!transportConnectors.isEmpty()) {
1:e5d616d: 		        TransportConnector mCastTrpConnector = ((TransportConnector)transportConnectors.get(0));
1:e5d616d: 		        mCastTrpConnector.setDiscoveryUri(new URI("multicast://default?group=TESTERIC"));
1:e5d616d:             }
1:f232cec:         }
1:e5d616d:         localBroker.addNetworkConnector(connector);
1:f232cec: 	    return connector;
1:6b4509c:     }
1:6b4509c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:e5d616d
/////////////////////////////////////////////////////////////////////////
1:     public boolean useDuplexNetworkBridge = true;
1:     public boolean useStaticDiscovery = false;
1:         addCombinationValues( "useStaticDiscovery", new Object[]{ Boolean.TRUE , Boolean.FALSE } );
/////////////////////////////////////////////////////////////////////////
1:         String networkDisoveryUrlString = useStaticDiscovery ?
1:                 "static:(" + remoteBroker.getTransportConnectors().get(0).getPublishableConnectString() + ")?useExponentialBackOff=false" :
1:                 "multicast://default?group=TESTERIC&useLocalHost=false";
1: 
1:         DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI(networkDisoveryUrlString));
1:         connector.setDuplex(useDuplexNetworkBridge);
1:         if (!useStaticDiscovery) {
1:             List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:             if (!transportConnectors.isEmpty()) {
1: 		        TransportConnector mCastTrpConnector = ((TransportConnector)transportConnectors.get(0));
1: 		        mCastTrpConnector.setDiscoveryUri(new URI("multicast://default?group=TESTERIC"));
1:             }
1:         localBroker.addNetworkConnector(connector);
commit:f232cec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		    mCastTrpConnector = ((TransportConnector)transportConnectors.get(0));
0: 		    mCastTrpConnector.setDiscoveryUri(new URI("multicast://default?group=TESTERIC"));
1: 	    }
1: 	    return connector;
commit:c1acb40
/////////////////////////////////////////////////////////////////////////
0:         DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("multicast://default?group=TESTERIC&useLocalHost=false"));
commit:6b4509c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.List;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport.BrokerItem;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.MessageIdList;
0: import org.apache.activemq.util.SocketProxy;
1: 
1: 
1: public class MulticastDiscoveryOnFaultyNetworkTest extends JmsMultipleBrokersTestSupport {
1:     protected static final int MESSAGE_COUNT = 200;
1:     private static final String HUB = "HubBroker";
1:     private static final String SPOKE = "SpokeBroker";
0:     public boolean useDuplexNetworkBridge;
0:     public boolean sumulateStalledNetwork;
1: 
0:    private TransportConnector mCastTrpConnector;
1:    
1:     public void initCombosForTestSendOnAFaultyTransport() {
1:         addCombinationValues( "useDuplexNetworkBridge", new Object[]{ Boolean.TRUE , Boolean.FALSE } );
0:         addCombinationValues( "sumulateStalledNetwork", new Object[]{ Boolean.TRUE } );
1:     }
1:     
1:     public void testSendOnAFaultyTransport() throws Exception {
1:         bridgeBrokers(SPOKE, HUB);
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", false);
1:         
1:         // Setup consumers
1:         MessageConsumer client = createConsumer(HUB, dest);
1:         
1:         // allow subscription information to flow back to Spoke
1:         sleep(600);
1:         
1:         // Send messages
1:         sendMessages(SPOKE, dest, MESSAGE_COUNT);
1: 
1:         MessageIdList msgs = getConsumerMessages(HUB, client);
1: 	msgs.setMaximumDuration(200000L);
1:         msgs.waitForMessagesToArrive(MESSAGE_COUNT);
1: 
1:         assertTrue("At least message " + MESSAGE_COUNT + 
1:                 " must be recieved, duplicates are expected, count=" + msgs.getMessageCount(),
1:                 MESSAGE_COUNT <= msgs.getMessageCount());
1:     }
1: 
1:     
1:     @Override
1:     protected void startAllBrokers() throws Exception {
1:         // Ensure HUB is started first so bridge will be active from the get go
1:         BrokerItem brokerItem = brokers.get(HUB);
1:         brokerItem.broker.start();
1:         brokerItem = brokers.get(SPOKE);
1:         brokerItem.broker.start();
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         final String options = "?persistent=false&useJmx=false&deleteAllMessagesOnStartup=true";
1:         createBroker(new URI("broker:(tcpfaulty://localhost:61617)/" + HUB + options));
1:         createBroker(new URI("broker:(tcpfaulty://localhost:61616)/" + SPOKE + options));
1:     }
1:     
1:     public static Test suite() {
1:         return suite(MulticastDiscoveryOnFaultyNetworkTest.class);
1:     }
1:        
1:     @Override
1:     protected void onSend(int i, TextMessage msg) {
1:         sleep(50);
1:     }
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }    
1:     }
1: 
1: 
1:     @Override
0:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit) throws Exception {
0:         DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("multicast://default?group=TESTERIC"));
1:         connector.setDynamicOnly(dynamicOnly);
1:         connector.setNetworkTTL(networkTTL);
0:         localBroker.addNetworkConnector(connector);
1:         maxSetupTime = 2000;
0:         if (useDuplexNetworkBridge) {
0:             connector.setDuplex(true);
1:         }
1: 
0:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
0:         if (!transportConnectors.isEmpty()) {
0: 		mCastTrpConnector = ((TransportConnector)transportConnectors.get(0));
0: 		mCastTrpConnector.setDiscoveryUri(new URI("multicast://default?group=TESTERIC"));
1: 	}
0: 	return connector;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9041c3f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
============================================================================