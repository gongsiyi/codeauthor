4:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
4:a107823:  */
1:a107823: package org.apache.activemq.console.command;
33:a107823: 
1:5f1adbe: import java.util.ArrayList;
1:5f1adbe: import java.util.HashSet;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: import java.util.Set;
1:5f1adbe: import java.util.StringTokenizer;
1:a107823: 
1:a107823: import javax.jms.Destination;
1:5f1adbe: 
1:73f9131: import org.apache.activemq.ActiveMQConnectionFactory;
1:5f1adbe: import org.apache.activemq.command.ActiveMQQueue;
1:5f1adbe: import org.apache.activemq.command.ActiveMQTopic;
1:5f1adbe: import org.apache.activemq.console.util.AmqMessagesUtil;
1:a107823: 
1:a107823: public class AmqBrowseCommand extends AbstractAmqCommand {
1:60646c9: 
1:a107823:     public static final String QUEUE_PREFIX = "queue:";
1:a107823:     public static final String TOPIC_PREFIX = "topic:";
1:a107823: 
1:a107823:     public static final String VIEW_GROUP_HEADER = "header:";
1:a107823:     public static final String VIEW_GROUP_CUSTOM = "custom:";
1:5f1adbe:     public static final String VIEW_GROUP_BODY = "body:";
1:a107823: 
1:a107823:     protected String[] helpFile = new String[] {
1:73f9131:         "Task Usage: Main browse [browse-options] <destinations>",
1:a107823:         "Description: Display selected destination's messages.",
1:a107823:         "",
1:a107823:         "Browse Options:",
1:73f9131:         "    --amqurl <url>                Set the broker URL to connect to. Default tcp://localhost:61616",
1:a107823:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
1:a107823:         "                                  the messages selector format.",
1:170a7b5:         "    --factory <className>         Load className as the javax.jms.ConnectionFactory to use for creating connections.",
1:170a7b5:         "    --passwordFactory <className> Load className as the org.apache.activemq.console.command.PasswordFactory",
1:170a7b5:         "                                  for retrieving the password from a keystore.",
1:170a7b5:         "    --user <username>             Username to use for JMS connections.",
1:170a7b5:         "    --password <password>         Password to use for JMS connections.",
1:a107823:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom",
1:a107823:         "                                  message header, or the message body.",
1:a107823:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.",
1:a107823:         "    --version                     Display the version information.",
1:a107823:         "    -h,-?,--help                  Display the browse broker help information.",
1:a107823:         "",
1:a107823:         "Examples:",
1:a107823:         "    Main browse --amqurl tcp://localhost:61616 FOO.BAR",
1:a107823:         "        - Print the message header, custom message header, and message body of all messages in the",
1:a107823:         "          queue FOO.BAR",
1:a107823:         "",
1:a107823:         "    Main browse --amqurl tcp://localhost:61616 -Vheader,body queue:FOO.BAR",
1:a107823:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
1:a107823:         "",
1:a107823:         "    Main browse --amqurl tcp://localhost:61616 -Vheader --view custom:MyField queue:FOO.BAR",
1:a107823:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
1:a107823:         "",
1:e6fa735:         "    Main browse --amqurl tcp://localhost:61616 --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.BAR",
1:a107823:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
1:a107823:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR",
1:a107823:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
1:a107823:         "",
1:896de22:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --password somePass FOO.BAR",
1:170a7b5:         "        - Print the message header, custom message header, and message body of all messages in the",
1:170a7b5:         "          queue FOO.BAR, using someUser as the user name, and somePass as the password",
1:170a7b5:         "",
1:896de22:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --password somePass --factory org.apache.activemq.ActiveMQConnectionFactory --passwordFactory org.apache.activemq.AMQPasswordFactory FOO.BAR",
1:170a7b5:         "        - Print the message header, custom message header, and message body of all messages in the",
1:170a7b5:         "          queue FOO.BAR, using someUser as the user name, org.apache.activemq.AMQFactorySubClass to create JMS connections,",
1:170a7b5:         "          and org.apache.activemq.console.command.DefaultPasswordFactory to turn somePass into the password to be used.",
1:170a7b5:         "",
1:a107823:     };
1:5f1adbe: 
1:5f1adbe:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:5f1adbe:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:5f1adbe:     private final Set<String> groupViews = new HashSet<String>(10);
1:5f1adbe:     private final Set queryViews = new HashSet(10);
1:5f1adbe: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "browse";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Display selected messages in a specified destination.";
1:60646c9:     }
1:60646c9: 
1:5f1adbe:     /**
1:5f1adbe:      * Execute the browse command, which allows you to browse the messages in a
1:5f1adbe:      * given JMS destination
1:5f1adbe:      *
1:5f1adbe:      * @param tokens - command arguments
1:5f1adbe:      * @throws Exception
1:5f1adbe:      */
1:5f1adbe:     protected void runTask(List tokens) throws Exception {
1:5f1adbe:         try {
1:5f1adbe:             // If no destination specified
1:5f1adbe:             if (tokens.isEmpty()) {
1:54eb93e:                 context.printException(new IllegalArgumentException("No JMS destination specified."));
2:5f1adbe:                 return;
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:             // If no broker url specified
1:5f1adbe:             if (getBrokerUrl() == null) {
1:73f9131:                 setBrokerUrl(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:             // Display the messages for each destination
1:5f1adbe:             for (Iterator i = tokens.iterator(); i.hasNext();) {
1:5f1adbe:                 String destName = (String)i.next();
1:5f1adbe:                 Destination dest;
1:5f1adbe: 
1:5f1adbe:                 // If destination has been explicitly specified as a queue
1:5f1adbe:                 if (destName.startsWith(QUEUE_PREFIX)) {
1:5f1adbe:                     dest = new ActiveMQQueue(destName.substring(QUEUE_PREFIX.length()));
1:5f1adbe: 
1:5f1adbe:                     // If destination has been explicitly specified as a topic
1:5f1adbe:                 } else if (destName.startsWith(TOPIC_PREFIX)) {
1:5f1adbe:                     dest = new ActiveMQTopic(destName.substring(TOPIC_PREFIX.length()));
1:5f1adbe: 
1:5f1adbe:                     // By default destination is assumed to be a queue
1:5f1adbe:                 } else {
1:5f1adbe:                     dest = new ActiveMQQueue(destName);
1:5f1adbe:                 }
1:5f1adbe: 
1:5f1adbe:                 // Query for the messages to view
1:e34ec0b:                 List addMsgs = AmqMessagesUtil.getMessages(getConnectionFactory(), dest, queryAddObjects);
1:5f1adbe: 
1:5f1adbe:                 // Query for the messages to remove from view
1:5f1adbe:                 if (querySubObjects.size() > 0) {
1:e34ec0b:                     List subMsgs = AmqMessagesUtil.getMessages(getConnectionFactory(), dest, querySubObjects);
1:5f1adbe:                     addMsgs.removeAll(subMsgs);
1:5f1adbe:                 }
1:5f1adbe: 
1:5f1adbe:                 // Display the messages
1:54eb93e:                 context.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
1:5f1adbe:             }
1:5f1adbe: 
1:73f9131:         } catch (Exception exception) {
1:73f9131:             handleException(exception, getBrokerUrl().toString());
1:5f1adbe:         }
1:5f1adbe:     }
1:5f1adbe: 
1:5f1adbe:     /**
1:5f1adbe:      * Handle the --msgsel, --xmsgsel, --view, -V options.
1:5f1adbe:      *
1:5f1adbe:      * @param token - option token to handle
1:5f1adbe:      * @param tokens - succeeding command arguments
1:5f1adbe:      * @throws Exception
1:5f1adbe:      */
1:5f1adbe:     protected void handleOption(String token, List tokens) throws Exception {
1:5f1adbe: 
1:5f1adbe:         // If token is an additive message selector option
1:5f1adbe:         if (token.startsWith("--msgsel")) {
1:5f1adbe: 
2:5f1adbe:             // If no message selector is specified, or next token is a new
2:5f1adbe:             // option
1:5f1adbe:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:5f1adbe:                 return;
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:5f1adbe:             while (queryTokens.hasMoreTokens()) {
1:5f1adbe:                 queryAddObjects.add(queryTokens.nextToken());
1:5f1adbe:             }
1:5f1adbe:         } else if (token.startsWith("--xmsgsel")) {
1:5f1adbe:             // If token is a substractive message selector option
1:5f1adbe: 
2:a107823:             // If no message selector is specified, or next token is a new option
1:5f1adbe:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:5f1adbe:                 return;
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:5f1adbe:             while (queryTokens.hasMoreTokens()) {
1:5f1adbe:                 querySubObjects.add(queryTokens.nextToken());
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:         } else if (token.startsWith("--view")) {
1:5f1adbe:             // If token is a view option
1:5f1adbe: 
1:5f1adbe:             // If no view specified, or next token is a new option
1:5f1adbe:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
1:5f1adbe:                 return;
1:5f1adbe:             }
1:5f1adbe: 
1:5f1adbe:             // Add the attributes to view
1:5f1adbe:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:5f1adbe:             while (viewTokens.hasMoreTokens()) {
1:5f1adbe:                 String viewToken = viewTokens.nextToken();
1:5f1adbe: 
1:5f1adbe:                 // If view is explicitly specified to belong to the JMS header
1:5f1adbe:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
1:5f1adbe: 
1:5f1adbe:                     // If view is explicitly specified to belong to the JMS
1:5f1adbe:                     // custom header
1:5f1adbe:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
1:5f1adbe: 
1:5f1adbe:                     // If view is explicitly specified to belong to the JMS body
1:5f1adbe:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
1:5f1adbe: 
1:5f1adbe:                     // If no view explicitly specified, let's check the view for
1:5f1adbe:                     // each group
1:5f1adbe:                 } else {
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken);
1:5f1adbe:                 }
1:5f1adbe:             }
1:5f1adbe:         } else if (token.startsWith("-V")) {
1:5f1adbe:             // If token is a predefined group view option
1:5f1adbe:             String viewGroup = token.substring(2);
1:5f1adbe:             // If option is a header group view
1:5f1adbe:             if (viewGroup.equals("header")) {
1:5f1adbe:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
1:5f1adbe: 
1:5f1adbe:                 // If option is a custom header group view
1:5f1adbe:             } else if (viewGroup.equals("custom")) {
1:5f1adbe:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
1:5f1adbe: 
1:5f1adbe:                 // If option is a body group view
1:5f1adbe:             } else if (viewGroup.equals("body")) {
1:5f1adbe:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
1:5f1adbe: 
1:5f1adbe:                 // Unknown group view
1:5f1adbe:             } else {
1:54eb93e:                 context.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
1:5f1adbe:             }
1:5f1adbe:         } else {
1:5f1adbe:             // Let super class handle unknown option
1:5f1adbe:             super.handleOption(token, tokens);
1:5f1adbe:         }
1:5f1adbe:     }
1:5f1adbe: 
1:5f1adbe:     /**
1:5f1adbe:      * Print the help messages for the browse command
1:5f1adbe:      */
1:5f1adbe:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:5f1adbe:     }
1:5f1adbe: 
23:a107823: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:e6fa735
/////////////////////////////////////////////////////////////////////////
1:         "    Main browse --amqurl tcp://localhost:61616 --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.BAR",
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         "Task Usage: Main browse [browse-options] <destinations>",
1:         "    --amqurl <url>                Set the broker URL to connect to. Default tcp://localhost:61616",
/////////////////////////////////////////////////////////////////////////
1:                 setBrokerUrl(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception exception) {
1:             handleException(exception, getBrokerUrl().toString());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "browse";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Display selected messages in a specified destination.";
1:     }
1: 
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("No JMS destination specified."));
0:                 context.printException(new IllegalStateException("No broker url specified. Use the --amqurl option to specify a broker url."));
/////////////////////////////////////////////////////////////////////////
1:                 context.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
0:             context.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.StringTokenizer;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.AmqMessagesUtil;
/////////////////////////////////////////////////////////////////////////
1:     public static final String VIEW_GROUP_BODY = "body:";
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:     private final Set<String> groupViews = new HashSet<String>(10);
1:     private final Set queryViews = new HashSet(10);
1: 
1:     /**
1:      * Execute the browse command, which allows you to browse the messages in a
1:      * given JMS destination
1:      * 
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
1:     protected void runTask(List tokens) throws Exception {
1:         try {
1:             // If no destination specified
1:             if (tokens.isEmpty()) {
0:                 GlobalWriter.printException(new IllegalArgumentException("No JMS destination specified."));
1:                 return;
1:             }
1: 
1:             // If no broker url specified
1:             if (getBrokerUrl() == null) {
0:                 GlobalWriter.printException(new IllegalStateException("No broker url specified. Use the --amqurl option to specify a broker url."));
1:                 return;
1:             }
1: 
1:             // Display the messages for each destination
1:             for (Iterator i = tokens.iterator(); i.hasNext();) {
1:                 String destName = (String)i.next();
1:                 Destination dest;
1: 
1:                 // If destination has been explicitly specified as a queue
1:                 if (destName.startsWith(QUEUE_PREFIX)) {
1:                     dest = new ActiveMQQueue(destName.substring(QUEUE_PREFIX.length()));
1: 
1:                     // If destination has been explicitly specified as a topic
1:                 } else if (destName.startsWith(TOPIC_PREFIX)) {
1:                     dest = new ActiveMQTopic(destName.substring(TOPIC_PREFIX.length()));
1: 
1:                     // By default destination is assumed to be a queue
1:                 } else {
1:                     dest = new ActiveMQQueue(destName);
1:                 }
1: 
1:                 // Query for the messages to view
0:                 List addMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, queryAddObjects);
1: 
1:                 // Query for the messages to remove from view
1:                 if (querySubObjects.size() > 0) {
0:                     List subMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, querySubObjects);
1:                     addMsgs.removeAll(subMsgs);
1:                 }
1: 
1:                 // Display the messages
0:                 GlobalWriter.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
1:             }
1: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
1:      * Handle the --msgsel, --xmsgsel, --view, -V options.
1:      * 
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
1:     protected void handleOption(String token, List tokens) throws Exception {
1: 
1:         // If token is an additive message selector option
1:         if (token.startsWith("--msgsel")) {
1: 
1:             // If no message selector is specified, or next token is a new
1:             // option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 queryAddObjects.add(queryTokens.nextToken());
1:             }
1:         } else if (token.startsWith("--xmsgsel")) {
1:             // If token is a substractive message selector option
1: 
1:             // If no message selector is specified, or next token is a new
1:             // option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 querySubObjects.add(queryTokens.nextToken());
1:             }
1: 
1:         } else if (token.startsWith("--view")) {
1:             // If token is a view option
1: 
1:             // If no view specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
1:                 return;
1:             }
1: 
1:             // Add the attributes to view
1:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (viewTokens.hasMoreTokens()) {
1:                 String viewToken = viewTokens.nextToken();
1: 
1:                 // If view is explicitly specified to belong to the JMS header
1:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
1: 
1:                     // If view is explicitly specified to belong to the JMS
1:                     // custom header
1:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
1: 
1:                     // If view is explicitly specified to belong to the JMS body
1:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
1: 
1:                     // If no view explicitly specified, let's check the view for
1:                     // each group
1:                 } else {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken);
1:                 }
1:             }
1:         } else if (token.startsWith("-V")) {
1:             // If token is a predefined group view option
1:             String viewGroup = token.substring(2);
1:             // If option is a header group view
1:             if (viewGroup.equals("header")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
1: 
1:                 // If option is a custom header group view
1:             } else if (viewGroup.equals("custom")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
1: 
1:                 // If option is a body group view
1:             } else if (viewGroup.equals("body")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
1: 
1:                 // Unknown group view
1:             } else {
0:                 GlobalWriter.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
1:             }
1:         } else {
1:             // Let super class handle unknown option
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.util.AmqMessagesUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: import javax.jms.Destination;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.StringTokenizer;
0: import java.util.Iterator;
1: 
1: public class AmqBrowseCommand extends AbstractAmqCommand {
1:     public static final String QUEUE_PREFIX = "queue:";
1:     public static final String TOPIC_PREFIX = "topic:";
1: 
1:     public static final String VIEW_GROUP_HEADER = "header:";
1:     public static final String VIEW_GROUP_CUSTOM = "custom:";
0:     public static final String VIEW_GROUP_BODY   = "body:";
1: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  groupViews      = new HashSet(10);
0:     private final Set  queryViews      = new HashSet(10);
1: 
1:     /**
0:      * Execute the browse command, which allows you to browse the messages in a given JMS destination
0:      * @param tokens - command arguments
0:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If no destination specified
0:             if (tokens.isEmpty()) {
0:                 GlobalWriter.printException(new IllegalArgumentException("No JMS destination specified."));
0:                 return;
1:             }
1: 
0:             // If no broker url specified
0:             if (getBrokerUrl() == null) {
0:                 GlobalWriter.printException(new IllegalStateException("No broker url specified. Use the --amqurl option to specify a broker url."));
0:                 return;
1:             }
1: 
0:             // Display the messages for each destination
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 String destName = (String)i.next();
0:                 Destination dest;
1: 
0:                 // If destination has been explicitly specified as a queue
0:                 if (destName.startsWith(QUEUE_PREFIX)) {
0:                     dest = new ActiveMQQueue(destName.substring(QUEUE_PREFIX.length()));
1: 
0:                 // If destination has been explicitly specified as a topic
0:                 } else if (destName.startsWith(TOPIC_PREFIX)) {
0:                     dest = new ActiveMQTopic(destName.substring(TOPIC_PREFIX.length()));
1: 
0:                 // By default destination is assumed to be a queue
0:                 } else {
0:                     dest = new ActiveMQQueue(destName);
1:                 }
1: 
0:                 // Query for the messages to view
0:                 List addMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, queryAddObjects);
1: 
0:                 // Query for the messages to remove from view
0:                 if (querySubObjects.size() > 0) {
0:                     List subMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, querySubObjects);
0:                     addMsgs.removeAll(subMsgs);
1:                 }
1: 
0:                 // Display the messages
0:                 GlobalWriter.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
1:             }
1: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
0:      * Handle the --msgsel, --xmsgsel, --view, -V options.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1: 
0:         // If token is an additive message selector option
0:         if (token.startsWith("--msgsel")) {
1: 
1:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
1:             }
1: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 queryAddObjects.add(queryTokens.nextToken());
1:             }
1:         }
1: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
1: 
1:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
1:             }
1: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 querySubObjects.add(queryTokens.nextToken());
1:             }
1: 
1:         }
1: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
1: 
0:             // If no view specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
0:                 return;
1:             }
1: 
0:             // Add the attributes to view
0:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (viewTokens.hasMoreTokens()) {
0:                 String viewToken = viewTokens.nextToken();
1: 
0:                 // If view is explicitly specified to belong to the JMS header
0:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
1: 
0:                 // If view is explicitly specified to belong to the JMS custom header
0:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
1: 
0:                 // If view is explicitly specified to belong to the JMS body
0:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
1: 
0:                 // If no view explicitly specified, let's check the view for each group
0:                 } else {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX   + viewToken);
1:                 }
1:             }
1:         }
1: 
0:         // If token is a predefined group view option
0:         else if (token.startsWith("-V")) {
0:             String viewGroup = token.substring(2);
0:             // If option is a header group view
0:             if (viewGroup.equals("header")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
1: 
0:             // If option is a custom header group view
0:             } else if (viewGroup.equals("custom")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
1: 
0:             // If option is a body group view
0:             } else if (viewGroup.equals("body")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
1: 
0:             // Unknown group view
0:             } else {
0:                 GlobalWriter.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
1:             }
1:         }
1: 
0:         // Let super class handle unknown option
0:         else {
0:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
0:      * Print the help messages for the browse command
1:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
1:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main browse --amqurl <broker url> [browse-options] <destinations>",
1:         "Description: Display selected destination's messages.",
1:         "",
1:         "Browse Options:",
0:         "    --amqurl <url>                Set the broker URL to connect to.",
1:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
1:         "                                  the messages selector format.",
1:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom",
1:         "                                  message header, or the message body.",
1:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.",
1:         "    --version                     Display the version information.",
1:         "    -h,-?,--help                  Display the browse broker help information.",
1:         "",
1:         "Examples:",
1:         "    Main browse --amqurl tcp://localhost:61616 FOO.BAR",
1:         "        - Print the message header, custom message header, and message body of all messages in the",
1:         "          queue FOO.BAR",
1:         "",
1:         "    Main browse --amqurl tcp://localhost:61616 -Vheader,body queue:FOO.BAR",
1:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
1:         "",
1:         "    Main browse --amqurl tcp://localhost:61616 -Vheader --view custom:MyField queue:FOO.BAR",
1:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
1:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR",
1:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
1:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR",
1:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
1:         "",
1:     };
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:896de22
/////////////////////////////////////////////////////////////////////////
1:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --password somePass FOO.BAR",
1:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --password somePass --factory org.apache.activemq.ActiveMQConnectionFactory --passwordFactory org.apache.activemq.AMQPasswordFactory FOO.BAR",
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:             // If no message selector is specified, or next token is a new option
commit:170a7b5
/////////////////////////////////////////////////////////////////////////
1:         "    --factory <className>         Load className as the javax.jms.ConnectionFactory to use for creating connections.",
1:         "    --passwordFactory <className> Load className as the org.apache.activemq.console.command.PasswordFactory",
1:         "                                  for retrieving the password from a keystore.",
1:         "    --user <username>             Username to use for JMS connections.",
1:         "    --password <password>         Password to use for JMS connections.",
/////////////////////////////////////////////////////////////////////////
0:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --pass somePass FOO.BAR",
1:         "        - Print the message header, custom message header, and message body of all messages in the",
1:         "          queue FOO.BAR, using someUser as the user name, and somePass as the password",
1:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 --user someUser --pass somePass --factory org.apache.activemq.ActiveMQConnectionFactory --passwordFactory org.apache.activemq.AMQPasswordFactory FOO.BAR",
1:         "        - Print the message header, custom message header, and message body of all messages in the",
1:         "          queue FOO.BAR, using someUser as the user name, org.apache.activemq.AMQFactorySubClass to create JMS connections,",
1:         "          and org.apache.activemq.console.command.DefaultPasswordFactory to turn somePass into the password to be used.",
1:         "",
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e34ec0b
/////////////////////////////////////////////////////////////////////////
1:                 List addMsgs = AmqMessagesUtil.getMessages(getConnectionFactory(), dest, queryAddObjects);
1:                     List subMsgs = AmqMessagesUtil.getMessages(getConnectionFactory(), dest, querySubObjects);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.console.command;
0: 
0: import org.apache.activemq.console.util.AmqMessagesUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: 
0: import javax.jms.Destination;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.StringTokenizer;
0: import java.util.Iterator;
0: 
0: public class AmqBrowseCommand extends AbstractAmqCommand {
0:     public static final String QUEUE_PREFIX = "queue:";
0:     public static final String TOPIC_PREFIX = "topic:";
0: 
0:     public static final String VIEW_GROUP_HEADER = "header:";
0:     public static final String VIEW_GROUP_CUSTOM = "custom:";
0:     public static final String VIEW_GROUP_BODY   = "body:";
0: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  groupViews      = new HashSet(10);
0:     private final Set  queryViews      = new HashSet(10);
0: 
0:     /**
0:      * Execute the browse command, which allows you to browse the messages in a given JMS destination
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If no destination specified
0:             if (tokens.isEmpty()) {
0:                 GlobalWriter.printException(new IllegalArgumentException("No JMS destination specified."));
0:                 return;
0:             }
0: 
0:             // If no broker url specified
0:             if (getBrokerUrl() == null) {
0:                 GlobalWriter.printException(new IllegalStateException("No broker url specified. Use the --amqurl option to specify a broker url."));
0:                 return;
0:             }
0: 
0:             // Display the messages for each destination
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 String destName = (String)i.next();
0:                 Destination dest;
0: 
0:                 // If destination has been explicitly specified as a queue
0:                 if (destName.startsWith(QUEUE_PREFIX)) {
0:                     dest = new ActiveMQQueue(destName.substring(QUEUE_PREFIX.length()));
0: 
0:                 // If destination has been explicitly specified as a topic
0:                 } else if (destName.startsWith(TOPIC_PREFIX)) {
0:                     dest = new ActiveMQTopic(destName.substring(TOPIC_PREFIX.length()));
0: 
0:                 // By default destination is assumed to be a queue
0:                 } else {
0:                     dest = new ActiveMQQueue(destName);
0:                 }
0: 
0:                 // Query for the messages to view
0:                 List addMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, queryAddObjects);
0: 
0:                 // Query for the messages to remove from view
0:                 if (querySubObjects.size() > 0) {
0:                     List subMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, querySubObjects);
0:                     addMsgs.removeAll(subMsgs);
0:                 }
0: 
0:                 // Display the messages
0:                 GlobalWriter.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
0:             }
0: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Handle the --msgsel, --xmsgsel, --view, -V options.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0: 
0:         // If token is an additive message selector option
0:         if (token.startsWith("--msgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 queryAddObjects.add(queryTokens.nextToken());
0:             }
0:         }
0: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 querySubObjects.add(queryTokens.nextToken());
0:             }
0: 
0:         }
0: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
0: 
0:             // If no view specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
0:                 return;
0:             }
0: 
0:             // Add the attributes to view
0:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (viewTokens.hasMoreTokens()) {
0:                 String viewToken = viewTokens.nextToken();
0: 
0:                 // If view is explicitly specified to belong to the JMS header
0:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
0: 
0:                 // If view is explicitly specified to belong to the JMS custom header
0:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
0: 
0:                 // If view is explicitly specified to belong to the JMS body
0:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
0: 
0:                 // If no view explicitly specified, let's check the view for each group
0:                 } else {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX   + viewToken);
0:                 }
0:             }
0:         }
0: 
0:         // If token is a predefined group view option
0:         else if (token.startsWith("-V")) {
0:             String viewGroup = token.substring(2);
0:             // If option is a header group view
0:             if (viewGroup.equals("header")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
0: 
0:             // If option is a custom header group view
0:             } else if (viewGroup.equals("custom")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
0: 
0:             // If option is a body group view
0:             } else if (viewGroup.equals("body")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
0: 
0:             // Unknown group view
0:             } else {
0:                 GlobalWriter.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
0:             }
0:         }
0: 
0:         // Let super class handle unknown option
0:         else {
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main browse --amqurl <broker url> [browse-options] <destinations>",
0:         "Description: Display selected destination's messages.",
0:         "",
0:         "Browse Options:",
0:         "    --amqurl <url>                Set the broker URL to connect to.",
0:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
0:         "                                  the messages selector format.",
0:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom",
0:         "                                  message header, or the message body.",
0:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main browse --amqurl tcp://localhost:61616 FOO.BAR",
0:         "        - Print the message header, custom message header, and message body of all messages in the",
0:         "          queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 -Vheader,body queue:FOO.BAR",
0:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 -Vheader --view custom:MyField queue:FOO.BAR",
0:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR",
0:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
0:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR",
0:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
0:     };
0: }
============================================================================