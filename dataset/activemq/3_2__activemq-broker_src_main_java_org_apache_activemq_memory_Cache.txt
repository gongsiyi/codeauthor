4:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
4:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
6:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Defines the interface used to cache messages.
1:d29ca2a:  */
1:d29ca2a: public interface Cache {
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Gets an object that was previously <code>put</code> into this object.
1:5e05df1:      *
1:5e05df1:      * @param key
1:f812e34:      * @return null if the object was not previously put or if the object has
1:f812e34:      *         expired out of the cache.
1:f812e34:      */
1:fc00993:     Object get(Object key);
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Puts an object into the cache.
1:5e05df1:      *
1:5e05df1:      * @param key
1:5e05df1:      * @param value
1:f812e34:      */
1:fc00993:     Object put(Object key, Object value);
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Removes an object from the cache.
1:5e05df1:      *
1:5e05df1:      * @param key
1:f812e34:      * @return the object associated with the key if it was still in the cache.
1:f812e34:      */
1:fc00993:     Object remove(Object key);
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Lets a cache know it will not be used any further and that it can release
1:d29ca2a:      * acquired resources
1:d29ca2a:      */
1:fc00993:     void close();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * How big is the cache right now?
1:5e05df1:      *
1:5e05df1:      * @return the size.
1:d29ca2a:      */
1:fc00993:     int size();
1:f812e34: 
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param key
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param key
1:      * @param value
1:      *
1:      * @param key
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return the size.
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Object get(Object key);
/////////////////////////////////////////////////////////////////////////
1:     Object put(Object key, Object value);
/////////////////////////////////////////////////////////////////////////
1:     Object remove(Object key);
1:     void close();
1:     int size();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1:      * Gets an object that was previously <code>put</code> into this object.
1:      * 
0:      * @param msgid
1:      * @return null if the object was not previously put or if the object has
1:      *         expired out of the cache.
1:      */
0:     public Object get(Object key);
1: 
1:     /**
1:      * Puts an object into the cache.
1:      * 
0:      * @param messageID
0:      * @param message
1:      */
0:     public Object put(Object key, Object value);
1: 
1:     /**
1:      * Removes an object from the cache.
1:      * 
0:      * @param messageID
1:      * @return the object associated with the key if it was still in the cache.
1:      */
0:     public Object remove(Object key);
1: 
1:     /**
1:      * Lets a cache know it will not be used any further and that it can release
1:      * 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
1: 
1: /**
1:  * Defines the interface used to cache messages.
0:  *
0:  * @version $Revision$
1:  */
1: public interface Cache {
1:     
1: 	/**
0: 	 * Gets an object that was previously <code>put</code> into this object.   
0: 	 * 
0: 	 * @param msgid
0: 	 * @return null if the object was not previously put or if the object has expired out of the cache.
1: 	 */
0: 	public Object get(Object key);
1: 
1: 	/**
0: 	 * Puts an object into the cache.
0: 	 * 
0: 	 * @param messageID
0: 	 * @param message
1: 	 */
0: 	public Object put(Object key, Object value);
1: 
1: 	/**
0: 	 * Removes an object from the cache.
0: 	 * 
0: 	 * @param messageID
0:      * @return the object associated with the key if it was still in the cache.
1: 	 */
0: 	public Object remove(Object key);
1: 
1:     /**
0:      * Lets a cache know it will not be used any further and that it can release 
1:      * acquired resources
1:      */
0:     public void close();
1: 
1:     /**
1:      * How big is the cache right now?
0:      * @return
1:      */
0:     public int size();
1: 	
0: }
============================================================================