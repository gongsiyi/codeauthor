1:dd1d660: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:dd1d660:  */
1:dd1d660: package org.apache.activemq.util;
6:dd1d660: 
1:a6a6a70: import java.io.Serializable;
1:dd1d660: import java.util.LinkedList;
1:dd1d660: 
1:dd1d660: /**
1:dd1d660:  * Holder for many bitArrays - used for message audit
1:91a0041:  *
1:91a0041:  *
1:dd1d660:  */
1:a6a6a70: public class BitArrayBin implements Serializable {
1:dd1d660: 
1:a6a6a70:     private static final long serialVersionUID = 1L;
1:91a0041:     private final LinkedList<BitArray> list;
1:dd1d660:     private int maxNumberOfArrays;
1:58ae402:     private int firstIndex = -1;  // leave 'int' for old serialization compatibility and introduce new 'long' field
1:9dd11cb:     private long lastInOrderBit=-1;
1:58ae402:     private long longFirstIndex=-1;
1:dd1d660:     /**
1:f812e34:      * Create a BitArrayBin to a certain window size (number of messages to
1:f812e34:      * keep)
1:91a0041:      *
1:dd1d660:      * @param windowSize
1:dd1d660:      */
1:f812e34:     public BitArrayBin(int windowSize) {
1:f812e34:         maxNumberOfArrays = ((windowSize + 1) / BitArray.LONG_SIZE) + 1;
1:f812e34:         maxNumberOfArrays = Math.max(maxNumberOfArrays, 1);
1:f812e34:         list = new LinkedList<BitArray>();
1:f812e34:         for (int i = 0; i < maxNumberOfArrays; i++) {
1:1c4ef90:             list.add(null);
4:dd1d660:         }
1:dd1d660:     }
1:1ee0017: 
1:dd1d660:     /**
1:dd1d660:      * Set a bit
1:91a0041:      *
1:dd1d660:      * @param index
1:dd1d660:      * @param value
1:dd1d660:      * @return true if set
1:dd1d660:      */
1:f812e34:     public boolean setBit(long index, boolean value) {
1:0446404:         boolean answer = false;
1:f812e34:         BitArray ba = getBitArray(index);
1:f812e34:         if (ba != null) {
1:f812e34:             int offset = getOffset(index);
1:f812e34:             if (offset >= 0) {
1:f812e34:                 answer = ba.set(offset, value);
1:1ee0017:             }
1:dd1d660:         }
1:dd1d660:         return answer;
1:dd1d660:     }
1:91a0041: 
1:1ee0017:     /**
1:1ee0017:      * Test if in order
1:1ee0017:      * @param index
1:1ee0017:      * @return true if next message is in order
1:1ee0017:      */
1:1ee0017:     public boolean isInOrder(long index) {
1:9dd11cb:         boolean result = false;
1:9dd11cb:         if (lastInOrderBit == -1) {
1:9dd11cb:             result = true;
1:9dd11cb:         } else {
1:9dd11cb:             result = lastInOrderBit + 1 == index;
1:1ee0017:         }
1:9dd11cb:         lastInOrderBit = index;
1:9dd11cb:         return result;
1:a6a6a70: 
1:1ee0017:     }
1:a6a6a70: 
1:dd1d660:     /**
1:dd1d660:      * Get the boolean value at the index
1:91a0041:      *
1:dd1d660:      * @param index
1:dd1d660:      * @return true/false
1:dd1d660:      */
1:f812e34:     public boolean getBit(long index) {
1:58ae402:         boolean answer = index >= longFirstIndex;
1:f812e34:         BitArray ba = getBitArray(index);
1:f812e34:         if (ba != null) {
1:f812e34:             int offset = getOffset(index);
1:f812e34:             if (offset >= 0) {
1:f812e34:                 answer = ba.get(offset);
1:dd1d660:                 return answer;
1:dd1d660:             }
1:f812e34:         } else {
1:dd1d660:             // gone passed range for previous bins so assume set
1:f812e34:             answer = true;
1:dd1d660:         }
1:dd1d660:         return answer;
1:dd1d660:     }
1:9dd11cb: 
1:dd1d660:     /**
1:dd1d660:      * Get the BitArray for the index
1:91a0041:      *
1:dd1d660:      * @param index
1:dd1d660:      * @return BitArray
1:dd1d660:      */
1:f812e34:     private BitArray getBitArray(long index) {
1:f812e34:         int bin = getBin(index);
1:f812e34:         BitArray answer = null;
1:f812e34:         if (bin >= 0) {
1:0446404:             if (bin >= maxNumberOfArrays) {
1:0446404:                 int overShoot = bin - maxNumberOfArrays + 1;
1:0446404:                 while (overShoot > 0) {
1:0446404:                     list.removeFirst();
1:58ae402:                     longFirstIndex += BitArray.LONG_SIZE;
1:0446404:                     list.add(new BitArray());
1:0446404:                     overShoot--;
1:0446404:                 }
1:91a0041: 
1:0446404:                 bin = maxNumberOfArrays - 1;
1:dd1d660:             }
1:f812e34:             answer = list.get(bin);
1:1c4ef90:             if (answer == null) {
1:1c4ef90:                 answer = new BitArray();
1:1c4ef90:                 list.set(bin, answer);
1:1c4ef90:             }
1:dd1d660:         }
1:dd1d660:         return answer;
1:dd1d660:     }
1:0446404: 
1:dd1d660:     /**
1:dd1d660:      * Get the index of the bin from the total index
1:91a0041:      *
1:dd1d660:      * @param index
1:dd1d660:      * @return the index of the bin
1:dd1d660:      */
1:f812e34:     private int getBin(long index) {
1:f812e34:         int answer = 0;
1:58ae402:         if (longFirstIndex < 0) {
1:0945648:             longFirstIndex = (index - (index % BitArray.LONG_SIZE));
1:58ae402:         } else if (longFirstIndex >= 0) {
1:58ae402:             answer = (int)((index - longFirstIndex) / BitArray.LONG_SIZE);
1:dd1d660:         }
1:dd1d660:         return answer;
1:dd1d660:     }
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * Get the offset into a bin from the total index
1:91a0041:      *
1:dd1d660:      * @param index
1:dd1d660:      * @return the relative offset into a bin
1:dd1d660:      */
1:f812e34:     private int getOffset(long index) {
1:f812e34:         int answer = 0;
1:58ae402:         if (longFirstIndex >= 0) {
1:58ae402:             answer = (int)((index - longFirstIndex) - (BitArray.LONG_SIZE * getBin(index)));
1:f812e34:         }
1:dd1d660:         return answer;
1:dd1d660:     }
1:dd1d660: 
1:a6a6a70:     public long getLastSetIndex() {
1:a6a6a70:         long result = -1;
1:91a0041: 
1:58ae402:         if (longFirstIndex >=0) {
1:58ae402:             result = longFirstIndex;
1:a6a6a70:             BitArray last = null;
1:a6a6a70:             for (int lastBitArrayIndex = maxNumberOfArrays -1; lastBitArrayIndex >= 0; lastBitArrayIndex--) {
1:a6a6a70:                 last = list.get(lastBitArrayIndex);
1:a6a6a70:                 if (last != null) {
1:a6a6a70:                     result += last.length() -1;
1:a6a6a70:                     result += lastBitArrayIndex * BitArray.LONG_SIZE;
1:a6a6a70:                     break;
1:a6a6a70:                 }
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:         return result;
1:a6a6a70:     }
1:dd1d660: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0945648
/////////////////////////////////////////////////////////////////////////
1:             longFirstIndex = (index - (index % BitArray.LONG_SIZE));
author:gtully
-------------------------------------------------------------------------------
commit:58ae402
/////////////////////////////////////////////////////////////////////////
1:     private int firstIndex = -1;  // leave 'int' for old serialization compatibility and introduce new 'long' field
1:     private long longFirstIndex=-1;
/////////////////////////////////////////////////////////////////////////
1:         boolean answer = index >= longFirstIndex;
/////////////////////////////////////////////////////////////////////////
1:                     longFirstIndex += BitArray.LONG_SIZE;
/////////////////////////////////////////////////////////////////////////
1:         if (longFirstIndex < 0) {
0:             longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE));
1:         } else if (longFirstIndex >= 0) {
1:             answer = (int)((index - longFirstIndex) / BitArray.LONG_SIZE);
/////////////////////////////////////////////////////////////////////////
1:         if (longFirstIndex >= 0) {
1:             answer = (int)((index - longFirstIndex) - (BitArray.LONG_SIZE * getBin(index)));
/////////////////////////////////////////////////////////////////////////
1:         if (longFirstIndex >=0) {
1:             result = longFirstIndex;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:91a0041
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:     private final LinkedList<BitArray> list;
0:     private long firstIndex = -1;
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
0:             result = firstIndex;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0: public class BitArrayBin {
0:     private int firstIndex = -1;
0:     private int firstBin = -1;
1:      * Create a BitArrayBin to a certain window size (number of messages to
1:      * keep)
1:     public BitArrayBin(int windowSize) {
1:         maxNumberOfArrays = ((windowSize + 1) / BitArray.LONG_SIZE) + 1;
1:         maxNumberOfArrays = Math.max(maxNumberOfArrays, 1);
1:         list = new LinkedList<BitArray>();
1:         for (int i = 0; i < maxNumberOfArrays; i++) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean setBit(long index, boolean value) {
0:         boolean answer = true;
1:         BitArray ba = getBitArray(index);
1:         if (ba != null) {
1:             int offset = getOffset(index);
1:             if (offset >= 0) {
1:                 answer = ba.set(offset, value);
/////////////////////////////////////////////////////////////////////////
1:     public boolean getBit(long index) {
0:         boolean answer = index >= firstIndex;
1:         BitArray ba = getBitArray(index);
1:         if (ba != null) {
1:             int offset = getOffset(index);
1:             if (offset >= 0) {
1:                 answer = ba.get(offset);
1:         } else {
1:             answer = true;
/////////////////////////////////////////////////////////////////////////
1:     private BitArray getBitArray(long index) {
1:         int bin = getBin(index);
1:         BitArray answer = null;
1:         if (bin >= 0) {
0:             if (firstIndex < 0) {
0:                 firstIndex = 0;
0:             if (bin >= list.size()) {
0:                 firstIndex += BitArray.LONG_SIZE;
0:                 bin = list.size() - 1;
1:             answer = list.get(bin);
/////////////////////////////////////////////////////////////////////////
1:     private int getBin(long index) {
1:         int answer = 0;
0:         if (firstBin < 0) {
0:             firstBin = 0;
0:         } else if (firstIndex >= 0) {
0:             answer = (int)((index - firstIndex) / BitArray.LONG_SIZE);
/////////////////////////////////////////////////////////////////////////
1:     private int getOffset(long index) {
1:         int answer = 0;
0:         if (firstIndex >= 0) {
0:             answer = (int)((index - firstIndex) - (BitArray.LONG_SIZE * getBin(index)));
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public class BitArrayBin implements Serializable {
1:     private static final long serialVersionUID = 1L;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getLastSetIndex() {
1:         long result = -1;
1:         
0:         if (firstIndex >=0) {
0:             result = firstIndex;   
1:             BitArray last = null;
1:             for (int lastBitArrayIndex = maxNumberOfArrays -1; lastBitArrayIndex >= 0; lastBitArrayIndex--) {
1:                 last = list.get(lastBitArrayIndex);
1:                 if (last != null) {
1:                     result += last.length() -1;
1:                     result += lastBitArrayIndex * BitArray.LONG_SIZE;
1:                     break;
1:                 }
1:             }
1:         }
1:         return result;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:0446404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         boolean answer = false;
/////////////////////////////////////////////////////////////////////////
1:             if (bin >= maxNumberOfArrays) {
1:                 int overShoot = bin - maxNumberOfArrays + 1;
1:                 while (overShoot > 0) {
1:                     list.removeFirst();
0:                     firstIndex += BitArray.LONG_SIZE;
1:                     list.add(new BitArray());
1:                     overShoot--;
1:                 }
1:                 
1:                 bin = maxNumberOfArrays - 1;
/////////////////////////////////////////////////////////////////////////
0:         if (firstIndex < 0) {
0:             firstIndex = (int) (index - (index % BitArray.LONG_SIZE));
commit:da46fff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:1c4ef90
/////////////////////////////////////////////////////////////////////////
1:             list.add(null);
/////////////////////////////////////////////////////////////////////////
1:             if (answer == null) {
1:                 answer = new BitArray();
1:                 list.set(bin, answer);
1:             }
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1:     private long lastInOrderBit=-1;
/////////////////////////////////////////////////////////////////////////
1:         boolean result = false;
1:         if (lastInOrderBit == -1) {
1:             result = true;
1:         } else {
1:             result = lastInOrderBit + 1 == index;
1:         lastInOrderBit = index;
1:         return result;
1: 
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
0:     private long lastBitSet=-1;
/////////////////////////////////////////////////////////////////////////
0:             if (value) {
0:                 lastBitSet=index;
0:             }else {
0:                 lastBitSet=-1;
1:             }
1:     
1:     /**
1:      * Test if in order
1:      * @param index
1:      * @return true if next message is in order
1:      */
1:     public boolean isInOrder(long index) {
0:         if (lastBitSet== -1) {
0:             return true;
1:         }
0:         return lastBitSet+1==index;
1:     }
commit:dd1d660
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util;
1: 
1: import java.util.LinkedList;
1: 
1: /**
1:  * Holder for many bitArrays - used for message audit
0:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class BitArrayBin{
1: 
0:     private LinkedList<BitArray> list;
1:     private int maxNumberOfArrays;
0:     private int firstIndex=-1;
0:     private int firstBin=-1;
1: 
1:     /**
0:      * Create a BitArrayBin to a certain window size (number of messages to keep)
0:      * 
1:      * @param windowSize
1:      */
0:     public BitArrayBin(int windowSize){
0:         maxNumberOfArrays=((windowSize+1)/BitArray.LONG_SIZE)+1;
0:         maxNumberOfArrays=Math.max(maxNumberOfArrays,1);
0:         list=new LinkedList<BitArray>();
0:         for(int i=0;i<maxNumberOfArrays;i++){
0:             list.add(new BitArray());
1:         }
1:     }
1: 
1:     /**
1:      * Set a bit
0:      * 
1:      * @param index
1:      * @param value
1:      * @return true if set
1:      */
0:     public boolean setBit(long index,boolean value){
0:         boolean answer=true;
0:         BitArray ba=getBitArray(index);
0:         if(ba!=null){
0:             int offset=getOffset(index);
0:             if(offset>=0){
0:                 answer=ba.set(offset,value);
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Get the boolean value at the index
0:      * 
1:      * @param index
1:      * @return true/false
1:      */
0:     public boolean getBit(long index){
0:         boolean answer=index>=firstIndex;
0:         BitArray ba=getBitArray(index);
0:         if(ba!=null){
0:             int offset=getOffset(index);
0:             if(offset>=0){
0:                 answer=ba.get(offset);
1:                 return answer;
1:             }
0:         }else{
1:             // gone passed range for previous bins so assume set
0:             answer=true;
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Get the BitArray for the index
0:      * 
1:      * @param index
1:      * @return BitArray
1:      */
0:     private BitArray getBitArray(long index){
0:         int bin=getBin(index);
0:         BitArray answer=null;
0:         if(bin>=0){
0:             if(firstIndex<0){
0:                 firstIndex=0;
1:             }
0:             if(bin>=list.size()){
0:                 list.removeFirst();
0:                 firstIndex+=BitArray.LONG_SIZE;
0:                 list.add(new BitArray());
0:                 bin=list.size()-1;
1:             }
0:             answer=list.get(bin);
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Get the index of the bin from the total index
0:      * 
1:      * @param index
1:      * @return the index of the bin
1:      */
0:     private int getBin(long index){
0:         int answer=0;
0:         if(firstBin<0){
0:             firstBin=0;
0:         }else if(firstIndex>=0){
0:             answer=(int)((index-firstIndex)/BitArray.LONG_SIZE);
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Get the offset into a bin from the total index
0:      * 
1:      * @param index
1:      * @return the relative offset into a bin
1:      */
0:     private int getOffset(long index){
0:         int answer=0;
0:         if(firstIndex>=0){
0:             answer=(int)((index-firstIndex)-(BitArray.LONG_SIZE*getBin(index)));
1:         }
1:         return answer;
1:     }
1: }
============================================================================