1:b54606b: /**
1:b54606b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b54606b:  * contributor license agreements.  See the NOTICE file distributed with
1:b54606b:  * this work for additional information regarding copyright ownership.
1:b54606b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b54606b:  * (the "License"); you may not use this file except in compliance with
1:b54606b:  * the License.  You may obtain a copy of the License at
1:b54606b:  *
1:b54606b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b54606b:  *
1:b54606b:  * Unless required by applicable law or agreed to in writing, software
1:b54606b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b54606b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b54606b:  * See the License for the specific language governing permissions and
1:b54606b:  * limitations under the License.
1:b54606b:  */
1:b54606b: package org.apache.activemq.leveldb.test;
1:b54606b: 
1:b54606b: import java.io.File;
1:b54606b: import java.io.FilenameFilter;
1:b54606b: import java.io.IOException;
1:b54606b: import java.util.ArrayList;
1:b54606b: import org.apache.activemq.command.ActiveMQQueue;
1:b54606b: import org.apache.activemq.command.MessageId;
1:b54606b: import org.apache.activemq.leveldb.LevelDBStore;
1:b54606b: import org.apache.activemq.leveldb.LevelDBStoreView;
1:b54606b: import org.apache.activemq.leveldb.util.FileSupport;
1:b54606b: import org.apache.activemq.store.MessageStore;
1:b54606b: import org.apache.commons.io.FileUtils;
1:b54606b: import org.junit.After;
1:b54606b: import org.junit.Test;
1:b54606b: import org.slf4j.Logger;
1:b54606b: import org.slf4j.LoggerFactory;
1:b54606b: 
1:b54606b: 
1:b54606b: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.*;
1:b54606b: import static org.junit.Assert.assertEquals;
1:b54606b: import static org.junit.Assert.assertTrue;
1:b54606b: 
1:b54606b: public class IndexRebuildTest {
1:b54606b:     protected static final Logger LOG = LoggerFactory.getLogger(IndexRebuildTest.class);
1:b54606b:     final int max = 30;
1:b54606b:     final int toLeave = 5;
1:b54606b:     ArrayList<LevelDBStore> stores = new ArrayList<LevelDBStore>();
1:b54606b: 
1:b54606b:     @Test(timeout = 1000 * 60 * 10)
1:b54606b:     public void testRebuildIndex() throws Exception {
1:b54606b: 
1:b54606b:         File masterDir = new File("target/activemq-data/leveldb-rebuild");
1:b54606b:         FileSupport.toRichFile(masterDir).recursiveDelete();
1:b54606b: 
1:b54606b:         final LevelDBStore store = new LevelDBStore();
1:b54606b:         store.setDirectory(masterDir);
1:b54606b:         store.setLogDirectory(masterDir);
1:b54606b: 
1:b54606b:         store.setLogSize(1024 * 10);
1:b54606b:         store.start();
1:b54606b:         stores.add(store);
1:b54606b: 
1:b54606b:         ArrayList<MessageId> inserts = new ArrayList<MessageId>();
1:b54606b:         MessageStore ms = store.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:b54606b:         for (int i = 0; i < max; i++) {
1:b54606b:             inserts.add(addMessage(ms, "m" + i).getMessageId());
1:b54606b:         }
1:b54606b:         int logFileCount = countLogFiles(store);
1:b54606b:         assertTrue("more than one journal file", logFileCount > 1);
1:b54606b: 
1:b54606b:         for (MessageId id : inserts.subList(0, inserts.size() - toLeave)) {
1:b54606b:             removeMessage(ms, id);
1:b54606b:         }
1:b54606b: 
1:b54606b:         LevelDBStoreView view = new LevelDBStoreView(store);
1:b54606b:         view.compact();
1:b54606b: 
1:b54606b:         int reducedLogFileCount = countLogFiles(store);
1:b54606b:         assertTrue("log files deleted", logFileCount > reducedLogFileCount);
1:b54606b: 
1:b54606b:         store.stop();
1:b54606b: 
1:b54606b:         deleteTheIndex(store);
1:b54606b: 
1:b54606b:         assertEquals("log files remain", reducedLogFileCount, countLogFiles(store));
1:b54606b: 
1:b54606b:         // restart, recover and verify message read
1:b54606b:         store.start();
1:b54606b:         ms = store.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:b54606b: 
1:b54606b:         assertEquals(toLeave + " messages remain", toLeave, getMessages(ms).size());
1:b54606b:     }
1:b54606b: 
1:b54606b:     private void deleteTheIndex(LevelDBStore store) throws IOException {
1:b54606b:         for (String index : store.getLogDirectory().list(new FilenameFilter() {
1:b54606b:             @Override
1:b54606b:             public boolean accept(File dir, String name) {
1:b54606b:                 LOG.info("dir:" + dir + ", name: " + name);
1:b54606b:                 return (name != null && name.endsWith(".index"));
1:b54606b:             }
1:b54606b:         })) {
1:b54606b: 
1:b54606b:             File file = new File(store.getLogDirectory().getAbsoluteFile(), index);
1:b54606b:             LOG.info("Deleting index directory:" + file);
1:b54606b:             FileUtils.deleteDirectory(file);
1:b54606b:         }
1:b54606b: 
1:b54606b:     }
1:b54606b: 
1:b54606b:     private int countLogFiles(LevelDBStore store) {
1:b54606b:         return store.getLogDirectory().list(new FilenameFilter() {
1:b54606b:             @Override
1:b54606b:             public boolean accept(File dir, String name) {
1:b54606b:                 LOG.info("dir:" + dir + ", name: " + name);
1:b54606b:                 return (name != null && name.endsWith(".log"));
1:b54606b:             }
1:b54606b:         }).length;
1:b54606b:     }
1:b54606b: 
1:b54606b:     @After
1:b54606b:     public void stop() throws Exception {
1:b54606b:         for (LevelDBStore store : stores) {
1:b54606b:             if (store.isStarted()) {
1:b54606b:                 store.stop();
1:b54606b:             }
1:b54606b:             FileUtils.deleteDirectory(store.directory());
1:b54606b:         }
1:b54606b:         stores.clear();
1:b54606b:     }
1:b54606b: 
1:b54606b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b54606b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.leveldb.LevelDBStoreView;
1: import org.apache.activemq.leveldb.util.FileSupport;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.commons.io.FileUtils;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.*;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class IndexRebuildTest {
1:     protected static final Logger LOG = LoggerFactory.getLogger(IndexRebuildTest.class);
1:     final int max = 30;
1:     final int toLeave = 5;
1:     ArrayList<LevelDBStore> stores = new ArrayList<LevelDBStore>();
1: 
1:     @Test(timeout = 1000 * 60 * 10)
1:     public void testRebuildIndex() throws Exception {
1: 
1:         File masterDir = new File("target/activemq-data/leveldb-rebuild");
1:         FileSupport.toRichFile(masterDir).recursiveDelete();
1: 
1:         final LevelDBStore store = new LevelDBStore();
1:         store.setDirectory(masterDir);
1:         store.setLogDirectory(masterDir);
1: 
1:         store.setLogSize(1024 * 10);
1:         store.start();
1:         stores.add(store);
1: 
1:         ArrayList<MessageId> inserts = new ArrayList<MessageId>();
1:         MessageStore ms = store.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:         for (int i = 0; i < max; i++) {
1:             inserts.add(addMessage(ms, "m" + i).getMessageId());
1:         }
1:         int logFileCount = countLogFiles(store);
1:         assertTrue("more than one journal file", logFileCount > 1);
1: 
1:         for (MessageId id : inserts.subList(0, inserts.size() - toLeave)) {
1:             removeMessage(ms, id);
1:         }
1: 
1:         LevelDBStoreView view = new LevelDBStoreView(store);
1:         view.compact();
1: 
1:         int reducedLogFileCount = countLogFiles(store);
1:         assertTrue("log files deleted", logFileCount > reducedLogFileCount);
1: 
1:         store.stop();
1: 
1:         deleteTheIndex(store);
1: 
1:         assertEquals("log files remain", reducedLogFileCount, countLogFiles(store));
1: 
1:         // restart, recover and verify message read
1:         store.start();
1:         ms = store.createQueueMessageStore(new ActiveMQQueue("TEST"));
1: 
1:         assertEquals(toLeave + " messages remain", toLeave, getMessages(ms).size());
1:     }
1: 
1:     private void deleteTheIndex(LevelDBStore store) throws IOException {
1:         for (String index : store.getLogDirectory().list(new FilenameFilter() {
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("dir:" + dir + ", name: " + name);
1:                 return (name != null && name.endsWith(".index"));
1:             }
1:         })) {
1: 
1:             File file = new File(store.getLogDirectory().getAbsoluteFile(), index);
1:             LOG.info("Deleting index directory:" + file);
1:             FileUtils.deleteDirectory(file);
1:         }
1: 
1:     }
1: 
1:     private int countLogFiles(LevelDBStore store) {
1:         return store.getLogDirectory().list(new FilenameFilter() {
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("dir:" + dir + ", name: " + name);
1:                 return (name != null && name.endsWith(".log"));
1:             }
1:         }).length;
1:     }
1: 
1:     @After
1:     public void stop() throws Exception {
1:         for (LevelDBStore store : stores) {
1:             if (store.isStarted()) {
1:                 store.stop();
1:             }
1:             FileUtils.deleteDirectory(store.directory());
1:         }
1:         stores.clear();
1:     }
1: 
1: }
============================================================================