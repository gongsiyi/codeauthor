1:0142c4d: /**
1:0142c4d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0142c4d:  * contributor license agreements.  See the NOTICE file distributed with
1:0142c4d:  * this work for additional information regarding copyright ownership.
1:0142c4d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0142c4d:  * (the "License"); you may not use this file except in compliance with
1:0142c4d:  * the License.  You may obtain a copy of the License at
1:0142c4d:  *
1:0142c4d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0142c4d:  *
1:0142c4d:  * Unless required by applicable law or agreed to in writing, software
1:0142c4d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0142c4d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0142c4d:  * See the License for the specific language governing permissions and
1:0142c4d:  * limitations under the License.
1:0142c4d:  */
1:0142c4d: package org.apache.activemq.broker.policy;
1:0142c4d: 
1:b6cb0ea: import javax.jms.DeliveryMode;
1:0142c4d: import javax.jms.Destination;
1:0142c4d: import javax.jms.Message;
1:0142c4d: import javax.jms.Queue;
1:0142c4d: import org.apache.activemq.ActiveMQConnection;
1:0142c4d: import org.apache.activemq.ActiveMQConnectionFactory;
1:0142c4d: import org.apache.activemq.RedeliveryPolicy;
1:0142c4d: import org.apache.activemq.broker.BrokerService;
1:0142c4d: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:0142c4d: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:0142c4d: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:0142c4d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:0142c4d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:0142c4d: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:0142c4d: import org.apache.activemq.command.ActiveMQQueue;
1:0142c4d: import org.apache.activemq.command.ActiveMQTopic;
1:0142c4d: import org.apache.activemq.util.Wait;
1:0142c4d: import org.slf4j.Logger;
1:0142c4d: import org.slf4j.LoggerFactory;
1:0142c4d: 
1:4521f47: import java.util.concurrent.TimeUnit;
1:4521f47: 
1:0142c4d: public class DeadLetterExpiryTest extends DeadLetterTest {
1:0142c4d:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterExpiryTest.class);
1:0142c4d: 
1:0142c4d:     @Override
1:0142c4d:     protected BrokerService createBroker() throws Exception {
1:0142c4d:         BrokerService broker = super.createBroker();
1:0142c4d:         PolicyMap pMap = broker.getDestinationPolicy();
1:0142c4d: 
1:0142c4d:         PolicyEntry policy = new PolicyEntry();
1:0142c4d:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:0142c4d:         strategy.setExpiration(4000);
1:0142c4d:         strategy.setProcessNonPersistent(true);
1:0142c4d:         policy.setDeadLetterStrategy(strategy);
1:0142c4d: 
1:0142c4d:         pMap.put(new ActiveMQQueue(getDestinationString()), policy);
1:0142c4d:         pMap.put(new ActiveMQTopic(getDestinationString()), policy);
1:0142c4d: 
1:0142c4d:         SharedDeadLetterStrategy sharedLoopStrategy = new SharedDeadLetterStrategy();
1:0142c4d:         strategy.setProcessNonPersistent(true);
1:0142c4d:         sharedLoopStrategy.setExpiration(1000);
1:0142c4d:         sharedLoopStrategy.setDeadLetterQueue(new ActiveMQQueue("DLQ.loop"));
1:0142c4d: 
1:0142c4d:         PolicyEntry buggyLoopingDLQPolicy = new PolicyEntry();
1:0142c4d:         buggyLoopingDLQPolicy.setDeadLetterStrategy(sharedLoopStrategy);
1:0142c4d: 
1:0142c4d:         pMap.put(new ActiveMQQueue("loop"), buggyLoopingDLQPolicy);
1:0142c4d:         pMap.put(new ActiveMQQueue("DLQ.loop"), buggyLoopingDLQPolicy);
1:0142c4d: 
1:b6cb0ea:         SharedDeadLetterStrategy auditConfigured = new SharedDeadLetterStrategy();
1:b6cb0ea:         auditConfigured.setDeadLetterQueue(new ActiveMQQueue("DLQ.auditConfigured"));
1:b6cb0ea:         auditConfigured.setProcessNonPersistent(true);
1:b6cb0ea:         auditConfigured.setProcessExpired(true);
1:b6cb0ea:         auditConfigured.setMaxProducersToAudit(1);
1:b6cb0ea:         auditConfigured.setMaxAuditDepth(10);
1:b6cb0ea:         PolicyEntry auditConfiguredDlqPolicy = new PolicyEntry();
1:b6cb0ea:         auditConfiguredDlqPolicy.setDeadLetterStrategy(auditConfigured);
1:b6cb0ea:         auditConfiguredDlqPolicy.setExpireMessagesPeriod(1000);
1:b6cb0ea: 
1:b6cb0ea:         pMap.put(new ActiveMQQueue("Comp.One"), auditConfiguredDlqPolicy);
1:b6cb0ea:         pMap.put(new ActiveMQQueue("Comp.Two"), auditConfiguredDlqPolicy);
1:b6cb0ea: 
1:b6cb0ea:         PolicyEntry auditConfiguredPolicy = new PolicyEntry();
1:b6cb0ea:         auditConfiguredPolicy.setEnableAudit(false); // allow duplicates through the cursor
1:b6cb0ea:         pMap.put(new ActiveMQQueue("DLQ.auditConfigured"), auditConfiguredPolicy);
1:b6cb0ea: 
1:0142c4d:         PolicyEntry policyWithExpiryProcessing = pMap.getDefaultEntry();
1:0142c4d:         policyWithExpiryProcessing.setExpireMessagesPeriod(1000);
1:0142c4d:         pMap.setDefaultEntry(policyWithExpiryProcessing);
1:0142c4d: 
1:0142c4d:         broker.setDestinationPolicy(pMap);
1:0142c4d: 
1:0142c4d:         return broker;
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     @Override
1:0142c4d:     protected Destination createDlqDestination() {
1:0142c4d:         String prefix = topic ? "ActiveMQ.DLQ.Topic." : "ActiveMQ.DLQ.Queue.";
1:0142c4d:         return new ActiveMQQueue(prefix + getClass().getName() + "." + getName());
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     protected void doTest() throws Exception {
1:0142c4d:         connection.start();
1:0142c4d:         messageCount = 4;
1:0142c4d: 
1:0142c4d:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:0142c4d:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:0142c4d:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:0142c4d: 
1:0142c4d:         makeConsumer();
1:0142c4d:         sendMessages();
1:0142c4d: 
1:0142c4d:         // now lets receive and rollback N times
1:0142c4d:         for (int i = 0; i < messageCount; i++) {
1:0142c4d:             consumeAndRollback(i);
1:0142c4d:         }
1:0142c4d: 
1:0142c4d:         Queue dlqQueue = (Queue) createDlqDestination();
1:0142c4d:         verifyIsDlq(dlqQueue);
1:0142c4d: 
1:0142c4d:         // they should expire
1:0142c4d:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQueue.getQueueName());
1:0142c4d: 
1:0142c4d:         assertTrue("all dlq messages expired", Wait.waitFor(new Wait.Condition() {
1:0142c4d:             @Override
1:0142c4d:             public boolean isSatisified() throws Exception {
1:0142c4d:                 LOG.info("Queue size:" + queueViewMBean.getQueueSize());
1:0142c4d:                 return queueViewMBean.getExpiredCount() == messageCount;
1:0142c4d:             }
1:0142c4d:         }));
1:0142c4d: 
1:0142c4d:         makeDlqConsumer();
1:0142c4d:         assertNull("no message available", dlqConsumer.receive(1000));
1:0142c4d: 
1:0142c4d:         final QueueViewMBean sharedDlqViewMBean = getProxyToQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME);
1:0142c4d:         assertTrue("messages stay on shared dlq which has default expiration=0", Wait.waitFor(new Wait.Condition() {
1:0142c4d:             @Override
1:0142c4d:             public boolean isSatisified() throws Exception {
1:0142c4d:                 LOG.info("Q " + sharedDlqViewMBean.getName() + " size:" + sharedDlqViewMBean.getQueueSize());
1:0142c4d:                 return sharedDlqViewMBean.getQueueSize() == messageCount;
1:0142c4d:             }
1:0142c4d:         }));
1:0142c4d: 
1:0142c4d:     }
1:0142c4d: 
1:b6cb0ea:     public void testAuditConfigured() throws Exception {
1:b6cb0ea:         destination = new ActiveMQQueue("Comp.One,Comp.Two");
1:b6cb0ea:         connection.start();
1:b6cb0ea: 
1:b6cb0ea:         messageCount = 1;
1:b6cb0ea:         timeToLive = 2000;
1:b6cb0ea:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:b6cb0ea:         sendMessages();
1:b6cb0ea:         sendMessages();
1:b6cb0ea: 
1:b6cb0ea:         assertTrue("all messages expired even duplicates!", Wait.waitFor(new Wait.Condition() {
1:b6cb0ea:             @Override
1:b6cb0ea:             public boolean isSatisified() throws Exception {
1:b6cb0ea:                 try {
1:b6cb0ea:                     QueueViewMBean queueViewMBean = getProxyToQueue("DLQ.auditConfigured");
1:b6cb0ea:                     LOG.info("Queue " + queueViewMBean.getName() + ", size:" + queueViewMBean.getQueueSize());
1:4521f47:                     // expiry across queues is no longer seralised on a single timertask thread AMQ-6979
1:4521f47:                     return queueViewMBean.getQueueSize() >= 2;
1:b6cb0ea:                 } catch (Exception expectedTillExpiry) {}
1:b6cb0ea:                 return false;
1:b6cb0ea:             }
1:b6cb0ea:         }));
1:b6cb0ea:     }
1:b6cb0ea: 
1:0142c4d:     public void testNoDLQLoop() throws Exception {
1:0142c4d:         destination = new ActiveMQQueue("loop");
1:0142c4d:         messageCount = 2;
1:0142c4d: 
1:0142c4d:         connection.start();
1:0142c4d: 
1:0142c4d:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:0142c4d:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:0142c4d:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:0142c4d: 
1:0142c4d:         makeConsumer();
1:0142c4d:         sendMessages();
1:0142c4d: 
1:0142c4d:         // now lets receive and rollback N times
1:0142c4d:         for (int i = 0; i < messageCount; i++) {
1:0142c4d:             consumeAndRollback(i);
1:0142c4d:         }
1:0142c4d: 
1:0142c4d:         // they should expire
1:0142c4d:         final QueueViewMBean queueViewMBean = getProxyToQueue("DLQ.loop");
1:0142c4d: 
1:0142c4d:         assertTrue("all dlq messages expired", Wait.waitFor(new Wait.Condition() {
1:0142c4d:             @Override
1:0142c4d:             public boolean isSatisified() throws Exception {
1:0142c4d:                 LOG.info("Queue size:" + queueViewMBean.getQueueSize());
1:0142c4d:                 return queueViewMBean.getExpiredCount() == messageCount;
1:0142c4d:             }
1:0142c4d:         }));
1:0142c4d: 
1:0142c4d: 
1:0142c4d:         // strategy audit suppresses resend
1:0142c4d:         assertEquals("it should be empty", 0, queueViewMBean.getQueueSize());
1:0142c4d: 
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     protected void consumeAndRollback(int messageCounter) throws Exception {
1:0142c4d:         for (int i = 0; i < rollbackCount; i++) {
1:0142c4d:             Message message = consumer.receive(5000);
1:0142c4d:             assertNotNull("No message received for message: " + messageCounter + " and rollback loop: " + i, message);
1:0142c4d:             assertMessage(message, messageCounter);
1:0142c4d: 
1:0142c4d:             session.rollback();
1:0142c4d:         }
1:0142c4d:         LOG.info("Rolled back: " + rollbackCount + " times");
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     protected void setUp() throws Exception {
1:0142c4d:         transactedMode = true;
1:b6cb0ea:         deliveryMode = DeliveryMode.PERSISTENT;
1:b6cb0ea:         timeToLive = 0;
1:0142c4d:         super.setUp();
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:0142c4d:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:0142c4d:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:0142c4d:         policy.setMaximumRedeliveries(3);
1:0142c4d:         policy.setBackOffMultiplier((short) 1);
1:0142c4d:         policy.setInitialRedeliveryDelay(10);
1:0142c4d:         policy.setUseExponentialBackOff(false);
1:0142c4d:         answer.setRedeliveryPolicy(policy);
1:0142c4d:         return answer;
1:0142c4d:     }
1:0142c4d: 
1:0142c4d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4521f47
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:                     // expiry across queues is no longer seralised on a single timertask thread AMQ-6979
1:                     return queueViewMBean.getQueueSize() >= 2;
commit:b6cb0ea
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1:         SharedDeadLetterStrategy auditConfigured = new SharedDeadLetterStrategy();
1:         auditConfigured.setDeadLetterQueue(new ActiveMQQueue("DLQ.auditConfigured"));
1:         auditConfigured.setProcessNonPersistent(true);
1:         auditConfigured.setProcessExpired(true);
1:         auditConfigured.setMaxProducersToAudit(1);
1:         auditConfigured.setMaxAuditDepth(10);
1:         PolicyEntry auditConfiguredDlqPolicy = new PolicyEntry();
1:         auditConfiguredDlqPolicy.setDeadLetterStrategy(auditConfigured);
1:         auditConfiguredDlqPolicy.setExpireMessagesPeriod(1000);
1: 
1:         pMap.put(new ActiveMQQueue("Comp.One"), auditConfiguredDlqPolicy);
1:         pMap.put(new ActiveMQQueue("Comp.Two"), auditConfiguredDlqPolicy);
1: 
1:         PolicyEntry auditConfiguredPolicy = new PolicyEntry();
1:         auditConfiguredPolicy.setEnableAudit(false); // allow duplicates through the cursor
1:         pMap.put(new ActiveMQQueue("DLQ.auditConfigured"), auditConfiguredPolicy);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testAuditConfigured() throws Exception {
1:         destination = new ActiveMQQueue("Comp.One,Comp.Two");
1:         connection.start();
1: 
1:         messageCount = 1;
1:         timeToLive = 2000;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         sendMessages();
1:         sendMessages();
1: 
1:         assertTrue("all messages expired even duplicates!", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     QueueViewMBean queueViewMBean = getProxyToQueue("DLQ.auditConfigured");
1:                     LOG.info("Queue " + queueViewMBean.getName() + ", size:" + queueViewMBean.getQueueSize());
0:                     return queueViewMBean.getQueueSize() == 4;
1:                 } catch (Exception expectedTillExpiry) {}
1:                 return false;
1:             }
1:         }));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         deliveryMode = DeliveryMode.PERSISTENT;
1:         timeToLive = 0;
commit:0142c4d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DeadLetterExpiryTest extends DeadLetterTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterExpiryTest.class);
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         PolicyMap pMap = broker.getDestinationPolicy();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setExpiration(4000);
1:         strategy.setProcessNonPersistent(true);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         pMap.put(new ActiveMQQueue(getDestinationString()), policy);
1:         pMap.put(new ActiveMQTopic(getDestinationString()), policy);
1: 
1:         SharedDeadLetterStrategy sharedLoopStrategy = new SharedDeadLetterStrategy();
1:         strategy.setProcessNonPersistent(true);
1:         sharedLoopStrategy.setExpiration(1000);
1:         sharedLoopStrategy.setDeadLetterQueue(new ActiveMQQueue("DLQ.loop"));
1: 
1:         PolicyEntry buggyLoopingDLQPolicy = new PolicyEntry();
1:         buggyLoopingDLQPolicy.setDeadLetterStrategy(sharedLoopStrategy);
1: 
1:         pMap.put(new ActiveMQQueue("loop"), buggyLoopingDLQPolicy);
1:         pMap.put(new ActiveMQQueue("DLQ.loop"), buggyLoopingDLQPolicy);
1: 
1:         PolicyEntry policyWithExpiryProcessing = pMap.getDefaultEntry();
1:         policyWithExpiryProcessing.setExpireMessagesPeriod(1000);
1:         pMap.setDefaultEntry(policyWithExpiryProcessing);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected Destination createDlqDestination() {
1:         String prefix = topic ? "ActiveMQ.DLQ.Topic." : "ActiveMQ.DLQ.Queue.";
1:         return new ActiveMQQueue(prefix + getClass().getName() + "." + getName());
1:     }
1: 
1:     protected void doTest() throws Exception {
1:         connection.start();
1:         messageCount = 4;
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         for (int i = 0; i < messageCount; i++) {
1:             consumeAndRollback(i);
1:         }
1: 
1:         Queue dlqQueue = (Queue) createDlqDestination();
1:         verifyIsDlq(dlqQueue);
1: 
1:         // they should expire
1:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQueue.getQueueName());
1: 
1:         assertTrue("all dlq messages expired", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Queue size:" + queueViewMBean.getQueueSize());
1:                 return queueViewMBean.getExpiredCount() == messageCount;
1:             }
1:         }));
1: 
1:         makeDlqConsumer();
1:         assertNull("no message available", dlqConsumer.receive(1000));
1: 
1:         final QueueViewMBean sharedDlqViewMBean = getProxyToQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME);
1:         assertTrue("messages stay on shared dlq which has default expiration=0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Q " + sharedDlqViewMBean.getName() + " size:" + sharedDlqViewMBean.getQueueSize());
1:                 return sharedDlqViewMBean.getQueueSize() == messageCount;
1:             }
1:         }));
1: 
1:     }
1: 
1:     public void testNoDLQLoop() throws Exception {
1:         destination = new ActiveMQQueue("loop");
1:         messageCount = 2;
1: 
1:         connection.start();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         for (int i = 0; i < messageCount; i++) {
1:             consumeAndRollback(i);
1:         }
1: 
1:         // they should expire
1:         final QueueViewMBean queueViewMBean = getProxyToQueue("DLQ.loop");
1: 
1:         assertTrue("all dlq messages expired", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Queue size:" + queueViewMBean.getQueueSize());
1:                 return queueViewMBean.getExpiredCount() == messageCount;
1:             }
1:         }));
1: 
1: 
1:         // strategy audit suppresses resend
1:         assertEquals("it should be empty", 0, queueViewMBean.getQueueSize());
1: 
1:     }
1: 
1:     protected void consumeAndRollback(int messageCounter) throws Exception {
1:         for (int i = 0; i < rollbackCount; i++) {
1:             Message message = consumer.receive(5000);
1:             assertNotNull("No message received for message: " + messageCounter + " and rollback loop: " + i, message);
1:             assertMessage(message, messageCounter);
1: 
1:             session.rollback();
1:         }
1:         LOG.info("Rolled back: " + rollbackCount + " times");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         transactedMode = true;
1:         super.setUp();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:         policy.setMaximumRedeliveries(3);
1:         policy.setBackOffMultiplier((short) 1);
1:         policy.setInitialRedeliveryDelay(10);
1:         policy.setUseExponentialBackOff(false);
1:         answer.setRedeliveryPolicy(policy);
1:         return answer;
1:     }
1: 
1: }
============================================================================