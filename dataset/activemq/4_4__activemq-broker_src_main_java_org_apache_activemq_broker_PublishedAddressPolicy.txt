1:a4be10c: /**
1:a4be10c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a4be10c:  * contributor license agreements.  See the NOTICE file distributed with
1:a4be10c:  * this work for additional information regarding copyright ownership.
1:a4be10c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a4be10c:  * (the "License"); you may not use this file except in compliance with
1:a4be10c:  * the License.  You may obtain a copy of the License at
1:a4be10c:  *
1:a4be10c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a4be10c:  *
1:a4be10c:  * Unless required by applicable law or agreed to in writing, software
1:a4be10c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a4be10c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a4be10c:  * See the License for the specific language governing permissions and
1:a4be10c:  * limitations under the License.
1:a4be10c:  */
1:a4be10c: package org.apache.activemq.broker;
1:a4be10c: 
1:a4be10c: import java.net.InetAddress;
1:a4be10c: import java.net.URI;
1:a4be10c: import java.net.UnknownHostException;
1:40af36e: import java.util.HashMap;
1:a4be10c: import java.util.Locale;
1:4800a7a: import java.util.Map;
1:a4be10c: 
1:a4be10c: import org.apache.activemq.util.InetAddressUtil;
1:a4be10c: 
1:a4be10c: /**
1:a4be10c:  * Policy object that controls how a TransportConnector publishes the connector's
1:a4be10c:  * address to the outside world.  By default the connector will publish itself
1:a4be10c:  * using the resolved host name of the bound server socket.
1:a4be10c:  *
1:a4be10c:  * @org.apache.xbean.XBean
1:a4be10c:  */
1:a4be10c: public class PublishedAddressPolicy {
1:a4be10c: 
1:a4be10c:     private String clusterClientUriQuery;
1:a4be10c:     private PublishedHostStrategy publishedHostStrategy = PublishedHostStrategy.DEFAULT;
1:4800a7a:     private Map<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
1:4800a7a:     private Map<String, String> hostMapping = new HashMap<String, String>();
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Defines the value of the published host value.
1:a4be10c:      */
1:a4be10c:     public enum PublishedHostStrategy {
1:a4be10c:         DEFAULT,
1:a4be10c:         IPADDRESS,
1:a4be10c:         HOSTNAME,
1:a4be10c:         FQDN;
1:a4be10c: 
1:a4be10c:         public static PublishedHostStrategy getValue(String value) {
1:a4be10c:             return valueOf(value.toUpperCase(Locale.ENGLISH));
1:a4be10c:         }
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Using the supplied TransportConnector this method returns the String that will
1:a4be10c:      * be used to update clients with this connector's connect address.
1:a4be10c:      *
1:a4be10c:      * @param connector
1:a4be10c:      *      The TransportConnector whose address is to be published.
1:a4be10c:      * @return a string URI address that a client can use to connect to this Transport.
1:a4be10c:      * @throws Exception
1:a4be10c:      */
1:a3a22ef:     public URI getPublishableConnectURI(TransportConnector connector) throws Exception {
1:a4be10c: 
1:a4be10c:         URI connectorURI = connector.getConnectUri();
1:a4be10c: 
1:a4be10c:         if (connectorURI == null) {
1:a4be10c:             return null;
1:a4be10c:         }
1:a4be10c: 
1:a4be10c:         String scheme = connectorURI.getScheme();
1:37c46b9:         if ("vm".equals(scheme)) {
1:37c46b9:             return connectorURI;
1:37c46b9:         }
1:37c46b9: 
1:a4be10c:         String userInfo = getPublishedUserInfoValue(connectorURI.getUserInfo());
1:a4be10c:         String host = getPublishedHostValue(connectorURI.getHost());
1:4800a7a:         if (hostMapping.containsKey(host)) {
1:4800a7a:             host = hostMapping.get(host);
1:4800a7a:         }
1:4800a7a: 
1:a4be10c:         int port = connectorURI.getPort();
1:40af36e:         if (portMapping.containsKey(port)) {
1:40af36e:             port = portMapping.get(port);
1:40af36e:         }
1:a4be10c:         String path = getPublishedPathValue(connectorURI.getPath());
1:a4be10c:         String fragment = getPublishedFragmentValue(connectorURI.getFragment());
1:a4be10c: 
1:a4be10c:         URI publishedURI = new URI(scheme, userInfo, host, port, path, getClusterClientUriQuery(), fragment);
1:a3a22ef:         return publishedURI;
1:a3a22ef:     }
1:a4be10c: 
1:a3a22ef:     public String getPublishableConnectString(TransportConnector connector) throws Exception {
1:a3a22ef:         return getPublishableConnectURI(connector).toString();
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Subclasses can override what host value is published by implementing alternate
1:a4be10c:      * logic for this method.
1:a4be10c:      *
1:a4be10c:      * @param uriHostEntry
1:5e05df1:      *
1:5e05df1:      * @return the value published for the given host.
1:5e05df1:      *
1:a4be10c:      * @throws UnknownHostException
1:a4be10c:      */
1:a4be10c:     protected String getPublishedHostValue(String uriHostEntry) throws UnknownHostException {
1:a4be10c: 
1:a4be10c:         // By default we just republish what was already present.
1:a4be10c:         String result = uriHostEntry;
1:a4be10c: 
1:a4be10c:         if (this.publishedHostStrategy.equals(PublishedHostStrategy.IPADDRESS)) {
1:a4be10c:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:a4be10c:             result = address.getHostAddress();
1:a4be10c:         } else if (this.publishedHostStrategy.equals(PublishedHostStrategy.HOSTNAME)) {
1:a4be10c:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:a4be10c:             if (address.isAnyLocalAddress()) {
1:a4be10c:                 // make it more human readable and useful, an alternative to 0.0.0.0
1:a4be10c:                 result = InetAddressUtil.getLocalHostName();
1:a4be10c:             } else {
1:a4be10c:                 result = address.getHostName();
1:a4be10c:             }
1:a4be10c:         } else if (this.publishedHostStrategy.equals(PublishedHostStrategy.FQDN)) {
1:a4be10c:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:a4be10c:             if (address.isAnyLocalAddress()) {
1:a4be10c:                 // make it more human readable and useful, an alternative to 0.0.0.0
1:a4be10c:                 result = InetAddressUtil.getLocalHostName();
1:a4be10c:             } else {
1:a4be10c:                 result = address.getCanonicalHostName();
1:a4be10c:             }
1:a4be10c:         }
1:a4be10c: 
1:a4be10c:         return result;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Subclasses can override what path value is published by implementing alternate
1:a4be10c:      * logic for this method.  By default this method simply returns what was already
1:a4be10c:      * set as the Path value in the original URI.
1:a4be10c:      *
1:a4be10c:      * @param uriPathEntry
1:a4be10c:      *      The original value of the URI path.
1:a4be10c:      *
1:a4be10c:      * @return the desired value for the published URI's path.
1:a4be10c:      */
1:a4be10c:     protected String getPublishedPathValue(String uriPathEntry) {
1:a4be10c:         return uriPathEntry;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Subclasses can override what host value is published by implementing alternate
1:a4be10c:      * logic for this method.  By default this method simply returns what was already
1:a4be10c:      * set as the Fragment value in the original URI.
1:a4be10c:      *
1:a4be10c:      * @param uriFragmentEntry
1:a4be10c:      *      The original value of the URI Fragment.
1:a4be10c:      *
1:a4be10c:      * @return the desired value for the published URI's Fragment.
1:a4be10c:      */
1:a4be10c:     protected String getPublishedFragmentValue(String uriFragmentEntry) {
1:a4be10c:         return uriFragmentEntry;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Subclasses can override what user info value is published by implementing alternate
1:a4be10c:      * logic for this method.  By default this method simply returns what was already
1:a4be10c:      * set as the UserInfo value in the original URI.
1:a4be10c:      *
1:a4be10c:      * @param uriUserInfoEntry
1:a4be10c:      *      The original value of the URI user info.
1:a4be10c:      *
1:a4be10c:      * @return the desired value for the published URI's user info.
1:a4be10c:      */
1:a4be10c:     protected String getPublishedUserInfoValue(String uriUserInfoEntry) {
1:a4be10c:         return uriUserInfoEntry;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Gets the URI query that's configured on the published URI that's sent to client's
1:a4be10c:      * when the cluster info is updated.
1:a4be10c:      *
1:a4be10c:      * @return the clusterClientUriQuery
1:a4be10c:      */
1:a4be10c:     public String getClusterClientUriQuery() {
1:a4be10c:         return clusterClientUriQuery;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * Sets the URI query that's configured on the published URI that's sent to client's
1:a4be10c:      * when the cluster info is updated.
1:a4be10c:      *
1:a4be10c:      * @param clusterClientUriQuery the clusterClientUriQuery to set
1:a4be10c:      */
1:a4be10c:     public void setClusterClientUriQuery(String clusterClientUriQuery) {
1:a4be10c:         this.clusterClientUriQuery = clusterClientUriQuery;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:a4be10c:      * @return the publishedHostStrategy
1:a4be10c:      */
1:a4be10c:     public PublishedHostStrategy getPublishedHostStrategy() {
1:a4be10c:         return publishedHostStrategy;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:37c46b9:      * @param strategy the publishedHostStrategy to set
1:a4be10c:      */
1:a4be10c:     public void setPublishedHostStrategy(PublishedHostStrategy strategy) {
1:a4be10c:         this.publishedHostStrategy = strategy;
1:a4be10c:     }
1:a4be10c: 
1:a4be10c:     /**
1:37c46b9:      * @param strategy the publishedHostStrategy to set
1:a4be10c:      */
1:a4be10c:     public void setPublishedHostStrategy(String strategy) {
1:a4be10c:         this.publishedHostStrategy = PublishedHostStrategy.getValue(strategy);
1:a4be10c:     }
1:40af36e: 
1:40af36e:     /**
1:40af36e:      * @param portMapping map the ports in restrictive environments
1:40af36e:      */
1:4800a7a:     public void setPortMapping(Map<Integer, Integer> portMapping) {
1:40af36e:         this.portMapping = portMapping;
1:40af36e:     }
1:4800a7a: 
1:4800a7a:     public Map<Integer, Integer>  getPortMapping() {
1:4800a7a:         return this.portMapping;
1:4800a7a:     }
1:4800a7a: 
1:4800a7a:     /**
1:4800a7a:      * @param hostMapping map the resolved hosts
1:4800a7a:      */
1:4800a7a:     public void setHostMapping(Map<String, String> hostMapping) {
1:4800a7a:         this.hostMapping = hostMapping;
1:4800a7a:     }
1:4800a7a: 
1:4800a7a:     public Map<String, String> getHostMapping() {
1:4800a7a:         return hostMapping;
1:4800a7a:     }
1:a4be10c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4800a7a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private Map<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
1:     private Map<String, String> hostMapping = new HashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:         if (hostMapping.containsKey(host)) {
1:             host = hostMapping.get(host);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setPortMapping(Map<Integer, Integer> portMapping) {
1: 
1:     public Map<Integer, Integer>  getPortMapping() {
1:         return this.portMapping;
1:     }
1: 
1:     /**
1:      * @param hostMapping map the resolved hosts
1:      */
1:     public void setHostMapping(Map<String, String> hostMapping) {
1:         this.hostMapping = hostMapping;
1:     }
1: 
1:     public Map<String, String> getHostMapping() {
1:         return hostMapping;
1:     }
commit:37c46b9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.vm.VMTransport;
/////////////////////////////////////////////////////////////////////////
1:         if ("vm".equals(scheme)) {
1:             return connectorURI;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param strategy the publishedHostStrategy to set
1:      * @param strategy the publishedHostStrategy to set
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return the value published for the given host.
1:      *
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a3a22ef
/////////////////////////////////////////////////////////////////////////
1:     public URI getPublishableConnectURI(TransportConnector connector) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         return publishedURI;
1:     }
1:     public String getPublishableConnectString(TransportConnector connector) throws Exception {
1:         return getPublishableConnectURI(connector).toString();
commit:40af36e
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:     private HashMap<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
/////////////////////////////////////////////////////////////////////////
1:         if (portMapping.containsKey(port)) {
1:             port = portMapping.get(port);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @param portMapping map the ports in restrictive environments
1:      */
0:     public void setPortMapping(HashMap<Integer, Integer> portMapping) {
1:         this.portMapping = portMapping;
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a4be10c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.net.InetAddress;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.util.Locale;
1: 
1: import org.apache.activemq.util.InetAddressUtil;
1: 
1: /**
1:  * Policy object that controls how a TransportConnector publishes the connector's
1:  * address to the outside world.  By default the connector will publish itself
1:  * using the resolved host name of the bound server socket.
1:  *
1:  * @org.apache.xbean.XBean
1:  */
1: public class PublishedAddressPolicy {
1: 
1:     private String clusterClientUriQuery;
1:     private PublishedHostStrategy publishedHostStrategy = PublishedHostStrategy.DEFAULT;
1: 
1:     /**
1:      * Defines the value of the published host value.
1:      */
1:     public enum PublishedHostStrategy {
1:         DEFAULT,
1:         IPADDRESS,
1:         HOSTNAME,
1:         FQDN;
1: 
1:         public static PublishedHostStrategy getValue(String value) {
1:             return valueOf(value.toUpperCase(Locale.ENGLISH));
1:         }
1:     }
1: 
1:     /**
1:      * Using the supplied TransportConnector this method returns the String that will
1:      * be used to update clients with this connector's connect address.
1:      *
1:      * @param connector
1:      *      The TransportConnector whose address is to be published.
1:      * @return a string URI address that a client can use to connect to this Transport.
1:      * @throws Exception
1:      */
0:     public String getPublishableConnectString(TransportConnector connector) throws Exception {
1: 
1:         URI connectorURI = connector.getConnectUri();
1: 
1:         if (connectorURI == null) {
1:             return null;
1:         }
1: 
1:         String scheme = connectorURI.getScheme();
1:         String userInfo = getPublishedUserInfoValue(connectorURI.getUserInfo());
1:         String host = getPublishedHostValue(connectorURI.getHost());
1:         int port = connectorURI.getPort();
1:         String path = getPublishedPathValue(connectorURI.getPath());
1:         String fragment = getPublishedFragmentValue(connectorURI.getFragment());
1: 
1:         URI publishedURI = new URI(scheme, userInfo, host, port, path, getClusterClientUriQuery(), fragment);
1: 
0:         return publishedURI.toString();
1:     }
1: 
1:     /**
1:      * Subclasses can override what host value is published by implementing alternate
1:      * logic for this method.
1:      *
1:      * @param uriHostEntry
0:      * @return
1:      * @throws UnknownHostException
1:      */
1:     protected String getPublishedHostValue(String uriHostEntry) throws UnknownHostException {
1: 
1:         // By default we just republish what was already present.
1:         String result = uriHostEntry;
1: 
1:         if (this.publishedHostStrategy.equals(PublishedHostStrategy.IPADDRESS)) {
1:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:             result = address.getHostAddress();
1:         } else if (this.publishedHostStrategy.equals(PublishedHostStrategy.HOSTNAME)) {
1:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:             if (address.isAnyLocalAddress()) {
1:                 // make it more human readable and useful, an alternative to 0.0.0.0
1:                 result = InetAddressUtil.getLocalHostName();
1:             } else {
1:                 result = address.getHostName();
1:             }
1:         } else if (this.publishedHostStrategy.equals(PublishedHostStrategy.FQDN)) {
1:             InetAddress address = InetAddress.getByName(uriHostEntry);
1:             if (address.isAnyLocalAddress()) {
1:                 // make it more human readable and useful, an alternative to 0.0.0.0
1:                 result = InetAddressUtil.getLocalHostName();
1:             } else {
1:                 result = address.getCanonicalHostName();
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Subclasses can override what path value is published by implementing alternate
1:      * logic for this method.  By default this method simply returns what was already
1:      * set as the Path value in the original URI.
1:      *
1:      * @param uriPathEntry
1:      *      The original value of the URI path.
1:      *
1:      * @return the desired value for the published URI's path.
1:      */
1:     protected String getPublishedPathValue(String uriPathEntry) {
1:         return uriPathEntry;
1:     }
1: 
1:     /**
1:      * Subclasses can override what host value is published by implementing alternate
1:      * logic for this method.  By default this method simply returns what was already
1:      * set as the Fragment value in the original URI.
1:      *
1:      * @param uriFragmentEntry
1:      *      The original value of the URI Fragment.
1:      *
1:      * @return the desired value for the published URI's Fragment.
1:      */
1:     protected String getPublishedFragmentValue(String uriFragmentEntry) {
1:         return uriFragmentEntry;
1:     }
1: 
1:     /**
1:      * Subclasses can override what user info value is published by implementing alternate
1:      * logic for this method.  By default this method simply returns what was already
1:      * set as the UserInfo value in the original URI.
1:      *
1:      * @param uriUserInfoEntry
1:      *      The original value of the URI user info.
1:      *
1:      * @return the desired value for the published URI's user info.
1:      */
1:     protected String getPublishedUserInfoValue(String uriUserInfoEntry) {
1:         return uriUserInfoEntry;
1:     }
1: 
1:     /**
1:      * Gets the URI query that's configured on the published URI that's sent to client's
1:      * when the cluster info is updated.
1:      *
1:      * @return the clusterClientUriQuery
1:      */
1:     public String getClusterClientUriQuery() {
1:         return clusterClientUriQuery;
1:     }
1: 
1:     /**
1:      * Sets the URI query that's configured on the published URI that's sent to client's
1:      * when the cluster info is updated.
1:      *
1:      * @param clusterClientUriQuery the clusterClientUriQuery to set
1:      */
1:     public void setClusterClientUriQuery(String clusterClientUriQuery) {
1:         this.clusterClientUriQuery = clusterClientUriQuery;
1:     }
1: 
1:     /**
1:      * @return the publishedHostStrategy
1:      */
1:     public PublishedHostStrategy getPublishedHostStrategy() {
1:         return publishedHostStrategy;
1:     }
1: 
1:     /**
0:      * @param publishedHostStrategy the publishedHostStrategy to set
1:      */
1:     public void setPublishedHostStrategy(PublishedHostStrategy strategy) {
1:         this.publishedHostStrategy = strategy;
1:     }
1: 
1:     /**
0:      * @param publishedHostStrategy the publishedHostStrategy to set
1:      */
1:     public void setPublishedHostStrategy(String strategy) {
1:         this.publishedHostStrategy = PublishedHostStrategy.getValue(strategy);
1:     }
1: }
============================================================================