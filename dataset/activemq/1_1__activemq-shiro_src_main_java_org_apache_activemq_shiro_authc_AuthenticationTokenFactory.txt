1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.shiro.authc.AuthenticationToken;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * A {@code AuthenticationTokenFactory} inspects a newly-added ActiveMQ connection and returns a Shiro
1:f9451e5:  * {@link AuthenticationToken} instance representing credentials associated with the connection.  These credentials can
1:f9451e5:  * be used to {@link org.apache.shiro.subject.Subject#login(org.apache.shiro.authc.AuthenticationToken) authenticate}
1:f9451e5:  * the connection, allowing for later identity and authorization (access control) checks.
1:f9451e5:  *
1:f9451e5:  * @see AuthenticationFilter#addConnection(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ConnectionInfo)
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public interface AuthenticationTokenFactory {
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns a Shiro {@code AuthenticationToken} instance that should be used to authenticate the connection's
1:f9451e5:      * {@link org.apache.shiro.subject.Subject}, or {@code null} if no authentication information can be obtained.
1:f9451e5:      * <p/>
1:f9451e5:      * If no {@code AuthenticationToken} can be obtained, the connection's Subject will be considered anonymous and any
1:f9451e5:      * downstream security checks that enforce authentication or authorization will fail (as would be expected).
1:f9451e5:      *
1:f9451e5:      * @param ref the subject's connection
1:f9451e5:      * @return a Shiro {@code AuthenticationToken} instance that should be used to authenticate the connection's
1:f9451e5:      *         {@link org.apache.shiro.subject.Subject}, or {@code null} if no authentication information can be obtained.
1:f9451e5:      * @throws Exception if there is a problem acquiring/creating an expected {@code AuthenticationToken}.
1:f9451e5:      */
1:f9451e5:     AuthenticationToken getAuthenticationToken(SubjectConnectionReference ref) throws Exception;
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.shiro.authc.AuthenticationToken;
1: 
1: /**
1:  * A {@code AuthenticationTokenFactory} inspects a newly-added ActiveMQ connection and returns a Shiro
1:  * {@link AuthenticationToken} instance representing credentials associated with the connection.  These credentials can
1:  * be used to {@link org.apache.shiro.subject.Subject#login(org.apache.shiro.authc.AuthenticationToken) authenticate}
1:  * the connection, allowing for later identity and authorization (access control) checks.
1:  *
1:  * @see AuthenticationFilter#addConnection(org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ConnectionInfo)
1:  * @since 5.10.0
1:  */
1: public interface AuthenticationTokenFactory {
1: 
1:     /**
1:      * Returns a Shiro {@code AuthenticationToken} instance that should be used to authenticate the connection's
1:      * {@link org.apache.shiro.subject.Subject}, or {@code null} if no authentication information can be obtained.
1:      * <p/>
1:      * If no {@code AuthenticationToken} can be obtained, the connection's Subject will be considered anonymous and any
1:      * downstream security checks that enforce authentication or authorization will fail (as would be expected).
1:      *
1:      * @param ref the subject's connection
1:      * @return a Shiro {@code AuthenticationToken} instance that should be used to authenticate the connection's
1:      *         {@link org.apache.shiro.subject.Subject}, or {@code null} if no authentication information can be obtained.
1:      * @throws Exception if there is a problem acquiring/creating an expected {@code AuthenticationToken}.
1:      */
1:     AuthenticationToken getAuthenticationToken(SubjectConnectionReference ref) throws Exception;
1: }
============================================================================