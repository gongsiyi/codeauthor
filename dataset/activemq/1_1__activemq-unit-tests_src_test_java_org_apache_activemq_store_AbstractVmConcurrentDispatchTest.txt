1:75990ef: /*
1:75990ef:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:75990ef:  * contributor license agreements.  See the NOTICE file distributed with
1:75990ef:  * this work for additional information regarding copyright ownership.
1:75990ef:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:75990ef:  * (the "License"); you may not use this file except in compliance with
1:75990ef:  * the License.  You may obtain a copy of the License at
1:75990ef:  *
1:75990ef:  *      http://www.apache.org/licenses/LICENSE-2.0
1:75990ef:  *
1:75990ef:  * Unless required by applicable law or agreed to in writing, software
1:75990ef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:75990ef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:75990ef:  * See the License for the specific language governing permissions and
1:75990ef:  * limitations under the License.
1:75990ef:  */
1:b9f9f03: package org.apache.activemq.store;
4:75990ef: 
1:75990ef: import static org.junit.Assert.assertFalse;
1:75990ef: import static org.junit.Assert.assertTrue;
1:75990ef: 
1:b9f9f03: import java.io.File;
1:b9f9f03: import java.io.IOException;
1:75990ef: import java.net.URI;
1:75990ef: import java.util.concurrent.CountDownLatch;
1:75990ef: import java.util.concurrent.ExecutorService;
1:75990ef: import java.util.concurrent.Executors;
1:75990ef: import java.util.concurrent.TimeUnit;
1:75990ef: import java.util.concurrent.atomic.AtomicBoolean;
1:a953f11: import java.util.concurrent.atomic.AtomicInteger;
1:75990ef: 
1:75990ef: import javax.jms.Connection;
1:75990ef: import javax.jms.DeliveryMode;
1:75990ef: import javax.jms.Destination;
1:75990ef: import javax.jms.ExceptionListener;
1:75990ef: import javax.jms.JMSException;
1:75990ef: import javax.jms.MapMessage;
1:75990ef: import javax.jms.Message;
1:75990ef: import javax.jms.MessageConsumer;
1:75990ef: import javax.jms.MessageProducer;
1:75990ef: import javax.jms.ObjectMessage;
1:75990ef: import javax.jms.Session;
1:75990ef: import javax.jms.TextMessage;
1:a953f11: import javax.jms.Topic;
1:75990ef: 
1:75990ef: import org.apache.activemq.ActiveMQConnectionFactory;
1:75990ef: import org.apache.activemq.ActiveMQSession;
1:75990ef: import org.apache.activemq.broker.BrokerService;
1:75990ef: import org.apache.activemq.broker.TransportConnector;
1:75990ef: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:75990ef: import org.apache.activemq.broker.region.policy.PolicyMap;
1:75990ef: import org.junit.After;
1:a953f11: import org.junit.Assume;
1:75990ef: import org.junit.Before;
1:b9f9f03: import org.junit.Rule;
1:75990ef: import org.junit.Test;
1:b9f9f03: import org.junit.rules.TemporaryFolder;
1:75990ef: import org.slf4j.Logger;
1:75990ef: import org.slf4j.LoggerFactory;
1:75990ef: 
1:75990ef: /**
1:75990ef:  * This test can also be used to debug AMQ-6218 and AMQ-6221
1:75990ef:  *
1:75990ef:  * This test shows that messages are received with non-null data while
1:75990ef:  * several consumers are used.
1:75990ef:  */
1:b9f9f03: public abstract class AbstractVmConcurrentDispatchTest {
1:75990ef: 
1:b9f9f03:     private static final Logger LOG = LoggerFactory.getLogger(AbstractVmConcurrentDispatchTest.class);
1:75990ef: 
1:75990ef:     private final MessageType messageType;
1:75990ef:     private final boolean reduceMemoryFootPrint;
1:a953f11:     protected final boolean useTopic;
1:75990ef: 
1:b9f9f03:     protected static enum MessageType {TEXT, MAP, OBJECT}
1:b9f9f03:     protected final static boolean[] booleanVals = {true, false};
1:b9f9f03:     protected static boolean[] reduceMemoryFootPrintVals = booleanVals;
1:a953f11:     protected static boolean[] useTopicVals = booleanVals;
1:a953f11:     private String testTopicName = "mytopic";
1:75990ef: 
1:b9f9f03:     @Rule
1:b9f9f03:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:75990ef: 
1:a953f11:     public AbstractVmConcurrentDispatchTest(MessageType messageType, boolean reduceMemoryFootPrint,
1:a953f11:             boolean useTopic) {
1:75990ef:         this.messageType = messageType;
1:75990ef:         this.reduceMemoryFootPrint = reduceMemoryFootPrint;
1:a953f11:         this.useTopic = useTopic;
6:75990ef:     }
1:75990ef: 
1:75990ef:     private BrokerService broker;
1:75990ef:     private final AtomicBoolean failure = new AtomicBoolean();
1:75990ef:     private CountDownLatch ready;
1:75990ef:     private URI connectionURI;
1:75990ef:     private URI vmConnectionURI;
1:75990ef: 
1:75990ef:     private final boolean USE_VM_TRANSPORT = true;
1:75990ef: 
1:75990ef:     private final int NUM_CONSUMERS = 30;
1:75990ef:     private final int NUM_PRODUCERS = 1;
1:75990ef:     private final int NUM_TASKS = NUM_CONSUMERS + NUM_PRODUCERS;
1:75990ef: 
1:a953f11:     private final AtomicInteger count = new AtomicInteger();
1:75990ef:     private String MessageId = null;
1:75990ef:     private int MessageCount = 0;
1:75990ef: 
1:75990ef:     @Before
1:75990ef:     public void setUp() throws Exception {
1:75990ef:         broker = new BrokerService();
1:75990ef:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:75990ef:         broker.setDeleteAllMessagesOnStartup(true);
1:75990ef:         PolicyMap policyMap = new PolicyMap();
1:75990ef:         PolicyEntry defaultPolicy = new PolicyEntry();
1:75990ef:         defaultPolicy.setReduceMemoryFootprint(reduceMemoryFootPrint);
1:75990ef:         policyMap.setDefaultEntry(defaultPolicy);
1:75990ef:         broker.setDestinationPolicy(policyMap);
1:b9f9f03:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:b9f9f03:         configurePersistenceAdapter(broker);
1:75990ef:         broker.start();
1:75990ef:         broker.waitUntilStarted();
1:75990ef: 
1:75990ef:         ready = new CountDownLatch(NUM_TASKS);
1:75990ef:         connectionURI = connector.getPublishableConnectURI();
1:75990ef:         vmConnectionURI = broker.getVmConnectorURI();
1:75990ef:     }
1:75990ef: 
1:75990ef:     @After
1:75990ef:     public void tearDown() throws Exception {
1:75990ef:         if (broker != null) {
1:75990ef:             broker.stop();
1:75990ef:         }
1:75990ef:     }
1:75990ef: 
1:b9f9f03:     protected abstract void configurePersistenceAdapter(final BrokerService broker) throws IOException;
1:b9f9f03: 
1:75990ef:     @Test(timeout=180000)
1:75990ef:     public void testMessagesAreValid() throws Exception {
1:a953f11:         if (this.useTopic) {
1:a953f11:             Assume.assumeTrue(reduceMemoryFootPrint);
1:a953f11:         }
1:75990ef: 
1:75990ef:         ExecutorService tasks = Executors.newFixedThreadPool(NUM_TASKS);
1:75990ef:         for (int i = 0; i < NUM_CONSUMERS; i++) {
1:75990ef:             LOG.info("Created Consumer: {}", i + 1);
1:a953f11:             tasks.execute(new HelloWorldConsumer(useTopic));
1:75990ef:         }
1:75990ef: 
1:75990ef:         for (int i = 0; i < NUM_PRODUCERS; i++) {
1:75990ef:             LOG.info("Created Producer: {}", i + 1);
1:a953f11:             tasks.execute(new HelloWorldProducer(useTopic));
1:75990ef:         }
1:75990ef: 
1:75990ef:         assertTrue(ready.await(20, TimeUnit.SECONDS));
1:75990ef: 
1:75990ef:         try {
1:75990ef:             tasks.shutdown();
1:a953f11:             //run for 10 seconds as that seems to be enough time to cause an error
1:a953f11:             //if there is going to be one
1:a953f11:             tasks.awaitTermination(10, TimeUnit.SECONDS);
1:75990ef:         } catch (Exception e) {
1:75990ef:             //should get exception with no errors
1:75990ef:         }
1:75990ef: 
1:75990ef:         assertFalse("Test Encountered a null bodied message", failure.get());
1:75990ef:     }
1:75990ef: 
1:75990ef:     public URI getBrokerURI() {
1:75990ef:         if (USE_VM_TRANSPORT) {
1:75990ef:             return vmConnectionURI;
1:75990ef:         } else {
1:75990ef:             return connectionURI;
1:75990ef:         }
1:75990ef:     }
1:75990ef: 
1:75990ef:     public class HelloWorldProducer implements Runnable {
1:75990ef: 
1:a953f11:         final boolean useTopic;
1:a953f11: 
1:a953f11:         public HelloWorldProducer(boolean useTopic) {
1:a953f11:             this.useTopic = useTopic;
1:a953f11:         }
1:a953f11: 
1:75990ef:         @Override
1:75990ef:         public void run() {
1:75990ef:             try {
1:75990ef:                 ActiveMQConnectionFactory connectionFactory =
1:75990ef:                     new ActiveMQConnectionFactory(getBrokerURI());
1:75990ef: 
1:75990ef:                 Connection connection = connectionFactory.createConnection();
1:75990ef:                 connection.start();
1:75990ef: 
1:75990ef:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:75990ef: 
1:a953f11:                 //If using topics, just test a generic topic name
1:a953f11:                 //If useTopic is false then we are testing virtual topics/queue consumes
1:a953f11:                 Destination destination = useTopic ? session.createTopic(testTopicName) :
1:a953f11:                     session.createTopic("VirtualTopic.AMQ6218Test");
1:75990ef: 
1:75990ef:                 MessageProducer producer = session.createProducer(destination);
1:75990ef: 
1:75990ef:                 LOG.info("Producer: {}", destination);
1:75990ef: 
1:75990ef:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:75990ef:                 producer.setPriority(4);
1:75990ef:                 producer.setTimeToLive(0);
1:75990ef: 
1:75990ef:                 ready.countDown();
1:75990ef: 
1:75990ef:                 int j = 0;
1:75990ef:                 while (!failure.get()) {
1:75990ef:                     j++;
1:75990ef:                     String text = "AMQ Message Number :" + j;
1:75990ef:                     Message message = null;
1:75990ef:                     if (messageType.equals(MessageType.MAP)) {
1:75990ef:                         MapMessage mapMessage = session.createMapMessage();
1:75990ef:                         mapMessage.setString("text", text);
1:75990ef:                         message = mapMessage;
1:75990ef:                     } else if (messageType.equals(MessageType.OBJECT)) {
1:75990ef:                         ObjectMessage objectMessage = session.createObjectMessage();
1:75990ef:                         objectMessage.setObject(text);
1:75990ef:                         message = objectMessage;
1:75990ef:                     } else {
1:75990ef:                         message = session.createTextMessage(text);
1:75990ef:                     }
1:75990ef:                     producer.send(message);
1:75990ef:                     LOG.info("Sent message: {}", message.getJMSMessageID());
1:75990ef:                 }
1:75990ef: 
1:75990ef:                 connection.close();
1:75990ef:             } catch (Exception e) {
1:75990ef:                 LOG.error("Caught: " + e);
1:75990ef:                 e.printStackTrace();
1:75990ef:             }
1:75990ef:         }
1:75990ef:     }
1:75990ef: 
1:75990ef:     public class HelloWorldConsumer implements Runnable, ExceptionListener {
1:a953f11:         final boolean useTopic;
1:a953f11: 
1:a953f11:         public HelloWorldConsumer(boolean useTopic) {
1:a953f11:             this.useTopic = useTopic;
1:a953f11:         }
1:75990ef: 
1:75990ef:         @Override
1:75990ef:         public void run() {
1:75990ef:             try {
1:75990ef: 
1:a953f11:                 int i = count.incrementAndGet();
1:a953f11:                 String destName = !useTopic ? "Consumer.Q" + i + ".VirtualTopic.AMQ6218Test" : testTopicName;
1:a953f11:                 LOG.info(destName);
1:a953f11: 
1:75990ef:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURI());
1:75990ef:                 Connection connection = connectionFactory.createConnection();
1:a953f11:                 connection.setClientID("clientId" + i);
1:75990ef:                 connection.start();
1:75990ef:                 Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:75990ef: 
1:a953f11:                 Destination destination = useTopic ? session.createTopic(destName) : session.createQueue(destName);
1:a953f11:                 MessageConsumer consumer = useTopic ?
1:a953f11:                         session.createDurableSubscriber((Topic) destination, "sub" + i) :
1:a953f11:                             session.createConsumer(destination);
1:75990ef: 
1:75990ef:                 ready.countDown();
1:75990ef: 
1:75990ef:                 while (!failure.get()) {
1:75990ef: 
1:75990ef:                     Message message = consumer.receive(500);
1:75990ef: 
1:75990ef:                     if (message != null) {
2:75990ef:                         synchronized (this) {
1:75990ef:                             if (MessageId != null) {
1:75990ef:                                 if (message.getJMSMessageID().equalsIgnoreCase(MessageId)) {
1:75990ef:                                     MessageCount++;
1:75990ef:                                 } else {
1:75990ef:                                     LOG.info("Count of message " + MessageId + " is " + MessageCount);
1:75990ef:                                     MessageCount = 1;
1:75990ef:                                     MessageId = message.getJMSMessageID();
1:75990ef:                                 }
1:75990ef:                             } else {
1:75990ef:                                 MessageId = message.getJMSMessageID();
1:75990ef:                                 MessageCount = 1;
1:75990ef:                             }
1:75990ef:                         }
1:75990ef: 
1:75990ef:                         String text = null;
1:75990ef:                         if (messageType.equals(MessageType.OBJECT) && message instanceof ObjectMessage) {
1:75990ef:                             ObjectMessage objectMessage = (ObjectMessage) message;
1:75990ef:                             text = (String) objectMessage.getObject();
1:75990ef:                         } else if (messageType.equals(MessageType.TEXT) && message instanceof TextMessage) {
1:75990ef:                             TextMessage textMessage = (TextMessage) message;
1:75990ef:                             text = textMessage.getText();
1:75990ef:                         } else if (messageType.equals(MessageType.MAP) && message instanceof MapMessage) {
1:75990ef:                             MapMessage mapMessage = (MapMessage) message;
1:75990ef:                             text = mapMessage.getString("text");
1:75990ef:                         } else {
1:a953f11:                             LOG.info(destName + " Message is not a instanceof " + messageType + " message id: " + message.getJMSMessageID() + message);
1:75990ef:                         }
1:75990ef: 
1:75990ef:                         if (text == null) {
1:a953f11:                             LOG.warn(destName + " text received as a null " + message);
1:75990ef:                             failure.set(true);
1:75990ef:                         } else {
1:a953f11:                             LOG.info(destName + " text " + text + " message id: " + message.getJMSMessageID());
1:75990ef:                         }
1:75990ef: 
1:75990ef:                         message.acknowledge();
1:75990ef:                     }
1:75990ef:                 }
1:75990ef: 
1:75990ef:                 connection.close();
1:75990ef:             } catch (Exception e) {
1:75990ef:                 LOG.error("Caught: ", e);
1:75990ef:             }
1:75990ef:         }
1:75990ef: 
1:75990ef:         @Override
1:75990ef:         public synchronized void onException(JMSException ex) {
1:75990ef:             LOG.error("JMS Exception occurred.  Shutting down client.");
1:75990ef:         }
1:75990ef:     }
1:75990ef: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a953f11
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Topic;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assume;
/////////////////////////////////////////////////////////////////////////
1:     protected final boolean useTopic;
1:     protected static boolean[] useTopicVals = booleanVals;
1:     private String testTopicName = "mytopic";
1:     public AbstractVmConcurrentDispatchTest(MessageType messageType, boolean reduceMemoryFootPrint,
1:             boolean useTopic) {
1:         this.useTopic = useTopic;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger count = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:         if (this.useTopic) {
1:             Assume.assumeTrue(reduceMemoryFootPrint);
1:         }
1:             tasks.execute(new HelloWorldConsumer(useTopic));
1:             tasks.execute(new HelloWorldProducer(useTopic));
1:             //run for 10 seconds as that seems to be enough time to cause an error
1:             //if there is going to be one
1:             tasks.awaitTermination(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         final boolean useTopic;
1: 
1:         public HelloWorldProducer(boolean useTopic) {
1:             this.useTopic = useTopic;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 //If using topics, just test a generic topic name
1:                 //If useTopic is false then we are testing virtual topics/queue consumes
1:                 Destination destination = useTopic ? session.createTopic(testTopicName) :
1:                     session.createTopic("VirtualTopic.AMQ6218Test");
/////////////////////////////////////////////////////////////////////////
1:         final boolean useTopic;
1: 
1:         public HelloWorldConsumer(boolean useTopic) {
1:             this.useTopic = useTopic;
1:         }
1:                 int i = count.incrementAndGet();
1:                 String destName = !useTopic ? "Consumer.Q" + i + ".VirtualTopic.AMQ6218Test" : testTopicName;
1:                 LOG.info(destName);
1: 
1:                 connection.setClientID("clientId" + i);
1:                 Destination destination = useTopic ? session.createTopic(destName) : session.createQueue(destName);
1:                 MessageConsumer consumer = useTopic ?
1:                         session.createDurableSubscriber((Topic) destination, "sub" + i) :
1:                             session.createConsumer(destination);
/////////////////////////////////////////////////////////////////////////
1:                             LOG.info(destName + " Message is not a instanceof " + messageType + " message id: " + message.getJMSMessageID() + message);
1:                             LOG.warn(destName + " text received as a null " + message);
1:                             LOG.info(destName + " text " + text + " message id: " + message.getJMSMessageID());
commit:b9f9f03
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store;
1: import java.io.File;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TemporaryFolder;
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractVmConcurrentDispatchTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractVmConcurrentDispatchTest.class);
1:     protected static enum MessageType {TEXT, MAP, OBJECT}
1:     protected final static boolean[] booleanVals = {true, false};
1:     protected static boolean[] reduceMemoryFootPrintVals = booleanVals;
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
0:     public AbstractVmConcurrentDispatchTest(MessageType messageType, boolean reduceMemoryFootPrint) {
/////////////////////////////////////////////////////////////////////////
1:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:         configurePersistenceAdapter(broker);
/////////////////////////////////////////////////////////////////////////
1:     protected abstract void configurePersistenceAdapter(final BrokerService broker) throws IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:             tasks.awaitTermination(20, TimeUnit.SECONDS);
commit:75990ef
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URI;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.junit.runners.Parameterized;
0: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test can also be used to debug AMQ-6218 and AMQ-6221
1:  *
1:  * This test shows that messages are received with non-null data while
1:  * several consumers are used.
1:  */
0: @RunWith(Parameterized.class)
0: public class AMQ6222Test {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6222Test.class);
1: 
1:     private final MessageType messageType;
1:     private final boolean reduceMemoryFootPrint;
0:     private final boolean concurrentDispatch;
1: 
0:     private static enum MessageType {TEXT, MAP, OBJECT}
0:     private final static boolean[] booleanVals = {true, false};
0:     private static boolean[] reduceMemoryFootPrintVals = booleanVals;
0:     private static boolean[] concurrentDispatchVals = booleanVals;
1: 
0:     @Parameters(name="Type:{0}; ReduceMemoryFootPrint:{1}; ConcurrentDispatch:{2}")
0:     public static Collection<Object[]> data() {
0:         List<Object[]> values = new ArrayList<>();
1: 
0:         for (MessageType mt : MessageType.values()) {
0:             for (boolean rmfVal : reduceMemoryFootPrintVals) {
0:                 for (boolean cdVal : concurrentDispatchVals) {
0:                     values.add(new Object[] {mt, rmfVal, cdVal});
1:                 }
1:             }
1:         }
1: 
0:         return values;
1:     }
1: 
0:     public AMQ6222Test(MessageType messageType, boolean reduceMemoryFootPrint,
0:             boolean concurrentDispatch) {
1:         this.messageType = messageType;
1:         this.reduceMemoryFootPrint = reduceMemoryFootPrint;
0:         this.concurrentDispatch = concurrentDispatch;
1:     }
1: 
1:     private BrokerService broker;
1:     private final AtomicBoolean failure = new AtomicBoolean();
1:     private CountDownLatch ready;
1:     private URI connectionURI;
1:     private URI vmConnectionURI;
1: 
1:     private final boolean USE_VM_TRANSPORT = true;
1: 
1:     private final int NUM_CONSUMERS = 30;
1:     private final int NUM_PRODUCERS = 1;
1:     private final int NUM_TASKS = NUM_CONSUMERS + NUM_PRODUCERS;
1: 
0:     private int i = 0;
1:     private String MessageId = null;
1:     private int MessageCount = 0;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setReduceMemoryFootprint(reduceMemoryFootPrint);
1:         policyMap.setDefaultEntry(defaultPolicy);
1:         broker.setDestinationPolicy(policyMap);
0:         KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         ad.setConcurrentStoreAndDispatchQueues(concurrentDispatch);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         ready = new CountDownLatch(NUM_TASKS);
1:         connectionURI = connector.getPublishableConnectURI();
1:         vmConnectionURI = broker.getVmConnectorURI();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Test(timeout=180000)
1:     public void testMessagesAreValid() throws Exception {
1: 
1:         ExecutorService tasks = Executors.newFixedThreadPool(NUM_TASKS);
1:         for (int i = 0; i < NUM_CONSUMERS; i++) {
1:             LOG.info("Created Consumer: {}", i + 1);
0:             tasks.execute(new HelloWorldConsumer());
1:         }
1: 
1:         for (int i = 0; i < NUM_PRODUCERS; i++) {
1:             LOG.info("Created Producer: {}", i + 1);
0:             tasks.execute(new HelloWorldProducer());
1:         }
1: 
1:         assertTrue(ready.await(20, TimeUnit.SECONDS));
1: 
1:         try {
1:             tasks.shutdown();
0:             tasks.awaitTermination(10, TimeUnit.SECONDS);
1:         } catch (Exception e) {
1:             //should get exception with no errors
1:         }
1: 
1:         assertFalse("Test Encountered a null bodied message", failure.get());
1:     }
1: 
1:     public URI getBrokerURI() {
1:         if (USE_VM_TRANSPORT) {
1:             return vmConnectionURI;
1:         } else {
1:             return connectionURI;
1:         }
1:     }
1: 
1:     public class HelloWorldProducer implements Runnable {
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 ActiveMQConnectionFactory connectionFactory =
1:                     new ActiveMQConnectionFactory(getBrokerURI());
1: 
1:                 Connection connection = connectionFactory.createConnection();
1:                 connection.start();
1: 
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:                 Destination destination = session.createTopic("VirtualTopic.AMQ6218Test");
1: 
1:                 MessageProducer producer = session.createProducer(destination);
1: 
1:                 LOG.info("Producer: {}", destination);
1: 
1:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                 producer.setPriority(4);
1:                 producer.setTimeToLive(0);
1: 
1:                 ready.countDown();
1: 
1:                 int j = 0;
1:                 while (!failure.get()) {
1:                     j++;
1:                     String text = "AMQ Message Number :" + j;
1:                     Message message = null;
1:                     if (messageType.equals(MessageType.MAP)) {
1:                         MapMessage mapMessage = session.createMapMessage();
1:                         mapMessage.setString("text", text);
1:                         message = mapMessage;
1:                     } else if (messageType.equals(MessageType.OBJECT)) {
1:                         ObjectMessage objectMessage = session.createObjectMessage();
1:                         objectMessage.setObject(text);
1:                         message = objectMessage;
1:                     } else {
1:                         message = session.createTextMessage(text);
1:                     }
1:                     producer.send(message);
1:                     LOG.info("Sent message: {}", message.getJMSMessageID());
1:                 }
1: 
1:                 connection.close();
1:             } catch (Exception e) {
1:                 LOG.error("Caught: " + e);
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     public class HelloWorldConsumer implements Runnable, ExceptionListener {
0:         String queueName;
1: 
1:         @Override
1:         public void run() {
1:             try {
1: 
1:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURI());
1:                 Connection connection = connectionFactory.createConnection();
1:                 connection.start();
1: 
1:                 Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:                 synchronized (this) {
0:                     queueName = "Consumer.Q" + i + ".VirtualTopic.AMQ6218Test";
0:                     i++;
0:                     LOG.info(queueName);
1:                 }
1: 
0:                 Destination destination = session.createQueue(queueName);
0:                 MessageConsumer consumer = session.createConsumer(destination);
1: 
1:                 ready.countDown();
1: 
1:                 while (!failure.get()) {
1: 
1:                     Message message = consumer.receive(500);
1: 
1:                     if (message != null) {
1:                         synchronized (this) {
1:                             if (MessageId != null) {
1:                                 if (message.getJMSMessageID().equalsIgnoreCase(MessageId)) {
1:                                     MessageCount++;
1:                                 } else {
1:                                     LOG.info("Count of message " + MessageId + " is " + MessageCount);
1:                                     MessageCount = 1;
1:                                     MessageId = message.getJMSMessageID();
1:                                 }
1:                             } else {
1:                                 MessageId = message.getJMSMessageID();
1:                                 MessageCount = 1;
1:                             }
1:                         }
1: 
1:                         String text = null;
1:                         if (messageType.equals(MessageType.OBJECT) && message instanceof ObjectMessage) {
1:                             ObjectMessage objectMessage = (ObjectMessage) message;
1:                             text = (String) objectMessage.getObject();
1:                         } else if (messageType.equals(MessageType.TEXT) && message instanceof TextMessage) {
1:                             TextMessage textMessage = (TextMessage) message;
1:                             text = textMessage.getText();
1:                         } else if (messageType.equals(MessageType.MAP) && message instanceof MapMessage) {
1:                             MapMessage mapMessage = (MapMessage) message;
1:                             text = mapMessage.getString("text");
1:                         } else {
0:                             LOG.info(queueName + " Message is not a instanceof " + messageType + " message id: " + message.getJMSMessageID() + message);
1:                         }
1: 
1:                         if (text == null) {
0:                             LOG.warn(queueName + " text received as a null " + message);
1:                             failure.set(true);
1:                         } else {
0:                             LOG.info(queueName + " text " + text + " message id: " + message.getJMSMessageID());
1:                         }
1: 
1:                         message.acknowledge();
1:                     }
1:                 }
1: 
1:                 connection.close();
1:             } catch (Exception e) {
1:                 LOG.error("Caught: ", e);
1:             }
1:         }
1: 
1:         @Override
1:         public synchronized void onException(JMSException ex) {
1:             LOG.error("JMS Exception occurred.  Shutting down client.");
1:         }
1:     }
1: }
============================================================================