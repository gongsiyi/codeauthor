1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.http;
6:40a7d3b: 
1:540dd5c: import java.io.IOException;
1:31c55f7: import java.security.cert.X509Certificate;
1:86cbdfd: import java.util.Queue;
1:86cbdfd: import java.util.concurrent.BlockingQueue;
1:86cbdfd: import java.util.concurrent.TimeUnit;
1:40a7d3b: 
1:8abcfd1: import org.apache.activemq.transport.TransportSupport;
1:1ccd7bd: import org.apache.activemq.util.ServiceStopper;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:40a7d3b: 
2:40a7d3b: /**
1:40a7d3b:  * A server side HTTP based TransportChannel which processes incoming packets
1:40a7d3b:  * and adds outgoing packets onto a {@link Queue} so that they can be dispatched
1:40a7d3b:  * by the HTTP GET requests from the client.
1:40a7d3b:  */
1:31c55f7: public class BlockingQueueTransport extends TransportSupport {
1:31c55f7: 
1:d34b2fe:     public static final long MAX_TIMEOUT = 30000L;
1:40a7d3b: 
1:540dd5c:     private BlockingQueue<Object> queue;
1:40a7d3b: 
1:540dd5c:     public BlockingQueueTransport(BlockingQueue<Object> channel) {
1:40a7d3b:         this.queue = channel;
1:37b8157:     }
1:37b8157: 
1:540dd5c:     public BlockingQueue<Object> getQueue() {
1:40a7d3b:         return queue;
4:40a7d3b:     }
1:37b8157: 
1:31c55f7:     @Override
1:9ca56a0:     public void oneway(Object command) throws IOException {
1:d34b2fe:         try {
1:d34b2fe:             boolean success = queue.offer(command, MAX_TIMEOUT, TimeUnit.MILLISECONDS);
1:540dd5c:             if (!success) {
1:d34b2fe:                 throw new IOException("Fail to add to BlockingQueue. Add timed out after " + MAX_TIMEOUT + "ms: size=" + queue.size());
1:540dd5c:             }
1:d34b2fe:         } catch (InterruptedException e) {
1:d34b2fe:             throw new IOException("Fail to add to BlockingQueue. Interrupted while waiting for space: size=" + queue.size());
1:40a7d3b:         }
1:40a7d3b:     }
1:140daf4: 
1:31c55f7:     @Override
1:140daf4:     public String getRemoteAddress() {
1:d62860f:         return "blockingQueue_" + queue.hashCode();
1:140daf4:     }
1:140daf4: 
1:31c55f7:     @Override
1:1ccd7bd:     protected void doStart() throws Exception {
1:1ccd7bd:     }
1:1ccd7bd: 
1:31c55f7:     @Override
1:1ccd7bd:     protected void doStop(ServiceStopper stopper) throws Exception {
1:8978ac0:     }
1:8978ac0: 
1:31c55f7:     @Override
1:8978ac0:     public int getReceiveCounter() {
1:8978ac0:         return 0;
1:37b8157:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:31c55f7:         return null;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public WireFormat getWireFormat() {
1:31c55f7:         return null;
1:31c55f7:     }
1:37b8157: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: import org.apache.activemq.wireformat.WireFormat;
1: public class BlockingQueueTransport extends TransportSupport {
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:     }
1: 
1:     @Override
1:     public WireFormat getWireFormat() {
1:         return null;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public int getReceiveCounter() {
1:         return 0;
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private BlockingQueue<Object> queue;
1:     public BlockingQueueTransport(BlockingQueue<Object> channel) {
1:     public BlockingQueue<Object> getQueue() {
1:             if (!success) {
1:             }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Queue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.TimeUnit;
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void oneway(Object command) throws IOException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.TransportSupport;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:d4ee73f
/////////////////////////////////////////////////////////////////////////
0: public class  BlockingQueueTransport extends TransportSupport {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4907ada
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:37b8157
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0:  *
0: 	public static CountDownLatch finalizeLatch;
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void finalize()
0:     {
0:     	finalizeLatch.countDown();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: }
commit:d62860f
/////////////////////////////////////////////////////////////////////////
1:         return "blockingQueue_" + queue.hashCode();
author:James Strachan
-------------------------------------------------------------------------------
commit:140daf4
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getRemoteAddress() {
0:         return "blockingQueue";
1:     }
1: 
commit:1ccd7bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
1:     protected void doStart() throws Exception {
1: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:     }   
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.http;
1: 
0: import edu.emory.mathcs.backport.java.util.Queue;
0: import edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue;
1: 
0: import org.activemq.command.Command;
0: import org.activemq.transport.TransportSupport;
1: 
0: import javax.jms.JMSException;
1: 
0: import java.io.IOException;
1: 
1: /**
1:  * A server side HTTP based TransportChannel which processes incoming packets
1:  * and adds outgoing packets onto a {@link Queue} so that they can be dispatched
1:  * by the HTTP GET requests from the client.
0:  * 
0:  * @version $Revision$
1:  */
0: public class BlockingQueueTransport extends TransportSupport {
0:     private BlockingQueue queue;
1: 
0:     public BlockingQueueTransport(BlockingQueue channel) {
1:         this.queue = channel;
1:     }
1: 
0:     public BlockingQueue getQueue() {
1:         return queue;
1:     }
1: 
0:     public void start() throws JMSException {
1:     }
1: 
0:     public void oneway(Command command) throws IOException {
0:         queue.add(command);
1:     }
1: 
0:     public void stop() throws Exception {
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:081b0e3
/////////////////////////////////////////////////////////////////////////
commit:d34b2fe
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     public static final long MAX_TIMEOUT = 30000L;
0: 
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             boolean success = queue.offer(command, MAX_TIMEOUT, TimeUnit.MILLISECONDS);
0:             if (!success)
1:                 throw new IOException("Fail to add to BlockingQueue. Add timed out after " + MAX_TIMEOUT + "ms: size=" + queue.size());
1:         } catch (InterruptedException e) {
1:             throw new IOException("Fail to add to BlockingQueue. Interrupted while waiting for space: size=" + queue.size());
0:         }
============================================================================