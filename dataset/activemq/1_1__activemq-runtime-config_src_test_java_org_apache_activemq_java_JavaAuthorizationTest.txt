1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.java;
1:43c3cae: 
1:43c3cae: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:43c3cae: import java.util.ArrayList;
1:43c3cae: import java.util.List;
1:43c3cae: import java.util.concurrent.TimeUnit;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.AbstractAuthorizationTest;
1:43c3cae: import org.apache.activemq.broker.BrokerPlugin;
1:43c3cae: import org.apache.activemq.broker.BrokerService;
1:43c3cae: import org.apache.activemq.filter.DestinationMapEntry;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1:43c3cae: import org.apache.activemq.security.AuthorizationEntry;
1:43c3cae: import org.apache.activemq.security.AuthorizationPlugin;
1:43c3cae: import org.apache.activemq.security.DefaultAuthorizationMap;
1:43c3cae: import org.apache.activemq.security.JaasAuthenticationPlugin;
1:43c3cae: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1:43c3cae: import org.junit.Test;
1:43c3cae: 
1:43c3cae: public class JavaAuthorizationTest extends AbstractAuthorizationTest {
1:43c3cae: 
1:43c3cae:     public static final int SLEEP = 2; // seconds
1:43c3cae:     String configurationSeed = "authorizationTest";
1:43c3cae: 
1:43c3cae:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1:43c3cae: 
1:43c3cae:     public void startBroker(BrokerService brokerService) throws Exception {
1:43c3cae:         this.brokerService = brokerService;
1:43c3cae: 
1:43c3cae:         JaasAuthenticationPlugin authenticationPlugin = new JaasAuthenticationPlugin();
1:43c3cae:         authenticationPlugin.setConfiguration("activemq-domain");
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:43c3cae:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:43c3cae:         authorizationPlugin.setMap(authorizationMap);
1:43c3cae: 
1:43c3cae:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin(),
1:43c3cae:                 authenticationPlugin, authorizationPlugin});
1:43c3cae:         brokerService.setPersistent(false);
1:43c3cae:         brokerService.start();
1:43c3cae:         brokerService.waitUntilStarted();
1:43c3cae: 
1:43c3cae:         javaConfigBroker =
1:43c3cae:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testMod() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = buildUsersMap();
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:43c3cae:         assertAllowed("user", "USERS.A");
1:43c3cae:         assertDenied("user", "GUESTS.A");
1:43c3cae: 
1:43c3cae:         assertDeniedTemp("guest");
1:43c3cae: 
1:43c3cae:        // applyNewConfig(brokerConfig, configurationSeed + "-users-guests", SLEEP);
1:43c3cae: 
1:43c3cae:         authorizationMap = buildUsersGuestsMap();
1:43c3cae:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertAllowed("user", "USERS.A");
1:43c3cae:         assertAllowed("guest", "GUESTS.A");
1:43c3cae:         assertDenied("user", "GUESTS.A");
1:43c3cae: 
1:43c3cae:         assertAllowedTemp("guest");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testModRm() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = buildUsersGuestsMap();
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         assertAllowed("user", "USERS.A");
1:43c3cae:         assertAllowed("guest", "GUESTS.A");
1:43c3cae:         assertDenied("user", "GUESTS.A");
1:43c3cae:         assertAllowedTemp("guest");
1:43c3cae: 
1:43c3cae:         authorizationMap = buildUsersMap();
1:43c3cae:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertAllowed("user", "USERS.A");
1:43c3cae:         assertDenied("user", "GUESTS.A");
1:43c3cae:         assertDeniedTemp("guest");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testWildcard() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = buildWildcardUsersGuestsMap();
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         final String ALL_USERS = "ALL.USERS.>";
1:43c3cae:         final String ALL_GUESTS = "ALL.GUESTS.>";
1:43c3cae: 
1:43c3cae:         assertAllowed("user", ALL_USERS);
1:43c3cae:         assertAllowed("guest", ALL_GUESTS);
1:43c3cae:         assertDenied("user", ALL_USERS + "," + ALL_GUESTS);
1:43c3cae:         assertDenied("guest", ALL_GUESTS + "," + ALL_USERS);
1:43c3cae: 
1:43c3cae:         final String ALL_PREFIX = "ALL.>";
1:43c3cae: 
1:43c3cae:         assertDenied("user", ALL_PREFIX);
1:43c3cae:         assertDenied("guest", ALL_PREFIX);
1:43c3cae: 
1:43c3cae:         assertAllowed("user", "ALL.USERS.A");
1:43c3cae:         assertAllowed("user", "ALL.USERS.A,ALL.USERS.B");
1:43c3cae:         assertAllowed("guest", "ALL.GUESTS.A");
1:43c3cae:         assertAllowed("guest", "ALL.GUESTS.A,ALL.GUESTS.B");
1:43c3cae: 
1:43c3cae:         assertDenied("user", "USERS.>");
1:43c3cae:         assertDenied("guest", "GUESTS.>");
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         assertAllowedTemp("guest");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     /**
1:43c3cae:      * @return
1:43c3cae:      * @throws Exception
1:43c3cae:      */
1:43c3cae:     private DefaultAuthorizationMap buildWildcardUsersGuestsMap() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:43c3cae:         @SuppressWarnings("rawtypes")
1:43c3cae:         List<DestinationMapEntry> entries = new ArrayList<>();
1:43c3cae:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildQueueAuthorizationEntry("ALL.USERS.>", "users", "users", "users"));
1:43c3cae:         entries.add(buildQueueAuthorizationEntry("ALL.GUESTS.>", "guests", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("ALL.USERS.>", "users", "users", "users"));
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("ALL.GUESTS.>", "guests", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:43c3cae:         tempEntry.setRead("tempDestinationAdmins,guests");
1:43c3cae:         tempEntry.setWrite("tempDestinationAdmins,guests");
1:43c3cae:         tempEntry.setAdmin("tempDestinationAdmins,guests");
1:43c3cae: 
1:43c3cae:         authorizationMap.setAuthorizationEntries(entries);
1:43c3cae:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:43c3cae:         return authorizationMap;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     private DefaultAuthorizationMap buildUsersMap() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:43c3cae:         @SuppressWarnings("rawtypes")
1:43c3cae:         List<DestinationMapEntry> entries = new ArrayList<>();
1:43c3cae:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildQueueAuthorizationEntry("USERS.>", "users", "users", "users"));
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("USERS.>", "users", "users", "users"));
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:43c3cae:         tempEntry.setRead("tempDestinationAdmins");
1:43c3cae:         tempEntry.setWrite("tempDestinationAdmins");
1:43c3cae:         tempEntry.setAdmin("tempDestinationAdmins");
1:43c3cae: 
1:43c3cae:         authorizationMap.setAuthorizationEntries(entries);
1:43c3cae:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:43c3cae: 
1:43c3cae:         return authorizationMap;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     private DefaultAuthorizationMap buildUsersGuestsMap() throws Exception {
1:43c3cae:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:43c3cae:         @SuppressWarnings("rawtypes")
1:43c3cae:         List<DestinationMapEntry> entries = new ArrayList<>();
1:43c3cae:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildQueueAuthorizationEntry("USERS.>", "users", "users", "users"));
1:43c3cae:         entries.add(buildQueueAuthorizationEntry("GUESTS.>", "guests", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("USERS.>", "users", "users", "users"));
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("GUESTS.>", "guests", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1:43c3cae: 
1:43c3cae:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:43c3cae:         tempEntry.setRead("tempDestinationAdmins,guests");
1:43c3cae:         tempEntry.setWrite("tempDestinationAdmins,guests");
1:43c3cae:         tempEntry.setAdmin("tempDestinationAdmins,guests");
1:43c3cae: 
1:43c3cae:         authorizationMap.setAuthorizationEntries(entries);
1:43c3cae:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:43c3cae:         return authorizationMap;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     private AuthorizationEntry buildQueueAuthorizationEntry(String queue, String read, String write, String admin) throws Exception {
1:43c3cae:         AuthorizationEntry entry = new AuthorizationEntry();
1:43c3cae:         entry.setQueue(queue);
1:43c3cae:         entry.setRead(read);
1:43c3cae:         entry.setWrite(write);
1:43c3cae:         entry.setAdmin(admin);
1:43c3cae:         return entry;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     private AuthorizationEntry buildTopicAuthorizationEntry(String topic, String read, String write, String admin) throws Exception {
1:43c3cae:         AuthorizationEntry entry = new AuthorizationEntry();
1:43c3cae:         entry.setTopic(topic);
1:43c3cae:         entry.setRead(read);
1:43c3cae:         entry.setWrite(write);
1:43c3cae:         entry.setAdmin(admin);
1:43c3cae:         return entry;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.java;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.AbstractAuthorizationTest;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.JaasAuthenticationPlugin;
1: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1: import org.junit.Test;
1: 
1: public class JavaAuthorizationTest extends AbstractAuthorizationTest {
1: 
1:     public static final int SLEEP = 2; // seconds
1:     String configurationSeed = "authorizationTest";
1: 
1:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1: 
1:     public void startBroker(BrokerService brokerService) throws Exception {
1:         this.brokerService = brokerService;
1: 
1:         JaasAuthenticationPlugin authenticationPlugin = new JaasAuthenticationPlugin();
1:         authenticationPlugin.setConfiguration("activemq-domain");
1: 
1: 
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:         authorizationPlugin.setMap(authorizationMap);
1: 
1:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin(),
1:                 authenticationPlugin, authorizationPlugin});
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         javaConfigBroker =
1:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:     }
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = buildUsersMap();
1:         BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:         assertAllowed("user", "USERS.A");
1:         assertDenied("user", "GUESTS.A");
1: 
1:         assertDeniedTemp("guest");
1: 
1:        // applyNewConfig(brokerConfig, configurationSeed + "-users-guests", SLEEP);
1: 
1:         authorizationMap = buildUsersGuestsMap();
1:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertAllowed("guest", "GUESTS.A");
1:         assertDenied("user", "GUESTS.A");
1: 
1:         assertAllowedTemp("guest");
1:     }
1: 
1:     @Test
1:     public void testModRm() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = buildUsersGuestsMap();
1:         BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         assertAllowed("user", "USERS.A");
1:         assertAllowed("guest", "GUESTS.A");
1:         assertDenied("user", "GUESTS.A");
1:         assertAllowedTemp("guest");
1: 
1:         authorizationMap = buildUsersMap();
1:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertDenied("user", "GUESTS.A");
1:         assertDeniedTemp("guest");
1:     }
1: 
1:     @Test
1:     public void testWildcard() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = buildWildcardUsersGuestsMap();
1:         BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         javaConfigBroker.updateAuthorizationMap(authorizationMap);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         final String ALL_USERS = "ALL.USERS.>";
1:         final String ALL_GUESTS = "ALL.GUESTS.>";
1: 
1:         assertAllowed("user", ALL_USERS);
1:         assertAllowed("guest", ALL_GUESTS);
1:         assertDenied("user", ALL_USERS + "," + ALL_GUESTS);
1:         assertDenied("guest", ALL_GUESTS + "," + ALL_USERS);
1: 
1:         final String ALL_PREFIX = "ALL.>";
1: 
1:         assertDenied("user", ALL_PREFIX);
1:         assertDenied("guest", ALL_PREFIX);
1: 
1:         assertAllowed("user", "ALL.USERS.A");
1:         assertAllowed("user", "ALL.USERS.A,ALL.USERS.B");
1:         assertAllowed("guest", "ALL.GUESTS.A");
1:         assertAllowed("guest", "ALL.GUESTS.A,ALL.GUESTS.B");
1: 
1:         assertDenied("user", "USERS.>");
1:         assertDenied("guest", "GUESTS.>");
1: 
1: 
1:         assertAllowedTemp("guest");
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws Exception
1:      */
1:     private DefaultAuthorizationMap buildWildcardUsersGuestsMap() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> entries = new ArrayList<>();
1:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildQueueAuthorizationEntry("ALL.USERS.>", "users", "users", "users"));
1:         entries.add(buildQueueAuthorizationEntry("ALL.GUESTS.>", "guests", "guests,users", "guests,users"));
1: 
1:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildTopicAuthorizationEntry("ALL.USERS.>", "users", "users", "users"));
1:         entries.add(buildTopicAuthorizationEntry("ALL.GUESTS.>", "guests", "guests,users", "guests,users"));
1: 
1:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("tempDestinationAdmins,guests");
1:         tempEntry.setWrite("tempDestinationAdmins,guests");
1:         tempEntry.setAdmin("tempDestinationAdmins,guests");
1: 
1:         authorizationMap.setAuthorizationEntries(entries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:         return authorizationMap;
1:     }
1: 
1:     private DefaultAuthorizationMap buildUsersMap() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> entries = new ArrayList<>();
1:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildQueueAuthorizationEntry("USERS.>", "users", "users", "users"));
1: 
1: 
1:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildTopicAuthorizationEntry("USERS.>", "users", "users", "users"));
1: 
1:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("tempDestinationAdmins");
1:         tempEntry.setWrite("tempDestinationAdmins");
1:         tempEntry.setAdmin("tempDestinationAdmins");
1: 
1:         authorizationMap.setAuthorizationEntries(entries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1: 
1:         return authorizationMap;
1:     }
1: 
1:     private DefaultAuthorizationMap buildUsersGuestsMap() throws Exception {
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap();
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> entries = new ArrayList<>();
1:         entries.add(buildQueueAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildQueueAuthorizationEntry("USERS.>", "users", "users", "users"));
1:         entries.add(buildQueueAuthorizationEntry("GUESTS.>", "guests", "guests,users", "guests,users"));
1: 
1:         entries.add(buildTopicAuthorizationEntry(">", "admins", "admins", "admins"));
1:         entries.add(buildTopicAuthorizationEntry("USERS.>", "users", "users", "users"));
1:         entries.add(buildTopicAuthorizationEntry("GUESTS.>", "guests", "guests,users", "guests,users"));
1: 
1:         entries.add(buildTopicAuthorizationEntry("ActiveMQ.Advisory.>", "guests,users", "guests,users", "guests,users"));
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("tempDestinationAdmins,guests");
1:         tempEntry.setWrite("tempDestinationAdmins,guests");
1:         tempEntry.setAdmin("tempDestinationAdmins,guests");
1: 
1:         authorizationMap.setAuthorizationEntries(entries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:         return authorizationMap;
1:     }
1: 
1:     private AuthorizationEntry buildQueueAuthorizationEntry(String queue, String read, String write, String admin) throws Exception {
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(queue);
1:         entry.setRead(read);
1:         entry.setWrite(write);
1:         entry.setAdmin(admin);
1:         return entry;
1:     }
1: 
1:     private AuthorizationEntry buildTopicAuthorizationEntry(String topic, String read, String write, String admin) throws Exception {
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setTopic(topic);
1:         entry.setRead(read);
1:         entry.setWrite(write);
1:         entry.setAdmin(admin);
1:         return entry;
1:     }
1: 
1: }
============================================================================