1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:7da1e6e: package org.apache.activemq.bugs;
1:c6a485f: 
1:7da1e6e: import static org.junit.Assert.assertEquals;
1:c6a485f: import static org.junit.Assert.assertFalse;
1:1a57728: 
1:866440d: import javax.jms.*;
1:1a57728: import javax.management.ObjectName;
1:1a57728: 
1:7da1e6e: import org.apache.activemq.ActiveMQConnection;
1:7da1e6e: import org.apache.activemq.ActiveMQConnectionFactory;
1:7da1e6e: import org.apache.activemq.broker.BrokerService;
1:7da1e6e: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:c6a485f: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c6a485f: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7da1e6e: import org.apache.activemq.command.ActiveMQDestination;
1:866440d: import org.apache.activemq.command.ActiveMQTopic;
1:7da1e6e: import org.junit.After;
1:7da1e6e: import org.junit.Before;
1:7da1e6e: import org.junit.Test;
1:c6a485f: 
1:7da1e6e: /**
1:7da1e6e:  * Test to determine if expired messages are being reaped if there is
1:42e51a3:  * no active consumer connected to the broker.
1:7da1e6e:  */
1:7da1e6e: public class MessageExpirationReaperTest {
1:42e51a3: 
1:42e51a3:     private BrokerService broker;
1:42e51a3:     private ConnectionFactory factory;
1:42e51a3:     private ActiveMQConnection connection;
1:42e51a3:     private final String destinationName = "TEST.Q";
1:42e51a3:     private final String brokerUrl = "tcp://localhost:0";
1:42e51a3:     private final String brokerName = "testBroker";
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:7da1e6e:     @Before
1:7da1e6e:     public void init() throws Exception {
1:7da1e6e:         createBroker();
1:42e51a3: 
1:42e51a3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:42e51a3: 
1:7da1e6e:         factory = createConnectionFactory();
1:7da1e6e:         connection = (ActiveMQConnection) factory.createConnection();
1:866440d:         connection.setClientID("test-connection");
1:7da1e6e:         connection.start();
1:7da1e6e:     }
1:42e51a3: 
1:7da1e6e:     @After
1:7da1e6e:     public void cleanUp() throws Exception {
1:7da1e6e:         connection.close();
1:7da1e6e:         broker.stop();
1:7da1e6e:     }
1:42e51a3: 
1:7da1e6e:     protected void createBroker() throws Exception {
1:7da1e6e:         broker = new BrokerService();
1:c6a485f:         broker.setDeleteAllMessagesOnStartup(true);
1:7da1e6e:         broker.setBrokerName(brokerName);
1:7da1e6e:         broker.addConnector(brokerUrl);
1:42e51a3: 
1:c6a485f:         PolicyMap policyMap = new PolicyMap();
1:c6a485f:         PolicyEntry defaultEntry = new PolicyEntry();
1:c6a485f:         defaultEntry.setExpireMessagesPeriod(500);
1:c6a485f:         policyMap.setDefaultEntry(defaultEntry);
1:c6a485f:         broker.setDestinationPolicy(policyMap);
1:42e51a3: 
1:7da1e6e:         broker.start();
1:7da1e6e:     }
1:42e51a3: 
1:7da1e6e:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:42e51a3:         return new ActiveMQConnectionFactory(connectionUri);
1:7da1e6e:     }
1:42e51a3: 
1:7da1e6e:     protected Session createSession() throws Exception {
1:42e51a3:         return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7da1e6e:     }
1:42e51a3: 
1:7da1e6e:     @Test
1:7da1e6e:     public void testExpiredMessageReaping() throws Exception {
1:42e51a3: 
1:7da1e6e:         Session producerSession = createSession();
1:7da1e6e:         ActiveMQDestination destination =  (ActiveMQDestination) producerSession.createQueue(destinationName);
1:7da1e6e:         MessageProducer producer = producerSession.createProducer(destination);
1:7da1e6e:         producer.setTimeToLive(1000);
1:42e51a3: 
1:7da1e6e:         final int count = 3;
1:42e51a3:         // Send some messages with an expiration
1:7da1e6e:         for (int i = 0; i < count; i++) {
1:7da1e6e:             TextMessage message = producerSession.createTextMessage("" + i);
1:7da1e6e:             producer.send(message);
1:7da1e6e:         }
1:42e51a3: 
1:42e51a3:         // Let the messages expire
1:c6a485f:         Thread.sleep(2000);
1:42e51a3: 
1:7da1e6e:         DestinationViewMBean view = createView(destination);
1:42e51a3: 
1:c6a485f:         assertEquals("Incorrect inflight count: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:c6a485f:         assertEquals("Incorrect queue size count", 0, view.getQueueSize());
1:42e51a3:         assertEquals("Incorrect expired size count", view.getEnqueueCount(), view.getExpiredCount());
1:42e51a3: 
1:42e51a3:         // Send more messages with an expiration
1:7da1e6e:         for (int i = 0; i < count; i++) {
1:7da1e6e:             TextMessage message = producerSession.createTextMessage("" + i);
1:7da1e6e:             producer.send(message);
1:7da1e6e:         }
1:42e51a3: 
1:42e51a3:         // Let the messages expire
1:c6a485f:         Thread.sleep(2000);
1:42e51a3: 
1:42e51a3:         // Simply browse the queue
1:7da1e6e:         Session browserSession = createSession();
1:7da1e6e:         QueueBrowser browser = browserSession.createBrowser((Queue) destination);
1:42e51a3:         assertFalse("no message in the browser", browser.getEnumeration().hasMoreElements());
1:42e51a3: 
1:42e51a3:         // The messages expire and should be reaped because of the presence of
1:42e51a3:         // the queue browser
1:7da1e6e:         assertEquals("Wrong inFlightCount: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:7da1e6e:     }
1:42e51a3: 
1:866440d:     @Test
1:866440d:     public void testExpiredMessagesOnTopic() throws Exception{
1:866440d:         Session session = createSession();
1:866440d: 
1:866440d:         // use a zero prefetch so messages don't go inflight
1:866440d:         ActiveMQTopic destination = new ActiveMQTopic(destinationName + "?consumer.prefetchSize=0");
1:866440d: 
1:866440d:         MessageProducer producer = session.createProducer(destination);
1:866440d: 
1:866440d:         // should have a durable sub because it's a little tricky to get messages to expire in
1:866440d:         // non-durable subs.. with durable subs, we can just expire in the topic using the expire
1:866440d:         // period.. also.. durable sub has to be "inactive" for the expire checker to actually
1:866440d:         // expire the messages
1:866440d:         MessageConsumer consumer = session.createDurableSubscriber(destination, "test-durable");
1:866440d: 
1:866440d:         producer.setTimeToLive(500);
1:866440d: 
1:866440d:         final int count = 3;
1:866440d:         // Send some messages with an expiration
1:866440d:         for (int i = 0; i < count; i++) {
1:866440d:             TextMessage message = session.createTextMessage("" + i);
1:866440d:             producer.send(message);
1:866440d:         }
1:866440d: 
1:866440d:         DestinationViewMBean view = createView(destination);
1:866440d:         // not expired yet...
1:866440d:         assertEquals("Incorrect enqueue count", 3, view.getEnqueueCount() );
1:866440d: 
1:866440d:         // close consumer so topic thinks consumer is inactive
1:866440d:         consumer.close();
1:866440d: 
1:866440d:         // Let the messages reach an expiry time
1:866440d:         Thread.sleep(2000);
1:866440d: 
1:866440d:         assertEquals("Incorrect inflight count: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:866440d:         assertEquals("Incorrect queue size count", 0, view.getQueueSize());
1:866440d:         assertEquals("Incorrect expired size count", view.getEnqueueCount(), view.getExpiredCount());
1:866440d:     }
1:866440d: 
1:7da1e6e:     protected DestinationViewMBean createView(ActiveMQDestination destination) throws Exception {
1:7da1e6e:         String domain = "org.apache.activemq";
1:7da1e6e:         ObjectName name;
1:7da1e6e:         if (destination.isQueue()) {
1:1a57728:             name = new ObjectName(domain + ":type=Broker,brokerName=" + brokerName + ",destinationType=Queue,destinationName=" + destinationName);
1:7da1e6e:         } else {
1:1a57728:             name = new ObjectName(domain + ":type=Broker,brokerName=" + brokerName + ",destinationType=Topic,destinationName=" + destinationName);
1:7da1e6e:         }
1:1ec71bd:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:1ec71bd:                 true);
1:7da1e6e:     }
1:7da1e6e: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:866440d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:         connection.setClientID("test-connection");
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testExpiredMessagesOnTopic() throws Exception{
1:         Session session = createSession();
1: 
1:         // use a zero prefetch so messages don't go inflight
1:         ActiveMQTopic destination = new ActiveMQTopic(destinationName + "?consumer.prefetchSize=0");
1: 
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // should have a durable sub because it's a little tricky to get messages to expire in
1:         // non-durable subs.. with durable subs, we can just expire in the topic using the expire
1:         // period.. also.. durable sub has to be "inactive" for the expire checker to actually
1:         // expire the messages
1:         MessageConsumer consumer = session.createDurableSubscriber(destination, "test-durable");
1: 
1:         producer.setTimeToLive(500);
1: 
1:         final int count = 3;
1:         // Send some messages with an expiration
1:         for (int i = 0; i < count; i++) {
1:             TextMessage message = session.createTextMessage("" + i);
1:             producer.send(message);
1:         }
1: 
1:         DestinationViewMBean view = createView(destination);
1:         // not expired yet...
1:         assertEquals("Incorrect enqueue count", 3, view.getEnqueueCount() );
1: 
1:         // close consumer so topic thinks consumer is inactive
1:         consumer.close();
1: 
1:         // Let the messages reach an expiry time
1:         Thread.sleep(2000);
1: 
1:         assertEquals("Incorrect inflight count: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:         assertEquals("Incorrect queue size count", 0, view.getQueueSize());
1:         assertEquals("Incorrect expired size count", view.getEnqueueCount(), view.getExpiredCount());
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:1a57728
/////////////////////////////////////////////////////////////////////////
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             name = new ObjectName(domain + ":type=Broker,brokerName=" + brokerName + ",destinationType=Queue,destinationName=" + destinationName);
1:             name = new ObjectName(domain + ":type=Broker,brokerName=" + brokerName + ",destinationType=Topic,destinationName=" + destinationName);
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:  * no active consumer connected to the broker.
1: 
1:     private BrokerService broker;
1:     private ConnectionFactory factory;
1:     private ActiveMQConnection connection;
1:     private final String destinationName = "TEST.Q";
1:     private final String brokerUrl = "tcp://localhost:0";
1:     private final String brokerName = "testBroker";
1:     private String connectionUri;
1: 
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1: 
1: 
1: 
1: 
1: 
1:         return new ActiveMQConnectionFactory(connectionUri);
1: 
1:         return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1: 
1: 
1:         // Send some messages with an expiration
1: 
1:         // Let the messages expire
1: 
1: 
1:         assertEquals("Incorrect expired size count", view.getEnqueueCount(), view.getExpiredCount());
1: 
1:         // Send more messages with an expiration
1: 
1:         // Let the messages expire
1: 
1:         // Simply browse the queue
1:         assertFalse("no message in the browser", browser.getEnumeration().hasMoreElements());
1: 
1:         // The messages expire and should be reaped because of the presence of
1:         // the queue browser
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.ConnectionFactory;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:                 true);
author:Gary Tully
-------------------------------------------------------------------------------
commit:e4b7601
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("Incorrect expired size count", view.getEnqueueCount(), view.getExpiredCount());   
commit:c6a485f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(500);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:         
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(2000);
1:         assertEquals("Incorrect inflight count: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:         assertEquals("Incorrect queue size count", 0, view.getQueueSize());
0:         assertEquals("Incorrect expired size count", 3, view.getEnqueueCount());   
/////////////////////////////////////////////////////////////////////////
0:         // Let the messages expire 
1:         Thread.sleep(2000);
0:         
0:         assertFalse("no message in the browser", browser.getEnumeration().hasMoreElements()); 
author:Bruce Snyder
-------------------------------------------------------------------------------
commit:7da1e6e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
0: 
1: import static org.junit.Assert.assertEquals;
0: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
0: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: 
1: /**
1:  * Test to determine if expired messages are being reaped if there is
0:  * no active consumer connected to the broker. 
0:  * 
0:  * @author bsnyder
0:  *
1:  */
1: public class MessageExpirationReaperTest {
0:     
0:     protected BrokerService broker; 
0:     protected ConnectionFactory factory;
0:     protected ActiveMQConnection connection;
0:     protected String destinationName = "TEST.Q";
0:     protected String brokerUrl = "tcp://localhost:61616";
0:     protected String brokerName = "testBroker";
0:     
1:     @Before
1:     public void init() throws Exception {
1:         createBroker();
0:         
1:         factory = createConnectionFactory();
1:         connection = (ActiveMQConnection) factory.createConnection();
1:         connection.start();
1:     }
0:     
1:     @After
1:     public void cleanUp() throws Exception {
1:         connection.close();
1:         broker.stop();
1:     }
0:     
1:     protected void createBroker() throws Exception {
1:         broker = new BrokerService();
0: //        broker.setPersistent(false);
0: //        broker.setUseJmx(true);
1:         broker.setBrokerName(brokerName);
1:         broker.addConnector(brokerUrl);
1:         broker.start();
1:     }
0:     
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory(brokerUrl);
1:     }
0:     
1:     protected Session createSession() throws Exception {
0:         return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);  
1:     }
0:     
1:     @Test
1:     public void testExpiredMessageReaping() throws Exception {
0:         
1:         Session producerSession = createSession();
1:         ActiveMQDestination destination =  (ActiveMQDestination) producerSession.createQueue(destinationName);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setTimeToLive(1000);
0:         
1:         final int count = 3;
0:         // Send some messages with an expiration 
1:         for (int i = 0; i < count; i++) {
1:             TextMessage message = producerSession.createTextMessage("" + i);
1:             producer.send(message);
1:         }
0:         
0:         // Let the messages expire 
0:         Thread.sleep(1000);
0:         
1:         DestinationViewMBean view = createView(destination);
0:         
0:         /*################### CURRENT EXPECTED FAILURE ####################*/ 
0:         // The messages expire and should be reaped but they're not currently 
0:         // reaped until there is an active consumer placed on the queue 
0:         assertEquals("Incorrect count: " + view.getInFlightCount(), 0, view.getInFlightCount());
0:         
0:         
0:         // Send more messages with an expiration 
1:         for (int i = 0; i < count; i++) {
1:             TextMessage message = producerSession.createTextMessage("" + i);
1:             producer.send(message);
1:         }
0:         
0:         // Simply browse the queue 
1:         Session browserSession = createSession();
1:         QueueBrowser browser = browserSession.createBrowser((Queue) destination);
0:         browser.getEnumeration(); 
0:         
0:         // The messages expire and should be reaped because of the presence of 
0:         // the queue browser 
1:         assertEquals("Wrong inFlightCount: " + view.getInFlightCount(), 0, view.getInFlightCount());
1:     }
0:     
1:     protected DestinationViewMBean createView(ActiveMQDestination destination) throws Exception {
0:         MBeanServer mbeanServer = broker.getManagementContext().getMBeanServer();
1:         String domain = "org.apache.activemq";
1:         ObjectName name;
1:         if (destination.isQueue()) {
0:             name = new ObjectName(domain + ":BrokerName=" + brokerName + ",Type=Queue,Destination=" + destinationName);
1:         } else {
0:             name = new ObjectName(domain + ":BrokerName=" + brokerName + ",Type=Topic,Destination=" + destinationName);
1:         }
0:         return (DestinationViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, DestinationViewMBean.class, true);
1:     }
1: }
============================================================================