1:6707ac6: /*
1:6707ac6:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:6707ac6:  *  contributor license agreements.  See the NOTICE file distributed with
1:6707ac6:  *  this work for additional information regarding copyright ownership.
1:6707ac6:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:6707ac6:  *  (the "License"); you may not use this file except in compliance with
1:6707ac6:  *  the License.  You may obtain a copy of the License at
1:6707ac6:  *
1:6707ac6:  *  http://www.apache.org/licenses/LICENSE-2.0
1:6707ac6:  *
1:6707ac6:  *  Unless required by applicable law or agreed to in writing, software
1:6707ac6:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:6707ac6:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6707ac6:  *  See the License for the specific language governing permissions and
1:6707ac6:  *  limitations under the License.
1:6707ac6:  */
1:6707ac6: import org.apache.activemq.ActiveMQConnectionFactory;
1:6707ac6: import javax.jms.Connection;
1:6707ac6: import javax.jms.Destination;
1:6707ac6: import javax.jms.JMSException;
1:6707ac6: import javax.jms.MapMessage;
1:6707ac6: import javax.jms.MessageConsumer;
1:6707ac6: import javax.jms.MessageProducer;
1:6707ac6: import javax.jms.Session;
1:6707ac6: import javax.jms.TemporaryQueue;
1:6707ac6: 
1:6707ac6: /**
1:6707ac6:  * The Retailer orders computers from the Vendor by sending a message via
1:6707ac6:  * the VendorOrderQueue. It then syncronously receives the reponse message
1:6707ac6:  * and reports if the order was successful or not.
1:6707ac6:  */
1:6707ac6: public class Retailer implements Runnable {
1:6707ac6: 	private String url;
1:6707ac6: 	private String user;
1:6707ac6: 	private String password;
1:6707ac6: 	
1:6707ac6: 	public Retailer(String url, String user, String password) {
1:6707ac6: 		this.url = url;
1:6707ac6: 		this.user = user;
1:6707ac6: 		this.password = password;
1:6707ac6: 	}
1:6707ac6: 	
1:6707ac6: 	public void run() {
1:6707ac6: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1:6707ac6: 		try {
1:6707ac6: 			Connection connection = connectionFactory.createConnection();
1:6707ac6: 			
1:6707ac6: 			// The Retailer's session is non-trasacted.
1:6707ac6: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6707ac6: 			Destination vendorOrderQueue = session.createQueue("VendorOrderQueue");
1:6707ac6: 			TemporaryQueue retailerConfirmQueue = session.createTemporaryQueue();
1:6707ac6: 			
1:6707ac6: 			MessageProducer producer = session.createProducer(vendorOrderQueue);
1:6707ac6: 			MessageConsumer replyConsumer = session.createConsumer(retailerConfirmQueue);
1:6707ac6: 
1:6707ac6: 			connection.start();
1:6707ac6: 
1:6707ac6: 			for (int i = 0; i < 5; i++) {
1:6707ac6: 				MapMessage message = session.createMapMessage();
1:6707ac6: 				message.setString("Item", "Computer(s)");
1:6707ac6: 				int quantity = (int)(Math.random() * 4) + 1;
1:6707ac6: 				message.setInt("Quantity", quantity);
1:6707ac6: 				message.setJMSReplyTo(retailerConfirmQueue);
1:6707ac6: 				producer.send(message);
1:6707ac6: 				System.out.println("Retailer: Ordered " + quantity + " computers.");
1:6707ac6: 				
1:6707ac6: 				MapMessage reply = (MapMessage) replyConsumer.receive();
1:6707ac6: 				if (reply.getBoolean("OrderAccepted")) {
1:6707ac6: 					System.out.println("Retailer: Order Filled");
1:6707ac6: 				} else {
1:6707ac6: 					System.out.println("Retailer: Order Not Filled");
1:6707ac6: 				}
1:6707ac6: 			}
1:6707ac6: 			
1:6707ac6: 			// Send a non-MapMessage to signal the end
1:6707ac6: 			producer.send(session.createMessage());
1:6707ac6: 			
1:6707ac6: 			replyConsumer.close();
1:6707ac6: 			connection.close();
1:6707ac6: 			
1:6707ac6: 		} catch (JMSException e) {
1:6707ac6: 			e.printStackTrace();
1:6707ac6: 		}
1:6707ac6: 	}
1:6707ac6: 	
1:6707ac6: 	public static void main(String[] args) {
1:6707ac6: 		String url = "tcp://localhost:61616";
1:6707ac6: 		String user = null;
1:6707ac6: 		String password = null;
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 1) {
1:6707ac6: 			url = args[0];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 2) {
1:6707ac6: 			user = args[1];
1:6707ac6: 		}
1:6707ac6: 
1:6707ac6: 		if (args.length >= 3) {
1:6707ac6: 			password = args[2];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		Retailer r = new Retailer(url, user, password);
1:6707ac6: 		
1:6707ac6: 		new Thread(r, "Retailer").start();
1:6707ac6: 	}
1:6707ac6: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Robert Davies
-------------------------------------------------------------------------------
commit:6707ac6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: 
1: /**
1:  * The Retailer orders computers from the Vendor by sending a message via
1:  * the VendorOrderQueue. It then syncronously receives the reponse message
1:  * and reports if the order was successful or not.
1:  */
1: public class Retailer implements Runnable {
1: 	private String url;
1: 	private String user;
1: 	private String password;
1: 	
1: 	public Retailer(String url, String user, String password) {
1: 		this.url = url;
1: 		this.user = user;
1: 		this.password = password;
1: 	}
1: 	
1: 	public void run() {
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1: 		try {
1: 			Connection connection = connectionFactory.createConnection();
1: 			
1: 			// The Retailer's session is non-trasacted.
1: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 			Destination vendorOrderQueue = session.createQueue("VendorOrderQueue");
1: 			TemporaryQueue retailerConfirmQueue = session.createTemporaryQueue();
1: 			
1: 			MessageProducer producer = session.createProducer(vendorOrderQueue);
1: 			MessageConsumer replyConsumer = session.createConsumer(retailerConfirmQueue);
1: 
1: 			connection.start();
1: 
1: 			for (int i = 0; i < 5; i++) {
1: 				MapMessage message = session.createMapMessage();
1: 				message.setString("Item", "Computer(s)");
1: 				int quantity = (int)(Math.random() * 4) + 1;
1: 				message.setInt("Quantity", quantity);
1: 				message.setJMSReplyTo(retailerConfirmQueue);
1: 				producer.send(message);
1: 				System.out.println("Retailer: Ordered " + quantity + " computers.");
1: 				
1: 				MapMessage reply = (MapMessage) replyConsumer.receive();
1: 				if (reply.getBoolean("OrderAccepted")) {
1: 					System.out.println("Retailer: Order Filled");
1: 				} else {
1: 					System.out.println("Retailer: Order Not Filled");
1: 				}
1: 			}
1: 			
1: 			// Send a non-MapMessage to signal the end
1: 			producer.send(session.createMessage());
1: 			
1: 			replyConsumer.close();
1: 			connection.close();
1: 			
1: 		} catch (JMSException e) {
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 	
1: 	public static void main(String[] args) {
1: 		String url = "tcp://localhost:61616";
1: 		String user = null;
1: 		String password = null;
1: 		
1: 		if (args.length >= 1) {
1: 			url = args[0];
1: 		}
1: 		
1: 		if (args.length >= 2) {
1: 			user = args[1];
1: 		}
1: 
1: 		if (args.length >= 3) {
1: 			password = args[2];
1: 		}
1: 		
1: 		Retailer r = new Retailer(url, user, password);
1: 		
1: 		new Thread(r, "Retailer").start();
1: 	}
1: }
============================================================================