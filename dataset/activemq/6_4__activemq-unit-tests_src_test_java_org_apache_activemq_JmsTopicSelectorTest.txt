1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
4:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:933eb2f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:7be63f2:  *
1:d29ca2a:  */
1:d29ca2a: public class JmsTopicSelectorTest extends TestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicSelectorTest.class);
1:230a86c: 
1:d29ca2a:     protected Connection connection;
1:d29ca2a:     protected Session session;
1:d29ca2a:     protected MessageConsumer consumer;
1:d29ca2a:     protected MessageProducer producer;
1:d29ca2a:     protected Destination consumerDestination;
1:d29ca2a:     protected Destination producerDestination;
1:d29ca2a:     protected boolean topic = true;
1:230a86c:     protected boolean durable;
1:d29ca2a:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:d29ca2a: 
1:d29ca2a:     public void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a: 
1:d29ca2a:         connectionFactory = createConnectionFactory();
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         if (durable) {
1:d29ca2a:             connection.setClientID(getClass().getName());
3:d29ca2a:         }
1:d29ca2a: 
1:230a86c:         LOG.info("Created connection: " + connection);
1:d29ca2a: 
1:d29ca2a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:230a86c:         LOG.info("Created session: " + session);
1:d29ca2a: 
1:d29ca2a:         if (topic) {
1:d29ca2a:             consumerDestination = session.createTopic(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createTopic(getProducerSubject());
1:d29ca2a:         } else {
1:d29ca2a:             consumerDestination = session.createQueue(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createQueue(getProducerSubject());
1:d29ca2a:         }
1:d29ca2a: 
1:230a86c:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:230a86c:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:d29ca2a:         producer = session.createProducer(producerDestination);
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:d29ca2a: 
1:230a86c:         LOG.info("Created producer: " + producer + " delivery mode = " + (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
1:d29ca2a:         connection.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void tearDown() throws Exception {
1:d29ca2a:         session.close();
1:d29ca2a:         connection.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected MessageConsumer createConsumer(String selector) throws JMSException {
1:d29ca2a:         if (durable) {
1:230a86c:             LOG.info("Creating durable consumer");
1:230a86c:             return session.createDurableSubscriber((Topic)consumerDestination, getName(), selector, false);
1:d29ca2a:         }
1:d29ca2a:         return session.createConsumer(consumerDestination, selector);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void sendMessages() throws Exception {
1:d29ca2a:         TextMessage message = session.createTextMessage("1");
1:d29ca2a:         message.setIntProperty("id", 1);
1:d29ca2a:         message.setJMSType("a");
1:d29ca2a:         message.setStringProperty("stringProperty", "a");
1:d29ca2a:         message.setLongProperty("longProperty", 1);
1:d29ca2a:         message.setBooleanProperty("booleanProperty", true);
1:d29ca2a:         producer.send(message);
1:d29ca2a: 
1:d29ca2a:         message = session.createTextMessage("2");
1:d29ca2a:         message.setIntProperty("id", 2);
1:d29ca2a:         message.setJMSType("a");
1:d29ca2a:         message.setStringProperty("stringProperty", "a");
1:d29ca2a:         message.setLongProperty("longProperty", 1);
1:d29ca2a:         message.setBooleanProperty("booleanProperty", false);
1:d29ca2a:         producer.send(message);
1:d29ca2a: 
1:d29ca2a:         message = session.createTextMessage("3");
1:d29ca2a:         message.setIntProperty("id", 3);
1:d29ca2a:         message.setJMSType("a");
1:d29ca2a:         message.setStringProperty("stringProperty", "a");
1:d29ca2a:         message.setLongProperty("longProperty", 1);
1:d29ca2a:         message.setBooleanProperty("booleanProperty", true);
1:d29ca2a:         producer.send(message);
1:d29ca2a: 
1:d29ca2a:         message = session.createTextMessage("4");
1:d29ca2a:         message.setIntProperty("id", 4);
1:d29ca2a:         message.setJMSType("b");
1:d29ca2a:         message.setStringProperty("stringProperty", "b");
1:d29ca2a:         message.setLongProperty("longProperty", 2);
1:d29ca2a:         message.setBooleanProperty("booleanProperty", false);
1:d29ca2a:         producer.send(message);
1:d29ca2a: 
1:d29ca2a:         message = session.createTextMessage("5");
1:d29ca2a:         message.setIntProperty("id", 5);
1:d29ca2a:         message.setJMSType("c");
1:d29ca2a:         message.setStringProperty("stringProperty", "c");
1:d29ca2a:         message.setLongProperty("longProperty", 3);
1:d29ca2a:         message.setBooleanProperty("booleanProperty", true);
1:d29ca2a:         producer.send(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void consumeMessages(int remaining) throws Exception {
1:d29ca2a:         consumer = createConsumer(null);
1:d29ca2a:         for (int i = 0; i < remaining; i++) {
1:d29ca2a:             consumer.receive(1000);
1:d29ca2a:         }
1:d29ca2a:         consumer.close();
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:7be63f2:     public void testEmptyPropertySelector() throws Exception {
1:7be63f2:         int remaining = 5;
1:7be63f2:         Message message = null;
1:7be63f2:         consumer = createConsumer("");
1:7be63f2:         sendMessages();
1:7be63f2:         while (true) {
1:7be63f2:             message = consumer.receive(1000);
1:7be63f2:             if (message == null) {
1:7be63f2:                 break;
1:7be63f2:             }
1:7be63f2: 
1:7be63f2:             remaining--;
1:7be63f2:         }
1:efc9a8d:         assertEquals(0, remaining);
1:7be63f2:         consumer.close();
1:7be63f2:         consumeMessages(remaining);
1:7be63f2:     }
1:efc9a8d: 
1:7be63f2: 
1:d29ca2a:     public void testPropertySelector() throws Exception {
1:d29ca2a:         int remaining = 5;
1:d29ca2a:         Message message = null;
1:d29ca2a:         consumer = createConsumer("stringProperty = 'a' and longProperty = 1 and booleanProperty = true");
1:d29ca2a:         sendMessages();
1:d29ca2a:         while (true) {
1:d29ca2a:             message = consumer.receive(1000);
1:d29ca2a:             if (message == null) {
1:d29ca2a:                 break;
1:d29ca2a:             }
1:230a86c:             String text = ((TextMessage)message).getText();
1:d29ca2a:             if (!text.equals("1") && !text.equals("3")) {
1:d29ca2a:                 fail("unexpected message: " + text);
1:d29ca2a:             }
1:d29ca2a:             remaining--;
1:d29ca2a:         }
1:efc9a8d:         assertEquals(3, remaining);
1:d29ca2a:         consumer.close();
1:d29ca2a:         consumeMessages(remaining);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testJMSPropertySelector() throws Exception {
1:d29ca2a:         int remaining = 5;
1:d29ca2a:         Message message = null;
1:d29ca2a:         consumer = createConsumer("JMSType = 'a' and stringProperty = 'a'");
1:d29ca2a:         sendMessages();
1:d29ca2a:         while (true) {
1:d29ca2a:             message = consumer.receive(1000);
1:d29ca2a:             if (message == null) {
1:d29ca2a:                 break;
1:d29ca2a:             }
1:230a86c:             String text = ((TextMessage)message).getText();
1:d29ca2a:             if (!text.equals("1") && !text.equals("2") && !text.equals("3")) {
1:d29ca2a:                 fail("unexpected message: " + text);
1:d29ca2a:             }
1:d29ca2a:             remaining--;
1:d29ca2a:         }
1:efc9a8d:         assertEquals(2, remaining);
1:d29ca2a:         consumer.close();
1:d29ca2a:         consumeMessages(remaining);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Christian Posta
-------------------------------------------------------------------------------
commit:efc9a8d
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, remaining);
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(3, remaining);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, remaining);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7be63f2
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public void testEmptyPropertySelector() throws Exception {
1:         int remaining = 5;
1:         Message message = null;
1:         consumer = createConsumer("");
1:         sendMessages();
1:         while (true) {
1:             message = consumer.receive(1000);
1:             if (message == null) {
1:                 break;
1:             }
1: 
1:             remaining--;
1:         }
0:         assertEquals(remaining, 0);
1:         consumer.close();
1:         consumeMessages(remaining);
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(JmsTopicSelectorTest.class);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JmsTopicSelectorTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean durable;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created connection: " + connection);
1:         LOG.info("Created session: " + session);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:         LOG.info("Created producer: " + producer + " delivery mode = " + (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Creating durable consumer");
1:             return session.createDurableSubscriber((Topic)consumerDestination, getName(), selector, false);
/////////////////////////////////////////////////////////////////////////
1:             String text = ((TextMessage)message).getText();
/////////////////////////////////////////////////////////////////////////
1:             String text = ((TextMessage)message).getText();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
1: public class JmsTopicSelectorTest extends TestSupport {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsTopicSelectorTest.class);
1:     
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Destination consumerDestination;
1:     protected Destination producerDestination;
1:     protected boolean topic = true;
0:     protected boolean durable = false;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1: 
0:     public JmsTopicSelectorTest() {
0:         super();
1:     }
1: 
0:     public JmsTopicSelectorTest(String name) {
0:         super(name);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connectionFactory = createConnectionFactory();
1:         connection = createConnection();
1:         if (durable) {
1:             connection.setClientID(getClass().getName());
1:         }
1: 
0:         log.info("Created connection: " + connection);
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         log.info("Created session: " + session);
1: 
1:         if (topic) {
1:             consumerDestination = session.createTopic(getConsumerSubject());
1:             producerDestination = session.createTopic(getProducerSubject());
1:         } else {
1:             consumerDestination = session.createQueue(getConsumerSubject());
1:             producerDestination = session.createQueue(getProducerSubject());
1:         }
1: 
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
0:         log.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:         producer = session.createProducer(producerDestination);
1:         producer.setDeliveryMode(deliveryMode);
1: 
0:         log.info("Created producer: " + producer + " delivery mode = " +
0:                 (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
1:         connection.start();
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         session.close();
1:         connection.close();
1:     }
1: 
1:     protected MessageConsumer createConsumer(String selector) throws JMSException {
1:         if (durable) {
0:             log.info("Creating durable consumer");
0:             return session.createDurableSubscriber((Topic) consumerDestination, getName(), selector, false);
1:         }
1:         return session.createConsumer(consumerDestination, selector);
1:     }
1: 
1:     public void sendMessages() throws Exception {
1:         TextMessage message = session.createTextMessage("1");
1:         message.setIntProperty("id", 1);
1:         message.setJMSType("a");
1:         message.setStringProperty("stringProperty", "a");
1:         message.setLongProperty("longProperty", 1);
1:         message.setBooleanProperty("booleanProperty", true);
1:         producer.send(message);
1: 
1:         message = session.createTextMessage("2");
1:         message.setIntProperty("id", 2);
1:         message.setJMSType("a");
1:         message.setStringProperty("stringProperty", "a");
1:         message.setLongProperty("longProperty", 1);
1:         message.setBooleanProperty("booleanProperty", false);
1:         producer.send(message);
1: 
1:         message = session.createTextMessage("3");
1:         message.setIntProperty("id", 3);
1:         message.setJMSType("a");
1:         message.setStringProperty("stringProperty", "a");
1:         message.setLongProperty("longProperty", 1);
1:         message.setBooleanProperty("booleanProperty", true);
1:         producer.send(message);
1: 
1:         message = session.createTextMessage("4");
1:         message.setIntProperty("id", 4);
1:         message.setJMSType("b");
1:         message.setStringProperty("stringProperty", "b");
1:         message.setLongProperty("longProperty", 2);
1:         message.setBooleanProperty("booleanProperty", false);
1:         producer.send(message);
1: 
1:         message = session.createTextMessage("5");
1:         message.setIntProperty("id", 5);
1:         message.setJMSType("c");
1:         message.setStringProperty("stringProperty", "c");
1:         message.setLongProperty("longProperty", 3);
1:         message.setBooleanProperty("booleanProperty", true);
1:         producer.send(message);
1:     }
1: 
1:     public void consumeMessages(int remaining) throws Exception {
1:         consumer = createConsumer(null);
1:         for (int i = 0; i < remaining; i++) {
1:             consumer.receive(1000);
1:         }
1:         consumer.close();
1: 
1:     }
1: 
1:     public void testPropertySelector() throws Exception {
1:         int remaining = 5;
1:         Message message = null;
1:         consumer = createConsumer("stringProperty = 'a' and longProperty = 1 and booleanProperty = true");
1:         sendMessages();
1:         while (true) {
1:             message = consumer.receive(1000);
1:             if (message == null) {
1:                 break;
1:             }
0:             String text = ((TextMessage) message).getText();
1:             if (!text.equals("1") && !text.equals("3")) {
1:                 fail("unexpected message: " + text);
1:             }
1:             remaining--;
1:         }
0:         assertEquals(remaining, 3);
1:         consumer.close();
1:         consumeMessages(remaining);
1: 
1:     }
1: 
1:     public void testJMSPropertySelector() throws Exception {
1:         int remaining = 5;
1:         Message message = null;
1:         consumer = createConsumer("JMSType = 'a' and stringProperty = 'a'");
1:         sendMessages();
1:         while (true) {
1:             message = consumer.receive(1000);
1:             if (message == null) {
1:                 break;
1:             }
0:             String text = ((TextMessage) message).getText();
1:             if (!text.equals("1") && !text.equals("2") && !text.equals("3")) {
1:                 fail("unexpected message: " + text);
1:             }
1:             remaining--;
1:         }
0:         assertEquals(remaining, 2);
1:         consumer.close();
1:         consumeMessages(remaining);
1: 
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicSelectorTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:f206a1b
/////////////////////////////////////////////////////////////////////////
============================================================================