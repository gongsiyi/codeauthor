4:3601e81: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
4:3601e81:  */
1:3601e81: package org.apache.activemq.broker.jmx;
1:686bfcf: 
1:5371cf5: import javax.jms.InvalidSelectorException;
1:686bfcf: import javax.management.ObjectName;
1:52e15a4: 
1:52e15a4: /**
1:b0c2a40:  *
1:b695b49:  */
1:b695b49: public interface SubscriptionViewMBean {
1:b695b49: 
1:5371cf5:     /**
1:07d4e8c:      * @return the clientId of the Connection the Subscription is on
1:c82f6f3:      */
1:ced6909:     @MBeanInfo("JMS Client id of the Connection the Subscription is on.")
1:fc00993:     String getClientId();
1:b695b49: 
1:c82f6f3:     /**
1:3601e81:      * @return the id of the Connection the Subscription is on
1:3601e81:      */
1:ced6909:     @MBeanInfo("ID of the Connection the Subscription is on.")
1:fc00993:     String getConnectionId();
1:5371cf5: 
1:3601e81:     /**
1:3601e81:      * @return the id of the Session the subscription is on
1:3601e81:      */
1:ced6909:     @MBeanInfo("ID of the Session the Subscription is on.")
1:fc00993:     long getSessionId();
1:5371cf5: 
1:3601e81:     /**
1:38ab4b1:      * @return the id of the Subscription
1:38ab4b1:      */
1:38ab4b1:     @MBeanInfo("ID of the Subscription.")
1:38ab4b1:     long getSubscriptionId();
1:38ab4b1: 
1:38ab4b1:     /**
1:3601e81:      * @return the destination name
1:3601e81:      */
1:11579bb:     @MBeanInfo("The name of the destination the subscription is on.")
1:fc00993:     String getDestinationName();
1:5371cf5: 
1:3601e81:     /**
1:5371cf5:      * @return the JMS selector on the current subscription
1:5371cf5:      */
1:ced6909:     @MBeanInfo("The SQL-92 message header selector or XPATH body selector of the subscription.")
1:fc00993:     String getSelector();
1:b695b49: 
1:5371cf5:     /**
1:b695b49:      * Attempts to change the current active selector on the subscription. This
1:b695b49:      * operation is not supported for persistent topics.
1:5371cf5:      */
1:ced6909:     void setSelector(@MBeanInfo("selector") String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:b695b49: 
1:3601e81:     /**
1:3601e81:      * @return true if the destination is a Queue
1:3601e81:      */
1:ced6909:     @MBeanInfo("Subscription is on a Queue")
1:fc00993:     boolean isDestinationQueue();
1:5371cf5: 
1:3601e81:     /**
1:3601e81:      * @return true of the destination is a Topic
1:3601e81:      */
1:ced6909:     @MBeanInfo("Subscription is on a Topic")
1:fc00993:     boolean isDestinationTopic();
1:9899dff: 
1:3601e81:     /**
1:3601e81:      * @return true if the destination is temporary
1:3601e81:      */
1:ced6909:     @MBeanInfo("Subscription is on a temporary Queue/Topic")
1:fc00993:     boolean isDestinationTemporary();
1:b695b49: 
1:c82f6f3:     /**
1:c82f6f3:      * @return true if the subscriber is active
1:c82f6f3:      */
1:ced6909:     @MBeanInfo("Subscription is active (connected and receiving messages).")
1:fc00993:     boolean isActive();
1:c82f6f3: 
1:0bfa0cd:     @MBeanInfo("Subscription was created by a demand-forwarding network bridge")
1:0bfa0cd:     boolean isNetwork();
1:0bfa0cd: 
1:3601e81:     /**
1:3601e81:      * @return number of messages pending delivery
1:3601e81:      */
1:ced6909:     @MBeanInfo("Number of messages pending delivery.")
1:fc00993:     int getPendingQueueSize();
1:c82f6f3: 
1:3601e81:     /**
1:3601e81:      * @return number of messages dispatched
1:3601e81:      */
1:ced6909:     @MBeanInfo("Number of messages dispatched awaiting acknowledgement.")
1:fc00993:     int getDispatchedQueueSize();
1:07d4e8c: 
1:07d4e8c:     /**
1:5e05df1:      * The same as the number of messages dispatched - making it explicit
1:5e05df1:      * @return number of messages waiting for an acknowledge.
1:9899dff:      */
1:ced6909:     @MBeanInfo("Number of messages dispatched awaiting acknowledgement.")
1:9899dff:     int getMessageCountAwaitingAcknowledge();
1:f5dcc9d: 
1:9899dff:     /**
1:07d4e8c:      * @return number of messages that matched the subscription
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Number of messages that sent to the client.")
1:c75ff7f:     long getDispatchedCounter();
1:b695b49: 
1:3601e81:     /**
1:07d4e8c:      * @return number of messages that matched the subscription
1:3601e81:      */
1:ced6909:     @MBeanInfo("Number of messages that matched the subscription.")
1:07d4e8c:     long getEnqueueCounter();
1:07d4e8c: 
1:07d4e8c:     /**
1:07d4e8c:      * @return number of messages queued by the client
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Number of messages were sent to and acknowledge by the client.")
1:07d4e8c:     long getDequeueCounter();
1:07d4e8c: 
1:f5f1366:     /**
1:f5f1366:      * @return the prefetch that has been configured for this subscriber
1:f5f1366:      */
1:ced6909:     @MBeanInfo("Number of messages to pre-fetch and dispatch to the client.")
1:fc00993:     int getPrefetchSize();
1:b695b49: 
1:b695b49:     /**
1:b695b49:      * @return whether or not the subscriber is retroactive or not
1:b695b49:      */
1:ced6909:     @MBeanInfo("The subscriber is retroactive (tries to receive broadcasted topic messages sent prior to connecting)")
1:fc00993:     boolean isRetroactive();
1:b695b49: 
1:b695b49:     /**
1:b695b49:      * @return whether or not the subscriber is an exclusive consumer
1:b695b49:      */
1:ced6909:     @MBeanInfo("The subscriber is exclusive (no other subscribers may receive messages from the destination as long as this one is)")
1:fc00993:     boolean isExclusive();
1:b695b49: 
1:b695b49:     /**
1:b695b49:      * @return whether or not the subscriber is durable (persistent)
1:b695b49:      */
1:11579bb:     @MBeanInfo("The subscription is persistent.")
1:fc00993:     boolean isDurable();
1:b695b49: 
1:b695b49:     /**
1:b695b49:      * @return whether or not the subscriber ignores local messages
1:b695b49:      */
1:11579bb:     @MBeanInfo("The subscription ignores local messages.")
1:fc00993:     boolean isNoLocal();
1:b695b49: 
1:b695b49:     /**
1:c2ad0c3:      * @return if the Consumer is configured for Async dispatch
1:c2ad0c3:      */
1:c2ad0c3:     @MBeanInfo("Is the consumer configured for Async Dispatch")
1:c2ad0c3:     boolean isDispatchAsync();
1:c2ad0c3: 
1:c2ad0c3:     /**
1:b695b49:      * @return the maximum number of pending messages allowed in addition to the
1:b695b49:      *         prefetch size. If enabled to a non-zero value then this will
1:b695b49:      *         perform eviction of messages for slow consumers on non-durable
1:b695b49:      *         topics.
1:b695b49:      */
1:ced6909:     @MBeanInfo("The maximum number of pending messages allowed (in addition to the prefetch size).")
1:fc00993:     int getMaximumPendingMessageLimit();
1:b695b49: 
1:b695b49:     /**
1:b695b49:      * @return the consumer priority
1:b695b49:      */
1:ced6909:     @MBeanInfo("The subscription priority")
1:fc00993:     byte getPriority();
1:b695b49: 
1:b695b49:     /**
1:38ab4b1:      * @return the name of the consumer which is only used for durable
1:38ab4b1:      *         consumers.
1:38ab4b1:      */
1:38ab4b1:     @MBeanInfo("The name of the subscription (durable subscriptions only).")
1:38ab4b1:     String getSubscriptionName();
1:38ab4b1: 
1:38ab4b1:     /**
1:52e15a4:      * Returns true if this subscription (which may be using wildcards) matches the given queue name
1:7f883f6:      *
1:52e15a4:      * @param queueName the JMS queue name to match against
1:52e15a4:      * @return true if this subscription matches the given queue or false if not
1:52e15a4:      */
1:ced6909:     @MBeanInfo("Returns true if the subscription (which may be using wildcards) matches the given queue name")
1:52e15a4:     boolean isMatchingQueue(String queueName);
1:52e15a4: 
1:52e15a4:     /**
1:52e15a4:      * Returns true if this subscription (which may be using wildcards) matches the given topic name
1:f5dcc9d:      *
1:52e15a4:      * @param topicName the JMS topic name to match against
1:52e15a4:      * @return true if this subscription matches the given topic or false if not
1:52e15a4:      */
1:ced6909:     @MBeanInfo("Returns true if the subscription (which may be using wildcards) matches the given topic name")
1:52e15a4:     boolean isMatchingTopic(String topicName);
1:e085ed4: 
1:e085ed4:     /**
1:e085ed4:      * Returns true if the subscription is slow
1:e085ed4:      *
1:e085ed4:      * @return true if the subscription is slow
1:e085ed4:      */
1:e085ed4:     @MBeanInfo("Returns true if the subscription is slow")
1:e085ed4:     boolean isSlowConsumer();
1:e085ed4: 
1:f5dcc9d:     /**
1:f5dcc9d:      * Returns the User Name used to authorize creation of this Subscription.
1:f5dcc9d:      * This value can be null if display of user name information is disabled.
1:f5dcc9d:      *
1:f5dcc9d:      * @return the name of the user that created this Subscription
1:f5dcc9d:      */
1:f5dcc9d:     @MBeanInfo("User Name used to authorize creation of this Subscription")
1:f5dcc9d:     String getUserName();
1:686bfcf: 
1:686bfcf:     /**
1:686bfcf:      * Returns the ObjectName of the Connection that created this Subscription.
1:686bfcf:      * This value can be null if for instance this is an off-line durable subscription.
1:686bfcf:      *
1:686bfcf:      * @return the name of the Connection that created this Subscription.
1:686bfcf:      */
1:686bfcf:     @MBeanInfo("ObjectName of the Connection that created this Subscription")
1:686bfcf:     ObjectName getConnection();
1:07ec890: 
1:07ec890:     @MBeanInfo("Resets statistics.")
1:07ec890:     void resetStatistics();
1:07ec890: 
1:07ec890:     @MBeanInfo("Messages consumed")
1:07ec890:     long getConsumedCount();
1:07ec890: 
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c2ad0c3
/////////////////////////////////////////////////////////////////////////
1:      * @return if the Consumer is configured for Async dispatch
1:      */
1:     @MBeanInfo("Is the consumer configured for Async Dispatch")
1:     boolean isDispatchAsync();
1: 
1:     /**
commit:8906a53
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * The same as the number of messages dispatched - making it explicit
1:      * @return number of messages waiting for an acknowledge.
commit:38ab4b1
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated
1:      * @return the id of the Subscription
1:      */
1:     @MBeanInfo("ID of the Subscription.")
1:     long getSubscriptionId();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated
1:      * @return the name of the consumer which is only used for durable
1:      *         consumers.
1:      */
1:     @MBeanInfo("The name of the subscription (durable subscriptions only).")
1:     String getSubscriptionName();
1: 
1:     /**
author:gtully
-------------------------------------------------------------------------------
commit:11579bb
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The name of the destination the subscription is on.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The subscription is persistent.")
1:     @MBeanInfo("The subscription ignores local messages.")
author:Rob Davies
-------------------------------------------------------------------------------
commit:07ec890
/////////////////////////////////////////////////////////////////////////
1: 
1:     @MBeanInfo("Resets statistics.")
1:     void resetStatistics();
1: 
1:     @MBeanInfo("Messages consumed")
1:     long getConsumedCount();
1: 
author:Christian Posta
-------------------------------------------------------------------------------
commit:0bfa0cd
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Subscription was created by a demand-forwarding network bridge")
1:     boolean isNetwork();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     String getClientId();
1:     String getConnectionId();
1:     long getSessionId();
0:     long getSubcriptionId();
1:     String getDestinationName();
1:     String getSelector();
0:     void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:     boolean isDestinationQueue();
1:     boolean isDestinationTopic();
1:     boolean isDestinationTemporary();
1:     boolean isActive();
1:     int getPendingQueueSize();
1:     int getDispatchedQueueSize();
/////////////////////////////////////////////////////////////////////////
1:     int getPrefetchSize();
1:     boolean isRetroactive();
1:     boolean isExclusive();
1:     boolean isDurable();
1:     boolean isNoLocal();
/////////////////////////////////////////////////////////////////////////
1:     int getMaximumPendingMessageLimit();
1:     byte getPriority();
0:     String getSubcriptionName();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f5f1366
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the prefetch that has been configured for this subscriber
1:      */
0:     public int getPrefetchSize();
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1:      * @return the clientId of the Connection the Subscription is on
/////////////////////////////////////////////////////////////////////////
0:     public int getPendingQueueSize();
0:     public int getDispatchedQueueSize();
1:     
1:     /**
1:      * @return number of messages that matched the subscription
1:      */
0:     long getDispachedCounter();
1:      * @return number of messages that matched the subscription
1:     long getEnqueueCounter();
1: 
1:     /**
1:      * @return number of messages queued by the client
1:      */
1:     long getDequeueCounter();
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:686bfcf
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the ObjectName of the Connection that created this Subscription.
1:      * This value can be null if for instance this is an off-line durable subscription.
1:      *
1:      * @return the name of the Connection that created this Subscription.
1:      */
1:     @MBeanInfo("ObjectName of the Connection that created this Subscription")
1:     ObjectName getConnection();
1: 
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
0:      * The same as the number of messages dispatched -
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the User Name used to authorize creation of this Subscription.
1:      * This value can be null if display of user name information is disabled.
1:      *
1:      * @return the name of the user that created this Subscription
1:      */
1:     @MBeanInfo("User Name used to authorize creation of this Subscription")
1:     String getUserName();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e085ed4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns true if the subscription is slow
1:      *
1:      * @return true if the subscription is slow
1:      */
1:     @MBeanInfo("Returns true if the subscription is slow")
1:     boolean isSlowConsumer();
1: 
commit:c75ff7f
/////////////////////////////////////////////////////////////////////////
1:     long getDispatchedCounter();
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("JMS Client id of the Connection the Subscription is on.")
1:     @MBeanInfo("ID of the Connection the Subscription is on.")
1:     @MBeanInfo("ID of the Session the Subscription is on.")
0:     @MBeanInfo("ID of the Subscription.")
0:     @MBeanInfo("The name of the destionation the subscription is on.")
1:     @MBeanInfo("The SQL-92 message header selector or XPATH body selector of the subscription.")
1:     void setSelector(@MBeanInfo("selector") String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:     @MBeanInfo("Subscription is on a Queue")
1:     @MBeanInfo("Subscription is on a Topic")
1:     @MBeanInfo("Subscription is on a temporary Queue/Topic")
1:     @MBeanInfo("Subscription is active (connected and receiving messages).")
1:     @MBeanInfo("Number of messages pending delivery.")
1:     @MBeanInfo("Number of messages dispatched awaiting acknowledgement.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages dispatched awaiting acknowledgement.")
1:     @MBeanInfo("Number of messages that sent to the client.")
1:     @MBeanInfo("Number of messages that matched the subscription.")
1:     @MBeanInfo("Number of messages were sent to and acknowledge by the client.")
1:     @MBeanInfo("Number of messages to pre-fetch and dispatch to the client.")
1:     @MBeanInfo("The subscriber is retroactive (tries to receive broadcasted topic messages sent prior to connecting)")
1:     @MBeanInfo("The subscriber is exclusive (no other subscribers may receive messages from the destination as long as this one is)")
0:     @MBeanInfo("The subsription is persistent.")
0:     @MBeanInfo("The subsription ignores local messages.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The maximum number of pending messages allowed (in addition to the prefetch size).")
1:     @MBeanInfo("The subscription priority")
0:     @MBeanInfo("The name of the subscription (durable subscriptions only).")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Returns true if the subscription (which may be using wildcards) matches the given queue name")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Returns true if the subscription (which may be using wildcards) matches the given topic name")
author:James Strachan
-------------------------------------------------------------------------------
commit:52e15a4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns true if this subscription (which may be using wildcards) matches the given queue name
0:      *
1:      * @param queueName the JMS queue name to match against
1:      * @return true if this subscription matches the given queue or false if not
1:      */
1:     boolean isMatchingQueue(String queueName);
1: 
1:     /**
1:      * Returns true if this subscription (which may be using wildcards) matches the given topic name
0:      *
1:      * @param topicName the JMS topic name to match against
1:      * @return true if this subscription matches the given topic or false if not
1:      */
1:     boolean isMatchingTopic(String topicName);
commit:b695b49
/////////////////////////////////////////////////////////////////////////
1: public interface SubscriptionViewMBean {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Attempts to change the current active selector on the subscription. This
1:      * operation is not supported for persistent topics.
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return whether or not the subscriber is retroactive or not
1:      */
0:     public boolean isRetroactive();
1: 
1:     /**
1:      * @return whether or not the subscriber is an exclusive consumer
1:      */
0:     public boolean isExclusive();
1: 
1:     /**
1:      * @return whether or not the subscriber is durable (persistent)
1:      */
0:     public boolean isDurable();
1: 
1:     /**
1:      * @return whether or not the subscriber ignores local messages
1:      */
0:     public boolean isNoLocal();
1: 
1:     /**
1:      * @return the maximum number of pending messages allowed in addition to the
1:      *         prefetch size. If enabled to a non-zero value then this will
1:      *         perform eviction of messages for slow consumers on non-durable
1:      *         topics.
1:      */
0:     public int getMaximumPendingMessageLimit();
1: 
1:     /**
1:      * @return the consumer priority
1:      */
0:     public byte getPriority();
1: 
1:     /**
0:      * @return the name of the consumer which is only used for durable
0:      *         consumers.
1:      */
0:     public String getSubcriptionName();
commit:5371cf5
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidSelectorException;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the JMS selector on the current subscription
1:      */
0:     public String getSelector();
1:     
1:     /**
0:      * Attempts to change the current active selector on the subscription.
0:      * This operation is not supported for persistent topics.
1:      */
0:     public void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:9899dff
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * The same as the number of messages dispatched - 
0:      * making it explicit
0:      * @return
1:      */
1:     int getMessageCountAwaitingAcknowledge();
commit:c82f6f3
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @return the clientId
1:      */
0:     public String getClientId();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return true if the subscriber is active
1:      */
0:     public boolean isActive();
commit:3601e81
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
0: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public interface SubscriptionViewMBean{
1:     /**
1:      * @return the id of the Connection the Subscription is on
1:      */
0:     public String getConnectionId();
0: 
1:     /**
1:      * @return the id of the Session the subscription is on
1:      */
0:     public long getSessionId();
0: 
1:     /**
0:      * @return the id of the Subscription
1:      */
0:     public long getSubcriptionId();
0: 
1:     /**
1:      * @return the destination name
1:      */
0:     public String getDestinationName();
0: 
1:     /**
1:      * @return true if the destination is a Queue
1:      */
0:     public boolean isDestinationQueue();
0: 
1:     /**
1:      * @return true of the destination is a Topic
1:      */
0:     public boolean isDestinationTopic();
0: 
1:     /**
1:      * @return true if the destination is temporary
1:      */
0:     public boolean isDestinationTemporary();
0: 
1:     /**
0:      * The subscription should release as may references as it can to help the garbage collector reclaim memory.
1:      */
0:     public void gc();
0: 
1:     /**
1:      * @return number of messages pending delivery
1:      */
0:     public int getPending();
0: 
1:     /**
1:      * @return number of messages dispatched
1:      */
0:     public int getDispatched();
0: 
1:     /**
0:      * @return number of messages delivered
1:      */
0:     public int getDelivered();
0: }
============================================================================