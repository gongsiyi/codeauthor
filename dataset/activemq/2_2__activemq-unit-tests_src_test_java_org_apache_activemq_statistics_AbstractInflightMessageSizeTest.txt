1:4605503: /**
1:4605503:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4605503:  * contributor license agreements.  See the NOTICE file distributed with
1:4605503:  * this work for additional information regarding copyright ownership.
1:4605503:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4605503:  * (the "License"); you may not use this file except in compliance with
1:4605503:  * the License.  You may obtain a copy of the License at
1:4605503:  *
1:4605503:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4605503:  *
1:4605503:  * Unless required by applicable law or agreed to in writing, software
1:4605503:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4605503:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4605503:  * See the License for the specific language governing permissions and
1:4605503:  * limitations under the License.
1:4605503:  */
1:4605503: package org.apache.activemq.statistics;
1:4605503: 
1:4605503: import static org.junit.Assert.assertEquals;
1:4605503: import static org.junit.Assert.assertTrue;
1:4605503: 
1:4605503: import java.util.Arrays;
1:4605503: import java.util.Collection;
1:4605503: import java.util.Random;
1:4605503: 
1:4605503: import javax.jms.BytesMessage;
1:4605503: import javax.jms.Connection;
1:4605503: import javax.jms.JMSException;
1:4605503: import javax.jms.MessageConsumer;
1:4605503: import javax.jms.MessageProducer;
1:4605503: import javax.jms.Session;
1:4605503: 
1:4605503: import org.apache.activemq.ActiveMQConnectionFactory;
1:4605503: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:4605503: import org.apache.activemq.ActiveMQSession;
1:4605503: import org.apache.activemq.TestSupport;
1:4605503: import org.apache.activemq.broker.BrokerService;
1:4605503: import org.apache.activemq.broker.TransportConnector;
1:4605503: import org.apache.activemq.broker.region.Destination;
1:4605503: import org.apache.activemq.broker.region.Subscription;
1:65b0f2a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:65b0f2a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:4605503: import org.apache.activemq.command.ActiveMQDestination;
1:4605503: import org.apache.activemq.util.Wait;
1:4605503: import org.junit.After;
1:4605503: import org.junit.Assume;
1:4605503: import org.junit.Before;
1:4605503: import org.junit.Test;
1:4605503: import org.junit.runners.Parameterized.Parameters;
1:4605503: 
1:4605503: /**
1:4605503:  * This test shows Inflight Message sizes are correct for various acknowledgement modes.
1:4605503:  */
1:4605503: public abstract class AbstractInflightMessageSizeTest {
1:4605503: 
1:4605503:     protected BrokerService brokerService;
1:4605503:     protected Connection connection;
1:4605503:     protected String brokerUrlString;
1:4605503:     protected Session session;
1:4605503:     protected javax.jms.Destination dest;
1:4605503:     protected Destination amqDestination;
1:4605503:     protected MessageConsumer consumer;
1:4605503:     protected int prefetch = 100;
1:65b0f2a:     protected boolean useTopicSubscriptionInflightStats;
1:4605503:     final protected int ackType;
1:4605503:     final protected boolean optimizeAcknowledge;
1:4605503:     final protected String destName = "testDest";
1:4605503: 
1:4605503:     @Parameters
1:4605503:     public static Collection<Object[]> data() {
1:4605503:         return Arrays.asList(new Object[][] {
1:65b0f2a:                 {ActiveMQSession.SESSION_TRANSACTED, true, true},
1:65b0f2a:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, true, true},
1:65b0f2a:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, true, true},
1:65b0f2a:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, true, true},
1:65b0f2a:                 {ActiveMQSession.SESSION_TRANSACTED, false, true},
1:65b0f2a:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, false, true},
1:65b0f2a:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, false, true},
1:65b0f2a:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, false, true},
1:65b0f2a:                 {ActiveMQSession.SESSION_TRANSACTED, true, false},
1:65b0f2a:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, true, false},
1:65b0f2a:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, true, false},
1:65b0f2a:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, true, false},
1:65b0f2a:                 {ActiveMQSession.SESSION_TRANSACTED, false, false},
1:65b0f2a:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, false, false},
1:65b0f2a:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, false, false},
1:65b0f2a:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, false, false}
1:4605503:         });
1:4605503:     }
1:4605503: 
1:65b0f2a:     public AbstractInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge, boolean useTopicSubscriptionInflightStats) {
1:4605503:         this.ackType = ackType;
1:4605503:         this.optimizeAcknowledge = optimizeAcknowledge;
1:65b0f2a:         this.useTopicSubscriptionInflightStats = useTopicSubscriptionInflightStats;
1:4605503:     }
1:4605503: 
1:4605503:     @Before
1:4605503:     public void setUp() throws Exception {
1:4605503:         brokerService = new BrokerService();
1:4605503:         brokerService.setDeleteAllMessagesOnStartup(true);
1:4605503:         TransportConnector tcp = brokerService
1:4605503:                 .addConnector("tcp://localhost:0");
1:65b0f2a:         PolicyEntry policy = new PolicyEntry();
1:65b0f2a:         policy.setUseTopicSubscriptionInflightStats(useTopicSubscriptionInflightStats);
1:65b0f2a:         PolicyMap pMap = new PolicyMap();
1:65b0f2a:         pMap.setDefaultEntry(policy);
1:65b0f2a:         brokerService.setDestinationPolicy(pMap);
1:65b0f2a: 
1:4605503:         brokerService.start();
1:4605503:         //used to test optimizeAcknowledge works
1:4605503:         String optAckString = optimizeAcknowledge ? "?jms.optimizeAcknowledge=true&jms.optimizedAckScheduledAckInterval=2000" : "";
1:4605503:         brokerUrlString = tcp.getPublishableConnectString() + optAckString;
1:4605503:         connection = createConnectionFactory().createConnection();
1:4605503:         connection.setClientID("client1");
1:4605503:         connection.start();
1:4605503:         session = connection.createSession(ackType == ActiveMQSession.SESSION_TRANSACTED, ackType);
1:4605503:         dest = getDestination();
1:4605503:         consumer = getMessageConsumer();
1:4605503:         amqDestination = TestSupport.getDestination(brokerService, getActiveMQDestination());
1:4605503:     }
1:4605503: 
1:4605503:     protected ActiveMQConnectionFactory createConnectionFactory()
1:4605503:             throws Exception {
1:4605503:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:4605503:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:4605503:         prefetchPolicy.setTopicPrefetch(prefetch);
1:4605503:         prefetchPolicy.setQueuePrefetch(prefetch);
1:4605503:         prefetchPolicy.setOptimizeDurableTopicPrefetch(prefetch);
1:4605503:         factory.setPrefetchPolicy(prefetchPolicy);
1:4605503:         return factory;
1:4605503:     }
1:4605503: 
1:4605503:     @After
1:4605503:     public void tearDown() throws Exception {
1:4605503:         if (connection != null) {
1:4605503:             connection.close();
1:4605503:         }
1:4605503:         brokerService.stop();
1:4605503:     }
1:4605503: 
1:4605503:     /**
1:4605503:      * Tests that inflight message size goes up and comes back down to 0 after
1:4605503:      * messages are consumed
1:4605503:      *
1:4605503:      * @throws javax.jms.JMSException
1:4605503:      * @throws InterruptedException
1:4605503:      */
1:8b40624:     @Test(timeout=31000)
1:4605503:     public void testInflightMessageSize() throws Exception {
1:65b0f2a:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1:65b0f2a: 
1:4605503:         final long size = sendMessages(10);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be greater than the content length sent", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() > size;
1:4605503:             }
1:4605503:         }));
1:4605503: 
1:4605503:         receiveMessages(10);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() == 0;
1:4605503:             }
1:4605503:         }));
1:4605503:     }
1:4605503: 
1:4605503:     /**
1:4605503:      * Test that the in flight message size won't rise after prefetch is filled
1:4605503:      *
1:4605503:      * @throws Exception
1:4605503:      */
1:8b40624:     @Test(timeout=31000)
1:4605503:     public void testInflightMessageSizePrefetchFilled() throws Exception {
1:65b0f2a:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1:65b0f2a: 
1:4605503:         final long size = sendMessages(prefetch);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be greater than content length", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() > size;
1:4605503:             }
1:4605503:         }));
1:4605503: 
1:4605503:         final long inFlightSize = getSubscription().getInFlightMessageSize();
1:4605503:         sendMessages(10);
1:4605503: 
1:4605503:         //Prefetch has been filled, so the size should not change with 10 more messages
1:4605503:         assertEquals("Inflight message size should not change", inFlightSize, getSubscription().getInFlightMessageSize());
1:4605503: 
1:4605503:         receiveMessages(prefetch + 10);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() == 0;
1:4605503:             }
1:4605503:         }));
1:4605503:     }
1:4605503: 
1:4605503:     /**
1:4605503:      * Test that the in flight message size will still rise if prefetch is not filled
1:4605503:      *
1:4605503:      * @throws Exception
1:4605503:      */
1:8b40624:     @Test(timeout=31000)
1:4605503:     public void testInflightMessageSizePrefetchNotFilled() throws Exception {
1:65b0f2a:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1:65b0f2a: 
1:4605503:         final long size = sendMessages(prefetch - 10);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be greater than content length", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() > size;
1:4605503:             }
1:4605503:         }));
1:4605503: 
1:4605503:         //capture the inflight size and send 10 more messages
1:4605503:         final long inFlightSize = getSubscription().getInFlightMessageSize();
1:4605503:         sendMessages(10);
1:4605503: 
1:4605503:         //Prefetch has NOT been filled, so the size should rise with 10 more messages
1:4605503:         assertTrue("Inflight message size should be greater than previous inlight size", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() > inFlightSize;
1:4605503:             }
1:4605503:         }));
1:4605503: 
1:4605503:         receiveMessages(prefetch);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() == 0;
1:4605503:             }
1:4605503:         }));
1:4605503:     }
1:4605503: 
1:4605503: 
1:4605503:     /**
1:4605503:      * Tests that inflight message size goes up and doesn't go down if receive is rolledback
1:4605503:      *
1:4605503:      * @throws javax.jms.JMSException
1:4605503:      * @throws InterruptedException
1:4605503:      */
1:8b40624:     @Test(timeout=31000)
1:4605503:     public void testInflightMessageSizeRollback() throws Exception {
1:65b0f2a:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1:4605503:         Assume.assumeTrue(ackType == ActiveMQSession.SESSION_TRANSACTED);
1:4605503: 
1:4605503:         final long size = sendMessages(10);
1:4605503: 
1:4605503:         assertTrue("Inflight message size should be greater than the content length sent", Wait.waitFor(new Wait.Condition() {
1:4605503:             @Override
1:4605503:             public boolean isSatisified() throws Exception {
1:4605503:                 return getSubscription().getInFlightMessageSize() > size;
1:4605503:             }
1:4605503:         }));
1:4605503: 
1:4605503:        long inFlightSize = getSubscription().getInFlightMessageSize();
1:4605503: 
1:4605503:         for (int i = 0; i < 10; i++) {
1:4605503:             consumer.receive();
1:4605503:         }
1:4605503:         session.rollback();
1:4605503: 
1:4605503:         assertEquals("Inflight message size should not change on rollback", inFlightSize, getSubscription().getInFlightMessageSize());
1:4605503:     }
1:4605503: 
1:4605503:     /**
1:4605503:      * This method will generate random sized messages up to 150000 bytes.
1:4605503:      *
1:4605503:      * @param count
1:4605503:      * @throws JMSException
1:4605503:      */
1:4605503:     protected long sendMessages(int count) throws JMSException {
1:4605503:         MessageProducer producer = session.createProducer(dest);
1:4605503:         long totalSize = 0;
1:4605503:         for (int i = 0; i < count; i++) {
1:4605503:             Random r = new Random();
1:4605503:             int size = r.nextInt(150000);
1:4605503:             totalSize += size;
1:4605503:             byte[] bytes = new byte[size > 0 ? size : 1];
1:4605503:             r.nextBytes(bytes);
1:4605503:             BytesMessage bytesMessage = session.createBytesMessage();
1:4605503:             bytesMessage.writeBytes(bytes);
1:4605503:             producer.send(bytesMessage);
1:4605503:         }
1:4605503:         if (session.getTransacted()) {
1:4605503:             session.commit();
1:4605503:         }
1:4605503:         return totalSize;
1:4605503:     }
1:4605503: 
1:4605503:     protected void receiveMessages(int count) throws JMSException {
1:4605503:         for (int i = 0; i < count; i++) {
1:4605503:             javax.jms.Message m = consumer.receive();
1:4605503:             if (ackType == ActiveMQSession.SESSION_TRANSACTED) {
1:4605503:                 session.commit();
1:4605503:             } else if (ackType != ActiveMQSession.AUTO_ACKNOWLEDGE) {
1:4605503:                 m.acknowledge();
1:4605503:             }
1:4605503:         }
1:4605503:     }
1:4605503: 
1:4605503:     protected abstract Subscription getSubscription();
1:4605503: 
1:4605503:     protected abstract ActiveMQDestination getActiveMQDestination();
1:4605503: 
1:4605503:     protected abstract MessageConsumer getMessageConsumer() throws JMSException;
1:4605503: 
1:4605503:     protected abstract javax.jms.Destination getDestination() throws JMSException ;
1:4605503: 
1:4605503: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8b40624
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=31000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=31000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=31000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=31000)
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:65b0f2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:     protected boolean useTopicSubscriptionInflightStats;
/////////////////////////////////////////////////////////////////////////
1:                 {ActiveMQSession.SESSION_TRANSACTED, true, true},
1:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, true, true},
1:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, true, true},
1:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, true, true},
1:                 {ActiveMQSession.SESSION_TRANSACTED, false, true},
1:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, false, true},
1:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, false, true},
1:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, false, true},
1:                 {ActiveMQSession.SESSION_TRANSACTED, true, false},
1:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, true, false},
1:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, true, false},
1:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, true, false},
1:                 {ActiveMQSession.SESSION_TRANSACTED, false, false},
1:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, false, false},
1:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, false, false},
1:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, false, false}
1:     public AbstractInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge, boolean useTopicSubscriptionInflightStats) {
1:         this.useTopicSubscriptionInflightStats = useTopicSubscriptionInflightStats;
/////////////////////////////////////////////////////////////////////////
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setUseTopicSubscriptionInflightStats(useTopicSubscriptionInflightStats);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         brokerService.setDestinationPolicy(pMap);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Assume.assumeTrue(useTopicSubscriptionInflightStats);
commit:4605503
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.statistics;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Random;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Assume;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * This test shows Inflight Message sizes are correct for various acknowledgement modes.
1:  */
1: public abstract class AbstractInflightMessageSizeTest {
1: 
1:     protected BrokerService brokerService;
1:     protected Connection connection;
1:     protected String brokerUrlString;
1:     protected Session session;
1:     protected javax.jms.Destination dest;
1:     protected Destination amqDestination;
1:     protected MessageConsumer consumer;
1:     protected int prefetch = 100;
1:     final protected int ackType;
1:     final protected boolean optimizeAcknowledge;
1:     final protected String destName = "testDest";
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
0:                 {ActiveMQSession.SESSION_TRANSACTED, true},
0:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, true},
0:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, true},
0:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, true},
0:                 {ActiveMQSession.SESSION_TRANSACTED, false},
0:                 {ActiveMQSession.AUTO_ACKNOWLEDGE, false},
0:                 {ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE, false},
0:                 {ActiveMQSession.CLIENT_ACKNOWLEDGE, false}
1:         });
1:     }
1: 
0:     public AbstractInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge) {
1:         this.ackType = ackType;
1:         this.optimizeAcknowledge = optimizeAcknowledge;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector tcp = brokerService
1:                 .addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         //used to test optimizeAcknowledge works
1:         String optAckString = optimizeAcknowledge ? "?jms.optimizeAcknowledge=true&jms.optimizedAckScheduledAckInterval=2000" : "";
1:         brokerUrlString = tcp.getPublishableConnectString() + optAckString;
1:         connection = createConnectionFactory().createConnection();
1:         connection.setClientID("client1");
1:         connection.start();
1:         session = connection.createSession(ackType == ActiveMQSession.SESSION_TRANSACTED, ackType);
1:         dest = getDestination();
1:         consumer = getMessageConsumer();
1:         amqDestination = TestSupport.getDestination(brokerService, getActiveMQDestination());
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:             throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setTopicPrefetch(prefetch);
1:         prefetchPolicy.setQueuePrefetch(prefetch);
1:         prefetchPolicy.setOptimizeDurableTopicPrefetch(prefetch);
1:         factory.setPrefetchPolicy(prefetchPolicy);
1:         return factory;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         brokerService.stop();
1:     }
1: 
1:     /**
1:      * Tests that inflight message size goes up and comes back down to 0 after
1:      * messages are consumed
1:      *
1:      * @throws javax.jms.JMSException
1:      * @throws InterruptedException
1:      */
0:     @Test(timeout=15000)
1:     public void testInflightMessageSize() throws Exception {
1:         final long size = sendMessages(10);
1: 
1:         assertTrue("Inflight message size should be greater than the content length sent", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() > size;
1:             }
1:         }));
1: 
1:         receiveMessages(10);
1: 
1:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() == 0;
1:             }
1:         }));
1:     }
1: 
1:     /**
1:      * Test that the in flight message size won't rise after prefetch is filled
1:      *
1:      * @throws Exception
1:      */
0:     @Test(timeout=15000)
1:     public void testInflightMessageSizePrefetchFilled() throws Exception {
1:         final long size = sendMessages(prefetch);
1: 
1:         assertTrue("Inflight message size should be greater than content length", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() > size;
1:             }
1:         }));
1: 
1:         final long inFlightSize = getSubscription().getInFlightMessageSize();
1:         sendMessages(10);
1: 
1:         //Prefetch has been filled, so the size should not change with 10 more messages
1:         assertEquals("Inflight message size should not change", inFlightSize, getSubscription().getInFlightMessageSize());
1: 
1:         receiveMessages(prefetch + 10);
1: 
1:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() == 0;
1:             }
1:         }));
1:     }
1: 
1:     /**
1:      * Test that the in flight message size will still rise if prefetch is not filled
1:      *
1:      * @throws Exception
1:      */
0:     @Test(timeout=15000)
1:     public void testInflightMessageSizePrefetchNotFilled() throws Exception {
1:         final long size = sendMessages(prefetch - 10);
1: 
1:         assertTrue("Inflight message size should be greater than content length", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() > size;
1:             }
1:         }));
1: 
1:         //capture the inflight size and send 10 more messages
1:         final long inFlightSize = getSubscription().getInFlightMessageSize();
1:         sendMessages(10);
1: 
1:         //Prefetch has NOT been filled, so the size should rise with 10 more messages
1:         assertTrue("Inflight message size should be greater than previous inlight size", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() > inFlightSize;
1:             }
1:         }));
1: 
1:         receiveMessages(prefetch);
1: 
1:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() == 0;
1:             }
1:         }));
1:     }
1: 
1: 
1:     /**
1:      * Tests that inflight message size goes up and doesn't go down if receive is rolledback
1:      *
1:      * @throws javax.jms.JMSException
1:      * @throws InterruptedException
1:      */
0:     @Test(timeout=15000)
1:     public void testInflightMessageSizeRollback() throws Exception {
1:         Assume.assumeTrue(ackType == ActiveMQSession.SESSION_TRANSACTED);
1: 
1:         final long size = sendMessages(10);
1: 
1:         assertTrue("Inflight message size should be greater than the content length sent", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() > size;
1:             }
1:         }));
1: 
1:        long inFlightSize = getSubscription().getInFlightMessageSize();
1: 
1:         for (int i = 0; i < 10; i++) {
1:             consumer.receive();
1:         }
1:         session.rollback();
1: 
1:         assertEquals("Inflight message size should not change on rollback", inFlightSize, getSubscription().getInFlightMessageSize());
1:     }
1: 
1:     /**
1:      * This method will generate random sized messages up to 150000 bytes.
1:      *
1:      * @param count
1:      * @throws JMSException
1:      */
1:     protected long sendMessages(int count) throws JMSException {
1:         MessageProducer producer = session.createProducer(dest);
1:         long totalSize = 0;
1:         for (int i = 0; i < count; i++) {
1:             Random r = new Random();
1:             int size = r.nextInt(150000);
1:             totalSize += size;
1:             byte[] bytes = new byte[size > 0 ? size : 1];
1:             r.nextBytes(bytes);
1:             BytesMessage bytesMessage = session.createBytesMessage();
1:             bytesMessage.writeBytes(bytes);
1:             producer.send(bytesMessage);
1:         }
1:         if (session.getTransacted()) {
1:             session.commit();
1:         }
1:         return totalSize;
1:     }
1: 
1:     protected void receiveMessages(int count) throws JMSException {
1:         for (int i = 0; i < count; i++) {
1:             javax.jms.Message m = consumer.receive();
1:             if (ackType == ActiveMQSession.SESSION_TRANSACTED) {
1:                 session.commit();
1:             } else if (ackType != ActiveMQSession.AUTO_ACKNOWLEDGE) {
1:                 m.acknowledge();
1:             }
1:         }
1:     }
1: 
1:     protected abstract Subscription getSubscription();
1: 
1:     protected abstract ActiveMQDestination getActiveMQDestination();
1: 
1:     protected abstract MessageConsumer getMessageConsumer() throws JMSException;
1: 
1:     protected abstract javax.jms.Destination getDestination() throws JMSException ;
1: 
1: }
============================================================================