1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:759fd28: package org.apache.activemq.store.journal;
1:4843dd4: 
1:d29ca2a: import java.io.File;
1:d29ca2a: import java.io.IOException;
1:74a7a8b: 
1:f451ad0: import org.apache.activeio.journal.Journal;
1:f451ad0: import org.apache.activeio.journal.active.JournalImpl;
1:55ac435: import org.apache.activeio.journal.active.JournalLockedException;
1:170b86a: import org.apache.activemq.broker.Locker;
1:759fd28: import org.apache.activemq.store.PersistenceAdapter;
1:759fd28: import org.apache.activemq.store.PersistenceAdapterFactory;
1:170b86a: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:3d18a3d: import org.apache.activemq.store.jdbc.JDBCAdapter;
1:d29ca2a: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:4843dd4: import org.apache.activemq.store.jdbc.Statements;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:170b86a: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:55ac435: 
1:d29ca2a: /**
1:d29ca2a:  * Factory class that can create PersistenceAdapter objects.
1:f812e34:  * 
1:77116d4:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:d29ca2a:  */
1:170b86a: public class JournalPersistenceAdapterFactory extends DataSourceServiceSupport implements PersistenceAdapterFactory {
1:f812e34: 
1:f812e34:     private static final int JOURNAL_LOCKED_WAIT_DELAY = 10 * 1000;
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JournalPersistenceAdapterFactory.class);
1:55ac435: 
1:d77014a:     private long checkpointInterval = 1000 * 60 * 5;
1:f812e34:     private int journalLogFileSize = 1024 * 1024 * 20;
1:d29ca2a:     private int journalLogFiles = 2;
1:d29ca2a:     private TaskRunnerFactory taskRunnerFactory;
1:d29ca2a:     private Journal journal;
1:f812e34:     private boolean useJournal = true;
1:933eb2f:     private boolean useQuickJournal;
1:d29ca2a:     private File journalArchiveDirectory;
1:933eb2f:     private boolean failIfJournalIsLocked;
1:3fe77a2:     private int journalThreadPriority = Thread.MAX_PRIORITY;
1:4843dd4:     private JDBCPersistenceAdapter jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:c808beb:     private boolean useDedicatedTaskRunner;
1:f812e34: 
1:d29ca2a:     public PersistenceAdapter createPersistenceAdapter() throws IOException {
1:4843dd4:         jdbcPersistenceAdapter.setDataSource(getDataSource());
1:f812e34: 
1:f812e34:         if (!useJournal) {
1:4843dd4:             return jdbcPersistenceAdapter;
1:d29ca2a:         }
1:dbc661f:         JournalPersistenceAdapter result =  new JournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
1:dbc661f:         result.setDirectory(getDataDirectoryFile());
1:d77014a:         result.setCheckpointInterval(getCheckpointInterval());
1:dbc661f:         return result;
1:f812e34: 
1:d29ca2a:     }
8:d29ca2a: 
1:d29ca2a:     public int getJournalLogFiles() {
1:d29ca2a:         return journalLogFiles;
1:d29ca2a:     }
1:d29ca2a: 
1:27f15fd:     /**
1:27f15fd:      * Sets the number of journal log files to use
1:27f15fd:      */
1:d29ca2a:     public void setJournalLogFiles(int journalLogFiles) {
1:d29ca2a:         this.journalLogFiles = journalLogFiles;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getJournalLogFileSize() {
1:d29ca2a:         return journalLogFileSize;
1:d29ca2a:     }
1:d29ca2a: 
1:ac66a09:     /**
1:27f15fd:      * Sets the size of the journal log files
1:356c39d:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
1:802296d:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:ac66a09:      */
1:d29ca2a:     public void setJournalLogFileSize(int journalLogFileSize) {
1:d29ca2a:         this.journalLogFileSize = journalLogFileSize;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public JDBCPersistenceAdapter getJdbcAdapter() {
1:4843dd4:         return jdbcPersistenceAdapter;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setJdbcAdapter(JDBCPersistenceAdapter jdbcAdapter) {
1:4843dd4:         this.jdbcPersistenceAdapter = jdbcAdapter;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isUseJournal() {
1:d29ca2a:         return useJournal;
1:d29ca2a:     }
1:d29ca2a: 
1:d77014a:     public long getCheckpointInterval() {
1:d77014a:         return checkpointInterval;
1:d77014a:     }
1:d77014a: 
1:d77014a:     public void setCheckpointInterval(long checkpointInterval) {
1:d77014a:         this.checkpointInterval = checkpointInterval;
1:d77014a:     }
1:d77014a: 
1:27f15fd:     /**
1:f812e34:      * Enables or disables the use of the journal. The default is to use the
1:f812e34:      * journal
1:f812e34:      * 
1:27f15fd:      * @param useJournal
1:27f15fd:      */
1:d29ca2a:     public void setUseJournal(boolean useJournal) {
1:d29ca2a:         this.useJournal = useJournal;
1:d29ca2a:     }
1:d29ca2a: 
1:c808beb:     public boolean isUseDedicatedTaskRunner() {
1:c808beb:         return useDedicatedTaskRunner;
1:d29ca2a:     }
1:d29ca2a:     
1:c808beb:     public void setUseDedicatedTaskRunner(boolean useDedicatedTaskRunner) {
1:c808beb:         this.useDedicatedTaskRunner = useDedicatedTaskRunner;
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     public TaskRunnerFactory getTaskRunnerFactory() {
1:f812e34:         if (taskRunnerFactory == null) {
1:f812e34:             taskRunnerFactory = new TaskRunnerFactory("Persistence Adaptor Task", journalThreadPriority,
1:c808beb:                                                       true, 1000, isUseDedicatedTaskRunner());
1:d29ca2a:         }
1:d29ca2a:         return taskRunnerFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setTaskRunnerFactory(TaskRunnerFactory taskRunnerFactory) {
1:d29ca2a:         this.taskRunnerFactory = taskRunnerFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Journal getJournal() throws IOException {
1:f812e34:         if (journal == null) {
1:d29ca2a:             createJournal();
1:d29ca2a:         }
1:d29ca2a:         return journal;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setJournal(Journal journal) {
1:d29ca2a:         this.journal = journal;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public File getJournalArchiveDirectory() {
1:f812e34:         if (journalArchiveDirectory == null && useQuickJournal) {
1:fd3c510:             journalArchiveDirectory = new File(getDataDirectoryFile(), "journal");
1:d29ca2a:         }
1:d29ca2a:         return journalArchiveDirectory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setJournalArchiveDirectory(File journalArchiveDirectory) {
1:d29ca2a:         this.journalArchiveDirectory = journalArchiveDirectory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isUseQuickJournal() {
1:d29ca2a:         return useQuickJournal;
1:d29ca2a:     }
1:d29ca2a: 
1:27f15fd:     /**
1:f812e34:      * Enables or disables the use of quick journal, which keeps messages in the
1:f812e34:      * journal and just stores a reference to the messages in JDBC. Defaults to
1:f812e34:      * false so that messages actually reside long term in the JDBC database.
1:27f15fd:      */
1:d29ca2a:     public void setUseQuickJournal(boolean useQuickJournal) {
1:d29ca2a:         this.useQuickJournal = useQuickJournal;
1:d29ca2a:     }
1:d29ca2a: 
1:3d18a3d:     public JDBCAdapter getAdapter() throws IOException {
1:4843dd4:         return jdbcPersistenceAdapter.getAdapter();
1:d29ca2a:     }
1:d29ca2a: 
1:3d18a3d:     public void setAdapter(JDBCAdapter adapter) {
1:4843dd4:         jdbcPersistenceAdapter.setAdapter(adapter);
1:d29ca2a:     }
1:d29ca2a: 
1:4843dd4:     public Statements getStatements() {
1:4843dd4:         return jdbcPersistenceAdapter.getStatements();
1:4843dd4:     }
1:f812e34: 
1:4843dd4:     public void setStatements(Statements statements) {
1:4843dd4:         jdbcPersistenceAdapter.setStatements(statements);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Sets whether or not an exclusive database lock should be used to enable
1:f812e34:      * JDBC Master/Slave. Enabled by default.
1:27f15fd:      */
1:dd5c9e6:     public void setUseDatabaseLock(boolean useDatabaseLock) {
1:170b86a:         jdbcPersistenceAdapter.setUseLock(useDatabaseLock);
1:d29ca2a:     }
1:d29ca2a: 
1:d4a50a7:     public boolean isCreateTablesOnStartup() {
1:d4a50a7:         return jdbcPersistenceAdapter.isCreateTablesOnStartup();
1:d29ca2a:     }
1:d29ca2a: 
1:27f15fd:     /**
1:27f15fd:      * Sets whether or not tables are created on startup
1:27f15fd:      */
1:d4a50a7:     public void setCreateTablesOnStartup(boolean createTablesOnStartup) {
1:d4a50a7:         jdbcPersistenceAdapter.setCreateTablesOnStartup(createTablesOnStartup);
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     public int getJournalThreadPriority() {
1:3fe77a2:         return journalThreadPriority;
1:d29ca2a:     }
1:d29ca2a: 
1:27f15fd:     /**
1:27f15fd:      * Sets the thread priority of the journal thread
1:27f15fd:      */
1:f812e34:     public void setJournalThreadPriority(int journalThreadPriority) {
1:f812e34:         this.journalThreadPriority = journalThreadPriority;
1:d29ca2a:     }
1:d29ca2a: 
1:27f15fd:     /**
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     protected void createJournal() throws IOException {
1:fd3c510:         File journalDir = new File(getDataDirectoryFile(), "journal").getCanonicalFile();
1:f812e34:         if (failIfJournalIsLocked) {
1:f812e34:             journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize,
1:f812e34:                                       getJournalArchiveDirectory());
1:55ac435:         } else {
1:f812e34:             while (true) {
1:55ac435:                 try {
1:f812e34:                     journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize,
1:f812e34:                                               getJournalArchiveDirectory());
1:55ac435:                     break;
1:55ac435:                 } catch (JournalLockedException e) {
1:fc00993:                     LOG.info("Journal is locked... waiting " + (JOURNAL_LOCKED_WAIT_DELAY / 1000)
1:f812e34:                              + " seconds for the journal to be unlocked.");
1:55ac435:                     try {
1:55ac435:                         Thread.sleep(JOURNAL_LOCKED_WAIT_DELAY);
1:55ac435:                     } catch (InterruptedException e1) {
1:55ac435:                     }
1:55ac435:                 }
1:55ac435:             }
1:55ac435:         }
1:d29ca2a:     }
1:d29ca2a: 
1:170b86a:     @Override
1:170b86a:     public Locker createDefaultLocker() throws IOException {
1:170b86a:         return null;
1:d29ca2a:     }
1:d29ca2a: 
1:170b86a:     @Override
1:170b86a:     public void init() throws Exception {
1:170b86a:     }
1:d29ca2a: 
1:170b86a:     @Override
1:170b86a:     protected void doStop(ServiceStopper stopper) throws Exception {}
1:d29ca2a: 
1:170b86a:     @Override
1:170b86a:     protected void doStart() throws Exception {}
1:170b86a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:d77014a
/////////////////////////////////////////////////////////////////////////
1:     private long checkpointInterval = 1000 * 60 * 5;
/////////////////////////////////////////////////////////////////////////
1:         result.setCheckpointInterval(getCheckpointInterval());
/////////////////////////////////////////////////////////////////////////
1:     public long getCheckpointInterval() {
1:         return checkpointInterval;
1:     }
1: 
1:     public void setCheckpointInterval(long checkpointInterval) {
1:         this.checkpointInterval = checkpointInterval;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private boolean useQuickJournal;
1:     private boolean failIfJournalIsLocked;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JournalPersistenceAdapterFactory.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Journal is locked... waiting " + (JOURNAL_LOCKED_WAIT_DELAY / 1000)
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1: 
1:     private static final int JOURNAL_LOCKED_WAIT_DELAY = 10 * 1000;
1: 
1:     private int journalLogFileSize = 1024 * 1024 * 20;
1:     private boolean useJournal = true;
0:     private boolean useQuickJournal = false;
0:     private boolean failIfJournalIsLocked = false;
1: 
1: 
1:         if (!useJournal) {
1: 
/////////////////////////////////////////////////////////////////////////
1:      * 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Enables or disables the use of the journal. The default is to use the
1:      * journal
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         if (taskRunnerFactory == null) {
1:             taskRunnerFactory = new TaskRunnerFactory("Persistence Adaptor Task", journalThreadPriority,
0:                                                       true, 1000);
/////////////////////////////////////////////////////////////////////////
1:         if (journal == null) {
/////////////////////////////////////////////////////////////////////////
1:         if (journalArchiveDirectory == null && useQuickJournal) {
/////////////////////////////////////////////////////////////////////////
1:      * Enables or disables the use of quick journal, which keeps messages in the
1:      * journal and just stores a reference to the messages in JDBC. Defaults to
1:      * false so that messages actually reside long term in the JDBC database.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Sets whether or not an exclusive database lock should be used to enable
1:      * JDBC Master/Slave. Enabled by default.
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getJournalThreadPriority() {
1:     public void setJournalThreadPriority(int journalThreadPriority) {
1:         this.journalThreadPriority = journalThreadPriority;
/////////////////////////////////////////////////////////////////////////
1:         if (failIfJournalIsLocked) {
1:             journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize,
1:                                       getJournalArchiveDirectory());
1:             while (true) {
1:                     journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize,
1:                                               getJournalArchiveDirectory());
0:                     log.info("Journal is locked... waiting " + (JOURNAL_LOCKED_WAIT_DELAY / 1000)
1:                              + " seconds for the journal to be unlocked.");
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: //        if( useQuickJournal ) {
0: //            return new QuickJournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
0: //        }  else {
0: //        }
commit:802296d
/////////////////////////////////////////////////////////////////////////
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
commit:ac66a09
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:      */
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:55ac435
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activeio.journal.active.JournalLockedException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final int JOURNAL_LOCKED_WAIT_DELAY = 10*1000;
1: 
0:     private static final Log log = LogFactory.getLog(DefaultPersistenceAdapterFactory.class);
1:     
/////////////////////////////////////////////////////////////////////////
0:     private boolean failIfJournalIsLocked=false;
/////////////////////////////////////////////////////////////////////////
0:         if( failIfJournalIsLocked ) {
0:             journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize, getJournalArchiveDirectory());
1:         } else {
0:             while( true ) {
1:                 try {
0:                     journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize, getJournalArchiveDirectory());
1:                     break;
1:                 } catch (JournalLockedException e) {
0:                     log.info("Journal is locked... waiting "+(JOURNAL_LOCKED_WAIT_DELAY/1000)+" seconds for the journal to be unlocked.");
1:                     try {
1:                         Thread.sleep(JOURNAL_LOCKED_WAIT_DELAY);
1:                     } catch (InterruptedException e1) {
1:                     }
1:                 }
1:             }
1:         }
commit:18d616c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return new QuickJournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
0:             return new JournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
/////////////////////////////////////////////////////////////////////////
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activeio.journal.Journal;
1: import org.apache.activeio.journal.active.JournalImpl;
commit:6994361
/////////////////////////////////////////////////////////////////////////
0:         File journalDir = new File(getDataDirectory(), "journal").getCanonicalFile();
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
1: 
1: import org.apache.activemq.store.jdbc.Statements;
/////////////////////////////////////////////////////////////////////////
1:     private JDBCPersistenceAdapter jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:         jdbcPersistenceAdapter.setDataSource(getDataSource());
1:             return jdbcPersistenceAdapter;
0:             return new QuickJournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getMemManager(), getTaskRunnerFactory());
0:             return new JournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getMemManager(), getTaskRunnerFactory());
/////////////////////////////////////////////////////////////////////////
1:         return jdbcPersistenceAdapter;
1:         this.jdbcPersistenceAdapter = jdbcAdapter;
/////////////////////////////////////////////////////////////////////////
1:         return jdbcPersistenceAdapter.getAdapter();
1:         jdbcPersistenceAdapter.setAdapter(adapter);
1:     public Statements getStatements() {
1:         return jdbcPersistenceAdapter.getStatements();
1:     }
1:     public void setStatements(Statements statements) {
1:         jdbcPersistenceAdapter.setStatements(statements);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.store;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
0: import org.activeio.journal.Journal;
0: import org.activeio.journal.active.JournalImpl;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
0: import org.apache.activemq.store.journal.JournalPersistenceAdapter;
0: import org.apache.activemq.store.journal.QuickJournalPersistenceAdapter;
1: import org.apache.activemq.thread.TaskRunnerFactory;
0: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
0: import javax.sql.DataSource;
1: 
1: /**
1:  * Factory class that can create PersistenceAdapter objects.
1:  *
0:  * @version $Revision: 1.4 $
1:  */
0: public class DefaultPersistenceAdapterFactory implements PersistenceAdapterFactory {
1:     
0:     private int journalLogFileSize = 1024*1024*20;
1:     private int journalLogFiles = 2;
0:     private File dataDirectory;
0:     private UsageManager memManager;
0:     private DataSource dataSource;
1:     private TaskRunnerFactory taskRunnerFactory;
1:     private Journal journal;
0:     private boolean useJournal=true;
0:     private boolean useQuickJournal=false;
1:     private File journalArchiveDirectory;
0:     private JDBCPersistenceAdapter jdbcAdapter = new JDBCPersistenceAdapter();
1:     
1:     public PersistenceAdapter createPersistenceAdapter() throws IOException {
0:         File dataDirectory = getDataDirectory();                
0:         jdbcAdapter.setDataSource(getDataSource());
1:         
0:         if( !useJournal )
0:             return jdbcAdapter;
1:         
0:         // Setup the Journal
0:         if( useQuickJournal ) {
0:             return new QuickJournalPersistenceAdapter(getJournal(), jdbcAdapter, getMemManager(), getTaskRunnerFactory());
0:         }  else {
0:             return new JournalPersistenceAdapter(getJournal(), jdbcAdapter, getMemManager(), getTaskRunnerFactory());
1:         }
1:     }
1: 
0:     public File getDataDirectory() {
0:         if( dataDirectory==null ) {
0:             dataDirectory = new File("activemq-data");
1:         }
0:         return dataDirectory;
1:     }
1: 
0:     public void setDataDirectory(File dataDirectory) {
0:         this.dataDirectory = dataDirectory;
1:     }
1: 
1:     public int getJournalLogFiles() {
1:         return journalLogFiles;
1:     }
1: 
1:     public void setJournalLogFiles(int journalLogFiles) {
1:         this.journalLogFiles = journalLogFiles;
1:     }
1: 
1:     public int getJournalLogFileSize() {
1:         return journalLogFileSize;
1:     }
1: 
1:     public void setJournalLogFileSize(int journalLogFileSize) {
1:         this.journalLogFileSize = journalLogFileSize;
1:     }
1: 
0:     public UsageManager getMemManager() {
0:         if( memManager==null ) {
0:             memManager = new UsageManager();
1:         }
0:         return memManager;
1:     }
1: 
0:     public void setMemManager(UsageManager memManager) {
0:         this.memManager = memManager;
1:     }
1:     
0:     public DataSource getDataSource() throws IOException {
0:         if (dataSource == null) {
0:             dataSource = createDataSource();
1:         }
0:         return dataSource;
1:     }
1: 
0:     public void setDataSource(DataSource dataSource) {
0:         this.dataSource = dataSource;
1:     }
1: 
1:     public JDBCPersistenceAdapter getJdbcAdapter() {
0:         return jdbcAdapter;
1:     }
1: 
1:     public void setJdbcAdapter(JDBCPersistenceAdapter jdbcAdapter) {
0:         this.jdbcAdapter = jdbcAdapter;
1:     }
1: 
1:     public boolean isUseJournal() {
1:         return useJournal;
1:     }
1: 
1:     public void setUseJournal(boolean useJournal) {
1:         this.useJournal = useJournal;
1:     }
1: 
1:     public TaskRunnerFactory getTaskRunnerFactory() {
0:         if( taskRunnerFactory == null ) {
0:             taskRunnerFactory = new TaskRunnerFactory();
1:         }
1:         return taskRunnerFactory;
1:     }
1: 
1:     public void setTaskRunnerFactory(TaskRunnerFactory taskRunnerFactory) {
1:         this.taskRunnerFactory = taskRunnerFactory;
1:     }
1: 
1:     public Journal getJournal() throws IOException {
0:         if( journal == null ) {
1:             createJournal();
1:         }
1:         return journal;
1:     }
1: 
1:     public void setJournal(Journal journal) {
1:         this.journal = journal;
1:     }
1: 
1:     public File getJournalArchiveDirectory() {
0:         if( journalArchiveDirectory == null && useQuickJournal ) {
0:             journalArchiveDirectory = new File(getDataDirectory(), "journal");
1:         }
1:         return journalArchiveDirectory;
1:     }
1: 
1:     public void setJournalArchiveDirectory(File journalArchiveDirectory) {
1:         this.journalArchiveDirectory = journalArchiveDirectory;
1:     }
1: 
1: 
1:     public boolean isUseQuickJournal() {
1:         return useQuickJournal;
1:     }
1: 
1:     public void setUseQuickJournal(boolean useQuickJournal) {
1:         this.useQuickJournal = useQuickJournal;
1:     }
1: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0:     protected DataSource createDataSource() throws IOException {
1:         
0:         // Setup the Derby datasource.
0:         System.setProperty("derby.system.home", getDataDirectory().getCanonicalPath());
0:         System.setProperty("derby.storage.fileSyncTransactionLog", "true");
0:         System.setProperty("derby.storage.pageCacheSize", "100");
1:         
0:         final EmbeddedDataSource ds = new EmbeddedDataSource();
0:         ds.setDatabaseName("derbydb");
0:         ds.setCreateDatabase("create");
0:         return ds;
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      */
1:     protected void createJournal() throws IOException {
0:         File journalDir = new File(getDataDirectory(), "journal");
0:         journal = new JournalImpl(journalDir, journalLogFiles, journalLogFileSize, getJournalArchiveDirectory());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Locker;
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
1: public class JournalPersistenceAdapterFactory extends DataSourceServiceSupport implements PersistenceAdapterFactory {
/////////////////////////////////////////////////////////////////////////
1:         jdbcPersistenceAdapter.setUseLock(useDatabaseLock);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Locker createDefaultLocker() throws IOException {
1:         return null;
1:     }
0: 
1:     @Override
1:     public void init() throws Exception {
1:     }
0: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {}
0: 
1:     @Override
1:     protected void doStart() throws Exception {}
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JournalPersistenceAdapterFactory.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:dbc661f
/////////////////////////////////////////////////////////////////////////
1:         JournalPersistenceAdapter result =  new JournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
1:         result.setDirectory(getDataDirectoryFile());
1:         return result;
commit:759fd28
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.journal;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.PersistenceAdapterFactory;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0: public class JournalPersistenceAdapterFactory extends DataSourceSupport implements PersistenceAdapterFactory {
0:     private static final Log log = LogFactory.getLog(JournalPersistenceAdapterFactory.class);
/////////////////////////////////////////////////////////////////////////
0:         return new JournalPersistenceAdapter(getJournal(), jdbcPersistenceAdapter, getTaskRunnerFactory());
commit:5367f1e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:             KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(new File("amqstore")); 
0:             //return new JournalPersistenceAdapter(getJournal(), adaptor, getTaskRunnerFactory());
commit:3fe77a2
/////////////////////////////////////////////////////////////////////////
1:     private int journalThreadPriority = Thread.MAX_PRIORITY;
/////////////////////////////////////////////////////////////////////////
0:             taskRunnerFactory = new TaskRunnerFactory("Persistence Adaptor Task", journalThreadPriority, true, 1000);
/////////////////////////////////////////////////////////////////////////
0:     
0:     public int getJournalThreadPriority(){
1:         return journalThreadPriority;
0:     }
0: 
0:     public void setJournalThreadPriority(int journalThreadPriority){
0:         this.journalThreadPriority=journalThreadPriority;
0:     }
/////////////////////////////////////////////////////////////////////////
0:     
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:77116d4
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:c808beb
/////////////////////////////////////////////////////////////////////////
1:     private boolean useDedicatedTaskRunner;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseDedicatedTaskRunner() {
1:         return useDedicatedTaskRunner;
0:     }
0:     
1:     public void setUseDedicatedTaskRunner(boolean useDedicatedTaskRunner) {
1:         this.useDedicatedTaskRunner = useDedicatedTaskRunner;
0:     }
0:     
1:                                                       true, 1000, isUseDedicatedTaskRunner());
commit:356c39d
/////////////////////////////////////////////////////////////////////////
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
author:James Strachan
-------------------------------------------------------------------------------
commit:9583b5f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
0:             KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(new File(IOHelper.getDefaultStoreDirectory())); 
commit:27f15fd
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the number of journal log files to use
1:      */
/////////////////////////////////////////////////////////////////////////
1:      * Sets the size of the journal log files
0:      *
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Enables or disables the use of the journal. The default is to use the journal
0:      *
1:      * @param useJournal
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Enables or disables the use of quick journal, which keeps messages in the journal and just
0:      * stores a reference to the messages in JDBC. Defaults to false so that messages actually reside
0:      * long term in the JDBC database.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Sets whether or not an exclusive database lock should be used to enable JDBC Master/Slave. Enabled by default.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets whether or not tables are created on startup
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the thread priority of the journal thread
1:      */
commit:d4a50a7
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCreateTablesOnStartup() {
1:         return jdbcPersistenceAdapter.isCreateTablesOnStartup();
0:     }
0: 
1:     public void setCreateTablesOnStartup(boolean createTablesOnStartup) {
1:         jdbcPersistenceAdapter.setCreateTablesOnStartup(createTablesOnStartup);
0:     }
0: 
commit:dd5c9e6
/////////////////////////////////////////////////////////////////////////
0:     public boolean isUseDatabaseLock() {
0:         return jdbcPersistenceAdapter.isUseDatabaseLock();
0:     }
0: 
1:     public void setUseDatabaseLock(boolean useDatabaseLock) {
0:         jdbcPersistenceAdapter.setUseDatabaseLock(useDatabaseLock);
0:     }
0: 
commit:fd3c510
/////////////////////////////////////////////////////////////////////////
1:             journalArchiveDirectory = new File(getDataDirectoryFile(), "journal");
/////////////////////////////////////////////////////////////////////////
1:         File journalDir = new File(getDataDirectoryFile(), "journal").getCanonicalFile();
commit:a039746
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.jdbc.DataSourceSupport;
0: public class DefaultPersistenceAdapterFactory extends DataSourceSupport implements PersistenceAdapterFactory {
/////////////////////////////////////////////////////////////////////////
0:         if( !useJournal ) {
0:         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3d18a3d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.JDBCAdapter;
/////////////////////////////////////////////////////////////////////////
1:     public JDBCAdapter getAdapter() throws IOException {
0:         return jdbcAdapter.getAdapter();
0:     }
0: 
0:     public String getAdapterClass() {
0:         return jdbcAdapter.getAdapterClass();
0:     }
0: 
1:     public void setAdapter(JDBCAdapter adapter) {
0:         jdbcAdapter.setAdapter(adapter);
0:     }
0: 
0:     public void setAdapterClass(String adapterClass) {
0:         jdbcAdapter.setAdapterClass(adapterClass);
0:     }
0: 
============================================================================