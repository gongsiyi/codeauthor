1:887ac0b: /**
1:887ac0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:887ac0b:  * contributor license agreements.  See the NOTICE file distributed with
1:887ac0b:  * this work for additional information regarding copyright ownership.
1:887ac0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:887ac0b:  * (the "License"); you may not use this file except in compliance with
1:887ac0b:  * the License.  You may obtain a copy of the License at
1:887ac0b:  *
1:887ac0b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:887ac0b:  *
1:887ac0b:  * Unless required by applicable law or agreed to in writing, software
1:887ac0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:887ac0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:887ac0b:  * See the License for the specific language governing permissions and
1:887ac0b:  * limitations under the License.
1:887ac0b:  */
1:887ac0b: package org.apache.activemq;
1:887ac0b: 
1:887ac0b: import java.util.concurrent.CountDownLatch;
1:887ac0b: import java.util.concurrent.ExecutorService;
1:887ac0b: import java.util.concurrent.Executors;
1:887ac0b: import java.util.concurrent.TimeUnit;
1:887ac0b: import javax.jms.JMSException;
1:887ac0b: import javax.jms.Session;
1:887ac0b: 
1:887ac0b: import junit.framework.TestCase;
1:887ac0b: 
1:887ac0b: /**
1:887ac0b:  * 
1:887ac0b:  */
1:887ac0b: public class ConnectionCloseMultipleTimesConcurrentTest extends TestCase {
1:887ac0b: 
1:887ac0b:     private ActiveMQConnection connection;
1:887ac0b:     private ExecutorService executor;
1:887ac0b:     private int size = 200;
1:887ac0b: 
1:887ac0b:     protected void setUp() throws Exception {
1:887ac0b:         executor = Executors.newFixedThreadPool(20);
1:887ac0b: 
1:887ac0b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:887ac0b:         connection = (ActiveMQConnection)factory.createConnection();
1:887ac0b:         connection.start();
1:887ac0b:     }
1:887ac0b: 
1:887ac0b:     /**
1:887ac0b:      * @see junit.framework.TestCase#tearDown()
1:887ac0b:      */
1:887ac0b:     protected void tearDown() throws Exception {
1:887ac0b:         if (connection.isStarted()) {
1:887ac0b:             connection.stop();
1:887ac0b:         }
1:887ac0b:         if (executor != null) {
1:887ac0b:             executor.shutdownNow();
1:887ac0b:         }
1:887ac0b:     }
1:887ac0b: 
1:887ac0b:     /**
1:887ac0b:      * @throws javax.jms.JMSException
1:887ac0b:      */
1:887ac0b:     public void testCloseMultipleTimes() throws Exception {
1:887ac0b:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:887ac0b: 
1:887ac0b:         assertTrue(connection.isStarted());
1:887ac0b:         assertFalse(connection.isClosed());
1:887ac0b: 
1:887ac0b:         final CountDownLatch latch = new CountDownLatch(size);
1:887ac0b: 
1:887ac0b:         for (int i = 0; i < size; i++) {
1:887ac0b:             executor.submit(new Runnable() {
1:887ac0b:                 @Override
1:887ac0b:                 public void run() {
1:887ac0b:                     try {
1:887ac0b:                         connection.close();
1:887ac0b: 
1:887ac0b:                         assertFalse(connection.isStarted());
1:887ac0b:                         assertTrue(connection.isClosed());
1:887ac0b: 
1:887ac0b:                         latch.countDown();
1:887ac0b:                     } catch (JMSException e) {
1:887ac0b:                         // ignore
1:887ac0b:                     }
1:887ac0b:                 }
1:887ac0b:             });
1:887ac0b:         }
1:887ac0b: 
1:887ac0b:         boolean zero = latch.await(20, TimeUnit.SECONDS);
1:887ac0b:         assertTrue("Should complete all", zero);
1:887ac0b: 
1:887ac0b:         // should not fail calling again
1:887ac0b:         connection.close();
1:887ac0b: 
1:887ac0b:         assertFalse(connection.isStarted());
1:887ac0b:         assertTrue(connection.isClosed());
1:887ac0b:     }
1:887ac0b: 
1:887ac0b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:887ac0b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * 
1:  */
1: public class ConnectionCloseMultipleTimesConcurrentTest extends TestCase {
1: 
1:     private ActiveMQConnection connection;
1:     private ExecutorService executor;
1:     private int size = 200;
1: 
1:     protected void setUp() throws Exception {
1:         executor = Executors.newFixedThreadPool(20);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connection.start();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection.isStarted()) {
1:             connection.stop();
1:         }
1:         if (executor != null) {
1:             executor.shutdownNow();
1:         }
1:     }
1: 
1:     /**
1:      * @throws javax.jms.JMSException
1:      */
1:     public void testCloseMultipleTimes() throws Exception {
1:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         assertTrue(connection.isStarted());
1:         assertFalse(connection.isClosed());
1: 
1:         final CountDownLatch latch = new CountDownLatch(size);
1: 
1:         for (int i = 0; i < size; i++) {
1:             executor.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         connection.close();
1: 
1:                         assertFalse(connection.isStarted());
1:                         assertTrue(connection.isClosed());
1: 
1:                         latch.countDown();
1:                     } catch (JMSException e) {
1:                         // ignore
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         boolean zero = latch.await(20, TimeUnit.SECONDS);
1:         assertTrue("Should complete all", zero);
1: 
1:         // should not fail calling again
1:         connection.close();
1: 
1:         assertFalse(connection.isStarted());
1:         assertTrue(connection.isClosed());
1:     }
1: 
1: }
============================================================================