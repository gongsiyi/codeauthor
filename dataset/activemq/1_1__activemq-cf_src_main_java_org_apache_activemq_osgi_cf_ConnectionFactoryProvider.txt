1:5a6d155: /*
1:5a6d155:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a6d155:  * contributor license agreements.  See the NOTICE file distributed with
1:5a6d155:  * this work for additional information regarding copyright ownership.
1:5a6d155:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a6d155:  * (the "License"); you may not use this file except in compliance with
1:5a6d155:  * the License.  You may obtain a copy of the License at
1:5a6d155:  *
1:5a6d155:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a6d155:  *
1:5a6d155:  * Unless required by applicable law or agreed to in writing, software
1:5a6d155:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a6d155:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a6d155:  * See the License for the specific language governing permissions and
1:5a6d155:  * limitations under the License.
1:5a6d155:  */
1:5a6d155: package org.apache.activemq.osgi.cf;
1:5a6d155: 
1:5a6d155: import java.util.Dictionary;
1:5a6d155: import java.util.Hashtable;
1:5a6d155: 
1:5a6d155: import javax.jms.ConnectionFactory;
1:5a6d155: 
1:5a6d155: import org.apache.activemq.ActiveMQConnectionFactory;
1:5a6d155: import org.apache.activemq.jms.pool.PooledConnectionFactory;
1:5a6d155: import org.osgi.framework.BundleContext;
1:5a6d155: import org.osgi.framework.ServiceRegistration;
1:5a6d155: import org.osgi.service.component.ComponentContext;
1:5a6d155: import org.osgi.service.component.annotations.Activate;
1:5a6d155: import org.osgi.service.component.annotations.Component;
1:5a6d155: import org.osgi.service.component.annotations.ConfigurationPolicy;
1:5a6d155: import org.osgi.service.component.annotations.Deactivate;
1:5a6d155: 
1:5a6d155: @Component //
1:5a6d155: ( //
1:861390a:     name = "org.apache.activemq", //
1:5a6d155:     immediate = true, //
1:5a6d155:     configurationPolicy = ConfigurationPolicy.REQUIRE //
1:5a6d155: )
1:5a6d155: public class ConnectionFactoryProvider {
1:5a6d155: 
1:5a6d155:     private static final String OSGI_JNDI_SERVICE_NAME = "osgi.jndi.service.name";
1:5a6d155:     private ServiceRegistration<ConnectionFactory> reg;
1:5a6d155: 
1:5a6d155:     @Activate
1:5a6d155:     public void create(ComponentContext compContext) {
1:5a6d155:         BundleContext context = compContext.getBundleContext();
1:5a6d155:         Dictionary<String, Object> config = compContext.getProperties();
1:5a6d155:         String brokerURL = getString(config, "url", "tcp://localhost:61616");
1:5a6d155:         String jndiName = getString(config, OSGI_JNDI_SERVICE_NAME, "jms/local");
1:5a6d155:         String userName = getString(config, "userName", null);
1:5a6d155:         String password = getString(config, "password", null);
1:5a6d155:         long expiryTimeout = new Long(getString(config, "expiryTimeout", "0"));
1:5a6d155:         int idleTimeout = new Integer(getString(config, "idleTimeout", "30000"));
1:5a6d155:         int maxConnections = new Integer(getString(config, "maxConnections", "8"));
1:5a6d155:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerURL);
1:5a6d155:         if (userName != null) {
1:5a6d155:             cf.setUserName(userName);
1:5a6d155:             cf.setPassword(password);
1:5a6d155:         }
1:5a6d155:         PooledConnectionFactory pcf = new PooledConnectionFactory();
1:5a6d155:         pcf.setConnectionFactory(cf);
1:5a6d155:         pcf.setExpiryTimeout(expiryTimeout);
1:5a6d155:         pcf.setIdleTimeout(idleTimeout);
1:5a6d155:         pcf.setMaxConnections(maxConnections);
1:5a6d155:         Dictionary<String, String> props = new Hashtable<String, String>();
1:5a6d155:         props.put(OSGI_JNDI_SERVICE_NAME, jndiName);
1:5a6d155:         reg = context.registerService(ConnectionFactory.class, pcf, props);
1:5a6d155:     }
1:5a6d155:     
1:5a6d155:     @Deactivate
1:5a6d155:     public void deactivate() {
1:5a6d155:         reg.unregister();
1:5a6d155:     }
1:5a6d155: 
1:5a6d155:     private String getString(Dictionary<String, Object> config, String key, String defaultValue) {
1:5a6d155:         Object value = config.get(key);
1:5a6d155:         return value != null ? value.toString() : defaultValue;
1:5a6d155:     }
1:5a6d155: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:861390a
/////////////////////////////////////////////////////////////////////////
1:     name = "org.apache.activemq", //
commit:5a6d155
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.osgi.cf;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.jms.ConnectionFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.jms.pool.PooledConnectionFactory;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.component.ComponentContext;
1: import org.osgi.service.component.annotations.Activate;
1: import org.osgi.service.component.annotations.Component;
1: import org.osgi.service.component.annotations.ConfigurationPolicy;
1: import org.osgi.service.component.annotations.Deactivate;
1: 
1: @Component //
1: ( //
0:     configurationPid = "org.apache.activemq", //
1:     immediate = true, //
1:     configurationPolicy = ConfigurationPolicy.REQUIRE //
1: )
1: public class ConnectionFactoryProvider {
1: 
1:     private static final String OSGI_JNDI_SERVICE_NAME = "osgi.jndi.service.name";
1:     private ServiceRegistration<ConnectionFactory> reg;
1: 
1:     @Activate
1:     public void create(ComponentContext compContext) {
1:         BundleContext context = compContext.getBundleContext();
1:         Dictionary<String, Object> config = compContext.getProperties();
1:         String brokerURL = getString(config, "url", "tcp://localhost:61616");
1:         String jndiName = getString(config, OSGI_JNDI_SERVICE_NAME, "jms/local");
1:         String userName = getString(config, "userName", null);
1:         String password = getString(config, "password", null);
1:         long expiryTimeout = new Long(getString(config, "expiryTimeout", "0"));
1:         int idleTimeout = new Integer(getString(config, "idleTimeout", "30000"));
1:         int maxConnections = new Integer(getString(config, "maxConnections", "8"));
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerURL);
1:         if (userName != null) {
1:             cf.setUserName(userName);
1:             cf.setPassword(password);
1:         }
1:         PooledConnectionFactory pcf = new PooledConnectionFactory();
1:         pcf.setConnectionFactory(cf);
1:         pcf.setExpiryTimeout(expiryTimeout);
1:         pcf.setIdleTimeout(idleTimeout);
1:         pcf.setMaxConnections(maxConnections);
1:         Dictionary<String, String> props = new Hashtable<String, String>();
1:         props.put(OSGI_JNDI_SERVICE_NAME, jndiName);
1:         reg = context.registerService(ConnectionFactory.class, pcf, props);
1:     }
1:     
1:     @Deactivate
1:     public void deactivate() {
1:         reg.unregister();
1:     }
1: 
1:     private String getString(Dictionary<String, Object> config, String key, String defaultValue) {
1:         Object value = config.get(key);
1:         return value != null ? value.toString() : defaultValue;
1:     }
1: }
============================================================================