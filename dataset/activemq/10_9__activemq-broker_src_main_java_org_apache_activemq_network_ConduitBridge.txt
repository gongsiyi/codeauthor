1:068c646: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:a80acbb:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:068c646:  * Unless required by applicable law or agreed to in writing, software
1:068c646:  * distributed under the License is distributed on an "AS IS" BASIS,
1:068c646:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:068c646:  * See the License for the specific language governing permissions and
1:068c646:  * limitations under the License.
1:068c646:  */
1:068c646: package org.apache.activemq.network;
1:e5584e6: 
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.util.ArrayList;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:41211c7: import org.apache.activemq.command.BrokerId;
1:068c646: import org.apache.activemq.command.ConsumerId;
1:068c646: import org.apache.activemq.command.ConsumerInfo;
1:620523a: import org.apache.activemq.command.SubscriptionInfo;
1:068c646: import org.apache.activemq.filter.DestinationFilter;
1:068c646: import org.apache.activemq.transport.Transport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
4:f812e34: 
1:068c646: /**
1:068c646:  * Consolidates subscriptions
1:068c646:  */
1:f812e34: public class ConduitBridge extends DemandForwardingBridge {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConduitBridge.class);
1:f812e34: 
1:068c646:     /**
1:068c646:      * Constructor
1:f812e34:      *
1:068c646:      * @param localBroker
1:068c646:      * @param remoteBroker
1:068c646:      */
1:ecf89a6:     public ConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) {
1:f812e34:         super(configuration, localBroker, remoteBroker);
1:966658f:     }
1:f812e34: 
1:8af25fd:     @Override
1:f812e34:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException {
1:e73ab34:         if (addToAlreadyInterestedConsumers(info, false)) {
1:f812e34:             return null; // don't want this subscription added
1:3da1373:         }
1:b32ff4d:         //add our original id to ourselves
1:b32ff4d:         info.addNetworkConsumerId(info.getConsumerId());
1:8b0bb33:         info.setSelector(null);
1:b593aca:         return doCreateDemandSubscription(info);
1:e5584e6:     }
1:e5584e6: 
1:e73ab34:     protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {
1:96ce14b:         //If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true
1:96ce14b:         //If true then we want to try and conduit
1:96ce14b:         //For topics we always want to conduit regardless of network subscription or not
1:96ce14b:         if (info.isNetworkSubscription() && info.getDestination().isQueue() &&
1:96ce14b:                 !configuration.isConduitNetworkQueueSubscriptions()) {
1:6c5732b:             return false;
1:6c5732b:         }
1:068c646:         boolean matched = false;
1:f812e34: 
1:96ce14b:         // search through existing subscriptions and see if we have a match
1:a80acbb:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
1:ea44017:             DestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());
1:a80a185:             if (canConduit(ds) && filter.matches(info.getDestination())) {
1:e1bbde7:                 LOG.debug("{} {} with ids {} matched (add interest) {}", new Object[]{
1:e1bbde7:                         configuration.getBrokerName(), info, info.getNetworkConsumerIds(), ds
1:e1bbde7:                 });
1:f812e34:                 // add the interest in the subscription
1:6c5732b:                 if (!info.isDurable()) {
1:6c5732b:                     ds.add(info.getConsumerId());
1:e73ab34:                     if (isForcedDurable) {
1:e73ab34:                         forcedDurableRemoteId.add(info.getConsumerId());
1:e73ab34:                         ds.addForcedDurableConsumer(info.getConsumerId());
1:e73ab34:                     }
1:41211c7:                 } else {
1:6013441:                     //Handle the demand generated by proxy network subscriptions
1:6013441:                     //The broker path is case is normal
1:08aa511:                     if (isProxyNSConsumerBrokerPath(info) &&
1:08aa511:                             info.getSubscriptionName() != null && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) {
1:6013441:                         final BrokerId[] path = info.getBrokerPath();
1:6013441:                         addProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());
1:6013441:                     //This is the durable sync case on broker restart
1:6013441:                     } else if (isProxyNSConsumerClientId(info.getClientId()) &&
1:6013441:                             isProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) {
1:6013441:                         addProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());
1:6013441:                     } else {
1:41211c7:                 		ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
1:41211c7:                 	}
1:620523a:                 }
1:068c646:                 matched = true;
1:a80acbb:                 // continue - we want interest to any existing DemandSubscriptions
1:e5584e6:             }
1:ecf89a6:         }
1:b593aca:         return matched;
1:a80acbb:     }
1:966658f: 
1:a80a185:     // we want to conduit statically included consumers which are local networkSubs
1:96ce14b:     // but we don't want to conduit remote network queue subs i.e. (proxy proxy) consumers
1:96ce14b:     // unless isConduitNetworkQueueSubscriptions is true
1:96ce14b:     // We always want to conduit topic subscriptions
1:a80a185:     private boolean canConduit(DemandSubscription ds) {
1:96ce14b:         return ds.isStaticallyIncluded() || ds.getRemoteInfo().getDestination().isTopic() ||
1:96ce14b:                 !ds.getRemoteInfo().isNetworkSubscription() ||
1:96ce14b:                 (ds.getRemoteInfo().getDestination().isQueue() && configuration.isConduitNetworkQueueSubscriptions());
1:a80a185:     }
1:a80a185: 
1:8af25fd:     @Override
1:f812e34:     protected void removeDemandSubscription(ConsumerId id) throws IOException {
1:ecf89a6:         List<DemandSubscription> tmpList = new ArrayList<DemandSubscription>();
1:f812e34: 
1:a80acbb:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
1:3da1373:             if (ds.remove(id)) {
1:e1bbde7:                 LOG.debug("{} on {} from {} removed interest for: {} from {}", new Object[]{
1:e1bbde7:                         configuration.getBrokerName(), localBroker, remoteBrokerName, id, ds
1:e1bbde7:                 });
1:3da1373:             }
1:f812e34:             if (ds.isEmpty()) {
1:068c646:                 tmpList.add(ds);
1:966658f:             }
1:ecf89a6:         }
1:f812e34: 
1:a80acbb:         for (DemandSubscription ds : tmpList) {
1:068c646:             removeSubscription(ds);
1:e1bbde7:             LOG.debug("{} on {} from {} removed {}", new Object[]{
1:e1bbde7:                     configuration.getBrokerName(), localBroker, remoteBrokerName, ds
1:e1bbde7:             });
1:a80acbb:         }
1:a80acbb:     }
2:b593aca: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:08aa511
/////////////////////////////////////////////////////////////////////////
1:                     if (isProxyNSConsumerBrokerPath(info) &&
1:                             info.getSubscriptionName() != null && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) {
commit:6013441
/////////////////////////////////////////////////////////////////////////
1:                     //Handle the demand generated by proxy network subscriptions
1:                     //The broker path is case is normal
0:                     if (isProxyNSConsumerBrokerPath(info)) {
1:                         final BrokerId[] path = info.getBrokerPath();
1:                         addProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());
1:                     //This is the durable sync case on broker restart
1:                     } else if (isProxyNSConsumerClientId(info.getClientId()) &&
1:                             isProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) {
1:                         addProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());
1:                     } else {
commit:96ce14b
/////////////////////////////////////////////////////////////////////////
1:         //If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true
1:         //If true then we want to try and conduit
1:         //For topics we always want to conduit regardless of network subscription or not
1:         if (info.isNetworkSubscription() && info.getDestination().isQueue() &&
1:                 !configuration.isConduitNetworkQueueSubscriptions()) {
1:         // search through existing subscriptions and see if we have a match
/////////////////////////////////////////////////////////////////////////
1:     // but we don't want to conduit remote network queue subs i.e. (proxy proxy) consumers
1:     // unless isConduitNetworkQueueSubscriptions is true
1:     // We always want to conduit topic subscriptions
1:         return ds.isStaticallyIncluded() || ds.getRemoteInfo().getDestination().isTopic() ||
1:                 !ds.getRemoteInfo().isNetworkSubscription() ||
1:                 (ds.getRemoteInfo().getDestination().isQueue() && configuration.isConduitNetworkQueueSubscriptions());
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
1:         if (addToAlreadyInterestedConsumers(info, false)) {
/////////////////////////////////////////////////////////////////////////
1:     protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {
/////////////////////////////////////////////////////////////////////////
1:                     if (isForcedDurable) {
1:                         forcedDurableRemoteId.add(info.getConsumerId());
1:                         ds.addForcedDurableConsumer(info.getConsumerId());
1:                     }
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:41211c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerId;
/////////////////////////////////////////////////////////////////////////
0:                 	if (isProxyNSConsumer(info)) {
0:                 	    final BrokerId[] path = info.getBrokerPath();
0:                 	    addProxyNetworkSubscription(ds, path, info.getSubscriptionName());
1:                 	} else {
1:                 		ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
1:                 	}
author:gtully
-------------------------------------------------------------------------------
commit:a80a185
/////////////////////////////////////////////////////////////////////////
1:             if (canConduit(ds) && filter.matches(info.getDestination())) {
/////////////////////////////////////////////////////////////////////////
1:     // we want to conduit statically included consumers which are local networkSubs
0:     // but we don't want to conduit remote network subs i.e. (proxy proxy) consumers
1:     private boolean canConduit(DemandSubscription ds) {
0:         return ds.isStaticallyIncluded() || !ds.getRemoteInfo().isNetworkSubscription();
1:     }
1: 
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
0:         if (info.isNetworkSubscription()) {
1:             return false;
1:         }
0:             if (!ds.getRemoteInfo().isNetworkSubscription() && filter.matches(info.getDestination())) {
1:                 if (!info.isDurable()) {
1:                     ds.add(info.getConsumerId());
0:                 } else {
0:                     ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("{} {} with ids {} matched (add interest) {}", new Object[]{
1:                         configuration.getBrokerName(), info, info.getNetworkConsumerIds(), ds
1:                 });
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("{} on {} from {} removed interest for: {} from {}", new Object[]{
1:                         configuration.getBrokerName(), localBroker, remoteBrokerName, id, ds
1:                 });
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("{} on {} from {} removed {}", new Object[]{
1:                     configuration.getBrokerName(), localBroker, remoteBrokerName, ds
1:             });
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug(configuration.getBrokerName() + " " + info + " with ids" + info.getNetworkConsumerIds() + " matched (add interest) " + ds);
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug(configuration.getBrokerName() + " on " + localBroker + " from " + remoteBrokerName + " removed interest for: " + id  + " from " + ds);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug(configuration.getBrokerName() + " on " + localBroker + " from " + remoteBrokerName + " removed " + ds);
commit:72015ca
/////////////////////////////////////////////////////////////////////////
0:                             + " with sub: " + info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
commit:3da1373
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug(configuration.getBrokerName() + " matched (add interest) to exsting sub for: " + ds.getRemoteInfo()
/////////////////////////////////////////////////////////////////////////
1:             if (ds.remove(id)) {
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug(configuration.getBrokerName() + " removing interest in sub on " + localBroker + " from " + remoteBrokerName + " : sub: " + id  + " existing matched sub: " + ds.getRemoteInfo());
1:                 }
1:             }
commit:966658f
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug(configuration.getBrokerName() + " matched exsting sub (add interest) for : " + ds.getRemoteInfo()
0:                             + " with sub: " + info);
1:                 }
1:                 
/////////////////////////////////////////////////////////////////////////
0:             } else {
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug(configuration.getBrokerName() + " removing interest in sub on " + localBroker + " from " + remoteBrokerName + " :  " + ds.getRemoteInfo());
1:                 }
commit:5b8a886
/////////////////////////////////////////////////////////////////////////
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug(configuration.getBrokerName() + " removing sub on " + localBroker + " from " + remoteBrokerName + " :  " + ds.getRemoteInfo());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:620523a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.SubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
0:                     if (!info.isDurable()) {
0:                         ds.add(info.getConsumerId());
0:                     } else {
0:                        ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
1:                     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ConduitBridge.class);
commit:ea44017
/////////////////////////////////////////////////////////////////////////
1:             DestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());
0:             if (filter.matches(info.getDestination())) {
commit:e5584e6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import org.apache.activemq.command.BrokerId;
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected boolean checkPaths(BrokerId[] first, BrokerId[] second) {
0:     	if (first == null || second == null)
0: 			return true;
0: 		if (Arrays.equals(first, second))
0: 			return true;
0: 		if (first[0].equals(second[0])
0: 				&& first[first.length - 1].equals(second[second.length - 1]))
0: 			return false;
0: 		else
0: 			return true;
1:     }
/////////////////////////////////////////////////////////////////////////
1:             
/////////////////////////////////////////////////////////////////////////
0:                 if (checkPaths(info.getBrokerPath(), ds.getRemoteInfo().getBrokerPath())) {
0:                 	ds.add(info.getConsumerId());
1:                 }
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
1:         info.setSelector(null);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     public ConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) {
/////////////////////////////////////////////////////////////////////////
0:         if (info.getSelector() != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         List<DemandSubscription> tmpList = new ArrayList<DemandSubscription>();
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator<DemandSubscription> i = tmpList.iterator(); i.hasNext();) {
0:             DemandSubscription ds = i.next();
0:             if (LOG.isTraceEnabled()) {
0:                 LOG.trace("removing sub on " + localBroker + " from " + remoteBrokerName + " :  " + ds.getRemoteInfo());
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ConduitBridge.class);
/////////////////////////////////////////////////////////////////////////
0:             if (LOG.isTraceEnabled())
0:                 LOG.trace("removing sub on " + localBroker + " from " + remoteBrokerName + " :  "
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class ConduitBridge extends DemandForwardingBridge {
0:     static final private Log log = LogFactory.getLog(ConduitBridge.class);
1: 
1:      * 
0:     public ConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker,
0:                          Transport remoteBroker) {
1:         super(configuration, localBroker, remoteBroker);
1: 
1:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException {
1: 
0:         if (addToAlreadyInterestedConsumers(info)) {
1:             return null; // don't want this subscription added
1: 
0:     protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info) {
1: 
0:         if (info.getSelector() != null)
0:             return false;
1: 
0:         // search through existing subscriptions and see if we have a match
0:         DestinationFilter filter = DestinationFilter.parseFilter(info.getDestination());
0:         for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext();) {
0:             if (filter.matches(ds.getLocalInfo().getDestination())) {
1:                 // add the interest in the subscription
0:                 // ds.add(ds.getRemoteInfo().getConsumerId());
0:                 // continue - we want interest to any existing
0:                 // DemandSubscriptions
1: 
1:     protected void removeDemandSubscription(ConsumerId id) throws IOException {
1: 
0:         for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext();) {
1:             if (ds.isEmpty()) {
0:         for (Iterator i = tmpList.iterator(); i.hasNext();) {
0:             DemandSubscription ds = (DemandSubscription)i.next();
0:             if (log.isTraceEnabled())
0:                 log.trace("removing sub on " + localBroker + " from " + remoteBrokerName + " :  "
0:                           + ds.getRemoteInfo());
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:75fde71
/////////////////////////////////////////////////////////////////////////
0:     	    	
0:     	if( info.getSelector()!=null )
0:     		return false;
0:     	
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0: 
0:         if (first == null || second == null) {
0:             return true;
1:         }
0:         if (Arrays.equals(first, second)) {
0:             return true;
1:         }
0: 
0:         if (first[0].equals(second[0]) && first[first.length - 1].equals(second[second.length - 1])) {
0:             return false;
0:         } else {
0:             return true;
1:         }
0: 
1:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
0:                     LOG.debug(configuration.getBrokerName() + " matched (add interest) to exsting sub for: " +
0:                               ds.getRemoteInfo() + " with sub: " + info.getConsumerId());
0:                     ds.add(info.getConsumerId());
1:                 // continue - we want interest to any existing DemandSubscriptions
/////////////////////////////////////////////////////////////////////////
1:         for (DemandSubscription ds : subscriptionMapByLocalId.values()) {
/////////////////////////////////////////////////////////////////////////
0: 
1:         for (DemandSubscription ds : tmpList) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:8af25fd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         super.removeDemandSubscription(id);
commit:a61e5bc
/////////////////////////////////////////////////////////////////////////
commit:b32ff4d
/////////////////////////////////////////////////////////////////////////
1:         //add our original id to ourselves
1:         info.addNetworkConsumerId(info.getConsumerId());
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0:     public ConduitBridge(NetworkBridgeConfiguration configuration,Transport localBroker,Transport remoteBroker){
0:         super(configuration,localBroker,remoteBroker);
commit:ed49ada
/////////////////////////////////////////////////////////////////////////
0:                 //ds.add(ds.getRemoteInfo().getConsumerId());
0:                 ds.add(info.getConsumerId());
commit:b593aca
/////////////////////////////////////////////////////////////////////////
0:         
0:         if (addToAlreadyInterestedConsumers(info)){
0:             return null; //don't want this subscription added
1:         }
1:         return doCreateDemandSubscription(info);
1:     }
0:     
0:     protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info){
/////////////////////////////////////////////////////////////////////////
1:         return matched;
commit:068c646
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.filter.DestinationFilter;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
1: /**
1:  * Consolidates subscriptions
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class ConduitBridge extends DemandForwardingBridge{
0:     static final private Log log=LogFactory.getLog(ConduitBridge.class);
1:     /**
1:      * Constructor
1:      * @param localBroker
1:      * @param remoteBroker
1:      */
0:     public ConduitBridge(Transport localBroker,Transport remoteBroker){
0:         super(localBroker,remoteBroker);
0:     }
0:     
0:     protected DemandSubscription createDemandSubscription(ConsumerInfo info){
0:         //search through existing subscriptions and see if we have a match
1:         boolean matched = false;
0:         DestinationFilter filter=DestinationFilter.parseFilter(info.getDestination());
0:         for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext();){
0:             DemandSubscription ds = (DemandSubscription)i.next();
0:             if (filter.matches(ds.getLocalInfo().getDestination())){
0:                 //add the interest in the subscription
0:                 ds.add(ds.getRemoteInfo().getConsumerId());
1:                 matched = true;
0:                 //continue - we want interest to any existing DemandSubscriptions
0:             }
0:         }
0:         if (matched){
0:             return null; //don't want this subscription added
0:         }
0:         //not matched so create a new one
0:         //but first, if it's durable - changed set the
0:         //ConsumerId here - so it won't be removed if the
0:         //durable subscriber goes away on the other end
0:         if (info.isDurable() || (info.getDestination().isQueue() && !info.getDestination().isTemporary())){
0:             info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),consumerIdGenerator
0:                             .getNextSequenceId()));
0:         }
0:         return super.createDemandSubscription(info);
0:     }
0:     
0:     protected void removeDemandSubscription(ConsumerId id) throws IOException{
0:         List tmpList = new ArrayList();
0:     
0:         for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext();){
0:             DemandSubscription ds = (DemandSubscription)i.next();
0:             ds.remove(id);
0:             if (ds.isEmpty()){
1:                 tmpList.add(ds);
0:             }
0:         }
0:         for (Iterator i = tmpList.iterator(); i.hasNext();){
0:             DemandSubscription ds = (DemandSubscription) i.next();
0:             subscriptionMapByLocalId.remove(ds.getRemoteInfo().getConsumerId());
1:             removeSubscription(ds);
0:             if(log.isTraceEnabled())
0:                 log.trace("removing sub on "+localBroker+" from "+remoteBrokerName+" :  "+ds.getRemoteInfo());
0:         }
0:        
0:     }
0: 
0: }
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException{
============================================================================