1:b8a7e99: /**
1:b8a7e99:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b8a7e99:  * contributor license agreements.  See the NOTICE file distributed with
1:b8a7e99:  * this work for additional information regarding copyright ownership.
1:b8a7e99:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b8a7e99:  * (the "License"); you may not use this file except in compliance with
1:b8a7e99:  * the License.  You may obtain a copy of the License at
1:b8a7e99:  *
1:b8a7e99:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b8a7e99:  *
1:b8a7e99:  * Unless required by applicable law or agreed to in writing, software
1:b8a7e99:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b8a7e99:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8a7e99:  * See the License for the specific language governing permissions and
1:b8a7e99:  * limitations under the License.
1:b8a7e99:  */
1:b8a7e99: package org.apache.activemq.bugs;
1:b8a7e99: 
1:b8a7e99: import static org.junit.Assert.assertEquals;
1:b8a7e99: import static org.junit.Assert.assertNotNull;
1:b8a7e99: 
1:b8a7e99: import java.util.Enumeration;
1:b8a7e99: 
1:b8a7e99: import javax.jms.Connection;
1:b8a7e99: import javax.jms.Message;
1:b8a7e99: import javax.jms.MessageProducer;
1:b8a7e99: import javax.jms.Queue;
1:b8a7e99: import javax.jms.QueueBrowser;
1:b8a7e99: import javax.jms.Session;
1:b8a7e99: 
1:b8a7e99: import org.apache.activemq.ActiveMQConnectionFactory;
1:b8a7e99: import org.apache.activemq.broker.BrokerService;
1:b8a7e99: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b8a7e99: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b8a7e99: import org.junit.After;
1:b8a7e99: import org.junit.Before;
1:b8a7e99: import org.junit.Test;
1:b8a7e99: import org.slf4j.Logger;
1:b8a7e99: import org.slf4j.LoggerFactory;
1:b8a7e99: 
1:b8a7e99: public class AMQ4487Test {
1:b8a7e99: 
1:b8a7e99:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4487Test.class);
1:b8a7e99: 
1:b8a7e99:     private final String destinationName = "TEST.QUEUE";
1:b8a7e99:     private BrokerService broker;
1:b8a7e99:     private ActiveMQConnectionFactory factory;
1:b8a7e99: 
1:b8a7e99:     @Before
1:b8a7e99:     public void startBroker() throws Exception {
1:b8a7e99:         broker = new BrokerService();
1:b8a7e99:         broker.deleteAllMessages();
1:1f5694e:         broker.setUseJmx(false);
1:1f5694e:         broker.setAdvisorySupport(false);
1:b8a7e99: 
1:b8a7e99:         PolicyEntry policy = new PolicyEntry();
1:b8a7e99:         policy.setQueue(">");
1:b8a7e99:         policy.setMaxProducersToAudit(75);
1:b8a7e99:         PolicyMap pMap = new PolicyMap();
1:b8a7e99:         pMap.setDefaultEntry(policy);
1:b8a7e99:         broker.setDestinationPolicy(pMap);
1:b8a7e99: 
1:b8a7e99:         broker.start();
1:b8a7e99:         broker.waitUntilStarted();
1:1f5694e:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:b8a7e99:     }
1:b8a7e99: 
1:b8a7e99:     @After
1:b8a7e99:     public void stopBroker() throws Exception {
1:b8a7e99:         broker.stop();
1:b8a7e99:         broker.waitUntilStopped();
1:b8a7e99:     }
1:b8a7e99: 
1:b8a7e99:     private void sendMessages(int messageToSend) throws Exception {
1:b8a7e99:         String data = "";
1:b8a7e99:         for (int i = 0; i < 1024 * 2; i++) {
1:b8a7e99:             data += "x";
1:b8a7e99:         }
1:b8a7e99: 
1:b8a7e99:         Connection connection = factory.createConnection();
1:b8a7e99:         connection.start();
1:b8a7e99: 
1:b8a7e99:         for (int i = 0; i < messageToSend; i++) {
1:b8a7e99:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b8a7e99:             Queue queue = session.createQueue(destinationName);
1:b8a7e99:             MessageProducer producer = session.createProducer(queue);
1:b8a7e99:             producer.send(session.createTextMessage(data));
1:b8a7e99:             session.close();
1:b8a7e99:         }
1:b8a7e99: 
1:b8a7e99:         connection.close();
1:b8a7e99:     }
1:b8a7e99: 
1:b8a7e99:     @Test
1:b8a7e99:     public void testBrowsingWithLessThanMaxAuditDepth() throws Exception {
1:b8a7e99:         doTestBrowsing(75);
1:b8a7e99:     }
1:b8a7e99: 
1:b8a7e99:     @Test
1:b8a7e99:     public void testBrowsingWithMoreThanMaxAuditDepth() throws Exception {
1:1f5694e:         doTestBrowsing(300);
1:b8a7e99:     }
1:b8a7e99: 
1:b8a7e99:     @SuppressWarnings("rawtypes")
1:b8a7e99:     private void doTestBrowsing(int messagesToSend) throws Exception {
1:b8a7e99: 
1:b8a7e99:         Connection connection = factory.createConnection();
1:b8a7e99:         connection.start();
1:b8a7e99:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b8a7e99:         Queue queue = session.createQueue(destinationName);
1:b8a7e99: 
1:b8a7e99:         sendMessages(messagesToSend);
1:b8a7e99: 
1:b8a7e99:         QueueBrowser browser = session.createBrowser(queue);
1:b8a7e99:         Enumeration enumeration = browser.getEnumeration();
1:b8a7e99:         int received = 0;
1:b8a7e99:         while (enumeration.hasMoreElements()) {
1:b8a7e99:             Message m = (Message) enumeration.nextElement();
1:b8a7e99:             assertNotNull(m);
1:b8a7e99: 
1:b8a7e99:             if (LOG.isDebugEnabled()) {
1:b8a7e99:                 LOG.debug("Browsed Message: {}", m.getJMSMessageID());
1:b8a7e99:             }
1:b8a7e99: 
1:b8a7e99:             received++;
1:b8a7e99:             if (received > messagesToSend) {
1:b8a7e99:                 break;
1:b8a7e99:             }
1:b8a7e99:         }
1:b8a7e99: 
1:b8a7e99:         browser.close();
1:b8a7e99: 
1:b8a7e99:         assertEquals(messagesToSend, received);
1:b8a7e99:     }
1:b8a7e99: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1f5694e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
/////////////////////////////////////////////////////////////////////////
1:         factory = new ActiveMQConnectionFactory("vm://localhost");
/////////////////////////////////////////////////////////////////////////
1:         doTestBrowsing(300);
/////////////////////////////////////////////////////////////////////////
commit:b8a7e99
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
0: import java.net.URI;
1: import java.util.Enumeration;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4487Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4487Test.class);
1: 
1:     private final String destinationName = "TEST.QUEUE";
1:     private BrokerService broker;
0:     private URI connectUri;
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
0:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:         broker.deleteAllMessages();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setQueue(">");
1:         policy.setMaxProducersToAudit(75);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
0:         connectUri = connector.getConnectUri();
0:         factory = new ActiveMQConnectionFactory(connectUri);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     private void sendMessages(int messageToSend) throws Exception {
1:         String data = "";
1:         for (int i = 0; i < 1024 * 2; i++) {
1:             data += "x";
1:         }
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         for (int i = 0; i < messageToSend; i++) {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue queue = session.createQueue(destinationName);
1:             MessageProducer producer = session.createProducer(queue);
1:             producer.send(session.createTextMessage(data));
1:             session.close();
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testBrowsingWithLessThanMaxAuditDepth() throws Exception {
1:         doTestBrowsing(75);
1:     }
1: 
1:     @Test
1:     public void testBrowsingWithMoreThanMaxAuditDepth() throws Exception {
0:         doTestBrowsing(76);
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     private void doTestBrowsing(int messagesToSend) throws Exception {
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(destinationName);
1: 
1:         sendMessages(messagesToSend);
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         Enumeration enumeration = browser.getEnumeration();
1:         int received = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message m = (Message) enumeration.nextElement();
1:             assertNotNull(m);
1: 
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Browsed Message: {}", m.getJMSMessageID());
1:             }
0:             LOG.info("Browsed Message: {}", m.getJMSMessageID());
1: 
1:             received++;
1:             if (received > messagesToSend) {
1:                 break;
1:             }
1:         }
1: 
1:         browser.close();
1: 
1:         assertEquals(messagesToSend, received);
1:     }
1: }
============================================================================