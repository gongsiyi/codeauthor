1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:eece06b: import java.util.*;
1:a107823: 
1:a107823: public class PropertiesViewFilter implements QueryFilter {
1:a107823:     protected QueryFilter next;
1:a107823:     protected Set viewFilter;
1:a107823: 
1:a107823:     /**
1:a107823:      * Creates a filter that will select the properties of a map object to view
1:5f1adbe:      * 
1:a107823:      * @param next - the next query filter that will return a collection of maps
1:a107823:      */
1:a107823:     public PropertiesViewFilter(QueryFilter next) {
1:a107823:         this(null, next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Creates a filter that will select the properties of a map object to view
1:5f1adbe:      * 
1:a107823:      * @param viewFilter - the properties to view
1:a107823:      * @param next - the next query filter that will return a collection of maps
1:a107823:      */
1:a107823:     public PropertiesViewFilter(Set viewFilter, QueryFilter next) {
1:a107823:         this.next = next;
1:a107823:         this.viewFilter = viewFilter;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Filter the properties to view of the query result
1:5f1adbe:      * 
1:a107823:      * @param query - the query string
1:a107823:      * @return list of objects that has been view filtered
1:a107823:      */
1:5f1adbe:     public List<Map<Object, Object>> query(String query) throws Exception {
1:a107823:         return filterViewCollection(next.query(query), viewFilter);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Filter the properties to view of the query result
1:5f1adbe:      * 
1:a107823:      * @param queries - the query map
1:a107823:      * @return list of objects that has been view filtered
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     public List<Map<Object, Object>> query(List queries) throws Exception {
1:a107823:         return filterViewCollection(next.query(queries), viewFilter);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Filter the view of each element in the collection
1:5f1adbe:      * 
1:a107823:      * @param result - the lists to filter the view from
1:a107823:      * @param viewFilter - the views to select
1:5f1adbe:      * @return list of objects whose view has been filtered
1:a107823:      */
1:5f1adbe:     protected List<Map<Object, Object>> filterViewCollection(Collection<Map<Object, Object>> result, Set viewFilter) {
1:a107823:         // Use a list to allow duplicate entries
1:5f1adbe:         List<Map<Object, Object>> newCollection = new ArrayList<Map<Object, Object>>();
1:a107823: 
1:5f1adbe:         for (Iterator<Map<Object, Object>> i = result.iterator(); i.hasNext();) {
1:5f1adbe:             newCollection.add(filterView(i.next()));
1:a107823:         }
1:a107823: 
1:a107823:         return newCollection;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Select only the attributes to view from the map data
1:5f1adbe:      * 
1:a107823:      * @param data - data to filter the view from
1:a107823:      * @return - data with the view filtered
1:a107823:      */
1:5f1adbe:     protected Map<Object, Object> filterView(Map<Object, Object> data) {
1:a107823:         // If no view specified, display all attributes
1:a107823:         if (viewFilter == null || viewFilter.isEmpty()) {
1:a107823:             return data;
1:a107823:         }
1:a107823: 
1:5f1adbe:         Map<Object, Object> newData;
1:a107823:         try {
1:a107823:             // Lets try to use the same class as the original
1:eece06b:             newData = new LinkedHashMap(data.getClass().newInstance());
1:a107823:         } catch (Exception e) {
1:a107823:             // Lets use a default HashMap
1:eece06b:             newData = new LinkedHashMap<Object, Object>();
1:a107823:         }
1:a107823: 
1:a107823:         // Filter the keys to view
1:5f1adbe:         for (Iterator i = viewFilter.iterator(); i.hasNext();) {
1:a107823:             Object key = i.next();
1:a107823:             Object val = data.get(key);
1:a107823: 
1:a107823:             if (val != null) {
1:a107823:                 newData.put(key, val);
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return newData;
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:eece06b
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:             newData = new LinkedHashMap(data.getClass().newInstance());
1:             newData = new LinkedHashMap<Object, Object>();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     public List<Map<Object, Object>> query(String query) throws Exception {
1:      * 
1:     public List<Map<Object, Object>> query(List queries) throws Exception {
1:      * 
1:      * @return list of objects whose view has been filtered
1:     protected List<Map<Object, Object>> filterViewCollection(Collection<Map<Object, Object>> result, Set viewFilter) {
1:         List<Map<Object, Object>> newCollection = new ArrayList<Map<Object, Object>>();
1:         for (Iterator<Map<Object, Object>> i = result.iterator(); i.hasNext();) {
1:             newCollection.add(filterView(i.next()));
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected Map<Object, Object> filterView(Map<Object, Object> data) {
1:         Map<Object, Object> newData;
0:             newData = data.getClass().newInstance();
0:             newData = new HashMap<Object, Object>();
1:         for (Iterator i = viewFilter.iterator(); i.hasNext();) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import java.util.Set;
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.Collection;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: public class PropertiesViewFilter implements QueryFilter {
1:     protected QueryFilter next;
1:     protected Set viewFilter;
1: 
1:     /**
1:      * Creates a filter that will select the properties of a map object to view
1:      * @param next - the next query filter that will return a collection of maps
1:      */
1:     public PropertiesViewFilter(QueryFilter next) {
1:         this(null, next);
1:     }
1: 
1:     /**
1:      * Creates a filter that will select the properties of a map object to view
1:      * @param viewFilter - the properties to view
1:      * @param next - the next query filter that will return a collection of maps
1:      */
1:     public PropertiesViewFilter(Set viewFilter, QueryFilter next) {
1:         this.next = next;
1:         this.viewFilter = viewFilter;
1:     }
1: 
1:     /**
1:      * Filter the properties to view of the query result
1:      * @param query - the query string
1:      * @return list of objects that has been view filtered
1:      */
0:     public List query(String query) throws Exception {
1:         return filterViewCollection(next.query(query), viewFilter);
1:     }
1: 
1:     /**
1:      * Filter the properties to view of the query result
1:      * @param queries - the query map
1:      * @return list of objects that has been view filtered
1:      * @throws Exception
1:      */
0:     public List query(List queries) throws Exception {
1:         return filterViewCollection(next.query(queries), viewFilter);
1:     }
1: 
1:     /**
1:      * Filter the view of each element in the collection
1:      * @param result - the lists to filter the view from
1:      * @param viewFilter - the views to select
0:      * @return lsit of objects whose view has been filtered
1:      */
0:     protected List filterViewCollection(Collection result, Set viewFilter) {
1:         // Use a list to allow duplicate entries
0:         List newCollection = new ArrayList();
1: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
0:             newCollection.add(filterView((Map)i.next()));
1:         }
1: 
1:         return newCollection;
1:     }
1: 
1:     /**
1:      * Select only the attributes to view from the map data
1:      * @param data - data to filter the view from
1:      * @return - data with the view filtered
1:      */
0:     protected Map filterView(Map data) {
1:         // If no view specified, display all attributes
1:         if (viewFilter == null || viewFilter.isEmpty()) {
1:             return data;
1:         }
1: 
0:         Map newData;
1:         try {
1:             // Lets try to use the same class as the original
0:             newData = (Map)data.getClass().newInstance();
1:         } catch (Exception e) {
1:             // Lets use a default HashMap
0:             newData = new HashMap();
1:         }
1: 
1:         // Filter the keys to view
0:         for (Iterator i=viewFilter.iterator(); i.hasNext();) {
1:             Object key = i.next();
1:             Object val = data.get(key);
1: 
1:             if (val != null) {
1:                 newData.put(key, val);
1:             }
1:         }
1: 
1:         return newData;
1:     }
1: 
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import java.util.Set;
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.Collection;
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: public class PropertiesViewFilter implements QueryFilter {
0:     protected QueryFilter next;
0:     protected Set viewFilter;
0: 
0:     /**
0:      * Creates a filter that will select the properties of a map object to view
0:      * @param next - the next query filter that will return a collection of maps
0:      */
0:     public PropertiesViewFilter(QueryFilter next) {
0:         this(null, next);
0:     }
0: 
0:     /**
0:      * Creates a filter that will select the properties of a map object to view
0:      * @param viewFilter - the properties to view
0:      * @param next - the next query filter that will return a collection of maps
0:      */
0:     public PropertiesViewFilter(Set viewFilter, QueryFilter next) {
0:         this.next = next;
0:         this.viewFilter = viewFilter;
0:     }
0: 
0:     /**
0:      * Filter the properties to view of the query result
0:      * @param query - the query string
0:      * @return list of objects that has been view filtered
0:      */
0:     public List query(String query) throws Exception {
0:         return filterViewCollection(next.query(query), viewFilter);
0:     }
0: 
0:     /**
0:      * Filter the properties to view of the query result
0:      * @param queries - the query map
0:      * @return list of objects that has been view filtered
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         return filterViewCollection(next.query(queries), viewFilter);
0:     }
0: 
0:     /**
0:      * Filter the view of each element in the collection
0:      * @param result - the lists to filter the view from
0:      * @param viewFilter - the views to select
0:      * @return lsit of objects whose view has been filtered
0:      */
0:     protected List filterViewCollection(Collection result, Set viewFilter) {
0:         // Use a list to allow duplicate entries
0:         List newCollection = new ArrayList();
0: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
0:             newCollection.add(filterView((Map)i.next()));
0:         }
0: 
0:         return newCollection;
0:     }
0: 
0:     /**
0:      * Select only the attributes to view from the map data
0:      * @param data - data to filter the view from
0:      * @return - data with the view filtered
0:      */
0:     protected Map filterView(Map data) {
0:         // If no view specified, display all attributes
0:         if (viewFilter == null || viewFilter.isEmpty()) {
0:             return data;
0:         }
0: 
0:         Map newData;
0:         try {
0:             // Lets try to use the same class as the original
0:             newData = (Map)data.getClass().newInstance();
0:         } catch (Exception e) {
0:             // Lets use a default HashMap
0:             newData = new HashMap();
0:         }
0: 
0:         // Filter the keys to view
0:         for (Iterator i=viewFilter.iterator(); i.hasNext();) {
0:             Object key = i.next();
0:             Object val = data.get(key);
0: 
0:             if (val != null) {
0:                 newData.put(key, val);
0:             }
0:         }
0: 
0:         return newData;
0:     }
0: 
0: }
============================================================================