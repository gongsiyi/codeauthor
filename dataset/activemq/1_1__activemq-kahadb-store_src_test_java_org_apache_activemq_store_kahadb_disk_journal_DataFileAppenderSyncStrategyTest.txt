1:1a59827: /**
1:1a59827:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a59827:  * contributor license agreements.  See the NOTICE file distributed with
1:1a59827:  * this work for additional information regarding copyright ownership.
1:1a59827:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a59827:  * (the "License"); you may not use this file except in compliance with
1:1a59827:  * the License.  You may obtain a copy of the License at
1:1a59827:  *
1:1a59827:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a59827:  *
1:1a59827:  * Unless required by applicable law or agreed to in writing, software
1:1a59827:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a59827:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a59827:  * See the License for the specific language governing permissions and
1:1a59827:  * limitations under the License.
1:1a59827:  */
1:1a59827: package org.apache.activemq.store.kahadb.disk.journal;
1:1a59827: 
1:1a59827: import static org.junit.Assert.assertFalse;
1:1a59827: import static org.junit.Assert.assertTrue;
1:1a59827: 
1:1a59827: import java.io.File;
1:1a59827: import java.util.concurrent.TimeUnit;
1:1a59827: 
1:1a59827: import org.apache.activemq.store.kahadb.KahaDBStore;
1:1a59827: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
1:1a59827: import org.junit.After;
1:1a59827: import org.junit.Rule;
1:1a59827: import org.junit.Test;
1:1a59827: import org.junit.rules.TemporaryFolder;
1:1a59827: import org.junit.rules.Timeout;
1:1a59827: 
1:1a59827: public class DataFileAppenderSyncStrategyTest  {
1:1a59827: 
1:1a59827:     @Rule
1:1a59827:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:1a59827: 
1:1a59827:     @Rule
1:1a59827:     public Timeout globalTimeout= new Timeout(10, TimeUnit.SECONDS);
1:1a59827: 
1:1a59827:     private KahaDBStore store;
1:1a59827:     private int defaultJournalLength = 10 * 1024;
1:1a59827: 
1:1a59827:     @After
1:1a59827:     public void after() throws Exception {
1:1a59827:         if (store != null) {
1:1a59827:             store.stop();
1:1a59827:         }
1:1a59827:     }
1:1a59827: 
1:1a59827:     @Test
1:1a59827:     public void testPeriodicSync()throws Exception {
1:1a59827:         store = configureStore(JournalDiskSyncStrategy.PERIODIC);
1:1a59827:         store.start();
1:1a59827:         final Journal journal = store.getJournal();
1:1a59827: 
1:1a59827:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:1a59827:         assertTrue(appender.periodicSync);
1:1a59827:     }
1:1a59827: 
1:1a59827:     @Test
1:1a59827:     public void testAlwaysSync()throws Exception {
1:1a59827:         store = configureStore(JournalDiskSyncStrategy.ALWAYS);
1:1a59827:         store.start();
1:1a59827:         final Journal journal = store.getJournal();
1:1a59827: 
1:1a59827:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:1a59827:         assertFalse(appender.periodicSync);
1:1a59827:     }
1:1a59827: 
1:1a59827:     @Test
1:1a59827:     public void testNeverSync() throws Exception {
1:1a59827:         store = configureStore(JournalDiskSyncStrategy.NEVER);
1:1a59827:         store.start();
1:1a59827:         final Journal journal = store.getJournal();
1:1a59827: 
1:1a59827:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:1a59827:         assertFalse(appender.periodicSync);
1:1a59827:     }
1:1a59827: 
1:1a59827:     private KahaDBStore configureStore(JournalDiskSyncStrategy strategy) throws Exception {
1:1a59827:         KahaDBStore store = new KahaDBStore();
1:1a59827:         store.setJournalMaxFileLength(defaultJournalLength);
1:1a59827:         store.deleteAllMessages();
1:1a59827:         store.setDirectory(dataFileDir.getRoot());
1:1a59827:         if (strategy != null) {
1:1a59827:             store.setJournalDiskSyncStrategy(strategy.name());
1:1a59827:         }
1:1a59827: 
1:1a59827:         return store;
1:1a59827:     }
1:1a59827: 
1:1a59827: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1a59827
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
1: import org.junit.After;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.junit.rules.Timeout;
1: 
1: public class DataFileAppenderSyncStrategyTest  {
1: 
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     @Rule
1:     public Timeout globalTimeout= new Timeout(10, TimeUnit.SECONDS);
1: 
1:     private KahaDBStore store;
1:     private int defaultJournalLength = 10 * 1024;
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (store != null) {
1:             store.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testPeriodicSync()throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.PERIODIC);
1:         store.start();
1:         final Journal journal = store.getJournal();
1: 
1:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:         assertTrue(appender.periodicSync);
1:     }
1: 
1:     @Test
1:     public void testAlwaysSync()throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.ALWAYS);
1:         store.start();
1:         final Journal journal = store.getJournal();
1: 
1:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:         assertFalse(appender.periodicSync);
1:     }
1: 
1:     @Test
1:     public void testNeverSync() throws Exception {
1:         store = configureStore(JournalDiskSyncStrategy.NEVER);
1:         store.start();
1:         final Journal journal = store.getJournal();
1: 
1:         DataFileAppender appender = (DataFileAppender) journal.appender;
1:         assertFalse(appender.periodicSync);
1:     }
1: 
1:     private KahaDBStore configureStore(JournalDiskSyncStrategy strategy) throws Exception {
1:         KahaDBStore store = new KahaDBStore();
1:         store.setJournalMaxFileLength(defaultJournalLength);
1:         store.deleteAllMessages();
1:         store.setDirectory(dataFileDir.getRoot());
1:         if (strategy != null) {
1:             store.setJournalDiskSyncStrategy(strategy.name());
1:         }
1: 
1:         return store;
1:     }
1: 
1: }
============================================================================