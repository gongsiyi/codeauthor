1:6dffe4d: /**
1:6dffe4d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6dffe4d:  * contributor license agreements.  See the NOTICE file distributed with
1:6dffe4d:  * this work for additional information regarding copyright ownership.
1:6dffe4d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6dffe4d:  * (the "License"); you may not use this file except in compliance with
1:6dffe4d:  * the License.  You may obtain a copy of the License at
1:6dffe4d:  *
1:6dffe4d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6dffe4d:  *
1:6dffe4d:  * Unless required by applicable law or agreed to in writing, software
1:6dffe4d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6dffe4d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6dffe4d:  * See the License for the specific language governing permissions and
1:6dffe4d:  * limitations under the License.
1:6dffe4d:  */
1:6dffe4d: 
1:6dffe4d: package org.apache.activemq.usage;
1:6dffe4d: 
1:6dffe4d: import javax.jms.JMSException;
1:6dffe4d: import javax.jms.Message;
1:6dffe4d: import javax.jms.Session;
1:6dffe4d: import javax.jms.TextMessage;
1:6dffe4d: import javax.management.ObjectName;
1:6dffe4d: 
1:6dffe4d: import junit.framework.TestCase;
1:6dffe4d: 
1:6dffe4d: import org.apache.activemq.ActiveMQConnectionFactory;
1:6dffe4d: import org.apache.activemq.broker.BrokerService;
1:6dffe4d: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:6dffe4d: import org.springframework.jms.core.JmsTemplate;
1:6dffe4d: import org.springframework.jms.core.MessageCreator;
1:6dffe4d: 
1:6dffe4d: public class CompositeMessageCursorUsageTest extends TestCase {
1:6dffe4d:     
1:6dffe4d:     BrokerService broker;
1:6dffe4d:     
1:6dffe4d:     public void setUp() throws Exception {
1:6dffe4d:         broker = new BrokerService();
1:6dffe4d:         broker.setPersistent(false);
1:6dffe4d:         broker.start();
1:6dffe4d:     }
1:6dffe4d:     
1:6dffe4d:     protected void tearDown() throws Exception {
1:6dffe4d:         broker.stop();
1:6dffe4d:     }
1:6dffe4d: 
1:6dffe4d:     public void testCompositeMessageUsage() throws Exception {
1:6dffe4d: 
1:6dffe4d:         String compositeQueue = "compositeA,compositeB";
1:6dffe4d: 
1:6dffe4d:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:6dffe4d:         JmsTemplate jt = new JmsTemplate(cf);
1:6dffe4d: 
1:6dffe4d:         jt.send(compositeQueue, new MessageCreator() {
1:6dffe4d:             public Message createMessage(Session session) throws JMSException {
1:6dffe4d:                 TextMessage tm = session.createTextMessage();
1:6dffe4d:                 tm.setText("test");
1:6dffe4d:                 return tm;
1:6dffe4d:             }
1:6dffe4d:         });
1:6dffe4d: 
1:6dffe4d:         jt.send("noCompositeA", new MessageCreator() {
1:6dffe4d:             public Message createMessage(Session session) throws JMSException {
1:6dffe4d:                 TextMessage tm = session.createTextMessage();
1:6dffe4d:                 tm.setText("test");
1:6dffe4d:                 return tm;
1:6dffe4d:             }
1:6dffe4d:         });
1:6dffe4d: 
1:6dffe4d:         jt.send("noCompositeB", new MessageCreator() {
1:6dffe4d:             public Message createMessage(Session session) throws JMSException {
1:6dffe4d:                 TextMessage tm = session.createTextMessage();
1:6dffe4d:                 tm.setText("test");
1:6dffe4d:                 return tm;
1:6dffe4d:             }
1:6dffe4d:         });
1:6dffe4d:         
1:6dffe4d:         assertEquals("Cursor memory usage wrong for 'noCompositeA' queue", 1032, getQueueView("noCompositeA").getCursorMemoryUsage());
1:6dffe4d:         assertEquals("Cursor memory usage wrong for 'noCompositeB' queue", 1032, getQueueView("noCompositeB").getCursorMemoryUsage());
1:6dffe4d:         assertEquals("Cursor memory usage wrong for 'CompositeA' queue", 1032, getQueueView("compositeA").getCursorMemoryUsage());
1:6dffe4d:         assertEquals("Cursor memory usage wrong for 'CompositeB' queue", 1032, getQueueView("compositeB").getCursorMemoryUsage());
1:6dffe4d:         
1:6dffe4d:     }
1:6dffe4d:     
1:6dffe4d:     public QueueViewMBean getQueueView(String queueName) throws Exception {
1:cb7b657:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq" + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1:6dffe4d:         return (QueueViewMBean) broker.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:6dffe4d:     }
1:6dffe4d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq" + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6dffe4d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usage;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.core.MessageCreator;
1: 
1: public class CompositeMessageCursorUsageTest extends TestCase {
1:     
1:     BrokerService broker;
1:     
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.start();
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void testCompositeMessageUsage() throws Exception {
1: 
1:         String compositeQueue = "compositeA,compositeB";
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         JmsTemplate jt = new JmsTemplate(cf);
1: 
1:         jt.send(compositeQueue, new MessageCreator() {
1:             public Message createMessage(Session session) throws JMSException {
1:                 TextMessage tm = session.createTextMessage();
1:                 tm.setText("test");
1:                 return tm;
1:             }
1:         });
1: 
1:         jt.send("noCompositeA", new MessageCreator() {
1:             public Message createMessage(Session session) throws JMSException {
1:                 TextMessage tm = session.createTextMessage();
1:                 tm.setText("test");
1:                 return tm;
1:             }
1:         });
1: 
1:         jt.send("noCompositeB", new MessageCreator() {
1:             public Message createMessage(Session session) throws JMSException {
1:                 TextMessage tm = session.createTextMessage();
1:                 tm.setText("test");
1:                 return tm;
1:             }
1:         });
1:         
1:         assertEquals("Cursor memory usage wrong for 'noCompositeA' queue", 1032, getQueueView("noCompositeA").getCursorMemoryUsage());
1:         assertEquals("Cursor memory usage wrong for 'noCompositeB' queue", 1032, getQueueView("noCompositeB").getCursorMemoryUsage());
1:         assertEquals("Cursor memory usage wrong for 'CompositeA' queue", 1032, getQueueView("compositeA").getCursorMemoryUsage());
1:         assertEquals("Cursor memory usage wrong for 'CompositeB' queue", 1032, getQueueView("compositeB").getCursorMemoryUsage());
1:         
1:     }
1:     
1:     public QueueViewMBean getQueueView(String queueName) throws Exception {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq" + ":Type=Queue,Destination=" + queueName + ",BrokerName=localhost");
1:         return (QueueViewMBean) broker.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:     }
1: }
============================================================================