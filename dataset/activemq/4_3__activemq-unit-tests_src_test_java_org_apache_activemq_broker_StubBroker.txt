1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:a414c20: 
1:1a88ac6: package org.apache.activemq.broker;
1:25a252f: 
1:a156261: import javax.jms.InvalidClientIDException;
1:74a7a8b: import java.util.LinkedList;
1:1a88ac6: import org.apache.activemq.command.ConnectionInfo;
1:25a252f: 
1:cdc2fd3: public class StubBroker extends EmptyBroker {
1:933eb2f:     public LinkedList<AddConnectionData> addConnectionData = new LinkedList<AddConnectionData>();
1:933eb2f:     public LinkedList<RemoveConnectionData> removeConnectionData = new LinkedList<RemoveConnectionData>();
1:25a252f: 
1:1a88ac6:     public class AddConnectionData {
1:1a88ac6:         public final ConnectionContext connectionContext;
1:1a88ac6:         public final ConnectionInfo connectionInfo;
1:4741136: 
1:1a88ac6:         public AddConnectionData(ConnectionContext context, ConnectionInfo info) {
1:1a88ac6:             connectionContext = context;
1:1a88ac6:             connectionInfo = info;
1:a414c20:         }
1:dfcf776:     }
1:dfcf776: 
1:d36c0d4:     public static class RemoveConnectionData {
1:1a88ac6:         public final ConnectionContext connectionContext;
1:1a88ac6:         public final ConnectionInfo connectionInfo;
1:1a88ac6:         public final Throwable error;
1:c07b233: 
1:1a88ac6:         public RemoveConnectionData(ConnectionContext context, ConnectionInfo info, Throwable error) {
1:1a88ac6:             connectionContext = context;
1:1a88ac6:             connectionInfo = info;
1:1a88ac6:             this.error = error;
1:c07b233:         }
1:c07b233:     }
1:c07b233: 
1:1a88ac6:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:a156261:         for (AddConnectionData data : addConnectionData) {
1:a156261:             if (data.connectionInfo.getClientId() != null && data.connectionInfo.getClientId().equals(info.getClientId())) {
1:a156261:                 throw new InvalidClientIDException("ClientID already exists");
1:a156261:             }
1:a156261:         }
1:1a88ac6:         addConnectionData.add(new AddConnectionData(context, info));
1:a414c20:     }
1:a414c20: 
1:1a88ac6:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:1a88ac6:         removeConnectionData.add(new RemoveConnectionData(context, info, error));
1:a414c20:     }
1:a414c20: 
2:25a252f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a156261
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidClientIDException;
/////////////////////////////////////////////////////////////////////////
1:         for (AddConnectionData data : addConnectionData) {
1:             if (data.connectionInfo.getClientId() != null && data.connectionInfo.getClientId().equals(info.getClientId())) {
1:                 throw new InvalidClientIDException("ClientID already exists");
1:             }
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: public class StubBroker extends EmptyBroker {
/////////////////////////////////////////////////////////////////////////
commit:dfcf776
/////////////////////////////////////////////////////////////////////////
1:     
0:     public long getBrokerSequenceId() {
0:         return -1l;
1:     }
commit:c07b233
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:     }
0:     public void postProcessDispatch(MessageDispatch messageDispatch) {
/////////////////////////////////////////////////////////////////////////
1:     
0:     public boolean isExpired(MessageReference messageReference) {
0:         return false;
1:     }
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void messageExpired(ConnectionContext context,MessageReference messageReference){
1:     }
1: 
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference) {
1:     }
1: 
0:     public Broker getRoot(){
0:         return this;
1:     }
commit:25a252f
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void brokerServiceStarted(){        
1:     }
1: 
1:     
0:     public BrokerService getBrokerService(){
0:         return null;
1:     }
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:     public static class RemoveConnectionData {
commit:4741136
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public URI getVmConnectorURI(){
0:         return null;
0:     }
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy() {
0:         return null;
0:     }
0:   
0:     public void setPendingDurableSubscriberPolicy(PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy) {
0:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public LinkedList<AddConnectionData> addConnectionData = new LinkedList<AddConnectionData>();
1:     public LinkedList<RemoveConnectionData> removeConnectionData = new LinkedList<RemoveConnectionData>();
/////////////////////////////////////////////////////////////////////////
0:     public Set<ActiveMQDestination> getDurableDestinations() {
/////////////////////////////////////////////////////////////////////////
0:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
1: import java.util.LinkedList;
0: import java.util.Map;
0: import java.util.Set;
0: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     public Store getTempDataStore() {
0:     public URI getVmConnectorURI() {
0: 
0:     public void brokerServiceStarted() {
0:     }
0: 
0:     public BrokerService getBrokerService() {
0:         return null;
0:     }
0: 
0:     public void messageExpired(ConnectionContext context, MessageReference messageReference) {
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference) {
0:     public Broker getRoot() {
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.broker;
0: 
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.BrokerId;
0: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.MessageDispatchNotification;
0: import org.apache.activemq.command.MessagePull;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
0: import org.apache.activemq.command.Response;
0: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.command.TransactionId;
0: import org.apache.activemq.kaha.Store;
0: 
0: import java.util.LinkedList;
0: import java.util.Map;
0: import java.util.Set;
0: 
0: public class StubBroker implements Broker {
0:     public LinkedList addConnectionData = new LinkedList();
0:     public LinkedList removeConnectionData = new LinkedList();
0: 
1:     public class AddConnectionData {
1:         public final ConnectionContext connectionContext;
1:         public final ConnectionInfo connectionInfo;
0:         
1:         public AddConnectionData(ConnectionContext context, ConnectionInfo info) {
1:             connectionContext = context;
1:             connectionInfo = info;
0:         }
0:     }
0:     
0:     public class RemoveConnectionData {
1:         public final ConnectionContext connectionContext;
1:         public final ConnectionInfo connectionInfo;
1:         public final Throwable error;
0:         
1:         public RemoveConnectionData(ConnectionContext context, ConnectionInfo info, Throwable error) {
1:             connectionContext = context;
1:             connectionInfo = info;
1:             this.error = error;
0:         }
0:     }
0:     
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         addConnectionData.add(new AddConnectionData(context, info));
0:     }
0:     
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         removeConnectionData.add(new RemoveConnectionData(context, info, error));
0:     }
0: 
0:     
0:     // --- Blank Methods, fill in as needed ---
0:     public void addBroker(Connection connection, BrokerInfo info) {
0:     }
0: 
0:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:     }
0: 
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     }
0: 
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     }
0: 
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     }
0: 
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
0:     }
0: 
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:     }
0: 
0:     public Broker getAdaptor(Class type) {
0:         return null;
0:     }
0: 
0:     public ConnectionContext getAdminConnectionContext() {
0:         return null;
0:     }
0: 
0:     public BrokerId getBrokerId() {
0:         return null;
0:     }
0: 
0:     public String getBrokerName() {
0:         return null;
0:     }
0: 
0:     public Connection[] getClients() throws Exception {
0:         return null;
0:     }
0: 
0:     public ActiveMQDestination[] getDestinations() throws Exception {
0:         return null;
0:     }
0: 
0:     public Set getDurableDestinations() {
0:         return null;
0:     }
0: 
0:     public BrokerInfo[] getPeerBrokerInfos() {
0:         return null;
0:     }
0: 
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
0:         return null;
0:     }
0: 
0:     public boolean isFaultTolerantConfiguration() {
0:         return false;
0:     }
0: 
0:     public boolean isSlaveBroker() {
0:         return false;
0:     }
0: 
0:     public boolean isStopped() {
0:         return false;
0:     }
0: 
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:         return 0;
0:     }
0: 
0:     public void processDispatch(MessageDispatch messageDispatch) {
0:     }
0: 
0:     public void removeBroker(Connection connection, BrokerInfo info) {
0:     }
0: 
0:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:     }
0: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     }
0: 
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     }
0: 
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     }
0: 
0:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
0:     }
0: 
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
0:     }
0: 
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         return null;
0:     }
0: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         return null;
0:     }
0: 
0:     public void gc() {
0:     }
0: 
0:     public Map getDestinationMap() {
0:         return null;
0:     }
0: 
0:     public Set getDestinations(ActiveMQDestination destination) {
0:         return null;
0:     }
0: 
0:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:         return null;
0:     }
0: 
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0:     }
0: 
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     }
0: 
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
0:         throws Exception {
0:     }
0: 
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:     }
0: 
0:     public void send(ConnectionContext context, Message message) throws Exception {
0:     }
0: 
0:     public void start() throws Exception {
0:     }
0: 
0:     public void stop() throws Exception {
0:     }
0: 
0: 	public Store getTempDataStore() {
0: 		return null;
0: 	}
0: }
============================================================================