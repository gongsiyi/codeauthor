1:f05ff94: /**
1:f05ff94:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f05ff94:  * contributor license agreements.  See the NOTICE file distributed with
1:f05ff94:  * this work for additional information regarding copyright ownership.
1:f05ff94:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f05ff94:  * (the "License"); you may not use this file except in compliance with
1:f05ff94:  * the License.  You may obtain a copy of the License at
1:f05ff94:  *
1:f05ff94:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f05ff94:  *
1:f05ff94:  * Unless required by applicable law or agreed to in writing, software
1:f05ff94:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f05ff94:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f05ff94:  * See the License for the specific language governing permissions and
1:f05ff94:  * limitations under the License.
1:f05ff94:  */
1:f05ff94: package org.apache.activemq.transport.amqp.interop;
1:f05ff94: 
1:f05ff94: import static org.junit.Assert.assertEquals;
1:f05ff94: import static org.junit.Assert.assertNotNull;
1:f05ff94: import static org.junit.Assert.assertNull;
1:f05ff94: 
1:f05ff94: import java.util.Arrays;
1:f05ff94: import java.util.Collection;
1:f05ff94: 
1:f05ff94: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:f05ff94: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:f05ff94: import org.junit.Test;
1:f05ff94: import org.junit.runner.RunWith;
1:f05ff94: import org.junit.runners.Parameterized;
1:f05ff94: import org.junit.runners.Parameterized.Parameters;
1:f05ff94: 
1:f05ff94: /**
1:f05ff94:  * Test around the handling of Deliver Annotations in messages sent and received.
1:f05ff94:  */
1:f05ff94: @RunWith(Parameterized.class)
1:f05ff94: public class AmqpDeliveryAnnotationsTest extends AmqpClientTestSupport {
1:f05ff94: 
1:f05ff94:     private final String DELIVERY_ANNOTATION_NAME = "TEST-DELIVERY-ANNOTATION";
1:f05ff94: 
1:f05ff94:     private final String transformer;
1:f05ff94: 
1:f05ff94:     @Parameters(name="{0}")
1:f05ff94:     public static Collection<Object[]> data() {
1:f05ff94:         return Arrays.asList(new Object[][] {
1:f05ff94:             {"jms"},
1:f05ff94:             // {"native"},
1:f05ff94:             // {"raw"}  We cannot fix these now because proton has no way to selectively
1:f05ff94:             //          prune the incoming message bytes from delivery annotations section
1:f05ff94:             //          can be stripped from the message.
1:f05ff94:         });
1:f05ff94:     }
1:f05ff94: 
1:f05ff94:     public AmqpDeliveryAnnotationsTest(String transformer) {
1:f05ff94:         this.transformer = transformer;
1:f05ff94:     }
1:f05ff94: 
1:f05ff94:     @Override
1:f05ff94:     protected String getAmqpTransformer() {
1:f05ff94:         return transformer;
1:f05ff94:     }
1:f05ff94: 
1:f05ff94:     @Test(timeout = 60000)
1:f05ff94:     public void testDeliveryAnnotationsStrippedFromIncoming() throws Exception {
1:f05ff94:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:f05ff94:         AmqpSession session = connection.createSession();
1:f05ff94: 
1:f05ff94:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:f05ff94:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:f05ff94: 
1:f05ff94:         AmqpMessage message = new AmqpMessage();
1:f05ff94: 
1:f05ff94:         message.setText("Test-Message");
1:f05ff94:         message.setDeliveryAnnotation(DELIVERY_ANNOTATION_NAME, getTestName());
1:f05ff94: 
1:f05ff94:         sender.send(message);
1:f05ff94:         receiver.flow(1);
1:f05ff94: 
1:f05ff94:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:f05ff94:         assertEquals(1, queue.getQueueSize());
1:f05ff94: 
1:f05ff94:         AmqpMessage received = receiver.receive(); //5, TimeUnit.SECONDS);
1:f05ff94:         assertNotNull(received);
1:f05ff94:         assertNull(received.getDeliveryAnnotation(DELIVERY_ANNOTATION_NAME));
1:f05ff94: 
1:f05ff94:         sender.close();
1:f05ff94:         connection.close();
1:f05ff94:     }
1:f05ff94: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:f05ff94
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test around the handling of Deliver Annotations in messages sent and received.
1:  */
1: @RunWith(Parameterized.class)
1: public class AmqpDeliveryAnnotationsTest extends AmqpClientTestSupport {
1: 
1:     private final String DELIVERY_ANNOTATION_NAME = "TEST-DELIVERY-ANNOTATION";
1: 
1:     private final String transformer;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"jms"},
1:             // {"native"},
1:             // {"raw"}  We cannot fix these now because proton has no way to selectively
1:             //          prune the incoming message bytes from delivery annotations section
1:             //          can be stripped from the message.
1:         });
1:     }
1: 
1:     public AmqpDeliveryAnnotationsTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return transformer;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDeliveryAnnotationsStrippedFromIncoming() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setText("Test-Message");
1:         message.setDeliveryAnnotation(DELIVERY_ANNOTATION_NAME, getTestName());
1: 
1:         sender.send(message);
1:         receiver.flow(1);
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpMessage received = receiver.receive(); //5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         assertNull(received.getDeliveryAnnotation(DELIVERY_ANNOTATION_NAME));
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: }
============================================================================