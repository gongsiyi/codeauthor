1:c50b8e4: /**
1:c50b8e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c50b8e4:  * contributor license agreements.  See the NOTICE file distributed with
1:c50b8e4:  * this work for additional information regarding copyright ownership.
1:c50b8e4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c50b8e4:  * (the "License"); you may not use this file except in compliance with
1:c50b8e4:  * the License.  You may obtain a copy of the License at
1:c50b8e4:  *
1:c50b8e4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c50b8e4:  *
1:c50b8e4:  * Unless required by applicable law or agreed to in writing, software
1:c50b8e4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c50b8e4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c50b8e4:  * See the License for the specific language governing permissions and
1:c50b8e4:  * limitations under the License.
1:c50b8e4:  */
1:c50b8e4: package org.apache.activemq.bugs;
4:c50b8e4: 
1:c50b8e4: import java.net.URI;
1:c50b8e4: import java.util.Date;
1:c50b8e4: import java.util.Enumeration;
1:c50b8e4: import javax.jms.Connection;
1:c50b8e4: import javax.jms.DeliveryMode;
1:c50b8e4: import javax.jms.JMSException;
1:c50b8e4: import javax.jms.MessageProducer;
1:c50b8e4: import javax.jms.QueueBrowser;
1:c50b8e4: import javax.jms.Session;
1:c50b8e4: import javax.jms.TextMessage;
1:c50b8e4: import org.apache.activemq.ActiveMQConnection;
1:c50b8e4: import org.apache.activemq.ActiveMQConnectionFactory;
1:c50b8e4: import org.apache.activemq.broker.BrokerService;
1:c50b8e4: import org.apache.activemq.broker.TransportConnector;
1:c50b8e4: import org.apache.activemq.command.ActiveMQQueue;
1:c50b8e4: import org.junit.After;
1:c50b8e4: import org.junit.Before;
1:c50b8e4: import org.junit.Test;
1:c50b8e4: import org.slf4j.Logger;
1:c50b8e4: import org.slf4j.LoggerFactory;
1:97c127d: 
1:c50b8e4: 
1:97c127d: import static org.junit.Assert.assertEquals;
1:97c127d: 
1:c50b8e4: public class AMQ4595Test {
1:c50b8e4: 
1:c50b8e4:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4595Test.class);
1:c50b8e4: 
1:c50b8e4:     private BrokerService broker;
1:c50b8e4:     private URI connectUri;
1:c50b8e4:     private ActiveMQConnectionFactory factory;
1:c50b8e4: 
1:c50b8e4:     @Before
1:c50b8e4:     public void startBroker() throws Exception {
1:c50b8e4:         broker = new BrokerService();
1:c50b8e4:         TransportConnector connector = broker.addConnector("vm://localhost");
1:c50b8e4:         broker.deleteAllMessages();
1:c50b8e4: 
1:85bc9ce:         //PolicyMap pMap = new PolicyMap();
1:85bc9ce:         //PolicyEntry policyEntry = new PolicyEntry();
1:85bc9ce:         //policyEntry.setMaxBrowsePageSize(10000);
1:85bc9ce:         //pMap.put(new ActiveMQQueue(">"), policyEntry);
1:85bc9ce:         // when no policy match, browserSub has maxMessages==0
1:85bc9ce:         //broker.setDestinationPolicy(pMap);
1:c50b8e4: 
1:c50b8e4:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:c50b8e4:         broker.start();
1:c50b8e4:         broker.waitUntilStarted();
1:c50b8e4:         connectUri = connector.getConnectUri();
1:c50b8e4:         factory = new ActiveMQConnectionFactory(connectUri);
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     @After
1:c50b8e4:     public void stopBroker() throws Exception {
1:c50b8e4:         broker.stop();
1:c50b8e4:         broker.waitUntilStopped();
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     @Test(timeout=120000)
1:c50b8e4:     public void testBrowsingSmallBatch() throws JMSException {
1:c50b8e4:         doTestBrowsing(100);
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     @Test(timeout=160000)
1:c50b8e4:     public void testBrowsingMediumBatch() throws JMSException {
1:c50b8e4:         doTestBrowsing(1000);
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     @Test(timeout=300000)
1:c50b8e4:     public void testBrowsingLargeBatch() throws JMSException {
1:c50b8e4:         doTestBrowsing(10000);
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     private void doTestBrowsing(int messageToSend) throws JMSException {
1:c50b8e4:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:c50b8e4: 
1:c50b8e4:         // Send the messages to the Queue.
1:c50b8e4:         ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:c50b8e4:         producerConnection.setUseAsyncSend(true);
1:c50b8e4:         producerConnection.start();
1:c50b8e4:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c50b8e4:         MessageProducer producer = producerSession.createProducer(queue);
1:c50b8e4:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:c50b8e4: 
1:c50b8e4:         for (int i = 1; i <= messageToSend; i++) {
1:c50b8e4:             String msgStr = provideMessageText(i, 8192);
1:c50b8e4:             producer.send(producerSession.createTextMessage(msgStr));
1:c50b8e4:             if ((i % 1000) == 0) {
1:c50b8e4:                 LOG.info("P&C: {}", msgStr.substring(0, 100));
1:c50b8e4:             }
1:c50b8e4:         }
1:c50b8e4:         producerConnection.close();
1:c50b8e4: 
1:97c127d:         LOG.info("Mem usage after producer done: " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + "%");
1:97c127d: 
1:c50b8e4:         // Browse the queue.
1:c50b8e4:         Connection connection = factory.createConnection();
1:c50b8e4:         connection.start();
1:c50b8e4:         Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:c50b8e4: 
1:c50b8e4:         QueueBrowser browser = session.createBrowser(queue);
1:c50b8e4:         Enumeration<?> enumeration = browser.getEnumeration();
1:c50b8e4:         int browsed = 0;
1:c50b8e4:         while (enumeration.hasMoreElements()) {
1:c50b8e4:             TextMessage m = (TextMessage) enumeration.nextElement();
1:c50b8e4:             browsed++;
1:c50b8e4:             if ((browsed % 1000) == 0) {
1:c50b8e4:                 LOG.info("B[{}]: {}", browsed, m.getText().substring(0, 100));
1:c50b8e4:             }
1:c50b8e4:         }
1:c50b8e4:         browser.close();
1:c50b8e4:         session.close();
1:c50b8e4:         connection.close();
1:c50b8e4: 
1:97c127d:         LOG.info("Mem usage after browser closed: " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + "%");
1:97c127d: 
1:c50b8e4:         // The number of messages browsed should be equal to the number of messages sent.
1:c50b8e4:         assertEquals(messageToSend, browsed);
1:c50b8e4: 
1:c50b8e4:         browser.close();
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     public String provideMessageText(int messageNumber, int messageSize) {
1:c50b8e4:         StringBuilder buf = new StringBuilder();
1:c50b8e4:         buf.append("Message: ");
1:c50b8e4:         if (messageNumber > 0) {
1:c50b8e4:             buf.append(messageNumber);
1:c50b8e4:         }
1:c50b8e4:         buf.append(" sent at: ").append(new Date());
1:c50b8e4: 
1:c50b8e4:         if (buf.length() > messageSize) {
1:c50b8e4:             return buf.substring(0, messageSize);
1:c50b8e4:         }
1:c50b8e4:         for (int i = buf.length(); i < messageSize; i++) {
1:c50b8e4:             buf.append(' ');
1:c50b8e4:         }
1:c50b8e4:         return buf.toString();
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:97c127d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Mem usage after producer done: " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + "%");
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Mem usage after browser closed: " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + "%");
1: 
commit:85bc9ce
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         //PolicyMap pMap = new PolicyMap();
1:         //PolicyEntry policyEntry = new PolicyEntry();
1:         //policyEntry.setMaxBrowsePageSize(10000);
1:         //pMap.put(new ActiveMQQueue(">"), policyEntry);
1:         // when no policy match, browserSub has maxMessages==0
1:         //broker.setDestinationPolicy(pMap);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c50b8e4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: import java.util.Date;
1: import java.util.Enumeration;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4595Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4595Test.class);
1: 
1:     private BrokerService broker;
1:     private URI connectUri;
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector("vm://localhost");
1:         broker.deleteAllMessages();
1: 
0: //        PolicyEntry policy = new PolicyEntry();
0: //        policy.setQueue(">");
0: //        policy.setMaxAuditDepth(16384);
0: //        policy.setCursorMemoryHighWaterMark(95);  // More breathing room.
0: //        PolicyMap pMap = new PolicyMap();
0: //        pMap.setDefaultEntry(policy);
0: //        broker.setDestinationPolicy(pMap);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         connectUri = connector.getConnectUri();
1:         factory = new ActiveMQConnectionFactory(connectUri);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout=120000)
1:     public void testBrowsingSmallBatch() throws JMSException {
1:         doTestBrowsing(100);
1:     }
1: 
1:     @Test(timeout=160000)
1:     public void testBrowsingMediumBatch() throws JMSException {
1:         doTestBrowsing(1000);
1:     }
1: 
1:     @Test(timeout=300000)
1:     public void testBrowsingLargeBatch() throws JMSException {
1:         doTestBrowsing(10000);
1:     }
1: 
1:     private void doTestBrowsing(int messageToSend) throws JMSException {
1:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1: 
1:         // Send the messages to the Queue.
1:         ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:         producerConnection.setUseAsyncSend(true);
1:         producerConnection.start();
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         for (int i = 1; i <= messageToSend; i++) {
1:             String msgStr = provideMessageText(i, 8192);
1:             producer.send(producerSession.createTextMessage(msgStr));
1:             if ((i % 1000) == 0) {
1:                 LOG.info("P&C: {}", msgStr.substring(0, 100));
1:             }
1:         }
1:         producerConnection.close();
1: 
1:         // Browse the queue.
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int browsed = 0;
1:         while (enumeration.hasMoreElements()) {
1:             TextMessage m = (TextMessage) enumeration.nextElement();
1:             browsed++;
1:             if ((browsed % 1000) == 0) {
1:                 LOG.info("B[{}]: {}", browsed, m.getText().substring(0, 100));
1:             }
1:         }
1:         browser.close();
1:         session.close();
1:         connection.close();
1: 
1:         // The number of messages browsed should be equal to the number of messages sent.
1:         assertEquals(messageToSend, browsed);
1: 
1:         browser.close();
1:     }
1: 
1:     public String provideMessageText(int messageNumber, int messageSize) {
1:         StringBuilder buf = new StringBuilder();
1:         buf.append("Message: ");
1:         if (messageNumber > 0) {
1:             buf.append(messageNumber);
1:         }
1:         buf.append(" sent at: ").append(new Date());
1: 
1:         if (buf.length() > messageSize) {
1:             return buf.substring(0, messageSize);
1:         }
1:         for (int i = buf.length(); i < messageSize; i++) {
1:             buf.append(' ');
1:         }
1:         return buf.toString();
1:     }
1: 
1: }
============================================================================