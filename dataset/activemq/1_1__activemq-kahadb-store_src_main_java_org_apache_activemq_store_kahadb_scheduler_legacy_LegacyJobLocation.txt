1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.store.kahadb.scheduler.legacy;
1:74846bb: 
1:74846bb: import java.io.DataInput;
1:74846bb: import java.io.DataOutput;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.ArrayList;
1:74846bb: import java.util.Date;
1:74846bb: import java.util.List;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.disk.journal.Location;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1:74846bb: 
1:74846bb: final class LegacyJobLocation {
1:74846bb: 
1:74846bb:     private String jobId;
1:74846bb:     private int repeat;
1:74846bb:     private long startTime;
1:74846bb:     private long delay;
1:74846bb:     private long nextTime;
1:74846bb:     private long period;
1:74846bb:     private String cronEntry;
1:74846bb:     private final Location location;
1:74846bb: 
1:74846bb:     public LegacyJobLocation(Location location) {
1:74846bb:         this.location = location;
1:74846bb:     }
1:74846bb: 
1:74846bb:     public LegacyJobLocation() {
1:74846bb:         this(new Location());
1:74846bb:     }
1:74846bb: 
1:74846bb:     public void readExternal(DataInput in) throws IOException {
1:74846bb:         this.jobId = in.readUTF();
1:74846bb:         this.repeat = in.readInt();
1:74846bb:         this.startTime = in.readLong();
1:74846bb:         this.delay = in.readLong();
1:74846bb:         this.nextTime = in.readLong();
1:74846bb:         this.period = in.readLong();
1:74846bb:         this.cronEntry = in.readUTF();
1:74846bb:         this.location.readExternal(in);
1:74846bb:     }
1:74846bb: 
1:74846bb:     public void writeExternal(DataOutput out) throws IOException {
1:74846bb:         out.writeUTF(this.jobId);
1:74846bb:         out.writeInt(this.repeat);
1:74846bb:         out.writeLong(this.startTime);
1:74846bb:         out.writeLong(this.delay);
1:74846bb:         out.writeLong(this.nextTime);
1:74846bb:         out.writeLong(this.period);
1:74846bb:         if (this.cronEntry == null) {
1:74846bb:             this.cronEntry = "";
1:74846bb:         }
1:74846bb:         out.writeUTF(this.cronEntry);
1:74846bb:         this.location.writeExternal(out);
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the jobId
1:74846bb:      */
1:74846bb:     public String getJobId() {
1:74846bb:         return this.jobId;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param jobId
1:74846bb:      *            the jobId to set
1:74846bb:      */
1:74846bb:     public void setJobId(String jobId) {
1:74846bb:         this.jobId = jobId;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the repeat
1:74846bb:      */
1:74846bb:     public int getRepeat() {
1:74846bb:         return this.repeat;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param repeat
1:74846bb:      *            the repeat to set
1:74846bb:      */
1:74846bb:     public void setRepeat(int repeat) {
1:74846bb:         this.repeat = repeat;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the start
1:74846bb:      */
1:74846bb:     public long getStartTime() {
1:74846bb:         return this.startTime;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param start
1:74846bb:      *            the start to set
1:74846bb:      */
1:74846bb:     public void setStartTime(long start) {
1:74846bb:         this.startTime = start;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the nextTime
1:74846bb:      */
1:74846bb:     public synchronized long getNextTime() {
1:74846bb:         return this.nextTime;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param nextTime
1:74846bb:      *            the nextTime to set
1:74846bb:      */
1:74846bb:     public synchronized void setNextTime(long nextTime) {
1:74846bb:         this.nextTime = nextTime;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the period
1:74846bb:      */
1:74846bb:     public long getPeriod() {
1:74846bb:         return this.period;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param period
1:74846bb:      *            the period to set
1:74846bb:      */
1:74846bb:     public void setPeriod(long period) {
1:74846bb:         this.period = period;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the cronEntry
1:74846bb:      */
1:74846bb:     public synchronized String getCronEntry() {
1:74846bb:         return this.cronEntry;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param cronEntry
1:74846bb:      *            the cronEntry to set
1:74846bb:      */
1:74846bb:     public synchronized void setCronEntry(String cronEntry) {
1:74846bb:         this.cronEntry = cronEntry;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return if this JobLocation represents a cron entry.
1:74846bb:      */
1:74846bb:     public boolean isCron() {
1:74846bb:         return getCronEntry() != null && getCronEntry().length() > 0;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the delay
1:74846bb:      */
1:74846bb:     public long getDelay() {
1:74846bb:         return this.delay;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @param delay
1:74846bb:      *            the delay to set
1:74846bb:      */
1:74846bb:     public void setDelay(long delay) {
1:74846bb:         this.delay = delay;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the location
1:74846bb:      */
1:74846bb:     public Location getLocation() {
1:74846bb:         return this.location;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public String toString() {
1:74846bb:         return "Job [id=" + jobId + ", startTime=" + new Date(startTime) +
1:74846bb:                ", delay=" + delay + ", period=" + period +
1:74846bb:                ", repeat=" + repeat + ", nextTime=" + new Date(nextTime) + "]";
1:74846bb:     }
1:74846bb: 
1:74846bb:     static class JobLocationMarshaller extends VariableMarshaller<List<LegacyJobLocation>> {
1:74846bb:         static final JobLocationMarshaller INSTANCE = new JobLocationMarshaller();
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public List<LegacyJobLocation> readPayload(DataInput dataIn) throws IOException {
1:74846bb:             List<LegacyJobLocation> result = new ArrayList<LegacyJobLocation>();
1:74846bb:             int size = dataIn.readInt();
1:74846bb:             for (int i = 0; i < size; i++) {
1:74846bb:                 LegacyJobLocation jobLocation = new LegacyJobLocation();
1:74846bb:                 jobLocation.readExternal(dataIn);
1:74846bb:                 result.add(jobLocation);
1:74846bb:             }
1:74846bb:             return result;
1:74846bb:         }
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public void writePayload(List<LegacyJobLocation> value, DataOutput dataOut) throws IOException {
1:74846bb:             dataOut.writeInt(value.size());
1:74846bb:             for (LegacyJobLocation jobLocation : value) {
1:74846bb:                 jobLocation.writeExternal(dataOut);
1:74846bb:             }
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public int hashCode() {
1:74846bb:         final int prime = 31;
1:74846bb:         int result = 1;
1:74846bb:         result = prime * result + ((cronEntry == null) ? 0 : cronEntry.hashCode());
1:74846bb:         result = prime * result + (int) (delay ^ (delay >>> 32));
1:74846bb:         result = prime * result + ((jobId == null) ? 0 : jobId.hashCode());
1:74846bb:         result = prime * result + ((location == null) ? 0 : location.hashCode());
1:74846bb:         result = prime * result + (int) (nextTime ^ (nextTime >>> 32));
1:74846bb:         result = prime * result + (int) (period ^ (period >>> 32));
1:74846bb:         result = prime * result + repeat;
1:74846bb:         result = prime * result + (int) (startTime ^ (startTime >>> 32));
1:74846bb:         return result;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public boolean equals(Object obj) {
1:74846bb:         if (this == obj) {
1:74846bb:             return true;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (obj == null) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (getClass() != obj.getClass()) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         LegacyJobLocation other = (LegacyJobLocation) obj;
1:74846bb: 
1:74846bb:         if (cronEntry == null) {
1:74846bb:             if (other.cronEntry != null) {
1:74846bb:                 return false;
1:74846bb:             }
1:74846bb:         } else if (!cronEntry.equals(other.cronEntry)) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (delay != other.delay) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (jobId == null) {
1:74846bb:             if (other.jobId != null)
1:74846bb:                 return false;
1:74846bb:         } else if (!jobId.equals(other.jobId)) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (location == null) {
1:74846bb:             if (other.location != null) {
1:74846bb:                 return false;
1:74846bb:             }
1:74846bb:         } else if (!location.equals(other.location)) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (nextTime != other.nextTime) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb:         if (period != other.period) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb:         if (repeat != other.repeat) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb:         if (startTime != other.startTime) {
1:74846bb:             return false;
1:74846bb:         }
1:74846bb: 
1:74846bb:         return true;
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.scheduler.legacy;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Date;
1: import java.util.List;
1: 
1: import org.apache.activemq.store.kahadb.disk.journal.Location;
1: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1: 
1: final class LegacyJobLocation {
1: 
1:     private String jobId;
1:     private int repeat;
1:     private long startTime;
1:     private long delay;
1:     private long nextTime;
1:     private long period;
1:     private String cronEntry;
1:     private final Location location;
1: 
1:     public LegacyJobLocation(Location location) {
1:         this.location = location;
1:     }
1: 
1:     public LegacyJobLocation() {
1:         this(new Location());
1:     }
1: 
1:     public void readExternal(DataInput in) throws IOException {
1:         this.jobId = in.readUTF();
1:         this.repeat = in.readInt();
1:         this.startTime = in.readLong();
1:         this.delay = in.readLong();
1:         this.nextTime = in.readLong();
1:         this.period = in.readLong();
1:         this.cronEntry = in.readUTF();
1:         this.location.readExternal(in);
1:     }
1: 
1:     public void writeExternal(DataOutput out) throws IOException {
1:         out.writeUTF(this.jobId);
1:         out.writeInt(this.repeat);
1:         out.writeLong(this.startTime);
1:         out.writeLong(this.delay);
1:         out.writeLong(this.nextTime);
1:         out.writeLong(this.period);
1:         if (this.cronEntry == null) {
1:             this.cronEntry = "";
1:         }
1:         out.writeUTF(this.cronEntry);
1:         this.location.writeExternal(out);
1:     }
1: 
1:     /**
1:      * @return the jobId
1:      */
1:     public String getJobId() {
1:         return this.jobId;
1:     }
1: 
1:     /**
1:      * @param jobId
1:      *            the jobId to set
1:      */
1:     public void setJobId(String jobId) {
1:         this.jobId = jobId;
1:     }
1: 
1:     /**
1:      * @return the repeat
1:      */
1:     public int getRepeat() {
1:         return this.repeat;
1:     }
1: 
1:     /**
1:      * @param repeat
1:      *            the repeat to set
1:      */
1:     public void setRepeat(int repeat) {
1:         this.repeat = repeat;
1:     }
1: 
1:     /**
1:      * @return the start
1:      */
1:     public long getStartTime() {
1:         return this.startTime;
1:     }
1: 
1:     /**
1:      * @param start
1:      *            the start to set
1:      */
1:     public void setStartTime(long start) {
1:         this.startTime = start;
1:     }
1: 
1:     /**
1:      * @return the nextTime
1:      */
1:     public synchronized long getNextTime() {
1:         return this.nextTime;
1:     }
1: 
1:     /**
1:      * @param nextTime
1:      *            the nextTime to set
1:      */
1:     public synchronized void setNextTime(long nextTime) {
1:         this.nextTime = nextTime;
1:     }
1: 
1:     /**
1:      * @return the period
1:      */
1:     public long getPeriod() {
1:         return this.period;
1:     }
1: 
1:     /**
1:      * @param period
1:      *            the period to set
1:      */
1:     public void setPeriod(long period) {
1:         this.period = period;
1:     }
1: 
1:     /**
1:      * @return the cronEntry
1:      */
1:     public synchronized String getCronEntry() {
1:         return this.cronEntry;
1:     }
1: 
1:     /**
1:      * @param cronEntry
1:      *            the cronEntry to set
1:      */
1:     public synchronized void setCronEntry(String cronEntry) {
1:         this.cronEntry = cronEntry;
1:     }
1: 
1:     /**
1:      * @return if this JobLocation represents a cron entry.
1:      */
1:     public boolean isCron() {
1:         return getCronEntry() != null && getCronEntry().length() > 0;
1:     }
1: 
1:     /**
1:      * @return the delay
1:      */
1:     public long getDelay() {
1:         return this.delay;
1:     }
1: 
1:     /**
1:      * @param delay
1:      *            the delay to set
1:      */
1:     public void setDelay(long delay) {
1:         this.delay = delay;
1:     }
1: 
1:     /**
1:      * @return the location
1:      */
1:     public Location getLocation() {
1:         return this.location;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "Job [id=" + jobId + ", startTime=" + new Date(startTime) +
1:                ", delay=" + delay + ", period=" + period +
1:                ", repeat=" + repeat + ", nextTime=" + new Date(nextTime) + "]";
1:     }
1: 
1:     static class JobLocationMarshaller extends VariableMarshaller<List<LegacyJobLocation>> {
1:         static final JobLocationMarshaller INSTANCE = new JobLocationMarshaller();
1: 
1:         @Override
1:         public List<LegacyJobLocation> readPayload(DataInput dataIn) throws IOException {
1:             List<LegacyJobLocation> result = new ArrayList<LegacyJobLocation>();
1:             int size = dataIn.readInt();
1:             for (int i = 0; i < size; i++) {
1:                 LegacyJobLocation jobLocation = new LegacyJobLocation();
1:                 jobLocation.readExternal(dataIn);
1:                 result.add(jobLocation);
1:             }
1:             return result;
1:         }
1: 
1:         @Override
1:         public void writePayload(List<LegacyJobLocation> value, DataOutput dataOut) throws IOException {
1:             dataOut.writeInt(value.size());
1:             for (LegacyJobLocation jobLocation : value) {
1:                 jobLocation.writeExternal(dataOut);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + ((cronEntry == null) ? 0 : cronEntry.hashCode());
1:         result = prime * result + (int) (delay ^ (delay >>> 32));
1:         result = prime * result + ((jobId == null) ? 0 : jobId.hashCode());
1:         result = prime * result + ((location == null) ? 0 : location.hashCode());
1:         result = prime * result + (int) (nextTime ^ (nextTime >>> 32));
1:         result = prime * result + (int) (period ^ (period >>> 32));
1:         result = prime * result + repeat;
1:         result = prime * result + (int) (startTime ^ (startTime >>> 32));
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj) {
1:             return true;
1:         }
1: 
1:         if (obj == null) {
1:             return false;
1:         }
1: 
1:         if (getClass() != obj.getClass()) {
1:             return false;
1:         }
1: 
1:         LegacyJobLocation other = (LegacyJobLocation) obj;
1: 
1:         if (cronEntry == null) {
1:             if (other.cronEntry != null) {
1:                 return false;
1:             }
1:         } else if (!cronEntry.equals(other.cronEntry)) {
1:             return false;
1:         }
1: 
1:         if (delay != other.delay) {
1:             return false;
1:         }
1: 
1:         if (jobId == null) {
1:             if (other.jobId != null)
1:                 return false;
1:         } else if (!jobId.equals(other.jobId)) {
1:             return false;
1:         }
1: 
1:         if (location == null) {
1:             if (other.location != null) {
1:                 return false;
1:             }
1:         } else if (!location.equals(other.location)) {
1:             return false;
1:         }
1: 
1:         if (nextTime != other.nextTime) {
1:             return false;
1:         }
1:         if (period != other.period) {
1:             return false;
1:         }
1:         if (repeat != other.repeat) {
1:             return false;
1:         }
1:         if (startTime != other.startTime) {
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: }
============================================================================