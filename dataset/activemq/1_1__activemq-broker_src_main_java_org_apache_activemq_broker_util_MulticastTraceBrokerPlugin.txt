1:4b6b61b: /**
1:4b6b61b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b6b61b:  * contributor license agreements.  See the NOTICE file distributed with
1:4b6b61b:  * this work for additional information regarding copyright ownership.
1:4b6b61b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b6b61b:  * (the "License"); you may not use this file except in compliance with
1:4b6b61b:  * the License.  You may obtain a copy of the License at
2:4b6b61b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b6b61b:  *
1:4b6b61b:  * Unless required by applicable law or agreed to in writing, software
1:4b6b61b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b6b61b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b6b61b:  * See the License for the specific language governing permissions and
1:4b6b61b:  * limitations under the License.
1:4b6b61b:  */
1:4b6b61b: package org.apache.activemq.broker.util;
3:4b6b61b: 
1:4b6b61b: import java.io.IOException;
1:4b6b61b: import java.net.DatagramSocket;
1:4b6b61b: import java.net.MulticastSocket;
1:4b6b61b: import java.net.URI;
1:4b6b61b: import java.net.URISyntaxException;
1:4b6b61b: 
1:4b6b61b: /**
1:f812e34:  * A Broker interceptor which allows you to trace all operations to a Multicast
1:f812e34:  * socket.
1:4b6b61b:  * 
1:4b6b61b:  * @org.apache.xbean.XBean
1:0bbc0ac:  * 
1:4b6b61b:  * 
1:4b6b61b:  */
1:4b6b61b: public class MulticastTraceBrokerPlugin extends UDPTraceBrokerPlugin {
1:4b6b61b: 
1:f812e34:     private int timeToLive = 1;
1:f812e34: 
1:f812e34:     public MulticastTraceBrokerPlugin() {
1:f812e34:         try {
1:f812e34:             destination = new URI("multicast://224.1.2.3:61616");
1:f812e34:         } catch (URISyntaxException wontHappen) {
1:f812e34:         }
1:f812e34:     }
1:f812e34: 
1:f812e34:     protected DatagramSocket createSocket() throws IOException {
1:4b6b61b:         MulticastSocket s = new MulticastSocket();
1:f812e34:         s.setSendBufferSize(maxTraceDatagramSize);
1:f812e34:         s.setBroadcast(broadcast);
1:4b6b61b:         s.setLoopbackMode(true);
1:4b6b61b:         s.setTimeToLive(timeToLive);
1:4b6b61b:         return s;
1:f812e34:     }
1:4b6b61b: 
1:f812e34:     public int getTimeToLive() {
1:f812e34:         return timeToLive;
1:f812e34:     }
1:4b6b61b: 
1:f812e34:     public void setTimeToLive(int timeToLive) {
1:f812e34:         this.timeToLive = timeToLive;
1:f812e34:     }
1:4b6b61b: 
6:4b6b61b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A Broker interceptor which allows you to trace all operations to a Multicast
1:  * socket.
/////////////////////////////////////////////////////////////////////////
1:     private int timeToLive = 1;
1: 
1:     public MulticastTraceBrokerPlugin() {
1:         try {
1:             destination = new URI("multicast://224.1.2.3:61616");
1:         } catch (URISyntaxException wontHappen) {
1:         }
1:     }
1: 
1:     protected DatagramSocket createSocket() throws IOException {
1:         s.setSendBufferSize(maxTraceDatagramSize);
1:         s.setBroadcast(broadcast);
1:     }
1:     public int getTimeToLive() {
1:         return timeToLive;
1:     }
1:     public void setTimeToLive(int timeToLive) {
1:         this.timeToLive = timeToLive;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:4b6b61b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import java.io.IOException;
1: import java.net.DatagramSocket;
1: import java.net.MulticastSocket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: /**
0:  * A Broker interceptor which allows you to trace all operations to a Multicast socket.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 427613 $
1:  */
1: public class MulticastTraceBrokerPlugin extends UDPTraceBrokerPlugin {
1: 
0: 	private int timeToLive = 1;
1: 	
0: 	public MulticastTraceBrokerPlugin() {
0: 		try {
0: 			destination = new URI("multicast://224.1.2.3:61616");
0: 		} catch (URISyntaxException wontHappen) {
1: 		}
1: 	}
1: 	
0: 	protected DatagramSocket createSocket() throws IOException {
1:         MulticastSocket s = new MulticastSocket();
0: 		s.setSendBufferSize(maxTraceDatagramSize);
0: 		s.setBroadcast(broadcast);
1:         s.setLoopbackMode(true);
1:         s.setTimeToLive(timeToLive);
1:         return s;
1: 	}
1: 
0: 	public int getTimeToLive() {
0: 		return timeToLive;
1: 	}
1: 
0: 	public void setTimeToLive(int timeToLive) {
0: 		this.timeToLive = timeToLive;
1: 	}
1: 
1: }
============================================================================