1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
3:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:230a86c: import java.util.concurrent.atomic.AtomicInteger;
1:230a86c: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.util.IdGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class LargeMessageTestSupport extends ClientTestSupport implements MessageListener {
1:d29ca2a: 
1:d29ca2a:     protected static final int LARGE_MESSAGE_SIZE = 128 * 1024;
1:d29ca2a:     protected static final int MESSAGE_COUNT = 100;
1:fc00993: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LargeMessageTestSupport.class);
1:fc00993: 
1:d29ca2a:     protected Connection producerConnection;
1:d29ca2a:     protected Connection consumerConnection;
1:d29ca2a:     protected MessageConsumer consumer;
1:d29ca2a:     protected MessageProducer producer;
1:d29ca2a:     protected Session producerSession;
1:d29ca2a:     protected Session consumerSession;
1:d29ca2a:     protected byte[] largeMessageData;
1:d29ca2a:     protected Destination destination;
1:d29ca2a:     protected boolean isTopic = true;
1:d29ca2a:     protected boolean isDurable = true;
1:d29ca2a:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:d29ca2a:     protected IdGenerator idGen = new IdGenerator();
1:d29ca2a:     protected boolean validMessageConsumption = true;
1:d29ca2a:     protected AtomicInteger messageCount = new AtomicInteger(0);
1:d29ca2a: 
1:d29ca2a:     protected int prefetchValue = 10000000;
1:d29ca2a: 
1:d29ca2a:     protected Destination createDestination() {
1:d29ca2a:         String subject = getClass().getName();
1:d29ca2a:         if (isTopic) {
1:d29ca2a:             return new ActiveMQTopic(subject);
1:230a86c:         } else {
1:d29ca2a:             return new ActiveMQQueue(subject);
7:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected MessageConsumer createConsumer() throws JMSException {
1:d29ca2a:         if (isTopic && isDurable) {
1:230a86c:             return consumerSession.createDurableSubscriber((Topic)destination, idGen.generateId());
1:230a86c:         } else {
1:d29ca2a:             return consumerSession.createConsumer(destination);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:         ClientTestSupport.removeMessageStore();
1:fc00993:         LOG.info("Setting up . . . . . ");
1:d29ca2a:         messageCount.set(0);
1:d29ca2a: 
1:d29ca2a:         destination = createDestination();
1:d29ca2a:         largeMessageData = new byte[LARGE_MESSAGE_SIZE];
1:d29ca2a:         for (int i = 0; i < LARGE_MESSAGE_SIZE; i++) {
1:d29ca2a:             if (i % 2 == 0) {
1:d29ca2a:                 largeMessageData[i] = 'a';
1:230a86c:             } else {
1:d29ca2a:                 largeMessageData[i] = 'z';
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         try {
1:f812e34:             // allow the broker to start
1:f812e34:             Thread.sleep(1000);
1:230a86c:         } catch (InterruptedException e) {
1:d29ca2a:             throw new JMSException(e.getMessage());
1:86cbdfd:         }
1:d29ca2a: 
1:d29ca2a:         ActiveMQConnectionFactory fac = getConnectionFactory();
1:d29ca2a:         producerConnection = fac.createConnection();
1:230a86c:         setPrefetchPolicy((ActiveMQConnection)producerConnection);
1:d29ca2a:         producerConnection.start();
1:d29ca2a: 
1:d29ca2a:         consumerConnection = fac.createConnection();
1:230a86c:         setPrefetchPolicy((ActiveMQConnection)consumerConnection);
1:d29ca2a:         consumerConnection.setClientID(idGen.generateId());
1:d29ca2a:         consumerConnection.start();
1:d29ca2a:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         producer = producerSession.createProducer(createDestination());
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:d29ca2a:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         consumer = createConsumer();
1:d29ca2a:         consumer.setMessageListener(this);
1:fc00993:         LOG.info("Setup complete");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setPrefetchPolicy(ActiveMQConnection activeMQConnection) {
1:d29ca2a:         activeMQConnection.getPrefetchPolicy().setTopicPrefetch(prefetchValue);
1:d29ca2a:         activeMQConnection.getPrefetchPolicy().setQueuePrefetch(prefetchValue);
1:d29ca2a:         activeMQConnection.getPrefetchPolicy().setDurableTopicPrefetch(prefetchValue);
1:d29ca2a:         activeMQConnection.getPrefetchPolicy().setQueueBrowserPrefetch(prefetchValue);
1:fa8b889:         activeMQConnection.getPrefetchPolicy().setOptimizeDurableTopicPrefetch(prefetchValue);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void tearDown() throws Exception {
1:d29ca2a:         Thread.sleep(1000);
1:d29ca2a:         producerConnection.close();
1:d29ca2a:         consumerConnection.close();
1:d29ca2a: 
1:d29ca2a:         super.tearDown();
1:d29ca2a: 
1:d29ca2a:         largeMessageData = null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected boolean isSame(BytesMessage msg1) throws Exception {
1:d29ca2a:         boolean result = false;
1:230a86c:         ((ActiveMQMessage)msg1).setReadOnlyBody(true);
1:d29ca2a: 
1:d29ca2a:         for (int i = 0; i < LARGE_MESSAGE_SIZE; i++) {
1:d29ca2a:             result = msg1.readByte() == largeMessageData[i];
1:fc00993:             if (!result) {
1:d29ca2a:                 break;
1:fc00993:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onMessage(Message msg) {
1:d29ca2a:         try {
1:230a86c:             BytesMessage ba = (BytesMessage)msg;
1:d29ca2a:             validMessageConsumption &= isSame(ba);
1:d29ca2a:             assertTrue(ba.getBodyLength() == LARGE_MESSAGE_SIZE);
1:d29ca2a:             if (messageCount.incrementAndGet() >= MESSAGE_COUNT) {
1:d29ca2a:                 synchronized (messageCount) {
1:d29ca2a:                     messageCount.notify();
1:d29ca2a:                 }
1:d29ca2a:             }
1:fc00993:             LOG.info("got message = " + messageCount);
1:d29ca2a:             if (messageCount.get() % 50 == 0) {
1:fc00993:                 LOG.info("count = " + messageCount);
1:d29ca2a:             }
1:230a86c:         } catch (Exception e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLargeMessages() throws Exception {
1:d29ca2a:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:fc00993:             LOG.info("Sending message: " + i);
1:d29ca2a:             BytesMessage msg = producerSession.createBytesMessage();
1:d29ca2a:             msg.writeBytes(largeMessageData);
1:d29ca2a:             producer.send(msg);
1:d29ca2a:         }
1:d29ca2a:         long now = System.currentTimeMillis();
1:d29ca2a:         while (now + 60000 > System.currentTimeMillis() && messageCount.get() < MESSAGE_COUNT) {
1:fc00993:             LOG.info("message count = " + messageCount);
1:d29ca2a:             synchronized (messageCount) {
1:d29ca2a:                 messageCount.wait(1000);
1:d29ca2a:             }
1:d29ca2a:         }
1:fc00993:         LOG.info("Finished count = " + messageCount);
1:f812e34:         assertTrue("Not enough messages - expected " + MESSAGE_COUNT + " but got " + messageCount, messageCount.get() == MESSAGE_COUNT);
1:d29ca2a:         assertTrue("received messages are not valid", validMessageConsumption);
1:d29ca2a:         Thread.sleep(1000);
1:fc00993:         LOG.info("FINAL count = " + messageCount);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(LargeMessageTestSupport.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(LargeMessageTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Setting up . . . . . ");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Setup complete");
/////////////////////////////////////////////////////////////////////////
1:             if (!result) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("got message = " + messageCount);
1:                 LOG.info("count = " + messageCount);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sending message: " + i);
1:             LOG.info("message count = " + messageCount);
1:         LOG.info("Finished count = " + messageCount);
1:         LOG.info("FINAL count = " + messageCount);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LargeMessageTestSupport.class);
/////////////////////////////////////////////////////////////////////////
1:             // allow the broker to start
1:             Thread.sleep(1000);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Not enough messages - expected " + MESSAGE_COUNT + " but got " + messageCount, messageCount.get() == MESSAGE_COUNT);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:         .getLog(LargeMessageTestSupport.class);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             return consumerSession.createDurableSubscriber((Topic)destination, idGen.generateId());
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:         } catch (InterruptedException e) {
1:         setPrefetchPolicy((ActiveMQConnection)producerConnection);
1:         setPrefetchPolicy((ActiveMQConnection)consumerConnection);
/////////////////////////////////////////////////////////////////////////
1:         ((ActiveMQMessage)msg1).setReadOnlyBody(true);
/////////////////////////////////////////////////////////////////////////
1:             BytesMessage ba = (BytesMessage)msg;
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("Not enough messages - expected " + MESSAGE_COUNT + " but got " + messageCount,
0:                    messageCount.get() == MESSAGE_COUNT);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.IdGenerator;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class LargeMessageTestSupport extends ClientTestSupport implements MessageListener {
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LargeMessageTestSupport.class);
1: 
1:     protected static final int LARGE_MESSAGE_SIZE = 128 * 1024;
1:     protected static final int MESSAGE_COUNT = 100;
1:     protected Connection producerConnection;
1:     protected Connection consumerConnection;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Session producerSession;
1:     protected Session consumerSession;
1:     protected byte[] largeMessageData;
1:     protected Destination destination;
1:     protected boolean isTopic = true;
1:     protected boolean isDurable = true;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:     protected IdGenerator idGen = new IdGenerator();
1:     protected boolean validMessageConsumption = true;
1:     protected AtomicInteger messageCount = new AtomicInteger(0);
1: 
1:     protected int prefetchValue = 10000000;
1: 
1:     protected Destination createDestination() {
1:         String subject = getClass().getName();
1:         if (isTopic) {
1:             return new ActiveMQTopic(subject);
1:         }
0:         else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         if (isTopic && isDurable) {
0:             return consumerSession.createDurableSubscriber((Topic) destination, idGen.generateId());
1:         }
0:         else {
1:             return consumerSession.createConsumer(destination);
1:         }
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         ClientTestSupport.removeMessageStore();
0:         log.info("Setting up . . . . . ");
1:         messageCount.set(0);
1: 
1:         destination = createDestination();
1:         largeMessageData = new byte[LARGE_MESSAGE_SIZE];
1:         for (int i = 0; i < LARGE_MESSAGE_SIZE; i++) {
1:             if (i % 2 == 0) {
1:                 largeMessageData[i] = 'a';
1:             }
0:             else {
1:                 largeMessageData[i] = 'z';
1:             }
1:         }
1: 
1:         try {
0:             Thread.sleep(1000);// allow the broker to start
1:         }
0:         catch (InterruptedException e) {
1:             throw new JMSException(e.getMessage());
1:         }
1: 
1:         ActiveMQConnectionFactory fac = getConnectionFactory();
1:         producerConnection = fac.createConnection();
0:         setPrefetchPolicy((ActiveMQConnection) producerConnection);
1:         producerConnection.start();
1: 
1:         consumerConnection = fac.createConnection();
0:         setPrefetchPolicy((ActiveMQConnection) consumerConnection);
1:         consumerConnection.setClientID(idGen.generateId());
1:         consumerConnection.start();
1:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = producerSession.createProducer(createDestination());
1:         producer.setDeliveryMode(deliveryMode);
1:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = createConsumer();
1:         consumer.setMessageListener(this);
0:         log.info("Setup complete");
1:     }
1: 
1:     protected void setPrefetchPolicy(ActiveMQConnection activeMQConnection) {
1:         activeMQConnection.getPrefetchPolicy().setTopicPrefetch(prefetchValue);
1:         activeMQConnection.getPrefetchPolicy().setQueuePrefetch(prefetchValue);
1:         activeMQConnection.getPrefetchPolicy().setDurableTopicPrefetch(prefetchValue);
1:         activeMQConnection.getPrefetchPolicy().setQueueBrowserPrefetch(prefetchValue);
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         Thread.sleep(1000);
1:         producerConnection.close();
1:         consumerConnection.close();
1: 
1:         super.tearDown();
1: 
1:         largeMessageData = null;
1:     }
1: 
1:     protected boolean isSame(BytesMessage msg1) throws Exception {
1:         boolean result = false;
0:         ((ActiveMQMessage) msg1).setReadOnlyBody(true);
1: 
1:         for (int i = 0; i < LARGE_MESSAGE_SIZE; i++) {
1:             result = msg1.readByte() == largeMessageData[i];
0:             if (!result)
1:                 break;
1:         }
1: 
1:         return result;
1:     }
1: 
1:     public void onMessage(Message msg) {
1:         try {
0:             BytesMessage ba = (BytesMessage) msg;
1:             validMessageConsumption &= isSame(ba);
1:             assertTrue(ba.getBodyLength() == LARGE_MESSAGE_SIZE);
1:             if (messageCount.incrementAndGet() >= MESSAGE_COUNT) {
1:                 synchronized (messageCount) {
1:                     messageCount.notify();
1:                 }
1:             }
0:             log.info("got message = " + messageCount);
1:             if (messageCount.get() % 50 == 0) {
0:                 log.info("count = " + messageCount);
1:             }
1:         }
0:         catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void testLargeMessages() throws Exception {
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
0:             log.info("Sending message: " + i);
1:             BytesMessage msg = producerSession.createBytesMessage();
1:             msg.writeBytes(largeMessageData);
1:             producer.send(msg);
1:         }
1:         long now = System.currentTimeMillis();
1:         while (now + 60000 > System.currentTimeMillis() && messageCount.get() < MESSAGE_COUNT) {
0:             log.info("message count = " + messageCount);
1:             synchronized (messageCount) {
1:                 messageCount.wait(1000);
1:             }
1:         }
0:         log.info("Finished count = " + messageCount);
0:         assertTrue("Not enough messages - expected " + MESSAGE_COUNT + " but got " + messageCount, messageCount.get() == MESSAGE_COUNT);
1:         assertTrue("received messages are not valid", validMessageConsumption);
1:         Thread.sleep(1000);
0:         log.info("FINAL count = " + messageCount);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(LargeMessageTestSupport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:fa8b889
/////////////////////////////////////////////////////////////////////////
1:         activeMQConnection.getPrefetchPolicy().setOptimizeDurableTopicPrefetch(prefetchValue);
============================================================================