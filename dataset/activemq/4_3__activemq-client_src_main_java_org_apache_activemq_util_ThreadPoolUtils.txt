2:287f69d: /**
1:287f69d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:287f69d:  * contributor license agreements.  See the NOTICE file distributed with
1:287f69d:  * this work for additional information regarding copyright ownership.
1:287f69d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:287f69d:  * (the "License"); you may not use this file except in compliance with
1:287f69d:  * the License.  You may obtain a copy of the License at
4:287f69d:  *
1:287f69d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:287f69d:  *
1:287f69d:  * Unless required by applicable law or agreed to in writing, software
1:287f69d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:287f69d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:287f69d:  * See the License for the specific language governing permissions and
1:287f69d:  * limitations under the License.
2:287f69d:  */
1:287f69d: package org.apache.activemq.util;
5:287f69d: 
1:287f69d: import java.util.List;
1:287f69d: import java.util.concurrent.ExecutorService;
1:287f69d: import java.util.concurrent.TimeUnit;
1:287f69d: 
1:287f69d: import org.slf4j.Logger;
1:287f69d: import org.slf4j.LoggerFactory;
1:287f69d: 
1:287f69d: /**
1:6c1676b:  * Utility methods for working with thread pools {@link ExecutorService}.
1:287f69d:  */
1:6c1676b: public final class ThreadPoolUtils {
1:287f69d: 
1:287f69d:     private static final Logger LOG = LoggerFactory.getLogger(ThreadPoolUtils.class);
1:6c1676b: 
1:8a01c5d:     public static final long DEFAULT_SHUTDOWN_AWAIT_TERMINATION = 10 * 1000L;
1:287f69d: 
1:6c1676b:     /**
1:6c1676b:      * Shutdown the given executor service only (ie not graceful shutdown).
1:6c1676b:      *
1:6c1676b:      * @see java.util.concurrent.ExecutorService#shutdown()
1:6c1676b:      */
1:6c1676b:     public static void shutdown(ExecutorService executorService) {
1:8a01c5d:         doShutdown(executorService, 0);
1:6c1676b:     }
1:6c1676b: 
1:6c1676b:     /**
1:6c1676b:      * Shutdown now the given executor service aggressively.
1:6c1676b:      *
1:6c1676b:      * @param executorService the executor service to shutdown now
1:6c1676b:      * @return list of tasks that never commenced execution
1:6c1676b:      * @see java.util.concurrent.ExecutorService#shutdownNow()
1:6c1676b:      */
1:6c1676b:     public static List<Runnable> shutdownNow(ExecutorService executorService) {
1:6c1676b:         List<Runnable> answer = null;
1:6c1676b:         if (!executorService.isShutdown()) {
1:6c1676b:             LOG.debug("Forcing shutdown of ExecutorService: {}", executorService);
1:6c1676b:             answer = executorService.shutdownNow();
1:6c1676b:             if (LOG.isTraceEnabled()) {
1:6c1676b:                 LOG.trace("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {}.",
1:6c1676b:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated()});
1:6c1676b:             }
1:6c1676b:         }
1:6c1676b: 
1:6c1676b:         return answer;
1:6c1676b:     }
1:287f69d: 
1:287f69d:     /**
1:287f69d:      * Shutdown the given executor service graceful at first, and then aggressively
1:287f69d:      * if the await termination timeout was hit.
1:6c1676b:      * <p/>
1:6c1676b:      * This implementation invokes the {@link #shutdownGraceful(java.util.concurrent.ExecutorService, long)}
1:287f69d:      * with a timeout value of {@link #DEFAULT_SHUTDOWN_AWAIT_TERMINATION} millis.
1:287f69d:      */
1:6c1676b:     public static void shutdownGraceful(ExecutorService executorService) {
1:8a01c5d:         doShutdown(executorService, DEFAULT_SHUTDOWN_AWAIT_TERMINATION);
6:287f69d:     }
1:287f69d: 
1:287f69d:     /**
1:287f69d:      * Shutdown the given executor service graceful at first, and then aggressively
1:287f69d:      * if the await termination timeout was hit.
2:287f69d:      * <p/>
1:287f69d:      * Will try to perform an orderly shutdown by giving the running threads
1:287f69d:      * time to complete tasks, before going more aggressively by doing a
1:287f69d:      * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which
1:287f69d:      * forces a shutdown. The parameter <tt>shutdownAwaitTermination</tt>
1:287f69d:      * is used as timeout value waiting for orderly shutdown to
1:946e62d:      * complete normally, before going aggressively.  If the shutdownAwaitTermination
1:946e62d:      * value is negative the shutdown waits indefinitely for the ExecutorService
1:946e62d:      * to complete its shutdown.
1:287f69d:      *
1:287f69d:      * @param executorService the executor service to shutdown
1:8a01c5d:      * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown
1:287f69d:      */
1:6c1676b:     public static void shutdownGraceful(ExecutorService executorService, long shutdownAwaitTermination) {
1:8a01c5d:         doShutdown(executorService, shutdownAwaitTermination);
1:6c1676b:     }
1:6c1676b: 
1:8a01c5d:     private static void doShutdown(ExecutorService executorService, long shutdownAwaitTermination) {
1:287f69d:         // code from Apache Camel - org.apache.camel.impl.DefaultExecutorServiceManager
1:287f69d: 
1:6c1676b:         if (executorService == null) {
2:6c1676b:             return;
1:6c1676b:         }
1:6c1676b: 
1:287f69d:         // shutting down a thread pool is a 2 step process. First we try graceful, and if that fails, then we go more aggressively
1:287f69d:         // and try shutting down again. In both cases we wait at most the given shutdown timeout value given
1:8a01c5d:         // (total wait could then be 2 x shutdownAwaitTermination, but when we shutdown the 2nd time we are aggressive and thus
1:8a01c5d:         // we ought to shutdown much faster)
2:287f69d:         if (!executorService.isShutdown()) {
1:8a01c5d:             boolean warned = false;
1:8a01c5d:             StopWatch watch = new StopWatch();
1:8a01c5d: 
1:287f69d:             LOG.trace("Shutdown of ExecutorService: {} with await termination: {} millis", executorService, shutdownAwaitTermination);
1:6c1676b:             executorService.shutdown();
1:8a01c5d: 
1:8a01c5d:             if (shutdownAwaitTermination > 0) {
1:8a01c5d:                 try {
2:287f69d:                     if (!awaitTermination(executorService, shutdownAwaitTermination)) {
1:8a01c5d:                         warned = true;
1:8a01c5d:                         LOG.warn("Forcing shutdown of ExecutorService: {} due first await termination elapsed.", executorService);
2:8a01c5d:                         executorService.shutdownNow();
1:8a01c5d:                         // we are now shutting down aggressively, so wait to see if we can completely shutdown or not
1:8a01c5d:                         if (!awaitTermination(executorService, shutdownAwaitTermination)) {
1:8a01c5d:                             LOG.warn("Cannot completely force shutdown of ExecutorService: {} due second await termination elapsed.", executorService);
1:8a01c5d:                         }
1:6c1676b:                     }
1:8a01c5d:                 } catch (InterruptedException e) {
1:8a01c5d:                     warned = true;
1:8a01c5d:                     LOG.warn("Forcing shutdown of ExecutorService: {} due interrupted.", executorService);
1:8a01c5d:                     // we were interrupted during shutdown, so force shutdown
1:0a12bcb:                     try {
1:0a12bcb:                         executorService.shutdownNow();
1:0a12bcb:                     } finally {
1:0a12bcb:                         Thread.currentThread().interrupt();
1:0a12bcb:                     }
1:287f69d:                 }
1:946e62d:             } else  if (shutdownAwaitTermination < 0) {
1:946e62d:                 try {
1:946e62d:                     awaitTermination(executorService);
1:946e62d:                 } catch (InterruptedException e) {
1:946e62d:                     warned = true;
1:946e62d:                     LOG.warn("Forcing shutdown of ExecutorService: {} due interrupted.", executorService);
1:946e62d:                     // we were interrupted during shutdown, so force shutdown
1:946e62d:                     try {
1:946e62d:                         executorService.shutdownNow();
1:946e62d:                     } finally {
1:946e62d:                         Thread.currentThread().interrupt();
1:946e62d:                     }
1:946e62d:                 }
1:287f69d:             }
1:6c1676b: 
1:287f69d:             // if we logged at WARN level, then report at INFO level when we are complete so the end user can see this in the log
1:287f69d:             if (warned) {
1:287f69d:                 LOG.info("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {} took: {}.",
1:287f69d:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated(), TimeUtils.printDuration(watch.taken())});
1:287f69d:             } else if (LOG.isDebugEnabled()) {
1:287f69d:                 LOG.debug("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {} took: {}.",
1:287f69d:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated(), TimeUtils.printDuration(watch.taken())});
1:287f69d:             }
1:287f69d:         }
1:287f69d:     }
1:287f69d: 
1:287f69d:     /**
1:946e62d:      * Awaits the termination of the thread pool indefinitely (Use with Caution).
1:946e62d:      * <p/>
1:946e62d:      * This implementation will log every 2nd second at INFO level that we are waiting, so the end user
1:946e62d:      * can see we are not hanging in case it takes longer time to terminate the pool.
1:946e62d:      *
1:946e62d:      * @param executorService            the thread pool
1:946e62d:      *
1:946e62d:      * @throws InterruptedException is thrown if we are interrupted during the waiting
1:946e62d:      */
1:946e62d:     public static void awaitTermination(ExecutorService executorService) throws InterruptedException {
1:946e62d:         // log progress every 5th second so end user is aware of we are shutting down
1:946e62d:         StopWatch watch = new StopWatch();
1:946e62d:         final long interval = 2000;
1:946e62d:         while (true) {
1:946e62d:             if (executorService.awaitTermination(interval, TimeUnit.MILLISECONDS)) {
1:946e62d:                 return;
1:946e62d:             } else {
1:946e62d:                 LOG.info("Waited {} for ExecutorService: {} to terminate...", TimeUtils.printDuration(watch.taken()), executorService);
1:946e62d:             }
1:946e62d:         }
1:946e62d:     }
1:946e62d: 
1:946e62d:     /**
1:287f69d:      * Awaits the termination of the thread pool.
1:287f69d:      * <p/>
1:8a01c5d:      * This implementation will log every 2nd second at INFO level that we are waiting, so the end user
1:8a01c5d:      * can see we are not hanging in case it takes longer time to terminate the pool.
1:287f69d:      *
1:287f69d:      * @param executorService            the thread pool
1:287f69d:      * @param shutdownAwaitTermination   time in millis to use as timeout
1:287f69d:      * @return <tt>true</tt> if the pool is terminated, or <tt>false</tt> if we timed out
1:287f69d:      * @throws InterruptedException is thrown if we are interrupted during the waiting
1:287f69d:      */
1:287f69d:     public static boolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination) throws InterruptedException {
1:287f69d:         // log progress every 5th second so end user is aware of we are shutting down
2:287f69d:         StopWatch watch = new StopWatch();
1:8a01c5d:         long interval = Math.min(2000, shutdownAwaitTermination);
1:287f69d:         boolean done = false;
1:287f69d:         while (!done && interval > 0) {
1:287f69d:             if (executorService.awaitTermination(interval, TimeUnit.MILLISECONDS)) {
1:287f69d:                 done = true;
1:287f69d:             } else {
1:8a01c5d:                 LOG.info("Waited {} for ExecutorService: {} to terminate...", TimeUtils.printDuration(watch.taken()), executorService);
1:287f69d:                 // recalculate interval
1:8a01c5d:                 interval = Math.min(2000, shutdownAwaitTermination - watch.taken());
1:287f69d:             }
1:287f69d:         }
1:287f69d: 
1:287f69d:         return done;
1:287f69d:     }
1:287f69d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1:      * complete normally, before going aggressively.  If the shutdownAwaitTermination
1:      * value is negative the shutdown waits indefinitely for the ExecutorService
1:      * to complete its shutdown.
/////////////////////////////////////////////////////////////////////////
1:             } else  if (shutdownAwaitTermination < 0) {
1:                 try {
1:                     awaitTermination(executorService);
1:                 } catch (InterruptedException e) {
1:                     warned = true;
1:                     LOG.warn("Forcing shutdown of ExecutorService: {} due interrupted.", executorService);
1:                     // we were interrupted during shutdown, so force shutdown
1:                     try {
1:                         executorService.shutdownNow();
1:                     } finally {
1:                         Thread.currentThread().interrupt();
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
1:      * Awaits the termination of the thread pool indefinitely (Use with Caution).
1:      * <p/>
1:      * This implementation will log every 2nd second at INFO level that we are waiting, so the end user
1:      * can see we are not hanging in case it takes longer time to terminate the pool.
1:      *
1:      * @param executorService            the thread pool
1:      *
1:      * @throws InterruptedException is thrown if we are interrupted during the waiting
1:      */
1:     public static void awaitTermination(ExecutorService executorService) throws InterruptedException {
1:         // log progress every 5th second so end user is aware of we are shutting down
1:         StopWatch watch = new StopWatch();
1:         final long interval = 2000;
1:         while (true) {
1:             if (executorService.awaitTermination(interval, TimeUnit.MILLISECONDS)) {
1:                 return;
1:             } else {
1:                 LOG.info("Waited {} for ExecutorService: {} to terminate...", TimeUtils.printDuration(watch.taken()), executorService);
1:             }
1:         }
1:     }
1: 
1:     /**
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1:                     try {
1:                         executorService.shutdownNow();
1:                     } finally {
1:                         Thread.currentThread().interrupt();
1:                     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a01c5d
/////////////////////////////////////////////////////////////////////////
1:     public static final long DEFAULT_SHUTDOWN_AWAIT_TERMINATION = 10 * 1000L;
/////////////////////////////////////////////////////////////////////////
1:         doShutdown(executorService, 0);
/////////////////////////////////////////////////////////////////////////
1:         doShutdown(executorService, DEFAULT_SHUTDOWN_AWAIT_TERMINATION);
/////////////////////////////////////////////////////////////////////////
1:      * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown
1:         doShutdown(executorService, shutdownAwaitTermination);
1:     private static void doShutdown(ExecutorService executorService, long shutdownAwaitTermination) {
1:         // (total wait could then be 2 x shutdownAwaitTermination, but when we shutdown the 2nd time we are aggressive and thus
1:         // we ought to shutdown much faster)
1:             boolean warned = false;
1:             StopWatch watch = new StopWatch();
1: 
1: 
1:             if (shutdownAwaitTermination > 0) {
1:                 try {
1:                         warned = true;
1:                         LOG.warn("Forcing shutdown of ExecutorService: {} due first await termination elapsed.", executorService);
1:                         executorService.shutdownNow();
1:                         // we are now shutting down aggressively, so wait to see if we can completely shutdown or not
1:                         if (!awaitTermination(executorService, shutdownAwaitTermination)) {
1:                             LOG.warn("Cannot completely force shutdown of ExecutorService: {} due second await termination elapsed.", executorService);
1:                         }
1:                 } catch (InterruptedException e) {
1:                     warned = true;
1:                     LOG.warn("Forcing shutdown of ExecutorService: {} due interrupted.", executorService);
1:                     // we were interrupted during shutdown, so force shutdown
1:                     executorService.shutdownNow();
/////////////////////////////////////////////////////////////////////////
1:      * This implementation will log every 2nd second at INFO level that we are waiting, so the end user
1:      * can see we are not hanging in case it takes longer time to terminate the pool.
/////////////////////////////////////////////////////////////////////////
1:         long interval = Math.min(2000, shutdownAwaitTermination);
1:                 LOG.info("Waited {} for ExecutorService: {} to terminate...", TimeUtils.printDuration(watch.taken()), executorService);
1:                 interval = Math.min(2000, shutdownAwaitTermination - watch.taken());
commit:6c1676b
/////////////////////////////////////////////////////////////////////////
1:  * Utility methods for working with thread pools {@link ExecutorService}.
1: public final class ThreadPoolUtils {
0:     public static final long DEFAULT_SHUTDOWN_AWAIT_TERMINATION = 30 * 1000L;
1: 
1:     /**
1:      * Shutdown the given executor service only (ie not graceful shutdown).
1:      *
1:      * @see java.util.concurrent.ExecutorService#shutdown()
1:      */
1:     public static void shutdown(ExecutorService executorService) {
0:         doShutdown(executorService, -1, true);
1:     }
1: 
1:     /**
1:      * Shutdown now the given executor service aggressively.
1:      *
1:      * @param executorService the executor service to shutdown now
1:      * @return list of tasks that never commenced execution
1:      * @see java.util.concurrent.ExecutorService#shutdownNow()
1:      */
1:     public static List<Runnable> shutdownNow(ExecutorService executorService) {
1:         List<Runnable> answer = null;
1:         if (!executorService.isShutdown()) {
1:             LOG.debug("Forcing shutdown of ExecutorService: {}", executorService);
1:             answer = executorService.shutdownNow();
1:             if (LOG.isTraceEnabled()) {
1:                 LOG.trace("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {}.",
1:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated()});
1:             }
1:         }
1: 
1:         return answer;
1:     }
1:      * This implementation invokes the {@link #shutdownGraceful(java.util.concurrent.ExecutorService, long)}
1:     public static void shutdownGraceful(ExecutorService executorService) {
0:         doShutdown(executorService, DEFAULT_SHUTDOWN_AWAIT_TERMINATION, false);
/////////////////////////////////////////////////////////////////////////
1:      * <p/>
0:      * Notice if the given parameter <tt>shutdownAwaitTermination</tt> is negative, then a quick shutdown
0:      * is commenced, by invoking the {@link java.util.concurrent.ExecutorService#shutdown()} method
0:      * and then exit from this method (ie. no graceful shutdown is performed).
0:      * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown, if the value if negative
0:      *                                 then the thread pool is <b>not</b> graceful shutdown, but a regular shutdown
0:      *                                 is commenced.
1:     public static void shutdownGraceful(ExecutorService executorService, long shutdownAwaitTermination) {
0:         doShutdown(executorService, shutdownAwaitTermination, false);
1:     }
1: 
0:     private static void doShutdown(ExecutorService executorService, long shutdownAwaitTermination, boolean quick) {
1:         if (executorService == null) {
1:             return;
1:         }
1: 
0:         if (quick) {
0:             // do not shutdown graceful, but just quick shutdown on the thread pool
1:             executorService.shutdown();
0:             LOG.debug("Quick shutdown of ExecutorService: {} is shutdown: {} and terminated: {}.",
0:                     new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated()});
1:             return;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
commit:287f69d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
0: public class ThreadPoolUtils {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ThreadPoolUtils.class);
1: 
0:     // TODO: Should be 30 sec
0:     // but lowered due some unit tests dont yet properly shutdown, so want to run these a bit faster
0:     public static final long DEFAULT_SHUTDOWN_AWAIT_TERMINATION = 10 * 1000L;
1: 
1:     /**
1:      * Shutdown the given executor service graceful at first, and then aggressively
1:      * if the await termination timeout was hit.
1:      * <p/>
0:      * This implementation invokes the {@link #shutdown(java.util.concurrent.ExecutorService, long)}
1:      * with a timeout value of {@link #DEFAULT_SHUTDOWN_AWAIT_TERMINATION} millis.
1:      *
0:      * @see #shutdown(java.util.concurrent.ExecutorService, long)
1:      */
0:     public void shutdown(ExecutorService executorService) {
0:         shutdown(executorService, DEFAULT_SHUTDOWN_AWAIT_TERMINATION);
1:     }
1: 
1:     /**
1:      * Shutdown the given executor service graceful at first, and then aggressively
1:      * if the await termination timeout was hit.
1:      * <p/>
1:      * Will try to perform an orderly shutdown by giving the running threads
1:      * time to complete tasks, before going more aggressively by doing a
1:      * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which
1:      * forces a shutdown. The parameter <tt>shutdownAwaitTermination</tt>
1:      * is used as timeout value waiting for orderly shutdown to
0:      * complete normally, before going aggressively.
1:      *
1:      * @param executorService the executor service to shutdown
0:      * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown
0:      * @see java.util.concurrent.ExecutorService#shutdown()
1:      */
0:     public static void shutdown(ExecutorService executorService, long shutdownAwaitTermination) {
1:         // code from Apache Camel - org.apache.camel.impl.DefaultExecutorServiceManager
1: 
0:         if (shutdownAwaitTermination <= 0) {
0:             throw new IllegalArgumentException("ShutdownAwaitTermination must be a positive number, was: " + shutdownAwaitTermination);
1:         }
1: 
1:         // shutting down a thread pool is a 2 step process. First we try graceful, and if that fails, then we go more aggressively
1:         // and try shutting down again. In both cases we wait at most the given shutdown timeout value given
0:         // (total wait could then be 2 x shutdownAwaitTermination)
0:         boolean warned = false;
1:         StopWatch watch = new StopWatch();
1:         if (!executorService.isShutdown()) {
1:             LOG.trace("Shutdown of ExecutorService: {} with await termination: {} millis", executorService, shutdownAwaitTermination);
0:             executorService.shutdown();
0:             try {
1:                 if (!awaitTermination(executorService, shutdownAwaitTermination)) {
0:                     warned = true;
0:                     LOG.warn("Forcing shutdown of ExecutorService: {} due first await termination elapsed.", executorService);
0:                     executorService.shutdownNow();
0:                     // we are now shutting down aggressively, so wait to see if we can completely shutdown or not
1:                     if (!awaitTermination(executorService, shutdownAwaitTermination)) {
0:                         LOG.warn("Cannot completely force shutdown of ExecutorService: {} due second await termination elapsed.", executorService);
1:                     }
1:                 }
0:             } catch (InterruptedException e) {
0:                 warned = true;
0:                 LOG.warn("Forcing shutdown of ExecutorService: {} due interrupted.", executorService);
0:                 // we were interrupted during shutdown, so force shutdown
0:                 executorService.shutdownNow();
1:             }
1: 
1:             // if we logged at WARN level, then report at INFO level when we are complete so the end user can see this in the log
1:             if (warned) {
1:                 LOG.info("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {} took: {}.",
1:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated(), TimeUtils.printDuration(watch.taken())});
1:             } else if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {} took: {}.",
1:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated(), TimeUtils.printDuration(watch.taken())});
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * Shutdown now the given executor service aggressively.
1:      *
0:      * @param executorService the executor service to shutdown now
0:      * @return list of tasks that never commenced execution
0:      * @see java.util.concurrent.ExecutorService#shutdownNow()
1:      */
0:     public static List<Runnable> shutdownNow(ExecutorService executorService) {
0:         List<Runnable> answer = null;
1:         if (!executorService.isShutdown()) {
0:             LOG.debug("Forcing shutdown of ExecutorService: {}", executorService);
0:             answer = executorService.shutdownNow();
0:             if (LOG.isTraceEnabled()) {
0:                 LOG.trace("Shutdown of ExecutorService: {} is shutdown: {} and terminated: {}.",
0:                         new Object[]{executorService, executorService.isShutdown(), executorService.isTerminated()});
1:             }
1:         }
1: 
0:         return answer;
1:     }
1: 
1:     /**
1:      * Awaits the termination of the thread pool.
1:      * <p/>
0:      * This implementation will log every 5th second at INFO level that we are waiting, so the end user
0:      * can see we are not hanging in case it takes longer time to shutdown the pool.
1:      *
1:      * @param executorService            the thread pool
1:      * @param shutdownAwaitTermination   time in millis to use as timeout
1:      * @return <tt>true</tt> if the pool is terminated, or <tt>false</tt> if we timed out
1:      * @throws InterruptedException is thrown if we are interrupted during the waiting
1:      */
1:     public static boolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination) throws InterruptedException {
1:         // log progress every 5th second so end user is aware of we are shutting down
1:         StopWatch watch = new StopWatch();
0:         long interval = Math.min(5000, shutdownAwaitTermination);
1:         boolean done = false;
1:         while (!done && interval > 0) {
1:             if (executorService.awaitTermination(interval, TimeUnit.MILLISECONDS)) {
1:                 done = true;
1:             } else {
0:                 LOG.info("Waited {} for ExecutorService: {} to shutdown...", TimeUtils.printDuration(watch.taken()), executorService);
1:                 // recalculate interval
0:                 interval = Math.min(5000, shutdownAwaitTermination - watch.taken());
1:             }
1:         }
1: 
1:         return done;
1:     }
1: }
============================================================================