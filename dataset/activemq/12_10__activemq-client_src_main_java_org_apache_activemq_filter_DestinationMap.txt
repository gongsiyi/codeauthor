1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:8e2176d: import java.util.Comparator;
1:d29ca2a: import java.util.HashSet;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Set;
1:d29ca2a: import java.util.SortedSet;
1:d29ca2a: import java.util.TreeSet;
1:2ce1c13: import java.util.stream.Collectors;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:8b28367:  * A Map-like data structure allowing values to be indexed by
1:8b28367:  * {@link ActiveMQDestination} and retrieved by destination - supporting both *
1:8b28367:  * and &gt; style of wildcard as well as composite destinations. <br>
1:8b28367:  * This class assumes that the index changes rarely but that fast lookup into
1:8b28367:  * the index is required. So this class maintains a pre-calculated index for
1:8b28367:  * destination steps. So looking up the values for "TEST.*" or "*.TEST" will be
1:8b28367:  * pretty fast. <br>
1:8b28367:  * Looking up of a value could return a single value or a List of matching
1:8b28367:  * values if a wildcard or composite destination is used.
1:d29ca2a:  */
1:d29ca2a: public class DestinationMap {
1:d29ca2a:     protected static final String ANY_DESCENDENT = DestinationFilter.ANY_DESCENDENT;
1:d29ca2a:     protected static final String ANY_CHILD = DestinationFilter.ANY_CHILD;
1:d29ca2a: 
1:8b28367:     private DestinationMapNode queueRootNode = new DestinationMapNode(null);
1:789789f:     private DestinationMapNode tempQueueRootNode = new DestinationMapNode(null);
1:8b28367:     private DestinationMapNode topicRootNode = new DestinationMapNode(null);
1:789789f:     private DestinationMapNode tempTopicRootNode = new DestinationMapNode(null);
1:2ce1c13: 
1:694120c: 
1:d29ca2a:     /**
1:8b28367:      * Looks up the value(s) matching the given Destination key. For simple
1:8b28367:      * destinations this is typically a List of one single value, for wildcards
1:8b28367:      * or composite destinations this will typically be a List of matching
1:8b28367:      * values.
1:d29ca2a:      *
1:74a7a8b:      * @param key the destination to lookup
1:8b28367:      * @return a List of matching values or an empty list if there are no
1:8b28367:      *         matching values.
1:d29ca2a:      */
1:7f639a6:     @SuppressWarnings({"rawtypes", "unchecked"})
1:0b76d3a:     public Set get(ActiveMQDestination key) {
1:0b76d3a:         synchronized (this) {
1:0b76d3a:             return unsynchronizedGet(key);
1:0b76d3a:         }
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     @SuppressWarnings({"rawtypes", "unchecked"})
1:0b76d3a:     public Set unsynchronizedGet(ActiveMQDestination key) {
1:d29ca2a:         if (key.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:d29ca2a:             Set answer = new HashSet(destinations.length);
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:                 ActiveMQDestination childDestination = destinations[i];
1:0b76d3a:                 Object value = unsynchronizedGet(childDestination);
1:d29ca2a:                 if (value instanceof Set) {
1:7f639a6:                     answer.addAll((Set) value);
1:74a7a8b:                 } else if (value != null) {
1:d29ca2a:                     answer.add(value);
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return answer;
1:d29ca2a:         }
1:d29ca2a:         return findWildcardMatches(key);
1:d29ca2a:     }
1:d29ca2a: 
1:0b76d3a:     public void put(ActiveMQDestination key, Object value) {
1:0b76d3a:         synchronized (this) {
1:0b76d3a:             unsynchronizedPut(key, value);
1:0b76d3a:         }
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     public void unsynchronizedPut(ActiveMQDestination key, Object value) {
1:d29ca2a:         if (key.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:                 ActiveMQDestination childDestination = destinations[i];
1:d29ca2a:                 put(childDestination, value);
1:d29ca2a:             }
2:d29ca2a:             return;
1:d29ca2a:         }
1:d29ca2a:         String[] paths = key.getDestinationPaths();
1:8b28367:         getRootNode(key).add(paths, 0, value);
1:d29ca2a:     }
1:7f639a6: 
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes the value from the associated destination
1:d29ca2a:      */
1:0b76d3a:     public void remove(ActiveMQDestination key, Object value) {
1:0b76d3a:         synchronized (this) {
1:0b76d3a:             unsynchronizedRemove(key, value);
1:0b76d3a:         }
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     public void unsynchronizedRemove(ActiveMQDestination key, Object value) {
1:d29ca2a:         if (key.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:                 ActiveMQDestination childDestination = destinations[i];
1:d29ca2a:                 remove(childDestination, value);
1:d29ca2a:             }
1:d29ca2a:             return;
1:d29ca2a:         }
1:d29ca2a:         String[] paths = key.getDestinationPaths();
1:8b28367:         getRootNode(key).remove(paths, 0, value);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:8b28367:     public int getTopicRootChildCount() {
1:8b28367:         return topicRootNode.getChildCount();
1:d29ca2a:     }
1:74a7a8b: 
1:8b28367:     public int getQueueRootChildCount() {
1:8b28367:         return queueRootNode.getChildCount();
1:d29ca2a:     }
1:d29ca2a: 
1:694120c:     public DestinationMapNode getQueueRootNode() {
1:694120c:         return queueRootNode;
1:d29ca2a:     }
1:d29ca2a: 
1:694120c:     public DestinationMapNode getTopicRootNode() {
1:694120c:         return topicRootNode;
1:d29ca2a:     }
1:6fefadb: 
1:789789f:     public DestinationMapNode getTempQueueRootNode() {
1:789789f:         return tempQueueRootNode;
1:789789f:     }
1:789789f: 
1:789789f:     public DestinationMapNode getTempTopicRootNode() {
1:789789f:         return tempTopicRootNode;
1:789789f:     }
1:789789f: 
1:d29ca2a:     // Implementation methods
1:8b28367:     // -------------------------------------------------------------------------
1:d29ca2a: 
1:d29ca2a:     /**
1:8b28367:      * A helper method to allow the destination map to be populated from a
1:8b28367:      * dependency injection framework such as Spring
1:d29ca2a:      */
1:7f639a6:     @SuppressWarnings({"rawtypes"})
1:7f639a6:     protected void setEntries(List<DestinationMapEntry> entries) {
1:3dbc9c9:         for (Object element : entries) {
1:3dbc9c9:             Class<? extends DestinationMapEntry> type = getEntryClass();
1:d29ca2a:             if (type.isInstance(element)) {
1:7f639a6:                 DestinationMapEntry entry = (DestinationMapEntry) element;
1:d29ca2a:                 put(entry.getDestination(), entry.getValue());
1:74a7a8b:             } else {
1:d29ca2a:                 throw new IllegalArgumentException("Each entry must be an instance of type: " + type.getName() + " but was: " + element);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:8b28367:      * Returns the type of the allowed entries which can be set via the
1:8b28367:      * {@link #setEntries(List)} method. This allows derived classes to further
1:8b28367:      * restrict the type of allowed entries to make a type safe destination map
1:8b28367:      * for custom policies.
1:d29ca2a:      */
1:7f639a6:     @SuppressWarnings({"rawtypes"})
1:3dbc9c9:     protected Class<? extends DestinationMapEntry> getEntryClass() {
1:d29ca2a:         return DestinationMapEntry.class;
1:d29ca2a:     }
1:d29ca2a: 
1:7f639a6:     @SuppressWarnings({"rawtypes", "unchecked"})
1:d29ca2a:     protected Set findWildcardMatches(ActiveMQDestination key) {
1:3b39d2c:        return findWildcardMatches(key, true);
1:3b39d2c:     }
1:3b39d2c: 
1:3b39d2c:     @SuppressWarnings({"rawtypes", "unchecked"})
1:3b39d2c:     protected Set findWildcardMatches(ActiveMQDestination key, boolean deep) {
1:d29ca2a:         String[] paths = key.getDestinationPaths();
1:d29ca2a:         Set answer = new HashSet();
1:3b39d2c:         getRootNode(key).appendMatchingValues(answer, paths, 0, deep);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:eb827e2:      * @param key
1:74a7a8b:      * @return
1:d29ca2a:      */
1:7f639a6:     @SuppressWarnings({"rawtypes", "unchecked"})
1:cf5ee40:     public Set removeAll(ActiveMQDestination key) {
1:cf5ee40:         Set rc = new HashSet();
1:d29ca2a:         if (key.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:74a7a8b:                 rc.add(removeAll(destinations[i]));
1:d29ca2a:             }
1:cf5ee40:             return rc;
1:d29ca2a:         }
1:d29ca2a:         String[] paths = key.getDestinationPaths();
1:cf5ee40:         getRootNode(key).removeAll(rc, paths, 0);
1:cf5ee40:         return rc;
1:789789f:     }
1:694120c: 
1:d29ca2a:     /**
1:8b28367:      * Returns the value which matches the given destination or null if there is
1:8b28367:      * no matching value. If there are multiple values, the results are sorted
1:8b28367:      * and the last item (the biggest) is returned.
1:d29ca2a:      *
1:74a7a8b:      * @param destination the destination to find the value for
1:d29ca2a:      * @return the largest matching value or null if no value matches
1:d29ca2a:      */
1:7f639a6:     @SuppressWarnings({"rawtypes", "unchecked"})
1:2ce1c13:     public DestinationMapEntry chooseValue(final ActiveMQDestination destination) {
1:2ce1c13:         Set<DestinationMapEntry> set = get(destination);
1:d29ca2a:         if (set == null || set.isEmpty()) {
1:d29ca2a:             return null;
1:d29ca2a:         }
1:2ce1c13: 
1:2ce1c13:         //Comparator to sort in order - we want to pick the exact match by destination or the
1:2ce1c13:         //closest parent that applies
1:2ce1c13:         final Comparator<DestinationMapEntry> comparator = new Comparator<DestinationMapEntry>() {
1:8e2176d:             @Override
1:8e2176d:             public int compare(DestinationMapEntry entry1, DestinationMapEntry entry2) {
1:8e2176d:                 return destination.equals(entry1.destination) ? -1 : (destination.equals(entry2.destination) ? 1 : entry1.compareTo(entry2));
1:8e2176d:             }
1:2ce1c13:         };
1:2ce1c13: 
1:2ce1c13:         //Sort and filter out any children and non matching entries
1:2ce1c13:         final SortedSet<DestinationMapEntry> sortedSet = set.stream()
1:2ce1c13:             .filter(entry -> isMatchOrParent(destination, (DestinationMapEntry)entry))
1:2ce1c13:             .collect(Collectors.toCollection(() -> new TreeSet<DestinationMapEntry>(comparator)));
1:2ce1c13: 
1:2ce1c13:         return sortedSet.size() > 0 ? sortedSet.first() : null;
1:2ce1c13:     }
1:2ce1c13: 
1:2ce1c13:     @SuppressWarnings("rawtypes")
1:2ce1c13:     //Used to filter out any child/unmatching entries
1:2ce1c13:     private boolean isMatchOrParent(final ActiveMQDestination destination, final DestinationMapEntry entry) {
1:703b7b1:         //If destination not set then do not filter out
1:703b7b1:         if (entry.getDestination() == null) {
1:703b7b1:             return true;
1:703b7b1:         }
1:2ce1c13:         final DestinationFilter filter = DestinationFilter.parseFilter(entry.getDestination());
1:2ce1c13:         return destination.equals(entry.getDestination()) || filter.matches(destination);
1:d29ca2a:     }
1:d29ca2a: 
1:8b28367:     /**
1:8b28367:      * Returns the root node for the given destination type
1:8b28367:      */
1:8b28367:     protected DestinationMapNode getRootNode(ActiveMQDestination key) {
1:7f639a6:         if (key.isTemporary()) {
1:789789f:             if (key.isQueue()) {
1:789789f:                 return tempQueueRootNode;
1:74a7a8b:             } else {
1:789789f:                 return tempTopicRootNode;
1:d29ca2a:             }
1:789789f:         } else {
1:789789f:             if (key.isQueue()) {
1:789789f:                 return queueRootNode;
1:789789f:             } else {
1:789789f:                 return topicRootNode;
1:789789f:             }
1:694120c:         }
1:694120c:     }
1:694120c: 
1:6fefadb:     public void reset() {
1:6fefadb:         queueRootNode = new DestinationMapNode(null);
1:6fefadb:         tempQueueRootNode = new DestinationMapNode(null);
1:6fefadb:         topicRootNode = new DestinationMapNode(null);
1:6fefadb:         tempTopicRootNode = new DestinationMapNode(null);
1:6fefadb:     }
1:5dda6e6: 
1:7f639a6:     public boolean isEmpty() {
1:eb99e05:         return queueRootNode.isEmpty() && topicRootNode.isEmpty() && tempQueueRootNode.isEmpty() && tempTopicRootNode.isEmpty();
1:eb99e05:     }
1:eb99e05: 
1:5dda6e6:     public static Set union(Set existing, Set candidates) {
1:7f639a6:         if (candidates != null) {
1:5dda6e6:             if (existing != null) {
1:7f639a6:                 for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext(); ) {
1:5dda6e6:                     Object toMatch = iterator.next();
1:5dda6e6:                     if (!candidates.contains(toMatch)) {
1:5dda6e6:                         iterator.remove();
1:5dda6e6:                     }
1:5dda6e6:                 }
1:5dda6e6:             } else {
1:5dda6e6:                 existing = candidates;
1:5dda6e6:             }
1:7f639a6:         } else if (existing != null) {
1:5dda6e6:             existing.clear();
1:5dda6e6:         }
1:5dda6e6:         return existing;
1:5dda6e6:     }
1:5dda6e6: 
1:8b28367: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0b76d3a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Set get(ActiveMQDestination key) {
1:         synchronized (this) {
1:             return unsynchronizedGet(key);
1:         }
1:     }
1: 
1:     @SuppressWarnings({"rawtypes", "unchecked"})
1:     public Set unsynchronizedGet(ActiveMQDestination key) {
1:                 Object value = unsynchronizedGet(childDestination);
/////////////////////////////////////////////////////////////////////////
1:     public void put(ActiveMQDestination key, Object value) {
1:         synchronized (this) {
1:             unsynchronizedPut(key, value);
1:         }
1:     }
1: 
1:     public void unsynchronizedPut(ActiveMQDestination key, Object value) {
/////////////////////////////////////////////////////////////////////////
1:     public void remove(ActiveMQDestination key, Object value) {
1:         synchronized (this) {
1:             unsynchronizedRemove(key, value);
1:         }
1:     }
1: 
1:     public void unsynchronizedRemove(ActiveMQDestination key, Object value) {
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:703b7b1
/////////////////////////////////////////////////////////////////////////
1:         //If destination not set then do not filter out
1:         if (entry.getDestination() == null) {
1:             return true;
1:         }
commit:2ce1c13
/////////////////////////////////////////////////////////////////////////
0: import java.util.function.Supplier;
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public DestinationMapEntry chooseValue(final ActiveMQDestination destination) {
1:         Set<DestinationMapEntry> set = get(destination);
1: 
1:         //Comparator to sort in order - we want to pick the exact match by destination or the
1:         //closest parent that applies
1:         final Comparator<DestinationMapEntry> comparator = new Comparator<DestinationMapEntry>() {
1:         };
1: 
1:         //Sort and filter out any children and non matching entries
1:         final SortedSet<DestinationMapEntry> sortedSet = set.stream()
1:             .filter(entry -> isMatchOrParent(destination, (DestinationMapEntry)entry))
1:             .collect(Collectors.toCollection(() -> new TreeSet<DestinationMapEntry>(comparator)));
1: 
1:         return sortedSet.size() > 0 ? sortedSet.first() : null;
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     //Used to filter out any child/unmatching entries
1:     private boolean isMatchOrParent(final ActiveMQDestination destination, final DestinationMapEntry entry) {
1:         final DestinationFilter filter = DestinationFilter.parseFilter(entry.getDestination());
1:         return destination.equals(entry.getDestination()) || filter.matches(destination);
commit:8e2176d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
0:     public Object chooseValue(final ActiveMQDestination destination) {
0:         SortedSet sortedSet = new TreeSet(new Comparator<DestinationMapEntry>() {
1:             @Override
1:             public int compare(DestinationMapEntry entry1, DestinationMapEntry entry2) {
1:                 return destination.equals(entry1.destination) ? -1 : (destination.equals(entry2.destination) ? 1 : entry1.compareTo(entry2));
1:             }
0:         });
0:         sortedSet.addAll(set);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ee4672b
/////////////////////////////////////////////////////////////////////////
0:         return sortedSet.first();
commit:3b39d2c
/////////////////////////////////////////////////////////////////////////
1:        return findWildcardMatches(key, true);
1:     }
1: 
1:     @SuppressWarnings({"rawtypes", "unchecked"})
1:     protected Set findWildcardMatches(ActiveMQDestination key, boolean deep) {
1:         getRootNode(key).appendMatchingValues(answer, paths, 0, deep);
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e7e317d
/////////////////////////////////////////////////////////////////////////
author:rajdavies
-------------------------------------------------------------------------------
commit:7f639a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1:                     answer.addAll((Set) value);
/////////////////////////////////////////////////////////////////////////
0:         paths = DestinationFilter.rationalizePaths(paths);
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes"})
1:     protected void setEntries(List<DestinationMapEntry> entries) {
1:                 DestinationMapEntry entry = (DestinationMapEntry) element;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes"})
1:     @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1:         if (key.isTemporary()) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmpty() {
1:         if (candidates != null) {
1:                 for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext(); ) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (existing != null) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:eb99e05
/////////////////////////////////////////////////////////////////////////
0:     public boolean isEmpty(){
1:         return queueRootNode.isEmpty() && topicRootNode.isEmpty() && tempQueueRootNode.isEmpty() && tempTopicRootNode.isEmpty();
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:      * @param key the destination to lookup
/////////////////////////////////////////////////////////////////////////
0:                     answer.addAll((Set)value);
1:                 } else if (value != null) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Object element = (Object)iter.next();
0:                 DestinationMapEntry entry = (DestinationMapEntry)element;
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:      * @return
1:                 rc.add(removeAll(destinations[i]));
/////////////////////////////////////////////////////////////////////////
1:      * @param destination the destination to find the value for
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cf5ee40
/////////////////////////////////////////////////////////////////////////
0:      * @return 
1:     public Set removeAll(ActiveMQDestination key) {
1:         Set rc = new HashSet();
0:                 rc.add( removeAll(destinations[i]) );
1:             return rc;
1:         getRootNode(key).removeAll(rc, paths, 0);
1:         return rc;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
0:  * A Map-like data structure allowing values to be indexed by {@link ActiveMQDestination}
0:  * and retrieved by destination - supporting both * and &gt; style of wildcard
0:  * as well as composite destinations.
0:  * <br>
0:  * This class assumes that the index changes rarely but that fast lookup into the index is required.
0:  * So this class maintains a pre-calculated index for destination steps. So looking up the values
0:  * for "TEST.*" or "*.TEST" will be pretty fast.
0:  * <br>
0:  * Looking up of a value could return a single value or a List of matching values if a wildcard or
0:  * composite destination is used.
1:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public class DestinationMap {
0:     private DestinationMapNode rootNode = new DestinationMapNode(null);
1:     protected static final String ANY_DESCENDENT = DestinationFilter.ANY_DESCENDENT;
1:     protected static final String ANY_CHILD = DestinationFilter.ANY_CHILD;
1: 
1:     /**
0:      * Looks up the value(s) matching the given Destination key. For simple destinations
0:      * this is typically a List of one single value, for wildcards or composite destinations this will typically be
0:      * a List of matching values.
1:      *
0:      * @param key the destination to lookup
0:      * @return a List of matching values or an empty list if there are no matching values.
1:      */
0:     public synchronized Set get(ActiveMQDestination key) {
1:         if (key.isComposite()) {
1:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:             Set answer = new HashSet(destinations.length);
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ActiveMQDestination childDestination = destinations[i];
0:                 Object value = get(childDestination);
1:                 if (value instanceof Set) {
0:                     answer.addAll((Set) value);
1:                 }
0:                 else if (value != null) {
1:                     answer.add(value);
1:                 }
1:             }
1:             return answer;
1:         }
1:         return findWildcardMatches(key);
1:     }
1: 
0:     public synchronized void put(ActiveMQDestination key, Object value) {
1:         if (key.isComposite()) {
1:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ActiveMQDestination childDestination = destinations[i];
1:                 put(childDestination, value);
1:             }
1:             return;
1:         }
1:         String[] paths = key.getDestinationPaths();
0:         rootNode.add(paths, 0, value);
1:     }
1: 
1:     /**
1:      * Removes the value from the associated destination
1:      */
0:     public synchronized void remove(ActiveMQDestination key, Object value) {
1:         if (key.isComposite()) {
1:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ActiveMQDestination childDestination = destinations[i];
1:                 remove(childDestination, value);
1:             }
1:             return;
1:         }
1:         String[] paths = key.getDestinationPaths();
0:         rootNode.remove(paths, 0, value);
1: 
1:     }
1: 
0:     public int getRootChildCount() {
0:         return rootNode.getChildCount();
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1: 
1:     /**
0:      * A helper method to allow the destination map to be populated from a dependency injection
0:      * framework such as Spring
1:      */
0:     protected void setEntries(List entries) {
0:         for (Iterator iter = entries.iterator(); iter.hasNext();) {
0:             Object element = (Object) iter.next();
0:             Class type = getEntryClass();
1:             if (type.isInstance(element)) {
0:                 DestinationMapEntry entry = (DestinationMapEntry) element;
1:                 put(entry.getDestination(), entry.getValue());
1:             }
0:             else {
1:                 throw new IllegalArgumentException("Each entry must be an instance of type: " + type.getName() + " but was: " + element);
1:             }
1:         }
1:     }
1:     
1:     /**
0:      * Returns the type of the allowed entries which can be set via the {@link #setEntries(List)} method.
0:      * This allows derived classes to further restrict the type of allowed entries to make a type safe 
0:      * destination map for custom policies.
1:      */
0:     protected Class getEntryClass() {
1:         return DestinationMapEntry.class;
1:     }
1: 
1:     protected Set findWildcardMatches(ActiveMQDestination key) {
1:         String[] paths = key.getDestinationPaths();
1:         Set answer = new HashSet();
0:         rootNode.appendMatchingValues(answer, paths, 0);
1:         return answer;
1:     }
1: 
1:     /**
0:      * @param dest
1:      */
0:     public void removeAll(ActiveMQDestination key) {
1:         if (key.isComposite()) {
1:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
0:                 removeAll(destinations[i]);
1:             }
1:             return;
1:         }
1:         String[] paths = key.getDestinationPaths();
0:         rootNode.removeAll(paths, 0);
1:     }
1: 
1:     /**
0:      * Returns the value which matches the given destination or null if there is no matching
0:      * value. If there are multiple values, the results are sorted and the last item (the biggest)
0:      * is returned.
1:      * 
0:      * @param destination the destination to find the value for
1:      * @return the largest matching value or null if no value matches
1:      */
0:     public Object chooseValue(ActiveMQDestination destination) {
0:         Set set = get(destination);
1:         if (set == null || set.isEmpty()) {
1:             return null;
1:         }
0:         SortedSet sortedSet = new TreeSet(set);
0:         return sortedSet.last();
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:5dda6e6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Set union(Set existing, Set candidates) {
0:         if ( candidates != null ) {
1:             if (existing != null) {
0:                 for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext();) {
1:                     Object toMatch = iterator.next();
1:                     if (!candidates.contains(toMatch)) {
1:                         iterator.remove();
1:                     }
1:                 }
1:             } else {
1:                 existing = candidates;
1:             }
0:         } else if ( existing != null ) {
1:             existing.clear();
1:         }
1:         return existing;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings({ "rawtypes" })
0:     protected void setEntries(List<DestinationMapEntry>  entries) {
1:         for (Object element : entries) {
1:             Class<? extends DestinationMapEntry> type = getEntryClass();
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings({ "rawtypes" })
1:     protected Class<? extends DestinationMapEntry> getEntryClass() {
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
0:      *
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6fefadb
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void reset() {
1:         queueRootNode = new DestinationMapNode(null);
1:         tempQueueRootNode = new DestinationMapNode(null);
1:         topicRootNode = new DestinationMapNode(null);
1:         tempTopicRootNode = new DestinationMapNode(null);
1:     }
commit:789789f
/////////////////////////////////////////////////////////////////////////
1:     private DestinationMapNode tempQueueRootNode = new DestinationMapNode(null);
1:     private DestinationMapNode tempTopicRootNode = new DestinationMapNode(null);
/////////////////////////////////////////////////////////////////////////
1:     public DestinationMapNode getTempQueueRootNode() {
1:         return tempQueueRootNode;
1:     }
1: 
1:     public DestinationMapNode getTempTopicRootNode() {
1:         return tempTopicRootNode;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (key.isTemporary()){
1:             if (key.isQueue()) {
1:                 return tempQueueRootNode;
1:             } else {
1:                 return tempTopicRootNode;
1:             }
1:             if (key.isQueue()) {
1:                 return queueRootNode;
1:             } else {
1:                 return topicRootNode;
1:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:eb827e2
/////////////////////////////////////////////////////////////////////////
1:      * @param key
commit:694120c
/////////////////////////////////////////////////////////////////////////
1:     public DestinationMapNode getQueueRootNode() {
1:         return queueRootNode;
1:     }
1: 
1:     public DestinationMapNode getTopicRootNode() {
1:         return topicRootNode;
1:     }
1: 
1:     
commit:8b28367
/////////////////////////////////////////////////////////////////////////
1:  * A Map-like data structure allowing values to be indexed by
1:  * {@link ActiveMQDestination} and retrieved by destination - supporting both *
1:  * and &gt; style of wildcard as well as composite destinations. <br>
1:  * This class assumes that the index changes rarely but that fast lookup into
1:  * the index is required. So this class maintains a pre-calculated index for
1:  * destination steps. So looking up the values for "TEST.*" or "*.TEST" will be
1:  * pretty fast. <br>
1:  * Looking up of a value could return a single value or a List of matching
1:  * values if a wildcard or composite destination is used.
0:  * 
1:     private DestinationMapNode queueRootNode = new DestinationMapNode(null);
1:     private DestinationMapNode topicRootNode = new DestinationMapNode(null);
0: 
1:      * Looks up the value(s) matching the given Destination key. For simple
1:      * destinations this is typically a List of one single value, for wildcards
1:      * or composite destinations this will typically be a List of matching
1:      * values.
0:      * 
0:      * @param key
0:      *            the destination to lookup
1:      * @return a List of matching values or an empty list if there are no
1:      *         matching values.
/////////////////////////////////////////////////////////////////////////
1:         getRootNode(key).add(paths, 0, value);
/////////////////////////////////////////////////////////////////////////
1:         getRootNode(key).remove(paths, 0, value);
1:     public int getTopicRootChildCount() {
1:         return topicRootNode.getChildCount();
1:     }
0:     
1:     public int getQueueRootChildCount() {
1:         return queueRootNode.getChildCount();
1:     // -------------------------------------------------------------------------
1:      * A helper method to allow the destination map to be populated from a
1:      * dependency injection framework such as Spring
/////////////////////////////////////////////////////////////////////////
0: 
1:      * Returns the type of the allowed entries which can be set via the
1:      * {@link #setEntries(List)} method. This allows derived classes to further
1:      * restrict the type of allowed entries to make a type safe destination map
1:      * for custom policies.
/////////////////////////////////////////////////////////////////////////
0:         getRootNode(key).appendMatchingValues(answer, paths, 0);
/////////////////////////////////////////////////////////////////////////
0:         getRootNode(key).removeAll(paths, 0);
1:      * Returns the value which matches the given destination or null if there is
1:      * no matching value. If there are multiple values, the results are sorted
1:      * and the last item (the biggest) is returned.
0:      * @param destination
0:      *            the destination to find the value for
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the root node for the given destination type
1:      */
1:     protected DestinationMapNode getRootNode(ActiveMQDestination key) {
0:         if (key.isQueue()) {
0:             return queueRootNode;
0:         }
0:         else {
0:             return topicRootNode;
0:         }
0:     }
============================================================================