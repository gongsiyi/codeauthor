1:cb1b92b: /**
1:cb1b92b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cb1b92b:  * contributor license agreements.  See the NOTICE file distributed with
1:cb1b92b:  * this work for additional information regarding copyright ownership.
1:cb1b92b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cb1b92b:  * (the "License"); you may not use this file except in compliance with
1:cb1b92b:  * the License.  You may obtain a copy of the License at
1:cb1b92b:  *
1:cb1b92b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cb1b92b:  *
1:cb1b92b:  * Unless required by applicable law or agreed to in writing, software
1:cb1b92b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cb1b92b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb1b92b:  * See the License for the specific language governing permissions and
1:cb1b92b:  * limitations under the License.
1:cb1b92b:  */
1:cb1b92b: package org.apache.activemq.bugs;
1:cb1b92b: 
1:cb1b92b: import java.net.URI;
1:cb1b92b: import java.util.Random;
1:cb1b92b: import java.util.concurrent.CountDownLatch;
1:cb1b92b: 
1:cb1b92b: import javax.jms.DeliveryMode;
1:cb1b92b: import javax.jms.JMSException;
1:cb1b92b: import javax.jms.Message;
1:cb1b92b: import javax.jms.MessageListener;
1:cb1b92b: import javax.jms.MessageProducer;
1:cb1b92b: import javax.jms.Session;
1:cb1b92b: 
1:cb1b92b: import org.apache.activemq.ActiveMQConnection;
1:cb1b92b: import org.apache.activemq.ActiveMQConnectionFactory;
1:cb1b92b: import org.apache.activemq.ActiveMQMessageConsumer;
1:cb1b92b: import org.apache.activemq.ActiveMQSession;
1:cb1b92b: import org.apache.activemq.broker.BrokerService;
1:cb1b92b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:cb1b92b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cb1b92b: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:cb1b92b: import org.apache.activemq.command.ActiveMQQueue;
1:cb1b92b: import org.apache.activemq.store.PersistenceAdapter;
1:cb1b92b: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:cb1b92b: import org.junit.Assert;
1:cb1b92b: import org.junit.Before;
1:cb1b92b: import org.junit.Test;
1:cb1b92b: import org.slf4j.Logger;
1:cb1b92b: import org.slf4j.LoggerFactory;
1:cb1b92b: 
1:cb1b92b: public class AMQ3436Test {
1:cb1b92b: 
1:cb1b92b:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ3436Test.class);
1:cb1b92b: 
1:cb1b92b:     private BrokerService broker;
1:cb1b92b:     private PersistenceAdapter adapter;
1:cb1b92b:     private boolean useCache = true;
1:cb1b92b:     private boolean prioritizeMessages = true;
1:cb1b92b: 
1:cb1b92b:     protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws Exception {
1:cb1b92b:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:cb1b92b:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:cb1b92b:         adapter.setConcurrentStoreAndDispatchTopics(false);
1:cb1b92b:         adapter.deleteAllMessages();
1:cb1b92b:         return adapter;
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Before
1:cb1b92b:     public void setUp() throws Exception {
1:cb1b92b:         broker = new BrokerService();
1:cb1b92b:         broker.setBrokerName("priorityTest");
1:cb1b92b:         broker.setAdvisorySupport(false);
1:cb1b92b:         broker.setUseJmx(false);
1:cb1b92b:         adapter = createPersistenceAdapter(true);
1:cb1b92b:         broker.setPersistenceAdapter(adapter);
1:cb1b92b:         PolicyEntry policy = new PolicyEntry();
1:cb1b92b:         policy.setPrioritizedMessages(prioritizeMessages);
1:cb1b92b:         policy.setUseCache(useCache);
1:cb1b92b:         policy.setProducerFlowControl(false);
1:cb1b92b:         PolicyMap policyMap = new PolicyMap();
1:cb1b92b:         policyMap.put(new ActiveMQQueue("TEST"), policy);
1:cb1b92b: 
1:cb1b92b:         // do not process expired for one test
1:cb1b92b:         PolicyEntry ignoreExpired = new PolicyEntry();
1:cb1b92b:         SharedDeadLetterStrategy ignoreExpiredStrategy = new SharedDeadLetterStrategy();
1:cb1b92b:         ignoreExpiredStrategy.setProcessExpired(false);
1:cb1b92b:         ignoreExpired.setDeadLetterStrategy(ignoreExpiredStrategy);
1:cb1b92b: 
1:cb1b92b:         broker.setDestinationPolicy(policyMap);
1:cb1b92b:         broker.start();
1:cb1b92b:         broker.waitUntilStarted();
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     protected void tearDown() throws Exception {
1:cb1b92b:         broker.stop();
1:cb1b92b:         broker.waitUntilStopped();
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Test
1:cb1b92b:     public void testPriorityWhenConsumerCreatedBeforeProduction() throws Exception {
1:cb1b92b: 
1:cb1b92b:         int messageCount = 200;
1:cb1b92b:         URI failoverUri = new URI("vm://priorityTest?jms.prefetchPolicy.all=1");
1:cb1b92b: 
1:cb1b92b:         ActiveMQQueue dest = new ActiveMQQueue("TEST?consumer.dispatchAsync=false");
1:cb1b92b: 
1:cb1b92b:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUri);
1:cb1b92b:         cf.setDispatchAsync(false);
1:cb1b92b: 
1:cb1b92b:         // Create producer
1:cb1b92b:         ActiveMQConnection producerConnection = (ActiveMQConnection) cf.createConnection();
1:cb1b92b:         producerConnection.setMessagePrioritySupported(true);
1:cb1b92b:         producerConnection.start();
1:cb1b92b:         final Session producerSession = producerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:cb1b92b:         MessageProducer producer = producerSession.createProducer(dest);
1:cb1b92b: 
1:cb1b92b:         ActiveMQMessageConsumer consumer;
1:cb1b92b: 
1:cb1b92b:         // Create consumer on separate connection
1:cb1b92b:         ActiveMQConnection consumerConnection = (ActiveMQConnection) cf.createConnection();
1:cb1b92b:         consumerConnection.setMessagePrioritySupported(true);
1:cb1b92b:         consumerConnection.start();
1:cb1b92b:         final ActiveMQSession consumerSession = (ActiveMQSession) consumerConnection.createSession(true,
1:cb1b92b:                 Session.SESSION_TRANSACTED);
1:cb1b92b:         consumer = (ActiveMQMessageConsumer) consumerSession.createConsumer(dest);
1:cb1b92b: 
1:cb1b92b:         // Produce X number of messages with a session commit after each message
1:cb1b92b:         Random random = new Random();
1:cb1b92b:         for (int i = 0; i < messageCount; ++i) {
1:cb1b92b: 
1:cb1b92b:             Message message = producerSession.createTextMessage("Test message #" + i);
1:cb1b92b:             producer.send(message, DeliveryMode.PERSISTENT, random.nextInt(10), 45*1000);
1:cb1b92b:             producerSession.commit();
1:cb1b92b:         }
1:cb1b92b:         producer.close();
1:cb1b92b: 
1:cb1b92b:         // ***************************************************
1:cb1b92b:         // If we create the consumer here instead of above, the
1:cb1b92b:         // the messages will be consumed in priority order
1:cb1b92b:         // ***************************************************
1:cb1b92b:         //consumer = (ActiveMQMessageConsumer) consumerSession.createConsumer(dest);
1:cb1b92b: 
1:cb1b92b:         // Consume all of the messages we produce using a listener.
1:cb1b92b:         // Don't exit until we get all the messages.
1:cb1b92b:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:cb1b92b:         final StringBuffer failureMessage = new StringBuffer();
1:cb1b92b:         consumer.setMessageListener(new MessageListener() {
1:cb1b92b:             int lowestPrioritySeen = 10;
1:cb1b92b: 
1:cb1b92b:             boolean firstMessage = true;
1:cb1b92b: 
1:b9f9f03:             @Override
1:cb1b92b:             public void onMessage(Message msg) {
1:cb1b92b:                 try {
1:cb1b92b: 
1:cb1b92b:                     int currentPriority = msg.getJMSPriority();
1:cb1b92b:                     LOG.debug(currentPriority + "<=" + lowestPrioritySeen);
1:cb1b92b: 
1:cb1b92b:                     // Ignore the first message priority since it is prefetched
1:cb1b92b:                     // and is out of order by design
1:cb1b92b:                     if (firstMessage == true) {
1:cb1b92b:                         firstMessage = false;
1:cb1b92b:                         LOG.debug("Ignoring first message since it was prefetched");
1:cb1b92b: 
1:cb1b92b:                     } else {
1:cb1b92b: 
1:cb1b92b:                         // Verify that we never see a priority higher than the
1:cb1b92b:                         // lowest
1:cb1b92b:                         // priority seen
1:cb1b92b:                         if (lowestPrioritySeen > currentPriority) {
1:cb1b92b:                             lowestPrioritySeen = currentPriority;
1:cb1b92b:                         }
1:cb1b92b:                         if (lowestPrioritySeen < currentPriority) {
1:cb1b92b:                             failureMessage.append("Incorrect priority seen (Lowest Priority = " + lowestPrioritySeen
1:cb1b92b:                                     + " Current Priority = " + currentPriority + ")"
1:cb1b92b:                                     + System.getProperty("line.separator"));
1:cb1b92b:                         }
1:cb1b92b:                     }
1:cb1b92b: 
1:cb1b92b:                 } catch (JMSException e) {
1:cb1b92b:                     e.printStackTrace();
1:cb1b92b:                 } finally {
1:cb1b92b:                     latch.countDown();
1:cb1b92b:                     LOG.debug("Messages remaining = " + latch.getCount());
1:cb1b92b:                 }
1:cb1b92b:             }
1:cb1b92b:         });
1:cb1b92b: 
1:cb1b92b:         latch.await();
1:cb1b92b:         consumer.close();
1:cb1b92b: 
1:cb1b92b:         // Cleanup producer resources
1:cb1b92b:         producerSession.close();
1:cb1b92b:         producerConnection.stop();
1:cb1b92b:         producerConnection.close();
1:cb1b92b: 
1:cb1b92b:         // Cleanup consumer resources
1:cb1b92b:         consumerSession.close();
1:cb1b92b:         consumerConnection.stop();
1:cb1b92b:         consumerConnection.close();
1:cb1b92b: 
1:cb1b92b:         // Report the failure if found
1:cb1b92b:         if (failureMessage.length() > 0) {
1:cb1b92b:             Assert.fail(failureMessage.toString());
1:cb1b92b:         }
1:cb1b92b:     }
1:cb1b92b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b9f9f03
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:cb1b92b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: import java.util.Random;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3436Test {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ3436Test.class);
1: 
1:     private BrokerService broker;
1:     private PersistenceAdapter adapter;
1:     private boolean useCache = true;
1:     private boolean prioritizeMessages = true;
1: 
1:     protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws Exception {
1:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:         adapter.setConcurrentStoreAndDispatchTopics(false);
1:         adapter.deleteAllMessages();
1:         return adapter;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setBrokerName("priorityTest");
1:         broker.setAdvisorySupport(false);
1:         broker.setUseJmx(false);
1:         adapter = createPersistenceAdapter(true);
1:         broker.setPersistenceAdapter(adapter);
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setPrioritizedMessages(prioritizeMessages);
1:         policy.setUseCache(useCache);
1:         policy.setProducerFlowControl(false);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.put(new ActiveMQQueue("TEST"), policy);
1: 
1:         // do not process expired for one test
1:         PolicyEntry ignoreExpired = new PolicyEntry();
1:         SharedDeadLetterStrategy ignoreExpiredStrategy = new SharedDeadLetterStrategy();
1:         ignoreExpiredStrategy.setProcessExpired(false);
1:         ignoreExpired.setDeadLetterStrategy(ignoreExpiredStrategy);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testPriorityWhenConsumerCreatedBeforeProduction() throws Exception {
1: 
1:         int messageCount = 200;
1:         URI failoverUri = new URI("vm://priorityTest?jms.prefetchPolicy.all=1");
1: 
1:         ActiveMQQueue dest = new ActiveMQQueue("TEST?consumer.dispatchAsync=false");
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUri);
1:         cf.setDispatchAsync(false);
1: 
1:         // Create producer
1:         ActiveMQConnection producerConnection = (ActiveMQConnection) cf.createConnection();
1:         producerConnection.setMessagePrioritySupported(true);
1:         producerConnection.start();
1:         final Session producerSession = producerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = producerSession.createProducer(dest);
1: 
1:         ActiveMQMessageConsumer consumer;
1: 
1:         // Create consumer on separate connection
1:         ActiveMQConnection consumerConnection = (ActiveMQConnection) cf.createConnection();
1:         consumerConnection.setMessagePrioritySupported(true);
1:         consumerConnection.start();
1:         final ActiveMQSession consumerSession = (ActiveMQSession) consumerConnection.createSession(true,
1:                 Session.SESSION_TRANSACTED);
1:         consumer = (ActiveMQMessageConsumer) consumerSession.createConsumer(dest);
1: 
1:         // Produce X number of messages with a session commit after each message
1:         Random random = new Random();
1:         for (int i = 0; i < messageCount; ++i) {
1: 
1:             Message message = producerSession.createTextMessage("Test message #" + i);
1:             producer.send(message, DeliveryMode.PERSISTENT, random.nextInt(10), 45*1000);
1:             producerSession.commit();
1:         }
1:         producer.close();
1: 
1:         // ***************************************************
1:         // If we create the consumer here instead of above, the
1:         // the messages will be consumed in priority order
1:         // ***************************************************
1:         //consumer = (ActiveMQMessageConsumer) consumerSession.createConsumer(dest);
1: 
1:         // Consume all of the messages we produce using a listener.
1:         // Don't exit until we get all the messages.
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         final StringBuffer failureMessage = new StringBuffer();
1:         consumer.setMessageListener(new MessageListener() {
1:             int lowestPrioritySeen = 10;
1: 
1:             boolean firstMessage = true;
1: 
1:             public void onMessage(Message msg) {
1:                 try {
1: 
1:                     int currentPriority = msg.getJMSPriority();
1:                     LOG.debug(currentPriority + "<=" + lowestPrioritySeen);
1: 
1:                     // Ignore the first message priority since it is prefetched
1:                     // and is out of order by design
1:                     if (firstMessage == true) {
1:                         firstMessage = false;
1:                         LOG.debug("Ignoring first message since it was prefetched");
1: 
1:                     } else {
1: 
1:                         // Verify that we never see a priority higher than the
1:                         // lowest
1:                         // priority seen
1:                         if (lowestPrioritySeen > currentPriority) {
1:                             lowestPrioritySeen = currentPriority;
1:                         }
1:                         if (lowestPrioritySeen < currentPriority) {
1:                             failureMessage.append("Incorrect priority seen (Lowest Priority = " + lowestPrioritySeen
1:                                     + " Current Priority = " + currentPriority + ")"
1:                                     + System.getProperty("line.separator"));
1:                         }
1:                     }
1: 
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 } finally {
1:                     latch.countDown();
1:                     LOG.debug("Messages remaining = " + latch.getCount());
1:                 }
1:             }
1:         });
1: 
1:         latch.await();
1:         consumer.close();
1: 
1:         // Cleanup producer resources
1:         producerSession.close();
1:         producerConnection.stop();
1:         producerConnection.close();
1: 
1:         // Cleanup consumer resources
1:         consumerSession.close();
1:         consumerConnection.stop();
1:         consumerConnection.close();
1: 
1:         // Report the failure if found
1:         if (failureMessage.length() > 0) {
1:             Assert.fail(failureMessage.toString());
1:         }
1:     }
1: }
============================================================================