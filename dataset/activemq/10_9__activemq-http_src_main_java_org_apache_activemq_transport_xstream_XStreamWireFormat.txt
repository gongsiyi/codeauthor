1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.xstream;
20:40a7d3b: 
1:3b4aadc: import java.io.IOException;
1:3b4aadc: import java.io.Reader;
1:540dd5c: 
1:547476d: import com.thoughtworks.xstream.converters.Converter;
1:547476d: import com.thoughtworks.xstream.converters.MarshallingContext;
1:547476d: import com.thoughtworks.xstream.converters.UnmarshallingContext;
1:547476d: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1:547476d: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
1:b9dcb01: 
1:8136e67: import org.apache.activemq.command.ConsumerInfo;
1:4b202c1: import org.apache.activemq.command.MarshallAware;
1:4b202c1: import org.apache.activemq.command.MessageDispatch;
1:b9dcb01: import org.apache.activemq.command.TransientInitializer;
1:a7e2a44: import org.apache.activemq.transport.stomp.XStreamSupport;
1:f451ad0: import org.apache.activemq.transport.util.TextWireFormat;
1:547476d: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:f451ad0: 
1:5e5458e: import com.thoughtworks.xstream.XStream;
1:5e5458e: 
2:40a7d3b: /**
1:40a7d3b:  * A {@link WireFormat} implementation which uses the <a
1:40a7d3b:  * href="http://xstream.codehaus.org/>XStream</a> library to marshall commands
1:40a7d3b:  * onto the wire
1:b0c2a40:  *
1:5be5a62:  *
1:40a7d3b:  */
1:40a7d3b: public class XStreamWireFormat extends TextWireFormat {
1:40a7d3b:     private XStream xStream;
1:40a7d3b:     private int version;
1:f451ad0: 
1:5e5458e:     @Override
1:40a7d3b:     public int getVersion() {
1:40a7d3b:         return version;
11:40a7d3b:     }
1:88acb0e: 
1:5e5458e:     @Override
1:40a7d3b:     public void setVersion(int version) {
1:40a7d3b:         this.version = version;
1:40a7d3b:     }
1:f451ad0: 
1:40a7d3b:     public WireFormat copy() {
1:40a7d3b:         return new XStreamWireFormat();
1:40a7d3b:     }
1:3b4aadc: 
1:5e5458e:     @Override
1:88acb0e:     public Object unmarshalText(String text) {
1:5e5458e:         return getXStream().fromXML(text);
1:40a7d3b:     }
1:e0b23f2: 
1:5e5458e:     @Override
1:540dd5c:     public Object unmarshalText(Reader reader) {
1:8136e67:         Object val = getXStream().fromXML(reader);
1:b9dcb01:         if (val instanceof TransientInitializer) {
1:b9dcb01:             ((TransientInitializer)val).initTransients();
1:8136e67:         }
1:8136e67:         return val;
1:540dd5c:     }
1:540dd5c: 
1:5e5458e:     @Override
1:4b202c1:     public String marshalText(Object command) throws IOException {
1:4b202c1:         if (command instanceof MarshallAware) {
1:4b202c1:             ((MarshallAware)command).beforeMarshall(this);
1:4b202c1:         } else if(command instanceof MessageDispatch) {
1:4b202c1:             MessageDispatch dispatch = (MessageDispatch) command;
1:4b202c1:             if (dispatch != null && dispatch.getMessage() != null) {
1:4b202c1:                 dispatch.getMessage().beforeMarshall(this);
1:4b202c1:             }
1:4b202c1:         }
1:4b202c1: 
1:40a7d3b:         return getXStream().toXML(command);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Can this wireformat process packets of this version
1:5be5a62:      *
1:540dd5c:      * @param version the version number to test
1:40a7d3b:      * @return true if can accept the version
1:40a7d3b:      */
1:40a7d3b:     public boolean canProcessWireFormatVersion(int version) {
1:40a7d3b:         return true;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return the current version of this wire format
1:40a7d3b:      */
1:40a7d3b:     public int getCurrentWireFormatVersion() {
1:40a7d3b:         return 1;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     // Properties
1:40a7d3b:     // -------------------------------------------------------------------------
1:40a7d3b:     public XStream getXStream() {
1:40a7d3b:         if (xStream == null) {
1:40a7d3b:             xStream = createXStream();
1:e0b23f2:             // make it work in OSGi env
1:e0b23f2:             xStream.setClassLoader(getClass().getClassLoader());
1:40a7d3b:         }
1:40a7d3b:         return xStream;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setXStream(XStream xStream) {
1:40a7d3b:         this.xStream = xStream;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     // Implementation methods
1:40a7d3b:     // -------------------------------------------------------------------------
1:40a7d3b:     protected XStream createXStream() {
1:a7e2a44:         final XStream xstream = XStreamSupport.createXStream();
1:5e5458e:         xstream.ignoreUnknownElements();
1:547476d:         xstream.registerConverter(new Converter() {
1:547476d:             final Converter delegate = xstream.getConverterLookup().lookupConverterForType(ByteSequence.class);
1:547476d:             @Override
1:547476d:             public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) {
1:547476d:                 ByteSequence byteSequence = (ByteSequence)o;
1:547476d:                 byteSequence.compact();
1:547476d:                 delegate.marshal(byteSequence, hierarchicalStreamWriter, marshallingContext);
1:547476d:             }
1:547476d: 
1:547476d:             @Override
1:547476d:             public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) {
1:547476d:                 return delegate.unmarshal(hierarchicalStreamReader, unmarshallingContext);
1:547476d:             }
1:547476d: 
1:547476d:             @Override
1:547476d:             public boolean canConvert(Class aClass) {
1:547476d:                 return aClass == ByteSequence.class;
1:547476d:             }
1:547476d:         });
1:5e5458e:         return xstream;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b9dcb01
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.command.TransientInitializer;
/////////////////////////////////////////////////////////////////////////
1:         if (val instanceof TransientInitializer) {
1:             ((TransientInitializer)val).initTransients();
author:gtully
-------------------------------------------------------------------------------
commit:8136e67
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
1:         Object val = getXStream().fromXML(reader);
0:         if (val instanceof ConsumerInfo) {
0:             ((ConsumerInfo)val).initTransients();
1:         }
1:         return val;
commit:547476d
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.converters.Converter;
0: import com.thoughtworks.xstream.converters.ConverterLookup;
1: import com.thoughtworks.xstream.converters.MarshallingContext;
1: import com.thoughtworks.xstream.converters.UnmarshallingContext;
1: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
1: import org.apache.activemq.util.ByteSequence;
/////////////////////////////////////////////////////////////////////////
0:         final XStream xstream = new XStream();
1:         xstream.registerConverter(new Converter() {
1:             final Converter delegate = xstream.getConverterLookup().lookupConverterForType(ByteSequence.class);
1:             @Override
1:             public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) {
1:                 ByteSequence byteSequence = (ByteSequence)o;
1:                 byteSequence.compact();
1:                 delegate.marshal(byteSequence, hierarchicalStreamWriter, marshallingContext);
1:             }
1: 
1:             @Override
1:             public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) {
1:                 return delegate.unmarshal(hierarchicalStreamReader, unmarshallingContext);
1:             }
1: 
1:             @Override
1:             public boolean canConvert(Class aClass) {
1:                 return aClass == ByteSequence.class;
1:             }
1:         });
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a7e2a44
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.stomp.XStreamSupport;
/////////////////////////////////////////////////////////////////////////
1:         final XStream xstream = XStreamSupport.createXStream();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e5458e
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.XStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         return getXStream().fromXML(text);
1:     @Override
0:         return getXStream().fromXML(reader);
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         XStream xstream = new XStream();
1:         xstream.ignoreUnknownElements();
1:         return xstream;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import com.thoughtworks.xstream.XStream;
1: 
/////////////////////////////////////////////////////////////////////////
0:         return (Command)getXStream().fromXML(text);
1:     public Object unmarshalText(Reader reader) {
0:         return (Command)getXStream().fromXML(reader);
1:     }
1: 
0:     public String marshalText(Object command) {
1:      * @param version the version number to test
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Object unmarshalText(String text) {
0:     public Object unmarshalText(Reader reader) {
0: 	public String marshalText(Object command) {
/////////////////////////////////////////////////////////////////////////
1: 	
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
1: 
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.Packet;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.util.TextWireFormat;
1: 
0: import com.thoughtworks.xstream.XStream;
1: 
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.xstream;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.transport.util.TextWireFormat;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.Reader;
1: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e0b23f2
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.io.Reader;
1: 
/////////////////////////////////////////////////////////////////////////
1:             // make it work in OSGi env
1:             xStream.setClassLoader(getClass().getClassLoader());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4b202c1
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import org.apache.activemq.command.MarshallAware;
1: import org.apache.activemq.command.MessageDispatch;
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:     public String marshalText(Object command) throws IOException {
1:         if (command instanceof MarshallAware) {
1:             ((MarshallAware)command).beforeMarshall(this);
1:         } else if(command instanceof MessageDispatch) {
1:             MessageDispatch dispatch = (MessageDispatch) command;
1:             if (dispatch != null && dispatch.getMessage() != null) {
1:                 dispatch.getMessage().beforeMarshall(this);
1:             }
1:         }
1: 
0:      *
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.xstream;
1: 
0: import com.thoughtworks.xstream.XStream;
1: 
0: import org.activeio.Packet;
0: import org.activeio.command.WireFormat;
0: import org.activemq.command.Command;
0: import org.activemq.transport.util.TextWireFormat;
1: 
0: import javax.jms.JMSException;
1: 
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.DataOutput;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.Reader;
1: 
1: /**
1:  * A {@link WireFormat} implementation which uses the <a
1:  * href="http://xstream.codehaus.org/>XStream</a> library to marshall commands
1:  * onto the wire
0:  * 
0:  * @version $Revision$
1:  */
1: public class XStreamWireFormat extends TextWireFormat {
1:     private XStream xStream;
1:     private int version;
1: 
0:     public void marshal(Object command, DataOutputStream out) throws IOException {
0:         String text = getXStream().toXML(command);
0:         out.writeUTF(text);
1:     }
1: 
0:     public Packet marshal(Object command) throws IOException {
0:         return null;
1:     }
1: 
0:     public Object unmarshal(DataInputStream arg0) throws IOException {
0:         return null;
1:     }
1: 
0:     public Object unmarshal(Packet arg0) throws IOException {
0:         return null;
1:     }
1: 
1:     public int getVersion() {
1:         return version;
1:     }
1: 
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1: 
0:     public Packet readPacket(DataInput in) throws IOException {
0:         String text = in.readUTF();
0:         return (Packet) getXStream().fromXML(text);
1:     }
1: 
0:     public Packet readPacket(int firstByte, DataInput in) throws IOException {
0:         String text = in.readUTF();
0:         return (Packet) getXStream().fromXML(text);
1:     }
1: 
0:     public Packet writePacket(Packet packet, DataOutput out) throws IOException, JMSException {
0:         String text = getXStream().toXML(packet);
0:         out.writeUTF(text);
0:         return null;
1:     }
1: 
1:     public WireFormat copy() {
1:         return new XStreamWireFormat();
1:     }
1: 
0:     public String toString(Packet packet) {
0:         return getXStream().toXML(packet);
1:     }
1: 
0:     public Packet fromString(String xml) {
0:         return (Packet) getXStream().fromXML(xml);
1:     }
1: 
0:     public Command readCommand(String text) {
0:         return (Command) getXStream().fromXML(text);
1:     }
1:     
0:     public Command readCommand(Reader reader) {
0:         return (Command) getXStream().fromXML(reader);
1:     }
1: 
0:     public String toString(Command command) {
1:         return getXStream().toXML(command);
1:     }
1: 
1:     /**
1:      * Can this wireformat process packets of this version
0:      * 
0:      * @param version
0:      *            the version number to test
1:      * @return true if can accept the version
1:      */
1:     public boolean canProcessWireFormatVersion(int version) {
1:         return true;
1:     }
1: 
1:     /**
1:      * @return the current version of this wire format
1:      */
1:     public int getCurrentWireFormatVersion() {
1:         return 1;
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public XStream getXStream() {
1:         if (xStream == null) {
1:             xStream = createXStream();
1:         }
1:         return xStream;
1:     }
1: 
1:     public void setXStream(XStream xStream) {
1:         this.xStream = xStream;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected XStream createXStream() {
0:         return new XStream();
1:     }
1: 
1: }
============================================================================