1:6f69f19: /**
1:6f69f19:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f69f19:  * contributor license agreements.  See the NOTICE file distributed with
1:6f69f19:  * this work for additional information regarding copyright ownership.
1:6f69f19:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f69f19:  * (the "License"); you may not use this file except in compliance with
1:6f69f19:  * the License.  You may obtain a copy of the License at
1:6f69f19:  *
1:6f69f19:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6f69f19:  *
1:6f69f19:  * Unless required by applicable law or agreed to in writing, software
1:6f69f19:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f69f19:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f69f19:  * See the License for the specific language governing permissions and
1:6f69f19:  * limitations under the License.
1:6f69f19:  */
1:6f69f19: package org.apache.activemq.bugs;
9:6f69f19: 
1:6f69f19: import javax.jms.Connection;
1:6f69f19: import javax.jms.JMSException;
1:6f69f19: import javax.jms.Message;
1:6f69f19: import javax.jms.MessageConsumer;
1:6f69f19: import javax.jms.MessageListener;
1:6f69f19: import javax.jms.ObjectMessage;
1:6f69f19: import javax.jms.Session;
1:6f69f19: 
1:6f69f19: import junit.framework.TestCase;
1:5219fa1: 
1:6f69f19: import org.apache.activemq.ActiveMQConnectionFactory;
1:6f69f19: import org.apache.activemq.broker.BrokerService;
1:c6ed5ff: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:6f69f19: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6f69f19: 
1:6f69f19: /*
1:6f69f19:  * Try and replicate:
1:6f69f19:  * Caused by: java.io.IOException: Could not locate data file data--188
1:6f69f19:  *  at org.apache.activemq.kaha.impl.async.AsyncDataManager.getDataFile(AsyncDataManager.java:302)
1:6f69f19:  *  at org.apache.activemq.kaha.impl.async.AsyncDataManager.read(AsyncDataManager.java:614)
1:6f69f19:  *  at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:523)
1:6f69f19:  */
1:6f69f19: 
1:6f69f19: public class MissingDataFileTest extends TestCase {
1:6f69f19: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MissingDataFileTest.class);
1:5219fa1: 
1:c6ed5ff:     private static int counter = 500;
1:6f69f19: 
1:6f69f19:     private static int hectorToHaloCtr;
1:6f69f19:     private static int xenaToHaloCtr;
1:6f69f19:     private static int troyToHaloCtr;
1:6f69f19: 
1:6f69f19:     private static int haloToHectorCtr;
1:6f69f19:     private static int haloToXenaCtr;
1:6f69f19:     private static int haloToTroyCtr;
1:6f69f19: 
1:5219fa1:     private final String hectorToHalo = "hectorToHalo";
1:5219fa1:     private final String xenaToHalo = "xenaToHalo";
1:5219fa1:     private final String troyToHalo = "troyToHalo";
1:6f69f19: 
1:5219fa1:     private final String haloToHector = "haloToHector";
1:5219fa1:     private final String haloToXena = "haloToXena";
1:5219fa1:     private final String haloToTroy = "haloToTroy";
1:6f69f19: 
1:6f69f19: 
1:6f69f19:     private BrokerService broker;
1:6f69f19: 
1:6f69f19:     private Connection hectorConnection;
1:6f69f19:     private Connection xenaConnection;
1:6f69f19:     private Connection troyConnection;
1:6f69f19:     private Connection haloConnection;
1:6f69f19: 
1:6f69f19:     private final Object lock = new Object();
1:6f69f19:     final boolean useTopic = false;
1:6f69f19:     final boolean useSleep = true;
1:5219fa1: 
1:6f69f19:     protected static final String payload = new String(new byte[500]);
1:6f69f19: 
1:6f69f19:     public Connection createConnection() throws JMSException {
1:6f69f19:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:6f69f19:         return factory.createConnection();
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public Session createSession(Connection connection, boolean transacted) throws JMSException {
1:6f69f19:         return connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public void startBroker() throws Exception {
1:6f69f19:         broker = new BrokerService();
1:6f69f19:         broker.setDeleteAllMessagesOnStartup(true);
1:6f69f19:         broker.setPersistent(true);
1:6f69f19:         broker.setUseJmx(true);
1:6f69f19:         broker.addConnector("tcp://localhost:61616").setName("Default");
1:5219fa1: 
1:6f69f19:         SystemUsage systemUsage;
1:6f69f19:         systemUsage = new SystemUsage();
1:c6ed5ff:         systemUsage.getMemoryUsage().setLimit(10 * 1024 * 1024); // Just a few messags
1:6f69f19:         broker.setSystemUsage(systemUsage);
1:5219fa1: 
1:c6ed5ff:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:c6ed5ff:         kahaDBPersistenceAdapter.setJournalMaxFileLength(16*1024);
1:c6ed5ff:         kahaDBPersistenceAdapter.setCleanupInterval(500);
1:c6ed5ff:         broker.setPersistenceAdapter(kahaDBPersistenceAdapter);
1:5219fa1: 
1:6f69f19:         broker.start();
1:6f69f19:         LOG.info("Starting broker..");
1:6f69f19:     }
1:6f69f19: 
1:5219fa1:     @Override
1:6f69f19:     public void tearDown() throws Exception {
1:6f69f19:         hectorConnection.close();
1:6f69f19:         xenaConnection.close();
1:6f69f19:         troyConnection.close();
1:6f69f19:         haloConnection.close();
1:6f69f19:         broker.stop();
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public void testForNoDataFoundError() throws Exception {
1:5219fa1: 
1:6f69f19:         startBroker();
1:6f69f19:         hectorConnection = createConnection();
1:6f69f19:         Thread hectorThread = buildProducer(hectorConnection, hectorToHalo, false, useTopic);
1:6f69f19:         Receiver hHectorReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 haloToHectorCtr++;
1:6f69f19:                 if (haloToHectorCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:                 possiblySleep(haloToHectorCtr);
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         buildReceiver(hectorConnection, haloToHector, false, hHectorReceiver, useTopic);
1:6f69f19: 
1:6f69f19:         troyConnection = createConnection();
1:6f69f19:         Thread troyThread = buildProducer(troyConnection, troyToHalo);
1:6f69f19:         Receiver hTroyReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 haloToTroyCtr++;
1:6f69f19:                 if (haloToTroyCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:                 possiblySleep(haloToTroyCtr);
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         buildReceiver(hectorConnection, haloToTroy, false, hTroyReceiver, false);
1:6f69f19: 
1:6f69f19:         xenaConnection = createConnection();
1:6f69f19:         Thread xenaThread = buildProducer(xenaConnection, xenaToHalo);
1:6f69f19:         Receiver hXenaReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 haloToXenaCtr++;
1:6f69f19:                 if (haloToXenaCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:                 possiblySleep(haloToXenaCtr);
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         buildReceiver(xenaConnection, haloToXena, false, hXenaReceiver, false);
1:6f69f19: 
1:6f69f19:         haloConnection = createConnection();
1:6f69f19:         final MessageSender hectorSender = buildTransactionalProducer(haloToHector, haloConnection, false);
1:6f69f19:         final MessageSender troySender = buildTransactionalProducer(haloToTroy, haloConnection, false);
1:6f69f19:         final MessageSender xenaSender = buildTransactionalProducer(haloToXena, haloConnection, false);
1:6f69f19:         Receiver hectorReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 hectorToHaloCtr++;
1:6f69f19:                 troySender.send(payload);
1:6f69f19:                 if (hectorToHaloCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                     possiblySleep(hectorToHaloCtr);
1:6f69f19:                 }
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         Receiver xenaReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 xenaToHaloCtr++;
1:6f69f19:                 hectorSender.send(payload);
1:6f69f19:                 if (xenaToHaloCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:                 possiblySleep(xenaToHaloCtr);
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         Receiver troyReceiver = new Receiver() {
1:5219fa1:             @Override
1:6f69f19:             public void receive(String s) throws Exception {
1:6f69f19:                 troyToHaloCtr++;
1:6f69f19:                 xenaSender.send(payload);
1:6f69f19:                 if (troyToHaloCtr >= counter) {
1:6f69f19:                     synchronized (lock) {
1:6f69f19:                         lock.notifyAll();
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         buildReceiver(haloConnection, hectorToHalo, true, hectorReceiver, false);
1:6f69f19:         buildReceiver(haloConnection, xenaToHalo, true, xenaReceiver, false);
1:6f69f19:         buildReceiver(haloConnection, troyToHalo, true, troyReceiver, false);
1:6f69f19: 
1:6f69f19:         haloConnection.start();
1:6f69f19: 
1:6f69f19:         troyConnection.start();
1:6f69f19:         troyThread.start();
1:6f69f19: 
1:6f69f19:         xenaConnection.start();
1:6f69f19:         xenaThread.start();
1:6f69f19: 
1:6f69f19:         hectorConnection.start();
1:6f69f19:         hectorThread.start();
1:6f69f19:         waitForMessagesToBeDelivered();
1:6f69f19:         // number of messages received should match messages sent
1:6f69f19:         assertEquals(hectorToHaloCtr, counter);
1:6f69f19:         LOG.info("hectorToHalo received " + hectorToHaloCtr + " messages");
1:6f69f19:         assertEquals(xenaToHaloCtr, counter);
1:6f69f19:         LOG.info("xenaToHalo received " + xenaToHaloCtr + " messages");
1:6f69f19:         assertEquals(troyToHaloCtr, counter);
1:6f69f19:         LOG.info("troyToHalo received " + troyToHaloCtr + " messages");
1:6f69f19:         assertEquals(haloToHectorCtr, counter);
1:6f69f19:         LOG.info("haloToHector received " + haloToHectorCtr + " messages");
1:6f69f19:         assertEquals(haloToXenaCtr, counter);
1:6f69f19:         LOG.info("haloToXena received " + haloToXenaCtr + " messages");
1:6f69f19:         assertEquals(haloToTroyCtr, counter);
1:6f69f19:         LOG.info("haloToTroy received " + haloToTroyCtr + " messages");
1:6f69f19: 
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     protected void possiblySleep(int count) throws InterruptedException {
1:6f69f19:         if (useSleep) {
1:6f69f19:             if (count % 100 == 0) {
1:6f69f19:                 Thread.sleep(5000);
1:6f69f19:             }
1:6f69f19:         }
1:5219fa1: 
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     protected void waitForMessagesToBeDelivered() {
1:6f69f19:         // let's give the listeners enough time to read all messages
1:6f69f19:         long maxWaitTime = counter * 1000;
1:6f69f19:         long waitTime = maxWaitTime;
1:6f69f19:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:6f69f19: 
1:6f69f19:         synchronized (lock) {
1:6f69f19:             boolean hasMessages = true;
1:6f69f19:             while (hasMessages && waitTime >= 0) {
1:6f69f19:                 try {
1:6f69f19:                     lock.wait(200);
1:6f69f19:                 } catch (InterruptedException e) {
1:8bf987b:                     LOG.error(e.toString());
1:6f69f19:                 }
1:6f69f19:                 // check if all messages have been received
1:6f69f19:                 hasMessages = hectorToHaloCtr < counter || xenaToHaloCtr < counter || troyToHaloCtr < counter || haloToHectorCtr < counter || haloToXenaCtr < counter
1:6f69f19:                               || haloToTroyCtr < counter;
1:6f69f19:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:6f69f19:             }
1:6f69f19:         }
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public MessageSender buildTransactionalProducer(String queueName, Connection connection, boolean isTopic) throws Exception {
1:6f69f19: 
1:6f69f19:         return new MessageSender(queueName, connection, true, isTopic);
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public Thread buildProducer(Connection connection, final String queueName) throws Exception {
1:6f69f19:         return buildProducer(connection, queueName, false, false);
1:6f69f19:     }
1:5219fa1: 
1:6f69f19:     public Thread buildProducer(Connection connection, final String queueName, boolean transacted, boolean isTopic) throws Exception {
1:6f69f19:         final MessageSender producer = new MessageSender(queueName, connection, transacted, isTopic);
1:6f69f19:         Thread thread = new Thread() {
1:5219fa1:             @Override
1:6f69f19:             public synchronized void run() {
1:6f69f19:                 for (int i = 0; i < counter; i++) {
1:6f69f19:                     try {
1:6f69f19:                         producer.send(payload );
1:6f69f19:                     } catch (Exception e) {
1:6f69f19:                         throw new RuntimeException("on " + queueName + " send", e);
1:6f69f19:                     }
1:6f69f19:                 }
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         return thread;
1:6f69f19:     }
1:6f69f19: 
1:6f69f19:     public void buildReceiver(Connection connection, final String queueName, boolean transacted, final Receiver receiver, boolean isTopic) throws Exception {
1:6f69f19:         final Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6f69f19:         MessageConsumer inputMessageConsumer = session.createConsumer(isTopic ? session.createTopic(queueName) : session.createQueue(queueName));
1:6f69f19:         MessageListener messageListener = new MessageListener() {
1:6f69f19: 
1:5219fa1:             @Override
1:6f69f19:             public void onMessage(Message message) {
1:6f69f19:                 try {
1:6f69f19:                     ObjectMessage objectMessage = (ObjectMessage)message;
1:6f69f19:                     String s = (String)objectMessage.getObject();
1:6f69f19:                     receiver.receive(s);
1:6f69f19:                     if (session.getTransacted()) {
1:6f69f19:                         session.commit();
1:6f69f19:                     }
1:6f69f19: 
1:6f69f19:                 } catch (Exception e) {
1:6f69f19:                     e.printStackTrace();
1:6f69f19:                 }
1:6f69f19:             }
1:6f69f19:         };
1:6f69f19:         inputMessageConsumer.setMessageListener(messageListener);
1:6f69f19:     }
1:6f69f19: 
1:6f69f19: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final String hectorToHalo = "hectorToHalo";
1:     private final String xenaToHalo = "xenaToHalo";
1:     private final String troyToHalo = "troyToHalo";
1:     private final String haloToHector = "haloToHector";
1:     private final String haloToXena = "haloToXena";
1:     private final String haloToTroy = "haloToTroy";
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c6ed5ff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:     private static int counter = 500;
/////////////////////////////////////////////////////////////////////////
1:         systemUsage.getMemoryUsage().setLimit(10 * 1024 * 1024); // Just a few messags
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setJournalMaxFileLength(16*1024);
1:         kahaDBPersistenceAdapter.setCleanupInterval(500);
1:         broker.setPersistenceAdapter(kahaDBPersistenceAdapter);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MissingDataFileTest.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.error(e.toString());
author:Robert Davies
-------------------------------------------------------------------------------
commit:8d4001a
/////////////////////////////////////////////////////////////////////////
0:         systemUsage.getMemoryUsage().setLimit(1024 * 1024); // Just a few messags 
0:         factory.setCleanupInterval(1000); // every few second
commit:6f69f19
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapterFactory;
1: import org.apache.activemq.usage.SystemUsage;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /*
1:  * Try and replicate:
1:  * Caused by: java.io.IOException: Could not locate data file data--188
1:  *  at org.apache.activemq.kaha.impl.async.AsyncDataManager.getDataFile(AsyncDataManager.java:302)
1:  *  at org.apache.activemq.kaha.impl.async.AsyncDataManager.read(AsyncDataManager.java:614)
1:  *  at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:523)
1:  */
1: 
1: public class MissingDataFileTest extends TestCase {
1: 
0:     private static final Log LOG = LogFactory.getLog(MissingDataFileTest.class);
1:     
0:     private static int counter = 300;
1: 
1:     private static int hectorToHaloCtr;
1:     private static int xenaToHaloCtr;
1:     private static int troyToHaloCtr;
1: 
1:     private static int haloToHectorCtr;
1:     private static int haloToXenaCtr;
1:     private static int haloToTroyCtr;
1: 
0:     private String hectorToHalo = "hectorToHalo";
0:     private String xenaToHalo = "xenaToHalo";
0:     private String troyToHalo = "troyToHalo";
1: 
0:     private String haloToHector = "haloToHector";
0:     private String haloToXena = "haloToXena";
0:     private String haloToTroy = "haloToTroy";
1: 
1: 
1:     private BrokerService broker;
1: 
1:     private Connection hectorConnection;
1:     private Connection xenaConnection;
1:     private Connection troyConnection;
1:     private Connection haloConnection;
1: 
1:     private final Object lock = new Object();
1:     final boolean useTopic = false;
1:     final boolean useSleep = true;
1:     
1:     protected static final String payload = new String(new byte[500]);
1: 
1:     public Connection createConnection() throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         return factory.createConnection();
1:     }
1: 
1:     public Session createSession(Connection connection, boolean transacted) throws JMSException {
1:         return connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.addConnector("tcp://localhost:61616").setName("Default");
1:    
1:         SystemUsage systemUsage;
1:         systemUsage = new SystemUsage();
0:         systemUsage.getMemoryUsage().setLimit(1024 * 10); // Just a few messags 
1:         broker.setSystemUsage(systemUsage);
1:         
0:         AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) broker.getPersistenceFactory();
0:         factory.setMaxFileLength(2*1024); // ~4 messages
0:         factory.setCleanupInterval(5000); // every few second
1:         
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         hectorConnection.close();
1:         xenaConnection.close();
1:         troyConnection.close();
1:         haloConnection.close();
1:         broker.stop();
1:     }
1: 
1:     public void testForNoDataFoundError() throws Exception {
1:         
1:         startBroker();
1:         hectorConnection = createConnection();
1:         Thread hectorThread = buildProducer(hectorConnection, hectorToHalo, false, useTopic);
1:         Receiver hHectorReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 haloToHectorCtr++;
1:                 if (haloToHectorCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                 }
1:                 possiblySleep(haloToHectorCtr);
1:             }
1:         };
1:         buildReceiver(hectorConnection, haloToHector, false, hHectorReceiver, useTopic);
1: 
1:         troyConnection = createConnection();
1:         Thread troyThread = buildProducer(troyConnection, troyToHalo);
1:         Receiver hTroyReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 haloToTroyCtr++;
1:                 if (haloToTroyCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                 }
1:                 possiblySleep(haloToTroyCtr);
1:             }
1:         };
1:         buildReceiver(hectorConnection, haloToTroy, false, hTroyReceiver, false);
1: 
1:         xenaConnection = createConnection();
1:         Thread xenaThread = buildProducer(xenaConnection, xenaToHalo);
1:         Receiver hXenaReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 haloToXenaCtr++;
1:                 if (haloToXenaCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                 }
1:                 possiblySleep(haloToXenaCtr);
1:             }
1:         };
1:         buildReceiver(xenaConnection, haloToXena, false, hXenaReceiver, false);
1: 
1:         haloConnection = createConnection();
1:         final MessageSender hectorSender = buildTransactionalProducer(haloToHector, haloConnection, false);
1:         final MessageSender troySender = buildTransactionalProducer(haloToTroy, haloConnection, false);
1:         final MessageSender xenaSender = buildTransactionalProducer(haloToXena, haloConnection, false);
1:         Receiver hectorReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 hectorToHaloCtr++;
1:                 troySender.send(payload);
1:                 if (hectorToHaloCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                     possiblySleep(hectorToHaloCtr);
1:                 }
1:             }
1:         };
1:         Receiver xenaReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 xenaToHaloCtr++;
1:                 hectorSender.send(payload);
1:                 if (xenaToHaloCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                 }
1:                 possiblySleep(xenaToHaloCtr);
1:             }
1:         };
1:         Receiver troyReceiver = new Receiver() {
1:             public void receive(String s) throws Exception {
1:                 troyToHaloCtr++;
1:                 xenaSender.send(payload);
1:                 if (troyToHaloCtr >= counter) {
1:                     synchronized (lock) {
1:                         lock.notifyAll();
1:                     }
1:                 }
1:             }
1:         };
1:         buildReceiver(haloConnection, hectorToHalo, true, hectorReceiver, false);
1:         buildReceiver(haloConnection, xenaToHalo, true, xenaReceiver, false);
1:         buildReceiver(haloConnection, troyToHalo, true, troyReceiver, false);
1: 
1:         haloConnection.start();
1: 
1:         troyConnection.start();
1:         troyThread.start();
1: 
1:         xenaConnection.start();
1:         xenaThread.start();
1: 
1:         hectorConnection.start();
1:         hectorThread.start();
1:         waitForMessagesToBeDelivered();
1:         // number of messages received should match messages sent
1:         assertEquals(hectorToHaloCtr, counter);
1:         LOG.info("hectorToHalo received " + hectorToHaloCtr + " messages");
1:         assertEquals(xenaToHaloCtr, counter);
1:         LOG.info("xenaToHalo received " + xenaToHaloCtr + " messages");
1:         assertEquals(troyToHaloCtr, counter);
1:         LOG.info("troyToHalo received " + troyToHaloCtr + " messages");
1:         assertEquals(haloToHectorCtr, counter);
1:         LOG.info("haloToHector received " + haloToHectorCtr + " messages");
1:         assertEquals(haloToXenaCtr, counter);
1:         LOG.info("haloToXena received " + haloToXenaCtr + " messages");
1:         assertEquals(haloToTroyCtr, counter);
1:         LOG.info("haloToTroy received " + haloToTroyCtr + " messages");
1: 
1:     }
1: 
1:     protected void possiblySleep(int count) throws InterruptedException {
1:         if (useSleep) {
1:             if (count % 100 == 0) {
1:                 Thread.sleep(5000);
1:             }
1:         }
1:         
1:     }
1: 
1:     protected void waitForMessagesToBeDelivered() {
1:         // let's give the listeners enough time to read all messages
1:         long maxWaitTime = counter * 1000;
1:         long waitTime = maxWaitTime;
1:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1: 
1:         synchronized (lock) {
1:             boolean hasMessages = true;
1:             while (hasMessages && waitTime >= 0) {
1:                 try {
1:                     lock.wait(200);
1:                 } catch (InterruptedException e) {
0:                     LOG.error(e);
1:                 }
1:                 // check if all messages have been received
1:                 hasMessages = hectorToHaloCtr < counter || xenaToHaloCtr < counter || troyToHaloCtr < counter || haloToHectorCtr < counter || haloToXenaCtr < counter
1:                               || haloToTroyCtr < counter;
1:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:             }
1:         }
1:     }
1: 
1:     public MessageSender buildTransactionalProducer(String queueName, Connection connection, boolean isTopic) throws Exception {
1: 
1:         return new MessageSender(queueName, connection, true, isTopic);
1:     }
1: 
1:     public Thread buildProducer(Connection connection, final String queueName) throws Exception {
1:         return buildProducer(connection, queueName, false, false);
1:     }
1:     
1:     public Thread buildProducer(Connection connection, final String queueName, boolean transacted, boolean isTopic) throws Exception {
1:         final MessageSender producer = new MessageSender(queueName, connection, transacted, isTopic);
1:         Thread thread = new Thread() {
1:             public synchronized void run() {
1:                 for (int i = 0; i < counter; i++) {
1:                     try {
1:                         producer.send(payload );
1:                     } catch (Exception e) {
1:                         throw new RuntimeException("on " + queueName + " send", e);
1:                     }
1:                 }
1:             }
1:         };
1:         return thread;
1:     }
1: 
1:     public void buildReceiver(Connection connection, final String queueName, boolean transacted, final Receiver receiver, boolean isTopic) throws Exception {
1:         final Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer inputMessageConsumer = session.createConsumer(isTopic ? session.createTopic(queueName) : session.createQueue(queueName));
1:         MessageListener messageListener = new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 try {
1:                     ObjectMessage objectMessage = (ObjectMessage)message;
1:                     String s = (String)objectMessage.getObject();
1:                     receiver.receive(s);
1:                     if (session.getTransacted()) {
1:                         session.commit();
1:                     }
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1:         inputMessageConsumer.setMessageListener(messageListener);
1:     }
1: 
1: }
============================================================================