1:b65c0d1: /**
1:b65c0d1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b65c0d1:  * contributor license agreements.  See the NOTICE file distributed with
1:b65c0d1:  * this work for additional information regarding copyright ownership.
1:b65c0d1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b65c0d1:  * (the "License"); you may not use this file except in compliance with
1:b65c0d1:  * the License.  You may obtain a copy of the License at
1:b65c0d1:  *
1:b65c0d1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b65c0d1:  *
1:b65c0d1:  * Unless required by applicable law or agreed to in writing, software
1:b65c0d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b65c0d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b65c0d1:  * See the License for the specific language governing permissions and
1:b65c0d1:  * limitations under the License.
1:b65c0d1:  */
1:b65c0d1: 
1:b65c0d1: package org.apache.activemq.jms.pool;
1:b65c0d1: 
1:b65c0d1: import static org.junit.Assert.assertNotSame;
1:b65c0d1: import static org.junit.Assert.assertTrue;
1:b65c0d1: import static org.junit.Assert.fail;
1:b65c0d1: 
1:b65c0d1: import java.util.concurrent.CountDownLatch;
1:b65c0d1: import java.util.concurrent.TimeUnit;
1:b65c0d1: 
1:b65c0d1: import javax.jms.Connection;
1:b65c0d1: import javax.jms.ExceptionListener;
1:b65c0d1: import javax.jms.JMSException;
1:b65c0d1: import javax.jms.MessageProducer;
1:b65c0d1: import javax.jms.Queue;
1:b65c0d1: import javax.jms.Session;
1:b65c0d1: 
1:b65c0d1: import org.apache.activemq.ActiveMQConnectionFactory;
1:b65c0d1: import org.apache.activemq.broker.BrokerService;
1:b65c0d1: import org.apache.activemq.broker.TransportConnector;
1:27ce49f: import org.junit.After;
1:b65c0d1: import org.junit.Before;
1:b65c0d1: import org.junit.Test;
1:b65c0d1: 
1:b65c0d1: public class PooledConnectionFailoverTest extends JmsPoolTestSupport {
1:b65c0d1: 
1:b65c0d1:     protected ActiveMQConnectionFactory directConnFact;
1:b65c0d1:     protected PooledConnectionFactory pooledConnFact;
1:b65c0d1: 
1:b65c0d1:     @Override
1:b65c0d1:     @Before
1:b65c0d1:     public void setUp() throws java.lang.Exception {
1:b65c0d1:         super.setUp();
1:b65c0d1: 
1:b65c0d1:         String connectionURI = createBroker();
1:b65c0d1: 
1:b65c0d1:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:b65c0d1:         directConnFact = new ActiveMQConnectionFactory(connectionURI);
1:b65c0d1:         pooledConnFact = new PooledConnectionFactory();
1:b65c0d1:         pooledConnFact.setConnectionFactory(directConnFact);
1:b65c0d1:         pooledConnFact.setMaxConnections(1);
1:b65c0d1:         pooledConnFact.setReconnectOnException(true);
1:b65c0d1:     }
1:b65c0d1: 
1:27ce49f:     @Override
1:27ce49f:     @After
1:27ce49f:     public void tearDown() throws Exception {
1:27ce49f:         try {
1:27ce49f:             pooledConnFact.stop();
1:27ce49f:         } catch (Exception ex) {
1:27ce49f:             // ignored
1:27ce49f:         }
1:27ce49f: 
1:27ce49f:         super.tearDown();
1:27ce49f:     }
1:27ce49f: 
1:b65c0d1:     @Test
1:b65c0d1:     public void testConnectionFailures() throws Exception {
1:b65c0d1: 
1:b65c0d1:         final CountDownLatch failed = new CountDownLatch(1);
1:b65c0d1: 
1:b65c0d1:         Connection connection = pooledConnFact.createConnection();
1:b65c0d1:         LOG.info("Fetched new connection from the pool: {}", connection);
1:b65c0d1:         connection.setExceptionListener(new ExceptionListener() {
1:b65c0d1: 
1:b65c0d1:             @Override
1:b65c0d1:             public void onException(JMSException exception) {
1:b65c0d1:                 LOG.info("Pooled Connection failed");
1:b65c0d1:                 failed.countDown();
1:b65c0d1:             }
1:b65c0d1:         });
1:b65c0d1: 
1:b65c0d1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b65c0d1:         Queue queue = session.createQueue(getTestName());
1:b65c0d1:         MessageProducer producer = session.createProducer(queue);
1:b65c0d1: 
1:b65c0d1:         brokerService.stop();
1:b65c0d1: 
1:b65c0d1:         assertTrue(failed.await(15, TimeUnit.SECONDS));
1:b65c0d1: 
1:b65c0d1:         createBroker();
1:b65c0d1: 
1:b65c0d1:         try {
1:b65c0d1:             producer.send(session.createMessage());
1:b65c0d1:             fail("Should be disconnected");
1:b65c0d1:         } catch (JMSException ex) {
1:b65c0d1:             LOG.info("Producer failed as expected: {}", ex.getMessage());
1:b65c0d1:         }
1:b65c0d1: 
1:b65c0d1:         Connection connection2 = pooledConnFact.createConnection();
1:b65c0d1:         assertNotSame(connection, connection2);
1:b65c0d1:         LOG.info("Fetched new connection from the pool: {}", connection2);
1:b65c0d1:         session = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b65c0d1: 
1:b65c0d1:         connection2.close();
1:b65c0d1: 
1:b65c0d1:         pooledConnFact.stop();
1:b65c0d1:     }
1:b65c0d1: 
1:b65c0d1:     private String createBroker() throws Exception {
1:b65c0d1:         brokerService = new BrokerService();
1:b65c0d1:         brokerService.setBrokerName("PooledConnectionSessionCleanupTestBroker");
1:b65c0d1:         brokerService.setUseJmx(true);
1:b65c0d1:         brokerService.getManagementContext().setCreateConnector(false);
1:b65c0d1:         brokerService.setPersistent(false);
1:b65c0d1:         brokerService.setSchedulerSupport(false);
1:b65c0d1:         brokerService.setAdvisorySupport(false);
1:b65c0d1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:61626");
1:b65c0d1:         brokerService.start();
1:b65c0d1:         brokerService.waitUntilStarted();
1:b65c0d1: 
1:b65c0d1:         return "failover:(" + connector.getPublishableConnectString() + ")?maxReconnectAttempts=5";
1:b65c0d1:     }
1:b65c0d1: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             pooledConnFact.stop();
1:         } catch (Exception ex) {
1:             // ignored
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
commit:b65c0d1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.jms.pool;
1: 
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class PooledConnectionFailoverTest extends JmsPoolTestSupport {
1: 
1:     protected ActiveMQConnectionFactory directConnFact;
1:     protected PooledConnectionFactory pooledConnFact;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws java.lang.Exception {
1:         super.setUp();
1: 
1:         String connectionURI = createBroker();
1: 
1:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:         directConnFact = new ActiveMQConnectionFactory(connectionURI);
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(directConnFact);
1:         pooledConnFact.setMaxConnections(1);
1:         pooledConnFact.setReconnectOnException(true);
1:     }
1: 
1:     @Test
1:     public void testConnectionFailures() throws Exception {
1: 
1:         final CountDownLatch failed = new CountDownLatch(1);
1: 
1:         Connection connection = pooledConnFact.createConnection();
1:         LOG.info("Fetched new connection from the pool: {}", connection);
1:         connection.setExceptionListener(new ExceptionListener() {
1: 
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.info("Pooled Connection failed");
1:                 failed.countDown();
1:             }
1:         });
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getTestName());
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         brokerService.stop();
1: 
1:         assertTrue(failed.await(15, TimeUnit.SECONDS));
1: 
1:         createBroker();
1: 
1:         try {
1:             producer.send(session.createMessage());
1:             fail("Should be disconnected");
1:         } catch (JMSException ex) {
1:             LOG.info("Producer failed as expected: {}", ex.getMessage());
1:         }
1: 
1:         Connection connection2 = pooledConnFact.createConnection();
1:         assertNotSame(connection, connection2);
1:         LOG.info("Fetched new connection from the pool: {}", connection2);
1:         session = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         connection2.close();
1: 
1:         pooledConnFact.stop();
1:     }
1: 
1:     private String createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setBrokerName("PooledConnectionSessionCleanupTestBroker");
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setAdvisorySupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:61626");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         return "failover:(" + connector.getPublishableConnectString() + ")?maxReconnectAttempts=5";
1:     }
1: }
============================================================================