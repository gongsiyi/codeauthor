1:3f32507: /*
1:3f32507:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:3f32507:  *
1:3f32507:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f32507:  * you may not use this file except in compliance with the License.
1:3f32507:  * You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Writing a JMS Application using Publish and Subscribe with
1:3f32507: Hierarchical Topics
1:3f32507: 
1:3f32507: This sample publishes and subscribes to specified topic nodes.
1:3f32507: Text you enter is published and then received by all subscribers to
1:3f32507: the that topic on the specified broker.
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java HierarchicalChat -b <broker:port> -u <username> -p <password> -t <pubTopicname> -s <subTopicname>
1:3f32507:       -b broker:port        points to a message broker
1:3f32507:                             Default: tcp://localhost:61616
1:3f32507:       -u username           must be unique (but is not checked)
1:3f32507:       -p password           password for user (not checked)
1:3f32507:       -t pubTopicname     	name of topic to which to publish
1:3f32507:                             Default: jms.samples.hierarchicalchat
1:3f32507:       -s subTopicname	    name of topic to which to subscribe
1:3f32507:                             Default: jms.samples.*
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - In separate console windows with the environment set,
1:3f32507:     start instances of the application
1:3f32507:     under unique user names.
1:3f32507:     For example:
1:3f32507:        java HierarchicalChat -u SALES -t sales -s sales.*
1:3f32507:        java HierarchicalChat -u USA -t sales.usa -s sales.usa
1:3f32507:   - Enter text in the USA console window and then press Enter
1:3f32507:     to publish the message.
1:3f32507:   - Note that messages published from the SALES console window
1:3f32507:     to the sales topic are not seen by the USA user listening
1:3f32507:     to messages on the sales.usa topic
1:3f32507:   - Message published to the sales.usa are received by the SALES
1:3f32507:     user listening to sales.*
1:3f32507:   - Stop a session by pressing CTRL+C in its console window.
1:3f32507: 
1:3f32507: */
1:3f32507: 
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: 
1:3f32507: public class HierarchicalChat
1:3f32507:     implements javax.jms.MessageListener
1:3f32507: {
1:3f32507:     private static final String DEFAULT_PUBLISHER_TOPIC = "jms.samples.hierarchicalchat";
1:3f32507:     private static final String DEFAULT_SUBSCRIBER_TOPIC = "jms.samples.*";
1:3f32507:     private static final String DEFAULT_SUBSCRIBER_ROOT = "jms.samples";
1:3f32507:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:3f32507: 
1:3f32507:     private static final String DEFAULT_PASSWORD = "password";
1:3f32507: 
1:3f32507:     private javax.jms.Connection connect = null;
1:3f32507:     private javax.jms.Session pubSession = null;
1:3f32507:     private javax.jms.Session subSession = null;
1:3f32507:     private javax.jms.MessageProducer publisher = null;
1:3f32507: 
1:3f32507:     /** Create JMS client for publishing and subscribing to messages. */
1:3f32507:     private void chatter( String broker, String username, String password, String pubTopicname, String subTopicname)
1:3f32507:     {
1:3f32507: 
1:3f32507:         // Create a connection.
1:3f32507:         try
1:3f32507:         {
1:3f32507:             javax.jms.ConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507:             connect = factory.createConnection (username, password);
1:3f32507:             pubSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:             subSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("error: Cannot connect to Broker - " + broker);
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Create Publisher and Subscriber to 'chat' topics
1:3f32507:         // Note that the publish and subscribe topics are different.
1:3f32507:         try
1:3f32507:         {
1:3f32507:             javax.jms.Topic subscriberTopic = pubSession.createTopic (subTopicname);
1:3f32507:             javax.jms.MessageConsumer subscriber = subSession.createConsumer(subscriberTopic, null, false);
1:3f32507:             subscriber.setMessageListener(this);
1:3f32507:             javax.jms.Topic publisherTopic = pubSession.createTopic (pubTopicname);
1:3f32507:             publisher = pubSession.createProducer(publisherTopic);
1:3f32507:             // Now that setup is complete, start the Connection
1:3f32507:             connect.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507:         try
1:3f32507:         {
1:3f32507:             // Read all standard input and send it as a message.
1:3f32507:             java.io.BufferedReader stdin =
1:3f32507:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:3f32507:                         System.out.println("\nHierarchicalChat application:\n"
1:3f32507: 			            					+ "============================\n"
1:3f32507: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1:3f32507: 											+ "The application will publish messages to the " + DEFAULT_PUBLISHER_TOPIC + " topic." + ".\n"
1:3f32507: 			                                + "The application also subscribes to topics using the wildcard syntax " + DEFAULT_SUBSCRIBER_TOPIC 
1:3f32507: 											+ " so that it can receive all messages to " + DEFAULT_SUBSCRIBER_ROOT + " and its subtopics.\n\n"
1:3f32507: 			                                + "Type some text, and then press Enter to publish a TextMesssage from " + username + ".\n");
1:3f32507:             while ( true )
1:3f32507:             {
1:3f32507:                 String s = stdin.readLine();
1:3f32507: 
1:3f32507:                 if ( s == null )
1:3f32507:                     exit();
1:3f32507:                 else if ( s.length() > 0 )
1:3f32507:                 {
1:3f32507:                     javax.jms.TextMessage msg = pubSession.createTextMessage();
1:3f32507:                     msg.setText( username + ": " + s );
1:3f32507:                     publisher.send( msg );
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch ( java.io.IOException ioe )
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:         catch ( javax.jms.JMSException jmse )
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Handle the message
1:3f32507:      * (as specified in the javax.jms.MessageListener interface).
1:3f32507:      */
1:3f32507:     public void onMessage( javax.jms.Message aMessage)
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             // Cast the message as a text message.
1:3f32507:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1:3f32507: 
1:3f32507:             // This handler reads a single String from the
1:3f32507:             // message and prints it to the standard output.
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 String string = textMessage.getText();
1:3f32507:                 System.out.println( string );
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch (java.lang.RuntimeException rte)
1:3f32507:         {
1:3f32507:             rte.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Cleanup resources and then exit. */
1:3f32507:     private void exit()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connect.close();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.exit(0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     //
1:3f32507:     // NOTE: the remainder of this sample deals with reading arguments
1:3f32507:     // and does not utilize any JMS classes or code.
1:3f32507:     //
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String argv[]) {
1:3f32507: 
1:3f32507:         // Is there anything to do?
1:3f32507:         if (argv.length == 0) {
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Values to be read from parameters
1:3f32507:         String broker    = DEFAULT_BROKER_NAME;
1:3f32507:         String username  = null;
1:3f32507:         String password  = DEFAULT_PASSWORD;
1:3f32507:         String pubTopicname = DEFAULT_PUBLISHER_TOPIC;
1:3f32507:         String subTopicname = DEFAULT_SUBSCRIBER_TOPIC;
1:3f32507: 
1:3f32507:         // Check parameters
1:3f32507:         for (int i = 0; i < argv.length; i++) {
1:3f32507:             String arg = argv[i];
1:3f32507: 
1:3f32507:             // Options
1:3f32507:             if (!arg.startsWith("-")) {
1:3f32507:                 System.err.println ("error: unexpected argument - "+arg);
1:3f32507:                 printUsage();
1:3f32507:                 System.exit(1);
1:3f32507:             }
1:3f32507:             else {
1:3f32507:                 if (arg.equals("-b")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing broker name:port");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     broker = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-u")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing user name");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     username = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-p")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing password");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     password = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507:                 if (arg.equals("-t")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing publisher topic name");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     pubTopicname = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-s")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing subscriber topic name");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     subTopicname = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-h")) {
1:3f32507:                     printUsage();
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Check values read in.
1:3f32507:         if (username == null) {
1:3f32507:             System.err.println ("error: user name must be supplied");
1:3f32507:             printUsage();
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Start the JMS client for the "chat".
1:3f32507:         HierarchicalChat chat = new HierarchicalChat();
1:3f32507:         chat.chatter (broker, username, password, pubTopicname, subTopicname);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage() {
1:3f32507: 
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("usage: java HierarchicalChat (options) ...\n\n");
1:3f32507:         use.append("options:\n");
1:3f32507:         use.append("  -b name:port          Specify name:port of broker.\n");
1:3f32507:         use.append("                        Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:3f32507:         use.append("  -u name               Specify unique user name. (Required)\n");
1:3f32507:         use.append("  -p password           Specify password for user.\n");
1:3f32507:         use.append("                        Default password: "+DEFAULT_PASSWORD+"\n");
1:3f32507:         use.append("  -t pubTopicname       name of topic to which to publish.\n");
1:3f32507:         use.append("                        Default publisher topic name: "+DEFAULT_PUBLISHER_TOPIC+"\n");
1:3f32507:         use.append("  -s subTopicname       Specify subscriber topic name.\n");
1:3f32507:         use.append("                        name of topic to which to subscribe: "+DEFAULT_SUBSCRIBER_TOPIC+"\n");
1:3f32507:         use.append("  -h                    This help screen.\n");
1:3f32507:         System.err.println (use);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
1:3f32507: 
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  
1: Sample Application
1: 
1: Writing a JMS Application using Publish and Subscribe with
1: Hierarchical Topics
1: 
1: This sample publishes and subscribes to specified topic nodes.
1: Text you enter is published and then received by all subscribers to
1: the that topic on the specified broker.
1: 
1: Usage:
1:   java HierarchicalChat -b <broker:port> -u <username> -p <password> -t <pubTopicname> -s <subTopicname>
1:       -b broker:port        points to a message broker
1:                             Default: tcp://localhost:61616
1:       -u username           must be unique (but is not checked)
1:       -p password           password for user (not checked)
1:       -t pubTopicname     	name of topic to which to publish
1:                             Default: jms.samples.hierarchicalchat
1:       -s subTopicname	    name of topic to which to subscribe
1:                             Default: jms.samples.*
1: 
1: Suggested demonstration:
1:   - In separate console windows with the environment set,
1:     start instances of the application
1:     under unique user names.
1:     For example:
1:        java HierarchicalChat -u SALES -t sales -s sales.*
1:        java HierarchicalChat -u USA -t sales.usa -s sales.usa
1:   - Enter text in the USA console window and then press Enter
1:     to publish the message.
1:   - Note that messages published from the SALES console window
1:     to the sales topic are not seen by the USA user listening
1:     to messages on the sales.usa topic
1:   - Message published to the sales.usa are received by the SALES
1:     user listening to sales.*
1:   - Stop a session by pressing CTRL+C in its console window.
1: 
1: */
1: 
1: import org.apache.activemq.*;
1: 
1: 
1: public class HierarchicalChat
1:     implements javax.jms.MessageListener
1: {
1:     private static final String DEFAULT_PUBLISHER_TOPIC = "jms.samples.hierarchicalchat";
1:     private static final String DEFAULT_SUBSCRIBER_TOPIC = "jms.samples.*";
1:     private static final String DEFAULT_SUBSCRIBER_ROOT = "jms.samples";
1:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1: 
1:     private static final String DEFAULT_PASSWORD = "password";
1: 
1:     private javax.jms.Connection connect = null;
1:     private javax.jms.Session pubSession = null;
1:     private javax.jms.Session subSession = null;
1:     private javax.jms.MessageProducer publisher = null;
1: 
1:     /** Create JMS client for publishing and subscribing to messages. */
1:     private void chatter( String broker, String username, String password, String pubTopicname, String subTopicname)
1:     {
1: 
1:         // Create a connection.
1:         try
1:         {
1:             javax.jms.ConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:             connect = factory.createConnection (username, password);
1:             pubSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:             subSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("error: Cannot connect to Broker - " + broker);
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         // Create Publisher and Subscriber to 'chat' topics
1:         // Note that the publish and subscribe topics are different.
1:         try
1:         {
1:             javax.jms.Topic subscriberTopic = pubSession.createTopic (subTopicname);
1:             javax.jms.MessageConsumer subscriber = subSession.createConsumer(subscriberTopic, null, false);
1:             subscriber.setMessageListener(this);
1:             javax.jms.Topic publisherTopic = pubSession.createTopic (pubTopicname);
1:             publisher = pubSession.createProducer(publisherTopic);
1:             // Now that setup is complete, start the Connection
1:             connect.start();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1:         try
1:         {
1:             // Read all standard input and send it as a message.
1:             java.io.BufferedReader stdin =
1:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:                         System.out.println("\nHierarchicalChat application:\n"
1: 			            					+ "============================\n"
1: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1: 											+ "The application will publish messages to the " + DEFAULT_PUBLISHER_TOPIC + " topic." + ".\n"
1: 			                                + "The application also subscribes to topics using the wildcard syntax " + DEFAULT_SUBSCRIBER_TOPIC 
1: 											+ " so that it can receive all messages to " + DEFAULT_SUBSCRIBER_ROOT + " and its subtopics.\n\n"
1: 			                                + "Type some text, and then press Enter to publish a TextMesssage from " + username + ".\n");
1:             while ( true )
1:             {
1:                 String s = stdin.readLine();
1: 
1:                 if ( s == null )
1:                     exit();
1:                 else if ( s.length() > 0 )
1:                 {
1:                     javax.jms.TextMessage msg = pubSession.createTextMessage();
1:                     msg.setText( username + ": " + s );
1:                     publisher.send( msg );
1:                 }
1:             }
1:         }
1:         catch ( java.io.IOException ioe )
1:         {
1:             ioe.printStackTrace();
1:         }
1:         catch ( javax.jms.JMSException jmse )
1:         {
1:             jmse.printStackTrace();
1:         }
1:     }
1: 
1:     /**
1:      * Handle the message
1:      * (as specified in the javax.jms.MessageListener interface).
1:      */
1:     public void onMessage( javax.jms.Message aMessage)
1:     {
1:         try
1:         {
1:             // Cast the message as a text message.
1:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1: 
1:             // This handler reads a single String from the
1:             // message and prints it to the standard output.
1:             try
1:             {
1:                 String string = textMessage.getText();
1:                 System.out.println( string );
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1:         catch (java.lang.RuntimeException rte)
1:         {
1:             rte.printStackTrace();
1:         }
1:     }
1: 
1:     /** Cleanup resources and then exit. */
1:     private void exit()
1:     {
1:         try
1:         {
1:             connect.close();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1: 
1:         System.exit(0);
1:     }
1: 
1:     //
1:     // NOTE: the remainder of this sample deals with reading arguments
1:     // and does not utilize any JMS classes or code.
1:     //
1: 
1:     /** Main program entry point. */
1:     public static void main(String argv[]) {
1: 
1:         // Is there anything to do?
1:         if (argv.length == 0) {
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         // Values to be read from parameters
1:         String broker    = DEFAULT_BROKER_NAME;
1:         String username  = null;
1:         String password  = DEFAULT_PASSWORD;
1:         String pubTopicname = DEFAULT_PUBLISHER_TOPIC;
1:         String subTopicname = DEFAULT_SUBSCRIBER_TOPIC;
1: 
1:         // Check parameters
1:         for (int i = 0; i < argv.length; i++) {
1:             String arg = argv[i];
1: 
1:             // Options
1:             if (!arg.startsWith("-")) {
1:                 System.err.println ("error: unexpected argument - "+arg);
1:                 printUsage();
1:                 System.exit(1);
1:             }
1:             else {
1:                 if (arg.equals("-b")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing broker name:port");
1:                         System.exit(1);
1:                     }
1:                     broker = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-u")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing user name");
1:                         System.exit(1);
1:                     }
1:                     username = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-p")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing password");
1:                         System.exit(1);
1:                     }
1:                     password = argv[++i];
1:                     continue;
1:                 }
1:                 if (arg.equals("-t")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing publisher topic name");
1:                         System.exit(1);
1:                     }
1:                     pubTopicname = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-s")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing subscriber topic name");
1:                         System.exit(1);
1:                     }
1:                     subTopicname = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-h")) {
1:                     printUsage();
1:                     System.exit(1);
1:                 }
1:             }
1:         }
1: 
1:         // Check values read in.
1:         if (username == null) {
1:             System.err.println ("error: user name must be supplied");
1:             printUsage();
1:         }
1: 
1:         // Start the JMS client for the "chat".
1:         HierarchicalChat chat = new HierarchicalChat();
1:         chat.chatter (broker, username, password, pubTopicname, subTopicname);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage() {
1: 
1:         StringBuffer use = new StringBuffer();
1:         use.append("usage: java HierarchicalChat (options) ...\n\n");
1:         use.append("options:\n");
1:         use.append("  -b name:port          Specify name:port of broker.\n");
1:         use.append("                        Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:         use.append("  -u name               Specify unique user name. (Required)\n");
1:         use.append("  -p password           Specify password for user.\n");
1:         use.append("                        Default password: "+DEFAULT_PASSWORD+"\n");
1:         use.append("  -t pubTopicname       name of topic to which to publish.\n");
1:         use.append("                        Default publisher topic name: "+DEFAULT_PUBLISHER_TOPIC+"\n");
1:         use.append("  -s subTopicname       Specify subscriber topic name.\n");
1:         use.append("                        name of topic to which to subscribe: "+DEFAULT_SUBSCRIBER_TOPIC+"\n");
1:         use.append("  -h                    This help screen.\n");
1:         System.err.println (use);
1:     }
1: 
1: }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  
0: Sample Application
0: 
0: Writing a JMS Application using Publish and Subscribe with
0: Hierarchical Topics
0: 
0: This sample publishes and subscribes to specified topic nodes.
0: Text you enter is published and then received by all subscribers to
0: the that topic on the specified broker.
0: 
0: Usage:
0:   java HierarchicalChat -b <broker:port> -u <username> -p <password> -t <pubTopicname> -s <subTopicname>
0:       -b broker:port        points to a message broker
0:                             Default: tcp://localhost:61616
0:       -u username           must be unique (but is not checked)
0:       -p password           password for user (not checked)
0:       -t pubTopicname     	name of topic to which to publish
0:                             Default: jms.samples.hierarchicalchat
0:       -s subTopicname	    name of topic to which to subscribe
0:                             Default: jms.samples.*
0: 
0: Suggested demonstration:
0:   - In separate console windows with the environment set,
0:     start instances of the application
0:     under unique user names.
0:     For example:
0:        java HierarchicalChat -u SALES -t sales -s sales.*
0:        java HierarchicalChat -u USA -t sales.usa -s sales.usa
0:   - Enter text in the USA console window and then press Enter
0:     to publish the message.
0:   - Note that messages published from the SALES console window
0:     to the sales topic are not seen by the USA user listening
0:     to messages on the sales.usa topic
0:   - Message published to the sales.usa are received by the SALES
0:     user listening to sales.*
0:   - Stop a session by pressing CTRL+C in its console window.
0: 
0: */
0: 
0: import org.apache.activemq.*;
0: 
0: 
0: public class HierarchicalChat
0:     implements javax.jms.MessageListener
0: {
0:     private static final String DEFAULT_PUBLISHER_TOPIC = "jms.samples.hierarchicalchat";
0:     private static final String DEFAULT_SUBSCRIBER_TOPIC = "jms.samples.*";
0:     private static final String DEFAULT_SUBSCRIBER_ROOT = "jms.samples";
0:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
0: 
0:     private static final String DEFAULT_PASSWORD = "password";
0: 
0:     private javax.jms.Connection connect = null;
0:     private javax.jms.Session pubSession = null;
0:     private javax.jms.Session subSession = null;
0:     private javax.jms.MessageProducer publisher = null;
0: 
0:     /** Create JMS client for publishing and subscribing to messages. */
0:     private void chatter( String broker, String username, String password, String pubTopicname, String subTopicname)
0:     {
0: 
0:         // Create a connection.
0:         try
0:         {
0:             javax.jms.ConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0:             connect = factory.createConnection (username, password);
0:             pubSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:             subSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("error: Cannot connect to Broker - " + broker);
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         // Create Publisher and Subscriber to 'chat' topics
0:         // Note that the publish and subscribe topics are different.
0:         try
0:         {
0:             javax.jms.Topic subscriberTopic = pubSession.createTopic (subTopicname);
0:             javax.jms.MessageConsumer subscriber = subSession.createConsumer(subscriberTopic, null, false);
0:             subscriber.setMessageListener(this);
0:             javax.jms.Topic publisherTopic = pubSession.createTopic (pubTopicname);
0:             publisher = pubSession.createProducer(publisherTopic);
0:             // Now that setup is complete, start the Connection
0:             connect.start();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0:         try
0:         {
0:             // Read all standard input and send it as a message.
0:             java.io.BufferedReader stdin =
0:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
0:                         System.out.println("\nHierarchicalChat application:\n"
0: 			            					+ "============================\n"
0: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
0: 											+ "The application will publish messages to the " + DEFAULT_PUBLISHER_TOPIC + " topic." + ".\n"
0: 			                                + "The application also subscribes to topics using the wildcard syntax " + DEFAULT_SUBSCRIBER_TOPIC 
0: 											+ " so that it can receive all messages to " + DEFAULT_SUBSCRIBER_ROOT + " and its subtopics.\n\n"
0: 			                                + "Type some text, and then press Enter to publish a TextMesssage from " + username + ".\n");
0:             while ( true )
0:             {
0:                 String s = stdin.readLine();
0: 
0:                 if ( s == null )
0:                     exit();
0:                 else if ( s.length() > 0 )
0:                 {
0:                     javax.jms.TextMessage msg = pubSession.createTextMessage();
0:                     msg.setText( username + ": " + s );
0:                     publisher.send( msg );
0:                 }
0:             }
0:         }
0:         catch ( java.io.IOException ioe )
0:         {
0:             ioe.printStackTrace();
0:         }
0:         catch ( javax.jms.JMSException jmse )
0:         {
0:             jmse.printStackTrace();
0:         }
0:     }
0: 
0:     /**
0:      * Handle the message
0:      * (as specified in the javax.jms.MessageListener interface).
0:      */
0:     public void onMessage( javax.jms.Message aMessage)
0:     {
0:         try
0:         {
0:             // Cast the message as a text message.
0:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
0: 
0:             // This handler reads a single String from the
0:             // message and prints it to the standard output.
0:             try
0:             {
0:                 String string = textMessage.getText();
0:                 System.out.println( string );
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:         }
0:         catch (java.lang.RuntimeException rte)
0:         {
0:             rte.printStackTrace();
0:         }
0:     }
0: 
0:     /** Cleanup resources and then exit. */
0:     private void exit()
0:     {
0:         try
0:         {
0:             connect.close();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0: 
0:         System.exit(0);
0:     }
0: 
0:     //
0:     // NOTE: the remainder of this sample deals with reading arguments
0:     // and does not utilize any JMS classes or code.
0:     //
0: 
0:     /** Main program entry point. */
0:     public static void main(String argv[]) {
0: 
0:         // Is there anything to do?
0:         if (argv.length == 0) {
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         // Values to be read from parameters
0:         String broker    = DEFAULT_BROKER_NAME;
0:         String username  = null;
0:         String password  = DEFAULT_PASSWORD;
0:         String pubTopicname = DEFAULT_PUBLISHER_TOPIC;
0:         String subTopicname = DEFAULT_SUBSCRIBER_TOPIC;
0: 
0:         // Check parameters
0:         for (int i = 0; i < argv.length; i++) {
0:             String arg = argv[i];
0: 
0:             // Options
0:             if (!arg.startsWith("-")) {
0:                 System.err.println ("error: unexpected argument - "+arg);
0:                 printUsage();
0:                 System.exit(1);
0:             }
0:             else {
0:                 if (arg.equals("-b")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing broker name:port");
0:                         System.exit(1);
0:                     }
0:                     broker = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-u")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing user name");
0:                         System.exit(1);
0:                     }
0:                     username = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-p")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing password");
0:                         System.exit(1);
0:                     }
0:                     password = argv[++i];
0:                     continue;
0:                 }
0:                 if (arg.equals("-t")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing publisher topic name");
0:                         System.exit(1);
0:                     }
0:                     pubTopicname = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-s")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing subscriber topic name");
0:                         System.exit(1);
0:                     }
0:                     subTopicname = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-h")) {
0:                     printUsage();
0:                     System.exit(1);
0:                 }
0:             }
0:         }
0: 
0:         // Check values read in.
0:         if (username == null) {
0:             System.err.println ("error: user name must be supplied");
0:             printUsage();
0:         }
0: 
0:         // Start the JMS client for the "chat".
0:         HierarchicalChat chat = new HierarchicalChat();
0:         chat.chatter (broker, username, password, pubTopicname, subTopicname);
0: 
0:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage() {
0: 
0:         StringBuffer use = new StringBuffer();
0:         use.append("usage: java HierarchicalChat (options) ...\n\n");
0:         use.append("options:\n");
0:         use.append("  -b name:port          Specify name:port of broker.\n");
0:         use.append("                        Default broker: "+DEFAULT_BROKER_NAME+"\n");
0:         use.append("  -u name               Specify unique user name. (Required)\n");
0:         use.append("  -p password           Specify password for user.\n");
0:         use.append("                        Default password: "+DEFAULT_PASSWORD+"\n");
0:         use.append("  -t pubTopicname       name of topic to which to publish.\n");
0:         use.append("                        Default publisher topic name: "+DEFAULT_PUBLISHER_TOPIC+"\n");
0:         use.append("  -s subTopicname       Specify subscriber topic name.\n");
0:         use.append("                        name of topic to which to subscribe: "+DEFAULT_SUBSCRIBER_TOPIC+"\n");
0:         use.append("  -h                    This help screen.\n");
0:         System.err.println (use);
0:     }
0: 
0: }
0: 
============================================================================