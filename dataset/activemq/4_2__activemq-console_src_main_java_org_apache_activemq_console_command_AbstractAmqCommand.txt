3:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
3:a107823:  */
1:a107823: package org.apache.activemq.console.command;
6:a107823: 
1:a107823: import java.net.URI;
1:a107823: import java.net.URISyntaxException;
1:a107823: import java.util.ArrayList;
1:a107823: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: 
1:5f1adbe: import javax.jms.Connection;
1:5f1adbe: import javax.jms.ConnectionFactory;
1:5f1adbe: import javax.jms.JMSException;
1:5f1adbe: 
1:5f1adbe: import org.apache.activemq.ActiveMQConnectionFactory;
1:a107823: 
1:a107823: public abstract class AbstractAmqCommand extends AbstractCommand {
1:a107823:     private URI brokerUrl;
1:a107823:     private ConnectionFactory factory;
1:4d0dcb9:     private String factoryClassString;
1:e34ec0b:     private String username;
1:e34ec0b:     private String password;
1:e34ec0b:     private PasswordFactory passwordFactory;
1:5f1adbe:     private final List<Connection> connections = new ArrayList<Connection>();
1:e34ec0b:     private String passwordFactoryClassString;
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Establishes a connection to the remote broker specified by the broker
1:5f1adbe:      * url.
1:5f1adbe:      * 
1:a107823:      * @return - connection to the broker
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Connection createConnection() throws JMSException {
1:e34ec0b:         return createConnection(getUsername(), getPassword());
5:a107823:     }
1:a107823: 
1:4d0dcb9:     /**
1:5f1adbe:      * Establishes a connection to the remote broker specified by the broker
1:5f1adbe:      * url.
1:5f1adbe:      * 
1:a107823:      * @param username - username for the connection
1:a107823:      * @param password - password for the connection
1:a107823:      * @return - connection to the broker
1:a107823:      * @throws JMSException
1:4d0dcb9:      */
1:a107823:     protected Connection createConnection(String username, String password) throws JMSException {
2:a107823:         if (getBrokerUrl() == null) {
1:54eb93e:             context
1:5f1adbe:                 .printException(new IllegalStateException(
1:5f1adbe:                                                           "You must specify a broker URL to connect to using the --amqurl option."));
2:a107823:             return null;
1:a107823:         }
1:a107823: 
1:e34ec0b:         ConnectionFactory factory = getConnectionFactory();
1:e34ec0b:         Connection conn;
1:e34ec0b: 
1:e34ec0b:         if (null == username && null == password)
1:e34ec0b:             conn = factory.createConnection();
1:e34ec0b:         else
1:e34ec0b:             conn = factory.createConnection(username, password);
1:e34ec0b: 
2:a107823:         connections.add(conn);
1:a107823:         conn.start();
1:a107823: 
2:a107823:         return conn;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Close all created connections.
1:a107823:      */
1:a107823:     protected void closeAllConnections() {
1:5f1adbe:         for (Iterator<Connection> i = connections.iterator(); i.hasNext();) {
1:a107823:             try {
1:5f1adbe:                 i.next().close();
1:5f1adbe:             } catch (Exception e) {
1:5f1adbe:             }
1:a107823:         }
1:a107823: 
1:a107823:         connections.clear();
1:a107823:     }
1:a107823: 
1:4d0dcb9:     /**
1:a107823:      * Handle the --amqurl option.
1:5f1adbe:      * 
1:a107823:      * @param token - current option
1:a107823:      * @param tokens - succeeding list of arguments
1:a107823:      * @throws Exception
1:4d0dcb9:      */
1:a107823:     protected void handleOption(String token, List tokens) throws Exception {
1:a107823:         // Try to handle the options first
1:a107823:         if (token.equals("--amqurl")) {
1:a107823:             // If no broker url specified, or next token is a new option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Broker URL not specified."));
1:a107823:                 tokens.clear();
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             // If broker url already specified
1:a107823:             if (getBrokerUrl() != null) {
1:54eb93e:                 context
1:5f1adbe:                     .printException(new IllegalArgumentException("Multiple broker URL cannot be specified."));
1:a107823:                 tokens.clear();
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             String strBrokerUrl = (String)tokens.remove(0);
1:a107823: 
1:a107823:             try {
1:a107823:                 setBrokerUrl(new URI(strBrokerUrl));
1:a107823:             } catch (URISyntaxException e) {
1:54eb93e:                 context.printException(e);
1:a107823:                 tokens.clear();
1:a107823:                 return;
1:a107823:             }
1:4d0dcb9:         } else if (token.equals("--factory")) {
1:4d0dcb9:             factoryClassString = (String) tokens.remove(0);
1:e34ec0b:         } else if (token.equals("--passwordFactory")) {
1:e34ec0b:             passwordFactoryClassString = (String) tokens.remove(0);
1:e34ec0b:         } else if (token.equals("--password")) {
1:e34ec0b:             password = (String) tokens.remove(0);
1:e34ec0b:         } else if (token.equals("--user")) {
1:e34ec0b:             username = (String) tokens.remove(0);
1:a107823:         } else {
1:a107823:             // Let the super class handle the option
1:a107823:             super.handleOption(token, tokens);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Set the broker url.
1:5f1adbe:      * 
1:a107823:      * @param brokerUrl - new broker url
1:a107823:      */
1:a107823:     protected void setBrokerUrl(URI brokerUrl) {
1:a107823:         this.brokerUrl = brokerUrl;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Set the broker url.
1:5f1adbe:      * 
1:a107823:      * @param address - address of the new broker url
1:a107823:      * @throws URISyntaxException
1:a107823:      */
1:a107823:     protected void setBrokerUrl(String address) throws URISyntaxException {
1:a107823:         this.brokerUrl = new URI(address);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Get the current broker url.
1:5f1adbe:      * 
1:a107823:      * @return current broker url
1:a107823:      */
1:a107823:     protected URI getBrokerUrl() {
1:a107823:         return brokerUrl;
1:a107823:     }
1:4d0dcb9: 
1:e34ec0b:     /**
1:e34ec0b:      * @return the factory
1:e34ec0b:      */
1:e34ec0b:     @SuppressWarnings("unchecked")
1:e34ec0b:     public ConnectionFactory getConnectionFactory() {
1:4d0dcb9:         if (factory == null && factoryClassString != null) {
1:4d0dcb9:             try {
1:4d0dcb9:                 Class klass = Class.forName(factoryClassString);
1:e34ec0b: 
1:e34ec0b:                 if (getUsername() != null || getPassword() != null) {
1:e34ec0b:                     factory = (ConnectionFactory) klass.getConstructor(
1:e34ec0b:                             String.class, String.class, URI.class).newInstance(
1:e34ec0b:                             getUsername(), getPassword(), getBrokerUrl());
1:e34ec0b:                 } else {
1:e34ec0b:                     factory = (ConnectionFactory) klass.getConstructor(
1:e34ec0b:                             URI.class).newInstance(getBrokerUrl());
1:4d0dcb9:                 }
1:e34ec0b:             } catch (Exception e) {
1:e34ec0b:                 throw new RuntimeException(e);
1:4d0dcb9:             }
1:4d0dcb9:         }
1:4d0dcb9: 
1:4d0dcb9:         if (factory == null) {
1:e34ec0b:             if (getUsername() != null || getPassword() != null) {
1:e34ec0b:                 factory = new ActiveMQConnectionFactory(getUsername(),
1:e34ec0b:                         getPassword(), getBrokerUrl());
1:e34ec0b:             } else {
1:e34ec0b:                 factory = new ActiveMQConnectionFactory(getBrokerUrl());
1:e34ec0b:             }
1:4d0dcb9:         }
1:4d0dcb9: 
1:4d0dcb9:         return factory;
1:4d0dcb9:     }
1:4d0dcb9: 
1:e34ec0b:     /**
1:e34ec0b:      * @return the username
1:e34ec0b:      */
1:e34ec0b:     public String getUsername() {
1:e34ec0b:         return username;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @param factory the factory to set
1:e34ec0b:      */
1:e34ec0b:     public void setFactory(ConnectionFactory factory) {
1:e34ec0b:         this.factory = factory;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @param username the username to set
1:e34ec0b:      */
1:e34ec0b:     public void setUsername(String username) {
1:e34ec0b:         this.username = username;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @return the password
1:e34ec0b:      */
1:e34ec0b:     public String getPassword() {
1:e34ec0b:         if (null == password)
1:e34ec0b:             return null;
1:e34ec0b: 
1:e34ec0b:         return getPasswordFactory().getPassword(password);
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @param password the password to set
1:e34ec0b:      */
1:e34ec0b:     public void setPassword(String password) {
1:e34ec0b:         this.password = password;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @return the passwordFactory
1:e34ec0b:      */
1:e34ec0b:     @SuppressWarnings("unchecked")
1:e34ec0b:     public PasswordFactory getPasswordFactory() {
1:e34ec0b:         if (passwordFactory == null && passwordFactoryClassString != null) {
1:e34ec0b:             try {
1:e34ec0b:                 Class klass = Class.forName(passwordFactoryClassString);
1:e34ec0b:                 passwordFactory = (PasswordFactory) klass.newInstance();
1:e34ec0b:             } catch (Exception e) {
1:e34ec0b:                 throw new RuntimeException(e);
1:e34ec0b:             }
1:e34ec0b:         }
1:e34ec0b: 
1:e34ec0b:         // Preserve the fallback case, if someone did specify a bad class, let them realize when things don't work.
1:e34ec0b:         if (passwordFactory == null) {
1:e34ec0b:             passwordFactory = DefaultPasswordFactory.factory;
1:e34ec0b:         }
1:e34ec0b: 
1:e34ec0b:         return passwordFactory;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:e34ec0b:      * @param passwordFactory the passwordFactory to set
1:e34ec0b:      */
1:e34ec0b:     public void setPasswordFactory(PasswordFactory passwordFactory) {
1:e34ec0b:         this.passwordFactory = passwordFactory;
1:e34ec0b:     }
1:4d0dcb9: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:170a7b5
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e34ec0b
/////////////////////////////////////////////////////////////////////////
1:     private String username;
1:     private String password;
1:     private PasswordFactory passwordFactory;
1:     private String passwordFactoryClassString;
/////////////////////////////////////////////////////////////////////////
1:         return createConnection(getUsername(), getPassword());
/////////////////////////////////////////////////////////////////////////
1:         ConnectionFactory factory = getConnectionFactory();
1:         Connection conn;
1: 
1:         if (null == username && null == password)
1:             conn = factory.createConnection();
1:         else
1:             conn = factory.createConnection(username, password);
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.equals("--passwordFactory")) {
1:             passwordFactoryClassString = (String) tokens.remove(0);
1:         } else if (token.equals("--password")) {
1:             password = (String) tokens.remove(0);
1:         } else if (token.equals("--user")) {
1:             username = (String) tokens.remove(0);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the factory
1:      */
1:     @SuppressWarnings("unchecked")
1:     public ConnectionFactory getConnectionFactory() {
1: 
1:                 if (getUsername() != null || getPassword() != null) {
1:                     factory = (ConnectionFactory) klass.getConstructor(
1:                             String.class, String.class, URI.class).newInstance(
1:                             getUsername(), getPassword(), getBrokerUrl());
1:                 } else {
1:                     factory = (ConnectionFactory) klass.getConstructor(
1:                             URI.class).newInstance(getBrokerUrl());
1:             } catch (Exception e) {
1:                 throw new RuntimeException(e);
1:             if (getUsername() != null || getPassword() != null) {
1:                 factory = new ActiveMQConnectionFactory(getUsername(),
1:                         getPassword(), getBrokerUrl());
1:             } else {
1:                 factory = new ActiveMQConnectionFactory(getBrokerUrl());
1:             }
1:     /**
1:      * @return the username
1:      */
1:     public String getUsername() {
1:         return username;
1:     }
1: 
1:     /**
1:      * @param factory the factory to set
1:      */
1:     public void setFactory(ConnectionFactory factory) {
1:         this.factory = factory;
1:     }
1: 
1:     /**
1:      * @param username the username to set
1:      */
1:     public void setUsername(String username) {
1:         this.username = username;
1:     }
1: 
1:     /**
1:      * @return the password
1:      */
1:     public String getPassword() {
1:         if (null == password)
1:             return null;
1: 
1:         return getPasswordFactory().getPassword(password);
1:     }
1: 
1:     /**
1:      * @param password the password to set
1:      */
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     /**
1:      * @return the passwordFactory
1:      */
1:     @SuppressWarnings("unchecked")
1:     public PasswordFactory getPasswordFactory() {
1:         if (passwordFactory == null && passwordFactoryClassString != null) {
1:             try {
1:                 Class klass = Class.forName(passwordFactoryClassString);
1:                 passwordFactory = (PasswordFactory) klass.newInstance();
1:             } catch (Exception e) {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         // Preserve the fallback case, if someone did specify a bad class, let them realize when things don't work.
1:         if (passwordFactory == null) {
1:             passwordFactory = DefaultPasswordFactory.factory;
1:         }
1: 
1:         return passwordFactory;
1:     }
1: 
1:     /**
1:      * @param passwordFactory the passwordFactory to set
1:      */
1:     public void setPasswordFactory(PasswordFactory passwordFactory) {
1:         this.passwordFactory = passwordFactory;
1:     }
commit:4d0dcb9
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationTargetException;
/////////////////////////////////////////////////////////////////////////
1:     private String factoryClassString;
/////////////////////////////////////////////////////////////////////////
0:         Connection conn = getFactory().createConnection();
/////////////////////////////////////////////////////////////////////////
0:         Connection conn = getFactory().createConnection(username, password);
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.equals("--factory")) {
1:             factoryClassString = (String) tokens.remove(0);
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * @return the factory
1: 	 */
0: 	@SuppressWarnings("unchecked")
0:     public ConnectionFactory getFactory() {
1:         if (factory == null && factoryClassString != null) {
1:             try {
1:                 Class klass = Class.forName(factoryClassString);
0:                 if (klass.isInstance(ConnectionFactory.class)) {
0:                     Class<ConnectionFactory> factoryClass = (Class<ConnectionFactory>) klass;
0:                     factory = factoryClass.getConstructor(URI.class)
0:                             .newInstance(getBrokerUrl());
1:                 }
0:             } catch (IllegalArgumentException e) {
0:                 e.printStackTrace();
0:             } catch (SecurityException e) {
0:                 e.printStackTrace();
0:             } catch (InstantiationException e) {
0:                 e.printStackTrace();
0:             } catch (IllegalAccessException e) {
0:                 e.printStackTrace();
0:             } catch (InvocationTargetException e) {
0:                 e.printStackTrace();
0:             } catch (NoSuchMethodException e) {
0:                 e.printStackTrace();
0:             } catch (ClassNotFoundException e) {
0:                 e.printStackTrace();
1:             }
1:         }
1: 
0:         // Preserve the fallback case, if someone did specify a bad class, let them realize when things don't work.
1:         if (factory == null) {
0:             factory = new ActiveMQConnectionFactory(getBrokerUrl());
1:         }
1: 
1:         return factory;
1:     }
1: 
1: 	/**
0: 	 * @param factory the factory to set
1: 	 */
0: 	public void setFactory(ConnectionFactory factory) {
0: 		this.factory = factory;
1: 	}
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             context
/////////////////////////////////////////////////////////////////////////
1:             context
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Broker URL not specified."));
0:                 context
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(e);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1:     private final List<Connection> connections = new ArrayList<Connection>();
1:      * Establishes a connection to the remote broker specified by the broker
1:      * url.
1:      * 
0:             GlobalWriter
0:                 .printException(new IllegalStateException("You must specify a broker "
0:                                                           + "URL to connect to using the --amqurl option."));
/////////////////////////////////////////////////////////////////////////
1:      * Establishes a connection to the remote broker specified by the broker
1:      * url.
1:      * 
/////////////////////////////////////////////////////////////////////////
0:             GlobalWriter
1:                 .printException(new IllegalStateException(
1:                                                           "You must specify a broker URL to connect to using the --amqurl option."));
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Connection> i = connections.iterator(); i.hasNext();) {
1:                 i.next().close();
1:             } catch (Exception e) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:                 GlobalWriter
1:                     .printException(new IllegalArgumentException("Multiple broker URL cannot be specified."));
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
0: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: public abstract class AbstractAmqCommand extends AbstractCommand {
1:     private URI brokerUrl;
1:     private ConnectionFactory factory;
0:     private final List connections = new ArrayList();
1: 
1:     /**
0:      * Establishes a connection to the remote broker specified by the broker url.
1:      * @return - connection to the broker
1:      * @throws JMSException
1:      */
1:     protected Connection createConnection() throws JMSException {
1:         if (getBrokerUrl() == null) {
0:             GlobalWriter.printException(new IllegalStateException("You must specify a broker URL to connect to using the --amqurl option."));
1:             return null;
1:         }
1: 
0:         if (factory == null) {
0:             factory = new ActiveMQConnectionFactory(getBrokerUrl());
1:         }
1: 
0:         Connection conn = factory.createConnection();
1:         connections.add(conn);
1: 
1:         return conn;
1:     }
1: 
1:     /**
0:      * Establishes a connection to the remote broker specified by the broker url.
1:      * @param username - username for the connection
1:      * @param password - password for the connection
1:      * @return - connection to the broker
1:      * @throws JMSException
1:      */
1:     protected Connection createConnection(String username, String password) throws JMSException {
1:         if (getBrokerUrl() == null) {
0:             GlobalWriter.printException(new IllegalStateException("You must specify a broker URL to connect to using the --amqurl option."));
1:             return null;
1:         }
1: 
0:         if (factory == null) {
0:             factory = new ActiveMQConnectionFactory(getBrokerUrl());
1:         }
1: 
0:         Connection conn = factory.createConnection(username, password);
1:         connections.add(conn);
1:         conn.start();
1: 
1:         return conn;
1:     }
1: 
1:     /**
1:      * Close all created connections.
1:      */
1:     protected void closeAllConnections() {
0:         for (Iterator i=connections.iterator(); i.hasNext();) {
1:             try {
0:                 ((Connection)i.next()).close();
0:             } catch (Exception e) { }
1:         }
1: 
1:         connections.clear();
1:     }
1: 
1:     /**
1:      * Handle the --amqurl option.
1:      * @param token - current option
1:      * @param tokens - succeeding list of arguments
1:      * @throws Exception
1:      */
1:     protected void handleOption(String token, List tokens) throws Exception {
1:         // Try to handle the options first
1:         if (token.equals("--amqurl")) {
1:             // If no broker url specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Broker URL not specified."));
1:                 tokens.clear();
1:                 return;
1:             }
1: 
1:             // If broker url already specified
1:             if (getBrokerUrl() != null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Multiple broker URL cannot be specified."));
1:                 tokens.clear();
1:                 return;
1:             }
1: 
1:             String strBrokerUrl = (String)tokens.remove(0);
1: 
1:             try {
1:                 setBrokerUrl(new URI(strBrokerUrl));
1:             } catch (URISyntaxException e) {
0:                 GlobalWriter.printException(e);
1:                 tokens.clear();
1:                 return;
1:             }
1:         } else {
1:             // Let the super class handle the option
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Set the broker url.
1:      * @param brokerUrl - new broker url
1:      */
1:     protected void setBrokerUrl(URI brokerUrl) {
1:         this.brokerUrl = brokerUrl;
1:     }
1: 
1:     /**
1:      * Set the broker url.
1:      * @param address - address of the new broker url
1:      * @throws URISyntaxException
1:      */
1:     protected void setBrokerUrl(String address) throws URISyntaxException {
1:         this.brokerUrl = new URI(address);
1:     }
1: 
1:     /**
1:      * Get the current broker url.
1:      * @return current broker url
1:      */
1:     protected URI getBrokerUrl() {
1:         return brokerUrl;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: public abstract class AbstractAmqCommand extends AbstractCommand {
0:     private URI brokerUrl;
0:     private ConnectionFactory factory;
0:     private final List connections = new ArrayList();
0: 
0:     /**
0:      * Establishes a connection to the remote broker specified by the broker url.
0:      * @return - connection to the broker
0:      * @throws JMSException
0:      */
0:     protected Connection createConnection() throws JMSException {
0:         if (getBrokerUrl() == null) {
0:             GlobalWriter.printException(new IllegalStateException("You must specify a broker URL to connect to using the --amqurl option."));
0:             return null;
0:         }
0: 
0:         if (factory == null) {
0:             factory = new ActiveMQConnectionFactory(getBrokerUrl());
0:         }
0: 
0:         Connection conn = factory.createConnection();
0:         connections.add(conn);
0: 
0:         return conn;
0:     }
0: 
0:     /**
0:      * Establishes a connection to the remote broker specified by the broker url.
0:      * @param username - username for the connection
0:      * @param password - password for the connection
0:      * @return - connection to the broker
0:      * @throws JMSException
0:      */
0:     protected Connection createConnection(String username, String password) throws JMSException {
0:         if (getBrokerUrl() == null) {
0:             GlobalWriter.printException(new IllegalStateException("You must specify a broker URL to connect to using the --amqurl option."));
0:             return null;
0:         }
0: 
0:         if (factory == null) {
0:             factory = new ActiveMQConnectionFactory(getBrokerUrl());
0:         }
0: 
0:         Connection conn = factory.createConnection(username, password);
0:         connections.add(conn);
0:         conn.start();
0: 
0:         return conn;
0:     }
0: 
0:     /**
0:      * Close all created connections.
0:      */
0:     protected void closeAllConnections() {
0:         for (Iterator i=connections.iterator(); i.hasNext();) {
0:             try {
0:                 ((Connection)i.next()).close();
0:             } catch (Exception e) { }
0:         }
0: 
0:         connections.clear();
0:     }
0: 
0:     /**
0:      * Handle the --amqurl option.
0:      * @param token - current option
0:      * @param tokens - succeeding list of arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0:         // Try to handle the options first
0:         if (token.equals("--amqurl")) {
0:             // If no broker url specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Broker URL not specified."));
0:                 tokens.clear();
0:                 return;
0:             }
0: 
0:             // If broker url already specified
0:             if (getBrokerUrl() != null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Multiple broker URL cannot be specified."));
0:                 tokens.clear();
0:                 return;
0:             }
0: 
0:             String strBrokerUrl = (String)tokens.remove(0);
0: 
0:             try {
0:                 setBrokerUrl(new URI(strBrokerUrl));
0:             } catch (URISyntaxException e) {
0:                 GlobalWriter.printException(e);
0:                 tokens.clear();
0:                 return;
0:             }
0:         } else {
0:             // Let the super class handle the option
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Set the broker url.
0:      * @param brokerUrl - new broker url
0:      */
0:     protected void setBrokerUrl(URI brokerUrl) {
0:         this.brokerUrl = brokerUrl;
0:     }
0: 
0:     /**
0:      * Set the broker url.
0:      * @param address - address of the new broker url
0:      * @throws URISyntaxException
0:      */
0:     protected void setBrokerUrl(String address) throws URISyntaxException {
0:         this.brokerUrl = new URI(address);
0:     }
0: 
0:     /**
0:      * Get the current broker url.
0:      * @return current broker url
0:      */
0:     protected URI getBrokerUrl() {
0:         return brokerUrl;
0:     }
0: }
============================================================================