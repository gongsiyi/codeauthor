1:400b1fc: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:400b1fc:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:400b1fc:  * Unless required by applicable law or agreed to in writing, software
1:400b1fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:400b1fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:400b1fc:  * See the License for the specific language governing permissions and
1:400b1fc:  * limitations under the License.
1:400b1fc:  */
1:400b1fc: package org.apache.activemq.network;
1:ec6e6a5: 
1:ad2546f: import java.io.IOException;
1:ad2546f: import java.net.URI;
1:ad2546f: import java.net.URISyntaxException;
1:ad2546f: import java.util.Iterator;
1:39e63c0: import java.util.Map;
1:1942324: import java.util.concurrent.ConcurrentHashMap;
1:1942324: import java.util.concurrent.ConcurrentMap;
1:43bd686: 
1:a80acbb: import javax.management.ObjectName;
1:a80acbb: 
1:47853d3: import org.apache.activemq.broker.BrokerService;
1:7d87837: import org.apache.activemq.broker.SslContext;
1:400b1fc: import org.apache.activemq.command.DiscoveryEvent;
1:400b1fc: import org.apache.activemq.transport.Transport;
1:400b1fc: import org.apache.activemq.transport.TransportFactory;
1:400b1fc: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1:400b1fc: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
1:400b1fc: import org.apache.activemq.transport.discovery.DiscoveryListener;
1:39e63c0: import org.apache.activemq.util.IntrospectionSupport;
1:400b1fc: import org.apache.activemq.util.ServiceStopper;
1:400b1fc: import org.apache.activemq.util.ServiceSupport;
1:39e63c0: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f812e34: 
1:400b1fc: /**
1:400b1fc:  * A network connector which uses a discovery agent to detect the remote brokers
1:400b1fc:  * available and setup a connection to each available remote broker
1:a80acbb:  *
1:400b1fc:  * @org.apache.xbean.XBean element="networkConnector"
1:a80acbb:  *
1:400b1fc:  */
1:400b1fc: public class DiscoveryNetworkConnector extends NetworkConnector implements DiscoveryListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryNetworkConnector.class);
1:ad2546f: 
1:400b1fc:     private DiscoveryAgent discoveryAgent;
1:39e63c0:     private Map<String, String> parameters;
1:7f346a8:     private final ConcurrentMap<URI, DiscoveryEvent> activeEvents = new ConcurrentHashMap<URI, DiscoveryEvent>();
1:25a1dd0:     private URI discoveryUri;
1:400b1fc:     public DiscoveryNetworkConnector() {
14:ad2546f:     }
1:39e63c0: 
1:400b1fc:     public DiscoveryNetworkConnector(URI discoveryURI) throws IOException {
1:400b1fc:         setUri(discoveryURI);
1:ec6e6a5:     }
1:a80acbb: 
1:400b1fc:     public void setUri(URI discoveryURI) throws IOException {
1:25a1dd0:         this.discoveryUri = discoveryURI;
1:400b1fc:         setDiscoveryAgent(DiscoveryAgentFactory.createDiscoveryAgent(discoveryURI));
1:39e63c0:         try {
1:784b93d:             parameters = URISupport.parseParameters(discoveryURI);
1:39e63c0:             // allow discovery agent to grab it's parameters
1:39e63c0:             IntrospectionSupport.setProperties(getDiscoveryAgent(), parameters);
1:39e63c0:         } catch (URISyntaxException e) {
1:e1bbde7:             LOG.warn("failed to parse query parameters from discoveryURI: {}", discoveryURI, e);
1:39e63c0:         }
1:a80acbb:     }
1:39e63c0: 
1:25a1dd0:     public URI getUri() {
1:25a1dd0:         return discoveryUri;
1:25a1dd0:     }
1:25a1dd0: 
1:6d1f57b:     @Override
1:f812e34:     public void onServiceAdd(DiscoveryEvent event) {
1:ad2546f:         // Ignore events once we start stopping.
1:ecf89a6:         if (serviceSupport.isStopped() || serviceSupport.isStopping()) {
1:ad2546f:             return;
1:1942324:         }
1:f812e34:         String url = event.getServiceName();
1:f812e34:         if (url != null) {
1:400b1fc:             URI uri;
1:f812e34:             try {
1:f812e34:                 uri = new URI(url);
1:f812e34:             } catch (URISyntaxException e) {
1:e1bbde7:                 LOG.warn("Could not connect to remote URI: {} due to bad URI syntax: ", url, e);
1:11e742f:                 return;
1:a80acbb:             }
1:a80acbb: 
1:174c405:             if (localURI.equals(uri)) {
1:e1bbde7:                 LOG.debug("not connecting loopback: {}", uri);
1:ad2546f:                 return;
1:a80acbb:             }
1:174c405: 
1:174c405:             if (connectionFilter != null && !connectionFilter.connectTo(uri)) {
1:e1bbde7:                 LOG.debug("connectionFilter disallows connection to: {}", uri);
1:174c405:                 return;
1:174c405:             }
1:174c405: 
1:1942324:             // Should we try to connect to that URI?
1:1942324:             if (activeEvents.putIfAbsent(uri, event) != null) {
1:e1bbde7:                 LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: {}", uri);
1:7f346a8:                 return;
1:7f346a8:             }
1:1942324: 
1:f812e34:             URI connectUri = uri;
1:39e63c0:             try {
1:986ed14:                 connectUri = URISupport.applyParameters(connectUri, parameters, DISCOVERED_OPTION_PREFIX);
1:39e63c0:             } catch (URISyntaxException e) {
1:e1bbde7:                 LOG.warn("could not apply query parameters: {} to: {}", new Object[]{ parameters, connectUri }, e);
1:39e63c0:             }
1:a80acbb: 
1:e1bbde7:             LOG.info("Establishing network connection from {} to {}", localURI, connectUri);
1:7d87837: 
1:400b1fc:             Transport remoteTransport;
1:ad2546f:             Transport localTransport;
1:f812e34:             try {
1:7d87837:                 // Allows the transport to access the broker's ssl configuration.
1:54c56a0:                 if (getSslContext() != null) {
1:54c56a0:                     SslContext.setCurrentSslContext(getSslContext());
1:54c56a0:                 } else {
1:54c56a0:                     SslContext.setCurrentSslContext(getBrokerService().getSslContext());
1:54c56a0:                 }
1:7d87837:                 try {
1:7d87837:                     remoteTransport = TransportFactory.connect(connectUri);
1:7d87837:                 } catch (Exception e) {
1:e1bbde7:                     LOG.warn("Could not connect to remote URI: {}: {}", connectUri, e.getMessage());
1:e1bbde7:                     LOG.debug("Connection failure exception: ", e);
1:b0c0441:                     try {
1:b0c0441:                         discoveryAgent.serviceFailed(event);
1:b0c0441:                     } catch (IOException e1) {
1:b0c0441:                         LOG.debug("Failure while handling create remote transport failure event: {}", e1.getMessage(), e1);
1:b0c0441:                     }
1:7d87837:                     return;
1:a80acbb:                 }
1:7d87837:                 try {
1:7d87837:                     localTransport = createLocalTransport();
1:7d87837:                 } catch (Exception e) {
1:7d87837:                     ServiceSupport.dispose(remoteTransport);
1:e1bbde7:                     LOG.warn("Could not connect to local URI: {}: {}", localURI, e.getMessage());
1:e1bbde7:                     LOG.debug("Connection failure exception: ", e);
1:b0c0441: 
1:b0c0441:                     try {
1:b0c0441:                         discoveryAgent.serviceFailed(event);
1:b0c0441:                     } catch (IOException e1) {
1:b0c0441:                         LOG.debug("Failure while handling create local transport failure event: {}", e1.getMessage(), e1);
1:b0c0441:                     }
1:7d87837:                     return;
1:a80acbb:                 }
1:7d87837:             } finally {
1:7d87837:                 SslContext.setCurrentSslContext(null);
1:a80acbb:             }
1:f812e34:             NetworkBridge bridge = createBridge(localTransport, remoteTransport, event);
1:f812e34:             try {
1:4acd132:                 synchronized (bridges) {
1:4acd132:                     bridges.put(uri, bridge);
1:4acd132:                 }
1:1942324:                 bridge.start();
1:f812e34:             } catch (Exception e) {
2:400b1fc:                 ServiceSupport.dispose(localTransport);
1:ad2546f:                 ServiceSupport.dispose(remoteTransport);
1:bc326c8:                 LOG.warn("Could not start network bridge between: {} and: {} due to: {}", new Object[]{ localURI, uri, e.getMessage() });
1:e1bbde7:                 LOG.debug("Start failure exception: ", e);
1:f812e34:                 try {
1:1942324:                     // Will remove bridge and active event.
1:ad2546f:                     discoveryAgent.serviceFailed(event);
1:f812e34:                 } catch (IOException e1) {
1:e1bbde7:                     LOG.debug("Discovery agent failure while handling failure event: {}", e1.getMessage(), e1);
1:4acd132:                 }
1:4acd132:             }
1:a80acbb:         }
1:a80acbb:     }
1:f812e34: 
1:7f346a8:     @Override
1:400b1fc:     public void onServiceRemove(DiscoveryEvent event) {
2:400b1fc:         String url = event.getServiceName();
2:400b1fc:         if (url != null) {
1:400b1fc:             URI uri;
1:f812e34:             try {
2:400b1fc:                 uri = new URI(url);
1:f812e34:             } catch (URISyntaxException e) {
1:e1bbde7:                 LOG.warn("Could not connect to remote URI: {} due to bad URI syntax: ", url, e);
1:4acd132:                 return;
1:a80acbb:             }
1:ec6e6a5: 
1:1942324:             // Only remove bridge if this is the active discovery event for the URL.
1:7f346a8:             if (activeEvents.remove(uri, event)) {
1:4acd132:                 synchronized (bridges) {
1:1942324:                     bridges.remove(uri);
1:1942324:                 }
1:7d87837:             }
1:7d87837:         }
1:11e742f:     }
1:ec6e6a5: 
1:400b1fc:     public DiscoveryAgent getDiscoveryAgent() {
1:400b1fc:         return discoveryAgent;
1:ecf89a6:     }
1:ec6e6a5: 
1:400b1fc:     public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) {
1:400b1fc:         this.discoveryAgent = discoveryAgent;
1:400b1fc:         if (discoveryAgent != null) {
1:400b1fc:             this.discoveryAgent.setDiscoveryListener(this);
1:ecf89a6:         }
1:ecf89a6:     }
1:ad2546f: 
1:7f346a8:     @Override
1:ae73f86:     protected void handleStart() throws Exception {
1:400b1fc:         if (discoveryAgent == null) {
1:400b1fc:             throw new IllegalStateException("You must configure the 'discoveryAgent' property");
1:ec6e6a5:         }
1:400b1fc:         this.discoveryAgent.start();
1:ae73f86:         super.handleStart();
1:ad2546f:     }
1:ad2546f: 
1:7f346a8:     @Override
1:ae73f86:     protected void handleStop(ServiceStopper stopper) throws Exception {
1:ecf89a6:         for (Iterator<NetworkBridge> i = bridges.values().iterator(); i.hasNext();) {
1:ecf89a6:             NetworkBridge bridge = i.next();
1:ad2546f:             try {
1:400b1fc:                 bridge.stop();
1:f812e34:             } catch (Exception e) {
1:400b1fc:                 stopper.onException(this, e);
1:ad2546f:             }
1:ad2546f:         }
1:3326ab9:         bridges.clear();
1:dd0b16d:         activeEvents.clear();
1:ad2546f:         try {
1:400b1fc:             this.discoveryAgent.stop();
1:f812e34:         } catch (Exception e) {
1:400b1fc:             stopper.onException(this, e);
1:ad2546f:         }
1:ad2546f: 
1:ae73f86:         super.handleStop(stopper);
1:ad2546f:     }
1:47853d3: 
1:ecf89a6:     protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
1:2a2dcd5:         class DiscoverNetworkBridgeListener extends MBeanNetworkListener {
1:2a2dcd5: 
1:2a2dcd5:             public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) {
1:374cab9:                 super(brokerService, DiscoveryNetworkConnector.this, connectorName);
1:ad2546f:             }
1:2a2dcd5: 
1:7f346a8:             @Override
1:f812e34:             public void bridgeFailed() {
1:f812e34:                 if (!serviceSupport.isStopped()) {
9:ad2546f:                     try {
3:ad2546f:                         discoveryAgent.serviceFailed(event);
3:ad2546f:                     } catch (IOException e) {
1:f812e34:                     }
1:f812e34:                 }
1:f812e34: 
1:ad2546f:             }
1:ad2546f:         }
1:2a2dcd5:         NetworkBridgeListener listener = new DiscoverNetworkBridgeListener(getBrokerService(), getObjectName());
2:ae73f86: 
1:a8a032a:         DemandForwardingBridge result = getBridgeFactory().createNetworkBridge(this, localTransport, remoteTransport, listener);
1:301203e:         result.setBrokerService(getBrokerService());
1:400b1fc:         return configureBridge(result);
1:ad2546f:     }
1:ae73f86: 
1:7f346a8:     @Override
1:6d1f57b:     public String toString() {
1:6d1f57b:         return "DiscoveryNetworkConnector:" + getName() + ":" + getBrokerService();
1:6d1f57b:     }
1:ad2546f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:54c56a0
/////////////////////////////////////////////////////////////////////////
1:                 if (getSslContext() != null) {
1:                     SslContext.setCurrentSslContext(getSslContext());
1:                 } else {
1:                     SslContext.setCurrentSslContext(getBrokerService().getSslContext());
1:                 }
commit:b0c0441
/////////////////////////////////////////////////////////////////////////
1:                     try {
1:                         discoveryAgent.serviceFailed(event);
1:                     } catch (IOException e1) {
1:                         LOG.debug("Failure while handling create remote transport failure event: {}", e1.getMessage(), e1);
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
1:                     try {
1:                         discoveryAgent.serviceFailed(event);
1:                     } catch (IOException e1) {
1:                         LOG.debug("Failure while handling create local transport failure event: {}", e1.getMessage(), e1);
1:                     }
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1:         DemandForwardingBridge result = getBridgeFactory().createNetworkBridge(this, localTransport, remoteTransport, listener);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bc326c8
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Could not start network bridge between: {} and: {} due to: {}", new Object[]{ localURI, uri, e.getMessage() });
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("failed to parse query parameters from discoveryURI: {}", discoveryURI, e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Could not connect to remote URI: {} due to bad URI syntax: ", url, e);
1:                 LOG.debug("not connecting loopback: {}", uri);
1:                 LOG.debug("connectionFilter disallows connection to: {}", uri);
1:                 LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: {}", uri);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("could not apply query parameters: {} to: {}", new Object[]{ parameters, connectUri }, e);
1:             LOG.info("Establishing network connection from {} to {}", localURI, connectUri);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Could not connect to remote URI: {}: {}", connectUri, e.getMessage());
1:                     LOG.debug("Connection failure exception: ", e);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Could not connect to local URI: {}: {}", localURI, e.getMessage());
1:                     LOG.debug("Connection failure exception: ", e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not start network bridge between: {} and: {} due to: {}", new Object[]{ localURI, uri, e });
1:                 LOG.debug("Start failure exception: ", e);
1:                     LOG.debug("Discovery agent failure while handling failure event: {}", e1.getMessage(), e1);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Could not connect to remote URI: {} due to bad URI syntax: ", url, e);
author:rajdavies
-------------------------------------------------------------------------------
commit:374cab9
/////////////////////////////////////////////////////////////////////////
1:                 super(brokerService, DiscoveryNetworkConnector.this, connectorName);
author:Gary Tully
-------------------------------------------------------------------------------
commit:25a1dd0
/////////////////////////////////////////////////////////////////////////
1:     private URI discoveryUri;
/////////////////////////////////////////////////////////////////////////
1:         this.discoveryUri = discoveryURI;
/////////////////////////////////////////////////////////////////////////
1:     public URI getUri() {
1:         return discoveryUri;
1:     }
1: 
commit:54ff0ce
/////////////////////////////////////////////////////////////////////////
commit:174c405
/////////////////////////////////////////////////////////////////////////
1:             if (localURI.equals(uri)) {
1: 
1:             if (connectionFilter != null && !connectionFilter.connectTo(uri)) {
0:                 LOG.debug("connectionFilter disallows connection to: " + uri);
1:                 return;
1:             }
1: 
commit:4acd132
/////////////////////////////////////////////////////////////////////////
1:             synchronized (bridges) {
0:                 if( bridges.containsKey(uri) ) {
0:                     LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
1:                     return;
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 synchronized (bridges) {
1:                     bridges.put(uri, bridge);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:             NetworkBridge bridge;
0:             synchronized (bridges) {
0:                 bridge = bridges.remove(uri);
0:             if (bridge != null) {
0:                 ServiceSupport.dispose(bridge);
1:             }
commit:986ed14
/////////////////////////////////////////////////////////////////////////
1:                 connectUri = URISupport.applyParameters(connectUri, parameters, DISCOVERED_OPTION_PREFIX);
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
commit:6b4509c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportDisposedIOException;
/////////////////////////////////////////////////////////////////////////
0:     	    } catch (TransportDisposedIOException e) {
0:                 LOG.warn("Network bridge between: " + localURI + " and: " + uri + " was correctly stopped before it was correctly started.");
commit:c4d8bc4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Establishing network connection from " + localURI + " to " + connectUri);
/////////////////////////////////////////////////////////////////////////
0:                     LOG.warn("Could not connect to local URI: " + localURI + ": " + e.getMessage());
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not start network bridge between: " + localURI + " and: " + uri + " due to: " + e);
commit:43bd686
/////////////////////////////////////////////////////////////////////////
1:     
commit:5d42b72
/////////////////////////////////////////////////////////////////////////
0:                 bridges.put(uri, bridge);
commit:39e63c0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, String> parameters;
1:     
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             parameters = URISupport.parseParamters(discoveryURI);
1:             // allow discovery agent to grab it's parameters
1:             IntrospectionSupport.setProperties(getDiscoveryAgent(), parameters);
1:         } catch (URISyntaxException e) {
0:             LOG.warn("failed to parse query parameters from discoveryURI: " + discoveryURI, e);
1:         }  
1:         
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 connectUri = URISupport.applyParameters(connectUri, parameters);
1:             } catch (URISyntaxException e) {
0:                 LOG.warn("could not apply query parameters: " + parameters + " to: " + connectUri, e);
1:             }
/////////////////////////////////////////////////////////////////////////
0:                     LOG.warn("Could not connect to remote URI: " + connectUri + ": " + e.getMessage());
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:         result.setBrokerService(getBrokerService());
commit:6d1f57b
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("not connecting loopback: " + uri);
0:             LOG.info("Establishing network connection from " + localURIName + " to " + connectUri);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return "DiscoveryNetworkConnector:" + getName() + ":" + getBrokerService();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:dd0b16d
/////////////////////////////////////////////////////////////////////////
1:         activeEvents.clear();
commit:7f346a8
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<URI, DiscoveryEvent> activeEvents = new ConcurrentHashMap<URI, DiscoveryEvent>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: " + uri);
1:                 }
1:                 return;
/////////////////////////////////////////////////////////////////////////
0:                     activeEvents.remove(uri);
/////////////////////////////////////////////////////////////////////////
0:                     activeEvents.remove(uri);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             if (activeEvents.remove(uri, event)) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:1942324
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
0:     private ConcurrentMap<URI, DiscoveryEvent> activeEvents = new ConcurrentHashMap<URI, DiscoveryEvent>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // Should we try to connect to that URI?
1:             if (activeEvents.putIfAbsent(uri, event) != null) {
0:                 LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
0:                     activeEvents.remove(url);
/////////////////////////////////////////////////////////////////////////
0:                     activeEvents.remove(url);
/////////////////////////////////////////////////////////////////////////
1:                 bridge.start();
/////////////////////////////////////////////////////////////////////////
1:                     // Will remove bridge and active event.
/////////////////////////////////////////////////////////////////////////
1:             // Only remove bridge if this is the active discovery event for the URL.
0:             if (activeEvents.remove(url, event)) {
0:                 synchronized (bridges) {
1:                     bridges.remove(uri);
1:                 }
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
1:                     }
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("not connecting loopback: " + uri);
1:                 }
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("connectionFilter disallows connection to: " + uri);
1:                 }
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (LOG.isInfoEnabled()) {
0:                 LOG.info("Establishing network connection from " + localURI + " to " + connectUri);
1:             }
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("Connection failure exception: " + e, e);
1:                     }
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("Connection failure exception: " + e, e);
1:                     }
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Start failure exception: " + e, e);
1:                 }
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("Discovery agent failure while handling failure event: " + e1.getMessage(), e1);
1:                     }
/////////////////////////////////////////////////////////////////////////
0:                 bridges.remove(uri);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:7d87837
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:                 // Allows the transport to access the broker's ssl configuration.
0:                 SslContext.setCurrentSslContext(getBrokerService().getSslContext());
1:                 try {
1:                     remoteTransport = TransportFactory.connect(connectUri);
1:                 } catch (Exception e) {
0:                     LOG.warn("Could not connect to remote URI: " + localURIName + ": " + e.getMessage());
0:                     LOG.debug("Connection failure exception: " + e, e);
1:                     return;
1:                 }
1:                 try {
1:                     localTransport = createLocalTransport();
1:                 } catch (Exception e) {
1:                     ServiceSupport.dispose(remoteTransport);
0:                     LOG.warn("Could not connect to local URI: " + localURIName + ": " + e.getMessage());
0:                     LOG.debug("Connection failure exception: " + e, e);
1:                     return;
1:                 }
1:             } finally {
1:                 SslContext.setCurrentSslContext(null);
commit:11e742f
/////////////////////////////////////////////////////////////////////////
0:             if( bridges.containsKey(uri) ) {
0:                 LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
1:                 return;
1:             }
0:             if ( localURI.equals(uri) || (connectionFilter != null && !connectionFilter.connectTo(uri))) {
commit:c92b11b
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("Discovery agent failure while handling failure event: " + e1.getMessage(), e1);
commit:43b808d
/////////////////////////////////////////////////////////////////////////
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private ConcurrentHashMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
/////////////////////////////////////////////////////////////////////////
1:         if (serviceSupport.isStopped() || serviceSupport.isStopping()) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:             if (bridges.containsKey(uri) || localURI.equals(uri) || (connectionFilter != null && !connectionFilter.connectTo(uri))) {
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not start network bridge between: " + localURIName + " and: " + uri + " due to: " + e);
/////////////////////////////////////////////////////////////////////////
0:             NetworkBridge bridge = bridges.remove(uri);
0:             if (bridge == null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<NetworkBridge> i = bridges.values().iterator(); i.hasNext();) {
1:             NetworkBridge bridge = i.next();
/////////////////////////////////////////////////////////////////////////
1:     protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
/////////////////////////////////////////////////////////////////////////
0:         DemandForwardingBridge result = NetworkBridgeFactory.createBridge(this, localTransport, remoteTransport, listener);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DiscoveryNetworkConnector.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Establishing network connection between from " + localURIName + " to " + connectUri);
0:                 LOG.warn("Could not connect to remote URI: " + localURIName + ": " + e.getMessage());
0:                 LOG.debug("Connection failure exception: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not connect to local URI: " + localURIName + ": " + e.getMessage());
0:                 LOG.debug("Connection failure exception: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not start network bridge between: " + localURIName + " and: " + uri
0:                 LOG.debug("Start failure exception: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void onServiceAdd(DiscoveryEvent event) {
0:         String localURIName = localURI.getScheme() + "://" + localURI.getHost();
0:         if (serviceSupport.isStopped() || serviceSupport.isStopping())
1:         String url = event.getServiceName();
1:         if (url != null) {
1:             try {
1:                 uri = new URI(url);
1:             } catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:             if (bridges.containsKey(uri) || localURI.equals(uri)
0:                 || (connectionFilter != null && !connectionFilter.connectTo(uri)))
1:             URI connectUri = uri;
0:             log.info("Establishing network connection between from " + localURIName + " to " + connectUri);
1:             try {
0:                 remoteTransport = TransportFactory.connect(connectUri);
1:             } catch (Exception e) {
0:                 log.warn("Could not connect to remote URI: " + localURIName + ": " + e.getMessage());
0:                 log.debug("Connection failure exception: " + e, e);
1:             try {
0:                 localTransport = createLocalTransport();
1:             } catch (Exception e) {
0:                 log.warn("Could not connect to local URI: " + localURIName + ": " + e.getMessage());
0:                 log.debug("Connection failure exception: " + e, e);
1:             NetworkBridge bridge = createBridge(localTransport, remoteTransport, event);
0:             bridges.put(uri, bridge);
1:             try {
1:             } catch (Exception e) {
0:                 log.warn("Could not start network bridge between: " + localURIName + " and: " + uri
0:                          + " due to: " + e);
0:                 log.debug("Start failure exception: " + e, e);
1:                 try {
1:                 } catch (IOException e1) {
1: 
1:             } catch (URISyntaxException e) {
0:             NetworkBridge bridge = (NetworkBridge)bridges.remove(uri);
/////////////////////////////////////////////////////////////////////////
0:             NetworkBridge bridge = (NetworkBridge)i.next();
0:             } catch (Exception e) {
0:         } catch (Exception e) {
0:     protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport,
0:                                          final DiscoveryEvent event) {
1:             public void bridgeFailed() {
1:                 if (!serviceSupport.isStopped()) {
1: 
0:             public void onStart(NetworkBridge bridge) {
0:                 registerNetworkBridgeMBean(bridge);
1:             }
0:             public void onStop(NetworkBridge bridge) {
0:                 unregisterNetworkBridgeMBean(bridge);
1:             }
0:         DemandForwardingBridge result = NetworkBridgeFactory.createBridge(this, localTransport,
0:                                                                           remoteTransport, listener);
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
0:         NetworkBridgeListener listener = new NetworkBridgeListener() {
/////////////////////////////////////////////////////////////////////////
1: 
0: 			public void onStart(NetworkBridge bridge) {
0: 				 registerNetworkBridgeMBean(bridge);
1: 			}
1: 
0: 			public void onStop(NetworkBridge bridge) {
0: 				unregisterNetworkBridgeMBean(bridge);
1: 			}
1: 
commit:e387049
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:ad2546f
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1:     	
1:     	// Ignore events once we start stopping.
0:     	if( isStopped() || isStopping() )
1:     		return;
1:     	
/////////////////////////////////////////////////////////////////////////
0:                     connectUri = new URI("failover:(" + connectUri+")?maxReconnectDelay=1000");
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("Could not connect to remote URI: " + localURI + ": " + e.getMessage());
0:                 log.debug("Connection failure exception: "+ e, e);
1:                 return;
1:             }
1: 
1:             Transport localTransport;
1:             try {
0:                 localTransport = createLocalTransport();
1:             }
0:             catch (Exception e) {
1:                 ServiceSupport.dispose(remoteTransport);
0:                 log.warn("Could not connect to local URI: " + localURI + ": " + e.getMessage());
0:                 log.debug("Connection failure exception: "+ e, e);
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("Could not start network bridge between: " + localURI + " and: " + uri + " due to: " + e);
0:                 log.debug("Start failure exception: "+ e, e);
1:                 
1:                 try {
1: 					discoveryAgent.serviceFailed(event);
0: 				} catch (IOException e1) {
1: 				}
/////////////////////////////////////////////////////////////////////////
0:                 	protected void serviceLocalException(Throwable error) {
1:                 		try {
0:                 			super.serviceLocalException(error);
0:                 		} finally {
0:                 			fireServiceFailed();
1:                 		}
1:                 	}
0:                 	protected void serviceRemoteException(Throwable error) {
1:                 		try {
0:                     		super.serviceRemoteException(error);
0:                 		} finally {
0:                 			fireServiceFailed();
1:                 		}
1:                 	}
0:                 	public void fireServiceFailed() {
0:                 		if( !isStopped() ) {
1:                             try {
1:                                 discoveryAgent.serviceFailed(event);
1:                             } catch (IOException e) {
1:                             }
1:                 		}
1:                 	}
0:                 	protected void serviceLocalException(Throwable error) {
1:                 		try {
0:                 			super.serviceLocalException(error);
0:                 		} finally {
0:                 			fireServiceFailed();
1:                 		}
1:                 	}
0:                 	protected void serviceRemoteException(Throwable error) {
1:                 		try {
0:                     		super.serviceRemoteException(error);
0:                 		} finally {
0:                 			fireServiceFailed();
1:                 		}
1:                 	}
0:                 	public void fireServiceFailed() {
0:                 		if( !isStopped() ) {
1:                             try {
1:                                 discoveryAgent.serviceFailed(event);
1:                             } catch (IOException e) {
1:                             }
1:                 		}
1:                 	}
0:             result = new DemandForwardingBridge(localTransport, remoteTransport) {            	
0:             	protected void serviceLocalException(Throwable error) {
1:             		try {
0:             			super.serviceLocalException(error);
0:             		} finally {
0:             			fireServiceFailed();
1:             		}
1:             	}
0:             	protected void serviceRemoteException(Throwable error) {
1:             		try {
0:                 		super.serviceRemoteException(error);
0:             		} finally {
0:             			fireServiceFailed();
1:             		}
1:             	}
0:             	public void fireServiceFailed() {
0:             		if( !isStopped() ) {
1:                         try {
1:                             discoveryAgent.serviceFailed(event);
1:                         } catch (IOException e) {
1:                         }
1:             		}
1:             	}
commit:257f16a
/////////////////////////////////////////////////////////////////////////
0:             log.info("Establishing network connection between from " + localURI + " to " + connectUri);
commit:47853d3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
0:             // Should we try to connect to that URI?
0:             if (    bridges.containsKey(uri) 
0:                     || localURI.equals(uri) 
0:                     || (connectionFilter!=null && !connectionFilter.connectTo(uri))
0:                     )
/////////////////////////////////////////////////////////////////////////
0:             Bridge bridge = (Bridge) bridges.remove(uri);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3326ab9
/////////////////////////////////////////////////////////////////////////
1:         bridges.clear();
commit:eb24079
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryNetworkConnector.class);
commit:2a2dcd5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
1:         class DiscoverNetworkBridgeListener extends MBeanNetworkListener {
1: 
1:             public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) {
0:                 super(brokerService, connectorName);
0:             }
/////////////////////////////////////////////////////////////////////////
0:         }
1:         NetworkBridgeListener listener = new DiscoverNetworkBridgeListener(getBrokerService(), getObjectName());
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             parameters = URISupport.parseParameters(discoveryURI);
/////////////////////////////////////////////////////////////////////////
0:                 connectUri = URISupport.removeQuery(connectUri);
commit:89944c7
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import org.apache.activemq.transport.TransportDisposedIOException;
0: import org.apache.activemq.util.URISupport.CompositeData;
/////////////////////////////////////////////////////////////////////////
0:             CompositeData data = URISupport.parseComposite(discoveryURI);
0:             parameters = new HashMap<String, String>();
0:             parameters.putAll(data.getParameters());
0:             for (URI uri : data.getComponents()) {
0:                 parameters.putAll(URISupport.parseParamters(uri));
0:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:520a2de
/////////////////////////////////////////////////////////////////////////
0:         String name = super.getName();
0:         if (name == null) {
0:             name = discoveryAgent.toString();
0:             ;
0:             super.setName(name);
0:         }
0:         return name;
commit:94f3e17
/////////////////////////////////////////////////////////////////////////
0:     public void onServiceAdd(DiscoveryEvent event){
0:         String localURIName=localURI.getScheme() + "://" + localURI.getHost();
0:         // Ignore events once we start stopping.
0:         if(serviceSupport.isStopped()||serviceSupport.isStopping())
0:             return;
0:         String url=event.getServiceName();
0:         if(url!=null){
0:             try{
0:                 uri=new URI(url);
0:             }catch(URISyntaxException e){
0:                 log.warn("Could not connect to remote URI: "+url+" due to bad URI syntax: "+e,e);
0:             if(bridges.containsKey(uri)||localURI.equals(uri)
0:                     ||(connectionFilter!=null&&!connectionFilter.connectTo(uri)))
0:             URI connectUri=uri;
0:             log.info("Establishing network connection between from "+localURIName+" to "+connectUri);
0:             try{
0:                 remoteTransport=TransportFactory.connect(connectUri);
0:             }catch(Exception e){
0:                 log.warn("Could not connect to remote URI: "+localURIName+": "+e.getMessage());
0:                 log.debug("Connection failure exception: "+e,e);
0:             try{
0:                 localTransport=createLocalTransport();
0:             }catch(Exception e){
0:                 log.warn("Could not connect to local URI: "+localURIName+": "+e.getMessage());
0:                 log.debug("Connection failure exception: "+e,e);
0:             NetworkBridge bridge=createBridge(localTransport,remoteTransport,event);
0:             bridges.put(uri,bridge);
0:             try{
0:             }catch(Exception e){
0:                 log.warn("Could not start network bridge between: "+localURIName+" and: "+uri+" due to: "+e);
0:                 log.debug("Start failure exception: "+e,e);
0:                 try{
0:                     discoveryAgent.serviceFailed(event);
0:                 }catch(IOException e1){
0:                 }
commit:54114cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public String getName() {
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0:     	if( serviceSupport.isStopped() || serviceSupport.isStopping() )
/////////////////////////////////////////////////////////////////////////
0:             NetworkBridge bridge = createBridge(localTransport, remoteTransport, event);
/////////////////////////////////////////////////////////////////////////
0:             NetworkBridge bridge = (NetworkBridge) bridges.remove(uri);
/////////////////////////////////////////////////////////////////////////
1:     protected void handleStart() throws Exception {
1:         super.handleStart();
1:     protected void handleStop(ServiceStopper stopper) throws Exception {
0:             NetworkBridge bridge = (NetworkBridge) i.next();
/////////////////////////////////////////////////////////////////////////
1:         super.handleStop(stopper);
0:     protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
0:         NetworkBridgeFailedListener listener = new NetworkBridgeFailedListener() {
1: 
0:             public void bridgeFailed(){
0:                 if( !serviceSupport.isStopped() ) {
0:                     try {
0:                         discoveryAgent.serviceFailed(event);
0:                     } catch (IOException e) {
0:                     }
0:                 }
1:                 
1:             
0:         };
0:         DemandForwardingBridge result = NetworkBridgeFactory.createBridge(this,localTransport,remoteTransport,listener);
/////////////////////////////////////////////////////////////////////////
0:    
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: 
1: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
1: import org.apache.activemq.transport.discovery.DiscoveryListener;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
0: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.Iterator;
0: 
1: /**
1:  * A network connector which uses a discovery agent to detect the remote brokers
1:  * available and setup a connection to each available remote broker
1:  * 
1:  * @org.apache.xbean.XBean element="networkConnector"
1:  * 
0:  * @version $Revision$
1:  */
1: public class DiscoveryNetworkConnector extends NetworkConnector implements DiscoveryListener {
0: 
1:     private DiscoveryAgent discoveryAgent;
0:     private ConcurrentHashMap bridges = new ConcurrentHashMap();
0: 
1:     public DiscoveryNetworkConnector() {
0:     }
0: 
1:     public DiscoveryNetworkConnector(URI discoveryURI) throws IOException {
1:         setUri(discoveryURI);
0:     }
0: 
1:     public void setUri(URI discoveryURI) throws IOException {
1:         setDiscoveryAgent(DiscoveryAgentFactory.createDiscoveryAgent(discoveryURI));
0:     }
0: 
0:     public void onServiceAdd(DiscoveryEvent event) {
1:         String url = event.getServiceName();
1:         if (url != null) {
0: 
1:             URI uri;
0:             try {
1:                 uri = new URI(url);
0:             }
0:             catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:                 return;
0:             }
0: 
0:             // Has it allready been added?
0:             if (bridges.containsKey(uri) || localURI.equals(uri))
0:                 return;
0: 
0:             URI connectUri = uri;
0:             if (failover) {
0:                 try {
0:                     connectUri = new URI("failover:" + connectUri);
0:                 }
0:                 catch (URISyntaxException e) {
0:                     log.warn("Could not create failover URI: " + connectUri);
0:                     return;
0:                 }
0:             }
0: 
0:             log.info("Establishing network connection between " + localURI + " and " + event.getBrokerName() + " at " + connectUri);
0: 
0:             Transport localTransport;
0:             try {
0:                 localTransport = createLocalTransport();
0:             }
0:             catch (Exception e) {
0:                 log.warn("Could not connect to local URI: " + localURI + ": " + e, e);
0:                 return;
0:             }
0: 
1:             Transport remoteTransport;
0:             try {
0:                 remoteTransport = TransportFactory.connect(connectUri);
0:             }
0:             catch (Exception e) {
1:                 ServiceSupport.dispose(localTransport);
0:                 log.warn("Could not connect to remote URI: " + connectUri + ": " + e, e);
0:                 return;
0:             }
0: 
0:             Bridge bridge = createBridge(localTransport, remoteTransport, event);
0:             bridges.put(uri, bridge);
0:             try {
0:                 bridge.start();
0:             }
0:             catch (Exception e) {
1:                 ServiceSupport.dispose(localTransport);
0:                 ServiceSupport.dispose(remoteTransport);
0:                 log.warn("Could not start network bridge between: " + localURI + " and: " + uri + " due to: " + e, e);
0:                 return;
0:             }
0:         }
0:     }
0: 
1:     public void onServiceRemove(DiscoveryEvent event) {
1:         String url = event.getServiceName();
1:         if (url != null) {
1:             URI uri;
0:             try {
1:                 uri = new URI(url);
0:             }
0:             catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:                 return;
0:             }
0: 
0:             Bridge bridge = (Bridge) bridges.get(uri);
0:             if (bridge == null)
0:                 return;
0: 
0:             ServiceSupport.dispose(bridge);
0:         }
0:     }
0: 
1:     public DiscoveryAgent getDiscoveryAgent() {
1:         return discoveryAgent;
0:     }
0: 
1:     public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) {
1:         this.discoveryAgent = discoveryAgent;
1:         if (discoveryAgent != null) {
1:             this.discoveryAgent.setDiscoveryListener(this);
0:             this.discoveryAgent.setBrokerName(getBrokerName());
0:         }
0:     }
0: 
0:     public boolean isFailover() {
0:         return failover;
0:     }
0: 
0:     public void setFailover(boolean reliable) {
0:         this.failover = reliable;
0:     }
0: 
0:     protected void doStart() throws Exception {
1:         if (discoveryAgent == null) {
1:             throw new IllegalStateException("You must configure the 'discoveryAgent' property");
0:         }
1:         this.discoveryAgent.start();
0:         super.doStart();
0:     }
0: 
0:     protected void doStop(ServiceStopper stopper) throws Exception {
0:         for (Iterator i = bridges.values().iterator(); i.hasNext();) {
0:             Bridge bridge = (Bridge) i.next();
0:             try {
1:                 bridge.stop();
0:             }
0:             catch (Exception e) {
1:                 stopper.onException(this, e);
0:             }
0:         }
0:         try {
1:             this.discoveryAgent.stop();
0:         }
0:         catch (Exception e) {
1:             stopper.onException(this, e);
0:         }
0: 
0:         super.doStop(stopper);
0:     }
0: 
0:     protected Bridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
0:         DemandForwardingBridge result = null;
0:         if (conduitSubscriptions) {
0:             if (dynamicOnly) {
0:                 result = new ConduitBridge(localTransport, remoteTransport) {
0:                     protected void serviceRemoteException(Exception error) {
0:                         super.serviceRemoteException(error);
0:                         try {
0:                             // Notify the discovery agent that the remote broker
0:                             // failed.
0:                             discoveryAgent.serviceFailed(event);
0:                         }
0:                         catch (IOException e) {
0:                         }
0:                     }
0:                 };
0:             }
0:             else {
0:                 result = new DurableConduitBridge(localTransport, remoteTransport) {
0:                     protected void serviceRemoteException(Exception error) {
0:                         super.serviceRemoteException(error);
0:                         try {
0:                             // Notify the discovery agent that the remote broker
0:                             // failed.
0:                             discoveryAgent.serviceFailed(event);
0:                         }
0:                         catch (IOException e) {
0:                         }
0:                     }
0:                 };
0:             }
0:         }
0:         else {
0:             result = new DemandForwardingBridge(localTransport, remoteTransport) {
0:                 protected void serviceRemoteException(Exception error) {
0:                     super.serviceRemoteException(error);
0:                     try {
0:                         // Notify the discovery agent that the remote broker
0:                         // failed.
0:                         discoveryAgent.serviceFailed(event);
0:                     }
0:                     catch (IOException e) {
0:                     }
0:                 }
0:             };
0:         }
1:         return configureBridge(result);
0:     }
0: 
0:     protected String createName() {
0:         return discoveryAgent.toString();
0:     }
0: 
0: }
============================================================================