1:734fb7d: /**
1:734fb7d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:734fb7d:  * contributor license agreements.  See the NOTICE file distributed with
1:734fb7d:  * this work for additional information regarding copyright ownership.
1:734fb7d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:734fb7d:  * (the "License"); you may not use this file except in compliance with
1:734fb7d:  * the License.  You may obtain a copy of the License at
1:734fb7d:  *
1:734fb7d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:734fb7d:  *
1:734fb7d:  * Unless required by applicable law or agreed to in writing, software
1:734fb7d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:734fb7d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:734fb7d:  * See the License for the specific language governing permissions and
1:734fb7d:  * limitations under the License.
1:734fb7d:  */
1:734fb7d: package org.apache.activemq.broker.region.cursors;
1:734fb7d: 
1:734fb7d: import java.io.IOException;
1:734fb7d: import java.util.ArrayList;
1:734fb7d: import java.util.List;
1:734fb7d: 
1:734fb7d: import org.apache.activemq.broker.BrokerService;
1:734fb7d: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:734fb7d: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:734fb7d: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:734fb7d: 
1:734fb7d: /**
1:734fb7d:  * This test checks that pending message metrics work properly with MultiKahaDB
1:734fb7d:  *
1:734fb7d:  * AMQ-5923
1:734fb7d:  *
1:734fb7d:  */
1:734fb7d: public class MultiKahaDBPendingMessageCursorTest extends
1:734fb7d:     KahaDBPendingMessageCursorTest {
1:734fb7d: 
1:485fcaf:     /**
1:485fcaf:      * @param prioritizedMessages
1:485fcaf:      */
1:cf3d419:     public MultiKahaDBPendingMessageCursorTest(final boolean prioritizedMessages,
1:cf3d419:             final boolean enableSubscriptionStatistics) {
1:cf3d419:         super(prioritizedMessages, enableSubscriptionStatistics);
1:485fcaf:     }
1:485fcaf: 
1:734fb7d:     @Override
1:734fb7d:     protected void initPersistence(BrokerService brokerService)
1:734fb7d:             throws IOException {
1:734fb7d:         broker.setPersistent(true);
1:734fb7d: 
1:734fb7d:         //setup multi-kaha adapter
1:734fb7d:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:2262225:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
1:734fb7d: 
1:734fb7d:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:734fb7d:         kahaStore.setJournalMaxFileLength(1024 * 512);
1:cf3d419:         kahaStore.setEnableSubscriptionStatistics(enableSubscriptionStatistics);
1:734fb7d: 
1:734fb7d:         //set up a store per destination
1:734fb7d:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:734fb7d:         filtered.setPersistenceAdapter(kahaStore);
1:734fb7d:         filtered.setPerDestination(true);
1:734fb7d:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:734fb7d:         stores.add(filtered);
1:734fb7d: 
1:734fb7d:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:734fb7d:         broker.setPersistenceAdapter(persistenceAdapter);
1:734fb7d:     }
1:734fb7d: 
1:734fb7d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1:     public MultiKahaDBPendingMessageCursorTest(final boolean prioritizedMessages,
1:             final boolean enableSubscriptionStatistics) {
1:         super(prioritizedMessages, enableSubscriptionStatistics);
/////////////////////////////////////////////////////////////////////////
1:         kahaStore.setEnableSubscriptionStatistics(enableSubscriptionStatistics);
commit:485fcaf
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param prioritizedMessages
1:      */
0:     public MultiKahaDBPendingMessageCursorTest(boolean prioritizedMessages) {
0:         super(prioritizedMessages);
1:     }
1: 
commit:2262225
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
commit:d27b192
/////////////////////////////////////////////////////////////////////////
0:         persistenceAdapter.setDirectory(dataFileDir);
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: 
1: /**
1:  * This test checks that pending message metrics work properly with MultiKahaDB
1:  *
1:  * AMQ-5923
1:  *
1:  */
1: public class MultiKahaDBPendingMessageCursorTest extends
1:     KahaDBPendingMessageCursorTest {
1: 
1:     @Override
1:     protected void initPersistence(BrokerService brokerService)
1:             throws IOException {
1:         broker.setPersistent(true);
1: 
1:         //setup multi-kaha adapter
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
0:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
1: 
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024 * 512);
1: 
1:         //set up a store per destination
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         filtered.setPersistenceAdapter(kahaStore);
1:         filtered.setPerDestination(true);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1: }
============================================================================