1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
1:74a7a8b: 
1:74a7a8b: import java.util.concurrent.atomic.AtomicLong;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageListener;
1:d29ca2a: import org.apache.activemq.ActiveMQMessageTransformation;
1:1a5ad28: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.Destination;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:d29ca2a: import org.apache.activemq.broker.region.Topic;
1:74a7a8b: import org.apache.activemq.command.ActiveMQDestination;
1:74a7a8b: import org.apache.activemq.command.ActiveMQMessage;
1:74a7a8b: import org.apache.activemq.command.ConnectionId;
1:74a7a8b: import org.apache.activemq.command.MessageId;
1:74a7a8b: import org.apache.activemq.command.ProducerId;
1:74a7a8b: import org.apache.activemq.command.SessionId;
1:d29ca2a: import org.apache.activemq.util.IdGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * This implementation of {@link SubscriptionRecoveryPolicy} will perform a user
1:d29ca2a:  * specific query mechanism to load any messages they may have missed.
1:d29ca2a:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:0bbc0ac:  * 
1:d29ca2a:  */
1:d29ca2a: public class QueryBasedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
3:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueryBasedSubscriptionRecoveryPolicy.class);
1:d29ca2a: 
1:d29ca2a:     private MessageQuery query;
1:1a5ad28:     private final AtomicLong messageSequence = new AtomicLong(0);
1:1a5ad28:     private final IdGenerator idGenerator = new IdGenerator();
1:1a5ad28:     private final ProducerId producerId = createProducerId();
1:d29ca2a: 
1:c1a0cd6:     public SubscriptionRecoveryPolicy copy() {
1:c1a0cd6:         QueryBasedSubscriptionRecoveryPolicy rc = new QueryBasedSubscriptionRecoveryPolicy();
1:c1a0cd6:         rc.setQuery(query);
1:c1a0cd6:         return rc;
3:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
1:d29ca2a:         return query.validateUpdate(message.getMessage());
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void recover(final ConnectionContext context, final Topic topic, final SubscriptionRecovery sub) throws Exception {
1:230a86c:         if (query != null) {
1:230a86c:             ActiveMQDestination destination = sub.getActiveMQDestination();
1:230a86c:             query.execute(destination, new MessageListener() {
1:d29ca2a: 
1:230a86c:                 public void onMessage(Message message) {
1:230a86c:                     dispatchInitialMessage(message, topic, context, sub);
1:d29ca2a:                 }
1:d29ca2a:             });
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         if (query == null) {
1:d29ca2a:             throw new IllegalArgumentException("No query property configured");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public MessageQuery getQuery() {
1:d29ca2a:         return query;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the query strategy to load initial messages
1:d29ca2a:      */
1:d29ca2a:     public void setQuery(MessageQuery query) {
1:d29ca2a:         this.query = query;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public org.apache.activemq.command.Message[] browse(ActiveMQDestination dest) throws Exception {
1:2748ae1:         return new org.apache.activemq.command.Message[0];
1:d29ca2a:     }
1:d29ca2a:     
1:1a5ad28:     public void setBroker(Broker broker) {        
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     protected void dispatchInitialMessage(Message message, Destination regionDestination, ConnectionContext context, SubscriptionRecovery sub) {
2:d29ca2a:         try {
1:d29ca2a:             ActiveMQMessage activeMessage = ActiveMQMessageTransformation.transformMessage(message, null);
1:d29ca2a:             ActiveMQDestination destination = activeMessage.getDestination();
1:d29ca2a:             if (destination == null) {
1:a110604:                 destination = sub.getActiveMQDestination();
1:d29ca2a:                 activeMessage.setDestination(destination);
1:d29ca2a:             }
1:d29ca2a:             activeMessage.setRegionDestination(regionDestination);
1:d29ca2a:             configure(activeMessage);
1:230a86c:             sub.addRecoveredMessage(context, activeMessage);
1:230a86c:         } catch (Throwable e) {
1:e1bbde7:             LOG.warn("Failed to dispatch initial message: {} into subscription. Reason: ", message, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:8cf4795:     protected void configure(ActiveMQMessage msg) throws JMSException {
1:d29ca2a:         long sequenceNumber = messageSequence.incrementAndGet();
1:d29ca2a:         msg.setMessageId(new MessageId(producerId, sequenceNumber));
1:d29ca2a:         msg.onSend();
1:d29ca2a:         msg.setProducerId(producerId);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected ProducerId createProducerId() {
1:d29ca2a:         String id = idGenerator.generateId();
1:d29ca2a:         ConnectionId connectionId = new ConnectionId(id);
1:d29ca2a:         SessionId sessionId = new SessionId(connectionId, 1);
1:d29ca2a:         return new ProducerId(sessionId, 1);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Failed to dispatch initial message: {} into subscription. Reason: ", message, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(QueryBasedSubscriptionRecoveryPolicy.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("Failed to dispatch initial message: " + message + " into subscription. Reason: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.SessionId;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void recover(final ConnectionContext context, final Topic topic, final SubscriptionRecovery sub) throws Exception {
1:         if (query != null) {
1:             ActiveMQDestination destination = sub.getActiveMQDestination();
1:             query.execute(destination, new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     dispatchInitialMessage(message, topic, context, sub);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public org.apache.activemq.command.Message[] browse(ActiveMQDestination dest) throws Exception {
1:     protected void dispatchInitialMessage(Message message, Destination regionDestination, ConnectionContext context, SubscriptionRecovery sub) {
/////////////////////////////////////////////////////////////////////////
1:             sub.addRecoveredMessage(context, activeMessage);
1:         } catch (Throwable e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicLong;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c1a0cd6
/////////////////////////////////////////////////////////////////////////
1:     public SubscriptionRecoveryPolicy copy() {
1:         QueryBasedSubscriptionRecoveryPolicy rc = new QueryBasedSubscriptionRecoveryPolicy();
1:         rc.setQuery(query);
1:         return rc;
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
0:     public void recover(ConnectionContext context, final Topic topic, final Subscription sub) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public org.apache.activemq.command.Message[] browse(ActiveMQDestination dest) throws Exception{
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.apache.activemq.ActiveMQMessageTransformation;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.SessionId;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.util.IdGenerator;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.Message;
0: import javax.jms.MessageListener;
1: 
1: /**
1:  * This implementation of {@link SubscriptionRecoveryPolicy} will perform a user
1:  * specific query mechanism to load any messages they may have missed.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class QueryBasedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
0:     private static final Log log = LogFactory.getLog(QueryBasedSubscriptionRecoveryPolicy.class);
1: 
1:     private MessageQuery query;
0:     private AtomicLong messageSequence = new AtomicLong(0);
0:     private IdGenerator idGenerator = new IdGenerator();
0:     private ProducerId producerId = createProducerId();
1: 
0:     public QueryBasedSubscriptionRecoveryPolicy() {
1:     }
1: 
0:     public boolean add(ConnectionContext context, MessageReference message) throws Throwable {
1:         return query.validateUpdate(message.getMessage());
1:     }
1: 
0:     public void recover(ConnectionContext context, final Topic topic, final Subscription sub) throws Throwable {
0:         if (query != null) {
0:             final MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
1:             try {
0:                 ActiveMQDestination destination = sub.getConsumerInfo().getDestination();
0:                 query.execute(destination, new MessageListener() {
0:                     public void onMessage(Message message) {
0:                         dispatchInitialMessage(message, topic, msgContext, sub);
1:                     }
1:                 });
1:             }
0:             finally {
0:                 msgContext.clear();
1:             }
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:         if (query == null) {
1:             throw new IllegalArgumentException("No query property configured");
1:         }
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1:     public MessageQuery getQuery() {
1:         return query;
1:     }
1: 
1:     /**
1:      * Sets the query strategy to load initial messages
1:      */
1:     public void setQuery(MessageQuery query) {
1:         this.query = query;
1:     }
1: 
0:     protected void dispatchInitialMessage(Message message,  Destination regionDestination, MessageEvaluationContext msgContext, Subscription sub) {
1:         try {
1:             ActiveMQMessage activeMessage = ActiveMQMessageTransformation.transformMessage(message, null);
1:             ActiveMQDestination destination = activeMessage.getDestination();
1:             if (destination == null) {
0:                 destination = sub.getConsumerInfo().getDestination();
1:                 activeMessage.setDestination(destination);
1:             }
1:             activeMessage.setRegionDestination(regionDestination);
1:             configure(activeMessage);
0:             msgContext.setDestination(destination);
0:             msgContext.setMessageReference(activeMessage);
0:             if (sub.matches(activeMessage, msgContext)) {
0:                 sub.add(activeMessage);
1:             }
1:         }
0:         catch (Throwable e) {
0:             log.warn("Failed to dispatch initial message: " + message + " into subscription. Reason: " + e, e);
1:         }
1:     }
1: 
0:     protected void configure(ActiveMQMessage msg) {
1:         long sequenceNumber = messageSequence.incrementAndGet();
1:         msg.setMessageId(new MessageId(producerId, sequenceNumber));
1:         msg.onSend();
1:         msg.setProducerId(producerId);
1:     }
1: 
1:     protected ProducerId createProducerId() {
1:         String id = idGenerator.generateId();
1:         ConnectionId connectionId = new ConnectionId(id);
1:         SessionId sessionId = new SessionId(connectionId, 1);
1:         return new ProducerId(sessionId, 1);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(QueryBasedSubscriptionRecoveryPolicy.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicLong messageSequence = new AtomicLong(0);
1:     private final IdGenerator idGenerator = new IdGenerator();
1:     private final ProducerId producerId = createProducerId();
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setBroker(Broker broker) {        
0:     }
commit:a110604
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
/////////////////////////////////////////////////////////////////////////
0:     public void recover(final ConnectionContext context,final Topic topic,final SubscriptionRecovery sub)
0:             throws Exception{
0:         if(query!=null){
0:             ActiveMQDestination destination=sub.getActiveMQDestination();
0:             query.execute(destination,new MessageListener(){
0: 
0:                 public void onMessage(Message message){
0:                     dispatchInitialMessage(message,topic,context,sub);
0:                 }
0:             });
/////////////////////////////////////////////////////////////////////////
0:     protected void dispatchInitialMessage(Message message,  Destination regionDestination, ConnectionContext context, SubscriptionRecovery sub) {
1:                 destination = sub.getActiveMQDestination();
0:             sub.addRecoveredMessage(context,activeMessage);
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0:     
0:     public org.apache.activemq.command.Message[] browse(ActiveMQDestination dest) throws Throwable{
1:         return new org.apache.activemq.command.Message[0];
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
0: import javax.jms.JMSException;
0: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1:     protected void configure(ActiveMQMessage msg) throws JMSException {
============================================================================