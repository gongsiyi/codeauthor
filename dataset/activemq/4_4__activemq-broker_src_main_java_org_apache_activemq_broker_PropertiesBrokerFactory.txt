1:a640190: /**
1:a640190:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a640190:  * contributor license agreements.  See the NOTICE file distributed with
1:a640190:  * this work for additional information regarding copyright ownership.
1:a640190:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a640190:  * (the "License"); you may not use this file except in compliance with
1:a640190:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:a640190:  * Unless required by applicable law or agreed to in writing, software
1:a640190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a640190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a640190:  * See the License for the specific language governing permissions and
1:a640190:  * limitations under the License.
1:a640190:  */
1:a640190: package org.apache.activemq.broker;
3:a640190: 
1:a640190: import java.io.File;
1:a640190: import java.io.FileInputStream;
1:a640190: import java.io.IOException;
1:a640190: import java.io.InputStream;
1:74a7a8b: import java.net.MalformedURLException;
1:a640190: import java.net.URI;
1:a640190: import java.net.URL;
1:a640190: import java.util.Map;
1:a640190: import java.util.Properties;
1:a640190: 
1:74a7a8b: import org.apache.activemq.util.IntrospectionSupport;
1:74a7a8b: 
1:a640190: /**
1:230a86c:  * A {@link BrokerFactoryHandler} which uses a properties file to configure the
1:230a86c:  * broker's various policies.
1:12b26b6:  *
1:12b26b6:  *
1:a640190:  */
1:a640190: public class PropertiesBrokerFactory implements BrokerFactoryHandler {
1:a640190: 
1:a640190:     public BrokerService createBroker(URI brokerURI) throws Exception {
1:a640190: 
1:12b26b6:         Map<Object, Object> properties = loadProperties(brokerURI);
1:a640190:         BrokerService brokerService = createBrokerService(brokerURI, properties);
1:a640190: 
1:a640190:         IntrospectionSupport.setProperties(brokerService, properties);
1:a640190:         return brokerService;
6:a640190:     }
1:a640190: 
1:a640190:     /**
1:a640190:      * Lets load the properties from some external URL or a relative file
1:a640190:      */
1:12b26b6:     protected Map<Object, Object> loadProperties(URI brokerURI) throws IOException {
1:a640190:         // lets load a URI
1:a640190:         String remaining = brokerURI.getSchemeSpecificPart();
1:a640190:         Properties properties = new Properties();
1:a640190:         File file = new File(remaining);
1:a640190: 
1:12b26b6:         try (InputStream inputStream = loadStream(file, remaining)) {
1:12b26b6:             if (inputStream != null) {
1:12b26b6:                 properties.load(inputStream);
1:12b26b6:             }
1:12b26b6:         }
1:12b26b6: 
1:12b26b6:         // should we append any system properties?
1:12b26b6:         try {
1:12b26b6:             Properties systemProperties = System.getProperties();
1:12b26b6:             properties.putAll(systemProperties);
1:12b26b6:         } catch (Exception e) {
1:12b26b6:             // ignore security exception
1:12b26b6:         }
1:12b26b6:         return properties;
1:12b26b6:     }
1:12b26b6: 
1:12b26b6:     protected InputStream loadStream(File file, String remaining) throws IOException {
1:a640190:         InputStream inputStream = null;
1:12b26b6:         if (file != null && file.exists()) {
1:a640190:             inputStream = new FileInputStream(file);
1:230a86c:         } else {
1:a640190:             URL url = null;
2:a640190:             try {
1:a640190:                 url = new URL(remaining);
1:230a86c:             } catch (MalformedURLException e) {
1:a640190:                 // lets now see if we can find the name on the classpath
1:a640190:                 inputStream = findResourceOnClassPath(remaining);
2:a640190:                 if (inputStream == null) {
1:a640190:                     throw new IOException("File does not exist: " + remaining + ", could not be found on the classpath and is not a valid URL: " + e);
1:a640190:                 }
1:a640190:             }
1:bc281a2:             if (inputStream == null && url != null) {
1:a640190:                 inputStream = url.openStream();
1:bc281a2:             }
1:a640190:         }
1:12b26b6:         return inputStream;
1:a640190:     }
1:a640190: 
1:a640190:     protected InputStream findResourceOnClassPath(String remaining) {
1:a640190:         InputStream answer = Thread.currentThread().getContextClassLoader().getResourceAsStream(remaining);
1:a640190:         if (answer == null) {
1:a640190:             answer = getClass().getClassLoader().getResourceAsStream(remaining);
1:a640190:         }
1:a640190:         return answer;
1:a640190:     }
1:a640190: 
1:12b26b6:     protected BrokerService createBrokerService(URI brokerURI, Map<Object, Object> properties) {
1:a640190:         return new BrokerService();
1:a640190:     }
1:a640190: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:         Map<Object, Object> properties = loadProperties(brokerURI);
/////////////////////////////////////////////////////////////////////////
1:     protected Map<Object, Object> loadProperties(URI brokerURI) throws IOException {
1:         try (InputStream inputStream = loadStream(file, remaining)) {
1:             if (inputStream != null) {
1:                 properties.load(inputStream);
1:             }
1:         }
1: 
1:         // should we append any system properties?
1:         try {
1:             Properties systemProperties = System.getProperties();
1:             properties.putAll(systemProperties);
1:         } catch (Exception e) {
1:             // ignore security exception
1:         }
1:         return properties;
1:     }
1: 
1:     protected InputStream loadStream(File file, String remaining) throws IOException {
1:         if (file != null && file.exists()) {
/////////////////////////////////////////////////////////////////////////
1:         return inputStream;
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService createBrokerService(URI brokerURI, Map<Object, Object> properties) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
1: import org.apache.activemq.util.IntrospectionSupport;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A {@link BrokerFactoryHandler} which uses a properties file to configure the
1:  * broker's various policies.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             } catch (MalformedURLException e) {
/////////////////////////////////////////////////////////////////////////
0:         if (inputStream != null) {
/////////////////////////////////////////////////////////////////////////
0:         } catch (Exception e) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:bc281a2
/////////////////////////////////////////////////////////////////////////
1:             if (inputStream == null && url != null) {
0:         if(inputStream!=null){
0:             properties.load(inputStream);
0:             inputStream.close();
1:         }
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         inputStream.close();
author:James Strachan
-------------------------------------------------------------------------------
commit:a640190
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import org.apache.activemq.util.IntrospectionSupport;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URL;
0: import java.net.MalformedURLException;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: /**
0:  * A {@link BrokerFactoryHandler} which uses a properties file to
0:  * configure the broker's various policies.
0:  *
0:  * @version $Revision$
1:  */
1: public class PropertiesBrokerFactory implements BrokerFactoryHandler {
1: 
1:     public BrokerService createBroker(URI brokerURI) throws Exception {
1: 
0:         Map properties = loadProperties(brokerURI);
1:         BrokerService brokerService = createBrokerService(brokerURI, properties);
1: 
1:         IntrospectionSupport.setProperties(brokerService, properties);
1:         return brokerService;
1:     }
1: 
1:     /**
1:      * Lets load the properties from some external URL or a relative file
1:      */
0:     protected Map loadProperties(URI brokerURI) throws IOException {
1:         // lets load a URI
1:         String remaining = brokerURI.getSchemeSpecificPart();
1:         Properties properties = new Properties();
1:         File file = new File(remaining);
1: 
1:         InputStream inputStream = null;
0:         if (file.exists()) {
1:             inputStream = new FileInputStream(file);
1:         }
0:         else {
1:             URL url = null;
1:             try {
1:                 url = new URL(remaining);
1:             }
0:             catch (MalformedURLException e) {
1:                 // lets now see if we can find the name on the classpath
1:                 inputStream = findResourceOnClassPath(remaining);
1:                 if (inputStream == null) {
1:                     throw new IOException("File does not exist: " + remaining + ", could not be found on the classpath and is not a valid URL: " + e);
1:                 }
1:             }
1:             if (inputStream == null) {
1:                 inputStream = url.openStream();
1:             }
1:         }
0:         properties.load(inputStream);
1: 
0:         // should we append any system properties?
1:         try {
0:             Properties systemProperties = System.getProperties();
0:             properties.putAll(systemProperties);
1:         }
0:         catch (Exception e) {
0:             // ignore security exception
1:         }
0:         return properties;
1:     }
1: 
1:     protected InputStream findResourceOnClassPath(String remaining) {
1:         InputStream answer = Thread.currentThread().getContextClassLoader().getResourceAsStream(remaining);
1:         if (answer == null) {
1:             answer = getClass().getClassLoader().getResourceAsStream(remaining);
1:         }
1:         return answer;
1:     }
1: 
0:     protected BrokerService createBrokerService(URI brokerURI, Map properties) {
1:         return new BrokerService();
1:     }
1: }
============================================================================