1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.jdbc.adapter;
5:d29ca2a: 
1:d29ca2a: import java.sql.Blob;
1:d29ca2a: import java.sql.ResultSet;
1:d29ca2a: import java.sql.SQLException;
1:d29ca2a: 
1:4843dd4: import org.apache.activemq.store.jdbc.Statements;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Implements all the default JDBC operations that are used
1:d29ca2a:  * by the JDBCPersistenceAdapter.
2:d29ca2a:  * <p/>
1:d29ca2a:  * Subclassing is encouraged to override the default
1:d29ca2a:  * implementation of methods to account for differences
1:d29ca2a:  * in JDBC Driver implementations.
1:d29ca2a:  * <p/>
1:d29ca2a:  *
1:4843dd4:  * @org.apache.xbean.XBean element="oracleJDBCAdapter"
1:b0c2a40:  *
1:4843dd4:  * 
1:d29ca2a:  */
1:d29ca2a: public class OracleJDBCAdapter extends DefaultJDBCAdapter {
1:d29ca2a: 
2:adc45e8:     @Override
1:4843dd4:     public void setStatements(Statements statements) {
1:4843dd4:         statements.setLongDataType("NUMBER");
1:78e7221:         statements.setSequenceDataType("NUMBER");
1:4843dd4:         super.setStatements(statements);
4:d29ca2a:     }
1:78c959a: 
1:78c959a:     @Override
1:78c959a:     public String limitQuery(String query) {
1:78c959a:         return "SELECT * FROM (" + query + ") WHERE ROWNUM <= " + getMaxRows();
1:78c959a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:78c959a
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String limitQuery(String query) {
1:         return "SELECT * FROM (" + query + ") WHERE ROWNUM <= " + getMaxRows();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.Statements;
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="oracleJDBCAdapter"
1:  *
1:     public void setStatements(Statements statements) {
1:         statements.setLongDataType("NUMBER");
1:         super.setStatements(statements);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import java.sql.Blob;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import org.apache.activemq.store.jdbc.StatementProvider;
1: 
1: /**
1:  * Implements all the default JDBC operations that are used
1:  * by the JDBCPersistenceAdapter.
1:  * <p/>
1:  * Subclassing is encouraged to override the default
1:  * implementation of methods to account for differences
1:  * in JDBC Driver implementations.
1:  * <p/>
0:  * The JDBCAdapter inserts and extracts BLOB data using the
0:  * getBytes()/setBytes() operations.
1:  * <p/>
0:  * The databases/JDBC drivers that use this adapter are:
0:  * <ul>
0:  * <li></li>
0:  * </ul>
1:  *
0:  * @version $Revision: 1.2 $
1:  */
1: public class OracleJDBCAdapter extends DefaultJDBCAdapter {
1: 
0:     public static StatementProvider createStatementProvider() {
0:         DefaultStatementProvider answer = new DefaultStatementProvider();
0:         answer.setLongDataType("NUMBER");
0:         return answer;
1:     }
1:     
0:     public OracleJDBCAdapter() {
0:         this(createStatementProvider());
1:     }
1: 
0:     public OracleJDBCAdapter(StatementProvider provider) {
0:         super(provider);        
1:     }
1:     
0:     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {
1: 
0:         // Get as a BLOB
0:         Blob aBlob = rs.getBlob(1);
0:         return aBlob.getBytes(1, (int) aBlob.length());
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c9414c4
/////////////////////////////////////////////////////////////////////////
0: public class OracleJDBCAdapter extends DefaultJDBCAdapter {
commit:ad6b5e2
/////////////////////////////////////////////////////////////////////////
0: 
0:         String addMessageStatement = "INSERT INTO "
0:             + statements.getFullMessageTableName()
0:             + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, empty_blob())";
0:         statements.setAddMessageStatement(addMessageStatement);
0: 
0:         String findMessageByIdStatement = "SELECT MSG FROM " +
0:         	statements.getFullMessageTableName() + " WHERE ID=? FOR UPDATE";
0:         statements.setFindMessageByIdStatement(findMessageByIdStatement);
0: 
commit:adc45e8
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:78e7221
/////////////////////////////////////////////////////////////////////////
1:         statements.setSequenceDataType("NUMBER");
author:James Strachan
-------------------------------------------------------------------------------
commit:9e8689e
/////////////////////////////////////////////////////////////////////////
0: public class OracleJDBCAdapter extends BlobJDBCAdapter {
commit:f533b42
/////////////////////////////////////////////////////////////////////////
0:         if (aBlob == null) {
0:             return null;
0:         }
commit:862c1f2
/////////////////////////////////////////////////////////////////////////
0:         Blob aBlob = rs.getBlob(index);
============================================================================