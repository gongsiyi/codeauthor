1:6d8e2c5: /**
1:6d8e2c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6d8e2c5:  * contributor license agreements.  See the NOTICE file distributed with
1:6d8e2c5:  * this work for additional information regarding copyright ownership.
1:6d8e2c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6d8e2c5:  * (the "License"); you may not use this file except in compliance with
1:6d8e2c5:  * the License.  You may obtain a copy of the License at
5:6d8e2c5:  *
1:6d8e2c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:6d8e2c5:  * Unless required by applicable law or agreed to in writing, software
1:6d8e2c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d8e2c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d8e2c5:  * See the License for the specific language governing permissions and
1:6d8e2c5:  * limitations under the License.
1:6d8e2c5:  */
1:6d8e2c5: package org.apache.activemq.usage;
1:4cddd2c: 
1:6d8e2c5: import org.apache.activemq.store.PersistenceAdapter;
1:52b13d0: 
1:6d8e2c5: /**
1:6d8e2c5:  * Used to keep track of how much of something is being used so that a
1:2b0024c:  * productive working set usage can be controlled. Main use case is manage
1:2b0024c:  * memory usage.
1:b820ac2:  *
1:6d8e2c5:  * @org.apache.xbean.XBean
1:b820ac2:  *
1:6d8e2c5:  */
1:4cddd2c: public class StoreUsage extends PercentLimitUsage<StoreUsage> {
1:52b13d0: 
1:2b0024c:     private PersistenceAdapter store;
1:51ef021: 
1:2b0024c:     public StoreUsage() {
1:2b0024c:         super(null, null, 1.0f);
1:52b13d0:     }
1:4cddd2c: 
1:2b0024c:     public StoreUsage(String name, PersistenceAdapter store) {
1:2b0024c:         super(null, name, 1.0f);
1:2b0024c:         this.store = store;
1:4cddd2c:         updateLimitBasedOnPercent();
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public StoreUsage(StoreUsage parent, String name) {
1:2b0024c:         super(parent, name, 1.0f);
1:2b0024c:         this.store = parent.store;
1:4cddd2c:         updateLimitBasedOnPercent();
1:2b0024c:     }
1:2b0024c: 
1:4cddd2c:     @Override
1:2b0024c:     protected long retrieveUsage() {
1:2b0024c:         if (store == null)
1:2b0024c:             return 0;
1:6d8e2c5:         return store.size();
1:52b13d0:     }
1:4cddd2c: 
1:2b0024c:     public PersistenceAdapter getStore() {
1:2b0024c:         return store;
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setStore(PersistenceAdapter store) {
1:2b0024c:         this.store = store;
1:29d9434:         if (percentLimit > 0 && store != null) {
1:4cddd2c:             //will trigger onLimitChange
1:4cddd2c:             updateLimitBasedOnPercent();
1:4cddd2c:         } else {
1:4cddd2c:             onLimitChange();
1:4cddd2c:         }
1:2b0024c:     }
1:2b0024c: 
1:b820ac2:     @Override
1:51ef021:     public int getPercentUsage() {
1:b820ac2:         usageLock.writeLock().lock();
1:b820ac2:         try {
1:51ef021:             percentUsage = caclPercentUsage();
1:51ef021:             return super.getPercentUsage();
1:b820ac2:         } finally {
1:b820ac2:             usageLock.writeLock().unlock();
1:4cddd2c:         }
1:4cddd2c:     }
1:0ae90c0: 
1:29d9434: 
1:52b13d0:     @Override
1:4cddd2c:     protected void updateLimitBasedOnPercent() {
1:4cddd2c:         usageLock.writeLock().lock();
1:4cddd2c:         try {
1:8a28c06:             percentLimitFromFile(store != null ? store.getDirectory() : null);
1:4cddd2c:         } finally {
1:4cddd2c:             usageLock.writeLock().unlock();
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:0ae90c0:     public StoreUsage copy() {
1:0ae90c0:         StoreUsage storeUsage = new StoreUsage();
1:0ae90c0:         storeUsage.name = name;
1:0ae90c0:         storeUsage.parent = parent;
1:0ae90c0:         storeUsage.total = total;
1:0ae90c0:         storeUsage.percentLimit = percentLimit;
1:0ae90c0:         storeUsage.getLimiter().setLimit(getLimiter().getLimit());
1:0ae90c0:         return storeUsage;
1:0ae90c0:     }
1:52b13d0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fad5081
/////////////////////////////////////////////////////////////////////////
commit:0ae90c0
/////////////////////////////////////////////////////////////////////////
1: 
1:     public StoreUsage copy() {
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.name = name;
1:         storeUsage.parent = parent;
1:         storeUsage.total = total;
1:         storeUsage.percentLimit = percentLimit;
1:         storeUsage.getLimiter().setLimit(getLimiter().getLimit());
1:         return storeUsage;
1:     }
commit:8a28c06
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             percentLimitFromFile(store != null ? store.getDirectory() : null);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:29d9434
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (percentLimit > 0 && store != null) {
commit:3b658f8
/////////////////////////////////////////////////////////////////////////
0:             if (percentLimit >= 0 && store != null) {
commit:4cddd2c
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: 
0: import org.apache.activemq.util.StoreUtil;
/////////////////////////////////////////////////////////////////////////
1: public class StoreUsage extends PercentLimitUsage<StoreUsage> {
/////////////////////////////////////////////////////////////////////////
1:         updateLimitBasedOnPercent();
1:         updateLimitBasedOnPercent();
/////////////////////////////////////////////////////////////////////////
0:         if (percentLimit > 0 && store != null) {
1:             //will trigger onLimitChange
1:             updateLimitBasedOnPercent();
1:         } else {
1:             onLimitChange();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected void updateLimitBasedOnPercent() {
1:         usageLock.writeLock().lock();
1:         try {
1: 
0:             if (percentLimit > 0 && store != null) {
0:                 File dir = StoreUtil.findParentDirectory(store.getDirectory());
1: 
0:                 if (dir != null) {
0:                     this.setLimit(dir.getTotalSpace() * percentLimit / 100);
1:                 }
1:             }
1:         } finally {
1:             usageLock.writeLock().unlock();
1:         }
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b820ac2
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         usageLock.writeLock().lock();
1:         try {
1:         } finally {
1:             usageLock.writeLock().unlock();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:  * productive working set usage can be controlled. Main use case is manage
1:  * memory usage.
0: public class StoreUsage extends Usage<StoreUsage> {
1:     private PersistenceAdapter store;
1:     public StoreUsage() {
1:         super(null, null, 1.0f);
1:     public StoreUsage(String name, PersistenceAdapter store) {
1:         super(null, name, 1.0f);
1:         this.store = store;
1:     }
1: 
1:     public StoreUsage(StoreUsage parent, String name) {
1:         super(parent, name, 1.0f);
1:         this.store = parent.store;
1:     }
1: 
1:     protected long retrieveUsage() {
1:         if (store == null)
1:             return 0;
1: 
1:     public PersistenceAdapter getStore() {
1:         return store;
1:     }
1: 
1:     public void setStore(PersistenceAdapter store) {
1:         this.store = store;
0:         onLimitChange();
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:52b13d0
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public boolean waitForSpace(long timeout, int highWaterMark) throws InterruptedException {
0:         if (parent != null) {
0:             if (parent.waitForSpace(timeout, highWaterMark)) {
0:                 return true;
1:             }
1:         }
1: 
0:         return super.waitForSpace(timeout, highWaterMark);
1:     }
commit:51ef021
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
1:     public int getPercentUsage() {
0:         synchronized (usageMutex) {
1:             percentUsage = caclPercentUsage();
1:             return super.getPercentUsage();
0:         }
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
0: 
1: import org.apache.activemq.store.PersistenceAdapter;
0: 
1: /**
1:  * Used to keep track of how much of something is being used so that a
0:  * productive working set usage can be controlled.
1:  * 
0:  * Main use case is manage memory usage.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 1.3 $
1:  */
0: public class StoreUsage extends Usage{
0: 
0:     final private PersistenceAdapter store;
0: 
0:     public StoreUsage(String name,PersistenceAdapter store){
0:         super(null,name,1.0f);
0:         this.store=store;
0:     }
0:     
0:     public StoreUsage(StoreUsage parent,String name){
0:         super(parent,name,1.0f);
0:         this.store=parent.store;
0:     }
0: 
0:     protected long retrieveUsage(){
1:         return store.size();
0:     }
0: }
============================================================================