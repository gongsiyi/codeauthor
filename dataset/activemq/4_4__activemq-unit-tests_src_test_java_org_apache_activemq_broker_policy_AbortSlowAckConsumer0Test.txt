1:2b99f39: /**
1:2b99f39:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b99f39:  * contributor license agreements.  See the NOTICE file distributed with
1:2b99f39:  * this work for additional information regarding copyright ownership.
1:2b99f39:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b99f39:  * (the "License"); you may not use this file except in compliance with
1:2b99f39:  * the License.  You may obtain a copy of the License at
1:2b99f39:  *
1:2b99f39:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2b99f39:  *
1:2b99f39:  * Unless required by applicable law or agreed to in writing, software
1:2b99f39:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b99f39:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b99f39:  * See the License for the specific language governing permissions and
1:2b99f39:  * limitations under the License.
1:2b99f39:  */
1:2b99f39: package org.apache.activemq.broker.policy;
9:2b99f39: 
1:4273b13: import static org.junit.Assert.assertNotNull;
1:4273b13: import static org.junit.Assert.fail;
1:4273b13: 
1:cce75e0: import java.util.concurrent.TimeUnit;
1:cce75e0: 
1:4273b13: import javax.jms.ConnectionFactory;
1:4273b13: import javax.jms.Message;
1:4273b13: import javax.jms.MessageConsumer;
1:4273b13: import javax.jms.Session;
1:4273b13: 
1:2b99f39: import org.apache.activemq.ActiveMQConnection;
1:2b99f39: import org.apache.activemq.ActiveMQConnectionFactory;
1:2b99f39: import org.apache.activemq.broker.BrokerService;
1:2b99f39: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
1:2b99f39: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:2b99f39: import org.apache.activemq.broker.region.policy.PolicyMap;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:9bf9e1c: import org.junit.runners.Parameterized;
1:2b99f39: 
1:9bf9e1c: @RunWith(value = Parameterized.class)
1:bec711c: public class AbortSlowAckConsumer0Test extends AbortSlowConsumer0Test {
1:2b99f39: 
1:a0835c2:     protected long maxTimeSinceLastAck = 5 * 1000;
1:a0835c2:     protected AbortSlowAckConsumerStrategy strategy;
1:4273b13: 
1:9bf9e1c:     public AbortSlowAckConsumer0Test(Boolean isTopic) {
1:9bf9e1c:         super(isTopic);
1:9bf9e1c:     }
1:9bf9e1c: 
2:2b99f39:     @Override
1:bec711c:     protected AbortSlowAckConsumerStrategy createSlowConsumerStrategy() {
1:bec711c:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:bec711c:         strategy.setAbortConnection(abortConnection);
1:bec711c:         strategy.setCheckPeriod(checkPeriod);
1:bec711c:         strategy.setMaxSlowDuration(maxSlowDuration);
1:bec711c:         strategy.setMaxTimeSinceLastAck(maxTimeSinceLastAck);
1:bec711c: 
1:bec711c:         return strategy;
2:2b99f39:     }
1:bec711c: 
1:2b99f39:     @Override
1:2b99f39:     protected BrokerService createBroker() throws Exception {
1:2b99f39:         BrokerService broker = super.createBroker();
1:2b99f39:         PolicyEntry policy = new PolicyEntry();
1:bec711c: 
1:4273b13:         strategy = createSlowConsumerStrategy();
1:4273b13:         underTest = strategy;
1:2b99f39: 
1:2b99f39:         policy.setSlowConsumerStrategy(strategy);
1:2b99f39:         policy.setQueuePrefetch(10);
1:2b99f39:         policy.setTopicPrefetch(10);
1:2b99f39:         PolicyMap pMap = new PolicyMap();
1:2b99f39:         pMap.setDefaultEntry(policy);
1:2b99f39:         broker.setDestinationPolicy(pMap);
1:2b99f39:         return broker;
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     @Override
1:2b99f39:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:2b99f39:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:2b99f39:         factory.getPrefetchPolicy().setAll(1);
1:2b99f39:         return factory;
1:2b99f39:     }
1:bec711c: 
1:2b99f39:     @Override
1:bec711c:     @Test
1:2b99f39:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
1:2b99f39:         strategy.setMaxTimeSinceLastAck(500); // so jmx does the abort
1:2b99f39:         super.testSlowConsumerIsAbortedViaJmx();
1:2b99f39:     }
1:2b99f39: 
1:bec711c:     @Test
1:2b99f39:     public void testZeroPrefetchConsumerIsAborted() throws Exception {
1:cce75e0:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
1:cce75e0: 
1:2b99f39:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:2b99f39:         conn.setExceptionListener(this);
1:2b99f39:         connections.add(conn);
1:2b99f39: 
1:2b99f39:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2b99f39:         final MessageConsumer consumer = sess.createConsumer(destination);
1:2b99f39:         assertNotNull(consumer);
1:2b99f39:         conn.start();
3:2b99f39:         startProducers(destination, 20);
1:2b99f39: 
1:2b99f39:         Message message = consumer.receive(5000);
1:2b99f39:         assertNotNull(message);
1:2b99f39: 
1:cce75e0:         TimeUnit.SECONDS.sleep(15);
1:cce75e0: 
1:2b99f39:         try {
1:cce75e0:             consumer.receive(5000);
2:2b99f39:             fail("Slow consumer not aborted.");
1:4273b13:         } catch (Exception ex) {
1:2b99f39:         }
1:2b99f39:     }
1:2b99f39: 
1:bec711c:     @Test
1:2b99f39:     public void testIdleConsumerCanBeAbortedNoMessages() throws Exception {
1:2b99f39:         strategy.setIgnoreIdleConsumers(false);
1:cce75e0:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
1:2b99f39: 
1:2b99f39:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:2b99f39:         conn.setExceptionListener(this);
1:2b99f39:         connections.add(conn);
1:2b99f39: 
1:2b99f39:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2b99f39:         final MessageConsumer consumer = sess.createConsumer(destination);
1:2b99f39:         assertNotNull(consumer);
1:2b99f39:         conn.start();
1:2b99f39: 
1:cce75e0:         startProducers(destination, 1);
1:cce75e0: 
1:cce75e0:         Message message = consumer.receive(5000);
1:cce75e0:         assertNotNull(message);
1:cce75e0: 
1:cce75e0:         // Consumer needs to be closed before the reeive call.
1:cce75e0:         TimeUnit.SECONDS.sleep(15);
1:cce75e0: 
1:2b99f39:         try {
1:cce75e0:             consumer.receive(5000);
1:2b99f39:             fail("Idle consumer not aborted.");
1:4273b13:         } catch (Exception ex) {
1:2b99f39:         }
1:2b99f39:     }
1:2b99f39: 
1:bec711c:     @Test
1:2b99f39:     public void testIdleConsumerCanBeAborted() throws Exception {
1:2b99f39:         strategy.setIgnoreIdleConsumers(false);
1:cce75e0:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
1:2b99f39: 
1:2b99f39:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:2b99f39:         conn.setExceptionListener(this);
1:2b99f39:         connections.add(conn);
1:2b99f39: 
1:2b99f39:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2b99f39:         final MessageConsumer consumer = sess.createConsumer(destination);
1:2b99f39:         assertNotNull(consumer);
1:2b99f39:         conn.start();
1:cce75e0:         startProducers(destination, 1);
1:2b99f39: 
1:2b99f39:         Message message = consumer.receive(5000);
1:2b99f39:         assertNotNull(message);
1:2b99f39:         message.acknowledge();
1:cce75e0: 
1:cce75e0:         // Consumer needs to be closed before the reeive call.
1:cce75e0:         TimeUnit.SECONDS.sleep(15);
1:2b99f39: 
1:2b99f39:         try {
1:cce75e0:             consumer.receive(5000);
1:cce75e0:             fail("Idle consumer not aborted.");
1:4273b13:         } catch (Exception ex) {
1:2b99f39:         }
1:2b99f39:     }
1:2b99f39: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a0835c2
/////////////////////////////////////////////////////////////////////////
1:     protected long maxTimeSinceLastAck = 5 * 1000;
1:     protected AbortSlowAckConsumerStrategy strategy;
commit:cce75e0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
1: 
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(15);
1: 
1:             consumer.receive(5000);
1:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
/////////////////////////////////////////////////////////////////////////
1:         startProducers(destination, 1);
1: 
1:         Message message = consumer.receive(5000);
1:         assertNotNull(message);
1: 
1:         // Consumer needs to be closed before the reeive call.
1:         TimeUnit.SECONDS.sleep(15);
1: 
1:             consumer.receive(5000);
1:         strategy.setMaxTimeSinceLastAck(2000); // Make it shorter
/////////////////////////////////////////////////////////////////////////
1:         startProducers(destination, 1);
1:         // Consumer needs to be closed before the reeive call.
1:         TimeUnit.SECONDS.sleep(15);
1: 
1:             consumer.receive(5000);
1:             fail("Idle consumer not aborted.");
commit:4273b13
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
0:     AbortSlowAckConsumerStrategy strategy;
1: 
/////////////////////////////////////////////////////////////////////////
1:         strategy = createSlowConsumerStrategy();
1:         underTest = strategy;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception ex) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception ex) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception ex) {
author:gtully
-------------------------------------------------------------------------------
commit:9bf9e1c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1:     public AbortSlowAckConsumer0Test(Boolean isTopic) {
1:         super(isTopic);
1:     }
1: 
commit:b136df1
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.fail;
0: @RunWith(value = BlockJUnit4ClassRunner.class)
1: public class AbortSlowAckConsumer0Test extends AbortSlowConsumer0Test {
0:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowAckConsumer0Test.class);
1:     protected AbortSlowAckConsumerStrategy createSlowConsumerStrategy() {
1:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:         strategy.setAbortConnection(abortConnection);
1:         strategy.setCheckPeriod(checkPeriod);
1:         strategy.setMaxSlowDuration(maxSlowDuration);
1:         strategy.setMaxTimeSinceLastAck(maxTimeSinceLastAck);
1: 
1:         return strategy;
/////////////////////////////////////////////////////////////////////////
0:         AbortSlowAckConsumerStrategy strategy = createSlowConsumerStrategy();
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Ignore("AMQ-5001")
1:     @Test
0:         AbortSlowAckConsumerStrategy strategy = createSlowConsumerStrategy();
0:     @Ignore("AMQ-5001")
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Ignore("AMQ-5001")
1:     @Test
0:         AbortSlowAckConsumerStrategy strategy = createSlowConsumerStrategy();
/////////////////////////////////////////////////////////////////////////
0:     @Ignore("AMQ-5001")
1:     @Test
0:         AbortSlowAckConsumerStrategy strategy = createSlowConsumerStrategy();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2b99f39
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
0: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: 
0: public class AbortSlowAckConsumerTest extends AbortSlowConsumerTest {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowAckConsumerTest.class);
1: 
0:     protected long maxTimeSinceLastAck = 5 * 1000;
1: 
1:     @Override
0:     protected AbortSlowConsumerStrategy createSlowConsumerStrategy() {
0:         return new AbortSlowConsumerStrategy();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         PolicyEntry policy = new PolicyEntry();
1: 
0:         AbortSlowAckConsumerStrategy strategy = (AbortSlowAckConsumerStrategy) underTest;
0:         strategy.setAbortConnection(abortConnection);
0:         strategy.setCheckPeriod(checkPeriod);
0:         strategy.setMaxSlowDuration(maxSlowDuration);
0:         strategy.setMaxTimeSinceLastAck(maxTimeSinceLastAck);
1: 
1:         policy.setSlowConsumerStrategy(strategy);
1:         policy.setQueuePrefetch(10);
1:         policy.setTopicPrefetch(10);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.getPrefetchPolicy().setAll(1);
1:         return factory;
1:     }
1: 
1:     @Override
1:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
0:         AbortSlowAckConsumerStrategy strategy = (AbortSlowAckConsumerStrategy) underTest;
1:         strategy.setMaxTimeSinceLastAck(500); // so jmx does the abort
1:         super.testSlowConsumerIsAbortedViaJmx();
1:     }
1: 
1:     @Override
0:     public void initCombosForTestSlowConsumerIsAborted() {
0:         addCombinationValues("abortConnection", new Object[]{Boolean.TRUE, Boolean.FALSE});
0:         addCombinationValues("topic", new Object[]{Boolean.TRUE, Boolean.FALSE});
1:     }
1: 
1:     public void testZeroPrefetchConsumerIsAborted() throws Exception {
1:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:         conn.setExceptionListener(this);
1:         connections.add(conn);
1: 
1:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageConsumer consumer = sess.createConsumer(destination);
1:         assertNotNull(consumer);
1:         conn.start();
1:         startProducers(destination, 20);
1: 
1:         Message message = consumer.receive(5000);
1:         assertNotNull(message);
1: 
1:         try {
0:             consumer.receive(20000);
1:             fail("Slow consumer not aborted.");
0:         } catch(Exception ex) {
1:         }
1:     }
1: 
1:     public void testIdleConsumerCanBeAbortedNoMessages() throws Exception {
0:         AbortSlowAckConsumerStrategy strategy = (AbortSlowAckConsumerStrategy) underTest;
1:         strategy.setIgnoreIdleConsumers(false);
1: 
1:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:         conn.setExceptionListener(this);
1:         connections.add(conn);
1: 
1:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageConsumer consumer = sess.createConsumer(destination);
1:         assertNotNull(consumer);
1:         conn.start();
1:         startProducers(destination, 20);
1: 
1:         try {
0:             consumer.receive(20000);
1:             fail("Idle consumer not aborted.");
0:         } catch(Exception ex) {
1:         }
1:     }
1: 
1:     public void testIdleConsumerCanBeAborted() throws Exception {
0:         AbortSlowAckConsumerStrategy strategy = (AbortSlowAckConsumerStrategy) underTest;
1:         strategy.setIgnoreIdleConsumers(false);
1: 
1:         ActiveMQConnection conn = (ActiveMQConnection) createConnectionFactory().createConnection();
1:         conn.setExceptionListener(this);
1:         connections.add(conn);
1: 
1:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageConsumer consumer = sess.createConsumer(destination);
1:         assertNotNull(consumer);
1:         conn.start();
1:         startProducers(destination, 20);
1: 
1:         Message message = consumer.receive(5000);
1:         assertNotNull(message);
1:         message.acknowledge();
1: 
1:         try {
0:             consumer.receive(20000);
1:             fail("Slow consumer not aborted.");
0:         } catch(Exception ex) {
1:         }
1:     }
1: }
============================================================================