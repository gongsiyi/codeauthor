1:0ae90c0: /**
1:0ae90c0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0ae90c0:  * contributor license agreements.  See the NOTICE file distributed with
1:0ae90c0:  * this work for additional information regarding copyright ownership.
1:0ae90c0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0ae90c0:  * (the "License"); you may not use this file except in compliance with
1:0ae90c0:  * the License.  You may obtain a copy of the License at
1:0ae90c0:  *
1:0ae90c0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0ae90c0:  *
1:0ae90c0:  * Unless required by applicable law or agreed to in writing, software
1:0ae90c0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0ae90c0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0ae90c0:  * See the License for the specific language governing permissions and
1:0ae90c0:  * limitations under the License.
1:0ae90c0:  */
1:0ae90c0: package org.apache.activemq.store;
1:0ae90c0: 
1:0ae90c0: import junit.framework.TestCase;
1:0ae90c0: import org.apache.activemq.broker.BrokerService;
1:0ae90c0: import org.apache.activemq.broker.region.BaseDestination;
1:0ae90c0: import org.apache.activemq.command.ActiveMQDestination;
1:0ae90c0: import org.apache.activemq.command.ActiveMQQueue;
1:0ae90c0: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:0ae90c0: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:0ae90c0: import org.apache.activemq.usage.SystemUsage;
1:0ae90c0: import org.apache.activemq.xbean.BrokerFactoryBean;
1:0ae90c0: import org.slf4j.Logger;
1:0ae90c0: import org.slf4j.LoggerFactory;
1:0ae90c0: import org.springframework.core.io.ClassPathResource;
1:0ae90c0: import org.springframework.core.io.Resource;
1:0ae90c0: 
1:0ae90c0: import java.io.File;
1:0ae90c0: 
1:0ae90c0: public class MKahaDBConfigTest extends TestCase {
1:0ae90c0: 
1:0ae90c0:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBConfigTest.class);
1:0ae90c0: 
1:0ae90c0:     /*
1:0ae90c0:      * This tests configuring the different broker properties using
1:0ae90c0:      * xbeans-spring
1:0ae90c0:      */
1:0ae90c0:     public void testBrokerConfig() throws Exception {
1:0ae90c0:         BrokerService broker;
1:0ae90c0: 
1:0ae90c0:         broker = createBroker("org/apache/activemq/store/mKahaDB.xml");
1:0ae90c0:         LOG.info("Success");
1:0ae90c0: 
1:0ae90c0:         try {
1:0ae90c0:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:0ae90c0:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:0ae90c0:             assertEquals("Broker Config Error (persistent)", true, broker.isPersistent());
1:0ae90c0:             LOG.info("Success");
1:0ae90c0: 
1:0ae90c0:             SystemUsage systemUsage = broker.getSystemUsage();
1:0ae90c0:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:0ae90c0:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1 * 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:0ae90c0:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1:0ae90c0: 
1:0ae90c0:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:0ae90c0:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof MultiKahaDBPersistenceAdapter);
1:0ae90c0: 
1:0ae90c0:             LOG.info("Success");
1:0ae90c0: 
1:0ae90c0:             broker.getAdminView().addQueue("A.B");
1:0ae90c0: 
1:0ae90c0:             BaseDestination queue = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(new ActiveMQQueue("A.B"));
1:0ae90c0:             assertTrue(queue.getSystemUsage().getStoreUsage().getStore() instanceof KahaDBPersistenceAdapter);
1:0ae90c0:             assertEquals(50*1024*1024, queue.getSystemUsage().getStoreUsage().getLimit());
1:0ae90c0: 
1:0ae90c0:         } finally {
1:0ae90c0:             if (broker != null) {
1:0ae90c0:                 broker.stop();
1:0ae90c0:             }
1:0ae90c0:         }
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     protected static void recursiveDelete(File file) {
1:0ae90c0:         if (file.isDirectory()) {
1:0ae90c0:             File[] files = file.listFiles();
1:0ae90c0:             for (int i = 0; i < files.length; i++) {
1:0ae90c0:                 recursiveDelete(files[i]);
1:0ae90c0:             }
1:0ae90c0:         }
1:0ae90c0:         file.delete();
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     protected BrokerService createBroker(String resource) throws Exception {
1:0ae90c0:         return createBroker(new ClassPathResource(resource));
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     protected BrokerService createBroker(Resource resource) throws Exception {
1:0ae90c0:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:0ae90c0:         factory.afterPropertiesSet();
1:0ae90c0: 
1:0ae90c0:         BrokerService broker = factory.getBroker();
1:0ae90c0: 
1:0ae90c0:         assertTrue("Should have a broker!", broker != null);
1:0ae90c0: 
1:0ae90c0:         return broker;
1:0ae90c0:     }
1:0ae90c0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0ae90c0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.BaseDestination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: import java.io.File;
1: 
1: public class MKahaDBConfigTest extends TestCase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBConfigTest.class);
1: 
1:     /*
1:      * This tests configuring the different broker properties using
1:      * xbeans-spring
1:      */
1:     public void testBrokerConfig() throws Exception {
1:         BrokerService broker;
1: 
1:         broker = createBroker("org/apache/activemq/store/mKahaDB.xml");
1:         LOG.info("Success");
1: 
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:             assertEquals("Broker Config Error (persistent)", true, broker.isPersistent());
1:             LOG.info("Success");
1: 
1:             SystemUsage systemUsage = broker.getSystemUsage();
1:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1 * 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1: 
1:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof MultiKahaDBPersistenceAdapter);
1: 
1:             LOG.info("Success");
1: 
1:             broker.getAdminView().addQueue("A.B");
1: 
1:             BaseDestination queue = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(new ActiveMQQueue("A.B"));
1:             assertTrue(queue.getSystemUsage().getStoreUsage().getStore() instanceof KahaDBPersistenceAdapter);
1:             assertEquals(50*1024*1024, queue.getSystemUsage().getStoreUsage().getLimit());
1: 
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     protected static void recursiveDelete(File file) {
1:         if (file.isDirectory()) {
1:             File[] files = file.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         file.delete();
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1: 
1:         BrokerService broker = factory.getBroker();
1: 
1:         assertTrue("Should have a broker!", broker != null);
1: 
1:         return broker;
1:     }
1: }
============================================================================