1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
19:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.ArrayList;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JAnnotation;
1:bd0ad68: import org.codehaus.jam.JAnnotationValue;
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CSourcesGenerator extends CHeadersGenerator {
1:bd0ad68: 
1:540dd5c:     public Object run() {
1:540dd5c:         filePostFix = ".c";
1:540dd5c:         if (destFile == null) {
1:540dd5c:             destFile = new File(targetDir + "/ow_commands_v" + getOpenwireVersion() + ".c");
1:540dd5c:         }
1:540dd5c:         return super.run();
1:540dd5c:     }
1:bd0ad68: 
1:c454fe3:     protected List<JClass> sort(List<JClass> source) {
1:540dd5c:         return source;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateSetup(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*****************************************************************************************");
1:540dd5c:         out.println(" *  ");
1:540dd5c:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:540dd5c:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:540dd5c:         out.println(" *        this file.");
1:540dd5c:         out.println(" *  ");
1:540dd5c:         out.println(" *****************************************************************************************/");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"ow_commands_v" + openwireVersion + ".h\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#define SUCCESS_CHECK( f ) { apr_status_t rc=f; if(rc!=APR_SUCCESS) return rc; }");
1:540dd5c:         out.println("");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c: 
1:540dd5c:         ArrayList<JProperty> properties = new ArrayList<JProperty>();
1:bd0ad68:         jclass.getDeclaredProperties();
1:bd0ad68:         for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {
1:bd0ad68:             JProperty p = jclass.getDeclaredProperties()[i];
1:bd0ad68:             if (isValidProperty(p)) {
1:bd0ad68:                 properties.add(p);
36:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68: 
1:540dd5c:         String name = jclass.getSimpleName();
1:540dd5c:         String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:         String baseName = "DataStructure";
1:540dd5c:         JClass superclass = jclass.getSuperclass();
1:540dd5c:         while (superclass.getSuperclass() != null) {
1:540dd5c:             if (sortedClasses.contains(superclass)) {
1:540dd5c:                 baseName = superclass.getSimpleName();
1:540dd5c:                 break;
1:540dd5c:             } else {
1:540dd5c:                 superclass = superclass.getSuperclass();
1:540dd5c:             }
1:bd0ad68:         }
1:bd0ad68: 
1:540dd5c:         out.println("ow_boolean ow_is_a_" + name + "(ow_DataStructure *object) {");
1:540dd5c:         out.println("   if( object == 0 )");
1:540dd5c:         out.println("      return 0;");
1:540dd5c:         out.println("      ");
1:540dd5c:         out.println("   switch(object->structType) {");
1:bd0ad68: 
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass sub = (JClass)iterator.next();
1:540dd5c:             String subtype = "OW_" + sub.getSimpleName().toUpperCase() + "_TYPE";
1:540dd5c:             if (jclass.isAssignableFrom(sub) && !isAbstract(sub)) {
1:540dd5c:                 out.println("");
1:540dd5c:                 out.println("   case " + subtype + ":");
1:540dd5c:             }
1:bd0ad68:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("      return 1;");
1:540dd5c:         out.println("   }");
1:540dd5c:         out.println("   return 0;");
1:540dd5c:         out.println("}");
1:bd0ad68: 
1:540dd5c:         if (!isAbstract(jclass)) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("ow_" + name + " *ow_" + name + "_create(apr_pool_t *pool) ");
1:540dd5c:             out.println("{");
1:540dd5c:             out.println("   ow_" + name + " *value = apr_pcalloc(pool,sizeof(ow_" + name + "));");
1:540dd5c:             out.println("   if( value!=0 ) {");
1:540dd5c:             out.println("      ((ow_DataStructure*)value)->structType = " + type + ";");
1:540dd5c:             out.println("   }");
1:540dd5c:             out.println("   return value;");
1:540dd5c:             out.println("}");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("apr_status_t ow_marshal1_" + name + "(ow_bit_buffer *buffer, ow_" + name + " *object)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   ow_marshal1_" + baseName + "(buffer, (ow_" + baseName + "*)object);");
1:540dd5c: 
1:540dd5c:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = iter.next();
1:540dd5c:             String propname = toPropertyCase(property.getSimpleName());
1:540dd5c:             boolean cached = isCachedProperty(property);
1:540dd5c:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c: 
1:540dd5c:             type = property.getType().getQualifiedName();
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("   ow_bit_buffer_append(buffer, object->" + propname + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("   ow_marshal1_long(buffer, object->" + propname + ");");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size == null) {
1:540dd5c:                     out.println("   ow_bit_buffer_append(buffer,  object->" + propname + "!=0 );");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:540dd5c:                 if (size == null) {
1:540dd5c:                     out.println("   ow_bit_buffer_append(buffer,  object->" + propname + "!=0 );");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("java.lang.String")) {
1:540dd5c:                 out.println("   ow_marshal1_string(buffer, object->" + propname + ");");
1:540dd5c:             } else {
1:540dd5c:                 if (property.getType().isArrayType()) {
1:540dd5c:                     if (size != null) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array(buffer, object->" + propname + "));");
1:540dd5c:                     }
1:540dd5c:                 } else if (isThrowable(property.getType())) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal1_throwable(buffer, object->" + propname + "));");
1:540dd5c:                 } else {
1:540dd5c:                     if (cached) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal1_cached_object(buffer, (ow_DataStructure*)object->" + propname + "));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal1_nested_object(buffer, (ow_DataStructure*)object->" + propname + "));");
1:540dd5c:                     }
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:             out.println("");
1:bd0ad68:         }
1:bd0ad68: 
1:540dd5c:         out.println("   ");
1:540dd5c:         out.println("   return APR_SUCCESS;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("apr_status_t ow_marshal2_" + name + "(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_" + name + " *object)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   ow_marshal2_" + baseName + "(buffer, bitbuffer, (ow_" + baseName + "*)object);   ");
1:540dd5c: 
1:540dd5c:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = iter.next();
1:540dd5c:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             Object propname = toPropertyCase(property.getSimpleName());
1:540dd5c:             boolean cached = isCachedProperty(property);
1:540dd5c: 
1:540dd5c:             type = property.getType().getQualifiedName();
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("   ow_bit_buffer_read(bitbuffer);");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_marshal2_long(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("java.lang.String")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_marshal2_string(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:             } else {
1:540dd5c:                 if (property.getType().isArrayType()) {
1:540dd5c:                     if (size != null) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array_const_size(buffer, bitbuffer, object->" + propname + ", " + size.asInt() + "));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:                     }
1:540dd5c:                 } else if (isThrowable(property.getType())) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_marshal2_throwable(buffer, bitbuffer, object->" + propname + "));");
1:540dd5c:                 } else {
1:540dd5c:                     if (cached) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal2_cached_object(buffer, bitbuffer, (ow_DataStructure*)object->" + propname + "));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_marshal2_nested_object(buffer, bitbuffer, (ow_DataStructure*)object->" + propname + "));");
1:540dd5c:                     }
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:             out.println("");
1:bd0ad68:         }
1:bd0ad68: 
1:540dd5c:         out.println("   ");
1:540dd5c:         out.println("   return APR_SUCCESS;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("apr_status_t ow_unmarshal_" + name + "(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_" + name + " *object, apr_pool_t *pool)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   ow_unmarshal_" + baseName + "(buffer, bitbuffer, (ow_" + baseName + "*)object, pool);   ");
1:540dd5c: 
1:540dd5c:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = iter.next();
1:540dd5c:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             String propname = toPropertyCase(property.getSimpleName());
1:540dd5c:             boolean cached = isCachedProperty(property);
1:540dd5c: 
1:540dd5c:             type = property.getType().getQualifiedName();
1:bd0ad68: 
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("   object->" + propname + " = ow_bit_buffer_read(bitbuffer);");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_unmarshal_long(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("java.lang.String")) {
1:540dd5c:                 out.println("   SUCCESS_CHECK(ow_unmarshal_string(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:             } else {
1:540dd5c:                 if (property.getType().isArrayType()) {
1:540dd5c:                     if (size != null) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array_const_size(buffer, bitbuffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:                     }
1:540dd5c:                 } else if (isThrowable(property.getType())) {
1:540dd5c:                     out.println("   SUCCESS_CHECK(ow_unmarshal_throwable(buffer, bitbuffer, &object->" + propname + ", pool));");
1:540dd5c:                 } else {
1:540dd5c:                     if (cached) {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_unmarshal_cached_object(buffer, bitbuffer, (ow_DataStructure**)&object->" + propname + ", pool));");
1:540dd5c:                     } else {
1:540dd5c:                         out.println("   SUCCESS_CHECK(ow_unmarshal_nested_object(buffer, bitbuffer, (ow_DataStructure**)&object->" + propname + ", pool));");
1:540dd5c:                     }
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:             out.println("");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("   ");
1:540dd5c:         out.println("   return APR_SUCCESS;");
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void generateTearDown(PrintWriter out) {
1:540dd5c:         out.println("");
1:540dd5c:         out.println("ow_DataStructure *ow_create_object(ow_byte type, apr_pool_t *pool)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   switch( type ) {");
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iterator.next();
1:540dd5c:             String name = jclass.getSimpleName();
1:540dd5c:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:             if (!isAbstract(jclass)) {
1:540dd5c:                 out.println("      case " + type + ": return (ow_DataStructure *)ow_" + name + "_create(pool);");
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("   }");
1:540dd5c:         out.println("   return 0;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("apr_status_t ow_marshal1_object(ow_bit_buffer *buffer, ow_DataStructure *object)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   switch( object->structType ) {");
1:540dd5c: 
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iterator.next();
1:540dd5c:             String name = jclass.getSimpleName();
1:540dd5c:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:             if (!isAbstract(jclass)) {
1:540dd5c:                 out.println("      case " + type + ": return ow_marshal1_" + name + "(buffer, (ow_" + name + "*)object);");
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("   }");
1:540dd5c:         out.println("   return APR_EGENERAL;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("apr_status_t ow_marshal2_object(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   switch( object->structType ) {");
1:540dd5c: 
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iterator.next();
1:540dd5c:             String name = jclass.getSimpleName();
1:540dd5c:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:             if (!isAbstract(jclass)) {
1:540dd5c:                 out.println("      case " + type + ": return ow_marshal2_" + name + "(buffer, bitbuffer, (ow_" + name + "*)object);");
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("   }");
1:540dd5c:         out.println("   return APR_EGENERAL;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("apr_status_t ow_unmarshal_object(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object, apr_pool_t *pool)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("   switch( object->structType ) {");
1:540dd5c: 
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iterator.next();
1:540dd5c:             String name = jclass.getSimpleName();
1:540dd5c:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:             if (!isAbstract(jclass)) {
1:540dd5c:                 out.println("      case " + type + ": return ow_unmarshal_" + name + "(buffer, bitbuffer, (ow_" + name + "*)object, pool);");
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("   }");
1:540dd5c:         out.println("   return APR_EGENERAL;");
1:540dd5c:         out.println("}");
1:bd0ad68: 
1:bd0ad68:     }
1:bd0ad68: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c454fe3
/////////////////////////////////////////////////////////////////////////
1:     protected List<JClass> sort(List<JClass> source) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     public Object run() {
1:         filePostFix = ".c";
1:         if (destFile == null) {
1:             destFile = new File(targetDir + "/ow_commands_v" + getOpenwireVersion() + ".c");
1:         }
1:         return super.run();
1:     }
0:     protected List sort(List source) {
1:         return source;
1:     }
1:     protected void generateSetup(PrintWriter out) {
1:         generateLicence(out);
1:         out.println("");
1:         out.println("/*****************************************************************************************");
1:         out.println(" *  ");
1:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:         out.println(" *        this file.");
1:         out.println(" *  ");
1:         out.println(" *****************************************************************************************/");
1:         out.println("");
1:         out.println("");
1:         out.println("#include \"ow_commands_v" + openwireVersion + ".h\"");
1:         out.println("");
1:         out.println("#define SUCCESS_CHECK( f ) { apr_status_t rc=f; if(rc!=APR_SUCCESS) return rc; }");
1:         out.println("");
1:     }
1:     protected void generateFile(PrintWriter out) throws Exception {
1: 
1:         ArrayList<JProperty> properties = new ArrayList<JProperty>();
/////////////////////////////////////////////////////////////////////////
1:         String name = jclass.getSimpleName();
1:         String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:         String baseName = "DataStructure";
1:         JClass superclass = jclass.getSuperclass();
1:         while (superclass.getSuperclass() != null) {
1:             if (sortedClasses.contains(superclass)) {
1:                 baseName = superclass.getSimpleName();
1:                 break;
1:             } else {
1:                 superclass = superclass.getSuperclass();
1:             }
1:         out.println("ow_boolean ow_is_a_" + name + "(ow_DataStructure *object) {");
1:         out.println("   if( object == 0 )");
1:         out.println("      return 0;");
1:         out.println("      ");
1:         out.println("   switch(object->structType) {");
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass sub = (JClass)iterator.next();
1:             String subtype = "OW_" + sub.getSimpleName().toUpperCase() + "_TYPE";
1:             if (jclass.isAssignableFrom(sub) && !isAbstract(sub)) {
1:                 out.println("");
1:                 out.println("   case " + subtype + ":");
1:         }
1:         out.println("");
1:         out.println("      return 1;");
1:         out.println("   }");
1:         out.println("   return 0;");
1:         out.println("}");
1:         if (!isAbstract(jclass)) {
1:             out.println("");
1:             out.println("");
1:             out.println("ow_" + name + " *ow_" + name + "_create(apr_pool_t *pool) ");
1:             out.println("{");
1:             out.println("   ow_" + name + " *value = apr_pcalloc(pool,sizeof(ow_" + name + "));");
1:             out.println("   if( value!=0 ) {");
1:             out.println("      ((ow_DataStructure*)value)->structType = " + type + ";");
1:             out.println("   }");
1:             out.println("   return value;");
1:             out.println("}");
1:         }
1: 
1:         out.println("");
1:         out.println("");
1:         out.println("apr_status_t ow_marshal1_" + name + "(ow_bit_buffer *buffer, ow_" + name + " *object)");
1:         out.println("{");
1:         out.println("   ow_marshal1_" + baseName + "(buffer, (ow_" + baseName + "*)object);");
1: 
1:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = iter.next();
1:             String propname = toPropertyCase(property.getSimpleName());
1:             boolean cached = isCachedProperty(property);
1:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1: 
1:             type = property.getType().getQualifiedName();
1:             if (type.equals("boolean")) {
1:                 out.println("   ow_bit_buffer_append(buffer, object->" + propname + ");");
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:                 out.println("   ow_marshal1_long(buffer, object->" + propname + ");");
1:             } else if (type.equals("byte[]")) {
1:                 if (size == null) {
1:                     out.println("   ow_bit_buffer_append(buffer,  object->" + propname + "!=0 );");
1:                 }
1:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:                 if (size == null) {
1:                     out.println("   ow_bit_buffer_append(buffer,  object->" + propname + "!=0 );");
1:                 }
1:             } else if (type.equals("java.lang.String")) {
1:                 out.println("   ow_marshal1_string(buffer, object->" + propname + ");");
1:             } else {
1:                 if (property.getType().isArrayType()) {
1:                     if (size != null) {
1:                         out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array(buffer, object->" + propname + "));");
1:                     }
1:                 } else if (isThrowable(property.getType())) {
1:                     out.println("   SUCCESS_CHECK(ow_marshal1_throwable(buffer, object->" + propname + "));");
1:                 } else {
1:                     if (cached) {
1:                         out.println("   SUCCESS_CHECK(ow_marshal1_cached_object(buffer, (ow_DataStructure*)object->" + propname + "));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_marshal1_nested_object(buffer, (ow_DataStructure*)object->" + propname + "));");
1:                     }
1:                 }
1:             out.println("");
1:         }
1:         out.println("   ");
1:         out.println("   return APR_SUCCESS;");
1:         out.println("}");
1:         out.println("apr_status_t ow_marshal2_" + name + "(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_" + name + " *object)");
1:         out.println("{");
1:         out.println("   ow_marshal2_" + baseName + "(buffer, bitbuffer, (ow_" + baseName + "*)object);   ");
1: 
1:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = iter.next();
1:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             Object propname = toPropertyCase(property.getSimpleName());
1:             boolean cached = isCachedProperty(property);
1: 
1:             type = property.getType().getQualifiedName();
1:             if (type.equals("boolean")) {
1:                 out.println("   ow_bit_buffer_read(bitbuffer);");
1:             } else if (type.equals("byte")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:             } else if (type.equals("char")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:             } else if (type.equals("short")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:             } else if (type.equals("int")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_buffer_append_" + type + "(buffer, object->" + propname + "));");
1:             } else if (type.equals("long")) {
1:                 out.println("   SUCCESS_CHECK(ow_marshal2_long(buffer, bitbuffer, object->" + propname + "));");
1:             } else if (type.equals("byte[]")) {
1:                 if (size != null) {
1:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:                 } else {
1:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->" + propname + "));");
1:                 }
1:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:                 if (size != null) {
1:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->" + propname + ", " + size.asInt() + "));");
1:                 } else {
1:                     out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->" + propname + "));");
1:                 }
1:             } else if (type.equals("java.lang.String")) {
1:                 out.println("   SUCCESS_CHECK(ow_marshal2_string(buffer, bitbuffer, object->" + propname + "));");
1:             } else {
1:                 if (property.getType().isArrayType()) {
1:                     if (size != null) {
1:                         out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array_const_size(buffer, bitbuffer, object->" + propname + ", " + size.asInt() + "));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array(buffer, bitbuffer, object->" + propname + "));");
1:                     }
1:                 } else if (isThrowable(property.getType())) {
1:                     out.println("   SUCCESS_CHECK(ow_marshal2_throwable(buffer, bitbuffer, object->" + propname + "));");
1:                 } else {
1:                     if (cached) {
1:                         out.println("   SUCCESS_CHECK(ow_marshal2_cached_object(buffer, bitbuffer, (ow_DataStructure*)object->" + propname + "));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_marshal2_nested_object(buffer, bitbuffer, (ow_DataStructure*)object->" + propname + "));");
1:                     }
1:                 }
1:             out.println("");
1:         }
1:         out.println("   ");
1:         out.println("   return APR_SUCCESS;");
1:         out.println("}");
1:         out.println("");
1:         out.println("apr_status_t ow_unmarshal_" + name + "(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_" + name + " *object, apr_pool_t *pool)");
1:         out.println("{");
1:         out.println("   ow_unmarshal_" + baseName + "(buffer, bitbuffer, (ow_" + baseName + "*)object, pool);   ");
1:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = iter.next();
1:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             String propname = toPropertyCase(property.getSimpleName());
1:             boolean cached = isCachedProperty(property);
1: 
1:             type = property.getType().getQualifiedName();
1: 
1:             if (type.equals("boolean")) {
1:                 out.println("   object->" + propname + " = ow_bit_buffer_read(bitbuffer);");
1:             } else if (type.equals("byte")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:             } else if (type.equals("char")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:             } else if (type.equals("short")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:             } else if (type.equals("int")) {
1:                 out.println("   SUCCESS_CHECK(ow_byte_array_read_" + type + "(buffer, &object->" + propname + "));");
1:             } else if (type.equals("long")) {
1:                 out.println("   SUCCESS_CHECK(ow_unmarshal_long(buffer, bitbuffer, &object->" + propname + ", pool));");
1:             } else if (type.equals("byte[]")) {
1:                 if (size != null) {
1:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:                 } else {
1:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:                 }
1:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:                 if (size != null) {
1:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:                 } else {
1:                     out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:                 }
1:             } else if (type.equals("java.lang.String")) {
1:                 out.println("   SUCCESS_CHECK(ow_unmarshal_string(buffer, bitbuffer, &object->" + propname + ", pool));");
1:             } else {
1:                 if (property.getType().isArrayType()) {
1:                     if (size != null) {
1:                         out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array_const_size(buffer, bitbuffer, &object->" + propname + ", " + size.asInt() + ", pool));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array(buffer, bitbuffer, &object->" + propname + ", pool));");
1:                     }
1:                 } else if (isThrowable(property.getType())) {
1:                     out.println("   SUCCESS_CHECK(ow_unmarshal_throwable(buffer, bitbuffer, &object->" + propname + ", pool));");
1:                 } else {
1:                     if (cached) {
1:                         out.println("   SUCCESS_CHECK(ow_unmarshal_cached_object(buffer, bitbuffer, (ow_DataStructure**)&object->" + propname + ", pool));");
1:                     } else {
1:                         out.println("   SUCCESS_CHECK(ow_unmarshal_nested_object(buffer, bitbuffer, (ow_DataStructure**)&object->" + propname + ", pool));");
1:                     }
1:                 }
1:             out.println("");
1:         }
1:         out.println("   ");
1:         out.println("   return APR_SUCCESS;");
1:         out.println("}");
1:     }
1: 
1:     protected void generateTearDown(PrintWriter out) {
1:         out.println("");
1:         out.println("ow_DataStructure *ow_create_object(ow_byte type, apr_pool_t *pool)");
1:         out.println("{");
1:         out.println("   switch( type ) {");
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass jclass = (JClass)iterator.next();
1:             String name = jclass.getSimpleName();
1:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:             if (!isAbstract(jclass)) {
1:                 out.println("      case " + type + ": return (ow_DataStructure *)ow_" + name + "_create(pool);");
1:             }
1:         }
1: 
1:         out.println("");
1:         out.println("   }");
1:         out.println("   return 0;");
1:         out.println("}");
1:         out.println("");
1:         out.println("apr_status_t ow_marshal1_object(ow_bit_buffer *buffer, ow_DataStructure *object)");
1:         out.println("{");
1:         out.println("   switch( object->structType ) {");
1: 
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass jclass = (JClass)iterator.next();
1:             String name = jclass.getSimpleName();
1:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:             if (!isAbstract(jclass)) {
1:                 out.println("      case " + type + ": return ow_marshal1_" + name + "(buffer, (ow_" + name + "*)object);");
1:             }
1:         }
1: 
1:         out.println("");
1:         out.println("   }");
1:         out.println("   return APR_EGENERAL;");
1:         out.println("}");
1:         out.println("");
1:         out.println("apr_status_t ow_marshal2_object(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object)");
1:         out.println("{");
1:         out.println("   switch( object->structType ) {");
1: 
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass jclass = (JClass)iterator.next();
1:             String name = jclass.getSimpleName();
1:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:             if (!isAbstract(jclass)) {
1:                 out.println("      case " + type + ": return ow_marshal2_" + name + "(buffer, bitbuffer, (ow_" + name + "*)object);");
1:             }
1:         }
1: 
1:         out.println("");
1:         out.println("   }");
1:         out.println("   return APR_EGENERAL;");
1:         out.println("}");
1:         out.println("");
1:         out.println("apr_status_t ow_unmarshal_object(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object, apr_pool_t *pool)");
1:         out.println("{");
1:         out.println("   switch( object->structType ) {");
1: 
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass jclass = (JClass)iterator.next();
1:             String name = jclass.getSimpleName();
1:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:             if (!isAbstract(jclass)) {
1:                 out.println("      case " + type + ": return ow_unmarshal_" + name + "(buffer, bitbuffer, (ow_" + name + "*)object, pool);");
1:             }
1:         }
1: 
1:         out.println("");
1:         out.println("   }");
1:         out.println("   return APR_EGENERAL;");
1:         out.println("}");
1: 
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
1: /**
1:  * 
0:  * @version $Revision: 383749 $
1:  */
1: public class CSourcesGenerator extends CHeadersGenerator {
1: 
0: 	public Object run() {
0: 		filePostFix = ".c";
0: 		if (destFile == null) {
0: 			destFile = new File(targetDir + "/ow_commands_v" + getOpenwireVersion() + ".c");
1: 		}
0: 		return super.run();
1: 	}
1: 
0: 	protected List sort(List source) {
0: 		return source;
1: 	}
1: 
0: 	protected void generateSetup(PrintWriter out) {
0: 		generateLicence(out);
0: 		out.println("");
0: 		out.println("/*****************************************************************************************");
0: 		out.println(" *  ");
0: 		out.println(" * NOTE!: This file is auto generated - do not modify!");
0: 		out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
0: 		out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
0: 		out.println(" *        this file.");
0: 		out.println(" *  ");
0: 		out.println(" *****************************************************************************************/");
0: 		out.println("");
0: 		out.println("");
0: 		out.println("#include \"ow_commands_v"+openwireVersion+".h\"");
0: 		out.println("");
0: 		out.println("#define SUCCESS_CHECK( f ) { apr_status_t rc=f; if(rc!=APR_SUCCESS) return rc; }");
0: 		out.println("");
1: 	}
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
1:     
0:         ArrayList properties = new ArrayList();
1:         jclass.getDeclaredProperties();
1:         for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {
1:             JProperty p = jclass.getDeclaredProperties()[i];
1:             if (isValidProperty(p)) {
1:                 properties.add(p);
1:             }
1:         }
1:         
0: 		String name = jclass.getSimpleName();
0: 		String type = ("ow_"+name).toUpperCase()+"_TYPE";
0: 		String baseName = "DataStructure";
0: 		JClass superclass = jclass.getSuperclass();	            
0: 		while( superclass.getSuperclass() != null ) {
0: 		   if( sortedClasses.contains(superclass) ) {
0: 		      baseName = superclass.getSimpleName();
0: 		      break;
0: 		   } else {
0: 		      superclass = superclass.getSuperclass();
1: 		   }
1: 		}
1:                
0: out.println("ow_boolean ow_is_a_"+name+"(ow_DataStructure *object) {");
0: out.println("   if( object == 0 )");
0: out.println("      return 0;");
0: out.println("      ");
0: out.println("   switch(object->structType) {");
1: 
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass sub = (JClass) iterator.next();
0: 			String subtype = "OW_"+sub.getSimpleName().toUpperCase()+"_TYPE";
0: 			if( jclass.isAssignableFrom(sub) && !isAbstract(sub) ) {
0: out.println("");
0: out.println("   case "+subtype+":");
1: 			}            
1: 		}
0: out.println("");
0: out.println("      return 1;");
0: out.println("   }");
0: out.println("   return 0;");
0: out.println("}");
1:                
0: 		if( !isAbstract(jclass) ) {
0: out.println("");
0: out.println("");
0: out.println("ow_"+name+" *ow_"+name+"_create(apr_pool_t *pool) ");
0: out.println("{");
0: out.println("   ow_"+name+" *value = apr_pcalloc(pool,sizeof(ow_"+name+"));");
0: out.println("   if( value!=0 ) {");
0: out.println("      ((ow_DataStructure*)value)->structType = "+type+";");
0: out.println("   }");
0: out.println("   return value;");
0: out.println("}");
1:         }
1:                
0: out.println("");
0: out.println("");
0: out.println("apr_status_t ow_marshal1_"+name+"(ow_bit_buffer *buffer, ow_"+name+" *object)");
0: out.println("{");
0: out.println("   ow_marshal1_"+baseName+"(buffer, (ow_"+baseName+"*)object);");
1: 
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			String propname = toPropertyCase(property.getSimpleName());
0: 			boolean cached = isCachedProperty(property);
0: 			JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
1: 
0:            type = property.getType().getQualifiedName();
0:            if( type.equals("boolean")) {
0: out.println("   ow_bit_buffer_append(buffer, object->"+propname+");");
0:                    } else if( type.equals("byte")) {
0:                    } else if( type.equals("char")) {
0:                    } else if( type.equals("short")) {
0:                    } else if( type.equals("int")) {
0:                    } else if( type.equals("long")) {
0: out.println("   ow_marshal1_long(buffer, object->"+propname+");");
0:                    } else if( type.equals("byte[]")) {
0:                      if( size ==null ) {
0: out.println("   ow_bit_buffer_append(buffer,  object->"+propname+"!=0 );");
1:                      }
0:                    } else if( type.equals("org.apache.activeio.packet.ByteSequence")) {
0:                      if( size ==null ) {
0: out.println("   ow_bit_buffer_append(buffer,  object->"+propname+"!=0 );");
1:                      }
0:                    } else if( type.equals("java.lang.String")) {
0: out.println("   ow_marshal1_string(buffer, object->"+propname+");");
0:                    } else {
0:                          if( property.getType().isArrayType() ) {
0:                            if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array_const_size(buffer, object->"+propname+", "+size.asInt()+"));");
0:                            } else {
0: out.println("   SUCCESS_CHECK(ow_marshal1_DataStructure_array(buffer, object->"+propname+"));");
1:                            }
0:                          } else if( isThrowable(property.getType()) ) {    	    
0: out.println("   SUCCESS_CHECK(ow_marshal1_throwable(buffer, object->"+propname+"));");
0:                          } else {
0:                            if( cached ) {
0: out.println("   SUCCESS_CHECK(ow_marshal1_cached_object(buffer, (ow_DataStructure*)object->"+propname+"));");
0:                            } else {
0: out.println("   SUCCESS_CHECK(ow_marshal1_nested_object(buffer, (ow_DataStructure*)object->"+propname+"));");
1:                            }
1:                        }
1:                    }
0: out.println("");
1:                }
1: 
1: 
0: out.println("   ");
0: out.println("	return APR_SUCCESS;");
0: out.println("}");
0: out.println("apr_status_t ow_marshal2_"+name+"(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_"+name+" *object)");
0: out.println("{");
0: out.println("   ow_marshal2_"+baseName+"(buffer, bitbuffer, (ow_"+baseName+"*)object);   ");
1: 
0: 			for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 				JProperty property = (JProperty) iter.next();
0:                    JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
0:                    JAnnotationValue size = annotation.getValue("size");
0:                    Object propname = toPropertyCase(property.getSimpleName());
0:                    boolean cached = isCachedProperty(property);
1:                    
0:                    type = property.getType().getQualifiedName();
0:                    if( type.equals("boolean") ) {
0: out.println("   ow_bit_buffer_read(bitbuffer);");
0:                    } else if( type.equals("byte") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_buffer_append_"+type+"(buffer, object->"+propname+"));");
0:                    } else if( type.equals("char") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_buffer_append_"+type+"(buffer, object->"+propname+"));");
0:                    } else if( type.equals("short") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_buffer_append_"+type+"(buffer, object->"+propname+"));");
0:                    } else if( type.equals("int") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_buffer_append_"+type+"(buffer, object->"+propname+"));");
0:                    } else if( type.equals("long") ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_long(buffer, bitbuffer, object->"+propname+"));");
0:                    } else if( type.equals("byte[]") ) {
0:                        if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->"+propname+", "+size.asInt()+"));");
0:                        } else {
0: out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->"+propname+"));");
1:                        }
0:                    } else if( type.equals("org.apache.activeio.packet.ByteSequence") ) {
0:                        if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->"+propname+", "+size.asInt()+"));");
0:                        } else {
0: out.println("   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->"+propname+"));");
1:                        }
0:                    } else if( type.equals("java.lang.String") ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_string(buffer, bitbuffer, object->"+propname+"));");
0:                    } else {
0:                       if( property.getType().isArrayType() ) {
0:                          if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array_const_size(buffer, bitbuffer, object->"+propname+", "+size.asInt()+"));");
0:                          } else {
0: out.println("   SUCCESS_CHECK(ow_marshal2_DataStructure_array(buffer, bitbuffer, object->"+propname+"));");
1:                          }
0:                       } else if( isThrowable(property.getType()) ) {    	    
0: out.println("   SUCCESS_CHECK(ow_marshal2_throwable(buffer, bitbuffer, object->"+propname+"));");
0:                       } else {
0:                            if( cached ) {
0: out.println("   SUCCESS_CHECK(ow_marshal2_cached_object(buffer, bitbuffer, (ow_DataStructure*)object->"+propname+"));");
0:                            } else {
0: out.println("   SUCCESS_CHECK(ow_marshal2_nested_object(buffer, bitbuffer, (ow_DataStructure*)object->"+propname+"));");
1:                            }                      
1:                       }
1:                    }
0: out.println("");
1:                }
1: 
0: out.println("   ");
0: out.println("	return APR_SUCCESS;");
0: out.println("}");
0: out.println("");
0: out.println("apr_status_t ow_unmarshal_"+name+"(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_"+name+" *object, apr_pool_t *pool)");
0: out.println("{");
0: out.println("   ow_unmarshal_"+baseName+"(buffer, bitbuffer, (ow_"+baseName+"*)object, pool);   ");
1: 
0: 	for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 		JProperty property = (JProperty) iter.next();
0:                    JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
0:                    JAnnotationValue size = annotation.getValue("size");
0:                    String propname = toPropertyCase(property.getSimpleName());
0:                    boolean cached = isCachedProperty(property);
1:                    
0:                    type = property.getType().getQualifiedName();
1: 
0:                    if( type.equals("boolean") ) {
0: out.println("   object->"+propname+" = ow_bit_buffer_read(bitbuffer);");
0:                    } else if( type.equals("byte") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_array_read_"+type+"(buffer, &object->"+propname+"));");
0:                    } else if( type.equals("char") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_array_read_"+type+"(buffer, &object->"+propname+"));");
0:                    } else if( type.equals("short") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_array_read_"+type+"(buffer, &object->"+propname+"));");
0:                    } else if( type.equals("int") ) {
0: out.println("   SUCCESS_CHECK(ow_byte_array_read_"+type+"(buffer, &object->"+propname+"));");
0:                    } else if( type.equals("long") ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_long(buffer, bitbuffer, &object->"+propname+", pool));");
0:                    } else if( type.equals("byte[]") ) {
0:                        if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->"+propname+", "+size.asInt()+", pool));");
0:                        } else {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->"+propname+", pool));");
1:                        }
0:                    } else if( type.equals("org.apache.activeio.packet.ByteSequence") ) {
0:                        if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->"+propname+", "+size.asInt()+", pool));");
0:                        } else {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->"+propname+", pool));");
1:                        }
0:                    } else if( type.equals("java.lang.String") ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_string(buffer, bitbuffer, &object->"+propname+", pool));");
0:                    } else {
0:                       if( property.getType().isArrayType() ) {
0:                         if( size!=null ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array_const_size(buffer, bitbuffer, &object->"+propname+", "+size.asInt()+", pool));");
0:                         } else {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_DataStructure_array(buffer, bitbuffer, &object->"+propname+", pool));");
1:                         }
0:                       } else if( isThrowable(property.getType()) ) {    	    
0: out.println("   SUCCESS_CHECK(ow_unmarshal_throwable(buffer, bitbuffer, &object->"+propname+", pool));");
0:                       } else {
0:                            if( cached ) {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_cached_object(buffer, bitbuffer, (ow_DataStructure**)&object->"+propname+", pool));");
0:                            } else {
0: out.println("   SUCCESS_CHECK(ow_unmarshal_nested_object(buffer, bitbuffer, (ow_DataStructure**)&object->"+propname+", pool));");
1:                            }                      
1:                       }
1:                    }
0: out.println("");
1:                }
1: 
0: out.println("   ");
0: out.println("	return APR_SUCCESS;");
0: out.println("}");
1:          }  
1:          
0: 	protected void generateTearDown(PrintWriter out) {
0: out.println("");
0: out.println("ow_DataStructure *ow_create_object(ow_byte type, apr_pool_t *pool)");
0: out.println("{");
0: out.println("   switch( type ) {");
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass jclass = (JClass) iterator.next();
0:             String name = jclass.getSimpleName();
0:             String type = ("ow_"+name).toUpperCase()+"_TYPE";
0:             if( !isAbstract(jclass) ) {
0: out.println("      case "+type+": return (ow_DataStructure *)ow_"+name+"_create(pool);");
1:             }
1:          }
1:          
0: out.println("");
0: out.println("   }");
0: out.println("   return 0;");
0: out.println("}");
0: out.println("");
0: out.println("apr_status_t ow_marshal1_object(ow_bit_buffer *buffer, ow_DataStructure *object)");
0: out.println("{");
0: out.println("   switch( object->structType ) {");
1: 
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass jclass = (JClass) iterator.next();
0:             String name = jclass.getSimpleName();
0:             String type = ("ow_"+name).toUpperCase()+"_TYPE";
0:             if( !isAbstract(jclass) ) {
0: out.println("      case "+type+": return ow_marshal1_"+name+"(buffer, (ow_"+name+"*)object);");
1:             }
1:          }
1:          
0: out.println("");
0: out.println("   }");
0: out.println("   return APR_EGENERAL;");
0: out.println("}");
0: out.println("");
0: out.println("apr_status_t ow_marshal2_object(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object)");
0: out.println("{");
0: out.println("   switch( object->structType ) {");
1: 
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass jclass = (JClass) iterator.next();
0:             String name = jclass.getSimpleName();
0:             String type = ("ow_"+name).toUpperCase()+"_TYPE";
0:             if( !isAbstract(jclass) ) {
0: out.println("      case "+type+": return ow_marshal2_"+name+"(buffer, bitbuffer, (ow_"+name+"*)object);");
1:             }
1:          }
1: 
0: out.println("");
0: out.println("   }");
0: out.println("   return APR_EGENERAL;");
0: out.println("}");
0: out.println("");
0: out.println("apr_status_t ow_unmarshal_object(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object, apr_pool_t *pool)");
0: out.println("{");
0: out.println("   switch( object->structType ) {");
1: 
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass jclass = (JClass) iterator.next();
0:             String name = jclass.getSimpleName();
0:             String type = ("ow_"+name).toUpperCase()+"_TYPE";
0:             if( !isAbstract(jclass) ) {
0: out.println("      case "+type+": return ow_unmarshal_"+name+"(buffer, bitbuffer, (ow_"+name+"*)object, pool);");
1:             }
1:          }
1: 
0: out.println("");
0: out.println("   }");
0: out.println("   return APR_EGENERAL;");
0: out.println("}");
1:  
1: 	}
1: }
============================================================================