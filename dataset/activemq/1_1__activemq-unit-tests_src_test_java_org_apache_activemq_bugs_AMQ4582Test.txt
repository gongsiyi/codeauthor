1:1773e2c: /**
1:1773e2c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1773e2c:  * contributor license agreements.  See the NOTICE file distributed with
1:1773e2c:  * this work for additional information regarding copyright ownership.
1:1773e2c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1773e2c:  * (the "License"); you may not use this file except in compliance with
1:1773e2c:  * the License.  You may obtain a copy of the License at
1:1773e2c:  *
1:1773e2c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1773e2c:  *
1:1773e2c:  * Unless required by applicable law or agreed to in writing, software
1:1773e2c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1773e2c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1773e2c:  * See the License for the specific language governing permissions and
1:1773e2c:  * limitations under the License.
1:1773e2c:  */
1:1773e2c: package org.apache.activemq.bugs;
1:1773e2c: 
1:1773e2c: import java.io.IOException;
1:1773e2c: 
1:1773e2c: import javax.jms.Connection;
1:1773e2c: import javax.jms.Session;
1:1773e2c: 
1:1773e2c: import org.apache.activemq.broker.BrokerService;
1:1773e2c: import org.apache.activemq.util.ConsumerThread;
1:1773e2c: import org.junit.After;
1:1773e2c: import org.junit.Before;
1:1773e2c: import org.junit.Rule;
1:1773e2c: import org.junit.Test;
1:1773e2c: import org.junit.rules.ExpectedException;
1:1773e2c: import org.slf4j.Logger;
1:1773e2c: import org.slf4j.LoggerFactory;
1:1773e2c: 
1:1773e2c: public class AMQ4582Test {
1:1773e2c: 
1:1773e2c:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4582Test.class);
1:1773e2c: 
1:1773e2c:     BrokerService broker;
1:1773e2c:     Connection connection;
1:1773e2c:     Session session;
1:1773e2c: 
1:1773e2c:     public static final String KEYSTORE_TYPE = "jks";
1:1773e2c:     public static final String PASSWORD = "password";
1:1773e2c:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:1773e2c:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:1773e2c: 
1:1773e2c:     public static final int PRODUCER_COUNT = 10;
1:1773e2c:     public static final int CONSUMER_COUNT = 10;
1:1773e2c:     public static final int MESSAGE_COUNT = 1000;
1:1773e2c: 
1:1773e2c:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1:1773e2c: 
1:1773e2c:     @Before
1:1773e2c:     public void setUp() throws Exception {
1:1773e2c:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:1773e2c:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:1773e2c:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:1773e2c:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:1773e2c:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:1773e2c:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:1773e2c:     }
1:1773e2c: 
1:1773e2c:     @After
1:1773e2c:     public void tearDown() throws Exception {
1:1773e2c:         if (broker != null) {
1:1773e2c:             try {
1:1773e2c:                 broker.stop();
1:1773e2c:             } catch(Exception e) {}
1:1773e2c:         }
1:1773e2c:     }
1:1773e2c: 
1:1773e2c:     @Rule public ExpectedException thrown = ExpectedException.none();
1:1773e2c:     @Test
1:1773e2c:     public void simpleTest() throws Exception {
1:1773e2c:         thrown.expect(IOException.class);
1:1773e2c:         thrown.expectMessage("enabledCipherSuites=BADSUITE");
1:1773e2c: 
1:1773e2c:         broker = new BrokerService();
1:1773e2c:         broker.setPersistent(false);
1:1773e2c:         broker.setUseJmx(false);
1:1773e2c:         try {
1:1773e2c:             broker.addConnector(
1:1773e2c:                 "ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=BADSUITE");
1:1773e2c:             broker.start();
1:1773e2c:             broker.waitUntilStarted();
1:1773e2c:         } catch (Exception e) {
1:1773e2c:             LOG.info("BrokerService threw:", e);
1:1773e2c:             throw e;
1:1773e2c:         }
1:1773e2c:     }
1:1773e2c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1773e2c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.ExpectedException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4582Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4582Test.class);
1: 
1:     BrokerService broker;
1:     Connection connection;
1:     Session session;
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     public static final int PRODUCER_COUNT = 10;
1:     public static final int CONSUMER_COUNT = 10;
1:     public static final int MESSAGE_COUNT = 1000;
1: 
1:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             try {
1:                 broker.stop();
1:             } catch(Exception e) {}
1:         }
1:     }
1: 
1:     @Rule public ExpectedException thrown = ExpectedException.none();
1:     @Test
1:     public void simpleTest() throws Exception {
1:         thrown.expect(IOException.class);
1:         thrown.expectMessage("enabledCipherSuites=BADSUITE");
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         try {
1:             broker.addConnector(
1:                 "ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=BADSUITE");
1:             broker.start();
1:             broker.waitUntilStarted();
1:         } catch (Exception e) {
1:             LOG.info("BrokerService threw:", e);
1:             throw e;
1:         }
1:     }
1: }
============================================================================