1:a50f011: /**
1:a50f011:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a50f011:  * contributor license agreements.  See the NOTICE file distributed with
1:a50f011:  * this work for additional information regarding copyright ownership.
1:a50f011:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a50f011:  * (the "License"); you may not use this file except in compliance with
1:a50f011:  * the License.  You may obtain a copy of the License at
1:a50f011:  *
1:a50f011:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a50f011:  *
1:a50f011:  * Unless required by applicable law or agreed to in writing, software
1:a50f011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a50f011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a50f011:  * See the License for the specific language governing permissions and
1:a50f011:  * limitations under the License.
1:a50f011:  */
1:a50f011: package org.apache.activemq.maven;
1:a50f011: 
1:a50f011: import java.util.Properties;
1:a50f011: 
1:c0eae1b: import org.apache.activemq.broker.TransportConnector;
1:a50f011: import org.apache.maven.plugin.AbstractMojo;
1:a50f011: import org.apache.maven.plugin.MojoExecutionException;
1:a50f011: import org.apache.maven.project.MavenProject;
1:a50f011: 
1:a50f011: /**
1:a50f011:  * Goal which starts an activemq broker.
1:a50f011:  *
1:a50f011:  * @goal run
1:a50f011:  * @phase process-sources
1:a50f011:  */
1:a50f011: public class StartBrokerMojo extends AbstractMojo {
1:c0eae1b:     /**
1:c0eae1b:      * Default connector property name format.
1:c0eae1b:      */
1:c0eae1b:     public static final String  DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT = "org.apache.activemq.connector.%s.uri";
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * The maven project.
1:a50f011:      *
1:a50f011:      * @parameter property="project" default-value="${project}"
1:a50f011:      * @required
1:a50f011:      * @readonly
1:a50f011:      */
1:a50f011:     protected MavenProject project;
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * The broker configuration uri The list of currently supported URI syntaxes
1:a50f011:      * is described <a
1:a50f011:      * href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
1:a50f011:      *
1:a50f011:      * @parameter property="configUri"
1:a50f011:      *            default-value="broker:(tcp://localhost:61616)?useJmx=false&persistent=false"
1:a50f011:      * @required
1:a50f011:      */
1:a50f011:     private String configUri;
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * Indicates whether to fork the broker, useful for integration tests.
1:a50f011:      *
1:a50f011:      * @parameter property="fork" default-value="false"
1:a50f011:      */
1:a50f011:     private boolean fork;
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * System properties to add
1:a50f011:      *
1:a50f011:      * @parameter property="systemProperties"
1:a50f011:      */
1:a50f011:     private Properties systemProperties;
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * Skip execution of the ActiveMQ Broker plugin if set to true
1:a50f011:      *
1:a50f011:      * @parameter property="skip"
1:a50f011:      */
1:a50f011:     private boolean skip;
1:a50f011: 
1:c0eae1b:     /**
1:c0eae1b:      * Format of the connector URI property names.  The first argument for the format is the connector name.
1:c0eae1b:      *
1:c0eae1b:      * @parameter property="connectorPropertyNameFormat"
1:c0eae1b:      */
1:c0eae1b:     private String connectorPropertyNameFormat = DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT;
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Broker manager used to start and stop the broker.
1:c0eae1b:      */
1:c0eae1b:     private MavenBrokerManager  brokerManager;
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * XBean File Resolver used to detect and transform xbean file URIs.
1:c0eae1b:      */
1:c0eae1b:     private XBeanFileResolver   xBeanFileResolver = new XBeanFileResolver();
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve the Maven project for this mojo.
1:c0eae1b:      *
1:c0eae1b:      * @return the Maven project.
1:c0eae1b:      */
1:c0eae1b:     public MavenProject getProject() {
1:c0eae1b:         return project;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the Maven project for this mojo.
1:c0eae1b:      *
1:c0eae1b:      * @param project the Maven project.
1:c0eae1b:      */
1:c0eae1b:     public void setProject(MavenProject project) {
1:c0eae1b:         this.project = project;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve the URI used to configure the broker on startup.
1:c0eae1b:      *
1:c0eae1b:      * @return the configuration URI.
1:c0eae1b:      */
1:c0eae1b:     public String getConfigUri() {
1:c0eae1b:         return configUri;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the URI used to configure the broker on startup.
1:c0eae1b:      *
1:c0eae1b:      * @param configUri the URI used to configure the broker.
1:c0eae1b:      */
1:c0eae1b:     public void setConfigUri(String configUri) {
1:c0eae1b:         this.configUri = configUri;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Determine if the mojo is configured to fork a broker.
1:c0eae1b:      *
1:c0eae1b:      * @return true => the mojo will fork a broker (i.e. start it in the background); false => start the broker and
1:c0eae1b:      * wait synchronously for it to terminate.
1:c0eae1b:      */
1:c0eae1b:     public boolean isFork() {
1:c0eae1b:         return fork;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Configure the mojo to run the broker asynchronously (i.e. fork) or synchronously.
1:c0eae1b:      *
1:c0eae1b:      * @param fork true => start the broker asynchronously; true => start the broker synchronously.
1:c0eae1b:      */
1:c0eae1b:     public void setFork(boolean fork) {
1:c0eae1b:         this.fork = fork;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Determine if the mojo is configured to skip the broker startup.
1:c0eae1b:      *
1:c0eae1b:      * @return true => the mojo will skip the broker startup; false => the mojo will start the broker normally.
1:c0eae1b:      */
1:c0eae1b:     public boolean isSkip() {
1:c0eae1b:         return skip;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Configure the mojo to skip or normally execute the broker startup.
1:c0eae1b:      *
1:c0eae1b:      * @param skip true => the mojo will skip the broker startup; false => the mojo will start the broker normally.
1:c0eae1b:      */
1:c0eae1b:     public void setSkip(boolean skip) {
1:c0eae1b:         this.skip = skip;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve properties to add to the System properties on broker startup.
1:c0eae1b:      *
1:c0eae1b:      * @return properties to add to the System properties.
1:c0eae1b:      */
1:c0eae1b:     public Properties getSystemProperties() {
1:c0eae1b:         return systemProperties;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set properties to add to the System properties on broker startup.
1:c0eae1b:      *
1:c0eae1b:      * @param systemProperties properties to add to the System properties.
1:c0eae1b:      */
1:c0eae1b:     public void setSystemProperties(Properties systemProperties) {
1:c0eae1b:         this.systemProperties = systemProperties;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve the format used to generate property names when registering connector URIs.
1:c0eae1b:      *
1:c0eae1b:      * @return the format used to generate property names.
1:c0eae1b:      */
1:c0eae1b:     public String getConnectorPropertyNameFormat() {
1:c0eae1b:         return connectorPropertyNameFormat;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the format used to generate property names when registering connector URIs.
1:c0eae1b:      *
1:c0eae1b:      * @param connectorPropertyNameFormat the new format to use when generating property names.
1:c0eae1b:      */
1:c0eae1b:     public void setConnectorPropertyNameFormat(String connectorPropertyNameFormat) {
1:c0eae1b:         this.connectorPropertyNameFormat = connectorPropertyNameFormat;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve the manager used to create and retain the started broker.
1:c0eae1b:      *
1:c0eae1b:      * @return the manager.
1:c0eae1b:      */
1:c0eae1b:     public MavenBrokerManager getBrokerManager() {
1:c0eae1b:         return brokerManager;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the manager used to create and retain the started broker.
1:c0eae1b:      *
1:c0eae1b:      * @param brokerManager the new manager to use.
1:c0eae1b:      */
1:c0eae1b:     public void setBrokerManager(MavenBrokerManager brokerManager) {
1:c0eae1b:         this.brokerManager = brokerManager;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Retrieve the XBeanFileResolver used to detect and transform XBean URIs.
1:c0eae1b:      *
1:c0eae1b:      * @return the XBeanFileResolver used.
1:c0eae1b:      */
1:c0eae1b:     public XBeanFileResolver getxBeanFileResolver() {
1:c0eae1b:         return xBeanFileResolver;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the XBeanFileResolver to use when detecting and transforming XBean URIs.
1:c0eae1b:      *
1:c0eae1b:      * @param xBeanFileResolver the XBeanFileResolver to use.
1:c0eae1b:      */
1:c0eae1b:     public void setxBeanFileResolver(XBeanFileResolver xBeanFileResolver) {
1:c0eae1b:         this.xBeanFileResolver = xBeanFileResolver;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Perform the mojo operation, which starts the ActiveMQ broker unless configured to skip it.  Also registers the
1:c0eae1b:      * connector URIs in the maven project properties on startup, which enables the use of variable substitution in
1:c0eae1b:      * the pom.xml file to determine the address of the connector using the standard ${...} syntax.
1:c0eae1b:      *
1:c0eae1b:      * @throws MojoExecutionException
1:c0eae1b:      */
1:a50f011:     @Override
1:a50f011:     public void execute() throws MojoExecutionException {
1:a50f011:         if (skip) {
1:a50f011:             getLog().info("Skipped execution of ActiveMQ Broker");
1:a50f011:             return;
1:a50f011:         }
1:a50f011: 
1:c0eae1b:         addActiveMQSystemProperties();
1:a50f011: 
1:a50f011:         getLog().info("Loading broker configUri: " + configUri);
1:c0eae1b:         if (this.xBeanFileResolver.isXBeanFile(configUri)) {
1:a50f011:             getLog().debug("configUri before transformation: " + configUri);
1:c0eae1b:             configUri = this.xBeanFileResolver.toUrlCompliantAbsolutePath(configUri);
1:a50f011:             getLog().debug("configUri after transformation: " + configUri);
1:a50f011:         }
1:a50f011: 
1:c0eae1b:         this.useBrokerManager().start(fork, configUri);
1:c0eae1b: 
1:c0eae1b:         //
1:c0eae1b:         // Register the transport connector URIs in the Maven project.
1:c0eae1b:         //
1:c0eae1b:         this.registerTransportConnectorUris();
1:a50f011: 
1:a50f011:         getLog().info("Started the ActiveMQ Broker");
1:a50f011:     }
1:a50f011: 
1:a50f011:     /**
1:a50f011:      * Set system properties
1:a50f011:      */
1:c0eae1b:     protected void addActiveMQSystemProperties() {
1:a50f011:         // Set the default properties
1:a50f011:         System.setProperty("activemq.base", project.getBuild().getDirectory() + "/");
1:a50f011:         System.setProperty("activemq.home", project.getBuild().getDirectory() + "/");
1:a50f011:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "true");
1:a50f011:         System.setProperty("org.apache.activemq.default.directory.prefix", project.getBuild().getDirectory() + "/");
1:a50f011:         System.setProperty("derby.system.home", project.getBuild().getDirectory() + "/");
1:a50f011:         System.setProperty("derby.storage.fileSyncTransactionLog", "true");
1:a50f011: 
1:a50f011:         // Overwrite any custom properties
1:a50f011:         System.getProperties().putAll(systemProperties);
1:a50f011:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Register all of the broker's transport connector URIs in the Maven project as properties.  Property names are
1:c0eae1b:      * formed from the connectorPropertyNameFormat using String.format(), with the connector name as the one and only
1:c0eae1b:      * argument.  The value of each property is that returned by getPublishableConnectString().
1:c0eae1b:      */
1:c0eae1b:     protected void  registerTransportConnectorUris () {
1:c0eae1b:         Properties props = project.getProperties();
1:c0eae1b: 
1:c0eae1b:         //
1:c0eae1b:         // Loop through all of the connectors, adding each.
1:c0eae1b:         //
1:c0eae1b:         for ( TransportConnector oneConnector : this.useBrokerManager().getBroker().getTransportConnectors() ) {
1:c0eae1b:             try {
1:c0eae1b:                 //
1:c0eae1b:                 // Format the name of the property and grab the value.
1:c0eae1b:                 //
1:c0eae1b:                 String propName = String.format(this.connectorPropertyNameFormat, oneConnector.getName());
1:c0eae1b:                 String value    = oneConnector.getPublishableConnectString();
1:c0eae1b: 
1:c0eae1b:                 getLog().debug("setting transport connector URI property: propertyName=\"" + propName +
1:c0eae1b:                                "\"; value=\"" + value + "\"");
1:c0eae1b: 
1:c0eae1b:                 //
1:c0eae1b:                 // Set the property.
1:c0eae1b:                 //
1:c0eae1b:                 props.setProperty(propName, value);
1:c0eae1b:             } catch (Exception exc) {
1:c0eae1b:                 //
1:c0eae1b:                 // Warn of the issue and continue.
1:c0eae1b:                 //
1:c0eae1b:                 getLog().warn("error on obtaining broker connector uri; connector=" + oneConnector, exc);
1:c0eae1b:             }
1:c0eae1b:         }
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Use the configured broker manager, if defined; otherwise, use the default broker manager.
1:c0eae1b:      *
1:c0eae1b:      * @return the broker manager to use.
1:c0eae1b:      */
1:c0eae1b:     protected MavenBrokerManager    useBrokerManager () {
1:c0eae1b:         if ( this.brokerManager == null ) {
1:c0eae1b:             this.brokerManager = new MavenBrokerSingletonManager();
1:c0eae1b:         }
1:c0eae1b: 
1:c0eae1b:         return  this.brokerManager;
1:c0eae1b:     }
1:a50f011: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Default connector property name format.
1:      */
1:     public static final String  DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT = "org.apache.activemq.connector.%s.uri";
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Format of the connector URI property names.  The first argument for the format is the connector name.
1:      *
1:      * @parameter property="connectorPropertyNameFormat"
1:      */
1:     private String connectorPropertyNameFormat = DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT;
1: 
1:     /**
1:      * Broker manager used to start and stop the broker.
1:      */
1:     private MavenBrokerManager  brokerManager;
1: 
1:     /**
1:      * XBean File Resolver used to detect and transform xbean file URIs.
1:      */
1:     private XBeanFileResolver   xBeanFileResolver = new XBeanFileResolver();
1: 
1:     /**
1:      * Retrieve the Maven project for this mojo.
1:      *
1:      * @return the Maven project.
1:      */
1:     public MavenProject getProject() {
1:         return project;
1:     }
1: 
1:     /**
1:      * Set the Maven project for this mojo.
1:      *
1:      * @param project the Maven project.
1:      */
1:     public void setProject(MavenProject project) {
1:         this.project = project;
1:     }
1: 
1:     /**
1:      * Retrieve the URI used to configure the broker on startup.
1:      *
1:      * @return the configuration URI.
1:      */
1:     public String getConfigUri() {
1:         return configUri;
1:     }
1: 
1:     /**
1:      * Set the URI used to configure the broker on startup.
1:      *
1:      * @param configUri the URI used to configure the broker.
1:      */
1:     public void setConfigUri(String configUri) {
1:         this.configUri = configUri;
1:     }
1: 
1:     /**
1:      * Determine if the mojo is configured to fork a broker.
1:      *
1:      * @return true => the mojo will fork a broker (i.e. start it in the background); false => start the broker and
1:      * wait synchronously for it to terminate.
1:      */
1:     public boolean isFork() {
1:         return fork;
1:     }
1: 
1:     /**
1:      * Configure the mojo to run the broker asynchronously (i.e. fork) or synchronously.
1:      *
1:      * @param fork true => start the broker asynchronously; true => start the broker synchronously.
1:      */
1:     public void setFork(boolean fork) {
1:         this.fork = fork;
1:     }
1: 
1:     /**
1:      * Determine if the mojo is configured to skip the broker startup.
1:      *
1:      * @return true => the mojo will skip the broker startup; false => the mojo will start the broker normally.
1:      */
1:     public boolean isSkip() {
1:         return skip;
1:     }
1: 
1:     /**
1:      * Configure the mojo to skip or normally execute the broker startup.
1:      *
1:      * @param skip true => the mojo will skip the broker startup; false => the mojo will start the broker normally.
1:      */
1:     public void setSkip(boolean skip) {
1:         this.skip = skip;
1:     }
1: 
1:     /**
1:      * Retrieve properties to add to the System properties on broker startup.
1:      *
1:      * @return properties to add to the System properties.
1:      */
1:     public Properties getSystemProperties() {
1:         return systemProperties;
1:     }
1: 
1:     /**
1:      * Set properties to add to the System properties on broker startup.
1:      *
1:      * @param systemProperties properties to add to the System properties.
1:      */
1:     public void setSystemProperties(Properties systemProperties) {
1:         this.systemProperties = systemProperties;
1:     }
1: 
1:     /**
1:      * Retrieve the format used to generate property names when registering connector URIs.
1:      *
1:      * @return the format used to generate property names.
1:      */
1:     public String getConnectorPropertyNameFormat() {
1:         return connectorPropertyNameFormat;
1:     }
1: 
1:     /**
1:      * Set the format used to generate property names when registering connector URIs.
1:      *
1:      * @param connectorPropertyNameFormat the new format to use when generating property names.
1:      */
1:     public void setConnectorPropertyNameFormat(String connectorPropertyNameFormat) {
1:         this.connectorPropertyNameFormat = connectorPropertyNameFormat;
1:     }
1: 
1:     /**
1:      * Retrieve the manager used to create and retain the started broker.
1:      *
1:      * @return the manager.
1:      */
1:     public MavenBrokerManager getBrokerManager() {
1:         return brokerManager;
1:     }
1: 
1:     /**
1:      * Set the manager used to create and retain the started broker.
1:      *
1:      * @param brokerManager the new manager to use.
1:      */
1:     public void setBrokerManager(MavenBrokerManager brokerManager) {
1:         this.brokerManager = brokerManager;
1:     }
1: 
1:     /**
1:      * Retrieve the XBeanFileResolver used to detect and transform XBean URIs.
1:      *
1:      * @return the XBeanFileResolver used.
1:      */
1:     public XBeanFileResolver getxBeanFileResolver() {
1:         return xBeanFileResolver;
1:     }
1: 
1:     /**
1:      * Set the XBeanFileResolver to use when detecting and transforming XBean URIs.
1:      *
1:      * @param xBeanFileResolver the XBeanFileResolver to use.
1:      */
1:     public void setxBeanFileResolver(XBeanFileResolver xBeanFileResolver) {
1:         this.xBeanFileResolver = xBeanFileResolver;
1:     }
1: 
1:     /**
1:      * Perform the mojo operation, which starts the ActiveMQ broker unless configured to skip it.  Also registers the
1:      * connector URIs in the maven project properties on startup, which enables the use of variable substitution in
1:      * the pom.xml file to determine the address of the connector using the standard ${...} syntax.
1:      *
1:      * @throws MojoExecutionException
1:      */
/////////////////////////////////////////////////////////////////////////
1:         addActiveMQSystemProperties();
1:         if (this.xBeanFileResolver.isXBeanFile(configUri)) {
1:             configUri = this.xBeanFileResolver.toUrlCompliantAbsolutePath(configUri);
1:         this.useBrokerManager().start(fork, configUri);
1: 
1:         //
1:         // Register the transport connector URIs in the Maven project.
1:         //
1:         this.registerTransportConnectorUris();
/////////////////////////////////////////////////////////////////////////
1:     protected void addActiveMQSystemProperties() {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Register all of the broker's transport connector URIs in the Maven project as properties.  Property names are
1:      * formed from the connectorPropertyNameFormat using String.format(), with the connector name as the one and only
1:      * argument.  The value of each property is that returned by getPublishableConnectString().
1:      */
1:     protected void  registerTransportConnectorUris () {
1:         Properties props = project.getProperties();
1: 
1:         //
1:         // Loop through all of the connectors, adding each.
1:         //
1:         for ( TransportConnector oneConnector : this.useBrokerManager().getBroker().getTransportConnectors() ) {
1:             try {
1:                 //
1:                 // Format the name of the property and grab the value.
1:                 //
1:                 String propName = String.format(this.connectorPropertyNameFormat, oneConnector.getName());
1:                 String value    = oneConnector.getPublishableConnectString();
1: 
1:                 getLog().debug("setting transport connector URI property: propertyName=\"" + propName +
1:                                "\"; value=\"" + value + "\"");
1: 
1:                 //
1:                 // Set the property.
1:                 //
1:                 props.setProperty(propName, value);
1:             } catch (Exception exc) {
1:                 //
1:                 // Warn of the issue and continue.
1:                 //
1:                 getLog().warn("error on obtaining broker connector uri; connector=" + oneConnector, exc);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Use the configured broker manager, if defined; otherwise, use the default broker manager.
1:      *
1:      * @return the broker manager to use.
1:      */
1:     protected MavenBrokerManager    useBrokerManager () {
1:         if ( this.brokerManager == null ) {
1:             this.brokerManager = new MavenBrokerSingletonManager();
1:         }
1: 
1:         return  this.brokerManager;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a50f011
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
1: import java.util.Properties;
1: 
1: import org.apache.maven.plugin.AbstractMojo;
1: import org.apache.maven.plugin.MojoExecutionException;
1: import org.apache.maven.project.MavenProject;
1: 
1: /**
1:  * Goal which starts an activemq broker.
1:  *
1:  * @goal run
1:  * @phase process-sources
1:  */
1: public class StartBrokerMojo extends AbstractMojo {
1: 
1:     /**
1:      * The maven project.
1:      *
1:      * @parameter property="project" default-value="${project}"
1:      * @required
1:      * @readonly
1:      */
1:     protected MavenProject project;
1: 
1:     /**
1:      * The broker configuration uri The list of currently supported URI syntaxes
1:      * is described <a
1:      * href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
1:      *
1:      * @parameter property="configUri"
1:      *            default-value="broker:(tcp://localhost:61616)?useJmx=false&persistent=false"
1:      * @required
1:      */
1:     private String configUri;
1: 
1:     /**
1:      * Indicates whether to fork the broker, useful for integration tests.
1:      *
1:      * @parameter property="fork" default-value="false"
1:      */
1:     private boolean fork;
1: 
1:     /**
1:      * System properties to add
1:      *
1:      * @parameter property="systemProperties"
1:      */
1:     private Properties systemProperties;
1: 
1:     /**
1:      * Skip execution of the ActiveMQ Broker plugin if set to true
1:      *
1:      * @parameter property="skip"
1:      */
1:     private boolean skip;
1: 
1:     @Override
1:     public void execute() throws MojoExecutionException {
1:         if (skip) {
1:             getLog().info("Skipped execution of ActiveMQ Broker");
1:             return;
1:         }
1: 
0:         setSystemProperties();
1: 
1:         getLog().info("Loading broker configUri: " + configUri);
0:         if (XBeanFileResolver.isXBeanFile(configUri)) {
1:             getLog().debug("configUri before transformation: " + configUri);
0:             configUri = XBeanFileResolver.toUrlCompliantAbsolutePath(configUri);
1:             getLog().debug("configUri after transformation: " + configUri);
1:         }
1: 
0:         Broker.start(fork, configUri);
1: 
1:         getLog().info("Started the ActiveMQ Broker");
1:     }
1: 
1:     /**
1:      * Set system properties
1:      */
0:     protected void setSystemProperties() {
1:         // Set the default properties
1:         System.setProperty("activemq.base", project.getBuild().getDirectory() + "/");
1:         System.setProperty("activemq.home", project.getBuild().getDirectory() + "/");
1:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "true");
1:         System.setProperty("org.apache.activemq.default.directory.prefix", project.getBuild().getDirectory() + "/");
1:         System.setProperty("derby.system.home", project.getBuild().getDirectory() + "/");
1:         System.setProperty("derby.storage.fileSyncTransactionLog", "true");
1: 
1:         // Overwrite any custom properties
1:         System.getProperties().putAll(systemProperties);
1:     }
1: }
============================================================================