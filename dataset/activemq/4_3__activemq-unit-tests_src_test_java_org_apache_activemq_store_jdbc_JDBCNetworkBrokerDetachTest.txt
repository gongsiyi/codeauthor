1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
1:952d036: package org.apache.activemq.store.jdbc;
2:952d036: 
1:da3174c: import java.io.File;
1:38f7857: import java.sql.SQLException;
1:38f7857: import java.util.LinkedList;
1:952d036: import org.apache.activemq.broker.BrokerService;
1:952d036: import org.apache.activemq.network.NetworkBrokerDetachTest;
1:da3174c: import org.apache.activemq.util.IOHelper;
1:952d036: import org.apache.derby.jdbc.EmbeddedDataSource;
1:38f7857: import org.junit.After;
1:da3174c: import org.junit.BeforeClass;
1:952d036: 
1:952d036: public class JDBCNetworkBrokerDetachTest extends NetworkBrokerDetachTest {
1:952d036: 
1:38f7857:     LinkedList<EmbeddedDataSource> dataSources = new LinkedList<>();
1:952d036:     protected void configureBroker(BrokerService broker) throws Exception {
1:952d036:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:38f7857:         try {
1:38f7857:             EmbeddedDataSource dataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(jdbc.getDataDirectoryFile().getCanonicalPath(), broker.getBrokerName());
1:38f7857:             dataSource.getConnection().close(); // ensure derby for brokerName is initialized
1:38f7857:             jdbc.setDataSource(dataSource);
1:38f7857:             dataSources.add(dataSource);
1:38f7857:         } catch (SQLException e) {
1:38f7857:             e.printStackTrace();
1:38f7857:             Exception n = e.getNextException();
1:38f7857:             while (n != null) {
1:38f7857:                 n.printStackTrace();
1:38f7857:                 if (n instanceof SQLException) {
1:38f7857:                     n = ((SQLException) n).getNextException();
1:38f7857:                 }
1:38f7857:             }
1:38f7857:             throw e;
1:38f7857:         }
1:952d036:         broker.setPersistenceAdapter(jdbc);
1:b6f63b0:         broker.setUseVirtualTopics(false);
1:952d036:     }
1:38f7857: 
1:38f7857:     @After
1:38f7857:     public void shutdownDataSources() throws Exception {
1:38f7857:         for (EmbeddedDataSource ds: dataSources) {
1:38f7857:             DataSourceServiceSupport.shutdownDefaultDataSource(ds);
1:38f7857:         }
1:38f7857:         dataSources.clear();
1:38f7857:     }
1:da3174c: 
1:da3174c:     @BeforeClass
1:da3174c:     public static void ensureDerbyHasCleanDirectory() throws Exception {
1:da3174c:         IOHelper.delete(new File(IOHelper.getDefaultDataDirectory()));
1:da3174c:     }
1:952d036: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:da3174c
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @BeforeClass
1:     public static void ensureDerbyHasCleanDirectory() throws Exception {
1:         IOHelper.delete(new File(IOHelper.getDefaultDataDirectory()));
1:     }
commit:38f7857
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import java.util.LinkedList;
1: import org.junit.After;
1:     LinkedList<EmbeddedDataSource> dataSources = new LinkedList<>();
1:         try {
1:             EmbeddedDataSource dataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(jdbc.getDataDirectoryFile().getCanonicalPath(), broker.getBrokerName());
1:             dataSource.getConnection().close(); // ensure derby for brokerName is initialized
1:             jdbc.setDataSource(dataSource);
1:             dataSources.add(dataSource);
1:         } catch (SQLException e) {
1:             e.printStackTrace();
1:             Exception n = e.getNextException();
1:             while (n != null) {
1:                 n.printStackTrace();
1:                 if (n instanceof SQLException) {
1:                     n = ((SQLException) n).getNextException();
1:                 }
1:             }
1:             throw e;
1:         }
1: 
1:     @After
1:     public void shutdownDataSources() throws Exception {
1:         for (EmbeddedDataSource ds: dataSources) {
1:             DataSourceServiceSupport.shutdownDefaultDataSource(ds);
1:         }
1:         dataSources.clear();
1:     }
commit:baa10ed
/////////////////////////////////////////////////////////////////////////
0:         dataSource.getConnection().close(); // ensure derby for brokerName is initialized
commit:4c8a472
/////////////////////////////////////////////////////////////////////////
commit:165959e
/////////////////////////////////////////////////////////////////////////
0:         EmbeddedDataSource dataSource = (EmbeddedDataSource) jdbc.getDataSource();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:b6f63b0
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseVirtualTopics(false);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:952d036
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkBrokerDetachTest;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: public class JDBCNetworkBrokerDetachTest extends NetworkBrokerDetachTest {
1: 
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName(broker.getBrokerName());
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
0:         jdbc.deleteAllMessages();
1:         broker.setPersistenceAdapter(jdbc);
1:     }
1: 	
1: }
============================================================================