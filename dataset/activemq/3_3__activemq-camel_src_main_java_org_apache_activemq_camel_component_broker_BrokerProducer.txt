2:b92a315: /**
1:b92a315:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b92a315:  * contributor license agreements.  See the NOTICE file distributed with
1:b92a315:  * this work for additional information regarding copyright ownership.
1:b92a315:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b92a315:  * (the "License"); you may not use this file except in compliance with
1:b92a315:  * the License.  You may obtain a copy of the License at
1:b92a315:  *
1:b92a315:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b92a315:  *
1:b92a315:  * Unless required by applicable law or agreed to in writing, software
1:b92a315:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b92a315:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b92a315:  * See the License for the specific language governing permissions and
1:b92a315:  * limitations under the License.
2:b92a315:  */
1:b92a315: package org.apache.activemq.camel.component.broker;
12:b92a315: 
1:b92a315: import org.apache.activemq.broker.ProducerBrokerExchange;
1:b92a315: import org.apache.activemq.command.ActiveMQMessage;
1:b92a315: import org.apache.camel.AsyncCallback;
1:b92a315: import org.apache.camel.Exchange;
1:b92a315: import org.apache.camel.Message;
1:b92a315: import org.apache.camel.component.jms.JmsMessage;
1:b92a315: import org.apache.camel.impl.DefaultAsyncProducer;
1:b92a315: 
1:8f407a7: import javax.jms.JMSException;
1:8f407a7: import java.util.Map;
1:8f407a7: 
1:b92a315: public class BrokerProducer extends DefaultAsyncProducer {
1:b92a315:     private final BrokerEndpoint brokerEndpoint;
1:b92a315: 
1:b92a315:     public BrokerProducer(BrokerEndpoint endpoint) {
1:b92a315:         super(endpoint);
1:b92a315:         brokerEndpoint = endpoint;
17:b92a315:     }
1:5469d80: 
1:b92a315:     @Override
1:b92a315:     public boolean process(Exchange exchange, AsyncCallback callback) {
1:b92a315:         try {
1:b92a315:             //In the middle of the broker - InOut doesn't make any sense
1:b92a315:             //so we do in only
1:b92a315:             return processInOnly(exchange, callback);
1:b92a315:         } catch (Throwable e) {
1:b92a315:             // must catch exception to ensure callback is invoked as expected
1:b92a315:             // to let Camel error handling deal with this
1:b92a315:             exchange.setException(e);
2:b92a315:             callback.done(true);
2:b92a315:             return true;
1:b92a315:         }
1:b92a315:     }
1:b92a315: 
1:b92a315:     protected boolean processInOnly(final Exchange exchange, final AsyncCallback callback) {
1:b92a315:         try {
1:b92a315:             ActiveMQMessage message = getMessage(exchange);
1:8f407a7: 
1:b92a315:             if (message != null) {
1:b92a315:                 message.setDestination(brokerEndpoint.getDestination());
1:b92a315:                 //if the ProducerBrokerExchange is null the broker will create it
1:b92a315:                 ProducerBrokerExchange producerBrokerExchange = (ProducerBrokerExchange) exchange.getProperty(BrokerEndpoint.PRODUCER_BROKER_EXCHANGE);
1:b92a315: 
1:b92a315:                 brokerEndpoint.inject(producerBrokerExchange, message);
1:b92a315:             }
1:b92a315:         } catch (Exception e) {
1:b92a315:             exchange.setException(e);
1:b92a315:         }
1:b92a315:         callback.done(true);
1:b92a315:         return true;
1:b92a315:     }
1:b92a315: 
1:8f407a7:     private ActiveMQMessage getMessage(Exchange exchange) throws IllegalStateException, JMSException {
1:8f407a7:         Message camelMessage = getMessageFromExchange(exchange);
1:8f407a7:         checkOriginalMessage(camelMessage);
1:8f407a7:         ActiveMQMessage result = (ActiveMQMessage) ((JmsMessage) camelMessage).getJmsMessage();
1:8f407a7:         applyNewHeaders(result, camelMessage.getHeaders());
1:b92a315:         return result;
1:b92a315:     }
1:b92a315: 
1:8f407a7:     private Message getMessageFromExchange(Exchange exchange) {
1:8f407a7:         if (exchange.hasOut()) {
1:8f407a7:             return exchange.getOut();
1:8f407a7:         }
1:8f407a7: 
1:8f407a7:         return exchange.getIn();
1:8f407a7:     }
1:8f407a7: 
1:8f407a7:     private void checkOriginalMessage(Message camelMessage) throws IllegalStateException {
1:8f407a7:         /**
1:8f407a7:          * We purposely don't want to support injecting messages half-way through
1:8f407a7:          * broker processing - use the activemq camel component for that - but
1:8f407a7:          * we will support changing message headers and destinations.
1:8f407a7:          */
1:8f407a7: 
1:8f407a7:         if (!(camelMessage instanceof JmsMessage)) {
1:8f407a7:             throw new IllegalStateException("Not the original message from the broker " + camelMessage);
1:8f407a7:         }
1:8f407a7: 
1:8f407a7:         javax.jms.Message message = ((JmsMessage) camelMessage).getJmsMessage();
1:8f407a7: 
1:8f407a7:         if (!(message instanceof ActiveMQMessage)) {
1:8f407a7:             throw new IllegalStateException("Not the original message from the broker " + message);
1:b92a315:         }
1:b92a315:     }
1:5469d80: 
1:8f407a7:     private void applyNewHeaders(ActiveMQMessage message, Map<String, Object> headers) throws JMSException {
1:8f407a7:         for (Map.Entry<String, Object> entry : headers.entrySet()) {
1:8f407a7:             String key = entry.getKey();
1:8f407a7:             Object value = entry.getValue();
1:8f407a7:             if(value == null) {
1:8f407a7:                 continue;
1:8f407a7:             }
1:8f407a7:             message.setObjectProperty(key, value.toString(), false);
1:8f407a7:         }
1:8f407a7:     }
1:b92a315: }
============================================================================
author:Heath Kesler
-------------------------------------------------------------------------------
commit:8f407a7
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQMessage getMessage(Exchange exchange) throws IllegalStateException, JMSException {
1:         Message camelMessage = getMessageFromExchange(exchange);
1:         checkOriginalMessage(camelMessage);
1:         ActiveMQMessage result = (ActiveMQMessage) ((JmsMessage) camelMessage).getJmsMessage();
1:         applyNewHeaders(result, camelMessage.getHeaders());
1:     private Message getMessageFromExchange(Exchange exchange) {
1:         if (exchange.hasOut()) {
1:             return exchange.getOut();
1:         }
1: 
1:         return exchange.getIn();
1:     }
1: 
1:     private void checkOriginalMessage(Message camelMessage) throws IllegalStateException {
1:         /**
1:          * We purposely don't want to support injecting messages half-way through
1:          * broker processing - use the activemq camel component for that - but
1:          * we will support changing message headers and destinations.
1:          */
1: 
1:         if (!(camelMessage instanceof JmsMessage)) {
1:             throw new IllegalStateException("Not the original message from the broker " + camelMessage);
1:         }
1: 
1:         javax.jms.Message message = ((JmsMessage) camelMessage).getJmsMessage();
1: 
1:         if (!(message instanceof ActiveMQMessage)) {
1:             throw new IllegalStateException("Not the original message from the broker " + message);
1:     private void applyNewHeaders(ActiveMQMessage message, Map<String, Object> headers) throws JMSException {
1:         for (Map.Entry<String, Object> entry : headers.entrySet()) {
1:             String key = entry.getKey();
1:             Object value = entry.getValue();
1:             if(value == null) {
1:                 continue;
1:             }
1:             message.setObjectProperty(key, value.toString(), false);
1:         }
1:     }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:5469d80
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage result;
0:         Message camelMessage;
0:             camelMessage = exchange.getOut();
0:             camelMessage = exchange.getIn();
0:         Map<String, Object> headers = camelMessage.getHeaders();
0:         if (camelMessage instanceof JmsMessage) {
0:             JmsMessage jmsMessage = (JmsMessage) camelMessage;
0:                 throw new IllegalStateException("Not the original message from the broker " + jmsMessage.getJmsMessage());
0:             throw new IllegalStateException("Not the original message from the broker " + camelMessage);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b92a315
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component.broker;
1: 
0: import java.util.Map;
0: import java.util.concurrent.RejectedExecutionException;
1: 
1: import org.apache.activemq.broker.ProducerBrokerExchange;
0: import org.apache.activemq.camel.converter.ActiveMQMessageConverter;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.camel.AsyncCallback;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Message;
1: import org.apache.camel.component.jms.JmsMessage;
0: import org.apache.camel.converter.ObjectConverter;
1: import org.apache.camel.impl.DefaultAsyncProducer;
1: 
1: public class BrokerProducer extends DefaultAsyncProducer {
0:     private final ActiveMQMessageConverter activeMQConverter = new ActiveMQMessageConverter();
1:     private final BrokerEndpoint brokerEndpoint;
1: 
1:     public BrokerProducer(BrokerEndpoint endpoint) {
1:         super(endpoint);
1:         brokerEndpoint = endpoint;
1:     }
1: 
1: 
1:     @Override
1:     public boolean process(Exchange exchange, AsyncCallback callback) {
0:         // deny processing if we are not started
0:         if (!isRunAllowed()) {
0:             if (exchange.getException() == null) {
0:                 exchange.setException(new RejectedExecutionException());
1:             }
0:             // we cannot process so invoke callback
1:             callback.done(true);
1:             return true;
1:         }
1: 
1:         try {
1:             //In the middle of the broker - InOut doesn't make any sense
1:             //so we do in only
1:             return processInOnly(exchange, callback);
1: 
1:         } catch (Throwable e) {
1:             // must catch exception to ensure callback is invoked as expected
1:             // to let Camel error handling deal with this
1:             exchange.setException(e);
1:             callback.done(true);
1:             return true;
1:         }
1:     }
1: 
1:     protected boolean processInOnly(final Exchange exchange, final AsyncCallback callback) {
1:         try {
1:             ActiveMQMessage message = getMessage(exchange);
1:             if (message != null) {
1:                 message.setDestination(brokerEndpoint.getDestination());
1:                 //if the ProducerBrokerExchange is null the broker will create it
1:                 ProducerBrokerExchange producerBrokerExchange = (ProducerBrokerExchange) exchange.getProperty(BrokerEndpoint.PRODUCER_BROKER_EXCHANGE);
1: 
1:                 brokerEndpoint.inject(producerBrokerExchange, message);
1: 
1: 
1:             }
1:         } catch (Exception e) {
1:             exchange.setException(e);
1:         }
1:         callback.done(true);
1:         return true;
1:     }
1: 
0:     private ActiveMQMessage getMessage(Exchange exchange) throws Exception {
0:         ActiveMQMessage result = null;
0:         Message camelMesssage = null;
0:         if (exchange.hasOut()) {
0:             camelMesssage = exchange.getOut();
0:         } else {
0:             camelMesssage = exchange.getIn();
1:         }
1: 
0:         Map<String, Object> headers = camelMesssage.getHeaders();
1: 
1:         /**
0:          * We purposely don't want to support injecting messages half-way through
0:          * broker processing - use the activemq camel component for that - but
0:          * we will support changing message headers and destinations
1:          */
0:         if (camelMesssage instanceof JmsMessage) {
0:             JmsMessage jmsMessage = (JmsMessage) camelMesssage;
0:             if (jmsMessage.getJmsMessage() instanceof ActiveMQMessage) {
0:                 result = (ActiveMQMessage) jmsMessage.getJmsMessage();
0:                 //lets apply any new message headers
0:                 setJmsHeaders(result, headers);
0:             } else {
1: 
0:                 throw new IllegalStateException("not the original message from the broker " + jmsMessage.getJmsMessage());
1:             }
0:         } else {
0:             throw new IllegalStateException("not the original message from the broker " + camelMesssage);
1:         }
1:         return result;
1:     }
1: 
0:     private void setJmsHeaders(ActiveMQMessage message, Map<String, Object> headers) {
0:         message.setReadOnlyProperties(false);
0:         for (Map.Entry<String, Object> entry : headers.entrySet()) {
0:             if (entry.getKey().equalsIgnoreCase("JMSDeliveryMode")) {
0:                 Object value = entry.getValue();
0:                 if (value instanceof Number) {
0:                     Number number = (Number) value;
0:                     message.setJMSDeliveryMode(number.intValue());
1:                 }
1:             }
0:             if (entry.getKey().equalsIgnoreCase("JmsPriority")) {
0:                 Integer value = ObjectConverter.toInteger(entry.getValue());
0:                 if (value != null) {
0:                     message.setJMSPriority(value.intValue());
1:                 }
1:             }
0:             if (entry.getKey().equalsIgnoreCase("JMSTimestamp")) {
0:                 Long value = ObjectConverter.toLong(entry.getValue());
0:                 if (value != null) {
0:                     message.setJMSTimestamp(value.longValue());
1:                 }
1:             }
0:             if (entry.getKey().equalsIgnoreCase("JMSExpiration")) {
0:                 Long value = ObjectConverter.toLong(entry.getValue());
0:                 if (value != null) {
0:                     message.setJMSExpiration(value.longValue());
1:                 }
1:             }
0:             if (entry.getKey().equalsIgnoreCase("JMSRedelivered")) {
0:                 message.setJMSRedelivered(ObjectConverter.toBool(entry.getValue()));
1:             }
0:             if (entry.getKey().equalsIgnoreCase("JMSType")) {
0:                 Object value = entry.getValue();
0:                 if (value != null) {
0:                     message.setJMSType(value.toString());
1:                 }
1:             }
1:         }
1: 
1:     }
1: }
============================================================================