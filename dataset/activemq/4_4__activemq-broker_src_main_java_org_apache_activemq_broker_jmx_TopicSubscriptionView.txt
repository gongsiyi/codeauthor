1:062dc56: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f5dcc9d:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f5dcc9d:  *
1:062dc56:  * Unless required by applicable law or agreed to in writing, software
1:062dc56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:062dc56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:062dc56:  * See the License for the specific language governing permissions and
1:062dc56:  * limitations under the License.
1:062dc56:  */
1:062dc56: package org.apache.activemq.broker.jmx;
3:062dc56: 
1:05f82a9: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:062dc56: import org.apache.activemq.broker.region.TopicSubscription;
1:062dc56: 
1:062dc56: /**
1:0bbc0ac:  *
1:f5dcc9d:  *
1:062dc56:  */
1:062dc56: public class TopicSubscriptionView extends SubscriptionView implements TopicSubscriptionViewMBean {
1:062dc56: 
1:f5dcc9d:     public TopicSubscriptionView(String clientId, String userName, TopicSubscription subs) {
1:f5dcc9d:         super(clientId, userName, subs);
1:062dc56:     }
1:f5dcc9d: 
1:062dc56:     protected TopicSubscription getTopicSubscription() {
1:f812e34:         return (TopicSubscription)subscription;
1:062dc56:     }
1:062dc56: 
1:062dc56:     /**
1:062dc56:      * @return the number of messages discarded due to being a slow consumer
1:062dc56:      */
1:07d4e8c:     public int getDiscardedCount() {
1:062dc56:         TopicSubscription topicSubscription = getTopicSubscription();
1:062dc56:         return topicSubscription != null ? topicSubscription.discarded() : 0;
1:062dc56:     }
1:07d4e8c: 
1:062dc56:     /**
1:07d4e8c:      * @return the maximun number of messages that can be pending.
1:062dc56:      */
1:07d4e8c:     public int getMaximumPendingQueueSize() {
1:062dc56:         TopicSubscription topicSubscription = getTopicSubscription();
1:07d4e8c:         return topicSubscription != null ? topicSubscription.getMaximumPendingMessages() : 0;
1:07d4e8c:     }
1:f812e34: 
1:07d4e8c:     /**
1:07d4e8c:      *
1:07d4e8c:      */
1:07d4e8c:     public void setMaximumPendingQueueSize(int max) {
1:07d4e8c:         TopicSubscription topicSubscription = getTopicSubscription();
1:f812e34:         if (topicSubscription != null) {
1:f812e34:             topicSubscription.setMaximumPendingMessages(max);
1:07d4e8c:         }
1:062dc56:     }
1:947659c: 
1:05f82a9:     @Override
1:05f82a9:     public boolean isActive() {
1:05f82a9:         if (subscription instanceof DurableTopicSubscription) {
1:05f82a9:             return ((DurableTopicSubscription)subscription).isActive();
1:05f82a9:         } else {
1:05f82a9:             return super.isActive();
1:05f82a9:         }
1:05f82a9:     }
1:05f82a9: 
1:05f82a9: 
1:947659c: 
1:062dc56: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         return (TopicSubscription)subscription;
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (topicSubscription != null) {
1:             topicSubscription.setMaximumPendingMessages(max);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1:     public int getDiscardedCount() {
1:      * @return the maximun number of messages that can be pending.
1:     public int getMaximumPendingQueueSize() {
1:         return topicSubscription != null ? topicSubscription.getMaximumPendingMessages() : 0;
1:     }
1:     
1:     /**
1:      * 
1:      */
1:     public void setMaximumPendingQueueSize(int max) {
1:         TopicSubscription topicSubscription = getTopicSubscription();
0:         if ( topicSubscription != null ) {
0:         	topicSubscription.setMaximumPendingMessages(max);
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:     public TopicSubscriptionView(String clientId, String userName, TopicSubscription subs) {
1:         super(clientId, userName, subs);
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:05f82a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isActive() {
1:         if (subscription instanceof DurableTopicSubscription) {
1:             return ((DurableTopicSubscription)subscription).isActive();
1:         } else {
1:             return super.isActive();
1:         }
1:     }
1: 
1:     
author:James Strachan
-------------------------------------------------------------------------------
commit:947659c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:062dc56
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.broker.region.TopicSubscription;
1: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class TopicSubscriptionView extends SubscriptionView implements TopicSubscriptionViewMBean {
1: 
0:     public TopicSubscriptionView(String clientId, TopicSubscription subs) {
0:         super(clientId, subs);
1:     }
1: 
1:     protected TopicSubscription getTopicSubscription() {
0:         return (TopicSubscription) subscription;
1:     }
1: 
1:     /**
1:      * @return the number of messages discarded due to being a slow consumer
1:      */
0:     public int getDiscarded() {
1:         TopicSubscription topicSubscription = getTopicSubscription();
1:         return topicSubscription != null ? topicSubscription.discarded() : 0;
1:     }
1: 
1:     /**
0:      * @return the number of matched messages (messages targeted for the
0:      *         subscription but not yet able to be dispatched due to the
0:      *         prefetch buffer being full).
1:      */
0:     public int getMatched() {
1:         TopicSubscription topicSubscription = getTopicSubscription();
0:         return topicSubscription != null ? topicSubscription.matched() : 0;
1:     }
1: }
============================================================================