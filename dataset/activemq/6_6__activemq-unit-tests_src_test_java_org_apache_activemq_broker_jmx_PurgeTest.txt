1:b54ce41: /**
1:b54ce41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b54ce41:  * contributor license agreements.  See the NOTICE file distributed with
1:b54ce41:  * this work for additional information regarding copyright ownership.
1:b54ce41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b54ce41:  * (the "License"); you may not use this file except in compliance with
1:b54ce41:  * the License.  You may obtain a copy of the License at
1:6ea3a22:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:b54ce41:  * Unless required by applicable law or agreed to in writing, software
1:b54ce41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b54ce41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b54ce41:  * See the License for the specific language governing permissions and
1:b54ce41:  * limitations under the License.
1:b54ce41:  */
1:b54ce41: package org.apache.activemq.broker.jmx;
1:e679067: 
1:cb7b657: import javax.jms.Connection;
1:cb7b657: import javax.jms.ConnectionFactory;
1:cb7b657: import javax.jms.Message;
1:cb7b657: import javax.jms.MessageConsumer;
1:cb7b657: import javax.jms.MessageProducer;
1:cb7b657: import javax.jms.Session;
1:b54ce41: import javax.management.MBeanServer;
1:b54ce41: import javax.management.MBeanServerInvocationHandler;
1:b54ce41: import javax.management.MalformedObjectNameException;
1:b54ce41: import javax.management.ObjectName;
1:e679067: import junit.framework.Test;
1:b54ce41: import junit.textui.TestRunner;
1:42e51a3: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:e679067: import org.apache.activemq.store.PersistenceAdapter;
1:cb7b657: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:e679067: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e679067: 
1:b54ce41: /**
1:b54ce41:  * A specific test of Queue.purge() functionality
1:b54ce41:  */
1:b54ce41: public class PurgeTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PurgeTest.class);
1:e679067: 
1:b54ce41:     protected MBeanServer mbeanServer;
1:b54ce41:     protected String domain = "org.apache.activemq";
1:b54ce41:     protected String clientID = "foo";
1:e679067: 
1:b54ce41:     protected Connection connection;
1:b54ce41:     protected boolean transacted;
1:b54ce41:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:b54ce41:     protected int messageCount = 10;
1:6ea3a22:     public PersistenceAdapter persistenceAdapter;
1:e679067: 
1:b54ce41:     public static void main(String[] args) {
1:b54ce41:         TestRunner.run(PurgeTest.class);
2:b54ce41:     }
1:6ea3a22: 
1:e679067:     public static Test suite() {
1:6ea3a22:         return suite(PurgeTest.class);
1:e679067:     }
1:e679067: 
1:b54ce41:     public void testPurge() throws Exception {
1:b54ce41:         // Send some messages
1:b54ce41:         connection = connectionFactory.createConnection();
1:b54ce41:         connection.setClientID(clientID);
1:b54ce41:         connection.start();
1:b54ce41:         Session session = connection.createSession(transacted, authMode);
1:b54ce41:         destination = createDestination();
1:e679067:         MessageProducer producer = session.createProducer(destination);
1:b54ce41:         for (int i = 0; i < messageCount; i++) {
1:b54ce41:             Message message = session.createTextMessage("Message: " + i);
1:b54ce41:             producer.send(message);
1:b54ce41:         }
1:44d6be4: 
1:b54ce41:         // Now get the QueueViewMBean and purge
1:cb7b657:         String objectNameStr = broker.getBrokerObjectName().toString();
1:cb7b657:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:74a7a8b:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:cb7b657: 
1:b54ce41:         long count = proxy.getQueueSize();
1:b54ce41:         assertEquals("Queue size", count, messageCount);
1:6ea3a22: 
1:fef8cac:         assertEquals("Browse size", messageCount, proxy.browseMessages().size());
1:fef8cac: 
1:b54ce41:         proxy.purge();
1:b54ce41:         count = proxy.getQueueSize();
1:b54ce41:         assertEquals("Queue size", count, 0);
1:1695cff:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1:6ea3a22: 
1:e679067:         // Queues have a special case once there are more than a thousand
1:b54ce41:         // dead messages, make sure we hit that.
1:b54ce41:         messageCount += 1000;
1:b54ce41:         for (int i = 0; i < messageCount; i++) {
1:b54ce41:             Message message = session.createTextMessage("Message: " + i);
1:b54ce41:             producer.send(message);
1:b54ce41:         }
1:44d6be4: 
1:b54ce41:         count = proxy.getQueueSize();
1:b54ce41:         assertEquals("Queue size", count, messageCount);
1:e679067: 
1:b54ce41:         proxy.purge();
1:b54ce41:         count = proxy.getQueueSize();
1:b54ce41:         assertEquals("Queue size", count, 0);
1:1695cff:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1:e679067: 
1:6ea3a22:         producer.close();
1:b54ce41:     }
1:6ea3a22: 
1:e679067:     public void initCombosForTestDelete() {
1:cb7b657:         addCombinationValues("persistenceAdapter", new Object[] {new MemoryPersistenceAdapter(), new KahaDBPersistenceAdapter()});
1:e679067:     }
1:6ea3a22: 
1:44d6be4:     public void testDeleteSameProducer() throws Exception {
1:44d6be4:         connection = connectionFactory.createConnection();
1:44d6be4:         connection.start();
1:44d6be4:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:44d6be4:         destination = createDestination();
1:44d6be4: 
1:44d6be4:         MessageProducer producer = session.createProducer(destination);
1:44d6be4:         Message message = session.createTextMessage("Test Message");
1:44d6be4:         producer.send(message);
1:44d6be4: 
1:44d6be4:         MessageConsumer consumer = session.createConsumer(destination);
1:44d6be4: 
1:44d6be4:         Message received = consumer.receive(1000);
1:44d6be4:         assertEquals(message, received);
1:44d6be4: 
1:cb7b657:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:44d6be4:         BrokerViewMBean brokerProxy = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerViewMBeanName, BrokerViewMBean.class, true);
1:44d6be4: 
1:44d6be4:         brokerProxy.removeQueue(getDestinationString());
1:44d6be4:         producer.send(message);
1:44d6be4: 
1:44d6be4:         received = consumer.receive(1000);
1:44d6be4: 
1:44d6be4:         assertNotNull("Message not received", received);
1:44d6be4:         assertEquals(message, received);
1:44d6be4:     }
1:44d6be4: 
1:e679067:     public void testDelete() throws Exception {
1:e679067:         // Send some messages
1:e679067:         connection = connectionFactory.createConnection();
1:e679067:         connection.setClientID(clientID);
1:e679067:         connection.start();
1:e679067:         Session session = connection.createSession(transacted, authMode);
1:e679067:         destination = createDestination();
1:e679067:         sendMessages(session, messageCount);
1:6ea3a22: 
1:e679067:         // Now get the QueueViewMBean and purge
1:6ea3a22: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:e679067:         QueueViewMBean queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:6ea3a22: 
1:cb7b657:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:e679067:         BrokerViewMBean brokerProxy = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerViewMBeanName, BrokerViewMBean.class, true);
1:44d6be4: 
1:e679067:         long count = queueProxy.getQueueSize();
1:e679067:         assertEquals("Queue size", count, messageCount);
1:44d6be4: 
1:e679067:         brokerProxy.removeQueue(getDestinationString());
1:44d6be4: 
1:e679067:         sendMessages(session, messageCount);
1:e679067: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:e679067:         queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:6ea3a22: 
1:e679067:         count = queueProxy.getQueueSize();
1:e679067:         assertEquals("Queue size", count, messageCount);
1:6ea3a22: 
1:e679067:         queueProxy.purge();
1:6ea3a22: 
1:cb7b657:         // Queue have a special case once there are more than a thousand
1:e679067:         // dead messages, make sure we hit that.
1:e679067:         messageCount += 1000;
1:e679067:         sendMessages(session, messageCount);
1:6ea3a22: 
1:e679067:         count = queueProxy.getQueueSize();
1:e679067:         assertEquals("Queue size", count, messageCount);
1:e679067: 
1:e679067:         brokerProxy.removeQueue(getDestinationString());
1:e679067: 
1:e679067:         sendMessages(session, messageCount);
1:e679067: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:e679067:         queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:e679067: 
1:e679067:         count = queueProxy.getQueueSize();
1:e679067:         assertEquals("Queue size", count, messageCount);
1:e679067:     }
1:e679067: 
1:e679067:     private void sendMessages(Session session, int count) throws Exception {
1:6ea3a22:         MessageProducer producer = session.createProducer(destination);
1:e679067:         for (int i = 0; i < messageCount; i++) {
1:e679067:             Message message = session.createTextMessage("Message: " + i);
1:e679067:             producer.send(message);
1:e679067:         }
1:e679067:     }
1:e679067: 
1:b54ce41:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:b54ce41:         ObjectName objectName = new ObjectName(name);
1:b54ce41:         if (mbeanServer.isRegistered(objectName)) {
1:b54ce41:             echo("Bean Registered: " + objectName);
1:74a7a8b:         } else {
1:b54ce41:             fail("Could not find MBean!: " + objectName);
1:b54ce41:         }
1:b54ce41:         return objectName;
1:b54ce41:     }
1:e679067: 
1:b54ce41:     protected void setUp() throws Exception {
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:b54ce41:         useTopic = false;
1:b54ce41:         super.setUp();
1:b54ce41:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:b54ce41:     }
1:e679067: 
1:b54ce41:     protected void tearDown() throws Exception {
1:b54ce41:         if (connection != null) {
1:b54ce41:             connection.close();
1:b54ce41:             connection = null;
1:b54ce41:         }
1:b54ce41:         super.tearDown();
1:b54ce41:     }
1:e679067: 
1:b54ce41:     protected BrokerService createBroker() throws Exception {
1:b54ce41:         BrokerService answer = new BrokerService();
1:b54ce41:         answer.setUseJmx(true);
1:1cc049c:         answer.setEnableStatistics(true);
1:1cc049c:         answer.addConnector(bindAddress);
1:e679067:         answer.setPersistenceAdapter(persistenceAdapter);
1:e679067:         answer.deleteAllMessages();
1:b54ce41:         return answer;
1:b54ce41:     }
1:e679067: 
1:42e51a3:     @Override
1:42e51a3:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:42e51a3:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:42e51a3:     }
1:42e51a3: 
1:b54ce41:     protected void echo(String text) {
1:230a86c:         LOG.info(text);
1:b54ce41:     }
1:6ea3a22: 
1:e679067:     /**
1:e679067:      * Returns the name of the destination used in this test case
1:e679067:      */
1:e679067:     protected String getDestinationString() {
1:e679067:         return getClass().getName() + "." + getName(true);
1:e679067:     }
1:b54ce41: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fef8cac
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Browse size", messageCount, proxy.browseMessages().size());
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         bindAddress = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
commit:6ea3a22
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public PersistenceAdapter persistenceAdapter;
1: 
1:         return suite(PurgeTest.class);
/////////////////////////////////////////////////////////////////////////
1: 
1:         producer.close();
1: 
0:         addCombinationValues("persistenceAdapter", new Object[] {new MemoryPersistenceAdapter(), new AMQPersistenceAdapter(), new JDBCPersistenceAdapter()});
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         MessageProducer producer = session.createProducer(destination);
/////////////////////////////////////////////////////////////////////////
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("persistenceAdapter", new Object[] {new MemoryPersistenceAdapter(), new KahaDBPersistenceAdapter()});
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:         // Queue have a special case once there are more than a thousand
/////////////////////////////////////////////////////////////////////////
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
commit:1cc049c
/////////////////////////////////////////////////////////////////////////
1:         answer.setEnableStatistics(true);
1:         answer.addConnector(bindAddress);   
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(PurgeTest.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
0:  * 
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         answer.addConnector(bindAddress);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(text);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(PurgeTest.class);
commit:44d6be4
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1:     public void testDeleteSameProducer() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination();
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         Message message = session.createTextMessage("Test Message");
1:         producer.send(message);
1: 
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         Message received = consumer.receive(1000);
1:         assertEquals(message, received);
1: 
0:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         BrokerViewMBean brokerProxy = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerViewMBeanName, BrokerViewMBean.class, true);
1: 
1:         brokerProxy.removeQueue(getDestinationString());
1: 
1: 
1:         producer.send(message);
1: 
1:         received = consumer.receive(1000);
1: 
1:         assertNotNull("Message not received", received);
1:         assertEquals(message, received);
1: 
1: 
1:     }
1: 
commit:1695cff
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
commit:e679067
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
0: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:     public PersistenceAdapter persistenceAdapter; 
1:     
1:     public static Test suite() {
0:     	return suite(PurgeTest.class);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void initCombosForTestDelete() {
0:     	addCombinationValues("persistenceAdapter", new Object[] {new MemoryPersistenceAdapter(), new AMQPersistenceAdapter(), new JDBCPersistenceAdapter()});
1:     }
1:     
1:     public void testDelete() throws Exception {
1:         // Send some messages
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID(clientID);
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         sendMessages(session, messageCount);
1: 
1:         // Now get the QueueViewMBean and purge
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1:         QueueViewMBean queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         
0:         ObjectName brokerViewMBeanName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         BrokerViewMBean brokerProxy = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerViewMBeanName, BrokerViewMBean.class, true);
1: 
1:         long count = queueProxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1: 
1:         brokerProxy.removeQueue(getDestinationString());
1:         
1:         sendMessages(session, messageCount);
1:         
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1:         queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         
1:         count = queueProxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1:         
1:         queueProxy.purge();
1: 
1:         // Queues have a special case once there are more than a thousand
1:         // dead messages, make sure we hit that.
1:         messageCount += 1000;
1:         sendMessages(session, messageCount);
1: 
1:         count = queueProxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1: 
1:         brokerProxy.removeQueue(getDestinationString());
1: 
1:         sendMessages(session, messageCount);
1:         
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1:         queueProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         
1:         count = queueProxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1:     }
1:     
1:     private void sendMessages(Session session, int count) throws Exception {
1:     	MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage("Message: " + i);
1:             producer.send(message);
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         answer.setPersistenceAdapter(persistenceAdapter);
1:         answer.deleteAllMessages();
0:     
1:     /**
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
1:         return getClass().getName() + "." + getName(true);
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:b54ce41
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
0: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
0: 
1: import junit.textui.TestRunner;
0: 
1: /**
1:  * A specific test of Queue.purge() functionality
0:  *
0:  * @version $Revision$
1:  */
1: public class PurgeTest extends EmbeddedBrokerTestSupport {
0: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1:     protected String clientID = "foo";
0: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:     protected int messageCount = 10;
0: 
1:     public static void main(String[] args) {
1:         TestRunner.run(PurgeTest.class);
1:     }
0: 
1:     public void testPurge() throws Exception {
1:         // Send some messages
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID(clientID);
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         destination = createDestination();
0:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage("Message: " + i);
1:             producer.send(message);
1:         }
0: 
1:         // Now get the QueueViewMBean and purge
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0:         QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
1:         long count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
0: 
1:         proxy.purge();
1:         count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, 0);
0: 
0:         // Queues have a special case once there are more than a thousand
1:         // dead messages, make sure we hit that.
1:         messageCount += 1000;
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage("Message: " + i);
1:             producer.send(message);
1:         }
0: 
1:         count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
0: 
1:         proxy.purge();
1:         count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, 0);
1:     }
0: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             echo("Bean Registered: " + objectName);
1:         }
0:         else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
0: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
0: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
0: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
0:         answer.setPersistent(false);
0:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
0: 
1:     protected void echo(String text) {
0:         log.info(text);
1:     }
1: }
============================================================================