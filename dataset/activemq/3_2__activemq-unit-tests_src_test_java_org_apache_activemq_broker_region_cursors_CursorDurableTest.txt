1:b6ba20b: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:b6ba20b:  */
1:b6ba20b: package org.apache.activemq.broker.region.cursors;
1:3bf0245: 
1:b6ba20b: import javax.jms.Connection;
1:b6ba20b: import javax.jms.ConnectionFactory;
1:b6ba20b: import javax.jms.Destination;
1:b6ba20b: import javax.jms.JMSException;
1:b6ba20b: import javax.jms.MessageConsumer;
1:b6ba20b: import javax.jms.Session;
1:b6ba20b: import javax.jms.Topic;
1:b6ba20b: import org.apache.activemq.broker.BrokerService;
1:3bf0245: 
1:b6ba20b: /**
1:b0c2a40:  * 
1:b6ba20b:  */
1:f812e34: public class CursorDurableTest extends CursorSupport {
3:3a9299b: 
1:f812e34:     protected Destination getDestination(Session session) throws JMSException {
1:230a86c:         String topicName = getClass().getName();
1:b6ba20b:         return session.createTopic(topicName);
16:b6ba20b:     }
1:3bf0245: 
1:f812e34:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:f812e34:         Connection connection = fac.createConnection();
1:b6ba20b:         connection.setClientID("testConsumer");
1:b6ba20b:         connection.start();
1:b6ba20b:         return connection;
1:b6ba20b:     }
1:3bf0245: 
1:f812e34:     protected MessageConsumer getConsumer(Connection connection) throws Exception {
1:f812e34:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f812e34:         Topic topic = (Topic)getDestination(consumerSession);
1:f812e34:         MessageConsumer consumer = consumerSession.createDurableSubscriber(topic, "testConsumer");
1:b6ba20b:         return consumer;
1:b6ba20b:     }
1:f812e34: 
1:f812e34:     protected void configureBroker(BrokerService answer) throws Exception {
1:b6ba20b:         answer.setDeleteAllMessagesOnStartup(true);
1:b6ba20b:         answer.addConnector(bindAddress);
1:b6ba20b:         answer.setDeleteAllMessagesOnStartup(true);
1:b6ba20b:     }
1:b6ba20b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class CursorDurableTest extends CursorSupport {
1:     protected Destination getDestination(Session session) throws JMSException {
1:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:         Connection connection = fac.createConnection();
1:     protected MessageConsumer getConsumer(Connection connection) throws Exception {
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = (Topic)getDestination(consumerSession);
1:         MessageConsumer consumer = consumerSession.createDurableSubscriber(topic, "testConsumer");
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1:         String topicName = getClass().getName();
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
author:Robert Davies
-------------------------------------------------------------------------------
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1: 
1: 
0: public class CursorDurableTest extends CursorSupport{
0:     protected Destination getDestination(Session session) throws JMSException{
1: 
1: 
0:         Session consumerSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         Topic topic=(Topic)getDestination(consumerSession);
0:         MessageConsumer consumer=consumerSession.createDurableSubscriber(topic,"testConsumer");
0:     protected void configureBroker(BrokerService answer) throws Exception{
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
0:     protected static final int MESSAGE_COUNT=100;
/////////////////////////////////////////////////////////////////////////
1:            
1:             
1:            
/////////////////////////////////////////////////////////////////////////
0:         answer.setPendingDurableSubscriberPolicy(new StorePendingDurableSubscriberMessageStoragePolicy());
0:         
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
0: 
0: import java.io.File;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Properties;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
0: import javax.jms.TextMessage;
1: import javax.jms.Topic;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class CursorDurableTest extends TestCase{
0:     
0:     protected static final Log log = LogFactory.getLog(CursorDurableTest.class);
0: 
0:     protected static final int MESSAGE_COUNT=50;
0:     protected static final int PREFETCH_SIZE = 5;
0:     protected BrokerService broker;
0:     protected String bindAddress="tcp://localhost:60706";
0:     protected int topicCount=0;
0: 
0:     public void testSendFirstThenConsume() throws Exception{
0:         ConnectionFactory factory=createConnectionFactory();
0:         Connection consumerConnection= getConsumerConnection(factory);
0:         //create durable subs
0:         MessageConsumer consumer = getConsumer(consumerConnection);
0:         consumerConnection.close();
0:         
0:         Connection producerConnection = factory.createConnection();
0:         producerConnection.start();
0:         Session session = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(getTopic(session));
0:         List senderList = new ArrayList();
0:         for (int i =0; i < MESSAGE_COUNT; i++) {
0:             Message msg=session.createTextMessage("test"+i);
0:             senderList.add(msg);
0:             producer.send(msg);
1:         }
0:         producerConnection.close();
0:         
0:         //now consume the messages
0:         consumerConnection= getConsumerConnection(factory);
0:         //create durable subs
0:         consumer = getConsumer(consumerConnection);
0:         List consumerList = new ArrayList();
0:         for (int i = 0; i < MESSAGE_COUNT; i++) {
0:             Message msg = consumer.receive();
0:             consumerList.add(msg);
1:         }
0:         assertEquals(senderList,consumerList);
0:         consumerConnection.close();       
1:     }
0:     
0:     public void testSendWhilstConsume() throws Exception{
0:         ConnectionFactory factory=createConnectionFactory();
0:         Connection consumerConnection= getConsumerConnection(factory);
0:         //create durable subs
0:         MessageConsumer consumer = getConsumer(consumerConnection);
0:         consumerConnection.close();
0:         
0:         Connection producerConnection = factory.createConnection();
0:         producerConnection.start();
0:         Session session = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(getTopic(session));
0:         List senderList = new ArrayList();
0:         for (int i =0; i < MESSAGE_COUNT/10; i++) {
0:             TextMessage msg=session.createTextMessage("test"+i);
0:             senderList.add(msg);
0:             producer.send(msg);
1:         }
0:         
0:         
0:         //now consume the messages
0:         consumerConnection= getConsumerConnection(factory);
0:         //create durable subs
0:         consumer = getConsumer(consumerConnection);
0:         final List consumerList = new ArrayList();
0:         
0:         final CountDownLatch latch = new CountDownLatch(1);
0:         consumer.setMessageListener(new MessageListener() {
0: 
0:             public void onMessage(Message msg){
0:                 try{
0:                     //sleep to act as a slow consumer
0:                     //which will force a mix of direct and polled dispatching
0:                     //using the cursor on the broker
0:                     Thread.sleep(50);
0:                 }catch(Exception e){
0:                     // TODO Auto-generated catch block
0:                     e.printStackTrace();
1:                 }
0:                 consumerList.add(msg);
0:                 if (consumerList.size()==MESSAGE_COUNT) {
0:                     latch.countDown();
1:                 }
0:                 
1:             }
0:             
0:         });
0:         for (int i =MESSAGE_COUNT/10; i < MESSAGE_COUNT; i++) {
0:             TextMessage msg=session.createTextMessage("test"+i);
0:             senderList.add(msg);
0:             producer.send(msg);
1:         }   
0:         
0:         
0:         latch.await(300000,TimeUnit.MILLISECONDS);
0:         assertEquals("Still dipatching - count down latch not sprung" , latch.getCount(),0);
0:         assertEquals("cosumerList - expected: " + MESSAGE_COUNT + " but was: " + consumerList.size(),consumerList.size(),senderList.size());
0:         assertEquals(senderList,consumerList);
0:         producerConnection.close();
0:         consumerConnection.close();       
1:     }
0:     
0:     
0: 
0:     protected Topic getTopic(Session session) throws JMSException{
0:         String topicName=getClass().getName();
1:         return session.createTopic(topicName);
1:     }
0:     
0:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException{
0:         Connection connection=fac.createConnection();
1:         connection.setClientID("testConsumer");
1:         connection.start();
1:         return connection;
0:         
1:     }
0:     
0:     protected MessageConsumer getConsumer(Connection connection) throws Exception{
0:         Session consumerSession = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         Topic topic = getTopic(consumerSession);
0:         MessageConsumer  consumer = consumerSession.createDurableSubscriber(topic,"testConsumer");
1:         return consumer;
1:     }
0: 
0:     
0: 
0:     protected void setUp() throws Exception{
0:         if(broker==null){
0:             broker=createBroker();
1:         }
0:         super.setUp();
1:     }
0: 
0:     protected void tearDown() throws Exception{
0:         super.tearDown();
0:         
0:         if(broker!=null){
0:           broker.stop();
1:         }
1:     }
0: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory cf=new ActiveMQConnectionFactory(bindAddress);
0:         Properties props = new Properties();
0:         props.setProperty("prefetchPolicy.durableTopicPrefetch","" + PREFETCH_SIZE);
0:         props.setProperty("prefetchPolicy.optimizeDurableTopicPrefetch","" + PREFETCH_SIZE);
0:         cf.setProperties(props);
0:         return cf;
1:     }
0:     
0:    
0: 
0:     protected BrokerService createBroker() throws Exception{
0:         BrokerService answer=new BrokerService();
0:         configureBroker(answer);
1:         answer.setDeleteAllMessagesOnStartup(true);
0:         answer.start();
0:         return answer;
1:     }
0: 
0:     protected void configureBroker(BrokerService answer) throws Exception{
1:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================