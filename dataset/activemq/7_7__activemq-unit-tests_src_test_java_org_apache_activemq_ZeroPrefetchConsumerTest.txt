1:6e3a634: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
5:6e3a634:  *
1:6e3a634:  * Unless required by applicable law or agreed to in writing, software
1:6e3a634:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e3a634:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e3a634:  * See the License for the specific language governing permissions and
1:6e3a634:  * limitations under the License.
1:6e3a634:  */
1:6e3a634: package org.apache.activemq;
3:a7891c3: 
1:05a8cba: import javax.jms.Connection;
1:05a8cba: import javax.jms.JMSException;
1:05a8cba: import javax.jms.Message;
1:05a8cba: import javax.jms.MessageConsumer;
1:05a8cba: import javax.jms.MessageListener;
1:05a8cba: import javax.jms.MessageProducer;
1:05a8cba: import javax.jms.Queue;
1:05a8cba: import javax.jms.Session;
1:05a8cba: import javax.jms.TextMessage;
1:62f798a: 
1:95e6d60: import org.apache.activemq.broker.BrokerService;
1:bc45bf8: import org.apache.activemq.broker.region.Subscription;
1:95e6d60: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:95e6d60: import org.apache.activemq.broker.region.policy.PolicyMap;
1:95e6d60: import org.apache.activemq.command.ActiveMQDestination;
1:74a7a8b: import org.apache.activemq.command.ActiveMQQueue;
1:bc45bf8: import org.apache.activemq.command.ConsumerControl;
1:bc45bf8: import org.apache.activemq.command.ExceptionResponse;
1:74a7a8b: import org.apache.activemq.spring.SpringConsumer;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:6e3a634: /**
1:c7d559f:  *
1:6e3a634:  */
1:fb5a373: public class ZeroPrefetchConsumerTest extends EmbeddedBrokerTestSupport {
1:62f798a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ZeroPrefetchConsumerTest.class);
1:62f798a: 
1:6e3a634:     protected Connection connection;
1:6e3a634:     protected Queue queue;
1:95e6d60:     protected Queue brokerZeroQueue = new ActiveMQQueue("brokerZeroConfig");
1:a7891c3: 
1:6e3a634:     public void testCannotUseMessageListener() throws Exception {
2:6e3a634:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6e3a634:         MessageConsumer consumer = session.createConsumer(queue);
1:62f798a: 
1:6e3a634:         MessageListener listener = new SpringConsumer();
1:6e3a634:         try {
1:6e3a634:             consumer.setMessageListener(listener);
1:6e3a634:             fail("Should have thrown JMSException as we cannot use MessageListener with zero prefetch");
1:230a86c:         } catch (JMSException e) {
1:fc00993:             LOG.info("Received expected exception : " + e);
2:6e3a634:         }
1:6e3a634:     }
1:933eb2f: 
1:6e3a634:     public void testPullConsumerWorks() throws Exception {
1:b0eb973:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c: 
1:6e3a634:         MessageProducer producer = session.createProducer(queue);
1:6e3a634:         producer.send(session.createTextMessage("Hello World!"));
1:230a86c: 
1:6e3a634:         // now lets receive it
1:6e3a634:         MessageConsumer consumer = session.createConsumer(queue);
1:6e3a634:         Message answer = consumer.receive(5000);
1:6e3a634:         assertNotNull("Should have received a message!", answer);
1:a7891c3:         // check if method will return at all and will return a null
1:62f798a:         answer = consumer.receive(1);
1:a7891c3:         assertNull("Should have not received a message!", answer);
1:a7891c3:         answer = consumer.receiveNoWait();
1:a7891c3:         assertNull("Should have not received a message!", answer);
1:a7891c3:     }
1:c7d559f: 
1:a7891c3:     public void testIdleConsumer() throws Exception {
1:62f798a:         doTestIdleConsumer(false);
1:62f798a:     }
1:c7d559f: 
1:62f798a:     public void testIdleConsumerTranscated() throws Exception {
1:62f798a:         doTestIdleConsumer(true);
1:62f798a:     }
1:c7d559f: 
1:62f798a:     private void doTestIdleConsumer(boolean transacted) throws Exception {
1:8de3bd2:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:8de3bd2: 
1:a7891c3:         MessageProducer producer = session.createProducer(queue);
1:a7891c3:         producer.send(session.createTextMessage("Msg1"));
1:a7891c3:         producer.send(session.createTextMessage("Msg2"));
1:230a86c:         if (transacted) {
1:230a86c:             session.commit();
1:62f798a:         }
1:a7891c3:         // now lets receive it
1:a7891c3:         MessageConsumer consumer = session.createConsumer(queue);
1:c7d559f: 
1:933eb2f:         session.createConsumer(queue);
1:230a86c:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:a7891c3:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:230a86c:         if (transacted) {
1:230a86c:             session.commit();
1:62f798a:         }
1:a7891c3:         // this call would return null if prefetchSize > 0
1:230a86c:         answer = (TextMessage)consumer.receive(5000);
1:62f798a:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:230a86c:         if (transacted) {
1:230a86c:             session.commit();
1:62f798a:         }
1:230a86c:         answer = (TextMessage)consumer.receiveNoWait();
1:a7891c3:         assertNull("Should have not received a message!", answer);
1:6e3a634:     }
1:c7d559f: 
1:62f798a:     public void testRecvRecvCommit() throws Exception {
1:62f798a:         doTestRecvRecvCommit(false);
1:62f798a:     }
1:95e6d60: 
1:62f798a:     public void testRecvRecvCommitTranscated() throws Exception {
1:62f798a:         doTestRecvRecvCommit(true);
1:62f798a:     }
1:8de3bd2: 
1:62f798a:     private void doTestRecvRecvCommit(boolean transacted) throws Exception {
1:8de3bd2:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:230a86c: 
1:62f798a:         MessageProducer producer = session.createProducer(queue);
1:62f798a:         producer.send(session.createTextMessage("Msg1"));
1:62f798a:         producer.send(session.createTextMessage("Msg2"));
1:230a86c:         if (transacted) {
1:230a86c:             session.commit();
1:62f798a:         }
1:62f798a:         // now lets receive it
1:62f798a:         MessageConsumer consumer = session.createConsumer(queue);
1:230a86c:         TextMessage answer = (TextMessage)consumer.receiveNoWait();
1:62f798a:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:230a86c:         answer = (TextMessage)consumer.receiveNoWait();
1:62f798a:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:230a86c:         if (transacted) {
1:230a86c:             session.commit();
1:62f798a:         }
1:230a86c:         answer = (TextMessage)consumer.receiveNoWait();
1:62f798a:         assertNull("Should have not received a message!", answer);
1:62f798a:     }
1:230a86c: 
1:b0eb973:     public void testTwoConsumers() throws Exception {
1:a7891c3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c: 
1:b0eb973:         MessageProducer producer = session.createProducer(queue);
1:b0eb973:         producer.send(session.createTextMessage("Msg1"));
1:b0eb973:         producer.send(session.createTextMessage("Msg2"));
1:62f798a: 
1:b0eb973:         // now lets receive it
1:b0eb973:         MessageConsumer consumer1 = session.createConsumer(queue);
1:b0eb973:         MessageConsumer consumer2 = session.createConsumer(queue);
1:b0eb973:         TextMessage answer = (TextMessage)consumer1.receiveNoWait();
1:b0eb973:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:b0eb973:         answer = (TextMessage)consumer2.receiveNoWait();
1:b0eb973:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:c7d559f: 
1:b0eb973:         answer = (TextMessage)consumer2.receiveNoWait();
1:b0eb973:         assertNull("Should have not received a message!", answer);
1:b0eb973:     }
1:8de3bd2: 
1:8de3bd2:     // https://issues.apache.org/activemq/browse/AMQ-2567
1:8de3bd2:     public void testManyMessageConsumer() throws Exception {
1:8de3bd2:         doTestManyMessageConsumer(true);
1:8de3bd2:     }
1:8de3bd2: 
1:8de3bd2:     public void testManyMessageConsumerNoTransaction() throws Exception {
1:8de3bd2:         doTestManyMessageConsumer(false);
1:8de3bd2:     }
1:c7d559f: 
1:8de3bd2:     private void doTestManyMessageConsumer(boolean transacted) throws Exception {
1:2d9959a:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:8de3bd2: 
1:8de3bd2:         MessageProducer producer = session.createProducer(queue);
1:8de3bd2:         producer.send(session.createTextMessage("Msg1"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg2"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg3"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg4"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg5"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg6"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg7"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg8"));
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         // now lets receive it
1:8de3bd2:         MessageConsumer consumer = session.createConsumer(queue);
1:8de3bd2: 
1:8de3bd2:         MessageConsumer consumer2  = session.createConsumer(queue);
1:8de3bd2:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg3");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         // this call would return null if prefetchSize > 0
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg4");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
2:c7d559f:         // Now using other consumer
3:8de3bd2:         // this call should return the next message (Msg5) still left on the queue
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg5");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:c7d559f:         // Now using other consumer
1:2d9959a:         // this call should return the next message still left on the queue
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg6");
1:8de3bd2:         // read one more message without commit
1:2d9959a:         // this call should return the next message still left on the queue
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg7");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:c7d559f:         // Now using other consumer
1:8de3bd2:         // this call should return the next message (Msg5) still left on the queue
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg8");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receiveNoWait();
1:8de3bd2:         assertNull("Should have not received a message!", answer);
1:8de3bd2:     }
1:8de3bd2: 
1:8de3bd2:     public void testManyMessageConsumerWithSend() throws Exception {
1:8de3bd2:         doTestManyMessageConsumerWithSend(true);
1:8de3bd2:     }
1:8de3bd2: 
1:2d9959a:     public void testManyMessageConsumerWithTxSendPrioritySupport() throws Exception {
1:2d9959a:         ((ActiveMQConnection)connection).setMessagePrioritySupported(true);
1:2d9959a:         doTestManyMessageConsumerWithSend(true);
1:2d9959a:     }
1:2d9959a: 
1:8de3bd2:     public void testManyMessageConsumerWithSendNoTransaction() throws Exception {
1:8de3bd2:         doTestManyMessageConsumerWithSend(false);
1:8de3bd2:     }
1:c7d559f: 
1:8de3bd2:     private void doTestManyMessageConsumerWithSend(boolean transacted) throws Exception {
1:2d9959a:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED :Session.AUTO_ACKNOWLEDGE);
1:8de3bd2: 
1:8de3bd2:         MessageProducer producer = session.createProducer(queue);
1:8de3bd2:         producer.send(session.createTextMessage("Msg1"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg2"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg3"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg4"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg5"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg6"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg7"));
1:8de3bd2:         producer.send(session.createTextMessage("Msg8"));
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         // now lets receive it
1:8de3bd2:         MessageConsumer consumer = session.createConsumer(queue);
1:8de3bd2: 
1:8de3bd2:         MessageConsumer consumer2  = session.createConsumer(queue);
1:8de3bd2:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg3");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         // Now using other consumer take 2
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg4");
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg5");
1:8de3bd2: 
1:8de3bd2:         // ensure prefetch extension ok by sending another that could get dispatched
1:8de3bd2:         producer.send(session.createTextMessage("Msg9"));
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2: 
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg6");
1:8de3bd2:         // read one more message without commit
1:c7d559f:         // and using other consumer
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg7");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:c7d559f: 
1:8de3bd2:         answer = (TextMessage)consumer2.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg8");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:c7d559f: 
1:8de3bd2:         answer = (TextMessage)consumer.receive(5000);
1:8de3bd2:         assertEquals("Should have received a message!", answer.getText(), "Msg9");
1:8de3bd2:         if (transacted) {
1:8de3bd2:             session.commit();
1:8de3bd2:         }
1:8de3bd2:         answer = (TextMessage)consumer.receiveNoWait();
1:8de3bd2:         assertNull("Should have not received a message!", answer);
1:8de3bd2:     }
1:8de3bd2: 
1:95e6d60:     // https://issues.apache.org/jira/browse/AMQ-4224
1:95e6d60:     public void testBrokerZeroPrefetchConfig() throws Exception {
1:95e6d60:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:95e6d60: 
1:95e6d60:         MessageProducer producer = session.createProducer(brokerZeroQueue);
1:95e6d60:         producer.send(session.createTextMessage("Msg1"));
1:95e6d60:         // now lets receive it
1:95e6d60:         MessageConsumer consumer = session.createConsumer(brokerZeroQueue);
1:95e6d60: 
1:95e6d60:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:de4f4e4:         assertNotNull("Consumer should have read a message", answer);
1:95e6d60:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:95e6d60:     }
1:95e6d60: 
1:bc45bf8:     // https://issues.apache.org/jira/browse/AMQ-4234
1:bc45bf8:     // https://issues.apache.org/jira/browse/AMQ-4235
1:bc45bf8:     public void testBrokerZeroPrefetchConfigWithConsumerControl() throws Exception {
1:bc45bf8:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc45bf8: 
1:bc45bf8:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(brokerZeroQueue);
1:bc45bf8:         assertEquals("broker config prefetch in effect", 0, consumer.info.getCurrentPrefetchSize());
1:bc45bf8: 
1:bc45bf8:         // verify sub view broker
1:bc45bf8:         Subscription sub =
1:bc45bf8:                 broker.getRegionBroker().getDestinationMap().get(ActiveMQDestination.transform(brokerZeroQueue)).getConsumers().get(0);
1:bc45bf8:         assertEquals("broker sub prefetch is correct", 0, sub.getConsumerInfo().getCurrentPrefetchSize());
1:bc45bf8: 
1:bc45bf8:         // manipulate Prefetch (like failover and stomp)
1:bc45bf8:         ConsumerControl consumerControl = new ConsumerControl();
1:bc45bf8:         consumerControl.setConsumerId(consumer.info.getConsumerId());
1:bc45bf8:         consumerControl.setDestination(ActiveMQDestination.transform(brokerZeroQueue));
1:bc45bf8:         consumerControl.setPrefetch(1000); // default for a q
1:bc45bf8: 
1:bc45bf8:         Object reply = ((ActiveMQConnection) connection).getTransport().request(consumerControl);
1:bc45bf8:         assertTrue("good request", !(reply instanceof ExceptionResponse));
1:bc45bf8:         assertEquals("broker config prefetch in effect", 0, consumer.info.getCurrentPrefetchSize());
1:bc45bf8:         assertEquals("broker sub prefetch is correct", 0, sub.getConsumerInfo().getCurrentPrefetchSize());
1:bc45bf8:     }
1:bc45bf8: 
1:95e6d60:     @Override
1:95e6d60:     protected BrokerService createBroker() throws Exception {
1:95e6d60:         BrokerService brokerService = super.createBroker();
1:95e6d60:         PolicyMap policyMap = new PolicyMap();
1:95e6d60:         PolicyEntry zeroPrefetchPolicy = new PolicyEntry();
1:95e6d60:         zeroPrefetchPolicy.setQueuePrefetch(0);
1:95e6d60:         policyMap.put(ActiveMQDestination.transform(brokerZeroQueue), zeroPrefetchPolicy);
1:95e6d60:         brokerService.setDestinationPolicy(policyMap);
1:95e6d60:         return brokerService;
1:95e6d60:     }
1:95e6d60: 
1:c7d559f:     @Override
1:6e3a634:     protected void setUp() throws Exception {
1:8de3bd2:         bindAddress = "tcp://localhost:0";
1:6e3a634:         super.setUp();
1:8de3bd2: 
1:6e3a634:         connection = createConnection();
1:6e3a634:         connection.start();
1:6e3a634:         queue = createQueue();
1:6e3a634:     }
1:c7d559f: 
1:c7d559f:     @Override
1:8de3bd2:     protected void startBroker() throws Exception {
1:8de3bd2:         super.startBroker();
1:8de3bd2:         bindAddress = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:8de3bd2:     }
1:8de3bd2: 
1:c7d559f:     @Override
1:6e3a634:     protected void tearDown() throws Exception {
1:de4f4e4:         try {
1:de4f4e4:             connection.close();
1:de4f4e4:         } catch (Exception ex) {}
1:de4f4e4: 
1:6e3a634:         super.tearDown();
1:6e3a634:     }
1:62f798a: 
1:6e3a634:     protected Queue createQueue() {
1:fb5a373:         return new ActiveMQQueue(getDestinationString() + "?consumer.prefetchSize=0");
1:6e3a634:     }
1:6e3a634: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:de4f4e4
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Consumer should have read a message", answer);
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             connection.close();
1:         } catch (Exception ex) {}
1: 
author:gtully
-------------------------------------------------------------------------------
commit:2d9959a
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         // this call should return the next message still left on the queue
1:         // this call should return the next message still left on the queue
/////////////////////////////////////////////////////////////////////////
1:     public void testManyMessageConsumerWithTxSendPrioritySupport() throws Exception {
1:         ((ActiveMQConnection)connection).setMessagePrioritySupported(true);
1:         doTestManyMessageConsumerWithSend(true);
1:     }
1: 
1:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED :Session.AUTO_ACKNOWLEDGE);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Now using other consumer
1:         // Now using other consumer
1:         // Now using other consumer
1:         // Now using other consumer
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // and using other consumer
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:bc45bf8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ConsumerControl;
0: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ExceptionResponse;
/////////////////////////////////////////////////////////////////////////
1:     // https://issues.apache.org/jira/browse/AMQ-4234
1:     // https://issues.apache.org/jira/browse/AMQ-4235
1:     public void testBrokerZeroPrefetchConfigWithConsumerControl() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(brokerZeroQueue);
1:         assertEquals("broker config prefetch in effect", 0, consumer.info.getCurrentPrefetchSize());
1: 
1:         // verify sub view broker
1:         Subscription sub =
1:                 broker.getRegionBroker().getDestinationMap().get(ActiveMQDestination.transform(brokerZeroQueue)).getConsumers().get(0);
1:         assertEquals("broker sub prefetch is correct", 0, sub.getConsumerInfo().getCurrentPrefetchSize());
1: 
1:         // manipulate Prefetch (like failover and stomp)
1:         ConsumerControl consumerControl = new ConsumerControl();
1:         consumerControl.setConsumerId(consumer.info.getConsumerId());
1:         consumerControl.setDestination(ActiveMQDestination.transform(brokerZeroQueue));
1:         consumerControl.setPrefetch(1000); // default for a q
1: 
1:         Object reply = ((ActiveMQConnection) connection).getTransport().request(consumerControl);
1:         assertTrue("good request", !(reply instanceof ExceptionResponse));
1:         assertEquals("broker config prefetch in effect", 0, consumer.info.getCurrentPrefetchSize());
1:         assertEquals("broker sub prefetch is correct", 0, sub.getConsumerInfo().getCurrentPrefetchSize());
1:     }
1: 
commit:95e6d60
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     protected Queue brokerZeroQueue = new ActiveMQQueue("brokerZeroConfig");
/////////////////////////////////////////////////////////////////////////
1: 
1:     // https://issues.apache.org/jira/browse/AMQ-4224
1:     public void testBrokerZeroPrefetchConfig() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(brokerZeroQueue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(brokerZeroQueue);
1: 
1:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService brokerService = super.createBroker();
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry zeroPrefetchPolicy = new PolicyEntry();
1:         zeroPrefetchPolicy.setQueuePrefetch(0);
1:         policyMap.put(ActiveMQDestination.transform(brokerZeroQueue), zeroPrefetchPolicy);
1:         brokerService.setDestinationPolicy(policyMap);
1:         return brokerService;
1:     }
1: 
commit:8de3bd2
/////////////////////////////////////////////////////////////////////////
1:     
1:     // https://issues.apache.org/activemq/browse/AMQ-2567
1:     public void testManyMessageConsumer() throws Exception {
1:         doTestManyMessageConsumer(true);
1:     }
1:     public void testManyMessageConsumerNoTransaction() throws Exception {
1:         doTestManyMessageConsumer(false);
1:     }
1:     
1:     private void doTestManyMessageConsumer(boolean transacted) throws Exception {
1:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         producer.send(session.createTextMessage("Msg2"));
1:         producer.send(session.createTextMessage("Msg3"));
1:         producer.send(session.createTextMessage("Msg4"));
1:         producer.send(session.createTextMessage("Msg5"));
1:         producer.send(session.createTextMessage("Msg6"));
1:         producer.send(session.createTextMessage("Msg7"));
1:         producer.send(session.createTextMessage("Msg8"));
1:         if (transacted) {
1:             session.commit();
1:         }
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         
1:         MessageConsumer consumer2  = session.createConsumer(queue);
1:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg3");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         // this call would return null if prefetchSize > 0
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg4");
1:         if (transacted) {
1:             session.commit();
1:         }
0:         // Now using other consumer 
1:         // this call should return the next message (Msg5) still left on the queue
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg5");
1:         if (transacted) {
1:             session.commit();
1:         }
0:         // Now using other consumer 
1:         // this call should return the next message (Msg5) still left on the queue
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg6");
1:         // read one more message without commit
0:         // Now using other consumer 
1:         // this call should return the next message (Msg5) still left on the queue
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg7");
1:         if (transacted) {
1:             session.commit();
1:         }
0:         // Now using other consumer 
1:         // this call should return the next message (Msg5) still left on the queue
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg8");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
1:     }
1: 
1:     public void testManyMessageConsumerWithSend() throws Exception {
1:         doTestManyMessageConsumerWithSend(true);
1:     }
1: 
1:     public void testManyMessageConsumerWithSendNoTransaction() throws Exception {
1:         doTestManyMessageConsumerWithSend(false);
1:     }
1:     
1:     private void doTestManyMessageConsumerWithSend(boolean transacted) throws Exception {
1:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         producer.send(session.createTextMessage("Msg2"));
1:         producer.send(session.createTextMessage("Msg3"));
1:         producer.send(session.createTextMessage("Msg4"));
1:         producer.send(session.createTextMessage("Msg5"));
1:         producer.send(session.createTextMessage("Msg6"));
1:         producer.send(session.createTextMessage("Msg7"));
1:         producer.send(session.createTextMessage("Msg8"));
1:         if (transacted) {
1:             session.commit();
1:         }
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         
1:         MessageConsumer consumer2  = session.createConsumer(queue);
1:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg3");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         // Now using other consumer take 2
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg4");
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg5");
1: 
1:         // ensure prefetch extension ok by sending another that could get dispatched
1:         producer.send(session.createTextMessage("Msg9"));
1:         if (transacted) {
1:             session.commit();
1:         }
1:         
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg6");
1:         // read one more message without commit
0:         // and using other consumer 
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg7");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         
1:         answer = (TextMessage)consumer2.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg8");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         
1:         answer = (TextMessage)consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg9");
1:         if (transacted) {
1:             session.commit();
1:         }
1:         answer = (TextMessage)consumer.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
1:     }
1:     
1:         bindAddress = "tcp://localhost:0";
1:     
1:     protected void startBroker() throws Exception {
1:         super.startBroker();
1:         bindAddress = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         
1:         session.createConsumer(queue);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ZeroPrefetchConsumerTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received expected exception : " + e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.spring.SpringConsumer;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         if (transacted) {
1:             session.commit();
0:         // noinspection UNUSED_SYMBOL
1:         TextMessage answer = (TextMessage)consumer.receive(5000);
1:         if (transacted) {
1:             session.commit();
1:         answer = (TextMessage)consumer.receive(5000);
1:         if (transacted) {
1:             session.commit();
1:         answer = (TextMessage)consumer.receiveNoWait();
1: 
1: 
1:         if (transacted) {
1:             session.commit();
1:         TextMessage answer = (TextMessage)consumer.receiveNoWait();
1:         answer = (TextMessage)consumer.receiveNoWait();
1:         if (transacted) {
1:             session.commit();
1:         answer = (TextMessage)consumer.receiveNoWait();
1: 
commit:62f798a
/////////////////////////////////////////////////////////////////////////
1:         answer = consumer.receive(1);
1:         doTestIdleConsumer(false);
1:     }
1:     
1:     public void testIdleConsumerTranscated() throws Exception {
1:         doTestIdleConsumer(true);
1:     }
1:     
1:     private void doTestIdleConsumer(boolean transacted) throws Exception {
0:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
0:         if(transacted) {
0:             session.commit();            
1:         }
0:         if(transacted) {
0:             session.commit();            
1:         }
1:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
0:         if(transacted) {
0:             session.commit();            
1:         }
1:     public void testRecvRecvCommit() throws Exception {
1:         doTestRecvRecvCommit(false);
1:     }
1:     
1:     public void testRecvRecvCommitTranscated() throws Exception {
1:         doTestRecvRecvCommit(true);
1:     }
1:     
1:     private void doTestRecvRecvCommit(boolean transacted) throws Exception {
0:         Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         producer.send(session.createTextMessage("Msg2"));
0:         if(transacted) {
0:             session.commit();            
1:         }
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         TextMessage answer = (TextMessage) consumer.receiveNoWait();
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
0:         answer = (TextMessage) consumer.receiveNoWait();
1:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
0:         if(transacted) {
0:             session.commit();            
1:         }
0:         answer = (TextMessage) consumer.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
1:     }
1:     
commit:a7891c3
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // check if method will return at all and will return a null
0:         answer = consumer.receive(1000);
1:         assertNull("Should have not received a message!", answer);
1:         answer = consumer.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
1:     }
1: 
1:     public void testIdleConsumer() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         producer.send(session.createTextMessage("Msg2"));
1: 
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         //noinspection UNUSED_SYMBOL
0:         MessageConsumer idleConsumer = session.createConsumer(queue);
0:         TextMessage answer = (TextMessage) consumer.receive(5000);
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:         // this call would return null if prefetchSize > 0
0:         answer = (TextMessage) consumer.receive(5000);
0:         assertEquals("Should have not received a message!", answer.getText(), "Msg2");
0:         answer = (TextMessage) consumer.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ZeroPrefetchConsumerTest.class);
commit:b0eb973
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testTwoConsumers() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Msg1"));
1:         producer.send(session.createTextMessage("Msg2"));
0: 
1:         // now lets receive it
1:         MessageConsumer consumer1 = session.createConsumer(queue);
1:         MessageConsumer consumer2 = session.createConsumer(queue);
1:         TextMessage answer = (TextMessage)consumer1.receiveNoWait();
1:         assertEquals("Should have received a message!", answer.getText(), "Msg1");
1:         answer = (TextMessage)consumer2.receiveNoWait();
1:         assertEquals("Should have received a message!", answer.getText(), "Msg2");
0: 
1:         answer = (TextMessage)consumer2.receiveNoWait();
1:         assertNull("Should have not received a message!", answer);
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
commit:fb5a373
/////////////////////////////////////////////////////////////////////////
1: public class ZeroPrefetchConsumerTest extends EmbeddedBrokerTestSupport {
/////////////////////////////////////////////////////////////////////////
0:         bindAddress = "tcp://localhost:61616";
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQQueue(getDestinationString() + "?consumer.prefetchSize=0");
commit:6e3a634
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
0: 
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.spring.SpringConsumer;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
0: public class ZeroPrefetchConsumerTest extends TestSupport {
0: 
0:     private static final Log log = LogFactory.getLog(ZeroPrefetchConsumerTest.class);
0: 
1:     protected Connection connection;
1:     protected Queue queue;
0: 
1:     public void testCannotUseMessageListener() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
0: 
1:         MessageListener listener = new SpringConsumer();
1:         try {
1:             consumer.setMessageListener(listener);
1:             fail("Should have thrown JMSException as we cannot use MessageListener with zero prefetch");
1:         }
0:         catch (JMSException e) {
0:             log.info("Received expected exception : " + e);
1:         }
1:     }
0: 
1:     public void testPullConsumerWorks() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello World!"));
0:         
1:         // now lets receive it
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message answer = consumer.receive(5000);
1:         assertNotNull("Should have received a message!", answer);
1:     }
0: 
1:     protected void setUp() throws Exception {
0:         topic = false;
1:         super.setUp();
0: 
1:         connection = createConnection();
1:         connection.start();
1:         queue = createQueue();
1:     }
0: 
1:     protected void tearDown() throws Exception {
0:         connection.close();
1:         super.tearDown();
1:     }
0: 
1:     protected Queue createQueue() {
0:         return new ActiveMQQueue(getClass().getName() + "." + getName() + "?consumer.prefetchSize=0");
1:     }
0: 
1: }
============================================================================