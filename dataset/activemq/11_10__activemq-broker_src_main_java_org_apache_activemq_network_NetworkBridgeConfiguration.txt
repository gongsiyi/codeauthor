1:ae73f86: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:ae73f86:  */
1:ae73f86: package org.apache.activemq.network;
1:41c9366: 
1:374cab9: import java.util.List;
1:374cab9: import java.util.concurrent.CopyOnWriteArrayList;
1:374cab9: 
1:332c35c: import org.apache.activemq.advisory.AdvisorySupport;
1:54c56a0: import org.apache.activemq.broker.SslContext;
1:d185430: import org.apache.activemq.command.ActiveMQDestination;
1:5b796cd: import org.apache.activemq.command.ConsumerInfo;
1:25d396b: 
1:ae73f86: /**
1:ae73f86:  * Configuration for a NetworkBridge
1:ae73f86:  */
1:230a86c: public class NetworkBridgeConfiguration {
1:25d396b: 
1:230a86c:     private boolean conduitSubscriptions = true;
1:96ce14b:     /**
1:96ce14b:      * Whether or not network subscriptions on queues are eligible to be conduit
1:96ce14b:      * Default is false
1:96ce14b:      */
1:96ce14b:     private boolean conduitNetworkQueueSubscriptions;
1:cc81680:     private boolean useVirtualDestSubs;
1:230a86c:     private boolean dynamicOnly;
1:3953b9a:     private boolean syncDurableSubs;
1:230a86c:     private boolean dispatchAsync = true;
1:230a86c:     private boolean decreaseNetworkConsumerPriority;
1:5b796cd:     private int consumerPriorityBase = ConsumerInfo.NETWORK_CONSUMER_PRIORITY;
1:230a86c:     private boolean duplex;
1:230a86c:     private boolean bridgeTempDestinations = true;
1:230a86c:     private int prefetchSize = 1000;
1:297eadf:     /**
1:297eadf:      * By default set to 0, which is disabled and prefetchSize value will be
1:297eadf:      * used instead.
1:297eadf:      */
1:297eadf:     private int advisoryPrefetchSize = 0;
1:297eadf:     private int advisoryAckPercentage = 75;
1:230a86c:     private int networkTTL = 1;
1:a95c6db:     private int consumerTTL = networkTTL;
1:a95c6db:     private int messageTTL = networkTTL;
1:a95c6db: 
1:230a86c:     private String brokerName = "localhost";
1:f392884:     private String brokerURL = "";
1:ae73f86:     private String userName;
1:ae73f86:     private String password;
1:332c35c:     private String destinationFilter = null;
1:27d0ff4:     private String name = "NC";
1:3ca439c:     private String clientIdToken = "_";
1:41c9366: 
1:25d396b:     protected List<ActiveMQDestination> excludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:25d396b:     protected List<ActiveMQDestination> dynamicallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:25d396b:     protected List<ActiveMQDestination> staticallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:332c35c: 
1:5511217:     private boolean suppressDuplicateQueueSubscriptions = false;
1:ecf068e:     private boolean suppressDuplicateTopicSubscriptions = true;
1:d185430: 
1:f383ca1:     private boolean alwaysSyncSend = true;
1:4c8ab44:     private boolean staticBridge = false;
1:41c9366:     private boolean useCompression = false;
1:8012f28:     private boolean advisoryForFailedForward = false;
1:6c5732b:     private boolean useBrokerNamesAsIdSeed = true;
1:374cab9:     private boolean gcDestinationViews = true;
1:374cab9:     private long gcSweepTime = 60 * 1000;
1:2bbfbcf:     private boolean checkDuplicateMessagesOnDuplex = false;
1:d185430: 
1:ae73f86:     /**
1:a8a032a:      * Bridge factory implementation - by default backed by static factory, which is default implementation and will rely change.
1:a8a032a:      */
1:a8a032a:     private BridgeFactory bridgeFactory = NetworkBridgeFactory.INSTANCE;
1:54c56a0:     private SslContext sslContext;
1:a8a032a: 
1:a8a032a:     /**
1:ae73f86:      * @return the conduitSubscriptions
1:ae73f86:      */
1:230a86c:     public boolean isConduitSubscriptions() {
1:ae73f86:         return this.conduitSubscriptions;
8:ae73f86:     }
1:d185430: 
1:2ef8151:     /**
1:ae73f86:      * @param conduitSubscriptions the conduitSubscriptions to set
1:ae73f86:      */
1:230a86c:     public void setConduitSubscriptions(boolean conduitSubscriptions) {
1:230a86c:         this.conduitSubscriptions = conduitSubscriptions;
1:d185430:     }
1:d185430: 
1:96ce14b:     public boolean isConduitNetworkQueueSubscriptions() {
1:96ce14b:         return conduitNetworkQueueSubscriptions;
1:96ce14b:     }
1:96ce14b: 
1:96ce14b:     public void setConduitNetworkQueueSubscriptions(boolean conduitNetworkQueueSubscriptions) {
1:96ce14b:         this.conduitNetworkQueueSubscriptions = conduitNetworkQueueSubscriptions;
1:96ce14b:     }
1:96ce14b: 
1:ae73f86:     /**
1:ae73f86:      * @return the dynamicOnly
1:ae73f86:      */
1:230a86c:     public boolean isDynamicOnly() {
1:ae73f86:         return this.dynamicOnly;
1:d185430:     }
1:d185430: 
1:ae73f86:     /**
1:ae73f86:      * @param dynamicOnly the dynamicOnly to set
1:ae73f86:      */
1:230a86c:     public void setDynamicOnly(boolean dynamicOnly) {
1:230a86c:         this.dynamicOnly = dynamicOnly;
1:d185430:     }
1:d185430: 
1:3953b9a:     public boolean isSyncDurableSubs() {
1:3953b9a:         return syncDurableSubs;
1:3953b9a:     }
1:3953b9a: 
1:3953b9a:     public void setSyncDurableSubs(boolean syncDurableSubs) {
1:3953b9a:         this.syncDurableSubs = syncDurableSubs;
1:3953b9a:     }
1:3953b9a: 
1:ae73f86:     /**
1:ae73f86:      * @return the bridgeTempDestinations
1:ae73f86:      */
1:230a86c:     public boolean isBridgeTempDestinations() {
1:ae73f86:         return this.bridgeTempDestinations;
1:f392884:     }
1:d185430: 
1:ae73f86:     /**
1:ae73f86:      * @param bridgeTempDestinations the bridgeTempDestinations to set
1:ae73f86:      */
1:230a86c:     public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
1:230a86c:         this.bridgeTempDestinations = bridgeTempDestinations;
1:2ef8151:     }
1:d185430: 
1:ae73f86:     /**
1:ae73f86:      * @return the decreaseNetworkConsumerPriority
1:ae73f86:      */
1:230a86c:     public boolean isDecreaseNetworkConsumerPriority() {
1:ae73f86:         return this.decreaseNetworkConsumerPriority;
1:2ef8151:     }
1:d185430: 
1:ae73f86:     /**
1:230a86c:      * @param decreaseNetworkConsumerPriority the
1:230a86c:      *                decreaseNetworkConsumerPriority to set
1:ae73f86:      */
1:230a86c:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
1:230a86c:         this.decreaseNetworkConsumerPriority = decreaseNetworkConsumerPriority;
1:ae73f86:     }
1:f392884: 
1:ae73f86:     /**
1:ae73f86:      * @return the dispatchAsync
1:ae73f86:      */
1:230a86c:     public boolean isDispatchAsync() {
1:ae73f86:         return this.dispatchAsync;
1:ae73f86:     }
1:f392884: 
1:ae73f86:     /**
1:ae73f86:      * @param dispatchAsync the dispatchAsync to set
1:ae73f86:      */
1:230a86c:     public void setDispatchAsync(boolean dispatchAsync) {
1:230a86c:         this.dispatchAsync = dispatchAsync;
1:ae73f86:     }
1:2ef8151: 
1:ae73f86:     /**
1:ae73f86:      * @return the duplex
1:ae73f86:      */
1:230a86c:     public boolean isDuplex() {
1:ae73f86:         return this.duplex;
1:ae73f86:     }
34:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param duplex the duplex to set
1:ae73f86:      */
1:230a86c:     public void setDuplex(boolean duplex) {
1:230a86c:         this.duplex = duplex;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:54114cc:      * @return the brokerName
1:ae73f86:      */
1:230a86c:     public String getBrokerName() {
1:54114cc:         return this.brokerName;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:54114cc:      * @param brokerName the localBrokerName to set
1:ae73f86:      */
1:230a86c:     public void setBrokerName(String brokerName) {
1:230a86c:         this.brokerName = brokerName;
1:ae73f86:     }
1:ae73f86: 
1:3ca439c:     public String getClientIdToken() {
1:3ca439c:         return clientIdToken;
1:3ca439c:     }
1:3ca439c: 
1:3ca439c:     public void setClientIdToken(String clientIdToken) {
1:3ca439c:         this.clientIdToken = clientIdToken;
1:3ca439c:     }
1:3ca439c: 
1:ae73f86:     /**
1:ae73f86:      * @return the networkTTL
1:ae73f86:      */
1:230a86c:     public int getNetworkTTL() {
1:ae73f86:         return this.networkTTL;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param networkTTL the networkTTL to set
1:ae73f86:      */
1:230a86c:     public void setNetworkTTL(int networkTTL) {
1:230a86c:         this.networkTTL = networkTTL;
1:a95c6db:         setConsumerTTL(networkTTL);
1:a95c6db:         setMessageTTL(networkTTL);
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @return the password
1:ae73f86:      */
1:230a86c:     public String getPassword() {
1:ae73f86:         return this.password;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param password the password to set
1:ae73f86:      */
1:230a86c:     public void setPassword(String password) {
1:230a86c:         this.password = password;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @return the prefetchSize
1:ae73f86:      */
1:230a86c:     public int getPrefetchSize() {
1:ae73f86:         return this.prefetchSize;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param prefetchSize the prefetchSize to set
1:3c8df79:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:ae73f86:      */
1:230a86c:     public void setPrefetchSize(int prefetchSize) {
1:297eadf:         if (prefetchSize < 1) {
1:297eadf:             throw new IllegalArgumentException("prefetchSize must be > 0"
1:297eadf:                     + " because network consumers do not poll for messages.");
1:297eadf:         }
1:230a86c:         this.prefetchSize = prefetchSize;
1:ae73f86:     }
1:ae73f86: 
1:297eadf:     public int getAdvisoryPrefetchSize() {
1:297eadf:         return advisoryPrefetchSize;
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Prefetch size for advisory consumers.  Just like prefetchSize, if set, this
1:297eadf:      * value must be greater than 0 because network consumers do not poll for messages.
1:297eadf:      * Setting this to 0 or less means this value is disabled and prefetchSize will be
1:297eadf:      * used instead.
1:297eadf:      *
1:297eadf:      * @param advisoryPrefetchSize
1:297eadf:      */
1:297eadf:     public void setAdvisoryPrefetchSize(int advisoryPrefetchSize) {
1:297eadf:         this.advisoryPrefetchSize = advisoryPrefetchSize;
1:297eadf:     }
1:297eadf: 
1:297eadf:     public int getAdvisoryAckPercentage() {
1:297eadf:         return advisoryAckPercentage;
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * @param advisoryAckPercentage the percentage of the advisory prefetch size
1:297eadf:      * value that can be dispatched before an ack will be sent, defaults to 75
1:297eadf:      * which means that when the number of received messages is greater than 75% of
1:297eadf:      * the prefetch size an ack will be sent back
1:297eadf:      */
1:297eadf:     public void setAdvisoryAckPercentage(int advisoryAckPercentage) {
1:297eadf:         this.advisoryAckPercentage = advisoryAckPercentage;
1:297eadf:     }
1:297eadf: 
1:ae73f86:     /**
1:ae73f86:      * @return the userName
1:ae73f86:      */
1:230a86c:     public String getUserName() {
1:ae73f86:         return this.userName;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param userName the userName to set
1:ae73f86:      */
1:230a86c:     public void setUserName(String userName) {
1:230a86c:         this.userName = userName;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @return the destinationFilter
1:ae73f86:      */
1:230a86c:     public String getDestinationFilter() {
1:332c35c:         if (this.destinationFilter == null) {
1:332c35c:             if (dynamicallyIncludedDestinations != null && !dynamicallyIncludedDestinations.isEmpty()) {
1:332c35c:                 StringBuffer filter = new StringBuffer();
1:332c35c:                 String delimiter = "";
1:332c35c:                 for (ActiveMQDestination destination : dynamicallyIncludedDestinations) {
1:332c35c:                     if (!destination.isTemporary()) {
1:332c35c:                         filter.append(delimiter);
1:332c35c:                         filter.append(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX);
1:332c35c:                         filter.append(destination.getDestinationTypeAsString());
1:332c35c:                         filter.append(".");
1:332c35c:                         filter.append(destination.getPhysicalName());
1:332c35c:                         delimiter = ",";
1:cc81680: 
1:cc81680:                         if (useVirtualDestSubs) {
1:cc81680:                             filter.append(delimiter);
1:cc81680:                             filter.append(AdvisorySupport.VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:cc81680:                             filter.append(destination.getDestinationTypeAsString());
1:cc81680:                             filter.append(".");
1:cc81680:                             filter.append(destination.getPhysicalName());
1:cc81680:                         }
1:332c35c:                     }
1:332c35c:                 }
1:332c35c:                 return filter.toString();
2:332c35c:             }   else {
1:cc81680:                 StringBuffer filter = new StringBuffer();
1:cc81680:                 filter.append(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX);
1:cc81680:                 filter.append(">");
1:cc81680:                 if (useVirtualDestSubs) {
1:cc81680:                     filter.append(",");
1:cc81680:                     filter.append(AdvisorySupport.VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:cc81680:                     filter.append(">");
1:cc81680:                 }
1:cc81680:                 return filter.toString();
1:332c35c:             }
1:a80acbb:         } else {
1:332c35c:             // prepend consumer advisory prefix
1:332c35c:             // to keep backward compatibility
1:332c35c:             if (!this.destinationFilter.startsWith(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX)) {
1:332c35c:                  return AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + this.destinationFilter;
1:332c35c:             } else {
1:332c35c:                 return this.destinationFilter;
1:332c35c:             }
1:332c35c:         }
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param destinationFilter the destinationFilter to set
1:ae73f86:      */
1:230a86c:     public void setDestinationFilter(String destinationFilter) {
1:230a86c:         this.destinationFilter = destinationFilter;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:2ef8151:      * @return the name
1:2ef8151:      */
1:230a86c:     public String getName() {
1:2ef8151:         return this.name;
1:520a2de:     }
1:2ef8151: 
1:2ef8151:     /**
1:2ef8151:      * @param name the name to set
1:2ef8151:      */
1:230a86c:     public void setName(String name) {
1:230a86c:         this.name = name;
1:d185430:     }
1:5511217: 
1:41c9366:     public List<ActiveMQDestination> getExcludedDestinations() {
1:41c9366:         return excludedDestinations;
1:41c9366:     }
1:d185430: 
1:41c9366:     public void setExcludedDestinations(
1:41c9366:             List<ActiveMQDestination> excludedDestinations) {
1:41c9366:         this.excludedDestinations = excludedDestinations;
1:41c9366:     }
1:d185430: 
1:41c9366:     public List<ActiveMQDestination> getDynamicallyIncludedDestinations() {
1:41c9366:         return dynamicallyIncludedDestinations;
1:41c9366:     }
1:d185430: 
1:41c9366:     public void setDynamicallyIncludedDestinations(
1:41c9366:             List<ActiveMQDestination> dynamicallyIncludedDestinations) {
1:41c9366:         this.dynamicallyIncludedDestinations = dynamicallyIncludedDestinations;
1:41c9366:     }
1:d185430: 
1:41c9366:     public List<ActiveMQDestination> getStaticallyIncludedDestinations() {
1:41c9366:         return staticallyIncludedDestinations;
1:41c9366:     }
1:41c9366: 
1:41c9366:     public void setStaticallyIncludedDestinations(
1:41c9366:             List<ActiveMQDestination> staticallyIncludedDestinations) {
1:41c9366:         this.staticallyIncludedDestinations = staticallyIncludedDestinations;
1:41c9366:     }
1:41c9366: 
1:5511217:     public boolean isSuppressDuplicateQueueSubscriptions() {
1:5511217:         return suppressDuplicateQueueSubscriptions;
1:5511217:     }
1:5511217: 
1:5511217:     /**
1:5511217:      *
1:5511217:      * @param val if true, duplicate network queue subscriptions (in a cyclic network) will be suppressed
1:5511217:      */
1:5511217:     public void setSuppressDuplicateQueueSubscriptions(boolean val) {
1:5511217:         suppressDuplicateQueueSubscriptions = val;
1:5511217:     }
1:41c9366: 
1:ecf068e:     public boolean isSuppressDuplicateTopicSubscriptions() {
1:ecf068e:         return suppressDuplicateTopicSubscriptions;
1:ecf068e:     }
1:ecf068e: 
1:ecf068e:     /**
1:ecf068e:      *
1:ecf068e:      * @param val if true, duplicate network topic subscriptions (in a cyclic network) will be suppressed
1:ecf068e:      */
1:ecf068e:     public void setSuppressDuplicateTopicSubscriptions(boolean val) {
1:ecf068e:         suppressDuplicateTopicSubscriptions  = val;
1:ecf068e:     }
1:ecf068e: 
1:f392884:     /**
1:f392884:      * @return the brokerURL
1:f392884:      */
1:f392884:     public String getBrokerURL() {
1:f392884:         return this.brokerURL;
1:d185430:     }
1:41c9366: 
1:f392884:     /**
1:f392884:      * @param brokerURL the brokerURL to set
1:f392884:      */
1:f392884:     public void setBrokerURL(String brokerURL) {
1:f392884:         this.brokerURL = brokerURL;
1:d185430:     }
1:6d077dc: 
1:6d077dc:     public boolean isAlwaysSyncSend() {
1:6d077dc:         return alwaysSyncSend;
1:6d077dc:     }
1:6d077dc: 
1:6d077dc:     /**
1:6d077dc:      * @param alwaysSyncSend  when true, both persistent and non persistent
1:6d077dc:      * messages will be sent using a request. When false, non persistent messages
1:6d077dc:      * are acked once the oneway send succeeds, which can potentially lead to
1:6d077dc:      * message loss.
1:6d077dc:      * Using an async request, allows multiple outstanding requests. This ensures
1:6d077dc:      * that a bridge need not block all sending when the remote broker needs to
1:6d077dc:      * flow control a single destination.
1:6d077dc:      */
1:6d077dc:     public void setAlwaysSyncSend(boolean alwaysSyncSend) {
1:6d077dc:         this.alwaysSyncSend = alwaysSyncSend;
1:6d077dc:     }
1:5b796cd: 
1:5b796cd:     public int getConsumerPriorityBase() {
1:5b796cd:         return consumerPriorityBase;
1:5b796cd:     }
1:5b796cd: 
1:5b796cd:     /**
1:5b796cd:      * @param consumerPriorityBase , default -5. Sets the starting priority
1:5b796cd:      * for consumers. This base value will be decremented by the length of the
1:5b796cd:      * broker path when decreaseNetworkConsumerPriority is set.
1:5b796cd:      */
1:5b796cd:     public void setConsumerPriorityBase(int consumerPriorityBase) {
1:5b796cd:         this.consumerPriorityBase = consumerPriorityBase;
1:5b796cd:     }
1:4c8ab44: 
1:4c8ab44:     public boolean isStaticBridge() {
1:4c8ab44:         return staticBridge;
1:4c8ab44:     }
1:4c8ab44: 
1:4c8ab44:     public void setStaticBridge(boolean staticBridge) {
1:4c8ab44:         this.staticBridge = staticBridge;
1:4c8ab44:     }
1:41c9366: 
1:41c9366:     /**
1:41c9366:      * @param useCompression
1:41c9366:      *      True if the Network should enforce compression for messages sent.
1:41c9366:      */
1:41c9366:     public void setUseCompression(boolean useCompression) {
1:41c9366:         this.useCompression = useCompression;
1:41c9366:     }
1:41c9366: 
1:41c9366:     /**
1:41c9366:      * @return the useCompression setting, true if message will be compressed on send.
1:41c9366:      */
1:41c9366:     public boolean isUseCompression() {
1:41c9366:         return useCompression;
1:41c9366:     }
1:8012f28: 
1:8012f28:     public boolean isAdvisoryForFailedForward() {
1:8012f28:         return advisoryForFailedForward;
1:8012f28:     }
1:8012f28: 
1:8012f28:     public void setAdvisoryForFailedForward(boolean advisoryForFailedForward) {
1:8012f28:         this.advisoryForFailedForward = advisoryForFailedForward;
1:8012f28:     }
1:a95c6db: 
1:a95c6db:     public void setConsumerTTL(int consumerTTL) {
1:a95c6db:         this.consumerTTL = consumerTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public int getConsumerTTL() {
1:a95c6db:         return  consumerTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void setMessageTTL(int messageTTL) {
1:a95c6db:         this.messageTTL = messageTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public int getMessageTTL() {
1:a95c6db:         return messageTTL;
1:a95c6db:     }
1:6c5732b: 
1:6c5732b:     public boolean isUseBrokerNamesAsIdSeed() {
1:6c5732b:         return useBrokerNamesAsIdSeed;
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     public void setUseBrokerNameAsIdSees(boolean val) {
1:6c5732b:         useBrokerNamesAsIdSeed = val;
1:6c5732b:     }
1:374cab9: 
1:374cab9:     public boolean isGcDestinationViews() {
1:374cab9:         return gcDestinationViews;
1:374cab9:     }
1:374cab9: 
1:374cab9:     public void setGcDestinationViews(boolean gcDestinationViews) {
1:374cab9:         this.gcDestinationViews = gcDestinationViews;
1:374cab9:     }
1:374cab9: 
1:374cab9:     public long getGcSweepTime() {
1:374cab9:         return gcSweepTime;
1:374cab9:     }
1:374cab9: 
1:374cab9:     public void setGcSweepTime(long gcSweepTime) {
1:374cab9:         this.gcSweepTime = gcSweepTime;
1:374cab9:     }
1:374cab9: 
1:2bbfbcf:     public boolean isCheckDuplicateMessagesOnDuplex() {
1:2bbfbcf:         return checkDuplicateMessagesOnDuplex;
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     public void setCheckDuplicateMessagesOnDuplex(boolean checkDuplicateMessagesOnDuplex) {
1:2bbfbcf:         this.checkDuplicateMessagesOnDuplex = checkDuplicateMessagesOnDuplex;
1:2bbfbcf:     }
1:2bbfbcf: 
1:5772e7b:     public boolean isUseVirtualDestSubs() {
1:5772e7b:         return useVirtualDestSubs;
1:5772e7b:     }
1:5772e7b: 
1:a8a032a:     public BridgeFactory getBridgeFactory() {
1:a8a032a:         return bridgeFactory;
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     public void setBridgeFactory(BridgeFactory bridgeFactory) {
1:a8a032a:         this.bridgeFactory = bridgeFactory;
1:a8a032a:     }
1:a8a032a: 
1:5772e7b:     /**
1:5772e7b:      * This was a typo, so this is deprecated as of 5.13.1
1:5772e7b:      */
1:5772e7b:     @Deprecated
1:cc81680:     public boolean isUseVirtualDestSus() {
1:cc81680:         return useVirtualDestSubs;
1:cc81680:     }
1:cc81680: 
1:cc81680:     public void setUseVirtualDestSubs(
1:cc81680:             boolean useVirtualDestSubs) {
1:cc81680:         this.useVirtualDestSubs = useVirtualDestSubs;
1:cc81680:     }
1:cc81680: 
1:54c56a0:     public void setSslContext(SslContext sslContext) {
1:54c56a0:         this.sslContext = sslContext;
1:54c56a0:     }
1:54c56a0: 
1:54c56a0:     public SslContext getSslContext() {
1:54c56a0:         return sslContext;
1:54c56a0:     }
1:f392884: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:54c56a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
1:     private SslContext sslContext;
/////////////////////////////////////////////////////////////////////////
1:     public void setSslContext(SslContext sslContext) {
1:         this.sslContext = sslContext;
1:     }
1: 
1:     public SslContext getSslContext() {
1:         return sslContext;
1:     }
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
1:     private boolean useBrokerNamesAsIdSeed = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isUseBrokerNamesAsIdSeed() {
1:         return useBrokerNamesAsIdSeed;
1:     }
1: 
1:     public void setUseBrokerNameAsIdSees(boolean val) {
1:         useBrokerNamesAsIdSeed = val;
1:     }
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1:      * Bridge factory implementation - by default backed by static factory, which is default implementation and will rely change.
1:      */
1:     private BridgeFactory bridgeFactory = NetworkBridgeFactory.INSTANCE;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     public BridgeFactory getBridgeFactory() {
1:         return bridgeFactory;
1:     }
1: 
1:     public void setBridgeFactory(BridgeFactory bridgeFactory) {
1:         this.bridgeFactory = bridgeFactory;
1:     }
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:3ca439c
/////////////////////////////////////////////////////////////////////////
1:     private String clientIdToken = "_";
/////////////////////////////////////////////////////////////////////////
1:     public String getClientIdToken() {
1:         return clientIdToken;
1:     }
1: 
1:     public void setClientIdToken(String clientIdToken) {
1:         this.clientIdToken = clientIdToken;
1:     }
1: 
commit:96ce14b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Whether or not network subscriptions on queues are eligible to be conduit
1:      * Default is false
1:      */
1:     private boolean conduitNetworkQueueSubscriptions;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isConduitNetworkQueueSubscriptions() {
1:         return conduitNetworkQueueSubscriptions;
1:     }
1: 
1:     public void setConduitNetworkQueueSubscriptions(boolean conduitNetworkQueueSubscriptions) {
1:         this.conduitNetworkQueueSubscriptions = conduitNetworkQueueSubscriptions;
1:     }
1: 
commit:3953b9a
/////////////////////////////////////////////////////////////////////////
1:     private boolean syncDurableSubs;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSyncDurableSubs() {
1:         return syncDurableSubs;
1:     }
1: 
1:     public void setSyncDurableSubs(boolean syncDurableSubs) {
1:         this.syncDurableSubs = syncDurableSubs;
1:     }
1: 
commit:297eadf
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * By default set to 0, which is disabled and prefetchSize value will be
1:      * used instead.
1:      */
1:     private int advisoryPrefetchSize = 0;
1:     private int advisoryAckPercentage = 75;
/////////////////////////////////////////////////////////////////////////
1:         if (prefetchSize < 1) {
1:             throw new IllegalArgumentException("prefetchSize must be > 0"
1:                     + " because network consumers do not poll for messages.");
1:         }
1:     public int getAdvisoryPrefetchSize() {
1:         return advisoryPrefetchSize;
1:     }
1: 
1:     /**
1:      * Prefetch size for advisory consumers.  Just like prefetchSize, if set, this
1:      * value must be greater than 0 because network consumers do not poll for messages.
1:      * Setting this to 0 or less means this value is disabled and prefetchSize will be
1:      * used instead.
1:      *
1:      * @param advisoryPrefetchSize
1:      */
1:     public void setAdvisoryPrefetchSize(int advisoryPrefetchSize) {
1:         this.advisoryPrefetchSize = advisoryPrefetchSize;
1:     }
1: 
1:     public int getAdvisoryAckPercentage() {
1:         return advisoryAckPercentage;
1:     }
1: 
1:     /**
1:      * @param advisoryAckPercentage the percentage of the advisory prefetch size
1:      * value that can be dispatched before an ack will be sent, defaults to 75
1:      * which means that when the number of received messages is greater than 75% of
1:      * the prefetch size an ack will be sent back
1:      */
1:     public void setAdvisoryAckPercentage(int advisoryAckPercentage) {
1:         this.advisoryAckPercentage = advisoryAckPercentage;
1:     }
1: 
commit:5772e7b
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseVirtualDestSubs() {
1:         return useVirtualDestSubs;
1:     }
1: 
1:     /**
1:      * This was a typo, so this is deprecated as of 5.13.1
1:      */
1:     @Deprecated
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1:     private boolean useVirtualDestSubs;
/////////////////////////////////////////////////////////////////////////
1: 
1:                         if (useVirtualDestSubs) {
1:                             filter.append(delimiter);
1:                             filter.append(AdvisorySupport.VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:                             filter.append(destination.getDestinationTypeAsString());
1:                             filter.append(".");
1:                             filter.append(destination.getPhysicalName());
1:                         }
1:                 StringBuffer filter = new StringBuffer();
1:                 filter.append(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX);
1:                 filter.append(">");
1:                 if (useVirtualDestSubs) {
1:                     filter.append(",");
1:                     filter.append(AdvisorySupport.VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:                     filter.append(">");
1:                 }
1:                 return filter.toString();
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseVirtualDestSus() {
1:         return useVirtualDestSubs;
1:     }
1: 
1:     public void setUseVirtualDestSubs(
1:             boolean useVirtualDestSubs) {
1:         this.useVirtualDestSubs = useVirtualDestSubs;
1:     }
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:2bbfbcf
/////////////////////////////////////////////////////////////////////////
1:     private boolean checkDuplicateMessagesOnDuplex = false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCheckDuplicateMessagesOnDuplex() {
1:         return checkDuplicateMessagesOnDuplex;
1:     }
1: 
1:     public void setCheckDuplicateMessagesOnDuplex(boolean checkDuplicateMessagesOnDuplex) {
1:         this.checkDuplicateMessagesOnDuplex = checkDuplicateMessagesOnDuplex;
1:     }
1: 
commit:374cab9
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean gcDestinationViews = true;
1:     private long gcSweepTime = 60 * 1000;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isGcDestinationViews() {
1:         return gcDestinationViews;
1:     }
1: 
1:     public void setGcDestinationViews(boolean gcDestinationViews) {
1:         this.gcDestinationViews = gcDestinationViews;
1:     }
1: 
1:     public long getGcSweepTime() {
1:         return gcSweepTime;
1:     }
1: 
1:     public void setGcSweepTime(long gcSweepTime) {
1:         this.gcSweepTime = gcSweepTime;
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:     private int consumerTTL = networkTTL;
1:     private int messageTTL = networkTTL;
1: 
/////////////////////////////////////////////////////////////////////////
1:         setConsumerTTL(networkTTL);
1:         setMessageTTL(networkTTL);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setConsumerTTL(int consumerTTL) {
1:         this.consumerTTL = consumerTTL;
1:     }
1: 
1:     public int getConsumerTTL() {
1:         return  consumerTTL;
1:     }
1: 
1:     public void setMessageTTL(int messageTTL) {
1:         this.messageTTL = messageTTL;
1:     }
1: 
1:     public int getMessageTTL() {
1:         return messageTTL;
1:     }
commit:f383ca1
/////////////////////////////////////////////////////////////////////////
1:     private boolean alwaysSyncSend = true;
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:     private boolean advisoryForFailedForward = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isAdvisoryForFailedForward() {
1:         return advisoryForFailedForward;
1:     }
1: 
1:     public void setAdvisoryForFailedForward(boolean advisoryForFailedForward) {
1:         this.advisoryForFailedForward = advisoryForFailedForward;
1:     }
commit:5b796cd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
1:     private int consumerPriorityBase = ConsumerInfo.NETWORK_CONSUMER_PRIORITY;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getConsumerPriorityBase() {
1:         return consumerPriorityBase;
1:     }
1: 
1:     /**
1:      * @param consumerPriorityBase , default -5. Sets the starting priority
1:      * for consumers. This base value will be decremented by the length of the
1:      * broker path when decreaseNetworkConsumerPriority is set.
1:      */
1:     public void setConsumerPriorityBase(int consumerPriorityBase) {
1:         this.consumerPriorityBase = consumerPriorityBase;
1:     }
commit:6d077dc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private boolean alwaysSyncSend = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isAlwaysSyncSend() {
1:         return alwaysSyncSend;
1:     }
1: 
1:     /**
1:      * @param alwaysSyncSend  when true, both persistent and non persistent
1:      * messages will be sent using a request. When false, non persistent messages
1:      * are acked once the oneway send succeeds, which can potentially lead to
1:      * message loss.
1:      * Using an async request, allows multiple outstanding requests. This ensures
1:      * that a bridge need not block all sending when the remote broker needs to
1:      * flow control a single destination.
1:      */
1:     public void setAlwaysSyncSend(boolean alwaysSyncSend) {
1:         this.alwaysSyncSend = alwaysSyncSend;
1:     }
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
1:     private String name = "NC";
/////////////////////////////////////////////////////////////////////////
commit:3c8df79
/////////////////////////////////////////////////////////////////////////
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
commit:ecf068e
/////////////////////////////////////////////////////////////////////////
1:     private boolean suppressDuplicateTopicSubscriptions = true;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSuppressDuplicateTopicSubscriptions() {
1:         return suppressDuplicateTopicSubscriptions;
1:     }
1: 
1:     /**
1:      * 
1:      * @param val if true, duplicate network topic subscriptions (in a cyclic network) will be suppressed
1:      */
1:     public void setSuppressDuplicateTopicSubscriptions(boolean val) {
1:         suppressDuplicateTopicSubscriptions  = val;
1:     }
1:     
commit:5511217
/////////////////////////////////////////////////////////////////////////
1:     private boolean suppressDuplicateQueueSubscriptions = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isSuppressDuplicateQueueSubscriptions() {
1:         return suppressDuplicateQueueSubscriptions;
1:     }
1:     
1:     /**
1:      * 
1:      * @param val if true, duplicate network queue subscriptions (in a cyclic network) will be suppressed
1:      */
1:     public void setSuppressDuplicateQueueSubscriptions(boolean val) {
1:         suppressDuplicateQueueSubscriptions = val;
1:     }
author:Christian Posta
-------------------------------------------------------------------------------
commit:25d396b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.util.List;
0: import java.util.concurrent.CopyOnWriteArrayList;
0:     private static final Logger LOG = LoggerFactory.getLogger(NetworkBridgeConfiguration.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected List<ActiveMQDestination> excludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:     protected List<ActiveMQDestination> dynamicallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:     protected List<ActiveMQDestination> staticallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class NetworkBridgeConfiguration {
1:     private boolean conduitSubscriptions = true;
1:     private boolean dynamicOnly;
1:     private boolean dispatchAsync = true;
1:     private boolean decreaseNetworkConsumerPriority;
1:     private boolean duplex;
1:     private boolean bridgeTempDestinations = true;
1:     private int prefetchSize = 1000;
1:     private int networkTTL = 1;
1:     private String brokerName = "localhost";
/////////////////////////////////////////////////////////////////////////
1:     public boolean isConduitSubscriptions() {
1:     public void setConduitSubscriptions(boolean conduitSubscriptions) {
1:         this.conduitSubscriptions = conduitSubscriptions;
1:     public boolean isDynamicOnly() {
1:     public void setDynamicOnly(boolean dynamicOnly) {
1:         this.dynamicOnly = dynamicOnly;
1:     public boolean isBridgeTempDestinations() {
1:     public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
1:         this.bridgeTempDestinations = bridgeTempDestinations;
1:     public boolean isDecreaseNetworkConsumerPriority() {
1:      * @param decreaseNetworkConsumerPriority the
1:      *                decreaseNetworkConsumerPriority to set
1:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
1:         this.decreaseNetworkConsumerPriority = decreaseNetworkConsumerPriority;
1:     public boolean isDispatchAsync() {
1:     public void setDispatchAsync(boolean dispatchAsync) {
1:         this.dispatchAsync = dispatchAsync;
1:     public boolean isDuplex() {
1:     public void setDuplex(boolean duplex) {
1:         this.duplex = duplex;
1:     public String getBrokerName() {
1:     public void setBrokerName(String brokerName) {
1:         this.brokerName = brokerName;
1:     public int getNetworkTTL() {
1:     public void setNetworkTTL(int networkTTL) {
1:         this.networkTTL = networkTTL;
1:     public String getPassword() {
1:     public void setPassword(String password) {
1:         this.password = password;
1:     public int getPrefetchSize() {
1:     public void setPrefetchSize(int prefetchSize) {
1:         this.prefetchSize = prefetchSize;
1:     public String getUserName() {
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     public String getDestinationFilter() {
1:     public void setDestinationFilter(String destinationFilter) {
1:         this.destinationFilter = destinationFilter;
1:     public String getName() {
1:     public void setName(String name) {
1:         this.name = name;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: 
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean useCompression = false;
/////////////////////////////////////////////////////////////////////////
1:     public List<ActiveMQDestination> getExcludedDestinations() {
1:         return excludedDestinations;
1:     }
1:     public void setExcludedDestinations(
1:             List<ActiveMQDestination> excludedDestinations) {
1:         this.excludedDestinations = excludedDestinations;
1:     }
1:     public List<ActiveMQDestination> getDynamicallyIncludedDestinations() {
1:         return dynamicallyIncludedDestinations;
1:     }
1:     public void setDynamicallyIncludedDestinations(
1:             List<ActiveMQDestination> dynamicallyIncludedDestinations) {
1:         this.dynamicallyIncludedDestinations = dynamicallyIncludedDestinations;
1:     }
1:     public List<ActiveMQDestination> getStaticallyIncludedDestinations() {
1:         return staticallyIncludedDestinations;
1:     }
1:     public void setStaticallyIncludedDestinations(
1:             List<ActiveMQDestination> staticallyIncludedDestinations) {
1:         this.staticallyIncludedDestinations = staticallyIncludedDestinations;
1:     }
1: 
1: 
1: 
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @param useCompression
1:      *      True if the Network should enforce compression for messages sent.
1:      */
1:     public void setUseCompression(boolean useCompression) {
1:         this.useCompression = useCompression;
1:     }
1: 
1:     /**
1:      * @return the useCompression setting, true if message will be compressed on send.
1:      */
1:     public boolean isUseCompression() {
1:         return useCompression;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4c8ab44
/////////////////////////////////////////////////////////////////////////
1:     private boolean staticBridge = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isStaticBridge() {
1:         return staticBridge;
1:     }
1: 
1:     public void setStaticBridge(boolean staticBridge) {
1:         this.staticBridge = staticBridge;
1:     }
commit:332c35c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
0: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String destinationFilter = null;
/////////////////////////////////////////////////////////////////////////
1:         if (this.destinationFilter == null) {
1:             if (dynamicallyIncludedDestinations != null && !dynamicallyIncludedDestinations.isEmpty()) {
1:                 StringBuffer filter = new StringBuffer();
1:                 String delimiter = "";
1:                 for (ActiveMQDestination destination : dynamicallyIncludedDestinations) {
1:                     if (!destination.isTemporary()) {
1:                         filter.append(delimiter);
1:                         filter.append(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX);
1:                         filter.append(destination.getDestinationTypeAsString());
1:                         filter.append(".");
1:                         filter.append(destination.getPhysicalName());
1:                         delimiter = ",";
1:                     }
1:                 }
1:                 return filter.toString();
1:             }   else {
0:                 return AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + ">";
1:             }
1:         }   else {
1:             // prepend consumer advisory prefix
1:             // to keep backward compatibility
1:             if (!this.destinationFilter.startsWith(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX)) {
1:                  return AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + this.destinationFilter;
1:             } else {
1:                 return this.destinationFilter;
1:             }
1:         }
commit:d185430
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
0:     private List<ActiveMQDestination> excludedDestinations;
0:     private List<ActiveMQDestination> dynamicallyIncludedDestinations;
0:     private List<ActiveMQDestination> staticallyIncludedDestinations;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 	public List<ActiveMQDestination> getExcludedDestinations() {
0: 		return excludedDestinations;
1: 	}
1: 
0: 	public void setExcludedDestinations(
0: 			List<ActiveMQDestination> excludedDestinations) {
0: 		this.excludedDestinations = excludedDestinations;
1: 	}
1: 
0: 	public List<ActiveMQDestination> getDynamicallyIncludedDestinations() {
0: 		return dynamicallyIncludedDestinations;
1: 	}
1: 
0: 	public void setDynamicallyIncludedDestinations(
0: 			List<ActiveMQDestination> dynamicallyIncludedDestinations) {
0: 		this.dynamicallyIncludedDestinations = dynamicallyIncludedDestinations;
1: 	}
1: 
0: 	public List<ActiveMQDestination> getStaticallyIncludedDestinations() {
0: 		return staticallyIncludedDestinations;
1: 	}
1: 
0: 	public void setStaticallyIncludedDestinations(
0: 			List<ActiveMQDestination> staticallyIncludedDestinations) {
0: 		this.staticallyIncludedDestinations = staticallyIncludedDestinations;
1: 	}
1: 	
1:     
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private String brokerURL = "";
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the brokerURL
1:      */
1:     public String getBrokerURL() {
1:         return this.brokerURL;
1:     }
1: 
1:     /**
1:      * @param brokerURL the brokerURL to set
1:      */
1:     public void setBrokerURL(String brokerURL) {
1:         this.brokerURL = brokerURL;
1:     }
commit:520a2de
/////////////////////////////////////////////////////////////////////////
0:     private String name = null;
/////////////////////////////////////////////////////////////////////////
0:         if(this.name == null) {
0:             this.name = "localhost";
1:         }
commit:2ef8151
/////////////////////////////////////////////////////////////////////////
0:     private String name = "localhost";
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the name
1:      */
0:     public String getName(){
1:         return this.name;
1:     }
1: 
1:     /**
1:      * @param name the name to set
1:      */
0:     public void setName(String name){
0:         this.name=name;
1:     }
commit:54114cc
/////////////////////////////////////////////////////////////////////////
0:     private String brokerName="localhost";
/////////////////////////////////////////////////////////////////////////
1:      * @return the brokerName
0:     public String getBrokerName(){
1:         return this.brokerName;
1:      * @param brokerName the localBrokerName to set
0:     public void setBrokerName(String brokerName){
0:         this.brokerName=brokerName;
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.network;
1: 
1: /**
1:  * Configuration for a NetworkBridge
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class NetworkBridgeConfiguration{
1: 
0:     private boolean conduitSubscriptions=true;
0:     private boolean dynamicOnly=false;
0:     private boolean dispatchAsync=true;
0:     private boolean decreaseNetworkConsumerPriority=false;
0:     private boolean duplex=false;
0:     private boolean bridgeTempDestinations=true;
0:     private int prefetchSize=1000;
0:     private int networkTTL=1;
0:     private String localBrokerName="Unknow";
1:     private String userName;
1:     private String password;
0:     private String destinationFilter = ">";
1: 
1:     /**
1:      * @return the conduitSubscriptions
1:      */
0:     public boolean isConduitSubscriptions(){
1:         return this.conduitSubscriptions;
1:     }
1: 
1:     /**
1:      * @param conduitSubscriptions the conduitSubscriptions to set
1:      */
0:     public void setConduitSubscriptions(boolean conduitSubscriptions){
0:         this.conduitSubscriptions=conduitSubscriptions;
1:     }
1: 
1:     /**
1:      * @return the dynamicOnly
1:      */
0:     public boolean isDynamicOnly(){
1:         return this.dynamicOnly;
1:     }
1: 
1:     /**
1:      * @param dynamicOnly the dynamicOnly to set
1:      */
0:     public void setDynamicOnly(boolean dynamicOnly){
0:         this.dynamicOnly=dynamicOnly;
1:     }
1: 
1:     
1:     /**
1:      * @return the bridgeTempDestinations
1:      */
0:     public boolean isBridgeTempDestinations(){
1:         return this.bridgeTempDestinations;
1:     }
1: 
1:     
1:     /**
1:      * @param bridgeTempDestinations the bridgeTempDestinations to set
1:      */
0:     public void setBridgeTempDestinations(boolean bridgeTempDestinations){
0:         this.bridgeTempDestinations=bridgeTempDestinations;
1:     }
1: 
1:     
1:     /**
1:      * @return the decreaseNetworkConsumerPriority
1:      */
0:     public boolean isDecreaseNetworkConsumerPriority(){
1:         return this.decreaseNetworkConsumerPriority;
1:     }
1: 
1:     
1:     /**
0:      * @param decreaseNetworkConsumerPriority the decreaseNetworkConsumerPriority to set
1:      */
0:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority){
0:         this.decreaseNetworkConsumerPriority=decreaseNetworkConsumerPriority;
1:     }
1: 
1:     
1:     /**
1:      * @return the dispatchAsync
1:      */
0:     public boolean isDispatchAsync(){
1:         return this.dispatchAsync;
1:     }
1: 
1:     
1:     /**
1:      * @param dispatchAsync the dispatchAsync to set
1:      */
0:     public void setDispatchAsync(boolean dispatchAsync){
0:         this.dispatchAsync=dispatchAsync;
1:     }
1: 
1:     
1:     /**
1:      * @return the duplex
1:      */
0:     public boolean isDuplex(){
1:         return this.duplex;
1:     }
1: 
1:     
1:     /**
1:      * @param duplex the duplex to set
1:      */
0:     public void setDuplex(boolean duplex){
0:         this.duplex=duplex;
1:     }
1: 
1:     
1:     /**
0:      * @return the localBrokerName
1:      */
0:     public String getLocalBrokerName(){
0:         return this.localBrokerName;
1:     }
1: 
1:     
1:     /**
0:      * @param localBrokerName the localBrokerName to set
1:      */
0:     public void setLocalBrokerName(String localBrokerName){
0:         this.localBrokerName=localBrokerName;
1:     }
1: 
1:     
1:     /**
1:      * @return the networkTTL
1:      */
0:     public int getNetworkTTL(){
1:         return this.networkTTL;
1:     }
1: 
1:     
1:     /**
1:      * @param networkTTL the networkTTL to set
1:      */
0:     public void setNetworkTTL(int networkTTL){
0:         this.networkTTL=networkTTL;
1:     }
1: 
1:     
1:     /**
1:      * @return the password
1:      */
0:     public String getPassword(){
1:         return this.password;
1:     }
1: 
1:     
1:     /**
1:      * @param password the password to set
1:      */
0:     public void setPassword(String password){
0:         this.password=password;
1:     }
1: 
1:     
1:     /**
1:      * @return the prefetchSize
1:      */
0:     public int getPrefetchSize(){
1:         return this.prefetchSize;
1:     }
1: 
1:     
1:     /**
1:      * @param prefetchSize the prefetchSize to set
1:      */
0:     public void setPrefetchSize(int prefetchSize){
0:         this.prefetchSize=prefetchSize;
1:     }
1: 
1:     
1:     /**
1:      * @return the userName
1:      */
0:     public String getUserName(){
1:         return this.userName;
1:     }
1: 
1:     
1:     /**
1:      * @param userName the userName to set
1:      */
0:     public void setUserName(String userName){
0:         this.userName=userName;
1:     }
1: 
1:     
1:     /**
1:      * @return the destinationFilter
1:      */
0:     public String getDestinationFilter(){
0:         return this.destinationFilter;
1:     }
1: 
1:     
1:     /**
1:      * @param destinationFilter the destinationFilter to set
1:      */
0:     public void setDestinationFilter(String destinationFilter){
0:         this.destinationFilter=destinationFilter;
1:     }
1: }
============================================================================