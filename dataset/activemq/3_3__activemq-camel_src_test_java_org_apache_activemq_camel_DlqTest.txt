1:d2bc650: /**
1:d2bc650:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d2bc650:  * contributor license agreements.  See the NOTICE file distributed with
1:d2bc650:  * this work for additional information regarding copyright ownership.
1:d2bc650:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d2bc650:  * (the "License"); you may not use this file except in compliance with
1:d2bc650:  * the License.  You may obtain a copy of the License at
1:d2bc650:  *
1:d2bc650:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d2bc650:  *
1:d2bc650:  * Unless required by applicable law or agreed to in writing, software
1:d2bc650:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d2bc650:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d2bc650:  * See the License for the specific language governing permissions and
1:d2bc650:  * limitations under the License.
1:d2bc650:  */
1:d2bc650: package org.apache.activemq.camel;
1:d2bc650: 
1:d2bc650: import javax.jms.Connection;
1:d2bc650: import javax.jms.MessageProducer;
1:d2bc650: import javax.jms.Session;
1:d2bc650: import javax.jms.TextMessage;
1:d2bc650: import org.apache.activemq.ActiveMQConnectionFactory;
1:d2bc650: import org.apache.activemq.broker.BrokerService;
1:d2bc650: import org.apache.activemq.command.ActiveMQQueue;
1:d2bc650: import org.apache.activemq.util.Wait;
1:5e6f8a1: 
1:d4da85f: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:5e6f8a1: import org.junit.Test;
1:d2bc650: import org.slf4j.Logger;
1:d2bc650: import org.slf4j.LoggerFactory;
1:d2bc650: import org.springframework.context.support.AbstractXmlApplicationContext;
1:d2bc650: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:d2bc650: 
1:5e6f8a1: public class DlqTest extends CamelSpringTestSupport {
1:d2bc650:     private static final Logger LOG = LoggerFactory.getLogger(DlqTest.class);
1:d2bc650:     BrokerService broker = null;
1:d2bc650:     int messageCount;
1:d2bc650: 
1:5e6f8a1:     @Test
1:d2bc650:     public void testSendToDlq() throws Exception {
1:d2bc650:         sendJMSMessageToKickOffRoute();
1:d2bc650: 
1:d2bc650:         LOG.info("Wait for dlq message...");
1:d2bc650: 
1:d2bc650:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:d2bc650:             @Override
1:d2bc650:             public boolean isSatisified() throws Exception {
1:d2bc650:                 return broker.getAdminView().getTotalEnqueueCount() == 2;
1:d2bc650:             }
1:d2bc650:         }));
1:d2bc650:     }
1:d2bc650: 
1:d2bc650:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:d2bc650:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testDlq");
1:d2bc650:         factory.setWatchTopicAdvisories(false);
1:d2bc650:         Connection connection = factory.createConnection();
1:d2bc650:         connection.start();
1:d2bc650:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d2bc650:         MessageProducer producer = session.createProducer(new ActiveMQQueue("fidEtpOrders"));
1:d2bc650:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:d2bc650:         message.setJMSCorrelationID("pleaseCorrelate");
1:d2bc650:         producer.send(message);
1:d2bc650:         connection.close();
1:d2bc650:     }
1:d2bc650: 
1:d2bc650:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:d2bc650:         BrokerService brokerService = new BrokerService();
1:d2bc650:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:d2bc650:         brokerService.setBrokerName("testDlq");
1:d2bc650:         brokerService.setAdvisorySupport(false);
1:d2bc650:         brokerService.setDataDirectory("target/data");
1:d2bc650:         return brokerService;
1:d2bc650:     }
1:d2bc650: 
1:d2bc650:     @Override
1:d2bc650:     protected AbstractXmlApplicationContext createApplicationContext() {
1:d2bc650: 
1:d2bc650:         deleteDirectory("target/data");
1:d2bc650: 
1:d2bc650:         // make broker available to recovery processing on app context start
1:d2bc650:         try {
1:d2bc650:             broker = createBroker(true);
1:d2bc650:             broker.start();
1:d2bc650:         } catch (Exception e) {
1:d2bc650:             throw new RuntimeException("Failed to start broker", e);
1:d2bc650:         }
1:d2bc650: 
1:d2bc650:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/dlq.xml");
1:d2bc650:     }
1:d2bc650: 
1:d2bc650:     public static class CanError {
1:d2bc650:         public String  enrich(String body) throws Exception {
1:d2bc650:             LOG.info("Got body: " + body);
1:d2bc650:             throw new RuntimeException("won't enrich today!");
1:d2bc650:         }
1:d2bc650:     }
1:d2bc650: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.camel.test.junit4.CamelSpringTestSupport;
1: import org.junit.Test;
1: public class DlqTest extends CamelSpringTestSupport {
1:     @Test
author:Gary Tully
-------------------------------------------------------------------------------
commit:d2bc650
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
0: import org.apache.camel.spring.SpringTestSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
0: public class DlqTest extends SpringTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(DlqTest.class);
1:     BrokerService broker = null;
1:     int messageCount;
1: 
1:     public void testSendToDlq() throws Exception {
1:         sendJMSMessageToKickOffRoute();
1: 
1:         LOG.info("Wait for dlq message...");
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTotalEnqueueCount() == 2;
1:             }
1:         }));
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testDlq");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("fidEtpOrders"));
1:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:         message.setJMSCorrelationID("pleaseCorrelate");
1:         producer.send(message);
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName("testDlq");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDataDirectory("target/data");
1:         return brokerService;
1:     }
1: 
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1: 
1:         deleteDirectory("target/data");
1: 
1:         // make broker available to recovery processing on app context start
1:         try {
1:             broker = createBroker(true);
1:             broker.start();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1: 
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/dlq.xml");
1:     }
1: 
1:     public static class CanError {
1:         public String  enrich(String body) throws Exception {
1:             LOG.info("Got body: " + body);
1:             throw new RuntimeException("won't enrich today!");
1:         }
1:     }
1: }
============================================================================