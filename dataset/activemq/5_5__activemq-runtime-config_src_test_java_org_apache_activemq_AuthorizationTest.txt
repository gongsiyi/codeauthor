1:8d480b4: /**
1:8d480b4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d480b4:  * contributor license agreements.  See the NOTICE file distributed with
1:8d480b4:  * this work for additional information regarding copyright ownership.
1:8d480b4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d480b4:  * (the "License"); you may not use this file except in compliance with
1:8d480b4:  * the License.  You may obtain a copy of the License at
1:8d480b4:  *
1:8d480b4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d480b4:  *
1:8d480b4:  * Unless required by applicable law or agreed to in writing, software
1:8d480b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d480b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d480b4:  * See the License for the specific language governing permissions and
1:8d480b4:  * limitations under the License.
1:8d480b4:  */
1:8d480b4: package org.apache.activemq;
16:8d480b4: 
1:8d480b4: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:a38a7c0: import org.junit.Test;
1:94b404d: 
1:43c3cae: public class AuthorizationTest extends AbstractAuthorizationTest {
1:94b404d: 
1:94b404d:     private static final int RECEIVE_TIMEOUT = 1000;
1:8d480b4:     String configurationSeed = "authorizationTest";
1:8d480b4: 
1:8d480b4:     @Test
1:8d480b4:     public void testMod() throws Exception {
1:8d480b4:         final String brokerConfig = configurationSeed + "-auth-broker";
1:8d480b4:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:8d480b4:         startBroker(brokerConfig);
1:8d480b4:         assertTrue("broker alive", brokerService.isStarted());
1:94b404d: 
1:8d480b4:         assertAllowed("user", "USERS.A");
1:8d480b4:         assertDenied("user", "GUESTS.A");
1:c1e94c6:         assertDenied("guest", "GUESTS.A");
1:94b404d: 
1:8d480b4:         assertDeniedTemp("guest");
1:94b404d: 
1:8d480b4:         applyNewConfig(brokerConfig, configurationSeed + "-users-guests", SLEEP);
1:94b404d: 
1:8d480b4:         assertAllowed("user", "USERS.A");
1:8d480b4:         assertAllowed("guest", "GUESTS.A");
1:8d480b4:         assertDenied("user", "GUESTS.A");
1:94b404d: 
1:8d480b4:         assertAllowedTemp("guest");
10:8d480b4:     }
1:52ab6ba: 
1:2fd52c9:     @Test
1:2fd52c9:     public void testModRm() throws Exception {
1:2fd52c9:         final String brokerConfig = configurationSeed + "-auth-rm-broker";
1:2fd52c9:         applyNewConfig(brokerConfig, configurationSeed + "-users-guests");
1:2fd52c9:         startBroker(brokerConfig);
1:2fd52c9:         assertTrue("broker alive", brokerService.isStarted());
1:2fd52c9: 
1:2fd52c9:         assertAllowed("user", "USERS.A");
1:2fd52c9:         assertAllowed("guest", "GUESTS.A");
1:2fd52c9:         assertDenied("user", "GUESTS.A");
1:2fd52c9:         assertAllowedTemp("guest");
1:2fd52c9: 
1:2fd52c9:         applyNewConfig(brokerConfig, configurationSeed + "-users", SLEEP);
1:2fd52c9: 
1:2fd52c9:         assertAllowed("user", "USERS.A");
1:2fd52c9:         assertDenied("user", "GUESTS.A");
1:2fd52c9:         assertDeniedTemp("guest");
1:2fd52c9:     }
1:2fd52c9: 
1:94b404d:     @Test
1:c1e94c6:     public void testModAddWrite() throws Exception {
1:c1e94c6:         final String brokerConfig = configurationSeed + "-auth-rm-broker";
1:c1e94c6:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:c1e94c6:         startBroker(brokerConfig);
1:c1e94c6:         assertTrue("broker alive", brokerService.isStarted());
1:c1e94c6: 
1:c1e94c6:         assertAllowedWrite("user", "USERS.A");
1:c1e94c6:         assertDeniedWrite("guest", "USERS.A");
1:c1e94c6: 
1:c1e94c6:         applyNewConfig(brokerConfig, configurationSeed + "-users-add-write-guest", SLEEP);
1:c1e94c6: 
1:c1e94c6:         assertAllowedWrite("user", "USERS.A");
1:c1e94c6:         assertAllowedWrite("guest", "USERS.A");
1:c1e94c6:     }
1:c1e94c6: 
1:c1e94c6:     @Test
1:52ab6ba:     public void testModWithGroupClass() throws Exception {
1:52ab6ba:         final String brokerConfig = configurationSeed + "-auth-add-guest-broker";
1:52ab6ba:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:52ab6ba:         startBroker(brokerConfig);
1:52ab6ba:         assertTrue("broker alive", brokerService.isStarted());
1:52ab6ba: 
1:52ab6ba:         assertAllowed("user", "USERS.A");
1:52ab6ba:         applyNewConfig(brokerConfig, configurationSeed + "-users-dud-groupClass", SLEEP);
1:52ab6ba:         assertDenied("user", "USERS.A");
1:52ab6ba: 
1:52ab6ba:         applyNewConfig(brokerConfig, configurationSeed + "-users", SLEEP);
1:52ab6ba:         assertAllowed("user", "USERS.A");
1:52ab6ba:     }
1:94b404d: 
1:52ab6ba:     @Test
1:94b404d:     public void testWildcard() throws Exception {
1:94b404d:         final String brokerConfig = configurationSeed + "-auth-broker";
1:94b404d:         applyNewConfig(brokerConfig, configurationSeed + "-wildcard-users-guests");
1:94b404d:         startBroker(brokerConfig);
1:94b404d:         assertTrue("broker alive", brokerService.isStarted());
1:94b404d: 
1:10c47d6:         final String ALL_USERS = "ALL.USERS.>";
1:10c47d6:         final String ALL_GUESTS = "ALL.GUESTS.>";
1:94b404d: 
1:94b404d:         assertAllowed("user", ALL_USERS);
1:94b404d:         assertAllowed("guest", ALL_GUESTS);
1:94b404d:         assertDenied("user", ALL_USERS + "," + ALL_GUESTS);
1:94b404d:         assertDenied("guest", ALL_GUESTS + "," + ALL_USERS);
1:94b404d: 
1:94b404d:         final String ALL_PREFIX = "ALL.>";
1:94b404d: 
1:10c47d6:         assertDenied("user", ALL_PREFIX);
1:10c47d6:         assertDenied("guest", ALL_PREFIX);
1:94b404d: 
1:10c47d6:         assertAllowed("user", "ALL.USERS.A");
1:10c47d6:         assertAllowed("user", "ALL.USERS.A,ALL.USERS.B");
1:10c47d6:         assertAllowed("guest", "ALL.GUESTS.A");
1:10c47d6:         assertAllowed("guest", "ALL.GUESTS.A,ALL.GUESTS.B");
1:94b404d: 
1:10c47d6:         assertDenied("user", "USERS.>");
1:10c47d6:         assertDenied("guest", "GUESTS.>");
1:94b404d: 
1:94b404d: 
1:94b404d:         assertAllowedTemp("guest");
1:94b404d:     }
1:94b404d: 
1:94b404d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:52ab6ba
/////////////////////////////////////////////////////////////////////////
1:     public void testModWithGroupClass() throws Exception {
1:         final String brokerConfig = configurationSeed + "-auth-add-guest-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertAllowed("user", "USERS.A");
1:         applyNewConfig(brokerConfig, configurationSeed + "-users-dud-groupClass", SLEEP);
1:         assertDenied("user", "USERS.A");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-users", SLEEP);
1:         assertAllowed("user", "USERS.A");
1:     }
1: 
1:     @Test
commit:c1e94c6
/////////////////////////////////////////////////////////////////////////
1:         assertDenied("guest", "GUESTS.A");
/////////////////////////////////////////////////////////////////////////
1:     public void testModAddWrite() throws Exception {
1:         final String brokerConfig = configurationSeed + "-auth-rm-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertAllowedWrite("user", "USERS.A");
1:         assertDeniedWrite("guest", "USERS.A");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-users-add-write-guest", SLEEP);
1: 
1:         assertAllowedWrite("user", "USERS.A");
1:         assertAllowedWrite("guest", "USERS.A");
1:     }
1: 
1:     @Test
commit:2fd52c9
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testModRm() throws Exception {
1:         final String brokerConfig = configurationSeed + "-auth-rm-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-users-guests");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertAllowed("guest", "GUESTS.A");
1:         assertDenied("user", "GUESTS.A");
1:         assertAllowedTemp("guest");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-users", SLEEP);
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertDenied("user", "GUESTS.A");
1:         assertDeniedTemp("guest");
1:     }
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: 
1: public class AuthorizationTest extends AbstractAuthorizationTest {
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:10c47d6
/////////////////////////////////////////////////////////////////////////
1:         final String ALL_USERS = "ALL.USERS.>";
1:         final String ALL_GUESTS = "ALL.GUESTS.>";
/////////////////////////////////////////////////////////////////////////
1:         assertDenied("user", ALL_PREFIX);
1:         assertDenied("guest", ALL_PREFIX);
1:         assertAllowed("user", "ALL.USERS.A");
1:         assertAllowed("user", "ALL.USERS.A,ALL.USERS.B");
1:         assertAllowed("guest", "ALL.GUESTS.A");
1:         assertAllowed("guest", "ALL.GUESTS.A,ALL.GUESTS.B");
1:         assertDenied("user", "USERS.>");
1:         assertDenied("guest", "GUESTS.>");
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
1:     private static final int RECEIVE_TIMEOUT = 1000;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testWildcard() throws Exception {
1:         final String brokerConfig = configurationSeed + "-auth-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-wildcard-users-guests");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
0:         final String ALL_USERS = "ALL.USERS";
0:         final String ALL_GUESTS = "ALL.GUESTS";
1: 
1:         assertAllowed("user", ALL_USERS);
1:         assertAllowed("guest", ALL_GUESTS);
1:         assertDenied("user", ALL_USERS + "," + ALL_GUESTS);
1:         assertDenied("guest", ALL_GUESTS + "," + ALL_USERS);
1: 
1:         final String ALL_PREFIX = "ALL.>";
0:         final String ALL_WILDCARD = "ALL.*";
1: 
0:         assertAllowed("user", ALL_PREFIX);
0:         assertAllowed("user", ALL_WILDCARD);
0:         assertAllowed("guest", ALL_PREFIX);
0:         assertAllowed("guest", ALL_WILDCARD);
1: 
0:         assertAllowed("user", "ALL.USERS,ALL.>");
0:         assertAllowed("guest", "ALL.GUESTS,ALL.*");
0:         assertDenied("user", "ALL.GUESTS,ALL.>");
0:         assertDenied("guest", "ALL.USERS,ALL.*");
1: 
0:         assertDenied("user", "ALL.USERS,ALL.GUESTS.>");
0:         assertDenied("guest", "ALL.GUESTS,ALL.USERS.*");
0:         assertDenied("user", "ALL.USERS.*,ALL.GUESTS.>");
0:         assertDenied("guest", "ALL.GUESTS.>,ALL.USERS.*");
1: 
0:         // subscribe to wildcards and check whether messages are actually filtered
0:         final ActiveMQConnection userConn = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection("user", "user");
0:         final ActiveMQConnection guestConn = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection("guest", "guest");
0:         userConn.start();
0:         guestConn.start();
0:         try {
0:             final Session userSession = userConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             final Session guestSession = guestConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             final MessageProducer userProducer = userSession.createProducer(null);
0:             final MessageProducer guestProducer = guestSession.createProducer(null);
1: 
0:             // test prefix filter
0:             MessageConsumer userConsumer = userSession.createConsumer(userSession.createQueue(ALL_PREFIX));
0:             MessageConsumer guestConsumer = guestSession.createConsumer(userSession.createQueue(ALL_PREFIX));
1: 
0:             userProducer.send(userSession.createQueue(ALL_USERS), userSession.createTextMessage(ALL_USERS));
0:             assertNotNull(userConsumer.receive(RECEIVE_TIMEOUT));
0:             assertNull(guestConsumer.receive(RECEIVE_TIMEOUT));
1: 
0:             guestProducer.send(guestSession.createQueue(ALL_GUESTS), guestSession.createTextMessage(ALL_GUESTS));
0:             assertNotNull(guestConsumer.receive(RECEIVE_TIMEOUT));
0:             assertNull(userConsumer.receive(RECEIVE_TIMEOUT));
1: 
0:             userConsumer.close();
0:             guestConsumer.close();
1: 
0:             // test wildcard filter
0:             userConsumer = userSession.createConsumer(userSession.createQueue(ALL_WILDCARD));
0:             guestConsumer = guestSession.createConsumer(userSession.createQueue(ALL_WILDCARD));
1: 
0:             userProducer.send(userSession.createQueue(ALL_USERS), userSession.createTextMessage(ALL_USERS));
0:             assertNotNull(userConsumer.receive(RECEIVE_TIMEOUT));
0:             assertNull(guestConsumer.receive(RECEIVE_TIMEOUT));
1: 
0:             guestProducer.send(guestSession.createQueue(ALL_GUESTS), guestSession.createTextMessage(ALL_GUESTS));
0:             assertNotNull(guestConsumer.receive(RECEIVE_TIMEOUT));
0:             assertNull(userConsumer.receive(RECEIVE_TIMEOUT));
1: 
0:         } finally {
0:             userConn.close();
0:             guestConn.close();
1:         }
1: 
1:         assertAllowedTemp("guest");
1:     }
1: 
commit:a38a7c0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
0:         assertDenied("user", ">");
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d480b4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.Session;
0: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
0: public class AuthorizationTest extends RuntimeConfigTestSupport {
1: 
1:     String configurationSeed = "authorizationTest";
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         final String brokerConfig = configurationSeed + "-auth-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertDenied("user", "GUESTS.A");
1: 
1:         assertDeniedTemp("guest");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-users-guests", SLEEP);
1: 
1:         assertAllowed("user", "USERS.A");
1:         assertAllowed("guest", "GUESTS.A");
1:         assertDenied("user", "GUESTS.A");
1: 
1:         assertAllowedTemp("guest");
1:     }
1: 
0:     private void assertDeniedTemp(String userPass) {
0:         try {
0:             assertAllowedTemp(userPass);
0:             fail("Expected not allowed exception");
0:         } catch (Exception expected) {
0:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
0:     private void assertAllowedTemp(String userPass) throws Exception {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
0:         connection.start();
0:         try {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createConsumer(session.createTemporaryQueue());
0:         } finally {
0:             connection.close();
1:         }
1: 
1:     }
1: 
0:     private void assertDenied(String userPass, String destination) {
0:         try {
0:             assertAllowed(userPass, destination);
0:             fail("Expected not allowed exception");
0:         } catch (JMSException expected) {
0:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
0:     private void assertAllowed(String userPass, String dest) throws JMSException {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
0:         connection.start();
0:         try {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createConsumer(session.createQueue(dest));
0:         } finally {
0:             connection.close();
1:         }
1:     }
1: 
1: }
============================================================================