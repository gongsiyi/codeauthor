1:d90b781: /**
1:d90b781:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d90b781:  * contributor license agreements.  See the NOTICE file distributed with
1:d90b781:  * this work for additional information regarding copyright ownership.
1:d90b781:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d90b781:  * (the "License"); you may not use this file except in compliance with
1:d90b781:  * the License.  You may obtain a copy of the License at
3:d90b781:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d90b781:  *
1:d90b781:  * Unless required by applicable law or agreed to in writing, software
1:d90b781:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d90b781:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d90b781:  * See the License for the specific language governing permissions and
1:d90b781:  * limitations under the License.
1:d90b781:  */
1:d90b781: package org.apache.activemq.util;
3:d90b781: 
1:540dd5c: import java.util.Hashtable;
1:d90b781: import javax.jms.Connection;
1:d90b781: import javax.jms.ConnectionFactory;
1:d90b781: import javax.jms.JMSException;
1:d90b781: import javax.naming.Context;
1:d90b781: import javax.naming.InitialContext;
1:d90b781: import javax.naming.NamingException;
1:540dd5c: 
1:540dd5c: import org.apache.log4j.helpers.LogLog;
1:d90b781: 
1:d90b781: /**
1:540dd5c:  * A JMS 1.1 log4j appender which uses JNDI to locate a JMS ConnectionFactory to
1:540dd5c:  * use for logging events.
1:0bbc0ac:  * 
1:540dd5c:  * 
1:d90b781:  */
1:d90b781: public class JndiJmsLogAppender extends JmsLogAppenderSupport {
1:d90b781: 
1:d90b781:     private String jndiName;
1:d90b781:     private String userName;
1:d90b781:     private String password;
1:d90b781: 
1:d90b781:     private String initialContextFactoryName;
1:d90b781:     private String providerURL;
1:d90b781:     private String urlPkgPrefixes;
1:d90b781:     private String securityPrincipalName;
1:d90b781:     private String securityCredentials;
1:d90b781: 
1:d90b781:     public JndiJmsLogAppender() {
5:d90b781:     }
1:d90b781: 
1:d90b781:     public String getJndiName() {
1:d90b781:         return jndiName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setJndiName(String jndiName) {
1:d90b781:         this.jndiName = jndiName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getUserName() {
1:d90b781:         return userName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setUserName(String userName) {
1:d90b781:         this.userName = userName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getPassword() {
1:d90b781:         return password;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setPassword(String password) {
1:d90b781:         this.password = password;
1:d90b781:     }
1:d90b781: 
1:d90b781:     // to customize the JNDI context
1:540dd5c:     // -------------------------------------------------------------------------
1:d90b781:     public String getInitialContextFactoryName() {
1:d90b781:         return initialContextFactoryName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setInitialContextFactoryName(String initialContextFactoryName) {
1:d90b781:         this.initialContextFactoryName = initialContextFactoryName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getProviderURL() {
1:d90b781:         return providerURL;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setProviderURL(String providerURL) {
1:d90b781:         this.providerURL = providerURL;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getUrlPkgPrefixes() {
1:d90b781:         return urlPkgPrefixes;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setUrlPkgPrefixes(String urlPkgPrefixes) {
1:d90b781:         this.urlPkgPrefixes = urlPkgPrefixes;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getSecurityPrincipalName() {
1:d90b781:         return securityPrincipalName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setSecurityPrincipalName(String securityPrincipalName) {
1:d90b781:         this.securityPrincipalName = securityPrincipalName;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public String getSecurityCredentials() {
1:d90b781:         return securityCredentials;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setSecurityCredentials(String securityCredentials) {
1:d90b781:         this.securityCredentials = securityCredentials;
1:d90b781:     }
1:d90b781: 
1:d90b781:     // Implementation methods
1:540dd5c:     // -------------------------------------------------------------------------
1:d90b781:     protected Connection createConnection() throws JMSException, NamingException {
1:d90b781:         InitialContext context = createInitialContext();
1:d90b781:         LogLog.debug("Looking up ConnectionFactory with jndiName: " + jndiName);
1:540dd5c:         ConnectionFactory factory = (ConnectionFactory)context.lookup(jndiName);
1:d90b781:         if (factory == null) {
1:d90b781:             throw new JMSException("No such ConnectionFactory for name: " + jndiName);
1:d90b781:         }
1:d90b781:         if (userName != null) {
1:d90b781:             return factory.createConnection(userName, password);
1:540dd5c:         } else {
1:d90b781:             return factory.createConnection();
1:d90b781:         }
1:d90b781:     }
1:d90b781: 
1:d90b781:     protected InitialContext createInitialContext() throws NamingException {
1:d90b781:         if (initialContextFactoryName == null) {
1:d90b781:             return new InitialContext();
1:540dd5c:         } else {
1:ecf89a6:             Hashtable<String, String> env = new Hashtable<String, String>();
1:d90b781:             env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactoryName);
1:d90b781:             if (providerURL != null) {
1:d90b781:                 env.put(Context.PROVIDER_URL, providerURL);
1:540dd5c:             } else {
1:540dd5c:                 LogLog.warn("You have set InitialContextFactoryName option but not the " + "ProviderURL. This is likely to cause problems.");
1:d90b781:             }
1:d90b781:             if (urlPkgPrefixes != null) {
1:d90b781:                 env.put(Context.URL_PKG_PREFIXES, urlPkgPrefixes);
1:d90b781:             }
1:d90b781: 
1:d90b781:             if (securityPrincipalName != null) {
1:d90b781:                 env.put(Context.SECURITY_PRINCIPAL, securityPrincipalName);
1:d90b781:                 if (securityCredentials != null) {
1:d90b781:                     env.put(Context.SECURITY_CREDENTIALS, securityCredentials);
1:540dd5c:                 } else {
1:540dd5c:                     LogLog.warn("You have set SecurityPrincipalName option but not the " + "SecurityCredentials. This is likely to cause problems.");
1:d90b781:                 }
1:d90b781:             }
1:d90b781:             LogLog.debug("Looking up JNDI context with environment: " + env);
1:d90b781:             return new InitialContext(env);
1:d90b781:         }
1:d90b781:     }
1:d90b781: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.log4j.helpers.LogLog;
1:  * A JMS 1.1 log4j appender which uses JNDI to locate a JMS ConnectionFactory to
1:  * use for logging events.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
1:         ConnectionFactory factory = (ConnectionFactory)context.lookup(jndiName);
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             } else {
1:                 LogLog.warn("You have set InitialContextFactoryName option but not the " + "ProviderURL. This is likely to cause problems.");
/////////////////////////////////////////////////////////////////////////
1:                 } else {
1:                     LogLog.warn("You have set SecurityPrincipalName option but not the " + "SecurityCredentials. This is likely to cause problems.");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             Hashtable<String, String> env = new Hashtable<String, String>();
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:d90b781
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import org.apache.log4j.helpers.LogLog;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
0: import java.util.Hashtable;
1: 
1: /**
0:  * A JMS 1.1 log4j appender which uses JNDI to locate a JMS ConnectionFactory
0:  * to use for logging events.
1:  *
0:  * @version $Revision$
1:  */
1: public class JndiJmsLogAppender extends JmsLogAppenderSupport {
1: 
1:     private String jndiName;
1:     private String userName;
1:     private String password;
1: 
1:     private String initialContextFactoryName;
1:     private String providerURL;
1:     private String urlPkgPrefixes;
1:     private String securityPrincipalName;
1:     private String securityCredentials;
1: 
1:     public JndiJmsLogAppender() {
1:     }
1: 
1:     public String getJndiName() {
1:         return jndiName;
1:     }
1: 
1:     public void setJndiName(String jndiName) {
1:         this.jndiName = jndiName;
1:     }
1: 
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1: 
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1: 
1:     // to customize the JNDI context
0:     //-------------------------------------------------------------------------
1:     public String getInitialContextFactoryName() {
1:         return initialContextFactoryName;
1:     }
1: 
1:     public void setInitialContextFactoryName(String initialContextFactoryName) {
1:         this.initialContextFactoryName = initialContextFactoryName;
1:     }
1: 
1:     public String getProviderURL() {
1:         return providerURL;
1:     }
1: 
1:     public void setProviderURL(String providerURL) {
1:         this.providerURL = providerURL;
1:     }
1: 
1:     public String getUrlPkgPrefixes() {
1:         return urlPkgPrefixes;
1:     }
1: 
1:     public void setUrlPkgPrefixes(String urlPkgPrefixes) {
1:         this.urlPkgPrefixes = urlPkgPrefixes;
1:     }
1: 
1:     public String getSecurityPrincipalName() {
1:         return securityPrincipalName;
1:     }
1: 
1:     public void setSecurityPrincipalName(String securityPrincipalName) {
1:         this.securityPrincipalName = securityPrincipalName;
1:     }
1: 
1:     public String getSecurityCredentials() {
1:         return securityCredentials;
1:     }
1: 
1:     public void setSecurityCredentials(String securityCredentials) {
1:         this.securityCredentials = securityCredentials;
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1:     protected Connection createConnection() throws JMSException, NamingException {
1:         InitialContext context = createInitialContext();
1:         LogLog.debug("Looking up ConnectionFactory with jndiName: " + jndiName);
0:         ConnectionFactory factory = (ConnectionFactory) context.lookup(jndiName);
1:         if (factory == null) {
1:             throw new JMSException("No such ConnectionFactory for name: " + jndiName);
1:         }
1:         if (userName != null) {
1:             return factory.createConnection(userName, password);
1:         }
0:         else {
1:             return factory.createConnection();
1:         }
1:     }
1: 
1:     protected InitialContext createInitialContext() throws NamingException {
1:         if (initialContextFactoryName == null) {
1:             return new InitialContext();
1:         }
0:         else {
0:             Hashtable env = new Hashtable();
1:             env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactoryName);
1:             if (providerURL != null) {
1:                 env.put(Context.PROVIDER_URL, providerURL);
1:             }
0:             else {
0:                 LogLog.warn("You have set InitialContextFactoryName option but not the "
0:                         + "ProviderURL. This is likely to cause problems.");
1:             }
1:             if (urlPkgPrefixes != null) {
1:                 env.put(Context.URL_PKG_PREFIXES, urlPkgPrefixes);
1:             }
1: 
1:             if (securityPrincipalName != null) {
1:                 env.put(Context.SECURITY_PRINCIPAL, securityPrincipalName);
1:                 if (securityCredentials != null) {
1:                     env.put(Context.SECURITY_CREDENTIALS, securityCredentials);
1:                 }
0:                 else {
0:                     LogLog.warn("You have set SecurityPrincipalName option but not the "
0:                             + "SecurityCredentials. This is likely to cause problems.");
1:                 }
1:             }
1:             LogLog.debug("Looking up JNDI context with environment: " + env);
1:             return new InitialContext(env);
1:         }
1:     }
1: }
============================================================================