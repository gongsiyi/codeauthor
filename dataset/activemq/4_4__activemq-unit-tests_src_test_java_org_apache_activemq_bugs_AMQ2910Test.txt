1:cf7a935: /**
1:cf7a935:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cf7a935:  * contributor license agreements.  See the NOTICE file distributed with
1:cf7a935:  * this work for additional information regarding copyright ownership.
1:cf7a935:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cf7a935:  * (the "License"); you may not use this file except in compliance with
1:cf7a935:  * the License.  You may obtain a copy of the License at
1:cf7a935:  *
1:cf7a935:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cf7a935:  *
1:cf7a935:  * Unless required by applicable law or agreed to in writing, software
1:cf7a935:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cf7a935:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf7a935:  * See the License for the specific language governing permissions and
1:cf7a935:  * limitations under the License.
1:cf7a935:  */
1:cf7a935: package org.apache.activemq.bugs;
1:5219fa1: 
1:cf7a935: import org.apache.activemq.ActiveMQConnectionFactory;
1:cf7a935: import org.apache.activemq.JmsMultipleClientsTestSupport;
1:cf7a935: import org.apache.activemq.broker.BrokerService;
1:cf7a935: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:cf7a935: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:cf7a935: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cf7a935: import org.apache.activemq.command.ActiveMQQueue;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
4:cf7a935: 
1:bec711c: import java.util.Vector;
1:bec711c: import java.util.concurrent.ExecutorService;
1:bec711c: import java.util.concurrent.Executors;
1:bec711c: import java.util.concurrent.TimeUnit;
1:bec711c: 
1:bec711c: import static org.junit.Assert.assertTrue;
1:bec711c: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:cf7a935: public class AMQ2910Test extends JmsMultipleClientsTestSupport {
1:cf7a935: 
1:cf7a935:     final int maxConcurrency = 60;
1:cf7a935:     final int msgCount = 200;
1:cf7a935:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:cf7a935: 
1:cf7a935:     @Override
1:cf7a935:     protected BrokerService createBroker() throws Exception {
1:cf7a935:         //persistent = true;
1:cf7a935:         BrokerService broker = new BrokerService();
1:cf7a935:         broker.setDeleteAllMessagesOnStartup(true);
1:cf7a935:         broker.addConnector("tcp://localhost:0");
1:cf7a935:         PolicyMap policyMap = new PolicyMap();
1:cf7a935:         PolicyEntry defaultEntry = new PolicyEntry();
1:cf7a935:         defaultEntry.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:cf7a935:         defaultEntry.setCursorMemoryHighWaterMark(50);
1:cf7a935:         defaultEntry.setMemoryLimit(500*1024);
1:cf7a935:         defaultEntry.setProducerFlowControl(false);
1:cf7a935:         policyMap.setDefaultEntry(defaultEntry);
1:cf7a935:         broker.setDestinationPolicy(policyMap);
1:cf7a935: 
1:cf7a935:         broker.getSystemUsage().getMemoryUsage().setLimit(1000 * 1024);
1:cf7a935: 
1:cf7a935:         return broker;
1:cf7a935:     }
1:cf7a935: 
1:a0d05f8:     @Test(timeout = 120 * 1000)
1:cf7a935:     public void testConcurrentSendToPendingCursor() throws Exception {
1:cf7a935:         final ActiveMQConnectionFactory factory =
1:cf7a935:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:cf7a935:         factory.setCloseTimeout(30000);
1:cf7a935:         ExecutorService executor = Executors.newCachedThreadPool();
1:cf7a935:         for (int i=0; i<maxConcurrency; i++) {
1:cf7a935:             final ActiveMQQueue dest = new ActiveMQQueue("Queue-" + i);
1:cf7a935:             executor.execute(new Runnable() {
1:5219fa1:                 @Override
1:cf7a935:                 public void run() {
1:cf7a935:                     try {
1:cf7a935:                         sendMessages(factory.createConnection(), dest, msgCount);
1:cf7a935:                     } catch (Throwable t) {
1:cf7a935:                         exceptions.add(t);
1:cf7a935:                     }
1:cf7a935:                 }
1:cf7a935:             });
1:cf7a935:         }
1:cf7a935: 
1:cf7a935:         executor.shutdown();
1:cf7a935: 
1:cf7a935:         assertTrue("send completed", executor.awaitTermination(60, TimeUnit.SECONDS));
1:cf7a935:         assertNoExceptions();
1:cf7a935: 
1:cf7a935:         executor = Executors.newCachedThreadPool();
1:cf7a935:         for (int i=0; i<maxConcurrency; i++) {
1:cf7a935:             final ActiveMQQueue dest = new ActiveMQQueue("Queue-" + i);
1:cf7a935:             executor.execute(new Runnable() {
1:5219fa1:                 @Override
1:cf7a935:                 public void run() {
1:cf7a935:                     try {
1:cf7a935:                         startConsumers(factory, dest);
1:cf7a935:                     } catch (Throwable t) {
1:cf7a935:                         exceptions.add(t);
1:cf7a935:                     }
1:cf7a935:                 }
1:cf7a935:             });
1:cf7a935:         }
1:cf7a935: 
1:cf7a935:         executor.shutdown();
1:a0d05f8:         assertTrue("consumers completed", executor.awaitTermination(30, TimeUnit.SECONDS));
1:cf7a935: 
1:a0d05f8:         allMessagesList.setMaximumDuration(90*1000);
1:cf7a935:         final int numExpected = maxConcurrency * msgCount;
1:cf7a935:         allMessagesList.waitForMessagesToArrive(numExpected);
1:cf7a935: 
1:cf7a935:         if (allMessagesList.getMessageCount() != numExpected) {
1:cf7a935:             dumpAllThreads(getName());
1:bec711c: 
1:cf7a935:         }
1:cf7a935:         allMessagesList.assertMessagesReceivedNoWait(numExpected);
1:cf7a935: 
1:cf7a935:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:cf7a935: 
1:cf7a935:     }
1:cf7a935: 
1:cf7a935:     private void assertNoExceptions() {
1:cf7a935:         if (!exceptions.isEmpty()) {
1:cf7a935:             for (Throwable t: exceptions) {
1:cf7a935:                 t.printStackTrace();
1:cf7a935:             }
1:cf7a935:         }
1:cf7a935:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:cf7a935:     }
1:cf7a935: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a0d05f8
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 120 * 1000)
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("consumers completed", executor.awaitTermination(30, TimeUnit.SECONDS));
1:         allMessagesList.setMaximumDuration(90*1000);
commit:521c4fd
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 30 * 1000)
/////////////////////////////////////////////////////////////////////////
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:cf7a935
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import java.util.Vector;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.TimeUnit;
0: import javax.jms.ConnectionFactory;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleClientsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: public class AMQ2910Test extends JmsMultipleClientsTestSupport {
1: 
1:     final int maxConcurrency = 60;
1:     final int msgCount = 200;
1:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         //persistent = true;
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://localhost:0");
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:         defaultEntry.setCursorMemoryHighWaterMark(50);
1:         defaultEntry.setMemoryLimit(500*1024);
1:         defaultEntry.setProducerFlowControl(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1000 * 1024);
1: 
1:         return broker;
1:     }
1: 
1:     public void testConcurrentSendToPendingCursor() throws Exception {
1:         final ActiveMQConnectionFactory factory =
1:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:         factory.setCloseTimeout(30000);
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         for (int i=0; i<maxConcurrency; i++) {
1:             final ActiveMQQueue dest = new ActiveMQQueue("Queue-" + i);
1:             executor.execute(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         sendMessages(factory.createConnection(), dest, msgCount);
1:                     } catch (Throwable t) {
1:                         exceptions.add(t);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executor.shutdown();
1: 
1: 
1:         assertTrue("send completed", executor.awaitTermination(60, TimeUnit.SECONDS));
1:         assertNoExceptions();
1: 
1: 
1:         executor = Executors.newCachedThreadPool();
1:         for (int i=0; i<maxConcurrency; i++) {
1:             final ActiveMQQueue dest = new ActiveMQQueue("Queue-" + i);
1:             executor.execute(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         startConsumers(factory, dest);
1:                     } catch (Throwable t) {
1:                         exceptions.add(t);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executor.shutdown();
0:         assertTrue("consumers completed", executor.awaitTermination(60, TimeUnit.SECONDS));
1: 
0:         allMessagesList.setMaximumDuration(120*1000);
1:         final int numExpected = maxConcurrency * msgCount;
1:         allMessagesList.waitForMessagesToArrive(numExpected);
1: 
1:         if (allMessagesList.getMessageCount() != numExpected) {
1:             dumpAllThreads(getName());
1:         }
1:         allMessagesList.assertMessagesReceivedNoWait(numExpected);
1: 
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1: 
1:     }
1: 
1:     private void assertNoExceptions() {
1:         if (!exceptions.isEmpty()) {
1:             for (Throwable t: exceptions) {
1:                 t.printStackTrace();
1:             }
1:         }
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:     }
1: }
============================================================================