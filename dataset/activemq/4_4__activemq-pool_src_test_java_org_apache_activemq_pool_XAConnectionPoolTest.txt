1:628a0cd: /**
1:628a0cd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:628a0cd:  * contributor license agreements.  See the NOTICE file distributed with
1:628a0cd:  * this work for additional information regarding copyright ownership.
1:628a0cd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:628a0cd:  * (the "License"); you may not use this file except in compliance with
1:628a0cd:  * the License.  You may obtain a copy of the License at
1:628a0cd:  *
1:628a0cd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:628a0cd:  *
1:628a0cd:  * Unless required by applicable law or agreed to in writing, software
1:628a0cd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:628a0cd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628a0cd:  * See the License for the specific language governing permissions and
1:628a0cd:  * limitations under the License.
1:628a0cd:  */
1:628a0cd: package org.apache.activemq.pool;
1:1b38caa: 
1:004be56: import java.io.ByteArrayOutputStream;
1:004be56: import java.io.DataOutputStream;
1:004be56: import java.io.IOException;
1:670d9d8: import java.util.Hashtable;
1:628a0cd: import java.util.Vector;
1:577b29c: 
1:059fd2f: import javax.jms.QueueConnection;
1:670d9d8: import javax.jms.QueueConnectionFactory;
1:059fd2f: import javax.jms.QueueSender;
1:059fd2f: import javax.jms.QueueSession;
1:628a0cd: import javax.jms.Session;
1:628a0cd: import javax.jms.TopicConnection;
1:670d9d8: import javax.jms.TopicConnectionFactory;
1:628a0cd: import javax.jms.TopicPublisher;
1:628a0cd: import javax.jms.TopicSession;
1:670d9d8: import javax.naming.spi.ObjectFactory;
1:628a0cd: import javax.transaction.HeuristicMixedException;
1:628a0cd: import javax.transaction.HeuristicRollbackException;
1:628a0cd: import javax.transaction.InvalidTransactionException;
1:628a0cd: import javax.transaction.NotSupportedException;
1:628a0cd: import javax.transaction.RollbackException;
1:628a0cd: import javax.transaction.Status;
1:628a0cd: import javax.transaction.Synchronization;
1:628a0cd: import javax.transaction.SystemException;
1:628a0cd: import javax.transaction.Transaction;
1:628a0cd: import javax.transaction.TransactionManager;
1:004be56: import javax.transaction.xa.XAException;
1:628a0cd: import javax.transaction.xa.XAResource;
1:004be56: import javax.transaction.xa.Xid;
1:577b29c: 
1:628a0cd: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:628a0cd: import org.apache.activemq.command.ActiveMQTopic;
1:b66559e: import org.apache.activemq.jms.pool.PooledSession;
1:628a0cd: import org.apache.activemq.test.TestSupport;
1:1b38caa: 
1:628a0cd: public class XAConnectionPoolTest extends TestSupport {
5:628a0cd: 
1:628a0cd:     // https://issues.apache.org/jira/browse/AMQ-3251
1:628a0cd:     public void testAfterCompletionCanClose() throws Exception {
1:628a0cd:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:628a0cd:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:628a0cd:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:577b29c:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1:628a0cd: 
1:004be56:         final Xid xid = createXid();
1:628a0cd:         // simple TM that is in a tx and will track syncs
1:577b29c:         pcf.setTransactionManager(new TransactionManager() {
1:628a0cd:             @Override
1:628a0cd:             public void begin() throws NotSupportedException, SystemException {
1:628a0cd:             }
1:c387522: 
1:c387522:             @Override
1:577b29c:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:577b29c:                 SystemException {
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:c387522:             public int getStatus() throws SystemException {
1:628a0cd:                 return Status.STATUS_ACTIVE;
1:c387522:             }
1:a3578eb: 
1:c387522:             @Override
1:628a0cd:             public Transaction getTransaction() throws SystemException {
1:628a0cd:                 return new Transaction() {
1:a3578eb:                     @Override
1:628a0cd:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:c387522:                     }
1:c387522: 
1:628a0cd:                     @Override
1:628a0cd:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:c387522:                         return false;
1:c387522:                     }
1:c387522: 
1:628a0cd:                     @Override
1:628a0cd:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:004be56:                         try {
1:004be56:                             xaRes.start(xid, 0);
1:004be56:                         } catch (XAException e) {
1:004be56:                             throw new SystemException(e.getMessage());
1:004be56:                         }
1:004be56:                         return true;
1:a3578eb:                     }
1:c387522: 
1:628a0cd:                     @Override
1:628a0cd:                     public int getStatus() throws SystemException {
1:628a0cd:                         return 0;
1:628a0cd:                     }
1:628a0cd: 
1:628a0cd:                     @Override
1:628a0cd:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:628a0cd:                         syncs.add(synch);
1:628a0cd:                     }
1:628a0cd: 
1:628a0cd:                     @Override
1:628a0cd:                     public void rollback() throws IllegalStateException, SystemException {
1:628a0cd:                     }
1:628a0cd: 
1:628a0cd:                     @Override
1:628a0cd:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:628a0cd:                     }
1:628a0cd:                 };
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:628a0cd:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:628a0cd:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:628a0cd:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:628a0cd:             public void setTransactionTimeout(int seconds) throws SystemException {
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:628a0cd:             public Transaction suspend() throws SystemException {
1:628a0cd:                 return null;
1:628a0cd:             }
1:628a0cd:         });
1:628a0cd: 
1:628a0cd:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:628a0cd:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:8b84374: 
1:8b84374:         assertTrue(session instanceof PooledSession);
1:8b84374: 
1:628a0cd:         TopicPublisher publisher = session.createPublisher(topic);
1:628a0cd:         publisher.publish(session.createMessage());
1:628a0cd: 
1:628a0cd:         // simulate a commit
1:628a0cd:         for (Synchronization sync : syncs) {
1:628a0cd:             sync.beforeCompletion();
1:628a0cd:         }
1:628a0cd:         for (Synchronization sync : syncs) {
1:628a0cd:             sync.afterCompletion(1);
1:628a0cd:         }
1:628a0cd:         connection.close();
1:c387522:     }
1:c387522: 
1:004be56:     static long txGenerator = 22;
1:004be56:     public Xid createXid() throws IOException {
1:004be56: 
1:004be56:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:004be56:         DataOutputStream os = new DataOutputStream(baos);
1:004be56:         os.writeLong(++txGenerator);
1:004be56:         os.close();
1:004be56:         final byte[] bs = baos.toByteArray();
1:004be56: 
1:004be56:         return new Xid() {
1:004be56: 
1:004be56:             public int getFormatId() {
1:004be56:                 return 86;
1:004be56:             }
1:004be56: 
1:004be56:             public byte[] getGlobalTransactionId() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56: 
1:004be56:             public byte[] getBranchQualifier() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56:         };
1:004be56:     }
1:004be56: 
1:c387522:     public void testAckModeOfPoolNonXAWithTM() throws Exception {
1:c387522:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:c387522:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:c387522:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:b66559e:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE));
1:c387522: 
1:c387522:         // simple TM that is in a tx and will track syncs
1:577b29c:         pcf.setTransactionManager(new TransactionManager() {
1:c387522:             @Override
1:c387522:             public void begin() throws NotSupportedException, SystemException {
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:577b29c:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:577b29c:                 SystemException {
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:c387522:             public int getStatus() throws SystemException {
1:c387522:                 return Status.STATUS_ACTIVE;
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:c387522:             public Transaction getTransaction() throws SystemException {
1:c387522:                 return new Transaction() {
1:c387522:                     @Override
1:c387522:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:c387522:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:c387522:                         return false;
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:c387522:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
2:628a0cd:                         return false;
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:628a0cd:                     public int getStatus() throws SystemException {
1:c387522:                         return 0;
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:c387522:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:c387522:                         syncs.add(synch);
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:c387522:                     public void rollback() throws IllegalStateException, SystemException {
1:c387522:                     }
1:c387522: 
1:c387522:                     @Override
1:c387522:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:c387522:                     }
1:c387522:                 };
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:c387522:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:c387522:             }
1:c387522: 
1:c387522:             @Override
1:c387522:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:628a0cd:             }
1:c387522: 
1:628a0cd:             @Override
1:c387522:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:628a0cd:             }
1:670d9d8: 
1:628a0cd:             @Override
1:c387522:             public void setTransactionTimeout(int seconds) throws SystemException {
1:628a0cd:             }
1:628a0cd: 
1:628a0cd:             @Override
1:c387522:             public Transaction suspend() throws SystemException {
1:c387522:                 return null;
1:628a0cd:             }
1:c387522:         });
1:628a0cd: 
1:c387522:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:c387522:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:628a0cd: 
1:c387522:         assertEquals("client ack is enforce", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode());
1:c387522:         TopicPublisher publisher = session.createPublisher(topic);
1:c387522:         publisher.publish(session.createMessage());
1:c387522: 
1:c387522:         // simulate a commit
1:c387522:         for (Synchronization sync : syncs) {
1:c387522:             sync.beforeCompletion();
1:c387522:         }
1:c387522:         for (Synchronization sync : syncs) {
1:c387522:             sync.afterCompletion(1);
1:c387522:         }
1:c387522:         connection.close();
1:628a0cd:     }
1:628a0cd: 
1:577b29c:     public void testInstanceOf() throws Exception {
1:670d9d8:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:670d9d8:         assertTrue(pcf instanceof QueueConnectionFactory);
1:670d9d8:         assertTrue(pcf instanceof TopicConnectionFactory);
1:670d9d8:     }
1:670d9d8: 
1:670d9d8:     public void testBindable() throws Exception {
1:670d9d8:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:07c3db5:         assertTrue(pcf instanceof ObjectFactory);
1:577b29c:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, null) instanceof XaPooledConnectionFactory);
1:670d9d8:         assertTrue(pcf.isTmFromJndi());
1:670d9d8:     }
1:670d9d8: 
1:670d9d8:     public void testBindableEnvOverrides() throws Exception {
1:670d9d8:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:07c3db5:         assertTrue(pcf instanceof ObjectFactory);
1:670d9d8:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:670d9d8:         environment.put("tmFromJndi", String.valueOf(Boolean.FALSE));
1:670d9d8:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, environment) instanceof XaPooledConnectionFactory);
1:670d9d8:         assertFalse(pcf.isTmFromJndi());
1:670d9d8:     }
1:670d9d8: 
1:059fd2f:     public void testSenderAndPublisherDest() throws Exception {
1:059fd2f:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:577b29c:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1:059fd2f: 
1:059fd2f:         QueueConnection connection = pcf.createQueueConnection();
1:059fd2f:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:059fd2f:         QueueSender sender = session.createSender(session.createQueue("AA"));
1:059fd2f:         assertNotNull(sender.getQueue().getQueueName());
1:059fd2f: 
1:059fd2f:         connection.close();
1:059fd2f: 
1:059fd2f:         TopicConnection topicConnection = pcf.createTopicConnection();
1:059fd2f:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:059fd2f:         TopicPublisher topicPublisher = topicSession.createPublisher(topicSession.createTopic("AA"));
1:059fd2f:         assertNotNull(topicPublisher.getTopic().getTopicName());
1:059fd2f: 
1:059fd2f:         topicConnection.close();
1:a3578eb:     }
1:a3578eb: 
1:a3578eb:     public void testSessionArgsIgnoredWithTm() throws Exception {
1:a3578eb:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:577b29c:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1:a3578eb:         // simple TM that with no tx
1:a3578eb:         pcf.setTransactionManager(new TransactionManager() {
1:a3578eb:             @Override
1:a3578eb:             public void begin() throws NotSupportedException, SystemException {
1:a3578eb:                 throw new SystemException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:577b29c:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:577b29c:                 SystemException {
1:a3578eb:                 throw new IllegalStateException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public int getStatus() throws SystemException {
1:a3578eb:                 return Status.STATUS_NO_TRANSACTION;
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public Transaction getTransaction() throws SystemException {
1:a3578eb:                 throw new SystemException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:a3578eb:                 throw new IllegalStateException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:a3578eb:                 throw new IllegalStateException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:a3578eb:                 throw new IllegalStateException("NoTx");
1:a3578eb:             }
1:a3578eb: 
1:a3578eb:             @Override
1:a3578eb:             public void setTransactionTimeout(int seconds) throws SystemException {
1:059fd2f:             }
1:059fd2f: 
1:628a0cd:             @Override
1:a3578eb:             public Transaction suspend() throws SystemException {
1:a3578eb:                 throw new SystemException("NoTx");
1:628a0cd:             }
1:a3578eb:         });
1:628a0cd: 
1:a3578eb:         QueueConnection connection = pcf.createQueueConnection();
1:a3578eb:         // like ee tck
1:a3578eb:         assertNotNull("can create session(false, 0)", connection.createQueueSession(false, 0));
1:a3578eb: 
1:a3578eb:         connection.close();
1:a3578eb:     }
1:628a0cd: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.Xid;
/////////////////////////////////////////////////////////////////////////
1:         final Xid xid = createXid();
/////////////////////////////////////////////////////////////////////////
1:                         try {
1:                             xaRes.start(xid, 0);
1:                         } catch (XAException e) {
1:                             throw new SystemException(e.getMessage());
1:                         }
1:                         return true;
/////////////////////////////////////////////////////////////////////////
1:     static long txGenerator = 22;
1:     public Xid createXid() throws IOException {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1: 
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
commit:b66559e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jms.pool.PooledSession;
/////////////////////////////////////////////////////////////////////////
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test?broker.persistent=false"));
/////////////////////////////////////////////////////////////////////////
0: //        PooledSession pooledSession = (PooledSession) session;
0: //        assertTrue(pooledSession.getInternalSession() instanceof ActiveMQXASession);
/////////////////////////////////////////////////////////////////////////
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE));
commit:c387522
/////////////////////////////////////////////////////////////////////////
1:     public void testAckModeOfPoolNonXAWithTM() throws Exception {
1:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test?broker.persistent=false"));
1: 
1:         // simple TM that is in a tx and will track syncs
0:         pcf.setTransactionManager(new TransactionManager(){
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:             }
1: 
1:             @Override
0:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_ACTIVE;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 return new Transaction() {
1:                     @Override
1:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public int getStatus() throws SystemException {
1:                         return 0;
1:                     }
1: 
1:                     @Override
1:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:                         syncs.add(synch);
1:                     }
1: 
1:                     @Override
1:                     public void rollback() throws IllegalStateException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                     }
1:                 };
1: 
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 return null;
1:             }
1:         });
1: 
1:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         assertEquals("client ack is enforce", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode());
1:         TopicPublisher publisher = session.createPublisher(topic);
1:         publisher.publish(session.createMessage());
1: 
1:         // simulate a commit
1:         for (Synchronization sync : syncs) {
1:             sync.beforeCompletion();
1:         }
1:         for (Synchronization sync : syncs) {
1:             sync.afterCompletion(1);
1:         }
1:         connection.close();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:577b29c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1:         pcf.setTransactionManager(new TransactionManager() {
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:                 SystemException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         pcf.setTransactionManager(new TransactionManager() {
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:                 SystemException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testInstanceOf() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, null) instanceof XaPooledConnectionFactory);
/////////////////////////////////////////////////////////////////////////
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
/////////////////////////////////////////////////////////////////////////
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
/////////////////////////////////////////////////////////////////////////
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException,
1:                 SystemException {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:8b84374
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQXASession;
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue(session instanceof PooledSession);
0:         PooledSession pooledSession = (PooledSession) session;
0:         assertTrue(pooledSession.getInternalSession() instanceof ActiveMQXASession);
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:a3578eb
/////////////////////////////////////////////////////////////////////////
1:     public void testSessionArgsIgnoredWithTm() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test?broker.persistent=false"));
1:         // simple TM that with no tx
1:         pcf.setTransactionManager(new TransactionManager() {
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1: 
1:             @Override
0:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_NO_TRANSACTION;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1:         });
1: 
1:         QueueConnection connection = pcf.createQueueConnection();
1:         // like ee tck
1:         assertNotNull("can create session(false, 0)", connection.createQueueSession(false, 0));
1: 
1:         connection.close();
1:     }
commit:07c3db5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(pcf instanceof ObjectFactory);
1:         assertTrue(pcf instanceof ObjectFactory);
/////////////////////////////////////////////////////////////////////////
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test?broker.persistent=false"));
commit:059fd2f
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.BytesMessage;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
/////////////////////////////////////////////////////////////////////////
1:     public void testSenderAndPublisherDest() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1: 
1:         QueueConnection connection = pcf.createQueueConnection();
1:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueSender sender = session.createSender(session.createQueue("AA"));
1:         assertNotNull(sender.getQueue().getQueueName());
1: 
1:         connection.close();
1: 
1:         TopicConnection topicConnection = pcf.createTopicConnection();
1:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicPublisher topicPublisher = topicSession.createPublisher(topicSession.createTopic("AA"));
1:         assertNotNull(topicPublisher.getTopic().getTopicName());
1: 
1:         topicConnection.close();
1:     }
1: 
commit:670d9d8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.TopicConnectionFactory;
1: import javax.naming.spi.ObjectFactory;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void testInstanceOf() throws  Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:         assertTrue(pcf instanceof QueueConnectionFactory);
1:         assertTrue(pcf instanceof TopicConnectionFactory);
1:     }
1: 
1:     public void testBindable() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         assertTrue(pcf  instanceof ObjectFactory);
0:         assertTrue(((ObjectFactory)pcf).getObjectInstance(null, null, null, null) instanceof XaPooledConnectionFactory);
1:         assertTrue(pcf.isTmFromJndi());
1:     }
1: 
1:     public void testBindableEnvOverrides() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         assertTrue(pcf  instanceof ObjectFactory);
1:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:         environment.put("tmFromJndi", String.valueOf(Boolean.FALSE));
1:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, environment) instanceof XaPooledConnectionFactory);
1:         assertFalse(pcf.isTmFromJndi());
1:     }
1: 
commit:628a0cd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
1: import java.util.Vector;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.test.TestSupport;
1: 
1: public class XAConnectionPoolTest extends TestSupport {
1: 
1:     // https://issues.apache.org/jira/browse/AMQ-3251
1:     public void testAfterCompletionCanClose() throws Exception {
1:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1: 
1:         // simple TM that is in a tx and will track syncs
0:         pcf.setTransactionManager(new TransactionManager(){
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:             }
1: 
1:             @Override
0:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_ACTIVE;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 return new Transaction() {
1:                     @Override
1:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public int getStatus() throws SystemException {
1:                         return 0;
1:                     }
1: 
1:                     @Override
1:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:                         syncs.add(synch);
1:                     }
1: 
1:                     @Override
1:                     public void rollback() throws IllegalStateException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                     }
1:                 };
1: 
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 return null;
1:             }
1:         });
1: 
1:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicPublisher publisher = session.createPublisher(topic);
1:         publisher.publish(session.createMessage());
1: 
1:         // simulate a commit
1:         for (Synchronization sync : syncs) {
1:             sync.beforeCompletion();
1:         }
1:         for (Synchronization sync : syncs) {
1:             sync.afterCompletion(1);
1:         }
1:         connection.close();
1:     }
1: }
============================================================================