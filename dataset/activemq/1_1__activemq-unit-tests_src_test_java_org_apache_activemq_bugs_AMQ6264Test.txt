1:a28a091: /*
1:a28a091:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a28a091:  * contributor license agreements.  See the NOTICE file distributed with
1:a28a091:  * this work for additional information regarding copyright ownership.
1:a28a091:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a28a091:  * (the "License"); you may not use this file except in compliance with
1:a28a091:  * the License.  You may obtain a copy of the License at
1:a28a091:  *
1:a28a091:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a28a091:  *
1:a28a091:  * Unless required by applicable law or agreed to in writing, software
1:a28a091:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a28a091:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a28a091:  * See the License for the specific language governing permissions and
1:a28a091:  * limitations under the License.
1:a28a091:  */
1:a28a091: package org.apache.activemq.bugs;
1:a28a091: 
1:a28a091: import static org.junit.Assert.assertNotNull;
1:a28a091: 
1:a28a091: import java.util.UUID;
1:a28a091: 
1:a28a091: import javax.jms.BytesMessage;
1:a28a091: import javax.jms.Connection;
1:a28a091: import javax.jms.Message;
1:a28a091: import javax.jms.MessageConsumer;
1:a28a091: import javax.jms.MessageProducer;
1:a28a091: import javax.jms.Session;
1:a28a091: import javax.jms.Topic;
1:a28a091: 
1:a28a091: import org.apache.activemq.ActiveMQConnectionFactory;
1:a28a091: import org.apache.activemq.advisory.AdvisorySupport;
1:a28a091: import org.apache.activemq.broker.BrokerService;
1:a28a091: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a28a091: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a28a091: import org.apache.activemq.command.ActiveMQDestination;
1:a28a091: import org.junit.After;
1:a28a091: import org.junit.Before;
1:a28a091: import org.junit.Rule;
1:a28a091: import org.junit.Test;
1:a28a091: import org.junit.rules.TestName;
1:a28a091: import org.slf4j.Logger;
1:a28a091: import org.slf4j.LoggerFactory;
1:a28a091: 
1:a28a091: public class AMQ6264Test {
1:a28a091: 
1:a28a091:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6264Test.class);
1:a28a091: 
1:a28a091:     @Rule
1:a28a091:     public final TestName testName = new TestName();
1:a28a091: 
1:a28a091:     protected final int MESSAGE_COUNT = 2000;
1:a28a091: 
1:a28a091:     private final String topicPrefix = "topic.";
1:a28a091:     private final String topicFilter = topicPrefix + ">";
1:a28a091:     private final String topicA = "topic.A";
1:a28a091: 
1:a28a091:     private BrokerService broker;
1:a28a091:     private Connection connection;
1:a28a091:     private String connectionURI;
1:a28a091: 
1:a28a091:     @Test(timeout = 60000)
1:a28a091:     public void testSlowConsumerAdvisory() throws Exception {
1:a28a091:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a28a091:         Topic topic = session.createTopic(topicFilter);
1:a28a091:         MessageConsumer consumer = session.createDurableSubscriber(topic, testName.getMethodName());
1:a28a091:         assertNotNull(consumer);
1:a28a091: 
1:a28a091:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic(
1:a28a091:             ActiveMQDestination.createDestination(topicA, ActiveMQDestination.TOPIC_TYPE));
1:a28a091:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a28a091:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:a28a091: 
1:a28a091:         // start throwing messages at the consumer one for an ongoing series of
1:a28a091:         // matching topics for the subscription's filter.
1:a28a091:         MessageProducer producer = session.createProducer(null);
1:a28a091: 
1:a28a091:         // Send one to the destination where we want a matching advisory
1:a28a091:         producer.send(session.createTopic(topicA), session.createMessage());
1:a28a091: 
1:a28a091:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:a28a091:             BytesMessage m = session.createBytesMessage();
1:a28a091:             m.writeBytes(new byte[1024]);
1:a28a091:             Topic newTopic = session.createTopic(topicPrefix + UUID.randomUUID().toString());
1:a28a091:             LOG.debug("Sending message to next topic: {}", newTopic);
1:a28a091:             producer.send(newTopic, m);
1:a28a091:         }
1:a28a091: 
1:a28a091:         Message msg = advisoryConsumer.receive(1000);
1:a28a091:         assertNotNull(msg);
1:a28a091:     }
1:a28a091: 
1:a28a091:     @Before
1:a28a091:     public void setUp() throws Exception {
1:a28a091:         broker = createBroker();
1:a28a091: 
1:a28a091:         connectionURI = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:a28a091: 
1:a28a091:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:a28a091:         connection = factory.createConnection();
1:a28a091:         connection.setClientID(getClass().getSimpleName());
1:a28a091:         connection.start();
1:a28a091:     }
1:a28a091: 
1:a28a091:     @After
1:a28a091:     public void tearDown() throws Exception {
1:a28a091:         connection.close();
1:a28a091:         if (broker != null) {
1:a28a091:             broker.stop();
1:a28a091:         }
1:a28a091:     }
1:a28a091: 
1:a28a091:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:a28a091:         return new ActiveMQConnectionFactory(connectionURI);
1:a28a091:     }
1:a28a091: 
1:a28a091:     protected BrokerService createBroker() throws Exception {
1:a28a091:         BrokerService answer = new BrokerService();
1:a28a091: 
1:a28a091:         answer.setPersistent(false);
1:a28a091:         PolicyEntry policy = new PolicyEntry();
1:a28a091:         policy.setAdvisoryForSlowConsumers(true);
1:a28a091:         policy.setProducerFlowControl(false);
1:a28a091:         PolicyMap pMap = new PolicyMap();
1:a28a091:         pMap.setDefaultEntry(policy);
1:a28a091: 
1:a28a091:         answer.setUseJmx(true);
1:a28a091:         answer.setDestinationPolicy(pMap);
1:a28a091:         answer.addConnector("tcp://0.0.0.0:0");
1:a28a091:         answer.setDeleteAllMessagesOnStartup(true);
1:a28a091:         answer.start();
1:a28a091: 
1:a28a091:         return answer;
1:a28a091:     }
1:a28a091: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a28a091
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.UUID;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ6264Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6264Test.class);
1: 
1:     @Rule
1:     public final TestName testName = new TestName();
1: 
1:     protected final int MESSAGE_COUNT = 2000;
1: 
1:     private final String topicPrefix = "topic.";
1:     private final String topicFilter = topicPrefix + ">";
1:     private final String topicA = "topic.A";
1: 
1:     private BrokerService broker;
1:     private Connection connection;
1:     private String connectionURI;
1: 
1:     @Test(timeout = 60000)
1:     public void testSlowConsumerAdvisory() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicFilter);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, testName.getMethodName());
1:         assertNotNull(consumer);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic(
1:             ActiveMQDestination.createDestination(topicA, ActiveMQDestination.TOPIC_TYPE));
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1: 
1:         // start throwing messages at the consumer one for an ongoing series of
1:         // matching topics for the subscription's filter.
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         // Send one to the destination where we want a matching advisory
1:         producer.send(session.createTopic(topicA), session.createMessage());
1: 
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = session.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             Topic newTopic = session.createTopic(topicPrefix + UUID.randomUUID().toString());
1:             LOG.debug("Sending message to next topic: {}", newTopic);
1:             producer.send(newTopic, m);
1:         }
1: 
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1: 
1:         connectionURI = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:         connection = factory.createConnection();
1:         connection.setClientID(getClass().getSimpleName());
1:         connection.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         connection.close();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionURI);
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1: 
1:         answer.setPersistent(false);
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setProducerFlowControl(false);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         answer.setUseJmx(true);
1:         answer.setDestinationPolicy(pMap);
1:         answer.addConnector("tcp://0.0.0.0:0");
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.start();
1: 
1:         return answer;
1:     }
1: }
============================================================================