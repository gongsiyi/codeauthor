1:7a11f59: /**
1:7a11f59:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a11f59:  * contributor license agreements.  See the NOTICE file distributed with
1:7a11f59:  * this work for additional information regarding copyright ownership.
1:7a11f59:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a11f59:  * (the "License"); you may not use this file except in compliance with
1:7a11f59:  * the License.  You may obtain a copy of the License at
1:7a11f59:  *
1:7a11f59:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7a11f59:  *
1:7a11f59:  * Unless required by applicable law or agreed to in writing, software
1:7a11f59:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a11f59:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a11f59:  * See the License for the specific language governing permissions and
1:7a11f59:  * limitations under the License.
1:7a11f59:  */
7:7a11f59: 
1:7a11f59: package org.apache.activemq.broker.scheduler;
1:7a11f59: 
1:7a11f59: import static org.junit.Assert.assertEquals;
1:7a11f59: 
1:7a11f59: import java.util.concurrent.CountDownLatch;
1:7a11f59: import java.util.concurrent.TimeUnit;
1:7a11f59: 
1:7a11f59: import javax.jms.Connection;
1:7a11f59: import javax.jms.Message;
1:7a11f59: import javax.jms.MessageConsumer;
1:7a11f59: import javax.jms.MessageListener;
1:7a11f59: import javax.jms.MessageProducer;
1:7a11f59: import javax.jms.Session;
1:7a11f59: import javax.jms.TextMessage;
1:7a11f59: 
1:7a11f59: import org.apache.activemq.ScheduledMessage;
1:7a11f59: import org.junit.Test;
1:7a11f59: 
1:433912f: public class JobSchedulerTxTest extends JobSchedulerTestSupport {
1:7a11f59: 
1:7a11f59:     @Test
1:7a11f59:     public void testTxSendWithRollback() throws Exception {
1:7a11f59:         final int COUNT = 10;
1:7a11f59:         Connection connection = createConnection();
1:7a11f59: 
1:7a11f59:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a11f59:         MessageConsumer consumer = session.createConsumer(destination);
1:7a11f59:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:7a11f59:         consumer.setMessageListener(new MessageListener() {
1:7a11f59:             @Override
1:7a11f59:             public void onMessage(Message message) {
1:7a11f59:                 latch.countDown();
7:7a11f59:             }
1:7a11f59:         });
1:7a11f59: 
1:7a11f59:         connection.start();
1:7a11f59:         long time = 5000;
1:7a11f59:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:7a11f59:         MessageProducer producer = producerSession.createProducer(destination);
1:7a11f59: 
1:7a11f59:         for (int i = 0; i < COUNT; ++i) {
1:7a11f59:             TextMessage message = session.createTextMessage("test msg");
1:7a11f59:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:7a11f59:             producer.send(message);
1:7a11f59:         }
1:7a11f59:         producer.close();
1:7a11f59:         producerSession.rollback();
1:7a11f59: 
1:7a11f59:         // make sure the message isn't delivered early
1:7a11f59:         Thread.sleep(2000);
1:7a11f59:         assertEquals(COUNT, latch.getCount());
1:7a11f59:         latch.await(5, TimeUnit.SECONDS);
1:7a11f59:         assertEquals(COUNT, latch.getCount());
1:7a11f59:     }
1:7a11f59: 
1:7a11f59:     @Test
1:7a11f59:     public void testTxSendWithCommit() throws Exception {
1:7a11f59:         final int COUNT = 10;
1:7a11f59:         Connection connection = createConnection();
1:7a11f59: 
1:7a11f59:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a11f59:         MessageConsumer consumer = session.createConsumer(destination);
1:7a11f59:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:7a11f59:         consumer.setMessageListener(new MessageListener() {
1:7a11f59:             @Override
1:7a11f59:             public void onMessage(Message message) {
1:7a11f59:                 latch.countDown();
1:7a11f59:             }
1:7a11f59:         });
1:7a11f59: 
1:7a11f59:         connection.start();
1:7a11f59:         long time = 5000;
1:7a11f59:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:7a11f59:         MessageProducer producer = producerSession.createProducer(destination);
1:7a11f59: 
1:7a11f59:         for (int i = 0; i < COUNT; ++i) {
1:7a11f59:             TextMessage message = session.createTextMessage("test msg");
1:7a11f59:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:7a11f59:             producer.send(message);
1:7a11f59:         }
1:7a11f59:         producer.close();
1:7a11f59:         producerSession.commit();
1:7a11f59: 
1:7a11f59:         // make sure the message isn't delivered early
1:7a11f59:         Thread.sleep(2000);
1:7a11f59:         assertEquals(COUNT, latch.getCount());
1:7a11f59:         latch.await(5, TimeUnit.SECONDS);
1:7a11f59:         assertEquals(0, latch.getCount());
1:7a11f59:     }
1:7a11f59: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class JobSchedulerTxTest extends JobSchedulerTestSupport {
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7a11f59
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
0: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.util.IOHelper;
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: 
0: public class JobSchedulerTxTest {
1: 
0:     private BrokerService broker;
0:     private final String connectionUri = "vm://localhost";
0:     private final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
0:     private final ActiveMQQueue destination = new ActiveMQQueue("Target.Queue");
1: 
0:     @Before
0:     public void setUp() throws Exception {
0:         broker = createBroker();
0:         broker.start();
0:         broker.waitUntilStarted();
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testTxSendWithRollback() throws Exception {
1:         final int COUNT = 10;
1:         Connection connection = createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         connection.start();
1:         long time = 5000;
1:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
1:         for (int i = 0; i < COUNT; ++i) {
1:             TextMessage message = session.createTextMessage("test msg");
1:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:             producer.send(message);
1:         }
1:         producer.close();
1:         producerSession.rollback();
1: 
1:         // make sure the message isn't delivered early
1:         Thread.sleep(2000);
1:         assertEquals(COUNT, latch.getCount());
1:         latch.await(5, TimeUnit.SECONDS);
1:         assertEquals(COUNT, latch.getCount());
1:     }
1: 
1:     @Test
1:     public void testTxSendWithCommit() throws Exception {
1:         final int COUNT = 10;
1:         Connection connection = createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         connection.start();
1:         long time = 5000;
1:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
1:         for (int i = 0; i < COUNT; ++i) {
1:             TextMessage message = session.createTextMessage("test msg");
1:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:             producer.send(message);
1:         }
1:         producer.close();
1:         producerSession.commit();
1: 
1:         // make sure the message isn't delivered early
1:         Thread.sleep(2000);
1:         assertEquals(COUNT, latch.getCount());
1:         latch.await(5, TimeUnit.SECONDS);
1:         assertEquals(0, latch.getCount());
1:     }
1: 
0:     protected Connection createConnection() throws Exception {
0:         return cf.createConnection();
1:     }
1: 
0:     protected BrokerService createBroker() throws Exception {
0:         return createBroker(true);
1:     }
1: 
0:     protected BrokerService createBroker(boolean delete) throws Exception {
0:         File schedulerDirectory = new File("target/scheduler");
0:         if (delete) {
0:             IOHelper.mkdirs(schedulerDirectory);
0:             IOHelper.deleteChildren(schedulerDirectory);
1:         }
0:         BrokerService answer = new BrokerService();
0:         answer.setPersistent(true);
0:         answer.setDeleteAllMessagesOnStartup(true);
0:         answer.setDataDirectory("target");
0:         answer.setSchedulerDirectoryFile(schedulerDirectory);
0:         answer.setSchedulerSupport(true);
0:         answer.setUseJmx(false);
0:         answer.addConnector(connectionUri);
0:         return answer;
1:     }
1: }
============================================================================