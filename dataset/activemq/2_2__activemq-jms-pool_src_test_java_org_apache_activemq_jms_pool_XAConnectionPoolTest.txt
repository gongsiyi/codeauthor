1:b66559e: /**
1:b66559e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b66559e:  * contributor license agreements.  See the NOTICE file distributed with
1:b66559e:  * this work for additional information regarding copyright ownership.
1:b66559e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b66559e:  * (the "License"); you may not use this file except in compliance with
1:b66559e:  * the License.  You may obtain a copy of the License at
1:b66559e:  *
1:b66559e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b66559e:  *
1:b66559e:  * Unless required by applicable law or agreed to in writing, software
1:b66559e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b66559e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b66559e:  * See the License for the specific language governing permissions and
1:b66559e:  * limitations under the License.
1:b66559e:  */
1:b66559e: package org.apache.activemq.jms.pool;
1:b66559e: 
1:e6597c4: import static org.junit.Assert.assertEquals;
1:e6597c4: import static org.junit.Assert.assertFalse;
1:e6597c4: import static org.junit.Assert.assertNotNull;
1:e6597c4: import static org.junit.Assert.assertTrue;
1:e6597c4: 
1:004be56: import java.io.ByteArrayOutputStream;
1:004be56: import java.io.DataOutputStream;
1:004be56: import java.io.IOException;
1:b66559e: import java.util.Hashtable;
1:b66559e: import java.util.Vector;
1:b66559e: 
1:577b29c: import javax.jms.JMSException;
1:b66559e: import javax.jms.QueueConnection;
1:b66559e: import javax.jms.QueueConnectionFactory;
1:b66559e: import javax.jms.QueueSender;
1:b66559e: import javax.jms.QueueSession;
1:b66559e: import javax.jms.Session;
1:b66559e: import javax.jms.TopicConnection;
1:b66559e: import javax.jms.TopicConnectionFactory;
1:b66559e: import javax.jms.TopicPublisher;
1:b66559e: import javax.jms.TopicSession;
1:577b29c: import javax.jms.XAConnection;
1:577b29c: import javax.jms.XAConnectionFactory;
1:b66559e: import javax.naming.spi.ObjectFactory;
1:b66559e: import javax.transaction.HeuristicMixedException;
1:b66559e: import javax.transaction.HeuristicRollbackException;
1:b66559e: import javax.transaction.InvalidTransactionException;
1:b66559e: import javax.transaction.NotSupportedException;
1:b66559e: import javax.transaction.RollbackException;
1:b66559e: import javax.transaction.Status;
1:b66559e: import javax.transaction.Synchronization;
1:b66559e: import javax.transaction.SystemException;
1:b66559e: import javax.transaction.Transaction;
1:b66559e: import javax.transaction.TransactionManager;
1:004be56: import javax.transaction.xa.XAException;
1:b66559e: import javax.transaction.xa.XAResource;
1:004be56: import javax.transaction.xa.Xid;
1:b66559e: 
1:b66559e: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:b66559e: import org.apache.activemq.ActiveMQXASession;
1:b66559e: import org.apache.activemq.command.ActiveMQTopic;
1:e6597c4: import org.junit.Test;
1:b66559e: 
1:e6597c4: public class XAConnectionPoolTest extends JmsPoolTestSupport {
1:b66559e: 
1:b66559e:     // https://issues.apache.org/jira/browse/AMQ-3251
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testAfterCompletionCanClose() throws Exception {
1:b66559e:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:b66559e:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:577b29c:         pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false")));
1:004be56: 
1:004be56:         final Xid xid = createXid();
1:004be56: 
1:b66559e:         // simple TM that is in a tx and will track syncs
1:b66559e:         pcf.setTransactionManager(new TransactionManager(){
1:b66559e:             @Override
1:b66559e:             public void begin() throws NotSupportedException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public int getStatus() throws SystemException {
1:b66559e:                 return Status.STATUS_ACTIVE;
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction getTransaction() throws SystemException {
1:b66559e:                 return new Transaction() {
1:b66559e:                     @Override
1:b66559e:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
2:b66559e:                         return false;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:004be56:                         try {
1:004be56:                             xaRes.start(xid, 0);
1:004be56:                         } catch (XAException e) {
1:004be56:                             throw new SystemException(e.getMessage());
1:004be56:                         }
1:004be56:                         return true;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public int getStatus() throws SystemException {
1:b66559e:                         return 0;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:b66559e:                         syncs.add(synch);
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void rollback() throws IllegalStateException, SystemException {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:b66559e:                     }
1:b66559e:                 };
1:b66559e: 
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setTransactionTimeout(int seconds) throws SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction suspend() throws SystemException {
1:b66559e:                 return null;
1:b66559e:             }
1:b66559e:         });
1:b66559e: 
1:b66559e:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:b66559e:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b66559e: 
1:b66559e:         assertTrue(session instanceof PooledSession);
1:b66559e:         PooledSession pooledSession = (PooledSession) session;
1:b66559e:         assertTrue(pooledSession.getInternalSession() instanceof ActiveMQXASession);
1:b66559e: 
1:b66559e:         TopicPublisher publisher = session.createPublisher(topic);
1:b66559e:         publisher.publish(session.createMessage());
1:b66559e: 
1:b66559e:         // simulate a commit
1:b66559e:         for (Synchronization sync : syncs) {
1:b66559e:             sync.beforeCompletion();
1:b66559e:         }
1:b66559e:         for (Synchronization sync : syncs) {
1:b66559e:             sync.afterCompletion(1);
1:b66559e:         }
1:b66559e:         connection.close();
1:b66559e: 
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:004be56:     static long txGenerator = 22;
1:004be56:     public Xid createXid() throws IOException {
1:004be56: 
1:004be56:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:004be56:         DataOutputStream os = new DataOutputStream(baos);
1:004be56:         os.writeLong(++txGenerator);
1:004be56:         os.close();
1:004be56:         final byte[] bs = baos.toByteArray();
1:004be56: 
1:004be56:         return new Xid() {
1:004be56: 
1:004be56:             public int getFormatId() {
1:004be56:                 return 86;
1:004be56:             }
1:004be56: 
1:004be56:             public byte[] getGlobalTransactionId() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56: 
1:004be56:             public byte[] getBranchQualifier() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56:         };
1:004be56:     }
1:004be56: 
1:004be56: 
1:004be56: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testAckModeOfPoolNonXAWithTM() throws Exception {
1:b66559e:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:b66559e:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:e6597c4:         pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory(
1:e6597c4:             "vm://test?broker.persistent=false&broker.useJmx=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE)));
1:b66559e: 
1:b66559e:         // simple TM that is in a tx and will track syncs
1:b66559e:         pcf.setTransactionManager(new TransactionManager(){
1:b66559e:             @Override
1:b66559e:             public void begin() throws NotSupportedException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public int getStatus() throws SystemException {
1:b66559e:                 return Status.STATUS_ACTIVE;
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction getTransaction() throws SystemException {
1:b66559e:                 return new Transaction() {
1:b66559e:                     @Override
1:b66559e:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:b66559e:                         return false;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:b66559e:                         return false;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public int getStatus() throws SystemException {
1:b66559e:                         return 0;
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:b66559e:                         syncs.add(synch);
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void rollback() throws IllegalStateException, SystemException {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:b66559e:                     }
1:b66559e:                 };
1:b66559e: 
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setTransactionTimeout(int seconds) throws SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction suspend() throws SystemException {
1:b66559e:                 return null;
1:b66559e:             }
1:b66559e:         });
1:b66559e: 
1:b66559e:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:b66559e:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b66559e: 
1:b66559e:         assertEquals("client ack is enforce", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode());
1:b66559e:         TopicPublisher publisher = session.createPublisher(topic);
1:b66559e:         publisher.publish(session.createMessage());
1:b66559e: 
1:b66559e:         // simulate a commit
1:b66559e:         for (Synchronization sync : syncs) {
1:b66559e:             sync.beforeCompletion();
1:b66559e:         }
1:b66559e:         for (Synchronization sync : syncs) {
1:b66559e:             sync.afterCompletion(1);
1:b66559e:         }
1:b66559e:         connection.close();
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testInstanceOf() throws  Exception {
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:b66559e:         assertTrue(pcf instanceof QueueConnectionFactory);
1:b66559e:         assertTrue(pcf instanceof TopicConnectionFactory);
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testBindable() throws Exception {
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:b66559e:         assertTrue(pcf instanceof ObjectFactory);
1:b66559e:         assertTrue(((ObjectFactory)pcf).getObjectInstance(null, null, null, null) instanceof XaPooledConnectionFactory);
1:b66559e:         assertTrue(pcf.isTmFromJndi());
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testBindableEnvOverrides() throws Exception {
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:b66559e:         assertTrue(pcf instanceof ObjectFactory);
1:b66559e:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:b66559e:         environment.put("tmFromJndi", String.valueOf(Boolean.FALSE));
1:b66559e:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, environment) instanceof XaPooledConnectionFactory);
1:b66559e:         assertFalse(pcf.isTmFromJndi());
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testSenderAndPublisherDest() throws Exception {
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:e6597c4:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(
1:e6597c4:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1:b66559e: 
1:b66559e:         QueueConnection connection = pcf.createQueueConnection();
1:b66559e:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:b66559e:         QueueSender sender = session.createSender(session.createQueue("AA"));
1:b66559e:         assertNotNull(sender.getQueue().getQueueName());
1:b66559e: 
1:b66559e:         connection.close();
1:b66559e: 
1:b66559e:         TopicConnection topicConnection = pcf.createTopicConnection();
1:b66559e:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b66559e:         TopicPublisher topicPublisher = topicSession.createPublisher(topicSession.createTopic("AA"));
1:b66559e:         assertNotNull(topicPublisher.getTopic().getTopicName());
1:b66559e: 
1:b66559e:         topicConnection.close();
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:b66559e: 
1:e6597c4:     @Test(timeout = 60000)
1:b66559e:     public void testSessionArgsIgnoredWithTm() throws Exception {
1:b66559e:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:e6597c4:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(
1:e6597c4:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1:b66559e: 
1:b66559e:         // simple TM that with no tx
1:b66559e:         pcf.setTransactionManager(new TransactionManager() {
1:b66559e:             @Override
1:b66559e:             public void begin() throws NotSupportedException, SystemException {
1:b66559e:                 throw new SystemException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:b66559e:                 throw new IllegalStateException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public int getStatus() throws SystemException {
1:b66559e:                 return Status.STATUS_NO_TRANSACTION;
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction getTransaction() throws SystemException {
1:b66559e:                 throw new SystemException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:b66559e:                 throw new IllegalStateException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:b66559e:                 throw new IllegalStateException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:b66559e:                 throw new IllegalStateException("NoTx");
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public void setTransactionTimeout(int seconds) throws SystemException {
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             public Transaction suspend() throws SystemException {
1:b66559e:                 throw new SystemException("NoTx");
1:b66559e:             }
1:b66559e:         });
1:27ce49f: 
1:b66559e:         QueueConnection connection = pcf.createQueueConnection();
1:b66559e:         // like ee tck
1:b66559e:         assertNotNull("can create session(false, 0)", connection.createQueueSession(false, 0));
1:b66559e: 
1:b66559e:         connection.close();
1:27ce49f:         pcf.stop();
1:b66559e:     }
1:e6597c4: 
1:577b29c:     static class XAConnectionFactoryOnly implements XAConnectionFactory {
1:577b29c:         private final XAConnectionFactory connectionFactory;
2:577b29c: 
1:577b29c:         XAConnectionFactoryOnly(XAConnectionFactory connectionFactory) {
1:577b29c:             this.connectionFactory = connectionFactory;
1:b66559e:         }
1:577b29c: 
1:577b29c:         @Override
1:577b29c:         public XAConnection createXAConnection() throws JMSException {
1:577b29c:             return connectionFactory.createXAConnection();
1:577b29c:         }
1:577b29c: 
1:577b29c:         @Override
1:577b29c:         public XAConnection createXAConnection(String userName, String password) throws JMSException {
1:577b29c:             return connectionFactory.createXAConnection(userName, password);
1:577b29c:         }
1:577b29c:     }
1:577b29c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.Xid;
/////////////////////////////////////////////////////////////////////////
1: 
1:         final Xid xid = createXid();
1: 
/////////////////////////////////////////////////////////////////////////
1:                         try {
1:                             xaRes.start(xid, 0);
1:                         } catch (XAException e) {
1:                             throw new SystemException(e.getMessage());
1:                         }
1:                         return true;
/////////////////////////////////////////////////////////////////////////
1:     static long txGenerator = 22;
1:     public Xid createXid() throws IOException {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1: 
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
1: 
1: 
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import java.util.Hashtable;
1: import java.util.Vector;
1: 
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicConnectionFactory;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.naming.spi.ObjectFactory;
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.ActiveMQXASession;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.test.TestSupport;
1: 
0: public class XAConnectionPoolTest extends TestSupport {
1: 
1:     // https://issues.apache.org/jira/browse/AMQ-3251
1:     public void testAfterCompletionCanClose() throws Exception {
1:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1: 
1:         // simple TM that is in a tx and will track syncs
1:         pcf.setTransactionManager(new TransactionManager(){
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:             }
1: 
1:             @Override
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_ACTIVE;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 return new Transaction() {
1:                     @Override
1:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public int getStatus() throws SystemException {
1:                         return 0;
1:                     }
1: 
1:                     @Override
1:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:                         syncs.add(synch);
1:                     }
1: 
1:                     @Override
1:                     public void rollback() throws IllegalStateException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                     }
1:                 };
1: 
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 return null;
1:             }
1:         });
1: 
1:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         assertTrue(session instanceof PooledSession);
1:         PooledSession pooledSession = (PooledSession) session;
1:         assertTrue(pooledSession.getInternalSession() instanceof ActiveMQXASession);
1: 
1:         TopicPublisher publisher = session.createPublisher(topic);
1:         publisher.publish(session.createMessage());
1: 
1:         // simulate a commit
1:         for (Synchronization sync : syncs) {
1:             sync.beforeCompletion();
1:         }
1:         for (Synchronization sync : syncs) {
1:             sync.afterCompletion(1);
1:         }
1:         connection.close();
1:     }
1: 
1:     public void testAckModeOfPoolNonXAWithTM() throws Exception {
1:         final Vector<Synchronization> syncs = new Vector<Synchronization>();
1:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE));
1: 
1:         // simple TM that is in a tx and will track syncs
1:         pcf.setTransactionManager(new TransactionManager(){
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:             }
1: 
1:             @Override
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_ACTIVE;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 return new Transaction() {
1:                     @Override
1:                     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:                         return false;
1:                     }
1: 
1:                     @Override
1:                     public int getStatus() throws SystemException {
1:                         return 0;
1:                     }
1: 
1:                     @Override
1:                     public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException {
1:                         syncs.add(synch);
1:                     }
1: 
1:                     @Override
1:                     public void rollback() throws IllegalStateException, SystemException {
1:                     }
1: 
1:                     @Override
1:                     public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                     }
1:                 };
1: 
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 return null;
1:             }
1:         });
1: 
1:         TopicConnection connection = (TopicConnection) pcf.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         assertEquals("client ack is enforce", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode());
1:         TopicPublisher publisher = session.createPublisher(topic);
1:         publisher.publish(session.createMessage());
1: 
1:         // simulate a commit
1:         for (Synchronization sync : syncs) {
1:             sync.beforeCompletion();
1:         }
1:         for (Synchronization sync : syncs) {
1:             sync.afterCompletion(1);
1:         }
1:         connection.close();
1:     }
1: 
1:     public void testInstanceOf() throws  Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:         assertTrue(pcf instanceof QueueConnectionFactory);
1:         assertTrue(pcf instanceof TopicConnectionFactory);
1:     }
1: 
1:     public void testBindable() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:         assertTrue(pcf instanceof ObjectFactory);
1:         assertTrue(((ObjectFactory)pcf).getObjectInstance(null, null, null, null) instanceof XaPooledConnectionFactory);
1:         assertTrue(pcf.isTmFromJndi());
1:     }
1: 
1:     public void testBindableEnvOverrides() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
1:         assertTrue(pcf instanceof ObjectFactory);
1:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:         environment.put("tmFromJndi", String.valueOf(Boolean.FALSE));
1:         assertTrue(((ObjectFactory) pcf).getObjectInstance(null, null, null, environment) instanceof XaPooledConnectionFactory);
1:         assertFalse(pcf.isTmFromJndi());
1:     }
1: 
1:     public void testSenderAndPublisherDest() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1: 
1:         QueueConnection connection = pcf.createQueueConnection();
1:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueSender sender = session.createSender(session.createQueue("AA"));
1:         assertNotNull(sender.getQueue().getQueueName());
1: 
1:         connection.close();
1: 
1:         TopicConnection topicConnection = pcf.createTopicConnection();
1:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicPublisher topicPublisher = topicSession.createPublisher(topicSession.createTopic("AA"));
1:         assertNotNull(topicPublisher.getTopic().getTopicName());
1: 
1:         topicConnection.close();
1:     }
1: 
1:     public void testSessionArgsIgnoredWithTm() throws Exception {
1:         XaPooledConnectionFactory pcf = new XaPooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false"));
1:         // simple TM that with no tx
1:         pcf.setTransactionManager(new TransactionManager() {
1:             @Override
1:             public void begin() throws NotSupportedException, SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1: 
1:             @Override
1:             public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public int getStatus() throws SystemException {
1:                 return Status.STATUS_NO_TRANSACTION;
1:             }
1: 
1:             @Override
1:             public Transaction getTransaction() throws SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1: 
1:             @Override
1:             public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void setRollbackOnly() throws IllegalStateException, SystemException {
1:                 throw new IllegalStateException("NoTx");
1:             }
1: 
1:             @Override
1:             public void setTransactionTimeout(int seconds) throws SystemException {
1:             }
1: 
1:             @Override
1:             public Transaction suspend() throws SystemException {
1:                 throw new SystemException("NoTx");
1:             }
1:         });
1: 
1:         QueueConnection connection = pcf.createQueueConnection();
1:         // like ee tck
1:         assertNotNull("can create session(false, 0)", connection.createQueueSession(false, 0));
1: 
1:         connection.close();
1:     }
1: }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: 
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
/////////////////////////////////////////////////////////////////////////
1:         pcf.stop();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public class XAConnectionPoolTest extends JmsPoolTestSupport {
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory(
1:             "vm://test?broker.persistent=false&broker.useJmx=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE)));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(
1:             "vm://test?broker.persistent=false&broker.useJmx=false"));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(
1:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1: 
commit:577b29c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.XAConnection;
1: import javax.jms.XAConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false")));
/////////////////////////////////////////////////////////////////////////
0:         pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory("vm://test?broker.persistent=false&jms.xaAckMode=" + Session.CLIENT_ACKNOWLEDGE)));
/////////////////////////////////////////////////////////////////////////
1: 
1:     static class XAConnectionFactoryOnly implements XAConnectionFactory {
1:         private final XAConnectionFactory connectionFactory;
1: 
1:         XAConnectionFactoryOnly(XAConnectionFactory connectionFactory) {
1:             this.connectionFactory = connectionFactory;
1:         }
1: 
1:         @Override
1:         public XAConnection createXAConnection() throws JMSException {
1:             return connectionFactory.createXAConnection();
1:         }
1: 
1:         @Override
1:         public XAConnection createXAConnection(String userName, String password) throws JMSException {
1:             return connectionFactory.createXAConnection(userName, password);
1:         }
1:     }
============================================================================