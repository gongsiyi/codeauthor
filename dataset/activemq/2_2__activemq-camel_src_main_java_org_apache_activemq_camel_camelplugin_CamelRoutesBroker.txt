1:7ca2596: /**
1:7ca2596:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ca2596:  * contributor license agreements.  See the NOTICE file distributed with
1:7ca2596:  * this work for additional information regarding copyright ownership.
1:7ca2596:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ca2596:  * (the "License"); you may not use this file except in compliance with
1:7ca2596:  * the License.  You may obtain a copy of the License at
1:7ca2596:  *
1:7ca2596:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ca2596:  *
1:7ca2596:  * Unless required by applicable law or agreed to in writing, software
1:7ca2596:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ca2596:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ca2596:  * See the License for the specific language governing permissions and
1:7ca2596:  * limitations under the License.
1:7ca2596:  */
1:7ca2596: 
1:7ca2596: package org.apache.activemq.camel.camelplugin;
1:7ca2596: 
1:7ca2596: import org.apache.activemq.broker.Broker;
1:7ca2596: import org.apache.activemq.broker.BrokerContext;
1:7ca2596: import org.apache.activemq.broker.BrokerFilter;
1:7ca2596: import org.apache.activemq.broker.ConnectionContext;
1:7ca2596: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:7ca2596: import org.apache.activemq.broker.ProducerBrokerExchange;
1:7ca2596: import org.apache.activemq.broker.region.Destination;
1:7ca2596: import org.apache.activemq.broker.region.MessageReference;
1:7ca2596: import org.apache.activemq.broker.region.Subscription;
1:7ca2596: import org.apache.activemq.command.ConsumerControl;
1:7ca2596: import org.apache.activemq.command.Message;
1:7ca2596: import org.apache.activemq.command.MessageAck;
1:7ca2596: import org.apache.activemq.command.MessageDispatch;
1:7ca2596: import org.apache.activemq.command.MessagePull;
1:7ca2596: import org.apache.activemq.command.Response;
1:7ca2596: import org.apache.activemq.command.TransactionId;
1:7ca2596: import org.apache.activemq.spring.Utils;
1:7ca2596: import org.apache.activemq.usage.Usage;
1:7ca2596: import org.apache.camel.impl.DefaultCamelContext;
1:7ca2596: import org.apache.camel.model.RouteDefinition;
1:7ca2596: import org.apache.camel.model.RoutesDefinition;
1:7ca2596: import org.slf4j.Logger;
1:7ca2596: import org.slf4j.LoggerFactory;
1:7ca2596: import org.springframework.core.io.Resource;
1:7ca2596: 
1:7ca2596: import java.io.File;
1:7ca2596: import java.io.InputStream;
1:7ca2596: import java.util.List;
1:7ca2596: import java.util.concurrent.CountDownLatch;
1:7ca2596: 
1:7ca2596: /**
1:7ca2596:  * A StatisticsBroker You can retrieve a Map Message for a Destination - or
1:7ca2596:  * Broker containing statistics as key-value pairs The message must contain a
1:7ca2596:  * replyTo Destination - else its ignored
1:7ca2596:  *
1:7ca2596:  */
1:7ca2596: public class CamelRoutesBroker extends BrokerFilter {
1:7ca2596:     private static Logger LOG = LoggerFactory.getLogger(CamelRoutesBroker.class);
1:7ca2596:     private String routesFile = "";
1:7ca2596:     private int checkPeriod = 1000;
1:7ca2596:     private Resource theRoutes;
1:7ca2596:     private DefaultCamelContext camelContext;
1:7ca2596:     private long lastRoutesModified = -1;
1:7ca2596:     private CountDownLatch countDownLatch;
1:7ca2596: 
1:7ca2596:     /**
1:7ca2596:      * Overide methods to pause the broker whilst camel routes are loaded
1:7ca2596:      */
1:7ca2596:     @Override
1:7ca2596:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.send(producerExchange, message);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.acknowledge(consumerExchange, ack);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         return super.messagePull(context, pull);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.processConsumerControl(consumerExchange, control);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void reapplyInterceptor() {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.reapplyInterceptor();
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.beginTransaction(context, xid);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         return super.prepareTransaction(context, xid);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.rollbackTransaction(context, xid);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.commitTransaction(context, xid, onePhase);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.forgetTransaction(context, transactionId);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.preProcessDispatch(messageDispatch);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.postProcessDispatch(messageDispatch);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.messageConsumed(context, messageReference);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.messageDelivered(context, messageReference);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.messageDiscarded(context, sub, messageReference);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:5076808:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.isFull(context, destination, usage);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void nowMasterBroker() {
1:7ca2596:         blockWhileLoadingCamelRoutes();
1:7ca2596:         super.nowMasterBroker();
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     /*
1:7ca2596:      * Properties
1:7ca2596:      */
1:7ca2596: 
1:7ca2596:     public String getRoutesFile() {
1:7ca2596:         return routesFile;
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     public void setRoutesFile(String routesFile) {
1:7ca2596:         this.routesFile = routesFile;
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     public int getCheckPeriod() {
1:7ca2596:         return checkPeriod;
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     public void setCheckPeriod(int checkPeriod) {
1:7ca2596:         this.checkPeriod = checkPeriod;
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     public CamelRoutesBroker(Broker next) {
1:7ca2596:         super(next);
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void start() throws Exception {
1:7ca2596:         super.start();
1:7ca2596:         LOG.info("Starting CamelRoutesBroker");
1:7ca2596: 
1:7ca2596:         camelContext = new DefaultCamelContext();
1:7ca2596:         camelContext.setName("EmbeddedCamel-" + getBrokerName());
1:7ca2596:         camelContext.start();
1:7ca2596: 
1:7ca2596:         getBrokerService().getScheduler().executePeriodically(new Runnable() {
1:7ca2596:             @Override
1:7ca2596:             public void run() {
1:7ca2596:                 try {
1:7ca2596:                     loadCamelRoutes();
1:7ca2596:                 } catch (Throwable e) {
1:7ca2596:                     LOG.error("Failed to load Camel Routes", e);
1:7ca2596:                 }
1:7ca2596: 
1:7ca2596:             }
1:7ca2596:         }, getCheckPeriod());
1:7ca2596:     }
1:7ca2596: 
1:7ca2596: 
1:7ca2596: 
1:7ca2596:     @Override
1:7ca2596:     public void stop() throws Exception {
1:7ca2596:         CountDownLatch latch = this.countDownLatch;
1:7ca2596:         if (latch != null){
1:7ca2596:             latch.countDown();
1:7ca2596:         }
1:7ca2596:         if (camelContext != null){
1:7ca2596:             camelContext.stop();
1:7ca2596:         }
1:7ca2596:         super.stop();
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     private void loadCamelRoutes() throws Exception{
1:7ca2596:         if (theRoutes == null) {
1:7ca2596:             String fileToUse = getRoutesFile();
1:7ca2596:             if (fileToUse == null || fileToUse.trim().isEmpty()) {
1:7ca2596:                 BrokerContext brokerContext = getBrokerService().getBrokerContext();
1:7ca2596:                 if (brokerContext != null) {
1:7ca2596:                     String uri = brokerContext.getConfigurationUrl();
1:7ca2596:                     Resource resource = Utils.resourceFromString(uri);
1:7ca2596:                     if (resource.exists()) {
1:7ca2596:                         fileToUse = resource.getFile().getParent();
1:7ca2596:                         fileToUse += File.separator;
1:7ca2596:                         fileToUse += "routes.xml";
1:7ca2596:                     }
1:7ca2596:                 }
1:7ca2596:             }
1:7ca2596:             if (fileToUse != null && !fileToUse.isEmpty()){
1:7ca2596:                 theRoutes = Utils.resourceFromString(fileToUse);
1:7ca2596:                 setRoutesFile(theRoutes.getFile().getAbsolutePath());
1:7ca2596:             }
1:7ca2596:         }
1:7ca2596:         if (!isStopped() && camelContext != null && theRoutes != null && theRoutes.exists()){
1:7ca2596:             long lastModified = theRoutes.lastModified();
1:7ca2596:             if (lastModified != lastRoutesModified){
1:7ca2596:                 CountDownLatch latch = new CountDownLatch(1);
1:7ca2596:                 this.countDownLatch = latch;
1:7ca2596:                 lastRoutesModified = lastModified;
1:7ca2596: 
1:7ca2596:                 List<RouteDefinition> currentRoutes = camelContext.getRouteDefinitions();
1:7ca2596:                 for (RouteDefinition rd:currentRoutes){
1:7ca2596:                     camelContext.stopRoute(rd);
1:7ca2596:                     camelContext.removeRouteDefinition(rd);
1:7ca2596:                 }
1:7ca2596:                 InputStream is = theRoutes.getInputStream();
1:7ca2596:                 RoutesDefinition routesDefinition = camelContext.loadRoutesDefinition(is);
1:7ca2596: 
1:7ca2596:                 for (RouteDefinition rd: routesDefinition.getRoutes()){
1:7ca2596:                     camelContext.startRoute(rd);
1:7ca2596:                 }
1:7ca2596:                 is.close();
1:7ca2596:                 latch.countDown();
1:7ca2596:                 this.countDownLatch=null;
1:7ca2596:             }
1:7ca2596: 
1:7ca2596: 
1:7ca2596:         }
1:7ca2596:     }
1:7ca2596: 
1:7ca2596:     private void blockWhileLoadingCamelRoutes(){
1:7ca2596:         CountDownLatch latch = this.countDownLatch;
1:7ca2596:         if (latch != null){
1:7ca2596:             try {
1:7ca2596:                 latch.await();
1:7ca2596:             } catch (InterruptedException e) {
1:7ca2596:                 Thread.currentThread().interrupt();
1:7ca2596:             }
1:7ca2596:         }
1:7ca2596:     }
1:7ca2596: 
1:7ca2596: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
author:Rob Davies
-------------------------------------------------------------------------------
commit:7ca2596
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.camel.camelplugin;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ConsumerControl;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.spring.Utils;
1: import org.apache.activemq.usage.Usage;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.apache.camel.model.RouteDefinition;
1: import org.apache.camel.model.RoutesDefinition;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.Resource;
1: 
1: import java.io.File;
1: import java.io.InputStream;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: 
1: /**
1:  * A StatisticsBroker You can retrieve a Map Message for a Destination - or
1:  * Broker containing statistics as key-value pairs The message must contain a
1:  * replyTo Destination - else its ignored
1:  *
1:  */
1: public class CamelRoutesBroker extends BrokerFilter {
1:     private static Logger LOG = LoggerFactory.getLogger(CamelRoutesBroker.class);
1:     private String routesFile = "";
1:     private int checkPeriod = 1000;
1:     private Resource theRoutes;
1:     private DefaultCamelContext camelContext;
1:     private long lastRoutesModified = -1;
1:     private CountDownLatch countDownLatch;
1: 
1:     /**
1:      * Overide methods to pause the broker whilst camel routes are loaded
1:      */
1:     @Override
1:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.send(producerExchange, message);
1:     }
1: 
1:     @Override
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.acknowledge(consumerExchange, ack);
1:     }
1: 
1:     @Override
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         return super.messagePull(context, pull);
1:     }
1: 
1:     @Override
1:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:         blockWhileLoadingCamelRoutes();
1:         super.processConsumerControl(consumerExchange, control);
1:     }
1: 
1:     @Override
1:     public void reapplyInterceptor() {
1:         blockWhileLoadingCamelRoutes();
1:         super.reapplyInterceptor();
1:     }
1: 
1:     @Override
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.beginTransaction(context, xid);
1:     }
1: 
1:     @Override
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         return super.prepareTransaction(context, xid);
1:     }
1: 
1:     @Override
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.rollbackTransaction(context, xid);
1:     }
1: 
1:     @Override
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.commitTransaction(context, xid, onePhase);
1:     }
1: 
1:     @Override
1:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:         blockWhileLoadingCamelRoutes();
1:         super.forgetTransaction(context, transactionId);
1:     }
1: 
1:     @Override
1:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:         blockWhileLoadingCamelRoutes();
1:         super.preProcessDispatch(messageDispatch);
1:     }
1: 
1:     @Override
1:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:         blockWhileLoadingCamelRoutes();
1:         super.postProcessDispatch(messageDispatch);
1:     }
1: 
1:     @Override
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause) {
1:         blockWhileLoadingCamelRoutes();
1:         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:     }
1: 
1:     @Override
1:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:         blockWhileLoadingCamelRoutes();
1:         super.messageConsumed(context, messageReference);
1:     }
1: 
1:     @Override
1:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:         blockWhileLoadingCamelRoutes();
1:         super.messageDelivered(context, messageReference);
1:     }
1: 
1:     @Override
1:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:         blockWhileLoadingCamelRoutes();
1:         super.messageDiscarded(context, sub, messageReference);
1:     }
1: 
1:     @Override
0:     public void isFull(ConnectionContext context, Destination destination, Usage usage) {
1:         blockWhileLoadingCamelRoutes();
1:         super.isFull(context, destination, usage);
1:     }
1: 
1:     @Override
1:     public void nowMasterBroker() {
1:         blockWhileLoadingCamelRoutes();
1:         super.nowMasterBroker();
1:     }
1: 
1:     /*
1:      * Properties
1:      */
1: 
1:     public String getRoutesFile() {
1:         return routesFile;
1:     }
1: 
1:     public void setRoutesFile(String routesFile) {
1:         this.routesFile = routesFile;
1:     }
1: 
1:     public int getCheckPeriod() {
1:         return checkPeriod;
1:     }
1: 
1:     public void setCheckPeriod(int checkPeriod) {
1:         this.checkPeriod = checkPeriod;
1:     }
1: 
1:     public CamelRoutesBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:         LOG.info("Starting CamelRoutesBroker");
1: 
1:         camelContext = new DefaultCamelContext();
1:         camelContext.setName("EmbeddedCamel-" + getBrokerName());
1:         camelContext.start();
1: 
1:         getBrokerService().getScheduler().executePeriodically(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     loadCamelRoutes();
1:                 } catch (Throwable e) {
1:                     LOG.error("Failed to load Camel Routes", e);
1:                 }
1: 
1:             }
1:         }, getCheckPeriod());
1:     }
1: 
1: 
1: 
1:     @Override
1:     public void stop() throws Exception {
1:         CountDownLatch latch = this.countDownLatch;
1:         if (latch != null){
1:             latch.countDown();
1:         }
1:         if (camelContext != null){
1:             camelContext.stop();
1:         }
1:         super.stop();
1:     }
1: 
1:     private void loadCamelRoutes() throws Exception{
1:         if (theRoutes == null) {
1:             String fileToUse = getRoutesFile();
1:             if (fileToUse == null || fileToUse.trim().isEmpty()) {
1:                 BrokerContext brokerContext = getBrokerService().getBrokerContext();
1:                 if (brokerContext != null) {
1:                     String uri = brokerContext.getConfigurationUrl();
1:                     Resource resource = Utils.resourceFromString(uri);
1:                     if (resource.exists()) {
1:                         fileToUse = resource.getFile().getParent();
1:                         fileToUse += File.separator;
1:                         fileToUse += "routes.xml";
1:                     }
1:                 }
1:             }
1:             if (fileToUse != null && !fileToUse.isEmpty()){
1:                 theRoutes = Utils.resourceFromString(fileToUse);
1:                 setRoutesFile(theRoutes.getFile().getAbsolutePath());
1:             }
1:         }
1:         if (!isStopped() && camelContext != null && theRoutes != null && theRoutes.exists()){
1:             long lastModified = theRoutes.lastModified();
1:             if (lastModified != lastRoutesModified){
1:                 CountDownLatch latch = new CountDownLatch(1);
1:                 this.countDownLatch = latch;
1:                 lastRoutesModified = lastModified;
1: 
1:                 List<RouteDefinition> currentRoutes = camelContext.getRouteDefinitions();
1:                 for (RouteDefinition rd:currentRoutes){
1:                     camelContext.stopRoute(rd);
1:                     camelContext.removeRouteDefinition(rd);
1:                 }
1:                 InputStream is = theRoutes.getInputStream();
1:                 RoutesDefinition routesDefinition = camelContext.loadRoutesDefinition(is);
1: 
1:                 for (RouteDefinition rd: routesDefinition.getRoutes()){
1:                     camelContext.startRoute(rd);
1:                 }
1:                 is.close();
1:                 latch.countDown();
1:                 this.countDownLatch=null;
1:             }
1: 
1: 
1:         }
1:     }
1: 
1:     private void blockWhileLoadingCamelRoutes(){
1:         CountDownLatch latch = this.countDownLatch;
1:         if (latch != null){
1:             try {
1:                 latch.await();
1:             } catch (InterruptedException e) {
1:                 Thread.currentThread().interrupt();
1:             }
1:         }
1:     }
1: 
1: }
============================================================================