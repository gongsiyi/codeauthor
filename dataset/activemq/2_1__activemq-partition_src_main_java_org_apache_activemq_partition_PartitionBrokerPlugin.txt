1:7c63788: /**
1:7c63788:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c63788:  * contributor license agreements.  See the NOTICE file distributed with
1:7c63788:  * this work for additional information regarding copyright ownership.
1:7c63788:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c63788:  * (the "License"); you may not use this file except in compliance with
1:7c63788:  * the License.  You may obtain a copy of the License at
1:7c63788:  *
1:7c63788:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c63788:  *
1:7c63788:  * Unless required by applicable law or agreed to in writing, software
1:7c63788:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c63788:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c63788:  * See the License for the specific language governing permissions and
1:7c63788:  * limitations under the License.
1:7c63788:  */
1:7c63788: package org.apache.activemq.partition;
1:7c63788: 
1:7c63788: import org.apache.activemq.broker.Broker;
1:7c63788: import org.apache.activemq.broker.BrokerPlugin;
1:7c63788: import org.apache.activemq.partition.dto.Partitioning;
1:21edf2b: 
1:21edf2b: import java.io.IOException;
1:7c63788: 
1:7c63788: /**
1:7c63788:  * A BrokerPlugin which partitions client connections over a cluster of brokers.
1:7c63788:  *
1:7c63788:  * @org.apache.xbean.XBean element="partitionBrokerPlugin"
1:7c63788:  */
1:7c63788: public class PartitionBrokerPlugin implements BrokerPlugin {
1:7c63788: 
1:7c63788:     protected int minTransferCount;
1:7c63788:     protected Partitioning config;
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     public Broker installPlugin(Broker broker) throws Exception {
1:7c63788:         return new PartitionBroker(broker, this);
1:7c63788:     }
1:7c63788: 
1:7c63788:     public int getMinTransferCount() {
1:7c63788:         return minTransferCount;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setMinTransferCount(int minTransferCount) {
1:7c63788:         this.minTransferCount = minTransferCount;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public Partitioning getConfig() {
1:7c63788:         return config;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setConfig(Partitioning config) {
1:7c63788:         this.config = config;
1:7c63788:     }
1:21edf2b: 
1:21edf2b:     public void setConfigAsJson(String config) throws IOException {
1:21edf2b:         this.config = Partitioning.MAPPER.readValue(config, Partitioning.class);
1:21edf2b:     }
1:21edf2b: 
1:25f70ad:     public String getBrokerURL(PartitionBroker partitionBroker, String id) {
1:25f70ad:         if( config!=null && config.brokers!=null ) {
1:25f70ad:             return config.brokers.get(id);
1:25f70ad:         }
1:25f70ad:         return null;
1:25f70ad:     }
1:7c63788: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:66a689d
/////////////////////////////////////////////////////////////////////////
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:25f70ad
/////////////////////////////////////////////////////////////////////////
1:     public String getBrokerURL(PartitionBroker partitionBroker, String id) {
1:         if( config!=null && config.brokers!=null ) {
1:             return config.brokers.get(id);
1:         }
1:         return null;
1:     }
commit:21edf2b
/////////////////////////////////////////////////////////////////////////
0: import org.codehaus.jackson.JsonParseException;
1: 
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setConfigAsJson(String config) throws IOException {
1:         this.config = Partitioning.MAPPER.readValue(config, Partitioning.class);
1:     }
1: 
commit:7c63788
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.partition.dto.Partitioning;
1: 
1: /**
1:  * A BrokerPlugin which partitions client connections over a cluster of brokers.
1:  *
1:  * @org.apache.xbean.XBean element="partitionBrokerPlugin"
1:  */
1: public class PartitionBrokerPlugin implements BrokerPlugin {
1: 
1:     protected int minTransferCount;
1:     protected Partitioning config;
1: 
1:     @Override
1:     public Broker installPlugin(Broker broker) throws Exception {
1:         return new PartitionBroker(broker, this);
1:     }
1: 
1:     public int getMinTransferCount() {
1:         return minTransferCount;
1:     }
1: 
1:     public void setMinTransferCount(int minTransferCount) {
1:         this.minTransferCount = minTransferCount;
1:     }
1: 
1:     public Partitioning getConfig() {
1:         return config;
1:     }
1: 
1:     public void setConfig(Partitioning config) {
1:         this.config = config;
1:     }
1: }
============================================================================