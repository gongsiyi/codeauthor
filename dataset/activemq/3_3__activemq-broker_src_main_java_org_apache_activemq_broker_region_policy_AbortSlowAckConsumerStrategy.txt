3:2b99f39: /**
1:2b99f39:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b99f39:  * contributor license agreements.  See the NOTICE file distributed with
1:2b99f39:  * this work for additional information regarding copyright ownership.
1:2b99f39:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b99f39:  * (the "License"); you may not use this file except in compliance with
1:2b99f39:  * the License.  You may obtain a copy of the License at
4:2b99f39:  *
1:2b99f39:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2b99f39:  *
1:2b99f39:  * Unless required by applicable law or agreed to in writing, software
1:2b99f39:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b99f39:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b99f39:  * See the License for the specific language governing permissions and
1:2b99f39:  * limitations under the License.
3:2b99f39:  */
1:2b99f39: package org.apache.activemq.broker.region.policy;
6:2b99f39: 
1:2b99f39: import java.util.ArrayList;
1:2b99f39: import java.util.HashMap;
1:2b99f39: import java.util.List;
1:7d136de: import java.util.Map;
1:2b99f39: import java.util.Map.Entry;
1:7d136de: import java.util.concurrent.ConcurrentHashMap;
1:2b99f39: 
1:2b99f39: import org.apache.activemq.broker.Broker;
1:2b99f39: import org.apache.activemq.broker.ConnectionContext;
1:2b99f39: import org.apache.activemq.broker.region.Destination;
1:2b99f39: import org.apache.activemq.broker.region.Subscription;
1:2b99f39: import org.slf4j.Logger;
1:2b99f39: import org.slf4j.LoggerFactory;
1:2b99f39: 
1:2b99f39: /**
1:2b99f39:  * Abort slow consumers when they reach the configured threshold of slowness,
1:2b99f39:  *
1:2b99f39:  * default is that a consumer that has not Ack'd a message for 30 seconds is slow.
1:2b99f39:  *
1:2b99f39:  * @org.apache.xbean.XBean
1:2b99f39:  */
1:2b99f39: public class AbortSlowAckConsumerStrategy extends AbortSlowConsumerStrategy {
1:2b99f39: 
1:2b99f39:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowAckConsumerStrategy.class);
1:2b99f39: 
1:7d136de:     private final Map<String, Destination> destinations = new ConcurrentHashMap<String, Destination>();
1:2b99f39:     private long maxTimeSinceLastAck = 30*1000;
1:2b99f39:     private boolean ignoreIdleConsumers = true;
1:2b99f39: 
1:2b99f39:     public AbortSlowAckConsumerStrategy() {
1:2b99f39:         this.name = "AbortSlowAckConsumerStrategy@" + hashCode();
1:272de3a:     }
1:77bcffc: 
1:2b99f39:     @Override
1:2b99f39:     public void setBrokerService(Broker broker) {
1:2b99f39:         super.setBrokerService(broker);
1:77bcffc: 
1:2b99f39:         // Task starts right away since we may not receive any slow consumer events.
1:2b99f39:         if (taskStarted.compareAndSet(false, true)) {
1:2b99f39:             scheduler.executePeriodically(this, getCheckPeriod());
1:77bcffc:         }
8:2b99f39:     }
1:77bcffc: 
1:2b99f39:     @Override
1:2b99f39:     public void slowConsumer(ConnectionContext context, Subscription subs) {
1:2b99f39:         // Ignore these events, we just look at time since last Ack.
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     @Override
1:2b99f39:     public void run() {
1:2b99f39: 
1:2b99f39:         if (maxTimeSinceLastAck < 0) {
1:2b99f39:             // nothing to do
1:2b99f39:             LOG.info("no limit set, slowConsumer strategy has nothing to do");
1:2b99f39:             return;
1:2b99f39:         }
1:2b99f39: 
1:2b99f39:         if (getMaxSlowDuration() > 0) {
1:2b99f39:             // For subscriptions that are already slow we mark them again and check below if
1:2b99f39:             // they've exceeded their configured lifetime.
1:2b99f39:             for (SlowConsumerEntry entry : slowConsumers.values()) {
1:2b99f39:                 entry.mark();
1:2b99f39:             }
1:2b99f39:         }
1:2b99f39: 
1:2b99f39:         List<Destination> disposed = new ArrayList<Destination>();
1:2b99f39: 
1:7d136de:         for (Destination destination : destinations.values()) {
1:2b99f39:             if (destination.isDisposed()) {
1:2b99f39:                 disposed.add(destination);
2:77bcffc:                 continue;
1:25af8e6:             }
1:25af8e6: 
1:2b99f39:             // Not explicitly documented but this returns a stable copy.
1:2b99f39:             List<Subscription> subscribers = destination.getConsumers();
1:2b99f39: 
1:2b99f39:             updateSlowConsumersList(subscribers);
1:2b99f39:         }
1:2b99f39: 
1:2b99f39:         // Clean up an disposed destinations to save space.
1:7d136de:         for (Destination destination : disposed) {
1:7d136de:             destinations.remove(destination.getName());
1:7d136de:         }
1:2b99f39: 
1:2b99f39:         abortAllQualifiedSlowConsumers();
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     private void updateSlowConsumersList(List<Subscription> subscribers) {
1:2b99f39:         for (Subscription subscriber : subscribers) {
1:8f8aa0f:             if (isIgnoreNetworkSubscriptions() && subscriber.getConsumerInfo().isNetworkSubscription()) {
1:77bcffc:                 if (slowConsumers.remove(subscriber) != null) {
1:8f8aa0f:                     LOG.info("network sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:77bcffc:                 }
1:8f8aa0f:                 continue;
1:77bcffc:             }
1:77bcffc: 
1:2b99f39:             if (isIgnoreIdleConsumers() && subscriber.getDispatchedQueueSize() == 0) {
1:2b99f39:                 // Not considered Idle so ensure its cleared from the list
1:2b99f39:                 if (slowConsumers.remove(subscriber) != null) {
1:8f8aa0f:                     LOG.info("idle sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:2b99f39:                 }
1:8f8aa0f:                 continue;
1:2b99f39:             }
1:2b99f39: 
1:2b99f39:             long lastAckTime = subscriber.getTimeOfLastMessageAck();
1:2b99f39:             long timeDelta = System.currentTimeMillis() - lastAckTime;
1:2b99f39: 
1:2b99f39:             if (timeDelta > maxTimeSinceLastAck) {
1:2b99f39:                 if (!slowConsumers.containsKey(subscriber)) {
1:e1bbde7:                     LOG.debug("sub: {} is now slow", subscriber.getConsumerInfo().getConsumerId());
1:25af8e6:                     SlowConsumerEntry entry = new SlowConsumerEntry(subscriber.getContext());
1:25af8e6:                     entry.mark(); // mark consumer on first run
1:25af8e6:                     slowConsumers.put(subscriber, entry);
1:2b99f39:                 } else if (getMaxSlowCount() > 0) {
1:2b99f39:                     slowConsumers.get(subscriber).slow();
1:2b99f39:                 }
1:272de3a:             } else {
1:2b99f39:                 if (slowConsumers.remove(subscriber) != null) {
1:77bcffc:                     LOG.info("sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:272de3a:                 }
1:2b99f39:             }
1:2b99f39:         }
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     private void abortAllQualifiedSlowConsumers() {
1:2b99f39:         HashMap<Subscription, SlowConsumerEntry> toAbort = new HashMap<Subscription, SlowConsumerEntry>();
1:2b99f39:         for (Entry<Subscription, SlowConsumerEntry> entry : slowConsumers.entrySet()) {
1:25af8e6:             if (getMaxSlowDuration() > 0 && (entry.getValue().markCount * getCheckPeriod() >= getMaxSlowDuration()) ||
1:25af8e6:                 getMaxSlowCount() > 0 && entry.getValue().slowCount >= getMaxSlowCount()) {
1:272de3a: 
1:269d44c:                 LOG.trace("Transferring consumer{} to the abort list: {} slow duration = {}, slow count = {}",
1:269d44c:                         new Object[]{ entry.getKey().getConsumerInfo().getConsumerId(),
1:269d44c:                         entry.getValue().markCount * getCheckPeriod(),
1:269d44c:                         entry.getValue().getSlowCount() });
1:2b99f39: 
1:272de3a:                 toAbort.put(entry.getKey(), entry.getValue());
1:272de3a:                 slowConsumers.remove(entry.getKey());
1:272de3a:             } else {
1:e1bbde7: 
1:e1bbde7:                 LOG.trace("Not yet time to abort consumer {}: slow duration = {}, slow count = {}", new Object[]{ entry.getKey().getConsumerInfo().getConsumerId(), entry.getValue().markCount * getCheckPeriod(), entry.getValue().slowCount });
1:e1bbde7: 
1:2b99f39:             }
1:2b99f39:         }
1:2b99f39: 
1:2b99f39:         // Now if any subscriptions made it into the aborts list we can kick them.
1:2b99f39:         abortSubscription(toAbort, isAbortConnection());
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     @Override
1:2b99f39:     public void addDestination(Destination destination) {
1:7d136de:         this.destinations.put(destination.getName(), destination);
1:2b99f39:     }
1:2b99f39: 
1:77bcffc:     /**
1:2b99f39:      * Gets the maximum time since last Ack before a subscription is considered to be slow.
1:77bcffc:      *
1:2b99f39:      * @return the maximum time since last Ack before the consumer is considered to be slow.
1:77bcffc:      */
1:2b99f39:     public long getMaxTimeSinceLastAck() {
1:2b99f39:         return maxTimeSinceLastAck;
1:2b99f39:     }
1:2b99f39: 
1:77bcffc:     /**
1:2b99f39:      * Sets the maximum time since last Ack before a subscription is considered to be slow.
1:77bcffc:      *
1:2b99f39:      * @param maxTimeSinceLastAck
1:2b99f39:      *      the maximum time since last Ack (mills) before the consumer is considered to be slow.
1:2b99f39:      */
1:2b99f39:     public void setMaxTimeSinceLastAck(long maxTimeSinceLastAck) {
1:2b99f39:         this.maxTimeSinceLastAck = maxTimeSinceLastAck;
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     /**
1:2b99f39:      * Returns whether the strategy is configured to ignore consumers that are simply idle, i.e
1:2b99f39:      * consumers that have no pending acks (dispatch queue is empty).
1:2b99f39:      *
1:2b99f39:      * @return true if the strategy will ignore idle consumer when looking for slow consumers.
1:2b99f39:      */
1:2b99f39:     public boolean isIgnoreIdleConsumers() {
1:2b99f39:         return ignoreIdleConsumers;
1:2b99f39:     }
1:2b99f39: 
1:2b99f39:     /**
1:2b99f39:      * Sets whether the strategy is configured to ignore consumers that are simply idle, i.e
1:2b99f39:      * consumers that have no pending acks (dispatch queue is empty).
1:2b99f39:      *
1:2b99f39:      * When configured to not ignore idle consumers this strategy acks not only on consumers
1:77bcffc:      * that are actually slow but also on any consumer that has not received any messages for
1:77bcffc:      * the maxTimeSinceLastAck.  This allows for a way to evict idle consumers while also
1:2b99f39:      * aborting slow consumers.
1:77bcffc:      *
1:2b99f39:      * @param ignoreIdleConsumers
1:2b99f39:      *      Should this strategy ignore idle consumers or consider all consumers when checking
1:2b99f39:      *      the last ack time verses the maxTimeSinceLastAck value.
1:77bcffc:      */
1:2b99f39:     public void setIgnoreIdleConsumers(boolean ignoreIdleConsumers) {
1:2b99f39:         this.ignoreIdleConsumers = ignoreIdleConsumers;
1:77bcffc:     }
1:2b99f39: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a0835c2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7d136de
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<String, Destination> destinations = new ConcurrentHashMap<String, Destination>();
/////////////////////////////////////////////////////////////////////////
1:         for (Destination destination : destinations.values()) {
/////////////////////////////////////////////////////////////////////////
1:         for (Destination destination : disposed) {
1:             destinations.remove(destination.getName());
1:         }
/////////////////////////////////////////////////////////////////////////
1:         this.destinations.put(destination.getName(), destination);
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("sub: {} is now slow", subscriber.getConsumerInfo().getConsumerId());
/////////////////////////////////////////////////////////////////////////
0:                 LOG.trace("Transferring consumer{} to the abort list: {} slow duration = {}, slow count = {}", new Object[]{ entry.getKey().getConsumerInfo().getConsumerId(), entry.getValue().markCount * getCheckPeriod(), entry.getValue().getSlowCount() });
1: 
1:                 LOG.trace("Not yet time to abort consumer {}: slow duration = {}, slow count = {}", new Object[]{ entry.getKey().getConsumerInfo().getConsumerId(), entry.getValue().markCount * getCheckPeriod(), entry.getValue().slowCount });
1: 
commit:8f8aa0f
/////////////////////////////////////////////////////////////////////////
1:             if (isIgnoreNetworkSubscriptions() && subscriber.getConsumerInfo().isNetworkSubscription()) {
1:                     LOG.info("network sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:                 continue;
1:                     LOG.info("idle sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:                 continue;
/////////////////////////////////////////////////////////////////////////
0:             if (getMaxSlowDuration() > 0 && (entry.getValue().markCount * getCheckPeriod() > getMaxSlowDuration()) ||
0:                     LOG.trace("Transferring consumer {} to the abort list: " +
commit:77bcffc
/////////////////////////////////////////////////////////////////////////
0:     private boolean ignoreNetworkConsumers = true;
/////////////////////////////////////////////////////////////////////////
0:             if (subscriber.getConsumerInfo().isNetworkSubscription()) {
1:                 if (slowConsumers.remove(subscriber) != null) {
1:                     LOG.info("sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:                     continue;
1:                 }
1:             }
1: 
1:                     continue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Returns whether the strategy is configured to ignore subscriptions that are from a network
0:      * connection.
1:      *
0:      * @return true if the strategy will ignore network connection subscriptions when looking
0:      *         for slow consumers.
1:      */
0:     public boolean isIgnoreNetworkSubscriptions() {
0:         return ignoreNetworkConsumers;
1:     }
1: 
1:     /**
0:      * Sets whether the strategy is configured to ignore consumers that are part of a network
0:      * connection to another broker.
1:      *
0:      * When configured to not ignore idle consumers this strategy acts not only on consumers
1:      * that are actually slow but also on any consumer that has not received any messages for
1:      * the maxTimeSinceLastAck.  This allows for a way to evict idle consumers while also
0:      * aborting slow consumers however for a network subscription this can create a lot of
0:      * unnecessary churn and if the abort connection option is also enabled this can result
0:      * in the entire network connection being torn down and rebuilt for no reason.
1:      *
0:      * @param ignoreNetworkConsumers
0:      *      Should this strategy ignore subscriptions made by a network connector.
1:      */
0:     public void setIgnoreNetworkConsumers(boolean ignoreNetworkConsumers) {
0:         this.ignoreNetworkConsumers = ignoreNetworkConsumers;
1:     }
1: 
commit:272de3a
/////////////////////////////////////////////////////////////////////////
1:                 } else {
0:                     if (LOG.isTraceEnabled()) {
0:                         LOG.trace("Not ignoring idle Consumer {}", subscriber.getConsumerInfo().getConsumerId());
1:                     }
/////////////////////////////////////////////////////////////////////////
0:             if (getMaxSlowDuration() > 0 &&
0:                 (entry.getValue().markCount * getCheckPeriod() > getMaxSlowDuration()) ||
0:                 getMaxSlowCount() > 0 && entry.getValue().slowCount > getMaxSlowCount()) {
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("Remove consumer {} from slow list: " +
0:                               "slow duration = " + entry.getValue().markCount * getCheckPeriod() + ", " +
0:                               "slow count = " + entry.getValue().slowCount,
0:                               entry.getKey().getConsumerInfo().getConsumerId());
1:                 }
1: 
1:                 toAbort.put(entry.getKey(), entry.getValue());
1:                 slowConsumers.remove(entry.getKey());
1:             } else {
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("Not yet time to abot consumer {}: " +
0:                               "slow duration = " + entry.getValue().markCount * getCheckPeriod() + ", " +
0:                               "slow count = " + entry.getValue().slowCount,
0:                               entry.getKey().getConsumerInfo().getConsumerId());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a69379d
/////////////////////////////////////////////////////////////////////////
commit:269d44c
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Transferring consumer{} to the abort list: {} slow duration = {}, slow count = {}",
1:                         new Object[]{ entry.getKey().getConsumerInfo().getConsumerId(),
1:                         entry.getValue().markCount * getCheckPeriod(),
1:                         entry.getValue().getSlowCount() });
commit:25af8e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             // don't mark consumers with no messages
0:             if (subscriber.getInFlightSize() <= 0) {
0:                 continue;
1:             }
1: 
1:                     SlowConsumerEntry entry = new SlowConsumerEntry(subscriber.getContext());
1:                     entry.mark(); // mark consumer on first run
1:                     slowConsumers.put(subscriber, entry);
/////////////////////////////////////////////////////////////////////////
1:             if (getMaxSlowDuration() > 0 && (entry.getValue().markCount * getCheckPeriod() >= getMaxSlowDuration()) ||
1:                 getMaxSlowCount() > 0 && entry.getValue().slowCount >= getMaxSlowCount()) {
0:                 LOG.trace("Transferring consumer {} to the abort list: " +
0:                               "slow duration = " + entry.getValue().markCount * getCheckPeriod() + ", " +
0:                               "slow count = " + entry.getValue().slowCount,
0:                               entry.getKey().getConsumerInfo().getConsumerId());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2b99f39
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
0: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map.Entry;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Abort slow consumers when they reach the configured threshold of slowness,
1:  *
1:  * default is that a consumer that has not Ack'd a message for 30 seconds is slow.
1:  *
1:  * @org.apache.xbean.XBean
1:  */
1: public class AbortSlowAckConsumerStrategy extends AbortSlowConsumerStrategy {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowAckConsumerStrategy.class);
1: 
0:     private final List<Destination> destinations = new LinkedList<Destination>();
1:     private long maxTimeSinceLastAck = 30*1000;
1:     private boolean ignoreIdleConsumers = true;
1: 
1:     public AbortSlowAckConsumerStrategy() {
1:         this.name = "AbortSlowAckConsumerStrategy@" + hashCode();
1:     }
1: 
1:     @Override
1:     public void setBrokerService(Broker broker) {
1:         super.setBrokerService(broker);
1: 
1:         // Task starts right away since we may not receive any slow consumer events.
1:         if (taskStarted.compareAndSet(false, true)) {
1:             scheduler.executePeriodically(this, getCheckPeriod());
1:         }
1:     }
1: 
1:     @Override
1:     public void slowConsumer(ConnectionContext context, Subscription subs) {
1:         // Ignore these events, we just look at time since last Ack.
1:     }
1: 
1:     @Override
1:     public void run() {
1: 
1:         if (maxTimeSinceLastAck < 0) {
1:             // nothing to do
1:             LOG.info("no limit set, slowConsumer strategy has nothing to do");
1:             return;
1:         }
1: 
1:         if (getMaxSlowDuration() > 0) {
1:             // For subscriptions that are already slow we mark them again and check below if
1:             // they've exceeded their configured lifetime.
1:             for (SlowConsumerEntry entry : slowConsumers.values()) {
1:                 entry.mark();
1:             }
1:         }
1: 
1:         List<Destination> disposed = new ArrayList<Destination>();
1: 
0:         for (Destination destination : destinations) {
1:             if (destination.isDisposed()) {
1:                 disposed.add(destination);
0:                 continue;
1:             }
1: 
1:             // Not explicitly documented but this returns a stable copy.
1:             List<Subscription> subscribers = destination.getConsumers();
1: 
1:             updateSlowConsumersList(subscribers);
1:         }
1: 
1:         // Clean up an disposed destinations to save space.
0:         destinations.removeAll(disposed);
1: 
1:         abortAllQualifiedSlowConsumers();
1:     }
1: 
1:     private void updateSlowConsumersList(List<Subscription> subscribers) {
1:         for (Subscription subscriber : subscribers) {
1: 
1:             if (isIgnoreIdleConsumers() && subscriber.getDispatchedQueueSize() == 0) {
1:                 // Not considered Idle so ensure its cleared from the list
1:                 if (slowConsumers.remove(subscriber) != null) {
0:                     LOG.info("sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:                 }
1:             }
1: 
1:             long lastAckTime = subscriber.getTimeOfLastMessageAck();
1:             long timeDelta = System.currentTimeMillis() - lastAckTime;
1: 
1:             if (timeDelta > maxTimeSinceLastAck) {
1:                 if (!slowConsumers.containsKey(subscriber)) {
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("sub: {} is now slow", subscriber.getConsumerInfo().getConsumerId());
1:                     }
0:                     slowConsumers.put(subscriber, new SlowConsumerEntry(subscriber.getContext()));
1:                 } else if (getMaxSlowCount() > 0) {
1:                     slowConsumers.get(subscriber).slow();
1:                 }
0:             } else {
1:                 if (slowConsumers.remove(subscriber) != null) {
0:                     LOG.info("sub: {} is no longer slow", subscriber.getConsumerInfo().getConsumerId());
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private void abortAllQualifiedSlowConsumers() {
1:         HashMap<Subscription, SlowConsumerEntry> toAbort = new HashMap<Subscription, SlowConsumerEntry>();
1:         for (Entry<Subscription, SlowConsumerEntry> entry : slowConsumers.entrySet()) {
0:             if (entry.getKey().isSlowConsumer()) {
0:                 if (getMaxSlowDuration() > 0 &&
0:                     (entry.getValue().markCount * getCheckPeriod() > getMaxSlowDuration()) ||
0:                     getMaxSlowCount() > 0 && entry.getValue().slowCount > getMaxSlowCount()) {
1: 
0:                     toAbort.put(entry.getKey(), entry.getValue());
0:                     slowConsumers.remove(entry.getKey());
1:                 }
1:             }
1:         }
1: 
1:         // Now if any subscriptions made it into the aborts list we can kick them.
1:         abortSubscription(toAbort, isAbortConnection());
1:     }
1: 
1:     @Override
1:     public void addDestination(Destination destination) {
0:         this.destinations.add(destination);
1:     }
1: 
1:     /**
1:      * Gets the maximum time since last Ack before a subscription is considered to be slow.
1:      *
1:      * @return the maximum time since last Ack before the consumer is considered to be slow.
1:      */
1:     public long getMaxTimeSinceLastAck() {
1:         return maxTimeSinceLastAck;
1:     }
1: 
1:     /**
1:      * Sets the maximum time since last Ack before a subscription is considered to be slow.
1:      *
1:      * @param maxTimeSinceLastAck
1:      *      the maximum time since last Ack (mills) before the consumer is considered to be slow.
1:      */
1:     public void setMaxTimeSinceLastAck(long maxTimeSinceLastAck) {
1:         this.maxTimeSinceLastAck = maxTimeSinceLastAck;
1:     }
1: 
1:     /**
1:      * Returns whether the strategy is configured to ignore consumers that are simply idle, i.e
1:      * consumers that have no pending acks (dispatch queue is empty).
1:      *
1:      * @return true if the strategy will ignore idle consumer when looking for slow consumers.
1:      */
1:     public boolean isIgnoreIdleConsumers() {
1:         return ignoreIdleConsumers;
1:     }
1: 
1:     /**
1:      * Sets whether the strategy is configured to ignore consumers that are simply idle, i.e
1:      * consumers that have no pending acks (dispatch queue is empty).
1:      *
1:      * When configured to not ignore idle consumers this strategy acks not only on consumers
0:      * that are actually slow but also on any consumer that has not received any messages for
0:      * the maxTimeSinceLastAck.  This allows for a way to evict idle consumers while also
1:      * aborting slow consumers.
1:      *
1:      * @param ignoreIdleConsumers
1:      *      Should this strategy ignore idle consumers or consider all consumers when checking
1:      *      the last ack time verses the maxTimeSinceLastAck value.
1:      */
1:     public void setIgnoreIdleConsumers(boolean ignoreIdleConsumers) {
1:         this.ignoreIdleConsumers = ignoreIdleConsumers;
1:     }
1: }
============================================================================