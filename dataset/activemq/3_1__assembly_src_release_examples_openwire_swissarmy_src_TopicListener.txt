1:148f3bd: /**
1:148f3bd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:148f3bd:  * contributor license agreements.  See the NOTICE file distributed with
1:148f3bd:  * this work for additional information regarding copyright ownership.
1:148f3bd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:148f3bd:  * (the "License"); you may not use this file except in compliance with
1:148f3bd:  * the License.  You may obtain a copy of the License at
2:148f3bd:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:148f3bd:  *
1:148f3bd:  * Unless required by applicable law or agreed to in writing, software
1:148f3bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:148f3bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:148f3bd:  * See the License for the specific language governing permissions and
1:148f3bd:  * limitations under the License.
1:148f3bd:  */
1:148f3bd: import java.util.Arrays;
11:148f3bd: 
1:148f3bd: import javax.jms.Connection;
1:148f3bd: import javax.jms.JMSException;
1:148f3bd: import javax.jms.Message;
1:148f3bd: import javax.jms.MessageConsumer;
1:148f3bd: import javax.jms.MessageListener;
1:148f3bd: import javax.jms.MessageProducer;
1:148f3bd: import javax.jms.Session;
1:148f3bd: import javax.jms.TextMessage;
1:148f3bd: import javax.jms.Topic;
1:148f3bd: 
1:148f3bd: import org.apache.activemq.ActiveMQConnectionFactory;
1:148f3bd: 
1:148f3bd: /**
1:540dd5c:  * Use in conjunction with TopicPublisher to test the performance of ActiveMQ
1:540dd5c:  * Topics.
1:148f3bd:  */
1:148f3bd: public class TopicListener implements MessageListener {
1:148f3bd: 
1:540dd5c:     private Connection connection;
1:540dd5c:     private MessageProducer producer;
1:540dd5c:     private Session session;
1:540dd5c:     private int count;
1:540dd5c:     private long start;
1:540dd5c:     private Topic topic;
1:540dd5c:     private Topic control;
1:148f3bd: 
1:540dd5c:     private String url = "tcp://localhost:61616";
1:148f3bd: 
1:540dd5c:     public static void main(String[] argv) throws Exception {
1:540dd5c:         TopicListener l = new TopicListener();
1:540dd5c:         String[] unknown = CommandLineSupport.setOptions(l, argv);
1:540dd5c:         if (unknown.length > 0) {
1:540dd5c:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:540dd5c:             System.exit(-1);
10:148f3bd:         }
1:540dd5c:         l.run();
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void run() throws JMSException {
1:540dd5c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:540dd5c:         connection = factory.createConnection();
1:540dd5c:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:540dd5c:         topic = session.createTopic("topictest.messages");
1:540dd5c:         control = session.createTopic("topictest.control");
1:540dd5c: 
1:540dd5c:         MessageConsumer consumer = session.createConsumer(topic);
1:540dd5c:         consumer.setMessageListener(this);
1:540dd5c: 
1:540dd5c:         connection.start();
1:540dd5c: 
1:540dd5c:         producer = session.createProducer(control);
1:540dd5c:         System.out.println("Waiting for messages...");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     private static boolean checkText(Message m, String s) {
1:540dd5c:         try {
1:540dd5c:             return m instanceof TextMessage && ((TextMessage)m).getText().equals(s);
1:540dd5c:         } catch (JMSException e) {
3:148f3bd:             e.printStackTrace(System.out);
1:148f3bd:             return false;
1:148f3bd:         }
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     public void onMessage(Message message) {
1:540dd5c:         if (checkText(message, "SHUTDOWN")) {
1:148f3bd: 
1:540dd5c:             try {
1:540dd5c:                 connection.close();
1:540dd5c:             } catch (Exception e) {
1:540dd5c:                 e.printStackTrace(System.out);
1:540dd5c:             }
1:148f3bd: 
1:540dd5c:         } else if (checkText(message, "REPORT")) {
1:540dd5c:             // send a report:
1:540dd5c:             try {
1:540dd5c:                 long time = System.currentTimeMillis() - start;
1:540dd5c:                 String msg = "Received " + count + " in " + time + "ms";
1:540dd5c:                 producer.send(session.createTextMessage(msg));
1:540dd5c:             } catch (Exception e) {
1:540dd5c:                 e.printStackTrace(System.out);
1:540dd5c:             }
1:540dd5c:             count = 0;
1:540dd5c: 
1:540dd5c:         } else {
1:540dd5c: 
1:540dd5c:             if (count == 0) {
1:540dd5c:                 start = System.currentTimeMillis();
1:540dd5c:             }
1:540dd5c: 
1:540dd5c:             if (++count % 1000 == 0) {
1:540dd5c:                 System.out.println("Received " + count + " messages.");
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setUrl(String url) {
1:540dd5c:         this.url = url;
1:540dd5c:     }
1:148f3bd: 
1:148f3bd: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * Use in conjunction with TopicPublisher to test the performance of ActiveMQ
1:  * Topics.
1:     private Connection connection;
1:     private MessageProducer producer;
1:     private Session session;
1:     private int count;
1:     private long start;
1:     private Topic topic;
1:     private Topic control;
1:     private String url = "tcp://localhost:61616";
1:     public static void main(String[] argv) throws Exception {
1:         TopicListener l = new TopicListener();
1:         String[] unknown = CommandLineSupport.setOptions(l, argv);
1:         if (unknown.length > 0) {
1:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:             System.exit(-1);
1:         l.run();
1:     }
1: 
1:     public void run() throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         connection = factory.createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic("topictest.messages");
1:         control = session.createTopic("topictest.control");
1: 
1:         MessageConsumer consumer = session.createConsumer(topic);
1:         consumer.setMessageListener(this);
1: 
1:         connection.start();
1: 
1:         producer = session.createProducer(control);
1:         System.out.println("Waiting for messages...");
1:     }
1: 
1:     private static boolean checkText(Message m, String s) {
1:         try {
1:             return m instanceof TextMessage && ((TextMessage)m).getText().equals(s);
1:         } catch (JMSException e) {
1:     public void onMessage(Message message) {
1:         if (checkText(message, "SHUTDOWN")) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {
1:                 e.printStackTrace(System.out);
1:             }
1:         } else if (checkText(message, "REPORT")) {
1:             // send a report:
1:             try {
1:                 long time = System.currentTimeMillis() - start;
1:                 String msg = "Received " + count + " in " + time + "ms";
1:                 producer.send(session.createTextMessage(msg));
1:             } catch (Exception e) {
1:                 e.printStackTrace(System.out);
1:             }
1:             count = 0;
1: 
1:         } else {
1: 
1:             if (count == 0) {
1:                 start = System.currentTimeMillis();
1:             }
1: 
1:             if (++count % 1000 == 0) {
1:                 System.out.println("Received " + count + " messages.");
1:             }
1:         }
1:     }
1: 
1:     public void setUrl(String url) {
1:         this.url = url;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:148f3bd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.util.Arrays;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * Use in conjunction with TopicPublisher to test the performance of ActiveMQ Topics.
1:  */
1: public class TopicListener implements MessageListener {
1: 	
0: 	private Connection connection;
0: 	private MessageProducer producer;
0: 	private Session session;	
0: 	private int count;
0: 	private long start;
0: 	private Topic topic;
0: 	private Topic control;
1: 	
0: //	private String url="tcp://localhost:61616?jms.dispatchAsync=true&jms.useAsyncSend=true&jms.optimizeAcknowledge=true&jms.disableTimeStampsByDefault=true&jms.optimizedMessageDispatch=true&wireFormat.cacheEnabled=false&wireFormat.tightEncodingEnabled=false";
0: 	private String url="tcp://localhost:61616";	
1: 
0: 	public static void main(String[] argv) throws Exception {
0: 		TopicListener l = new TopicListener();
0: 		String[] unknonwn = CommnadLineSupport.setOptions(l, argv);
0: 		if (unknonwn.length > 0) {
0: 			System.out.println("Unknown options: " + Arrays.toString(unknonwn));
0: 			System.exit(-1);
1: 		}
0:     	l.run();
1: 	}
1: 	
0: 	public void run() throws JMSException {
0: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
0: 		connection = factory.createConnection();    	
0: 		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		topic = session.createTopic("topictest.messages");
0: 		control = session.createTopic("topictest.control");
1: 
0: 		MessageConsumer consumer = session.createConsumer(topic);
0: 		consumer.setMessageListener(this);
1: 
0: 		connection.start();
1: 
0: 		producer = session.createProducer(control);
0: 		System.out.println("Waiting for messages...");		
1: 	}
1: 	
0:     private static boolean checkText(Message m, String s)
0:     {
0:         try
0:         {
0:             return m instanceof TextMessage && ((TextMessage) m).getText().equals(s);
1:         }
0:         catch (JMSException e)
0:         {
1:             e.printStackTrace(System.out);
1:             return false;
1:         }
1:     }
1: 
1: 
0: 	public void onMessage(Message message) {
0: 		if ( checkText(message, "SHUTDOWN") ) {
1: 			
0: 			try {
0: 				connection.close();
0: 			} catch (Exception e) {
1: 				e.printStackTrace(System.out);
1: 			}
1: 			
0: 		} else if (checkText(message, "REPORT")) {
0: 			// send a report:
0: 			try {
0: 				long time = (System.currentTimeMillis() - start);
0: 				String msg = "Received " + count + " in " + time + "ms";
0: 				producer.send(session.createTextMessage(msg));
0: 			} catch (Exception e) {
1: 				e.printStackTrace(System.out);
1: 			}
0: 			count = 0;
1: 			
0: 		} else {
1: 			
0: 			if (count==0) {
0: 				start = System.currentTimeMillis();
1: 			}
1: 			
0: 			if (++count % 1000 == 0) 
0: 				System.out.println("Received " + count + " messages.");
1: 		}
1: 	}
1: 
0: 	public void setUrl(String url) {
0: 		this.url = url;
1: 	}
1: 
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:0ef421d
/////////////////////////////////////////////////////////////////////////
0: 		String[] unknown = CommandLineSupport.setOptions(l, argv);
0: 		if (unknown.length > 0) {
0: 			System.out.println("Unknown options: " + Arrays.toString(unknown));
0:     	        l.run();
============================================================================