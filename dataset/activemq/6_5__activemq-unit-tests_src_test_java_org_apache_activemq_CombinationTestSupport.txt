1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
10:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
6:d29ca2a: 
1:11e0df8: import java.io.File;
1:11e0df8: import java.io.IOException;
1:d29ca2a: import java.lang.reflect.Field;
1:d29ca2a: import java.lang.reflect.Method;
1:d29ca2a: import java.lang.reflect.Modifier;
1:11e0df8: import java.security.ProtectionDomain;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Arrays;
1:d29ca2a: import java.util.Collection;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.LinkedHashSet;
1:d29ca2a: import java.util.LinkedList;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: import junit.framework.TestSuite;
1:93dc39b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Poor mans way of getting JUnit to run a test case through a few different
1:f812e34:  * combinations of options. Usage: If you have a test case called testFoo what
1:f812e34:  * you want to run through a few combinations, of of values for the attributes
1:f812e34:  * age and color, you would something like: <code>
1:84a1616:  *    public void initCombosForTestFoo() {
1:d29ca2a:  *        addCombinationValues( "age", new Object[]{ new Integer(21), new Integer(30) } );
1:d29ca2a:  *        addCombinationValues( "color", new Object[]{"blue", "green"} );
1:d29ca2a:  *    }
1:d29ca2a:  * </code>
1:d29ca2a:  * The testFoo test case would be run for each possible combination of age and
1:f812e34:  * color that you setup in the initCombosForTestFoo method. Before each
1:f812e34:  * combination is run, the age and color fields of the test class are set to one
1:f812e34:  * of the values defined. This is done before the normal setUp method is called.
1:d29ca2a:  * If you want the test combinations to show up as separate test runs in the
1:f812e34:  * JUnit reports, add a suite method to your test case similar to: <code>
1:d29ca2a:  *     public static Test suite() {
1:d29ca2a:  *         return suite(FooTest.class);
1:d29ca2a:  *     }
1:d29ca2a:  * </code>
1:84a1616:  *
1:84a1616:  *
1:d29ca2a:  */
1:ca067a6: public abstract class CombinationTestSupport extends AutoFailTestSupport {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CombinationTestSupport.class);
1:d29ca2a: 
1:c7d559f:     private final HashMap<String, ComboOption> comboOptions = new HashMap<String, ComboOption>();
1:d29ca2a:     private boolean combosEvaluated;
1:84a1616:     private Map<String, Object> options;
1:11e0df8:     protected File basedir;
1:11e0df8: 
1:c7d559f:     static protected File basedir(Class<?> clazz) {
1:11e0df8:         try {
1:11e0df8:             ProtectionDomain protectionDomain = clazz.getProtectionDomain();
1:11e0df8:             return new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalFile();
1:11e0df8:         } catch (IOException e) {
1:11e0df8:             return new File(".");
1:11e0df8:         }
1:11e0df8:     }
1:f812e34: 
1:d29ca2a:     static class ComboOption {
1:d29ca2a:         final String attribute;
1:933eb2f:         final LinkedHashSet<Object> values = new LinkedHashSet<Object>();
1:d29ca2a: 
1:933eb2f:         public ComboOption(String attribute, Collection<Object> options) {
1:d29ca2a:             this.attribute = attribute;
1:d29ca2a:             this.values.addAll(options);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:11e0df8:     public CombinationTestSupport() {
1:11e0df8:         basedir = basedir(getClass());
1:11e0df8:     }
1:d29ca2a:     public void addCombinationValues(String attribute, Object[] options) {
1:933eb2f:         ComboOption co = this.comboOptions.get(attribute);
1:d29ca2a:         if (co == null) {
1:d29ca2a:             this.comboOptions.put(attribute, new ComboOption(attribute, Arrays.asList(options)));
1:d29ca2a:         } else {
1:d29ca2a:             co.values.addAll(Arrays.asList(options));
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     public void runBare() throws Throwable {
1:d29ca2a:         if (combosEvaluated) {
1:d29ca2a:             super.runBare();
1:d29ca2a:         } else {
1:d29ca2a:             CombinationTestSupport[] combinations = getCombinations();
1:d29ca2a:             for (int i = 0; i < combinations.length; i++) {
1:d29ca2a:                 CombinationTestSupport test = combinations[i];
1:f812e34:                 if (getName() == null || getName().equals(test.getName())) {
1:f812e34:                     test.runBare();
1:3965f2c:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:84a1616:     private void setOptions(Map<String, Object> options) throws NoSuchFieldException, IllegalAccessException {
1:d29ca2a:         this.options = options;
1:84a1616:         for (Iterator<String> iterator = options.keySet().iterator(); iterator.hasNext();) {
1:84a1616:             String attribute = iterator.next();
1:d29ca2a:             Object value = options.get(attribute);
1:d29ca2a:             try {
1:d29ca2a:                 Field field = getClass().getField(attribute);
1:d29ca2a:                 field.set(this, value);
1:d29ca2a:             } catch (Throwable e) {
1:84a1616:                 try {
1:84a1616:                     boolean found = false;
1:84a1616:                     String setterName = "set" + attribute.substring(0, 1).toUpperCase() +
1:84a1616:                                         attribute.substring(1);
1:84a1616:                     for(Method method : getClass().getMethods()) {
1:84a1616:                         if (method.getName().equals(setterName)) {
1:84a1616:                             method.invoke(this, value);
1:84a1616:                             found = true;
1:84a1616:                             break;
1:84a1616:                         }
1:84a1616:                     }
1:84a1616: 
1:84a1616:                     if (!found) {
1:84a1616:                         throw new NoSuchMethodError("No setter found for field: " + attribute);
1:84a1616:                     }
1:84a1616: 
1:84a1616:                 } catch(Throwable ex) {
1:84a1616:                     LOG.info("Could not set field '" + attribute + "' to value '" + value +
1:84a1616:                              "', make sure the field exists and is public or has a setter.");
1:84a1616:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private CombinationTestSupport[] getCombinations() {
1:d29ca2a:         try {
1:0479a4e:             Method method = getClass().getMethod("initCombos", (Class[])null);
1:0479a4e:             method.invoke(this, (Object[])null);
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a: 
1:f812e34:         String name = getName().split(" ")[0];
1:d29ca2a:         String comboSetupMethodName = "initCombosFor" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
1:d29ca2a:         try {
1:0479a4e:             Method method = getClass().getMethod(comboSetupMethodName, (Class[])null);
1:0479a4e:             method.invoke(this, (Object[])null);
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         try {
1:933eb2f:             ArrayList<HashMap<String, Object>> expandedOptions = new ArrayList<HashMap<String, Object>>();
1:933eb2f:             expandCombinations(new ArrayList<ComboOption>(comboOptions.values()), expandedOptions);
1:d29ca2a: 
1:d29ca2a:             if (expandedOptions.isEmpty()) {
1:d29ca2a:                 combosEvaluated = true;
1:f812e34:                 return new CombinationTestSupport[] {this};
1:d29ca2a:             } else {
1:f812e34: 
1:933eb2f:                 ArrayList<CombinationTestSupport> result = new ArrayList<CombinationTestSupport>();
1:d29ca2a:                 // Run the test case for each possible combination
1:933eb2f:                 for (Iterator<HashMap<String, Object>> iter = expandedOptions.iterator(); iter.hasNext();) {
1:f812e34:                     CombinationTestSupport combo = (CombinationTestSupport)TestSuite.createTest(getClass(), name);
1:d29ca2a:                     combo.combosEvaluated = true;
1:933eb2f:                     combo.setOptions(iter.next());
1:d29ca2a:                     result.add(combo);
1:d29ca2a:                 }
1:f812e34: 
1:d29ca2a:                 CombinationTestSupport rc[] = new CombinationTestSupport[result.size()];
1:d29ca2a:                 result.toArray(rc);
1:d29ca2a:                 return rc;
1:d29ca2a:             }
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:             combosEvaluated = true;
1:f812e34:             return new CombinationTestSupport[] {this};
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     private void expandCombinations(List<ComboOption> optionsLeft, List<HashMap<String, Object>> expandedCombos) {
1:d29ca2a:         if (!optionsLeft.isEmpty()) {
1:933eb2f:             HashMap<String, Object> map;
1:d29ca2a:             if (comboOptions.size() == optionsLeft.size()) {
1:933eb2f:                 map = new HashMap<String, Object>();
2:d29ca2a:                 expandedCombos.add(map);
1:d29ca2a:             } else {
1:933eb2f:                 map = expandedCombos.get(expandedCombos.size() - 1);
1:d29ca2a:             }
1:d29ca2a: 
1:933eb2f:             LinkedList<ComboOption> l = new LinkedList<ComboOption>(optionsLeft);
1:933eb2f:             ComboOption comboOption = l.removeLast();
1:d29ca2a:             int i = 0;
1:e5ab933:             if (comboOption.values.isEmpty() && !l.isEmpty()) {
1:d29ca2a:                 expandCombinations(l, expandedCombos);
1:e5ab933:             } else {
1:e5ab933:                 for (Iterator<Object> iter = comboOption.values.iterator(); iter.hasNext();) {
1:e5ab933:                     Object value = iter.next();
1:e5ab933:                     if (i != 0) {
1:e5ab933:                         map = new HashMap<String, Object>(map);
1:e5ab933:                         expandedCombos.add(map);
1:e5ab933:                     }
1:e5ab933:                     map.put(comboOption.attribute, value);
1:e5ab933:                     expandCombinations(l, expandedCombos);
1:e5ab933:                     i++;
1:e5ab933:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public static Test suite(Class<? extends CombinationTestSupport> clazz) {
1:d29ca2a:         TestSuite suite = new TestSuite();
1:d29ca2a: 
1:933eb2f:         ArrayList<String> names = new ArrayList<String>();
1:d29ca2a:         Method[] methods = clazz.getMethods();
1:d29ca2a:         for (int i = 0; i < methods.length; i++) {
1:d29ca2a:             String name = methods[i].getName();
1:fc00993:             if (names.contains(name) || !isPublicTestMethod(methods[i])) {
1:d29ca2a:                 continue;
1:fc00993:             }
1:d29ca2a:             names.add(name);
1:d29ca2a:             Test test = TestSuite.createTest(clazz, name);
1:d29ca2a:             if (test instanceof CombinationTestSupport) {
1:f812e34:                 CombinationTestSupport[] combinations = ((CombinationTestSupport)test).getCombinations();
1:d29ca2a:                 for (int j = 0; j < combinations.length; j++) {
1:d29ca2a:                     suite.addTest(combinations[j]);
1:d29ca2a:                 }
1:d29ca2a:             } else {
1:d29ca2a:                 suite.addTest(test);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return suite;
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     private static boolean isPublicTestMethod(Method m) {
1:d29ca2a:         return isTestMethod(m) && Modifier.isPublic(m.getModifiers());
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     private static boolean isTestMethod(Method m) {
1:d29ca2a:         String name = m.getName();
1:84a1616:         Class<?>[] parameters = m.getParameterTypes();
1:84a1616:         Class<?> returnType = m.getReturnType();
1:d29ca2a:         return parameters.length == 0 && name.startsWith("test") && returnType.equals(Void.TYPE);
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     public String getName() {
1:84a1616:         return getName(false);
1:d29ca2a:     }
1:84a1616: 
1:e679067:     public String getName(boolean original) {
1:e679067:         if (options != null && !original) {
1:d29ca2a:             return super.getName() + " " + options;
1:d29ca2a:         }
1:d29ca2a:         return super.getName();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e5ab933
/////////////////////////////////////////////////////////////////////////
1:             if (comboOption.values.isEmpty() && !l.isEmpty()) {
1:             } else {
1:                 for (Iterator<Object> iter = comboOption.values.iterator(); iter.hasNext();) {
1:                     Object value = iter.next();
1:                     if (i != 0) {
1:                         map = new HashMap<String, Object>(map);
1:                         expandedCombos.add(map);
1:                     }
1:                     map.put(comboOption.attribute, value);
1:                     expandCombinations(l, expandedCombos);
1:                     i++;
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:     private final HashMap<String, ComboOption> comboOptions = new HashMap<String, ComboOption>();
1:     static protected File basedir(Class<?> clazz) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
commit:84a1616
/////////////////////////////////////////////////////////////////////////
1:  *    public void initCombosForTestFoo() {
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Object> options;
/////////////////////////////////////////////////////////////////////////
1:     private void setOptions(Map<String, Object> options) throws NoSuchFieldException, IllegalAccessException {
1:         for (Iterator<String> iterator = options.keySet().iterator(); iterator.hasNext();) {
1:             String attribute = iterator.next();
1:                 try {
1:                     boolean found = false;
1:                     String setterName = "set" + attribute.substring(0, 1).toUpperCase() +
1:                                         attribute.substring(1);
1:                     for(Method method : getClass().getMethods()) {
1:                         if (method.getName().equals(setterName)) {
1:                             method.invoke(this, value);
1:                             found = true;
1:                             break;
1:                         }
1:                     }
1: 
1:                     if (!found) {
1:                         throw new NoSuchMethodError("No setter found for field: " + attribute);
1:                     }
1: 
1:                 } catch(Throwable ex) {
1:                     LOG.info("Could not set field '" + attribute + "' to value '" + value +
1:                              "', make sure the field exists and is public or has a setter.");
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         Class<?>[] parameters = m.getParameterTypes();
1:         Class<?> returnType = m.getReturnType();
1:         return getName(false);
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:11e0df8
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.security.ProtectionDomain;
/////////////////////////////////////////////////////////////////////////
1:     protected File basedir;
1: 
0:     static protected File basedir(Class clazz) {
1:         try {
1:             ProtectionDomain protectionDomain = clazz.getProtectionDomain();
1:             return new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalFile();
1:         } catch (IOException e) {
1:             return new File(".");
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public CombinationTestSupport() {
1:         basedir = basedir(getClass());
1:     }
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private HashMap<String, ComboOption> comboOptions = new HashMap<String, ComboOption>();
1:         final LinkedHashSet<Object> values = new LinkedHashSet<Object>();
1:         public ComboOption(String attribute, Collection<Object> options) {
1:         ComboOption co = this.comboOptions.get(attribute);
/////////////////////////////////////////////////////////////////////////
1:             ArrayList<HashMap<String, Object>> expandedOptions = new ArrayList<HashMap<String, Object>>();
1:             expandCombinations(new ArrayList<ComboOption>(comboOptions.values()), expandedOptions);
1:                 ArrayList<CombinationTestSupport> result = new ArrayList<CombinationTestSupport>();
1:                 for (Iterator<HashMap<String, Object>> iter = expandedOptions.iterator(); iter.hasNext();) {
1:                     combo.setOptions(iter.next());
/////////////////////////////////////////////////////////////////////////
1:     private void expandCombinations(List<ComboOption> optionsLeft, List<HashMap<String, Object>> expandedCombos) {
1:             HashMap<String, Object> map;
1:                 map = new HashMap<String, Object>();
1:                 map = expandedCombos.get(expandedCombos.size() - 1);
1:             LinkedList<ComboOption> l = new LinkedList<ComboOption>(optionsLeft);
1:             ComboOption comboOption = l.removeLast();
0:             for (Iterator<Object> iter = comboOption.values.iterator(); iter.hasNext();) {
0:                 Object value = iter.next();
0:                     map = new HashMap<String, Object>(map);
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite(Class<? extends CombinationTestSupport> clazz) {
1:         ArrayList<String> names = new ArrayList<String>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CombinationTestSupport.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Could not set field '" + attribute + "' to value '" + value + "', make sure the field exists and is public.");
/////////////////////////////////////////////////////////////////////////
1:             if (names.contains(name) || !isPublicTestMethod(methods[i])) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:     private static boolean isPublicTestMethod(Method m) {
1:     private static boolean isTestMethod(Method m) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * combinations of options. Usage: If you have a test case called testFoo what
1:  * you want to run through a few combinations, of of values for the attributes
1:  * age and color, you would something like: <code>
1:  * color that you setup in the initCombosForTestFoo method. Before each
1:  * combination is run, the age and color fields of the test class are set to one
1:  * of the values defined. This is done before the normal setUp method is called.
1:  * JUnit reports, add a suite method to your test case similar to: <code>
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         ComboOption co = (ComboOption)this.comboOptions.get(attribute);
/////////////////////////////////////////////////////////////////////////
1:                 if (getName() == null || getName().equals(test.getName())) {
1:                     test.runBare();
/////////////////////////////////////////////////////////////////////////
0:             String attribute = (String)iterator.next();
0:                 log.info("Could not set field '" + attribute + "' to value '" + value + "', make sure the field exists and is public.");
/////////////////////////////////////////////////////////////////////////
1: 
1:         String name = getName().split(" ")[0];
/////////////////////////////////////////////////////////////////////////
1: 
1:                 return new CombinationTestSupport[] {this};
1: 
1:                     CombinationTestSupport combo = (CombinationTestSupport)TestSuite.createTest(getClass(), name);
0:                     combo.setOptions((Map)iter.next());
1: 
1:             return new CombinationTestSupport[] {this};
/////////////////////////////////////////////////////////////////////////
0:                 map = (HashMap)expandedCombos.get(expandedCombos.size() - 1);
0:             ComboOption comboOption = (ComboOption)l.removeLast();
0:                 Object value = (Object)iter.next();
/////////////////////////////////////////////////////////////////////////
1:                 CombinationTestSupport[] combinations = ((CombinationTestSupport)test).getCombinations();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:3965f2c
/////////////////////////////////////////////////////////////////////////
0:                 if( getName()==null || getName().equals( test.getName()) ) {  
0:                 	test.runBare();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:         String name = getName().split(" ")[0];        
/////////////////////////////////////////////////////////////////////////
0:                     CombinationTestSupport combo = (CombinationTestSupport) TestSuite.createTest(getClass(), name);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(CombinationTestSupport.class);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedHashSet;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import junit.framework.Test;
1: import junit.framework.TestSuite;
1: 
1: /**
1:  * Poor mans way of getting JUnit to run a test case through a few different
0:  * combinations of options.
1:  * 
1:  * 
0:  * Usage: If you have a test case called testFoo what you want to run through a
0:  * few combinations, of of values for the attributes age and color, you would
0:  * something like: <code>
0:  *    public void initCombosForTestFoo() {    
1:  *        addCombinationValues( "age", new Object[]{ new Integer(21), new Integer(30) } );
1:  *        addCombinationValues( "color", new Object[]{"blue", "green"} );
1:  *    }
1:  * </code>
1:  * 
1:  * The testFoo test case would be run for each possible combination of age and
0:  * color that you setup in the initCombosForTestFoo method. Before each combination is
0:  * run, the age and color fields of the test class are set to one of the values
0:  * defined. This is done before the normal setUp method is called.
1:  * 
1:  * If you want the test combinations to show up as separate test runs in the
0:  * JUnit reports, add a suite method to your test case similar to:
1:  * 
0:  * <code>
1:  *     public static Test suite() {
1:  *         return suite(FooTest.class);
1:  *     }
1:  * </code>
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
0: public class CombinationTestSupport extends AutoFailTestSupport {
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(CombinationTestSupport.class);
1:     
0:     private HashMap comboOptions = new HashMap();
1:     private boolean combosEvaluated;
0:     private Map options;
1: 
1:     static class ComboOption {
1:         final String attribute;
0:         final LinkedHashSet values = new LinkedHashSet();
1: 
0:         public ComboOption(String attribute, Collection options) {
1:             this.attribute = attribute;
1:             this.values.addAll(options);
1:         }
1:     }
1: 
1:     public void addCombinationValues(String attribute, Object[] options) {
0:         ComboOption co = (ComboOption) this.comboOptions.get(attribute);
1:         if (co == null) {
1:             this.comboOptions.put(attribute, new ComboOption(attribute, Arrays.asList(options)));
1:         } else {
1:             co.values.addAll(Arrays.asList(options));
1:         }
1:     }
1: 
1:     public void runBare() throws Throwable {
1:         if (combosEvaluated) {
1:             super.runBare();
1:         } else {
1:             CombinationTestSupport[] combinations = getCombinations();
1:             for (int i = 0; i < combinations.length; i++) {
1:                 CombinationTestSupport test = combinations[i];
0:                 log.info("Running " + test.getName()); 
0:                 test.runBare();
1:             }
1:         }
1:     }
1: 
0:     private void setOptions(Map options) throws NoSuchFieldException, IllegalAccessException {
1:         this.options = options;
0:         for (Iterator iterator = options.keySet().iterator(); iterator.hasNext();) {
0:             String attribute = (String) iterator.next();
1:             Object value = options.get(attribute);
1:             try {
1:                 Field field = getClass().getField(attribute);
1:                 field.set(this, value);
1:             } catch (Throwable e) {
0:                 log.info("Could not set field '" + attribute + "' to value '" + value
0:                         + "', make sure the field exists and is public.");
1:             }
1:         }
1:     }
1: 
1:     private CombinationTestSupport[] getCombinations() {
1:         try {
0:             Method method = getClass().getMethod("initCombos", null);
0:             method.invoke(this, null);
1:         } catch (Throwable e) {
1:         }
1:         
0:         String name = getName();
1:         String comboSetupMethodName = "initCombosFor" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
1:         try {
0:             Method method = getClass().getMethod(comboSetupMethodName, null);
0:             method.invoke(this, null);
1:         } catch (Throwable e) {
1:         }
1: 
1:         try {
0:             ArrayList expandedOptions = new ArrayList();
0:             expandCombinations(new ArrayList(comboOptions.values()), expandedOptions);
1:     
1:             if (expandedOptions.isEmpty()) {
1:                 combosEvaluated = true;
0:                 return new CombinationTestSupport[] { this };
1:             } else {
1:     
0:                 ArrayList result = new ArrayList();
1:                 // Run the test case for each possible combination
0:                 for (Iterator iter = expandedOptions.iterator(); iter.hasNext();) {
0:                     CombinationTestSupport combo = (CombinationTestSupport) TestSuite.createTest(getClass(), getName());
1:                     combo.combosEvaluated = true;
0:                     combo.setOptions((Map) iter.next());
1:                     result.add(combo);
1:                 }
1:     
1:                 CombinationTestSupport rc[] = new CombinationTestSupport[result.size()];
1:                 result.toArray(rc);
1:                 return rc;
1:             }
1:         } catch (Throwable e) {
1:             combosEvaluated = true;
0:             return new CombinationTestSupport[] { this };
1:         }
1: 
1:     }
1: 
0:     private void expandCombinations(List optionsLeft, List expandedCombos) {
1:         if (!optionsLeft.isEmpty()) {
0:             HashMap map;
1:             if (comboOptions.size() == optionsLeft.size()) {
0:                 map = new HashMap();
1:                 expandedCombos.add(map);
1:             } else {
0:                 map = (HashMap) expandedCombos.get(expandedCombos.size() - 1);
1:             }
1: 
0:             LinkedList l = new LinkedList(optionsLeft);
0:             ComboOption comboOption = (ComboOption) l.removeLast();
1:             int i = 0;
0:             for (Iterator iter = comboOption.values.iterator(); iter.hasNext();) {
0:                 Object value = (Object) iter.next();
0:                 if (i != 0) {
0:                     map = new HashMap(map);
1:                     expandedCombos.add(map);
1:                 }
0:                 map.put(comboOption.attribute, value);
1:                 expandCombinations(l, expandedCombos);
0:                 i++;
1:             }
1:         }
1:     }
1: 
0:     public static Test suite(Class clazz) {
1:         TestSuite suite = new TestSuite();
1: 
0:         ArrayList names = new ArrayList();
1:         Method[] methods = clazz.getMethods();
1:         for (int i = 0; i < methods.length; i++) {
1:             String name = methods[i].getName();
0:             if (names.contains(name) || !isPublicTestMethod(methods[i]))
1:                 continue;
1:             names.add(name);
1:             Test test = TestSuite.createTest(clazz, name);
1:             if (test instanceof CombinationTestSupport) {
0:                 CombinationTestSupport[] combinations = ((CombinationTestSupport) test).getCombinations();
1:                 for (int j = 0; j < combinations.length; j++) {
1:                     suite.addTest(combinations[j]);
1:                 }
1:             } else {
1:                 suite.addTest(test);
1:             }
1:         }
1:         return suite;
1:     }
1: 
0:     static private boolean isPublicTestMethod(Method m) {
1:         return isTestMethod(m) && Modifier.isPublic(m.getModifiers());
1:     }
1: 
0:     static private boolean isTestMethod(Method m) {
1:         String name = m.getName();
0:         Class[] parameters = m.getParameterTypes();
0:         Class returnType = m.getReturnType();
1:         return parameters.length == 0 && name.startsWith("test") && returnType.equals(Void.TYPE);
1:     }
1: 
1:     public String getName() {
0:         if (options != null) {
1:             return super.getName() + " " + options;
1:         }
1:         return super.getName();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CombinationTestSupport.class);
commit:0479a4e
/////////////////////////////////////////////////////////////////////////
1:             Method method = getClass().getMethod("initCombos", (Class[])null);
1:             method.invoke(this, (Object[])null);
1:             Method method = getClass().getMethod(comboSetupMethodName, (Class[])null);
1:             method.invoke(this, (Object[])null);
commit:e679067
/////////////////////////////////////////////////////////////////////////
0:     	return getName(false);
0:     }
0:     
1:     public String getName(boolean original) {
1:         if (options != null && !original) {
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: public abstract class CombinationTestSupport extends AutoFailTestSupport {
============================================================================