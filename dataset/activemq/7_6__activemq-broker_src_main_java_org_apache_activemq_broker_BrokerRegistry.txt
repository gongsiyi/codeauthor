1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:a2aed3d:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a2aed3d:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:a2aed3d: 
1:84c76a9: import java.util.Collections;
1:61fef74: import java.util.HashMap;
1:a51a7d5: import java.util.Iterator;
1:933eb2f: import java.util.Map;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a2aed3d: 
1:d29ca2a: /**
1:a2aed3d:  * 
1:d29ca2a:  */
1:230a86c: public class BrokerRegistry {
1:933eb2f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(BrokerRegistry.class);
1:fc00993:     private static final BrokerRegistry INSTANCE = new BrokerRegistry();
1:230a86c: 
1:230a86c:     private final Object mutex = new Object();
1:933eb2f:     private final Map<String, BrokerService> brokers = new HashMap<String, BrokerService>();
9:d29ca2a: 
1:fc00993:     public static BrokerRegistry getInstance() {
1:fc00993:         return INSTANCE;
1:fc00993:     }
1:fc00993: 
1:a2aed3d:     /**
1:a2aed3d:      * @param brokerName
1:a2aed3d:      * @return the BrokerService
1:a2aed3d:      */
1:230a86c:     public BrokerService lookup(String brokerName) {
1:230a86c:         BrokerService result = null;
1:230a86c:         synchronized (mutex) {
1:230a86c:             result = brokers.get(brokerName);
1:230a86c:             if (result == null && brokerName != null && brokerName.equals(BrokerService.DEFAULT_BROKER_NAME)) {
1:230a86c:                 result = findFirst();
1:230a86c:                 if (result != null) {
1:e1bbde7:                     LOG.warn("Broker localhost not started so using {} instead", result.getBrokerName());
1:a2aed3d:                 }
1:a2aed3d:             }
1:8f4ebbb:             if (result == null && (brokerName==null || brokerName.isEmpty() || brokerName.equals("null"))){
1:8f4ebbb:                 result = findFirst();
1:8f4ebbb:             }
1:61fef74:         }
1:a2aed3d:         return result;
1:d29ca2a:     }
1:61fef74: 
1:a51a7d5:     /**
1:a51a7d5:      * Returns the first registered broker found
1:b0c2a40:      * 
1:a2aed3d:      * @return the first BrokerService
1:a51a7d5:      */
1:230a86c:     public BrokerService findFirst() {
1:230a86c:         synchronized (mutex) {
1:230a86c:             Iterator<BrokerService> iter = brokers.values().iterator();
1:230a86c:             while (iter.hasNext()) {
1:a2aed3d:                 return iter.next();
1:d29ca2a:             }
1:a51a7d5:             return null;
1:d29ca2a:         }
3:a51a7d5:     }
1:d29ca2a: 
1:a2aed3d:     /**
1:a2aed3d:      * @param brokerName
1:a2aed3d:      * @param broker
1:a2aed3d:      */
1:230a86c:     public void bind(String brokerName, BrokerService broker) {
1:230a86c:         synchronized (mutex) {
1:230a86c:             brokers.put(brokerName, broker);
1:43880af:             mutex.notifyAll();
1:61fef74:         }
1:d29ca2a:     }
1:a2aed3d: 
1:a2aed3d:     /**
1:a2aed3d:      * @param brokerName
1:a2aed3d:      */
1:230a86c:     public void unbind(String brokerName) {
1:230a86c:         synchronized (mutex) {
1:61fef74:             brokers.remove(brokerName);
1:61fef74:         }
1:61fef74:     }
1:61fef74: 
1:a2aed3d:     /**
1:a2aed3d:      * @return the mutex used
1:a2aed3d:      */
1:230a86c:     public Object getRegistryMutext() {
1:61fef74:         return mutex;
1:d29ca2a:     }
1:84c76a9:     
1:84c76a9:     public Map<String, BrokerService> getBrokers() {
1:84c76a9:         return Collections.unmodifiableMap(this.brokers);
1:84c76a9:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Broker localhost not started so using {} instead", result.getBrokerName());
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1:             if (result == null && (brokerName==null || brokerName.isEmpty() || brokerName.equals("null"))){
1:                 result = findFirst();
1:             }
commit:84c76a9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Map<String, BrokerService> getBrokers() {
1:         return Collections.unmodifiableMap(this.brokers);
1:     }
commit:a2aed3d
/////////////////////////////////////////////////////////////////////////
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: public class BrokerRegistry{
0:     private static final Log log=LogFactory.getLog(BrokerRegistry.class);
0:     static final private BrokerRegistry instance=new BrokerRegistry();
1: 
0:     public static BrokerRegistry getInstance(){
0:     private final Object mutex=new Object();
0:     private final HashMap<String,BrokerService> brokers=new HashMap<String,BrokerService>();
1:     /**
1:      * @param brokerName
1:      * @return the BrokerService
1:      */
0:     public BrokerService lookup(String brokerName){
0:         BrokerService result=null;
0:         synchronized(mutex){
0:             result=brokers.get(brokerName);
0:             if(result==null&&brokerName!=null&&brokerName.equals(BrokerService.DEFAULT_BROKER_NAME)){
0:                 result=findFirst();
0:                 if(result!=null){
0:                     log.warn("Broker localhost not started so using "+result.getBrokerName()+" instead");
1:                 }
1:             }
1:         return result;
1:      * @return the first BrokerService
0:     public BrokerService findFirst(){
0:         synchronized(mutex){
0:             Iterator<BrokerService> iter=brokers.values().iterator();
0:             while(iter.hasNext()){
1:                 return iter.next();
1:     /**
1:      * @param brokerName
1:      * @param broker
1:      */
0:     public void bind(String brokerName,BrokerService broker){
0:         synchronized(mutex){
0:             brokers.put(brokerName,broker);
1: 
1:     /**
1:      * @param brokerName
1:      */
0:     public void unbind(String brokerName){
0:         synchronized(mutex){
1:     /**
1:      * @return the mutex used
1:      */
0:     public Object getRegistryMutext(){
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Map<String, BrokerService> brokers = new HashMap<String, BrokerService>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(BrokerRegistry.class);
1:     private static final BrokerRegistry INSTANCE = new BrokerRegistry();
1:     public static BrokerRegistry getInstance() {
1:         return INSTANCE;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                     LOG.warn("Broker localhost not started so using " + result.getBrokerName() + " instead");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class BrokerRegistry {
0:     private static final Log log = LogFactory.getLog(BrokerRegistry.class);
0:     static final private BrokerRegistry instance = new BrokerRegistry();
0:     public static BrokerRegistry getInstance() {
1: 
1:     private final Object mutex = new Object();
0:     private final HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:     public BrokerService lookup(String brokerName) {
1:         BrokerService result = null;
1:         synchronized (mutex) {
1:             result = brokers.get(brokerName);
1:             if (result == null && brokerName != null && brokerName.equals(BrokerService.DEFAULT_BROKER_NAME)) {
1:                 result = findFirst();
1:                 if (result != null) {
0:                     log.warn("Broker localhost not started so using " + result.getBrokerName() + " instead");
/////////////////////////////////////////////////////////////////////////
0:      * 
1:     public BrokerService findFirst() {
1:         synchronized (mutex) {
1:             Iterator<BrokerService> iter = brokers.values().iterator();
1:             while (iter.hasNext()) {
/////////////////////////////////////////////////////////////////////////
1:     public void bind(String brokerName, BrokerService broker) {
1:         synchronized (mutex) {
1:             brokers.put(brokerName, broker);
1:     public void unbind(String brokerName) {
1:         synchronized (mutex) {
/////////////////////////////////////////////////////////////////////////
1:     public Object getRegistryMutext() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:61fef74
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:     private final Object mutex = new Object();
0:     private final HashMap brokers = new HashMap();
1:     
0:         synchronized(mutex) {
0:             return (BrokerService)brokers.get(brokerName);
1:         }
0:         synchronized(mutex) {
0:             brokers.put(brokerName, broker);
1:         }
0:         synchronized(mutex) {
1:             brokers.remove(brokerName);
1:         }
1:     }
1: 
0:     public Object getRegistryMutext() {
1:         return mutex;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
0:  * 
0:  * @version $Revision: 1.3 $
1:  */
0: public class BrokerRegistry {
1: 
0:     static final private BrokerRegistry instance = new BrokerRegistry();
1:     
0:     public static BrokerRegistry getInstance() {
0:         return instance;
1:     }
1:     
0:     ConcurrentHashMap brokers = new ConcurrentHashMap();
1:     
0:     private BrokerRegistry() {        
1:     }
1: 
0:     public BrokerService lookup(String brokerName) {
0:         return (BrokerService)brokers.get(brokerName);
1:     }
1:     
0:     public void bind(String brokerName, BrokerService broker) {
0:         brokers.put(brokerName, broker);
1:     }
1:     
0:     public void unbind(String brokerName) {
0:         brokers.remove(brokerName);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(BrokerRegistry.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:43880af
/////////////////////////////////////////////////////////////////////////
1:             mutex.notifyAll();
author:James Strachan
-------------------------------------------------------------------------------
commit:a51a7d5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Returns the first registered broker found
1:      */
0:     public BrokerService findFirst() {
0:         synchronized(mutex) {
0:             Iterator iter = brokers.values().iterator();
0:             while (iter.hasNext()) {
0:             return (BrokerService) iter.next();
1:             }
1:             return null;
1:         }
1:     }
0: 
============================================================================