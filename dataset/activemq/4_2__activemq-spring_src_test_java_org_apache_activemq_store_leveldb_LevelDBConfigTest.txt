1:bd5124c: /**
1:bd5124c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd5124c:  * contributor license agreements.  See the NOTICE file distributed with
1:bd5124c:  * this work for additional information regarding copyright ownership.
1:bd5124c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd5124c:  * (the "License"); you may not use this file except in compliance with
1:bd5124c:  * the License.  You may obtain a copy of the License at
2:bd5124c:  *
1:bd5124c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd5124c:  *
1:bd5124c:  * Unless required by applicable law or agreed to in writing, software
1:bd5124c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd5124c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd5124c:  * See the License for the specific language governing permissions and
1:bd5124c:  * limitations under the License.
1:bd5124c:  */
1:bd5124c: package org.apache.activemq.store.leveldb;
9:bd5124c: 
1:bd5124c: import java.io.File;
1:bd5124c: 
1:bd5124c: import junit.framework.TestCase;
1:654320a: 
1:bd5124c: import org.apache.activemq.broker.BrokerService;
1:bd5124c: import org.apache.activemq.usage.SystemUsage;
1:bd5124c: import org.apache.activemq.xbean.BrokerFactoryBean;
1:bd5124c: import org.slf4j.Logger;
1:bd5124c: import org.slf4j.LoggerFactory;
1:bd5124c: import org.springframework.core.io.ClassPathResource;
1:bd5124c: import org.springframework.core.io.Resource;
1:bd5124c: 
1:bd5124c: /**
1:654320a:  *
1:bd5124c:  */
1:bd5124c: public class LevelDBConfigTest extends TestCase {
1:bd5124c: 
1:bd5124c:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/store/leveldb/";
1:bd5124c:     private static final Logger LOG = LoggerFactory.getLogger(LevelDBConfigTest.class);
1:bd5124c: 
1:bd5124c:     /*
1:bd5124c:      * This tests configuring the different broker properties using
1:bd5124c:      * xbeans-spring
1:bd5124c:      */
1:bd5124c:     public void testBrokerConfig() throws Exception {
1:bd5124c:         BrokerService broker;
1:bd5124c: 
1:bd5124c:         // Create broker from resource
1:bd5124c:         // System.out.print("Creating broker... ");
1:bd5124c:         broker = createBroker("org/apache/activemq/store/leveldb/leveldb.xml");
1:bd5124c:         LOG.info("Success");
1:bd5124c: 
1:bd5124c:         try {
1:bd5124c:             // Check broker configuration
1:bd5124c:             // System.out.print("Checking broker configurations... ");
1:bd5124c:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:bd5124c:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:bd5124c:             assertEquals("Broker Config Error (useLoggingForShutdownErrors)", true, broker.isUseLoggingForShutdownErrors());
1:bd5124c:             assertEquals("Broker Config Error (useJmx)", true, broker.isUseJmx());
1:654320a:             assertEquals("Broker Config Error (persistent)", true, broker.isPersistent());
1:bd5124c:             assertEquals("Broker Config Error (useShutdownHook)", false, broker.isUseShutdownHook());
1:bd5124c:             assertEquals("Broker Config Error (deleteAllMessagesOnStartup)", true, broker.isDeleteAllMessagesOnStartup());
1:bd5124c:             LOG.info("Success");
1:bd5124c: 
1:bd5124c:             // Check specific vm transport
1:bd5124c:             // System.out.print("Checking vm connector... ");
1:bd5124c:             assertEquals("Should have a specific VM Connector", "vm://javacoola", broker.getVmConnectorURI().toString());
1:bd5124c:             LOG.info("Success");
1:bd5124c: 
1:bd5124c: 
1:bd5124c:             // Check usage manager
1:bd5124c:             // System.out.print("Checking memory manager configurations... ");
1:bd5124c:             SystemUsage systemUsage = broker.getSystemUsage();
1:bd5124c:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:bd5124c:             assertEquals("SystemUsage Config Error (MemoryUsage.limit)", 1024 * 1024 * 10, systemUsage.getMemoryUsage().getLimit());
1:bd5124c:             assertEquals("SystemUsage Config Error (MemoryUsage.percentUsageMinDelta)", 20, systemUsage.getMemoryUsage().getPercentUsageMinDelta());
1:bd5124c:             assertEquals("SystemUsage Config Error (TempUsage.limit)", 1024 * 1024 * 100, systemUsage.getTempUsage().getLimit());
1:bd5124c:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:bd5124c:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1:bd5124c: 
1:bd5124c:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:bd5124c:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof LevelDBPersistenceAdapter);
1:654320a: 
1:bd5124c:             LOG.info("Success");
1:bd5124c: 
1:bd5124c:         } finally {
1:bd5124c:             if (broker != null) {
1:bd5124c:                 broker.stop();
1:bd5124c:             }
1:bd5124c:         }
1:bd5124c:     }
1:bd5124c: 
1:bd5124c:     /*
1:bd5124c:      * TODO: Create additional tests for forwarding bridges
1:bd5124c:      */
1:bd5124c: 
1:bd5124c:     protected static void recursiveDelete(File file) {
1:bd5124c:         if (file.isDirectory()) {
1:bd5124c:             File[] files = file.listFiles();
1:bd5124c:             for (int i = 0; i < files.length; i++) {
1:bd5124c:                 recursiveDelete(files[i]);
1:bd5124c:             }
1:bd5124c:         }
1:bd5124c:         file.delete();
1:bd5124c:     }
1:bd5124c: 
1:bd5124c:     protected BrokerService createBroker(String resource) throws Exception {
1:bd5124c:         return createBroker(new ClassPathResource(resource));
1:bd5124c:     }
1:bd5124c: 
1:bd5124c:     protected BrokerService createBroker(Resource resource) throws Exception {
1:bd5124c:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:bd5124c:         factory.afterPropertiesSet();
1:bd5124c: 
1:bd5124c:         BrokerService broker = factory.getBroker();
1:bd5124c: 
1:bd5124c:         assertTrue("Should have a broker!", broker != null);
1:bd5124c: 
1:bd5124c:         // Broker is already started by default when using the XML file
1:bd5124c:         // broker.start();
1:bd5124c: 
1:bd5124c:         return broker;
1:bd5124c:     }
1:bd5124c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:654320a
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Broker Config Error (persistent)", true, broker.isPersistent());
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
commit:b20d541
author:Robert Davies
-------------------------------------------------------------------------------
commit:bd5124c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.leveldb;
1: 
1: import java.io.File;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: /**
1:  * 
1:  */
1: public class LevelDBConfigTest extends TestCase {
1: 
1: 
1:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/store/leveldb/";
1:     private static final Logger LOG = LoggerFactory.getLogger(LevelDBConfigTest.class);
1: 
1: 
1: 
1: 
1:     /*
1:      * This tests configuring the different broker properties using
1:      * xbeans-spring
1:      */
1:     public void testBrokerConfig() throws Exception {
0:         ActiveMQTopic dest;
1:         BrokerService broker;
1: 
1: 
1:         // Create broker from resource
1:         // System.out.print("Creating broker... ");
1:         broker = createBroker("org/apache/activemq/store/leveldb/leveldb.xml");
1:         LOG.info("Success");
1: 
1:         try {
1:             // Check broker configuration
1:             // System.out.print("Checking broker configurations... ");
1:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:             assertEquals("Broker Config Error (useLoggingForShutdownErrors)", true, broker.isUseLoggingForShutdownErrors());
1:             assertEquals("Broker Config Error (useJmx)", true, broker.isUseJmx());
0:             assertEquals("Broker Config Error (persistent)", false, broker.isPersistent());
1:             assertEquals("Broker Config Error (useShutdownHook)", false, broker.isUseShutdownHook());
1:             assertEquals("Broker Config Error (deleteAllMessagesOnStartup)", true, broker.isDeleteAllMessagesOnStartup());
1:             LOG.info("Success");
1: 
1:             // Check specific vm transport
1:             // System.out.print("Checking vm connector... ");
1:             assertEquals("Should have a specific VM Connector", "vm://javacoola", broker.getVmConnectorURI().toString());
1:             LOG.info("Success");
1: 
1: 
1:             // Check usage manager
1:             // System.out.print("Checking memory manager configurations... ");
1:             SystemUsage systemUsage = broker.getSystemUsage();
1:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:             assertEquals("SystemUsage Config Error (MemoryUsage.limit)", 1024 * 1024 * 10, systemUsage.getMemoryUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (MemoryUsage.percentUsageMinDelta)", 20, systemUsage.getMemoryUsage().getPercentUsageMinDelta());
1:             assertEquals("SystemUsage Config Error (TempUsage.limit)", 1024 * 1024 * 100, systemUsage.getTempUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1: 
1:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof LevelDBPersistenceAdapter);
1:                         
1:             LOG.info("Success");
1: 
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1: 
1: 
1:     /*
1:      * TODO: Create additional tests for forwarding bridges
1:      */
1: 
1:     protected static void recursiveDelete(File file) {
1:         if (file.isDirectory()) {
1:             File[] files = file.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         file.delete();
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1: 
1:         BrokerService broker = factory.getBroker();
1: 
1:         assertTrue("Should have a broker!", broker != null);
1: 
1:         // Broker is already started by default when using the XML file
1:         // broker.start();
1: 
1:         return broker;
1:     }
1: }
============================================================================