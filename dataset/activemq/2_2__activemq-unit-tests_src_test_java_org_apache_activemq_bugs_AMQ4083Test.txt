1:c02acbd: /**
1:c02acbd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c02acbd:  * contributor license agreements.  See the NOTICE file distributed with
1:c02acbd:  * this work for additional information regarding copyright ownership.
1:c02acbd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c02acbd:  * (the "License"); you may not use this file except in compliance with
1:c02acbd:  * the License.  You may obtain a copy of the License at
1:c02acbd:  *
1:c02acbd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c02acbd:  *
1:c02acbd:  * Unless required by applicable law or agreed to in writing, software
1:c02acbd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c02acbd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c02acbd:  * See the License for the specific language governing permissions and
1:c02acbd:  * limitations under the License.
1:c02acbd:  */
1:c02acbd: package org.apache.activemq.bugs;
5:c02acbd: 
1:8a75d96: import java.util.ArrayList;
1:8a75d96: import java.util.Date;
1:c02acbd: import java.util.concurrent.TimeUnit;
1:c02acbd: import java.util.concurrent.atomic.AtomicInteger;
1:c02acbd: 
1:8a75d96: import javax.jms.Connection;
1:c02acbd: import javax.jms.DeliveryMode;
1:c02acbd: import javax.jms.JMSException;
1:c02acbd: import javax.jms.Message;
1:c02acbd: import javax.jms.MessageConsumer;
1:c02acbd: import javax.jms.MessageListener;
1:c02acbd: import javax.jms.MessageProducer;
1:c02acbd: import javax.jms.Session;
1:c02acbd: import javax.management.ObjectName;
1:c02acbd: import org.apache.activemq.ActiveMQConnection;
1:c02acbd: import org.apache.activemq.ActiveMQConnectionFactory;
1:8a75d96: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:c02acbd: import org.apache.activemq.broker.BrokerService;
1:c02acbd: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:c02acbd: import org.apache.activemq.command.ActiveMQQueue;
1:c02acbd: import org.apache.activemq.util.Wait;
1:c02acbd: import org.junit.After;
1:c02acbd: import org.junit.Before;
1:c02acbd: import org.junit.Test;
1:c02acbd: import org.slf4j.Logger;
1:c02acbd: import org.slf4j.LoggerFactory;
1:c02acbd: import static org.junit.Assert.assertEquals;
1:c02acbd: import static org.junit.Assert.assertTrue;
1:c02acbd: 
1:c02acbd: public class AMQ4083Test {
1:c02acbd: 
1:c02acbd:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3992Test.class);
1:c02acbd:     private static BrokerService brokerService;
1:c02acbd:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:c02acbd:     private static String TEST_QUEUE = "testQueue";
1:c02acbd:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:c02acbd: 
1:8a75d96:     private final int messageCount = 100;
1:8a75d96: 
1:c02acbd:     private String connectionUri;
1:8a75d96:     private String[] data;
1:c02acbd: 
1:c02acbd:     @Before
1:c02acbd:     public void setUp() throws Exception {
1:c02acbd:         brokerService = new BrokerService();
1:c02acbd:         brokerService.setPersistent(false);
1:c02acbd:         brokerService.setUseJmx(true);
1:c02acbd:         brokerService.setDeleteAllMessagesOnStartup(true);
1:c02acbd:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:c02acbd:         brokerService.start();
1:c02acbd:         brokerService.waitUntilStarted();
1:8a75d96: 
1:8a75d96:         data = new String[messageCount];
1:8a75d96: 
1:8a75d96:         for (int i = 0; i < messageCount; i++) {
1:8a75d96:             data[i] = "Text for message: " + i + " at " + new Date();
1:8a75d96:         }
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @After
1:c02acbd:     public void tearDown() throws Exception {
1:c02acbd:         brokerService.stop();
1:c02acbd:         brokerService.waitUntilStopped();
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @Test
1:c02acbd:     public void testExpiredMsgsBeforeNonExpired() throws Exception {
1:c02acbd: 
1:c02acbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c02acbd:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c02acbd:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1:c02acbd: 
1:c02acbd:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:c02acbd: 
1:c02acbd:         connection.start();
1:c02acbd: 
1:c02acbd:         MessageProducer producer = session.createProducer(queue);
1:c02acbd:         MessageConsumer consumer = session.createConsumer(queue);
1:c02acbd: 
1:c02acbd:         // send a batch that expires in a short time.
1:c02acbd:         for (int i = 0; i < 100; i++) {
1:c02acbd:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         // and send one that doesn't expire to we can ack it.
1:c02acbd:         producer.send(session.createTextMessage());
1:c02acbd: 
1:c02acbd:         // wait long enough so the first batch times out.
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:c02acbd: 
1:c02acbd:         assertEquals(101, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     message.acknowledge();
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         assertEquals(0, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd:             producer.send(session.createTextMessage());
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:c02acbd:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:c02acbd:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:c02acbd:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:c02acbd:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:c02acbd:     }
1:c02acbd: 
1:8a75d96:     @Test
1:c02acbd:     public void testExpiredMsgsBeforeNonExpiredWithTX() throws Exception {
1:c02acbd: 
1:c02acbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c02acbd:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c02acbd:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1:c02acbd: 
1:c02acbd:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c02acbd: 
1:c02acbd:         connection.start();
1:c02acbd: 
1:c02acbd:         MessageProducer producer = session.createProducer(queue);
1:c02acbd:         MessageConsumer consumer = session.createConsumer(queue);
1:c02acbd: 
1:c02acbd:         // send a batch that expires in a short time.
1:c02acbd:         for (int i = 0; i < 100; i++) {
1:c02acbd:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         // and send one that doesn't expire to we can ack it.
1:c02acbd:         producer.send(session.createTextMessage());
1:c02acbd:         session.commit();
1:c02acbd: 
1:c02acbd:         // wait long enough so the first batch times out.
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:c02acbd: 
1:c02acbd:         assertEquals(101, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     session.commit();
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         assertEquals(0, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd:             producer.send(session.createTextMessage());
1:c02acbd:         }
1:c02acbd:         session.commit();
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
4:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:c02acbd:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:c02acbd:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:c02acbd:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:c02acbd:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @Test
1:c02acbd:     public void testExpiredMsgsInterleavedWithNonExpired() throws Exception {
1:c02acbd: 
1:c02acbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c02acbd:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c02acbd:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1:c02acbd: 
1:c02acbd:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:c02acbd: 
1:c02acbd:         connection.start();
1:c02acbd: 
1:c02acbd:         MessageProducer producer = session.createProducer(queue);
1:c02acbd:         MessageConsumer consumer = session.createConsumer(queue);
1:c02acbd: 
1:c02acbd:         // send a batch that expires in a short time.
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd: 
1:c02acbd:             if ((i % 2) == 0) {
1:c02acbd:                 producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:c02acbd:             } else {
1:c02acbd:                 producer.send(session.createTextMessage());
1:c02acbd:             }
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         // wait long enough so the first batch times out.
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:c02acbd: 
1:c02acbd:         assertEquals(200, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     LOG.debug("Acking message: {}", message);
1:c02acbd:                     message.acknowledge();
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd:             producer.send(session.createTextMessage());
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:c02acbd:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:c02acbd:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:c02acbd:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:c02acbd:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @Test
1:c02acbd:     public void testExpiredMsgsInterleavedWithNonExpiredCumulativeAck() throws Exception {
1:c02acbd: 
1:c02acbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c02acbd:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c02acbd:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1:c02acbd: 
1:c02acbd:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:c02acbd: 
1:c02acbd:         connection.start();
1:c02acbd: 
1:c02acbd:         MessageProducer producer = session.createProducer(queue);
1:c02acbd:         MessageConsumer consumer = session.createConsumer(queue);
1:c02acbd: 
1:c02acbd:         // send a batch that expires in a short time.
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd: 
1:c02acbd:             if ((i % 2) == 0) {
1:c02acbd:                 producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:c02acbd:             } else {
1:c02acbd:                 producer.send(session.createTextMessage());
1:c02acbd:             }
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         // wait long enough so the first batch times out.
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:c02acbd: 
1:c02acbd:         assertEquals(200, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         final AtomicInteger msgCount = new AtomicInteger();
1:c02acbd: 
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     if (msgCount.incrementAndGet() == 100) {
1:c02acbd:                         LOG.debug("Acking message: {}", message);
1:c02acbd:                         message.acknowledge();
1:c02acbd:                     }
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         // Now we just ack each and see if our counters come out right in the end.
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     LOG.debug("Acking message: {}", message);
1:c02acbd:                     message.acknowledge();
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd:             producer.send(session.createTextMessage());
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:c02acbd:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:c02acbd:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:c02acbd:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:c02acbd:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @Test
1:c02acbd:     public void testExpiredBatchBetweenNonExpiredMessages() throws Exception {
1:c02acbd: 
1:c02acbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c02acbd:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c02acbd:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1:c02acbd: 
1:c02acbd:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:c02acbd: 
1:c02acbd:         connection.start();
1:c02acbd: 
1:c02acbd:         MessageProducer producer = session.createProducer(queue);
1:c02acbd:         MessageConsumer consumer = session.createConsumer(queue);
1:c02acbd: 
1:c02acbd:         // Send one that doesn't expire so we can ack it.
1:c02acbd:         producer.send(session.createTextMessage());
1:c02acbd: 
1:c02acbd:         // send a batch that expires in a short time.
1:c02acbd:         for (int i = 0; i < 100; i++) {
1:c02acbd:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         // and send one that doesn't expire so we can ack it.
1:c02acbd:         producer.send(session.createTextMessage());
1:c02acbd: 
1:c02acbd:         // wait long enough so the first batch times out.
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:c02acbd: 
1:c02acbd:         assertEquals(102, queueView.getInFlightCount());
1:c02acbd: 
1:c02acbd:         consumer.setMessageListener(new MessageListener() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public void onMessage(Message message) {
1:c02acbd:                 try {
1:c02acbd:                     message.acknowledge();
1:c02acbd:                 } catch (JMSException e) {
1:c02acbd:                 }
1:c02acbd:             }
1:c02acbd:         });
1:c02acbd: 
1:c02acbd:         TimeUnit.SECONDS.sleep(5);
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         for (int i = 0; i < 200; i++) {
1:c02acbd:             producer.send(session.createTextMessage());
1:c02acbd:         }
1:c02acbd: 
1:c02acbd:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:c02acbd: 
1:c02acbd:             @Override
1:c02acbd:             public boolean isSatisified() throws Exception {
1:c02acbd:                 return queueView.getInFlightCount() == 0;
1:c02acbd:             }
1:c02acbd:         }));
1:c02acbd: 
1:c02acbd:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:c02acbd:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:c02acbd:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:c02acbd:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:c02acbd:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:c02acbd:     }
1:c02acbd: 
1:c02acbd:     @Test
1:8a75d96:     public void testConsumeExpiredQueueAndDlq() throws Exception {
1:8a75d96: 
1:8a75d96:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:8a75d96:         Connection connection = factory.createConnection();
1:8a75d96: 
1:8a75d96:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8a75d96: 
1:8a75d96:         MessageProducer producerNormal = session.createProducer(queue);
1:8a75d96:         MessageProducer producerExpire = session.createProducer(queue);
1:8a75d96:         producerExpire.setTimeToLive(500);
1:8a75d96: 
1:8a75d96:         MessageConsumer dlqConsumer = session.createConsumer(session.createQueue("ActiveMQ.DLQ"));
1:8a75d96:         connection.start();
1:8a75d96: 
1:8a75d96:         Connection consumerConnection = factory.createConnection();
1:8a75d96:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:8a75d96:         prefetchPolicy.setAll(10);
1:8a75d96:         ((ActiveMQConnection)consumerConnection).setPrefetchPolicy(prefetchPolicy);
1:8a75d96:         Session consumerSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:8a75d96:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:8a75d96:         consumerConnection.start();
1:8a75d96: 
1:8a75d96:         String msgBody = new String(new byte[20*1024]);
1:8a75d96:         for (int i = 0; i < data.length; i++) {
1:8a75d96:             Message message = session.createTextMessage(msgBody);
1:8a75d96:             producerExpire.send(queue, message);
1:8a75d96:         }
1:8a75d96: 
1:8a75d96:         for (int i = 0; i < data.length; i++) {
1:8a75d96:             Message message = session.createTextMessage(msgBody);
1:8a75d96:             producerNormal.send(queue, message);
1:8a75d96:         }
1:8a75d96: 
1:8a75d96:         ArrayList<Message> messages = new ArrayList<Message>();
1:8a75d96:         Message received;
1:8a75d96:         while ((received = consumer.receive(1000)) != null) {
1:8a75d96:             messages.add(received);
1:8a75d96:             if (messages.size() == 1) {
1:8a75d96:                TimeUnit.SECONDS.sleep(1);
1:8a75d96:             }
1:8a75d96:             received.acknowledge();
1:8a75d96:         };
1:8a75d96: 
1:8a75d96:         assertEquals("got messages", messageCount + 1, messages.size());
1:8a75d96: 
1:8a75d96:         ArrayList<Message> dlqMessages = new ArrayList<Message>();
1:8a75d96:         while ((received = dlqConsumer.receive(1000)) != null) {
1:8a75d96:             dlqMessages.add(received);
1:8a75d96:         };
1:8a75d96: 
1:8a75d96:         assertEquals("got dlq messages", data.length - 1, dlqMessages.size());
1:8a75d96: 
1:8a75d96:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:8a75d96: 
1:8a75d96:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:8a75d96:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:8a75d96:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:8a75d96:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:8a75d96:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:8a75d96:     }
1:8a75d96: 
1:c02acbd:     private QueueViewMBean getProxyToQueueViewMBean() throws Exception {
1:cb7b657:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
1:c02acbd:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:c02acbd:                 queueViewMBeanName, QueueViewMBean.class, true);
1:c02acbd:         return proxy;
1:c02acbd:     }
1:c02acbd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:8a75d96
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Date;
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
1:     private final int messageCount = 100;
1: 
1:     private String[] data;
/////////////////////////////////////////////////////////////////////////
1: 
1:         data = new String[messageCount];
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             data[i] = "Text for message: " + i + " at " + new Date();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testConsumeExpiredQueueAndDlq() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         Connection connection = factory.createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producerNormal = session.createProducer(queue);
1:         MessageProducer producerExpire = session.createProducer(queue);
1:         producerExpire.setTimeToLive(500);
1: 
1:         MessageConsumer dlqConsumer = session.createConsumer(session.createQueue("ActiveMQ.DLQ"));
1:         connection.start();
1: 
1:         Connection consumerConnection = factory.createConnection();
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(10);
1:         ((ActiveMQConnection)consumerConnection).setPrefetchPolicy(prefetchPolicy);
1:         Session consumerSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:         consumerConnection.start();
1: 
1:         String msgBody = new String(new byte[20*1024]);
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = session.createTextMessage(msgBody);
1:             producerExpire.send(queue, message);
1:         }
1: 
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = session.createTextMessage(msgBody);
1:             producerNormal.send(queue, message);
1:         }
1: 
1:         ArrayList<Message> messages = new ArrayList<Message>();
1:         Message received;
1:         while ((received = consumer.receive(1000)) != null) {
1:             messages.add(received);
1:             if (messages.size() == 1) {
1:                TimeUnit.SECONDS.sleep(1);
1:             }
1:             received.acknowledge();
1:         };
1: 
1:         assertEquals("got messages", messageCount + 1, messages.size());
1: 
1:         ArrayList<Message> dlqMessages = new ArrayList<Message>();
1:         while ((received = dlqConsumer.receive(1000)) != null) {
1:             dlqMessages.add(received);
1:         };
1: 
1:         assertEquals("got dlq messages", data.length - 1, dlqMessages.size());
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
commit:c02acbd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4083Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3992Test.class);
1:     private static BrokerService brokerService;
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:     private static String TEST_QUEUE = "testQueue";
1:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testExpiredMsgsBeforeNonExpired() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         // send a batch that expires in a short time.
1:         for (int i = 0; i < 100; i++) {
1:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:         }
1: 
1:         // and send one that doesn't expire to we can ack it.
1:         producer.send(session.createTextMessage());
1: 
1:         // wait long enough so the first batch times out.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertEquals(101, queueView.getInFlightCount());
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     message.acknowledge();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertEquals(0, queueView.getInFlightCount());
1: 
1:         for (int i = 0; i < 200; i++) {
1:             producer.send(session.createTextMessage());
1:         }
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
1:     @Test
1:     public void testExpiredMsgsBeforeNonExpiredWithTX() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1: 
1:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         // send a batch that expires in a short time.
1:         for (int i = 0; i < 100; i++) {
1:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:         }
1: 
1:         // and send one that doesn't expire to we can ack it.
1:         producer.send(session.createTextMessage());
1:         session.commit();
1: 
1:         // wait long enough so the first batch times out.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertEquals(101, queueView.getInFlightCount());
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     session.commit();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertEquals(0, queueView.getInFlightCount());
1: 
1:         for (int i = 0; i < 200; i++) {
1:             producer.send(session.createTextMessage());
1:         }
1:         session.commit();
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
1:     @Test
1:     public void testExpiredMsgsInterleavedWithNonExpired() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         // send a batch that expires in a short time.
1:         for (int i = 0; i < 200; i++) {
1: 
1:             if ((i % 2) == 0) {
1:                 producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:             } else {
1:                 producer.send(session.createTextMessage());
1:             }
1:         }
1: 
1:         // wait long enough so the first batch times out.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertEquals(200, queueView.getInFlightCount());
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.debug("Acking message: {}", message);
1:                     message.acknowledge();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         for (int i = 0; i < 200; i++) {
1:             producer.send(session.createTextMessage());
1:         }
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
1:     @Test
1:     public void testExpiredMsgsInterleavedWithNonExpiredCumulativeAck() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         // send a batch that expires in a short time.
1:         for (int i = 0; i < 200; i++) {
1: 
1:             if ((i % 2) == 0) {
1:                 producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:             } else {
1:                 producer.send(session.createTextMessage());
1:             }
1:         }
1: 
1:         // wait long enough so the first batch times out.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertEquals(200, queueView.getInFlightCount());
1: 
1:         final AtomicInteger msgCount = new AtomicInteger();
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     if (msgCount.incrementAndGet() == 100) {
1:                         LOG.debug("Acking message: {}", message);
1:                         message.acknowledge();
1:                     }
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         // Now we just ack each and see if our counters come out right in the end.
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.debug("Acking message: {}", message);
1:                     message.acknowledge();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         for (int i = 0; i < 200; i++) {
1:             producer.send(session.createTextMessage());
1:         }
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
1:     @Test
1:     public void testExpiredBatchBetweenNonExpiredMessages() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(400);
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         // Send one that doesn't expire so we can ack it.
1:         producer.send(session.createTextMessage());
1: 
1:         // send a batch that expires in a short time.
1:         for (int i = 0; i < 100; i++) {
1:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 4, 4000);
1:         }
1: 
1:         // and send one that doesn't expire so we can ack it.
1:         producer.send(session.createTextMessage());
1: 
1:         // wait long enough so the first batch times out.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertEquals(102, queueView.getInFlightCount());
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     message.acknowledge();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         for (int i = 0; i < 200; i++) {
1:             producer.send(session.createTextMessage());
1:         }
1: 
1:         assertTrue("Inflight count should reach zero, currently: " + queueView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("Dequeued Count: {}", queueView.getDequeueCount());
1:         LOG.info("Dispatch Count: {}", queueView.getDispatchCount());
1:         LOG.info("Enqueue Count: {}", queueView.getEnqueueCount());
1:         LOG.info("Expired Count: {}", queueView.getExpiredCount());
1:         LOG.info("InFlight Count: {}", queueView.getInFlightCount());
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean() throws Exception {
0:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:Type=Queue,Destination="
0:                 + queue.getQueueName() + ",BrokerName=localhost");
1:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:                 queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
============================================================================