1:bc4f4e9: /**
1:bc4f4e9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc4f4e9:  * contributor license agreements.  See the NOTICE file distributed with
1:bc4f4e9:  * this work for additional information regarding copyright ownership.
1:bc4f4e9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc4f4e9:  * (the "License"); you may not use this file except in compliance with
1:bc4f4e9:  * the License.  You may obtain a copy of the License at
1:bc4f4e9:  *
1:bc4f4e9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc4f4e9:  *
1:bc4f4e9:  * Unless required by applicable law or agreed to in writing, software
1:bc4f4e9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc4f4e9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc4f4e9:  * See the License for the specific language governing permissions and
1:bc4f4e9:  * limitations under the License.
1:bc4f4e9:  */
1:bc4f4e9: package org.apache.activemq.store;
2:bc4f4e9: 
1:bc4f4e9: import java.io.IOException;
1:bc4f4e9: import java.util.ArrayList;
1:bc4f4e9: import java.util.List;
1:bc4f4e9: 
1:4b0e3e5: import org.apache.activemq.command.ActiveMQDestination;
1:4b0e3e5: import org.apache.activemq.command.ActiveMQQueue;
1:4b0e3e5: import org.apache.activemq.command.ActiveMQTopic;
1:4b0e3e5: import org.apache.activemq.command.SubscriptionInfo;
1:4b0e3e5: 
1:bc4f4e9: /**
1:bc4f4e9:  * Used to implement common PersistenceAdapter methods.
1:bc4f4e9:  */
1:bc4f4e9: public class PersistenceAdapterSupport {
1:bc4f4e9: 
1:4b0e3e5:     private static final DestinationMatcher MATCH_ALL = new AlwaysMatches();
1:4b0e3e5: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Provides an interface for a Destination matching object that can be used to
1:4b0e3e5:      * search for specific destinations from a persistence adapter.
1:4b0e3e5:      */
1:4b0e3e5:     public interface DestinationMatcher {
1:4b0e3e5: 
1:4b0e3e5:         /**
1:4b0e3e5:          * Given a Destination object, return true if the destination matches some defined
1:4b0e3e5:          * search criteria, false otherwise.
1:4b0e3e5:          *
1:4b0e3e5:          * @param destination
1:4b0e3e5:          *        the destination to inspect.
1:4b0e3e5:          *
1:4b0e3e5:          * @return true if the destination matches the target criteria, false otherwise.
1:4b0e3e5:          */
1:4b0e3e5:         boolean matches(ActiveMQDestination destination);
1:4b0e3e5: 
1:4b0e3e5:     }
1:4b0e3e5: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Searches the set of subscriptions from the given persistence adapter and returns all those
1:4b0e3e5:      * that belong to the given ClientId value.
1:4b0e3e5:      *
1:4b0e3e5:      * @param adapter
1:4b0e3e5:      *        the persistence adapter instance to search within.
1:4b0e3e5:      * @param clientId
1:4b0e3e5:      *        the client ID value used to filter the subscription set.
1:4b0e3e5:      *
1:4b0e3e5:      * @return a list of all subscriptions belonging to the given client.
1:4b0e3e5:      *
1:4b0e3e5:      * @throws IOException if an error occurs while listing the stored subscriptions.
1:4b0e3e5:      */
1:4b0e3e5:     static public List<SubscriptionInfo> listSubscriptions(PersistenceAdapter adapter, String clientId) throws IOException {
1:bc4f4e9:         ArrayList<SubscriptionInfo> rc = new ArrayList<SubscriptionInfo>();
1:4b0e3e5:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:4b0e3e5:             if (destination.isTopic()) {
1:4b0e3e5:                 TopicMessageStore store = adapter.createTopicMessageStore((ActiveMQTopic) destination);
1:bc4f4e9:                 for (SubscriptionInfo sub : store.getAllSubscriptions()) {
1:4b0e3e5:                     if (clientId == sub.getClientId() || clientId.equals(sub.getClientId())) {
1:bc4f4e9:                         rc.add(sub);
1:bc4f4e9:                     }
1:bc4f4e9:                 }
1:bc4f4e9:             }
1:bc4f4e9:         }
1:bc4f4e9:         return rc;
1:bc4f4e9:     }
1:bc4f4e9: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances.
1:4b0e3e5:      *
1:4b0e3e5:      * @param adapter
1:4b0e3e5:      *        the persistence adapter instance to query.
1:4b0e3e5:      *
1:4b0e3e5:      * @return a List<ActiveMQQeue> with all the queue destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @throws IOException if an error occurs while reading the destinations.
1:4b0e3e5:      */
1:4b0e3e5:     static public List<ActiveMQQueue> listQueues(PersistenceAdapter adapter) throws IOException {
1:4b0e3e5:         return listQueues(adapter, MATCH_ALL);
1:4b0e3e5:     }
1:4b0e3e5: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances
1:4b0e3e5:      * that match some given search criteria.
1:4b0e3e5:      *
1:4b0e3e5:      * @param adapter
1:4b0e3e5:      *        the persistence adapter instance to query.
1:4b0e3e5:      * @param matcher
1:4b0e3e5:      *        the DestinationMatcher instance used to find the target destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @return a List<ActiveMQQeue> with all the matching destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @throws IOException if an error occurs while reading the destinations.
1:4b0e3e5:      */
1:4b0e3e5:     static public List<ActiveMQQueue> listQueues(PersistenceAdapter adapter, DestinationMatcher matcher) throws IOException {
1:4b0e3e5:         ArrayList<ActiveMQQueue> rc = new ArrayList<ActiveMQQueue>();
1:4b0e3e5:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:4b0e3e5:             if (destination.isQueue() && matcher.matches(destination)) {
1:4b0e3e5:                 rc.add((ActiveMQQueue) destination);
1:4b0e3e5:             }
1:4b0e3e5:         }
1:4b0e3e5:         return rc;
1:4b0e3e5:     }
1:4b0e3e5: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances.
1:4b0e3e5:      *
1:4b0e3e5:      * @param adapter
1:4b0e3e5:      *        the persistence adapter instance to query.
1:4b0e3e5:      *
1:4b0e3e5:      * @return a List<ActiveMQTopic> with all the topic destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @throws IOException if an error occurs while reading the destinations.
1:4b0e3e5:      */
1:4b0e3e5:     static public List<ActiveMQTopic> listTopics(PersistenceAdapter adapter) throws IOException {
1:4b0e3e5:         return listTopics(adapter, MATCH_ALL);
1:4b0e3e5:     }
1:4b0e3e5: 
1:4b0e3e5:     /**
1:4b0e3e5:      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances
1:4b0e3e5:      * that match some given search criteria.
1:4b0e3e5:      *
1:4b0e3e5:      * @param adapter
1:4b0e3e5:      *        the persistence adapter instance to query.
1:4b0e3e5:      * @param matcher
1:4b0e3e5:      *        the DestinationMatcher instance used to find the target destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @return a List<ActiveMQTopic> with all the matching destinations.
1:4b0e3e5:      *
1:4b0e3e5:      * @throws IOException if an error occurs while reading the destinations.
1:4b0e3e5:      */
1:4b0e3e5:     static public List<ActiveMQTopic> listTopics(PersistenceAdapter adapter, DestinationMatcher matcher) throws IOException {
1:4b0e3e5:         ArrayList<ActiveMQTopic> rc = new ArrayList<ActiveMQTopic>();
1:4b0e3e5:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:4b0e3e5:             if (destination.isTopic() && matcher.matches(destination)) {
1:4b0e3e5:                 rc.add((ActiveMQTopic) destination);
1:4b0e3e5:             }
1:4b0e3e5:         }
1:4b0e3e5:         return rc;
1:4b0e3e5:     }
1:4b0e3e5: 
1:4b0e3e5:     private static class AlwaysMatches implements DestinationMatcher {
1:4b0e3e5: 
1:4b0e3e5:         @Override
1:4b0e3e5:         public boolean matches(ActiveMQDestination destination) {
1:4b0e3e5:             return true;
1:4b0e3e5:         }
1:4b0e3e5:     }
1:bc4f4e9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b0e3e5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1:     private static final DestinationMatcher MATCH_ALL = new AlwaysMatches();
1: 
1:     /**
1:      * Provides an interface for a Destination matching object that can be used to
1:      * search for specific destinations from a persistence adapter.
1:      */
1:     public interface DestinationMatcher {
1: 
1:         /**
1:          * Given a Destination object, return true if the destination matches some defined
1:          * search criteria, false otherwise.
1:          *
1:          * @param destination
1:          *        the destination to inspect.
1:          *
1:          * @return true if the destination matches the target criteria, false otherwise.
1:          */
1:         boolean matches(ActiveMQDestination destination);
1: 
1:     }
1: 
1:     /**
1:      * Searches the set of subscriptions from the given persistence adapter and returns all those
1:      * that belong to the given ClientId value.
1:      *
1:      * @param adapter
1:      *        the persistence adapter instance to search within.
1:      * @param clientId
1:      *        the client ID value used to filter the subscription set.
1:      *
1:      * @return a list of all subscriptions belonging to the given client.
1:      *
1:      * @throws IOException if an error occurs while listing the stored subscriptions.
1:      */
1:     static public List<SubscriptionInfo> listSubscriptions(PersistenceAdapter adapter, String clientId) throws IOException {
1:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:             if (destination.isTopic()) {
1:                 TopicMessageStore store = adapter.createTopicMessageStore((ActiveMQTopic) destination);
1:                     if (clientId == sub.getClientId() || clientId.equals(sub.getClientId())) {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances.
1:      *
1:      * @param adapter
1:      *        the persistence adapter instance to query.
1:      *
1:      * @return a List<ActiveMQQeue> with all the queue destinations.
1:      *
1:      * @throws IOException if an error occurs while reading the destinations.
1:      */
1:     static public List<ActiveMQQueue> listQueues(PersistenceAdapter adapter) throws IOException {
1:         return listQueues(adapter, MATCH_ALL);
1:     }
1: 
1:     /**
1:      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances
1:      * that match some given search criteria.
1:      *
1:      * @param adapter
1:      *        the persistence adapter instance to query.
1:      * @param matcher
1:      *        the DestinationMatcher instance used to find the target destinations.
1:      *
1:      * @return a List<ActiveMQQeue> with all the matching destinations.
1:      *
1:      * @throws IOException if an error occurs while reading the destinations.
1:      */
1:     static public List<ActiveMQQueue> listQueues(PersistenceAdapter adapter, DestinationMatcher matcher) throws IOException {
1:         ArrayList<ActiveMQQueue> rc = new ArrayList<ActiveMQQueue>();
1:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:             if (destination.isQueue() && matcher.matches(destination)) {
1:                 rc.add((ActiveMQQueue) destination);
1:             }
1:         }
1:         return rc;
1:     }
1: 
1:     /**
1:      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances.
1:      *
1:      * @param adapter
1:      *        the persistence adapter instance to query.
1:      *
1:      * @return a List<ActiveMQTopic> with all the topic destinations.
1:      *
1:      * @throws IOException if an error occurs while reading the destinations.
1:      */
1:     static public List<ActiveMQTopic> listTopics(PersistenceAdapter adapter) throws IOException {
1:         return listTopics(adapter, MATCH_ALL);
1:     }
1: 
1:     /**
1:      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances
1:      * that match some given search criteria.
1:      *
1:      * @param adapter
1:      *        the persistence adapter instance to query.
1:      * @param matcher
1:      *        the DestinationMatcher instance used to find the target destinations.
1:      *
1:      * @return a List<ActiveMQTopic> with all the matching destinations.
1:      *
1:      * @throws IOException if an error occurs while reading the destinations.
1:      */
1:     static public List<ActiveMQTopic> listTopics(PersistenceAdapter adapter, DestinationMatcher matcher) throws IOException {
1:         ArrayList<ActiveMQTopic> rc = new ArrayList<ActiveMQTopic>();
1:         for (ActiveMQDestination destination : adapter.getDestinations()) {
1:             if (destination.isTopic() && matcher.matches(destination)) {
1:                 rc.add((ActiveMQTopic) destination);
1:             }
1:         }
1:         return rc;
1:     }
1: 
1:     private static class AlwaysMatches implements DestinationMatcher {
1: 
1:         @Override
1:         public boolean matches(ActiveMQDestination destination) {
1:             return true;
1:         }
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bc4f4e9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: /**
1:  * Used to implement common PersistenceAdapter methods.
1:  */
1: public class PersistenceAdapterSupport {
1: 
0:     static public List<SubscriptionInfo> listSubscriptions(PersistenceAdapter pa, String clientId) throws IOException {
1:         ArrayList<SubscriptionInfo> rc = new ArrayList<SubscriptionInfo>();
0:         for (ActiveMQDestination destination : pa.getDestinations()) {
0:             if( destination.isTopic() ) {
0:                 TopicMessageStore store = pa.createTopicMessageStore((ActiveMQTopic) destination);
1:                 for (SubscriptionInfo sub : store.getAllSubscriptions()) {
0:                     if(clientId==sub.getClientId() || clientId.equals(sub.getClientId()) ) {
1:                         rc.add(sub);
1:                     }
1:                 }
1:             }
1:         }
1:         return rc;
1:     }
1: 
1: }
============================================================================