1:e07d29c: /**
1:e07d29c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e07d29c:  * contributor license agreements.  See the NOTICE file distributed with
1:e07d29c:  * this work for additional information regarding copyright ownership.
1:e07d29c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e07d29c:  * (the "License"); you may not use this file except in compliance with
1:e07d29c:  * the License.  You may obtain a copy of the License at
1:e07d29c:  *
1:e07d29c:  * http://www.apache.org/licenses/LICENSE-2.0
1:e07d29c:  *
1:e07d29c:  * Unless required by applicable law or agreed to in writing, software
1:e07d29c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e07d29c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e07d29c:  * See the License for the specific language governing permissions and
1:e07d29c:  * limitations under the License.
1:e07d29c:  */
1:e07d29c: package org.apache.activemq.bugs;
5:e07d29c: 
1:5219fa1: import java.lang.reflect.Field;
1:5219fa1: import java.net.URI;
1:5219fa1: import java.util.Map;
1:5219fa1: import java.util.concurrent.CountDownLatch;
1:5219fa1: import java.util.concurrent.TimeUnit;
1:5219fa1: 
1:5219fa1: import javax.jms.Connection;
1:5219fa1: import javax.jms.Destination;
1:5219fa1: import javax.jms.JMSException;
1:5219fa1: import javax.jms.Message;
1:5219fa1: import javax.jms.MessageConsumer;
1:5219fa1: import javax.jms.MessageListener;
1:5219fa1: import javax.jms.MessageProducer;
1:5219fa1: import javax.jms.Session;
1:5219fa1: import javax.jms.TextMessage;
1:5219fa1: 
1:e07d29c: import org.apache.activemq.ActiveMQConnectionFactory;
1:e07d29c: import org.apache.activemq.TestSupport;
1:5219fa1: import org.apache.activemq.broker.BrokerFactory;
1:5219fa1: import org.apache.activemq.broker.BrokerService;
1:5219fa1: import org.apache.activemq.broker.ProducerBrokerExchange;
1:5219fa1: import org.apache.activemq.broker.TransportConnection;
1:5219fa1: import org.apache.activemq.broker.TransportConnector;
1:e07d29c: import org.apache.activemq.command.ActiveMQDestination;
1:e07d29c: import org.apache.activemq.command.ProducerId;
1:e07d29c: import org.apache.activemq.transport.vm.VMTransportFactory;
1:7400977: import org.apache.activemq.util.Wait;
1:bf9c4c6: import org.slf4j.Logger;
1:bf9c4c6: import org.slf4j.LoggerFactory;
1:e07d29c: 
1:e07d29c: /**
1:e07d29c:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:e07d29c:  */
1:e07d29c: public class AMQ4222Test extends TestSupport {
1:e07d29c: 
1:bf9c4c6:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4222Test.class);
1:bf9c4c6: 
1:e07d29c:     protected BrokerService brokerService;
1:e07d29c: 
1:e07d29c:     @Override
1:e07d29c:     protected void setUp() throws Exception {
1:e07d29c:         super.setUp();
1:e07d29c:         topic = false;
1:e07d29c:         brokerService = createBroker();
1:e07d29c:     }
1:e07d29c: 
1:e07d29c:     @Override
1:e07d29c:     protected void tearDown() throws Exception {
1:e07d29c:         brokerService.stop();
1:e07d29c:         brokerService.waitUntilStopped();
1:e07d29c:     }
1:e07d29c: 
1:e07d29c:     protected BrokerService createBroker() throws Exception {
1:e07d29c:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false"));
1:e07d29c:         broker.start();
1:e07d29c:         broker.waitUntilStarted();
1:e07d29c:         return broker;
1:e07d29c:     }
1:e07d29c: 
1:e07d29c:     @Override
1:e07d29c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:e07d29c:         return new ActiveMQConnectionFactory("vm://localhost");
1:e07d29c:     }
1:e07d29c: 
1:e07d29c:     public void testTempQueueCleanedUp() throws Exception {
1:e07d29c: 
1:e07d29c:         Destination requestQueue = createDestination();
1:e07d29c: 
1:e07d29c:         Connection producerConnection = createConnection();
1:e07d29c:         producerConnection.start();
1:e07d29c:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e07d29c: 
1:e07d29c:         MessageProducer producer = producerSession.createProducer(requestQueue);
1:e07d29c:         Destination replyTo = producerSession.createTemporaryQueue();
1:e07d29c:         MessageConsumer producerSessionConsumer = producerSession.createConsumer(replyTo);
1:e07d29c: 
1:e07d29c:         final CountDownLatch countDownLatch = new CountDownLatch(1);
1:e07d29c:         // let's listen to the response on the queue
1:e07d29c:         producerSessionConsumer.setMessageListener(new MessageListener() {
1:e07d29c:             @Override
1:e07d29c:             public void onMessage(Message message) {
1:e07d29c:                 try {
1:e07d29c:                     if (message instanceof TextMessage) {
1:bf9c4c6:                         LOG.info("You got a message: " + ((TextMessage) message).getText());
1:e07d29c:                         countDownLatch.countDown();
1:e07d29c:                     }
1:e07d29c:                 } catch (JMSException e) {
1:e07d29c:                     e.printStackTrace();
1:e07d29c:                 }
1:e07d29c:             }
1:e07d29c:         });
1:e07d29c: 
1:e07d29c:         producer.send(createRequest(producerSession, replyTo));
1:e07d29c: 
1:e07d29c:         Connection consumerConnection = createConnection();
1:e07d29c:         consumerConnection.start();
1:e07d29c:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e07d29c:         MessageConsumer consumer = consumerSession.createConsumer(requestQueue);
1:e07d29c:         final MessageProducer consumerProducer = consumerSession.createProducer(null);
1:e07d29c: 
1:e07d29c:         consumer.setMessageListener(new MessageListener() {
1:e07d29c:             @Override
1:e07d29c:             public void onMessage(Message message) {
1:e07d29c:                 try {
1:e07d29c:                     consumerProducer.send(message.getJMSReplyTo(), message);
1:e07d29c:                 } catch (JMSException e) {
1:bf9c4c6:                     LOG.error("error sending a response on the temp queue");
1:e07d29c:                     e.printStackTrace();
1:e07d29c:                 }
1:e07d29c:             }
1:e07d29c:         });
1:e07d29c: 
1:e07d29c:         countDownLatch.await(2, TimeUnit.SECONDS);
1:e07d29c: 
1:e07d29c:         // producer has not gone away yet...
1:e07d29c:         org.apache.activemq.broker.region.Destination tempDestination = getDestination(brokerService,
1:e07d29c:                 (ActiveMQDestination) replyTo);
1:e07d29c:         assertNotNull(tempDestination);
1:e07d29c: 
1:e07d29c:         // clean up
1:e07d29c:         producer.close();
1:e07d29c:         producerSession.close();
1:e07d29c:         producerConnection.close();
1:e07d29c: 
1:e07d29c:         // producer has gone away.. so the temp queue should not exist anymore... let's see..
1:e07d29c:         // producer has not gone away yet...
1:e07d29c:         tempDestination = getDestination(brokerService,
1:e07d29c:                 (ActiveMQDestination) replyTo);
1:e07d29c:         assertNull(tempDestination);
1:e07d29c: 
1:e07d29c:         // now.. the connection on the broker side for the dude producing to the temp dest will
1:e07d29c:         // still have a reference in his producerBrokerExchange.. this will keep the destination
1:e07d29c:         // from being reclaimed by GC if there is never another send that producer makes...
1:e07d29c:         // let's see if that reference is there...
1:7400977:         final TransportConnector connector = VMTransportFactory.CONNECTORS.get("localhost");
1:e07d29c:         assertNotNull(connector);
1:7400977:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:7400977:             @Override
1:7400977:             public boolean isSatisified() throws Exception {
1:7400977:                 return connector.getConnections().size() == 1;
1:7400977:             }
1:7400977:         }));
1:e07d29c:         TransportConnection transportConnection = connector.getConnections().get(0);
1:e07d29c:         Map<ProducerId, ProducerBrokerExchange> exchanges = getProducerExchangeFromConn(transportConnection);
1:e07d29c:         assertEquals(1, exchanges.size());
1:e07d29c:         ProducerBrokerExchange exchange = exchanges.values().iterator().next();
1:e07d29c: 
1:e07d29c:         // so this is the reason for the test... we don't want these exchanges to hold a reference
1:e07d29c:         // to a region destination.. after a send is completed, the destination is not used anymore on
1:e07d29c:         // a producer exchange
1:e07d29c:         assertNull(exchange.getRegionDestination());
1:e07d29c:         assertNull(exchange.getRegion());
1:e07d29c: 
1:e07d29c:     }
1:e07d29c: 
1:5219fa1:     @SuppressWarnings("unchecked")
1:e07d29c:     private Map<ProducerId, ProducerBrokerExchange> getProducerExchangeFromConn(TransportConnection transportConnection) throws NoSuchFieldException, IllegalAccessException {
1:e07d29c:         Field f = TransportConnection.class.getDeclaredField("producerExchanges");
1:e07d29c:         f.setAccessible(true);
1:e07d29c:         Map<ProducerId, ProducerBrokerExchange> producerExchanges =
1:e07d29c:                 (Map<ProducerId, ProducerBrokerExchange>)f.get(transportConnection);
1:e07d29c:         return producerExchanges;
1:e07d29c:     }
1:e07d29c: 
1:e07d29c:     private Message createRequest(Session session, Destination replyTo) throws JMSException {
1:e07d29c:         Message message = session.createTextMessage("Payload");
1:e07d29c:         message.setJMSReplyTo(replyTo);
1:e07d29c:         return message;
1:e07d29c:     }
1:e07d29c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
1: import java.net.URI;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:bf9c4c6
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4222Test.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                         LOG.info("You got a message: " + ((TextMessage) message).getText());
/////////////////////////////////////////////////////////////////////////
1:                     LOG.error("error sending a response on the temp queue");
commit:7400977
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1:         final TransportConnector connector = VMTransportFactory.CONNECTORS.get("localhost");
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return connector.getConnections().size() == 1;
1:             }
1:         }));
author:Christian Posta
-------------------------------------------------------------------------------
commit:e07d29c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
0: import org.apache.activemq.broker.*;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.transport.vm.VMTransportFactory;
1: 
0: import javax.jms.*;
0: import javax.jms.Connection;
0: import java.lang.reflect.Field;
0: import java.net.URI;
0: import java.util.Map;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class AMQ4222Test extends TestSupport {
1: 
1:     protected BrokerService brokerService;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         topic = false;
1:         brokerService = createBroker();
1: 
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false"));
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     public void testTempQueueCleanedUp() throws Exception {
1: 
1:         Destination requestQueue = createDestination();
1: 
1:         Connection producerConnection = createConnection();
1:         producerConnection.start();
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = producerSession.createProducer(requestQueue);
1:         Destination replyTo = producerSession.createTemporaryQueue();
1:         MessageConsumer producerSessionConsumer = producerSession.createConsumer(replyTo);
1: 
1:         final CountDownLatch countDownLatch = new CountDownLatch(1);
1:         // let's listen to the response on the queue
1:         producerSessionConsumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     if (message instanceof TextMessage) {
0:                         System.out.println("You got a message: " + ((TextMessage) message).getText());
1:                         countDownLatch.countDown();
1:                     }
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         producer.send(createRequest(producerSession, replyTo));
1: 
1:         Connection consumerConnection = createConnection();
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(requestQueue);
1:         final MessageProducer consumerProducer = consumerSession.createProducer(null);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     consumerProducer.send(message.getJMSReplyTo(), message);
1:                 } catch (JMSException e) {
0:                     System.out.println("error sending a response on the temp queue");
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         countDownLatch.await(2, TimeUnit.SECONDS);
1: 
1:         // producer has not gone away yet...
1:         org.apache.activemq.broker.region.Destination tempDestination = getDestination(brokerService,
1:                 (ActiveMQDestination) replyTo);
1:         assertNotNull(tempDestination);
1: 
1:         // clean up
1:         producer.close();
1:         producerSession.close();
1:         producerConnection.close();
1: 
1:         // producer has gone away.. so the temp queue should not exist anymore... let's see..
1:         // producer has not gone away yet...
1:         tempDestination = getDestination(brokerService,
1:                 (ActiveMQDestination) replyTo);
1:         assertNull(tempDestination);
1: 
1:         // now.. the connection on the broker side for the dude producing to the temp dest will
1:         // still have a reference in his producerBrokerExchange.. this will keep the destination
1:         // from being reclaimed by GC if there is never another send that producer makes...
1:         // let's see if that reference is there...
0:         TransportConnector connector = VMTransportFactory.CONNECTORS.get("localhost");
1:         assertNotNull(connector);
0:         assertEquals(1, connector.getConnections().size());
1:         TransportConnection transportConnection = connector.getConnections().get(0);
1:         Map<ProducerId, ProducerBrokerExchange> exchanges = getProducerExchangeFromConn(transportConnection);
1:         assertEquals(1, exchanges.size());
1:         ProducerBrokerExchange exchange = exchanges.values().iterator().next();
1: 
1:         // so this is the reason for the test... we don't want these exchanges to hold a reference
1:         // to a region destination.. after a send is completed, the destination is not used anymore on
1:         // a producer exchange
1:         assertNull(exchange.getRegionDestination());
1:         assertNull(exchange.getRegion());
1: 
1:     }
1: 
1:     private Map<ProducerId, ProducerBrokerExchange> getProducerExchangeFromConn(TransportConnection transportConnection) throws NoSuchFieldException, IllegalAccessException {
1:         Field f = TransportConnection.class.getDeclaredField("producerExchanges");
1:         f.setAccessible(true);
1:         Map<ProducerId, ProducerBrokerExchange> producerExchanges =
1:                 (Map<ProducerId, ProducerBrokerExchange>)f.get(transportConnection);
1:         return producerExchanges;
1:     }
1: 
1: 
1:     private Message createRequest(Session session, Destination replyTo) throws JMSException {
1:         Message message = session.createTextMessage("Payload");
1:         message.setJMSReplyTo(replyTo);
1:         return message;
1:     }
1: 
1: }
============================================================================