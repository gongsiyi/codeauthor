1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.formatter;
1:a107823: 
1:5f1adbe: import java.io.OutputStream;
1:5f1adbe: import java.io.PrintStream;
1:a107823: import java.util.Collection;
1:a107823: import java.util.Iterator;
1:5f1adbe: import java.util.Map;
1:0dec0b6: import java.util.Arrays;
1:5f1adbe: 
1:5f1adbe: import javax.jms.Message;
1:5f1adbe: import javax.management.Attribute;
1:5f1adbe: import javax.management.AttributeList;
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: import javax.management.ObjectName;
1:a107823: 
1:a107823: public class CommandShellOutputFormatter implements OutputFormatter {
1:a107823:     private OutputStream outputStream;
1:a107823:     private PrintStream out;
1:a107823: 
1:a107823:     public CommandShellOutputFormatter(OutputStream out) {
1:a107823: 
1:a107823:         this.outputStream = out;
1:a107823:         if (out instanceof PrintStream) {
1:a107823:             this.out = (PrintStream)out;
1:a107823:         } else {
1:a107823:             this.out = new PrintStream(out);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the output stream being used by the formatter
1:a107823:      */
1:a107823:     public OutputStream getOutputStream() {
1:a107823:         return outputStream;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an ObjectInstance format of an mbean
1:5f1adbe:      * 
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:a107823:     public void printMBean(ObjectInstance mbean) {
1:a107823:         printMBean(mbean.getObjectName());
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an ObjectName format of an mbean
1:5f1adbe:      * 
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:a107823:     public void printMBean(ObjectName mbean) {
1:a107823:         printMBean(mbean.getKeyPropertyList());
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an AttributeList format of an mbean
1:5f1adbe:      * 
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:a107823:     public void printMBean(AttributeList mbean) {
1:5f1adbe:         for (Iterator i = mbean.iterator(); i.hasNext();) {
1:a107823:             Attribute attrib = (Attribute)i.next();
1:a107823:             if (attrib.getValue() instanceof ObjectName) {
1:a107823:                 printMBean((ObjectName)attrib.getValue());
1:a107823:             } else if (attrib.getValue() instanceof ObjectInstance) {
1:a107823:                 printMBean((ObjectInstance)attrib.getValue());
1:a107823:             } else {
1:a107823:                 out.println(attrib.getName() + " = " + attrib.getValue().toString());
1:a107823:                 out.println();
1:a107823:             }
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Map format of an mbean
1:5f1adbe:      * 
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:a107823:     public void printMBean(Map mbean) {
1:5f1adbe:         for (Iterator i = mbean.keySet().iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823:             String val = mbean.get(key).toString();
1:a107823:             out.println(key + " = " + val);
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a collection of mbean
1:5f1adbe:      * 
1:a107823:      * @param mbean - collection of mbeans
1:a107823:      */
1:a107823:     public void printMBean(Collection mbean) {
1:5f1adbe:         for (Iterator i = mbean.iterator(); i.hasNext();) {
1:a107823:             Object obj = i.next();
1:a107823:             if (obj instanceof ObjectInstance) {
1:a107823:                 printMBean((ObjectInstance)obj);
1:a107823:             } else if (obj instanceof ObjectName) {
1:a107823:                 printMBean((ObjectName)obj);
1:a107823:             } else if (obj instanceof Map) {
1:a107823:                 printMBean((Map)obj);
1:a107823:             } else if (obj instanceof AttributeList) {
1:a107823:                 printMBean((AttributeList)obj);
1:a107823:             } else if (obj instanceof Collection) {
1:a107823:                 printMessage((Collection)obj);
1:a107823:             } else {
1:a107823:                 printException(new UnsupportedOperationException("Unknown mbean type: " + obj.getClass().getName()));
1:a107823:             }
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Map format of a JMS message
1:5f1adbe:      * 
1:a107823:      * @param msg
1:a107823:      */
1:a107823:     public void printMessage(Map msg) {
1:5f1adbe:         for (Iterator i = msg.keySet().iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823:             String val = msg.get(key).toString();
1:a107823:             out.println(key + " = " + val);
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Message format of a JMS message
1:5f1adbe:      * 
1:a107823:      * @param msg - JMS message to print
1:a107823:      */
1:a107823:     public void printMessage(Message msg) {
1:a107823:         // TODO
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a collection of JMS messages
1:5f1adbe:      * 
1:a107823:      * @param msg - collection of JMS messages
1:a107823:      */
1:a107823:     public void printMessage(Collection msg) {
1:5f1adbe:         for (Iterator i = msg.iterator(); i.hasNext();) {
1:a107823:             Object obj = i.next();
1:a107823:             if (obj instanceof Message) {
1:a107823:                 printMessage((Message)obj);
1:a107823:             } else if (obj instanceof Map) {
1:a107823:                 printMessage((Map)obj);
1:a107823:             } else if (obj instanceof Collection) {
1:a107823:                 printMessage((Collection)obj);
1:a107823:             } else {
1:a107823:                 printException(new UnsupportedOperationException("Unknown message type: " + obj.getClass().getName()));
1:a107823:             }
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print help messages
1:5f1adbe:      * 
1:a107823:      * @param helpMsgs - help messages to print
1:a107823:      */
1:a107823:     public void printHelp(String[] helpMsgs) {
1:5f1adbe:         for (int i = 0; i < helpMsgs.length; i++) {
1:a107823:             out.println(helpMsgs[i]);
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an information message
1:5f1adbe:      * 
1:a107823:      * @param info - information message to print
1:a107823:      */
1:a107823:     public void printInfo(String info) {
1:a107823:         out.println("INFO: " + info);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an exception message
1:5f1adbe:      * 
1:a107823:      * @param e - exception to print
1:a107823:      */
1:a107823:     public void printException(Exception e) {
1:a107823:         out.println("ERROR: " + e);
1:98dcd68:         e.printStackTrace(out);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a version information
1:5f1adbe:      * 
1:a107823:      * @param version - version info to print
1:a107823:      */
1:a107823:     public void printVersion(String version) {
1:a107823:         out.println("");
1:a107823:         out.println("ActiveMQ " + version);
1:7029d9b:         out.println("For help or more information please see: http://activemq.apache.org");
1:a107823:         out.println("");
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a generic key value mapping
1:5f1adbe:      * 
1:a107823:      * @param map to print
1:a107823:      */
1:a107823:     public void print(Map map) {
1:5f1adbe:         for (Iterator i = map.keySet().iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823:             String val = map.get(key).toString();
1:a107823:             out.println(key + " = " + val);
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a generic array of strings
1:5f1adbe:      * 
1:a107823:      * @param strings - string array to print
1:a107823:      */
1:a107823:     public void print(String[] strings) {
1:5f1adbe:         for (int i = 0; i < strings.length; i++) {
1:a107823:             out.println(strings[i]);
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a collection of objects
1:5f1adbe:      * 
1:a107823:      * @param collection - collection to print
1:a107823:      */
1:a107823:     public void print(Collection collection) {
1:5f1adbe:         for (Iterator i = collection.iterator(); i.hasNext();) {
1:a107823:             out.println(i.next().toString());
1:a107823:         }
1:a107823:         out.println();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a java string
1:5f1adbe:      * 
1:a107823:      * @param string - string to print
1:a107823:      */
1:a107823:     public void print(String string) {
1:a107823:         out.println(string);
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ae1da74
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: import java.util.Map;
1: 
1: import javax.jms.Message;
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = mbean.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = mbean.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = mbean.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = msg.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = msg.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (int i = 0; i < helpMsgs.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = map.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (int i = 0; i < strings.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = collection.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.formatter;
1: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.jms.Message;
0: import java.util.Map;
1: import java.util.Collection;
1: import java.util.Iterator;
0: import java.io.PrintStream;
0: import java.io.OutputStream;
1: 
1: public class CommandShellOutputFormatter implements OutputFormatter {
1:     private OutputStream outputStream;
1:     private PrintStream out;
1: 
1:     public CommandShellOutputFormatter(OutputStream out) {
1: 
1:         this.outputStream = out;
1:         if (out instanceof PrintStream) {
1:             this.out = (PrintStream)out;
1:         } else {
1:             this.out = new PrintStream(out);
1:         }
1:     }
1: 
1:     /**
1:      * Retrieve the output stream being used by the formatter
0:      * @return
1:      */
1:     public OutputStream getOutputStream() {
1:         return outputStream;
1:     }
1: 
1:     /**
1:      * Print an ObjectInstance format of an mbean
1:      * @param mbean - mbean to print
1:      */
1:     public void printMBean(ObjectInstance mbean) {
1:         printMBean(mbean.getObjectName());
1:     }
1: 
1:     /**
1:      * Print an ObjectName format of an mbean
1:      * @param mbean - mbean to print
1:      */
1:     public void printMBean(ObjectName mbean) {
1:         printMBean(mbean.getKeyPropertyList());
1:     }
1: 
1:     /**
1:      * Print an AttributeList format of an mbean
1:      * @param mbean - mbean to print
1:      */
1:     public void printMBean(AttributeList mbean) {
0:         for (Iterator i=mbean.iterator(); i.hasNext();) {
1:             Attribute attrib = (Attribute)i.next();
1:             if (attrib.getValue() instanceof ObjectName) {
1:                 printMBean((ObjectName)attrib.getValue());
1:             } else if (attrib.getValue() instanceof ObjectInstance) {
1:                 printMBean((ObjectInstance)attrib.getValue());
1:             } else {
1:                 out.println(attrib.getName() + " = " + attrib.getValue().toString());
1:                 out.println();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Print a Map format of an mbean
1:      * @param mbean - mbean to print
1:      */
1:     public void printMBean(Map mbean) {
0:         for (Iterator i=mbean.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String val = mbean.get(key).toString();
1:             out.println(key + " = " + val);
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print a collection of mbean
1:      * @param mbean - collection of mbeans
1:      */
1:     public void printMBean(Collection mbean) {
0:         for (Iterator i=mbean.iterator(); i.hasNext();) {
1:             Object obj = i.next();
1:             if (obj instanceof ObjectInstance) {
1:                 printMBean((ObjectInstance)obj);
1:             } else if (obj instanceof ObjectName) {
1:                 printMBean((ObjectName)obj);
1:             } else if (obj instanceof Map) {
1:                 printMBean((Map)obj);
1:             } else if (obj instanceof AttributeList) {
1:                 printMBean((AttributeList)obj);
1:             } else if (obj instanceof Collection) {
1:                 printMessage((Collection)obj);
1:             } else {
1:                 printException(new UnsupportedOperationException("Unknown mbean type: " + obj.getClass().getName()));
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Print a Map format of a JMS message
1:      * @param msg
1:      */
1:     public void printMessage(Map msg) {
0:         for (Iterator i=msg.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String val = msg.get(key).toString();
1:             out.println(key + " = " + val);
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print a Message format of a JMS message
1:      * @param msg - JMS message to print
1:      */
1:     public void printMessage(Message msg) {
1:         // TODO
1:     }
1: 
1:     /**
1:      * Print a collection of JMS messages
1:      * @param msg - collection of JMS messages
1:      */
1:     public void printMessage(Collection msg) {
0:         for (Iterator i=msg.iterator(); i.hasNext();) {
1:             Object obj = i.next();
1:             if (obj instanceof Message) {
1:                 printMessage((Message)obj);
1:             } else if (obj instanceof Map) {
1:                 printMessage((Map)obj);
1:             } else if (obj instanceof Collection) {
1:                 printMessage((Collection)obj);
1:             } else {
1:                 printException(new UnsupportedOperationException("Unknown message type: " + obj.getClass().getName()));
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Print help messages
1:      * @param helpMsgs - help messages to print
1:      */
1:     public void printHelp(String[] helpMsgs) {
0:         for (int i=0; i<helpMsgs.length; i++) {
1:             out.println(helpMsgs[i]);
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print an information message
1:      * @param info - information message to print
1:      */
1:     public void printInfo(String info) {
1:         out.println("INFO: " + info);
1:     }
1: 
1:     /**
1:      * Print an exception message
1:      * @param e - exception to print
1:      */
1:     public void printException(Exception e) {
1:         out.println("ERROR: " + e);
1:     }
1: 
1:     /**
1:      * Print a version information
1:      * @param version - version info to print
1:      */
1:     public void printVersion(String version) {
1:         out.println("");
1:         out.println("ActiveMQ " + version);
0:         out.println("For help or more information please see: http://www.logicblaze.com");
1:         out.println("");
1:     }
1: 
1:     /**
1:      * Print a generic key value mapping
1:      * @param map to print
1:      */
1:     public void print(Map map) {
0:         for (Iterator i=map.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String val = map.get(key).toString();
1:             out.println(key + " = " + val);
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print a generic array of strings
1:      * @param strings - string array to print
1:      */
1:     public void print(String[] strings) {
0:         for (int i=0; i<strings.length; i++) {
1:             out.println(strings[i]);
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print a collection of objects
1:      * @param collection - collection to print
1:      */
1:     public void print(Collection collection) {
0:         for (Iterator i=collection.iterator(); i.hasNext();) {
1:             out.println(i.next().toString());
1:         }
1:         out.println();
1:     }
1: 
1:     /**
1:      * Print a java string
1:      * @param string - string to print
1:      */
1:     public void print(String string) {
1:         out.println(string);
1:     }
1: 
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:7029d9b
/////////////////////////////////////////////////////////////////////////
1:         out.println("For help or more information please see: http://activemq.apache.org");
author:James Strachan
-------------------------------------------------------------------------------
commit:98dcd68
/////////////////////////////////////////////////////////////////////////
1:         e.printStackTrace(out);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.formatter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.formatter;
0: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.jms.Message;
0: import java.util.Map;
0: import java.util.Collection;
0: import java.util.Iterator;
0: import java.io.PrintStream;
0: import java.io.OutputStream;
0: 
0: public class CommandShellOutputFormatter implements OutputFormatter {
0:     private OutputStream outputStream;
0:     private PrintStream out;
0: 
0:     public CommandShellOutputFormatter(OutputStream out) {
0: 
0:         this.outputStream = out;
0:         if (out instanceof PrintStream) {
0:             this.out = (PrintStream)out;
0:         } else {
0:             this.out = new PrintStream(out);
0:         }
0:     }
0: 
0:     /**
0:      * Retrieve the output stream being used by the formatter
0:      * @return
0:      */
0:     public OutputStream getOutputStream() {
0:         return outputStream;
0:     }
0: 
0:     /**
0:      * Print an ObjectInstance format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public void printMBean(ObjectInstance mbean) {
0:         printMBean(mbean.getObjectName());
0:     }
0: 
0:     /**
0:      * Print an ObjectName format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public void printMBean(ObjectName mbean) {
0:         printMBean(mbean.getKeyPropertyList());
0:     }
0: 
0:     /**
0:      * Print an AttributeList format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public void printMBean(AttributeList mbean) {
0:         for (Iterator i=mbean.iterator(); i.hasNext();) {
0:             Attribute attrib = (Attribute)i.next();
0:             if (attrib.getValue() instanceof ObjectName) {
0:                 printMBean((ObjectName)attrib.getValue());
0:             } else if (attrib.getValue() instanceof ObjectInstance) {
0:                 printMBean((ObjectInstance)attrib.getValue());
0:             } else {
0:                 out.println(attrib.getName() + " = " + attrib.getValue().toString());
0:                 out.println();
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Print a Map format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public void printMBean(Map mbean) {
0:         for (Iterator i=mbean.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String val = mbean.get(key).toString();
0:             out.println(key + " = " + val);
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print a collection of mbean
0:      * @param mbean - collection of mbeans
0:      */
0:     public void printMBean(Collection mbean) {
0:         for (Iterator i=mbean.iterator(); i.hasNext();) {
0:             Object obj = i.next();
0:             if (obj instanceof ObjectInstance) {
0:                 printMBean((ObjectInstance)obj);
0:             } else if (obj instanceof ObjectName) {
0:                 printMBean((ObjectName)obj);
0:             } else if (obj instanceof Map) {
0:                 printMBean((Map)obj);
0:             } else if (obj instanceof AttributeList) {
0:                 printMBean((AttributeList)obj);
0:             } else if (obj instanceof Collection) {
0:                 printMessage((Collection)obj);
0:             } else {
0:                 printException(new UnsupportedOperationException("Unknown mbean type: " + obj.getClass().getName()));
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Print a Map format of a JMS message
0:      * @param msg
0:      */
0:     public void printMessage(Map msg) {
0:         for (Iterator i=msg.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String val = msg.get(key).toString();
0:             out.println(key + " = " + val);
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print a Message format of a JMS message
0:      * @param msg - JMS message to print
0:      */
0:     public void printMessage(Message msg) {
0:         // TODO
0:     }
0: 
0:     /**
0:      * Print a collection of JMS messages
0:      * @param msg - collection of JMS messages
0:      */
0:     public void printMessage(Collection msg) {
0:         for (Iterator i=msg.iterator(); i.hasNext();) {
0:             Object obj = i.next();
0:             if (obj instanceof Message) {
0:                 printMessage((Message)obj);
0:             } else if (obj instanceof Map) {
0:                 printMessage((Map)obj);
0:             } else if (obj instanceof Collection) {
0:                 printMessage((Collection)obj);
0:             } else {
0:                 printException(new UnsupportedOperationException("Unknown message type: " + obj.getClass().getName()));
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Print help messages
0:      * @param helpMsgs - help messages to print
0:      */
0:     public void printHelp(String[] helpMsgs) {
0:         for (int i=0; i<helpMsgs.length; i++) {
0:             out.println(helpMsgs[i]);
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print an information message
0:      * @param info - information message to print
0:      */
0:     public void printInfo(String info) {
0:         out.println("INFO: " + info);
0:     }
0: 
0:     /**
0:      * Print an exception message
0:      * @param e - exception to print
0:      */
0:     public void printException(Exception e) {
0:         out.println("ERROR: " + e);
0:     }
0: 
0:     /**
0:      * Print a version information
0:      * @param version - version info to print
0:      */
0:     public void printVersion(String version) {
0:         out.println("");
0:         out.println("ActiveMQ " + version);
0:         out.println("For help or more information please see: http://www.logicblaze.com");
0:         out.println("");
0:     }
0: 
0:     /**
0:      * Print a generic key value mapping
0:      * @param map to print
0:      */
0:     public void print(Map map) {
0:         for (Iterator i=map.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String val = map.get(key).toString();
0:             out.println(key + " = " + val);
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print a generic array of strings
0:      * @param strings - string array to print
0:      */
0:     public void print(String[] strings) {
0:         for (int i=0; i<strings.length; i++) {
0:             out.println(strings[i]);
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print a collection of objects
0:      * @param collection - collection to print
0:      */
0:     public void print(Collection collection) {
0:         for (Iterator i=collection.iterator(); i.hasNext();) {
0:             out.println(i.next().toString());
0:         }
0:         out.println();
0:     }
0: 
0:     /**
0:      * Print a java string
0:      * @param string - string to print
0:      */
0:     public void print(String string) {
0:         out.println(string);
0:     }
0: 
0: }
============================================================================