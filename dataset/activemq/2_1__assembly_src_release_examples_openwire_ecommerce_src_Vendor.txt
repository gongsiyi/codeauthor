1:6707ac6: /*
1:6707ac6:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:6707ac6:  *  contributor license agreements.  See the NOTICE file distributed with
1:6707ac6:  *  this work for additional information regarding copyright ownership.
1:6707ac6:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:6707ac6:  *  (the "License"); you may not use this file except in compliance with
1:6707ac6:  *  the License.  You may obtain a copy of the License at
1:6707ac6:  *
1:6707ac6:  *  http://www.apache.org/licenses/LICENSE-2.0
1:6707ac6:  *
1:6707ac6:  *  Unless required by applicable law or agreed to in writing, software
1:6707ac6:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:6707ac6:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6707ac6:  *  See the License for the specific language governing permissions and
1:6707ac6:  *  limitations under the License.
1:6707ac6:  */
1:6707ac6: import java.util.HashMap;
1:6707ac6: import java.util.Map;
1:6707ac6: import java.util.Random;
1:6707ac6: 
1:6707ac6: import javax.jms.Connection;
1:6707ac6: import javax.jms.Destination;
1:6707ac6: import javax.jms.JMSException;
1:6707ac6: import javax.jms.MapMessage;
1:6707ac6: import javax.jms.Message;
1:6707ac6: import javax.jms.MessageConsumer;
1:6707ac6: import javax.jms.MessageListener;
1:6707ac6: import javax.jms.MessageProducer;
1:6707ac6: import javax.jms.Session;
1:6707ac6: import javax.jms.TemporaryQueue;
1:6707ac6: 
1:6707ac6: import org.apache.activemq.ActiveMQConnectionFactory;
1:6707ac6: 
1:6707ac6: /**
1:6707ac6:  * The Vendor synchronously, and in a single transaction, receives the
1:6707ac6:  * order from VendorOrderQueue and sends messages to the two Suppliers via
1:6707ac6:  * MonitorOrderQueue and StorageOrderQueue.
1:6707ac6:  * The responses are received asynchronously; when both responses come
1:6707ac6:  * back, the order confirmation message is sent back to the Retailer.
1:6707ac6:  */
1:6707ac6: public class Vendor implements Runnable, MessageListener {
1:6707ac6: 	private String url;
1:6707ac6: 	private String user;
1:6707ac6: 	private String password;
1:6707ac6: 	private	Session asyncSession;
1:6707ac6: 	private int numSuppliers = 2;
1:6707ac6: 	private Object supplierLock = new Object();
1:6707ac6: 	
1:6707ac6: 	public Vendor(String url, String user, String password) {
1:6707ac6: 		this.url = url;
1:6707ac6: 		this.user = user;
1:6707ac6: 		this.password = password;
1:6707ac6: 	}
1:6707ac6: 	
1:6707ac6: 	public void run() {
1:6707ac6: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1:6707ac6: 		Session session = null;
1:6707ac6: 		Destination orderQueue;
1:6707ac6: 		Destination monitorOrderQueue;
1:6707ac6: 		Destination storageOrderQueue;
1:6707ac6: 		TemporaryQueue vendorConfirmQueue;
1:6707ac6: 		MessageConsumer orderConsumer = null;
1:6707ac6: 		MessageProducer monitorProducer = null;
1:6707ac6: 		MessageProducer storageProducer = null;
1:6707ac6: 
1:6707ac6: 		try {
1:6707ac6: 			Connection connection = connectionFactory.createConnection();
1:6707ac6: 
1:6707ac6: 			session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:6707ac6: 			orderQueue = session.createQueue("VendorOrderQueue");
1:6707ac6: 			monitorOrderQueue = session.createQueue("MonitorOrderQueue");
1:6707ac6: 			storageOrderQueue = session.createQueue("StorageOrderQueue");
1:6707ac6: 			
1:6707ac6: 			orderConsumer = session.createConsumer(orderQueue);
1:6707ac6: 			monitorProducer = session.createProducer(monitorOrderQueue);
1:6707ac6: 			storageProducer = session.createProducer(storageOrderQueue);
1:6707ac6: 			
1:6707ac6: 			Connection asyncconnection = connectionFactory.createConnection();
1:6707ac6: 			asyncSession = asyncconnection.createSession(true, Session.SESSION_TRANSACTED);
1:6707ac6: 			
1:6707ac6: 			vendorConfirmQueue = asyncSession.createTemporaryQueue();
1:6707ac6: 			MessageConsumer confirmConsumer = asyncSession.createConsumer(vendorConfirmQueue);
1:6707ac6: 			confirmConsumer.setMessageListener(this);
1:6707ac6: 			
1:6707ac6: 			asyncconnection.start();
1:6707ac6: 
1:6707ac6: 			connection.start();
1:6707ac6: 
1:6707ac6: 		
1:6707ac6: 			while (true) {
1:6707ac6: 				Order order = null;
1:6707ac6: 				try {
1:6707ac6: 					Message inMessage = orderConsumer.receive();
1:6707ac6: 					MapMessage message;
1:6707ac6: 					if (inMessage instanceof MapMessage) {
1:6707ac6: 						message = (MapMessage) inMessage;
1:6707ac6: 						
1:6707ac6: 					} else {
1:6707ac6: 						// end of stream
1:6707ac6: 						Message outMessage = session.createMessage();
1:6707ac6: 						outMessage.setJMSReplyTo(vendorConfirmQueue);
1:6707ac6: 						monitorProducer.send(outMessage);
1:6707ac6: 						storageProducer.send(outMessage);
1:6707ac6: 						session.commit();
1:6707ac6: 						break;
1:6707ac6: 					}
1:6707ac6: 					
1:6707ac6: 					// Randomly throw an exception in here to simulate a Database error
1:6707ac6: 					// and trigger a rollback of the transaction
1:6707ac6: 					if (new Random().nextInt(3) == 0) {
1:6707ac6: 						throw new JMSException("Simulated Database Error.");
1:6707ac6: 					}
1:6707ac6: 					
1:6707ac6: 					order = new Order(message);
1:6707ac6: 					
1:6707ac6: 					MapMessage orderMessage = session.createMapMessage();
1:6707ac6: 					orderMessage.setJMSReplyTo(vendorConfirmQueue);
1:6707ac6: 					orderMessage.setInt("VendorOrderNumber", order.getOrderNumber());
1:6707ac6: 					int quantity = message.getInt("Quantity");
1:6707ac6: 					System.out.println("Vendor: Retailer ordered " + quantity + " " + message.getString("Item"));
1:6707ac6: 					
1:6707ac6: 					orderMessage.setInt("Quantity", quantity);
1:6707ac6: 					orderMessage.setString("Item", "Monitor");
1:6707ac6: 					monitorProducer.send(orderMessage);
1:6707ac6: 					System.out.println("Vendor: ordered " + quantity + " Monitor(s)");
1:6707ac6: 					
1:6707ac6: 					orderMessage.setString("Item", "HardDrive");
1:6707ac6: 					storageProducer.send(orderMessage);
1:6707ac6: 					System.out.println("Vendor: ordered " + quantity + " Hard Drive(s)");
1:6707ac6: 					
1:6707ac6: 					session.commit();
1:6707ac6: 					System.out.println("Vendor: Comitted Transaction 1");
1:6707ac6: 					
1:6707ac6: 				} catch (JMSException e) {
1:6707ac6: 					System.out.println("Vendor: JMSException Occured: " + e.getMessage());
1:6707ac6: 					e.printStackTrace();
1:6707ac6: 					session.rollback();
1:6707ac6: 					System.out.println("Vendor: Rolled Back Transaction.");
1:6707ac6: 				}
1:6707ac6: 			}
1:6707ac6: 			
1:6707ac6: 			synchronized (supplierLock) {
1:6707ac6: 				while (numSuppliers > 0) {
1:6707ac6: 					try {
1:6707ac6: 						supplierLock.wait();
1:6707ac6: 					} catch (InterruptedException e) {
1:6707ac6: 						e.printStackTrace();
1:6707ac6: 					}
1:6707ac6: 				}
1:6707ac6: 			}
1:6707ac6: 			
1:6707ac6: 			connection.close();
1:6707ac6: 			asyncconnection.close();
1:6707ac6: 		
1:6707ac6: 		} catch (JMSException e) {
1:6707ac6: 			e.printStackTrace();
1:6707ac6: 		}
1:6707ac6: 
1:6707ac6: 	}
1:6707ac6: 
1:6707ac6: 	public void onMessage(Message message) {
1:6707ac6: 		if (!(message instanceof MapMessage)) {
1:6707ac6: 			synchronized(supplierLock) {
1:6707ac6: 				numSuppliers--;
1:6707ac6: 				supplierLock.notifyAll();
1:6707ac6: 			}
1:6707ac6: 			try {
1:6707ac6: 				asyncSession.commit();
1:6707ac6: 				return;
1:6707ac6: 			} catch (JMSException e) {
1:6707ac6: 				e.printStackTrace();
1:6707ac6: 			}
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		int orderNumber = -1;
1:6707ac6: 		try {
1:6707ac6: 			MapMessage componentMessage = (MapMessage) message;
1:6707ac6: 			
1:6707ac6: 			orderNumber = componentMessage.getInt("VendorOrderNumber");
1:6707ac6: 			Order order = Order.getOrder(orderNumber);
1:6707ac6: 			order.processSubOrder(componentMessage);
1:6707ac6: 			asyncSession.commit();
1:6707ac6: 			
1:6707ac6: 			if (! "Pending".equals(order.getStatus())) {
1:6707ac6: 				System.out.println("Vendor: Completed processing for order " + orderNumber);
1:6707ac6: 				
1:6707ac6: 				MessageProducer replyProducer = asyncSession.createProducer(order.getMessage().getJMSReplyTo());
1:6707ac6: 				MapMessage replyMessage = asyncSession.createMapMessage();
1:6707ac6: 				if ("Fulfilled".equals(order.getStatus())) {
1:6707ac6: 					replyMessage.setBoolean("OrderAccepted", true);
1:6707ac6: 					System.out.println("Vendor: sent " + order.quantity + " computer(s)");
1:6707ac6: 				} else {
1:6707ac6: 					replyMessage.setBoolean("OrderAccepted", false);
1:6707ac6: 					System.out.println("Vendor: unable to send " + order.quantity + " computer(s)");
1:6707ac6: 				}
1:6707ac6: 				replyProducer.send(replyMessage);
1:6707ac6: 				asyncSession.commit();
1:6707ac6: 				System.out.println("Vender: committed transaction 2");
1:6707ac6: 			}
1:6707ac6: 		} catch (JMSException e) {
1:6707ac6: 			e.printStackTrace();
1:6707ac6: 		}
1:6707ac6: 	}
1:6707ac6: 
1:6707ac6: 	public static class Order {
1:6707ac6: 		private static Map<Integer, Order> pendingOrders = new HashMap<Integer, Order>();
1:6707ac6: 		private static int nextOrderNumber = 1;
1:6707ac6: 
1:6707ac6: 		private int orderNumber;
1:6707ac6: 		private int quantity;
1:6707ac6: 		private MapMessage monitor = null;
1:6707ac6: 		private MapMessage storage = null;
1:6707ac6: 		private MapMessage message;
1:6707ac6: 		private String status;
1:6707ac6: 		
1:6707ac6: 		public Order(MapMessage message) {
1:6707ac6: 			this.orderNumber = nextOrderNumber++;
1:6707ac6: 			this.message = message;
1:6707ac6: 			try {
1:6707ac6: 				this.quantity = message.getInt("Quantity");
1:6707ac6: 			} catch (JMSException e) {
1:6707ac6: 				e.printStackTrace();
1:6707ac6: 				this.quantity = 0;
1:6707ac6: 			}
1:6707ac6: 			status = "Pending";
1:6707ac6: 			pendingOrders.put(orderNumber, this);
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public Object getStatus() {
1:6707ac6: 			return status;
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public int getOrderNumber() {
1:6707ac6: 			return orderNumber;
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public static int getOutstandingOrders() {
1:6707ac6: 			return pendingOrders.size();
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public static Order getOrder(int number) {
1:6707ac6: 			return pendingOrders.get(number);
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public MapMessage getMessage() {
1:6707ac6: 			return message;
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		public void processSubOrder(MapMessage message) {
1:6707ac6: 			String itemName = null;
1:6707ac6: 			try {
1:6707ac6: 				itemName = message.getString("Item");
1:6707ac6: 			} catch (JMSException e) {
1:6707ac6: 				e.printStackTrace();
1:6707ac6: 			}
1:6707ac6: 			
1:6707ac6: 			if ("Monitor".equals(itemName)) {
1:6707ac6: 				monitor = message;
1:6707ac6: 			} else if ("HardDrive".equals(itemName)) {
1:6707ac6: 				storage = message;
1:6707ac6: 			}
1:6707ac6: 			
1:6707ac6: 			if (null != monitor && null != storage) {
1:6707ac6: 				// Received both messages
1:6707ac6: 				try {
1:6707ac6: 					if (quantity > monitor.getInt("Quantity")) {
1:6707ac6: 						status = "Cancelled";
1:6707ac6: 					} else if (quantity > storage.getInt("Quantity")) {
1:6707ac6: 						status = "Cancelled";
1:6707ac6: 					} else {
1:6707ac6: 						status = "Fulfilled";
1:6707ac6: 					}
1:6707ac6: 				} catch (JMSException e) {
1:6707ac6: 					e.printStackTrace();
1:6707ac6: 					status = "Cancelled";
1:6707ac6: 				}
1:6707ac6: 			}
1:6707ac6: 		}		
1:6707ac6: 	}
1:6707ac6: 
1:6707ac6: 	public static void main(String[] args) {
1:6707ac6: 		String url = "tcp://localhost:61616";
1:6707ac6: 		String user = null;
1:6707ac6: 		String password = null;
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 1) {
1:6707ac6: 			url = args[0];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 2) {
1:6707ac6: 			user = args[1];
1:6707ac6: 		}
1:6707ac6: 
1:6707ac6: 		if (args.length >= 3) {
1:6707ac6: 			password = args[2];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		Vendor v = new Vendor(url, user, password);
1:6707ac6: 		
1:6707ac6: 		new Thread(v, "Vendor").start();
1:6707ac6: 	}	
1:6707ac6: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Robert Davies
-------------------------------------------------------------------------------
commit:6707ac6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Random;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
1:  * The Vendor synchronously, and in a single transaction, receives the
1:  * order from VendorOrderQueue and sends messages to the two Suppliers via
1:  * MonitorOrderQueue and StorageOrderQueue.
1:  * The responses are received asynchronously; when both responses come
1:  * back, the order confirmation message is sent back to the Retailer.
1:  */
1: public class Vendor implements Runnable, MessageListener {
1: 	private String url;
1: 	private String user;
1: 	private String password;
1: 	private	Session asyncSession;
1: 	private int numSuppliers = 2;
1: 	private Object supplierLock = new Object();
1: 	
1: 	public Vendor(String url, String user, String password) {
1: 		this.url = url;
1: 		this.user = user;
1: 		this.password = password;
1: 	}
1: 	
1: 	public void run() {
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1: 		Session session = null;
1: 		Destination orderQueue;
1: 		Destination monitorOrderQueue;
1: 		Destination storageOrderQueue;
1: 		TemporaryQueue vendorConfirmQueue;
1: 		MessageConsumer orderConsumer = null;
1: 		MessageProducer monitorProducer = null;
1: 		MessageProducer storageProducer = null;
1: 
1: 		try {
1: 			Connection connection = connectionFactory.createConnection();
1: 
1: 			session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 			orderQueue = session.createQueue("VendorOrderQueue");
1: 			monitorOrderQueue = session.createQueue("MonitorOrderQueue");
1: 			storageOrderQueue = session.createQueue("StorageOrderQueue");
1: 			
1: 			orderConsumer = session.createConsumer(orderQueue);
1: 			monitorProducer = session.createProducer(monitorOrderQueue);
1: 			storageProducer = session.createProducer(storageOrderQueue);
1: 			
1: 			Connection asyncconnection = connectionFactory.createConnection();
1: 			asyncSession = asyncconnection.createSession(true, Session.SESSION_TRANSACTED);
1: 			
1: 			vendorConfirmQueue = asyncSession.createTemporaryQueue();
1: 			MessageConsumer confirmConsumer = asyncSession.createConsumer(vendorConfirmQueue);
1: 			confirmConsumer.setMessageListener(this);
1: 			
1: 			asyncconnection.start();
1: 
1: 			connection.start();
1: 
1: 		
1: 			while (true) {
1: 				Order order = null;
1: 				try {
1: 					Message inMessage = orderConsumer.receive();
1: 					MapMessage message;
1: 					if (inMessage instanceof MapMessage) {
1: 						message = (MapMessage) inMessage;
1: 						
1: 					} else {
1: 						// end of stream
1: 						Message outMessage = session.createMessage();
1: 						outMessage.setJMSReplyTo(vendorConfirmQueue);
1: 						monitorProducer.send(outMessage);
1: 						storageProducer.send(outMessage);
1: 						session.commit();
1: 						break;
1: 					}
1: 					
1: 					// Randomly throw an exception in here to simulate a Database error
1: 					// and trigger a rollback of the transaction
1: 					if (new Random().nextInt(3) == 0) {
1: 						throw new JMSException("Simulated Database Error.");
1: 					}
1: 					
1: 					order = new Order(message);
1: 					
1: 					MapMessage orderMessage = session.createMapMessage();
1: 					orderMessage.setJMSReplyTo(vendorConfirmQueue);
1: 					orderMessage.setInt("VendorOrderNumber", order.getOrderNumber());
1: 					int quantity = message.getInt("Quantity");
1: 					System.out.println("Vendor: Retailer ordered " + quantity + " " + message.getString("Item"));
1: 					
1: 					orderMessage.setInt("Quantity", quantity);
1: 					orderMessage.setString("Item", "Monitor");
1: 					monitorProducer.send(orderMessage);
1: 					System.out.println("Vendor: ordered " + quantity + " Monitor(s)");
1: 					
1: 					orderMessage.setString("Item", "HardDrive");
1: 					storageProducer.send(orderMessage);
1: 					System.out.println("Vendor: ordered " + quantity + " Hard Drive(s)");
1: 					
1: 					session.commit();
1: 					System.out.println("Vendor: Comitted Transaction 1");
1: 					
1: 				} catch (JMSException e) {
1: 					System.out.println("Vendor: JMSException Occured: " + e.getMessage());
1: 					e.printStackTrace();
1: 					session.rollback();
1: 					System.out.println("Vendor: Rolled Back Transaction.");
1: 				}
1: 			}
1: 			
1: 			synchronized (supplierLock) {
1: 				while (numSuppliers > 0) {
1: 					try {
1: 						supplierLock.wait();
1: 					} catch (InterruptedException e) {
1: 						e.printStackTrace();
1: 					}
1: 				}
1: 			}
1: 			
1: 			connection.close();
1: 			asyncconnection.close();
1: 		
1: 		} catch (JMSException e) {
1: 			e.printStackTrace();
1: 		}
1: 
1: 	}
1: 
1: 	public void onMessage(Message message) {
1: 		if (!(message instanceof MapMessage)) {
1: 			synchronized(supplierLock) {
1: 				numSuppliers--;
1: 				supplierLock.notifyAll();
1: 			}
1: 			try {
1: 				asyncSession.commit();
1: 				return;
1: 			} catch (JMSException e) {
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 		
1: 		int orderNumber = -1;
1: 		try {
1: 			MapMessage componentMessage = (MapMessage) message;
1: 			
1: 			orderNumber = componentMessage.getInt("VendorOrderNumber");
1: 			Order order = Order.getOrder(orderNumber);
1: 			order.processSubOrder(componentMessage);
1: 			asyncSession.commit();
1: 			
1: 			if (! "Pending".equals(order.getStatus())) {
1: 				System.out.println("Vendor: Completed processing for order " + orderNumber);
1: 				
1: 				MessageProducer replyProducer = asyncSession.createProducer(order.getMessage().getJMSReplyTo());
1: 				MapMessage replyMessage = asyncSession.createMapMessage();
1: 				if ("Fulfilled".equals(order.getStatus())) {
1: 					replyMessage.setBoolean("OrderAccepted", true);
1: 					System.out.println("Vendor: sent " + order.quantity + " computer(s)");
1: 				} else {
1: 					replyMessage.setBoolean("OrderAccepted", false);
1: 					System.out.println("Vendor: unable to send " + order.quantity + " computer(s)");
1: 				}
1: 				replyProducer.send(replyMessage);
1: 				asyncSession.commit();
1: 				System.out.println("Vender: committed transaction 2");
1: 			}
1: 		} catch (JMSException e) {
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 
1: 	public static class Order {
1: 		private static Map<Integer, Order> pendingOrders = new HashMap<Integer, Order>();
1: 		private static int nextOrderNumber = 1;
1: 
1: 		private int orderNumber;
1: 		private int quantity;
1: 		private MapMessage monitor = null;
1: 		private MapMessage storage = null;
1: 		private MapMessage message;
1: 		private String status;
1: 		
1: 		public Order(MapMessage message) {
1: 			this.orderNumber = nextOrderNumber++;
1: 			this.message = message;
1: 			try {
1: 				this.quantity = message.getInt("Quantity");
1: 			} catch (JMSException e) {
1: 				e.printStackTrace();
1: 				this.quantity = 0;
1: 			}
1: 			status = "Pending";
1: 			pendingOrders.put(orderNumber, this);
1: 		}
1: 		
1: 		public Object getStatus() {
1: 			return status;
1: 		}
1: 		
1: 		public int getOrderNumber() {
1: 			return orderNumber;
1: 		}
1: 		
1: 		public static int getOutstandingOrders() {
1: 			return pendingOrders.size();
1: 		}
1: 		
1: 		public static Order getOrder(int number) {
1: 			return pendingOrders.get(number);
1: 		}
1: 		
1: 		public MapMessage getMessage() {
1: 			return message;
1: 		}
1: 		
1: 		public void processSubOrder(MapMessage message) {
1: 			String itemName = null;
1: 			try {
1: 				itemName = message.getString("Item");
1: 			} catch (JMSException e) {
1: 				e.printStackTrace();
1: 			}
1: 			
1: 			if ("Monitor".equals(itemName)) {
1: 				monitor = message;
1: 			} else if ("HardDrive".equals(itemName)) {
1: 				storage = message;
1: 			}
1: 			
1: 			if (null != monitor && null != storage) {
1: 				// Received both messages
1: 				try {
1: 					if (quantity > monitor.getInt("Quantity")) {
1: 						status = "Cancelled";
1: 					} else if (quantity > storage.getInt("Quantity")) {
1: 						status = "Cancelled";
1: 					} else {
1: 						status = "Fulfilled";
1: 					}
1: 				} catch (JMSException e) {
1: 					e.printStackTrace();
1: 					status = "Cancelled";
1: 				}
1: 			}
1: 		}		
1: 	}
1: 
1: 	public static void main(String[] args) {
1: 		String url = "tcp://localhost:61616";
1: 		String user = null;
1: 		String password = null;
1: 		
1: 		if (args.length >= 1) {
1: 			url = args[0];
1: 		}
1: 		
1: 		if (args.length >= 2) {
1: 			user = args[1];
1: 		}
1: 
1: 		if (args.length >= 3) {
1: 			password = args[2];
1: 		}
1: 		
1: 		Vendor v = new Vendor(url, user, password);
1: 		
1: 		new Thread(v, "Vendor").start();
1: 	}	
1: }
============================================================================