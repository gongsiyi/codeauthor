1:2aa172f: /**
1:2aa172f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2aa172f:  * contributor license agreements.  See the NOTICE file distributed with
1:2aa172f:  * this work for additional information regarding copyright ownership.
1:2aa172f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2aa172f:  * (the "License"); you may not use this file except in compliance with
1:2aa172f:  * the License.  You may obtain a copy of the License at
1:2aa172f:  *
1:2aa172f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2aa172f:  *
1:2aa172f:  * Unless required by applicable law or agreed to in writing, software
1:2aa172f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2aa172f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2aa172f:  * See the License for the specific language governing permissions and
1:2aa172f:  * limitations under the License.
1:2aa172f:  */
3:2aa172f: 
1:2aa172f: package org.apache.activemq.util;
1:2aa172f: 
1:2aa172f: import java.io.IOException;
1:2aa172f: import java.util.concurrent.CountDownLatch;
1:2aa172f: import java.util.concurrent.TimeUnit;
1:2aa172f: import java.util.concurrent.atomic.AtomicBoolean;
1:2aa172f: import org.apache.activemq.broker.BrokerService;
1:2aa172f: import org.apache.activemq.broker.SuppressReplyException;
1:2aa172f: import org.junit.Test;
1:1bef4de: 
1:1bef4de: 
1:1bef4de: import static org.junit.Assert.*;
1:2aa172f: 
1:2aa172f: public class DefaultIOExceptionHandlerTest {
1:2aa172f: 
1:2aa172f:     DefaultIOExceptionHandler underTest = new DefaultIOExceptionHandler();
1:2aa172f: 
1:1bef4de:     @Test
1:2aa172f:     public void testHandleWithShutdownOnExit() throws Exception {
1:2aa172f:         doTest(true);
1:2aa172f:     }
1:2aa172f: 
1:1bef4de:     @Test
1:2aa172f:     public void testHandleWithOutShutdownOnExit() throws Exception {
1:2aa172f:         doTest(false);
1:2aa172f:     }
1:2aa172f: 
1:2aa172f:     protected void doTest(boolean exitPlease) throws Exception {
1:2aa172f:         final CountDownLatch stopCalled = new CountDownLatch(1);
1:2aa172f:         final AtomicBoolean shutdownOnExitSet = new AtomicBoolean(false);
1:2aa172f: 
1:2aa172f:         underTest.setSystemExitOnShutdown(exitPlease);
1:2aa172f:         underTest.setBrokerService(new BrokerService() {
1:2aa172f:             @Override
1:c7291f1:             public boolean isStarted() {
1:c7291f1:                 return true;
1:c7291f1:             }
1:c7291f1: 
1:c7291f1:             @Override
1:2aa172f:             public void stop() throws Exception {
1:2aa172f:                 shutdownOnExitSet.set(isSystemExitOnShutdown());
1:2aa172f:                 stopCalled.countDown();
1:f09000d:                 // ensure we don't actually exit the jvm
1:f09000d:                 setSystemExitOnShutdown(false);
1:2aa172f:                 super.stop();
1:2aa172f:             }
1:2aa172f:         });
1:2aa172f: 
1:2aa172f:         try {
1:2aa172f:             underTest.handle(new IOException("cause stop"));
1:2aa172f:             fail("Expect suppress reply exception");
1:2aa172f:         } catch (SuppressReplyException expected) {}
1:2aa172f: 
1:2aa172f:         assertTrue("stop called on time", stopCalled.await(10, TimeUnit.SECONDS));
1:2aa172f:         assertEquals("exit on shutdown set", exitPlease, shutdownOnExitSet.get());
1:2aa172f:     }
1:2aa172f: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c7291f1
/////////////////////////////////////////////////////////////////////////
1:             public boolean isStarted() {
1:                 return true;
1:             }
1: 
1:             @Override
author:gtully
-------------------------------------------------------------------------------
commit:f09000d
/////////////////////////////////////////////////////////////////////////
1:                 // ensure we don't actually exit the jvm
1:                 setSystemExitOnShutdown(false);
commit:1bef4de
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import static org.junit.Assert.*;
1:     @Test
1:     @Test
commit:2aa172f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.SuppressReplyException;
1: import org.junit.Test;
1: 
1: 
0: import static org.junit.Assert.*;
1: 
1: public class DefaultIOExceptionHandlerTest {
1: 
1:     DefaultIOExceptionHandler underTest = new DefaultIOExceptionHandler();
1: 
0:     @Test
1:     public void testHandleWithShutdownOnExit() throws Exception {
1:         doTest(true);
1:     }
1: 
0:     @Test
1:     public void testHandleWithOutShutdownOnExit() throws Exception {
1:         doTest(false);
1:     }
1: 
1:     protected void doTest(boolean exitPlease) throws Exception {
1:         final CountDownLatch stopCalled = new CountDownLatch(1);
1:         final AtomicBoolean shutdownOnExitSet = new AtomicBoolean(false);
1: 
1:         underTest.setSystemExitOnShutdown(exitPlease);
1:         underTest.setBrokerService(new BrokerService() {
1:             @Override
1:             public void stop() throws Exception {
1:                 shutdownOnExitSet.set(isSystemExitOnShutdown());
1:                 stopCalled.countDown();
1:                 super.stop();
1:             }
1:         });
1: 
1:         try {
1:             underTest.handle(new IOException("cause stop"));
1:             fail("Expect suppress reply exception");
1:         } catch (SuppressReplyException expected) {}
1: 
1:         assertTrue("stop called on time", stopCalled.await(10, TimeUnit.SECONDS));
1:         assertEquals("exit on shutdown set", exitPlease, shutdownOnExitSet.get());
1:     }
1: }
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:39a20bd
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
0: 
0: 
0: import org.junit.Rule;
0: import org.junit.contrib.java.lang.system.ExpectedSystemExit;
0: import org.junit.contrib.java.lang.system.internal.NoExitSecurityManager;
0:     @Rule
0:     public final ExpectedSystemExit exit = ExpectedSystemExit.none();
0: 
0:     @Test(timeout=20000)
0:         exit.expectSystemExit();
0:         assertTrue(Wait.waitFor(new Wait.Condition() {
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return ((NoExitSecurityManager)System.getSecurityManager()).isCheckExitCalled();
0:             }
0:         }, 10000));
0: 
0:     @Test(timeout=20000)
============================================================================