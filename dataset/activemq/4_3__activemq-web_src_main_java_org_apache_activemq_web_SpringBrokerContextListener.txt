1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:f1a084e: package org.apache.activemq.web;
3:40a7d3b: 
1:540dd5c: import javax.servlet.ServletContext;
1:540dd5c: import javax.servlet.ServletContextEvent;
1:540dd5c: import javax.servlet.ServletContextListener;
1:540dd5c: 
1:88d5857: import org.apache.activemq.broker.BrokerService;
1:88d5857: import org.apache.activemq.xbean.BrokerFactoryBean;
1:40a7d3b: import org.springframework.core.io.Resource;
1:40a7d3b: import org.springframework.web.context.support.ServletContextResource;
1:7316506: 
2:40a7d3b: /**
1:40a7d3b:  * Used to configure and instance of ActiveMQ <tt>BrokerService</tt> using
1:40a7d3b:  * ActiveMQ/Spring's xml configuration. <p/> The configuration file is specified
1:40a7d3b:  * via the context init parameter <tt>brokerURI</tt>, typically: <code>
1:40a7d3b:  * &lt;context-param&gt;
1:40a7d3b:  * &lt;param-name&gt;brokerURI&lt;/param-name&gt;
1:40a7d3b:  * &lt;param-value&gt;/WEB-INF/activemq.xml&lt;/param-value&gt;
1:40a7d3b:  * &lt;/context-param&gt;
1:40a7d3b:  * </code>
1:40a7d3b:  * As a a default, if a <tt>brokerURI</tt> is not specified it will look up
1:40a7d3b:  * for <tt>activemq.xml</tt>
1:b0c2a40:  * 
1:92a698f:  * 
1:40a7d3b:  */
1:40a7d3b: public class SpringBrokerContextListener implements ServletContextListener {
1:40a7d3b: 
1:40a7d3b:     /** broker uri context parameter name: <tt>brokerURI</tt> */
1:40a7d3b:     public static final String INIT_PARAM_BROKER_URI = "brokerURI";
1:40a7d3b: 
1:40a7d3b:     /** the broker container instance */
1:40a7d3b:     private BrokerService brokerContainer;
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Set the broker container to be used by this listener
1:92a698f:      * 
1:540dd5c:      * @param container the container to be used.
1:40a7d3b:      */
1:40a7d3b:     protected void setBrokerService(BrokerService container) {
1:40a7d3b:         this.brokerContainer = container;
4:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Return the broker container.
1:40a7d3b:      */
1:40a7d3b:     protected BrokerService getBrokerService() {
1:40a7d3b:         return this.brokerContainer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void contextInitialized(ServletContextEvent event) {
1:40a7d3b:         ServletContext context = event.getServletContext();
1:40a7d3b:         context.log("Creating ActiveMQ Broker...");
1:40a7d3b:         brokerContainer = createBroker(context);
1:40a7d3b: 
1:40a7d3b:         context.log("Starting ActiveMQ Broker");
1:40a7d3b:         try {
1:40a7d3b:             brokerContainer.start();
1:40a7d3b: 
1:40a7d3b:             context.log("Started ActiveMQ Broker");
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             context.log("Failed to start ActiveMQ broker: " + e, e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void contextDestroyed(ServletContextEvent event) {
1:40a7d3b:         ServletContext context = event.getServletContext();
1:40a7d3b:         if (brokerContainer != null) {
1:40a7d3b:             try {
1:40a7d3b:                 brokerContainer.stop();
1:540dd5c:             } catch (Exception e) {
1:40a7d3b:                 context.log("Failed to stop the ActiveMQ Broker: " + e, e);
1:40a7d3b:             }
1:40a7d3b:             brokerContainer = null;
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Factory method to create a new ActiveMQ Broker
1:40a7d3b:      */
1:40a7d3b:     protected BrokerService createBroker(ServletContext context) {
1:40a7d3b:         String brokerURI = context.getInitParameter(INIT_PARAM_BROKER_URI);
1:40a7d3b:         if (brokerURI == null) {
1:40a7d3b:             brokerURI = "activemq.xml";
1:40a7d3b:         }
1:40a7d3b:         context.log("Loading ActiveMQ Broker configuration from: " + brokerURI);
1:40a7d3b:         Resource resource = new ServletContextResource(context, brokerURI);
1:7316506:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:7316506:         try {
1:7316506:             factory.afterPropertiesSet();
1:540dd5c:         } catch (Exception e) {
1:7316506:             context.log("Failed to create broker: " + e, e);
1:7316506:         }
1:7316506:         return factory.getBroker();
1:7316506:     }
1:40a7d3b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.servlet.ServletContext;
1: import javax.servlet.ServletContextEvent;
1: import javax.servlet.ServletContextListener;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param container the container to be used.
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:88d5857
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
commit:f1a084e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.web;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:b6b7cce
author:James Strachan
-------------------------------------------------------------------------------
commit:7316506
/////////////////////////////////////////////////////////////////////////
0: import org.activemq.xbean.BrokerFactoryBean;
0: import javax.servlet.ServletContext;
0: import javax.servlet.ServletContextEvent;
0: import javax.servlet.ServletContextListener;
1: 
/////////////////////////////////////////////////////////////////////////
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         try {
1:             factory.afterPropertiesSet();
1:         }
0:         catch (Exception e) {
1:             context.log("Failed to create broker: " + e, e);
1:         }
1:         return factory.getBroker();
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.web;
1: 
0: import javax.servlet.ServletContext;
0: import javax.servlet.ServletContextListener;
0: import javax.servlet.ServletContextEvent;
0: import javax.jms.JMSException;
1: 
0: import org.activemq.broker.BrokerService;
1: import org.springframework.core.io.Resource;
1: import org.springframework.web.context.support.ServletContextResource;
1: 
1: /**
1:  * Used to configure and instance of ActiveMQ <tt>BrokerService</tt> using
1:  * ActiveMQ/Spring's xml configuration. <p/> The configuration file is specified
1:  * via the context init parameter <tt>brokerURI</tt>, typically: <code>
1:  * &lt;context-param&gt;
1:  * &lt;param-name&gt;brokerURI&lt;/param-name&gt;
1:  * &lt;param-value&gt;/WEB-INF/activemq.xml&lt;/param-value&gt;
1:  * &lt;/context-param&gt;
1:  * </code>
0:  * 
1:  * As a a default, if a <tt>brokerURI</tt> is not specified it will look up
1:  * for <tt>activemq.xml</tt>
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class SpringBrokerContextListener implements ServletContextListener {
1: 
1:     /** broker uri context parameter name: <tt>brokerURI</tt> */
1:     public static final String INIT_PARAM_BROKER_URI = "brokerURI";
1: 
1:     /** the broker container instance */
1:     private BrokerService brokerContainer;
1: 
1:     /**
1:      * Set the broker container to be used by this listener
0:      * 
0:      * @param container
0:      *            the container to be used.
1:      */
1:     protected void setBrokerService(BrokerService container) {
1:         this.brokerContainer = container;
1:     }
1: 
1:     /**
1:      * Return the broker container.
1:      */
1:     protected BrokerService getBrokerService() {
1:         return this.brokerContainer;
1:     }
1: 
1:     public void contextInitialized(ServletContextEvent event) {
1:         ServletContext context = event.getServletContext();
1:         context.log("Creating ActiveMQ Broker...");
1:         brokerContainer = createBroker(context);
1: 
1:         context.log("Starting ActiveMQ Broker");
1:         try {
1:             brokerContainer.start();
1: 
1:             context.log("Started ActiveMQ Broker");
1:         }
0:         catch (Exception e) {
1:             context.log("Failed to start ActiveMQ broker: " + e, e);
1:         }
1:     }
1: 
1:     public void contextDestroyed(ServletContextEvent event) {
1:         ServletContext context = event.getServletContext();
1:         if (brokerContainer != null) {
1:             try {
1:                 brokerContainer.stop();
1:             }
0:             catch (Exception e) {
1:                 context.log("Failed to stop the ActiveMQ Broker: " + e, e);
1:             }
1:             brokerContainer = null;
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a new ActiveMQ Broker
1:      */
1:     protected BrokerService createBroker(ServletContext context) {
1:         String brokerURI = context.getInitParameter(INIT_PARAM_BROKER_URI);
1:         if (brokerURI == null) {
1:             brokerURI = "activemq.xml";
1:         }
1:         context.log("Loading ActiveMQ Broker configuration from: " + brokerURI);
1:         Resource resource = new ServletContextResource(context, brokerURI);
0:         // return SpringBrokerServiceFactory.newInstance(resource);
0:         return null;
1:     }
1: }
============================================================================