1:30b20b3: /**
1:30b20b3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:30b20b3:  * contributor license agreements.  See the NOTICE file distributed with
1:30b20b3:  * this work for additional information regarding copyright ownership.
1:30b20b3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:30b20b3:  * (the "License"); you may not use this file except in compliance with
1:30b20b3:  * the License.  You may obtain a copy of the License at
1:30b20b3:  *
1:30b20b3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:30b20b3:  *
1:30b20b3:  * Unless required by applicable law or agreed to in writing, software
1:30b20b3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30b20b3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30b20b3:  * See the License for the specific language governing permissions and
1:30b20b3:  * limitations under the License.
1:30b20b3:  */
1:30b20b3: package org.apache.activemq.karaf.itest;
2:af5f387: 
1:b17cc37: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1:b17cc37: 
1:927bef7: import org.junit.Assert;
1:30b20b3: import org.junit.Test;
1:30b20b3: import org.junit.runner.RunWith;
1:25f18ad: import org.ops4j.pax.exam.Configuration;
1:30b20b3: import org.ops4j.pax.exam.Option;
1:25f18ad: import org.ops4j.pax.exam.junit.PaxExam;
1:4dd3aa4: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:4dd3aa4: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:927bef7: import org.osgi.framework.Bundle;
1:af5f387: 
1:25f18ad: @RunWith(PaxExam.class)
1:4dd3aa4: @ExamReactorStrategy(PerMethod.class)
1:30b20b3: public class ObrFeatureTest extends AbstractFeatureTest {
1:af5f387: 
1:25f18ad:     @Configuration
1:25f18ad:     public static Option[] configure() {
1:4dd3aa4:         return new Option[] //
1:4dd3aa4:             {
1:4dd3aa4:              configure("obr"),
1:4dd3aa4:              editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion()),
1:4dd3aa4:         };
1:7ce5be4:     }
1:25f18ad: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:25f18ad:     public void testClient() throws Throwable {
4:927bef7:         installAndAssertFeature("activemq-client");
5:25f18ad:     }
1:25f18ad: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:25f18ad:     public void testActiveMQ() throws Throwable {
1:25f18ad:         installAndAssertFeature("activemq");
1:25f18ad:     }
1:25f18ad: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:25f18ad:     public void testBroker() throws Throwable {
1:25f18ad:         installAndAssertFeature("activemq-broker");
1:25f18ad:     }
1:25f18ad: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:25f18ad:     public void testCamel() throws Throwable {
1:25f18ad:         installAndAssertFeature("activemq-camel");
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:927bef7:     public void testClientWithSpring31() throws Throwable {
1:4dd3aa4:         testWithSpringVersion("3.1.4.RELEASE");
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:927bef7:     public void testClientWithSpring32() throws Throwable {
1:ab1bc5b:         testWithSpringVersion("3.2.18.RELEASE_1");
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:927bef7:     public void testClientWithSpring40() throws Throwable {
1:4dd3aa4:         testWithSpringVersion("4.0.7.RELEASE_3");
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:927bef7:     public void testClientWithSpring41() throws Throwable {
1:50ea308:         testWithSpringVersion("4.1.9.RELEASE_1");
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     @Test(timeout = 5 * 60 * 1000)
1:927bef7:     public void testClientWithSpring42() throws Throwable {
1:ab1bc5b:         testWithSpringVersion("4.2.9.RELEASE_1");
1:ab1bc5b:     }
1:ab1bc5b: 
1:ab1bc5b:     @Test(timeout = 5 * 60 * 1000)
1:ab1bc5b:     public void testClientWithSpring43() throws Throwable {
1:ab1bc5b:         testWithSpringVersion("4.3.5.RELEASE_1");
1:4dd3aa4:     }
1:4dd3aa4: 
1:4dd3aa4:     private void testWithSpringVersion(String version) throws Exception, Throwable {
1:4dd3aa4:         featuresService.installFeature("spring", version);
1:927bef7:         installAndAssertFeature("activemq-client");
5:927bef7:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:927bef7:     }
1:927bef7: 
1:4dd3aa4:     private void verifyBundleInstalledAndRegisteredServices(final String bundleName,
1:4dd3aa4:                                                            final int numberOfServices)
1:4dd3aa4:         throws Exception {
1:4dd3aa4:         Bundle bundle = getBundle(bundleName);
1:4dd3aa4:         Assert.assertEquals(Bundle.ACTIVE, bundle.getState());
1:4dd3aa4:         // Assert that the bundle has registered some services via blueprint
1:4dd3aa4:         Assert.assertNotNull(bundle.getRegisteredServices());
1:4dd3aa4:         // Assert that the bundle has registered the correct number of services
1:4dd3aa4:         Assert.assertEquals(numberOfServices, bundle.getRegisteredServices().length);
1:927bef7:     }
1:927bef7: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ab1bc5b
/////////////////////////////////////////////////////////////////////////
1:         testWithSpringVersion("3.2.18.RELEASE_1");
/////////////////////////////////////////////////////////////////////////
1:         testWithSpringVersion("4.2.9.RELEASE_1");
1:     }
1: 
1:     @Test(timeout = 5 * 60 * 1000)
1:     public void testClientWithSpring43() throws Throwable {
1:         testWithSpringVersion("4.3.5.RELEASE_1");
commit:b17cc37
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("feature:repo-add " + getCamelFeatureUrl());
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
0:         testWithSpringVersion("3.2.17.RELEASE_1");
/////////////////////////////////////////////////////////////////////////
1:         testWithSpringVersion("4.1.9.RELEASE_1");
0:         testWithSpringVersion("4.2.8.RELEASE_1");
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: @ExamReactorStrategy(PerMethod.class)
1:         return new Option[] //
1:             {
1:              configure("obr"),
1:              editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion()),
1:         };
1:     @Test(timeout = 5 * 60 * 1000)
1:     @Test(timeout = 5 * 60 * 1000)
1:     @Test(timeout = 5 * 60 * 1000)
1:     @Test(timeout = 5 * 60 * 1000)
1:     @Test(timeout = 5 * 60 * 1000)
1:         testWithSpringVersion("3.1.4.RELEASE");
1:     @Test(timeout = 5 * 60 * 1000)
0:         testWithSpringVersion("3.2.14.RELEASE_1");
1:     @Test(timeout = 5 * 60 * 1000)
1:         testWithSpringVersion("4.0.7.RELEASE_3");
1:     @Test(timeout = 5 * 60 * 1000)
0:         testWithSpringVersion("4.1.7.RELEASE_2");
1:     @Test(timeout = 5 * 60 * 1000)
0:         testWithSpringVersion("4.2.2.RELEASE_1");
1:     }
1: 
1:     private void testWithSpringVersion(String version) throws Exception, Throwable {
1:         featuresService.installFeature("spring", version);
1:     private void verifyBundleInstalledAndRegisteredServices(final String bundleName,
1:                                                            final int numberOfServices)
1:         throws Exception {
1:         Bundle bundle = getBundle(bundleName);
1:         Assert.assertEquals(Bundle.ACTIVE, bundle.getState());
1:         // Assert that the bundle has registered some services via blueprint
1:         Assert.assertNotNull(bundle.getRegisteredServices());
1:         // Assert that the bundle has registered the correct number of services
1:         Assert.assertEquals(numberOfServices, bundle.getRegisteredServices().length);
commit:b0884f8
/////////////////////////////////////////////////////////////////////////
author:Seth Leger
-------------------------------------------------------------------------------
commit:927bef7
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testClientWithSpring31() throws Throwable {
0:         executeCommand("feature:install spring/3.1.4.RELEASE");
1:         installAndAssertFeature("activemq-client");
1:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testClientWithSpring32() throws Throwable {
0:         executeCommand("feature:install spring/3.2.14.RELEASE_1");
1:         installAndAssertFeature("activemq-client");
1:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testClientWithSpring40() throws Throwable {
0:         executeCommand("feature:install spring/4.0.7.RELEASE_3");
1:         installAndAssertFeature("activemq-client");
1:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testClientWithSpring41() throws Throwable {
0:         executeCommand("feature:install spring/4.1.7.RELEASE_2");
1:         installAndAssertFeature("activemq-client");
1:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testClientWithSpring42() throws Throwable {
0:         executeCommand("feature:install spring/4.2.2.RELEASE_1");
1:         installAndAssertFeature("activemq-client");
1:         verifyBundleInstalledAndRegisteredServices("activemq-osgi", 2);
1:     }
1: 
0:     public boolean verifyBundleInstalledAndRegisteredServices(final String bundleName, final int numberOfServices) throws Exception {
0:         boolean found = false;
0:         for (final Bundle bundle : bundleContext.getBundles()) {
0:             LOG.debug("Checking: " + bundle.getSymbolicName());
0:             if (bundle.getSymbolicName().contains(bundleName)) {
0:                 Assert.assertEquals(Bundle.ACTIVE, bundle.getState());
0:                 // Assert that the bundle has registered some services via blueprint
0:                 Assert.assertNotNull(bundle.getRegisteredServices());
0:                 // Assert that the bundle has registered the correct number of services
0:                 Assert.assertEquals(numberOfServices, bundle.getRegisteredServices().length);
0:                 found = true;
0:                 break;
1:             }
1:         }
0:         return found;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:7ce5be4
/////////////////////////////////////////////////////////////////////////
0:         // can't see where these deps die in a paxexam container - vanilla distro unpack can install war feature ok
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue("xbean finder bundle installed", verifyBundleInstalled("org.apache.xbean.finder"));
0:                 return true;
1:             }
0:         });
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
1: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
0: import static org.junit.Assert.assertTrue;
1: @RunWith(PaxExam.class)
1:     @Configuration
1:     public static Option[] configure() {
0:         Option[] options = append(
0:         // can't see where these deps die in a pax-web container - vanilla distro unpack can install war feature ok
0:         options = append(CoreOptions.mavenBundle("org.apache.xbean", "xbean-bundleutils").versionAsInProject(), options);
0:         options = append(CoreOptions.mavenBundle("org.apache.xbean", "xbean-asm-util").versionAsInProject(), options);
0:         return append(CoreOptions.mavenBundle("org.apache.xbean", "xbean-finder").versionAsInProject(), options);
1:     }
0:     public void testWar() throws Throwable {
0:         // note xbean deps manually installed above, should not be needed
0:         installAndAssertFeature("war");
1:     }
1:     public void testClient() throws Throwable {
0:         installAndAssertFeature("activemq-client");
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testActiveMQ() throws Throwable {
1:         installAndAssertFeature("activemq");
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testBroker() throws Throwable {
0:         // ensure pax-war feature deps are there for web-console
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue("xbean finder bundle installed", verifyBundleInstalled("org.apache.xbean.finder"));
0:                 return true;
1:             }
0:         });
1: 
1:         installAndAssertFeature("activemq-broker");
1:     }
1: 
0:     @Test(timeout=5 * 60 * 1000)
1:     public void testCamel() throws Throwable {
0:         executeCommand("features:addurl " + getCamelFeatureUrl());
1:         installAndAssertFeature("activemq-camel");
1:     }
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
author:Kevin Earls
-------------------------------------------------------------------------------
commit:b70fc9a
/////////////////////////////////////////////////////////////////////////
0: 	@Test(timeout=5 * 60 * 1000)
0: 	@Test(timeout=5 * 60 * 1000)
0:     @Test(timeout=5 * 60 * 1000)
0:     @Test(timeout=5 * 60 * 1000)
author:Gary Tully
-------------------------------------------------------------------------------
commit:14a9381
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
commit:af5f387
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.MavenUtils;
0: import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1: 
1: 
0: 		return append(
0:                 editConfigurationFilePut("etc/system.properties", "camel.version", MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel")),
0:                 configure("obr"));
/////////////////////////////////////////////////////////////////////////
0: 	@Test
0: 	public void testActiveMQ() throws Throwable {
0: 		installAndAssertFeature("activemq");
1: 
0:     @Test
0:    	public void testBroker() throws Throwable {
0:    		installAndAssertFeature("activemq-broker");
0:    	}
1: 
0:     @Test
0:    	public void testCamel() throws Throwable {
0:         System.err.println(executeCommand("features:addurl " + getCamelFeatureUrl()));
0:    		installAndAssertFeature("activemq-camel");
0:    	}
commit:30b20b3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
0: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: 
0: 
0: @RunWith(JUnit4TestRunner.class)
1: public class ObrFeatureTest extends AbstractFeatureTest {
0: 
0: 	@Configuration
0: 	public static Option[] configure() {
0: 		return configure("obr");
0: 	}
0: 
0: 	@Test
0: 	public void testClient() throws Throwable {
0: 		installAndAssertFeature("activemq-client");
0: 	}
0: 
0: 	//@Test
0: 	public void testBroker() throws Throwable {
0: 		installAndAssertFeature("activemq-broker");
0: 	}
0: }
============================================================================