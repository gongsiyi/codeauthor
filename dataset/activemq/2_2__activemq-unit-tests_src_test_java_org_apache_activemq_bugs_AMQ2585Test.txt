1:7a7ac13: /**
1:7a7ac13:  *
1:7a7ac13:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a7ac13:  * contributor license agreements.  See the NOTICE file distributed with
1:7a7ac13:  * this work for additional information regarding copyright ownership.
1:7a7ac13:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a7ac13:  * (the "License"); you may not use this file except in compliance with
1:7a7ac13:  * the License.  You may obtain a copy of the License at
1:7a7ac13:  *
1:7a7ac13:  * http://www.apache.org/licenses/LICENSE-2.0
1:7a7ac13:  *
1:7a7ac13:  * Unless required by applicable law or agreed to in writing, software
1:7a7ac13:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a7ac13:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a7ac13:  * See the License for the specific language governing permissions and
1:7a7ac13:  * limitations under the License.
1:7a7ac13:  */
1:7a7ac13: 
1:7a7ac13: package org.apache.activemq.bugs;
1:7a7ac13: 
1:7a7ac13: import javax.jms.Destination;
1:7a7ac13: import javax.jms.MessageConsumer;
1:7a7ac13: import javax.jms.MessageProducer;
1:7a7ac13: import javax.jms.Session;
1:7a7ac13: import javax.jms.TextMessage;
1:7a7ac13: 
1:7a7ac13: import org.apache.activemq.EmbeddedBrokerAndConnectionTestSupport;
1:7a7ac13: import org.apache.activemq.command.ActiveMQQueue;
1:7a7ac13: import org.apache.activemq.command.ActiveMQTextMessage;
1:5219fa1: import org.apache.activemq.command.Message;
1:7a7ac13: import org.apache.activemq.spring.ConsumerBean;
1:7a7ac13: 
1:7a7ac13: public class AMQ2585Test extends EmbeddedBrokerAndConnectionTestSupport {
1:7a7ac13:     private final Destination destination = new ActiveMQQueue("MyQueue");
1:7a7ac13:     final static String LENGTH10STRING = "1234567890";
1:7a7ac13:     private Session session;
1:7a7ac13:     private MessageProducer producer;
1:7a7ac13:     private ConsumerBean messageList;
1:7a7ac13: 
1:7a7ac13:     public void testOneMessageWithProperties() throws Exception {
1:7a7ac13:         TextMessage message = session.createTextMessage(LENGTH10STRING);
1:7a7ac13:         message.setStringProperty(LENGTH10STRING, LENGTH10STRING);
1:7a7ac13:         producer.send(message);
1:7a7ac13: 
1:7a7ac13:         messageList.assertMessagesArrived(1);
1:7a7ac13: 
1:7a7ac13:         ActiveMQTextMessage received = ((ActiveMQTextMessage) messageList
1:7a7ac13:                 .flushMessages().get(0));
1:7a7ac13: 
1:7a7ac13:         assertEquals(LENGTH10STRING, received.getText());
1:7a7ac13:         assertTrue(received.getProperties().size() > 0);
1:7a7ac13:         assertTrue(received.propertyExists(LENGTH10STRING));
1:7a7ac13:         assertEquals(LENGTH10STRING, received.getStringProperty(LENGTH10STRING));
1:7a7ac13: 
1:7a7ac13:         /**
1:7a7ac13:          * As specified by getSize(), the size (memory usage) of the body should
1:7a7ac13:          * be length of text * 2. Unsure of how memory usage is calculated for
1:7a7ac13:          * properties, but should probably not be less than the sum of (string)
1:7a7ac13:          * lengths for the key name and value.
1:7a7ac13:          */
1:7a7ac13: 
1:5219fa1:         final int sizeShouldBeNoLessThan = LENGTH10STRING.length() * 4 + Message.DEFAULT_MINIMUM_MESSAGE_SIZE;
1:7a7ac13:         assertTrue("Message size was smaller than expected: " + received.getSize(),
1:7a7ac13:                 received.getSize() >= sizeShouldBeNoLessThan);
1:7a7ac13:         assertFalse(LENGTH10STRING.length() * 2 == received.getSize());
1:7a7ac13:     }
1:7a7ac13: 
1:7a7ac13:     @Override
1:7a7ac13:     protected void setUp() throws Exception {
1:7a7ac13:         bindAddress = bindAddress + "?marshal=true";
1:7a7ac13:         super.setUp();
1:7a7ac13:         messageList = new ConsumerBean();
1:7a7ac13:         messageList.setVerbose(true);
1:7a7ac13: 
1:7a7ac13:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a7ac13: 
1:7a7ac13:         MessageConsumer messageConsumer = session.createConsumer(destination);
1:7a7ac13: 
1:7a7ac13:         messageConsumer.setMessageListener(messageList);
1:7a7ac13: 
1:7a7ac13:         producer = session.createProducer(destination);
1:7a7ac13:     }
1:7a7ac13: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:         final int sizeShouldBeNoLessThan = LENGTH10STRING.length() * 4 + Message.DEFAULT_MINIMUM_MESSAGE_SIZE;
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:7a7ac13
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.EmbeddedBrokerAndConnectionTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.spring.ConsumerBean;
1: 
1: public class AMQ2585Test extends EmbeddedBrokerAndConnectionTestSupport {
1:     private final Destination destination = new ActiveMQQueue("MyQueue");
1:     final static String LENGTH10STRING = "1234567890";
1:     private Session session;
1:     private MessageProducer producer;
1:     private ConsumerBean messageList;
1: 
1:     public void testOneMessageWithProperties() throws Exception {
1:         TextMessage message = session.createTextMessage(LENGTH10STRING);
1:         message.setStringProperty(LENGTH10STRING, LENGTH10STRING);
1:         producer.send(message);
1: 
1:         messageList.assertMessagesArrived(1);
1: 
1:         ActiveMQTextMessage received = ((ActiveMQTextMessage) messageList
1:                 .flushMessages().get(0));
1: 
1:         assertEquals(LENGTH10STRING, received.getText());
1:         assertTrue(received.getProperties().size() > 0);
1:         assertTrue(received.propertyExists(LENGTH10STRING));
1:         assertEquals(LENGTH10STRING, received.getStringProperty(LENGTH10STRING));
1: 
1:         /**
1:          * As specified by getSize(), the size (memory usage) of the body should
1:          * be length of text * 2. Unsure of how memory usage is calculated for
1:          * properties, but should probably not be less than the sum of (string)
1:          * lengths for the key name and value.
1:          */
1: 
0:         final int sizeShouldBeNoLessThan = LENGTH10STRING.length() * 4 + received.DEFAULT_MINIMUM_MESSAGE_SIZE;
1:         assertTrue("Message size was smaller than expected: " + received.getSize(),
1:                 received.getSize() >= sizeShouldBeNoLessThan);
1:         assertFalse(LENGTH10STRING.length() * 2 == received.getSize());
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = bindAddress + "?marshal=true";
1:         super.setUp();
1:         messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer messageConsumer = session.createConsumer(destination);
1: 
1:         messageConsumer.setMessageListener(messageList);
1: 
1:         producer = session.createProducer(destination);
1:     }
1: }
============================================================================