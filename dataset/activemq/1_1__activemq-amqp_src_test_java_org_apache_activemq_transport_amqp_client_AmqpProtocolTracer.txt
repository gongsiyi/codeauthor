1:24a7941: /*
1:24a7941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:24a7941:  * contributor license agreements.  See the NOTICE file distributed with
1:24a7941:  * this work for additional information regarding copyright ownership.
1:24a7941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:24a7941:  * (the "License"); you may not use this file except in compliance with
1:24a7941:  * the License.  You may obtain a copy of the License at
1:24a7941:  *
1:24a7941:  *      http://www.apache.org/licenses/LICENSE-2.0
1:24a7941:  *
1:24a7941:  * Unless required by applicable law or agreed to in writing, software
1:24a7941:  * distributed under the License is distributed on an "AS IS" BASIS,
1:24a7941:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:24a7941:  * See the License for the specific language governing permissions and
1:24a7941:  * limitations under the License.
1:24a7941:  */
1:24a7941: package org.apache.activemq.transport.amqp.client;
1:24a7941: 
1:24a7941: import org.apache.qpid.proton.amqp.Binary;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Attach;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Begin;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Close;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Detach;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Disposition;
1:24a7941: import org.apache.qpid.proton.amqp.transport.End;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Flow;
1:24a7941: import org.apache.qpid.proton.amqp.transport.FrameBody.FrameBodyHandler;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Open;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Transfer;
1:24a7941: import org.apache.qpid.proton.engine.impl.ProtocolTracer;
1:24a7941: import org.apache.qpid.proton.framing.TransportFrame;
1:24a7941: import org.slf4j.Logger;
1:24a7941: import org.slf4j.LoggerFactory;
1:24a7941: 
1:24a7941: /**
1:24a7941:  * Tracer used to spy on AMQP traffic
1:24a7941:  */
1:24a7941: public class AmqpProtocolTracer implements ProtocolTracer, FrameBodyHandler<AmqpFrameValidator> {
1:24a7941: 
1:24a7941:     private static final Logger TRACE_FRAMES = LoggerFactory.getLogger(AmqpProtocolTracer.class.getPackage().getName() + ".FRAMES");
1:24a7941: 
1:24a7941:     private final AmqpConnection connection;
1:24a7941: 
1:24a7941:     public AmqpProtocolTracer(AmqpConnection connection) {
1:24a7941:         this.connection = connection;
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void receivedFrame(TransportFrame transportFrame) {
1:24a7941:         if (connection.isTraceFrames()) {
1:24a7941:             TRACE_FRAMES.trace("{} | RECV: {}", connection.getRemoteURI(), transportFrame.getBody());
1:24a7941:         }
1:24a7941: 
1:24a7941:         AmqpFrameValidator inspector = connection.getReceivedFrameInspector();
1:24a7941:         if (inspector != null) {
1:24a7941:             transportFrame.getBody().invoke(this, transportFrame.getPayload(), inspector);
1:24a7941:         }
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void sentFrame(TransportFrame transportFrame) {
1:24a7941:         if (connection.isTraceFrames()) {
1:24a7941:             TRACE_FRAMES.trace("{} | SENT: {}", connection.getRemoteURI(), transportFrame.getBody());
1:24a7941:         }
1:24a7941: 
1:24a7941:         AmqpFrameValidator inspector = connection.getSentFrameInspector();
1:24a7941:         if (inspector != null) {
1:24a7941:             transportFrame.getBody().invoke(this, transportFrame.getPayload(), inspector);
1:24a7941:         }
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleOpen(Open open, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectOpen(open, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleBegin(Begin begin, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectBegin(begin, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleAttach(Attach attach, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectAttach(attach, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleFlow(Flow flow, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectFlow(flow, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleTransfer(Transfer transfer, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectTransfer(transfer, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleDisposition(Disposition disposition, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectDisposition(disposition, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleDetach(Detach detach, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectDetach(detach, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleEnd(End end, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectEnd(end, payload);
1:24a7941:     }
1:24a7941: 
1:24a7941:     @Override
1:24a7941:     public void handleClose(Close close, Binary payload, AmqpFrameValidator context) {
1:24a7941:         context.inspectClose(close, payload);
1:24a7941:     }
1:24a7941: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:24a7941
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.transport.Attach;
1: import org.apache.qpid.proton.amqp.transport.Begin;
1: import org.apache.qpid.proton.amqp.transport.Close;
1: import org.apache.qpid.proton.amqp.transport.Detach;
1: import org.apache.qpid.proton.amqp.transport.Disposition;
1: import org.apache.qpid.proton.amqp.transport.End;
1: import org.apache.qpid.proton.amqp.transport.Flow;
1: import org.apache.qpid.proton.amqp.transport.FrameBody.FrameBodyHandler;
1: import org.apache.qpid.proton.amqp.transport.Open;
1: import org.apache.qpid.proton.amqp.transport.Transfer;
1: import org.apache.qpid.proton.engine.impl.ProtocolTracer;
1: import org.apache.qpid.proton.framing.TransportFrame;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tracer used to spy on AMQP traffic
1:  */
1: public class AmqpProtocolTracer implements ProtocolTracer, FrameBodyHandler<AmqpFrameValidator> {
1: 
1:     private static final Logger TRACE_FRAMES = LoggerFactory.getLogger(AmqpProtocolTracer.class.getPackage().getName() + ".FRAMES");
1: 
1:     private final AmqpConnection connection;
1: 
1:     public AmqpProtocolTracer(AmqpConnection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     @Override
1:     public void receivedFrame(TransportFrame transportFrame) {
1:         if (connection.isTraceFrames()) {
1:             TRACE_FRAMES.trace("{} | RECV: {}", connection.getRemoteURI(), transportFrame.getBody());
1:         }
1: 
1:         AmqpFrameValidator inspector = connection.getReceivedFrameInspector();
1:         if (inspector != null) {
1:             transportFrame.getBody().invoke(this, transportFrame.getPayload(), inspector);
1:         }
1:     }
1: 
1:     @Override
1:     public void sentFrame(TransportFrame transportFrame) {
1:         if (connection.isTraceFrames()) {
1:             TRACE_FRAMES.trace("{} | SENT: {}", connection.getRemoteURI(), transportFrame.getBody());
1:         }
1: 
1:         AmqpFrameValidator inspector = connection.getSentFrameInspector();
1:         if (inspector != null) {
1:             transportFrame.getBody().invoke(this, transportFrame.getPayload(), inspector);
1:         }
1:     }
1: 
1:     @Override
1:     public void handleOpen(Open open, Binary payload, AmqpFrameValidator context) {
1:         context.inspectOpen(open, payload);
1:     }
1: 
1:     @Override
1:     public void handleBegin(Begin begin, Binary payload, AmqpFrameValidator context) {
1:         context.inspectBegin(begin, payload);
1:     }
1: 
1:     @Override
1:     public void handleAttach(Attach attach, Binary payload, AmqpFrameValidator context) {
1:         context.inspectAttach(attach, payload);
1:     }
1: 
1:     @Override
1:     public void handleFlow(Flow flow, Binary payload, AmqpFrameValidator context) {
1:         context.inspectFlow(flow, payload);
1:     }
1: 
1:     @Override
1:     public void handleTransfer(Transfer transfer, Binary payload, AmqpFrameValidator context) {
1:         context.inspectTransfer(transfer, payload);
1:     }
1: 
1:     @Override
1:     public void handleDisposition(Disposition disposition, Binary payload, AmqpFrameValidator context) {
1:         context.inspectDisposition(disposition, payload);
1:     }
1: 
1:     @Override
1:     public void handleDetach(Detach detach, Binary payload, AmqpFrameValidator context) {
1:         context.inspectDetach(detach, payload);
1:     }
1: 
1:     @Override
1:     public void handleEnd(End end, Binary payload, AmqpFrameValidator context) {
1:         context.inspectEnd(end, payload);
1:     }
1: 
1:     @Override
1:     public void handleClose(Close close, Binary payload, AmqpFrameValidator context) {
1:         context.inspectClose(close, payload);
1:     }
1: }
============================================================================