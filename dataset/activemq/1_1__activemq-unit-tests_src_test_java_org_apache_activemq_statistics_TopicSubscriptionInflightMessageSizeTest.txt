1:4605503: /**
1:4605503:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4605503:  * contributor license agreements.  See the NOTICE file distributed with
1:4605503:  * this work for additional information regarding copyright ownership.
1:4605503:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4605503:  * (the "License"); you may not use this file except in compliance with
1:4605503:  * the License.  You may obtain a copy of the License at
1:4605503:  *
1:4605503:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4605503:  *
1:4605503:  * Unless required by applicable law or agreed to in writing, software
1:4605503:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4605503:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4605503:  * See the License for the specific language governing permissions and
1:4605503:  * limitations under the License.
1:4605503:  */
1:4605503: package org.apache.activemq.statistics;
1:4605503: 
1:65b0f2a: import static org.junit.Assert.assertTrue;
1:65b0f2a: 
1:4605503: import javax.jms.Destination;
1:4605503: import javax.jms.JMSException;
1:4605503: import javax.jms.MessageConsumer;
1:4605503: 
1:4605503: import org.apache.activemq.broker.region.Subscription;
1:4605503: import org.apache.activemq.command.ActiveMQDestination;
1:4605503: import org.apache.activemq.command.ActiveMQTopic;
1:65b0f2a: import org.apache.activemq.util.Wait;
1:65b0f2a: import org.junit.Assume;
1:65b0f2a: import org.junit.Test;
1:4605503: import org.junit.runner.RunWith;
1:4605503: import org.junit.runners.Parameterized;
1:4605503: 
1:4605503: /**
1:4605503:  * This test shows Inflight Message sizes are correct for various acknowledgement modes
1:4605503:  * using a TopicSubscription
1:4605503:  */
1:4605503: @RunWith(Parameterized.class)
1:4605503: public class TopicSubscriptionInflightMessageSizeTest extends AbstractInflightMessageSizeTest {
1:4605503: 
1:65b0f2a:     public TopicSubscriptionInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge, boolean useTopicSubscriptionInflightStats) {
1:65b0f2a:         super(ackType, optimizeAcknowledge, useTopicSubscriptionInflightStats);
1:4605503:     }
1:4605503: 
1:4605503:     @Override
1:4605503:     protected MessageConsumer getMessageConsumer() throws JMSException {
1:4605503:         return session.createConsumer(dest);
1:4605503:     }
1:4605503: 
1:4605503:     @Override
1:4605503:     protected Subscription getSubscription() {
1:4605503:         return amqDestination.getConsumers().get(0);
1:4605503:     }
1:4605503: 
1:4605503:     @Override
1:4605503:     protected Destination getDestination() throws JMSException {
1:4605503:         return session.createTopic(destName);
1:4605503:     }
1:4605503: 
1:4605503:     @Override
1:4605503:     protected ActiveMQDestination getActiveMQDestination() {
1:4605503:         return new ActiveMQTopic(destName);
1:4605503:     }
1:4605503: 
1:65b0f2a:     @Test(timeout=15000)
1:65b0f2a:     public void testInflightMessageSizeDisabled() throws Exception {
1:65b0f2a:         Assume.assumeFalse(useTopicSubscriptionInflightStats);
1:65b0f2a:         sendMessages(10);
1:65b0f2a: 
1:65b0f2a:         Thread.sleep(1000);
1:65b0f2a: 
1:65b0f2a:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:65b0f2a:             @Override
1:65b0f2a:             public boolean isSatisified() throws Exception {
1:65b0f2a:                 return getSubscription().getInFlightMessageSize() == 0;
1:65b0f2a:             }
1:65b0f2a:         }));
1:65b0f2a: 
1:65b0f2a:         receiveMessages(10);
1:65b0f2a: 
1:65b0f2a:         Thread.sleep(1000);
1:65b0f2a:         assertTrue("Inflight message size should still be 0", Wait.waitFor(new Wait.Condition() {
1:65b0f2a:             @Override
1:65b0f2a:             public boolean isSatisified() throws Exception {
1:65b0f2a:                 return getSubscription().getInFlightMessageSize() == 0;
1:65b0f2a:             }
1:65b0f2a:         }));
1:65b0f2a:     }
1:65b0f2a: 
1:4605503: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:65b0f2a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.junit.Assume;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     public TopicSubscriptionInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge, boolean useTopicSubscriptionInflightStats) {
1:         super(ackType, optimizeAcknowledge, useTopicSubscriptionInflightStats);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=15000)
1:     public void testInflightMessageSizeDisabled() throws Exception {
1:         Assume.assumeFalse(useTopicSubscriptionInflightStats);
1:         sendMessages(10);
1: 
1:         Thread.sleep(1000);
1: 
1:         assertTrue("Inflight message size should be 0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() == 0;
1:             }
1:         }));
1: 
1:         receiveMessages(10);
1: 
1:         Thread.sleep(1000);
1:         assertTrue("Inflight message size should still be 0", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getSubscription().getInFlightMessageSize() == 0;
1:             }
1:         }));
1:     }
1: 
commit:4605503
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.statistics;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
1: /**
1:  * This test shows Inflight Message sizes are correct for various acknowledgement modes
1:  * using a TopicSubscription
1:  */
1: @RunWith(Parameterized.class)
1: public class TopicSubscriptionInflightMessageSizeTest extends AbstractInflightMessageSizeTest {
1: 
0:     public TopicSubscriptionInflightMessageSizeTest(int ackType, boolean optimizeAcknowledge) {
0:         super(ackType, optimizeAcknowledge);
1:     }
1: 
1:     @Override
1:     protected MessageConsumer getMessageConsumer() throws JMSException {
1:         return session.createConsumer(dest);
1:     }
1: 
1:     @Override
1:     protected Subscription getSubscription() {
1:         return amqDestination.getConsumers().get(0);
1:     }
1: 
1:     @Override
1:     protected Destination getDestination() throws JMSException {
1:         return session.createTopic(destName);
1:     }
1: 
1:     @Override
1:     protected ActiveMQDestination getActiveMQDestination() {
1:         return new ActiveMQTopic(destName);
1:     }
1: 
1: }
============================================================================