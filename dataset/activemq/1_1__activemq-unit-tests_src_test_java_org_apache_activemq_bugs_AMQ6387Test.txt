1:bb8d32c: /*
1:bb8d32c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bb8d32c:  * contributor license agreements.  See the NOTICE file distributed with
1:bb8d32c:  * this work for additional information regarding copyright ownership.
1:bb8d32c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bb8d32c:  * (the "License"); you may not use this file except in compliance with
1:bb8d32c:  * the License.  You may obtain a copy of the License at
1:bb8d32c:  *
1:bb8d32c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bb8d32c:  *
1:bb8d32c:  * Unless required by applicable law or agreed to in writing, software
1:bb8d32c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bb8d32c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb8d32c:  * See the License for the specific language governing permissions and
1:bb8d32c:  * limitations under the License.
1:bb8d32c:  */
1:bb8d32c: package org.apache.activemq.bugs;
1:bb8d32c: 
1:bb8d32c: import static org.junit.Assert.assertEquals;
1:bb8d32c: import static org.junit.Assert.assertNotNull;
1:bb8d32c: 
1:bb8d32c: import javax.jms.BytesMessage;
1:bb8d32c: import javax.jms.Connection;
1:bb8d32c: import javax.jms.DeliveryMode;
1:bb8d32c: import javax.jms.Destination;
1:bb8d32c: import javax.jms.JMSException;
1:bb8d32c: import javax.jms.MessageConsumer;
1:bb8d32c: import javax.jms.MessageProducer;
1:bb8d32c: import javax.jms.Queue;
1:bb8d32c: import javax.jms.Session;
1:bb8d32c: import javax.jms.Topic;
1:bb8d32c: import javax.management.MalformedObjectNameException;
1:bb8d32c: import javax.management.ObjectName;
1:bb8d32c: 
1:bb8d32c: import org.apache.activemq.ActiveMQConnectionFactory;
1:bb8d32c: import org.apache.activemq.broker.BrokerService;
1:bb8d32c: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:bb8d32c: import org.apache.activemq.command.ActiveMQDestination;
1:bb8d32c: import org.apache.activemq.usage.MemoryUsage;
1:bb8d32c: import org.junit.After;
1:bb8d32c: import org.junit.Before;
1:bb8d32c: import org.junit.Rule;
1:bb8d32c: import org.junit.Test;
1:bb8d32c: import org.junit.rules.TestName;
1:bb8d32c: import org.slf4j.Logger;
1:bb8d32c: import org.slf4j.LoggerFactory;
1:bb8d32c: 
1:bb8d32c: public class AMQ6387Test {
1:bb8d32c: 
1:bb8d32c:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6387Test.class);
1:bb8d32c: 
1:bb8d32c:     private final String QUEUE_NAME = "testQueue";
1:bb8d32c:     private final String TOPIC_NAME = "testTopic";
1:bb8d32c:     private final String SUBSCRIPTION_NAME = "subscriberId";
1:bb8d32c:     private final String CLIENT_ID = "client1";
1:bb8d32c:     private final int MSG_COUNT = 150;
1:bb8d32c: 
1:bb8d32c:     private ActiveMQConnectionFactory connectionFactory;
1:bb8d32c:     private BrokerService brokerService;
1:bb8d32c: 
1:bb8d32c:     @Rule
1:bb8d32c:     public TestName testName = new TestName();
1:bb8d32c: 
1:bb8d32c:     @Before
1:bb8d32c:     public void setUp() throws Exception {
1:bb8d32c: 
1:bb8d32c:         LOG.info("=============== Starting test: {} ====================", testName.getMethodName());
1:bb8d32c: 
1:bb8d32c:         brokerService = new BrokerService();
1:bb8d32c:         brokerService.setAdvisorySupport(false);
1:bb8d32c:         brokerService.setPersistent(false);
1:bb8d32c:         brokerService.setUseJmx(true);
1:bb8d32c:         brokerService.setKeepDurableSubsActive(false);
1:bb8d32c:         brokerService.start();
1:bb8d32c:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     @After
1:bb8d32c:     public void tearDown() throws Exception {
1:bb8d32c:         brokerService.stop();
1:bb8d32c: 
1:bb8d32c:         LOG.info("=============== Finished test: {} ====================", testName.getMethodName());
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     @Test
1:bb8d32c:     public void testQueueMessagesKeptAfterDelivery() throws Exception {
1:bb8d32c:         createDurableSubscription();
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         sendBytesMessage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         receiveMessages(Queue.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, getCurrentMemoryUsage(Queue.class));
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     @Test
1:bb8d32c:     public void testQueueMessagesKeptAfterPurge() throws Exception {
1:bb8d32c:         createDurableSubscription();
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         sendBytesMessage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         getProxyToQueue(QUEUE_NAME).purge();
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Queue.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, getCurrentMemoryUsage(Queue.class));
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     @Test
1:bb8d32c:     public void testDurableTopicSubscriptionMessagesKeptAfterDelivery() throws Exception {
1:bb8d32c:         createDurableSubscription();
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         sendBytesMessage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         receiveMessages(Topic.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, getCurrentMemoryUsage(Topic.class));
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     @Test
1:bb8d32c:     public void testDurableTopicSubscriptionMessagesKeptAfterUnsubscribe() throws Exception {
1:bb8d32c:         createDurableSubscription();
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         sendBytesMessage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         unsubscribeDurableSubscription();
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:bb8d32c:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:bb8d32c: 
1:bb8d32c:         logBrokerMemoryUsage(Topic.class);
1:bb8d32c: 
1:bb8d32c:         assertEquals(0, getCurrentMemoryUsage(Topic.class));
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private void createDurableSubscription() throws JMSException {
1:bb8d32c:         final Connection connection = connectionFactory.createConnection();
1:bb8d32c:         connection.setClientID(CLIENT_ID);
1:bb8d32c:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bb8d32c:         final Topic topic = session.createTopic(TOPIC_NAME);
1:bb8d32c:         connection.start();
1:bb8d32c: 
1:bb8d32c:         session.createDurableSubscriber(topic, SUBSCRIPTION_NAME, null, false);
1:bb8d32c:         LOG.info("Created durable subscription.");
1:bb8d32c: 
1:bb8d32c:         connection.stop();
1:bb8d32c:         connection.close();
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private void receiveMessages(Class<? extends Destination> destType) throws JMSException {
1:bb8d32c:         final Connection connection = connectionFactory.createConnection();
1:bb8d32c:         connection.setClientID(CLIENT_ID);
1:bb8d32c:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bb8d32c:         final Destination destination;
1:bb8d32c:         if (destType.equals(Queue.class)) {
1:bb8d32c:             destination = session.createQueue(QUEUE_NAME);
1:bb8d32c:         } else {
1:bb8d32c:             destination = session.createTopic(TOPIC_NAME);
1:bb8d32c:         }
1:bb8d32c: 
1:bb8d32c:         final MessageConsumer consumer;
1:bb8d32c:         if (destType.equals(Queue.class)) {
1:bb8d32c:             consumer = session.createConsumer(destination);
1:bb8d32c:         } else {
1:bb8d32c:             consumer = session.createDurableSubscriber((Topic) destination, SUBSCRIPTION_NAME, null, false);
1:bb8d32c:         }
1:bb8d32c: 
1:bb8d32c:         connection.start();
1:bb8d32c: 
1:bb8d32c:         for (int i = 0; i < MSG_COUNT; ++i) {
1:bb8d32c:             assertNotNull(consumer.receive(5000));
1:bb8d32c:         }
1:bb8d32c: 
1:bb8d32c:         connection.close();
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private void sendBytesMessage(Class<? extends Destination> destType) throws JMSException {
1:bb8d32c:         final Connection connection = connectionFactory.createConnection();
1:bb8d32c:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bb8d32c:         final Destination destination;
1:bb8d32c:         if (destType.equals(Queue.class)) {
1:bb8d32c:             destination = session.createQueue(QUEUE_NAME);
1:bb8d32c:         } else {
1:bb8d32c:             destination = session.createTopic(TOPIC_NAME);
1:bb8d32c:         }
1:bb8d32c:         final MessageProducer producer = session.createProducer(destination);
1:bb8d32c:         final BytesMessage bytesMessage = session.createBytesMessage();
1:bb8d32c: 
1:bb8d32c:         bytesMessage.writeBytes(new byte[1024 * 1024]);
1:bb8d32c: 
1:bb8d32c:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:bb8d32c:         for (int i = 0; i < MSG_COUNT; ++i) {
1:bb8d32c:             producer.send(bytesMessage);
1:bb8d32c:         }
1:bb8d32c: 
1:bb8d32c:         connection.close();
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private void unsubscribeDurableSubscription() throws JMSException {
1:bb8d32c:         final Connection connection = connectionFactory.createConnection();
1:bb8d32c:         connection.setClientID(CLIENT_ID);
1:bb8d32c:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bb8d32c:         session.unsubscribe(SUBSCRIPTION_NAME);
1:bb8d32c:         LOG.info("Unsubscribed durable subscription.");
1:bb8d32c: 
1:bb8d32c:         connection.stop();
1:bb8d32c:         connection.close();
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private long getCurrentMemoryUsage(Class<? extends Destination> destType) throws Exception {
1:bb8d32c:         final MemoryUsage usage;
1:bb8d32c:         if (destType.equals(Queue.class)) {
1:bb8d32c:             usage = brokerService.getDestination(ActiveMQDestination.createDestination(QUEUE_NAME, ActiveMQDestination.QUEUE_TYPE)).getMemoryUsage();
1:bb8d32c:         } else {
1:bb8d32c:             usage = brokerService.getDestination(ActiveMQDestination.createDestination(TOPIC_NAME, ActiveMQDestination.TOPIC_TYPE)).getMemoryUsage();
1:bb8d32c:         }
1:bb8d32c: 
1:bb8d32c:         return usage.getUsage();
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     private void logBrokerMemoryUsage(Class<? extends Destination> destType) throws Exception {
1:bb8d32c:         LOG.info("Memory usage: broker={}% destination={}", brokerService.getAdminView().getMemoryPercentUsage(), getCurrentMemoryUsage(destType));
1:bb8d32c:     }
1:bb8d32c: 
1:bb8d32c:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:bb8d32c:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:bb8d32c:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:bb8d32c:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:bb8d32c:         return proxy;
1:bb8d32c:     }
1:bb8d32c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bb8d32c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.usage.MemoryUsage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ6387Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6387Test.class);
1: 
1:     private final String QUEUE_NAME = "testQueue";
1:     private final String TOPIC_NAME = "testTopic";
1:     private final String SUBSCRIPTION_NAME = "subscriberId";
1:     private final String CLIENT_ID = "client1";
1:     private final int MSG_COUNT = 150;
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private BrokerService brokerService;
1: 
1:     @Rule
1:     public TestName testName = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         LOG.info("=============== Starting test: {} ====================", testName.getMethodName());
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.setKeepDurableSubsActive(false);
1:         brokerService.start();
1:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1: 
1:         LOG.info("=============== Finished test: {} ====================", testName.getMethodName());
1:     }
1: 
1:     @Test
1:     public void testQueueMessagesKeptAfterDelivery() throws Exception {
1:         createDurableSubscription();
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         sendBytesMessage(Queue.class);
1: 
1:         logBrokerMemoryUsage(Queue.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1: 
1:         receiveMessages(Queue.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1: 
1:         logBrokerMemoryUsage(Queue.class);
1: 
1:         assertEquals(0, getCurrentMemoryUsage(Queue.class));
1:     }
1: 
1:     @Test
1:     public void testQueueMessagesKeptAfterPurge() throws Exception {
1:         createDurableSubscription();
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         sendBytesMessage(Queue.class);
1: 
1:         logBrokerMemoryUsage(Queue.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1: 
1:         getProxyToQueue(QUEUE_NAME).purge();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1: 
1:         logBrokerMemoryUsage(Queue.class);
1: 
1:         assertEquals(0, getCurrentMemoryUsage(Queue.class));
1:     }
1: 
1:     @Test
1:     public void testDurableTopicSubscriptionMessagesKeptAfterDelivery() throws Exception {
1:         createDurableSubscription();
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         sendBytesMessage(Topic.class);
1: 
1:         logBrokerMemoryUsage(Topic.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         receiveMessages(Topic.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         logBrokerMemoryUsage(Topic.class);
1: 
1:         assertEquals(0, getCurrentMemoryUsage(Topic.class));
1:     }
1: 
1:     @Test
1:     public void testDurableTopicSubscriptionMessagesKeptAfterUnsubscribe() throws Exception {
1:         createDurableSubscription();
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         sendBytesMessage(Topic.class);
1: 
1:         logBrokerMemoryUsage(Topic.class);
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         unsubscribeDurableSubscription();
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         logBrokerMemoryUsage(Topic.class);
1: 
1:         assertEquals(0, getCurrentMemoryUsage(Topic.class));
1:     }
1: 
1:     private void createDurableSubscription() throws JMSException {
1:         final Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Topic topic = session.createTopic(TOPIC_NAME);
1:         connection.start();
1: 
1:         session.createDurableSubscriber(topic, SUBSCRIPTION_NAME, null, false);
1:         LOG.info("Created durable subscription.");
1: 
1:         connection.stop();
1:         connection.close();
1:     }
1: 
1:     private void receiveMessages(Class<? extends Destination> destType) throws JMSException {
1:         final Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Destination destination;
1:         if (destType.equals(Queue.class)) {
1:             destination = session.createQueue(QUEUE_NAME);
1:         } else {
1:             destination = session.createTopic(TOPIC_NAME);
1:         }
1: 
1:         final MessageConsumer consumer;
1:         if (destType.equals(Queue.class)) {
1:             consumer = session.createConsumer(destination);
1:         } else {
1:             consumer = session.createDurableSubscriber((Topic) destination, SUBSCRIPTION_NAME, null, false);
1:         }
1: 
1:         connection.start();
1: 
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             assertNotNull(consumer.receive(5000));
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private void sendBytesMessage(Class<? extends Destination> destType) throws JMSException {
1:         final Connection connection = connectionFactory.createConnection();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Destination destination;
1:         if (destType.equals(Queue.class)) {
1:             destination = session.createQueue(QUEUE_NAME);
1:         } else {
1:             destination = session.createTopic(TOPIC_NAME);
1:         }
1:         final MessageProducer producer = session.createProducer(destination);
1:         final BytesMessage bytesMessage = session.createBytesMessage();
1: 
1:         bytesMessage.writeBytes(new byte[1024 * 1024]);
1: 
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             producer.send(bytesMessage);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private void unsubscribeDurableSubscription() throws JMSException {
1:         final Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.unsubscribe(SUBSCRIPTION_NAME);
1:         LOG.info("Unsubscribed durable subscription.");
1: 
1:         connection.stop();
1:         connection.close();
1:     }
1: 
1:     private long getCurrentMemoryUsage(Class<? extends Destination> destType) throws Exception {
1:         final MemoryUsage usage;
1:         if (destType.equals(Queue.class)) {
1:             usage = brokerService.getDestination(ActiveMQDestination.createDestination(QUEUE_NAME, ActiveMQDestination.QUEUE_TYPE)).getMemoryUsage();
1:         } else {
1:             usage = brokerService.getDestination(ActiveMQDestination.createDestination(TOPIC_NAME, ActiveMQDestination.TOPIC_TYPE)).getMemoryUsage();
1:         }
1: 
1:         return usage.getUsage();
1:     }
1: 
1:     private void logBrokerMemoryUsage(Class<? extends Destination> destType) throws Exception {
1:         LOG.info("Memory usage: broker={}% destination={}", brokerService.getAdminView().getMemoryPercentUsage(), getCurrentMemoryUsage(destType));
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================