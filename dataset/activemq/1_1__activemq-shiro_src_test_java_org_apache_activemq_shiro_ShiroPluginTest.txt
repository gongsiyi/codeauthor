1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.BrokerPlugin;
1:f9451e5: import org.apache.activemq.broker.BrokerService;
1:f9451e5: import org.apache.activemq.broker.MutableBrokerFilter;
1:f9451e5: import org.apache.activemq.shiro.authc.AuthenticationFilter;
1:f9451e5: import org.apache.activemq.shiro.authc.DefaultAuthenticationPolicy;
1:f9451e5: import org.apache.activemq.shiro.authz.AuthorizationFilter;
1:f9451e5: import org.apache.activemq.shiro.env.IniEnvironment;
1:f9451e5: import org.apache.activemq.shiro.subject.DefaultConnectionSubjectFactory;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectFilter;
1:f9451e5: import org.apache.activemq.test.JmsResourceProvider;
1:f9451e5: import org.apache.activemq.test.TestSupport;
1:f9451e5: import org.apache.shiro.authc.AuthenticationException;
1:f9451e5: import org.apache.shiro.config.Ini;
1:f9451e5: import org.apache.shiro.env.DefaultEnvironment;
1:f9451e5: import org.apache.shiro.env.Environment;
1:f9451e5: import org.apache.shiro.mgt.DefaultSecurityManager;
1:f9451e5: import org.apache.shiro.realm.text.IniRealm;
1:f9451e5: import org.slf4j.Logger;
1:f9451e5: import org.slf4j.LoggerFactory;
1:f9451e5: 
1:f9451e5: import javax.jms.Connection;
1:f9451e5: import javax.jms.ConnectionFactory;
1:f9451e5: import javax.jms.Destination;
1:f9451e5: import javax.jms.JMSException;
1:f9451e5: import javax.jms.MessageConsumer;
1:f9451e5: import javax.jms.MessageProducer;
1:f9451e5: import javax.jms.Session;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ShiroPluginTest extends TestSupport {
1:f9451e5: 
1:f9451e5:     private static final Logger LOG = LoggerFactory.getLogger(ShiroPluginTest.class);
1:f9451e5: 
1:f9451e5:     protected BrokerService broker;
1:f9451e5:     protected SecureJmsResourceProvider resourceProvider;
1:f9451e5:     protected ConnectionFactory connectionFactory;
1:f9451e5:     protected Connection connection;
1:f9451e5:     protected Session session;
1:f9451e5:     protected Destination destination;
1:f9451e5:     protected MessageConsumer consumer;
1:f9451e5:     protected MessageProducer producer;
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     protected void setUp() throws Exception {
1:f9451e5:         resourceProvider = new SecureJmsResourceProvider();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     protected void tearDown() throws Exception {
1:f9451e5:         LOG.info("Shutting down broker...");
1:f9451e5: 
1:f9451e5:         if (session != null) {
1:f9451e5:             session.close();
1:f9451e5:         }
1:f9451e5:         session = null;
1:f9451e5: 
1:f9451e5:         if (connection != null) {
1:f9451e5:             connection.close();
1:f9451e5:         }
1:f9451e5:         connection = null;
1:f9451e5: 
1:f9451e5:         if (broker != null) {
1:f9451e5:             broker.stop();
1:f9451e5:             broker.waitUntilStopped();
1:f9451e5:         }
1:f9451e5:         broker = null;
1:f9451e5: 
1:f9451e5:         LOG.info("Broker shut down.");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void reconnect() throws Exception {
1:f9451e5:         reconnect(null, null);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void reconnect(String username, String password) throws Exception {
1:f9451e5:         if (connection != null) {
1:f9451e5:             // Close the prev connection.
1:f9451e5:             connection.close();
1:f9451e5:         }
1:f9451e5:         session = null;
1:f9451e5:         if (username == null && password == null) {
1:f9451e5:             connection = resourceProvider.createConnection(connectionFactory);
1:f9451e5:         } else {
1:f9451e5:             connection = resourceProvider.createConnection(connectionFactory, username, password);
1:f9451e5:         }
1:f9451e5:         reconnectSession();
1:f9451e5:         connection.start();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void reconnectSession() throws JMSException {
1:f9451e5:         if (session != null) {
1:f9451e5:             session.close();
1:f9451e5:         }
1:f9451e5:         session = resourceProvider.createSession(connection);
1:f9451e5:         destination = resourceProvider.createDestination(session, getSubject());
1:f9451e5:         producer = resourceProvider.createProducer(session, destination);
1:f9451e5:         consumer = resourceProvider.createConsumer(session, destination);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected ConnectionFactory newConnectionFactory() throws Exception {
1:f9451e5:         return resourceProvider.createConnectionFactory();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void start() throws Exception {
1:f9451e5:         startBroker();
1:f9451e5:         topic = resourceProvider.isTopic();
1:f9451e5:         connectionFactory = newConnectionFactory();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void startBroker() throws Exception {
1:f9451e5:         broker.start();
1:f9451e5:         broker.waitUntilStarted();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected BrokerService createBroker(BrokerPlugin... plugins) throws Exception {
1:f9451e5:         return createBroker(plugins, resourceProvider.getServerUri());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected BrokerService createBroker(BrokerPlugin[] plugins, String... connectorUris) throws Exception {
1:f9451e5:         BrokerService brokerService = new BrokerService();
1:f9451e5:         if (plugins != null && plugins.length > 0) {
1:f9451e5:             brokerService.setPlugins(plugins);
1:f9451e5:         }
1:f9451e5:         if (connectorUris != null) {
1:f9451e5:             for (String uri : connectorUris) {
1:f9451e5:                 brokerService.addConnector(uri);
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5:         return brokerService;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected ShiroPlugin createPlugin(String iniPath) {
1:f9451e5:         Ini ini = Ini.fromResourcePath(iniPath);
1:f9451e5:         Environment env = new IniEnvironment(ini);
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         plugin.setEnvironment(env);
1:f9451e5:         return plugin;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testNoEnvironmentOrSecurityManager() throws Exception {
1:f9451e5:         //should build IniEnvironment from shiro.ini in the classpath at the least:
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         Ini ini = Ini.fromResourcePath("classpath:shiro.ini");
1:f9451e5:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:f9451e5:         assertEquals(ini, realm.getIni());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetIni() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         Ini ini = Ini.fromResourcePath("classpath:minimal.shiro.ini");
1:f9451e5:         plugin.setIni(ini);
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:f9451e5:         assertSame(ini, realm.getIni());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetIniString() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         plugin.setIniConfig(
1:f9451e5:                 "[users]\n" +
1:f9451e5:                 "system = manager, system\n" +
1:f9451e5:                 "[roles]\n" +
1:f9451e5:                 "system = *");
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:f9451e5:         Ini ini = realm.getIni();
1:f9451e5:         assertEquals(1, ini.getSection("users").size());
1:f9451e5:         assertEquals("manager, system", ini.getSection("users").get("system"));
1:f9451e5:         assertEquals(1, ini.getSection("roles").size());
1:f9451e5:         assertEquals("*", ini.getSection("roles").get("system"));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetIniResourcePath() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5: 
1:f9451e5:         String path = "classpath:minimal.shiro.ini";
1:f9451e5: 
1:f9451e5:         plugin.setIniResourcePath(path);
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         Ini ini = Ini.fromResourcePath(path);
1:f9451e5: 
1:f9451e5:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:f9451e5:         assertEquals(ini, realm.getIni());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetSubjectFilter() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         SubjectFilter filter = new SubjectFilter();
1:f9451e5:         plugin.setSubjectFilter(filter);
1:f9451e5:         assertSame(filter, plugin.getSubjectFilter());
1:f9451e5:         //assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
1:f9451e5:         assertSame(plugin.getAuthenticationFilter(), filter.getNext());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetAuthenticationFilter() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         AuthenticationFilter filter = new AuthenticationFilter();
1:f9451e5:         plugin.setAuthenticationFilter(filter);
1:f9451e5:         assertSame(filter, plugin.getAuthenticationFilter());
1:f9451e5:         //assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
1:f9451e5:         assertSame(plugin.getSubjectFilter().getNext(), filter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetAuthorizationFilter() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         AuthorizationFilter filter = new AuthorizationFilter();
1:f9451e5:         plugin.setAuthorizationFilter(filter);
1:f9451e5:         assertSame(filter, plugin.getAuthorizationFilter());
1:f9451e5:         //assert that the AuthenticationFilter is always the next filter in the chain after the AuthenticationFilter:
1:f9451e5:         assertSame(plugin.getAuthenticationFilter().getNext(), filter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetEnvironment() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         Environment env = new DefaultEnvironment();
1:f9451e5:         plugin.setEnvironment(env);
1:f9451e5:         assertSame(env, plugin.getEnvironment());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetSecurityManager() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         org.apache.shiro.mgt.SecurityManager securityManager = new DefaultSecurityManager();
1:f9451e5:         plugin.setSecurityManager(securityManager);
1:f9451e5:         assertSame(securityManager, plugin.getSecurityManager());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSecurityManagerWhenInstalled() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         org.apache.shiro.mgt.SecurityManager securityManager = new DefaultSecurityManager();
1:f9451e5:         plugin.setSecurityManager(securityManager);
1:f9451e5: 
1:f9451e5:         assertNull(plugin.getEnvironment()); //we will auto-create one when only a sm is provided
1:f9451e5: 
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         assertSame(securityManager, plugin.getSecurityManager());
1:f9451e5:         assertNotNull(plugin.getEnvironment());
1:f9451e5:         assertSame(securityManager, plugin.getEnvironment().getSecurityManager());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testEnabledWhenNotInstalled() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         assertTrue(plugin.isEnabled()); //enabled by default
1:f9451e5: 
1:f9451e5:         plugin.setEnabled(false);
1:f9451e5:         assertFalse(plugin.isEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setEnabled(true);
1:f9451e5:         assertTrue(plugin.isEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testEnabledWhenInstalled() throws Exception {
1:f9451e5:         ShiroPlugin plugin = createPlugin("classpath:minimal.shiro.ini");
1:f9451e5:         this.broker = createBroker(plugin);
1:f9451e5:         start();
1:f9451e5:         assertTrue(plugin.isEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setEnabled(false);
1:f9451e5:         assertFalse(plugin.isEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setEnabled(true);
1:f9451e5:         assertTrue(plugin.isEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testAuthenticationEnabledWhenNotInstalled() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         assertTrue(plugin.isAuthenticationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthenticationEnabled(false);
1:f9451e5:         assertFalse(plugin.isAuthenticationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthenticationEnabled(true);
1:f9451e5:         assertTrue(plugin.isAuthenticationEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testAuthenticationEnabledWhenInstalled() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         plugin.setEnvironment(new DefaultEnvironment());
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         assertTrue(plugin.isAuthenticationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthenticationEnabled(false);
1:f9451e5:         assertFalse(plugin.isAuthenticationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthenticationEnabled(true);
1:f9451e5:         assertTrue(plugin.isAuthenticationEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testSetAuthenticationPolicy() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         DefaultAuthenticationPolicy policy = new DefaultAuthenticationPolicy();
1:f9451e5:         plugin.setAuthenticationPolicy(policy);
1:f9451e5:         assertSame(policy, plugin.getAuthenticationPolicy());
1:f9451e5:         assertSame(policy, plugin.getAuthenticationFilter().getAuthenticationPolicy());
1:f9451e5:         assertSame(policy, ((DefaultConnectionSubjectFactory) plugin.getSubjectFilter().getConnectionSubjectFactory()).getAuthenticationPolicy());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testAuthorizationEnabledWhenNotInstalled() {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         assertTrue(plugin.isAuthorizationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthorizationEnabled(false);
1:f9451e5:         assertFalse(plugin.isAuthorizationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthorizationEnabled(true);
1:f9451e5:         assertTrue(plugin.isAuthorizationEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testAuthorizationEnabledWhenInstalled() throws Exception {
1:f9451e5:         ShiroPlugin plugin = new ShiroPlugin();
1:f9451e5:         plugin.setEnvironment(new DefaultEnvironment());
1:f9451e5:         plugin.installPlugin(new MutableBrokerFilter(null));
1:f9451e5: 
1:f9451e5:         assertTrue(plugin.isAuthorizationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthorizationEnabled(false);
1:f9451e5:         assertFalse(plugin.isAuthorizationEnabled());
1:f9451e5: 
1:f9451e5:         plugin.setAuthorizationEnabled(true);
1:f9451e5:         assertTrue(plugin.isAuthorizationEnabled());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: 
1:f9451e5:     public void testSimple() throws Exception {
1:f9451e5:         ShiroPlugin plugin = createPlugin("classpath:minimal.shiro.ini");
1:f9451e5:         this.broker = createBroker(plugin);
1:f9451e5:         start();
1:f9451e5:         reconnect();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testDisabled() throws Exception {
1:f9451e5:         ShiroPlugin plugin = createPlugin("classpath:nosystem.shiro.ini");
1:f9451e5:         plugin.setEnabled(false);
1:f9451e5:         this.broker = createBroker(plugin);
1:f9451e5:         start();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void testRuntimeDisableEnableChanges() throws Exception {
1:f9451e5:         ShiroPlugin plugin = createPlugin("classpath:nosystem.shiro.ini");
1:f9451e5:         ((DefaultAuthenticationPolicy) plugin.getAuthenticationPolicy()).setVmConnectionAuthenticationRequired(true);
1:f9451e5:         plugin.setEnabled(false);
1:f9451e5:         this.broker = createBroker(plugin);
1:f9451e5:         start();
1:f9451e5: 
1:f9451e5:         //connection has no credentials.  When disabled, this should succeed:
1:f9451e5:         reconnect();
1:f9451e5: 
1:f9451e5:         //now enable the plugin and assert that credentials are required:
1:f9451e5:         plugin.setEnabled(true);
1:f9451e5: 
1:f9451e5:         try {
1:f9451e5:             reconnect();
1:f9451e5:             fail("Connections without passwords in this configuration should fail.");
1:f9451e5:         } catch (JMSException expected) {
1:f9451e5:             assertTrue(expected.getCause() instanceof AuthenticationException);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         //this should work now that we're authenticating:
1:f9451e5:         reconnect("foo", "bar");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     static class SecureJmsResourceProvider extends JmsResourceProvider {
1:f9451e5: 
1:f9451e5:         /**
1:f9451e5:          * Creates a connection, authenticating with the specified username and password.
1:f9451e5:          *
1:f9451e5:          * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)
1:f9451e5:          */
1:f9451e5:         public Connection createConnection(ConnectionFactory cf, String username, String password) throws JMSException {
1:f9451e5:             Connection connection = cf.createConnection(username, password);
1:f9451e5:             if (getClientID() != null) {
1:f9451e5:                 connection.setClientID(getClientID());
1:f9451e5:             }
1:f9451e5:             return connection;
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.MutableBrokerFilter;
1: import org.apache.activemq.shiro.authc.AuthenticationFilter;
1: import org.apache.activemq.shiro.authc.DefaultAuthenticationPolicy;
1: import org.apache.activemq.shiro.authz.AuthorizationFilter;
1: import org.apache.activemq.shiro.env.IniEnvironment;
1: import org.apache.activemq.shiro.subject.DefaultConnectionSubjectFactory;
1: import org.apache.activemq.shiro.subject.SubjectFilter;
1: import org.apache.activemq.test.JmsResourceProvider;
1: import org.apache.activemq.test.TestSupport;
1: import org.apache.shiro.authc.AuthenticationException;
1: import org.apache.shiro.config.Ini;
1: import org.apache.shiro.env.DefaultEnvironment;
1: import org.apache.shiro.env.Environment;
1: import org.apache.shiro.mgt.DefaultSecurityManager;
1: import org.apache.shiro.realm.text.IniRealm;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class ShiroPluginTest extends TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ShiroPluginTest.class);
1: 
1:     protected BrokerService broker;
1:     protected SecureJmsResourceProvider resourceProvider;
1:     protected ConnectionFactory connectionFactory;
1:     protected Connection connection;
1:     protected Session session;
1:     protected Destination destination;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         resourceProvider = new SecureJmsResourceProvider();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         LOG.info("Shutting down broker...");
1: 
1:         if (session != null) {
1:             session.close();
1:         }
1:         session = null;
1: 
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         connection = null;
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         broker = null;
1: 
1:         LOG.info("Broker shut down.");
1:     }
1: 
1:     protected void reconnect() throws Exception {
1:         reconnect(null, null);
1:     }
1: 
1:     protected void reconnect(String username, String password) throws Exception {
1:         if (connection != null) {
1:             // Close the prev connection.
1:             connection.close();
1:         }
1:         session = null;
1:         if (username == null && password == null) {
1:             connection = resourceProvider.createConnection(connectionFactory);
1:         } else {
1:             connection = resourceProvider.createConnection(connectionFactory, username, password);
1:         }
1:         reconnectSession();
1:         connection.start();
1:     }
1: 
1:     protected void reconnectSession() throws JMSException {
1:         if (session != null) {
1:             session.close();
1:         }
1:         session = resourceProvider.createSession(connection);
1:         destination = resourceProvider.createDestination(session, getSubject());
1:         producer = resourceProvider.createProducer(session, destination);
1:         consumer = resourceProvider.createConsumer(session, destination);
1:     }
1: 
1:     protected ConnectionFactory newConnectionFactory() throws Exception {
1:         return resourceProvider.createConnectionFactory();
1:     }
1: 
1:     protected void start() throws Exception {
1:         startBroker();
1:         topic = resourceProvider.isTopic();
1:         connectionFactory = newConnectionFactory();
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected BrokerService createBroker(BrokerPlugin... plugins) throws Exception {
1:         return createBroker(plugins, resourceProvider.getServerUri());
1:     }
1: 
1:     protected BrokerService createBroker(BrokerPlugin[] plugins, String... connectorUris) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         if (plugins != null && plugins.length > 0) {
1:             brokerService.setPlugins(plugins);
1:         }
1:         if (connectorUris != null) {
1:             for (String uri : connectorUris) {
1:                 brokerService.addConnector(uri);
1:             }
1:         }
1:         return brokerService;
1:     }
1: 
1:     protected ShiroPlugin createPlugin(String iniPath) {
1:         Ini ini = Ini.fromResourcePath(iniPath);
1:         Environment env = new IniEnvironment(ini);
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         plugin.setEnvironment(env);
1:         return plugin;
1:     }
1: 
1:     public void testNoEnvironmentOrSecurityManager() throws Exception {
1:         //should build IniEnvironment from shiro.ini in the classpath at the least:
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         Ini ini = Ini.fromResourcePath("classpath:shiro.ini");
1:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:         assertEquals(ini, realm.getIni());
1:     }
1: 
1:     public void testSetIni() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         Ini ini = Ini.fromResourcePath("classpath:minimal.shiro.ini");
1:         plugin.setIni(ini);
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:         assertSame(ini, realm.getIni());
1:     }
1: 
1:     public void testSetIniString() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         plugin.setIniConfig(
1:                 "[users]\n" +
1:                 "system = manager, system\n" +
1:                 "[roles]\n" +
1:                 "system = *");
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:         Ini ini = realm.getIni();
1:         assertEquals(1, ini.getSection("users").size());
1:         assertEquals("manager, system", ini.getSection("users").get("system"));
1:         assertEquals(1, ini.getSection("roles").size());
1:         assertEquals("*", ini.getSection("roles").get("system"));
1:     }
1: 
1:     public void testSetIniResourcePath() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1: 
1:         String path = "classpath:minimal.shiro.ini";
1: 
1:         plugin.setIniResourcePath(path);
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         Ini ini = Ini.fromResourcePath(path);
1: 
1:         IniRealm realm = (IniRealm) ((DefaultSecurityManager) plugin.getEnvironment().getSecurityManager()).getRealms().iterator().next();
1:         assertEquals(ini, realm.getIni());
1:     }
1: 
1:     public void testSetSubjectFilter() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         SubjectFilter filter = new SubjectFilter();
1:         plugin.setSubjectFilter(filter);
1:         assertSame(filter, plugin.getSubjectFilter());
1:         //assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
1:         assertSame(plugin.getAuthenticationFilter(), filter.getNext());
1:     }
1: 
1:     public void testSetAuthenticationFilter() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         AuthenticationFilter filter = new AuthenticationFilter();
1:         plugin.setAuthenticationFilter(filter);
1:         assertSame(filter, plugin.getAuthenticationFilter());
1:         //assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
1:         assertSame(plugin.getSubjectFilter().getNext(), filter);
1:     }
1: 
1:     public void testSetAuthorizationFilter() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         AuthorizationFilter filter = new AuthorizationFilter();
1:         plugin.setAuthorizationFilter(filter);
1:         assertSame(filter, plugin.getAuthorizationFilter());
1:         //assert that the AuthenticationFilter is always the next filter in the chain after the AuthenticationFilter:
1:         assertSame(plugin.getAuthenticationFilter().getNext(), filter);
1:     }
1: 
1:     public void testSetEnvironment() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         Environment env = new DefaultEnvironment();
1:         plugin.setEnvironment(env);
1:         assertSame(env, plugin.getEnvironment());
1:     }
1: 
1:     public void testSetSecurityManager() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         org.apache.shiro.mgt.SecurityManager securityManager = new DefaultSecurityManager();
1:         plugin.setSecurityManager(securityManager);
1:         assertSame(securityManager, plugin.getSecurityManager());
1:     }
1: 
1:     public void testSecurityManagerWhenInstalled() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         org.apache.shiro.mgt.SecurityManager securityManager = new DefaultSecurityManager();
1:         plugin.setSecurityManager(securityManager);
1: 
1:         assertNull(plugin.getEnvironment()); //we will auto-create one when only a sm is provided
1: 
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         assertSame(securityManager, plugin.getSecurityManager());
1:         assertNotNull(plugin.getEnvironment());
1:         assertSame(securityManager, plugin.getEnvironment().getSecurityManager());
1:     }
1: 
1:     public void testEnabledWhenNotInstalled() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         assertTrue(plugin.isEnabled()); //enabled by default
1: 
1:         plugin.setEnabled(false);
1:         assertFalse(plugin.isEnabled());
1: 
1:         plugin.setEnabled(true);
1:         assertTrue(plugin.isEnabled());
1:     }
1: 
1:     public void testEnabledWhenInstalled() throws Exception {
1:         ShiroPlugin plugin = createPlugin("classpath:minimal.shiro.ini");
1:         this.broker = createBroker(plugin);
1:         start();
1:         assertTrue(plugin.isEnabled());
1: 
1:         plugin.setEnabled(false);
1:         assertFalse(plugin.isEnabled());
1: 
1:         plugin.setEnabled(true);
1:         assertTrue(plugin.isEnabled());
1:     }
1: 
1:     public void testAuthenticationEnabledWhenNotInstalled() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         assertTrue(plugin.isAuthenticationEnabled());
1: 
1:         plugin.setAuthenticationEnabled(false);
1:         assertFalse(plugin.isAuthenticationEnabled());
1: 
1:         plugin.setAuthenticationEnabled(true);
1:         assertTrue(plugin.isAuthenticationEnabled());
1:     }
1: 
1:     public void testAuthenticationEnabledWhenInstalled() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         plugin.setEnvironment(new DefaultEnvironment());
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         assertTrue(plugin.isAuthenticationEnabled());
1: 
1:         plugin.setAuthenticationEnabled(false);
1:         assertFalse(plugin.isAuthenticationEnabled());
1: 
1:         plugin.setAuthenticationEnabled(true);
1:         assertTrue(plugin.isAuthenticationEnabled());
1:     }
1: 
1:     public void testSetAuthenticationPolicy() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         DefaultAuthenticationPolicy policy = new DefaultAuthenticationPolicy();
1:         plugin.setAuthenticationPolicy(policy);
1:         assertSame(policy, plugin.getAuthenticationPolicy());
1:         assertSame(policy, plugin.getAuthenticationFilter().getAuthenticationPolicy());
1:         assertSame(policy, ((DefaultConnectionSubjectFactory) plugin.getSubjectFilter().getConnectionSubjectFactory()).getAuthenticationPolicy());
1:     }
1: 
1:     public void testAuthorizationEnabledWhenNotInstalled() {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         assertTrue(plugin.isAuthorizationEnabled());
1: 
1:         plugin.setAuthorizationEnabled(false);
1:         assertFalse(plugin.isAuthorizationEnabled());
1: 
1:         plugin.setAuthorizationEnabled(true);
1:         assertTrue(plugin.isAuthorizationEnabled());
1:     }
1: 
1:     public void testAuthorizationEnabledWhenInstalled() throws Exception {
1:         ShiroPlugin plugin = new ShiroPlugin();
1:         plugin.setEnvironment(new DefaultEnvironment());
1:         plugin.installPlugin(new MutableBrokerFilter(null));
1: 
1:         assertTrue(plugin.isAuthorizationEnabled());
1: 
1:         plugin.setAuthorizationEnabled(false);
1:         assertFalse(plugin.isAuthorizationEnabled());
1: 
1:         plugin.setAuthorizationEnabled(true);
1:         assertTrue(plugin.isAuthorizationEnabled());
1:     }
1: 
1: 
1:     public void testSimple() throws Exception {
1:         ShiroPlugin plugin = createPlugin("classpath:minimal.shiro.ini");
1:         this.broker = createBroker(plugin);
1:         start();
1:         reconnect();
1:     }
1: 
1:     public void testDisabled() throws Exception {
1:         ShiroPlugin plugin = createPlugin("classpath:nosystem.shiro.ini");
1:         plugin.setEnabled(false);
1:         this.broker = createBroker(plugin);
1:         start();
1:     }
1: 
1:     public void testRuntimeDisableEnableChanges() throws Exception {
1:         ShiroPlugin plugin = createPlugin("classpath:nosystem.shiro.ini");
1:         ((DefaultAuthenticationPolicy) plugin.getAuthenticationPolicy()).setVmConnectionAuthenticationRequired(true);
1:         plugin.setEnabled(false);
1:         this.broker = createBroker(plugin);
1:         start();
1: 
1:         //connection has no credentials.  When disabled, this should succeed:
1:         reconnect();
1: 
1:         //now enable the plugin and assert that credentials are required:
1:         plugin.setEnabled(true);
1: 
1:         try {
1:             reconnect();
1:             fail("Connections without passwords in this configuration should fail.");
1:         } catch (JMSException expected) {
1:             assertTrue(expected.getCause() instanceof AuthenticationException);
1:         }
1: 
1:         //this should work now that we're authenticating:
1:         reconnect("foo", "bar");
1:     }
1: 
1:     static class SecureJmsResourceProvider extends JmsResourceProvider {
1: 
1:         /**
1:          * Creates a connection, authenticating with the specified username and password.
1:          *
1:          * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)
1:          */
1:         public Connection createConnection(ConnectionFactory cf, String username, String password) throws JMSException {
1:             Connection connection = cf.createConnection(username, password);
1:             if (getClientID() != null) {
1:                 connection.setClientID(getClientID());
1:             }
1:             return connection;
1:         }
1:     }
1: }
============================================================================