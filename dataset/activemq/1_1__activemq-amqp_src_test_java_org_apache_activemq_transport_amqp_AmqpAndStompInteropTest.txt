1:5e5b673: /*
1:5e5b673:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5e5b673:  * contributor license agreements.  See the NOTICE file distributed with
1:5e5b673:  * this work for additional information regarding copyright ownership.
1:5e5b673:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5e5b673:  * (the "License"); you may not use this file except in compliance with
1:5e5b673:  * the License.  You may obtain a copy of the License at
1:5e5b673:  *
1:5e5b673:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5e5b673:  *
1:5e5b673:  * Unless required by applicable law or agreed to in writing, software
1:5e5b673:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5e5b673:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5e5b673:  * See the License for the specific language governing permissions and
1:5e5b673:  * limitations under the License.
1:5e5b673:  */
1:5e5b673: package org.apache.activemq.transport.amqp;
1:5e5b673: 
1:5e5b673: import static org.junit.Assert.assertNotNull;
1:5e5b673: import static org.junit.Assert.assertTrue;
1:5e5b673: 
1:5e5b673: import javax.jms.Connection;
1:5e5b673: import javax.jms.ExceptionListener;
1:5e5b673: import javax.jms.JMSException;
1:5e5b673: import javax.jms.Message;
1:5e5b673: import javax.jms.MessageConsumer;
1:5e5b673: import javax.jms.MessageProducer;
1:5e5b673: import javax.jms.Queue;
1:5e5b673: import javax.jms.Session;
1:5e5b673: import javax.jms.TextMessage;
1:5e5b673: 
1:5e5b673: import org.apache.activemq.broker.BrokerService;
1:5e5b673: import org.apache.activemq.broker.TransportConnector;
1:5e5b673: import org.apache.qpid.jms.JmsConnectionFactory;
1:5e5b673: import org.fusesource.stomp.jms.StompJmsConnectionFactory;
1:5e5b673: import org.junit.After;
1:5e5b673: import org.junit.Before;
1:5e5b673: import org.junit.Ignore;
1:5e5b673: import org.junit.Rule;
1:5e5b673: import org.junit.Test;
1:5e5b673: import org.junit.rules.TestName;
1:5e5b673: import org.slf4j.Logger;
1:5e5b673: import org.slf4j.LoggerFactory;
1:5e5b673: 
1:5e5b673: @Ignore
1:5e5b673: public class AmqpAndStompInteropTest {
1:5e5b673: 
1:5e5b673:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAndStompInteropTest.class);
1:5e5b673: 
1:5e5b673:     @Rule
1:5e5b673:     public TestName name = new TestName();
1:5e5b673: 
1:5e5b673:     protected BrokerService broker;
1:5e5b673:     private TransportConnector amqpConnector;
1:5e5b673:     private TransportConnector stompConnector;
1:5e5b673: 
1:5e5b673:     @Before
1:5e5b673:     public void setUp() throws Exception {
1:5e5b673:         broker = createBroker();
1:5e5b673:         broker.start();
1:5e5b673:         broker.waitUntilStarted();
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     @After
1:5e5b673:     public void tearDown() throws Exception {
1:5e5b673:         if (broker != null) {
1:5e5b673:             broker.stop();
1:5e5b673:             broker.waitUntilStopped();
1:5e5b673:             broker = null;
1:5e5b673:         }
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     protected BrokerService createBroker() throws Exception {
1:5e5b673:         BrokerService broker = new BrokerService();
1:5e5b673:         broker.setPersistent(false);
1:5e5b673:         broker.setUseJmx(false);
1:5e5b673:         broker.setAdvisorySupport(false);
1:5e5b673:         broker.setSchedulerSupport(false);
1:5e5b673: 
1:5e5b673:         amqpConnector = broker.addConnector("amqp://0.0.0.0:0");
1:5e5b673:         stompConnector = broker.addConnector("stomp://0.0.0.0:0");
1:5e5b673: 
1:5e5b673:         return broker;
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     @Test(timeout = 30000)
1:5e5b673:     public void testSendFromAMQPToSTOMP() throws Exception {
1:5e5b673:         sendMessageToQueueUsingAmqp();
1:5e5b673:         readMessageFromQueueUsingStomp();
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     @Test(timeout = 30000)
1:5e5b673:     public void testSendFromSTOMPToAMQP() throws Exception {
1:5e5b673:         sendMessageToQueueUsingStomp();
1:5e5b673:         readMessageFromQueueUsingAmqp();
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     @Test(timeout = 30000)
1:5e5b673:     public void testSendFromSTOMPToSTOMP() throws Exception {
1:5e5b673:         sendMessageToQueueUsingStomp();
1:5e5b673:         readMessageFromQueueUsingStomp();
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     @Test(timeout = 30000)
1:5e5b673:     public void testSendFromAMQPToAMQP() throws Exception {
1:5e5b673:         sendMessageToQueueUsingAmqp();
1:5e5b673:         readMessageFromQueueUsingAmqp();
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private String getQueueName() {
1:5e5b673:         return name.getMethodName() + "-Queue";
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private void sendMessageToQueueUsingAmqp() throws Exception {
1:5e5b673:         Connection connection = createAmqpConnection();
1:5e5b673:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5e5b673:         Queue queue = session.createQueue(getQueueName());
1:5e5b673:         MessageProducer producer = session.createProducer(queue);
1:5e5b673: 
1:5e5b673:         try {
1:5e5b673:             TextMessage message = session.createTextMessage("test-message-amqp-source");
1:5e5b673:             producer.send(message);
1:5e5b673: 
1:5e5b673:             LOG.info("Send AMQP message with Message ID -> {}", message.getJMSMessageID());
1:5e5b673:         } finally {
1:5e5b673:             connection.close();
1:5e5b673:         }
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private void sendMessageToQueueUsingStomp() throws Exception {
1:5e5b673:         Connection connection = createStompConnection();
1:5e5b673:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5e5b673:         Queue queue = session.createQueue(getQueueName());
1:5e5b673:         MessageProducer producer = session.createProducer(queue);
1:5e5b673: 
1:5e5b673:         try {
1:5e5b673:             TextMessage message = session.createTextMessage("test-message-stomp-source");
1:5e5b673:             producer.send(message);
1:5e5b673: 
1:5e5b673:             LOG.info("Send STOMP message with Message ID -> {}", message.getJMSMessageID());
1:5e5b673:         } finally {
1:5e5b673:             connection.close();
1:5e5b673:         }
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private void readMessageFromQueueUsingAmqp() throws Exception {
1:5e5b673:         Connection connection = createAmqpConnection();
1:5e5b673:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5e5b673:         Queue queue = session.createQueue(getQueueName());
1:5e5b673:         MessageConsumer consumer = session.createConsumer(queue);
1:5e5b673: 
1:5e5b673:         connection.start();
1:5e5b673: 
1:5e5b673:         Message received = consumer.receive(2000);
1:5e5b673:         assertNotNull(received);
1:5e5b673: 
1:5e5b673:         LOG.info("Read from AMQP -> message ID = {}", received.getJMSMessageID());
1:5e5b673: 
1:5e5b673:         assertTrue(received instanceof TextMessage);
1:5e5b673: 
1:5e5b673:         TextMessage textMessage = (TextMessage) received;
1:5e5b673:         assertNotNull(textMessage.getText());
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private void readMessageFromQueueUsingStomp() throws Exception {
1:5e5b673:         Connection connection = createStompConnection();
1:5e5b673:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5e5b673:         Queue queue = session.createQueue(getQueueName());
1:5e5b673:         MessageConsumer consumer = session.createConsumer(queue);
1:5e5b673: 
1:5e5b673:         connection.start();
1:5e5b673: 
1:5e5b673:         Message received = consumer.receive(2000);
1:5e5b673:         assertNotNull(received);
1:5e5b673: 
1:5e5b673:         LOG.info("Read from STOMP -> message ID = {}", received.getJMSMessageID());
1:5e5b673: 
1:5e5b673:         assertTrue(received instanceof TextMessage);
1:5e5b673: 
1:5e5b673:         TextMessage textMessage = (TextMessage) received;
1:5e5b673:         assertNotNull(textMessage.getText());
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private Connection createStompConnection() throws Exception {
1:5e5b673: 
1:5e5b673:         String stompURI = "tcp://localhost:" + stompConnector.getConnectUri().getPort();
1:5e5b673: 
1:5e5b673:         final StompJmsConnectionFactory factory = new StompJmsConnectionFactory();
1:5e5b673: 
1:5e5b673:         factory.setBrokerURI(stompURI);
1:5e5b673:         factory.setUsername("admin");
1:5e5b673:         factory.setPassword("password");
1:5e5b673: 
1:5e5b673:         final Connection connection = factory.createConnection();
1:5e5b673:         connection.setExceptionListener(new ExceptionListener() {
1:5e5b673:             @Override
1:5e5b673:             public void onException(JMSException exception) {
1:5e5b673:                 exception.printStackTrace();
1:5e5b673:             }
1:5e5b673:         });
1:5e5b673: 
1:5e5b673:         connection.start();
1:5e5b673:         return connection;
1:5e5b673:     }
1:5e5b673: 
1:5e5b673:     private Connection createAmqpConnection() throws Exception {
1:5e5b673: 
1:5e5b673:         String amqpURI = "amqp://localhost:" + amqpConnector.getConnectUri().getPort();
1:5e5b673: 
1:5e5b673:         final JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1:5e5b673: 
1:5e5b673:         factory.setUsername("admin");
1:5e5b673:         factory.setPassword("password");
1:5e5b673: 
1:5e5b673:         final Connection connection = factory.createConnection();
1:5e5b673:         connection.setExceptionListener(new ExceptionListener() {
1:5e5b673:             @Override
1:5e5b673:             public void onException(JMSException exception) {
1:5e5b673:                 exception.printStackTrace();
1:5e5b673:             }
1:5e5b673:         });
1:5e5b673: 
1:5e5b673:         connection.start();
1:5e5b673:         return connection;
1:5e5b673:     }
1:5e5b673: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e5b673
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.fusesource.stomp.jms.StompJmsConnectionFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @Ignore
1: public class AmqpAndStompInteropTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAndStompInteropTest.class);
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     protected BrokerService broker;
1:     private TransportConnector amqpConnector;
1:     private TransportConnector stompConnector;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
1: 
1:         amqpConnector = broker.addConnector("amqp://0.0.0.0:0");
1:         stompConnector = broker.addConnector("stomp://0.0.0.0:0");
1: 
1:         return broker;
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSendFromAMQPToSTOMP() throws Exception {
1:         sendMessageToQueueUsingAmqp();
1:         readMessageFromQueueUsingStomp();
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSendFromSTOMPToAMQP() throws Exception {
1:         sendMessageToQueueUsingStomp();
1:         readMessageFromQueueUsingAmqp();
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSendFromSTOMPToSTOMP() throws Exception {
1:         sendMessageToQueueUsingStomp();
1:         readMessageFromQueueUsingStomp();
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSendFromAMQPToAMQP() throws Exception {
1:         sendMessageToQueueUsingAmqp();
1:         readMessageFromQueueUsingAmqp();
1:     }
1: 
1:     private String getQueueName() {
1:         return name.getMethodName() + "-Queue";
1:     }
1: 
1:     private void sendMessageToQueueUsingAmqp() throws Exception {
1:         Connection connection = createAmqpConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         try {
1:             TextMessage message = session.createTextMessage("test-message-amqp-source");
1:             producer.send(message);
1: 
1:             LOG.info("Send AMQP message with Message ID -> {}", message.getJMSMessageID());
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private void sendMessageToQueueUsingStomp() throws Exception {
1:         Connection connection = createStompConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         try {
1:             TextMessage message = session.createTextMessage("test-message-stomp-source");
1:             producer.send(message);
1: 
1:             LOG.info("Send STOMP message with Message ID -> {}", message.getJMSMessageID());
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private void readMessageFromQueueUsingAmqp() throws Exception {
1:         Connection connection = createAmqpConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         connection.start();
1: 
1:         Message received = consumer.receive(2000);
1:         assertNotNull(received);
1: 
1:         LOG.info("Read from AMQP -> message ID = {}", received.getJMSMessageID());
1: 
1:         assertTrue(received instanceof TextMessage);
1: 
1:         TextMessage textMessage = (TextMessage) received;
1:         assertNotNull(textMessage.getText());
1:     }
1: 
1:     private void readMessageFromQueueUsingStomp() throws Exception {
1:         Connection connection = createStompConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         connection.start();
1: 
1:         Message received = consumer.receive(2000);
1:         assertNotNull(received);
1: 
1:         LOG.info("Read from STOMP -> message ID = {}", received.getJMSMessageID());
1: 
1:         assertTrue(received instanceof TextMessage);
1: 
1:         TextMessage textMessage = (TextMessage) received;
1:         assertNotNull(textMessage.getText());
1:     }
1: 
1:     private Connection createStompConnection() throws Exception {
1: 
1:         String stompURI = "tcp://localhost:" + stompConnector.getConnectUri().getPort();
1: 
1:         final StompJmsConnectionFactory factory = new StompJmsConnectionFactory();
1: 
1:         factory.setBrokerURI(stompURI);
1:         factory.setUsername("admin");
1:         factory.setPassword("password");
1: 
1:         final Connection connection = factory.createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1: 
1:         connection.start();
1:         return connection;
1:     }
1: 
1:     private Connection createAmqpConnection() throws Exception {
1: 
1:         String amqpURI = "amqp://localhost:" + amqpConnector.getConnectUri().getPort();
1: 
1:         final JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1: 
1:         factory.setUsername("admin");
1:         factory.setPassword("password");
1: 
1:         final Connection connection = factory.createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1: 
1:         connection.start();
1:         return connection;
1:     }
1: }
============================================================================