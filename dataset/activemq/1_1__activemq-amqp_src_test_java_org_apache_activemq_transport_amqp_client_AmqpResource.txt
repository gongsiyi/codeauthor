1:d9e22a9: /*
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
11:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
9:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client;
10:72839b7: 
1:72839b7: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1:72839b7: 
10:72839b7: /**
1:72839b7:  * AmqpResource specification.
1:72839b7:  *
1:72839b7:  * All AMQP types should implement this interface to allow for control of state
1:72839b7:  * and configuration details.
1:72839b7:  */
1:d9e22a9: public interface AmqpResource extends AmqpEventSink {
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Perform all the work needed to open this resource and store the request
1:72839b7:      * until such time as the remote peer indicates the resource has become active.
1:72839b7:      *
1:72839b7:      * @param request
1:72839b7:      *        The initiating request that triggered this open call.
1:72839b7:      */
1:72839b7:     void open(AsyncResult request);
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return if the resource has moved to the opened state on the remote.
1:72839b7:      */
1:72839b7:     boolean isOpen();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Called to indicate that this resource is now remotely opened.  Once opened a
1:72839b7:      * resource can start accepting incoming requests.
1:72839b7:      */
1:72839b7:     void opened();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Perform all work needed to close this resource and store the request
1:72839b7:      * until such time as the remote peer indicates the resource has been closed.
1:72839b7:      *
1:72839b7:      * @param request
1:72839b7:      *        The initiating request that triggered this close call.
1:72839b7:      */
1:72839b7:     void close(AsyncResult request);
1:72839b7: 
1:72839b7:     /**
1:934ad44:      * Perform all work needed to detach this resource and store the request
1:934ad44:      * until such time as the remote peer indicates the resource has been detached.
1:934ad44:      *
1:934ad44:      * @param request
1:934ad44:      *        The initiating request that triggered this detach call.
1:934ad44:      */
1:934ad44:     void detach(AsyncResult request);
1:934ad44: 
1:934ad44:     /**
1:72839b7:      * @return if the resource has moved to the closed state on the remote.
1:72839b7:      */
1:72839b7:     boolean isClosed();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Called to indicate that this resource is now remotely closed.  Once closed a
1:72839b7:      * resource can not accept any incoming requests.
1:72839b7:      */
1:72839b7:     void closed();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the failed state for this Resource and triggers a failure signal for
1:72839b7:      * any pending ProduverRequest.
1:72839b7:      */
1:72839b7:     void failed();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Called to indicate that the remote end has become closed but the resource
1:72839b7:      * was not awaiting a close.  This could happen during an open request where
1:72839b7:      * the remote does not set an error condition or during normal operation.
1:72839b7:      *
6:72839b7:      * @param connection
6:72839b7:      *        The connection that owns this resource.
1:72839b7:      */
1:72839b7:     void remotelyClosed(AmqpConnection connection);
1:72839b7: 
1:72839b7:     /**
1:8448cf1:      * Called to indicate that the local end has become closed but the resource
1:8448cf1:      * was not awaiting a close.  This could happen during an open request where
1:8448cf1:      * the remote does not set an error condition or during normal operation.
1:8448cf1:      *
1:8448cf1:      * @param connection
1:8448cf1:      *        The connection that owns this resource.
1:8448cf1:      * @param error
1:8448cf1:      *        The error that triggered the local close of this resource.
1:8448cf1:      */
1:8448cf1:     void locallyClosed(AmqpConnection connection, Exception error);
1:8448cf1: 
1:8448cf1:     /**
1:72839b7:      * Sets the failed state for this Resource and triggers a failure signal for
1:72839b7:      * any pending ProduverRequest.
1:72839b7:      *
1:72839b7:      * @param cause
1:72839b7:      *        The Exception that triggered the failure.
1:72839b7:      */
1:72839b7:     void failed(Exception cause);
1:72839b7: 
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1:      * Called to indicate that the local end has become closed but the resource
1:      * was not awaiting a close.  This could happen during an open request where
1:      * the remote does not set an error condition or during normal operation.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      * @param error
1:      *        The error that triggered the local close of this resource.
1:      */
1:     void locallyClosed(AmqpConnection connection, Exception error);
1: 
1:     /**
commit:d9e22a9
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public interface AmqpResource extends AmqpEventSink {
/////////////////////////////////////////////////////////////////////////
commit:934ad44
/////////////////////////////////////////////////////////////////////////
1:      * Perform all work needed to detach this resource and store the request
1:      * until such time as the remote peer indicates the resource has been detached.
1:      *
1:      * @param request
1:      *        The initiating request that triggered this detach call.
1:      */
1:     void detach(AsyncResult request);
1: 
1:     /**
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1: 
1: /**
1:  * AmqpResource specification.
1:  *
1:  * All AMQP types should implement this interface to allow for control of state
1:  * and configuration details.
1:  */
0: public interface AmqpResource {
1: 
1:     /**
1:      * Perform all the work needed to open this resource and store the request
1:      * until such time as the remote peer indicates the resource has become active.
1:      *
1:      * @param request
1:      *        The initiating request that triggered this open call.
1:      */
1:     void open(AsyncResult request);
1: 
1:     /**
1:      * @return if the resource has moved to the opened state on the remote.
1:      */
1:     boolean isOpen();
1: 
1:     /**
1:      * Called to indicate that this resource is now remotely opened.  Once opened a
1:      * resource can start accepting incoming requests.
1:      */
1:     void opened();
1: 
1:     /**
1:      * Perform all work needed to close this resource and store the request
1:      * until such time as the remote peer indicates the resource has been closed.
1:      *
1:      * @param request
1:      *        The initiating request that triggered this close call.
1:      */
1:     void close(AsyncResult request);
1: 
1:     /**
1:      * @return if the resource has moved to the closed state on the remote.
1:      */
1:     boolean isClosed();
1: 
1:     /**
1:      * Called to indicate that this resource is now remotely closed.  Once closed a
1:      * resource can not accept any incoming requests.
1:      */
1:     void closed();
1: 
1:     /**
1:      * Sets the failed state for this Resource and triggers a failure signal for
1:      * any pending ProduverRequest.
1:      */
1:     void failed();
1: 
1:     /**
1:      * Called to indicate that the remote end has become closed but the resource
1:      * was not awaiting a close.  This could happen during an open request where
1:      * the remote does not set an error condition or during normal operation.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      */
1:     void remotelyClosed(AmqpConnection connection);
1: 
1:     /**
1:      * Sets the failed state for this Resource and triggers a failure signal for
1:      * any pending ProduverRequest.
1:      *
1:      * @param cause
1:      *        The Exception that triggered the failure.
1:      */
1:     void failed(Exception cause);
1: 
1:     /**
0:      * Event handler for remote peer open of this resource.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      *
0:      * @throws IOException if an error occurs while processing the update.
1:      */
0:     void processRemoteOpen(AmqpConnection connection) throws IOException;
1: 
1:     /**
0:      * Event handler for remote peer detach of this resource.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      *
0:      * @throws IOException if an error occurs while processing the update.
1:      */
0:     void processRemoteDetach(AmqpConnection connection) throws IOException;
1: 
1:     /**
0:      * Event handler for remote peer close of this resource.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      *
0:      * @throws IOException if an error occurs while processing the update.
1:      */
0:     void processRemoteClose(AmqpConnection connection) throws IOException;
1: 
1:     /**
0:      * Called when the Proton Engine signals an Delivery related event has been triggered
0:      * for the given endpoint.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      *
0:      * @throws IOException if an error occurs while processing the update.
1:      */
0:     void processDeliveryUpdates(AmqpConnection connection) throws IOException;
1: 
1:     /**
0:      * Called when the Proton Engine signals an Flow related event has been triggered
0:      * for the given endpoint.
1:      *
1:      * @param connection
1:      *        The connection that owns this resource.
1:      *
0:      * @throws IOException if an error occurs while processing the update.
1:      */
0:     void processFlowUpdates(AmqpConnection connection) throws IOException;
1: 
1:     /**
0:      * @returns true if the remote end has sent an error
1:      */
0:     boolean hasRemoteError();
1: 
1:     /**
0:      * @return an Exception derived from the error state of the endpoint's Remote Condition.
1:      */
0:     Exception getRemoteError();
1: 
1:     /**
0:      * @return an Error message derived from the error state of the endpoint's Remote Condition.
1:      */
0:     String getRemoteErrorMessage();
1: 
1: }
============================================================================