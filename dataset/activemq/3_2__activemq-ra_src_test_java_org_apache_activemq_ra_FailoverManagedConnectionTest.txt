1:9383c6d: /**
1:9383c6d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9383c6d:  * contributor license agreements.  See the NOTICE file distributed with
1:9383c6d:  * this work for additional information regarding copyright ownership.
1:9383c6d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9383c6d:  * (the "License"); you may not use this file except in compliance with
1:9383c6d:  * the License.  You may obtain a copy of the License at
1:9383c6d:  *
1:9383c6d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9383c6d:  *
1:9383c6d:  * Unless required by applicable law or agreed to in writing, software
1:9383c6d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9383c6d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9383c6d:  * See the License for the specific language governing permissions and
1:9383c6d:  * limitations under the License.
1:9383c6d:  */
1:9383c6d: package org.apache.activemq.ra;
16:9383c6d: 
1:9383c6d: import java.util.HashSet;
1:9383c6d: 
1:9383c6d: import javax.resource.spi.ManagedConnection;
1:9383c6d: 
1:9383c6d: import org.apache.activemq.ActiveMQConnectionFactory;
1:9383c6d: import org.apache.activemq.broker.BrokerService;
1:ba1bd26: import org.junit.After;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:9383c6d: 
1:ba1bd26: public class FailoverManagedConnectionTest {
1:9383c6d: 
1:9383c6d:     private static final String BROKER_TRANSPORT = "tcp://localhost:61616";
1:9383c6d:     private static final String BROKER_URL = "failover://" + BROKER_TRANSPORT;
1:ba1bd26:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:ba1bd26: 
1:9383c6d:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:9383c6d:     private ManagedConnection managedConnection;
1:9383c6d:     private ManagedConnectionProxy proxy;
1:9383c6d:     private BrokerService broker;
1:9383c6d:     private HashSet<ManagedConnection> connections;
1:9383c6d:     private ActiveMQConnectionRequestInfo connectionInfo;
1:9383c6d: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:9383c6d: 
1:9383c6d:         createAndStartBroker();
1:ba1bd26: 
1:9383c6d:         connectionInfo = new ActiveMQConnectionRequestInfo();
1:9383c6d:         connectionInfo.setServerUrl(BROKER_URL);
1:9383c6d:         connectionInfo.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:9383c6d:         connectionInfo.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:9383c6d: 
1:9383c6d:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:9383c6d:         managedConnection = managedConnectionFactory.createManagedConnection(null, connectionInfo);
1:ba1bd26: 
1:9383c6d:         connections = new HashSet<ManagedConnection>();
1:9383c6d:         connections.add(managedConnection);
1:9383c6d:     }
1:ba1bd26: 
1:ba1bd26:     @After
1:ba1bd26:     public void tearDown() throws Exception {
1:ba1bd26:         stopBroker();
1:ba1bd26:     }
1:9383c6d: 
1:9383c6d:     private void createAndStartBroker() throws Exception {
1:9383c6d:         broker = new BrokerService();
1:9383c6d:         broker.addConnector(BROKER_TRANSPORT);
1:ba1bd26:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:9383c6d:         broker.start();
1:9383c6d:         broker.waitUntilStarted();
1:9383c6d:     }
1:9383c6d: 
1:ba1bd26:     @Test(timeout = 60000)
1:ba1bd26:     public void testFailoverBeforeClose() throws Exception {
1:ba1bd26: 
1:9383c6d:         createConnectionAndProxyAndSession();
1:ba1bd26: 
1:9383c6d:         stopBroker();
1:ba1bd26: 
1:9383c6d:         cleanupConnectionAndProxyAndSession();
1:ba1bd26: 
1:9383c6d:         createAndStartBroker();
1:ba1bd26: 
1:9383c6d:         for (int i=0; i<2; i++) {
1:9383c6d:             createConnectionAndProxyAndSession();
1:9383c6d:             cleanupConnectionAndProxyAndSession();
1:9383c6d:         }
1:9383c6d:     }
1:9383c6d: 
1:9383c6d:     private void cleanupConnectionAndProxyAndSession() throws Exception {
1:9383c6d:         proxy.close();
1:9383c6d:         managedConnection.cleanup();
1:9383c6d:     }
1:9383c6d: 
1:9383c6d:     private void createConnectionAndProxyAndSession() throws Exception {
1:ba1bd26:         managedConnection = managedConnectionFactory.matchManagedConnections(connections, null, connectionInfo);
1:ba1bd26:         proxy = (ManagedConnectionProxy) managedConnection.getConnection(null, null);
1:9383c6d:         proxy.createSession(false, 0);
1:9383c6d:     }
1:9383c6d: 
1:9383c6d:     private void stopBroker() throws Exception {
1:ba1bd26:         if (broker != null) {
1:ba1bd26:             broker.stop();
1:ba1bd26:             broker.waitUntilStopped();
1:ba1bd26:         }
1:9383c6d:     }
1:9383c6d: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class FailoverManagedConnectionTest {
1:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         stopBroker();
1:     }
1:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:     @Test(timeout = 60000)
1:     public void testFailoverBeforeClose() throws Exception {
1: 
1: 
1: 
1: 
1: 
1:         managedConnection = managedConnectionFactory.matchManagedConnections(connections, null, connectionInfo);
1:         proxy = (ManagedConnectionProxy) managedConnection.getConnection(null, null);
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9383c6d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.ra;
1: 
1: import java.util.HashSet;
1: 
1: import javax.resource.spi.ManagedConnection;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: 
0: public class FailoverManagedConnectionTest extends TestCase {
1: 
1:     private static final String BROKER_TRANSPORT = "tcp://localhost:61616";
1:     private static final String BROKER_URL = "failover://" + BROKER_TRANSPORT;
1:     
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:     private ManagedConnection managedConnection;
1:     private ManagedConnectionProxy proxy;
1:     private BrokerService broker;
1:     private HashSet<ManagedConnection> connections;
1:     private ActiveMQConnectionRequestInfo connectionInfo;
1: 
0:     protected void setUp() throws Exception {
1: 
1:         createAndStartBroker();
1:     
1:         connectionInfo = new ActiveMQConnectionRequestInfo();
1:         connectionInfo.setServerUrl(BROKER_URL);
1:         connectionInfo.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         connectionInfo.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1: 
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:         managedConnection = managedConnectionFactory.createManagedConnection(null, connectionInfo);
1:         
1:         connections = new HashSet<ManagedConnection>();
1:         connections.add(managedConnection);
1:     }
1:     
1: 
1:     private void createAndStartBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.addConnector(BROKER_TRANSPORT);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
0:     public void testFailoverBeforeClose() throws Exception {  
1:         
1:         createConnectionAndProxyAndSession();
1:         
1:         stopBroker();
1:         
1:         cleanupConnectionAndProxyAndSession();
1:         
1:         createAndStartBroker();
1:         
1:         for (int i=0; i<2; i++) {
1:             createConnectionAndProxyAndSession();
1:             cleanupConnectionAndProxyAndSession();
1:         }
1:     }
1:     
1: 
1:     private void cleanupConnectionAndProxyAndSession() throws Exception {
1:         proxy.close();
1:         managedConnection.cleanup();
1:     }
1: 
1: 
1:     private void createConnectionAndProxyAndSession() throws Exception {
0:         managedConnection = 
0:             managedConnectionFactory.matchManagedConnections(connections, null, connectionInfo);
0:         proxy = 
0:             (ManagedConnectionProxy) managedConnection.getConnection(null, null);
1:         proxy.createSession(false, 0);
1:     }
1: 
1: 
1:     private void stopBroker() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
1: }
============================================================================