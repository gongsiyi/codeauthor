1:ff457e2: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:ff457e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff457e2:  *
1:ff457e2:  * Unless required by applicable law or agreed to in writing, software
1:ff457e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff457e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff457e2:  * See the License for the specific language governing permissions and
1:ff457e2:  * limitations under the License.
1:ff457e2:  */
1:ff457e2: package org.apache.activemq.broker;
1:5619cd0: 
1:ad1f751: import java.util.concurrent.TimeUnit;
1:5619cd0: import org.apache.activemq.TestSupport;
1:5619cd0: import org.apache.activemq.command.ActiveMQDestination;
1:5619cd0: import org.apache.activemq.util.ThreadTracker;
1:bec711c: import org.junit.After;
1:bec711c: import org.junit.Before;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:5619cd0: 
1:bec711c: import static org.junit.Assert.*;
1:bec711c: 
1:bec711c: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:ff457e2: public class TopicSubscriptionTest extends QueueSubscriptionTest {
10:ff457e2: 
1:bec711c:     @Before
1:bec711c:     public void setUp() throws Exception {
1:ff457e2:         super.setUp();
1:ff457e2:         durable = true;
1:ff457e2:         topic = true;
4:ff457e2:     }
1:bec711c: 
1:bec711c:     @After
1:bec711c:     public void tearDown() throws Exception {
1:5619cd0:         super.tearDown();
1:5619cd0:         ThreadTracker.result();
1:5619cd0:     }
1:5619cd0: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:7703aee:     public void testManyProducersManyConsumers() throws Exception {
1:974ec34:         consumerCount = 40;
1:7703aee:         producerCount = 20;
1:3d95025:         messageCount  = 100;
1:7703aee:         messageSize   = 1; 
1:7703aee:         prefetchCount = 10;
1:7703aee: 
1:7703aee:         doMultipleClientsTest();
1:7703aee: 
1:7703aee:         assertTotalMessagesReceived(messageCount * producerCount * consumerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:5619cd0:     }
1:5619cd0: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:3d95025:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:3d95025:         consumerCount = 2;
1:3d95025:         producerCount = 1;
1:7703aee:         messageCount  = 10;
1:3d95025:         messageSize   = 1024 * 1024 * 1; // 1 MB
1:3d95025:         prefetchCount = 1;
1:5619cd0: 
1:3d95025:         doMultipleClientsTest();
1:7703aee: 
1:3d95025:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:7703aee:     }
1:3d95025: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
2:ff457e2:         consumerCount = 2;
2:ff457e2:         producerCount = 1;
2:ff457e2:         prefetchCount = 1;
1:ff457e2:         messageSize   = 1024;
1:ff457e2:         messageCount  = 1000;
1:3d95025: 
3:ff457e2:         doMultipleClientsTest();
1:3d95025: 
2:ff457e2:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:3d95025:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
1:ff457e2:         messageCount  = 1000;
1:ff457e2:         messageSize   = 1024;
1:ff457e2:         prefetchCount = messageCount * 2;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
2:ff457e2:         messageCount  = 10;
2:ff457e2:         messageSize   = 1024 * 1024 * 1; // 1 MB
1:ff457e2:         prefetchCount = messageCount * 2;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:ff457e2:         consumerCount = 50;
1:ff457e2:         producerCount = 1;
1:ff457e2:         messageCount  = 10;
2:ff457e2:         messageSize   = 1; // 1 byte
2:ff457e2:         prefetchCount = 10;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:ff457e2:         consumerCount = 50;
1:ff457e2:         producerCount = 1;
1:974ec34:         messageCount  = 100;
1:ff457e2:         messageSize   = 1; // 1 byte
1:ff457e2:         prefetchCount = 10;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testManyProducersOneConsumer() throws Exception {
1:ff457e2:         consumerCount = 1;
2:ff457e2:         producerCount = 20;
2:ff457e2:         messageCount  = 100;
1:ff457e2:         messageSize   = 1; // 1 byte
1:ff457e2:         prefetchCount = 10;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
2:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount * consumerCount);
1:5619cd0:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:ff457e2: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import static org.junit.Assert.*;
1: 
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:a2af47b
/////////////////////////////////////////////////////////////////////////
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.ThreadTracker;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         ThreadTracker.result();
1:     }
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
1:     
0:     private void assertDestinationMemoryUsageGoesToZero() throws Exception {
0:         assertEquals("destination memory is back to 0", 0, 
0:                 TestSupport.getDestination(broker, ActiveMQDestination.transform(destination)).getMemoryUsage().getPercentUsage());
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7703aee
/////////////////////////////////////////////////////////////////////////
1:     public void testManyProducersManyConsumers() throws Exception {
0:         consumerCount = 20;
1:         producerCount = 20;
0:         messageCount  = 500;
1:         messageSize   = 1; 
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount * consumerCount);
1:     }
1: 
1:         messageCount  = 10;
/////////////////////////////////////////////////////////////////////////
commit:3d95025
/////////////////////////////////////////////////////////////////////////
1:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
1:         messageCount  = 100;
1:         messageSize   = 1024 * 1024 * 1; // 1 MB
1:         prefetchCount = 1;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:974ec34
/////////////////////////////////////////////////////////////////////////
1:         consumerCount = 40;
1:         messageCount  = 100;
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
0:         messageCount  = 50;
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:ff457e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: public class TopicSubscriptionTest extends QueueSubscriptionTest {
1: 
0:     protected void setUp() throws Exception {
1:         super.setUp();
1:         durable = true;
1:         topic = true;
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
1:         prefetchCount = 1;
1:         messageSize   = 1024;
1:         messageCount  = 1000;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
1:         messageCount  = 1000;
1:         messageSize   = 1024;
1:         prefetchCount = messageCount * 2;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
0:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
1:         messageCount  = 10;
1:         messageSize   = 1024 * 1024 * 1; // 1 MB
1:         prefetchCount = 1;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
1:         messageCount  = 10;
1:         messageSize   = 1024 * 1024 * 1; // 1 MB
1:         prefetchCount = messageCount * 2;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
1:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:         consumerCount = 50;
1:         producerCount = 1;
1:         messageCount  = 10;
1:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
1:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:         consumerCount = 50;
1:         producerCount = 1;
1:         messageCount  = 100;
1:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * consumerCount * producerCount);
1:     }
1: 
1: 
1:     public void testManyProducersOneConsumer() throws Exception {
1:         consumerCount = 1;
1:         producerCount = 20;
1:         messageCount  = 100;
1:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount * consumerCount);
1:     }
1: 
0:     public void testManyProducersManyConsumers() throws Exception {
0:         consumerCount = 20;
1:         producerCount = 20;
0:         messageCount  = 20;
1:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount * consumerCount);
1:     }
1: }
============================================================================