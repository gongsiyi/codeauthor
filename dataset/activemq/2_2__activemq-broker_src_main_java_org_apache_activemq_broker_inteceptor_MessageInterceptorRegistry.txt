1:8f4ebbb: /**
1:8f4ebbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f4ebbb:  * contributor license agreements.  See the NOTICE file distributed with
1:8f4ebbb:  * this work for additional information regarding copyright ownership.
1:8f4ebbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f4ebbb:  * (the "License"); you may not use this file except in compliance with
1:8f4ebbb:  * the License.  You may obtain a copy of the License at
1:8f4ebbb:  *
1:8f4ebbb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f4ebbb:  *
1:8f4ebbb:  * Unless required by applicable law or agreed to in writing, software
1:8f4ebbb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f4ebbb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f4ebbb:  * See the License for the specific language governing permissions and
1:8f4ebbb:  * limitations under the License.
1:8f4ebbb:  */
1:8f4ebbb: package org.apache.activemq.broker.inteceptor;
1:8f4ebbb: 
1:0a5b143: import java.util.HashMap;
1:0a5b143: import java.util.Map;
1:0a5b143: 
1:8f4ebbb: import org.apache.activemq.broker.Broker;
1:0a5b143: import org.apache.activemq.broker.BrokerRegistry;
1:8f4ebbb: import org.apache.activemq.broker.BrokerService;
1:8f4ebbb: import org.apache.activemq.broker.MutableBrokerFilter;
1:8f4ebbb: import org.apache.activemq.broker.ProducerBrokerExchange;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQDestination;
1:8f4ebbb: import org.apache.activemq.command.Message;
1:8f4ebbb: import org.slf4j.Logger;
1:8f4ebbb: import org.slf4j.LoggerFactory;
1:8f4ebbb: 
1:8f4ebbb: public class MessageInterceptorRegistry {
1:8f4ebbb:     private static final Logger LOG = LoggerFactory.getLogger(MessageInterceptorRegistry.class);
1:0a5b143:     private static final MessageInterceptorRegistry INSTANCE = new MessageInterceptorRegistry();
1:8f4ebbb:     private final BrokerService brokerService;
1:8f4ebbb:     private MessageInterceptorFilter filter;
1:0a5b143:     private final Map<BrokerService, MessageInterceptorRegistry> messageInterceptorRegistryMap = new HashMap<BrokerService, MessageInterceptorRegistry>();
1:8f4ebbb: 
1:8f4ebbb: 
1:0a5b143:     public static MessageInterceptorRegistry getInstance() {
1:0a5b143:         return INSTANCE;
1:0a5b143:     }
1:0a5b143: 
1:0a5b143:     public MessageInterceptorRegistry get(String brokerName){
1:0a5b143:         BrokerService brokerService = BrokerRegistry.getInstance().lookup(brokerName);
1:0a5b143:         return get(brokerService);
1:0a5b143:     }
1:0a5b143: 
1:0a5b143:     public synchronized MessageInterceptorRegistry get(BrokerService brokerService){
1:0a5b143:         MessageInterceptorRegistry result = messageInterceptorRegistryMap.get(brokerService);
1:0a5b143:         if (result == null){
1:0a5b143:             result = new MessageInterceptorRegistry(brokerService);
1:0a5b143:             messageInterceptorRegistryMap.put(brokerService,result);
1:0a5b143:         }
1:0a5b143:         return result;
1:0a5b143:     }
1:0a5b143: 
1:0a5b143:     private MessageInterceptorRegistry(){
1:5515b9b:         this.brokerService=BrokerRegistry.getInstance().findFirst();
1:5515b9b:         messageInterceptorRegistryMap.put(brokerService,this);
1:0a5b143:     }
1:0a5b143: 
1:0a5b143:     private MessageInterceptorRegistry(BrokerService brokerService) {
1:8f4ebbb:         this.brokerService = brokerService;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public MessageInterceptor addMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         return getFilter().addMessageInterceptor(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void removeMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         getFilter().removeMessageInterceptor(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     public MessageInterceptor addMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         return getFilter().addMessageInterceptorForQueue(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void removeMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         getFilter().addMessageInterceptorForQueue(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     public MessageInterceptor addMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         return getFilter().addMessageInterceptorForTopic(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void removeMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         getFilter().removeMessageInterceptorForTopic(destinationName, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public MessageInterceptor addMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor messageInterceptor) {
1:8f4ebbb:         return getFilter().addMessageInterceptor(activeMQDestination, messageInterceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void removeMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor interceptor) {
1:8f4ebbb:         getFilter().removeMessageInterceptor(activeMQDestination, interceptor);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     /**
1:8f4ebbb:      * Re-inject into the Broker chain
1:8f4ebbb:      */
1:8f4ebbb: 
1:8f4ebbb:     public void injectMessage(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:8f4ebbb:         getFilter().injectMessage(producerExchange, messageSend);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     private synchronized MessageInterceptorFilter getFilter() {
1:8f4ebbb:         if (filter == null) {
1:8f4ebbb:             try {
1:8f4ebbb:                 MutableBrokerFilter mutableBrokerFilter = (MutableBrokerFilter) brokerService.getBroker().getAdaptor(MutableBrokerFilter.class);
1:8f4ebbb:                 Broker next = mutableBrokerFilter.getNext();
1:8f4ebbb:                 filter = new MessageInterceptorFilter(next);
1:8f4ebbb:                 mutableBrokerFilter.setNext(filter);
1:8f4ebbb:             } catch (Exception e) {
1:8f4ebbb:                 LOG.error("Failed to create MessageInterceptorFilter", e);
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return filter;
1:8f4ebbb:     }
1:8f4ebbb: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:5515b9b
/////////////////////////////////////////////////////////////////////////
1:         this.brokerService=BrokerRegistry.getInstance().findFirst();
1:         messageInterceptorRegistryMap.put(brokerService,this);
commit:0a5b143
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.BrokerRegistry;
/////////////////////////////////////////////////////////////////////////
1:     private static final MessageInterceptorRegistry INSTANCE = new MessageInterceptorRegistry();
1:     private final Map<BrokerService, MessageInterceptorRegistry> messageInterceptorRegistryMap = new HashMap<BrokerService, MessageInterceptorRegistry>();
1:     public static MessageInterceptorRegistry getInstance() {
1:         return INSTANCE;
1:     }
1: 
1:     public MessageInterceptorRegistry get(String brokerName){
1:         BrokerService brokerService = BrokerRegistry.getInstance().lookup(brokerName);
1:         return get(brokerService);
1:     }
1: 
1:     public synchronized MessageInterceptorRegistry get(BrokerService brokerService){
1:         MessageInterceptorRegistry result = messageInterceptorRegistryMap.get(brokerService);
1:         if (result == null){
1:             result = new MessageInterceptorRegistry(brokerService);
1:             messageInterceptorRegistryMap.put(brokerService,result);
1:         }
1:         return result;
1:     }
1: 
1:     private MessageInterceptorRegistry(){
0:         this.brokerService=null;
1:     }
1: 
1:     private MessageInterceptorRegistry(BrokerService brokerService) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.inteceptor;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.MutableBrokerFilter;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MessageInterceptorRegistry {
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageInterceptorRegistry.class);
1:     private final BrokerService brokerService;
1:     private MessageInterceptorFilter filter;
1: 
1: 
0:     public MessageInterceptorRegistry(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: 
1:     public MessageInterceptor addMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:         return getFilter().addMessageInterceptor(destinationName, messageInterceptor);
1:     }
1: 
1:     public void removeMessageInterceptor(String destinationName, MessageInterceptor messageInterceptor) {
1:         getFilter().removeMessageInterceptor(destinationName, messageInterceptor);
1:     }
1: 
1: 
1:     public MessageInterceptor addMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:         return getFilter().addMessageInterceptorForQueue(destinationName, messageInterceptor);
1:     }
1: 
1:     public void removeMessageInterceptorForQueue(String destinationName, MessageInterceptor messageInterceptor) {
1:         getFilter().addMessageInterceptorForQueue(destinationName, messageInterceptor);
1:     }
1: 
1: 
1:     public MessageInterceptor addMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:         return getFilter().addMessageInterceptorForTopic(destinationName, messageInterceptor);
1:     }
1: 
1:     public void removeMessageInterceptorForTopic(String destinationName, MessageInterceptor messageInterceptor) {
1:         getFilter().removeMessageInterceptorForTopic(destinationName, messageInterceptor);
1:     }
1: 
1:     public MessageInterceptor addMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor messageInterceptor) {
1:         return getFilter().addMessageInterceptor(activeMQDestination, messageInterceptor);
1:     }
1: 
1:     public void removeMessageInterceptor(ActiveMQDestination activeMQDestination, MessageInterceptor interceptor) {
1:         getFilter().removeMessageInterceptor(activeMQDestination, interceptor);
1:     }
1: 
1:     /**
1:      * Re-inject into the Broker chain
1:      */
1: 
1:     public void injectMessage(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:         getFilter().injectMessage(producerExchange, messageSend);
1:     }
1: 
1: 
1:     private synchronized MessageInterceptorFilter getFilter() {
1:         if (filter == null) {
1:             try {
1:                 MutableBrokerFilter mutableBrokerFilter = (MutableBrokerFilter) brokerService.getBroker().getAdaptor(MutableBrokerFilter.class);
1:                 Broker next = mutableBrokerFilter.getNext();
1:                 filter = new MessageInterceptorFilter(next);
1:                 mutableBrokerFilter.setNext(filter);
1:             } catch (Exception e) {
1:                 LOG.error("Failed to create MessageInterceptorFilter", e);
1:             }
1:         }
1:         return filter;
1:     }
1: }
============================================================================