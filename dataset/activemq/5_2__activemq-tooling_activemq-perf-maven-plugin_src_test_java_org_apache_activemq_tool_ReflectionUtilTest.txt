1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
2:a88906f: 
1:a88906f: import java.io.File;
1:540dd5c: import java.util.Properties;
1:a88906f: 
1:540dd5c: import junit.framework.TestCase;
1:a88906f: import org.apache.activemq.tool.properties.ReflectionConfigurable;
1:540dd5c: import org.apache.activemq.tool.properties.ReflectionUtil;
1:a88906f: 
1:a88906f: public class ReflectionUtilTest extends TestCase {
1:a88906f:     public void testConfigurableOption() {
1:a88906f:         TestClass5 data = new TestClass5();
1:a88906f: 
1:a88906f:         data.willIntercept = true;
1:a88906f:         ReflectionUtil.configureClass(data, "this-should-not-matter", "this-should-not-matter");
1:a88906f:         assertTrue(data.intercepted);
1:a88906f: 
1:a88906f:         data.willIntercept = false;
1:a88906f:         data.nest = new TestClass5();
1:a88906f:         data.nest.willIntercept = true;
1:a88906f:         ReflectionUtil.configureClass(data, "nest.this-should-not-matter", "this-should-not-matter");
1:a88906f:         assertTrue(data.intercepted);
1:a88906f:         assertTrue(data.nest.intercepted);
1:a88906f: 
1:a88906f:         data.willIntercept = false;
1:a88906f:         data.nest = new TestClass5();
1:a88906f:         data.nest.willIntercept = false;
1:a88906f:         data.nest.nest = new TestClass5();
1:a88906f:         data.nest.nest.willIntercept = true;
1:a88906f:         ReflectionUtil.configureClass(data, "nest.nest.this-should-not-matter", "this-should-not-matter");
1:a88906f:         assertTrue(data.intercepted);
1:a88906f:         assertTrue(data.nest.intercepted);
1:a88906f:         assertTrue(data.nest.nest.intercepted);
1:a88906f: 
1:a88906f:         TestClass6 data2 = new TestClass6();
1:a88906f:         data2.nestConfig = new TestClass5();
1:a88906f:         data2.nestConfig.willIntercept = true;
1:a88906f:         ReflectionUtil.configureClass(data2, "nestConfig.this-should-not-matter", "this-should-not-matter");
1:a88906f:         assertTrue(data2.nestConfig.intercepted);
1:a88906f: 
1:a88906f:         data2.nestNotConfig = new TestClass6();
1:a88906f:         data2.nestNotConfig.nestConfig = new TestClass5();
1:a88906f:         data2.nestNotConfig.nestConfig.willIntercept = true;
1:a88906f:         ReflectionUtil.configureClass(data2, "nestNotConfig.nestConfig.this-should-not-matter", "this-should-not-matter");
1:a88906f:         assertTrue(data2.nestNotConfig.nestConfig.intercepted);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void testDataTypeConfig() {
1:a88906f:         TestClass3 targetObj = new TestClass3();
1:a88906f: 
1:a88906f:         // Initialize variables;
1:a88906f:         targetObj.setBooleanData(false);
1:a88906f:         targetObj.setIntData(0);
1:a88906f:         targetObj.setLongData(0);
1:a88906f:         targetObj.setShortData((short)0);
1:a88906f:         targetObj.setDoubleData(0.0);
1:a88906f:         targetObj.setFloatData(0.0F);
1:a88906f:         targetObj.setByteData((byte)0);
1:a88906f:         targetObj.setCharData('0');
1:a88906f:         targetObj.setStringData("false");
1:a88906f: 
1:a88906f:         // Set properties
1:a88906f:         Properties props = new Properties();
1:a88906f:         props.setProperty("booleanData", "true");
1:a88906f:         props.setProperty("intData", "1000");
1:a88906f:         props.setProperty("longData", "2000");
1:a88906f:         props.setProperty("shortData", "3000");
1:a88906f:         props.setProperty("doubleData", "1234.567");
1:a88906f:         props.setProperty("floatData", "9876.543");
1:a88906f:         props.setProperty("byteData", "127");
1:a88906f:         props.setProperty("charData", "A");
1:a88906f:         props.setProperty("stringData", "true");
1:a88906f: 
1:a88906f:         ReflectionUtil.configureClass(targetObj, props);
1:a88906f: 
1:a88906f:         // Check config
1:a88906f:         assertEquals(true, targetObj.isBooleanData());
1:a88906f:         assertEquals(1000, targetObj.getIntData());
1:a88906f:         assertEquals(2000, targetObj.getLongData());
1:a88906f:         assertEquals(3000, targetObj.getShortData());
1:a88906f:         assertEquals(1234.567, targetObj.getDoubleData(), 0.0001);
1:a88906f:         assertEquals(9876.543, targetObj.getFloatData(), 0.0001);
1:a88906f:         assertEquals(127, targetObj.getByteData());
1:a88906f:         assertEquals('A', targetObj.getCharData());
1:a88906f:         assertEquals("true", targetObj.getStringData());
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void testValueOfMethod() {
1:a88906f:         TestClass4 targetObj = new TestClass4();
1:a88906f: 
1:a88906f:         ReflectionUtil.configureClass(targetObj, "testFile", "TEST.FOO.BAR");
1:a88906f: 
1:a88906f:         assertEquals("TEST.FOO.BAR", targetObj.testFile.toString());
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void testGetProperties() {
1:a88906f: 
1:a88906f:         TestClass3 testData = new TestClass3();
1:a88906f:         testData.setBooleanData(false);
1:a88906f:         testData.setByteData((byte)15);
1:a88906f:         testData.setCharData('G');
1:a88906f:         testData.setDoubleData(765.43);
1:a88906f:         testData.setFloatData(543.21F);
1:a88906f:         testData.setIntData(654321);
1:a88906f:         testData.setLongData(987654321);
1:a88906f:         testData.setShortData((short)4321);
1:a88906f:         testData.setStringData("BAR.TEST.FOO");
1:a88906f: 
1:a88906f:         TestClass3 targetObj = new TestClass3();
1:a88906f:         targetObj.setBooleanData(true);
1:a88906f:         targetObj.setByteData((byte)10);
1:a88906f:         targetObj.setCharData('D');
1:a88906f:         targetObj.setDoubleData(1234.567);
1:a88906f:         targetObj.setFloatData(4567.89F);
1:a88906f:         targetObj.setIntData(123456);
1:a88906f:         targetObj.setLongData(1234567890);
1:a88906f:         targetObj.setShortData((short)1234);
1:a88906f:         targetObj.setStringData("Test.FOO.BAR");
1:a88906f:         targetObj.setTestData(testData);
1:a88906f: 
1:a88906f:         Properties p = ReflectionUtil.retrieveObjectProperties(targetObj);
1:a88906f:         assertEquals("true", p.getProperty("booleanData"));
1:a88906f:         assertEquals("10", p.getProperty("byteData"));
1:a88906f:         assertEquals("D", p.getProperty("charData"));
1:a88906f:         assertEquals("1234.567", p.getProperty("doubleData"));
1:a88906f:         assertEquals("4567.89", p.getProperty("floatData"));
1:a88906f:         assertEquals("123456", p.getProperty("intData"));
1:a88906f:         assertEquals("1234567890", p.getProperty("longData"));
1:a88906f:         assertEquals("1234", p.getProperty("shortData"));
1:a88906f:         assertEquals("Test.FOO.BAR", p.getProperty("stringData"));
1:a88906f:         assertEquals("false", p.getProperty("testData.booleanData"));
1:a88906f:         assertEquals("15", p.getProperty("testData.byteData"));
1:a88906f:         assertEquals("G", p.getProperty("testData.charData"));
1:a88906f:         assertEquals("765.43", p.getProperty("testData.doubleData"));
1:a88906f:         assertEquals("543.21", p.getProperty("testData.floatData"));
1:a88906f:         assertEquals("654321", p.getProperty("testData.intData"));
1:a88906f:         assertEquals("987654321", p.getProperty("testData.longData"));
1:a88906f:         assertEquals("4321", p.getProperty("testData.shortData"));
1:a88906f:         assertEquals("BAR.TEST.FOO", p.getProperty("testData.stringData"));
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void testNestedConfig() {
1:a88906f:         TestClass3 t1 = new TestClass3();
1:a88906f:         TestClass3 t2 = new TestClass3();
1:a88906f:         TestClass3 t3 = new TestClass3();
1:a88906f:         TestClass3 t4 = new TestClass3();
1:a88906f:         TestClass3 t5 = new TestClass3();
1:a88906f: 
1:a88906f:         ReflectionUtil.configureClass(t1, "stringData", "t1");
1:a88906f:         assertEquals("t1", t1.getStringData());
1:a88906f: 
1:a88906f:         t1.setTestData(t2);
1:a88906f:         ReflectionUtil.configureClass(t1, "testData.stringData", "t2");
1:a88906f:         assertEquals("t2", t2.getStringData());
1:a88906f: 
1:a88906f:         t2.setTestData(t3);
1:a88906f:         ReflectionUtil.configureClass(t1, "testData.testData.stringData", "t3");
1:a88906f:         assertEquals("t3", t3.getStringData());
1:a88906f: 
1:a88906f:         t3.setTestData(t4);
1:a88906f:         ReflectionUtil.configureClass(t1, "testData.testData.testData.stringData", "t4");
1:a88906f:         assertEquals("t4", t4.getStringData());
1:a88906f: 
1:a88906f:         t4.setTestData(t5);
1:a88906f:         ReflectionUtil.configureClass(t1, "testData.testData.testData.testData.stringData", "t5");
1:a88906f:         assertEquals("t5", t5.getStringData());
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass1 {
1:a88906f:         private boolean booleanData;
1:540dd5c:         private int intData;
1:540dd5c:         private long longData;
1:a88906f: 
1:a88906f:         public boolean isBooleanData() {
1:a88906f:             return booleanData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setBooleanData(boolean booleanData) {
1:a88906f:             this.booleanData = booleanData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public int getIntData() {
1:a88906f:             return intData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setIntData(int intData) {
1:a88906f:             this.intData = intData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public long getLongData() {
1:a88906f:             return longData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setLongData(long longData) {
1:a88906f:             this.longData = longData;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass2 extends TestClass1 {
1:540dd5c:         private float floatData;
1:540dd5c:         private byte byteData;
1:540dd5c:         private char charData;
1:a88906f: 
1:a88906f:         public float getFloatData() {
1:a88906f:             return floatData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setFloatData(float floatData) {
1:a88906f:             this.floatData = floatData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public byte getByteData() {
1:a88906f:             return byteData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setByteData(byte byteData) {
1:a88906f:             this.byteData = byteData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public char getCharData() {
1:a88906f:             return charData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setCharData(char charData) {
1:a88906f:             this.charData = charData;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass3 extends TestClass2 {
1:540dd5c:         private short shortData;
1:540dd5c:         private double doubleData;
1:540dd5c:         private String stringData;
1:a88906f:         private TestClass3 testData;
1:a88906f: 
1:a88906f:         public short getShortData() {
1:a88906f:             return shortData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setShortData(short shortData) {
1:a88906f:             this.shortData = shortData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public double getDoubleData() {
1:a88906f:             return doubleData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setDoubleData(double doubleData) {
1:a88906f:             this.doubleData = doubleData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public String getStringData() {
1:a88906f:             return stringData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setStringData(String stringData) {
1:a88906f:             this.stringData = stringData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public TestClass3 getTestData() {
1:a88906f:             return testData;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setTestData(TestClass3 testData) {
1:a88906f:             this.testData = testData;
1:a88906f:         }
1:9a2d3d8: 
1:9a2d3d8:         public TestClass3 getRecursiveData() {
1:9a2d3d8:             return this;
1:9a2d3d8:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass4 {
1:a88906f:         private File testFile;
1:a88906f: 
1:a88906f:         public String getTestFile() {
1:a88906f:             return testFile.toString();
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setTestFile(String testFile) {
1:a88906f:             this.testFile = new File(testFile);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass5 implements ReflectionConfigurable {
1:540dd5c:         public boolean intercepted;
1:a88906f:         public boolean willIntercept = true;
1:540dd5c:         public TestClass5 nest;
1:a88906f: 
1:a88906f:         public void configureProperties(Properties props) {
1:a88906f:             // Do nothing
1:a88906f:         }
1:a88906f: 
1:a88906f:         public Properties retrieveProperties(Properties props) {
1:a88906f:             return null;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public boolean acceptConfig(String key, String val) {
1:a88906f:             intercepted = true;
1:a88906f: 
1:a88906f:             return !willIntercept;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public TestClass5 getNest() {
1:a88906f:             return nest;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setNest(TestClass5 nest) {
1:a88906f:             this.nest = nest;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public class TestClass6 {
1:540dd5c:         public TestClass6 nestNotConfig;
1:540dd5c:         public TestClass5 nestConfig;
1:a88906f: 
1:a88906f:         public TestClass6 getNestNotConfig() {
1:a88906f:             return nestNotConfig;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setNestNotConfig(TestClass6 nestNotConfig) {
1:a88906f:             this.nestNotConfig = nestNotConfig;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public TestClass5 getNestConfig() {
1:a88906f:             return nestConfig;
1:a88906f:         }
1:a88906f: 
1:a88906f:         public void setNestConfig(TestClass5 nestConfig) {
1:a88906f:             this.nestConfig = nestConfig;
1:a88906f:         }
1:a88906f:     }
1:a88906f: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:9a2d3d8
/////////////////////////////////////////////////////////////////////////
1: 
1:         public TestClass3 getRecursiveData() {
1:             return this;
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import junit.framework.TestCase;
1: import org.apache.activemq.tool.properties.ReflectionUtil;
/////////////////////////////////////////////////////////////////////////
1:         private int intData;
1:         private long longData;
/////////////////////////////////////////////////////////////////////////
1:         private float floatData;
1:         private byte byteData;
1:         private char charData;
/////////////////////////////////////////////////////////////////////////
1:         private short shortData;
1:         private double doubleData;
1:         private String stringData;
/////////////////////////////////////////////////////////////////////////
1:         public boolean intercepted;
1:         public TestClass5 nest;
/////////////////////////////////////////////////////////////////////////
1:         public TestClass6 nestNotConfig;
1:         public TestClass5 nestConfig;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import junit.framework.TestCase;
1: 
0: import java.util.Properties;
1: import java.io.File;
1: 
0: import org.apache.activemq.tool.properties.ReflectionUtil;
1: import org.apache.activemq.tool.properties.ReflectionConfigurable;
1: 
1: public class ReflectionUtilTest extends TestCase {
1:     public void testConfigurableOption() {
1:         TestClass5 data = new TestClass5();
1: 
1:         data.willIntercept = true;
1:         ReflectionUtil.configureClass(data, "this-should-not-matter", "this-should-not-matter");
1:         assertTrue(data.intercepted);
1: 
1:         data.willIntercept = false;
1:         data.nest = new TestClass5();
1:         data.nest.willIntercept = true;
1:         ReflectionUtil.configureClass(data, "nest.this-should-not-matter", "this-should-not-matter");
1:         assertTrue(data.intercepted);
1:         assertTrue(data.nest.intercepted);
1: 
1:         data.willIntercept = false;
1:         data.nest = new TestClass5();
1:         data.nest.willIntercept = false;
1:         data.nest.nest = new TestClass5();
1:         data.nest.nest.willIntercept = true;
1:         ReflectionUtil.configureClass(data, "nest.nest.this-should-not-matter", "this-should-not-matter");
1:         assertTrue(data.intercepted);
1:         assertTrue(data.nest.intercepted);
1:         assertTrue(data.nest.nest.intercepted);
1: 
1:         TestClass6 data2 = new TestClass6();
1:         data2.nestConfig = new TestClass5();
1:         data2.nestConfig.willIntercept = true;
1:         ReflectionUtil.configureClass(data2, "nestConfig.this-should-not-matter", "this-should-not-matter");
1:         assertTrue(data2.nestConfig.intercepted);
1: 
1:         data2.nestNotConfig = new TestClass6();
1:         data2.nestNotConfig.nestConfig = new TestClass5();
1:         data2.nestNotConfig.nestConfig.willIntercept = true;
1:         ReflectionUtil.configureClass(data2, "nestNotConfig.nestConfig.this-should-not-matter", "this-should-not-matter");
1:         assertTrue(data2.nestNotConfig.nestConfig.intercepted);
1:     }
1: 
1:     public void testDataTypeConfig() {
1:         TestClass3 targetObj = new TestClass3();
1: 
1:         // Initialize variables;
1:         targetObj.setBooleanData(false);
1:         targetObj.setIntData(0);
1:         targetObj.setLongData(0);
1:         targetObj.setShortData((short)0);
1:         targetObj.setDoubleData(0.0);
1:         targetObj.setFloatData(0.0F);
1:         targetObj.setByteData((byte)0);
1:         targetObj.setCharData('0');
1:         targetObj.setStringData("false");
1: 
1:         // Set properties
1:         Properties props = new Properties();
1:         props.setProperty("booleanData", "true");
1:         props.setProperty("intData", "1000");
1:         props.setProperty("longData", "2000");
1:         props.setProperty("shortData", "3000");
1:         props.setProperty("doubleData", "1234.567");
1:         props.setProperty("floatData", "9876.543");
1:         props.setProperty("byteData", "127");
1:         props.setProperty("charData", "A");
1:         props.setProperty("stringData", "true");
1: 
1:         ReflectionUtil.configureClass(targetObj, props);
1: 
1:         // Check config
1:         assertEquals(true, targetObj.isBooleanData());
1:         assertEquals(1000, targetObj.getIntData());
1:         assertEquals(2000, targetObj.getLongData());
1:         assertEquals(3000, targetObj.getShortData());
1:         assertEquals(1234.567, targetObj.getDoubleData(), 0.0001);
1:         assertEquals(9876.543, targetObj.getFloatData(), 0.0001);
1:         assertEquals(127, targetObj.getByteData());
1:         assertEquals('A', targetObj.getCharData());
1:         assertEquals("true", targetObj.getStringData());
1:     }
1: 
1:     public void testValueOfMethod() {
1:         TestClass4 targetObj = new TestClass4();
1: 
1:         ReflectionUtil.configureClass(targetObj, "testFile", "TEST.FOO.BAR");
1: 
1:         assertEquals("TEST.FOO.BAR", targetObj.testFile.toString());
1:     }
1: 
1:     public void testGetProperties() {
1: 
1:         TestClass3 testData = new TestClass3();
1:         testData.setBooleanData(false);
1:         testData.setByteData((byte)15);
1:         testData.setCharData('G');
1:         testData.setDoubleData(765.43);
1:         testData.setFloatData(543.21F);
1:         testData.setIntData(654321);
1:         testData.setLongData(987654321);
1:         testData.setShortData((short)4321);
1:         testData.setStringData("BAR.TEST.FOO");
1: 
1:         TestClass3 targetObj = new TestClass3();
1:         targetObj.setBooleanData(true);
1:         targetObj.setByteData((byte)10);
1:         targetObj.setCharData('D');
1:         targetObj.setDoubleData(1234.567);
1:         targetObj.setFloatData(4567.89F);
1:         targetObj.setIntData(123456);
1:         targetObj.setLongData(1234567890);
1:         targetObj.setShortData((short)1234);
1:         targetObj.setStringData("Test.FOO.BAR");
1:         targetObj.setTestData(testData);
1: 
1:         Properties p = ReflectionUtil.retrieveObjectProperties(targetObj);
1:         assertEquals("true", p.getProperty("booleanData"));
1:         assertEquals("10", p.getProperty("byteData"));
1:         assertEquals("D", p.getProperty("charData"));
1:         assertEquals("1234.567", p.getProperty("doubleData"));
1:         assertEquals("4567.89", p.getProperty("floatData"));
1:         assertEquals("123456", p.getProperty("intData"));
1:         assertEquals("1234567890", p.getProperty("longData"));
1:         assertEquals("1234", p.getProperty("shortData"));
1:         assertEquals("Test.FOO.BAR", p.getProperty("stringData"));
1:         assertEquals("false", p.getProperty("testData.booleanData"));
1:         assertEquals("15", p.getProperty("testData.byteData"));
1:         assertEquals("G", p.getProperty("testData.charData"));
1:         assertEquals("765.43", p.getProperty("testData.doubleData"));
1:         assertEquals("543.21", p.getProperty("testData.floatData"));
1:         assertEquals("654321", p.getProperty("testData.intData"));
1:         assertEquals("987654321", p.getProperty("testData.longData"));
1:         assertEquals("4321", p.getProperty("testData.shortData"));
1:         assertEquals("BAR.TEST.FOO", p.getProperty("testData.stringData"));
1: 
1:     }
1: 
1:     public void testNestedConfig() {
1:         TestClass3 t1 = new TestClass3();
1:         TestClass3 t2 = new TestClass3();
1:         TestClass3 t3 = new TestClass3();
1:         TestClass3 t4 = new TestClass3();
1:         TestClass3 t5 = new TestClass3();
1: 
1:         ReflectionUtil.configureClass(t1, "stringData", "t1");
1:         assertEquals("t1", t1.getStringData());
1: 
1:         t1.setTestData(t2);
1:         ReflectionUtil.configureClass(t1, "testData.stringData", "t2");
1:         assertEquals("t2", t2.getStringData());
1: 
1:         t2.setTestData(t3);
1:         ReflectionUtil.configureClass(t1, "testData.testData.stringData", "t3");
1:         assertEquals("t3", t3.getStringData());
1: 
1:         t3.setTestData(t4);
1:         ReflectionUtil.configureClass(t1, "testData.testData.testData.stringData", "t4");
1:         assertEquals("t4", t4.getStringData());
1: 
1:         t4.setTestData(t5);
1:         ReflectionUtil.configureClass(t1, "testData.testData.testData.testData.stringData", "t5");
1:         assertEquals("t5", t5.getStringData());
1:     }
1: 
1:     public class TestClass1 {
1:         private boolean booleanData;
0:         private int     intData;
0:         private long    longData;
1: 
1:         public boolean isBooleanData() {
1:             return booleanData;
1:         }
1: 
1:         public void setBooleanData(boolean booleanData) {
1:             this.booleanData = booleanData;
1:         }
1: 
1:         public int getIntData() {
1:             return intData;
1:         }
1: 
1:         public void setIntData(int intData) {
1:             this.intData = intData;
1:         }
1: 
1:         public long getLongData() {
1:             return longData;
1:         }
1: 
1:         public void setLongData(long longData) {
1:             this.longData = longData;
1:         }
1:     }
1: 
1:     public class TestClass2 extends TestClass1 {
0:         private float   floatData;
0:         private byte    byteData;
0:         private char    charData;
1: 
1:         public float getFloatData() {
1:             return floatData;
1:         }
1: 
1:         public void setFloatData(float floatData) {
1:             this.floatData = floatData;
1:         }
1: 
1:         public byte getByteData() {
1:             return byteData;
1:         }
1: 
1:         public void setByteData(byte byteData) {
1:             this.byteData = byteData;
1:         }
1: 
1:         public char getCharData() {
1:             return charData;
1:         }
1: 
1:         public void setCharData(char charData) {
1:             this.charData = charData;
1:         }
1:     }
1: 
1:     public class TestClass3 extends TestClass2 {
0:         private short   shortData;
0:         private double  doubleData;
0:         private String  stringData;
1:         private TestClass3 testData;
1: 
1:         public short getShortData() {
1:             return shortData;
1:         }
1: 
1:         public void setShortData(short shortData) {
1:             this.shortData = shortData;
1:         }
1: 
1:         public double getDoubleData() {
1:             return doubleData;
1:         }
1: 
1:         public void setDoubleData(double doubleData) {
1:             this.doubleData = doubleData;
1:         }
1: 
1:         public String getStringData() {
1:             return stringData;
1:         }
1: 
1:         public void setStringData(String stringData) {
1:             this.stringData = stringData;
1:         }
1: 
1:         public TestClass3 getTestData() {
1:             return testData;
1:         }
1: 
1:         public void setTestData(TestClass3 testData) {
1:             this.testData = testData;
1:         }
1:     }
1: 
1:     public class TestClass4 {
1:         private File testFile;
1: 
1:         public String getTestFile() {
1:             return testFile.toString();
1:         }
1: 
1:         public void setTestFile(String testFile) {
1:             this.testFile = new File(testFile);
1:         }
1:     }
1: 
1:     public class TestClass5 implements ReflectionConfigurable {
0:         public boolean intercepted = false;
1:         public boolean willIntercept = true;
0:         public TestClass5 nest = null;
1: 
1:         public void configureProperties(Properties props) {
1:             // Do nothing
1:         }
1: 
1:         public Properties retrieveProperties(Properties props) {
1:             return null;
1:         }
1: 
1:         public boolean acceptConfig(String key, String val) {
1:             intercepted = true;
1: 
1:             return !willIntercept;
1:         }
1: 
1:         public TestClass5 getNest() {
1:             return nest;
1:         }
1: 
1:         public void setNest(TestClass5 nest) {
1:             this.nest = nest;
1:         }
1:     }
1: 
1:     public class TestClass6 {
0:         public TestClass6 nestNotConfig = null;
0:         public TestClass5 nestConfig = null;
1: 
1:         public TestClass6 getNestNotConfig() {
1:             return nestNotConfig;
1:         }
1: 
1:         public void setNestNotConfig(TestClass6 nestNotConfig) {
1:             this.nestNotConfig = nestNotConfig;
1:         }
1: 
1:         public TestClass5 getNestConfig() {
1:             return nestConfig;
1:         }
1: 
1:         public void setNestConfig(TestClass5 nestConfig) {
1:             this.nestConfig = nestConfig;
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:9f3fcde
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.properties.ReflectionConfigurable;
0:     public void testConfigurableOption() {
0:         TestClass5 data = new TestClass5();
0: 
0:         data.willIntercept = true;
0:         ReflectionUtil.configureClass(data, "this-should-not-matter", "this-should-not-matter");
0:         assertTrue(data.intercepted);
0: 
0:         data.willIntercept = false;
0:         data.nest = new TestClass5();
0:         data.nest.willIntercept = true;
0:         ReflectionUtil.configureClass(data, "nest.this-should-not-matter", "this-should-not-matter");
0:         assertTrue(data.intercepted);
0:         assertTrue(data.nest.intercepted);
0: 
0:         data.willIntercept = false;
0:         data.nest = new TestClass5();
0:         data.nest.willIntercept = false;
0:         data.nest.nest = new TestClass5();
0:         data.nest.nest.willIntercept = true;
0:         ReflectionUtil.configureClass(data, "nest.nest.this-should-not-matter", "this-should-not-matter");
0:         assertTrue(data.intercepted);
0:         assertTrue(data.nest.intercepted);
0:         assertTrue(data.nest.nest.intercepted);
0: 
0:         TestClass6 data2 = new TestClass6();
0:         data2.nestConfig = new TestClass5();
0:         data2.nestConfig.willIntercept = true;
0:         ReflectionUtil.configureClass(data2, "nestConfig.this-should-not-matter", "this-should-not-matter");
0:         assertTrue(data2.nestConfig.intercepted);
0: 
0:         data2.nestNotConfig = new TestClass6();
0:         data2.nestNotConfig.nestConfig = new TestClass5();
0:         data2.nestNotConfig.nestConfig.willIntercept = true;
0:         ReflectionUtil.configureClass(data2, "nestNotConfig.nestConfig.this-should-not-matter", "this-should-not-matter");
0:         assertTrue(data2.nestNotConfig.nestConfig.intercepted);
0:     }
/////////////////////////////////////////////////////////////////////////
0: 
0:     public class TestClass5 implements ReflectionConfigurable {
0:         public boolean intercepted = false;
0:         public boolean willIntercept = true;
0:         public TestClass5 nest = null;
0: 
0:         public void configureProperties(Properties props) {
0:             // Do nothing
0:         }
0: 
0:         public Properties retrieveProperties(Properties props) {
0:             return null;
0:         }
0: 
0:         public boolean acceptConfig(String key, String val) {
0:             intercepted = true;
0: 
0:             return !willIntercept;
0:         }
0: 
0:         public TestClass5 getNest() {
0:             return nest;
0:         }
0: 
0:         public void setNest(TestClass5 nest) {
0:             this.nest = nest;
0:         }
0:     }
0: 
0:     public class TestClass6 {
0:         public TestClass6 nestNotConfig = null;
0:         public TestClass5 nestConfig = null;
0: 
0:         public TestClass6 getNestNotConfig() {
0:             return nestNotConfig;
0:         }
0: 
0:         public void setNestNotConfig(TestClass6 nestNotConfig) {
0:             this.nestNotConfig = nestNotConfig;
0:         }
0: 
0:         public TestClass5 getNestConfig() {
0:             return nestConfig;
0:         }
0: 
0:         public void setNestConfig(TestClass5 nestConfig) {
0:             this.nestConfig = nestConfig;
0:         }
0:     }
commit:0dbcc1f
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:         TestClass4 targetObj = new TestClass4();
0:         ReflectionUtil.configureClass(targetObj, "testFile", "TEST.FOO.BAR");
0:         assertEquals("TEST.FOO.BAR", targetObj.testFile.toString());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("false", p.getProperty("testData.booleanData"));
0:         assertEquals("15", p.getProperty("testData.byteData"));
0:         assertEquals("G", p.getProperty("testData.charData"));
0:         assertEquals("765.43", p.getProperty("testData.doubleData"));
0:         assertEquals("543.21", p.getProperty("testData.floatData"));
0:         assertEquals("654321", p.getProperty("testData.intData"));
0:         assertEquals("987654321", p.getProperty("testData.longData"));
0:         assertEquals("4321", p.getProperty("testData.shortData"));
0:         assertEquals("BAR.TEST.FOO", p.getProperty("testData.stringData"));
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     public class TestClass4 {
0:         private File testFile;
0: 
0:         public String getTestFile() {
0:             return testFile.toString();
0:         }
0: 
0:         public void setTestFile(String testFile) {
0:             this.testFile = new File(testFile);
0:         }
0:     }
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.properties.ReflectionUtil;
0: 
0:     private String data;
0:         TestClass3 targetObj = new TestClass3();
0:         // Initialize variables;
0:         targetObj.setBooleanData(false);
0:         targetObj.setIntData(0);
0:         targetObj.setLongData(0);
0:         targetObj.setShortData((short)0);
0:         targetObj.setDoubleData(0.0);
0:         targetObj.setFloatData(0.0F);
0:         targetObj.setByteData((byte)0);
0:         targetObj.setCharData('0');
0:         targetObj.setStringData("false");
0:         props.setProperty("booleanData", "true");
0:         props.setProperty("intData", "1000");
0:         props.setProperty("longData", "2000");
0:         props.setProperty("shortData", "3000");
0:         props.setProperty("doubleData", "1234.567");
0:         props.setProperty("floatData", "9876.543");
0:         props.setProperty("byteData", "127");
0:         props.setProperty("charData", "A");
0:         props.setProperty("stringData", "true");
0:         assertEquals(true, targetObj.isBooleanData());
0:         assertEquals(1000, targetObj.getIntData());
0:         assertEquals(2000, targetObj.getLongData());
0:         assertEquals(3000, targetObj.getShortData());
0:         assertEquals(1234.567, targetObj.getDoubleData(), 0.0001);
0:         assertEquals(9876.543, targetObj.getFloatData(), 0.0001);
0:         assertEquals(127, targetObj.getByteData());
0:         assertEquals('A', targetObj.getCharData());
0:         assertEquals("true", targetObj.getStringData());
0:     }
0: 
0:     public void testValueOfMethod() {
0:         ReflectionUtilTest targetObj = new ReflectionUtilTest();
0: 
0:         ReflectionUtil.configureClass(targetObj, "testData", "TEST.FOO.BAR");
0: 
0:         assertEquals("TEST.FOO.BAR", targetObj.testData.data);
0:     }
0: 
0:     public void testGetProperties() {
0: 
0:         TestClass3 testData = new TestClass3();
0:         testData.setBooleanData(false);
0:         testData.setByteData((byte)15);
0:         testData.setCharData('G');
0:         testData.setDoubleData(765.43);
0:         testData.setFloatData(543.21F);
0:         testData.setIntData(654321);
0:         testData.setLongData(987654321);
0:         testData.setShortData((short)4321);
0:         testData.setStringData("BAR.TEST.FOO");
0: 
0:         TestClass3 targetObj = new TestClass3();
0:         targetObj.setBooleanData(true);
0:         targetObj.setByteData((byte)10);
0:         targetObj.setCharData('D');
0:         targetObj.setDoubleData(1234.567);
0:         targetObj.setFloatData(4567.89F);
0:         targetObj.setIntData(123456);
0:         targetObj.setLongData(1234567890);
0:         targetObj.setShortData((short)1234);
0:         targetObj.setStringData("Test.FOO.BAR");
0:         targetObj.setTestData(testData);
0: 
0:         Properties p = ReflectionUtil.retrieveObjectProperties(targetObj);
0:         assertEquals("false", p.getProperty("testData.booleanData"));
0:         assertEquals("15", p.getProperty("testData.byteData"));
0:         assertEquals("G", p.getProperty("testData.charData"));
0:         assertEquals("765.43", p.getProperty("testData.doubleData"));
0:         assertEquals("543.21", p.getProperty("testData.floatData"));
0:         assertEquals("654321", p.getProperty("testData.intData"));
0:         assertEquals("987654321", p.getProperty("testData.longData"));
0:         assertEquals("4321", p.getProperty("testData.shortData"));
0:         assertEquals("BAR.TEST.FOO", p.getProperty("testData.stringData"));
0:         assertEquals("true", p.getProperty("booleanData"));
0:         assertEquals("10", p.getProperty("byteData"));
0:         assertEquals("D", p.getProperty("charData"));
0:         assertEquals("1234.567", p.getProperty("doubleData"));
0:         assertEquals("4567.89", p.getProperty("floatData"));
0:         assertEquals("123456", p.getProperty("intData"));
0:         assertEquals("1234567890", p.getProperty("longData"));
0:         assertEquals("1234", p.getProperty("shortData"));
0:         assertEquals("Test.FOO.BAR", p.getProperty("stringData"));
0:         TestClass3 t1 = new TestClass3();
0:         TestClass3 t2 = new TestClass3();
0:         TestClass3 t3 = new TestClass3();
0:         TestClass3 t4 = new TestClass3();
0:         TestClass3 t5 = new TestClass3();
0:         ReflectionUtil.configureClass(t1, "stringData", "t1");
0:         ReflectionUtil.configureClass(t1, "testData.stringData", "t2");
0:         ReflectionUtil.configureClass(t1, "testData.testData.stringData", "t3");
0:         ReflectionUtil.configureClass(t1, "testData.testData.testData.stringData", "t4");
0:         ReflectionUtil.configureClass(t1, "testData.testData.testData.testData.stringData", "t5");
0:     public static ReflectionUtilTest valueOf(String data) {
0:         ReflectionUtilTest test = new ReflectionUtilTest();
0:         test.data = data;
0:         return test;
/////////////////////////////////////////////////////////////////////////
0:     public String getData() {
0:         return data;
0:     }
0: 
0:     public void setData(String data) {
0:         this.data = data;
0:     }
0: 
0:     public class TestClass1 {
0:         private boolean booleanData;
0:         private int     intData;
0:         private long    longData;
0: 
0:         public boolean isBooleanData() {
0:             return booleanData;
0:         }
0: 
0:         public void setBooleanData(boolean booleanData) {
0:             this.booleanData = booleanData;
0:         }
0: 
0:         public int getIntData() {
0:             return intData;
0:         }
0: 
0:         public void setIntData(int intData) {
0:             this.intData = intData;
0:         }
0: 
0:         public long getLongData() {
0:             return longData;
0:         }
0: 
0:         public void setLongData(long longData) {
0:             this.longData = longData;
0:         }
0:     }
0: 
0:     public class TestClass2 extends TestClass1 {
0:         private float   floatData;
0:         private byte    byteData;
0:         private char    charData;
0: 
0:         public float getFloatData() {
0:             return floatData;
0:         }
0: 
0:         public void setFloatData(float floatData) {
0:             this.floatData = floatData;
0:         }
0: 
0:         public byte getByteData() {
0:             return byteData;
0:         }
0: 
0:         public void setByteData(byte byteData) {
0:             this.byteData = byteData;
0:         }
0: 
0:         public char getCharData() {
0:             return charData;
0:         }
0: 
0:         public void setCharData(char charData) {
0:             this.charData = charData;
0:         }
0:     }
0: 
0:     public class TestClass3 extends TestClass2 {
0:         private short   shortData;
0:         private double  doubleData;
0:         private String  stringData;
0:         private TestClass3 testData;
0: 
0:         public short getShortData() {
0:             return shortData;
0:         }
0: 
0:         public void setShortData(short shortData) {
0:             this.shortData = shortData;
0:         }
0: 
0:         public double getDoubleData() {
0:             return doubleData;
0:         }
0: 
0:         public void setDoubleData(double doubleData) {
0:             this.doubleData = doubleData;
0:         }
0: 
0:         public String getStringData() {
0:             return stringData;
0:         }
0: 
0:         public void setStringData(String stringData) {
0:             this.stringData = stringData;
0:         }
0: 
0:         public TestClass3 getTestData() {
0:             return testData;
0:         }
0: 
0:         public void setTestData(TestClass3 testData) {
0:             this.testData = testData;
0:         }
commit:ec74dd8
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import junit.framework.TestCase;
0: 
0: import java.util.Properties;
0: 
0: public class ReflectionUtilTest extends TestCase {
0:     private boolean booleanData;
0:     private int     intData;
0:     private long    longData;
0:     private short   shortData;
0:     private double  doubleData;
0:     private float   floatData;
0:     private byte    byteData;
0:     private char    charData;
0:     private String  stringData;
0:     private ReflectionUtilTest testData;
0: 
0:     public void testDataTypeConfig() {
0:         // Initialize variables;
0:         booleanData = false;
0:         intData     = 0;
0:         longData    = 0;
0:         shortData   = 0;
0:         doubleData  = 0.0;
0:         floatData   = 0.0F;
0:         byteData    = 0;
0:         charData    = '0';
0:         stringData  = "false";
0: 
0:         Object targetObj = new ReflectionUtilTest();
0: 
0:         // Set properties
0:         Properties props = new Properties();
0:         props.setProperty("test.booleanData", "true");
0:         props.setProperty("test.intData", "1000");
0:         props.setProperty("test.longData", "2000");
0:         props.setProperty("test.shortData", "3000");
0:         props.setProperty("test.doubleData", "1234.567");
0:         props.setProperty("test.floatData", "9876.543");
0:         props.setProperty("test.byteData", "127");
0:         props.setProperty("test.charData", "A");
0:         props.setProperty("test.stringData", "true");
0:         props.setProperty("test.testData", "TEST.FOO.BAR");
0: 
0:         ReflectionUtil.configureClass(targetObj, props);
0: 
0:         // Check config
0:         assertEquals(true, ((ReflectionUtilTest)targetObj).isBooleanData());
0:         assertEquals(1000, ((ReflectionUtilTest)targetObj).getIntData());
0:         assertEquals(2000, ((ReflectionUtilTest)targetObj).getLongData());
0:         assertEquals(3000, ((ReflectionUtilTest)targetObj).getShortData());
0:         assertEquals(1234.567, ((ReflectionUtilTest)targetObj).getDoubleData(), 0.0001);
0:         assertEquals(9876.543, ((ReflectionUtilTest)targetObj).getFloatData(), 0.0001);
0:         assertEquals(127, ((ReflectionUtilTest)targetObj).getByteData());
0:         assertEquals('A', ((ReflectionUtilTest)targetObj).getCharData());
0:         assertEquals("true", ((ReflectionUtilTest)targetObj).getStringData());
0:         assertEquals("TEST.FOO.BAR", ((ReflectionUtilTest)targetObj).getTestData().getStringData());
0:     }
0: 
0:     public void testNestedConfig() {
0:         ReflectionUtilTest t1 = new ReflectionUtilTest();
0:         ReflectionUtilTest t2 = new ReflectionUtilTest();
0:         ReflectionUtilTest t3 = new ReflectionUtilTest();
0:         ReflectionUtilTest t4 = new ReflectionUtilTest();
0:         ReflectionUtilTest t5 = new ReflectionUtilTest();
0: 
0:         ReflectionUtil.configureClass(t1, "test.stringData", "t1");
0:         assertEquals("t1", t1.getStringData());
0: 
0:         t1.setTestData(t2);
0:         ReflectionUtil.configureClass(t1, "test.testData.stringData", "t2");
0:         assertEquals("t2", t2.getStringData());
0: 
0:         t2.setTestData(t3);
0:         ReflectionUtil.configureClass(t1, "test.testData.testData.stringData", "t3");
0:         assertEquals("t3", t3.getStringData());
0: 
0:         t3.setTestData(t4);
0:         ReflectionUtil.configureClass(t1, "test.testData.testData.testData.stringData", "t4");
0:         assertEquals("t4", t4.getStringData());
0: 
0:         t4.setTestData(t5);
0:         ReflectionUtil.configureClass(t1, "test.testData.testData.testData.testData.stringData", "t5");
0:         assertEquals("t5", t5.getStringData());
0:     }
0: 
0:     public boolean isBooleanData() {
0:         return booleanData;
0:     }
0: 
0:     public void setBooleanData(boolean booleanData) {
0:         this.booleanData = booleanData;
0:     }
0: 
0:     public int getIntData() {
0:         return intData;
0:     }
0: 
0:     public void setIntData(int intData) {
0:         this.intData = intData;
0:     }
0: 
0:     public long getLongData() {
0:         return longData;
0:     }
0: 
0:     public void setLongData(long longData) {
0:         this.longData = longData;
0:     }
0: 
0:     public short getShortData() {
0:         return shortData;
0:     }
0: 
0:     public void setShortData(short shortData) {
0:         this.shortData = shortData;
0:     }
0: 
0:     public double getDoubleData() {
0:         return doubleData;
0:     }
0: 
0:     public void setDoubleData(double doubleData) {
0:         this.doubleData = doubleData;
0:     }
0: 
0:     public float getFloatData() {
0:         return floatData;
0:     }
0: 
0:     public void setFloatData(float floatData) {
0:         this.floatData = floatData;
0:     }
0: 
0:     public byte getByteData() {
0:         return byteData;
0:     }
0: 
0:     public void setByteData(byte byteData) {
0:         this.byteData = byteData;
0:     }
0: 
0:     public char getCharData() {
0:         return charData;
0:     }
0: 
0:     public void setCharData(char charData) {
0:         this.charData = charData;
0:     }
0: 
0:     public String getStringData() {
0:         return stringData;
0:     }
0: 
0:     public void setStringData(String stringData) {
0:         this.stringData = stringData;
0:     }
0: 
0:     public ReflectionUtilTest getTestData() {
0:         return testData;
0:     }
0: 
0:     public void setTestData(ReflectionUtilTest testData) {
0:         this.testData = testData;
0:     }
0: 
0:     public static ReflectionUtilTest valueOf(String data) {
0:         ReflectionUtilTest obj = new ReflectionUtilTest();
0:         obj.setStringData(data);
0:         return obj;
0:     }
0: }
============================================================================