1:09d7d5a: /**
1:09d7d5a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:09d7d5a:  * contributor license agreements.  See the NOTICE file distributed with
1:09d7d5a:  * this work for additional information regarding copyright ownership.
1:09d7d5a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:09d7d5a:  * (the "License"); you may not use this file except in compliance with
1:09d7d5a:  * the License.  You may obtain a copy of the License at
1:09d7d5a:  *
1:09d7d5a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:09d7d5a:  *
1:09d7d5a:  * Unless required by applicable law or agreed to in writing, software
1:09d7d5a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:09d7d5a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09d7d5a:  * See the License for the specific language governing permissions and
1:09d7d5a:  * limitations under the License.
1:09d7d5a:  */
1:09d7d5a: package org.apache.activemq.transport.tcp;
2:09d7d5a: 
1:09d7d5a: import java.io.ByteArrayInputStream;
1:09d7d5a: import java.io.ByteArrayOutputStream;
1:09d7d5a: import java.io.FileInputStream;
1:09d7d5a: import java.io.IOException;
1:9822d58: import java.net.SocketException;
1:9822d58: import java.net.UnknownHostException;
1:09d7d5a: import java.security.KeyStore;
1:09d7d5a: 
1:09d7d5a: import javax.net.ssl.KeyManager;
1:09d7d5a: import javax.net.ssl.KeyManagerFactory;
1:9822d58: import javax.net.ssl.SSLContext;
1:9822d58: import javax.net.ssl.SSLException;
1:9822d58: import javax.net.ssl.SSLSession;
1:9822d58: import javax.net.ssl.SSLSocket;
1:09d7d5a: import javax.net.ssl.TrustManager;
1:09d7d5a: import javax.net.ssl.TrustManagerFactory;
1:09d7d5a: 
1:09d7d5a: import junit.framework.Test;
1:09d7d5a: import junit.textui.TestRunner;
1:09d7d5a: 
1:09d7d5a: import org.apache.activemq.broker.BrokerService;
1:09d7d5a: import org.apache.activemq.broker.SslBrokerService;
1:0479a4e: import org.apache.activemq.broker.SslContext;
1:9822d58: import org.apache.activemq.broker.TransportConnector;
1:09d7d5a: import org.apache.activemq.transport.TransportBrokerTestSupport;
1:09d7d5a: import org.apache.activemq.transport.TransportFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:09d7d5a: 
1:09d7d5a: public class SslBrokerServiceTest extends TransportBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SslBrokerServiceTest.class);
1:09d7d5a: 
1:9822d58:     TransportConnector needClientAuthConnector;
1:9822d58:     TransportConnector limitedCipherSuites;
1:9822d58:     
1:09d7d5a:     protected String getBindLocation() {
1:09d7d5a:         return "ssl://localhost:0";
1:09d7d5a:     }
1:09d7d5a:     
1:09d7d5a:     @Override
1:09d7d5a:     protected BrokerService createBroker() throws Exception {
1:39c5363:         
1:39c5363:         // http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
1:39c5363:         // work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
1:39c5363:         System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
1:39c5363:         
1:09d7d5a:         SslBrokerService service = new SslBrokerService();
1:09d7d5a:         service.setPersistent(false);
1:09d7d5a:         
1:09d7d5a:         KeyManager[] km = getKeyManager();
1:09d7d5a:         TrustManager[] tm = getTrustManager();
1:09d7d5a:         connector = service.addSslConnector(getBindLocation(), km, tm, null);
1:dcd9b9e:         limitedCipherSuites = service.addSslConnector("ssl://localhost:0?transport.enabledCipherSuites=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", km, tm, null);
1:9822d58:         needClientAuthConnector = service.addSslConnector("ssl://localhost:0?transport.needClientAuth=true", km, tm, null);
1:09d7d5a:         
1:09d7d5a:         // for client side
1:09d7d5a:         SslTransportFactory sslFactory = new SslTransportFactory();
1:0479a4e:         SslContext ctx = new SslContext(km, tm, null);
1:0479a4e:         SslContext.setCurrentSslContext(ctx);
1:09d7d5a:         TransportFactory.registerTransportFactory("ssl", sslFactory);
1:09d7d5a:         
1:09d7d5a:         return service;
1:09d7d5a:     }
1:09d7d5a: 
1:571d452:     public void testNeedClientAuthReject() throws Exception {
1:9822d58:         SSLContext context = SSLContext.getInstance("TLS");    
1:9822d58:         // no client cert
1:9822d58:         context.init(null, getTrustManager(), null);
1:9822d58:         
1:9822d58:         try {
1:9822d58:             makeSSLConnection(context, null, needClientAuthConnector);
1:9822d58:             fail("expected failure on no client cert");
1:9822d58:         } catch (SSLException expected) {
1:9822d58:             expected.printStackTrace();
1:9822d58:         }
1:9822d58:         // should work with regular connector
1:9822d58:         makeSSLConnection(context, null, connector);
1:9822d58:     }
1:571d452: 
1:571d452:     public void testNeedClientAuthSucceed() throws Exception {
1:571d452:         SSLContext context = SSLContext.getInstance("TLS");
1:571d452:         context.init(getKeyManager(), getTrustManager(), null);
1:571d452:         makeSSLConnection(context, null, needClientAuthConnector);
1:571d452:     }
1:9822d58:     
1:9822d58:     public void testCipherSuitesDisabled() throws Exception {
1:9822d58:         SSLContext context = SSLContext.getInstance("TLS");
1:9822d58:         context.init(getKeyManager(), getTrustManager(), null);
1:9822d58:         
1:9822d58:         // Enable only one cipher suite which is not enabled on the server
1:9822d58:         try {
1:9822d58:             makeSSLConnection(context, new String[]{ "SSL_RSA_WITH_RC4_128_MD5" }, limitedCipherSuites);
1:9822d58:             fail("expected failure on non allowed cipher suite");
1:9822d58:         } catch (SSLException expectedOnNotAnAvailableSuite) {
1:9822d58:         }
1:9822d58: 
1:9822d58:         // ok with the enabled one
1:dcd9b9e:         makeSSLConnection(context, new String[]{ "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256" }, limitedCipherSuites);
1:9822d58:     }
1:9822d58: 
1:9822d58:     private void makeSSLConnection(SSLContext context, String enabledSuites[], TransportConnector connector) throws Exception,
1:9822d58:             UnknownHostException, SocketException {
1:9822d58:         SSLSocket sslSocket = (SSLSocket) context.getSocketFactory().createSocket("localhost", connector.getUri().getPort());
1:9822d58:         
1:9822d58:         if (enabledSuites != null) {
1:9822d58:             sslSocket.setEnabledCipherSuites(enabledSuites);
1:9822d58:         }
1:9822d58:         sslSocket.setSoTimeout(5000);
1:9822d58:         
1:9822d58:         SSLSession session = sslSocket.getSession();
1:9822d58:         sslSocket.startHandshake();
1:9822d58:         LOG.info("cyphersuite: " + session.getCipherSuite());
1:9822d58:         LOG.info("peer port: " + session.getPeerPort());
1:9822d58:         LOG.info("peer cert: " + session.getPeerCertificateChain()[0].toString());    
1:9822d58:     }
1:9822d58:     
1:c4d8bc4:     public static TrustManager[] getTrustManager() throws Exception {
1:09d7d5a:         TrustManager[] trustStoreManagers = null;
1:09d7d5a:         KeyStore trustedCertStore = KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE);
1:09d7d5a:         
1:09d7d5a:         trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE), null);
1:09d7d5a:         TrustManagerFactory tmf  = 
1:09d7d5a:             TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:09d7d5a:   
1:09d7d5a:         tmf.init(trustedCertStore);
1:09d7d5a:         trustStoreManagers = tmf.getTrustManagers();
1:09d7d5a:         return trustStoreManagers; 
1:09d7d5a:     }
1:09d7d5a: 
1:c4d8bc4:     public static KeyManager[] getKeyManager() throws Exception {
1:09d7d5a:         KeyManagerFactory kmf = 
1:09d7d5a:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  
1:09d7d5a:         KeyStore ks = KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE);
1:09d7d5a:         KeyManager[] keystoreManagers = null;
1:09d7d5a:         
1:09d7d5a:         byte[] sslCert = loadClientCredential(SslTransportBrokerTest.SERVER_KEYSTORE);
1:09d7d5a:         
1:09d7d5a:        
1:09d7d5a:         if (sslCert != null && sslCert.length > 0) {
1:09d7d5a:             ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
1:09d7d5a:             ks.load(bin, SslTransportBrokerTest.PASSWORD.toCharArray());
1:09d7d5a:             kmf.init(ks, SslTransportBrokerTest.PASSWORD.toCharArray());
1:09d7d5a:             keystoreManagers = kmf.getKeyManagers();
1:09d7d5a:         }
1:09d7d5a:         return keystoreManagers;          
1:09d7d5a:     }
1:09d7d5a: 
1:09d7d5a:     private static byte[] loadClientCredential(String fileName) throws IOException {
1:09d7d5a:         if (fileName == null) {
1:09d7d5a:             return null;
1:09d7d5a:         }
1:09d7d5a:         FileInputStream in = new FileInputStream(fileName);
1:09d7d5a:         ByteArrayOutputStream out = new ByteArrayOutputStream();
1:09d7d5a:         byte[] buf = new byte[512];
1:09d7d5a:         int i = in.read(buf);
1:09d7d5a:         while (i  > 0) {
1:09d7d5a:             out.write(buf, 0, i);
1:09d7d5a:             i = in.read(buf);
1:09d7d5a:         }
1:09d7d5a:         in.close();
1:09d7d5a:         return out.toByteArray();
1:09d7d5a:     }
1:09d7d5a: 
1:09d7d5a:     protected void setUp() throws Exception {
1:09d7d5a:         maxWait = 10000;
1:09d7d5a:         super.setUp();
1:09d7d5a:     }
1:09d7d5a: 
1:09d7d5a:     public static Test suite() {
1:09d7d5a:         return suite(SslBrokerServiceTest.class);
1:09d7d5a:     }
1:09d7d5a: 
1:09d7d5a:     public static void main(String[] args) {
1:09d7d5a:         TestRunner.run(suite());
1:09d7d5a:     }
1:09d7d5a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dcd9b9e
/////////////////////////////////////////////////////////////////////////
1:         limitedCipherSuites = service.addSslConnector("ssl://localhost:0?transport.enabledCipherSuites=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", km, tm, null);
/////////////////////////////////////////////////////////////////////////
1:         makeSSLConnection(context, new String[]{ "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256" }, limitedCipherSuites);
author:Christian Posta
-------------------------------------------------------------------------------
commit:571d452
/////////////////////////////////////////////////////////////////////////
1:     public void testNeedClientAuthReject() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testNeedClientAuthSucceed() throws Exception {
1:         SSLContext context = SSLContext.getInstance("TLS");
1:         context.init(getKeyManager(), getTrustManager(), null);
1:         makeSSLConnection(context, null, needClientAuthConnector);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SslBrokerServiceTest.class);
commit:0479a4e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
1:         SslContext ctx = new SslContext(km, tm, null);
1:         SslContext.setCurrentSslContext(ctx);
author:Gary Tully
-------------------------------------------------------------------------------
commit:39c5363
/////////////////////////////////////////////////////////////////////////
1:         
1:         // http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
1:         // work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
1:         System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
1:         
commit:c4d8bc4
/////////////////////////////////////////////////////////////////////////
1:     public static TrustManager[] getTrustManager() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public static KeyManager[] getKeyManager() throws Exception {
commit:9822d58
/////////////////////////////////////////////////////////////////////////
1: import java.net.SocketException;
1: import java.net.UnknownHostException;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLException;
1: import javax.net.ssl.SSLSession;
1: import javax.net.ssl.SSLSocket;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(SslBrokerServiceTest.class);
1:     TransportConnector needClientAuthConnector;
1:     TransportConnector limitedCipherSuites;
1:     
/////////////////////////////////////////////////////////////////////////
0:         limitedCipherSuites = service.addSslConnector("ssl://localhost:0?transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", km, tm, null);
1:         needClientAuthConnector = service.addSslConnector("ssl://localhost:0?transport.needClientAuth=true", km, tm, null);
/////////////////////////////////////////////////////////////////////////
0:     public void testNeedClientAuth() throws Exception {   
1:         SSLContext context = SSLContext.getInstance("TLS");    
1:         // no client cert
1:         context.init(null, getTrustManager(), null);
1:         
1:         try {
1:             makeSSLConnection(context, null, needClientAuthConnector);
1:             fail("expected failure on no client cert");
1:         } catch (SSLException expected) {
1:             expected.printStackTrace();
1:         }
1:         // should work with regular connector
1:         makeSSLConnection(context, null, connector);
1:     }
1:     
1:     public void testCipherSuitesDisabled() throws Exception {
1:         SSLContext context = SSLContext.getInstance("TLS");
1:         context.init(getKeyManager(), getTrustManager(), null);
1:         
1:         // Enable only one cipher suite which is not enabled on the server
1:         try {
1:             makeSSLConnection(context, new String[]{ "SSL_RSA_WITH_RC4_128_MD5" }, limitedCipherSuites);
1:             fail("expected failure on non allowed cipher suite");
1:         } catch (SSLException expectedOnNotAnAvailableSuite) {
1:         }
1: 
1:         // ok with the enabled one
0:         makeSSLConnection(context, new String[]{ "SSL_RSA_WITH_RC4_128_SHA" }, limitedCipherSuites);
1:     }
1: 
1:     private void makeSSLConnection(SSLContext context, String enabledSuites[], TransportConnector connector) throws Exception,
1:             UnknownHostException, SocketException {
1:         SSLSocket sslSocket = (SSLSocket) context.getSocketFactory().createSocket("localhost", connector.getUri().getPort());
1:         
1:         if (enabledSuites != null) {
1:             sslSocket.setEnabledCipherSuites(enabledSuites);
1:         }
1:         sslSocket.setSoTimeout(5000);
1:         
1:         SSLSession session = sslSocket.getSession();
1:         sslSocket.startHandshake();
1:         LOG.info("cyphersuite: " + session.getCipherSuite());
1:         LOG.info("peer port: " + session.getPeerPort());
1:         LOG.info("peer cert: " + session.getPeerCertificateChain()[0].toString());    
1:     }
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:09d7d5a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.security.KeyStore;
1: 
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.TrustManagerFactory;
1: 
1: import junit.framework.Test;
1: import junit.textui.TestRunner;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.SslBrokerService;
1: import org.apache.activemq.transport.TransportBrokerTestSupport;
1: import org.apache.activemq.transport.TransportFactory;
1: 
1: public class SslBrokerServiceTest extends TransportBrokerTestSupport {
1: 
1:     protected String getBindLocation() {
1:         return "ssl://localhost:0";
1:     }
1:     
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         SslBrokerService service = new SslBrokerService();
1:         service.setPersistent(false);
1:         
1:         KeyManager[] km = getKeyManager();
1:         TrustManager[] tm = getTrustManager();
1:         connector = service.addSslConnector(getBindLocation(), km, tm, null);
1:         
1:         // for client side
1:         SslTransportFactory sslFactory = new SslTransportFactory();
0:         sslFactory.setKeyAndTrustManagers(km, tm, null);
1:         TransportFactory.registerTransportFactory("ssl", sslFactory);
1:         
1:         return service;
1:     }
1:     
1: 
0:     private TrustManager[] getTrustManager() throws Exception {
1:         TrustManager[] trustStoreManagers = null;
1:         KeyStore trustedCertStore = KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE);
1:         
1:         trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE), null);
1:         TrustManagerFactory tmf  = 
1:             TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:   
1:         tmf.init(trustedCertStore);
1:         trustStoreManagers = tmf.getTrustManagers();
1:         return trustStoreManagers; 
1:     }
1: 
0:     private KeyManager[] getKeyManager() throws Exception {
1:         KeyManagerFactory kmf = 
1:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  
1:         KeyStore ks = KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE);
1:         KeyManager[] keystoreManagers = null;
1:         
1:         byte[] sslCert = loadClientCredential(SslTransportBrokerTest.SERVER_KEYSTORE);
1:         
1:        
1:         if (sslCert != null && sslCert.length > 0) {
1:             ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
1:             ks.load(bin, SslTransportBrokerTest.PASSWORD.toCharArray());
1:             kmf.init(ks, SslTransportBrokerTest.PASSWORD.toCharArray());
1:             keystoreManagers = kmf.getKeyManagers();
1:         }
1:         return keystoreManagers;          
1:     }
1: 
1:     private static byte[] loadClientCredential(String fileName) throws IOException {
1:         if (fileName == null) {
1:             return null;
1:         }
1:         FileInputStream in = new FileInputStream(fileName);
1:         ByteArrayOutputStream out = new ByteArrayOutputStream();
1:         byte[] buf = new byte[512];
1:         int i = in.read(buf);
1:         while (i  > 0) {
1:             out.write(buf, 0, i);
1:             i = in.read(buf);
1:         }
1:         in.close();
1:         return out.toByteArray();
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         maxWait = 10000;
1:         super.setUp();
1:     }
1: 
1:     public static Test suite() {
1:         return suite(SslBrokerServiceTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         TestRunner.run(suite());
1:     }
1: }
============================================================================