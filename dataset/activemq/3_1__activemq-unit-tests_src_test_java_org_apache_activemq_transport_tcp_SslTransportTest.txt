1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
3:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
22:1a88ac6: 
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:1a88ac6: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.security.cert.X509Certificate;
1:1a88ac6: 
1:1a88ac6: import javax.management.remote.JMXPrincipal;
1:1a88ac6: import javax.net.ssl.SSLSocket;
1:1a88ac6: 
1:1a88ac6: import junit.framework.TestCase;
1:1a88ac6: import org.apache.activemq.command.ConnectionInfo;
1:1a88ac6: import org.apache.activemq.transport.StubTransportListener;
1:1a88ac6: import org.apache.activemq.wireformat.ObjectStreamWireFormat;
1:1a88ac6: 
1:1a88ac6: /**
1:1a88ac6:  * Unit tests for the SslTransport class.
1:1a88ac6:  */
1:1a88ac6: public class SslTransportTest extends TestCase {
1:74a7a8b: 
1:1a88ac6:     SSLSocket sslSocket;
1:1a88ac6:     StubTransportListener stubListener;
1:74a7a8b: 
1:1a88ac6:     String username;
1:1a88ac6:     String password;
1:1a88ac6:     String certDistinguishedName;
1:74a7a8b: 
1:1a88ac6:     protected void setUp() throws Exception {
1:1a88ac6:         certDistinguishedName = "ThisNameIsDistinguished";
1:1a88ac6:         username = "SomeUserName";
1:1a88ac6:         password = "SomePassword";
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     protected void tearDown() throws Exception {
1:1a88ac6:         super.tearDown();
1:1a88ac6:     }
1:74a7a8b: 
1:74a7a8b:     private void createTransportAndConsume(boolean wantAuth, boolean needAuth) throws IOException {
1:74a7a8b:         JMXPrincipal principal = new JMXPrincipal(certDistinguishedName);
1:74a7a8b:         X509Certificate cert = new StubX509Certificate(principal);
1:74a7a8b:         StubSSLSession sslSession = new StubSSLSession(cert);
1:74a7a8b: 
1:74a7a8b:         sslSocket = new StubSSLSocket(sslSession);
1:1a88ac6:         sslSocket.setWantClientAuth(wantAuth);
1:1a88ac6:         sslSocket.setNeedClientAuth(needAuth);
1:74a7a8b: 
1:74a7a8b:         SslTransport transport = new SslTransport(new ObjectStreamWireFormat(), sslSocket);
1:74a7a8b: 
1:1a88ac6:         stubListener = new StubTransportListener();
1:74a7a8b: 
1:74a7a8b:         transport.setTransportListener(stubListener);
1:74a7a8b: 
1:1a88ac6:         ConnectionInfo sentInfo = new ConnectionInfo();
1:74a7a8b: 
1:1a88ac6:         sentInfo.setUserName(username);
1:1a88ac6:         sentInfo.setPassword(password);
1:74a7a8b: 
1:1a88ac6:         transport.doConsume(sentInfo);
1:1a88ac6:     }
1:74a7a8b: 
1:1a88ac6:     public void testKeepClientUserName() throws IOException {
1:1a88ac6:         createTransportAndConsume(true, true);
1:74a7a8b: 
1:74a7a8b:         final ConnectionInfo receivedInfo = (ConnectionInfo)stubListener.getCommands().remove();
1:74a7a8b: 
1:1a88ac6:         X509Certificate receivedCert;
1:74a7a8b: 
1:1a88ac6:         try {
1:74a7a8b:             receivedCert = ((X509Certificate[])receivedInfo.getTransportContext())[0];
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             receivedCert = null;
1:1a88ac6:         }
1:74a7a8b: 
1:74a7a8b:         if (receivedCert == null) {
1:1a88ac6:             fail("Transmitted certificate chain was not attached to ConnectionInfo.");
1:1a88ac6:         }
1:74a7a8b: 
1:74a7a8b:         assertEquals("Received certificate distinguished name did not match the one transmitted.", certDistinguishedName, receivedCert.getSubjectDN().getName());
1:74a7a8b: 
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void createTransportAndConsume(boolean wantAuth, boolean needAuth) throws IOException {
1:         JMXPrincipal principal = new JMXPrincipal(certDistinguishedName);
1:         X509Certificate cert = new StubX509Certificate(principal);
1:         StubSSLSession sslSession = new StubSSLSession(cert);
1: 
1:         sslSocket = new StubSSLSocket(sslSession);
1: 
1:         SslTransport transport = new SslTransport(new ObjectStreamWireFormat(), sslSocket);
1: 
1: 
1:         transport.setTransportListener(stubListener);
1: 
1: 
1: 
1: 
1: 
1:         final ConnectionInfo receivedInfo = (ConnectionInfo)stubListener.getCommands().remove();
1: 
1: 
1:             receivedCert = ((X509Certificate[])receivedInfo.getTransportContext())[0];
1: 
1:         if (receivedCert == null) {
1: 
1:         assertEquals("Received certificate distinguished name did not match the one transmitted.", certDistinguishedName, receivedCert.getSubjectDN().getName());
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.IOException;
1: import java.security.cert.X509Certificate;
1: 
1: import javax.management.remote.JMXPrincipal;
1: import javax.net.ssl.SSLSocket;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.transport.StubTransportListener;
1: import org.apache.activemq.wireformat.ObjectStreamWireFormat;
1: 
1: /**
1:  * Unit tests for the SslTransport class.
1:  * 
1:  */
1: public class SslTransportTest extends TestCase {
1:     
1:     SSLSocket sslSocket;
0:     SslTransport transport;    
1:     StubTransportListener stubListener;
1:     
1:     String username;
1:     String password;
1:     String certDistinguishedName;
1:     
1:     protected void setUp() throws Exception {
1:         certDistinguishedName = "ThisNameIsDistinguished";
1:         username = "SomeUserName";
1:         password = "SomePassword";
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1:     
0:     private void createTransportAndConsume( boolean wantAuth, boolean needAuth ) throws IOException {
0:         JMXPrincipal principal = new JMXPrincipal( certDistinguishedName );
0:         X509Certificate cert = new StubX509Certificate( principal );
0:         StubSSLSession sslSession = 
0:             new StubSSLSession( cert );
1:         
0:         sslSocket = new StubSSLSocket( sslSession );
1:         sslSocket.setWantClientAuth(wantAuth);
1:         sslSocket.setNeedClientAuth(needAuth);
1:         
0: 		SslTransport transport = new SslTransport(
0:         		new ObjectStreamWireFormat(), sslSocket );
1:         
1:         stubListener = new StubTransportListener();
1:         
0:         transport.setTransportListener( stubListener );
1:         
1:         ConnectionInfo sentInfo = new ConnectionInfo();
1:         
1:         sentInfo.setUserName(username);
1:         sentInfo.setPassword(password);
1:         
1:         transport.doConsume(sentInfo);
1:     }
1:     
1:     public void testKeepClientUserName() throws IOException {
1:         createTransportAndConsume(true, true);
1:         
0:         final ConnectionInfo receivedInfo =
0:             (ConnectionInfo) stubListener.getCommands().remove();
1:         
1:         X509Certificate receivedCert;
1:         
1:         try {
0:             receivedCert = ((X509Certificate[])receivedInfo.getTransportContext())[0]; 
1:         } catch (Exception e) {
1:             receivedCert = null;
1:         }
1:         
0:         if ( receivedCert == null ) {
1:             fail("Transmitted certificate chain was not attached to ConnectionInfo.");
1:         }
1:         
0:         assertEquals("Received certificate distinguished name did not match the one transmitted.",
0:                 certDistinguishedName, receivedCert.getSubjectDN().getName());
1:         
1:     }
1: }
1: 
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
============================================================================