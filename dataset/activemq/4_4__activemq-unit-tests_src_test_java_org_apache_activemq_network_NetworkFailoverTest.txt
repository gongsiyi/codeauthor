1:98b4923: /**
1:98b4923:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:98b4923:  * contributor license agreements.  See the NOTICE file distributed with
1:98b4923:  * this work for additional information regarding copyright ownership.
1:98b4923:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:98b4923:  * (the "License"); you may not use this file except in compliance with
1:98b4923:  * the License.  You may obtain a copy of the License at
1:98b4923:  *
1:98b4923:  *      http://www.apache.org/licenses/LICENSE-2.0
1:98b4923:  *
1:98b4923:  * Unless required by applicable law or agreed to in writing, software
1:98b4923:  * distributed under the License is distributed on an "AS IS" BASIS,
1:98b4923:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98b4923:  * See the License for the specific language governing permissions and
1:98b4923:  * limitations under the License.
1:98b4923:  */
1:98b4923: package org.apache.activemq.network;
9:98b4923: 
1:98b4923: import java.io.IOException;
1:7e87cf2: import java.util.concurrent.atomic.AtomicInteger;
1:98b4923: 
1:98b4923: import javax.jms.Connection;
1:98b4923: import javax.jms.DeliveryMode;
1:98b4923: import javax.jms.Destination;
1:7e87cf2: import javax.jms.JMSException;
1:98b4923: import javax.jms.Message;
1:98b4923: import javax.jms.MessageConsumer;
1:98b4923: import javax.jms.MessageListener;
1:98b4923: import javax.jms.MessageProducer;
1:98b4923: import javax.jms.Queue;
1:98b4923: import javax.jms.Session;
1:98b4923: import javax.jms.TextMessage;
1:98b4923: 
1:98b4923: import junit.framework.TestCase;
1:98b4923: 
1:98b4923: import org.apache.activemq.ActiveMQConnection;
1:98b4923: import org.apache.activemq.ActiveMQConnectionFactory;
1:7e87cf2: import org.apache.activemq.DestinationDoesNotExistException;
1:98b4923: import org.apache.activemq.broker.BrokerService;
1:7e87cf2: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:98b4923: import org.apache.activemq.command.ActiveMQQueue;
1:98b4923: import org.apache.activemq.transport.TransportFilter;
1:98b4923: import org.apache.activemq.transport.failover.FailoverTransport;
1:98b4923: import org.apache.activemq.xbean.BrokerFactoryBean;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:98b4923: import org.springframework.context.support.AbstractApplicationContext;
1:98b4923: import org.springframework.core.io.ClassPathResource;
1:98b4923: import org.springframework.core.io.Resource;
1:98b4923: 
1:98b4923: public class NetworkFailoverTest extends TestCase {
1:98b4923: 
1:98b4923:     protected static final int MESSAGE_COUNT = 10;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NetworkFailoverTest.class);
1:98b4923: 
1:98b4923:     protected AbstractApplicationContext context;
1:98b4923:     protected Connection localConnection;
1:98b4923:     protected Connection remoteConnection;
1:98b4923:     protected BrokerService localBroker;
1:98b4923:     protected BrokerService remoteBroker;
1:98b4923:     protected Session localSession;
1:98b4923:     protected Session remoteSession;
1:7e87cf2:     protected ActiveMQQueue included=new ActiveMQQueue("include.test.foo");
1:c7d559f:     private final AtomicInteger replyToNonExistDest = new AtomicInteger(0);
1:c7d559f:     private final AtomicInteger roundTripComplete = new AtomicInteger(0);
1:c7d559f:     private final AtomicInteger remoteDLQCount = new AtomicInteger(0);
1:98b4923: 
1:98b4923:     public void testRequestReply() throws Exception {
1:98b4923:         final MessageProducer remoteProducer = remoteSession.createProducer(null);
1:98b4923:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:98b4923:         remoteConsumer.setMessageListener(new MessageListener() {
1:0f3fdd7:             @Override
1:98b4923:             public void onMessage(Message msg) {
1:7e87cf2:                 final TextMessage textMsg = (TextMessage)msg;
1:98b4923:                 try {
1:7e87cf2:                     String payload = "REPLY: " + textMsg.getText() + ", " + textMsg.getJMSMessageID();
1:98b4923:                     Destination replyTo;
1:98b4923:                     replyTo = msg.getJMSReplyTo();
1:98b4923:                     textMsg.clearBody();
1:98b4923:                     textMsg.setText(payload);
1:0f3fdd7:                     LOG.info("*** Sending response: {}", textMsg.getText());
1:0f3fdd7:                     remoteProducer.send(replyTo, textMsg);
1:7e87cf2:                     LOG.info("replied with: " + textMsg.getJMSMessageID());
1:7e87cf2: 
1:7e87cf2:                 } catch (DestinationDoesNotExistException expected) {
1:7e87cf2:                     // been removed but not yet recreated
1:7e87cf2:                     replyToNonExistDest.incrementAndGet();
1:7e87cf2:                     try {
1:7e87cf2:                         LOG.info("NED: " + textMsg.getJMSMessageID());
1:7e87cf2:                     } catch (JMSException e) {
1:7e87cf2:                         e.printStackTrace();
1:7e87cf2:                     };
1:98b4923:                 } catch (Exception e) {
1:0f3fdd7:                     LOG.warn("*** Responder listener caught exception: ", e);
1:98b4923:                     e.printStackTrace();
1:0f3fdd7:                 }
2:98b4923:             }
1:98b4923:         });
1:7e87cf2: 
1:98b4923:         Queue tempQueue = localSession.createTemporaryQueue();
1:98b4923:         MessageProducer requestProducer = localSession.createProducer(included);
1:98b4923:         requestProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:98b4923:         MessageConsumer requestConsumer = localSession.createConsumer(tempQueue);
1:0f3fdd7: 
1:7e87cf2:         // track remote dlq for forward failures
1:7e87cf2:         MessageConsumer dlqconsumer = remoteSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:7e87cf2:         dlqconsumer.setMessageListener(new MessageListener() {
1:7e87cf2:             @Override
1:7e87cf2:             public void onMessage(Message message) {
1:7e87cf2:                 try {
1:7e87cf2:                     LOG.info("dlq " + message.getJMSMessageID());
1:7e87cf2:                 } catch (JMSException e) {
1:7e87cf2:                     e.printStackTrace();
1:7e87cf2:                 }
1:7e87cf2:                 remoteDLQCount.incrementAndGet();
1:7e87cf2:             }
1:7e87cf2:         });
1:c7d559f: 
1:98b4923:         // allow for consumer infos to perculate arround
1:98b4923:         Thread.sleep(2000);
1:7e87cf2:         long done = System.currentTimeMillis() + (MESSAGE_COUNT * 6000);
1:7e87cf2:         int i = 0;
1:7e87cf2:         while (MESSAGE_COUNT > roundTripComplete.get() + remoteDLQCount.get() + replyToNonExistDest.get()
1:7e87cf2:                 && done > System.currentTimeMillis()) {
1:7e87cf2:             if  ( i < MESSAGE_COUNT) {
1:7e87cf2:                 String payload = "test msg " + i;
1:7e87cf2:                 i++;
1:7e87cf2:                 TextMessage msg = localSession.createTextMessage(payload);
1:7e87cf2:                 msg.setJMSReplyTo(tempQueue);
1:7e87cf2:                 requestProducer.send(msg);
1:7e87cf2:                 LOG.info("Sent: " + msg.getJMSMessageID() +", Failing over");
1:7e87cf2:                 ((FailoverTransport) ((TransportFilter) ((TransportFilter)
1:7e87cf2:                         ((ActiveMQConnection) localConnection)
1:7e87cf2:                                 .getTransport()).getNext()).getNext())
1:0f3fdd7:                         .handleTransportFailure(new IOException("Forcing failover from test"));
1:7e87cf2:             }
1:7e87cf2:             TextMessage result = (TextMessage)requestConsumer.receive(5000);
1:7e87cf2:             if (result != null) {
1:7e87cf2:                 LOG.info("Got reply: " + result.getJMSMessageID() + ", " + result.getText());
1:7e87cf2:                 roundTripComplete.incrementAndGet();
1:7e87cf2:             }
1:98b4923:         }
1:7e87cf2: 
1:7e87cf2:         LOG.info("complete: " + roundTripComplete.get()
1:7e87cf2:                         + ", remoteDLQCount: " + remoteDLQCount.get()
1:7e87cf2:                         + ", replyToNonExistDest: " + replyToNonExistDest.get());
1:7e87cf2:         assertEquals("complete:" + roundTripComplete.get()
1:7e87cf2:                 + ", remoteDLQCount: " + remoteDLQCount.get()
1:7e87cf2:                 + ", replyToNonExistDest: " + replyToNonExistDest.get(),
1:7e87cf2:                 MESSAGE_COUNT, roundTripComplete.get() + remoteDLQCount.get() + replyToNonExistDest.get() );
1:98b4923:     }
1:98b4923: 
1:0f3fdd7:     @Override
1:98b4923:     protected void setUp() throws Exception {
1:98b4923:         super.setUp();
1:c3e57ec:         doSetUp(true);
1:98b4923:     }
1:98b4923: 
1:0f3fdd7:     @Override
1:98b4923:     protected void tearDown() throws Exception {
1:98b4923:         doTearDown();
1:98b4923:         super.tearDown();
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected void doTearDown() throws Exception {
1:0f3fdd7:         try {
1:0f3fdd7:             localConnection.close();
1:0f3fdd7:             remoteConnection.close();
1:0f3fdd7:         } catch(Exception ex) {}
1:0f3fdd7: 
1:0f3fdd7:         try {
1:0f3fdd7:             localBroker.stop();
1:0f3fdd7:         } catch(Exception ex) {}
1:0f3fdd7:         try {
1:0f3fdd7:             remoteBroker.stop();
1:0f3fdd7:         } catch(Exception ex) {}
1:98b4923:     }
1:98b4923: 
1:c3e57ec:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:0f3fdd7: 
1:98b4923:         remoteBroker = createRemoteBroker();
1:c3e57ec:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:7e87cf2:         remoteBroker.setCacheTempDestinations(true);
1:98b4923:         remoteBroker.start();
1:0f3fdd7: 
1:98b4923:         localBroker = createLocalBroker();
1:c3e57ec:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:7e87cf2:         localBroker.setCacheTempDestinations(true);
1:98b4923:         localBroker.start();
1:0f3fdd7: 
1:98b4923:         String localURI = "tcp://localhost:61616";
1:98b4923:         String remoteURI = "tcp://localhost:61617";
1:7e87cf2:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("failover:("+localURI+","+remoteURI+")?randomize=false&backup=false&trackMessages=true");
1:98b4923:         localConnection = fac.createConnection();
1:98b4923:         localConnection.setClientID("local");
1:98b4923:         localConnection.start();
1:7e87cf2:         fac = new ActiveMQConnectionFactory("failover:("+remoteURI + ","+localURI+")?randomize=false&backup=false&trackMessages=true");
1:98b4923:         fac.setWatchTopicAdvisories(false);
1:98b4923:         remoteConnection = fac.createConnection();
1:98b4923:         remoteConnection.setClientID("remote");
1:98b4923:         remoteConnection.start();
1:0f3fdd7: 
1:98b4923:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:98b4923:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected String getRemoteBrokerURI() {
1:98b4923:         return "org/apache/activemq/network/remoteBroker.xml";
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected String getLocalBrokerURI() {
1:98b4923:         return "org/apache/activemq/network/localBroker.xml";
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected BrokerService createBroker(String uri) throws Exception {
1:98b4923:         Resource resource = new ClassPathResource(uri);
1:98b4923:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:98b4923:         resource = new ClassPathResource(uri);
1:98b4923:         factory = new BrokerFactoryBean(resource);
1:98b4923:         factory.afterPropertiesSet();
1:98b4923:         BrokerService result = factory.getBroker();
1:98b4923:         return result;
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected BrokerService createLocalBroker() throws Exception {
1:98b4923:         return createBroker(getLocalBrokerURI());
1:98b4923:     }
1:98b4923: 
1:98b4923:     protected BrokerService createRemoteBroker() throws Exception {
1:98b4923:         return createBroker(getRemoteBrokerURI());
1:98b4923:     }
1:98b4923: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger replyToNonExistDest = new AtomicInteger(0);
1:     private final AtomicInteger roundTripComplete = new AtomicInteger(0);
1:     private final AtomicInteger remoteDLQCount = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1: 
commit:0f3fdd7
/////////////////////////////////////////////////////////////////////////
0:     protected ActiveMQQueue included = new ActiveMQQueue("include.test.foo");
1:             @Override
0:                     TextMessage textMsg = (TextMessage) msg;
1:                     LOG.info("*** Sending response: {}", textMsg.getText());
1:                     remoteProducer.send(replyTo, textMsg);
1:                     LOG.warn("*** Responder listener caught exception: ", e);
1:                 }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("*** Failing over for iteration: #{}", i);
0:             ((FailoverTransport) ((TransportFilter) ((TransportFilter) ((ActiveMQConnection) localConnection).getTransport()).getNext()).getNext())
1:                 .handleTransportFailure(new IOException("Forcing failover from test"));
0:             TextMessage result = (TextMessage) requestConsumer.receive(10000);
0:             LOG.info("*** Iteration #{} got response: {}", i, result.getText());
1:     @Override
1:     @Override
1:         try {
1:             localConnection.close();
1:             remoteConnection.close();
1:         } catch(Exception ex) {}
1: 
1:         try {
1:             localBroker.stop();
1:         } catch(Exception ex) {}
1:         try {
1:             remoteBroker.stop();
1:         } catch(Exception ex) {}
1: 
1: 
1: 
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("failover:(" + localURI + "," + remoteURI
0:             + ")?randomize=false&backup=true&trackMessages=true");
0:         // ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
0:         fac = new ActiveMQConnectionFactory("failover:(" + remoteURI + "," + localURI + ")?randomize=false&backup=true&trackMessages=true");
1: 
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:7e87cf2
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.DestinationDoesNotExistException;
0: import org.apache.activemq.broker.region.policy.AbstractDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQQueue included=new ActiveMQQueue("include.test.foo");
0:     private AtomicInteger replyToNonExistDest = new AtomicInteger(0);
0:     private AtomicInteger roundTripComplete = new AtomicInteger(0);
0:     private AtomicInteger remoteDLQCount = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1:                 final TextMessage textMsg = (TextMessage)msg;
1:                     String payload = "REPLY: " + textMsg.getText() + ", " + textMsg.getJMSMessageID();
1:                     LOG.info("replied with: " + textMsg.getJMSMessageID());
1: 
1:                 } catch (DestinationDoesNotExistException expected) {
1:                     // been removed but not yet recreated
1:                     replyToNonExistDest.incrementAndGet();
1:                     try {
1:                         LOG.info("NED: " + textMsg.getJMSMessageID());
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     };
/////////////////////////////////////////////////////////////////////////
1:         // track remote dlq for forward failures
1:         MessageConsumer dlqconsumer = remoteSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:         dlqconsumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.info("dlq " + message.getJMSMessageID());
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:                 remoteDLQCount.incrementAndGet();
1:             }
1:         });
1:        
1:         long done = System.currentTimeMillis() + (MESSAGE_COUNT * 6000);
1:         int i = 0;
1:         while (MESSAGE_COUNT > roundTripComplete.get() + remoteDLQCount.get() + replyToNonExistDest.get()
1:                 && done > System.currentTimeMillis()) {
1:             if  ( i < MESSAGE_COUNT) {
1:                 String payload = "test msg " + i;
1:                 i++;
1:                 TextMessage msg = localSession.createTextMessage(payload);
1:                 msg.setJMSReplyTo(tempQueue);
1:                 requestProducer.send(msg);
1:                 LOG.info("Sent: " + msg.getJMSMessageID() +", Failing over");
1:                 ((FailoverTransport) ((TransportFilter) ((TransportFilter)
1:                         ((ActiveMQConnection) localConnection)
1:                                 .getTransport()).getNext()).getNext())
0:                         .handleTransportFailure(new IOException("Forcing failover from test"));
1:             }
1:             TextMessage result = (TextMessage)requestConsumer.receive(5000);
1:             if (result != null) {
1:                 LOG.info("Got reply: " + result.getJMSMessageID() + ", " + result.getText());
1:                 roundTripComplete.incrementAndGet();
1:             }
1: 
1:         LOG.info("complete: " + roundTripComplete.get()
1:                         + ", remoteDLQCount: " + remoteDLQCount.get()
1:                         + ", replyToNonExistDest: " + replyToNonExistDest.get());
1:         assertEquals("complete:" + roundTripComplete.get()
1:                 + ", remoteDLQCount: " + remoteDLQCount.get()
1:                 + ", replyToNonExistDest: " + replyToNonExistDest.get(),
1:                 MESSAGE_COUNT, roundTripComplete.get() + remoteDLQCount.get() + replyToNonExistDest.get() );
/////////////////////////////////////////////////////////////////////////
1:         remoteBroker.setCacheTempDestinations(true);
1:         localBroker.setCacheTempDestinations(true);
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("failover:("+localURI+","+remoteURI+")?randomize=false&backup=false&trackMessages=true");
1:         fac = new ActiveMQConnectionFactory("failover:("+remoteURI + ","+localURI+")?randomize=false&backup=false&trackMessages=true");
commit:c3e57ec
/////////////////////////////////////////////////////////////////////////
0:                     .handleTransportFailure(new IOException("Forcing failover from test"));
0:             TextMessage result = (TextMessage)requestConsumer.receive(10000);
/////////////////////////////////////////////////////////////////////////
1:         doSetUp(true);
/////////////////////////////////////////////////////////////////////////
1:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("failover:("+localURI+","+remoteURI+")?randomize=false&backup=true&trackMessages=true");
0:         fac = new ActiveMQConnectionFactory("failover:("+remoteURI + ","+localURI+")?randomize=false&backup=true&trackMessages=true");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkFailoverTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f1505f
/////////////////////////////////////////////////////////////////////////
commit:29cfded
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Failing over");
commit:98b4923
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.io.IOException;
0: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
0: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
0: import javax.jms.QueueRequestor;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import javax.jms.QueueRequestor;
0: import javax.jms.QueueSession;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: public class NetworkFailoverTest extends TestCase {
1: 
1:     protected static final int MESSAGE_COUNT = 10;
0:     private static final Log LOG = LogFactory.getLog(NetworkFailoverTest.class);
1: 
1:     protected AbstractApplicationContext context;
1:     protected Connection localConnection;
1:     protected Connection remoteConnection;
1:     protected BrokerService localBroker;
1:     protected BrokerService remoteBroker;
1:     protected Session localSession;
1:     protected Session remoteSession;
0:     protected ActiveMQQueue included=new ActiveMQQueue("include.test.foo");
0:     protected String consumerName = "durableSubs";
1: 
1:     public void testRequestReply() throws Exception {
1:         final MessageProducer remoteProducer = remoteSession.createProducer(null);
1:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:         remoteConsumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message msg) {
1:                 try {
0:                     TextMessage textMsg = (TextMessage)msg;
0:                     String payload = "REPLY: " + textMsg.getText();
0:                     System.err.println("REMOTE CONSUMER GOT MSG "+ textMsg.getText());
1:                     Destination replyTo;
1:                     replyTo = msg.getJMSReplyTo();
1:                     textMsg.clearBody();
1:                     textMsg.setText(payload);
0:                     remoteProducer.send(replyTo, textMsg);  
0:                     System.err.println("REMOTE CONSUMER SENT BACK MSG "+ textMsg.getText());
1:                     
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 } 
1:             }
1:         });
1: 
1:         Queue tempQueue = localSession.createTemporaryQueue();
1:         MessageProducer requestProducer = localSession.createProducer(included);
1:         requestProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         MessageConsumer requestConsumer = localSession.createConsumer(tempQueue);
1:        
1:         // allow for consumer infos to perculate arround
0:         System.err.println("SLEEPING ...");
1:         Thread.sleep(2000);
0:         for (int i = 0; i < MESSAGE_COUNT; i++) {
0:             String payload = "test msg " + i;
0:             TextMessage msg = localSession.createTextMessage(payload);
0:             msg.setJMSReplyTo(tempQueue);
0:             System.err.println("SENDING REQUEST " + payload);
0:             requestProducer.send(msg);
0:             System.err.println("FAILOVER");
0:             ((FailoverTransport) ((TransportFilter) ((TransportFilter) 
0:                     ((ActiveMQConnection) localConnection)
0:                     .getTransport()).getNext()).getNext())
0:                     .handleTransportFailure(new IOException());
0:             TextMessage result = (TextMessage)requestConsumer.receive();
0:             assertNotNull(result);
1:             
0:             LOG.info(result.getText());
1:         }
1:     }
1: 
1:     
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         doSetUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         localBroker.deleteAllMessages();
0:         remoteBroker.deleteAllMessages();
1:         doTearDown();
1:         super.tearDown();
1:     }
1: 
1:     protected void doTearDown() throws Exception {
0:         localConnection.close();
0:         remoteConnection.close();
0:         localBroker.stop();
0:         remoteBroker.stop();
1:     }
1: 
0:     protected void doSetUp() throws Exception {
1:         
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.start();
1:         localBroker = createLocalBroker();
1:         localBroker.start();
1:         String localURI = "tcp://localhost:61616";
1:         String remoteURI = "tcp://localhost:61617";
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("failover:("+localURI+","+remoteURI+"?trackMessages=true)?randomize=false&backup=true");
0:         //ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID("local");
1:         localConnection.start();
0:         fac = new ActiveMQConnectionFactory("failover:("+remoteURI + ","+localURI+")?randomize=false&backup=true");
1:         fac.setWatchTopicAdvisories(false);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID("remote");
1:         remoteConnection.start();
1:       
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected String getRemoteBrokerURI() {
1:         return "org/apache/activemq/network/remoteBroker.xml";
1:     }
1: 
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/localBroker.xml";
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         Resource resource = new ClassPathResource(uri);
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         resource = new ClassPathResource(uri);
1:         factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1:         BrokerService result = factory.getBroker();
1:         return result;
1:     }
1: 
1:     protected BrokerService createLocalBroker() throws Exception {
1:         return createBroker(getLocalBrokerURI());
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         return createBroker(getRemoteBrokerURI());
1:     }
1: }
============================================================================