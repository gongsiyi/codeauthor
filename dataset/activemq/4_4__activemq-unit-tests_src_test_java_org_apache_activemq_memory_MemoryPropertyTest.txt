1:b39430a: /**
1:b39430a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b39430a:  * contributor license agreements.  See the NOTICE file distributed with
1:b39430a:  * this work for additional information regarding copyright ownership.
1:b39430a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b39430a:  * (the "License"); you may not use this file except in compliance with
1:b39430a:  * the License.  You may obtain a copy of the License at
3:b39430a:  *
1:b39430a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b39430a:  *
1:b39430a:  * Unless required by applicable law or agreed to in writing, software
1:b39430a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b39430a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b39430a:  * See the License for the specific language governing permissions and
1:b39430a:  * limitations under the License.
1:b39430a:  */
1:b39430a: package org.apache.activemq.memory;
9:b39430a: 
1:c7d559f: import junit.framework.TestCase;
1:b39430a: 
1:b39430a: import org.apache.activemq.broker.BrokerFactory;
1:b39430a: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:b39430a: 
1:b39430a: public class MemoryPropertyTest extends TestCase {
1:b39430a: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(MemoryPropertyTest.class);
1:b39430a:     BrokerService broker;
1:c7d559f: 
1:b39430a: 
1:b39430a:     /**
1:b39430a:      * Sets up a test where the producer and consumer have their own connection.
1:c7d559f:      *
1:b39430a:      * @see junit.framework.TestCase#setUp()
1:b39430a:      */
1:c7d559f:     @Override
1:b39430a:     protected void setUp() throws Exception {
1:b39430a:         // Create broker from resource
1:b39430a:         LOG.info("Creating broker... ");
1:b39430a:         broker = createBroker("xbean:org/apache/activemq/memory/activemq.xml");
1:b39430a:         LOG.info("Success");
1:b39430a:         super.setUp();
1:b39430a:     }
1:c7d559f: 
1:b39430a:     protected BrokerService createBroker(String resource) throws Exception {
1:b39430a:         return BrokerFactory.createBroker(resource);
1:b39430a:     }
1:b39430a: 
1:b39430a:     /*
1:b39430a:      * Stops the Broker
1:c7d559f:      *
1:b39430a:      * @see junit.framework.TestCase#tearDown()
1:b39430a:      */
1:c7d559f:     @Override
1:b39430a:     protected void tearDown() throws Exception {
1:b39430a:         LOG.info("Closing Broker");
1:b39430a:         if (broker != null) {
1:b39430a:             broker.stop();
1:b39430a:         }
1:b39430a:         LOG.info("Broker closed...");
1:b39430a:     }
1:b39430a: 
1:b39430a:     public void testBrokerInitialized() {
1:b39430a:         assertTrue("We should have a broker", broker != null);
1:b39430a: 
1:b39430a:         assertEquals("test-broker", broker.getBrokerName());
1:b39430a:         assertEquals(1024, broker.getSystemUsage().getMemoryUsage().getLimit());
1:b39430a:         assertEquals(34, broker.getSystemUsage().getMemoryUsage().getPercentUsageMinDelta());
1:c7d559f: 
1:b5b6a08:         assertNotNull(broker.getSystemUsage().getStoreUsage().getStore());
1:b5b6a08:         // non persistent broker so no temp storage
1:b5b6a08:         assertNull(broker.getSystemUsage().getTempUsage().getStore());
1:b39430a:     }
1:b39430a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(MemoryPropertyTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:b5b6a08
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(broker.getSystemUsage().getStoreUsage().getStore());
1:         // non persistent broker so no temp storage
1:         assertNull(broker.getSystemUsage().getTempUsage().getStore());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b39430a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
0: import java.io.File;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.springframework.core.io.ClassPathResource;
0: import org.springframework.core.io.Resource;
1: 
0: import junit.framework.TestCase;
1: 
1: public class MemoryPropertyTest extends TestCase {
1: 
0:     private static final transient Log LOG = LogFactory.getLog(MemoryPropertyTest.class);
1:     BrokerService broker;
1: 
1:     
1:     /**
1:      * Sets up a test where the producer and consumer have their own connection.
1:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         // Create broker from resource
1:         LOG.info("Creating broker... ");
1:         broker = createBroker("xbean:org/apache/activemq/memory/activemq.xml");
1:         LOG.info("Success");
1:         super.setUp();
1:     }
1:     
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return BrokerFactory.createBroker(resource);
1:     }
1: 
1: 
1:     /*
1:      * Stops the Broker
1:      * 
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         LOG.info("Closing Broker");
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:         LOG.info("Broker closed...");
1:     }
1: 
1: 
1: 
1:     public void testBrokerInitialized() {
1:         assertTrue("We should have a broker", broker != null);
1: 
1:         assertEquals("test-broker", broker.getBrokerName());
1:         assertEquals(1024, broker.getSystemUsage().getMemoryUsage().getLimit());
1:         assertEquals(34, broker.getSystemUsage().getMemoryUsage().getPercentUsageMinDelta());
1:         
1:     }
1: 
1: }
============================================================================