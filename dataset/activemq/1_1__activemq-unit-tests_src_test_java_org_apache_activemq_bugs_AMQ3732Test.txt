1:3a5b48a: /**
1:3a5b48a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a5b48a:  * contributor license agreements.  See the NOTICE file distributed with
1:3a5b48a:  * this work for additional information regarding copyright ownership.
1:3a5b48a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a5b48a:  * (the "License"); you may not use this file except in compliance with
1:3a5b48a:  * the License.  You may obtain a copy of the License at
1:3a5b48a:  *
1:3a5b48a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3a5b48a:  *
1:3a5b48a:  * Unless required by applicable law or agreed to in writing, software
1:3a5b48a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a5b48a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a5b48a:  * See the License for the specific language governing permissions and
1:3a5b48a:  * limitations under the License.
1:3a5b48a:  */
1:3a5b48a: package org.apache.activemq.bugs;
1:3a5b48a: 
1:3a5b48a: import static org.junit.Assert.assertEquals;
1:3a5b48a: 
1:3a5b48a: import java.util.Random;
1:3a5b48a: import java.util.concurrent.LinkedBlockingQueue;
1:3a5b48a: import java.util.concurrent.TimeUnit;
1:3a5b48a: import java.util.concurrent.atomic.AtomicLong;
1:3a5b48a: 
1:3a5b48a: import javax.jms.Connection;
1:3a5b48a: import javax.jms.Message;
1:3a5b48a: import javax.jms.MessageConsumer;
1:3a5b48a: import javax.jms.MessageProducer;
1:3a5b48a: import javax.jms.Queue;
1:3a5b48a: import javax.jms.Session;
1:3a5b48a: 
1:3a5b48a: import org.apache.activemq.ActiveMQConnectionFactory;
1:3a5b48a: import org.apache.activemq.ActiveMQSession;
1:3a5b48a: import org.apache.activemq.broker.BrokerService;
1:3a5b48a: import org.junit.After;
1:3a5b48a: import org.junit.Before;
1:3a5b48a: import org.junit.Test;
1:3a5b48a: import org.slf4j.Logger;
1:3a5b48a: import org.slf4j.LoggerFactory;
1:3a5b48a: 
1:3a5b48a: public class AMQ3732Test {
1:3a5b48a: 
1:cdacf82:     private static Logger LOG = LoggerFactory.getLogger(AMQ3732Test.class);
1:3a5b48a: 
1:3a5b48a:     private ActiveMQConnectionFactory connectionFactory;
1:3a5b48a:     private Connection connection;
1:3a5b48a:     private Session session;
1:3a5b48a:     private BrokerService broker;
1:3a5b48a:     private String connectionUri;
1:3a5b48a: 
1:3a5b48a:     private final Random pause = new Random();
1:3a5b48a:     private final long NUM_MESSAGES = 25000;
1:3a5b48a:     private final AtomicLong totalConsumed = new AtomicLong();
1:3a5b48a: 
1:3a5b48a:     @Before
1:3a5b48a:     public void startBroker() throws Exception {
1:3a5b48a:         broker = new BrokerService();
1:3a5b48a:         broker.setDeleteAllMessagesOnStartup(true);
1:3a5b48a:         broker.setPersistent(false);
1:3a5b48a:         broker.setUseJmx(false);
1:3a5b48a:         broker.addConnector("tcp://0.0.0.0:0");
1:3a5b48a:         broker.start();
1:3a5b48a:         broker.waitUntilStarted();
1:3a5b48a: 
1:3a5b48a:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:3a5b48a: 
1:3a5b48a:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:3a5b48a:         connectionFactory.getPrefetchPolicy().setAll(0);
1:3a5b48a:     }
1:3a5b48a: 
1:3a5b48a:     @After
1:3a5b48a:     public void stopBroker() throws Exception {
1:3a5b48a:         connection.close();
1:3a5b48a: 
1:3a5b48a:         broker.stop();
1:3a5b48a:         broker.waitUntilStopped();
1:3a5b48a:     }
1:3a5b48a: 
1:3a5b48a:     @Test(timeout = 1200000)
1:3a5b48a:     public void testInterruptionAffects() throws Exception {
1:3a5b48a: 
1:3a5b48a:         connection = connectionFactory.createConnection();
1:3a5b48a:         connection.start();
1:3a5b48a:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:3a5b48a: 
1:3a5b48a:         Queue queue = session.createQueue("AMQ3732Test");
1:3a5b48a: 
1:3a5b48a:         final LinkedBlockingQueue<Message> workQueue = new LinkedBlockingQueue<Message>();
1:3a5b48a: 
1:3a5b48a:         final MessageConsumer consumer1 = session.createConsumer(queue);
1:3a5b48a:         final MessageConsumer consumer2 = session.createConsumer(queue);
1:3a5b48a:         final MessageProducer producer = session.createProducer(queue);
1:3a5b48a: 
1:3a5b48a:         Thread consumer1Thread = new Thread(new Runnable() {
1:3a5b48a: 
1:3a5b48a:             @Override
1:3a5b48a:             public void run() {
1:3a5b48a:                 try {
1:3a5b48a:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:3a5b48a:                         Message message = consumer1.receiveNoWait();
1:3a5b48a:                         if (message != null) {
1:3a5b48a:                             workQueue.add(message);
1:3a5b48a:                         }
1:3a5b48a:                     }
1:3a5b48a:                 } catch(Exception e) {
1:3a5b48a:                     LOG.error("Caught an unexpected error: ", e);
1:3a5b48a:                 }
1:3a5b48a:             }
1:3a5b48a:         });
1:3a5b48a:         consumer1Thread.start();
1:3a5b48a: 
1:3a5b48a:         Thread consumer2Thread = new Thread(new Runnable() {
1:3a5b48a: 
1:3a5b48a:             @Override
1:3a5b48a:             public void run() {
1:3a5b48a:                 try {
1:3a5b48a:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:3a5b48a:                         Message message = consumer2.receive(50);
1:3a5b48a:                         if (message != null) {
1:3a5b48a:                             workQueue.add(message);
1:3a5b48a:                         }
1:3a5b48a:                     }
1:3a5b48a:                 } catch(Exception e) {
1:3a5b48a:                     LOG.error("Caught an unexpected error: ", e);
1:3a5b48a:                 }
1:3a5b48a:             }
1:3a5b48a:         });
1:3a5b48a:         consumer2Thread.start();
1:3a5b48a: 
1:3a5b48a:         Thread producerThread = new Thread(new Runnable() {
1:3a5b48a: 
1:3a5b48a:             @Override
1:3a5b48a:             public void run() {
1:3a5b48a:                 try {
1:3a5b48a:                     for (int i = 0; i < NUM_MESSAGES; ++i) {
1:3a5b48a:                         producer.send(session.createTextMessage("TEST"));
1:3a5b48a:                         TimeUnit.MILLISECONDS.sleep(pause.nextInt(10));
1:3a5b48a:                     }
1:3a5b48a:                 } catch(Exception e) {
1:3a5b48a:                     LOG.error("Caught an unexpected error: ", e);
1:3a5b48a:                 }
1:3a5b48a:             }
1:3a5b48a:         });
1:3a5b48a:         producerThread.start();
1:3a5b48a: 
1:3a5b48a:         Thread ackingThread = new Thread(new Runnable() {
1:3a5b48a: 
1:3a5b48a:             @Override
1:3a5b48a:             public void run() {
1:3a5b48a:                 try {
1:3a5b48a:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:3a5b48a:                         Message message = workQueue.take();
1:3a5b48a:                         message.acknowledge();
1:3a5b48a:                         totalConsumed.incrementAndGet();
1:3a5b48a:                         if ((totalConsumed.get() % 100) == 0) {
1:3a5b48a:                             LOG.info("Consumed " + totalConsumed.get() + " messages so far.");
1:3a5b48a:                         }
1:3a5b48a:                     }
1:3a5b48a:                 } catch(Exception e) {
1:3a5b48a:                     LOG.error("Caught an unexpected error: ", e);
1:3a5b48a:                 }
1:3a5b48a:             }
1:3a5b48a:         });
1:3a5b48a:         ackingThread.start();
1:3a5b48a: 
1:3a5b48a:         producerThread.join();
1:3a5b48a:         consumer1Thread.join();
1:3a5b48a:         consumer2Thread.join();
1:3a5b48a:         ackingThread.join();
1:3a5b48a: 
1:3a5b48a:         assertEquals(NUM_MESSAGES, totalConsumed.get());
1:3a5b48a:     }
1:3a5b48a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:cdacf82
/////////////////////////////////////////////////////////////////////////
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3732Test.class);
commit:3a5b48a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Random;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3732Test {
1: 
0:     private static Logger LOG = LoggerFactory.getLogger(AMQ3529Test.class);
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private Connection connection;
1:     private Session session;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     private final Random pause = new Random();
1:     private final long NUM_MESSAGES = 25000;
1:     private final AtomicLong totalConsumed = new AtomicLong();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         connectionFactory.getPrefetchPolicy().setAll(0);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         connection.close();
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout = 1200000)
1:     public void testInterruptionAffects() throws Exception {
1: 
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1: 
1:         Queue queue = session.createQueue("AMQ3732Test");
1: 
1:         final LinkedBlockingQueue<Message> workQueue = new LinkedBlockingQueue<Message>();
1: 
1:         final MessageConsumer consumer1 = session.createConsumer(queue);
1:         final MessageConsumer consumer2 = session.createConsumer(queue);
1:         final MessageProducer producer = session.createProducer(queue);
1: 
1:         Thread consumer1Thread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:                         Message message = consumer1.receiveNoWait();
1:                         if (message != null) {
1:                             workQueue.add(message);
1:                         }
1:                     }
1:                 } catch(Exception e) {
1:                     LOG.error("Caught an unexpected error: ", e);
1:                 }
1:             }
1:         });
1:         consumer1Thread.start();
1: 
1:         Thread consumer2Thread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:                         Message message = consumer2.receive(50);
1:                         if (message != null) {
1:                             workQueue.add(message);
1:                         }
1:                     }
1:                 } catch(Exception e) {
1:                     LOG.error("Caught an unexpected error: ", e);
1:                 }
1:             }
1:         });
1:         consumer2Thread.start();
1: 
1:         Thread producerThread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     for (int i = 0; i < NUM_MESSAGES; ++i) {
1:                         producer.send(session.createTextMessage("TEST"));
1:                         TimeUnit.MILLISECONDS.sleep(pause.nextInt(10));
1:                     }
1:                 } catch(Exception e) {
1:                     LOG.error("Caught an unexpected error: ", e);
1:                 }
1:             }
1:         });
1:         producerThread.start();
1: 
1:         Thread ackingThread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (totalConsumed.get() < NUM_MESSAGES) {
1:                         Message message = workQueue.take();
1:                         message.acknowledge();
1:                         totalConsumed.incrementAndGet();
1:                         if ((totalConsumed.get() % 100) == 0) {
1:                             LOG.info("Consumed " + totalConsumed.get() + " messages so far.");
1:                         }
1:                     }
1:                 } catch(Exception e) {
1:                     LOG.error("Caught an unexpected error: ", e);
1:                 }
1:             }
1:         });
1:         ackingThread.start();
1: 
1:         producerThread.join();
1:         consumer1Thread.join();
1:         consumer2Thread.join();
1:         ackingThread.join();
1: 
1:         assertEquals(NUM_MESSAGES, totalConsumed.get());
1:     }
1: }
============================================================================