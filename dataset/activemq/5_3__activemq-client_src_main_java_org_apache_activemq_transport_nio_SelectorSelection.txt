1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
3:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
3:885c379: 
1:662324c: import java.nio.channels.CancelledKeyException;
1:885c379: import java.nio.channels.ClosedChannelException;
1:885c379: import java.nio.channels.SelectionKey;
1:e957937: import java.nio.channels.spi.AbstractSelectableChannel;
1:662324c: import java.util.concurrent.atomic.AtomicBoolean;
1:885c379: 
1:885c379: import org.apache.activemq.transport.nio.SelectorManager.Listener;
1:885c379: 
1:885c379: /**
1:e957937:  *
1:885c379:  */
1:fc00993: public final class SelectorSelection {
1:885c379: 
1:74a7a8b:     private final SelectorWorker worker;
1:74a7a8b:     private final Listener listener;
1:74a7a8b:     private int interest;
1:662324c:     private SelectionKey key;
1:e957937:     private final AtomicBoolean closed = new AtomicBoolean();
1:885c379: 
1:e957937:     public SelectorSelection(final SelectorWorker worker, final AbstractSelectableChannel selectable, Listener listener) throws ClosedChannelException {
1:74a7a8b:         this.worker = worker;
1:74a7a8b:         this.listener = listener;
1:662324c:         worker.addIoTask(new Runnable() {
1:e957937:             @Override
1:662324c:             public void run() {
1:662324c:                 try {
1:e957937:                     SelectorSelection.this.key = selectable.register(worker.selector, 0, SelectorSelection.this);
1:662324c:                 } catch (Exception e) {
1:6e33507:                     onError(e);
1:662324c:                 }
1:662324c:             }
1:662324c:         });
1:74a7a8b:     }
1:885c379: 
1:74a7a8b:     public void setInterestOps(int ops) {
1:74a7a8b:         interest = ops;
1:74a7a8b:     }
1:885c379: 
1:74a7a8b:     public void enable() {
1:662324c:         worker.addIoTask(new Runnable() {
1:e957937:             @Override
1:662324c:             public void run() {
1:662324c:                 try {
1:662324c:                     key.interestOps(interest);
1:662324c:                 } catch (CancelledKeyException e) {
1:662324c:                 }
1:662324c:             }
1:e957937:         });
1:74a7a8b:     }
1:885c379: 
1:74a7a8b:     public void disable() {
1:662324c:         worker.addIoTask(new Runnable() {
1:e957937:             @Override
1:662324c:             public void run() {
1:662324c:                 try {
1:662324c:                     key.interestOps(0);
1:662324c:                 } catch (CancelledKeyException e) {
1:662324c:                 }
1:662324c:             }
1:e957937:         });
1:74a7a8b:     }
1:885c379: 
1:74a7a8b:     public void close() {
1:e957937:         if (closed.compareAndSet(false, true)) {
1:662324c:             worker.addIoTask(new Runnable() {
1:e957937:                 @Override
1:662324c:                 public void run() {
1:662324c:                     try {
1:662324c:                         key.cancel();
1:662324c:                     } catch (CancelledKeyException e) {
1:5adbafe:                     } finally {
1:5adbafe:                         worker.release();
1:662324c:                     }
1:662324c:                 }
1:e957937:             });
1:74a7a8b:         }
7:885c379:     }
1:885c379: 
1:74a7a8b:     public void onSelect() {
1:74a7a8b:         listener.onSelect(this);
1:74a7a8b:     }
1:885c379: 
1:74a7a8b:     public void onError(Throwable e) {
1:74a7a8b:         listener.onError(this, e);
1:74a7a8b:     }
1:74a7a8b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:6e33507
/////////////////////////////////////////////////////////////////////////
1:                     onError(e);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5adbafe
/////////////////////////////////////////////////////////////////////////
1:                     } finally {
1:                         worker.release();
commit:e957937
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.spi.AbstractSelectableChannel;
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean closed = new AtomicBoolean();
1:     public SelectorSelection(final SelectorWorker worker, final AbstractSelectableChannel selectable, Listener listener) throws ClosedChannelException {
1:             @Override
1:                     SelectorSelection.this.key = selectable.register(worker.selector, 0, SelectorSelection.this);
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:         });
1:             @Override
1:         });
1:         if (closed.compareAndSet(false, true)) {
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             });
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:662324c
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.CancelledKeyException;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private SelectionKey key;
0:     private AtomicBoolean closed = new AtomicBoolean();
0:     public SelectorSelection(final SelectorWorker worker, final SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
1:         worker.addIoTask(new Runnable() {
1:             public void run() {
1:                 try {
0:                     SelectorSelection.this.key = socketChannel.register(worker.selector, 0, SelectorSelection.this);
1:                 } catch (Exception e) {
0:                     e.printStackTrace();
1:                 }
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         worker.addIoTask(new Runnable() {
1:             public void run() {
1:                 try {
1:                     key.interestOps(interest);
1:                 } catch (CancelledKeyException e) {
1:                 }
1:             }
0:         });        
1:         worker.addIoTask(new Runnable() {
1:             public void run() {
1:                 try {
1:                     key.interestOps(0);
1:                 } catch (CancelledKeyException e) {
1:                 }
1:             }
0:         });        
0:         // guard against multiple closes.
0:         if( closed.compareAndSet(false, true) ) {
1:             worker.addIoTask(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         key.cancel();
1:                     } catch (CancelledKeyException e) {
1:                     }
0:                     worker.release();
1:                 }
0:             });        
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public final class SelectorSelection {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:     private final SelectorWorker worker;
0:     private final SelectionKey key;
1:     private final Listener listener;
1:     private int interest;
0:     public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
1:         this.worker = worker;
1:         this.listener = listener;
0:         this.key = socketChannel.register(worker.selector, 0, this);
0:         worker.incrementUseCounter();
1:     }
1:     public void setInterestOps(int ops) {
1:         interest = ops;
1:     }
1:     public void enable() {
0:         key.interestOps(interest);
0:         worker.selector.wakeup();
1:     }
1:     public void disable() {
0:         key.interestOps(0);
1:     }
1:     public void close() {
0:         worker.decrementUseCounter();
0:         key.cancel();
0:         worker.selector.wakeup();
1:     }
1:     public void onSelect() {
1:         listener.onSelect(this);
1:     }
1:     public void onError(Throwable e) {
1:         listener.onError(this, e);
1:     }
1: }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.nio.channels.ClosedChannelException;
1: import java.nio.channels.SelectionKey;
0: import java.nio.channels.SocketChannel;
1: 
1: import org.apache.activemq.transport.nio.SelectorManager.Listener;
1: 
1: /**
1:  * 
0:  * @author chirino
1:  */
0: final public class SelectorSelection {
1: 
0: 	private final SelectorWorker worker;
0: 	private final SelectionKey key;
0: 	private final Listener listener;
0: 	private int interest;
1: 
1: 
0: 	public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
0: 		this.worker = worker;
0: 		this.listener = listener;
0: 		this.key = socketChannel.register(worker.selector, 0, this);
0: 		worker.incrementUseCounter();
1: 	}
1: 
0: 	public void setInterestOps(int ops) {
0: 		interest = ops;
1: 	}
1: 
0: 	public void enable() {
0: 		key.interestOps(interest);				
0: 		worker.selector.wakeup();
1: 	}
1: 
0: 	public void disable() {
0: 		key.interestOps(0);
1: 	}
1: 
0: 	public void close() {
0: 		worker.decrementUseCounter();
0: 		key.cancel();
0: 		worker.selector.wakeup();
1: 	}
1: 
0: 	public void onSelect() {
0: 		listener.onSelect(this);
1: 	}
1: 
0: 	public void onError(Throwable e) {
0: 		listener.onError(this, e);
1: 	}
1: 
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.nio.channels.ClosedChannelException;
0: import java.nio.channels.SelectionKey;
0: import java.nio.channels.SocketChannel;
0: 
0: import org.apache.activemq.transport.nio.SelectorManager.Listener;
0: 
0: /**
0:  * 
0:  * @author chirino
0:  */
0: final public class SelectorSelection {
0: 
0: 	private final SelectorWorker worker;
0: 	private final SelectionKey key;
0: 	private final Listener listener;
0: 	private int interest;
0: 
0: 
0: 	public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
0: 		this.worker = worker;
0: 		this.listener = listener;
0: 		this.key = socketChannel.register(worker.selector, 0, this);
0: 		worker.incrementUseCounter();
0: 	}
0: 
0: 	public void setInterestOps(int ops) {
0: 		interest = ops;
0: 	}
0: 
0: 	public void enable() {
0: 		key.interestOps(interest);				
0: 		worker.selector.wakeup();
0: 	}
0: 
0: 	public void disable() {
0: 		key.interestOps(0);
0: 	}
0: 
0: 	public void close() {
0: 		worker.decrementUseCounter();
0: 		key.cancel();
0: 		worker.selector.wakeup();
0: 	}
0: 
0: 	public void onSelect() {
0: 		listener.onSelect(this);
0: 	}
0: 
0: 	public void onError(Throwable e) {
0: 		listener.onError(this, e);
0: 	}
0: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:db68273
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:         
0:             if (!worker.isRunning()) {
0:                 worker.close();
0:             }
0:         } catch (IOException e) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:63baaf0
/////////////////////////////////////////////////////////////////////////
0:         
0:         // Lock when mutating state of the selector
0:         worker.lock();
0:         
0:         try {
0:             this.key = socketChannel.register(worker.selector, 0, this);
0:             worker.incrementUseCounter();
0:         } finally {
0:             worker.unlock();
0:         }
/////////////////////////////////////////////////////////////////////////
0:     	
0:         // Lock when mutating state of the selector
0:         worker.lock();
0:         try {
0:             key.cancel();
0:         } finally {
0:             worker.unlock();
0:         }
commit:634a52a
/////////////////////////////////////////////////////////////////////////
0:         if (key.isValid()) {
0:             key.interestOps(0);
0:         }
============================================================================