1:bfaff9b: /**
1:bfaff9b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bfaff9b:  * contributor license agreements.  See the NOTICE file distributed with
1:bfaff9b:  * this work for additional information regarding copyright ownership.
1:bfaff9b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bfaff9b:  * (the "License"); you may not use this file except in compliance with
1:bfaff9b:  * the License.  You may obtain a copy of the License at
2:bfaff9b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bfaff9b:  *
1:bfaff9b:  * Unless required by applicable law or agreed to in writing, software
1:bfaff9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bfaff9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bfaff9b:  * See the License for the specific language governing permissions and
1:bfaff9b:  * limitations under the License.
1:bfaff9b:  */
1:bfaff9b: package org.apache.activemq.broker.region;
9:bfaff9b: 
1:bfaff9b: import java.io.IOException;
1:bfaff9b: import java.util.Set;
1:bfaff9b: import org.apache.activemq.advisory.AdvisorySupport;
1:13829ef: import org.apache.activemq.broker.BrokerService;
1:bfaff9b: import org.apache.activemq.broker.ConnectionContext;
1:bfaff9b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:bfaff9b: import org.apache.activemq.command.ActiveMQDestination;
1:bfaff9b: import org.apache.activemq.command.ActiveMQQueue;
1:bfaff9b: import org.apache.activemq.command.ActiveMQTempDestination;
1:bfaff9b: import org.apache.activemq.command.ActiveMQTopic;
1:bfaff9b: import org.apache.activemq.command.SubscriptionInfo;
1:bfaff9b: import org.apache.activemq.store.MessageStore;
1:bfaff9b: import org.apache.activemq.store.PersistenceAdapter;
1:bfaff9b: import org.apache.activemq.store.TopicMessageStore;
1:bfaff9b: import org.apache.activemq.thread.TaskRunnerFactory;
1:bfaff9b: 
1:bfaff9b: /**
1:230a86c:  * Creates standard ActiveMQ implementations of
1:230a86c:  * {@link org.apache.activemq.broker.region.Destination}.
1:bfaff9b:  * 
1:bfaff9b:  * @author fateev@amazon.com
1:0bbc0ac:  * 
1:bfaff9b:  */
1:230a86c: public class DestinationFactoryImpl extends DestinationFactory {
1:bfaff9b: 
1:bfaff9b:     protected final TaskRunnerFactory taskRunnerFactory;
1:bfaff9b:     protected final PersistenceAdapter persistenceAdapter;
1:bfaff9b:     protected RegionBroker broker;
1:13829ef:     private final BrokerService brokerService;
1:bfaff9b: 
1:13829ef:     public DestinationFactoryImpl(BrokerService brokerService, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
1:13829ef:         this.brokerService = brokerService;
1:230a86c:         this.taskRunnerFactory = taskRunnerFactory;
1:230a86c:         if (persistenceAdapter == null) {
1:bfaff9b:             throw new IllegalArgumentException("null persistenceAdapter");
1:bfaff9b:         }
1:230a86c:         this.persistenceAdapter = persistenceAdapter;
1:bfaff9b:     }
1:bfaff9b: 
1:1a5ad28:     @Override
1:230a86c:     public void setRegionBroker(RegionBroker broker) {
1:230a86c:         if (broker == null) {
1:bfaff9b:             throw new IllegalArgumentException("null broker");
1:bfaff9b:         }
1:230a86c:         this.broker = broker;
1:bfaff9b:     }
1:bfaff9b: 
1:1a5ad28:     @Override
1:933eb2f:     public Set<ActiveMQDestination> getDestinations() {
1:bfaff9b:         return persistenceAdapter.getDestinations();
1:bfaff9b:     }
1:a414c20: 
1:bfaff9b:     /**
1:bfaff9b:      * @return instance of {@link Queue} or {@link Topic}
1:bfaff9b:      */
1:1a5ad28:     @Override
1:230a86c:     public Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception {
1:230a86c:         if (destination.isQueue()) {
1:230a86c:             if (destination.isTemporary()) {
2:230a86c:                 final ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destination;
1:cd54a16:                 Queue queue = new TempQueue(brokerService, destination, null, destinationStatistics, taskRunnerFactory);
1:1005fc5:                 configureQueue(queue, destination);
1:cd54a16:                 queue.initialize();
1:cd54a16:                 return queue;
1:230a86c:             } else {
1:230a86c:                 MessageStore store = persistenceAdapter.createQueueMessageStore((ActiveMQQueue)destination);
1:13829ef:                 Queue queue = new Queue(brokerService, destination, store, destinationStatistics, taskRunnerFactory);
1:230a86c:                 configureQueue(queue, destination);
1:3a9299b:                 queue.initialize();
1:bfaff9b:                 return queue;
1:bfaff9b:             }
1:230a86c:         } else if (destination.isTemporary()) {
1:cd54a16:             
1:cd54a16:             Topic topic = new Topic(brokerService, destination, null, destinationStatistics, taskRunnerFactory);
1:1005fc5:             configureTopic(topic, destination);
1:cd54a16:             topic.initialize();
1:cd54a16:             return topic;
1:230a86c:         } else {
1:230a86c:             TopicMessageStore store = null;
1:230a86c:             if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:230a86c:                 store = persistenceAdapter.createTopicMessageStore((ActiveMQTopic)destination);
1:bfaff9b:             }
1:13829ef:             Topic topic = new Topic(brokerService, destination, store, destinationStatistics, taskRunnerFactory);
1:230a86c:             configureTopic(topic, destination);
1:83c3dca:             topic.initialize();
1:bfaff9b:             return topic;
1:bfaff9b:         }
1:bfaff9b:     }
1:a414c20: 
1:1a5ad28:     @Override
1:07b6a38:     public void removeDestination(Destination dest) {
1:07b6a38:         ActiveMQDestination destination = dest.getActiveMQDestination();
1:07b6a38:         if (!destination.isTemporary()) {
1:bfaff9b:             if (destination.isQueue()) {
1:07b6a38:                 persistenceAdapter.removeQueueMessageStore((ActiveMQQueue) destination);
1:bfaff9b:             }
1:07b6a38:             else if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:07b6a38:                 persistenceAdapter.removeTopicMessageStore((ActiveMQTopic) destination);
1:bfaff9b:             }
1:bfaff9b:         }
3:07b6a38:     }
1:3a9299b: 
1:230a86c:     protected void configureQueue(Queue queue, ActiveMQDestination destination) {
1:230a86c:         if (broker == null) {
1:bfaff9b:             throw new IllegalStateException("broker property is not set");
1:bfaff9b:         }
1:230a86c:         if (broker.getDestinationPolicy() != null) {
1:230a86c:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:230a86c:             if (entry != null) {
1:23cda2d:                 entry.configure(broker,queue);
1:bfaff9b:             }
1:bfaff9b:         }
1:bfaff9b:     }
1:bfaff9b: 
1:230a86c:     protected void configureTopic(Topic topic, ActiveMQDestination destination) {
1:230a86c:         if (broker == null) {
1:bfaff9b:             throw new IllegalStateException("broker property is not set");
1:bfaff9b:         }
1:230a86c:         if (broker.getDestinationPolicy() != null) {
1:230a86c:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:230a86c:             if (entry != null) {
1:1a5ad28:                 entry.configure(broker,topic);
1:bfaff9b:             }
1:bfaff9b:         }
1:07b6a38:     }
1:bfaff9b: 
1:1a5ad28:     @Override
1:230a86c:     public long getLastMessageBrokerSequenceId() throws IOException {
1:bfaff9b:         return persistenceAdapter.getLastMessageBrokerSequenceId();
1:bfaff9b:     }
1:bfaff9b: 
1:230a86c:     public PersistenceAdapter getPersistenceAdapter() {
1:bfaff9b:         return persistenceAdapter;
1:bfaff9b:     }
1:bfaff9b: 
1:1a5ad28:     @Override
1:230a86c:     public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException {
1:bfaff9b:         return persistenceAdapter.createTopicMessageStore(topic).getAllSubscriptions();
1:bfaff9b:     }
1:bfaff9b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:13829ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     private final BrokerService brokerService;
1:     public DestinationFactoryImpl(BrokerService brokerService, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
1:         this.brokerService = brokerService;
/////////////////////////////////////////////////////////////////////////
0:                 return new Queue(brokerService, destination, null, destinationStatistics, taskRunnerFactory) {
/////////////////////////////////////////////////////////////////////////
1:                 Queue queue = new Queue(brokerService, destination, store, destinationStatistics, taskRunnerFactory);
0:             return new Topic(brokerService, destination, null, destinationStatistics, taskRunnerFactory) {
/////////////////////////////////////////////////////////////////////////
1:             Topic topic = new Topic(brokerService, destination, store, destinationStatistics, taskRunnerFactory);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public Set<ActiveMQDestination> getDestinations() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Creates standard ActiveMQ implementations of
1:  * {@link org.apache.activemq.broker.region.Destination}.
1: public class DestinationFactoryImpl extends DestinationFactory {
0:     public DestinationFactoryImpl(UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
0:         this.memoryManager = memoryManager;
1:         this.taskRunnerFactory = taskRunnerFactory;
1:         if (persistenceAdapter == null) {
1:         this.persistenceAdapter = persistenceAdapter;
1:     public void setRegionBroker(RegionBroker broker) {
1:         if (broker == null) {
1:         this.broker = broker;
0:     public Set getDestinations() {
1:     public Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception {
1:         if (destination.isQueue()) {
1:             if (destination.isTemporary()) {
1:                 final ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destination;
0:                 return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory, broker.getTempDataStore()) {
0:                     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
0:                         // Only consumers on the same connection can consume
0:                         // from
0:                         if (!tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId())) {
0:                             throw new JMSException("Cannot subscribe to remote temporary destination: " + tempDest);
0:                         super.addSubscription(context, sub);
1:             } else {
1:                 MessageStore store = persistenceAdapter.createQueueMessageStore((ActiveMQQueue)destination);
0:                 Queue queue = new Queue(broker.getRoot(), destination, memoryManager, store, destinationStatistics, taskRunnerFactory, broker.getTempDataStore());
1:                 configureQueue(queue, destination);
1:         } else if (destination.isTemporary()) {
1:             final ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destination;
0:             return new Topic(broker.getRoot(), destination, null, memoryManager, destinationStatistics, taskRunnerFactory) {
0:                 public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
0:                     // Only consumers on the same connection can consume from
0:                     if (!tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId())) {
0:                         throw new JMSException("Cannot subscribe to remote temporary destination: " + tempDest);
0:                     super.addSubscription(context, sub);
1:         } else {
1:             TopicMessageStore store = null;
1:             if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:                 store = persistenceAdapter.createTopicMessageStore((ActiveMQTopic)destination);
0:             Topic topic = new Topic(broker.getRoot(), destination, store, memoryManager, destinationStatistics, taskRunnerFactory);
1:             configureTopic(topic, destination);
1:     protected void configureQueue(Queue queue, ActiveMQDestination destination) {
1:         if (broker == null) {
1:         if (broker.getDestinationPolicy() != null) {
1:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:             if (entry != null) {
0:                 entry.configure(queue, broker.getTempDataStore());
1:     protected void configureTopic(Topic topic, ActiveMQDestination destination) {
1:         if (broker == null) {
1:         if (broker.getDestinationPolicy() != null) {
1:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:             if (entry != null) {
1:     public long getLastMessageBrokerSequenceId() throws IOException {
1:     public PersistenceAdapter getPersistenceAdapter() {
1:     public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException {
author:Gary Tully
-------------------------------------------------------------------------------
commit:1005fc5
/////////////////////////////////////////////////////////////////////////
1:                 configureQueue(queue, destination);
/////////////////////////////////////////////////////////////////////////
1:             configureTopic(topic, destination);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 entry.configure(broker,topic);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:4a6699e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:cd54a16
/////////////////////////////////////////////////////////////////////////
1:                 Queue queue = new TempQueue(brokerService, destination, null, destinationStatistics, taskRunnerFactory);
1:                 queue.initialize();
1:                 return queue;
/////////////////////////////////////////////////////////////////////////
1:             
1:             Topic topic = new Topic(brokerService, destination, null, destinationStatistics, taskRunnerFactory);
1:             topic.initialize();
1:             return topic;
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
0:                 return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory) {
/////////////////////////////////////////////////////////////////////////
0:                 Queue queue = new Queue(broker.getRoot(), destination, memoryManager, store, destinationStatistics, taskRunnerFactory);
/////////////////////////////////////////////////////////////////////////
1:                 entry.configure(broker,queue);
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:             topic.initialize();
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     protected final SystemUsage memoryManager;
0:     public DestinationFactoryImpl(SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0: public class DestinationFactoryImpl extends DestinationFactory{
0:     public DestinationFactoryImpl(UsageManager memoryManager,TaskRunnerFactory taskRunnerFactory,
0:             PersistenceAdapter persistenceAdapter){
0:         this.memoryManager=memoryManager;
0:         this.taskRunnerFactory=taskRunnerFactory;
0:         if(persistenceAdapter==null){
0:         this.persistenceAdapter=persistenceAdapter;
0:     public void setRegionBroker(RegionBroker broker){
0:         if(broker==null){
0:         this.broker=broker;
0:     public Set getDestinations(){
0:     public Destination createDestination(ConnectionContext context,ActiveMQDestination destination,
0:             DestinationStatistics destinationStatistics) throws Exception{
0:         if(destination.isQueue()){
0:             if(destination.isTemporary()){
0:                 final ActiveMQTempDestination tempDest=(ActiveMQTempDestination)destination;
0:                 return new Queue(broker.getRoot(),destination,memoryManager,null,
0:                         destinationStatistics,taskRunnerFactory,broker.getTempDataStore()){
1: 
0:                     public void addSubscription(ConnectionContext context,Subscription sub) throws Exception{
0:                         if(!tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId())){
0:                         super.addSubscription(context,sub);
0:             }else{
0:                 MessageStore store=persistenceAdapter.createQueueMessageStore((ActiveMQQueue)destination);
0:                 Queue queue=new Queue(broker.getRoot(),destination,memoryManager,store,
0:                         destinationStatistics,taskRunnerFactory,broker.getTempDataStore());
0:                 configureQueue(queue,destination);
0:         }else if(destination.isTemporary()){
0:             final ActiveMQTempDestination tempDest=(ActiveMQTempDestination)destination;
0:             return new Topic(broker.getRoot(),destination,null,memoryManager,
0:                     destinationStatistics,taskRunnerFactory){
1: 
0:                 public void addSubscription(ConnectionContext context,Subscription sub) throws Exception{
0:                     if(!tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId())){
0:                     super.addSubscription(context,sub);
0:         }else{
0:             TopicMessageStore store=null;
0:             if(!AdvisorySupport.isAdvisoryTopic(destination)){
0:                 store=persistenceAdapter.createTopicMessageStore((ActiveMQTopic)destination);
0:             Topic topic=new Topic(broker.getRoot(),destination,store,memoryManager,
0:                     destinationStatistics,taskRunnerFactory);
0:             configureTopic(topic,destination);
0:     protected void configureQueue(Queue queue,ActiveMQDestination destination){
0:         if(broker==null){
0:         if(broker.getDestinationPolicy()!=null){
0:             PolicyEntry entry=broker.getDestinationPolicy().getEntryFor(destination);
0:             if(entry!=null){
0:     protected void configureTopic(Topic topic,ActiveMQDestination destination){
0:         if(broker==null){
0:         if(broker.getDestinationPolicy()!=null){
0:             PolicyEntry entry=broker.getDestinationPolicy().getEntryFor(destination);
0:             if(entry!=null){
0:     public long getLastMessageBrokerSequenceId() throws IOException{
0:     public PersistenceAdapter getPersistenceAdapter(){
0:     public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException{
commit:d2e6062
/////////////////////////////////////////////////////////////////////////
0:                 return new Queue(destination, memoryManager, null, destinationStatistics, taskRunnerFactory,broker.getTempDataStore()) {
/////////////////////////////////////////////////////////////////////////
0:                 Queue queue = new Queue(destination, memoryManager, store, destinationStatistics, taskRunnerFactory,broker.getTempDataStore());
commit:e006780
/////////////////////////////////////////////////////////////////////////
0:                 entry.configure(queue,broker.getTempDataStore());
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
1:                    
/////////////////////////////////////////////////////////////////////////
1:                 queue.initialize();
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.IOException;
1: import java.util.Set;
1: 
0: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.SubscriptionInfo;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
1: /**
0:  * Creates standard ActiveMQ implementations of {@link org.apache.activemq.broker.region.Destination}.
1:  * 
1:  * @author fateev@amazon.com
0:  * @version $Revision$
1:  */
0: public class DestinationFactoryImpl extends DestinationFactory {
1: 
0:     protected final UsageManager memoryManager;
1:     protected final TaskRunnerFactory taskRunnerFactory;
1:     protected final PersistenceAdapter persistenceAdapter;
1:     protected RegionBroker broker;
1: 
0:     public DestinationFactoryImpl(UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
0:             PersistenceAdapter persistenceAdapter) {
0:         this.memoryManager = memoryManager;
0:         this.taskRunnerFactory = taskRunnerFactory;
0:         if (persistenceAdapter == null) {
1:             throw new IllegalArgumentException("null persistenceAdapter");
1:         }
0:         this.persistenceAdapter = persistenceAdapter;
1:     }
1: 
0:     public void setRegionBroker(RegionBroker broker) {
0:         if (broker == null) {
1:             throw new IllegalArgumentException("null broker");
1:         }
0:         this.broker = broker;
1:     }
1: 
0:     public Set getDestinations() {
1:         return persistenceAdapter.getDestinations();
1:     }
1: 
1:     /**
1:      * @return instance of {@link Queue} or {@link Topic}
1:      */
0:     public Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception {
1:         if (destination.isQueue()) {
0:             if (destination.isTemporary()) {
0:                 final ActiveMQTempDestination tempDest = (ActiveMQTempDestination) destination;
0:                 return new Queue(destination, memoryManager, null, destinationStatistics, taskRunnerFactory) {
1:                     
0:                     public void addSubscription(ConnectionContext context,Subscription sub) throws Exception {
0:                         // Only consumers on the same connection can consume from 
0:                         // the temporary destination
0:                         if( !tempDest.getConnectionId().equals( sub.getConsumerInfo().getConsumerId().getConnectionId() ) ) {
0:                             throw new JMSException("Cannot subscribe to remote temporary destination: "+tempDest);
1:                         }
0:                         super.addSubscription(context, sub);
0:                     };
0:                 };
0:             } else {
0:                 MessageStore store = persistenceAdapter.createQueueMessageStore((ActiveMQQueue) destination);
0:                 Queue queue = new Queue(destination, memoryManager, store, destinationStatistics, taskRunnerFactory);
0:                 configureQueue(queue, destination);
1:                 return queue;
1:             }
0:         } else if (destination.isTemporary()){
0:             final ActiveMQTempDestination tempDest = (ActiveMQTempDestination) destination;
0:             return new Topic(destination, null, memoryManager, destinationStatistics, taskRunnerFactory) {
0:                 public void addSubscription(ConnectionContext context,Subscription sub) throws Exception {
0:                     // Only consumers on the same connection can consume from 
0:                     // the temporary destination
0:                     if( !tempDest.getConnectionId().equals( sub.getConsumerInfo().getConsumerId().getConnectionId() ) ) {
0:                         throw new JMSException("Cannot subscribe to remote temporary destination: "+tempDest);
1:                     }
0:                     super.addSubscription(context, sub);
0:                 };
0:             };
0:         } else {
0:             TopicMessageStore store = null;
0:             if (!AdvisorySupport.isAdvisoryTopic(destination)) {
0:                 store = persistenceAdapter.createTopicMessageStore((ActiveMQTopic) destination);
1:             }
1:             
0:             Topic topic = new Topic(destination, store, memoryManager, destinationStatistics, taskRunnerFactory);
0:             configureTopic(topic, destination);
1:             
1:             return topic;
1:         }
1:     }
1: 
0:     protected void configureQueue(Queue queue, ActiveMQDestination destination) {
0:         if (broker == null) {
1:             throw new IllegalStateException("broker property is not set");
1:         }
0:         if (broker.getDestinationPolicy() != null) {
0:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
0:             if (entry != null) {
0:                 entry.configure(queue);
1:             }
1:         }
1:     }
1: 
0:     protected void configureTopic(Topic topic, ActiveMQDestination destination) {
0:         if (broker == null) {
1:             throw new IllegalStateException("broker property is not set");
1:         }
0:         if (broker.getDestinationPolicy() != null) {
0:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
0:             if (entry != null) {
0:                 entry.configure(topic);
1:             }
1:         }
1:     }
1: 
0:     public long getLastMessageBrokerSequenceId() throws IOException {
1:         return persistenceAdapter.getLastMessageBrokerSequenceId();
1:     }
1: 
0:     public PersistenceAdapter getPersistenceAdapter() {
1:         return persistenceAdapter;
1:     }
1: 
0:     public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException {
1:         return persistenceAdapter.createTopicMessageStore(topic).getAllSubscriptions();
1:     }
1: 
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:07b6a38
/////////////////////////////////////////////////////////////////////////
1:     public void removeDestination(Destination dest) {
1:         ActiveMQDestination destination = dest.getActiveMQDestination();
1:         if (!destination.isTemporary()) {
0:             if (destination.isQueue()) {
1:                 persistenceAdapter.removeQueueMessageStore((ActiveMQQueue) destination);
1:             }
1:             else if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:                 persistenceAdapter.removeTopicMessageStore((ActiveMQTopic) destination);
1:             }
1:         }
1:     }
0: 
============================================================================