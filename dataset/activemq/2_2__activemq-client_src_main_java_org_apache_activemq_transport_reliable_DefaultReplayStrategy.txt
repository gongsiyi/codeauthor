1:8d589ec: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8d589ec:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d589ec:  *
1:8d589ec:  * Unless required by applicable law or agreed to in writing, software
1:8d589ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d589ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d589ec:  * See the License for the specific language governing permissions and
1:8d589ec:  * limitations under the License.
1:8d589ec:  */
1:8d589ec: package org.apache.activemq.transport.reliable;
1:8d589ec: 
1:8d589ec: import java.io.IOException;
1:8d589ec: 
1:8d589ec: /**
1:8d589ec:  * Throws an exception if packets are dropped causing the transport to be
1:8d589ec:  * closed.
1:0bbc0ac:  * 
1:8d589ec:  * 
1:8d589ec:  */
1:8d589ec: public class DefaultReplayStrategy implements ReplayStrategy {
1:8d589ec: 
1:8d589ec:     private int maximumDifference = 5;
1:8d589ec: 
1:8d589ec:     public DefaultReplayStrategy() {
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public DefaultReplayStrategy(int maximumDifference) {
1:8d589ec:         this.maximumDifference = maximumDifference;
1:8d589ec:     }
1:8d589ec: 
1:f3ef1a9:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException {
1:8d589ec:         int difference = actualCounter - expectedCounter;
1:8d589ec:         long count = Math.abs(difference);
1:8d589ec:         if (count > maximumDifference) {
1:f3ef1a9:             int upperLimit = actualCounter - 1;
1:8d589ec:             if (upperLimit < expectedCounter) {
1:8d589ec:                 upperLimit = expectedCounter;
1:8d589ec:             }
1:f3ef1a9:             transport.requestReplay(expectedCounter, upperLimit);
1:8d589ec:         }
1:8d589ec: 
1:8d589ec:         // lets discard old commands
1:8d589ec:         return difference > 0;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void onReceivedPacket(ReliableTransport transport, long expectedCounter) {
1:8d589ec:         // TODO we could pro-actively evict stuff from the buffer if we knew there was only one client
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public int getMaximumDifference() {
1:8d589ec:         return maximumDifference;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     /**
1:8d589ec:      * Sets the maximum allowed difference between an expected packet and an
1:8d589ec:      * actual packet before an error occurs
1:8d589ec:      */
1:8d589ec:     public void setMaximumDifference(int maximumDifference) {
1:8d589ec:         this.maximumDifference = maximumDifference;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException {
1:             int upperLimit = actualCounter - 1;
1:             transport.requestReplay(expectedCounter, upperLimit);
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Throws an exception if packets are dropped causing the transport to be
1:  * closed.
1:  * 
0:  * @version $Revision$
1:  */
1: public class DefaultReplayStrategy implements ReplayStrategy {
1: 
1:     private int maximumDifference = 5;
1: 
1:     public DefaultReplayStrategy() {
1:     }
1: 
1:     public DefaultReplayStrategy(int maximumDifference) {
1:         this.maximumDifference = maximumDifference;
1:     }
1: 
0:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter) throws IOException {
1:         int difference = actualCounter - expectedCounter;
1:         long count = Math.abs(difference);
1:         if (count > maximumDifference) {
0:             int upperLimit = actualCounter;
1:             if (upperLimit < expectedCounter) {
1:                 upperLimit = expectedCounter;
1:             }
0:             transport.requestReplay(expectedCounter, upperLimit );
1:         }
1: 
1:         // lets discard old commands
1:         return difference > 0;
1:     }
1: 
1:     public void onReceivedPacket(ReliableTransport transport, long expectedCounter) {
1:         // TODO we could pro-actively evict stuff from the buffer if we knew there was only one client
1:     }
1: 
1:     public int getMaximumDifference() {
1:         return maximumDifference;
1:     }
1: 
1:     /**
1:      * Sets the maximum allowed difference between an expected packet and an
1:      * actual packet before an error occurs
1:      */
1:     public void setMaximumDifference(int maximumDifference) {
1:         this.maximumDifference = maximumDifference;
1:     }
1: 
1: }
============================================================================