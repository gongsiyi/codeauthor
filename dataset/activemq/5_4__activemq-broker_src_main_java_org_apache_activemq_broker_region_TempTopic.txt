1:cd54a16: /**
1:cd54a16:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd54a16:  * contributor license agreements.  See the NOTICE file distributed with
1:cd54a16:  * this work for additional information regarding copyright ownership.
1:cd54a16:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd54a16:  * (the "License"); you may not use this file except in compliance with
1:cd54a16:  * the License.  You may obtain a copy of the License at
1:cd54a16:  *
1:cd54a16:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cd54a16:  *
1:cd54a16:  * Unless required by applicable law or agreed to in writing, software
1:cd54a16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd54a16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd54a16:  * See the License for the specific language governing permissions and
1:cd54a16:  * limitations under the License.
1:cd54a16:  */
1:cd54a16: package org.apache.activemq.broker.region;
3:cd54a16: 
1:cd54a16: import org.apache.activemq.broker.BrokerService;
1:cd54a16: import org.apache.activemq.broker.ConnectionContext;
1:cd54a16: import org.apache.activemq.command.ActiveMQDestination;
1:cd54a16: import org.apache.activemq.command.ActiveMQTempDestination;
1:cd54a16: import org.apache.activemq.store.TopicMessageStore;
1:cd54a16: import org.apache.activemq.thread.Task;
1:cd54a16: import org.apache.activemq.thread.TaskRunnerFactory;
1:cd54a16: 
1:cd54a16: /**
1:cd54a16:  * The Topic is a destination that sends a copy of a message to every active
1:cd54a16:  * Subscription registered.
1:b0c2a40:  * 
1:cd54a16:  * 
1:cd54a16:  */
1:cd54a16: public class TempTopic  extends Topic  implements Task{
1:cd54a16:     private final ActiveMQTempDestination tempDest;
1:cd54a16:     /**
1:cd54a16:      * @param brokerService
1:cd54a16:      * @param destination
1:cd54a16:      * @param store
1:cd54a16:      * @param parentStats
1:cd54a16:      * @param taskFactory
1:cd54a16:      * @throws Exception
1:cd54a16:      */
1:cd54a16:     public TempTopic(BrokerService brokerService,
1:cd54a16:             ActiveMQDestination destination, TopicMessageStore store,
1:cd54a16:             DestinationStatistics parentStats, TaskRunnerFactory taskFactory)
1:cd54a16:             throws Exception {
1:cd54a16:         super(brokerService, destination, store, parentStats, taskFactory);
1:cd54a16:         this.tempDest = (ActiveMQTempDestination) destination;
1:cd54a16: 
4:cd54a16:     }
1:254d920:     
1:cd54a16:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:cd54a16:         // Only consumers on the same connection can consume from
1:cd54a16:         // the temporary destination
1:cd54a16:         // However, we could have failed over - and we do this
1:cd54a16:         // check client side anyways ....
1:cd54a16:         if (!context.isFaultTolerant()
1:cd54a16:                 && (!context.isNetworkConnection() && !tempDest
1:cd54a16:                         .getConnectionId().equals(
1:cd54a16:                                 sub.getConsumerInfo().getConsumerId()
1:cd54a16:                                         .getConnectionId()))) {
1:cd54a16: 
1:cd54a16:             tempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());
1:44ef96e:             if (LOG.isDebugEnabled()) {
1:44e0eaf:                 LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
1:44ef96e:             }
1:254d920:         }
1:cd54a16:         super.addSubscription(context, sub);
1:254d920:     } 
1:cd54a16:     
1:cd54a16:     public void initialize() {
1:254d920:     }
1:cd54a16: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:44e0eaf
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:44ef96e
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
1:             }
author:Gary Tully
-------------------------------------------------------------------------------
commit:d55a392
/////////////////////////////////////////////////////////////////////////
commit:254d920
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
0:     public boolean isActive() {
0:         boolean isActive = super.isActive();
0:         if (isActive && brokerService.isAllowTempAutoCreationOnSend()) {
0:             synchronized (consumers) {
0:                 isActive = hasRegularConsumers(consumers);
1:             }
1:         }
0:         return isActive;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cd54a16
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTempDestination;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.thread.Task;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
1: /**
1:  * The Topic is a destination that sends a copy of a message to every active
1:  * Subscription registered.
1:  * 
0:  * @version $Revision: 1.21 $
1:  */
1: public class TempTopic  extends Topic  implements Task{
1:     private final ActiveMQTempDestination tempDest;
1:     /**
1:      * @param brokerService
1:      * @param destination
1:      * @param store
1:      * @param parentStats
1:      * @param taskFactory
1:      * @throws Exception
1:      */
1:     public TempTopic(BrokerService brokerService,
1:             ActiveMQDestination destination, TopicMessageStore store,
1:             DestinationStatistics parentStats, TaskRunnerFactory taskFactory)
1:             throws Exception {
1:         super(brokerService, destination, store, parentStats, taskFactory);
1:         this.tempDest = (ActiveMQTempDestination) destination;
1: 
1:     }
1:     
1:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:         // Only consumers on the same connection can consume from
1:         // the temporary destination
1:         // However, we could have failed over - and we do this
1:         // check client side anyways ....
1:         if (!context.isFaultTolerant()
1:                 && (!context.isNetworkConnection() && !tempDest
1:                         .getConnectionId().equals(
1:                                 sub.getConsumerInfo().getConsumerId()
1:                                         .getConnectionId()))) {
1: 
1:             tempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());
0:             log.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
1:         }
1:         super.addSubscription(context, sub);
1:     } 
1:     
1:     public void initialize() {
1:     }
1:    
1: }
============================================================================