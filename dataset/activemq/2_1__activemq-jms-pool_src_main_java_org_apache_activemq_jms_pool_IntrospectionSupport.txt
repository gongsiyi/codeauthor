1:b66559e: /**
1:b66559e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b66559e:  * contributor license agreements.  See the NOTICE file distributed with
1:b66559e:  * this work for additional information regarding copyright ownership.
1:b66559e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b66559e:  * (the "License"); you may not use this file except in compliance with
1:b66559e:  * the License.  You may obtain a copy of the License at
1:b66559e:  *
1:b66559e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b66559e:  *
1:b66559e:  * Unless required by applicable law or agreed to in writing, software
1:b66559e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b66559e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b66559e:  * See the License for the specific language governing permissions and
1:b66559e:  * limitations under the License.
1:b66559e:  */
1:b66559e: package org.apache.activemq.jms.pool;
1:b66559e: 
1:b66559e: import java.lang.reflect.Method;
1:b66559e: import java.util.Iterator;
1:b66559e: import java.util.Map;
1:b66559e: import java.util.Map.Entry;
1:b66559e: import javax.net.ssl.SSLServerSocket;
1:b66559e: import org.slf4j.Logger;
1:b66559e: import org.slf4j.LoggerFactory;
1:b66559e: 
1:b66559e: public final class IntrospectionSupport {
1:b66559e: 
1:b66559e:     private static final Logger LOG = LoggerFactory.getLogger(IntrospectionSupport.class);
1:b66559e: 
1:b66559e:     private IntrospectionSupport() {
1:b66559e:     }
1:b66559e: 
1:b66559e:     public static boolean setProperties(Object target, Map props) {
1:b66559e:         boolean rc = false;
1:b66559e: 
1:b66559e:         if (target == null) {
1:b66559e:             throw new IllegalArgumentException("target was null.");
1:b66559e:         }
1:b66559e:         if (props == null) {
1:b66559e:             throw new IllegalArgumentException("props was null.");
1:b66559e:         }
1:b66559e: 
1:b66559e:         for (Iterator<?> iter = props.entrySet().iterator(); iter.hasNext();) {
1:b66559e:             Entry<?,?> entry = (Entry<?,?>)iter.next();
1:b66559e:             if (setProperty(target, (String)entry.getKey(), entry.getValue())) {
1:b66559e:                 iter.remove();
1:b66559e:                 rc = true;
1:b66559e:             }
1:b66559e:         }
1:b66559e: 
1:b66559e:         return rc;
1:b66559e:     }
1:b66559e: 
1:b66559e:     public static boolean setProperty(Object target, String name, Object value) {
1:b66559e:         try {
1:b66559e:             Class<?> clazz = target.getClass();
1:b66559e:             if (target instanceof SSLServerSocket) {
1:b66559e:                 // overcome illegal access issues with internal implementation class
1:b66559e:                 clazz = SSLServerSocket.class;
1:b66559e:             }
1:b66559e:             Method setter = findSetterMethod(clazz, name);
1:b66559e:             if (setter == null) {
1:b66559e:                 return false;
1:b66559e:             }
1:b66559e: 
1:b66559e:             // If the type is null or it matches the needed type, just use the
1:b66559e:             // value directly
1:b66559e:             if (value == null || value.getClass() == setter.getParameterTypes()[0]) {
1:b66559e:                 setter.invoke(target, value);
1:b66559e:             } else {
1:b66559e:                 // We need to convert it
1:b66559e:                 setter.invoke(target, convert(value, setter.getParameterTypes()[0]));
1:b66559e:             }
1:b66559e:             return true;
1:b66559e:         } catch (Exception e) {
1:b66559e:             LOG.error(String.format("Could not set property %s on %s", name, target), e);
1:b66559e:             return false;
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     private static Object convert(Object value, Class to) {
1:b66559e:         if (value == null) {
1:b66559e:             // lets avoid NullPointerException when converting to boolean for null values
1:b66559e:             if (boolean.class.isAssignableFrom(to)) {
1:b66559e:                 return Boolean.FALSE;
1:b66559e:             }
1:b66559e:             return null;
1:b66559e:         }
1:b66559e: 
1:b66559e:         // eager same instance type test to avoid the overhead of invoking the type converter
1:b66559e:         // if already same type
1:b66559e:         if (to.isAssignableFrom(value.getClass())) {
1:b66559e:             return to.cast(value);
1:b66559e:         }
1:b66559e: 
1:b66559e:         if (boolean.class.isAssignableFrom(to) && value instanceof String) {
1:b66559e:             return Boolean.valueOf((String)value);
1:b66559e:         }
1:b66559e: 
1:b66559e:         throw new IllegalArgumentException("Cannot convert from " + value.getClass()
1:b66559e:                     + " to " + to + " with value " + value);
1:b66559e:     }
1:b66559e: 
1:b66559e:     private static Method findSetterMethod(Class clazz, String name) {
1:b66559e:         // Build the method name.
1:b66559e:         name = "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
1:b66559e:         Method[] methods = clazz.getMethods();
1:b66559e:         for (Method method : methods) {
1:b66559e:             Class<?> params[] = method.getParameterTypes();
1:b66559e:             if (method.getName().equals(name) && params.length == 1 ) {
1:b66559e:                 return method;
1:b66559e:             }
1:b66559e:         }
1:b66559e:         return null;
1:b66559e:     }
1:b66559e: 
1:b66559e: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import java.lang.reflect.Method;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import javax.net.ssl.SSLServerSocket;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public final class IntrospectionSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(IntrospectionSupport.class);
1: 
1:     private IntrospectionSupport() {
1:     }
1: 
1:     public static boolean setProperties(Object target, Map props) {
1:         boolean rc = false;
1: 
1:         if (target == null) {
1:             throw new IllegalArgumentException("target was null.");
1:         }
1:         if (props == null) {
1:             throw new IllegalArgumentException("props was null.");
1:         }
1: 
1:         for (Iterator<?> iter = props.entrySet().iterator(); iter.hasNext();) {
1:             Entry<?,?> entry = (Entry<?,?>)iter.next();
1:             if (setProperty(target, (String)entry.getKey(), entry.getValue())) {
1:                 iter.remove();
1:                 rc = true;
1:             }
1:         }
1: 
1:         return rc;
1:     }
1: 
1:     public static boolean setProperty(Object target, String name, Object value) {
1:         try {
1:             Class<?> clazz = target.getClass();
1:             if (target instanceof SSLServerSocket) {
1:                 // overcome illegal access issues with internal implementation class
1:                 clazz = SSLServerSocket.class;
1:             }
1:             Method setter = findSetterMethod(clazz, name);
1:             if (setter == null) {
1:                 return false;
1:             }
1: 
1:             // If the type is null or it matches the needed type, just use the
1:             // value directly
1:             if (value == null || value.getClass() == setter.getParameterTypes()[0]) {
1:                 setter.invoke(target, value);
1:             } else {
1:                 // We need to convert it
1:                 setter.invoke(target, convert(value, setter.getParameterTypes()[0]));
1:             }
1:             return true;
1:         } catch (Exception e) {
1:             LOG.error(String.format("Could not set property %s on %s", name, target), e);
1:             return false;
1:         }
1:     }
1: 
1:     private static Object convert(Object value, Class to) {
1:         if (value == null) {
1:             // lets avoid NullPointerException when converting to boolean for null values
1:             if (boolean.class.isAssignableFrom(to)) {
1:                 return Boolean.FALSE;
1:             }
1:             return null;
1:         }
1: 
1:         // eager same instance type test to avoid the overhead of invoking the type converter
1:         // if already same type
1:         if (to.isAssignableFrom(value.getClass())) {
1:             return to.cast(value);
1:         }
1: 
1:         if (boolean.class.isAssignableFrom(to) && value instanceof String) {
1:             return Boolean.valueOf((String)value);
1:         }
1: 
1:         throw new IllegalArgumentException("Cannot convert from " + value.getClass()
1:                     + " to " + to + " with value " + value);
1:     }
1: 
1:     private static Method findSetterMethod(Class clazz, String name) {
1:         // Build the method name.
1:         name = "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
1:         Method[] methods = clazz.getMethods();
1:         for (Method method : methods) {
1:             Class<?> params[] = method.getParameterTypes();
1:             if (method.getName().equals(name) && params.length == 1 ) {
1:                 return method;
1:             }
1:         }
1:         return null;
1:     }
1: 
1: }
============================================================================