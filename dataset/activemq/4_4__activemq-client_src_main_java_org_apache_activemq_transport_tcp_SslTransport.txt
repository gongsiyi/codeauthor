1:31c55f7: /*
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
8:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:6bae959: 
1:1a88ac6: import java.io.IOException;
1:69fad2a: import java.net.Socket;
1:69fad2a: import java.net.SocketException;
1:1a88ac6: import java.net.URI;
1:6bae959: import java.net.UnknownHostException;
1:1a88ac6: import java.security.cert.X509Certificate;
1:dd286e2: import java.util.HashMap;
1:f812e34: 
1:69fad2a: import javax.net.ssl.SSLParameters;
1:1a88ac6: import javax.net.ssl.SSLPeerUnverifiedException;
1:6bae959: import javax.net.ssl.SSLSession;
1:6bae959: import javax.net.ssl.SSLSocket;
1:6bae959: import javax.net.ssl.SSLSocketFactory;
1:6bae959: 
1:74a7a8b: import org.apache.activemq.command.ConnectionInfo;
1:dd286e2: import org.apache.activemq.util.IntrospectionSupport;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:74a7a8b: 
1:1a88ac6: /**
1:1a88ac6:  * A Transport class that uses SSL and client-side certificate authentication.
1:f812e34:  * Client-side certificate authentication must be enabled through the
1:f812e34:  * constructor. By default, this class will have the same client authentication
1:f812e34:  * behavior as the socket it is passed. This class will set ConnectionInfo's
1:f812e34:  * transportContext to the SSL certificates of the client. NOTE: Accessor method
1:f812e34:  * for needClientAuth was not provided on purpose. This is because
1:f812e34:  * needClientAuth's value must be set before the socket is connected. Otherwise,
1:f812e34:  * unexpected situations may occur.
1:1a88ac6:  */
1:6bae959: public class SslTransport extends TcpTransport {
1:31c55f7: 
1:69fad2a:     private Boolean verifyHostName = null;
1:69fad2a: 
1:1a88ac6:     /**
1:1a88ac6:      * Connect to a remote node such as a Broker.
1:04ee70a:      *
1:1a88ac6:      * @param wireFormat The WireFormat to be used.
1:1a88ac6:      * @param socketFactory The socket factory to be used. Forcing SSLSockets
1:f812e34:      *                for obvious reasons.
1:1a88ac6:      * @param remoteLocation The remote location.
1:1a88ac6:      * @param localLocation The local location.
1:1a88ac6:      * @param needClientAuth If set to true, the underlying socket will need
1:f812e34:      *                client certificate authentication.
1:1a88ac6:      * @throws UnknownHostException If TcpTransport throws.
1:1a88ac6:      * @throws IOException If TcpTransport throws.
1:1a88ac6:      */
1:31c55f7:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:1a88ac6:     public SslTransport(WireFormat wireFormat, SSLSocketFactory socketFactory, URI remoteLocation, URI localLocation, boolean needClientAuth) throws IOException {
1:1a88ac6:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:6bae959:         if (this.socket != null) {
1:6bae959:             ((SSLSocket)this.socket).setNeedClientAuth(needClientAuth);
1:dd286e2: 
1:dd286e2:             // Lets try to configure the SSL SNI field.  Handy in case your using
1:dd286e2:             // a single proxy to route to different messaging apps.
1:dd286e2: 
1:dd286e2:             // On java 1.7 it seems like it can only be configured via reflection.
1:31c55f7:             // TODO: find out if this will work on java 1.8
1:dd286e2:             HashMap props = new HashMap();
1:dd286e2:             props.put("host", remoteLocation.getHost());
1:dd286e2:             IntrospectionSupport.setProperties(this.socket, props);
1:6bae959:         }
1:1a88ac6:     }
1:f812e34: 
1:69fad2a:     @Override
1:69fad2a:     protected void initialiseSocket(Socket sock) throws SocketException, IllegalArgumentException {
1:69fad2a:         //This needs to default to null because this transport class is used for both a server transport
1:69fad2a:         //and a client connection and if we default it to a value it might override the transport server setting
1:69fad2a:         //that was configured inside TcpTransportServer
1:69fad2a: 
1:69fad2a:         //The idea here is that if this is a server transport then verifyHostName will be set by the setter
1:69fad2a:         //below and not be null (if using transport.verifyHostName) but if a client uses socket.verifyHostName
1:69fad2a:         //then it will be null and we can check socketOptions
1:69fad2a: 
1:69fad2a:         //Unfortunately we have to do this to stay consistent because every other SSL option on the client
1:69fad2a:         //side is configured using socket. but this particular option isn't actually part of the socket
1:69fad2a:         //so it makes it tricky
1:69fad2a:         if (verifyHostName == null) {
1:69fad2a:             if (socketOptions != null && socketOptions.containsKey("verifyHostName")) {
1:69fad2a:                 verifyHostName = Boolean.parseBoolean(socketOptions.get("verifyHostName").toString());
1:69fad2a:                 socketOptions.remove("verifyHostName");
1:69fad2a:             } else {
1:1e31df9:                 //If null and not set then this is a client so default to true
1:69fad2a:                 verifyHostName = true;
1:69fad2a:             }
1:69fad2a:         }
1:69fad2a: 
1:69fad2a:         if (verifyHostName) {
1:69fad2a:             SSLParameters sslParams = new SSLParameters();
1:69fad2a:             sslParams.setEndpointIdentificationAlgorithm("HTTPS");
1:69fad2a:             ((SSLSocket)this.socket).setSSLParameters(sslParams);
1:69fad2a:         }
1:69fad2a: 
1:69fad2a:         super.initialiseSocket(sock);
1:69fad2a:     }
1:69fad2a: 
1:1a88ac6:     /**
1:f812e34:      * Initialize from a ServerSocket. No access to needClientAuth is given
1:f812e34:      * since it is already set within the provided socket.
1:04ee70a:      *
1:1a88ac6:      * @param wireFormat The WireFormat to be used.
1:1a88ac6:      * @param socket The Socket to be used. Forcing SSL.
1:1a88ac6:      * @throws IOException If TcpTransport throws.
1:1a88ac6:      */
1:1a88ac6:     public SslTransport(WireFormat wireFormat, SSLSocket socket) throws IOException {
1:1a88ac6:         super(wireFormat, socket);
1:1a88ac6:     }
1:f812e34: 
1:04ee70a:     public SslTransport(WireFormat format, SSLSocket socket,
1:04ee70a:             InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(format, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:1a88ac6:     /**
1:f812e34:      * Overriding in order to add the client's certificates to ConnectionInfo
1:f812e34:      * Commmands.
1:04ee70a:      *
1:1a88ac6:      * @param command The Command coming in.
1:1a88ac6:      */
1:04ee70a:     @Override
1:1c057a5:     public void doConsume(Object command) {
1:1a88ac6:         // The instanceof can be avoided, but that would require modifying the
1:f812e34:         // Command clas tree and that would require too much effort right
1:f812e34:         // now.
1:f812e34:         if (command instanceof ConnectionInfo) {
1:1a88ac6:             ConnectionInfo connectionInfo = (ConnectionInfo)command;
1:f866f77:             connectionInfo.setTransportContext(getPeerCertificates());
1:04ee70a:         }
1:1a88ac6:         super.doConsume(command);
1:6bae959:     }
1:04ee70a: 
1:69fad2a:     public void setVerifyHostName(Boolean verifyHostName) {
1:69fad2a:         this.verifyHostName = verifyHostName;
1:69fad2a:     }
1:69fad2a: 
1:6bae959:     /**
1:f866f77:      * @return peer certificate chain associated with the ssl socket
1:6bae959:      */
1:31c55f7:     @Override
1:f866f77:     public X509Certificate[] getPeerCertificates() {
1:04ee70a: 
1:1a88ac6:         SSLSocket sslSocket = (SSLSocket)this.socket;
1:f812e34: 
1:1a88ac6:         SSLSession sslSession = sslSocket.getSession();
1:f812e34: 
1:1a88ac6:         X509Certificate[] clientCertChain;
1:1a88ac6:         try {
1:f812e34:             clientCertChain = (X509Certificate[])sslSession.getPeerCertificates();
1:f812e34:         } catch (SSLPeerUnverifiedException e) {
1:31c55f7:             clientCertChain = null;
1:1a88ac6:         }
1:04ee70a: 
1:f866f77:         return clientCertChain;
1:1a88ac6:     }
1:f812e34: 
1:1a88ac6:     /**
1:6bae959:      * @return pretty print of 'this'
1:f866f77:      */
1:04ee70a:     @Override
1:6bae959:     public String toString() {
1:f812e34:         return "ssl://" + socket.getInetAddress() + ":" + socket.getPort();
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:                 //If null and not set then this is a client so default to true
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.net.SocketException;
1: import javax.net.ssl.SSLParameters;
/////////////////////////////////////////////////////////////////////////
1:     private Boolean verifyHostName = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void initialiseSocket(Socket sock) throws SocketException, IllegalArgumentException {
1:         //This needs to default to null because this transport class is used for both a server transport
1:         //and a client connection and if we default it to a value it might override the transport server setting
1:         //that was configured inside TcpTransportServer
1: 
1:         //The idea here is that if this is a server transport then verifyHostName will be set by the setter
1:         //below and not be null (if using transport.verifyHostName) but if a client uses socket.verifyHostName
1:         //then it will be null and we can check socketOptions
1: 
1:         //Unfortunately we have to do this to stay consistent because every other SSL option on the client
1:         //side is configured using socket. but this particular option isn't actually part of the socket
1:         //so it makes it tricky
1:         if (verifyHostName == null) {
1:             if (socketOptions != null && socketOptions.containsKey("verifyHostName")) {
1:                 verifyHostName = Boolean.parseBoolean(socketOptions.get("verifyHostName").toString());
1:                 socketOptions.remove("verifyHostName");
1:             } else {
1:                 verifyHostName = true;
1:             }
1:         }
1: 
1:         if (verifyHostName) {
1:             SSLParameters sslParams = new SSLParameters();
1:             sslParams.setEndpointIdentificationAlgorithm("HTTPS");
1:             ((SSLSocket)this.socket).setSSLParameters(sslParams);
1:         }
1: 
1:         super.initialiseSocket(sock);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setVerifyHostName(Boolean verifyHostName) {
1:         this.verifyHostName = verifyHostName;
1:     }
1: 
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     public SslTransport(WireFormat format, SSLSocket socket,
1:             InitBuffer initBuffer) throws IOException {
1:         super(format, socket, initBuffer);
1:     }
1: 
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "unchecked", "rawtypes" })
/////////////////////////////////////////////////////////////////////////
1:             // TODO: find out if this will work on java 1.8
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             clientCertChain = null;
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:dd286e2
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1: 
1:             // Lets try to configure the SSL SNI field.  Handy in case your using
1:             // a single proxy to route to different messaging apps.
1: 
1:             // On java 1.7 it seems like it can only be configured via reflection.
0:             // todo: find out if this will work on java 1.8
1:             HashMap props = new HashMap();
1:             props.put("host", remoteLocation.getHost());
1:             IntrospectionSupport.setProperties(this.socket, props);
commit:9a8f6e4
commit:1c057a5
/////////////////////////////////////////////////////////////////////////
1:     public void doConsume(Object command) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Client-side certificate authentication must be enabled through the
1:  * constructor. By default, this class will have the same client authentication
1:  * behavior as the socket it is passed. This class will set ConnectionInfo's
1:  * transportContext to the SSL certificates of the client. NOTE: Accessor method
1:  * for needClientAuth was not provided on purpose. This is because
1:  * needClientAuth's value must be set before the socket is connected. Otherwise,
1:  * unexpected situations may occur.
/////////////////////////////////////////////////////////////////////////
1:      *                for obvious reasons.
1:      *                client certificate authentication.
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Initialize from a ServerSocket. No access to needClientAuth is given
1:      * since it is already set within the provided socket.
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Overriding in order to add the client's certificates to ConnectionInfo
1:      * Commmands.
1:         // Command clas tree and that would require too much effort right
1:         // now.
1:         if (command instanceof ConnectionInfo) {
1: 
1: 
1: 
1:                 clientCertChain = (X509Certificate[])sslSession.getPeerCertificates();
1:             } catch (SSLPeerUnverifiedException e) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         return "ssl://" + socket.getInetAddress() + ":" + socket.getPort();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:6bae959
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.wireformat.WireFormat;
1: import java.net.UnknownHostException;
1: import javax.net.ssl.SSLSession;
1: import javax.net.ssl.SSLSocket;
1: import javax.net.ssl.SSLSocketFactory;
/////////////////////////////////////////////////////////////////////////
1: public class SslTransport extends TcpTransport {
/////////////////////////////////////////////////////////////////////////
1:         if (this.socket != null) {
1:             ((SSLSocket)this.socket).setNeedClientAuth(needClientAuth);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return pretty print of 'this'
1:      */
1:     public String toString() {
0:         return "ssl://"+socket.getInetAddress()+":"+socket.getPort();
1:     }
1: 
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.transport.tcp;
0: 
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.util.IntrospectionSupport;
0: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.security.cert.X509Certificate;
0: import java.util.Map;
0: 
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLSocketFactory;
0: import javax.net.ssl.SSLSocket;
0: import javax.net.ssl.SSLSession;
1: import javax.net.ssl.SSLPeerUnverifiedException;
0: 
1: /**
1:  * A Transport class that uses SSL and client-side certificate authentication.
1:  *
0:  * Client-side certificate authentication must be enabled through the constructor.
0:  * By default, this class will have the same client authentication behavior as the socket it is passed.
0:  * This class will set ConnectionInfo's transportContext to the SSL certificates of the client.
0:  * NOTE: Accessor method for needClientAuth was not provided on purpose. This is because needClientAuth's value must be
0:  *      set before the socket is connected. Otherwise, unexpected situations may occur.
1:  * 
1:  */
0: class SslTransport extends TcpTransport {
1:     /**
1:      * Connect to a remote node such as a Broker.
1:      * 
1:      * @param wireFormat The WireFormat to be used.
1:      * @param socketFactory The socket factory to be used. Forcing SSLSockets
0:      *      for obvious reasons.
1:      * @param remoteLocation The remote location.
1:      * @param localLocation The local location.
1:      * @param needClientAuth If set to true, the underlying socket will need
0:      *      client certificate authentication.
1:      * @throws UnknownHostException If TcpTransport throws.
1:      * @throws IOException If TcpTransport throws.
1:      */
1:     public SslTransport(WireFormat wireFormat, SSLSocketFactory socketFactory, URI remoteLocation, URI localLocation, boolean needClientAuth) throws IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
0:         ((SSLSocket)this.socket).setNeedClientAuth(needClientAuth);
1:     }
0:     
1:     /**
0:      * Initialize from a ServerSocket.
1:      * 
0:      * No access to needClientAuth is given since it is already set within the
0:      *      provided socket.
1:      * 
1:      * @param wireFormat The WireFormat to be used.
1:      * @param socket The Socket to be used. Forcing SSL.
1:      * @throws IOException If TcpTransport throws.
1:      */
1:     public SslTransport(WireFormat wireFormat, SSLSocket socket) throws IOException {
1:         super(wireFormat, socket);
1:     }
0:     
1:     /**
0:      * Overriding in order to add the client's certificates to ConnectionInfo Commmands. 
1:      * 
1:      * @param command The Command coming in.
1:      */
0:     public void doConsume(Command command) {
1:         // The instanceof can be avoided, but that would require modifying the
0:         //      Command clas tree and that would require too much effort right
0:         //      now.
0:         if ( command instanceof ConnectionInfo ) {
1:             ConnectionInfo connectionInfo = (ConnectionInfo)command;
0:             
1:             SSLSocket sslSocket = (SSLSocket)this.socket;
0:             
1:             SSLSession sslSession = sslSocket.getSession();
0:             
1:             X509Certificate[] clientCertChain;
1:             try {
0:                 clientCertChain =
0:                     (X509Certificate[]) sslSession.getPeerCertificates();
0:             } catch(SSLPeerUnverifiedException e) {
0:                 clientCertChain = null;
1:             }
0:             
0:             connectionInfo.setTransportContext(clientCertChain);
1:         }
0: 
1:         super.doConsume(command);
1:     }
1: }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f866f77
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:             connectionInfo.setTransportContext(getPeerCertificates());
0:         } 
0:     
0:     /**
1:      * @return peer certificate chain associated with the ssl socket
1:      */
1:     public X509Certificate[] getPeerCertificates() {
0:     	
0:         SSLSocket sslSocket = (SSLSocket)this.socket;
0: 
0:         SSLSession sslSession = sslSocket.getSession();
0: 
0:         X509Certificate[] clientCertChain;
0:         try {
0:             clientCertChain = (X509Certificate[])sslSession.getPeerCertificates();
0:         } catch (SSLPeerUnverifiedException e) {
0:         	clientCertChain = null;
0:         }
0:     	
1:         return clientCertChain;
0:     }
============================================================================