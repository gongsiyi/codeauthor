1:9f53e2b: /**
1:9f53e2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f53e2b:  * contributor license agreements.  See the NOTICE file distributed with
1:9f53e2b:  * this work for additional information regarding copyright ownership.
1:9f53e2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f53e2b:  * (the "License"); you may not use this file except in compliance with
1:9f53e2b:  * the License.  You may obtain a copy of the License at
1:9f53e2b:  *
1:9f53e2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f53e2b:  *
1:9f53e2b:  * Unless required by applicable law or agreed to in writing, software
1:9f53e2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f53e2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f53e2b:  * See the License for the specific language governing permissions and
1:9f53e2b:  * limitations under the License.
1:9f53e2b:  */
1:74846bb: package org.apache.activemq.broker.scheduler;
1:74846bb: 
1:74846bb: import static org.junit.Assert.assertEquals;
1:74846bb: import static org.junit.Assert.assertNotNull;
1:74846bb: import static org.junit.Assert.assertTrue;
1:74846bb: 
1:74846bb: import java.io.File;
1:74846bb: import java.io.IOException;
1:74846bb: import java.security.ProtectionDomain;
1:74846bb: import java.util.concurrent.TimeUnit;
1:74846bb: 
1:74846bb: import javax.jms.Connection;
1:74846bb: import javax.jms.MessageProducer;
1:74846bb: import javax.jms.Queue;
1:74846bb: import javax.jms.Session;
1:74846bb: import javax.jms.TextMessage;
1:74846bb: 
1:74846bb: import org.apache.activemq.ActiveMQConnectionFactory;
1:74846bb: import org.apache.activemq.ScheduledMessage;
1:74846bb: import org.apache.activemq.broker.BrokerService;
1:74846bb: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:74846bb: import org.apache.activemq.util.IOHelper;
1:74846bb: import org.apache.activemq.util.Wait;
1:74846bb: import org.junit.After;
1:74846bb: import org.junit.Before;
1:ef129c2: import org.junit.Rule;
1:74846bb: import org.junit.Test;
1:ef129c2: import org.junit.rules.TestName;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: public class KahaDBSchedulerIndexRebuildTest {
1:74846bb: 
1:74846bb:     static final Logger LOG = LoggerFactory.getLogger(KahaDBSchedulerIndexRebuildTest.class);
1:74846bb: 
1:ef129c2:     @Rule
1:ef129c2:     public TestName name = new TestName();
1:ef129c2: 
1:74846bb:     private BrokerService broker = null;
1:74846bb:     private final int NUM_JOBS = 50;
1:74846bb: 
1:74846bb:     static String basedir;
1:74846bb:     static {
1:74846bb:         try {
1:74846bb:             ProtectionDomain protectionDomain = SchedulerDBVersionTest.class.getProtectionDomain();
1:74846bb:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../.").getCanonicalPath();
1:74846bb:         } catch (IOException e) {
1:74846bb:             basedir = ".";
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:ef129c2:     private File schedulerStoreDir;
1:74846bb:     private final File storeDir = new File(basedir, "activemq-data/store/");
1:74846bb: 
1:74846bb:     @Before
1:74846bb:     public void setUp() throws Exception {
1:ef129c2:         schedulerStoreDir = new File(basedir, "activemq-data/store/scheduler/" + name.getMethodName());
1:74846bb:         LOG.info("Test Dir = {}", schedulerStoreDir);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @After
1:74846bb:     public void tearDown() throws Exception {
1:74846bb:         if (broker != null) {
1:74846bb:             broker.stop();
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testIndexRebuilds() throws Exception {
1:74846bb:         IOHelper.deleteFile(schedulerStoreDir);
1:74846bb: 
1:74846bb:         JobSchedulerStoreImpl schedulerStore = createScheduler();
1:74846bb:         broker = createBroker(schedulerStore);
1:74846bb:         broker.start();
1:74846bb:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:74846bb:         Connection connection = cf.createConnection();
1:74846bb:         connection.start();
1:74846bb:         for (int i = 0; i < NUM_JOBS; ++i) {
1:74846bb:             scheduleRepeating(connection);
1:74846bb:         }
1:74846bb:         connection.close();
1:74846bb: 
1:74846bb:         JobScheduler scheduler = schedulerStore.getJobScheduler("JMS");
1:74846bb:         assertNotNull(scheduler);
1:74846bb:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1:74846bb: 
1:74846bb:         broker.stop();
1:74846bb: 
1:74846bb:         IOHelper.delete(new File(schedulerStoreDir, "scheduleDB.data"));
1:74846bb: 
1:74846bb:         schedulerStore = createScheduler();
1:74846bb:         broker = createBroker(schedulerStore);
1:74846bb:         broker.start();
1:74846bb: 
1:74846bb:         scheduler = schedulerStore.getJobScheduler("JMS");
1:74846bb:         assertNotNull(scheduler);
1:74846bb:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testIndexRebuildsAfterSomeJobsExpire() throws Exception {
1:74846bb:         IOHelper.deleteFile(schedulerStoreDir);
1:74846bb: 
1:74846bb:         JobSchedulerStoreImpl schedulerStore = createScheduler();
1:74846bb:         broker = createBroker(schedulerStore);
1:74846bb:         broker.start();
1:74846bb:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:74846bb:         Connection connection = cf.createConnection();
1:74846bb:         connection.start();
1:74846bb:         for (int i = 0; i < NUM_JOBS; ++i) {
1:74846bb:             scheduleRepeating(connection);
1:74846bb:             scheduleOneShot(connection);
1:74846bb:         }
1:74846bb:         connection.close();
1:74846bb: 
1:74846bb:         JobScheduler scheduler = schedulerStore.getJobScheduler("JMS");
1:74846bb:         assertNotNull(scheduler);
1:74846bb:         assertEquals(NUM_JOBS * 2, scheduler.getAllJobs().size());
1:74846bb: 
1:74846bb:         final JobScheduler awaitingOneShotTimeout = scheduler;
1:74846bb:         assertTrue("One shot jobs should time out", Wait.waitFor(new Wait.Condition() {
1:74846bb: 
1:74846bb:             @Override
1:74846bb:             public boolean isSatisified() throws Exception {
1:74846bb:                 return awaitingOneShotTimeout.getAllJobs().size() == NUM_JOBS;
1:74846bb:             }
1:74846bb:         }, TimeUnit.MINUTES.toMillis(2)));
1:74846bb: 
1:74846bb:         broker.stop();
1:74846bb: 
1:74846bb:         IOHelper.delete(new File(schedulerStoreDir, "scheduleDB.data"));
1:74846bb: 
1:74846bb:         schedulerStore = createScheduler();
1:74846bb:         broker = createBroker(schedulerStore);
1:74846bb:         broker.start();
1:74846bb: 
1:74846bb:         scheduler = schedulerStore.getJobScheduler("JMS");
1:74846bb:         assertNotNull(scheduler);
1:74846bb:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1:74846bb:     }
1:74846bb: 
1:74846bb:     private void scheduleRepeating(Connection connection) throws Exception {
1:74846bb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74846bb:         Queue queue = session.createQueue("test.queue");
1:74846bb:         MessageProducer producer = session.createProducer(queue);
1:74846bb: 
1:74846bb:         TextMessage message = session.createTextMessage("test msg");
1:74846bb:         long time = 360 * 1000;
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:74846bb:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, -1);
1:74846bb:         producer.send(message);
1:74846bb:         producer.close();
1:74846bb:     }
1:74846bb: 
1:74846bb:     private void scheduleOneShot(Connection connection) throws Exception {
1:74846bb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74846bb:         Queue queue = session.createQueue("test.queue");
1:74846bb:         MessageProducer producer = session.createProducer(queue);
1:74846bb: 
1:74846bb:         TextMessage message = session.createTextMessage("test msg");
1:74846bb:         long time = TimeUnit.SECONDS.toMillis(30);
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:74846bb:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, 0);
1:74846bb:         producer.send(message);
1:74846bb:         producer.close();
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected JobSchedulerStoreImpl createScheduler() {
1:74846bb:         JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:74846bb:         scheduler.setDirectory(schedulerStoreDir);
1:74846bb:         scheduler.setJournalMaxFileLength(10 * 1024);
1:74846bb:         return scheduler;
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected BrokerService createBroker(JobSchedulerStoreImpl scheduler) throws Exception {
1:74846bb:         BrokerService answer = new BrokerService();
1:74846bb:         answer.setJobSchedulerStore(scheduler);
1:74846bb:         answer.setPersistent(true);
1:74846bb:         answer.setDataDirectory(storeDir.getAbsolutePath());
1:74846bb:         answer.setSchedulerSupport(true);
1:74846bb:         answer.setUseJmx(false);
1:74846bb:         return answer;
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ef129c2
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TestName name = new TestName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private File schedulerStoreDir;
1:         schedulerStoreDir = new File(basedir, "activemq-data/store/scheduler/" + name.getMethodName());
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.security.ProtectionDomain;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class KahaDBSchedulerIndexRebuildTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(KahaDBSchedulerIndexRebuildTest.class);
1: 
1:     private BrokerService broker = null;
1:     private final int NUM_JOBS = 50;
1: 
1:     static String basedir;
1:     static {
1:         try {
1:             ProtectionDomain protectionDomain = SchedulerDBVersionTest.class.getProtectionDomain();
1:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../.").getCanonicalPath();
1:         } catch (IOException e) {
1:             basedir = ".";
1:         }
1:     }
1: 
0:     private final File schedulerStoreDir = new File(basedir, "activemq-data/store/scheduler");
1:     private final File storeDir = new File(basedir, "activemq-data/store/");
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("Test Dir = {}", schedulerStoreDir);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testIndexRebuilds() throws Exception {
1:         IOHelper.deleteFile(schedulerStoreDir);
1: 
1:         JobSchedulerStoreImpl schedulerStore = createScheduler();
1:         broker = createBroker(schedulerStore);
1:         broker.start();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         for (int i = 0; i < NUM_JOBS; ++i) {
1:             scheduleRepeating(connection);
1:         }
1:         connection.close();
1: 
1:         JobScheduler scheduler = schedulerStore.getJobScheduler("JMS");
1:         assertNotNull(scheduler);
1:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1: 
1:         broker.stop();
1: 
1:         IOHelper.delete(new File(schedulerStoreDir, "scheduleDB.data"));
1: 
1:         schedulerStore = createScheduler();
1:         broker = createBroker(schedulerStore);
1:         broker.start();
1: 
1:         scheduler = schedulerStore.getJobScheduler("JMS");
1:         assertNotNull(scheduler);
1:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1:     }
1: 
1:     @Test
1:     public void testIndexRebuildsAfterSomeJobsExpire() throws Exception {
1:         IOHelper.deleteFile(schedulerStoreDir);
1: 
1:         JobSchedulerStoreImpl schedulerStore = createScheduler();
1:         broker = createBroker(schedulerStore);
1:         broker.start();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         for (int i = 0; i < NUM_JOBS; ++i) {
1:             scheduleRepeating(connection);
1:             scheduleOneShot(connection);
1:         }
1:         connection.close();
1: 
1:         JobScheduler scheduler = schedulerStore.getJobScheduler("JMS");
1:         assertNotNull(scheduler);
1:         assertEquals(NUM_JOBS * 2, scheduler.getAllJobs().size());
1: 
1:         final JobScheduler awaitingOneShotTimeout = scheduler;
1:         assertTrue("One shot jobs should time out", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return awaitingOneShotTimeout.getAllJobs().size() == NUM_JOBS;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(2)));
1: 
1:         broker.stop();
1: 
1:         IOHelper.delete(new File(schedulerStoreDir, "scheduleDB.data"));
1: 
1:         schedulerStore = createScheduler();
1:         broker = createBroker(schedulerStore);
1:         broker.start();
1: 
1:         scheduler = schedulerStore.getJobScheduler("JMS");
1:         assertNotNull(scheduler);
1:         assertEquals(NUM_JOBS, scheduler.getAllJobs().size());
1:     }
1: 
1:     private void scheduleRepeating(Connection connection) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test.queue");
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         TextMessage message = session.createTextMessage("test msg");
1:         long time = 360 * 1000;
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, -1);
1:         producer.send(message);
1:         producer.close();
1:     }
1: 
1:     private void scheduleOneShot(Connection connection) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test.queue");
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         TextMessage message = session.createTextMessage("test msg");
1:         long time = TimeUnit.SECONDS.toMillis(30);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, 0);
1:         producer.send(message);
1:         producer.close();
1:     }
1: 
1:     protected JobSchedulerStoreImpl createScheduler() {
1:         JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:         scheduler.setDirectory(schedulerStoreDir);
1:         scheduler.setJournalMaxFileLength(10 * 1024);
1:         return scheduler;
1:     }
1: 
1:     protected BrokerService createBroker(JobSchedulerStoreImpl scheduler) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setJobSchedulerStore(scheduler);
1:         answer.setPersistent(true);
1:         answer.setDataDirectory(storeDir.getAbsolutePath());
1:         answer.setSchedulerSupport(true);
1:         answer.setUseJmx(false);
1:         return answer;
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9f53e2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================