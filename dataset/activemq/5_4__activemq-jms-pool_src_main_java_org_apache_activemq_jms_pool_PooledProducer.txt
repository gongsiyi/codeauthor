1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:74a7a8b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:b66559e: package org.apache.activemq.jms.pool;
5:d29ca2a: 
1:d29ca2a: import javax.jms.Destination;
1:2a7c349: import javax.jms.InvalidDestinationException;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageProducer;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A pooled {@link MessageProducer}
1:d29ca2a:  */
1:d29ca2a: public class PooledProducer implements MessageProducer {
1:a59c9ba: 
1:b66559e:     private final MessageProducer messageProducer;
1:a59c9ba:     private final Destination destination;
1:a59c9ba: 
1:d29ca2a:     private int deliveryMode;
1:d29ca2a:     private boolean disableMessageID;
1:d29ca2a:     private boolean disableMessageTimestamp;
1:d29ca2a:     private int priority;
1:d29ca2a:     private long timeToLive;
1:2a7c349:     private boolean anonymous = true;
1:d29ca2a: 
1:b66559e:     public PooledProducer(MessageProducer messageProducer, Destination destination) throws JMSException {
1:d29ca2a:         this.messageProducer = messageProducer;
1:d29ca2a:         this.destination = destination;
1:2a7c349:         this.anonymous = messageProducer.getDestination() == null;
1:d29ca2a: 
1:d29ca2a:         this.deliveryMode = messageProducer.getDeliveryMode();
1:d29ca2a:         this.disableMessageID = messageProducer.getDisableMessageID();
1:d29ca2a:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:d29ca2a:         this.priority = messageProducer.getPriority();
1:d29ca2a:         this.timeToLive = messageProducer.getTimeToLive();
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void close() throws JMSException {
1:2a7c349:         if (!anonymous) {
1:2a7c349:             this.messageProducer.close();
1:2a7c349:         }
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void send(Destination destination, Message message) throws JMSException {
1:d29ca2a:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void send(Message message) throws JMSException {
1:d29ca2a:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:d29ca2a:         send(destination, message, deliveryMode, priority, timeToLive);
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:2a7c349: 
1:d29ca2a:         if (destination == null) {
1:2a7c349:             if (messageProducer.getDestination() == null) {
1:2a7c349:                 throw new UnsupportedOperationException("A destination must be specified.");
1:2a7c349:             }
1:2a7c349:             throw new InvalidDestinationException("Don't understand null destinations");
1:d29ca2a:         }
1:2a7c349: 
1:b66559e:         MessageProducer messageProducer = getMessageProducer();
1:d29ca2a: 
1:d29ca2a:         // just in case let only one thread send at once
1:d29ca2a:         synchronized (messageProducer) {
1:2a7c349: 
1:95d20e5:             if (anonymous && this.destination != null && !this.destination.equals(destination)) {
1:2a7c349:                 throw new UnsupportedOperationException("This producer can only send messages to: " + this.destination);
1:2a7c349:             }
1:2a7c349: 
1:2a7c349:             // Producer will do it's own Destination validation so always use the destination
1:2a7c349:             // based send method otherwise we might violate a JMS rule.
1:d29ca2a:             messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public Destination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public int getDeliveryMode() {
1:d29ca2a:         return deliveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void setDeliveryMode(int deliveryMode) {
1:d29ca2a:         this.deliveryMode = deliveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public boolean getDisableMessageID() {
1:d29ca2a:         return disableMessageID;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void setDisableMessageID(boolean disableMessageID) {
1:d29ca2a:         this.disableMessageID = disableMessageID;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public boolean getDisableMessageTimestamp() {
1:d29ca2a:         return disableMessageTimestamp;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void setDisableMessageTimestamp(boolean disableMessageTimestamp) {
1:d29ca2a:         this.disableMessageTimestamp = disableMessageTimestamp;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public int getPriority() {
1:d29ca2a:         return priority;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void setPriority(int priority) {
1:d29ca2a:         this.priority = priority;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public long getTimeToLive() {
1:d29ca2a:         return timeToLive;
1:d29ca2a:     }
1:d29ca2a: 
1:a59c9ba:     @Override
1:d29ca2a:     public void setTimeToLive(long timeToLive) {
1:d29ca2a:         this.timeToLive = timeToLive;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:74a7a8b:     // -------------------------------------------------------------------------
1:b66559e:     protected MessageProducer getMessageProducer() {
1:d29ca2a:         return messageProducer;
1:d29ca2a:     }
1:74a7a8b: 
1:2a7c349:     protected boolean isAnonymous() {
1:2a7c349:         return anonymous;
1:2a7c349:     }
1:2a7c349: 
1:a59c9ba:     @Override
1:d29ca2a:     public String toString() {
1:74a7a8b:         return "PooledProducer { " + messageProducer + " }";
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:95d20e5
/////////////////////////////////////////////////////////////////////////
1:             if (anonymous && this.destination != null && !this.destination.equals(destination)) {
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
1:     private final MessageProducer messageProducer;
/////////////////////////////////////////////////////////////////////////
1:     public PooledProducer(MessageProducer messageProducer, Destination destination) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer messageProducer = getMessageProducer();
/////////////////////////////////////////////////////////////////////////
1:     protected MessageProducer getMessageProducer() {
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2a7c349
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidDestinationException;
/////////////////////////////////////////////////////////////////////////
1:     private boolean anonymous = true;
1:         this.anonymous = messageProducer.getDestination() == null;
/////////////////////////////////////////////////////////////////////////
1:         if (!anonymous) {
1:             this.messageProducer.close();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (messageProducer.getDestination() == null) {
1:                 throw new UnsupportedOperationException("A destination must be specified.");
1:             }
1:             throw new InvalidDestinationException("Don't understand null destinations");
1: 
1: 
0:             if (anonymous && !this.destination.equals(destination)) {
1:                 throw new UnsupportedOperationException("This producer can only send messages to: " + this.destination);
1:             }
1: 
1:             // Producer will do it's own Destination validation so always use the destination
1:             // based send method otherwise we might violate a JMS rule.
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isAnonymous() {
1:         return anonymous;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
1: 
0:     private final ActiveMQMessageProducer messageProducer;
1:     private final Destination destination;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQMessageProducer;
1: 
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
1: 
1:         return "PooledProducer { " + messageProducer + " }";
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
1: 
0: import org.apache.activemq.ActiveMQMessageProducer;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: 
1: /**
1:  * A pooled {@link MessageProducer}
0:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class PooledProducer implements MessageProducer {
0:     private ActiveMQMessageProducer messageProducer;
0:     private Destination destination;
1:     private int deliveryMode;
1:     private boolean disableMessageID;
1:     private boolean disableMessageTimestamp;
1:     private int priority;
1:     private long timeToLive;
1: 
0:     public PooledProducer(ActiveMQMessageProducer messageProducer, Destination destination) throws JMSException {
1:         this.messageProducer = messageProducer;
1:         this.destination = destination;
1: 
1:         this.deliveryMode = messageProducer.getDeliveryMode();
1:         this.disableMessageID = messageProducer.getDisableMessageID();
1:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:         this.priority = messageProducer.getPriority();
1:         this.timeToLive = messageProducer.getTimeToLive();
1:     }
1: 
1:     public void close() throws JMSException {
1:     }
1: 
1:     public void send(Destination destination, Message message) throws JMSException {
1:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:     }
1: 
1:     public void send(Message message) throws JMSException {
1:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:     }
1: 
1:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         send(destination, message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         if (destination == null) {
0:             destination = this.destination;
1:         }
0:         ActiveMQMessageProducer messageProducer = getMessageProducer();
1: 
1:         // just in case let only one thread send at once
1:         synchronized (messageProducer) {
1:             messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:         }
1:     }
1: 
1:     public Destination getDestination() {
1:         return destination;
1:     }
1: 
1:     public int getDeliveryMode() {
1:         return deliveryMode;
1:     }
1: 
1:     public void setDeliveryMode(int deliveryMode) {
1:         this.deliveryMode = deliveryMode;
1:     }
1: 
1:     public boolean getDisableMessageID() {
1:         return disableMessageID;
1:     }
1: 
1:     public void setDisableMessageID(boolean disableMessageID) {
1:         this.disableMessageID = disableMessageID;
1:     }
1: 
1:     public boolean getDisableMessageTimestamp() {
1:         return disableMessageTimestamp;
1:     }
1: 
1:     public void setDisableMessageTimestamp(boolean disableMessageTimestamp) {
1:         this.disableMessageTimestamp = disableMessageTimestamp;
1:     }
1: 
1:     public int getPriority() {
1:         return priority;
1:     }
1: 
1:     public void setPriority(int priority) {
1:         this.priority = priority;
1:     }
1: 
1:     public long getTimeToLive() {
1:         return timeToLive;
1:     }
1: 
1:     public void setTimeToLive(long timeToLive) {
1:         this.timeToLive = timeToLive;
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
0:     protected ActiveMQMessageProducer getMessageProducer() {
1:         return messageProducer;
1:     }
1:     
1:     public String toString() {
0:         return "PooledProducer { "+messageProducer+" }";
1:     }
1: 
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
============================================================================