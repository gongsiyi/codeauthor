1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:230a86c:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: 
1:a677c21: package org.apache.activemq.usecases;
1:230a86c: 
1:a677c21: import java.util.HashMap;
1:4743a20: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.ObjectMessage;
1:a677c21: import javax.jms.Session;
1:a677c21: 
1:a677c21: import org.apache.activemq.test.TestSupport;
1:a677c21: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class ChangeSentMessageTest extends TestSupport {
1:a677c21:     private static final int COUNT = 200;
1:a677c21:     private static final String VALUE_NAME = "value";
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * test Object messages can be changed after sending with no side-affects
1:4743a20:      *
1:a677c21:      * @throws Exception
1:a677c21:      */
1:4743a20:     @SuppressWarnings("rawtypes")
1:a677c21:     public void testDoChangeSentMessage() throws Exception {
1:230a86c:         Destination destination = createDestination("test-" + ChangeSentMessageTest.class.getName());
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:a677c21:         Session publisherSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = publisherSession.createProducer(destination);
1:933eb2f:         HashMap<String, Integer> map = new HashMap<String, Integer>();
1:a677c21:         ObjectMessage message = publisherSession.createObjectMessage();
1:230a86c:         for (int i = 0; i < COUNT; i++) {
1:d36c0d4:             map.put(VALUE_NAME, Integer.valueOf(i));
1:a677c21:             message.setObject(map);
1:a677c21:             producer.send(message);
1:230a86c:             assertTrue(message.getObject() == map);
2:a677c21:         }
1:230a86c:         for (int i = 0; i < COUNT; i++) {
1:230a86c:             ObjectMessage msg = (ObjectMessage)consumer.receive();
1:230a86c:             HashMap receivedMap = (HashMap)msg.getObject();
1:230a86c:             Integer intValue = (Integer)receivedMap.get(VALUE_NAME);
1:a677c21:             assertTrue(intValue.intValue() == i);
1:86cbdfd:         }
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         HashMap<String, Integer> map = new HashMap<String, Integer>();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         Destination destination = createDestination("test-" + ChangeSentMessageTest.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < COUNT; i++) {
1:             assertTrue(message.getObject() == map);
1:         for (int i = 0; i < COUNT; i++) {
1:             ObjectMessage msg = (ObjectMessage)consumer.receive();
1:             HashMap receivedMap = (HashMap)msg.getObject();
1:             Integer intValue = (Integer)receivedMap.get(VALUE_NAME);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:             map.put(VALUE_NAME, Integer.valueOf(i));
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: import java.util.HashMap;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.test.TestSupport;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ChangeSentMessageTest extends TestSupport {
1:     private static final int COUNT = 200;
1:     private static final String VALUE_NAME = "value";
1: 
1:     /**
1:      * test Object messages can be changed after sending with no side-affects
1:      * @throws Exception
1:      */
1:     public void testDoChangeSentMessage() throws Exception {
0:         Destination destination = createDestination("test-"+ChangeSentMessageTest.class.getName());
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Session publisherSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = publisherSession.createProducer(destination);
0:         HashMap map = new HashMap();
1:         ObjectMessage message = publisherSession.createObjectMessage();
0:         for (int i = 0;i < COUNT;i++) {
0:             map.put(VALUE_NAME, new Integer(i));
1:             message.setObject(map);
1:             producer.send(message);
0:             assertTrue(message.getObject()==map);
1:         }
0:         for (int i = 0;i < COUNT;i++) {
0:             ObjectMessage msg = (ObjectMessage) consumer.receive();
0:             HashMap receivedMap = (HashMap) msg.getObject();
0:             Integer intValue = (Integer) receivedMap.get(VALUE_NAME);
1:             assertTrue(intValue.intValue() == i);
1:         }
1:     }
1: }
============================================================================