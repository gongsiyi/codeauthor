1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.jndi;
2:a107823: 
1:74a7a8b: import javax.naming.Reference;
1:74a7a8b: 
1:a107823: import org.apache.activemq.ActiveMQConnectionFactory;
1:a107823: import org.apache.activemq.CombinationTestSupport;
1:a107823: import org.apache.activemq.command.ActiveMQDestination;
1:a107823: import org.apache.activemq.command.ActiveMQQueue;
1:a107823: 
1:a107823: public class ObjectFactoryTest extends CombinationTestSupport {
1:a107823:     public void testConnectionFactory() throws Exception {
1:a107823:         // Create sample connection factory
1:a107823:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:db39e50:         factory.setDispatchAsync(true);
1:a107823:         factory.setBrokerURL("vm://test");
1:a107823:         factory.setClientID("test");
1:a107823:         factory.setCopyMessageOnSend(false);
1:a107823:         factory.setDisableTimeStampsByDefault(true);
1:a107823:         factory.setObjectMessageSerializationDefered(true);
1:a107823:         factory.setOptimizedMessageDispatch(false);
1:a107823:         factory.setPassword("pass");
1:a107823:         factory.setUseAsyncSend(true);
1:a107823:         factory.setUseCompression(true);
1:a107823:         factory.setUseRetroactiveConsumer(true);
1:a107823:         factory.setUserName("user");
1:7f0e135:         factory.getPrefetchPolicy().setQueuePrefetch(777);
1:7f0e135:         factory.getRedeliveryPolicy().setMaximumRedeliveries(15);
1:7f0e135:         factory.getRedeliveryPolicy().setBackOffMultiplier((short) 32);
1:7f0e135:         
1:a107823: 
1:a107823:         // Create reference
1:a107823:         Reference ref = JNDIReferenceFactory.createReference(factory.getClass().getName(), factory);
1:a107823: 
1:a107823:         // Get object created based on reference
1:a107823:         ActiveMQConnectionFactory temp;
1:a107823:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
1:a107823:         temp = (ActiveMQConnectionFactory)refFactory.getObjectInstance(ref, null, null, null);
1:a107823: 
1:a107823:         // Check settings
1:480433b:         assertEquals(factory.isDispatchAsync(), temp.isDispatchAsync());
1:a107823:         assertEquals(factory.getBrokerURL(), temp.getBrokerURL());
1:a107823:         assertEquals(factory.getClientID(), temp.getClientID());
1:a107823:         assertEquals(factory.isCopyMessageOnSend(), temp.isCopyMessageOnSend());
1:a107823:         assertEquals(factory.isDisableTimeStampsByDefault(), temp.isDisableTimeStampsByDefault());
1:a107823:         assertEquals(factory.isObjectMessageSerializationDefered(), temp.isObjectMessageSerializationDefered());
1:a107823:         assertEquals(factory.isOptimizedMessageDispatch(), temp.isOptimizedMessageDispatch());
1:a107823:         assertEquals(factory.getPassword(), temp.getPassword());
1:a107823:         assertEquals(factory.isUseAsyncSend(), temp.isUseAsyncSend());
1:a107823:         assertEquals(factory.isUseCompression(), temp.isUseCompression());
1:a107823:         assertEquals(factory.isUseRetroactiveConsumer(), temp.isUseRetroactiveConsumer());
1:a107823:         assertEquals(factory.getUserName(), temp.getUserName());
1:7f0e135:         assertEquals(factory.getPrefetchPolicy().getQueuePrefetch(), temp.getPrefetchPolicy().getQueuePrefetch());
1:7f0e135:         assertEquals(factory.getRedeliveryPolicy().getMaximumRedeliveries(), temp.getRedeliveryPolicy().getMaximumRedeliveries());
1:7f0e135:         assertEquals(factory.getRedeliveryPolicy().getBackOffMultiplier(), temp.getRedeliveryPolicy().getBackOffMultiplier());
1:a107823:     }
1:a107823: 
1:a107823:     public void testDestination() throws Exception {
1:a107823:         // Create sample destination
1:a107823:         ActiveMQDestination dest = new ActiveMQQueue();
1:a107823:         dest.setPhysicalName("TEST.FOO");
1:a107823: 
1:a107823:         // Create reference
1:a107823:         Reference ref = JNDIReferenceFactory.createReference(dest.getClass().getName(), dest);
1:a107823: 
1:a107823:         // Get object created based on reference
1:a107823:         ActiveMQDestination temp;
1:a107823:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
1:a107823:         temp = (ActiveMQDestination)refFactory.getObjectInstance(ref, null, null, null);
1:a107823: 
1:a107823:         // Check settings
1:a107823:         assertEquals(dest.getPhysicalName(), temp.getPhysicalName());
1:a107823:     }
1:a107823: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.Reference;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f0e135
/////////////////////////////////////////////////////////////////////////
1:         factory.getPrefetchPolicy().setQueuePrefetch(777);
1:         factory.getRedeliveryPolicy().setMaximumRedeliveries(15);
1:         factory.getRedeliveryPolicy().setBackOffMultiplier((short) 32);
1:         
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(factory.getPrefetchPolicy().getQueuePrefetch(), temp.getPrefetchPolicy().getQueuePrefetch());
1:         assertEquals(factory.getRedeliveryPolicy().getMaximumRedeliveries(), temp.getRedeliveryPolicy().getMaximumRedeliveries());
1:         assertEquals(factory.getRedeliveryPolicy().getBackOffMultiplier(), temp.getRedeliveryPolicy().getBackOffMultiplier());
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import javax.naming.Reference;
1: 
1: public class ObjectFactoryTest extends CombinationTestSupport {
1:     public void testConnectionFactory() throws Exception {
1:         // Create sample connection factory
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         factory.setAsyncDispatch(false);
1:         factory.setBrokerURL("vm://test");
1:         factory.setClientID("test");
1:         factory.setCopyMessageOnSend(false);
1:         factory.setDisableTimeStampsByDefault(true);
1:         factory.setObjectMessageSerializationDefered(true);
0:         factory.setOnSendPrepareMessageBody(false);
1:         factory.setOptimizedMessageDispatch(false);
1:         factory.setPassword("pass");
1:         factory.setUseAsyncSend(true);
1:         factory.setUseCompression(true);
1:         factory.setUseRetroactiveConsumer(true);
1:         factory.setUserName("user");
1: 
1:         // Create reference
1:         Reference ref = JNDIReferenceFactory.createReference(factory.getClass().getName(), factory);
1: 
1:         // Get object created based on reference
1:         ActiveMQConnectionFactory temp;
1:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
1:         temp = (ActiveMQConnectionFactory)refFactory.getObjectInstance(ref, null, null, null);
1: 
1:         // Check settings
0:         assertEquals(factory.isAsyncDispatch(), temp.isAsyncDispatch());
1:         assertEquals(factory.getBrokerURL(), temp.getBrokerURL());
1:         assertEquals(factory.getClientID(), temp.getClientID());
1:         assertEquals(factory.isCopyMessageOnSend(), temp.isCopyMessageOnSend());
1:         assertEquals(factory.isDisableTimeStampsByDefault(), temp.isDisableTimeStampsByDefault());
1:         assertEquals(factory.isObjectMessageSerializationDefered(), temp.isObjectMessageSerializationDefered());
0:         assertEquals(factory.isOnSendPrepareMessageBody(), temp.isOnSendPrepareMessageBody());
1:         assertEquals(factory.isOptimizedMessageDispatch(), temp.isOptimizedMessageDispatch());
1:         assertEquals(factory.getPassword(), temp.getPassword());
1:         assertEquals(factory.isUseAsyncSend(), temp.isUseAsyncSend());
1:         assertEquals(factory.isUseCompression(), temp.isUseCompression());
1:         assertEquals(factory.isUseRetroactiveConsumer(), temp.isUseRetroactiveConsumer());
1:         assertEquals(factory.getUserName(), temp.getUserName());
1:     }
1: 
1:     public void testDestination() throws Exception {
1:         // Create sample destination
1:         ActiveMQDestination dest = new ActiveMQQueue();
1:         dest.setPhysicalName("TEST.FOO");
1: 
1:         // Create reference
1:         Reference ref = JNDIReferenceFactory.createReference(dest.getClass().getName(), dest);
1: 
1:         // Get object created based on reference
1:         ActiveMQDestination temp;
1:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
1:         temp = (ActiveMQDestination)refFactory.getObjectInstance(ref, null, null, null);
1: 
1:         // Check settings
1:         assertEquals(dest.getPhysicalName(), temp.getPhysicalName());
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:db39e50
/////////////////////////////////////////////////////////////////////////
1:         factory.setDispatchAsync(true);
commit:480433b
/////////////////////////////////////////////////////////////////////////
0:         factory.setDispatchAsync(false);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(factory.isDispatchAsync(), temp.isDispatchAsync());
commit:358bc87
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:b9a4dee
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.jndi;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: 
0: import javax.naming.Reference;
0: 
0: public class ObjectFactoryTest extends CombinationTestSupport {
0:     public void testConnectionFactory() throws Exception {
0:         // Create sample connection factory
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         factory.setAsyncDispatch(false);
0:         factory.setBrokerURL("vm://test");
0:         factory.setClientID("test");
0:         factory.setCopyMessageOnSend(false);
0:         factory.setDisableTimeStampsByDefault(true);
0:         factory.setObjectMessageSerializationDefered(true);
0:         factory.setOnSendPrepareMessageBody(false);
0:         factory.setOptimizedMessageDispatch(false);
0:         factory.setPassword("pass");
0:         factory.setUseAsyncSend(true);
0:         factory.setUseCompression(true);
0:         factory.setUseRetroactiveConsumer(true);
0:         factory.setUserName("user");
0: 
0:         // Create reference
0:         Reference ref = JNDIReferenceFactory.createReference(factory.getClass().getName(), factory);
0: 
0:         // Get object created based on reference
0:         ActiveMQConnectionFactory temp;
0:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
0:         temp = (ActiveMQConnectionFactory)refFactory.getObjectInstance(ref, null, null, null);
0: 
0:         // Check settings
0:         assertEquals(factory.isAsyncDispatch(), temp.isAsyncDispatch());
0:         assertEquals(factory.getBrokerURL(), temp.getBrokerURL());
0:         assertEquals(factory.getClientID(), temp.getClientID());
0:         assertEquals(factory.isCopyMessageOnSend(), temp.isCopyMessageOnSend());
0:         assertEquals(factory.isDisableTimeStampsByDefault(), temp.isDisableTimeStampsByDefault());
0:         assertEquals(factory.isObjectMessageSerializationDefered(), temp.isObjectMessageSerializationDefered());
0:         assertEquals(factory.isOnSendPrepareMessageBody(), temp.isOnSendPrepareMessageBody());
0:         assertEquals(factory.isOptimizedMessageDispatch(), temp.isOptimizedMessageDispatch());
0:         assertEquals(factory.getPassword(), temp.getPassword());
0:         assertEquals(factory.isUseAsyncSend(), temp.isUseAsyncSend());
0:         assertEquals(factory.isUseCompression(), temp.isUseCompression());
0:         assertEquals(factory.isUseRetroactiveConsumer(), temp.isUseRetroactiveConsumer());
0:         assertEquals(factory.getUserName(), temp.getUserName());
0:     }
0: 
0:     public void testDestination() throws Exception {
0:         // Create sample destination
0:         ActiveMQDestination dest = new ActiveMQQueue();
0:         dest.setPhysicalName("TEST.FOO");
0: 
0:         // Create reference
0:         Reference ref = JNDIReferenceFactory.createReference(dest.getClass().getName(), dest);
0: 
0:         // Get object created based on reference
0:         ActiveMQDestination temp;
0:         JNDIReferenceFactory refFactory = new JNDIReferenceFactory();
0:         temp = (ActiveMQDestination)refFactory.getObjectInstance(ref, null, null, null);
0: 
0:         // Check settings
0:         assertEquals(dest.getPhysicalName(), temp.getPhysicalName());
0:     }
0: }
============================================================================