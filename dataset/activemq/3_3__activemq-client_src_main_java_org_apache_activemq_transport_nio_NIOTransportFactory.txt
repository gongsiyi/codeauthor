1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
6:885c379: 
1:885c379: import java.io.IOException;
1:885c379: import java.net.InetAddress;
1:885c379: import java.net.InetSocketAddress;
1:885c379: import java.net.ServerSocket;
1:885c379: import java.net.Socket;
1:885c379: import java.net.URI;
1:885c379: import java.net.URISyntaxException;
1:885c379: import java.net.UnknownHostException;
1:885c379: import java.nio.channels.ServerSocketChannel;
1:885c379: import java.nio.channels.SocketChannel;
1:885c379: 
1:885c379: import javax.net.ServerSocketFactory;
1:885c379: import javax.net.SocketFactory;
1:885c379: 
1:885c379: import org.apache.activemq.transport.Transport;
1:885c379: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:885c379: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:885c379: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:885c379: 
1:885c379: public class NIOTransportFactory extends TcpTransportFactory {
1:885c379: 
1:04ee70a:     @Override
1:f812e34:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:f812e34:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:04ee70a:             @Override
1:f812e34:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:f812e34:                 return new NIOTransport(format, socket);
1:f812e34:             }
2:885c379:         };
12:885c379:     }
1:f812e34: 
1:04ee70a:     @Override
1:f812e34:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:f812e34:         return new NIOTransport(wf, socketFactory, location, localLocation);
1:f812e34:     }
1:f812e34: 
1:04ee70a:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             InitBuffer initBuffer) throws IOException {
1:04ee70a:        return new NIOTransport(wireFormat, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:f812e34:     protected ServerSocketFactory createServerSocketFactory() {
1:f812e34:         return new ServerSocketFactory() {
1:04ee70a:             @Override
1:f812e34:             public ServerSocket createServerSocket(int port) throws IOException {
1:f812e34:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:f812e34:                 serverSocketChannel.socket().bind(new InetSocketAddress(port));
1:f812e34:                 return serverSocketChannel.socket();
1:f812e34:             }
1:f812e34: 
1:04ee70a:             @Override
1:f812e34:             public ServerSocket createServerSocket(int port, int backlog) throws IOException {
1:f812e34:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:f812e34:                 serverSocketChannel.socket().bind(new InetSocketAddress(port), backlog);
1:f812e34:                 return serverSocketChannel.socket();
1:f812e34:             }
1:f812e34: 
1:04ee70a:             @Override
1:f812e34:             public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
1:f812e34:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:f812e34:                 serverSocketChannel.socket().bind(new InetSocketAddress(ifAddress, port), backlog);
1:f812e34:                 return serverSocketChannel.socket();
1:f812e34:             }
1:f812e34:         };
1:f812e34:     }
1:f812e34: 
1:04ee70a:     @Override
1:e504086:     protected SocketFactory createSocketFactory() throws IOException {
1:885c379:         return new SocketFactory() {
1:885c379: 
1:04ee70a:             @Override
1:f812e34:             public Socket createSocket() throws IOException {
1:f812e34:                 SocketChannel channel = SocketChannel.open();
1:f812e34:                 return channel.socket();
1:f812e34:             }
1:885c379: 
1:04ee70a:             @Override
1:f812e34:             public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
1:f812e34:                 SocketChannel channel = SocketChannel.open();
1:f812e34:                 channel.connect(new InetSocketAddress(host, port));
1:f812e34:                 return channel.socket();
1:f812e34:             }
1:885c379: 
1:04ee70a:             @Override
1:f812e34:             public Socket createSocket(InetAddress address, int port) throws IOException {
1:f812e34:                 SocketChannel channel = SocketChannel.open();
1:f812e34:                 channel.connect(new InetSocketAddress(address, port));
1:f812e34:                 return channel.socket();
1:f812e34:             }
1:885c379: 
1:04ee70a:             @Override
1:f812e34:             public Socket createSocket(String address, int port, InetAddress localAddresss, int localPort) throws IOException, UnknownHostException {
1:f812e34:                 SocketChannel channel = SocketChannel.open();
1:f812e34:                 channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
1:f812e34:                 channel.connect(new InetSocketAddress(address, port));
1:f812e34:                 return channel.socket();
1:f812e34:             }
1:f812e34: 
1:04ee70a:             @Override
1:f812e34:             public Socket createSocket(InetAddress address, int port, InetAddress localAddresss, int localPort) throws IOException {
1:f812e34:                 SocketChannel channel = SocketChannel.open();
1:f812e34:                 channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
1:f812e34:                 channel.connect(new InetSocketAddress(address, port));
1:f812e34:                 return channel.socket();
1:f812e34:             }
1:885c379:         };
1:885c379:     }
1:885c379: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:     @Override
1:             @Override
1:     @Override
1:     @Override
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             InitBuffer initBuffer) throws IOException {
1:        return new NIOTransport(wireFormat, socket, initBuffer);
1:     }
1: 
1:     @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 return new NIOTransport(format, socket);
1:             }
1: 
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new NIOTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:     protected ServerSocketFactory createServerSocketFactory() {
1:         return new ServerSocketFactory() {
1:             public ServerSocket createServerSocket(int port) throws IOException {
1:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:                 serverSocketChannel.socket().bind(new InetSocketAddress(port));
1:                 return serverSocketChannel.socket();
1:             }
1: 
1:             public ServerSocket createServerSocket(int port, int backlog) throws IOException {
1:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:                 serverSocketChannel.socket().bind(new InetSocketAddress(port), backlog);
1:                 return serverSocketChannel.socket();
1:             }
1: 
1:             public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
1:                 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
1:                 serverSocketChannel.socket().bind(new InetSocketAddress(ifAddress, port), backlog);
1:                 return serverSocketChannel.socket();
1:             }
1:         };
1:     }
1: 
1:             public Socket createSocket() throws IOException {
1:                 SocketChannel channel = SocketChannel.open();
1:                 return channel.socket();
1:             }
1:             public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
1:                 SocketChannel channel = SocketChannel.open();
1:                 channel.connect(new InetSocketAddress(host, port));
1:                 return channel.socket();
1:             }
1:             public Socket createSocket(InetAddress address, int port) throws IOException {
1:                 SocketChannel channel = SocketChannel.open();
1:                 channel.connect(new InetSocketAddress(address, port));
1:                 return channel.socket();
1:             }
1:             public Socket createSocket(String address, int port, InetAddress localAddresss, int localPort) throws IOException, UnknownHostException {
1:                 SocketChannel channel = SocketChannel.open();
1:                 channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
1:                 channel.connect(new InetSocketAddress(address, port));
1:                 return channel.socket();
1:             }
1: 
1:             public Socket createSocket(InetAddress address, int port, InetAddress localAddresss, int localPort) throws IOException {
1:                 SocketChannel channel = SocketChannel.open();
1:                 channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
1:                 channel.connect(new InetSocketAddress(address, port));
1:                 return channel.socket();
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.ServerSocket;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.nio.channels.ServerSocketChannel;
1: import java.nio.channels.SocketChannel;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: 
0: import org.apache.activemq.wireformat.WireFormat;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: 
1: public class NIOTransportFactory extends TcpTransportFactory {
1: 		
0: 	protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0: 		return new TcpTransportServer(this, location, serverSocketFactory) {
0: 			protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
0: 				return new NIOTransport(format,socket);
1: 			}			
1: 		};
1: 	}
1: 	
0: 	protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
0: 		return new NIOTransport(wf, socketFactory, location, localLocation);
1: 	}
1: 
1: 	
0:     protected ServerSocketFactory createServerSocketFactory() {
0:         return new ServerSocketFactory() {
0: 			public ServerSocket createServerSocket(int port) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(port));
0: 				return serverSocketChannel.socket();
1: 			}
0: 			public ServerSocket createServerSocket(int port, int backlog) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(port), backlog);
0: 				return serverSocketChannel.socket();
1: 			}
0: 			public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(ifAddress, port), backlog);
0: 				return serverSocketChannel.socket();
1: 			}
1:         };
1:     }
1:     
0:     protected SocketFactory createSocketFactory() {
1:         return new SocketFactory() {
1: 
0:         	public Socket createSocket() throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0:         		return channel.socket();
1:         	}
1:         	
0: 			public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.connect(new InetSocketAddress(host, port));
0: 				return channel.socket();
1: 			}
1: 
0: 			public Socket createSocket(InetAddress address, int port) throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
1: 			}
1: 
0: 			public Socket createSocket(String address, int port, InetAddress localAddresss, int localPort) throws IOException, UnknownHostException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
1: 			}
1: 
0: 			public Socket createSocket(InetAddress address, int port, InetAddress localAddresss, int localPort) throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
1: 			}
1:         };
1:     }
1: }
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.net.InetSocketAddress;
0: import java.net.ServerSocket;
0: import java.net.Socket;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
0: import java.nio.channels.ServerSocketChannel;
0: import java.nio.channels.SocketChannel;
0: 
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
0: 
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.transport.tcp.TcpTransportFactory;
0: import org.apache.activemq.transport.tcp.TcpTransportServer;
0: 
0: public class NIOTransportFactory extends TcpTransportFactory {
0: 		
0: 	protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0: 		return new TcpTransportServer(this, location, serverSocketFactory) {
0: 			protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
0: 				return new NIOTransport(format,socket);
0: 			}			
0: 		};
0: 	}
0: 	
0: 	protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
0: 		return new NIOTransport(wf, socketFactory, location, localLocation);
0: 	}
0: 
0: 	
0:     protected ServerSocketFactory createServerSocketFactory() {
0:         return new ServerSocketFactory() {
0: 			public ServerSocket createServerSocket(int port) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(port));
0: 				return serverSocketChannel.socket();
0: 			}
0: 			public ServerSocket createServerSocket(int port, int backlog) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(port), backlog);
0: 				return serverSocketChannel.socket();
0: 			}
0: 			public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
0: 		        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
0: 		        serverSocketChannel.socket().bind(new InetSocketAddress(ifAddress, port), backlog);
0: 				return serverSocketChannel.socket();
0: 			}
0:         };
0:     }
0:     
0:     protected SocketFactory createSocketFactory() {
0:         return new SocketFactory() {
0: 
0:         	public Socket createSocket() throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0:         		return channel.socket();
0:         	}
0:         	
0: 			public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.connect(new InetSocketAddress(host, port));
0: 				return channel.socket();
0: 			}
0: 
0: 			public Socket createSocket(InetAddress address, int port) throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
0: 			}
0: 
0: 			public Socket createSocket(String address, int port, InetAddress localAddresss, int localPort) throws IOException, UnknownHostException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
0: 			}
0: 
0: 			public Socket createSocket(InetAddress address, int port, InetAddress localAddresss, int localPort) throws IOException {
0: 		        SocketChannel channel = SocketChannel.open();
0: 		        channel.socket().bind(new InetSocketAddress(localAddresss, localPort));
0: 		        channel.connect(new InetSocketAddress(address, port));
0: 				return channel.socket();
0: 			}
0:         };
0:     }
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e504086
/////////////////////////////////////////////////////////////////////////
1:     protected SocketFactory createSocketFactory() throws IOException {
============================================================================