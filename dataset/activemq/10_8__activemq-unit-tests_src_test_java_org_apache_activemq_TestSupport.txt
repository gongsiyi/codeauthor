1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import java.io.File;
1:f206a1b: import java.io.IOException;
1:687badb: import java.util.List;
1:5619cd0: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.TextMessage;
1:be919fb: import javax.management.MalformedObjectNameException;
1:be919fb: import javax.management.ObjectName;
1:f00d2fb: 
1:be919fb: import org.apache.activemq.broker.BrokerRegistry;
1:5619cd0: import org.apache.activemq.broker.BrokerService;
1:be919fb: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:5619cd0: import org.apache.activemq.broker.region.DestinationStatistics;
1:5619cd0: import org.apache.activemq.broker.region.RegionBroker;
1:687badb: import org.apache.activemq.broker.region.Subscription;
1:5619cd0: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:f206a1b: import org.apache.activemq.store.PersistenceAdapter;
1:f206a1b: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:f206a1b: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:aa36bba: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1:eae88fe: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:0142c4d: import org.apache.activemq.util.JMXSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Useful base class for unit test cases
1:b0c2a40:  *
1:230a86c:  *
1:d29ca2a:  */
1:f206a1b: public abstract class TestSupport extends CombinationTestSupport {
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQConnectionFactory connectionFactory;
1:d29ca2a:     protected boolean topic = true;
1:f206a1b:     public PersistenceAdapterChoice defaultPersistenceAdapter = PersistenceAdapterChoice.KahaDB;
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQMessage createMessage() {
1:d29ca2a:         return new ActiveMQMessage();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Destination createDestination(String subject) {
1:d29ca2a:         if (topic) {
1:d29ca2a:             return new ActiveMQTopic(subject);
1:230a86c:         } else {
1:d29ca2a:             return new ActiveMQQueue(subject);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:27f7cab:     protected Destination createDestination() {
1:fb5a373:         return createDestination(getDestinationString());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:fb5a373:      * Returns the name of the destination used in this test case
1:fb5a373:      */
1:fb5a373:     protected String getDestinationString() {
1:3432a75:         return getClass().getName() + "." + getName(true);
1:d29ca2a:     }
1:230a86c: 
1:fb5a373:     /**
1:d29ca2a:      * @param messsage
1:d29ca2a:      * @param firstSet
1:d29ca2a:      * @param secondSet
1:d29ca2a:      */
1:230a86c:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet)
1:230a86c:         throws JMSException {
1:d29ca2a:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1:d29ca2a:         for (int i = 0; i < secondSet.length; i++) {
1:230a86c:             TextMessage m1 = (TextMessage)firstSet[i];
1:230a86c:             TextMessage m2 = (TextMessage)secondSet[i];
1:230a86c:             assertFalse("Message " + (i + 1) + " did not match : " + messsage + ": expected {" + m1
1:230a86c:                         + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:230a86c:             assertEquals("Message " + (i + 1) + " did not match: " + messsage + ": expected {" + m1
1:230a86c:                          + "}, but was {" + m2 + "}", m1.getText(), m2.getText());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new connection
1:d29ca2a:      */
1:d29ca2a:     protected Connection createConnection() throws Exception {
1:d29ca2a:         return getConnectionFactory().createConnection();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:d29ca2a:         if (connectionFactory == null) {
1:d29ca2a:             connectionFactory = createConnectionFactory();
1:d29ca2a:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:d29ca2a:         }
1:d29ca2a:         return connectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getConsumerSubject() {
1:d29ca2a:         return getSubject();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getProducerSubject() {
1:d29ca2a:         return getSubject();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getSubject() {
1:0945e32:         return getName();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void recursiveDelete(File f) {
1:230a86c:         if (f.isDirectory()) {
1:d29ca2a:             File[] files = f.listFiles();
1:d29ca2a:             for (int i = 0; i < files.length; i++) {
1:d29ca2a:                 recursiveDelete(files[i]);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         f.delete();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void removeMessageStore() {
1:230a86c:         if (System.getProperty("activemq.store.dir") != null) {
1:d29ca2a:             recursiveDelete(new File(System.getProperty("activemq.store.dir")));
1:d29ca2a:         }
1:230a86c:         if (System.getProperty("derby.system.home") != null) {
1:d29ca2a:             recursiveDelete(new File(System.getProperty("derby.system.home")));
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:5619cd0:     public static DestinationStatistics getDestinationStatistics(BrokerService broker, ActiveMQDestination destination) {
1:5619cd0:         DestinationStatistics result = null;
1:5619cd0:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:5619cd0:         if (dest != null) {
1:5619cd0:             result = dest.getDestinationStatistics();
1:d29ca2a:         }
1:5619cd0:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:687badb:     public static List<Subscription> getDestinationConsumers(BrokerService broker, ActiveMQDestination destination) {
1:687badb:         List<Subscription> result = null;
1:687badb:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:687badb:         if (dest != null) {
1:687badb:             result = dest.getConsumers();
1:687badb:         }
1:687badb:         return result;
1:687badb:     }
1:687badb: 
1:5619cd0:     public static org.apache.activemq.broker.region.Destination getDestination(BrokerService target, ActiveMQDestination destination) {
1:5619cd0:         org.apache.activemq.broker.region.Destination result = null;
1:5619cd0:         for (org.apache.activemq.broker.region.Destination dest : getDestinationMap(target, destination).values()) {
1:5619cd0:             if (dest.getName().equals(destination.getPhysicalName())) {
1:5619cd0:                 result = dest;
1:f206a1b:                 break;
2:5619cd0:             }
1:5619cd0:         }
1:5619cd0:         return result;
1:5619cd0:     }
1:d29ca2a: 
1:5619cd0:     private static Map<ActiveMQDestination, org.apache.activemq.broker.region.Destination> getDestinationMap(BrokerService target,
1:5619cd0:             ActiveMQDestination destination) {
1:5619cd0:         RegionBroker regionBroker = (RegionBroker) target.getRegionBroker();
1:e07d29c:         if (destination.isTemporary()) {
1:e07d29c:             return destination.isQueue() ? regionBroker.getTempQueueRegion().getDestinationMap() :
1:e07d29c:                     regionBroker.getTempTopicRegion().getDestinationMap();
1:e07d29c:         }
1:5619cd0:         return destination.isQueue() ?
1:5619cd0:                     regionBroker.getQueueRegion().getDestinationMap() :
1:5619cd0:                         regionBroker.getTopicRegion().getDestinationMap();
1:5619cd0:     }
1:d29ca2a: 
1:be919fb:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:be919fb:         BrokerService brokerService = BrokerRegistry.getInstance().lookup("localhost");
1:0142c4d:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+ JMXSupport.encodeObjectNamePart(name));
1:be919fb:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:be919fb:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:be919fb:         return proxy;
1:be919fb:     }
1:be919fb: 
1:8cf98a0:     public static enum PersistenceAdapterChoice {LevelDB, KahaDB, JDBC, MEM };
1:d29ca2a: 
1:f206a1b:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:f206a1b:         return setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:f206a1b:     }
1:d29ca2a: 
1:67ead20:     public static PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {
1:f206a1b:         PersistenceAdapter adapter = null;
1:f206a1b:         switch (choice) {
1:f206a1b:         case JDBC:
1:25376af:             JDBCPersistenceAdapter jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:25376af:             jdbcPersistenceAdapter.setUseLock(false); // rollback (at shutdown) on derby can take a long time with file io etc
1:25376af:             adapter = jdbcPersistenceAdapter;
1:f206a1b:             break;
1:f206a1b:         case KahaDB:
1:f206a1b:             adapter = new KahaDBPersistenceAdapter();
1:f206a1b:             break;
1:aa36bba:         case LevelDB:
1:aa36bba:             adapter = new LevelDBPersistenceAdapter();
1:aa36bba:             break;
1:eae88fe:         case MEM:
1:eae88fe:             adapter = new MemoryPersistenceAdapter();
1:eae88fe:             break;
1:f206a1b:         }
1:f206a1b:         broker.setPersistenceAdapter(adapter);
1:25376af:         adapter.setDirectory(new File(broker.getBrokerDataDirectory(), choice.name()));
1:f206a1b:         return adapter;
1:f206a1b:     }
1:c7d559f: 
1:266d23e:     public void stopBrokerWithStoreFailure(BrokerService broker, PersistenceAdapterChoice choice) throws Exception {
1:266d23e:         switch (choice) {
1:266d23e:             case KahaDB:
1:266d23e:                 KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:266d23e: 
1:266d23e:                 // have the broker stop with an IOException on next checkpoint so it has a pending local transaction to recover
1:266d23e:                 kahaDBPersistenceAdapter.getStore().getJournal().close();
1:266d23e:                 break;
1:266d23e:             default:
1:266d23e:                 // just stop normally by default
1:266d23e:                 broker.stop();
1:266d23e:         }
1:266d23e:         broker.waitUntilStopped();
1:266d23e:     }
1:266d23e: 
1:266d23e: 
1:32c06a0:     /**
1:32c06a0:      * Test if base directory contains spaces
1:32c06a0:      */
1:32c06a0:     protected void assertBaseDirectoryContainsSpaces() {
1:c7d559f:         assertFalse("Base directory cannot contain spaces.", new File(System.getProperty("basedir", ".")).getAbsoluteFile().toString().contains(" "));
1:32c06a0:     }
1:c7d559f: 
1:ac635dd:     public void safeCloseConnection(Connection c) {
1:ac635dd:         if (c != null) {
1:ac635dd:             try {
1:ac635dd:                 c.close();
1:ac635dd:             } catch (JMSException ignored) {}
1:ac635dd:         }
1:ac635dd:     }
1:5619cd0: }
============================================================================
author:Vasco Veloso
-------------------------------------------------------------------------------
commit:687badb
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     public static List<Subscription> getDestinationConsumers(BrokerService broker, ActiveMQDestination destination) {
1:         List<Subscription> result = null;
1:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:         if (dest != null) {
1:             result = dest.getConsumers();
1:         }
1:         return result;
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:3a0a723
/////////////////////////////////////////////////////////////////////////
0: import java.net.ServerSocket;
/////////////////////////////////////////////////////////////////////////
0: import javax.net.ServerSocketFactory;
commit:ac635dd
/////////////////////////////////////////////////////////////////////////
1:     public void safeCloseConnection(Connection c) {
1:         if (c != null) {
1:             try {
1:                 c.close();
1:             } catch (JMSException ignored) {}
1:         }
1:     }
commit:0142c4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.JMXSupport;
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+ JMXSupport.encodeObjectNamePart(name));
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         BrokerService brokerService = BrokerRegistry.getInstance().lookup("localhost");
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
commit:b60bfbb
/////////////////////////////////////////////////////////////////////////
0:     public static enum PersistenceAdapterChoice {LevelDB, KahaDB, AMQ, JDBC, MEM };
commit:25376af
/////////////////////////////////////////////////////////////////////////
1:             JDBCPersistenceAdapter jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:             jdbcPersistenceAdapter.setUseLock(false); // rollback (at shutdown) on derby can take a long time with file io etc
1:             adapter = jdbcPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         adapter.setDirectory(new File(broker.getBrokerDataDirectory(), choice.name()));
commit:8cf98a0
/////////////////////////////////////////////////////////////////////////
1:     public static enum PersistenceAdapterChoice {LevelDB, KahaDB, JDBC, MEM };
commit:c6837ac
/////////////////////////////////////////////////////////////////////////
0:         adapter.setDirectory(broker.getBrokerDataDirectory());
commit:67ead20
/////////////////////////////////////////////////////////////////////////
1:     public static PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1:     public void stopBrokerWithStoreFailure(BrokerService broker, PersistenceAdapterChoice choice) throws Exception {
1:         switch (choice) {
1:             case KahaDB:
1:                 KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1: 
1:                 // have the broker stop with an IOException on next checkpoint so it has a pending local transaction to recover
1:                 kahaDBPersistenceAdapter.getStore().getJournal().close();
1:                 break;
1:             default:
1:                 // just stop normally by default
1:                 broker.stop();
1:         }
1:         broker.waitUntilStopped();
1:     }
1: 
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f00d2fb
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     public static enum PersistenceAdapterChoice {LevelDB, KahaDB, JDBC, MEM };
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:aa36bba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:     public static enum PersistenceAdapterChoice {LevelDB, KahaDB, AMQ, JDBC, MEM };
/////////////////////////////////////////////////////////////////////////
1:         case LevelDB:
1:             adapter = new LevelDBPersistenceAdapter();
1:             break;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet)
1:         throws JMSException {
1:             TextMessage m1 = (TextMessage)firstSet[i];
1:             TextMessage m2 = (TextMessage)secondSet[i];
1:             assertFalse("Message " + (i + 1) + " did not match : " + messsage + ": expected {" + m1
1:                         + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:             assertEquals("Message " + (i + 1) + " did not match: " + messsage + ": expected {" + m1
1:                          + "}, but was {" + m2 + "}", m1.getText(), m2.getText());
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (f.isDirectory()) {
/////////////////////////////////////////////////////////////////////////
1:         if (System.getProperty("activemq.store.dir") != null) {
1:         if (System.getProperty("derby.system.home") != null) {
commit:0945e32
/////////////////////////////////////////////////////////////////////////
1:         return getName();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: /**
1:  * Useful base class for unit test cases
1:  *
0:  * @version $Revision: 1.5 $
1:  */
0: public class TestSupport extends TestCase {
1: 
0:     protected Log log = LogFactory.getLog(getClass());
1:     protected ActiveMQConnectionFactory connectionFactory;
1:     protected boolean topic = true;
1: 
0:     public TestSupport() {
0:         super();
1:     }
1: 
0:     public TestSupport(String name) {
0:         super(name);
1:     }
1: 
1:     protected ActiveMQMessage createMessage() {
1:         return new ActiveMQMessage();
1:     }
1: 
1:     protected Destination createDestination(String subject) {
1:         if (topic) {
1:             return new ActiveMQTopic(subject);
1:         }
0:         else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
1:     /**
1:      * @param messsage
1:      * @param firstSet
1:      * @param secondSet
1:      */
0:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet) throws JMSException {
1:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1:         for (int i = 0; i < secondSet.length; i++) {
0:             TextMessage m1 = (TextMessage) firstSet[i];
0:             TextMessage m2 = (TextMessage) secondSet[i];
0:             assertFalse("Message " + (i + 1) + " did not match : " + messsage + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
0:             assertEquals("Message " + (i + 1) + " did not match: " + messsage + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getText(), m2.getText());
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:     }
1: 
1:     /**
1:      * Factory method to create a new connection
1:      */
1:     protected Connection createConnection() throws Exception {
1:         return getConnectionFactory().createConnection();
1:     }
1: 
1:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         if (connectionFactory == null) {
1:             connectionFactory = createConnectionFactory();
1:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:         }
1:         return connectionFactory;
1:     }
1: 
1:     protected String getConsumerSubject() {
1:         return getSubject();
1:     }
1: 
1:     protected String getProducerSubject() {
1:         return getSubject();
1:     }
1: 
1:     protected String getSubject() {
0:         return getClass().getName() + "." + getName();
1:     }
1:     
1:     
1:     public static void recursiveDelete(File f) {
0:         if( f.isDirectory() ) {
1:             File[] files = f.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         f.delete();
1:     }
1: 
1:     public static void removeMessageStore() {
0:         if( System.getProperty("activemq.store.dir")!=null ) {
1:             recursiveDelete(new File(System.getProperty("activemq.store.dir")));
1:         }
0:         if( System.getProperty("derby.system.home")!=null ) {
1:             recursiveDelete(new File(System.getProperty("derby.system.home")));
1:         }
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:         assertFalse("Base directory cannot contain spaces.", new File(System.getProperty("basedir", ".")).getAbsoluteFile().toString().contains(" "));
commit:ef24cc9
author:Christian Posta
-------------------------------------------------------------------------------
commit:e07d29c
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isTemporary()) {
1:             return destination.isQueue() ? regionBroker.getTempQueueRegion().getDestinationMap() :
1:                     regionBroker.getTempTopicRegion().getDestinationMap();
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:32c06a0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test if base directory contains spaces
1:      */
1:     protected void assertBaseDirectoryContainsSpaces() {
0:     	assertFalse("Base directory cannot contain spaces.", new File(System.getProperty("basedir", ".")).getAbsoluteFile().toString().contains(" "));
1:     }
0: 
commit:eae88fe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:     public static enum PersistenceAdapterChoice {KahaDB, AMQ, JDBC, MEM };
/////////////////////////////////////////////////////////////////////////
1:         case MEM:
1:             adapter = new MemoryPersistenceAdapter();
1:             break;
commit:3432a75
/////////////////////////////////////////////////////////////////////////
1:         return getClass().getName() + "." + getName(true);
commit:f206a1b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1: public abstract class TestSupport extends CombinationTestSupport {
1:     public PersistenceAdapterChoice defaultPersistenceAdapter = PersistenceAdapterChoice.KahaDB;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public static enum PersistenceAdapterChoice {KahaDB, AMQ, JDBC };
0: 
1:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:         return setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:     }
0:     
0:     public PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {
1:         PersistenceAdapter adapter = null;
1:         switch (choice) {
0:         case AMQ:
0:             adapter = new AMQPersistenceAdapter();
1:             break;
1:         case JDBC:
0:             adapter = new JDBCPersistenceAdapter();
1:             break;
1:         case KahaDB:
1:             adapter = new KahaDBPersistenceAdapter();
1:             break;
1:         }
1:         broker.setPersistenceAdapter(adapter);
1:         return adapter;
1:     }
0: 
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public static DestinationStatistics getDestinationStatistics(BrokerService broker, ActiveMQDestination destination) {
1:         DestinationStatistics result = null;
1:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:         if (dest != null) {
1:             result = dest.getDestinationStatistics();
1:         }
1:         return result;
1:     }
0:     
1:     public static org.apache.activemq.broker.region.Destination getDestination(BrokerService target, ActiveMQDestination destination) {
1:         org.apache.activemq.broker.region.Destination result = null;
1:         for (org.apache.activemq.broker.region.Destination dest : getDestinationMap(target, destination).values()) {
1:             if (dest.getName().equals(destination.getPhysicalName())) {
1:                 result = dest;
0:                 break;
1:             }
1:         }
1:         return result;
1:     }
0: 
1:     private static Map<ActiveMQDestination, org.apache.activemq.broker.region.Destination> getDestinationMap(BrokerService target,
1:             ActiveMQDestination destination) {
1:         RegionBroker regionBroker = (RegionBroker) target.getRegionBroker();
1:         return destination.isQueue() ?
1:                     regionBroker.getQueueRegion().getDestinationMap() :
1:                         regionBroker.getTopicRegion().getDestinationMap();
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
author:James Strachan
-------------------------------------------------------------------------------
commit:fb5a373
/////////////////////////////////////////////////////////////////////////
1:         return createDestination(getDestinationString());
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
0:         return getClass().getName() + "." + getName();
0:     }
0:     
0:     
1:     /**
commit:27f7cab
/////////////////////////////////////////////////////////////////////////
1:     protected Destination createDestination() {
0:         return createDestination(getClass().getName() + "." + getName());
0:     }
0: 
============================================================================