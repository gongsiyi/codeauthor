1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.xbean;
1:050637c: 
1:050637c: import java.net.URI;
1:38ab4b1: 
1:050637c: import junit.framework.TestCase;
1:38ab4b1: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:050637c: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.Topic;
1:aa2dfb6: import org.apache.activemq.broker.region.policy.*;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.ConnectionId;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:050637c: 
1:d29ca2a: /**
1:38ab4b1:  *
1:d29ca2a:  */
1:d29ca2a: public class XBeanConfigTest extends TestCase {
1:93dc39b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(XBeanConfigTest.class);
8:d29ca2a: 
1:d29ca2a:     protected BrokerService brokerService;
1:d29ca2a:     protected Broker broker;
1:d29ca2a:     protected ConnectionContext context;
1:d29ca2a:     protected ConnectionInfo info;
1:d29ca2a: 
1:7f5213b:     public void testBrokerConfiguredCorrectly() throws Exception {
1:d29ca2a: 
1:e614534:         // Validate the system properties are being evaluated in xbean.
1:e614534:         assertEquals("testbroker", brokerService.getBrokerName());
1:d29ca2a: 
1:204f91f:         Topic topic = (Topic)broker.addDestination(context, new ActiveMQTopic("FOO.BAR"),true);
1:d29ca2a:         DispatchPolicy dispatchPolicy = topic.getDispatchPolicy();
1:d29ca2a:         assertTrue("dispatchPolicy should be RoundRobinDispatchPolicy: " + dispatchPolicy, dispatchPolicy instanceof RoundRobinDispatchPolicy);
1:230a86c: 
1:d29ca2a:         SubscriptionRecoveryPolicy subscriptionRecoveryPolicy = topic.getSubscriptionRecoveryPolicy();
1:aa2dfb6:         subscriptionRecoveryPolicy = ((RetainedMessageSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy).getWrapped();
1:aa2dfb6: 
1:d29ca2a:         assertTrue("subscriptionRecoveryPolicy should be LastImageSubscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy,
1:230a86c:                    subscriptionRecoveryPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1:230a86c: 
1:fc00993:         LOG.info("destination: " + topic);
1:fc00993:         LOG.info("dispatchPolicy: " + dispatchPolicy);
1:fc00993:         LOG.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
1:d29ca2a: 
1:204f91f:         topic = (Topic)broker.addDestination(context, new ActiveMQTopic("ORDERS.BOOKS"),true);
1:d29ca2a:         dispatchPolicy = topic.getDispatchPolicy();
1:d29ca2a:         assertTrue("dispatchPolicy should be StrictOrderDispatchPolicy: " + dispatchPolicy, dispatchPolicy instanceof StrictOrderDispatchPolicy);
1:d29ca2a: 
1:d29ca2a:         subscriptionRecoveryPolicy = topic.getSubscriptionRecoveryPolicy();
1:aa2dfb6:         subscriptionRecoveryPolicy = ((RetainedMessageSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy).getWrapped();
1:d29ca2a:         assertTrue("subscriptionRecoveryPolicy should be TimedSubscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy,
1:230a86c:                    subscriptionRecoveryPolicy instanceof TimedSubscriptionRecoveryPolicy);
1:38ab4b1:         TimedSubscriptionRecoveryPolicy timedSubscriptionPolicy = (TimedSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy;
1:38ab4b1:         assertEquals("getRecoverDuration()", 60000, timedSubscriptionPolicy.getRecoverDuration());
1:230a86c: 
1:fc00993:         LOG.info("destination: " + topic);
1:fc00993:         LOG.info("dispatchPolicy: " + dispatchPolicy);
1:fc00993:         LOG.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
2:d29ca2a:     }
1:d29ca2a: 
1:204f91f:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:e614534:         System.setProperty("brokername", "testbroker");
1:d29ca2a:         brokerService = createBroker();
1:d29ca2a:         broker = brokerService.getBroker();
1:d29ca2a: 
1:d29ca2a:         // started automatically
1:230a86c:         // brokerService.start();
1:d29ca2a: 
1:d29ca2a:         context = new ConnectionContext();
1:d29ca2a:         context.setBroker(broker);
1:d29ca2a:         info = new ConnectionInfo();
1:d29ca2a:         info.setClientId("James");
1:d29ca2a:         info.setUserName("James");
1:d29ca2a:         info.setConnectionId(new ConnectionId("1234"));
1:230a86c: 
1:d29ca2a:         try {
1:d29ca2a:             broker.addConnection(context, info);
1:230a86c:         } catch (Throwable e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:             fail(e.getMessage());
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         assertNotNull("No broker created!");
1:d29ca2a:     }
1:d29ca2a: 
1:204f91f:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (brokerService != null) {
1:d29ca2a:             brokerService.stop();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:050637c:         String uri = "org/apache/activemq/xbean/activemq-policy.xml";
1:fc00993:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:aa2dfb6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.*;
/////////////////////////////////////////////////////////////////////////
1:         subscriptionRecoveryPolicy = ((RetainedMessageSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy).getWrapped();
1: 
/////////////////////////////////////////////////////////////////////////
1:         subscriptionRecoveryPolicy = ((RetainedMessageSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy).getWrapped();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:38ab4b1
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         TimedSubscriptionRecoveryPolicy timedSubscriptionPolicy = (TimedSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy;
1:         assertEquals("getRecoverDuration()", 60000, timedSubscriptionPolicy.getRecoverDuration());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(XBeanConfigTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("destination: " + topic);
1:         LOG.info("dispatchPolicy: " + dispatchPolicy);
1:         LOG.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("destination: " + topic);
1:         LOG.info("dispatchPolicy: " + dispatchPolicy);
1:         LOG.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Topic topic = (Topic)broker.addDestination(context, new ActiveMQTopic("FOO.BAR"));
1: 
1:                    subscriptionRecoveryPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1: 
0:         topic = (Topic)broker.addDestination(context, new ActiveMQTopic("ORDERS.BOOKS"));
1:                    subscriptionRecoveryPolicy instanceof TimedSubscriptionRecoveryPolicy);
0:         TimedSubscriptionRecoveryPolicy timedSubcriptionPolicy = (TimedSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // brokerService.start();
/////////////////////////////////////////////////////////////////////////
1: 
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(XBeanConfigTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:         log.info("destination: " + topic);
0:         log.info("dispatchPolicy: " + dispatchPolicy);
0:         log.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
/////////////////////////////////////////////////////////////////////////
0:         log.info("destination: " + topic);
0:         log.info("dispatchPolicy: " + dispatchPolicy);
0:         log.info("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Loading broker configuration from the classpath with URI: " + uri);
commit:e614534
/////////////////////////////////////////////////////////////////////////
1:         // Validate the system properties are being evaluated in xbean.
1:         assertEquals("testbroker", brokerService.getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("brokername", "testbroker");
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testBrokerConfiguredCorrectly() throws Exception {
commit:050637c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String uri = "org/apache/activemq/xbean/activemq-policy.xml";
0:         System.out.println("Loading broker configuration from the classpath with URI: " + uri);
0:         return BrokerFactory.createBroker(new URI("xbean:"+uri));
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.broker.region.policy.DispatchPolicy;
0: import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;
0: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
0: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
0: import org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy;
0: import org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.springframework.core.io.ClassPathResource;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class XBeanConfigTest extends TestCase {
1: 
1:     protected BrokerService brokerService;
1:     protected Broker broker;
1:     protected ConnectionContext context;
1:     protected ConnectionInfo info;
1: 
0:     public void testBrokerConfiguredCorrectly() throws Throwable {
1: 
1: 
0:         Topic topic = (Topic) broker.addDestination(context, new ActiveMQTopic("FOO.BAR"));
1:         DispatchPolicy dispatchPolicy = topic.getDispatchPolicy();
1:         assertTrue("dispatchPolicy should be RoundRobinDispatchPolicy: " + dispatchPolicy, dispatchPolicy instanceof RoundRobinDispatchPolicy);
1:         
1:         SubscriptionRecoveryPolicy subscriptionRecoveryPolicy = topic.getSubscriptionRecoveryPolicy();
1:         assertTrue("subscriptionRecoveryPolicy should be LastImageSubscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy,
0:                 subscriptionRecoveryPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1:         
0:         System.out.println("destination: " + topic);
0:         System.out.println("dispatchPolicy: " + dispatchPolicy);
0:         System.out.println("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
1: 
0:         topic = (Topic) broker.addDestination(context, new ActiveMQTopic("ORDERS.BOOKS"));
1:         dispatchPolicy = topic.getDispatchPolicy();
1:         assertTrue("dispatchPolicy should be StrictOrderDispatchPolicy: " + dispatchPolicy, dispatchPolicy instanceof StrictOrderDispatchPolicy);
1: 
1:         subscriptionRecoveryPolicy = topic.getSubscriptionRecoveryPolicy();
1:         assertTrue("subscriptionRecoveryPolicy should be TimedSubscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy,
0:                 subscriptionRecoveryPolicy instanceof TimedSubscriptionRecoveryPolicy);
0:         TimedSubscriptionRecoveryPolicy timedSubcriptionPolicy = (TimedSubscriptionRecoveryPolicy) subscriptionRecoveryPolicy;
0:         assertEquals("getRecoverDuration()", 60000, timedSubcriptionPolicy.getRecoverDuration());
1:         
0:         System.out.println("destination: " + topic);
0:         System.out.println("dispatchPolicy: " + dispatchPolicy);
0:         System.out.println("subscriptionRecoveryPolicy: " + subscriptionRecoveryPolicy);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         brokerService = createBroker();
1:         broker = brokerService.getBroker();
1: 
1:         // started automatically
0:         //brokerService.start();
1: 
1:         context = new ConnectionContext();
1:         context.setBroker(broker);
1:         info = new ConnectionInfo();
1:         info.setClientId("James");
1:         info.setUserName("James");
1:         info.setConnectionId(new ConnectionId("1234"));
1:         
1:         try {
1:             broker.addConnection(context, info);
1:         }
0:         catch (Throwable e) {
1:             e.printStackTrace();
1:             fail(e.getMessage());
1:         }
1: 
1:         assertNotNull("No broker created!");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
0:         BrokerFactoryBean factory = new BrokerFactoryBean(new ClassPathResource("org/apache/activemq/xbean/activemq-policy.xml"));
0:         factory.afterPropertiesSet();
0:         return factory.getBroker();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(XBeanConfigTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Topic topic = (Topic)broker.addDestination(context, new ActiveMQTopic("FOO.BAR"),true);
/////////////////////////////////////////////////////////////////////////
1:         topic = (Topic)broker.addDestination(context, new ActiveMQTopic("ORDERS.BOOKS"),true);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
============================================================================