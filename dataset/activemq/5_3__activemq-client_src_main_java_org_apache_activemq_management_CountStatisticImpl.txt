1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
4:d29ca2a: 
1:86cbdfd: import java.util.concurrent.atomic.AtomicLong;
1:d29ca2a: 
1:74a7a8b: import javax.management.j2ee.statistics.CountStatistic;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A count statistic implementation
1:b0c2a40:  * 
1:f812e34:  * 
1:d29ca2a:  */
1:d29ca2a: public class CountStatisticImpl extends StatisticImpl implements CountStatistic {
1:d29ca2a: 
1:d29ca2a:     private final AtomicLong counter = new AtomicLong(0);
1:d29ca2a:     private CountStatisticImpl parent;
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl(CountStatisticImpl parent, String name, String description) {
1:d29ca2a:         this(name, description);
1:d29ca2a:         this.parent = parent;
7:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl(String name, String description) {
1:d29ca2a:         this(name, "count", description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl(String name, String unit, String description) {
1:d29ca2a:         super(name, unit, description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void reset() {
1:3c68051:         if (isDoReset()) {
1:d29ca2a:             super.reset();
1:d29ca2a:             counter.set(0);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public long getCount() {
1:d29ca2a:         return counter.get();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setCount(long count) {
1:f812e34:         if (isEnabled()) {
1:d29ca2a:             counter.set(count);
1:f812e34:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void add(long amount) {
1:f812e34:         if (isEnabled()) {
1:f812e34:             counter.addAndGet(amount);
1:f812e34:             updateSampleTime();
1:f812e34:             if (parent != null) {
1:f812e34:                 parent.add(amount);
1:f812e34:             }
1:f812e34:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void increment() {
1:f812e34:         if (isEnabled()) {
1:f812e34:             counter.incrementAndGet();
1:f812e34:             updateSampleTime();
1:f812e34:             if (parent != null) {
1:f812e34:                 parent.increment();
1:f812e34:             }
1:f812e34:         }
1:f812e34:     }
1:d29ca2a: 
1:f812e34:     public void subtract(long amount) {
1:f812e34:         if (isEnabled()) {
1:f812e34:             counter.addAndGet(-amount);
1:f812e34:             updateSampleTime();
1:f812e34:             if (parent != null) {
1:f812e34:                 parent.subtract(amount);
1:f812e34:             }
1:f812e34:         }
1:f812e34:     }
1:d29ca2a: 
1:f812e34:     public void decrement() {
1:f812e34:         if (isEnabled()) {
1:f812e34:             counter.decrementAndGet();
1:f812e34:             updateSampleTime();
1:f812e34:             if (parent != null) {
1:f812e34:                 parent.decrement();
1:f812e34:             }
1:f812e34:         }
1:f812e34:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getParent() {
1:d29ca2a:         return parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setParent(CountStatisticImpl parent) {
1:a0c1781:         if (this.parent != null) {
1:a0c1781:             this.parent.subtract(this.getCount());
1:a0c1781:         }
1:d29ca2a:         this.parent = parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void appendFieldDescription(StringBuffer buffer) {
1:d29ca2a:         buffer.append(" count: ");
1:d29ca2a:         buffer.append(Long.toString(counter.get()));
1:d29ca2a:         super.appendFieldDescription(buffer);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @return the average time period that elapses between counter increments
1:f812e34:      *         since the last reset.
1:d29ca2a:      */
1:d29ca2a:     public double getPeriod() {
1:d29ca2a:         double count = counter.get();
1:ecf89a6:         if (count == 0) {
1:d29ca2a:             return 0;
1:ecf89a6:         }
1:ecf89a6:         double time = System.currentTimeMillis() - getStartTime();
1:ecf89a6:         return time / (count * 1000.0);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @return the number of times per second that the counter is incrementing
1:f812e34:      *         since the last reset.
1:d29ca2a:      */
1:d29ca2a:     public double getFrequency() {
1:d29ca2a:         double count = counter.get();
1:ecf89a6:         double time = System.currentTimeMillis() - getStartTime();
1:ecf89a6:         return count * 1000.0 / time;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a0c1781
/////////////////////////////////////////////////////////////////////////
1:         if (this.parent != null) {
1:             this.parent.subtract(this.getCount());
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (count == 0) {
1:         }
1:         double time = System.currentTimeMillis() - getStartTime();
1:         return time / (count * 1000.0);
/////////////////////////////////////////////////////////////////////////
1:         double time = System.currentTimeMillis() - getStartTime();
1:         return count * 1000.0 / time;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.management.j2ee.statistics.CountStatistic;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         if (isEnabled()) {
1:         }
1:         if (isEnabled()) {
1:             counter.addAndGet(amount);
1:             updateSampleTime();
1:             if (parent != null) {
1:                 parent.add(amount);
1:             }
1:         }
1:         if (isEnabled()) {
1:             counter.incrementAndGet();
1:             updateSampleTime();
1:             if (parent != null) {
1:                 parent.increment();
1:             }
1:         }
1:     }
1:     public void subtract(long amount) {
1:         if (isEnabled()) {
1:             counter.addAndGet(-amount);
1:             updateSampleTime();
1:             if (parent != null) {
1:                 parent.subtract(amount);
1:             }
1:         }
1:     }
1:     public void decrement() {
1:         if (isEnabled()) {
1:             counter.decrementAndGet();
1:             updateSampleTime();
1:             if (parent != null) {
1:                 parent.decrement();
1:             }
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @return the average time period that elapses between counter increments
1:      *         since the last reset.
0:         if (count == 0)
0:         return (time / (count * 1000.0));
1: 
1:      * @return the number of times per second that the counter is incrementing
1:      *         since the last reset.
0:         return (count * 1000.0 / time);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
0: import javax.management.j2ee.statistics.CountStatistic;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicLong;
1: 
1: /**
1:  * A count statistic implementation
1:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public class CountStatisticImpl extends StatisticImpl implements CountStatistic {
1: 
1:     private final AtomicLong counter = new AtomicLong(0);
1:     private CountStatisticImpl parent;
1: 
1:     public CountStatisticImpl(CountStatisticImpl parent, String name, String description) {
1:         this(name, description);
1:         this.parent = parent;
1:     }
1: 
1:     public CountStatisticImpl(String name, String description) {
1:         this(name, "count", description);
1:     }
1: 
1:     public CountStatisticImpl(String name, String unit, String description) {
1:         super(name, unit, description);
1:     }
1: 
1:     public void reset() {
1:         super.reset();
1:         counter.set(0);
1:     }
1: 
1:     public long getCount() {
1:         return counter.get();
1:     }
1: 
1:     public void setCount(long count) {
1:         counter.set(count);
1:     }
1: 
1:     public void add(long amount) {
0:         counter.addAndGet(amount);
0:         updateSampleTime();
0:         if (parent != null) {
0:             parent.add(amount);
1:         }
1:     }
1: 
1:     public void increment() {
0:         counter.incrementAndGet();
0:         updateSampleTime();
0:         if (parent != null) {
0:             parent.increment();
1:         }
1:     }
1: 
0:     public void subtract(long amount) {
0:         counter.addAndGet(-amount);
0:         updateSampleTime();
0:         if (parent != null) {
0:             parent.subtract(amount);
1:         }
1:     }
1:     
0:     public void decrement() {
0:         counter.decrementAndGet();
0:         updateSampleTime();
0:         if (parent != null) {
0:             parent.decrement();
1:         }
1:     }
1: 
1:     public CountStatisticImpl getParent() {
1:         return parent;
1:     }
1: 
1:     public void setParent(CountStatisticImpl parent) {
1:         this.parent = parent;
1:     }
1: 
1:     protected void appendFieldDescription(StringBuffer buffer) {
1:         buffer.append(" count: ");
1:         buffer.append(Long.toString(counter.get()));
1:         super.appendFieldDescription(buffer);
1:     }
1:     
1:     /**
0:      * @return the average time period that elapses between counter increments since the last reset.
1:      */
1:     public double getPeriod() {
1:         double count = counter.get();
0:         if( count == 0 )
1:             return 0;
0:         double time = (System.currentTimeMillis() - getStartTime());
0:         return (time/(count*1000.0));
1:     }
1:     
1:     /**
0:      * @return the number of times per second that the counter is incrementing since the last reset.
1:      */
1:     public double getFrequency() {
1:         double count = counter.get();
0:         double time = (System.currentTimeMillis() - getStartTime());
0:         return (count*1000.0/time);
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:3c68051
/////////////////////////////////////////////////////////////////////////
1:         if (isDoReset()) {
0:             super.reset();
0:             counter.set(0);
0:         }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:ccf3f3c
/////////////////////////////////////////////////////////////////////////
0:     	if(isEnabled()) {
0:             counter.set(count);
0:     	}
0:     	if (isEnabled()) {
0: 			counter.addAndGet(amount);
0: 			updateSampleTime();
0: 			if (parent != null) {
0: 				parent.add(amount);
0: 			}
0: 		}
0: 		if (isEnabled()) {
0: 			counter.incrementAndGet();
0: 			updateSampleTime();
0: 			if (parent != null) {
0: 				parent.increment();
0: 			}
0: 		}
0: 	}
0: 	public void subtract(long amount) {
0: 		if (isEnabled()) {
0: 			counter.addAndGet(-amount);
0: 			updateSampleTime();
0: 			if (parent != null) {
0: 				parent.subtract(amount);
0: 			}
0: 		}
0: 	}
0: 
0: 	public void decrement() {
0: 		if (isEnabled()) {
0: 			counter.decrementAndGet();
0: 			updateSampleTime();
0: 			if (parent != null) {
0: 				parent.decrement();
0: 			}
0: 		}
0: 	}
============================================================================