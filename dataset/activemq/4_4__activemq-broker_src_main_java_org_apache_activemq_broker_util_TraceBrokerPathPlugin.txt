1:a49ba6c: /**
1:a49ba6c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a49ba6c:  * contributor license agreements.  See the NOTICE file distributed with
1:a49ba6c:  * this work for additional information regarding copyright ownership.
1:a49ba6c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a49ba6c:  * (the "License"); you may not use this file except in compliance with
1:a49ba6c:  * the License.  You may obtain a copy of the License at
1:6faa9c3:  *
1:a49ba6c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a49ba6c:  *
1:a49ba6c:  * Unless required by applicable law or agreed to in writing, software
1:a49ba6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a49ba6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a49ba6c:  * See the License for the specific language governing permissions and
1:a49ba6c:  * limitations under the License.
1:a49ba6c:  */
1:a49ba6c: package org.apache.activemq.broker.util;
3:a49ba6c: 
1:a49ba6c: import java.io.IOException;
1:a49ba6c: 
1:a49ba6c: import org.apache.activemq.broker.BrokerPluginSupport;
1:a49ba6c: import org.apache.activemq.command.MessageDispatch;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a49ba6c: 
1:a49ba6c: /**
1:6faa9c3:  * The TraceBrokerPathPlugin can be used in a network of Brokers. Each Broker
1:6faa9c3:  * that has the plugin configured, will add it's brokerName to the content
1:6faa9c3:  * of a JMS Property. If all Brokers have this property enabled, the path the
1:a49ba6c:  * message actually took through the network can be seen in the defined property.
1:6faa9c3:  *
1:a49ba6c:  * @org.apache.xbean.XBean element="traceBrokerPathPlugin"
1:b0c2a40:  *
1:a49ba6c:  */
1:6faa9c3: @SuppressWarnings("unchecked")
1:a49ba6c: public class TraceBrokerPathPlugin extends BrokerPluginSupport {
1:a49ba6c: 
1:6faa9c3:     private String stampProperty = "BrokerPath";
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TraceBrokerPathPlugin.class);
1:a49ba6c: 
1:6faa9c3:     public String getStampProperty() {
1:6faa9c3:         return stampProperty;
1:6faa9c3:     }
1:a49ba6c: 
1:6faa9c3:     public void setStampProperty(String stampProperty) {
1:6faa9c3:         if (stampProperty != null && !stampProperty.isEmpty()) {
1:6faa9c3:             this.stampProperty = stampProperty;
1:6faa9c3:         }
1:6faa9c3:     }
1:6faa9c3: 
1:6faa9c3:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:6faa9c3:         try {
1:6faa9c3:             if (messageDispatch != null && messageDispatch.getMessage() != null) {
1:6faa9c3:                 String brokerStamp = (String)messageDispatch.getMessage().getProperty(getStampProperty());
1:6faa9c3:                 if (brokerStamp == null) {
1:6faa9c3:                     brokerStamp = getBrokerName();
1:6faa9c3:                 } else {
1:6faa9c3:                     brokerStamp += "," + getBrokerName();
1:6faa9c3:                 }
1:6faa9c3:                 messageDispatch.getMessage().setProperty(getStampProperty(), brokerStamp);
1:53fff52:                 messageDispatch.getMessage().setMarshalledProperties(null);
1:6faa9c3:             }
1:6faa9c3:         } catch (IOException ioe) {
1:e1bbde7:             LOG.warn("Setting broker property failed", ioe);
1:6faa9c3:         }
1:6faa9c3:         super.preProcessDispatch(messageDispatch);
1:6faa9c3:     }
6:a49ba6c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Setting broker property failed", ioe);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:53fff52
/////////////////////////////////////////////////////////////////////////
1:                 messageDispatch.getMessage().setMarshalledProperties(null);
commit:6faa9c3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * The TraceBrokerPathPlugin can be used in a network of Brokers. Each Broker
1:  * that has the plugin configured, will add it's brokerName to the content
1:  * of a JMS Property. If all Brokers have this property enabled, the path the
1:  *
1:  *
1: @SuppressWarnings("unchecked")
1:     private String stampProperty = "BrokerPath";
1:     public String getStampProperty() {
1:         return stampProperty;
1:     }
1:     public void setStampProperty(String stampProperty) {
1:         if (stampProperty != null && !stampProperty.isEmpty()) {
1:             this.stampProperty = stampProperty;
1:         }
1:     }
1: 
1:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:         try {
1:             if (messageDispatch != null && messageDispatch.getMessage() != null) {
1:                 String brokerStamp = (String)messageDispatch.getMessage().getProperty(getStampProperty());
1:                 if (brokerStamp == null) {
1:                     brokerStamp = getBrokerName();
1:                 } else {
1:                     brokerStamp += "," + getBrokerName();
1:                 }
1:                 messageDispatch.getMessage().setProperty(getStampProperty(), brokerStamp);
1:             }
1:         } catch (IOException ioe) {
0:             LOG.warn("Setting broker property failed " + ioe, ioe);
1:         }
1:         super.preProcessDispatch(messageDispatch);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TraceBrokerPathPlugin.class);
commit:a49ba6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import java.io.IOException;
0: import java.util.Map;
1: 
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * The TraceBrokerPathPlugin can be used in a network of Brokers. Each Broker 
0:  * that has the plugin configured, will add it's brokerName to the content 
0:  * of a JMS Property. If all Brokers have this property enabled, the path the 
1:  * message actually took through the network can be seen in the defined property.
1:  * 
1:  * @org.apache.xbean.XBean element="traceBrokerPathPlugin"
1:  * 
0:  * @version $Revision$
1:  */
1: 
1: public class TraceBrokerPathPlugin extends BrokerPluginSupport {
1: 
0: 	private String stampProperty = "BrokerPath";
0:     private static final Log LOG = LogFactory.getLog(TraceBrokerPathPlugin.class);
1: 	
0: 	public String getStampProperty() {
0: 		return stampProperty;
1: 	}
1: 
0: 	public void setStampProperty(String stampProperty) {
0: 		this.stampProperty = stampProperty;
1: 	}
1: 
0: 	public void preProcessDispatch(MessageDispatch messageDispatch) {
0: 		try {
0:     		String brokerStamp = (String)messageDispatch.getMessage().getProperty(getStampProperty());
0:     		if (brokerStamp == null) {
0:     			brokerStamp = getBrokerName();
0:     		} else {
0:     			brokerStamp += "," + getBrokerName();
1:     		}
0:     		messageDispatch.getMessage().setProperty(getStampProperty(), brokerStamp);
0: 		} catch (IOException ioe) {
0: 			LOG.warn("Setting broker property failed " + ioe, ioe);
1: 		}
0: 		super.preProcessDispatch(messageDispatch);
1: 	}
1: }
============================================================================