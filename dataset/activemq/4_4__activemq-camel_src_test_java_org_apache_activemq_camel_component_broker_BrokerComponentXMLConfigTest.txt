1:b92a315: /**
1:b92a315:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b92a315:  * contributor license agreements.  See the NOTICE file distributed with
1:b92a315:  * this work for additional information regarding copyright ownership.
1:b92a315:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b92a315:  * (the "License"); you may not use this file except in compliance with
1:b92a315:  * the License.  You may obtain a copy of the License at
1:b92a315:  *
1:b92a315:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b92a315:  *
1:b92a315:  * Unless required by applicable law or agreed to in writing, software
1:b92a315:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b92a315:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b92a315:  * See the License for the specific language governing permissions and
1:b92a315:  * limitations under the License.
1:b92a315:  */
1:b92a315: package org.apache.activemq.camel.component.broker;
1:d4da85f: 
1:b92a315: import org.apache.activemq.ActiveMQConnectionFactory;
1:b92a315: import org.apache.activemq.broker.BrokerRegistry;
1:b92a315: import org.apache.activemq.broker.BrokerService;
1:8f407a7: import org.apache.activemq.command.ActiveMQMessage;
1:b92a315: import org.apache.activemq.command.ActiveMQQueue;
1:b92a315: import org.apache.activemq.xbean.BrokerFactoryBean;
1:b92a315: import org.junit.After;
1:b92a315: import org.junit.Before;
1:b92a315: import org.junit.Test;
1:b92a315: import org.springframework.core.io.ClassPathResource;
1:b92a315: import org.springframework.core.io.FileSystemResource;
1:b92a315: import org.springframework.core.io.Resource;
1:d4da85f: 
1:8f407a7: import javax.jms.*;
1:8f407a7: import java.util.Enumeration;
1:8f407a7: import java.util.concurrent.CountDownLatch;
1:8f407a7: import java.util.concurrent.TimeUnit;
1:8f407a7: 
1:8f407a7: import static org.junit.Assert.assertEquals;
1:8f407a7: import static org.junit.Assert.assertTrue;
1:8f407a7: 
1:b92a315: public class BrokerComponentXMLConfigTest {
10:b92a315: 
1:b92a315:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/camel/component/broker/";
1:b92a315:     protected static final String TOPIC_NAME = "test.broker.component.topic";
1:b92a315:     protected static final String QUEUE_NAME = "test.broker.component.queue";
1:8d31e44:     protected static final String ROUTE_QUEUE_NAME = "test.broker.component.route";
1:8d31e44:     protected static final String DIVERTED_QUEUE_NAME = "test.broker.component.ProcessLater";
1:8d31e44:     protected static final int DIVERT_COUNT = 100;
1:8d31e44: 
1:b92a315:     protected BrokerService brokerService;
1:b92a315:     protected ActiveMQConnectionFactory factory;
1:b92a315:     protected Connection producerConnection;
1:b92a315:     protected Connection consumerConnection;
1:b92a315:     protected Session consumerSession;
1:b92a315:     protected Session producerSession;
1:8d31e44: 
1:8d31e44:     protected int messageCount = 1000;
1:b92a315:     protected int timeOutInSeconds = 10;
1:b92a315: 
1:b92a315:     @Before
1:b92a315:     public void setUp() throws Exception {
1:b92a315:         brokerService = createBroker(new FileSystemResource(CONF_ROOT + "broker-camel.xml"));
1:b92a315: 
1:d4da85f:         factory = new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:b92a315:         consumerConnection = factory.createConnection();
1:b92a315:         consumerConnection.start();
1:b92a315:         producerConnection = factory.createConnection();
1:b92a315:         producerConnection.start();
1:b92a315:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d4da85f:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b92a315:     }
1:8d31e44: 
1:b92a315:     protected BrokerService createBroker(String resource) throws Exception {
1:b92a315:         return createBroker(new ClassPathResource(resource));
1:b92a315:     }
1:8d31e44: 
1:b92a315:     protected BrokerService createBroker(Resource resource) throws Exception {
1:b92a315:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:b92a315:         factory.afterPropertiesSet();
1:b92a315: 
1:b92a315:         BrokerService broker = factory.getBroker();
1:b92a315: 
1:b92a315:         assertTrue("Should have a broker!", broker != null);
1:b92a315: 
1:b92a315:         // Broker is already started by default when using the XML file
1:b92a315:         // broker.start();
1:b92a315: 
1:b92a315:         return broker;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @After
1:b92a315:     public void tearDown() throws Exception {
1:d4da85f:         if (producerConnection != null) {
1:b92a315:             producerConnection.close();
1:b92a315:         }
1:d4da85f:         if (consumerConnection != null) {
1:b92a315:             consumerConnection.close();
1:b92a315:         }
1:b92a315:         if (brokerService != null) {
1:b92a315:             brokerService.stop();
1:b92a315:         }
1:b92a315:     }
1:b92a315: 
1:8d31e44:     @Test
1:b92a315:     public void testReRouteAll() throws Exception {
1:b92a315:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1:b92a315: 
1:8d31e44:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
1:b92a315: 
1:b92a315:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:d4da85f:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:b92a315:         consumer.setMessageListener(new MessageListener() {
1:b92a315:             @Override
1:b92a315:             public void onMessage(javax.jms.Message message) {
1:b92a315:                 try {
1:d4da85f:                     assertEquals(9, message.getJMSPriority());
1:d4da85f:                     latch.countDown();
1:b92a315:                 } catch (Throwable e) {
1:b92a315:                     e.printStackTrace();
1:b92a315:                 }
1:b92a315:             }
1:b92a315:         });
1:8d31e44:         MessageProducer producer = producerSession.createProducer(topic);
1:8d31e44: 
1:d4da85f:         for (int i = 0; i < messageCount; i++) {
1:b92a315:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:b92a315:             producer.send(message);
1:b92a315:         }
1:b92a315: 
1:b92a315:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:d4da85f:         assertEquals(0, latch.getCount());
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Test
1:8d31e44:     public void testRouteWithDestinationLimit() throws Exception {
1:8d31e44:         final ActiveMQQueue routeQueue = new ActiveMQQueue(ROUTE_QUEUE_NAME);
1:8d31e44: 
1:8d31e44:         final CountDownLatch routeLatch = new CountDownLatch(DIVERT_COUNT);
1:d4da85f:         MessageConsumer messageConsumer = consumerSession.createConsumer(routeQueue);
1:8d31e44:         messageConsumer.setMessageListener(new MessageListener() {
1:8d31e44:             @Override
1:8d31e44:             public void onMessage(javax.jms.Message message) {
1:8d31e44:                 try {
1:8d31e44:                     routeLatch.countDown();
1:8d31e44:                 } catch (Throwable e) {
1:8d31e44:                     e.printStackTrace();
1:8d31e44:                 }
1:8d31e44:             }
1:8d31e44:         });
1:8d31e44: 
1:d4da85f:         final CountDownLatch divertLatch = new CountDownLatch(messageCount - DIVERT_COUNT);
1:d4da85f:         MessageConsumer divertConsumer = consumerSession.createConsumer(new ActiveMQQueue(DIVERTED_QUEUE_NAME));
1:8d31e44:         divertConsumer.setMessageListener(new MessageListener() {
1:8d31e44:             @Override
1:8d31e44:             public void onMessage(javax.jms.Message message) {
1:8d31e44:                 try {
1:8d31e44:                     divertLatch.countDown();
1:8d31e44:                 } catch (Throwable e) {
1:8d31e44:                     e.printStackTrace();
1:8d31e44:                 }
1:8d31e44:             }
1:8d31e44:         });
1:8d31e44: 
1:8d31e44:         MessageProducer producer = producerSession.createProducer(routeQueue);
1:8d31e44: 
1:d4da85f:         for (int i = 0; i < messageCount; i++) {
1:8d31e44:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8d31e44:             producer.send(message);
1:8d31e44:         }
1:8d31e44: 
1:8d31e44:         routeLatch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:d4da85f:         divertLatch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:d4da85f:         assertEquals(0, routeLatch.getCount());
1:d4da85f:         assertEquals(0, divertLatch.getCount());
1:8d31e44:     }
1:8d31e44: 
1:8f407a7:     @Test
1:8f407a7:     public void testPreserveOriginalHeaders() throws Exception {
1:8f407a7:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1:8f407a7: 
1:8f407a7:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
1:8f407a7: 
1:8f407a7:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f407a7:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:8f407a7:         consumer.setMessageListener(new MessageListener() {
1:8f407a7:             @Override
1:8f407a7:             public void onMessage(javax.jms.Message message) {
1:8f407a7:                 try {
1:8f407a7:                     assertEquals("321", message.getStringProperty("JMSXGroupID"));
1:8f407a7:                     assertEquals("custom", message.getStringProperty("CustomHeader"));
1:8f407a7:                     latch.countDown();
1:8f407a7:                 } catch (Throwable e) {
1:8f407a7:                     e.printStackTrace();
1:8f407a7:                 }
1:8f407a7:             }
1:8f407a7:         });
1:8f407a7:         MessageProducer producer = producerSession.createProducer(topic);
1:8f407a7: 
1:8f407a7:         for (int i = 0; i < messageCount; i++) {
1:8f407a7:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f407a7:             message.setStringProperty("JMSXGroupID", "123");
1:8f407a7:             producer.send(message);
1:8f407a7:         }
1:8f407a7: 
1:8f407a7:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f407a7:         assertEquals(0, latch.getCount());
1:8f407a7:     }
1:b92a315: }
============================================================================
author:Heath Kesler
-------------------------------------------------------------------------------
commit:8f407a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
1: import java.util.Enumeration;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testPreserveOriginalHeaders() throws Exception {
1:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1: 
1:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 try {
1:                     assertEquals("321", message.getStringProperty("JMSXGroupID"));
1:                     assertEquals("custom", message.getStringProperty("CustomHeader"));
1:                     latch.countDown();
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         MessageProducer producer = producerSession.createProducer(topic);
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             message.setStringProperty("JMSXGroupID", "123");
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0, latch.getCount());
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         factory = new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         if (producerConnection != null) {
1:         if (consumerConnection != null) {
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer consumer = consumerSession.createConsumer(queue);
1:                     assertEquals(9, message.getJMSPriority());
1:                     latch.countDown();
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < messageCount; i++) {
1:         assertEquals(0, latch.getCount());
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer messageConsumer = consumerSession.createConsumer(routeQueue);
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch divertLatch = new CountDownLatch(messageCount - DIVERT_COUNT);
1:         MessageConsumer divertConsumer = consumerSession.createConsumer(new ActiveMQQueue(DIVERTED_QUEUE_NAME));
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < messageCount; i++) {
1:         divertLatch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0, routeLatch.getCount());
1:         assertEquals(0, divertLatch.getCount());
author:rajdavies
-------------------------------------------------------------------------------
commit:8d31e44
/////////////////////////////////////////////////////////////////////////
1:     protected static final String ROUTE_QUEUE_NAME = "test.broker.component.route";
1:     protected static final String DIVERTED_QUEUE_NAME = "test.broker.component.ProcessLater";
1:     protected static final int DIVERT_COUNT = 100;
1: 
1: 
1:     protected int messageCount = 1000;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         Topic topic = consumerSession.createTopic(TOPIC_NAME);
0:         MessageConsumer  consumer = consumerSession.createConsumer(queue);
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer = producerSession.createProducer(topic);
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRouteWithDestinationLimit() throws Exception {
1:         final ActiveMQQueue routeQueue = new ActiveMQQueue(ROUTE_QUEUE_NAME);
1:         final CountDownLatch routeLatch = new CountDownLatch(DIVERT_COUNT);
0:         MessageConsumer  messageConsumer = consumerSession.createConsumer(routeQueue);
1:         messageConsumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 try {
1:                     routeLatch.countDown();
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
0:         final CountDownLatch divertLatch = new CountDownLatch(messageCount-DIVERT_COUNT);
0:         MessageConsumer  divertConsumer = consumerSession.createConsumer(new ActiveMQQueue(DIVERTED_QUEUE_NAME));
1:         divertConsumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 try {
1:                     divertLatch.countDown();
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1: 
1:         MessageProducer producer = producerSession.createProducer(routeQueue);
1: 
0:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         routeLatch.await(timeOutInSeconds, TimeUnit.SECONDS);
0:         divertLatch.await(timeOutInSeconds,TimeUnit.SECONDS);
0:         assertEquals(0,routeLatch.getCount());
0:         assertEquals(0,divertLatch.getCount());
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b92a315
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component.broker;
1: 
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: 
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.FileSystemResource;
1: import org.springframework.core.io.Resource;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class BrokerComponentXMLConfigTest {
1: 
1:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/camel/component/broker/";
0:     private static final Logger LOG = LoggerFactory.getLogger(BrokerComponentXMLConfigTest.class);
1:     protected static final String TOPIC_NAME = "test.broker.component.topic";
1:     protected static final String QUEUE_NAME = "test.broker.component.queue";
1:     protected BrokerService brokerService;
1:     protected ActiveMQConnectionFactory factory;
1:     protected Connection producerConnection;
1:     protected Connection consumerConnection;
1:     protected Session consumerSession;
1:     protected Session producerSession;
0:     protected MessageConsumer consumer;
0:     protected MessageProducer producer;
0:     protected Topic topic;
0:     protected int messageCount = 5000;
1:     protected int timeOutInSeconds = 10;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker(new FileSystemResource(CONF_ROOT + "broker-camel.xml"));
1: 
0:         factory =  new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:         consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1:         producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         topic = consumerSession.createTopic(TOPIC_NAME);
0:         producerSession = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         consumer = consumerSession.createConsumer(topic);
0:         producer = producerSession.createProducer(topic);
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1: 
1:         BrokerService broker = factory.getBroker();
1: 
1:         assertTrue("Should have a broker!", broker != null);
1: 
1:         // Broker is already started by default when using the XML file
1:         // broker.start();
1: 
1:         return broker;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
0:         if (producerConnection != null){
1:             producerConnection.close();
1:         }
0:         if (consumerConnection != null){
1:             consumerConnection.close();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testReRouteAll() throws Exception {
1:         final ActiveMQQueue queue = new ActiveMQQueue(QUEUE_NAME);
1: 
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
0:         consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 try {
0:                    assertEquals(9,message.getJMSPriority());
0:                    latch.countDown();
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
0:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
0:         assertEquals(0,latch.getCount());
1: 
1:     }
1: 
1: 
1: 
1: 
1: }
============================================================================