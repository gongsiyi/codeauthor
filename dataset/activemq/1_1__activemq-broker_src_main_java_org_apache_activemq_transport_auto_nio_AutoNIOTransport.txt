1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
1:e14aca8: package org.apache.activemq.transport.auto.nio;
1:04ee70a: 
1:04ee70a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:04ee70a: import java.net.URI;
1:04ee70a: import java.net.UnknownHostException;
1:04ee70a: 
1:04ee70a: import javax.net.SocketFactory;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.transport.nio.NIOTransport;
1:04ee70a: import org.apache.activemq.wireformat.WireFormat;
1:04ee70a: 
1:04ee70a: /**
1:04ee70a:  *
1:04ee70a:  *
1:04ee70a:  */
1:04ee70a: public class AutoNIOTransport extends NIOTransport {
1:04ee70a: 
1:04ee70a:     public AutoNIOTransport(WireFormat format, Socket socket,
1:04ee70a:             InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(format, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public AutoNIOTransport(WireFormat wireFormat, Socket socket)
1:04ee70a:             throws IOException {
1:04ee70a:         super(wireFormat, socket);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public AutoNIOTransport(WireFormat wireFormat, SocketFactory socketFactory,
1:04ee70a:             URI remoteLocation, URI localLocation) throws UnknownHostException,
1:04ee70a:             IOException {
1:04ee70a:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     boolean doneInitBuffer = false;
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Read from the initial buffer if it is set
1:04ee70a:      */
1:04ee70a:     @Override
1:04ee70a:     protected int readFromBuffer() throws IOException {
1:04ee70a:         int readSize = 0;
1:04ee70a:         if (!doneInitBuffer) {
1:e14aca8:             if (initBuffer == null || initBuffer.readSize < 8) {
1:e14aca8:                 throw new IOException("Protocol type could not be determined.");
1:04ee70a:             }
1:04ee70a:             if (nextFrameSize == -1) {
1:04ee70a:                 readSize = 4;
1:04ee70a:                 this.initBuffer.buffer.flip();
1:d2bd152:                 if (this.initBuffer.buffer.remaining() < 8) {
1:d2bd152:                     throw new IOException("Protocol type could not be determined.");
1:d2bd152:                 }
1:04ee70a:                 for (int i = 0; i < 4; i++) {
1:04ee70a:                     currentBuffer.put(initBuffer.buffer.get());
1:04ee70a:                 }
1:04ee70a:             } else {
1:04ee70a:                 for (int i = 0; i < 4; i++) {
1:04ee70a:                     currentBuffer.put(initBuffer.buffer.get());
1:04ee70a:                 }
1:04ee70a:                 readSize = 4;
1:04ee70a:                 doneInitBuffer = true;
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:         } else {
1:04ee70a:             readSize += channel.read(currentBuffer);
1:04ee70a:         }
1:04ee70a:         return readSize;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d2bd152
/////////////////////////////////////////////////////////////////////////
1:                 if (this.initBuffer.buffer.remaining() < 8) {
1:                     throw new IOException("Protocol type could not be determined.");
1:                 }
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.auto.nio;
/////////////////////////////////////////////////////////////////////////
1:             if (initBuffer == null || initBuffer.readSize < 8) {
1:                 throw new IOException("Protocol type could not be determined.");
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.broker.transport.auto.nio;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: 
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.transport.nio.NIOTransport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  *
1:  *
1:  */
1: public class AutoNIOTransport extends NIOTransport {
1: 
1:     public AutoNIOTransport(WireFormat format, Socket socket,
1:             InitBuffer initBuffer) throws IOException {
1:         super(format, socket, initBuffer);
1:     }
1: 
1:     public AutoNIOTransport(WireFormat wireFormat, Socket socket)
1:             throws IOException {
1:         super(wireFormat, socket);
1:     }
1: 
1:     public AutoNIOTransport(WireFormat wireFormat, SocketFactory socketFactory,
1:             URI remoteLocation, URI localLocation) throws UnknownHostException,
1:             IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1: 
1:     boolean doneInitBuffer = false;
1: 
1:     /**
1:      * Read from the initial buffer if it is set
1:      */
1:     @Override
1:     protected int readFromBuffer() throws IOException {
1:         int readSize = 0;
1:         if (!doneInitBuffer) {
0:             if (initBuffer == null) {
0:                 throw new IOException("Null initBuffer");
1:             }
1:             if (nextFrameSize == -1) {
1:                 readSize = 4;
1:                 this.initBuffer.buffer.flip();
1:                 for (int i = 0; i < 4; i++) {
1:                     currentBuffer.put(initBuffer.buffer.get());
1:                 }
1:             } else {
1:                 for (int i = 0; i < 4; i++) {
1:                     currentBuffer.put(initBuffer.buffer.get());
1:                 }
1:                 readSize = 4;
1:                 doneInitBuffer = true;
1:             }
1: 
1:         } else {
1:             readSize += channel.read(currentBuffer);
1:         }
1:         return readSize;
1:     }
1: 
1: 
1: }
============================================================================