1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:af1edf4:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.thread;
4:d29ca2a: 
1:d29ca2a: import java.util.HashMap;
1:a69c3e7: import java.util.Timer;
1:a69c3e7: import java.util.TimerTask;
1:a69c3e7: 
1:1a5ad28: import org.apache.activemq.util.ServiceStopper;
1:1a5ad28: import org.apache.activemq.util.ServiceSupport;
1:2769298: import org.slf4j.Logger;
1:2769298: import org.slf4j.LoggerFactory;
1:933eb2f: 
1:d29ca2a: /**
1:b0c2a40:  *
1:d29ca2a:  */
1:1453c53: public final class Scheduler extends ServiceSupport {
1:106f759: 
1:2769298:     private static final Logger LOG  = LoggerFactory.getLogger(Scheduler.class);
1:1a5ad28:     private final String name;
1:1453c53:     private Timer timer;
1:1a5ad28:     private final HashMap<Runnable, TimerTask> timerTasks = new HashMap<Runnable, TimerTask>();
1:d29ca2a: 
1:106f759:     public Scheduler(String name) {
1:1a5ad28:         this.name = name;
1:a69c3e7:     }
1:a69c3e7: 
1:106f759:     public synchronized void executePeriodically(final Runnable task, long period) {
1:2769298:         TimerTask existing = timerTasks.get(task);
1:2769298:         if (existing != null) {
1:2769298:             LOG.debug("Task {} already scheduled, cancelling and rescheduling", task);
1:2769298:             cancel(task);
1:2769298:         }
1:a69c3e7:         TimerTask timerTask = new SchedulerTimerTask(task);
1:1453c53:         timer.schedule(timerTask, period, period);
1:1a5ad28:         timerTasks.put(task, timerTask);
1:a69c3e7:     }
1:a69c3e7: 
1:2b2b35e:     public synchronized void cancel(Runnable task) {
1:1453c53:         TimerTask ticket = timerTasks.remove(task);
1:f812e34:         if (ticket != null) {
1:a69c3e7:             ticket.cancel();
1:3d5a758:             timer.purge(); // remove cancelled TimerTasks
1:a69c3e7:         }
1:933eb2f:     }
1:933eb2f: 
1:1a5ad28:     public synchronized void executeAfterDelay(final Runnable task, long redeliveryDelay) {
1:a69c3e7:         TimerTask timerTask = new SchedulerTimerTask(task);
1:1a5ad28:         timer.schedule(timerTask, redeliveryDelay);
1:933eb2f:     }
1:d29ca2a: 
1:2b2b35e:     public void shutdown() {
1:1a5ad28:         timer.cancel();
1:933eb2f:     }
1:d29ca2a: 
1:1a5ad28:     @Override
1:1a5ad28:     protected synchronized void doStart() throws Exception {
1:1a5ad28:         this.timer = new Timer(name, true);
1:fc00993:     }
1:d29ca2a: 
1:1a5ad28:     @Override
1:1a5ad28:     protected synchronized void doStop(ServiceStopper stopper) throws Exception {
1:106f759:         if (this.timer != null) {
1:106f759:             this.timer.cancel();
1:106f759:         }
1:f812e34:     }
1:d29ca2a: 
1:0619a87:     public String getName() {
1:0619a87:         return name;
6:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2769298
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG  = LoggerFactory.getLogger(Scheduler.class);
/////////////////////////////////////////////////////////////////////////
1:         TimerTask existing = timerTasks.get(task);
1:         if (existing != null) {
1:             LOG.debug("Task {} already scheduled, cancelling and rescheduling", task);
1:             cancel(task);
1:         }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:106f759
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Scheduler(String name) {
1:     public synchronized void executePeriodically(final Runnable task, long period) {
/////////////////////////////////////////////////////////////////////////
1:         if (this.timer != null) {
1:             this.timer.cancel();
1:         }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:af1edf4
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @deprecated use {@link #executePeriodically}
0:     @Deprecated
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:a69c3e7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Timer;
1: import java.util.TimerTask;
0:     private static final class SchedulerTimerTask extends TimerTask {
0: 		private final Runnable task;
1: 
0: 		private SchedulerTimerTask(Runnable task) {
0: 			this.task = task;
1: 		}
1: 
0: 		public void run() {
0: 			task.run();							
1: 		}
1: 	}
1: 
0: 	public static final Timer CLOCK_DAEMON = new Timer("ActiveMQ Scheduler", true);
0:     private static final HashMap<Runnable, TimerTask> TIMER_TASKS = new HashMap<Runnable, TimerTask>();
1:     	TimerTask timerTask = new SchedulerTimerTask(task);
0:         CLOCK_DAEMON.scheduleAtFixedRate(timerTask, period, period);
0:         TIMER_TASKS.put(task, timerTask);
0:     	TimerTask ticket = TIMER_TASKS.remove(task);
1:             ticket.cancel();
1:     	TimerTask timerTask = new SchedulerTimerTask(task);
0:         CLOCK_DAEMON.schedule(timerTask, redeliveryDelay);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: public final class Scheduler {
0:     public static final ScheduledThreadPoolExecutor CLOCK_DAEMON = new ScheduledThreadPoolExecutor(5, createThreadFactory());
0:     private static final HashMap<Runnable, ScheduledFuture> CLOCK_TICKETS = new HashMap<Runnable, ScheduledFuture>();
1: 
0:     private Scheduler() {
1:     }
1: 
0:     private static ThreadFactory createThreadFactory() {
0:         return new ThreadFactory() {
0:             public Thread newThread(Runnable runnable) {
0:                 Thread thread = new Thread(runnable, "ActiveMQ Scheduler");
0:                 thread.setDaemon(true);
0:                 return thread;
1:             }
0:         };
1:     }
0:         ScheduledFuture ticket = CLOCK_DAEMON
0:             .scheduleAtFixedRate(task, period, period, TimeUnit.MILLISECONDS);
0:         ScheduledFuture ticket = CLOCK_TICKETS.remove(task);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     public static final ScheduledThreadPoolExecutor CLOCK_DAEMON = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
/////////////////////////////////////////////////////////////////////////
0:         CLOCK_DAEMON.setKeepAliveTime(5, TimeUnit.SECONDS);
0:     private static final HashMap CLOCK_TICKETS = new HashMap();
0:     public static synchronized void executePeriodically(final Runnable task, long period) {
0:         ScheduledFuture ticket = CLOCK_DAEMON.scheduleAtFixedRate(task, period, period, TimeUnit.MILLISECONDS);
0:         CLOCK_TICKETS.put(task, ticket);
0:     public static synchronized void cancel(Runnable task) {
0:         ScheduledFuture ticket = (ScheduledFuture)CLOCK_TICKETS.remove(task);
0:             if (ticket instanceof Runnable) {
0:                 CLOCK_DAEMON.remove((Runnable)ticket);
1:             }
0:         CLOCK_DAEMON.schedule(task, redeliveryDelay, TimeUnit.MILLISECONDS);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     public static final ScheduledThreadPoolExecutor clockDaemon = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
0:         public Thread newThread(Runnable runnable) {
0:             Thread thread = new Thread(runnable, "ActiveMQ Scheduler");
0:             thread.setDaemon(true);
0:             return thread;
1:         }
0:     });
/////////////////////////////////////////////////////////////////////////
0:         ScheduledFuture ticket = (ScheduledFuture)clockTickets.remove(task);
1:         if (ticket != null) {
0:                 clockDaemon.remove((Runnable)ticket);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9f7fff7
/////////////////////////////////////////////////////////////////////////
0:             if (ticket instanceof RunnableScheduledFuture)
0:             	clockDaemon.remove((RunnableScheduledFuture) ticket);            
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ScheduledFuture;
0: import java.util.concurrent.ScheduledThreadPoolExecutor;
0: import java.util.concurrent.ThreadFactory;
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:acd5996
/////////////////////////////////////////////////////////////////////////
0:         	clockDaemon.remove(task);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: import java.util.HashMap;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ScheduledFuture;
0: import edu.emory.mathcs.backport.java.util.concurrent.ScheduledThreadPoolExecutor;
0: import edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class Scheduler {
1: 
1:     
0:     static public ScheduledThreadPoolExecutor clockDaemon = new ScheduledThreadPoolExecutor(5, new ThreadFactory(){
0:             public Thread newThread(Runnable runnable) {
0:                 Thread thread = new Thread(runnable,"ActiveMQ Scheduler");
0:                 thread.setDaemon(true);
0:                 return thread;
1:             }
0:         });
0:     static {
0:         clockDaemon.setKeepAliveTime(5, TimeUnit.SECONDS);
0:         clockDaemon.allowCoreThreadTimeOut(false);
1:     }
0:     static HashMap clockTickets = new HashMap();
1: 
0:     synchronized static public void executePeriodically(final Runnable task, long period) {
0:         ScheduledFuture ticket = clockDaemon.scheduleAtFixedRate(task, period, period, TimeUnit.MILLISECONDS);
0:         clockTickets.put(task, ticket);
1:     }
1: 
0:     synchronized static public void cancel(Runnable task) {
0:         ScheduledFuture ticket = (ScheduledFuture) clockTickets.remove(task);
0:         if( ticket!=null ) {
0:             ticket.cancel(true);
1:         }
1:     }
1: 
0:     public static void executeAfterDelay(final Runnable task, long redeliveryDelay) {
0:         clockDaemon.schedule(task, redeliveryDelay, TimeUnit.MILLISECONDS);
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3d5a758
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:             timer.purge(); // remove cancelled TimerTasks
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:1453c53
/////////////////////////////////////////////////////////////////////////
0:  *
1: public final class Scheduler extends ServiceSupport {
1:     private Timer timer;
0: 
0: 
0:         TimerTask timerTask = new SchedulerTimerTask(task);
1:         timer.schedule(timerTask, period, period);
0:      * execute on rough schedule based on termination of last execution. There is no
/////////////////////////////////////////////////////////////////////////
0: 
1:         TimerTask ticket = timerTasks.remove(task);
/////////////////////////////////////////////////////////////////////////
0:         TimerTask timerTask = new SchedulerTimerTask(task);
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:0619a87
/////////////////////////////////////////////////////////////////////////
0: 
1:     public String getName() {
1:         return name;
0:     }
commit:a1bd85e
/////////////////////////////////////////////////////////////////////////
0:     /*
0:      * execute on rough schedual based on termination of last execution. There is no
0:      * compensation (two runs in quick succession) for delays
0:      */
0:     public synchronized void schedualPeriodically(final Runnable task, long period) {
0:         TimerTask timerTask = new SchedulerTimerTask(task);
0:         CLOCK_DAEMON.schedule(timerTask, period, period);
0:         TIMER_TASKS.put(task, timerTask);
0:     }
0:     
commit:2b2b35e
/////////////////////////////////////////////////////////////////////////
0:  * Singelton, references maintained by users
0: public final class Scheduler { 
0: 	private final Timer CLOCK_DAEMON = new Timer("ActiveMQ Scheduler", true);
0:     private final HashMap<Runnable, TimerTask> TIMER_TASKS = new HashMap<Runnable, TimerTask>();
0:     private static Scheduler instance;
0:     static {
0:         instance = new Scheduler();
0:     }
0:     
0:     public static Scheduler getInstance() {
0:         return instance;
0:     }
0:     
0:     public synchronized void executePeriodically(final Runnable task, long period) {
1:     public synchronized void cancel(Runnable task) {
/////////////////////////////////////////////////////////////////////////
0:     public void executeAfterDelay(final Runnable task, long redeliveryDelay) {
1:     public void shutdown() {
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
0: public final class Scheduler extends ServiceSupport { 
1:     private final String name;
0: 	private Timer timer;
1:     private final HashMap<Runnable, TimerTask> timerTasks = new HashMap<Runnable, TimerTask>();
0:     public Scheduler (String name) {
1:         this.name = name;
0:         
0:     public void executePeriodically(final Runnable task, long period) {
0:         timer.scheduleAtFixedRate(timerTask, period, period);
1:         timerTasks.put(task, timerTask);
/////////////////////////////////////////////////////////////////////////
0:         timer.schedule(timerTask, period, period);
0:         timerTasks.put(task, timerTask);
0:     	TimerTask ticket = timerTasks.remove(task);
0:             timer.purge();//remove cancelled TimerTasks
1:     public synchronized void executeAfterDelay(final Runnable task, long redeliveryDelay) {
1:         timer.schedule(timerTask, redeliveryDelay);
1:         timer.cancel();
0:     }
0: 
1:     @Override
1:     protected synchronized void doStart() throws Exception {
1:         this.timer = new Timer(name, true);
0:         
0:     }
0: 
1:     @Override
1:     protected synchronized void doStop(ServiceStopper stopper) throws Exception {
0:        if (this.timer != null) {
0:            this.timer.cancel();
0:        }
0:         
commit:d74a8cf
/////////////////////////////////////////////////////////////////////////
0:     
0:     public static void shutdown() {
0:         CLOCK_DAEMON.cancel();
0:     }
commit:de14440
/////////////////////////////////////////////////////////////////////////
0:     
commit:1401e69
/////////////////////////////////////////////////////////////////////////
0:             CLOCK_DAEMON.purge();//remove cancelled TimerTasks
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     public static final ScheduledThreadPoolExecutor clockDaemon = new ScheduledThreadPoolExecutor(5, new ThreadFactory(){
author:James Strachan
-------------------------------------------------------------------------------
commit:75c5680
/////////////////////////////////////////////////////////////////////////
0: 
0:             if (ticket instanceof Runnable)
0:             	clockDaemon.remove((Runnable) ticket);            
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:35707b3
/////////////////////////////////////////////////////////////////////////
0:             ticket.cancel(false);
============================================================================