1:036f2a8: /**
1:036f2a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:036f2a8:  * contributor license agreements.  See the NOTICE file distributed with
1:036f2a8:  * this work for additional information regarding copyright ownership.
1:036f2a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:036f2a8:  * (the "License"); you may not use this file except in compliance with
1:036f2a8:  * the License.  You may obtain a copy of the License at
1:036f2a8:  *
1:036f2a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:036f2a8:  *
1:036f2a8:  * Unless required by applicable law or agreed to in writing, software
1:036f2a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:036f2a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:036f2a8:  * See the License for the specific language governing permissions and
1:036f2a8:  * limitations under the License.
1:036f2a8:  */
1:036f2a8: package org.apache.activemq.transport.stomp;
3:036f2a8: 
1:0fffe21: import java.io.IOException;
1:0fffe21: import java.net.Socket;
1:0fffe21: import java.net.URI;
1:0fffe21: import java.net.URISyntaxException;
1:0fffe21: import java.net.UnknownHostException;
1:04ee70a: import java.nio.ByteBuffer;
1:0fffe21: 
1:0fffe21: import javax.net.ServerSocketFactory;
1:0fffe21: import javax.net.SocketFactory;
1:0fffe21: import javax.net.ssl.SSLContext;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:0fffe21: 
1:036f2a8: import org.apache.activemq.broker.SslContext;
1:036f2a8: import org.apache.activemq.transport.Transport;
1:036f2a8: import org.apache.activemq.transport.TransportServer;
1:e6285b7: import org.apache.activemq.transport.nio.NIOSSLTransportServer;
1:036f2a8: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:036f2a8: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:036f2a8: import org.apache.activemq.wireformat.WireFormat;
1:036f2a8: 
1:036f2a8: public class StompNIOSSLTransportFactory extends StompNIOTransportFactory {
1:036f2a8: 
1:e6285b7:     protected SSLContext context;
1:036f2a8: 
3:036f2a8:     @Override
1:036f2a8:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:e6285b7:         return new NIOSSLTransportServer(context, this, location, serverSocketFactory) {
1:e6285b7: 
1:e6285b7:             @Override
1:036f2a8:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:036f2a8:                 StompNIOSSLTransport transport = new StompNIOSSLTransport(format, socket);
1:036f2a8:                 if (context != null) {
1:036f2a8:                     transport.setSslContext(context);
4:036f2a8:                 }
1:0fffe21: 
1:e6285b7:                 transport.setNeedClientAuth(isNeedClientAuth());
1:e6285b7:                 transport.setWantClientAuth(isWantClientAuth());
1:e6285b7: 
1:e6285b7:                 return transport;
1:0fffe21:             }
1:036f2a8:         };
1:036f2a8:     }
1:036f2a8: 
1:0fffe21:     @Override
1:036f2a8:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:036f2a8:         return new StompNIOSSLTransport(wf, socketFactory, location, localLocation);
1:036f2a8:     }
1:036f2a8: 
1:0885c60:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:04ee70a:             throws IOException {
1:04ee70a:         return new StompNIOSSLTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:036f2a8:     public TransportServer doBind(URI location) throws IOException {
1:e6285b7:         if (SslContext.getCurrentSslContext() != null) {
1:0885c60:             try {
1:0885c60:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:0885c60:             } catch (Exception e) {
1:0885c60:                 throw new IOException(e);
1:0885c60:             }
1:0885c60:         }
1:036f2a8:         return super.doBind(location);
1:036f2a8:     }
1:036f2a8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import javax.net.ssl.SSLEngine;
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:             throws IOException {
1:         return new StompNIOSSLTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:     }
1: 
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e6285b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.nio.NIOSSLTransportServer;
1:     protected SSLContext context;
1:         return new NIOSSLTransportServer(context, this, location, serverSocketFactory) {
1: 
1:             @Override
1:                 transport.setNeedClientAuth(isNeedClientAuth());
1:                 transport.setWantClientAuth(isWantClientAuth());
1: 
1:                 return transport;
/////////////////////////////////////////////////////////////////////////
1:         if (SslContext.getCurrentSslContext() != null) {
/////////////////////////////////////////////////////////////////////////
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
0:                 return true;
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
0:             public boolean isSslServer() {
0:                 return false;
1:             }
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:        if (SslContext.getCurrentSslContext() != null) {
1:             try {
1:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:             } catch (Exception e) {
1:                 throw new IOException(e);
1:             }
1:         }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLContext;
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: 
1: public class StompNIOSSLTransportFactory extends StompNIOTransportFactory {
1: 
0:     SSLContext context;
1: 
1:     @Override
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 StompNIOSSLTransport transport = new StompNIOSSLTransport(format, socket);
1:                 if (context != null) {
1:                     transport.setSslContext(context);
1:                 }
0:                 return transport;
1:             }
1:         };
1:     }
1: 
1:     @Override
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new StompNIOSSLTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:         @Override
1:     public TransportServer doBind(URI location) throws IOException {
0:          if (SslContext.getCurrentSslContext() != null) {
0:              try {
0:                  context = SslContext.getCurrentSslContext().getSSLContext();
0:              } catch (Exception e) {
0:                  throw new IOException(e);
1:              }
1:          }
1:         return super.doBind(location);
1:     }
1: 
1: }
============================================================================