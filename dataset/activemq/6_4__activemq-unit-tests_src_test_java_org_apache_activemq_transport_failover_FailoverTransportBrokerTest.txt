1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.failover;
16:d29ca2a: 
1:bf4dd73: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:bf4dd73: import java.util.concurrent.TimeUnit;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:4743a20: 
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:bf4dd73: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.network.NetworkTestSupport;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:bf4dd73: import org.apache.activemq.transport.TransportListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class FailoverTransportBrokerTest extends NetworkTestSupport {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTransportBrokerTest.class);
1:230a86c: 
1:d29ca2a:     public ActiveMQDestination destination;
1:d29ca2a:     public int deliveryMode;
1:d29ca2a: 
1:230a86c:     public void initCombosForTestPublisherFailsOver() {
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:230a86c:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:230a86c:     }
1:230a86c: 
1:7f5213b:     public void testPublisherFailsOver() throws Exception {
1:230a86c: 
1:230a86c:         // Start a normal consumer on the local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:230a86c:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.request(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on a remote broker
1:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:230a86c:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.request(consumerInfo2);
1:230a86c: 
1:d29ca2a:         // Start a failover publisher.
1:fc00993:         LOG.info("Starting the failover connection.");
1:645037e:         StubConnection connection3 = createFailoverConnection(null);
1:d29ca2a:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:230a86c:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:d29ca2a:         connection3.send(connectionInfo3);
1:d29ca2a:         connection3.send(sessionInfo3);
1:d29ca2a:         connection3.send(producerInfo3);
1:d29ca2a: 
1:d29ca2a:         // Send the message using the fail over publisher.
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:d29ca2a: 
1:d29ca2a:         // The message will be sent to one of the brokers.
1:933eb2f:         FailoverTransport ft = connection3.getTransport().narrow(FailoverTransport.class);
1:d29ca2a: 
1:d29ca2a:         // See which broker we were connected to.
1:d29ca2a:         StubConnection connectionA;
1:d29ca2a:         StubConnection connectionB;
1:d29ca2a:         TransportConnector serverA;
1:230a86c:         if (connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI())) {
1:230a86c:             connectionA = connection1;
1:230a86c:             connectionB = connection2;
1:d29ca2a:             serverA = connector;
1:d29ca2a:         } else {
1:230a86c:             connectionA = connection2;
1:230a86c:             connectionB = connection1;
1:d29ca2a:             serverA = remoteConnector;
2:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNotNull(receiveMessage(connectionA));
1:d29ca2a:         assertNoMessagesLeft(connectionB);
1:230a86c: 
1:d29ca2a:         // Dispose the server so that it fails over to the other server.
1:fc00993:         LOG.info("Disconnecting the active connection");
1:d29ca2a:         serverA.stop();
1:230a86c: 
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:230a86c: 
1:d29ca2a:         assertNotNull(receiveMessage(connectionB));
1:d29ca2a:         assertNoMessagesLeft(connectionA);
1:230a86c: 
1:d29ca2a:     }
1:230a86c: 
1:bf4dd73:     public void testNoBrokersInBrokerInfo() throws Exception {
1:bf4dd73:         final BrokerInfo info[] = new BrokerInfo[1];
1:645037e:         TransportListener listener = new TransportListener() {
1:bf4dd73:             @Override
1:bf4dd73:             public void onCommand(Object command) {
1:8649f65:                 LOG.info("Got command: " + command);
1:bf4dd73:                 if (command instanceof BrokerInfo) {
1:bf4dd73:                     info[0] = (BrokerInfo) command;
1:bf4dd73:                 }
1:bf4dd73:             }
1:bf4dd73: 
1:bf4dd73:             @Override
1:bf4dd73:             public void onException(IOException error) {
1:bf4dd73:                 //To change body of implemented methods use File | Settings | File Templates.
1:bf4dd73:             }
1:bf4dd73: 
1:bf4dd73:             @Override
1:bf4dd73:             public void transportInterupted() {
1:bf4dd73:                 //To change body of implemented methods use File | Settings | File Templates.
1:bf4dd73:             }
1:bf4dd73: 
1:bf4dd73:             @Override
1:bf4dd73:             public void transportResumed() {
1:bf4dd73:                 //To change body of implemented methods use File | Settings | File Templates.
1:bf4dd73:             }
1:645037e:         };
1:7d8ce02:         @SuppressWarnings("unused")
1:645037e:         StubConnection c = createFailoverConnection(listener);
1:bf4dd73:         int count = 0;
1:6d444d5:         while(count++ < 20 && info[0] == null) {
1:bf4dd73:             TimeUnit.SECONDS.sleep(1);
1:bf4dd73:         }
1:6d444d5:         assertNotNull("got a valid brokerInfo after 20 secs", info[0]);
1:bf4dd73:         assertNull("no peer brokers present", info[0].getPeerBrokerInfos());
1:bf4dd73:     }
1:bf4dd73: 
1:4743a20:     @Override
1:d29ca2a:     protected String getLocalURI() {
1:d29ca2a:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:d29ca2a:     }
1:230a86c: 
1:4743a20:     @Override
1:d29ca2a:     protected String getRemoteURI() {
1:d29ca2a:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:d29ca2a:     }
1:230a86c: 
1:645037e:     protected StubConnection createFailoverConnection(TransportListener listener) throws Exception {
1:230a86c:         URI failoverURI = new URI("failover://" + connector.getServer().getConnectURI() + "," + remoteConnector.getServer().getConnectURI() + "");
1:d29ca2a:         Transport transport = TransportFactory.connect(failoverURI);
1:645037e:         StubConnection connection = new StubConnection(transport, listener);
1:d29ca2a:         connections.add(connection);
1:230a86c:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(FailoverTransportBrokerTest.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:ef24cc9
commit:7d8ce02
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:645037e
/////////////////////////////////////////////////////////////////////////
1:         StubConnection connection3 = createFailoverConnection(null);
/////////////////////////////////////////////////////////////////////////
1:         TransportListener listener = new TransportListener() {
/////////////////////////////////////////////////////////////////////////
1:         };
1:         StubConnection c = createFailoverConnection(listener);
/////////////////////////////////////////////////////////////////////////
1:     protected StubConnection createFailoverConnection(TransportListener listener) throws Exception {
1:         StubConnection connection = new StubConnection(transport, listener);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTransportBrokerTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8649f65
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Got command: " + command);
commit:6d444d5
/////////////////////////////////////////////////////////////////////////
1:         while(count++ < 20 && info[0] == null) {
1:         assertNotNull("got a valid brokerInfo after 20 secs", info[0]);
commit:bf4dd73
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
1:     public void testNoBrokersInBrokerInfo() throws Exception {
1:         final BrokerInfo info[] = new BrokerInfo[1];
0:         StubConnection c = createFailoverConnection();
0:         c.setListener(new TransportListener() {
1:             @Override
1:             public void onCommand(Object command) {
1:                 if (command instanceof BrokerInfo) {
1:                     info[0] = (BrokerInfo) command;
1:                 }
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void transportResumed() {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
0:         });
0:         c.start();
1:         int count = 0;
0:         while(count++ < 5 && info[0] == null) {
1:             TimeUnit.SECONDS.sleep(1);
1:         }
1:         assertNull("no peer brokers present", info[0].getPeerBrokerInfos());
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         FailoverTransport ft = connection3.getTransport().narrow(FailoverTransport.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.multicast.MulticastTransportTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(FailoverTransportBrokerTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting the failover connection.");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Disconnecting the active connection");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(FailoverTransportBrokerTest.class);
1: 
1:     public void initCombosForTestPublisherFailsOver() {
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:     }
1: 
1: 
1:         // Start a normal consumer on the local broker
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
/////////////////////////////////////////////////////////////////////////
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1: 
1:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
/////////////////////////////////////////////////////////////////////////
0:         FailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);
1:         if (connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI())) {
1:             connectionA = connection1;
1:             connectionB = connection2;
1:             connectionA = connection2;
1:             connectionB = connection1;
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
0:     protected StubConnection createFailoverConnection() throws Exception {
1:         URI failoverURI = new URI("failover://" + connector.getServer().getConnectURI() + "," + remoteConnector.getServer().getConnectURI() + "");
1:         return connection;
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testPublisherFailsOver() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.network.NetworkTestSupport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.failover.FailoverTransport;
1: 
1: public class FailoverTransportBrokerTest extends NetworkTestSupport {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(FailoverTransportBrokerTest.class);
1:     
1:     public ActiveMQDestination destination;
1:     public int deliveryMode;
1: 
0:     public void initCombosForTestPublisherFailsOver() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)
0:                 } );        
0:         addCombinationValues( "destination", new Object[]{ 
0:                 new ActiveMQQueue("TEST"), 
0:                 new ActiveMQTopic("TEST"), 
0:                 } );
1:     }    
0:     public void testPublisherFailsOver() throws Throwable {
1:         
0:         // Start a normal consumer on the local broker 
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
0:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);        
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // Start a normal consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
0:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.request(consumerInfo2);
1:         
1:         // Start a failover publisher.
0:         log.info("Starting the failover connection.");
0:         StubConnection connection3 = createFailoverConnection();
1:         ConnectionInfo connectionInfo3 = createConnectionInfo();
0:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);        
0:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);        
1:         connection3.send(connectionInfo3);
1:         connection3.send(sessionInfo3);
1:         connection3.send(producerInfo3);
1: 
1:         // Send the message using the fail over publisher.
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1: 
1:         // The message will be sent to one of the brokers.
0:         FailoverTransport ft = (FailoverTransport) connection3.getTransport().narrow(FailoverTransport.class);
1: 
1:         // See which broker we were connected to.
1:         StubConnection connectionA;
1:         StubConnection connectionB;
1:         TransportConnector serverA;
0:         if( connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI() ) ) {
0:             connectionA=connection1;
0:             connectionB=connection2;
1:             serverA = connector;
1:         } else {
0:             connectionA=connection2;
0:             connectionB=connection1;
1:             serverA = remoteConnector;
1:         }
1:         
1:         assertNotNull(receiveMessage(connectionA));
1:         assertNoMessagesLeft(connectionB);
1:         
1:         // Dispose the server so that it fails over to the other server.
0:         log.info("Disconnecting the active connection");
1:         serverA.stop();
1:         
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:         
1:         assertNotNull(receiveMessage(connectionB));
1:         assertNoMessagesLeft(connectionA);
1:             
1:     }
1:     
1:     protected String getLocalURI() {
1:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:     }
1:     
1:     protected String getRemoteURI() {
1:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:     }
1:     
0:     protected StubConnection createFailoverConnection() throws Exception {        
0:         URI failoverURI = new URI("failover://"+connector.getServer().getConnectURI()+","+remoteConnector.getServer().getConnectURI()+"");
1:         Transport transport = TransportFactory.connect(failoverURI);
0:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
0:         return connection;        
1:     }
1: 
1:     
1:     public static Test suite() {
1:         return suite(FailoverTransportBrokerTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 Integer.valueOf(DeliveryMode.NON_PERSISTENT), 
0:                 Integer.valueOf(DeliveryMode.PERSISTENT)
============================================================================