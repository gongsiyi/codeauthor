1:9fcf16e: /**
1:9fcf16e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9fcf16e:  * contributor license agreements.  See the NOTICE file distributed with
1:9fcf16e:  * this work for additional information regarding copyright ownership.
1:9fcf16e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9fcf16e:  * (the "License"); you may not use this file except in compliance with
1:9fcf16e:  * the License.  You may obtain a copy of the License at
1:9fcf16e:  *
1:9fcf16e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9fcf16e:  *
1:9fcf16e:  * Unless required by applicable law or agreed to in writing, software
1:9fcf16e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9fcf16e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fcf16e:  * See the License for the specific language governing permissions and
1:9fcf16e:  * limitations under the License.
1:9fcf16e:  */
1:9fcf16e: 
1:9fcf16e: package org.apache.activemq.usecases;
1:9fcf16e: 
1:9fcf16e: import javax.jms.Connection;
1:9fcf16e: import javax.jms.Message;
1:9fcf16e: import javax.jms.MessageProducer;
1:9fcf16e: import javax.jms.Session;
1:9fcf16e: import javax.jms.Topic;
1:9fcf16e: import javax.jms.TopicSubscriber;
1:9fcf16e: 
1:9fcf16e: import junit.framework.Test;
1:9fcf16e: 
1:9fcf16e: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:9fcf16e: import org.apache.activemq.broker.BrokerService;
1:06cbebc: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:9fcf16e: 
1:9fcf16e: public class DurableSubscriptionReactivationTest extends EmbeddedBrokerTestSupport {
1:9fcf16e: 
1:9fcf16e:     public boolean keepDurableSubsActive;
1:9fcf16e:     
1:9fcf16e:     public void initCombosForTestReactivateKeepaliveSubscription() {
1:9fcf16e:         addCombinationValues("keepDurableSubsActive", new Object[] { new Boolean(true), new Boolean(false) });
1:9fcf16e:     }
1:9fcf16e:     
1:9fcf16e:     public void testReactivateKeepaliveSubscription() throws Exception {
1:9fcf16e: 
1:9fcf16e:         Connection connection = createConnection();
1:9fcf16e:         connection.setClientID("cliID");
1:9fcf16e:         connection.start();
1:9fcf16e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9fcf16e:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:9fcf16e:         subscriber.close();
1:9fcf16e:         connection.close();
1:9fcf16e: 
1:9fcf16e:         connection = createConnection();
1:9fcf16e:         connection.start();
1:9fcf16e:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9fcf16e:         MessageProducer producer = session.createProducer(createDestination());
1:9fcf16e:         producer.send(session.createMessage());
1:9fcf16e:         connection.close();
1:9fcf16e: 
1:9fcf16e:         connection = createConnection();
1:9fcf16e:         connection.setClientID("cliID");
1:9fcf16e:         connection.start();
1:9fcf16e:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9fcf16e:         subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:9fcf16e:         Message message = subscriber.receive(1 * 1000);
1:9fcf16e:         subscriber.close();
1:9fcf16e:         connection.close();
1:9fcf16e: 
1:9fcf16e:         assertNotNull("Message not received.", message);
1:9fcf16e:     }
1:9fcf16e: 
1:9fcf16e:     protected void setUp() throws Exception {
1:9fcf16e:         useTopic = true;
1:9fcf16e:         super.setUp();
1:9fcf16e:     }
1:9fcf16e: 
1:9fcf16e:     protected void tearDown() throws Exception {
1:9fcf16e:         super.tearDown();
1:9fcf16e:     }
1:9fcf16e: 
1:9fcf16e:     @Override
1:9fcf16e:     protected BrokerService createBroker() throws Exception {
1:9fcf16e:         BrokerService answer = super.createBroker();
1:9fcf16e:         answer.setKeepDurableSubsActive(keepDurableSubsActive);
1:06cbebc:         answer.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:3419bb7:         answer.setDeleteAllMessagesOnStartup(true);
1:9fcf16e:         return answer;
1:9fcf16e:     }
1:06cbebc: 
1:06cbebc:     protected boolean isPersistent() {
1:06cbebc:         return true;
1:06cbebc:     }
1:9fcf16e:     
1:9fcf16e:     public static Test suite() {
1:9fcf16e:         return suite(DurableSubscriptionReactivationTest.class);
1:9fcf16e:       }
1:9fcf16e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:3419bb7
/////////////////////////////////////////////////////////////////////////
1:         answer.setDeleteAllMessagesOnStartup(true);
commit:06cbebc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         answer.setPersistenceAdapter(new JDBCPersistenceAdapter());
1: 
1:     protected boolean isPersistent() {
1:         return true;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9fcf16e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: public class DurableSubscriptionReactivationTest extends EmbeddedBrokerTestSupport {
1: 
1:     public boolean keepDurableSubsActive;
1:     
1:     public void initCombosForTestReactivateKeepaliveSubscription() {
1:         addCombinationValues("keepDurableSubsActive", new Object[] { new Boolean(true), new Boolean(false) });
1:     }
1:     
1:     public void testReactivateKeepaliveSubscription() throws Exception {
1: 
1:         Connection connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:         subscriber.close();
1:         connection.close();
1: 
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(createDestination());
1:         producer.send(session.createMessage());
1:         connection.close();
1: 
1:         connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:         Message message = subscriber.receive(1 * 1000);
1:         subscriber.close();
1:         connection.close();
1: 
1:         assertNotNull("Message not received.", message);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         useTopic = true;
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = super.createBroker();
1:         answer.setKeepDurableSubsActive(keepDurableSubsActive);
1:         return answer;
1:     }
1:     
1:     public static Test suite() {
1:         return suite(DurableSubscriptionReactivationTest.class);
1:       }
1: }
============================================================================