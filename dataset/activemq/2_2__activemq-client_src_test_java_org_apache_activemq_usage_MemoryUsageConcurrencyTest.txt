1:b820ac2: /**
1:b820ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b820ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:b820ac2:  * this work for additional information regarding copyright ownership.
1:b820ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b820ac2:  * (the "License"); you may not use this file except in compliance with
1:b820ac2:  * the License.  You may obtain a copy of the License at
1:b820ac2:  *
1:b820ac2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b820ac2:  *
1:b820ac2:  * Unless required by applicable law or agreed to in writing, software
1:b820ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b820ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b820ac2:  * See the License for the specific language governing permissions and
1:b820ac2:  * limitations under the License.
1:b820ac2:  */
1:b820ac2: package org.apache.activemq.usage;
1:b820ac2: 
1:b820ac2: import static org.junit.Assert.assertEquals;
1:b820ac2: import static org.junit.Assert.assertNotNull;
1:b820ac2: 
1:b820ac2: import java.util.ArrayList;
1:b820ac2: import java.util.List;
1:b820ac2: import java.util.Random;
1:b820ac2: import java.util.concurrent.ArrayBlockingQueue;
1:b820ac2: import java.util.concurrent.BlockingQueue;
1:b820ac2: import java.util.concurrent.CountDownLatch;
1:b820ac2: import java.util.concurrent.LinkedBlockingQueue;
1:b820ac2: import java.util.concurrent.TimeUnit;
1:b820ac2: import java.util.concurrent.atomic.AtomicBoolean;
1:b820ac2: 
1:b820ac2: import org.junit.Test;
1:18300c6: import org.slf4j.Logger;
1:18300c6: import org.slf4j.LoggerFactory;
1:b820ac2: 
1:b820ac2: public class MemoryUsageConcurrencyTest {
1:b820ac2: 
1:18300c6:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageConcurrencyTest.class);
1:18300c6: 
1:b820ac2:     @Test
1:b820ac2:     public void testCycle() throws Exception {
1:b820ac2:         Random r = new Random(0xb4a14);
1:18300c6:         for (int i = 0; i < 30000; i++) {
1:b820ac2:             checkPercentage(i, i, r.nextInt(100) + 10, i % 2 == 0, i % 5 == 0);
1:b820ac2:         }
1:b820ac2:     }
1:b820ac2: 
1:b820ac2:     private void checkPercentage(int attempt, int seed, int operations, boolean useArrayBlocking, boolean useWaitForSpaceThread) throws InterruptedException {
1:b820ac2: 
1:b820ac2:         final BlockingQueue<Integer> toAdd;
1:b820ac2:         final BlockingQueue<Integer> toRemove;
1:b820ac2:         final BlockingQueue<Integer> removed;
1:b820ac2: 
1:b820ac2:         if (useArrayBlocking) {
1:b820ac2:             toAdd = new ArrayBlockingQueue<Integer>(operations);
1:b820ac2:             toRemove = new ArrayBlockingQueue<Integer>(operations);
1:b820ac2:             removed = new ArrayBlockingQueue<Integer>(operations);
1:b820ac2:         } else {
1:b820ac2:             toAdd = new LinkedBlockingQueue<Integer>();
1:b820ac2:             toRemove = new LinkedBlockingQueue<Integer>();
1:b820ac2:             removed = new LinkedBlockingQueue<Integer>();
1:b820ac2:         }
1:b820ac2: 
1:b820ac2:         final AtomicBoolean running = new AtomicBoolean(true);
1:b820ac2:         final CountDownLatch startLatch = new CountDownLatch(1);
1:b820ac2: 
1:b820ac2:         final MemoryUsage memUsage = new MemoryUsage();
1:b820ac2:         memUsage.setLimit(1000);
1:b820ac2:         memUsage.start();
1:b820ac2: 
1:b820ac2:         Thread addThread = new Thread(new Runnable() {
1:b820ac2:             @Override
1:b820ac2:             public void run() {
1:b820ac2:                 try {
1:b820ac2:                     startLatch.await();
1:b820ac2: 
1:b820ac2:                     while (true) {
1:b820ac2:                         Integer add = toAdd.poll(1, TimeUnit.MILLISECONDS);
1:b820ac2:                         if (add == null) {
1:b820ac2:                             if (!running.get()) {
1:b820ac2:                                 break;
1:b820ac2:                             }
1:b820ac2:                         } else {
1:b820ac2:                             // add to other queue before removing
1:b820ac2:                             toRemove.add(add);
1:b820ac2:                             memUsage.increaseUsage(add);
1:b820ac2:                         }
1:b820ac2:                     }
1:b820ac2:                 } catch (Exception e) {
1:b820ac2:                     e.printStackTrace();
1:b820ac2:                 }
1:b820ac2:             }
1:b820ac2:         });
1:b820ac2: 
1:b820ac2:         Thread removeThread = new Thread(new Runnable() {
1:b820ac2:             @Override
1:b820ac2:             public void run() {
1:b820ac2:                 try {
1:b820ac2:                     startLatch.await();
1:b820ac2: 
1:b820ac2:                     while (true) {
1:b820ac2:                         Integer remove = toRemove.poll(1, TimeUnit.MILLISECONDS);
1:b820ac2:                         if (remove == null) {
1:b820ac2:                             if (!running.get()) {
1:b820ac2:                                 break;
1:b820ac2:                             }
1:b820ac2:                         } else {
1:b820ac2:                             memUsage.decreaseUsage(remove);
1:b820ac2:                             removed.add(remove);
1:b820ac2:                         }
1:b820ac2:                     }
1:b820ac2:                 } catch (Exception e) {
1:b820ac2:                     e.printStackTrace();
1:b820ac2:                 }
1:b820ac2:             }
1:b820ac2:         });
1:b820ac2: 
1:b820ac2:         Thread waitForSpaceThread = new Thread(new Runnable() {
1:b820ac2:             @Override
1:b820ac2:             public void run() {
1:b820ac2:                 try {
1:b820ac2:                     startLatch.await();
1:b820ac2: 
1:b820ac2:                     while (running.get()) {
1:b820ac2:                         memUsage.waitForSpace();
1:b820ac2:                     }
1:b820ac2:                 } catch (Exception e) {
1:b820ac2:                     e.printStackTrace();
1:b820ac2:                 }
1:b820ac2:             }
1:b820ac2:         });
1:b820ac2: 
1:b820ac2:         removeThread.start();
1:b820ac2:         addThread.start();
1:b820ac2:         if (useWaitForSpaceThread) {
1:b820ac2:             waitForSpaceThread.start();
1:b820ac2:         }
1:b820ac2: 
1:b820ac2:         Random r = new Random(seed);
1:b820ac2: 
1:b820ac2:         startLatch.countDown();
1:b820ac2: 
1:b820ac2:         for (int i = 0; i < operations; i++) {
1:b820ac2:             toAdd.add(r.nextInt(100) + 1);
1:b820ac2:         }
1:b820ac2: 
1:b820ac2:         // we expect the failure percentage to be related to the last operation
1:b820ac2:         List<Integer> ops = new ArrayList<Integer>(operations);
1:b820ac2:         for (int i = 0; i < operations; i++) {
1:b820ac2:             Integer op = removed.poll(1000, TimeUnit.MILLISECONDS);
1:b820ac2:             assertNotNull(op);
1:b820ac2:             ops.add(op);
1:b820ac2:         }
1:b820ac2: 
1:b820ac2:         running.set(false);
1:b820ac2: 
1:b820ac2:         if (useWaitForSpaceThread) {
1:b820ac2:             try {
1:b820ac2:                 waitForSpaceThread.join(1000);
1:b820ac2:             } catch (InterruptedException e) {
1:18300c6:                 LOG.debug("Attempt: {} : {} waitForSpace never returned", attempt, memUsage);
1:b820ac2:                 waitForSpaceThread.interrupt();
1:b820ac2:                 waitForSpaceThread.join();
1:b820ac2:             }
1:b820ac2:         }
1:b820ac2: 
1:b820ac2:         removeThread.join();
1:b820ac2:         addThread.join();
1:b820ac2: 
1:b820ac2:         if (memUsage.getPercentUsage() != 0 || memUsage.getUsage() != memUsage.getPercentUsage()) {
1:18300c6:             LOG.debug("Attempt: {} : {}", attempt, memUsage);
1:18300c6:             LOG.debug("Operations: {}", ops);
1:b820ac2:             assertEquals(0, memUsage.getPercentUsage());
1:b820ac2:         }
1:b820ac2:     }
1:b820ac2: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageConcurrencyTest.class);
1: 
1:         for (int i = 0; i < 30000; i++) {
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Attempt: {} : {} waitForSpace never returned", attempt, memUsage);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Attempt: {} : {}", attempt, memUsage);
1:             LOG.debug("Operations: {}", ops);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b820ac2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.junit.Test;
1: 
1: public class MemoryUsageConcurrencyTest {
1: 
1:     @Test
1:     public void testCycle() throws Exception {
1:         Random r = new Random(0xb4a14);
0:         for (int i = 0; i < 50000; i++) {
1:             checkPercentage(i, i, r.nextInt(100) + 10, i % 2 == 0, i % 5 == 0);
1:         }
1:     }
1: 
1:     private void checkPercentage(int attempt, int seed, int operations, boolean useArrayBlocking, boolean useWaitForSpaceThread) throws InterruptedException {
1: 
1:         final BlockingQueue<Integer> toAdd;
1:         final BlockingQueue<Integer> toRemove;
1:         final BlockingQueue<Integer> removed;
1: 
1:         if (useArrayBlocking) {
1:             toAdd = new ArrayBlockingQueue<Integer>(operations);
1:             toRemove = new ArrayBlockingQueue<Integer>(operations);
1:             removed = new ArrayBlockingQueue<Integer>(operations);
1:         } else {
1:             toAdd = new LinkedBlockingQueue<Integer>();
1:             toRemove = new LinkedBlockingQueue<Integer>();
1:             removed = new LinkedBlockingQueue<Integer>();
1:         }
1: 
1:         final AtomicBoolean running = new AtomicBoolean(true);
1:         final CountDownLatch startLatch = new CountDownLatch(1);
1: 
1:         final MemoryUsage memUsage = new MemoryUsage();
1:         memUsage.setLimit(1000);
1:         memUsage.start();
1: 
1:         Thread addThread = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     startLatch.await();
1: 
1:                     while (true) {
1:                         Integer add = toAdd.poll(1, TimeUnit.MILLISECONDS);
1:                         if (add == null) {
1:                             if (!running.get()) {
1:                                 break;
1:                             }
1:                         } else {
1:                             // add to other queue before removing
1:                             toRemove.add(add);
1:                             memUsage.increaseUsage(add);
1:                         }
1:                     }
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         Thread removeThread = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     startLatch.await();
1: 
1:                     while (true) {
1:                         Integer remove = toRemove.poll(1, TimeUnit.MILLISECONDS);
1:                         if (remove == null) {
1:                             if (!running.get()) {
1:                                 break;
1:                             }
1:                         } else {
1:                             memUsage.decreaseUsage(remove);
1:                             removed.add(remove);
1:                         }
1:                     }
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         Thread waitForSpaceThread = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     startLatch.await();
1: 
1:                     while (running.get()) {
1:                         memUsage.waitForSpace();
1:                     }
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         removeThread.start();
1:         addThread.start();
1:         if (useWaitForSpaceThread) {
1:             waitForSpaceThread.start();
1:         }
1: 
1:         Random r = new Random(seed);
1: 
1:         startLatch.countDown();
1: 
1:         for (int i = 0; i < operations; i++) {
1:             toAdd.add(r.nextInt(100) + 1);
1:         }
1: 
1:         // we expect the failure percentage to be related to the last operation
1:         List<Integer> ops = new ArrayList<Integer>(operations);
1:         for (int i = 0; i < operations; i++) {
1:             Integer op = removed.poll(1000, TimeUnit.MILLISECONDS);
1:             assertNotNull(op);
1:             ops.add(op);
1:         }
1: 
1:         running.set(false);
1: 
1:         if (useWaitForSpaceThread) {
1:             try {
1:                 waitForSpaceThread.join(1000);
1:             } catch (InterruptedException e) {
0:                 System.out.println("Attempt: " + attempt + " : " + memUsage + " waitForSpace never returned");
1:                 waitForSpaceThread.interrupt();
1:                 waitForSpaceThread.join();
1:             }
1:         }
1: 
1:         removeThread.join();
1:         addThread.join();
1: 
1:         if (memUsage.getPercentUsage() != 0 || memUsage.getUsage() != memUsage.getPercentUsage()) {
0:             System.out.println("Attempt: " + attempt + " : " + memUsage);
0:             System.out.println("Operations: " + ops);
1:             assertEquals(0, memUsage.getPercentUsage());
1:         }
1:     }
1: }
============================================================================