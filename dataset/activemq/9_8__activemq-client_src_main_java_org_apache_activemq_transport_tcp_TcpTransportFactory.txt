1:c4d8d86: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:c4d8d86:  */
1:d29ca2a: package org.apache.activemq.transport.tcp;
1:1229c23: 
1:d29ca2a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.net.UnknownHostException;
1:04ee70a: import java.nio.ByteBuffer;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:f451ad0: 
1:d29ca2a: import javax.net.ServerSocketFactory;
1:d29ca2a: import javax.net.SocketFactory;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:f451ad0: 
1:9a8f6e4: import org.apache.activemq.TransportLoggerSupport;
1:d29ca2a: import org.apache.activemq.openwire.OpenWireFormat;
1:d8c0ff1: import org.apache.activemq.transport.InactivityMonitor;
1:d8c0ff1: import org.apache.activemq.transport.Transport;
1:d8c0ff1: import org.apache.activemq.transport.TransportFactory;
1:d8c0ff1: import org.apache.activemq.transport.TransportServer;
1:d8c0ff1: import org.apache.activemq.transport.WireFormatNegotiator;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: import org.apache.activemq.util.URISupport;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ef0c0e1: 
1:d29ca2a: public class TcpTransportFactory extends TransportFactory {
1:d8c0ff1: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TcpTransportFactory.class);
1:f812e34: 
1:d8c0ff1:     @Override
1:5d99c99:     public TransportServer doBind(final URI location) throws IOException {
1:d29ca2a:         try {
1:784b93d:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:ef0c0e1: 
1:2440474:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:b4b8499:             TcpTransportServer server = createTcpTransportServer(location, serverSocketFactory);
1:d29ca2a:             server.setWireFormatFactory(createWireFormatFactory(options));
1:d29ca2a:             IntrospectionSupport.setProperties(server, options);
1:933eb2f:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:2ee58ca:             server.setTransportOption(transportOptions);
1:68c8c64:             server.bind();
1:f812e34: 
1:d29ca2a:             return server;
1:f812e34:         } catch (URISyntaxException e) {
1:d29ca2a:             throw IOExceptionSupport.create(e);
1:f812e34:         }
1:6e989ed:     }
1:6e989ed: 
1:b4b8499:     /**
1:f812e34:      * Allows subclasses of TcpTransportFactory to create custom instances of
1:f812e34:      * TcpTransportServer.
1:b4b8499:      *
1:b4b8499:      * @param location
1:b4b8499:      * @param serverSocketFactory
1:d8c0ff1:      * @return a new TcpTransportServer instance.
1:b4b8499:      * @throws IOException
1:b4b8499:      * @throws URISyntaxException
1:b4b8499:      */
1:f812e34:     protected TcpTransportServer createTcpTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:f812e34:         return new TcpTransportServer(this, location, serverSocketFactory);
1:6e989ed:     }
1:b4b8499: 
1:d8c0ff1:     @Override
1:0885c60:     @SuppressWarnings("rawtypes")
1:d29ca2a:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:f812e34: 
1:d8c0ff1:         TcpTransport tcpTransport = transport.narrow(TcpTransport.class);
1:b4b8499:         IntrospectionSupport.setProperties(tcpTransport, options);
1:f812e34: 
1:933eb2f:         Map<String, Object> socketOptions = IntrospectionSupport.extractProperties(options, "socket.");
1:2ee58ca:         tcpTransport.setSocketOptions(socketOptions);
1:b4b8499: 
2:d29ca2a:         if (tcpTransport.isTrace()) {
1:c4d8d86:             try {
1:9a8f6e4:                 transport = TransportLoggerSupport.createTransportLogger(transport, tcpTransport.getLogWriterName(), tcpTransport.isDynamicManagement(), tcpTransport.isStartLogging(), tcpTransport.getJmxPort());
1:c4d8d86:             } catch (Throwable e) {
1:c4d8d86:                 LOG.error("Could not create TransportLogger object for: " + tcpTransport.getLogWriterName() + ", reason: " + e, e);
1:c4d8d86:             }
1:b4b8499:         }
1:2ee58ca: 
1:6e989ed:         boolean useInactivityMonitor = "true".equals(getOption(options, "useInactivityMonitor", "true"));
1:6e989ed:         if (useInactivityMonitor && isUseInactivityMonitor(transport)) {
1:0885c60:             transport = createInactivityMonitor(transport, format);
2:d29ca2a:             IntrospectionSupport.setProperties(transport, options);
1:c916749:         }
1:2ee58ca: 
1:b4b8499:         // Only need the WireFormatNegotiator if using openwire
1:f812e34:         if (format instanceof OpenWireFormat) {
1:f812e34:             transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, tcpTransport.getMinmumWireFormatVersion());
1:6583ef1:         }
1:f812e34: 
1:753b210:         return super.compositeConfigure(transport, format, options);
1:6583ef1:     }
1:9a8f6e4: 
1:2ee58ca: 
1:d29ca2a:     /**
1:d8c0ff1:      * @return true if the inactivity monitor should be used on the transport
1:d29ca2a:      */
1:0aac7f5:     protected boolean isUseInactivityMonitor(Transport transport) {
1:0aac7f5:         return true;
1:c916749:     }
1:6583ef1: 
1:d8c0ff1:     @Override
1:f812e34:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:f812e34:         URI localLocation = null;
1:f812e34:         String path = location.getPath();
1:d52e6ac:         // see if the path is a local URI location
1:2440474:         if (path != null && path.length() > 0) {
1:2440474:             int localPortIndex = path.indexOf(':');
1:df6b542:             try {
1:74a7a8b:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:2440474:                 String localString = location.getScheme() + ":/" + path;
1:2440474:                 localLocation = new URI(localString);
1:f812e34:             } catch (Exception e) {
1:72a0fd1:                 LOG.warn("path isn't a valid local location for TcpTransport to use", e.getMessage());
1:72a0fd1:                 if(LOG.isDebugEnabled()) {
1:72a0fd1:                     LOG.debug("Failure detail", e);
5:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:2440474:         SocketFactory socketFactory = createSocketFactory();
1:b4b8499:         return createTcpTransport(wf, socketFactory, location, localLocation);
1:d29ca2a:     }
1:1229c23: 
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:04ee70a:         throw new IOException("createTransport() method not implemented!");
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:04ee70a:         throw new IOException("createTransport() method not implemented!");
1:04ee70a:     }
1:04ee70a: 
1:b4b8499:     /**
1:f812e34:      * Allows subclasses of TcpTransportFactory to provide a create custom
1:d8c0ff1:      * TcpTransport instances.
1:b4b8499:      *
1:b4b8499:      * @param wf
1:b4b8499:      * @param socketFactory
1:d8c0ff1:      * @param location
1:f812e34:      * @param localLocation
1:d8c0ff1:      *
1:d8c0ff1:      * @return a new TcpTransport instance connected to the given location.
1:d8c0ff1:      *
1:b4b8499:      * @throws UnknownHostException
1:b4b8499:      * @throws IOException
1:b4b8499:      */
1:f812e34:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:f812e34:         return new TcpTransport(wf, socketFactory, location, localLocation);
1:f812e34:     }
1:b4b8499: 
1:7d87837:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1:d29ca2a:         return ServerSocketFactory.getDefault();
1:b4b8499:     }
14:d29ca2a: 
1:7d87837:     protected SocketFactory createSocketFactory() throws IOException {
1:d29ca2a:         return SocketFactory.getDefault();
1:d29ca2a:     }
1:d29ca2a: 
1:0885c60:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:0885c60:         return new InactivityMonitor(transport, format);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.nio.ByteBuffer;
1: import javax.net.ssl.SSLEngine;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:         throw new IOException("createTransport() method not implemented!");
1:     }
1: 
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:         throw new IOException("createTransport() method not implemented!");
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d8c0ff1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.InactivityMonitor;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.WireFormatNegotiator;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * @return a new TcpTransportServer instance.
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         TcpTransport tcpTransport = transport.narrow(TcpTransport.class);
/////////////////////////////////////////////////////////////////////////
1:      * @return true if the inactivity monitor should be used on the transport
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * TcpTransport instances.
1:      * @param location
1:      *
1:      * @return a new TcpTransport instance connected to the given location.
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TransportLoggerSupport;
0: import org.apache.activemq.transport.*;
/////////////////////////////////////////////////////////////////////////
1:                 transport = TransportLoggerSupport.createTransportLogger(transport, tcpTransport.getLogWriterName(), tcpTransport.isDynamicManagement(), tcpTransport.isStartLogging(), tcpTransport.getJmxPort());
/////////////////////////////////////////////////////////////////////////
1: 
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:6e989ed
/////////////////////////////////////////////////////////////////////////
1:         boolean useInactivityMonitor = "true".equals(getOption(options, "useInactivityMonitor", "true"));
1:         if (useInactivityMonitor && isUseInactivityMonitor(transport)) {
/////////////////////////////////////////////////////////////////////////
0:     private String getOption(Map options, String key, String def) {
0:         String rc = (String) options.remove(key);
0:         if( rc == null ) {
0:             rc = def;
1:         }
0:         return rc;
1:     }
1: 
commit:7d87837
/////////////////////////////////////////////////////////////////////////
1:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1:     protected SocketFactory createSocketFactory() throws IOException {
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(final URI location) throws IOException {
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com (logging improvement modifications)
0:  * @version $Revision$
1:  */
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport, tcpTransport.getLogWriterName(),
0:                         tcpTransport.isDynamicManagement(), tcpTransport.isStartLogging(), tcpTransport.getJmxPort());
1:             } catch (Throwable e) {
1:                 LOG.error("Could not create TransportLogger object for: " + tcpTransport.getLogWriterName() + ", reason: " + e, e);
1:             }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
1:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> socketOptions = IntrospectionSupport.extractProperties(options, "socket.");
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TcpTransportFactory.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("path isn't a valid local location for TcpTransport to use", e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         } catch (URISyntaxException e) {
1:      * Allows subclasses of TcpTransportFactory to create custom instances of
1:      * TcpTransportServer.
/////////////////////////////////////////////////////////////////////////
1:     protected TcpTransportServer createTcpTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new TcpTransportServer(this, location, serverSocketFactory);
1:     }
1: 
0:         TcpTransport tcpTransport = (TcpTransport)transport.narrow(TcpTransport.class);
1: 
0:         Map socketOptions = IntrospectionSupport.extractProperties(options, "socket.");
/////////////////////////////////////////////////////////////////////////
1:         if (format instanceof OpenWireFormat) {
1:             transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, tcpTransport.getMinmumWireFormatVersion());
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:         URI localLocation = null;
1:         String path = location.getPath();
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:      * Allows subclasses of TcpTransportFactory to provide a create custom
0:      * TcpTransport intances.
1:      * @param localLocation
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new TcpTransport(wf, socketFactory, location, localLocation);
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68c8c64
/////////////////////////////////////////////////////////////////////////
1:             server.bind();
/////////////////////////////////////////////////////////////////////////
0: 	protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
commit:b4b8499
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             TcpTransportServer server = createTcpTransportServer(location, serverSocketFactory);
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Allows subclasses of TcpTransportFactory to create custom instances of TcpTransportServer.
1:      * 
1:      * @param location
1:      * @param serverSocketFactory
0:      * @return
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      */
0: 	protected TcpTransportServer createTcpTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0: 		return new TcpTransportServer(this, location, serverSocketFactory);
1: 	}
1:         
0:         TcpTransport tcpTransport = (TcpTransport) transport.narrow(TcpTransport.class);
1:         IntrospectionSupport.setProperties(tcpTransport, options);
1:         
/////////////////////////////////////////////////////////////////////////
1:         // Only need the WireFormatNegotiator if using openwire
/////////////////////////////////////////////////////////////////////////
1:         return createTcpTransport(wf, socketFactory, location, localLocation);
1:     /**
0:      * Allows subclasses of TcpTransportFactory to provide a create custom TcpTransport intances. 
1:      * 
0:      * @param location
1:      * @param wf
1:      * @param socketFactory
0:      * @param localLocation 
0:      * @return
1:      * @throws UnknownHostException
1:      * @throws IOException
1:      */
0: 	private TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
0: 		return new TcpTransport(wf, socketFactory, location, localLocation);
1: 	}
1: 
commit:2ee58ca
/////////////////////////////////////////////////////////////////////////
0:             Map transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:             server.setTransportOption(transportOptions);
1:             
/////////////////////////////////////////////////////////////////////////
0:         Map socketOptions = IntrospectionSupport.extractProperties(options, "socket.");        
1:         tcpTransport.setSocketOptions(socketOptions);
1: 
/////////////////////////////////////////////////////////////////////////
0:         Map socketOptions = IntrospectionSupport.extractProperties(options, "socket.");        
0:         tcpTransport.setSocketOptions(socketOptions);
1: 
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: import org.apache.activeio.command.WireFormat;
commit:ef0c0e1
/////////////////////////////////////////////////////////////////////////
0:         transport = new InactivityMonitor(transport);
1: 
/////////////////////////////////////////////////////////////////////////
0:         transport = new InactivityMonitor(transport);
1: 
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
0:         // Only need the OpenWireFormat if using openwire
0:         if( format instanceof OpenWireFormat ) {
0:         	transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, tcpTransport.getMinmumWireFormatVersion());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         // Only need the OpenWireFormat if using openwire
0:         if( format instanceof OpenWireFormat ) {
0:         	transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, tcpTransport.getMinmumWireFormatVersion());
1:         }
1:         
commit:c916749
/////////////////////////////////////////////////////////////////////////
0:         if( tcpTransport.getMaxInactivityDuration() > 0 ) {
0:             transport = new InactivityMonitor(transport, tcpTransport.getMaxInactivityDuration());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if( tcpTransport.getMaxInactivityDuration() > 0 ) {
0:             transport = new InactivityMonitor(transport, tcpTransport.getMaxInactivityDuration());
1:         }
commit:1229c23
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.InactivityMonitor;
/////////////////////////////////////////////////////////////////////////
1: 
0:         transport = new InactivityMonitor(transport, tcpTransport.getMaxInactivityDuration());
1:         
/////////////////////////////////////////////////////////////////////////
0:         transport = new InactivityMonitor(transport, tcpTransport.getMaxInactivityDuration());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
0: import org.activeio.command.WireFormat;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.transport.MutexTransport;
0: import org.apache.activemq.transport.ResponseCorrelator;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.TransportLogger;
0: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.WireFormatNegotiator;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class TcpTransportFactory extends TransportFactory {
1: 
0:     public TransportServer doBind(String brokerId, final URI location) throws IOException {
1:         try {
0:             Map options = new HashMap(URISupport.parseParamters(location));
1: 
0:             TcpTransportServer server = new TcpTransportServer(location);
1:             server.setWireFormatFactory(createWireFormatFactory(options));
1:             IntrospectionSupport.setProperties(server, options);
1: 
1:             return server;
1:         }
0:         catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
0:     public Transport configure(Transport transport, WireFormat format, Map options) {
1:         IntrospectionSupport.setProperties(transport, options);
0:         TcpTransport tcpTransport = (TcpTransport) transport;
1:         if (tcpTransport.isTrace()) {
0:             transport = new TransportLogger(transport);
1:         }
1: 
0:         // TODO: missing inactivity monitor
0:         // transport = new InactivityMonitor(transport,
0:         // temp.getMaxInactivityDuration(), activityMonitor.getReadCounter(),
0:         // activityMonitor.getWriteCounter());
0:         if( format instanceof OpenWireFormat )
0:             transport = new WireFormatNegotiator(transport, format, tcpTransport.getMinmumWireFormatVersion());
1:         
0:         transport = new MutexTransport(transport);
0:         transport = new ResponseCorrelator(transport);
0:         return transport;
1:     }
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:         IntrospectionSupport.setProperties(transport, options);
0:         TcpTransport tcpTransport = (TcpTransport) transport;
1:         if (tcpTransport.isTrace()) {
0:             transport = new TransportLogger(transport);
1:         }
1: 
0:         // TODO: missing inactivity monitor
0:         // transport = new InactivityMonitor(transport,
0:         // temp.getMaxInactivityDuration(), activityMonitor.getReadCounter(),
0:         // activityMonitor.getWriteCounter());
0:         transport = new WireFormatNegotiator(transport, format, tcpTransport.getMinmumWireFormatVersion());
0:         return transport;
1:     }
1: 
0:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
0:         return new TcpTransport(wf, location);
1:     }
1: 
0:     protected ServerSocketFactory createServerSocketFactory() {
1:         return ServerSocketFactory.getDefault();
1:     }
1: 
0:     protected SocketFactory createSocketFactory() {
1:         return SocketFactory.getDefault();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:             transport = createInactivityMonitor(transport, format);
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         return new InactivityMonitor(transport, format);
0:     }
commit:72a0fd1
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("path isn't a valid local location for TcpTransport to use", e.getMessage());
1:                 if(LOG.isDebugEnabled()) {
1:                     LOG.debug("Failure detail", e);
0:                 }
/////////////////////////////////////////////////////////////////////////
0:      *
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TcpTransportFactory.class);
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
commit:15065b7
/////////////////////////////////////////////////////////////////////////
0:             transport = new InactivityMonitor(transport, format);
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
commit:6879442
/////////////////////////////////////////////////////////////////////////
0:             IntrospectionSupport.setProperties(transport, options);
0:         
commit:753b210
/////////////////////////////////////////////////////////////////////////
1:         return super.compositeConfigure(transport, format, options);
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLogger;
/////////////////////////////////////////////////////////////////////////
0:             transport = new TransportLogger(transport);
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:         
1:             try {
0:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport, tcpTransport.getLogWriterName(),
0:                         tcpTransport.isDynamicManagement(), tcpTransport.isStartLogging(), tcpTransport.getJmxPort());
0:             } catch (Throwable e) {
0:                 LOG.error("Could not create TransportLogger object for: " + tcpTransport.getLogWriterName() + ", reason: " + e, e);
0:             }
commit:d52e6ac
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
0: import java.util.HashMap;
0: import java.util.Map;
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(TcpTransportFactory.class);
/////////////////////////////////////////////////////////////////////////
0:     protected Transport createTransport(URI location,WireFormat wf) throws UnknownHostException,IOException{
0:         URI localLocation=null;
0:         String path=location.getPath();
1:         // see if the path is a local URI location
0:         if(path!=null&&path.length()>0){
0:             int localPortIndex=path.indexOf(':');
0:             try{
0:                 Integer.parseInt(path.substring((localPortIndex+1),path.length()));
0:                 String localString=location.getScheme()+ ":/" + path;
0:                 localLocation=new URI(localString);
0:             }catch(Exception e){
0:                 log.warn("path isn't a valid local location for TcpTransport to use",e);
0:             }
0:         }
0:         if(localLocation!=null){
0:             return new TcpTransport(wf,location,localLocation);
0:         }
0:         return new TcpTransport(wf,location);
author:James Strachan
-------------------------------------------------------------------------------
commit:0aac7f5
/////////////////////////////////////////////////////////////////////////
0:         if (isUseInactivityMonitor(transport)) {
0:             transport = new InactivityMonitor(transport);
0:         }
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Returns true if the inactivity monitor should be used on the transport
0:      */
1:     protected boolean isUseInactivityMonitor(Transport transport) {
1:         return true;
0:     }
0: 
commit:2440474
/////////////////////////////////////////////////////////////////////////
1:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
0:             TcpTransportServer server = new TcpTransportServer(location, serverSocketFactory);
/////////////////////////////////////////////////////////////////////////
1:         if (path != null && path.length() > 0) {
1:             int localPortIndex = path.indexOf(':');
0:             try {
0:                 Integer.parseInt(path.substring((localPortIndex + 1), path.length()));
1:                 String localString = location.getScheme() + ":/" + path;
1:                 localLocation = new URI(localString);
0:             }
0:             catch (Exception e) {
0:                 log.warn("path isn't a valid local location for TcpTransport to use", e);
1:         SocketFactory socketFactory = createSocketFactory();
0:         if (localLocation != null) {
0:             return new TcpTransport(wf, socketFactory, location, localLocation);
0:         return new TcpTransport(wf, socketFactory, location);
commit:4dad3fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================