1:a1f6261: /**
1:a1f6261:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a1f6261:  * contributor license agreements.  See the NOTICE file distributed with
1:a1f6261:  * this work for additional information regarding copyright ownership.
1:a1f6261:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a1f6261:  * (the "License"); you may not use this file except in compliance with
1:a1f6261:  * the License.  You may obtain a copy of the License at
1:a1f6261:  *
1:a1f6261:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a1f6261:  *
1:a1f6261:  * Unless required by applicable law or agreed to in writing, software
1:a1f6261:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a1f6261:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a1f6261:  * See the License for the specific language governing permissions and
1:a1f6261:  * limitations under the License.
1:a1f6261:  */
1:a1f6261: package org.apache.activemq.network;
1:a1f6261: 
1:a1f6261: import org.apache.activemq.broker.BrokerService;
1:a1f6261: import org.apache.activemq.broker.SslContext;
1:a1f6261: import org.apache.activemq.broker.TransportConnection;
1:a1f6261: import org.apache.activemq.broker.TransportConnector;
1:a1f6261: import org.apache.activemq.command.ConnectionError;
1:a1f6261: import org.apache.activemq.util.Wait;
1:a1f6261: import org.junit.Test;
1:a1f6261: import org.slf4j.Logger;
1:a1f6261: import org.slf4j.LoggerFactory;
1:a1f6261: 
1:a1f6261: import java.util.NoSuchElementException;
1:a1f6261: import java.util.concurrent.atomic.AtomicReference;
1:a1f6261: 
1:a1f6261: import static org.apache.activemq.ActiveMQSslConnectionFactoryTest.getKeyManager;
1:a1f6261: import static org.apache.activemq.ActiveMQSslConnectionFactoryTest.getTrustManager;
1:a1f6261: import static org.junit.Assert.assertTrue;
1:a1f6261: 
1:a1f6261: public class NetworkReconnectSslNioTest {
1:a1f6261: 
1:a1f6261:     private static final Logger LOG = LoggerFactory.getLogger(NetworkReconnectSslNioTest.class);
1:a1f6261: 
1:a1f6261:     @Test
1:a1f6261:     public void testForceReconnect() throws Exception {
1:a1f6261: 
1:a1f6261:         final SslContext sslContext = new SslContext(getKeyManager(), getTrustManager(), null);
1:a1f6261: 
1:a1f6261:         BrokerService remote = new BrokerService();
1:a1f6261:         remote.setBrokerName("R");
1:a1f6261:         remote.setSslContext(sslContext);
1:a1f6261:         remote.setUseJmx(false);
1:a1f6261:         remote.setPersistent(false);
1:1e31df9:         final TransportConnector transportConnector = remote.addConnector("nio+ssl://0.0.0.0:0");
1:a1f6261:         remote.start();
1:a1f6261: 
1:a1f6261:         BrokerService local = new BrokerService();
1:a1f6261:         local.setSslContext(sslContext);
1:a1f6261:         local.setUseJmx(false);
1:a1f6261:         local.setPersistent(false);
1:69fad2a:         final NetworkConnector networkConnector = local.addNetworkConnector("static:(" + remote.getTransportConnectorByScheme("nio+ssl").getPublishableConnectString().replace("nio+ssl", "ssl") + "?socket.verifyHostName=false" + ")?useExponentialBackOff=false&initialReconnectDelay=10");
1:a1f6261:         local.start();
1:a1f6261: 
1:a1f6261:         assertTrue("Bridge created", Wait.waitFor(new Wait.Condition() {
1:a1f6261:             @Override
1:a1f6261:             public boolean isSatisified() throws Exception {
1:a1f6261:                 return !networkConnector.activeBridges().isEmpty() && (networkConnector.activeBridges().toArray(new DurableConduitBridge[]{})[0].getRemoteBrokerName() != null);
1:a1f6261:             }
1:a1f6261:         }));
1:a1f6261: 
1:a1f6261:         final AtomicReference<DurableConduitBridge> bridge = new AtomicReference<>((DurableConduitBridge) networkConnector.activeBridges().iterator().next());
1:a1f6261:         assertTrue("Connected to R", bridge.get().getRemoteBrokerName().equals("R"));
1:a1f6261: 
1:a1f6261:         for (int i=0; i<200;  i++) {
1:a1f6261:             LOG.info("Forcing error on NC via remote exception, iteration:" + i + ",  bridge: " + bridge);
1:a1f6261: 
1:a1f6261:             TransportConnection connection = transportConnector.getConnections().iterator().next();
1:a1f6261:             connection.dispatchAsync(new ConnectionError());
1:a1f6261: 
1:a1f6261:             assertTrue("bridge failed", Wait.waitFor(new Wait.Condition() {
1:a1f6261:                 @Override
1:a1f6261:                 public boolean isSatisified() throws Exception {
1:a1f6261:                     return bridge.get().bridgeFailed.get();
1:a1f6261:                 }
1:a1f6261:             }, 10*1000, 10));
1:a1f6261: 
1:a1f6261:             bridge.set(null);
1:a1f6261:             assertTrue("Bridge recreated: " + i, Wait.waitFor(new Wait.Condition() {
1:a1f6261:                 @Override
1:a1f6261:                 public boolean isSatisified() throws Exception {
1:a1f6261:                     if (!networkConnector.activeBridges().isEmpty()) {
1:a1f6261:                         try {
1:a1f6261:                             DurableConduitBridge durableConduitBridge = (DurableConduitBridge) networkConnector.activeBridges().iterator().next();
1:a1f6261:                             if ("R".equals(durableConduitBridge.getRemoteBrokerName())) {
1:a1f6261:                                 bridge.set(durableConduitBridge);
1:a1f6261:                             }
1:a1f6261:                         } catch (NoSuchElementException expectedContention) {}
1:a1f6261:                     }
1:a1f6261:                     return bridge.get() != null;
1:a1f6261:                 }
1:a1f6261:             }, 10*1000, 10));
1:a1f6261:         }
1:a1f6261:         local.stop();
1:a1f6261:         remote.stop();
1:a1f6261:     }
1:a1f6261: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:         final TransportConnector transportConnector = remote.addConnector("nio+ssl://0.0.0.0:0");
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:         final TransportConnector transportConnector = remote.addConnector("nio+ssl://0.0.0.0:0?transport.verifyHostName=false");
1:         final NetworkConnector networkConnector = local.addNetworkConnector("static:(" + remote.getTransportConnectorByScheme("nio+ssl").getPublishableConnectString().replace("nio+ssl", "ssl") + "?socket.verifyHostName=false" + ")?useExponentialBackOff=false&initialReconnectDelay=10");
author:gtully
-------------------------------------------------------------------------------
commit:a1f6261
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ConnectionError;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.NoSuchElementException;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import static org.apache.activemq.ActiveMQSslConnectionFactoryTest.getKeyManager;
1: import static org.apache.activemq.ActiveMQSslConnectionFactoryTest.getTrustManager;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class NetworkReconnectSslNioTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkReconnectSslNioTest.class);
1: 
1:     @Test
1:     public void testForceReconnect() throws Exception {
1: 
1:         final SslContext sslContext = new SslContext(getKeyManager(), getTrustManager(), null);
1: 
1:         BrokerService remote = new BrokerService();
1:         remote.setBrokerName("R");
1:         remote.setSslContext(sslContext);
1:         remote.setUseJmx(false);
1:         remote.setPersistent(false);
0:         final TransportConnector transportConnector = remote.addConnector("nio+ssl://0.0.0.0:0");
1:         remote.start();
1: 
1:         BrokerService local = new BrokerService();
1:         local.setSslContext(sslContext);
1:         local.setUseJmx(false);
1:         local.setPersistent(false);
0:         final NetworkConnector networkConnector = local.addNetworkConnector("static:(" + remote.getTransportConnectorByScheme("nio+ssl").getPublishableConnectString().replace("nio+ssl", "ssl") + ")?useExponentialBackOff=false&initialReconnectDelay=10");
1:         local.start();
1: 
1:         assertTrue("Bridge created", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !networkConnector.activeBridges().isEmpty() && (networkConnector.activeBridges().toArray(new DurableConduitBridge[]{})[0].getRemoteBrokerName() != null);
1:             }
1:         }));
1: 
1:         final AtomicReference<DurableConduitBridge> bridge = new AtomicReference<>((DurableConduitBridge) networkConnector.activeBridges().iterator().next());
1:         assertTrue("Connected to R", bridge.get().getRemoteBrokerName().equals("R"));
1: 
1:         for (int i=0; i<200;  i++) {
1:             LOG.info("Forcing error on NC via remote exception, iteration:" + i + ",  bridge: " + bridge);
1: 
1:             TransportConnection connection = transportConnector.getConnections().iterator().next();
1:             connection.dispatchAsync(new ConnectionError());
1: 
1:             assertTrue("bridge failed", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return bridge.get().bridgeFailed.get();
1:                 }
1:             }, 10*1000, 10));
1: 
1:             bridge.set(null);
1:             assertTrue("Bridge recreated: " + i, Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     if (!networkConnector.activeBridges().isEmpty()) {
1:                         try {
1:                             DurableConduitBridge durableConduitBridge = (DurableConduitBridge) networkConnector.activeBridges().iterator().next();
1:                             if ("R".equals(durableConduitBridge.getRemoteBrokerName())) {
1:                                 bridge.set(durableConduitBridge);
1:                             }
1:                         } catch (NoSuchElementException expectedContention) {}
1:                     }
1:                     return bridge.get() != null;
1:                 }
1:             }, 10*1000, 10));
1:         }
1:         local.stop();
1:         remote.stop();
1:     }
1: }
============================================================================