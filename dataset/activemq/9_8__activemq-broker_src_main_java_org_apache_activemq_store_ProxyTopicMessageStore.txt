1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:f812e34: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:d29ca2a: import org.apache.activemq.command.SubscriptionInfo;
1:6d8e2c5: import org.apache.activemq.usage.MemoryUsage;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A simple proxy that delegates to another MessageStore.
1:d29ca2a:  */
1:ea70e82: public class ProxyTopicMessageStore extends ProxyMessageStore implements TopicMessageStore  {
1:d29ca2a: 
1:d29ca2a:     public ProxyTopicMessageStore(TopicMessageStore delegate) {
1:ea70e82:         super(delegate);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public MessageStore getDelegate() {
1:d29ca2a:         return delegate;
1:d29ca2a:     }
1:f812e34: 
1:cf3d419:     @Override
1:d29ca2a:     public void addMessage(ConnectionContext context, Message message) throws IOException {
1:d29ca2a:         delegate.addMessage(context, message);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:f4d4c3b:     public void addMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
1:d40f398:        delegate.addMessage(context, message, canOptimizeHint);
1:f4d4c3b:     }
1:9b64c37: 
1:d40f398:     @Override
1:d29ca2a:     public Message getMessage(MessageId identity) throws IOException {
1:d29ca2a:         return delegate.getMessage(identity);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:7f5213b:     public void recover(MessageRecoveryListener listener) throws Exception {
1:d29ca2a:         delegate.recover(listener);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:d29ca2a:     public void removeAllMessages(ConnectionContext context) throws IOException {
1:d29ca2a:         delegate.removeAllMessages(context);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:d29ca2a:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:d29ca2a:         delegate.removeMessage(context, ack);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:f451ad0:     public void start() throws Exception {
1:d29ca2a:         delegate.start();
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:f451ad0:     public void stop() throws Exception {
1:f451ad0:         delegate.stop();
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:d29ca2a:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
1:ea70e82:         return ((TopicMessageStore)delegate).lookupSubscription(clientId, subscriptionName);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:f812e34:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
1:3432a75:                             MessageId messageId, MessageAck ack) throws IOException {
1:ea70e82:         ((TopicMessageStore)delegate).acknowledge(context, clientId, subscriptionName, messageId, ack);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:c0090f6:     public void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
1:ea70e82:         ((TopicMessageStore)delegate).addSubscription(subscriptionInfo, retroactive);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:d29ca2a:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException {
1:ea70e82:         ((TopicMessageStore)delegate).deleteSubscription(clientId, subscriptionName);
1:d29ca2a:     }
1:d29ca2a: 
1:d40f398:     @Override
1:f812e34:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
1:f812e34:         throws Exception {
1:ea70e82:         ((TopicMessageStore)delegate).recoverSubscription(clientId, subscriptionName, listener);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:f812e34:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
1:f812e34:                                     MessageRecoveryListener listener) throws Exception {
1:ea70e82:         ((TopicMessageStore)delegate).recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
1:629bc81:     }
1:f812e34: 
1:d40f398:     @Override
1:f812e34:     public void resetBatching(String clientId, String subscriptionName) {
1:ea70e82:         ((TopicMessageStore)delegate).resetBatching(clientId, subscriptionName);
1:629bc81:     }
1:f812e34: 
1:d40f398:     @Override
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return delegate.getDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:d40f398:     @Override
1:9b64c37:     public SubscriptionInfo[] getAllSubscriptions() throws IOException {
1:ea70e82:         return ((TopicMessageStore)delegate).getAllSubscriptions();
1:18d616c:     }
1:f812e34: 
1:d40f398:     @Override
1:6d8e2c5:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:6d8e2c5:         delegate.setMemoryUsage(memoryUsage);
1:9b64c37:     }
1:18d616c: 
1:d40f398:     @Override
1:f812e34:     public int getMessageCount(String clientId, String subscriberName) throws IOException {
1:ea70e82:         return ((TopicMessageStore)delegate).getMessageCount(clientId, subscriberName);
1:f812e34:     }
1:f812e34: 
1:d40f398:     @Override
1:f812e34:     public int getMessageCount() throws IOException {
1:629bc81:         return delegate.getMessageCount();
1:d29ca2a:     }
1:d29ca2a: 
1:d40f398:     @Override
1:785b16b:     public long getMessageSize() throws IOException {
1:785b16b:         return delegate.getMessageSize();
1:785b16b:     }
1:785b16b: 
1:785b16b:     @Override
1:f812e34:     public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:f812e34:         delegate.recoverNextMessages(maxReturned, listener);
1:d29ca2a:     }
1:f812e34: 
1:d40f398:     @Override
1:63e3f41:     public void dispose(ConnectionContext context) {
1:63e3f41:         delegate.dispose(context);
1:63e3f41:     }
1:d29ca2a: 
1:d40f398:     @Override
1:f812e34:     public void resetBatching() {
1:629bc81:         delegate.resetBatching();
1:629bc81:     }
1:f812e34: 
1:d40f398:     @Override
1:180b0ec:     public void setBatch(MessageId messageId) throws Exception {
1:37c2a95:         delegate.setBatch(messageId);
1:b6ba20b:     }
1:d29ca2a: 
1:d40f398:     @Override
1:affd91e:     public boolean isEmpty() throws Exception {
1:affd91e:         return delegate.isEmpty();
1:affd91e:      }
1:d29ca2a: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException {
1:ea84378:         return delegate.asyncAddTopicMessage(context, message);
1:f4d4c3b:      }
1:d29ca2a: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
1:d40f398:         return delegate.asyncAddTopicMessage(context,message, canOptimizeHint);
1:ea84378:     }
1:d29ca2a: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException {
1:ea84378:         return delegate.asyncAddQueueMessage(context, message);
1:f4d4c3b:     }
1:d40f398: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
1:d40f398:         return delegate.asyncAddQueueMessage(context,message, canOptimizeHint);
1:ea84378:     }
1:d40f398: 
1:d40f398:     @Override
1:ea84378:     public void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:ea84378:         delegate.removeAsyncMessage(context, ack);
1:ea84378:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:03f38ae:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:03f38ae:         delegate.setPrioritizedMessages(prioritizedMessages);
1:b6ba20b:     }
1:d40f398: 
1:d40f398:     @Override
1:03f38ae:     public boolean isPrioritizedMessages() {
1:03f38ae:         return delegate.isPrioritizedMessages();
2:4eef609:     }
1:266d23e: 
1:734fb7d:     @Override
1:266d23e:     public void updateMessage(Message message) throws IOException {
1:266d23e:         delegate.updateMessage(message);
1:266d23e:     }
1:54e2e3b: 
1:54e2e3b:     @Override
1:54e2e3b:     public void registerIndexListener(IndexListener indexListener) {
1:54e2e3b:         delegate.registerIndexListener(indexListener);
1:54e2e3b:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public MessageStoreStatistics getMessageStoreStatistics() {
1:785b16b:         return delegate.getMessageStoreStatistics();
1:785b16b:     }
1:785b16b: 
1:734fb7d:     /* (non-Javadoc)
1:734fb7d:      * @see org.apache.activemq.store.TopicMessageStore#getMessageSize(java.lang.String, java.lang.String)
1:734fb7d:      */
1:734fb7d:     @Override
1:734fb7d:     public long getMessageSize(String clientId, String subscriberName)
1:734fb7d:             throws IOException {
1:ea70e82:         return ((TopicMessageStore)delegate).getMessageSize(clientId, subscriberName);
1:734fb7d:     }
1:734fb7d: 
1:d40f398:     @Override
1:cf3d419:     public MessageStoreSubscriptionStatistics getMessageStoreSubStatistics() {
1:ea70e82:         return ((TopicMessageStore)delegate).getMessageStoreSubStatistics();
1:cf3d419:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1: public class ProxyTopicMessageStore extends ProxyMessageStore implements TopicMessageStore  {
1:         super(delegate);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicMessageStore)delegate).lookupSubscription(clientId, subscriptionName);
1:         ((TopicMessageStore)delegate).acknowledge(context, clientId, subscriptionName, messageId, ack);
1:         ((TopicMessageStore)delegate).addSubscription(subscriptionInfo, retroactive);
1:         ((TopicMessageStore)delegate).deleteSubscription(clientId, subscriptionName);
1:         ((TopicMessageStore)delegate).recoverSubscription(clientId, subscriptionName, listener);
1:         ((TopicMessageStore)delegate).recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
1:         ((TopicMessageStore)delegate).resetBatching(clientId, subscriptionName);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicMessageStore)delegate).getAllSubscriptions();
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicMessageStore)delegate).getMessageCount(clientId, subscriberName);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicMessageStore)delegate).getMessageSize(clientId, subscriberName);
1:         return ((TopicMessageStore)delegate).getMessageStoreSubStatistics();
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void registerIndexListener(IndexListener indexListener) {
1:         delegate.registerIndexListener(indexListener);
1:     }
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
1:     public ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException {
1:     public ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
1:     public ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException {
1:     public ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void updateMessage(Message message) throws IOException {
1:         delegate.updateMessage(message);
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public MessageStoreSubscriptionStatistics getMessageStoreSubStatistics() {
0:         return delegate.getMessageStoreSubStatistics();
1:     }
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.TopicMessageStore#getMessageSize(java.lang.String, java.lang.String)
1:      */
1:     @Override
1:     public long getMessageSize(String clientId, String subscriberName)
1:             throws IOException {
0:         return delegate.getMessageSize(clientId, subscriberName);
1:     }
1: 
commit:785b16b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public long getMessageSize() throws IOException {
1:         return delegate.getMessageSize();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public MessageStoreStatistics getMessageStoreStatistics() {
1:         return delegate.getMessageStoreStatistics();
1:     }
1: 
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c0090f6
/////////////////////////////////////////////////////////////////////////
1:     public void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
0:         delegate.addSubscription(subscriptionInfo, retroactive);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:180b0ec
/////////////////////////////////////////////////////////////////////////
1:     public void setBatch(MessageId messageId) throws Exception {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
0:                             MessageId messageId) throws IOException {
1: 
1: 
1:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
1:         throws Exception {
1: 
1:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
1:                                     MessageRecoveryListener listener) throws Exception {
0:         delegate.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
1: 
1:     public void resetBatching(String clientId, String subscriptionName) {
0:         delegate.resetBatching(clientId, subscriptionName);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMessageCount(String clientId, String subscriberName) throws IOException {
0:         return delegate.getMessageCount(clientId, subscriberName);
1:     }
1: 
1:     public int getMessageCount() throws IOException {
1:     public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:         delegate.recoverNextMessages(maxReturned, listener);
1: 
1:     public void resetBatching() {
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
0:         delegate.addSubsciption(subscriptionInfo, retroactive);
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void setUsageManager(UsageManager usageManager) {
0:         delegate.setUsageManager(usageManager);
1:     }
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1:     public void start() throws Exception {
1:     public void stop() throws Exception {
1:         delegate.stop();
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void recover(MessageRecoveryListener listener) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception {
commit:9b64c37
/////////////////////////////////////////////////////////////////////////
1: 
1:     public SubscriptionInfo[] getAllSubscriptions() throws IOException {
0:         return delegate.getAllSubscriptions();
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: /**
1:  * A simple proxy that delegates to another MessageStore.
1:  */
0: public class ProxyTopicMessageStore implements TopicMessageStore {
1: 
0:     final TopicMessageStore delegate;
1:     
1:     public ProxyTopicMessageStore(TopicMessageStore delegate) {
0:         this.delegate = delegate;
1:     }
1:     
1:     public MessageStore getDelegate() {
1:         return delegate;
1:     }
1:     
1:     public void addMessage(ConnectionContext context, Message message) throws IOException {
1:         delegate.addMessage(context, message);
1:     }
1:     public Message getMessage(MessageId identity) throws IOException {
1:         return delegate.getMessage(identity);
1:     }
0:     public void recover(MessageRecoveryListener listener) throws Throwable {
1:         delegate.recover(listener);
1:     }
1:     public void removeAllMessages(ConnectionContext context) throws IOException {
1:         delegate.removeAllMessages(context);
1:     }
1:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:         delegate.removeMessage(context, ack);
1:     }
0:     public void start() throws IOException {
1:         delegate.start();
1:     }
0:     public void stop(long timeout) throws IOException {
0:         delegate.stop(timeout);
1:     }
1:     
1:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
0:         return delegate.lookupSubscription(clientId, subscriptionName);
1:     }
0:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId)
0:             throws IOException {
0:         delegate.acknowledge(context, clientId, subscriptionName, messageId);
1:     }
0:     public void addSubsciption(String clientId, String subscriptionName, String selector, boolean retroactive) throws IOException {
0:         delegate.addSubsciption(clientId, subscriptionName, selector, retroactive);
1:     }
1:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException {
0:         delegate.deleteSubscription(clientId, subscriptionName);
1:     }
1: 
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Throwable {
0:         delegate.recoverSubscription(clientId, subscriptionName, listener);
1:     }
1:     
1:     public ActiveMQDestination getDestination() {
1:         return delegate.getDestination();
1:     }
1: 
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, long expirationTime, String messageRef) throws IOException {
0:         delegate.addMessageReference(context, messageId, expirationTime, messageRef);
1:     }
0:     public String getMessageReference(MessageId identity) throws IOException {
0:         return delegate.getMessageReference(identity);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d40f398
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:        delegate.addMessage(context, message, canOptimizeHint);
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1:     @Override
1:         return delegate.asyncAddTopicMessage(context,message, canOptimizeHint);
1:     @Override
1:     @Override
1:         return delegate.asyncAddQueueMessage(context,message, canOptimizeHint);
1:     @Override
1:     @Override
1: 
1:     @Override
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4d4c3b
/////////////////////////////////////////////////////////////////////////
1:     public void addMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
0:        delegate.addMessage(context,message,canOptimizeHint);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public Future<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
0:         return delegate.asyncAddTopicMessage(context,message,canOptimizeHint);
1:     }
0: 
0:     public Future<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {
0:         return delegate.asyncAddQueueMessage(context,message,canOptimizeHint);
1:     }
0: 
commit:ea84378
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Future<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException {
1:         return delegate.asyncAddTopicMessage(context, message);
1:      }
0: 
0:     public Future<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException {
1:         return delegate.asyncAddQueueMessage(context, message);
1:     }
0: 
1:     public void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:         delegate.removeAsyncMessage(context, ack);
1:     }
commit:affd91e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isEmpty() throws Exception {
1:         return delegate.isEmpty();
1:      }
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
1:     public void dispose(ConnectionContext context) {
1:         delegate.dispose(context);
1:     }
0: 
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:         delegate.setMemoryUsage(memoryUsage);
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId,String subscriptionName,int maxReturned,MessageRecoveryListener listener) throws Exception{
0:         delegate.recoverNextMessages(clientId, subscriptionName, maxReturned,listener);
0:     public void resetBatching(String clientId,String subscriptionName) {
0:         delegate.resetBatching(clientId,subscriptionName);
0:        
/////////////////////////////////////////////////////////////////////////
0:     
0:    
0:     public int getMessageCount() throws IOException{
1:         return delegate.getMessageCount();
1:     }
0: 
0:     public void recoverNextMessages(int maxReturned,MessageRecoveryListener listener) throws Exception{
0:        delegate.recoverNextMessages(maxReturned,listener);
0:         
1:     }
0: 
0:     public void resetBatching(){
1:         delegate.resetBatching();
0:         
1:     }
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
0:     public void resetBatching(String clientId,String subscriptionName,MessageId id) {
0:         delegate.resetBatching(clientId,subscriptionName,id);
1:     }
0:     
0:     public MessageId getNextMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception{
0:         return delegate.getNextMessageIdToDeliver(clientId,subscriptionName,id);
1:     }
0:     
0:     public MessageId getPreviousMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception{
0:         return delegate.getPreviousMessageIdToDeliver(clientId,subscriptionName,id);
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId,String subscriptionName,MessageId lastMessageId,int maxReturned,MessageRecoveryListener listener) throws Exception{
0:         delegate.recoverNextMessages(clientId, subscriptionName, lastMessageId,maxReturned,listener);
1:     }
0:     
0:     public Message getNextMessageToDeliver(String clientId,String subscriptionName) throws IOException{
0:         return delegate.getNextMessageToDeliver(clientId,subscriptionName);
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
0: 
0:     public int getMessageCount(String clientId,String subscriberName) throws IOException{
0:         return delegate.getMessageCount(clientId,subscriberName);
0:     }    
author:Gary Tully
-------------------------------------------------------------------------------
commit:3432a75
/////////////////////////////////////////////////////////////////////////
1:                             MessageId messageId, MessageAck ack) throws IOException {
0:         delegate.acknowledge(context, clientId, subscriptionName, messageId, ack);
commit:37c2a95
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void setBatch(MessageId messageId) {
1:         delegate.setBatch(messageId);
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:03f38ae
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:         delegate.setPrioritizedMessages(prioritizedMessages);
0:     }
0:     
1:     public boolean isPrioritizedMessages() {
1:         return delegate.isPrioritizedMessages();
0:     }
============================================================================