1:cedc2fb: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:cedc2fb:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cedc2fb:  *
1:cedc2fb:  * Unless required by applicable law or agreed to in writing, software
1:cedc2fb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cedc2fb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cedc2fb:  * See the License for the specific language governing permissions and
1:cedc2fb:  * limitations under the License.
1:cedc2fb:  */
1:cedc2fb: package org.apache.activemq;
1:99f0445: 
1:50a98e3: import java.io.ByteArrayOutputStream;
1:50a98e3: import java.io.DataOutputStream;
1:50a98e3: import java.io.IOException;
1:cedc2fb: import java.net.URI;
1:cedc2fb: import java.net.URISyntaxException;
1:4eafccc: import java.util.concurrent.CopyOnWriteArrayList;
1:99f0445: 
1:230a86c: import javax.jms.Connection;
1:50a98e3: import javax.jms.Destination;
1:230a86c: import javax.jms.JMSException;
1:50a98e3: import javax.jms.MessageConsumer;
1:50a98e3: import javax.jms.MessageProducer;
1:50a98e3: import javax.jms.TextMessage;
1:230a86c: import javax.jms.XAConnection;
1:016ae05: import javax.jms.XAConnectionFactory;
1:230a86c: import javax.jms.XAQueueConnection;
1:08393aa: import javax.jms.XASession;
1:230a86c: import javax.jms.XATopicConnection;
1:08393aa: import javax.transaction.xa.XAException;
1:08393aa: import javax.transaction.xa.XAResource;
1:50a98e3: import javax.transaction.xa.Xid;
1:99f0445: 
1:4eafccc: import org.apache.activemq.broker.BrokerFactory;
1:cedc2fb: import org.apache.activemq.broker.BrokerRegistry;
1:cedc2fb: import org.apache.activemq.broker.BrokerService;
1:4eafccc: import org.apache.activemq.broker.TransactionBroker;
1:4eafccc: import org.apache.activemq.broker.TransportConnection;
1:cedc2fb: import org.apache.activemq.broker.TransportConnector;
1:50a98e3: import org.apache.activemq.command.ActiveMQQueue;
1:50a98e3: import org.apache.activemq.command.ActiveMQTextMessage;
1:4eafccc: import org.apache.activemq.command.ConnectionId;
1:4eafccc: import org.apache.activemq.command.TransactionInfo;
1:4eafccc: import org.apache.activemq.command.XATransactionId;
1:4eafccc: import org.apache.activemq.management.JMSConnectionStatsImpl;
1:4eafccc: import org.apache.activemq.transport.failover.FailoverTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:99f0445: 
1:cedc2fb: public class ActiveMQXAConnectionFactoryTest extends CombinationTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionFactoryTest.class);
1:50a98e3:     long txGenerator = System.currentTimeMillis();
1:f830d96:     private ActiveMQConnection connection;
1:f830d96:     private BrokerService broker;
1:99f0445: 
1:f6970c7:     @Override
1:f6970c7:     public void tearDown() throws Exception {
1:f830d96:         // Try our best to close any previously opend connection.
1:f830d96:         try {
1:f830d96:             connection.close();
1:f830d96:         } catch (Throwable ignore) {
1:f830d96:         }
1:f830d96:         // Try our best to stop any previously started broker.
1:f830d96:         try {
1:f830d96:             broker.stop();
1:f830d96:         } catch (Throwable ignore) {
1:f830d96:         }
1:f830d96:     }
1:221a751: 
1:016ae05:     protected ActiveMQConnectionFactory getXAConnectionFactory(String brokerUrl) {
1:016ae05:         return new ActiveMQXAConnectionFactory(brokerUrl);
1:016ae05:     }
1:016ae05: 
1:016ae05:     protected ActiveMQConnectionFactory getXAConnectionFactory(URI uri) {
1:016ae05:         return new ActiveMQXAConnectionFactory(uri);
1:016ae05:     }
1:016ae05: 
1:346cdc5:     public void testCopy() throws URISyntaxException, JMSException {
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?");
1:346cdc5:         ActiveMQConnectionFactory copy = cf.copy();
1:016ae05:         assertTrue("Should be an ActiveMQXAConnectionFactory", copy.getClass().equals(cf.getClass()));
1:346cdc5:     }
1:885b8c9: 
1:cedc2fb:     public void testUseURIToSetOptionsOnConnectionFactory() throws URISyntaxException, JMSException {
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?jms.useAsyncSend=true");
1:cedc2fb:         assertTrue(cf.isUseAsyncSend());
1:cedc2fb:         // the broker url have been adjusted.
1:cedc2fb:         assertEquals("vm://localhost", cf.getBrokerURL());
1:99f0445: 
1:016ae05:         cf = getXAConnectionFactory("vm://localhost?jms.useAsyncSend=false");
1:cedc2fb:         assertFalse(cf.isUseAsyncSend());
1:cedc2fb:         // the broker url have been adjusted.
1:cedc2fb:         assertEquals("vm://localhost", cf.getBrokerURL());
1:99f0445: 
1:016ae05:         cf = getXAConnectionFactory("vm:(broker:()/localhost)?jms.useAsyncSend=true");
1:cedc2fb:         assertTrue(cf.isUseAsyncSend());
1:cedc2fb:         // the broker url have been adjusted.
1:cedc2fb:         assertEquals("vm:(broker:()/localhost)", cf.getBrokerURL());
1:99f0445: 
1:016ae05:         cf = getXAConnectionFactory(
1:99f0445:                 "vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=10&" +
1:99f0445:                                "jms.redeliveryPolicy.initialRedeliveryDelay=10000&" +
1:99f0445:                                "jms.redeliveryPolicy.redeliveryDelay=10000&" +
1:99f0445:                                "jms.redeliveryPolicy.useExponentialBackOff=true&" +
1:99f0445:                                "jms.redeliveryPolicy.backOffMultiplier=2");
1:99f0445:         assertEquals(10, cf.getRedeliveryPolicy().getMaximumRedeliveries());
1:99f0445:         assertEquals(10000, cf.getRedeliveryPolicy().getInitialRedeliveryDelay());
1:99f0445:         assertEquals(10000, cf.getRedeliveryPolicy().getRedeliveryDelay());
1:99f0445:         assertEquals(true, cf.getRedeliveryPolicy().isUseExponentialBackOff());
1:99f0445:         assertEquals(2.0, cf.getRedeliveryPolicy().getBackOffMultiplier(), 0.1);
1:99f0445: 
1:99f0445:         // the broker url have been adjusted.
1:99f0445:         assertEquals("vm://localhost", cf.getBrokerURL());
2:cedc2fb:     }
1:99f0445: 
1:cedc2fb:     public void testCreateVMConnectionWithEmbdeddBroker() throws URISyntaxException, JMSException {
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://myBroker?broker.persistent=false");
1:230a86c:         // Make sure the broker is not created until the connection is
1:230a86c:         // instantiated.
1:f830d96:         assertNull(BrokerRegistry.getInstance().lookup("myBroker"));
1:f830d96:         connection = (ActiveMQConnection) cf.createConnection();
1:cedc2fb:         // This should create the connection.
1:cedc2fb:         assertNotNull(connection);
1:cedc2fb:         // Verify the broker was created.
1:f830d96:         assertNotNull(BrokerRegistry.getInstance().lookup("myBroker"));
2:cedc2fb:         connection.close();
1:cedc2fb:         // Verify the broker was destroyed.
1:f830d96:         assertNull(BrokerRegistry.getInstance().lookup("myBroker"));
1:99f0445: 
1:f830d96:         connection.close();
1:cedc2fb:     }
1:99f0445: 
1:cedc2fb:     public void testGetBrokerName() throws URISyntaxException, JMSException {
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:f830d96:         connection = (ActiveMQConnection)cf.createConnection();
1:cedc2fb:         connection.start();
1:99f0445: 
1:cedc2fb:         String brokerName = connection.getBrokerName();
1:fc00993:         LOG.info("Got broker name: " + brokerName);
1:99f0445: 
1:cedc2fb:         assertNotNull("No broker name available!", brokerName);
1:cedc2fb:         connection.close();
1:cedc2fb:     }
1:99f0445: 
1:cedc2fb:     public void testCreateTcpConnectionUsingAllocatedPort() throws Exception {
1:cedc2fb:         assertCreateConnection("tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true");
1:cedc2fb:     }
1:99f0445: 
1:cedc2fb:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:cedc2fb:         assertCreateConnection("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:cedc2fb:     }
1:99f0445: 
1:08393aa:     public void testIsSameRM() throws URISyntaxException, JMSException, XAException {
1:99f0445: 
1:f830d96:         XAConnection connection1 = null;
1:f830d96:         XAConnection connection2 = null;
1:f830d96:         try {
1:016ae05:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:f830d96:             connection1 = (XAConnection)cf1.createConnection();
1:f830d96:             XASession session1 = connection1.createXASession();
1:f830d96:             XAResource resource1 = session1.getXAResource();
1:99f0445: 
1:016ae05:             ActiveMQConnectionFactory cf2 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:f830d96:             connection2 = (XAConnection)cf2.createConnection();
1:f830d96:             XASession session2 = connection2.createXASession();
1:f830d96:             XAResource resource2 = session2.getXAResource();
1:f830d96: 
1:f830d96:             assertTrue(resource1.isSameRM(resource2));
1:f830d96:             session1.close();
1:f830d96:             session2.close();
1:f830d96:         } finally {
1:f830d96:             if (connection1 != null) {
1:f830d96:                 try {
1:f830d96:                     connection1.close();
1:f830d96:                 } catch (Exception e) {
1:f830d96:                     // ignore
1:f830d96:                 }
1:f830d96:             }
1:f830d96:             if (connection2 != null) {
1:f830d96:                 try {
1:f830d96:                     connection2.close();
1:f830d96:                 } catch (Exception e) {
1:f830d96:                     // ignore
1:f830d96:                 }
1:f830d96:             }
1:f830d96:         }
1:08393aa:     }
1:99f0445: 
1:221a751:     public void testIsSameRMOverride() throws URISyntaxException, JMSException, XAException {
1:221a751: 
1:221a751:         XAConnection connection1 = null;
1:221a751:         XAConnection connection2 = null;
1:221a751:         try {
1:016ae05:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false&jms.rmIdFromConnectionId=true");
1:221a751:             connection1 = (XAConnection)cf1.createConnection();
1:221a751:             XASession session1 = connection1.createXASession();
1:221a751:             XAResource resource1 = session1.getXAResource();
1:221a751: 
1:016ae05:             ActiveMQConnectionFactory cf2 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:221a751:             connection2 = (XAConnection)cf2.createConnection();
1:221a751:             XASession session2 = connection2.createXASession();
1:221a751:             XAResource resource2 = session2.getXAResource();
1:f830d96: 
1:221a751:             assertFalse(resource1.isSameRM(resource2));
1:221a751: 
1:221a751:             // ensure identity is preserved
1:221a751:             XASession session1a = connection1.createXASession();
1:221a751:             assertTrue(resource1.isSameRM(session1a.getXAResource()));
1:221a751:             session1.close();
1:221a751:             session2.close();
1:221a751:         } finally {
1:221a751:             if (connection1 != null) {
1:221a751:                 try {
1:221a751:                     connection1.close();
1:221a751:                 } catch (Exception e) {
1:221a751:                     // ignore
1:221a751:                 }
1:221a751:             }
1:221a751:             if (connection2 != null) {
1:221a751:                 try {
1:221a751:                     connection2.close();
1:221a751:                 } catch (Exception e) {
1:221a751:                     // ignore
1:221a751:                 }
1:221a751:             }
1:221a751:         }
1:221a751:     }
1:221a751: 
1:50a98e3:     public void testVanilaTransactionalProduceReceive() throws Exception {
1:50a98e3: 
1:f830d96:         XAConnection connection1 = null;
1:f830d96:         try {
1:016ae05:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:f830d96:             connection1 = (XAConnection)cf1.createConnection();
1:50a98e3:             connection1.start();
1:50a98e3:             XASession session = connection1.createXASession();
1:50a98e3:             XAResource resource = session.getXAResource();
1:50a98e3:             Destination dest = new ActiveMQQueue(getName());
1:50a98e3: 
1:50a98e3:             // publish a message
1:50a98e3:             Xid tid = createXid();
1:50a98e3:             resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:             MessageProducer producer = session.createProducer(dest);
1:50a98e3:             ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:50a98e3:             message.setText(getName());
1:50a98e3:             producer.send(message);
1:50a98e3:             resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:             resource.commit(tid, true);
1:50a98e3:             session.close();
1:4eafccc: 
1:50a98e3:             session = connection1.createXASession();
1:50a98e3:             MessageConsumer consumer = session.createConsumer(dest);
1:50a98e3:             tid = createXid();
1:50a98e3:             resource = session.getXAResource();
1:50a98e3:             resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:             TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:50a98e3:             assertNotNull(receivedMessage);
1:50a98e3:             assertEquals(getName(), receivedMessage.getText());
1:50a98e3:             resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:             resource.commit(tid, true);
2:f830d96:             session.close();
1:50a98e3: 
1:f830d96:         } finally {
1:f830d96:             if (connection1 != null) {
1:f830d96:                 try {
1:f830d96:                     connection1.close();
1:f830d96:                 } catch (Exception e) {
1:f830d96:                     // ignore
1:50a98e3:                 }
1:f830d96:             }
1:f830d96:         }
1:f830d96:     }
1:50a98e3: 
1:50a98e3:     public void testConsumerCloseTransactionalSendReceive() throws Exception {
1:50a98e3: 
1:016ae05:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
2:50a98e3:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:50a98e3:         connection1.start();
1:50a98e3:         XASession session = connection1.createXASession();
1:50a98e3:         XAResource resource = session.getXAResource();
1:50a98e3:         Destination dest = new ActiveMQQueue(getName());
1:50a98e3: 
1:50a98e3:         // publish a message
1:50a98e3:         Xid tid = createXid();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         MessageProducer producer = session.createProducer(dest);
1:50a98e3:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:50a98e3:         message.setText(getName());
1:50a98e3:         producer.send(message);
1:50a98e3:         producer.close();
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3:         session.close();
1:50a98e3: 
1:50a98e3:         session = connection1.createXASession();
1:50a98e3:         MessageConsumer consumer = session.createConsumer(dest);
1:50a98e3:         tid = createXid();
1:50a98e3:         resource = session.getXAResource();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:50a98e3:         consumer.close();
1:50a98e3:         assertNotNull(receivedMessage);
1:50a98e3:         assertEquals(getName(), receivedMessage.getText());
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3: 
1:50a98e3:         session = connection1.createXASession();
1:50a98e3:         consumer = session.createConsumer(dest);
1:50a98e3:         tid = createXid();
1:50a98e3:         resource = session.getXAResource();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         assertNull(consumer.receive(1000));
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3: 
1:50a98e3:     }
1:50a98e3: 
1:50a98e3:     public void testSessionCloseTransactionalSendReceive() throws Exception {
1:50a98e3: 
1:016ae05:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:50a98e3:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:50a98e3:         connection1.start();
1:50a98e3:         XASession session = connection1.createXASession();
1:50a98e3:         XAResource resource = session.getXAResource();
1:50a98e3:         Destination dest = new ActiveMQQueue(getName());
1:50a98e3: 
1:50a98e3:         // publish a message
1:50a98e3:         Xid tid = createXid();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         MessageProducer producer = session.createProducer(dest);
1:50a98e3:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:50a98e3:         message.setText(getName());
1:50a98e3:         producer.send(message);
1:50a98e3:         session.close();
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3: 
1:50a98e3: 
1:50a98e3:         session = connection1.createXASession();
1:50a98e3:         MessageConsumer consumer = session.createConsumer(dest);
1:50a98e3:         tid = createXid();
1:50a98e3:         resource = session.getXAResource();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:50a98e3:         session.close();
1:50a98e3:         assertNotNull(receivedMessage);
1:50a98e3:         assertEquals(getName(), receivedMessage.getText());
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3: 
1:50a98e3:         session = connection1.createXASession();
1:50a98e3:         consumer = session.createConsumer(dest);
1:50a98e3:         tid = createXid();
1:50a98e3:         resource = session.getXAResource();
1:50a98e3:         resource.start(tid, XAResource.TMNOFLAGS);
1:50a98e3:         assertNull(consumer.receive(1000));
1:50a98e3:         resource.end(tid, XAResource.TMSUCCESS);
1:50a98e3:         resource.commit(tid, true);
1:50a98e3:     }
1:50a98e3: 
1:50a98e3: 
1:4eafccc:     public void testReadonlyNoLeak() throws Exception {
1:4eafccc:         final String brokerName = "readOnlyNoLeak";
1:4eafccc:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:4eafccc:         broker.setPersistent(false);
1:4eafccc:         broker.start();
1:016ae05:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
1:4eafccc:         cf1.setStatsEnabled(true);
1:4eafccc:         ActiveMQXAConnection xaConnection = (ActiveMQXAConnection)cf1.createConnection();
1:4eafccc:         xaConnection.start();
1:4eafccc:         XASession session = xaConnection.createXASession();
1:4eafccc:         XAResource resource = session.getXAResource();
1:4eafccc:         Xid tid = createXid();
1:4eafccc:         resource.start(tid, XAResource.TMNOFLAGS);
1:4eafccc:         session.close();
1:4eafccc:         resource.end(tid, XAResource.TMSUCCESS);
1:4eafccc:         resource.commit(tid, true);
1:4eafccc: 
1:4eafccc:         assertTransactionGoneFromBroker(tid);
1:4eafccc:         assertTransactionGoneFromConnection(brokerName, xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:4eafccc:         assertSessionGone(xaConnection, session);
1:4eafccc:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1:4eafccc: 
1:4eafccc:         // two phase
1:4eafccc:         session = xaConnection.createXASession();
1:4eafccc:         resource = session.getXAResource();
1:4eafccc:         tid = createXid();
1:4eafccc:         resource.start(tid, XAResource.TMNOFLAGS);
1:4eafccc:         session.close();
1:4eafccc:         resource.end(tid, XAResource.TMSUCCESS);
1:4eafccc:         assertEquals(XAResource.XA_RDONLY, resource.prepare(tid));
1:4eafccc: 
1:4eafccc:         // no need for a commit on read only
1:4eafccc:         assertTransactionGoneFromBroker(tid);
1:4eafccc:         assertTransactionGoneFromConnection(brokerName, xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:4eafccc:         assertSessionGone(xaConnection, session);
1:4eafccc:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1:4eafccc: 
1:4eafccc:         xaConnection.close();
1:4eafccc:         broker.stop();
1:4eafccc: 
1:4eafccc:     }
1:4eafccc: 
1:c0daffa:     public void testCloseSendConnection() throws Exception {
1:c0daffa:         String brokerName = "closeSend";
1:c0daffa:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:c0daffa:         broker.start();
1:c0daffa:         broker.waitUntilStarted();
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:c0daffa:         XAConnection connection = (XAConnection)cf.createConnection();
1:c0daffa:         connection.start();
1:c0daffa:         XASession session = connection.createXASession();
1:99f0445:         XAResource resource = session.getXAResource();
1:f830d96:         Destination dest = new ActiveMQQueue(getName());
1:99f0445: 
1:f830d96:         // publish a message
1:f830d96:         Xid tid = createXid();
2:f830d96:         resource.start(tid, XAResource.TMNOFLAGS);
1:f830d96:         MessageProducer producer = session.createProducer(dest);
1:f830d96:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:f830d96:         message.setText(getName());
1:f830d96:         producer.send(message);
1:99f0445: 
1:c0daffa:         connection.close();
1:99f0445: 
1:c0daffa:         assertTransactionGoneFromBroker(tid);
1:99f0445: 
1:8a0dd39:         broker.stop();
1:c0daffa:     }
1:99f0445: 
1:885b8c9:     public void testExceptionAfterClose() throws Exception {
1:885b8c9: 
1:016ae05:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:885b8c9:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:885b8c9:         connection1.start();
1:99f0445: 
1:885b8c9:         XASession session = connection1.createXASession();
1:885b8c9:         session.close();
1:885b8c9:         try {
1:885b8c9:             session.commit();
1:885b8c9:             fail("expect exception after close");
1:885b8c9:         } catch (javax.jms.IllegalStateException expected) {}
1:885b8c9: 
1:885b8c9:         try {
1:885b8c9:             session.rollback();
1:885b8c9:             fail("expect exception after close");
1:885b8c9:         } catch (javax.jms.IllegalStateException expected) {}
1:885b8c9: 
1:885b8c9:         try {
1:885b8c9:             session.getTransacted();
1:885b8c9:             fail("expect exception after close");
1:885b8c9:         } catch (javax.jms.IllegalStateException expected) {}
1:885b8c9:     }
1:885b8c9: 
1:f155083:     public void testRollbackXaErrorCode() throws Exception {
1:f155083:         String brokerName = "rollbackErrorCode";
1:f155083:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:f155083:         broker.start();
1:f155083:         broker.waitUntilStarted();
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:f155083:         XAConnection connection = (XAConnection)cf.createConnection();
1:f155083:         connection.start();
1:f155083:         XASession session = connection.createXASession();
1:f155083:         XAResource resource = session.getXAResource();
1:f155083: 
1:f155083:         Xid tid = createXid();
1:f155083:         try {
1:f155083:             resource.rollback(tid);
1:f155083:             fail("Expected xa exception on no tx");
1:f155083:         } catch (XAException expected) {
1:f155083:             LOG.info("got expected xa", expected);
1:ab1e9c7:             assertEquals("no tx", XAException.XAER_NOTA, expected.errorCode);
1:f155083:         }
1:f155083:         connection.close();
1:f155083:         broker.stop();
1:f155083:     }
1:f155083: 
1:4eafccc:     private void assertTransactionGoneFromFailoverState(
1:4eafccc:             ActiveMQXAConnection connection1, Xid tid) throws Exception {
1:4eafccc: 
1:4eafccc:         FailoverTransport transport = (FailoverTransport) connection1.getTransport().narrow(FailoverTransport.class);
1:4eafccc:         TransactionInfo info = new TransactionInfo(connection1.getConnectionInfo().getConnectionId(), new XATransactionId(tid), TransactionInfo.COMMIT_ONE_PHASE);
1:f155083:         assertNull("transaction should not exist in the state tracker",
1:4eafccc:                 transport.getStateTracker().processCommitTransactionOnePhase(info));
1:4eafccc:     }
1:4eafccc: 
1:4eafccc:     private void assertSessionGone(ActiveMQXAConnection connection1,
1:4eafccc:             XASession session) {
1:4eafccc:         JMSConnectionStatsImpl stats = (JMSConnectionStatsImpl)connection1.getStats();
1:4eafccc:         // should be no dangling sessions maintained by the transaction
1:4eafccc:         assertEquals("should be no sessions", 0, stats.getSessions().length);
1:4eafccc:     }
1:4eafccc: 
1:4eafccc:     private void assertTransactionGoneFromConnection(String brokerName, String clientId, ConnectionId connectionId, Xid tid) throws Exception {
1:4eafccc:         BrokerService broker = BrokerRegistry.getInstance().lookup(brokerName);
1:4eafccc:         CopyOnWriteArrayList<TransportConnection> connections = broker.getTransportConnectors().get(0).getConnections();
1:4eafccc:         for (TransportConnection connection: connections) {
1:4eafccc:             if (connection.getConnectionId().equals(clientId)) {
1:4eafccc:                 try {
1:4eafccc:                     connection.processPrepareTransaction(new TransactionInfo(connectionId, new XATransactionId(tid), TransactionInfo.PREPARE));
1:4eafccc:                     fail("did not get expected excepton on missing transaction, it must be still there in error!");
1:4eafccc:                 } catch (IllegalStateException expectedOnNoTransaction) {
1:4eafccc:                 }
1:4eafccc:             }
1:4eafccc:         }
1:4eafccc:     }
1:4eafccc: 
1:4eafccc:     private void assertTransactionGoneFromBroker(Xid tid) throws Exception {
1:4eafccc:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
1:4eafccc:         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:4eafccc:         try {
1:4eafccc:             transactionBroker.getTransaction(null, new XATransactionId(tid), false);
1:c0daffa:             fail("expected exception on tx not found");
1:4eafccc:         } catch (XAException expectedOnNotFound) {
1:4eafccc:         }
1:4eafccc:     }
1:4eafccc: 
1:cedc2fb:     protected void assertCreateConnection(String uri) throws Exception {
1:cedc2fb:         // Start up a broker with a tcp connector.
1:f830d96:         broker = new BrokerService();
1:cedc2fb:         broker.setPersistent(false);
1:6b44c3c:         broker.setUseJmx(false);
1:cedc2fb:         TransportConnector connector = broker.addConnector(uri);
1:cedc2fb:         broker.start();
1:99f0445: 
1:cedc2fb:         URI temp = new URI(uri);
1:230a86c:         // URI connectURI = connector.getServer().getConnectURI();
1:cedc2fb:         // TODO this sometimes fails when using the actual local host name
1:f6970c7:         URI currentURI = new URI(connector.getPublishableConnectString());
1:99f0445: 
1:cedc2fb:         // sometimes the actual host name doesn't work in this test case
1:230a86c:         // e.g. on OS X so lets use the original details but just use the actual
1:230a86c:         // port
1:230a86c:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(),
1:230a86c:                                  temp.getPath(), temp.getQuery(), temp.getFragment());
1:f830d96: 
1:fc00993:         LOG.info("connection URI is: " + connectURI);
1:8a0dd39: 
1:cedc2fb:         // This should create the connection.
1:016ae05:         ActiveMQConnectionFactory cf = getXAConnectionFactory(connectURI);
2:cedc2fb:         Connection connection = cf.createConnection();
1:c0daffa: 
1:cedc2fb:         assertXAConnection(connection);
1:c0daffa: 
1:cedc2fb:         assertNotNull(connection);
1:cedc2fb:         connection.close();
1:c0daffa: 
1:016ae05:         connection = ((XAConnectionFactory)cf).createXAConnection();
1:c0daffa: 
1:cedc2fb:         assertXAConnection(connection);
3:08393aa: 
1:cedc2fb:         assertNotNull(connection);
1:99f0445:     }
1:08393aa: 
1:cedc2fb:     private void assertXAConnection(Connection connection) {
1:cedc2fb:         assertTrue("Should be an XAConnection", connection instanceof XAConnection);
1:cedc2fb:         assertTrue("Should be an XATopicConnection", connection instanceof XATopicConnection);
1:cedc2fb:         assertTrue("Should be an XAQueueConnection", connection instanceof XAQueueConnection);
1:cedc2fb:     }
1:50a98e3: 
1:50a98e3:     public Xid createXid() throws IOException {
1:50a98e3: 
1:50a98e3:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:50a98e3:         DataOutputStream os = new DataOutputStream(baos);
1:50a98e3:         os.writeLong(++txGenerator);
1:50a98e3:         os.close();
1:50a98e3:         final byte[] bs = baos.toByteArray();
1:50a98e3: 
1:50a98e3:         return new Xid() {
1:016ae05:             @Override
1:50a98e3:             public int getFormatId() {
1:50a98e3:                 return 86;
1:50a98e3:             }
1:50a98e3: 
1:016ae05:             @Override
1:50a98e3:             public byte[] getGlobalTransactionId() {
1:50a98e3:                 return bs;
1:50a98e3:             }
1:50a98e3: 
1:016ae05:             @Override
1:50a98e3:             public byte[] getBranchQualifier() {
1:50a98e3:                 return bs;
1:50a98e3:             }
1:50a98e3:         };
1:50a98e3: 
1:50a98e3:     }
1:08393aa: 
1:cedc2fb: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.XAConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory getXAConnectionFactory(String brokerUrl) {
1:         return new ActiveMQXAConnectionFactory(brokerUrl);
1:     }
1: 
1:     protected ActiveMQConnectionFactory getXAConnectionFactory(URI uri) {
1:         return new ActiveMQXAConnectionFactory(uri);
1:     }
1: 
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?");
1:         assertTrue("Should be an ActiveMQXAConnectionFactory", copy.getClass().equals(cf.getClass()));
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?jms.useAsyncSend=true");
1:         cf = getXAConnectionFactory("vm://localhost?jms.useAsyncSend=false");
1:         cf = getXAConnectionFactory("vm:(broker:()/localhost)?jms.useAsyncSend=true");
1:         cf = getXAConnectionFactory(
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://myBroker?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
1:             ActiveMQConnectionFactory cf2 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false&jms.rmIdFromConnectionId=true");
1:             ActiveMQConnectionFactory cf2 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf1 = getXAConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getXAConnectionFactory(connectURI);
/////////////////////////////////////////////////////////////////////////
1:         connection = ((XAConnectionFactory)cf).createXAConnection();
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
author:gtully
-------------------------------------------------------------------------------
commit:ab1e9c7
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("no tx", XAException.XAER_NOTA, expected.errorCode);
commit:221a751
/////////////////////////////////////////////////////////////////////////
1:     public void testIsSameRMOverride() throws URISyntaxException, JMSException, XAException {
1: 
1:         XAConnection connection1 = null;
1:         XAConnection connection2 = null;
1:         try {
0:             ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false&jms.rmIdFromConnectionId=true");
1:             connection1 = (XAConnection)cf1.createConnection();
1:             XASession session1 = connection1.createXASession();
1:             XAResource resource1 = session1.getXAResource();
1: 
0:             ActiveMQXAConnectionFactory cf2 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:             connection2 = (XAConnection)cf2.createConnection();
1:             XASession session2 = connection2.createXASession();
1:             XAResource resource2 = session2.getXAResource();
1: 
1:             assertFalse(resource1.isSameRM(resource2));
1: 
1:             // ensure identity is preserved
1:             XASession session1a = connection1.createXASession();
1:             assertTrue(resource1.isSameRM(session1a.getXAResource()));
1:             session1.close();
1:             session2.close();
1:         } finally {
1:             if (connection1 != null) {
1:                 try {
1:                     connection1.close();
1:                 } catch (Exception e) {
1:                     // ignore
1:                 }
1:             }
1:             if (connection2 != null) {
1:                 try {
1:                     connection2.close();
1:                 } catch (Exception e) {
1:                     // ignore
1:                 }
1:             }
1:         }
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:f155083
/////////////////////////////////////////////////////////////////////////
1:     public void testRollbackXaErrorCode() throws Exception {
1:         String brokerName = "rollbackErrorCode";
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:         broker.start();
1:         broker.waitUntilStarted();
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:         XAConnection connection = (XAConnection)cf.createConnection();
1:         connection.start();
1:         XASession session = connection.createXASession();
1:         XAResource resource = session.getXAResource();
1: 
1:         Xid tid = createXid();
1:         try {
1:             resource.rollback(tid);
1:             fail("Expected xa exception on no tx");
1:         } catch (XAException expected) {
1:             LOG.info("got expected xa", expected);
0:             assertTrue("not zero", expected.errorCode != XAResource.XA_OK);
1:         }
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:         assertNull("transaction should not exist in the state tracker",
commit:885b8c9
/////////////////////////////////////////////////////////////////////////
1:     public void testExceptionAfterClose() throws Exception {
1: 
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:         connection1.start();
1: 
1:         XASession session = connection1.createXASession();
1:         session.close();
1:         try {
1:             session.commit();
1:             fail("expect exception after close");
1:         } catch (javax.jms.IllegalStateException expected) {}
1: 
1:         try {
1:             session.rollback();
1:             fail("expect exception after close");
1:         } catch (javax.jms.IllegalStateException expected) {}
1: 
1:         try {
1:             session.getTransacted();
1:             fail("expect exception after close");
1:         } catch (javax.jms.IllegalStateException expected) {}
1:     }
1: 
commit:6b44c3c
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
commit:f6970c7
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         URI currentURI = new URI(connector.getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
commit:4eafccc
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.TransactionBroker;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.TransactionInfo;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.management.JMSConnectionStatsImpl;
0: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.failover.FailoverTransport;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testReadonlyNoLeak() throws Exception {
1:         final String brokerName = "readOnlyNoLeak";
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:         broker.setPersistent(false);
1:         broker.start();
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
1:         cf1.setStatsEnabled(true);
1:         ActiveMQXAConnection xaConnection = (ActiveMQXAConnection)cf1.createConnection();
1:         xaConnection.start();
1:         XASession session = xaConnection.createXASession();
1:         XAResource resource = session.getXAResource();        
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         session.close();
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         
1:         assertTransactionGoneFromBroker(tid);
1:         assertTransactionGoneFromConnection(brokerName, xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:         assertSessionGone(xaConnection, session);
1:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1:         
1:         // two phase
1:         session = xaConnection.createXASession();
1:         resource = session.getXAResource();        
1:         tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         session.close();
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         assertEquals(XAResource.XA_RDONLY, resource.prepare(tid));
1:         
1:         // no need for a commit on read only        
1:         assertTransactionGoneFromBroker(tid);
1:         assertTransactionGoneFromConnection(brokerName, xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:         assertSessionGone(xaConnection, session);
1:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1:         
1:         xaConnection.close();
1:         broker.stop();
1:         
1:     }
1: 
1:     private void assertTransactionGoneFromFailoverState(
1:             ActiveMQXAConnection connection1, Xid tid) throws Exception {
1:         
1:         FailoverTransport transport = (FailoverTransport) connection1.getTransport().narrow(FailoverTransport.class);
1:         TransactionInfo info = new TransactionInfo(connection1.getConnectionInfo().getConnectionId(), new XATransactionId(tid), TransactionInfo.COMMIT_ONE_PHASE);
0:         assertNull("transaction shold not exist in the state tracker", 
1:                 transport.getStateTracker().processCommitTransactionOnePhase(info)); 
1:     }
1: 
1:     private void assertSessionGone(ActiveMQXAConnection connection1,
1:             XASession session) {
1:         JMSConnectionStatsImpl stats = (JMSConnectionStatsImpl)connection1.getStats();
1:         // should be no dangling sessions maintained by the transaction
1:         assertEquals("should be no sessions", 0, stats.getSessions().length);
1:     }
1: 
1:     private void assertTransactionGoneFromConnection(String brokerName, String clientId, ConnectionId connectionId, Xid tid) throws Exception {
1:         BrokerService broker = BrokerRegistry.getInstance().lookup(brokerName);
1:         CopyOnWriteArrayList<TransportConnection> connections = broker.getTransportConnectors().get(0).getConnections();
1:         for (TransportConnection connection: connections) {
1:             if (connection.getConnectionId().equals(clientId)) {
1:                 try {
1:                     connection.processPrepareTransaction(new TransactionInfo(connectionId, new XATransactionId(tid), TransactionInfo.PREPARE));
1:                     fail("did not get expected excepton on missing transaction, it must be still there in error!");
1:                 } catch (IllegalStateException expectedOnNoTransaction) {
1:                 }   
1:             }
1:         }
1:     }
1: 
1:     private void assertTransactionGoneFromBroker(Xid tid) throws Exception {
1:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
1:         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:         try {
1:             transactionBroker.getTransaction(null, new XATransactionId(tid), false);
0:             fail("expecte ex on tx not found");
1:         } catch (XAException expectedOnNotFound) {
1:         }
1:     }
1: 
commit:50a98e3
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import javax.jms.Destination;
0: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: import javax.transaction.xa.Xid;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1:     long txGenerator = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:     public void testVanilaTransactionalProduceReceive() throws Exception {
1:         
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:         connection1.start();
1:         XASession session = connection1.createXASession();
1:         XAResource resource = session.getXAResource();
1:         Destination dest = new ActiveMQQueue(getName());
1:         
1:         // publish a message
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         MessageProducer producer = session.createProducer(dest);
1:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:         message.setText(getName());
1:         producer.send(message);
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         session.close();
1:         
1:         session = connection1.createXASession();
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:         assertNotNull(receivedMessage);
1:         assertEquals(getName(), receivedMessage.getText());
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:     }
1:     
1:     public void testConsumerCloseTransactionalSendReceive() throws Exception {
1:         
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:         connection1.start();
1:         XASession session = connection1.createXASession();
1:         XAResource resource = session.getXAResource();
1:         Destination dest = new ActiveMQQueue(getName());
1:         
1:         // publish a message
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         MessageProducer producer = session.createProducer(dest);
1:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:         message.setText(getName());
1:         producer.send(message);
1:         producer.close();
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         session.close();
1:         
1:         session = connection1.createXASession();
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:         consumer.close();
1:         assertNotNull(receivedMessage);
1:         assertEquals(getName(), receivedMessage.getText());
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         
1:         session = connection1.createXASession();
1:         consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         assertNull(consumer.receive(1000));
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         
1:     }
1: 
1:     public void testSessionCloseTransactionalSendReceive() throws Exception {
1:         
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:         XAConnection connection1 = (XAConnection)cf1.createConnection();
1:         connection1.start();
1:         XASession session = connection1.createXASession();
1:         XAResource resource = session.getXAResource();
1:         Destination dest = new ActiveMQQueue(getName());
1:         
1:         // publish a message
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         MessageProducer producer = session.createProducer(dest);
1:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:         message.setText(getName());
1:         producer.send(message);
1:         session.close();
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         
1:         
1:         session = connection1.createXASession();
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:         session.close();
1:         assertNotNull(receivedMessage);
1:         assertEquals(getName(), receivedMessage.getText());
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         
1:         session = connection1.createXASession();
1:         consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         assertNull(consumer.receive(1000));
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);        
1:     }
1: 
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Xid createXid() throws IOException {
1:         
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1: 
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:99f0445
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         cf = new ActiveMQXAConnectionFactory(
1:                 "vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=10&" +
1:                                "jms.redeliveryPolicy.initialRedeliveryDelay=10000&" +
1:                                "jms.redeliveryPolicy.redeliveryDelay=10000&" +
1:                                "jms.redeliveryPolicy.useExponentialBackOff=true&" +
1:                                "jms.redeliveryPolicy.backOffMultiplier=2");
1:         assertEquals(10, cf.getRedeliveryPolicy().getMaximumRedeliveries());
1:         assertEquals(10000, cf.getRedeliveryPolicy().getInitialRedeliveryDelay());
1:         assertEquals(10000, cf.getRedeliveryPolicy().getRedeliveryDelay());
1:         assertEquals(true, cf.getRedeliveryPolicy().isUseExponentialBackOff());
1:         assertEquals(2.0, cf.getRedeliveryPolicy().getBackOffMultiplier(), 0.1);
1: 
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         resource.commit(tid, true);
/////////////////////////////////////////////////////////////////////////
1:         XAResource resource = session.getXAResource();
1: 
1: 
0:         resource = session.getXAResource();
1: 
0:         // no need for a commit on read only
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         assertNull("transaction shold not exist in the state tracker",
0:                 transport.getStateTracker().processCommitTransactionOnePhase(info));
/////////////////////////////////////////////////////////////////////////
1:                 }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:f830d96
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1: 
0:     protected void tearDown() throws Exception {
1:         // Try our best to close any previously opend connection.
1:         try {
1:             connection.close();
1:         } catch (Throwable ignore) {
1:         }
1:         // Try our best to stop any previously started broker.
1:         try {
1:             broker.stop();
1:         } catch (Throwable ignore) {
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://myBroker?broker.persistent=false");
1:         assertNull(BrokerRegistry.getInstance().lookup("myBroker"));
1:         connection = (ActiveMQConnection) cf.createConnection();
1:         assertNotNull(BrokerRegistry.getInstance().lookup("myBroker"));
1:         assertNull(BrokerRegistry.getInstance().lookup("myBroker"));
1: 
1:         connection.close();
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = (ActiveMQConnection)cf.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         XAConnection connection1 = null;
1:         XAConnection connection2 = null;
1:         try {
0:             ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:             connection1 = (XAConnection)cf1.createConnection();
1:             XASession session1 = connection1.createXASession();
1:             XAResource resource1 = session1.getXAResource();
0:             ActiveMQXAConnectionFactory cf2 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:             connection2 = (XAConnection)cf2.createConnection();
1:             XASession session2 = connection2.createXASession();
1:             XAResource resource2 = session2.getXAResource();
1:             assertTrue(resource1.isSameRM(resource2));
1:             session1.close();
1:             session2.close();
1:         } finally {
1:             if (connection1 != null) {
1:                 try {
1:                     connection1.close();
1:                 } catch (Exception e) {
1:                     // ignore
1:                 }
1:             }
1:             if (connection2 != null) {
1:                 try {
1:                     connection2.close();
1:                 } catch (Exception e) {
1:                     // ignore
1:                 }
1:             }
1:         }
1:         XAConnection connection1 = null;
1:         try {
0:             ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
1:             connection1 = (XAConnection)cf1.createConnection();
0:             connection1.start();
0:             XASession session = connection1.createXASession();
0:             XAResource resource = session.getXAResource();
1:             Destination dest = new ActiveMQQueue(getName());
1:             // publish a message
1:             Xid tid = createXid();
1:             resource.start(tid, XAResource.TMNOFLAGS);
1:             MessageProducer producer = session.createProducer(dest);
1:             ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:             message.setText(getName());
1:             producer.send(message);
0:             resource.end(tid, XAResource.TMSUCCESS);
0:             resource.commit(tid, true);
1:             session.close();
0:             session = connection1.createXASession();
0:             MessageConsumer consumer = session.createConsumer(dest);
0:             tid = createXid();
0:             resource = session.getXAResource();
1:             resource.start(tid, XAResource.TMNOFLAGS);
0:             TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
0:             assertNotNull(receivedMessage);
0:             assertEquals(getName(), receivedMessage.getText());
0:             resource.end(tid, XAResource.TMSUCCESS);
0:             resource.commit(tid, true);
1:             session.close();
1: 
1:         } finally {
1:             if (connection1 != null) {
1:                 try {
1:                     connection1.close();
1:                 } catch (Exception e) {
1:                     // ignore
1:                 }
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:         broker = new BrokerService();
commit:8a0dd39
/////////////////////////////////////////////////////////////////////////
1: 
1:         broker.stop();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionFactoryTest.class);
commit:c0daffa
/////////////////////////////////////////////////////////////////////////
1:     public void testCloseSendConnection() throws Exception {
1:         String brokerName = "closeSend";
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/" + brokerName));
1:         broker.start();
1:         broker.waitUntilStarted();
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:         XAConnection connection = (XAConnection)cf.createConnection();
1:         connection.start();
1:         XASession session = connection.createXASession();
0:         XAResource resource = session.getXAResource();
0:         Destination dest = new ActiveMQQueue(getName());
1: 
0:         // publish a message
0:         Xid tid = createXid();
0:         resource.start(tid, XAResource.TMNOFLAGS);
0:         MessageProducer producer = session.createProducer(dest);
0:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
0:         message.setText(getName());
0:         producer.send(message);
1: 
1:         connection.close();
1: 
1:         assertTransactionGoneFromBroker(tid);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             fail("expected exception on tx not found");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:08393aa
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testIsSameRM() throws URISyntaxException, JMSException, XAException {
1:         
0:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
0:         XAConnection connection1 = (XAConnection)cf1.createConnection();
0:         XASession session1 = connection1.createXASession();
0:         XAResource resource1 = session1.getXAResource();
1:         
0:         ActiveMQXAConnectionFactory cf2 = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
0:         XAConnection connection2 = (XAConnection)cf2.createConnection();
0:         XASession session2 = connection2.createXASession();
0:         XAResource resource2 = session2.getXAResource();
1: 
0:         assertTrue(resource1.isSameRM(resource2));
1:         
0:         connection1.close();
0:         connection2.close();
1:     }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp.StompTransportFilter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ActiveMQXAConnectionFactoryTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Got broker name: " + brokerName);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("connection URI is: " + connectURI);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.XAConnection;
1: import javax.jms.XAQueueConnection;
1: import javax.jms.XATopicConnection;
0: 
0: 
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(
0:                                                                          "vm://localhost?jms.useAsyncSend=true");
0: 
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(
0:                                                                          "vm://localhost?broker.persistent=false");
1:         // Make sure the broker is not created until the connection is
1:         // instantiated.
0:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));
0:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));
0:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));
0: 
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(
0:                                                                          "vm://localhost?broker.persistent=false");
0:         ActiveMQConnection connection = (ActiveMQConnection)cf.createConnection();
0: 
0: 
0: 
0: 
0: 
0: 
1:         // URI connectURI = connector.getServer().getConnectURI();
1:         // e.g. on OS X so lets use the original details but just use the actual
1:         // port
1:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(),
1:                                  temp.getPath(), temp.getQuery(), temp.getFragment());
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Got broker name: " + brokerName);
/////////////////////////////////////////////////////////////////////////
0:         log.info("connection URI is: " + connectURI);
author:James Strachan
-------------------------------------------------------------------------------
commit:346cdc5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testCopy() throws URISyntaxException, JMSException {
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://localhost?");
1:         ActiveMQConnectionFactory copy = cf.copy();
0:         assertTrue("Should be an ActiveMQXAConnectionFactory", copy instanceof ActiveMQXAConnectionFactory);
1:     }
0:     
0:         
commit:cedc2fb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
0: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
0: 
0: import javax.jms.*;
0: import javax.jms.JMSException;
0: 
0: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: 
1: public class ActiveMQXAConnectionFactoryTest extends CombinationTestSupport {
0:     
1:     public void testUseURIToSetOptionsOnConnectionFactory() throws URISyntaxException, JMSException {
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://localhost?jms.useAsyncSend=true");
1:         assertTrue(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
0:         
0:         cf = new ActiveMQXAConnectionFactory("vm://localhost?jms.useAsyncSend=false");
1:         assertFalse(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
0: 
0:         cf = new ActiveMQXAConnectionFactory("vm:(broker:()/localhost)?jms.useAsyncSend=true");
1:         assertTrue(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm:(broker:()/localhost)", cf.getBrokerURL());
1:     }
0: 
1:     public void testCreateVMConnectionWithEmbdeddBroker() throws URISyntaxException, JMSException {
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
0:         // Make sure the broker is not created until the connection is instantiated.
0:         assertNull( BrokerRegistry.getInstance().lookup("localhost") );        
1:         Connection connection = cf.createConnection();
1:         // This should create the connection.
1:         assertNotNull(connection);
1:         // Verify the broker was created.
0:         assertNotNull( BrokerRegistry.getInstance().lookup("localhost") );
1:         connection.close();
1:         // Verify the broker was destroyed.
0:         assertNull( BrokerRegistry.getInstance().lookup("localhost") );
1:     }
0:     
1:     public void testGetBrokerName() throws URISyntaxException, JMSException {
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("vm://localhost?broker.persistent=false");
0:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
0:         
1:         String brokerName = connection.getBrokerName();
0:         System.out.println("Got broker name: " + brokerName);
0:         
1:         assertNotNull("No broker name available!", brokerName);
1:         connection.close();
1:     }
0:     
1:     public void testCreateTcpConnectionUsingAllocatedPort() throws Exception {
1:         assertCreateConnection("tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true");
1:     }
1:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:         assertCreateConnection("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:     }
0:     
1:     protected void assertCreateConnection(String uri) throws Exception {
1:         // Start up a broker with a tcp connector.
0:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         TransportConnector connector = broker.addConnector(uri);
1:         broker.start();
0:         
1:         URI temp = new URI(uri);
0:         //URI connectURI = connector.getServer().getConnectURI();
1:         // TODO this sometimes fails when using the actual local host name
0:         URI currentURI = connector.getServer().getConnectURI();
0: 
1:         // sometimes the actual host name doesn't work in this test case
0:         // e.g. on OS X so lets use the original details but just use the actual port
0:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(), temp.getPath(), temp.getQuery(), temp.getFragment());
0:         
0:         
0:         System.out.println("connection URI is: " + connectURI);
0:         
1:         // This should create the connection.
0:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(connectURI);
1:         Connection connection = cf.createConnection();
0:         
1:         assertXAConnection(connection);
0:         
1:         assertNotNull(connection);
1:         connection.close();
0:         
0:         connection = cf.createXAConnection();
0:         
1:         assertXAConnection(connection);
0:         
1:         assertNotNull(connection);
1:         connection.close();
0:         
0:         broker.stop();
1:     }
0: 
1:     private void assertXAConnection(Connection connection) {
1:         assertTrue("Should be an XAConnection", connection instanceof XAConnection);
1:         assertTrue("Should be an XATopicConnection", connection instanceof XATopicConnection);
1:         assertTrue("Should be an XAQueueConnection", connection instanceof XAQueueConnection);
1:     }
0:     
1: }
============================================================================