1:118c806: /**
1:118c806:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:118c806:  * contributor license agreements.  See the NOTICE file distributed with
1:118c806:  * this work for additional information regarding copyright ownership.
1:118c806:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:118c806:  * (the "License"); you may not use this file except in compliance with
1:118c806:  * the License.  You may obtain a copy of the License at
3:118c806:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:118c806:  *
1:118c806:  * Unless required by applicable law or agreed to in writing, software
1:118c806:  * distributed under the License is distributed on an "AS IS" BASIS,
1:118c806:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:118c806:  * See the License for the specific language governing permissions and
1:118c806:  * limitations under the License.
1:118c806:  */
1:118c806: package org.apache.activemq.util;
24:118c806: 
1:118c806: import junit.framework.TestCase;
1:118c806: 
1:118c806: /**
1:118c806:  * @author chirino
1:118c806:  */
1:118c806: public class LinkedNodeTest extends TestCase {
1:118c806: 
1:230a86c:     static class IntLinkedNode extends LinkedNode {
1:230a86c:         public final int v;
1:118c806: 
1:230a86c:         public IntLinkedNode(int v) {
1:230a86c:             this.v = v;
1:230a86c:         };
1:118c806: 
1:230a86c:         @Override
1:230a86c:         public String toString() {
1:230a86c:             return "" + v;
1:230a86c:         }
1:230a86c:     }
1:118c806: 
1:230a86c:     IntLinkedNode i1 = new IntLinkedNode(1);
1:230a86c:     IntLinkedNode i2 = new IntLinkedNode(2);
1:230a86c:     IntLinkedNode i3 = new IntLinkedNode(3);
1:230a86c:     IntLinkedNode i4 = new IntLinkedNode(4);
1:230a86c:     IntLinkedNode i5 = new IntLinkedNode(5);
1:230a86c:     IntLinkedNode i6 = new IntLinkedNode(6);
1:118c806: 
1:230a86c:     public void testLinkAfter() {
1:118c806: 
1:230a86c:         i1.linkAfter(i2.linkAfter(i3));
1:230a86c:         // Order should be 1,2,3
1:118c806: 
1:230a86c:         assertTrue(i1.getNext() == i2);
1:230a86c:         assertTrue(i1.getNext().getNext() == i3);
1:230a86c:         assertNull(i1.getNext().getNext().getNext());
1:118c806: 
1:230a86c:         assertTrue(i3.getPrevious() == i2);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:230a86c:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1:118c806: 
1:230a86c:         assertTrue(i1.isHeadNode());
1:230a86c:         assertFalse(i1.isTailNode());
1:230a86c:         assertFalse(i2.isHeadNode());
1:230a86c:         assertFalse(i2.isTailNode());
1:230a86c:         assertTrue(i3.isTailNode());
1:230a86c:         assertFalse(i3.isHeadNode());
1:118c806: 
1:230a86c:         i1.linkAfter(i4.linkAfter(i5));
1:118c806: 
1:230a86c:         // Order should be 1,4,5,2,3
1:118c806: 
1:230a86c:         assertTrue(i1.getNext() == i4);
1:230a86c:         assertTrue(i1.getNext().getNext() == i5);
1:230a86c:         assertTrue(i1.getNext().getNext().getNext() == i2);
1:230a86c:         assertTrue(i1.getNext().getNext().getNext().getNext() == i3);
1:230a86c:         assertNull(i1.getNext().getNext().getNext().getNext().getNext());
1:230a86c: 
1:230a86c:         assertTrue(i3.getPrevious() == i2);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious() == i5);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious().getPrevious() == i4);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1);
1:230a86c:         assertNull(i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious());
1:230a86c: 
1:230a86c:         assertTrue(i1.isHeadNode());
1:230a86c:         assertFalse(i1.isTailNode());
1:230a86c:         assertFalse(i4.isHeadNode());
1:230a86c:         assertFalse(i4.isTailNode());
1:230a86c:         assertFalse(i5.isHeadNode());
1:230a86c:         assertFalse(i5.isTailNode());
1:230a86c:         assertFalse(i2.isHeadNode());
1:230a86c:         assertFalse(i2.isTailNode());
1:230a86c:         assertTrue(i3.isTailNode());
1:230a86c:         assertFalse(i3.isHeadNode());
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void testLinkBefore() {
1:230a86c: 
1:230a86c:         i3.linkBefore(i2.linkBefore(i1));
1:230a86c: 
1:230a86c:         assertTrue(i1.getNext() == i2);
1:230a86c:         assertTrue(i1.getNext().getNext() == i3);
1:230a86c:         assertNull(i1.getNext().getNext().getNext());
1:230a86c: 
1:230a86c:         assertTrue(i3.getPrevious() == i2);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:230a86c:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1:230a86c: 
1:230a86c:         assertTrue(i1.isHeadNode());
1:230a86c:         assertFalse(i1.isTailNode());
1:230a86c:         assertFalse(i2.isHeadNode());
1:230a86c:         assertFalse(i2.isTailNode());
1:230a86c:         assertTrue(i3.isTailNode());
1:230a86c:         assertFalse(i3.isHeadNode());
1:230a86c: 
1:230a86c:         i2.linkBefore(i5.linkBefore(i4));
1:230a86c: 
1:230a86c:         // Order should be 1,4,5,2,3
1:230a86c: 
1:230a86c:         assertTrue(i1.getNext() == i4);
1:230a86c:         assertTrue(i1.getNext().getNext() == i5);
1:230a86c:         assertTrue(i1.getNext().getNext().getNext() == i2);
1:230a86c:         assertTrue(i1.getNext().getNext().getNext().getNext() == i3);
1:230a86c:         assertNull(i1.getNext().getNext().getNext().getNext().getNext());
1:230a86c: 
1:230a86c:         assertTrue(i3.getPrevious() == i2);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious() == i5);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious().getPrevious() == i4);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1);
1:230a86c:         assertNull(i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious());
1:230a86c: 
1:230a86c:         assertTrue(i1.isHeadNode());
1:230a86c:         assertFalse(i1.isTailNode());
1:230a86c:         assertFalse(i4.isHeadNode());
1:230a86c:         assertFalse(i4.isTailNode());
1:230a86c:         assertFalse(i5.isHeadNode());
1:230a86c:         assertFalse(i5.isTailNode());
1:230a86c:         assertFalse(i2.isHeadNode());
1:230a86c:         assertFalse(i2.isTailNode());
1:230a86c:         assertTrue(i3.isTailNode());
1:230a86c:         assertFalse(i3.isHeadNode());
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void testUnlink() {
1:230a86c: 
1:230a86c:         i1.linkAfter(i2.linkAfter(i3));
1:230a86c:         i3.linkAfter(i4);
1:230a86c:         i1.linkBefore(i5);
1:230a86c:         i1.linkAfter(i6);
1:230a86c: 
1:230a86c:         // Order should be 5,1,6,2,3,4
1:230a86c:         i4.unlink();
1:230a86c:         i5.unlink();
1:230a86c:         i6.unlink();
1:230a86c: 
1:230a86c:         // Order should be 1,2,3
1:230a86c: 
1:230a86c:         assertTrue(i1.getNext() == i2);
1:230a86c:         assertTrue(i1.getNext().getNext() == i3);
1:230a86c:         assertNull(i1.getNext().getNext().getNext());
1:230a86c: 
1:230a86c:         assertTrue(i3.getPrevious() == i2);
1:230a86c:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:230a86c:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1:230a86c: 
1:230a86c:         assertTrue(i1.isHeadNode());
1:230a86c:         assertFalse(i1.isTailNode());
1:230a86c:         assertFalse(i2.isHeadNode());
1:230a86c:         assertFalse(i2.isTailNode());
1:230a86c:         assertTrue(i3.isTailNode());
1:230a86c:         assertFalse(i3.isHeadNode());
1:230a86c:     }
1:230a86c: 
6:118c806: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     static class IntLinkedNode extends LinkedNode {
1:         public final int v;
1:         public IntLinkedNode(int v) {
1:             this.v = v;
1:         };
1:         @Override
1:         public String toString() {
1:             return "" + v;
1:         }
1:     }
1:     IntLinkedNode i1 = new IntLinkedNode(1);
1:     IntLinkedNode i2 = new IntLinkedNode(2);
1:     IntLinkedNode i3 = new IntLinkedNode(3);
1:     IntLinkedNode i4 = new IntLinkedNode(4);
1:     IntLinkedNode i5 = new IntLinkedNode(5);
1:     IntLinkedNode i6 = new IntLinkedNode(6);
1:     public void testLinkAfter() {
1:         i1.linkAfter(i2.linkAfter(i3));
1:         // Order should be 1,2,3
1:         assertTrue(i1.getNext() == i2);
1:         assertTrue(i1.getNext().getNext() == i3);
1:         assertNull(i1.getNext().getNext().getNext());
1:         assertTrue(i3.getPrevious() == i2);
1:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1:         assertTrue(i1.isHeadNode());
1:         assertFalse(i1.isTailNode());
1:         assertFalse(i2.isHeadNode());
1:         assertFalse(i2.isTailNode());
1:         assertTrue(i3.isTailNode());
1:         assertFalse(i3.isHeadNode());
1:         i1.linkAfter(i4.linkAfter(i5));
1:         // Order should be 1,4,5,2,3
1:         assertTrue(i1.getNext() == i4);
1:         assertTrue(i1.getNext().getNext() == i5);
1:         assertTrue(i1.getNext().getNext().getNext() == i2);
1:         assertTrue(i1.getNext().getNext().getNext().getNext() == i3);
1:         assertNull(i1.getNext().getNext().getNext().getNext().getNext());
1: 
1:         assertTrue(i3.getPrevious() == i2);
1:         assertTrue(i3.getPrevious().getPrevious() == i5);
1:         assertTrue(i3.getPrevious().getPrevious().getPrevious() == i4);
1:         assertTrue(i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1);
1:         assertNull(i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious());
1: 
1:         assertTrue(i1.isHeadNode());
1:         assertFalse(i1.isTailNode());
1:         assertFalse(i4.isHeadNode());
1:         assertFalse(i4.isTailNode());
1:         assertFalse(i5.isHeadNode());
1:         assertFalse(i5.isTailNode());
1:         assertFalse(i2.isHeadNode());
1:         assertFalse(i2.isTailNode());
1:         assertTrue(i3.isTailNode());
1:         assertFalse(i3.isHeadNode());
1: 
1:     }
1: 
1:     public void testLinkBefore() {
1: 
1:         i3.linkBefore(i2.linkBefore(i1));
1: 
1:         assertTrue(i1.getNext() == i2);
1:         assertTrue(i1.getNext().getNext() == i3);
1:         assertNull(i1.getNext().getNext().getNext());
1: 
1:         assertTrue(i3.getPrevious() == i2);
1:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1: 
1:         assertTrue(i1.isHeadNode());
1:         assertFalse(i1.isTailNode());
1:         assertFalse(i2.isHeadNode());
1:         assertFalse(i2.isTailNode());
1:         assertTrue(i3.isTailNode());
1:         assertFalse(i3.isHeadNode());
1: 
1:         i2.linkBefore(i5.linkBefore(i4));
1: 
1:         // Order should be 1,4,5,2,3
1: 
1:         assertTrue(i1.getNext() == i4);
1:         assertTrue(i1.getNext().getNext() == i5);
1:         assertTrue(i1.getNext().getNext().getNext() == i2);
1:         assertTrue(i1.getNext().getNext().getNext().getNext() == i3);
1:         assertNull(i1.getNext().getNext().getNext().getNext().getNext());
1: 
1:         assertTrue(i3.getPrevious() == i2);
1:         assertTrue(i3.getPrevious().getPrevious() == i5);
1:         assertTrue(i3.getPrevious().getPrevious().getPrevious() == i4);
1:         assertTrue(i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1);
1:         assertNull(i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious());
1: 
1:         assertTrue(i1.isHeadNode());
1:         assertFalse(i1.isTailNode());
1:         assertFalse(i4.isHeadNode());
1:         assertFalse(i4.isTailNode());
1:         assertFalse(i5.isHeadNode());
1:         assertFalse(i5.isTailNode());
1:         assertFalse(i2.isHeadNode());
1:         assertFalse(i2.isTailNode());
1:         assertTrue(i3.isTailNode());
1:         assertFalse(i3.isHeadNode());
1: 
1:     }
1: 
1:     public void testUnlink() {
1: 
1:         i1.linkAfter(i2.linkAfter(i3));
1:         i3.linkAfter(i4);
1:         i1.linkBefore(i5);
1:         i1.linkAfter(i6);
1: 
1:         // Order should be 5,1,6,2,3,4
1:         i4.unlink();
1:         i5.unlink();
1:         i6.unlink();
1: 
1:         // Order should be 1,2,3
1: 
1:         assertTrue(i1.getNext() == i2);
1:         assertTrue(i1.getNext().getNext() == i3);
1:         assertNull(i1.getNext().getNext().getNext());
1: 
1:         assertTrue(i3.getPrevious() == i2);
1:         assertTrue(i3.getPrevious().getPrevious() == i1);
1:         assertNull(i3.getPrevious().getPrevious().getPrevious());
1: 
1:         assertTrue(i1.isHeadNode());
1:         assertFalse(i1.isTailNode());
1:         assertFalse(i2.isHeadNode());
1:         assertFalse(i2.isTailNode());
1:         assertTrue(i3.isTailNode());
1:         assertFalse(i3.isHeadNode());
1:     }
1: 
commit:118c806
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * 
1:  * @author chirino
1:  */
1: public class LinkedNodeTest extends TestCase {
1: 	
1: 	
0: 	static class IntLinkedNode extends LinkedNode {
0: 		public final int v;
1: 
0: 		public IntLinkedNode(int v){
0: 			this.v = v;
0: 		};
1: 		
0: 		@Override
0: 		public String toString() {
0: 			return ""+v;
1: 		}
1: 	}
1: 
0: 	IntLinkedNode i1 = new IntLinkedNode(1);
0: 	IntLinkedNode i2 = new IntLinkedNode(2);
0: 	IntLinkedNode i3 = new IntLinkedNode(3);
0: 	IntLinkedNode i4 = new IntLinkedNode(4);
0: 	IntLinkedNode i5 = new IntLinkedNode(5);
0: 	IntLinkedNode i6 = new IntLinkedNode(6);
1: 
0: 	public void testLinkAfter() {
1: 		
0: 		i1.linkAfter(i2.linkAfter(i3));
0: 		// Order should be 1,2,3
1: 		
0: 		assertTrue( i1.getNext() == i2 );
0: 		assertTrue( i1.getNext().getNext() == i3 );		
0: 		assertNull( i1.getNext().getNext().getNext() );
1: 
0: 		assertTrue( i3.getPrevious() == i2 );
0: 		assertTrue( i3.getPrevious().getPrevious() == i1 );		
0: 		assertNull( i3.getPrevious().getPrevious().getPrevious() );
1: 
0: 		assertTrue( i1.isHeadNode() );
0: 		assertFalse(i1.isTailNode() );
0: 		assertFalse(i2.isHeadNode() );
0: 		assertFalse(i2.isTailNode() );
0: 		assertTrue( i3.isTailNode() );
0: 		assertFalse(i3.isHeadNode() );
1: 		
0: 		i1.linkAfter(i4.linkAfter(i5));
1: 		
0: 		// Order should be 1,4,5,2,3
1: 		
0: 		assertTrue( i1.getNext() == i4 );
0: 		assertTrue( i1.getNext().getNext() == i5 );
0: 		assertTrue( i1.getNext().getNext().getNext() == i2 );
0: 		assertTrue( i1.getNext().getNext().getNext().getNext() == i3 );
0: 		assertNull( i1.getNext().getNext().getNext().getNext().getNext() );
1: 
0: 		assertTrue( i3.getPrevious() == i2 );
0: 		assertTrue( i3.getPrevious().getPrevious() == i5 );		
0: 		assertTrue( i3.getPrevious().getPrevious().getPrevious() == i4 );		
0: 		assertTrue( i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1 );		
0: 		assertNull( i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious() );
1: 		
0: 		assertTrue( i1.isHeadNode() );
0: 		assertFalse(i1.isTailNode() );
0: 		assertFalse(i4.isHeadNode() );
0: 		assertFalse(i4.isTailNode() );
0: 		assertFalse(i5.isHeadNode() );
0: 		assertFalse(i5.isTailNode() );
0: 		assertFalse(i2.isHeadNode() );
0: 		assertFalse(i2.isTailNode() );
0: 		assertTrue( i3.isTailNode() );
0: 		assertFalse(i3.isHeadNode() );
1: 				
1: 	}
1: 	
0: 	public void testLinkBefore() {
1: 		
0: 		i3.linkBefore(i2.linkBefore(i1));
1: 		
0: 		assertTrue( i1.getNext() == i2 );
0: 		assertTrue( i1.getNext().getNext() == i3 );		
0: 		assertNull( i1.getNext().getNext().getNext() );
1: 
0: 		assertTrue( i3.getPrevious() == i2 );
0: 		assertTrue( i3.getPrevious().getPrevious() == i1 );		
0: 		assertNull( i3.getPrevious().getPrevious().getPrevious() );
1: 
0: 		assertTrue( i1.isHeadNode() );
0: 		assertFalse(i1.isTailNode() );
0: 		assertFalse(i2.isHeadNode() );
0: 		assertFalse(i2.isTailNode() );
0: 		assertTrue( i3.isTailNode() );
0: 		assertFalse(i3.isHeadNode() );
1: 		
0: 		i2.linkBefore(i5.linkBefore(i4));
1: 		
0: 		// Order should be 1,4,5,2,3
1: 		
0: 		assertTrue( i1.getNext() == i4 );
0: 		assertTrue( i1.getNext().getNext() == i5 );
0: 		assertTrue( i1.getNext().getNext().getNext() == i2 );
0: 		assertTrue( i1.getNext().getNext().getNext().getNext() == i3 );
0: 		assertNull( i1.getNext().getNext().getNext().getNext().getNext() );
1: 
0: 		assertTrue( i3.getPrevious() == i2 );
0: 		assertTrue( i3.getPrevious().getPrevious() == i5 );		
0: 		assertTrue( i3.getPrevious().getPrevious().getPrevious() == i4 );		
0: 		assertTrue( i3.getPrevious().getPrevious().getPrevious().getPrevious() == i1 );		
0: 		assertNull( i3.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious() );
1: 		
0: 		assertTrue( i1.isHeadNode() );
0: 		assertFalse(i1.isTailNode() );
0: 		assertFalse(i4.isHeadNode() );
0: 		assertFalse(i4.isTailNode() );
0: 		assertFalse(i5.isHeadNode() );
0: 		assertFalse(i5.isTailNode() );
0: 		assertFalse(i2.isHeadNode() );
0: 		assertFalse(i2.isTailNode() );
0: 		assertTrue( i3.isTailNode() );
0: 		assertFalse(i3.isHeadNode() );
1: 				
1: 	}
1: 	
0: 	public void testUnlink() {
1: 		
0: 		i1.linkAfter(i2.linkAfter(i3));
0: 		i3.linkAfter(i4);
0: 		i1.linkBefore(i5);
0: 		i1.linkAfter(i6);
1: 
0: 		// Order should be 5,1,6,2,3,4
0: 		i4.unlink();
0: 		i5.unlink();
0: 		i6.unlink();
1: 		
0: 		// Order should be 1,2,3
1: 		
0: 		assertTrue( i1.getNext() == i2 );
0: 		assertTrue( i1.getNext().getNext() == i3 );		
0: 		assertNull( i1.getNext().getNext().getNext() );
1: 
0: 		assertTrue( i3.getPrevious() == i2 );
0: 		assertTrue( i3.getPrevious().getPrevious() == i1 );		
0: 		assertNull( i3.getPrevious().getPrevious().getPrevious() );
1: 
0: 		assertTrue( i1.isHeadNode() );
0: 		assertFalse(i1.isTailNode() );
0: 		assertFalse(i2.isHeadNode() );
0: 		assertFalse(i2.isTailNode() );
0: 		assertTrue( i3.isTailNode() );
0: 		assertFalse(i3.isHeadNode() );						
1: 	}
1: 	
1: }
============================================================================