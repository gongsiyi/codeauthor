1:9e32de2: /**
1:9e32de2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e32de2:  * contributor license agreements.  See the NOTICE file distributed with
1:9e32de2:  * this work for additional information regarding copyright ownership.
1:9e32de2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e32de2:  * (the "License"); you may not use this file except in compliance with
1:9e32de2:  * the License.  You may obtain a copy of the License at
1:9e32de2:  *
1:9e32de2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e32de2:  *
1:9e32de2:  * Unless required by applicable law or agreed to in writing, software
1:9e32de2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e32de2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e32de2:  * See the License for the specific language governing permissions and
1:9e32de2:  * limitations under the License.
1:9e32de2:  */
1:72015ca: package org.apache.bugs;
11:72015ca: 
1:72015ca: import java.util.concurrent.Callable;
1:72015ca: import java.util.concurrent.CountDownLatch;
1:72015ca: import java.util.concurrent.ExecutorService;
1:72015ca: import java.util.concurrent.Executors;
1:72015ca: import java.util.concurrent.TimeUnit;
1:72015ca: 
1:72015ca: import javax.jms.JMSException;
1:72015ca: import javax.jms.Message;
1:72015ca: import javax.jms.MessageListener;
1:72015ca: import javax.jms.Session;
1:72015ca: import javax.jms.TextMessage;
1:72015ca: 
1:72015ca: import junit.framework.TestCase;
1:72015ca: 
1:72015ca: import org.apache.activemq.ActiveMQConnectionFactory;
1:72015ca: import org.apache.activemq.broker.BrokerService;
1:72015ca: import org.apache.activemq.command.ActiveMQQueue;
1:72015ca: import org.apache.activemq.network.NetworkConnector;
1:72015ca: import org.apache.activemq.pool.PooledConnectionFactory;
1:72015ca: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:72015ca: import org.springframework.jms.core.JmsTemplate;
1:72015ca: import org.springframework.jms.core.MessageCreator;
1:72015ca: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1:72015ca: 
1:72015ca: public class AMQ2754Test extends TestCase {
1:72015ca: 
1:72015ca:     public void testNetworkOfBrokers() throws Exception {
1:72015ca:         BrokerService brokerService1 = null;
1:72015ca:         BrokerService brokerService2 = null;
1:72015ca: 
1:600f209:         String broker1Uri;
1:600f209:         String broker2Uri;
1:600f209: 
1:72015ca:         final int total = 100;
1:72015ca:         final CountDownLatch latch = new CountDownLatch(total);
1:72015ca:         final boolean conduitSubscriptions = true;
2:72015ca:         try {
1:72015ca: 
1:600f209:             {
1:600f209:                 brokerService1 = new BrokerService();
1:600f209:                 brokerService1.setBrokerName("consumer");
1:600f209:                 brokerService1.setUseJmx(false);
1:600f209:                 brokerService1.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:600f209:                 broker1Uri = brokerService1.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
1:600f209:                 brokerService1.start();
9:72015ca:             }
1:72015ca: 
1:600f209:             {
1:600f209:                 brokerService2 = new BrokerService();
1:600f209:                 brokerService2.setBrokerName("producer");
1:600f209:                 brokerService2.setUseJmx(false);
1:600f209:                 brokerService2.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:600f209:                 broker2Uri = brokerService2.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
1:600f209:                 NetworkConnector network2 = brokerService2.addNetworkConnector("static:("+broker1Uri+")");
1:600f209:                 network2.setName("network1");
1:600f209:                 network2.setDynamicOnly(true);
1:600f209:                 network2.setConduitSubscriptions(conduitSubscriptions);
1:600f209:                 network2.setNetworkTTL(3);
1:600f209:                 network2.setPrefetchSize(1);
1:600f209:                 brokerService2.start();
1:600f209:             }
1:600f209: 
1:600f209:             ExecutorService pool = Executors.newSingleThreadExecutor();
1:600f209: 
1:600f209:             ActiveMQConnectionFactory connectionFactory1 =
1:600f209:                 new ActiveMQConnectionFactory("failover:("+broker1Uri+")");
1:600f209: 
1:600f209:             connectionFactory1.setWatchTopicAdvisories(false);
1:600f209:             final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
1:600f209:             container.setConnectionFactory(connectionFactory1);
1:600f209:             container.setMaxConcurrentConsumers(10);
1:600f209:             container.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
1:600f209:             container.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);
1:600f209:             container.setDestination(new ActiveMQQueue("testingqueue"));
1:600f209:             container.setMessageListener(new MessageListener() {
1:600f209:                 @Override
1:600f209:                 public void onMessage(Message message) {
1:600f209:                     latch.countDown();
1:72015ca:                 }
1:600f209:             });
1:600f209:             container.setMaxMessagesPerTask(1);
1:600f209:             container.afterPropertiesSet();
1:600f209:             container.start();
1:600f209: 
1:600f209:             final String finalBroker2Uri = broker2Uri;
1:600f209: 
1:600f209:             pool.submit(new Callable<Object>() {
1:600f209:                 @Override
1:600f209:                 public Object call() throws Exception {
1:600f209:                     try {
1:600f209:                         final int batch = 10;
1:600f209:                         ActiveMQConnectionFactory connectionFactory2 =
1:600f209:                             new ActiveMQConnectionFactory("failover:("+finalBroker2Uri+")");
1:600f209:                         PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(connectionFactory2);
1:600f209:                         connectionFactory2.setWatchTopicAdvisories(false);
1:600f209:                         JmsTemplate template = new JmsTemplate(pooledConnectionFactory);
1:600f209:                         ActiveMQQueue queue = new ActiveMQQueue("testingqueue");
1:600f209:                         for(int b = 0; b < batch; b++) {
1:600f209:                             for(int i = 0; i < (total / batch); i++) {
1:600f209:                                 final String id = ":batch=" + b + "i=" + i;
1:600f209:                                 template.send(queue, new MessageCreator() {
1:600f209:                                     @Override
1:600f209:                                     public Message createMessage(Session session) throws JMSException {
1:600f209:                                         TextMessage message = session.createTextMessage();
1:600f209:                                         message.setText("Hello World!" + id);
1:600f209:                                         return message;
1:600f209:                                     }
1:600f209:                                 });
1:600f209:                             }
1:600f209:                             // give spring time to scale back again
1:600f209:                             while(container.getActiveConsumerCount() > 1) {
1:600f209:                                 System.out.println("active consumer count:" + container.getActiveConsumerCount());
1:600f209:                                 System.out.println("concurrent consumer count: " + container.getConcurrentConsumers());
1:600f209:                                 Thread.sleep(1000);
1:600f209:                             }
1:600f209:                         }
1:600f209:                         //pooledConnectionFactory.stop();
1:600f209:                     } catch(Throwable t) {
1:600f209:                         t.printStackTrace();
1:600f209:                     }
1:600f209:                     return null;
1:600f209:                 }
1:600f209:             });
1:600f209: 
1:600f209:             pool.shutdown();
1:600f209:             pool.awaitTermination(10, TimeUnit.SECONDS);
1:600f209: 
1:600f209:             int count = 0;
1:600f209: 
1:600f209:             // give it 20 seconds
1:600f209:             while(!latch.await(1, TimeUnit.SECONDS) && count++ < 20) {
1:600f209:                 System.out.println("count " + latch.getCount());
1:72015ca:             }
1:72015ca: 
1:600f209:             container.destroy();
1:72015ca: 
1:72015ca:         } finally {
1:600f209:             try { if(brokerService1 != null) {
1:72015ca:                 brokerService1.stop();
1:72015ca:             }} catch(Throwable t) { t.printStackTrace(); }
1:600f209:             try { if(brokerService2 != null) {
1:72015ca:                 brokerService2.stop();
1:72015ca:             }} catch(Throwable t) { t.printStackTrace(); }
1:72015ca:         }
1:72015ca: 
1:72015ca:         if(latch.getCount() > 0) {
1:72015ca:             fail("latch should have gone down to 0 but was " + latch.getCount());
1:600f209:         }
1:72015ca:     }
1:72015ca: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:600f209
/////////////////////////////////////////////////////////////////////////
0: //import org.apache.activemq.pool.PooledConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         String broker1Uri;
1:         String broker2Uri;
1: 
1:             {
1:                 brokerService1 = new BrokerService();
1:                 brokerService1.setBrokerName("consumer");
1:                 brokerService1.setUseJmx(false);
1:                 brokerService1.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:                 broker1Uri = brokerService1.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
1:                 brokerService1.start();
1:             {
1:                 brokerService2 = new BrokerService();
1:                 brokerService2.setBrokerName("producer");
1:                 brokerService2.setUseJmx(false);
1:                 brokerService2.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:                 broker2Uri = brokerService2.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
1:                 NetworkConnector network2 = brokerService2.addNetworkConnector("static:("+broker1Uri+")");
1:                 network2.setName("network1");
1:                 network2.setDynamicOnly(true);
1:                 network2.setConduitSubscriptions(conduitSubscriptions);
1:                 network2.setNetworkTTL(3);
1:                 network2.setPrefetchSize(1);
1:                 brokerService2.start();
1:             }
1: 
1:             ExecutorService pool = Executors.newSingleThreadExecutor();
1: 
1:             ActiveMQConnectionFactory connectionFactory1 =
1:                 new ActiveMQConnectionFactory("failover:("+broker1Uri+")");
1: 
1:             connectionFactory1.setWatchTopicAdvisories(false);
1:             final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
1:             container.setConnectionFactory(connectionFactory1);
1:             container.setMaxConcurrentConsumers(10);
1:             container.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
1:             container.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);
1:             container.setDestination(new ActiveMQQueue("testingqueue"));
1:             container.setMessageListener(new MessageListener() {
1:                 @Override
1:                 public void onMessage(Message message) {
1:                     latch.countDown();
1:             });
1:             container.setMaxMessagesPerTask(1);
1:             container.afterPropertiesSet();
1:             container.start();
1: 
1:             final String finalBroker2Uri = broker2Uri;
1: 
1:             pool.submit(new Callable<Object>() {
1:                 @Override
1:                 public Object call() throws Exception {
1:                     try {
1:                         final int batch = 10;
1:                         ActiveMQConnectionFactory connectionFactory2 =
1:                             new ActiveMQConnectionFactory("failover:("+finalBroker2Uri+")");
1:                         PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(connectionFactory2);
1:                         connectionFactory2.setWatchTopicAdvisories(false);
1:                         JmsTemplate template = new JmsTemplate(pooledConnectionFactory);
1:                         ActiveMQQueue queue = new ActiveMQQueue("testingqueue");
1:                         for(int b = 0; b < batch; b++) {
1:                             for(int i = 0; i < (total / batch); i++) {
1:                                 final String id = ":batch=" + b + "i=" + i;
1:                                 template.send(queue, new MessageCreator() {
1:                                     @Override
1:                                     public Message createMessage(Session session) throws JMSException {
1:                                         TextMessage message = session.createTextMessage();
1:                                         message.setText("Hello World!" + id);
1:                                         return message;
1:                                     }
1:                                 });
1:                             }
1:                             // give spring time to scale back again
1:                             while(container.getActiveConsumerCount() > 1) {
1:                                 System.out.println("active consumer count:" + container.getActiveConsumerCount());
1:                                 System.out.println("concurrent consumer count: " + container.getConcurrentConsumers());
1:                                 Thread.sleep(1000);
1:                             }
1:                         }
1:                         //pooledConnectionFactory.stop();
1:                     } catch(Throwable t) {
1:                         t.printStackTrace();
1:                     }
1:                     return null;
1:                 }
1:             });
1: 
1:             pool.shutdown();
1:             pool.awaitTermination(10, TimeUnit.SECONDS);
1: 
1:             int count = 0;
1: 
1:             // give it 20 seconds
1:             while(!latch.await(1, TimeUnit.SECONDS) && count++ < 20) {
1:                 System.out.println("count " + latch.getCount());
1:             container.destroy();
1:             try { if(brokerService1 != null) {
1:             try { if(brokerService2 != null) {
/////////////////////////////////////////////////////////////////////////
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9e32de2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Gary Tully
-------------------------------------------------------------------------------
commit:72015ca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.bugs;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.pool.PooledConnectionFactory;
0: //import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.core.MessageCreator;
1: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1: 
1: public class AMQ2754Test extends TestCase {
1: 
1:     public void testNetworkOfBrokers() throws Exception {
1:         BrokerService brokerService1 = null;
1:         BrokerService brokerService2 = null;
1: 
1:         final int total = 100;
1:         final CountDownLatch latch = new CountDownLatch(total);
1:         final boolean conduitSubscriptions = true;
1:         try {
1: 
0:         {
0:             brokerService1 = new BrokerService();
0:             brokerService1.setBrokerName("consumer");
0:             brokerService1.setUseJmx(false);
0:             brokerService1.setPersistenceAdapter(new MemoryPersistenceAdapter());
0:             brokerService1.addConnector("tcp://0.0.0.0:61616");
0:             brokerService1.start();
1:         }
1: 
0:         {
0:             brokerService2 = new BrokerService();
0:             brokerService2.setBrokerName("producer");
0:             brokerService2.setUseJmx(false);
0:             brokerService2.setPersistenceAdapter(new MemoryPersistenceAdapter());
0:             brokerService2.addConnector("tcp://0.0.0.0:51515");
0:             NetworkConnector network2 = brokerService2.addNetworkConnector("static:(tcp://localhost:61616)");
0:             network2.setName("network1");
0:             network2.setDynamicOnly(true);
0:             network2.setConduitSubscriptions(conduitSubscriptions);
0:             network2.setNetworkTTL(3);
0:             network2.setPrefetchSize(1);
0:             brokerService2.start();
1:         }
1: 
0:         ExecutorService pool = Executors.newSingleThreadExecutor();
1: 
0:         ActiveMQConnectionFactory connectionFactory1 = 
0:             new ActiveMQConnectionFactory("failover:(tcp://localhost:61616)");
1: 
0:         connectionFactory1.setWatchTopicAdvisories(false);
0:         final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
0:         container.setConnectionFactory(connectionFactory1);
0:         container.setMaxConcurrentConsumers(10);
0:         container.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
0:         container.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);
0:         container.setDestination(new ActiveMQQueue("testingqueue"));
0:         container.setMessageListener(new MessageListener() {
0:             public void onMessage(Message message) {
0:                 latch.countDown();
1:             }
0:         });
0:         container.setMaxMessagesPerTask(1);
0:         container.afterPropertiesSet();
0:         container.start();
1: 
0:         pool.submit(new Callable<Object>() {
0:             public Object call() throws Exception {
1:                 try {
0:                     final int batch = 10;
0:                     ActiveMQConnectionFactory connectionFactory2 = 
0:                         new ActiveMQConnectionFactory("failover:(tcp://localhost:51515)");
0:                     PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(connectionFactory2);
0:                     connectionFactory2.setWatchTopicAdvisories(false);
0:                     JmsTemplate template = new JmsTemplate(pooledConnectionFactory);
0:                     ActiveMQQueue queue = new ActiveMQQueue("testingqueue");
0:                     for(int b = 0; b < batch; b++) {
0:                         for(int i = 0; i < (total / batch); i++) {
0:                             final String id = ":batch=" + b + "i=" + i;
0:                             template.send(queue, new MessageCreator() {
0:                                 public Message createMessage(Session session) throws JMSException {
0:                                     TextMessage message = session.createTextMessage();
0:                                     message.setText("Hello World!" + id);
0:                                     return message;
1:                                 }
0:                             });
1:                         }
0:                         // give spring time to scale back again
0:                         while(container.getActiveConsumerCount() > 1) {
0:                             System.out.println("active consumer count:" + container.getActiveConsumerCount());
0:                             System.out.println("concurrent consumer count: " + container.getConcurrentConsumers());
0:                             Thread.sleep(1000);
1:                         }
1:                     }
0:                     //pooledConnectionFactory.stop();
0:                 } catch(Throwable t) {
0:                     t.printStackTrace();
1:                 }
0:                 return null;
1:             }
0:         });
1: 
0:         pool.shutdown();
0:         pool.awaitTermination(10, TimeUnit.SECONDS);
1: 
0:         int count = 0;
1: 
0:         // give it 20 seconds
0:         while(!latch.await(1, TimeUnit.SECONDS) && count++ < 20) {
0:             System.out.println("count " + latch.getCount());
1:         }
1: 
1: 
0:         container.destroy();
1: 
1:         } finally {
0:             try { if(brokerService1 != null) { 
1:                 brokerService1.stop();
1:             }} catch(Throwable t) { t.printStackTrace(); }
0:             try { if(brokerService2 != null) { 
1:                 brokerService2.stop();
1:             }} catch(Throwable t) { t.printStackTrace(); }
1:         }
1: 
1:         if(latch.getCount() > 0) {
1:             fail("latch should have gone down to 0 but was " + latch.getCount());
1:         }
1: 
1:     }
1: 
1: } 
============================================================================