1:5c6b8ba: /**
1:5c6b8ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5c6b8ba:  * contributor license agreements.  See the NOTICE file distributed with
1:5c6b8ba:  * this work for additional information regarding copyright ownership.
1:5c6b8ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5c6b8ba:  * (the "License"); you may not use this file except in compliance with
1:5c6b8ba:  * the License.  You may obtain a copy of the License at
1:5c6b8ba:  *
1:5c6b8ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5c6b8ba:  *
1:5c6b8ba:  * Unless required by applicable law or agreed to in writing, software
1:5c6b8ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5c6b8ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c6b8ba:  * See the License for the specific language governing permissions and
1:5c6b8ba:  * limitations under the License.
1:5c6b8ba:  */
1:5c6b8ba: package org.apache.activemq.leveldb.test;
12:5c6b8ba: 
1:b980677: import org.apache.activemq.Service;
1:5c6b8ba: import org.apache.activemq.command.ActiveMQQueue;
1:ca81480: import org.apache.activemq.leveldb.CountDownFuture;
1:ca81480: import org.apache.activemq.leveldb.LevelDBStore;
1:9752e1d: import org.apache.activemq.leveldb.replicated.ElectingLevelDBStore;
1:5c6b8ba: import org.apache.activemq.leveldb.replicated.MasterLevelDBStore;
1:5c6b8ba: import org.apache.activemq.leveldb.replicated.SlaveLevelDBStore;
1:5c6b8ba: import org.apache.activemq.leveldb.util.FileSupport;
1:5c6b8ba: import org.apache.activemq.store.MessageStore;
1:9752e1d: import org.apache.commons.io.FileUtils;
1:4367ec1: import org.fusesource.hawtdispatch.transport.TcpTransport;
1:9752e1d: import org.junit.After;
1:49a2d96: import org.junit.Test;
1:5c6b8ba: import org.slf4j.Logger;
1:5c6b8ba: import org.slf4j.LoggerFactory;
1:5c6b8ba: 
1:5c6b8ba: import java.io.File;
1:5c6b8ba: import java.util.ArrayList;
1:5c6b8ba: import java.util.LinkedList;
1:ca81480: import java.util.concurrent.TimeUnit;
1:49a2d96: 
1:49a2d96: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.addMessage;
1:4367ec1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.createPlayload;
1:49a2d96: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.getMessages;
1:49a2d96: import static org.junit.Assert.*;
1:5c6b8ba: 
1:5c6b8ba: /**
1:5c6b8ba:  */
1:49a2d96: public class ReplicatedLevelDBStoreTest {
1:5c6b8ba:     protected static final Logger LOG = LoggerFactory.getLogger(ReplicatedLevelDBStoreTest.class);
1:ca81480: 
1:9752e1d:     ArrayList<LevelDBStore> stores = new ArrayList<LevelDBStore>();
1:9752e1d: 
1:4ca5519:     @Test(timeout = 1000*60*10)
1:ca81480:     public void testMinReplicaEnforced() throws Exception {
1:ca81480: 
1:ca81480:         File masterDir = new File("target/activemq-data/leveldb-node1");
1:ca81480:         File slaveDir = new File("target/activemq-data/leveldb-node2");
1:ca81480:         FileSupport.toRichFile(masterDir).recursiveDelete();
1:ca81480:         FileSupport.toRichFile(slaveDir).recursiveDelete();
1:ca81480: 
1:b980677:         final MasterLevelDBStore master = createMaster(masterDir);
1:e507461:         master.setReplicas(2);
1:b980677:         CountDownFuture masterStartLatch = asyncStart(master);
1:9752e1d:         stores.add(master);
1:ca81480: 
1:b980677:         // Start the store should not complete since we don't have enough
1:ca81480:         // replicas.
1:b980677:         assertFalse(masterStartLatch.await(2, TimeUnit.SECONDS));
1:ca81480: 
1:b980677:         // Adding a slave should allow the master startup to complete.
1:ca81480:         SlaveLevelDBStore slave = createSlave(master, slaveDir);
1:ca81480:         slave.start();
1:9752e1d:         stores.add(slave);
1:ca81480: 
1:b980677:         assertTrue(masterStartLatch.await(2, TimeUnit.SECONDS));
1:ca81480: 
1:ca81480:         // New updates should complete quickly now..
1:b980677:         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:b980677:         CountDownFuture f = asyncAddMessage(ms, "m1");
1:1eeae77:         assertTrue(f.await(1, TimeUnit.SECONDS));
1:ca81480: 
1:ca81480:         // If the slave goes offline, then updates should once again
1:ca81480:         // not complete.
1:ca81480:         slave.stop();
1:ca81480: 
1:b980677:         f = asyncAddMessage(ms, "m2");
2:1eeae77:         assertFalse(f.await(2, TimeUnit.SECONDS));
1:ca81480: 
1:ca81480:         // Restart and the op should complete.
1:ca81480:         slave = createSlave(master, slaveDir);
1:ca81480:         slave.start();
2:1eeae77:         assertTrue(f.await(2, TimeUnit.SECONDS));
1:ca81480: 
1:ca81480:         master.stop();
1:ca81480:         slave.stop();
1:ca81480: 
1:ca81480:     }
1:4367ec1: 
1:ca81480:     private CountDownFuture asyncAddMessage(final MessageStore ms, final String body) {
1:1eeae77:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:ca81480:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:ca81480:             public void run() {
1:ca81480:                 try {
1:ca81480:                     addMessage(ms, body);
1:1eeae77:                     f.set(null);
1:1eeae77:                 } catch (Throwable e) {
1:1eeae77:                     f.set(e);
1:ca81480:                 }
1:ca81480:             }
1:ca81480:         });
1:ca81480:         return f;
1:b980677:     }
1:4367ec1: 
1:b980677:     private CountDownFuture asyncStart(final Service service) {
1:b980677:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:b980677:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:b980677:             public void run() {
1:b980677:                 try {
1:b980677:                     service.start();
1:b980677:                     f.set(null);
1:b980677:                 } catch (Throwable e) {
1:b980677:                     f.set(e);
1:b980677:                 }
1:b980677:             }
1:b980677:         });
1:b980677:         return f;
1:ca81480:     }
1:4367ec1: 
1:4ca5519:     @Test(timeout = 1000*60*10)
1:5c6b8ba:     public void testReplication() throws Exception {
1:ca81480: 
1:5c6b8ba:         LinkedList<File> directories = new LinkedList<File>();
1:5c6b8ba:         directories.add(new File("target/activemq-data/leveldb-node1"));
1:5c6b8ba:         directories.add(new File("target/activemq-data/leveldb-node2"));
1:5c6b8ba:         directories.add(new File("target/activemq-data/leveldb-node3"));
1:42e1c46:         resetDirectories(directories);
1:ca81480: 
1:42e1c46:         // For some reason this had to be 64k to trigger a bug where
1:42e1c46:         // slave index snapshots were being done incorrectly.
1:42e1c46:         String playload = createPlayload(64*1024);
1:ca81480: 
1:5c6b8ba:         ArrayList<String> expected_list = new ArrayList<String>();
1:5c6b8ba:         // We will rotate between 3 nodes the task of being the master.
1:42e1c46:         for (int j = 0; j < 5; j++) {
1:ca81480: 
1:ca81480:             MasterLevelDBStore master = createMaster(directories.get(0));
1:b980677:             CountDownFuture masterStart = asyncStart(master);
1:ca81480:             SlaveLevelDBStore slave1 = createSlave(master, directories.get(1));
1:ca81480:             SlaveLevelDBStore slave2 = createSlave(master, directories.get(2));
1:b980677:             asyncStart(slave2);
1:b980677:             masterStart.await();
1:42e1c46: 
1:9752e1d:             if (j == 0) {
1:9752e1d:                 stores.add(master);
1:9752e1d:                 stores.add(slave1);
1:9752e1d:                 stores.add(slave2);
1:9752e1d:             }
1:9752e1d: 
1:ca81480:             MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:5c6b8ba: 
1:42e1c46:             LOG.info("Checking: "+master.getDirectory());
1:42e1c46:             assertEquals(expected_list, getMessages(ms));
1:42e1c46: 
1:42e1c46:             LOG.info("Adding messages...");
1:5c6b8ba:             final int TOTAL = 500;
1:5c6b8ba:             for (int i = 0; i < TOTAL; i++) {
1:1eeae77:                 if (i % ((int) (TOTAL * 0.10)) == 0) {
1:1eeae77:                     LOG.info("" + (100 * i / TOTAL) + "% done");
11:5c6b8ba:                 }
1:5c6b8ba: 
1:1eeae77:                 if (i == 250) {
1:ca81480:                     slave1.start();
1:5c6b8ba:                     slave2.stop();
1:42e1c46:                     LOG.info("Checking: "+master.getDirectory());
1:42e1c46:                     assertEquals(expected_list, getMessages(ms));
1:5c6b8ba:                 }
1:5c6b8ba: 
1:5c6b8ba:                 String msgid = "m:" + j + ":" + i;
1:42e1c46:                 addMessage(ms, msgid, playload);
1:5c6b8ba:                 expected_list.add(msgid);
1:5c6b8ba:             }
1:5c6b8ba: 
1:42e1c46:             LOG.info("Checking: "+master.getDirectory());
1:5c6b8ba:             assertEquals(expected_list, getMessages(ms));
1:5c6b8ba: 
1:42e1c46:             LOG.info("Stopping master: " + master.getDirectory());
1:5c6b8ba:             master.stop();
1:42e1c46: 
1:42e1c46:             Thread.sleep(3*1000);
1:42e1c46:             LOG.info("Stopping slave: " + slave1.getDirectory());
1:5c6b8ba:             slave1.stop();
1:5c6b8ba: 
1:5c6b8ba:             // Rotate the dir order so that slave1 becomes the master next.
1:5c6b8ba:             directories.addLast(directories.removeFirst());
1:5c6b8ba:         }
1:5c6b8ba:     }
1:5c6b8ba: 
1:42e1c46:     void resetDirectories(LinkedList<File> directories) {
1:42e1c46:         for (File directory : directories) {
1:42e1c46:             FileSupport.toRichFile(directory).recursiveDelete();
1:42e1c46:             directory.mkdirs();
1:42e1c46:             FileSupport.toRichFile(new File(directory, "nodeid.txt")).writeText(directory.getName(), "UTF-8");
1:42e1c46:         }
1:42e1c46:     }
1:42e1c46: 
1:4ca5519:     @Test(timeout = 1000*60*10)
1:4367ec1:     public void testSlowSlave() throws Exception {
1:4367ec1: 
1:42e1c46:         LinkedList<File> directories = new LinkedList<File>();
1:42e1c46:         directories.add(new File("target/activemq-data/leveldb-node1"));
1:42e1c46:         directories.add(new File("target/activemq-data/leveldb-node2"));
1:42e1c46:         directories.add(new File("target/activemq-data/leveldb-node3"));
1:42e1c46:         resetDirectories(directories);
1:4367ec1: 
1:42e1c46:         File node1Dir = directories.get(0);
1:42e1c46:         File node2Dir = directories.get(1);
1:42e1c46:         File node3Dir = directories.get(2);
1:4367ec1: 
1:4367ec1:         ArrayList<String> expected_list = new ArrayList<String>();
1:5c6b8ba: 
1:4367ec1:         MasterLevelDBStore node1 = createMaster(node1Dir);
1:9752e1d:         stores.add(node1);
1:4367ec1:         CountDownFuture masterStart = asyncStart(node1);
1:4367ec1: 
1:4367ec1:         // Lets create a 1 slow slave...
1:4367ec1:         SlaveLevelDBStore node2 = new SlaveLevelDBStore() {
1:4367ec1:             boolean hitOnce = false;
1:4367ec1:             @Override
1:4367ec1:             public TcpTransport create_transport() {
1:4367ec1:                 if( hitOnce ) {
1:4367ec1:                     return super.create_transport();
1:4367ec1:                 }
1:4367ec1:                 hitOnce = true;
1:4367ec1:                 TcpTransport transport = super.create_transport();
1:4367ec1:                 transport.setMaxReadRate(64*1024);
1:4367ec1:                 return transport;
1:4367ec1:             }
1:4367ec1:         };
1:9752e1d:         stores.add(node2);
1:4367ec1:         configureSlave(node2, node1, node2Dir);
1:4367ec1:         SlaveLevelDBStore node3 = createSlave(node1, node3Dir);
1:9752e1d:         stores.add(node3);
1:4367ec1: 
1:4367ec1:         asyncStart(node2);
1:4367ec1:         asyncStart(node3);
1:4367ec1:         masterStart.await();
1:4367ec1: 
1:4367ec1:         LOG.info("Adding messages...");
1:4367ec1:         String playload = createPlayload(64 * 1024);
1:4367ec1:         MessageStore ms = node1.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:4367ec1:         final int TOTAL = 10;
1:4367ec1:         for (int i = 0; i < TOTAL; i++) {
1:4367ec1:             if (i == 8) {
1:4367ec1:                 // Stop the fast slave so that we wait for the slow slave to
1:4367ec1:                 // catch up..
1:4367ec1:                 node3.stop();
1:4367ec1:             }
1:4367ec1: 
1:4367ec1:             String msgid = "m:" + ":" + i;
1:4367ec1:             addMessage(ms, msgid, playload);
1:4367ec1:             expected_list.add(msgid);
1:4367ec1:         }
1:4367ec1: 
1:4367ec1:         LOG.info("Checking node1 state");
1:4367ec1:         assertEquals(expected_list, getMessages(ms));
1:4367ec1: 
1:4367ec1:         LOG.info("Stopping node1: " + node1.node_id());
1:4367ec1:         node1.stop();
1:4367ec1:         LOG.info("Stopping slave: " + node2.node_id());
1:4367ec1:         node2.stop();
1:4367ec1:     }
1:4367ec1: 
1:9752e1d:     @After
1:9752e1d:     public void stop() throws Exception {
1:9752e1d:         for(LevelDBStore store: stores) {
1:9752e1d:             if (store.isStarted()) {
1:9752e1d:                 store.stop();
1:9752e1d:             }
1:9752e1d:             FileUtils.deleteDirectory(store.directory());
1:9752e1d:         }
1:9752e1d:         stores.clear();
1:9752e1d:     }
1:9752e1d: 
1:4367ec1: 
1:ca81480:     private SlaveLevelDBStore createSlave(MasterLevelDBStore master, File directory) {
1:4367ec1:         SlaveLevelDBStore slave = new SlaveLevelDBStore();
1:4367ec1:         configureSlave(slave, master, directory);
1:4367ec1:         return slave;
1:4367ec1:     }
1:4367ec1: 
1:4367ec1:     private SlaveLevelDBStore configureSlave(SlaveLevelDBStore slave, MasterLevelDBStore master, File directory) {
1:4367ec1:         slave.setDirectory(directory);
1:4367ec1:         slave.setConnect("tcp://127.0.0.1:" + master.getPort());
1:4367ec1:         slave.setSecurityToken("foo");
1:4367ec1:         slave.setLogSize(1023 * 200);
1:4367ec1:         return slave;
1:ca81480:     }
1:ca81480: 
1:ca81480:     private MasterLevelDBStore createMaster(File directory) {
1:ca81480:         MasterLevelDBStore master = new MasterLevelDBStore();
1:ca81480:         master.setDirectory(directory);
1:ca81480:         master.setBind("tcp://0.0.0.0:0");
1:ca81480:         master.setSecurityToken("foo");
1:e507461:         master.setReplicas(2);
1:ca81480:         master.setLogSize(1023 * 200);
1:ca81480:         return master;
1:ca81480:     }
1:ca81480: 
1:5c6b8ba: 
1:5c6b8ba: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9752e1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.replicated.ElectingLevelDBStore;
1: import org.apache.commons.io.FileUtils;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     ArrayList<LevelDBStore> stores = new ArrayList<LevelDBStore>();
1: 
/////////////////////////////////////////////////////////////////////////
1:         stores.add(master);
/////////////////////////////////////////////////////////////////////////
1:         stores.add(slave);
/////////////////////////////////////////////////////////////////////////
1:             if (j == 0) {
1:                 stores.add(master);
1:                 stores.add(slave1);
1:                 stores.add(slave2);
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:         stores.add(node1);
/////////////////////////////////////////////////////////////////////////
1:         stores.add(node2);
1:         stores.add(node3);
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void stop() throws Exception {
1:         for(LevelDBStore store: stores) {
1:             if (store.isStarted()) {
1:                 store.stop();
1:             }
1:             FileUtils.deleteDirectory(store.directory());
1:         }
1:         stores.clear();
1:     }
1: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:4ca5519
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*10)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*10)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*10)
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:42e1c46
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 1000*60*20)
1:         resetDirectories(directories);
1:         // For some reason this had to be 64k to trigger a bug where
1:         // slave index snapshots were being done incorrectly.
1:         String playload = createPlayload(64*1024);
1:         for (int j = 0; j < 5; j++) {
/////////////////////////////////////////////////////////////////////////
1: 
1:             LOG.info("Checking: "+master.getDirectory());
1:             assertEquals(expected_list, getMessages(ms));
1: 
1:             LOG.info("Adding messages...");
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Checking: "+master.getDirectory());
1:                     assertEquals(expected_list, getMessages(ms));
1:                 addMessage(ms, msgid, playload);
1:             LOG.info("Checking: "+master.getDirectory());
1:             LOG.info("Stopping master: " + master.getDirectory());
1: 
1:             Thread.sleep(3*1000);
1:             LOG.info("Stopping slave: " + slave1.getDirectory());
/////////////////////////////////////////////////////////////////////////
1:     void resetDirectories(LinkedList<File> directories) {
1:         for (File directory : directories) {
1:             FileSupport.toRichFile(directory).recursiveDelete();
1:             directory.mkdirs();
1:             FileSupport.toRichFile(new File(directory, "nodeid.txt")).writeText(directory.getName(), "UTF-8");
1:         }
1:     }
1: 
1:         LinkedList<File> directories = new LinkedList<File>();
1:         directories.add(new File("target/activemq-data/leveldb-node1"));
1:         directories.add(new File("target/activemq-data/leveldb-node2"));
1:         directories.add(new File("target/activemq-data/leveldb-node3"));
1:         resetDirectories(directories);
1:         File node1Dir = directories.get(0);
1:         File node2Dir = directories.get(1);
1:         File node3Dir = directories.get(2);
commit:4367ec1
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtdispatch.transport.TcpTransport;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.createPlayload;
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 1000*60*60)
1:     public void testSlowSlave() throws Exception {
1: 
0:         File node1Dir = new File("target/activemq-data/leveldb-node1");
0:         File node2Dir = new File("target/activemq-data/leveldb-node2");
0:         File node3Dir = new File("target/activemq-data/leveldb-node3");
1: 
0:         FileSupport.toRichFile(node1Dir).recursiveDelete();
0:         FileSupport.toRichFile(node2Dir).recursiveDelete();
0:         FileSupport.toRichFile(node3Dir).recursiveDelete();
1: 
0:         node2Dir.mkdirs();
0:         node3Dir.mkdirs();
0:         FileSupport.toRichFile(new File(node2Dir, "nodeid.txt")).writeText("node2", "UTF-8");
0:         FileSupport.toRichFile(new File(node3Dir, "nodeid.txt")).writeText("node3", "UTF-8");
1: 
1: 
1:         ArrayList<String> expected_list = new ArrayList<String>();
1: 
1:         MasterLevelDBStore node1 = createMaster(node1Dir);
1:         CountDownFuture masterStart = asyncStart(node1);
1: 
1:         // Lets create a 1 slow slave...
1:         SlaveLevelDBStore node2 = new SlaveLevelDBStore() {
1:             boolean hitOnce = false;
1:             @Override
1:             public TcpTransport create_transport() {
1:                 if( hitOnce ) {
1:                     return super.create_transport();
1:                 }
1:                 hitOnce = true;
1:                 TcpTransport transport = super.create_transport();
1:                 transport.setMaxReadRate(64*1024);
1:                 return transport;
1:             }
1:         };
1:         configureSlave(node2, node1, node2Dir);
1:         SlaveLevelDBStore node3 = createSlave(node1, node3Dir);
1: 
1:         asyncStart(node2);
1:         asyncStart(node3);
1:         masterStart.await();
1: 
1:         LOG.info("Adding messages...");
1:         String playload = createPlayload(64 * 1024);
1:         MessageStore ms = node1.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:         final int TOTAL = 10;
1:         for (int i = 0; i < TOTAL; i++) {
1:             if (i == 8) {
1:                 // Stop the fast slave so that we wait for the slow slave to
1:                 // catch up..
1:                 node3.stop();
1:             }
1: 
1:             String msgid = "m:" + ":" + i;
1:             addMessage(ms, msgid, playload);
1:             expected_list.add(msgid);
1:         }
1: 
1:         LOG.info("Checking node1 state");
1:         assertEquals(expected_list, getMessages(ms));
1: 
1:         LOG.info("Stopping node1: " + node1.node_id());
1:         node1.stop();
1:         LOG.info("Stopping slave: " + node2.node_id());
1:         node2.stop();
1:     }
1: 
1: 
1:         SlaveLevelDBStore slave = new SlaveLevelDBStore();
1:         configureSlave(slave, master, directory);
1:         return slave;
1:     }
1: 
1:     private SlaveLevelDBStore configureSlave(SlaveLevelDBStore slave, MasterLevelDBStore master, File directory) {
1:         slave.setDirectory(directory);
1:         slave.setConnect("tcp://127.0.0.1:" + master.getPort());
1:         slave.setSecurityToken("foo");
1:         slave.setLogSize(1023 * 200);
1:         return slave;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2019a21
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Stopping master: " + master.node_id());
0:             LOG.info("Stopping slave: " + slave1.node_id());
commit:b980677
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1:         final MasterLevelDBStore master = createMaster(masterDir);
1:         CountDownFuture masterStartLatch = asyncStart(master);
1:         // Start the store should not complete since we don't have enough
1:         assertFalse(masterStartLatch.await(2, TimeUnit.SECONDS));
1:         // Adding a slave should allow the master startup to complete.
1:         assertTrue(masterStartLatch.await(2, TimeUnit.SECONDS));
1:         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:         CountDownFuture f = asyncAddMessage(ms, "m1");
1:         f = asyncAddMessage(ms, "m2");
/////////////////////////////////////////////////////////////////////////
1:     private CountDownFuture asyncStart(final Service service) {
1:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     service.start();
1:                     f.set(null);
1:                 } catch (Throwable e) {
1:                     f.set(e);
1:                 }
1:             }
1:         });
1:         return f;
1:     }
/////////////////////////////////////////////////////////////////////////
1:             CountDownFuture masterStart = asyncStart(master);
1:             asyncStart(slave2);
1:             masterStart.await();
commit:49a2d96
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.addMessage;
1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.getMessages;
1: import static org.junit.Assert.*;
1: public class ReplicatedLevelDBStoreTest {
0:     @Test(timeout = 1000*60*60)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 1000*60*60)
commit:e507461
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         master.setReplicas(2);
/////////////////////////////////////////////////////////////////////////
1:         master.setReplicas(2);
commit:1eeae77
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.*;
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(f.await(2, TimeUnit.SECONDS));
1:         assertTrue(f.await(2, TimeUnit.SECONDS));
1:         assertTrue(f.await(1, TimeUnit.SECONDS));
1:         assertFalse(f.await(2, TimeUnit.SECONDS));
1:         assertTrue(f.await(2, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
1:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:                     f.set(null);
1:                 } catch (Throwable e) {
1:                     f.set(e);
/////////////////////////////////////////////////////////////////////////
0:         for (File f : directories) {
0:         for (int j = 0; j < 10; j++) {
/////////////////////////////////////////////////////////////////////////
1:                 if (i % ((int) (TOTAL * 0.10)) == 0) {
1:                     LOG.info("" + (100 * i / TOTAL) + "% done");
1:                 if (i == 250) {
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Stopping master: " + master.replicaId());
0:             LOG.info("Stopping slave: " + slave1.replicaId());
/////////////////////////////////////////////////////////////////////////
0:         slave1.setLogSize(1023 * 200);
/////////////////////////////////////////////////////////////////////////
commit:ca81480
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.CountDownFuture;
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1:     public void testMinReplicaEnforced() throws Exception {
1: 
1:         File masterDir = new File("target/activemq-data/leveldb-node1");
1:         File slaveDir = new File("target/activemq-data/leveldb-node2");
1:         FileSupport.toRichFile(masterDir).recursiveDelete();
1:         FileSupport.toRichFile(slaveDir).recursiveDelete();
1: 
0:         MasterLevelDBStore master = createMaster(masterDir);
0:         master.setMinReplica(1);
0:         master.start();
1: 
1:         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1: 
0:         // Updating the store should not complete since we don't have enough
1:         // replicas.
0:         CountDownFuture f = asyncAddMessage(ms, "m1");
0:         assertFalse(f.completed().await(2, TimeUnit.SECONDS));
1: 
0:         // Adding a slave should allow that update to complete.
1:         SlaveLevelDBStore slave = createSlave(master, slaveDir);
1:         slave.start();
1: 
0:         assertTrue(f.completed().await(2, TimeUnit.SECONDS));
1: 
1:         // New updates should complete quickly now..
0:         f = asyncAddMessage(ms, "m2");
0:         assertTrue(f.completed().await(1, TimeUnit.SECONDS));
1: 
1:         // If the slave goes offline, then updates should once again
1:         // not complete.
1:         slave.stop();
1: 
0:         f = asyncAddMessage(ms, "m3");
0:         assertFalse(f.completed().await(2, TimeUnit.SECONDS));
1: 
1:         // Restart and the op should complete.
1:         slave = createSlave(master, slaveDir);
1:         slave.start();
0:         assertTrue(f.completed().await(2, TimeUnit.SECONDS));
1: 
1:         master.stop();
1:         slave.stop();
1: 
1:     }
1: 
1:     private CountDownFuture asyncAddMessage(final MessageStore ms, final String body) {
0:         final CountDownFuture f = new CountDownFuture(new CountDownLatch(1));
1:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     addMessage(ms, body);
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
0:                 } finally {
0:                     f.countDown();
1:                 }
1:             }
1:         });
1:         return f;
1:     }
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             MasterLevelDBStore master = createMaster(directories.get(0));
1:             SlaveLevelDBStore slave1 = createSlave(master, directories.get(1));
1:             SlaveLevelDBStore slave2 = createSlave(master, directories.get(2));
0:             slave2.start();
/////////////////////////////////////////////////////////////////////////
0:                 if( i == 250 ) {
1:                     slave1.start();
/////////////////////////////////////////////////////////////////////////
1:     private SlaveLevelDBStore createSlave(MasterLevelDBStore master, File directory) {
0:         SlaveLevelDBStore slave1 = new SlaveLevelDBStore();
0:         slave1.setDirectory(directory);
0:         slave1.setConnect("tcp://127.0.0.1:" + master.getPort());
0:         slave1.setSecurityToken("foo");
0:         slave1.setLogSize(1023*200);
0:         return slave1;
1:     }
1: 
1:     private MasterLevelDBStore createMaster(File directory) {
1:         MasterLevelDBStore master = new MasterLevelDBStore();
1:         master.setDirectory(directory);
1:         master.setBind("tcp://0.0.0.0:0");
1:         master.setSecurityToken("foo");
0:         master.setMinReplica(1);
1:         master.setLogSize(1023 * 200);
1:         return master;
1:     }
1: 
commit:5c6b8ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.leveldb.replicated.MasterLevelDBStore;
1: import org.apache.activemq.leveldb.replicated.SlaveLevelDBStore;
1: import org.apache.activemq.leveldb.util.FileSupport;
0: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.MessageStore;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.JMSException;
1: import java.io.File;
0: import java.io.IOException;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.LinkedList;
1: 
1: /**
1:  */
0: public class ReplicatedLevelDBStoreTest extends TestCase {
1:     protected static final Logger LOG = LoggerFactory.getLogger(ReplicatedLevelDBStoreTest.class);
1: 
1:     public void testReplication() throws Exception {
1:         LinkedList<File> directories = new LinkedList<File>();
1:         directories.add(new File("target/activemq-data/leveldb-node1"));
1:         directories.add(new File("target/activemq-data/leveldb-node2"));
1:         directories.add(new File("target/activemq-data/leveldb-node3"));
1: 
0:         for( File f: directories) {
0:             FileSupport.toRichFile(f).recursiveDelete();
1:         }
1: 
1:         ArrayList<String> expected_list = new ArrayList<String>();
0:         final int LOG_SIZE = 1023*200;
1:         // We will rotate between 3 nodes the task of being the master.
0:         for( int j=0; j < 10; j++) {
1: 
0:             MasterLevelDBStore master = new MasterLevelDBStore();
0:             master.setDirectory(directories.get(0));
0:             master.setBind("tcp://0.0.0.0:0");
0:             master.setSecurityToken("foo");
0:             master.setMinReplica(1);
0:             master.setLogSize(LOG_SIZE);
0:             LOG.info("Starting master: "+master.replicaId());
0:             master.start();
1: 
0:             SlaveLevelDBStore slave1 = new SlaveLevelDBStore();
0:             slave1.setDirectory(directories.get(1));
0:             slave1.setConnect("tcp://127.0.0.1:" + master.getPort());
0:             slave1.setSecurityToken("foo");
0:             slave1.setLogSize(LOG_SIZE);
0:             LOG.info("Starting slave: "+slave1.replicaId());
0:             slave1.start();
1: 
0:             SlaveLevelDBStore slave2 = new SlaveLevelDBStore();
0:             slave2.setDirectory(directories.get(2));
0:             slave2.setConnect("tcp://127.0.0.1:" + master.getPort());
0:             slave2.setSecurityToken("foo");
0:             slave2.setLogSize(LOG_SIZE);
1: 
0:             LOG.info("Adding messages...");
0:             MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:             final int TOTAL = 500;
1:             for (int i = 0; i < TOTAL; i++) {
0:                 if (  i % ((int) (TOTAL * 0.10)) == 0) {
0:                     LOG.info("" + (100*i/TOTAL) + "% done");
1:                 }
1: 
0:                 if( i == 100 ) {
0:                     LOG.info("Starting slave: "+slave2.replicaId());
0:                     slave2.start();
1:                 }
1: 
0:                 if( i == 200 ) {
0:                     LOG.info("Stopping slave: "+slave2.replicaId());
1:                     slave2.stop();
1:                 }
1: 
1:                 String msgid = "m:" + j + ":" + i;
0:                 addMessage(ms, msgid);
1:                 expected_list.add(msgid);
1:             }
1: 
0:             LOG.info("Checking master state");
1:             assertEquals(expected_list, getMessages(ms));
1: 
0:             LOG.info("Stopping master: "+master.replicaId());
1:             master.stop();
0:             LOG.info("Stopping slave: "+slave1.replicaId());
1:             slave1.stop();
1: 
1:             // Rotate the dir order so that slave1 becomes the master next.
1:             directories.addLast(directories.removeFirst());
1:         }
1:     }
1: 
0:     long id_counter = 0L;
0:     String payload = "";
0:     {
0:         for (int i = 0; i < 1024; i++) {
0:             payload += "x";
1:         }
1:     }
1: 
0:     public ActiveMQTextMessage addMessage(MessageStore ms, String body) throws JMSException, IOException {
0:         ActiveMQTextMessage message = new ActiveMQTextMessage();
0:         message.setPersistent(true);
0:         message.setResponseRequired(true);
0:         message.setStringProperty("id", body);
0:         message.setText(payload);
0:         id_counter += 1;
0:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:" + id_counter);
0:         messageId.setBrokerSequenceId(id_counter);
0:         message.setMessageId(messageId);
0:         ms.addMessage(new ConnectionContext(), message);
0:         return message;
1:     }
1: 
0:     public ArrayList<String> getMessages(MessageStore ms) throws Exception {
0:         final ArrayList<String> rc = new ArrayList<String>();
0:         ms.recover(new MessageRecoveryListener() {
0:             public boolean recoverMessage(Message message) throws Exception {
0:                 rc.add(((ActiveMQTextMessage) message).getStringProperty("id"));
0:                 return true;
1:             }
1: 
0:             public boolean hasSpace() {
0:                 return true;
1:             }
1: 
0:             public boolean recoverMessageReference(MessageId ref) throws Exception {
0:                 return true;
1:             }
1: 
0:             public boolean isDuplicate(MessageId ref) {
0:                 return false;
1:             }
0:         });
0:         return rc;
1:     }
1: 
1: }
============================================================================