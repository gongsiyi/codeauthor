1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:4f945cf:  *
1:2440474:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:2440474:  * Unless required by applicable law or agreed to in writing, software
1:2440474:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2440474:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2440474:  * See the License for the specific language governing permissions and
1:2440474:  * limitations under the License.
1:4f945cf:  */
1:2440474: package org.apache.activemq.transport.tcp;
1:f812e34: 
1:74a7a8b: import java.io.IOException;
1:98c5866: import java.net.Socket;
1:74a7a8b: import java.net.URI;
1:74a7a8b: import java.net.URISyntaxException;
1:74a7a8b: import java.net.UnknownHostException;
1:74a7a8b: import java.util.HashMap;
1:74a7a8b: import java.util.Map;
1:74a7a8b: 
1:74a7a8b: import javax.net.ServerSocketFactory;
1:74a7a8b: import javax.net.SocketFactory;
1:74a7a8b: import javax.net.ssl.SSLServerSocketFactory;
1:98c5866: import javax.net.ssl.SSLSocket;
1:74a7a8b: import javax.net.ssl.SSLSocketFactory;
1:74a7a8b: 
1:139a220: import org.apache.activemq.broker.SslContext;
1:4f945cf: import org.apache.activemq.transport.Transport;
1:4f945cf: import org.apache.activemq.transport.TransportServer;
1:98c5866: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:4f945cf: import org.apache.activemq.util.IOExceptionSupport;
1:4f945cf: import org.apache.activemq.util.IntrospectionSupport;
1:4f945cf: import org.apache.activemq.util.URISupport;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f812e34: 
2:4f945cf: /**
1:f812e34:  * An implementation of the TcpTransportFactory using SSL. The major
1:f812e34:  * contribution from this class is that it is aware of SslTransportServer and
1:f812e34:  * SslTransport classes. All Transports and TransportServers created from this
1:f812e34:  * factory will have their needClientAuth option set to false.
1:4f945cf:  */
1:7d87837: public class SslTransportFactory extends TcpTransportFactory {
1:d8c0ff1: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SslTransportFactory.class);
1:7d87837: 
1:4f945cf:     /**
1:4f945cf:      * Overriding to use SslTransportServer and allow for proper reflection.
1:4f945cf:      */
1:d8c0ff1:     @Override
1:5d99c99:     public TransportServer doBind(final URI location) throws IOException {
1:c4d8d86:         try {
1:784b93d:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:ecf89a6: 
1:4f945cf:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:f8f24e8:             SslTransportServer server = createSslTransportServer(location, (SSLServerSocketFactory)serverSocketFactory);
1:4f945cf:             server.setWireFormatFactory(createWireFormatFactory(options));
1:4f945cf:             IntrospectionSupport.setProperties(server, options);
1:933eb2f:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:4f945cf:             server.setTransportOption(transportOptions);
1:4f945cf:             server.bind();
1:ecf89a6: 
1:4f945cf:             return server;
1:f812e34:         } catch (URISyntaxException e) {
1:4f945cf:             throw IOExceptionSupport.create(e);
1:c4d8d86:         }
1:139a220:     }
1:139a220: 
1:4f945cf:     /**
1:f8f24e8:      * Allows subclasses of SslTransportFactory to create custom instances of
1:f8f24e8:      * SslTransportServer.
1:4f945cf:      *
1:f8f24e8:      * @param location
1:f8f24e8:      * @param serverSocketFactory
1:d8c0ff1:      * @return a new SslTransportServer initialized from the given location and socket factory.
1:7d87837:      * @throws IOException
1:f8f24e8:      * @throws URISyntaxException
1:4f945cf:      */
1:f8f24e8:     protected SslTransportServer createSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:f8f24e8:         return new SslTransportServer(this, location, serverSocketFactory);
1:139a220:     }
1:7d87837: 
1:4f945cf:     /**
1:12838c2:      * Overriding to allow for proper configuration through reflection but delegate to get common
1:12838c2:      * configuration
1:4f945cf:      */
1:d8c0ff1:     @Override
1:0885c60:     @SuppressWarnings("rawtypes")
1:4f945cf:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:d8c0ff1:         SslTransport sslTransport = transport.narrow(SslTransport.class);
1:4f945cf:         IntrospectionSupport.setProperties(sslTransport, options);
1:7d87837: 
1:12838c2:         return super.compositeConfigure(transport, format, options);
1:139a220:     }
1:f812e34: 
1:4f945cf:     /**
1:4f945cf:      * Overriding to use SslTransports.
1:4f945cf:      */
1:d8c0ff1:     @Override
1:f812e34:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:4f945cf:         URI localLocation = null;
1:4f945cf:         String path = location.getPath();
1:4f945cf:         // see if the path is a local URI location
1:4f945cf:         if (path != null && path.length() > 0) {
1:4f945cf:             int localPortIndex = path.indexOf(':');
1:139a220:             try {
1:74a7a8b:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:4f945cf:                 String localString = location.getScheme() + ":/" + path;
1:4f945cf:                 localLocation = new URI(localString);
1:f812e34:             } catch (Exception e) {
1:fc00993:                 LOG.warn("path isn't a valid local location for SslTransport to use", e);
11:4f945cf:             }
1:4f945cf:         }
1:4f945cf:         SocketFactory socketFactory = createSocketFactory();
1:4f945cf:         return new SslTransport(wf, (SSLSocketFactory)socketFactory, location, localLocation, false);
1:4f945cf:     }
1:7d87837: 
1:4f945cf:     /**
1:f812e34:      * Creates a new SSL ServerSocketFactory. The given factory will use
1:f812e34:      * user-provided key and trust managers (if the user provided them).
1:4f945cf:      *
1:4f945cf:      * @return Newly created (Ssl)ServerSocketFactory.
1:7d87837:      * @throws IOException
1:4f945cf:      */
1:d8c0ff1:     @Override
1:7d87837:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1:7d87837:         if( SslContext.getCurrentSslContext()!=null ) {
1:7d87837:             SslContext ctx = SslContext.getCurrentSslContext();
1:7d87837:             try {
1:7d87837:                 return ctx.getSSLContext().getServerSocketFactory();
1:7d87837:             } catch (Exception e) {
1:7d87837:                 throw IOExceptionSupport.create(e);
1:7d87837:             }
1:fc00993:         } else {
1:7d87837:             return SSLServerSocketFactory.getDefault();
1:fc00993:         }
1:4f945cf:     }
1:7d87837: 
1:7d87837:     /**
1:f812e34:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:f812e34:      * key and trust managers (if the user provided them).
1:7d87837:      *
1:4f945cf:      * @return Newly created (Ssl)SocketFactory.
1:f8f24e8:      * @throws IOException
1:7d87837:      */
1:d8c0ff1:     @Override
1:7d87837:     protected SocketFactory createSocketFactory() throws IOException {
1:7d87837:         if( SslContext.getCurrentSslContext()!=null ) {
1:7d87837:             SslContext ctx = SslContext.getCurrentSslContext();
1:7d87837:             try {
1:7d87837:                 return ctx.getSSLContext().getSocketFactory();
1:7d87837:             } catch (Exception e) {
1:7d87837:                 throw IOExceptionSupport.create(e);
1:7d87837:             }
1:fc00993:         } else {
1:7d87837:             return SSLSocketFactory.getDefault();
1:7d87837:         }
1:fc00993:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public SslTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer)
1:98c5866:             throws IOException {
1:98c5866: 
1:98c5866:         return new SslTransport(wireFormat, (SSLSocket)socket, initBuffer);
1:98c5866:     }
1:4f945cf: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLSocket;
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public SslTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer)
1:             throws IOException {
1: 
1:         return new SslTransport(wireFormat, (SSLSocket)socket, initBuffer);
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d8c0ff1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * @return a new SslTransportServer initialized from the given location and socket factory.
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         SslTransport sslTransport = transport.narrow(SslTransport.class);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:7d87837
/////////////////////////////////////////////////////////////////////////
0: import java.security.NoSuchProviderException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportFactory;
/////////////////////////////////////////////////////////////////////////
1: public class SslTransportFactory extends TcpTransportFactory {
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @throws IOException 
1:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1:         if( SslContext.getCurrentSslContext()!=null ) {
1:             SslContext ctx = SslContext.getCurrentSslContext();
1:             try {
1:                 return ctx.getSSLContext().getServerSocketFactory();
1:             } catch (Exception e) {
1:                 throw IOExceptionSupport.create(e);
1:             }
1:             return SSLServerSocketFactory.getDefault();
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException 
1:     protected SocketFactory createSocketFactory() throws IOException {
1:         
1:         if( SslContext.getCurrentSslContext()!=null ) {
1:             SslContext ctx = SslContext.getCurrentSslContext();
1:             try {
1:                 return ctx.getSSLContext().getSocketFactory();
1:             } catch (Exception e) {
1:                 throw IOExceptionSupport.create(e);
1:             }
1:             return SSLSocketFactory.getDefault();
1:         
1:     }
1: 
1:     /**
1:      * 
0:      * @param km
0:      * @param tm
0:      * @param object
0:      * @deprecated "Do not use anymore... using static initializers like this method only allows the JVM to use 1 SSL configuration per broker."
1:      */
0:     public void setKeyAndTrustManagers(KeyManager[] km, TrustManager[] tm, SecureRandom random) {
0:         SslContext ctx = new SslContext(km, tm, random);
0:         SslContext.setCurrentSslContext(ctx);
commit:139a220
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
0: public class SslTransportFactory extends TcpTransportFactory implements BrokerServiceAware {
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void setBrokerService(BrokerService brokerService) {
0:         SslContext c = brokerService.getSslContext();
0:         if( sslContext == null && c!=null ) {            
1:             try {
0:                 setKeyAndTrustManagers(c.getKeyManagersAsArray(), c.getTrustManagersAsArray(), c.getSecureRandom());
0:             } catch (KeyManagementException e) {
0:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(final URI location) throws IOException {
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com (logging improvement modifications)
0:  * @version $Revision$
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport,
0:                         sslTransport.getLogWriterName(), sslTransport.isDynamicManagement(), sslTransport.isStartLogging(), sslTransport.getJmxPort());
0:             } catch (Throwable e) {
0:                 LOG.error("Could not create TransportLogger object for: " + sslTransport.getLogWriterName() + ", reason: " + e, e);
1:             }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
1:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
/////////////////////////////////////////////////////////////////////////
0:         Map<String, Object> socketOptions = IntrospectionSupport.extractProperties(options, "socket.");
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     // The context used to creat ssl sockets.
0:     private SSLContext sslContext;
1: 
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SslTransportFactory.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("path isn't a valid local location for SslTransport to use", e);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
0: import java.security.KeyManagementException;
0: import java.security.NoSuchAlgorithmException;
0: import java.security.SecureRandom;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
0: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLServerSocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
0: import javax.net.ssl.TrustManager;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * An implementation of the TcpTransportFactory using SSL. The major
1:  * contribution from this class is that it is aware of SslTransportServer and
1:  * SslTransport classes. All Transports and TransportServers created from this
1:  * factory will have their needClientAuth option set to false.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:             SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
0: 
1:         } catch (URISyntaxException e) {
0: 
0: 
0:         SslTransport sslTransport = (SslTransport)transport.narrow(SslTransport.class);
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:      * Creates a new SSL ServerSocketFactory. The given factory will use
1:      * user-provided key and trust managers (if the user provided them).
0:         } else
1:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:      * key and trust managers (if the user provided them).
0:         if (sslContext == null) {
0:         } else
commit:4f945cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.transport.InactivityMonitor;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportLogger;
1: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.WireFormatNegotiator;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
0: import java.security.KeyManagementException;
0: import java.security.NoSuchAlgorithmException;
0: import java.security.SecureRandom;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: import java.util.Map;
0: 
0: import javax.net.ssl.SSLContext;
0: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.TrustManager;
0:  * An implementation of the TcpTransportFactory using SSL.
0:  * The major contribution from this class is that it is aware of SslTransportServer and SslTransport classes.
0:  * All Transports and TransportServers created from this factory will have their needClientAuth option set to false.
1:  * 
0:  * @author sepandm@gmail.com (Sepand)
0:     // The context used to creat ssl sockets.
0:     private SSLContext sslContext = null;
0:     
0:     // The log this uses.,
0:     private static final Log log = LogFactory.getLog(SslTransportFactory.class);
0:     
1:     /**
0:      * Constructor. Nothing special.
1:      *
1:      */
0:     
1:     /**
1:      * Overriding to use SslTransportServer and allow for proper reflection.
1:      */
0:     public TransportServer doBind(String brokerId, final URI location) throws IOException {
0:         try {
0:             Map options = new HashMap(URISupport.parseParamters(location));
1:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
0:             SslTransportServer server =
0:                 new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);  
1:             server.setWireFormatFactory(createWireFormatFactory(options));
1:             IntrospectionSupport.setProperties(server, options);
0:             Map transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:             server.setTransportOption(transportOptions);
1:             server.bind();
0:             
1:             return server;
1:         }
0:         catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     /**
0:      * Overriding to allow for proper configuration through reflection.
1:      */
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         
0:         SslTransport sslTransport = (SslTransport) transport.narrow(SslTransport.class);
1:         IntrospectionSupport.setProperties(sslTransport, options);
0:         
0:         Map socketOptions = IntrospectionSupport.extractProperties(options, "socket.");
0:         
0:         sslTransport.setSocketOptions(socketOptions);
0: 
0:         if (sslTransport.isTrace()) {
0:             transport = new TransportLogger(transport);
1:         }
0: 
0:         transport = new InactivityMonitor(transport);
0: 
0:         // Only need the WireFormatNegotiator if using openwire
0:         if (format instanceof OpenWireFormat) {
0:             transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, sslTransport.getMinmumWireFormatVersion());
1:         }
0:         
0:         return transport;
1:     }
0:     
1:     /**
1:      * Overriding to use SslTransports.
1:      */
0:     protected Transport createTransport(URI location,WireFormat wf) throws UnknownHostException,IOException{
1:         URI localLocation = null;
1:         String path = location.getPath();
1:         // see if the path is a local URI location
1:         if (path != null && path.length() > 0) {
1:             int localPortIndex = path.indexOf(':');
0:             try {
0:                 Integer.parseInt(path.substring((localPortIndex + 1), path.length()));
1:                 String localString = location.getScheme() + ":/" + path;
1:                 localLocation = new URI(localString);
1:             }
0:             catch (Exception e) {
0:                 log.warn("path isn't a valid local location for SslTransport to use", e);
1:             }
1:         }
1:         SocketFactory socketFactory = createSocketFactory();
1:         return new SslTransport(wf, (SSLSocketFactory)socketFactory, location, localLocation, false);
1:     }
0:     
1:     /**
0:      * Sets the key and trust managers used in constructed socket factories.
1:      * 
0:      * Passes given arguments to SSLContext.init(...).
1:      * 
0:      * @param km The sources of authentication keys or null.
0:      * @param tm The sources of peer authentication trust decisions or null.
0:      * @param random The source of randomness for this generator or null.
1:      */
0:     public void setKeyAndTrustManagers(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException {
0:         // Killing old context and making a new one just to be safe.
0:         try {
0:             sslContext = SSLContext.getInstance("TLS");
0:         } catch (NoSuchAlgorithmException e) {
0:             // This should not happen unless this class is improperly modified.
0:             throw new RuntimeException("Unknown SSL algorithm encountered.", e);
1:         }
0:         sslContext.init(km, tm, random);
1:     }
0:     
1:     /**
0:      * Creates a new SSL ServerSocketFactory.
1:      * 
0:      * The given factory will use user-provided key and trust managers (if the user provided them).
1:      * 
1:      * @return Newly created (Ssl)ServerSocketFactory.
1:      */
0:     protected ServerSocketFactory createServerSocketFactory() {
0:         if (sslContext == null) {
0:             return SSLServerSocketFactory.getDefault();
1:         }
0:         else
0:             return sslContext.getServerSocketFactory();
1:     }
0: 
1:     /**
0:      * Creates a new SSL SocketFactory.
1:      * 
0:      * The given factory will use user-provided key and trust managers (if the user provided them).
1:      * 
1:      * @return Newly created (Ssl)SocketFactory.
1:      */
0:     protected SocketFactory createSocketFactory() {
0:         if ( sslContext == null ) {
0:             return SSLSocketFactory.getDefault();
1:         }
0:         else
0:             return sslContext.getSocketFactory();
1:     }
0:     
0: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
1:             SslTransportServer server = createSslTransportServer(location, (SSLServerSocketFactory)serverSocketFactory);
/////////////////////////////////////////////////////////////////////////
1:      * Allows subclasses of SslTransportFactory to create custom instances of
1:      * SslTransportServer.
0:      *
1:      * @param location
1:      * @param serverSocketFactory
0:      * @return
1:      * @throws IOException
1:      * @throws URISyntaxException
0:      */
1:     protected SslTransportServer createSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new SslTransportServer(this, location, serverSocketFactory);
0:     }
0: 
0:     /**
commit:6f2ac63
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @throws IOException
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
author:Gary Tully
-------------------------------------------------------------------------------
commit:12838c2
/////////////////////////////////////////////////////////////////////////
1:      * Overriding to allow for proper configuration through reflection but delegate to get common
1:      * configuration
1:         return super.compositeConfigure(transport, format, options);
commit:24dced6
/////////////////////////////////////////////////////////////////////////
0:      * @param random
0:      * @see org.apache.activemq.broker.SslContext#setCurrentSslContext(SslContext)
0:      * @see org.apache.activemq.broker.SslContext#getSSLContext()
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SslTransportFactory.class);
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
commit:15065b7
/////////////////////////////////////////////////////////////////////////
0:         transport = new InactivityMonitor(transport, format);
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             transport = new TransportLogger(transport);
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:             try {
0:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport,
0:                         sslTransport.getLogWriterName(), sslTransport.isDynamicManagement(), sslTransport.isStartLogging(), sslTransport.getJmxPort());
0:             } catch (Throwable e) {
0:                 LOG.error("Could not create TransportLogger object for: " + sslTransport.getLogWriterName() + ", reason: " + e, e);
0:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:2440474
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.transport.tcp;
0: 
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLServerSocketFactory;
0: import javax.net.ssl.SSLSocketFactory;
0: 
0: /**
0:  * An implementation of the TCP Transport using SSL
0:  * 
0:  * @version $Revision: $
0:  */
0: public class SslTransportFactory extends TcpTransportFactory {
0: 
0:     public SslTransportFactory() {
0:     }
0: 
0:     protected ServerSocketFactory createServerSocketFactory() {
0:         return SSLServerSocketFactory.getDefault();
0:     }
0: 
0:     protected SocketFactory createSocketFactory() {
0:         return SSLSocketFactory.getDefault();
0:     }
0:     
0: }
============================================================================