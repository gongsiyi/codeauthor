1:6d8e2c5: /**
1:6d8e2c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6d8e2c5:  * contributor license agreements.  See the NOTICE file distributed with
1:6d8e2c5:  * this work for additional information regarding copyright ownership.
1:6d8e2c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6d8e2c5:  * (the "License"); you may not use this file except in compliance with
1:6d8e2c5:  * the License.  You may obtain a copy of the License at
5:6d8e2c5:  *
1:6d8e2c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:6d8e2c5:  * Unless required by applicable law or agreed to in writing, software
1:6d8e2c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d8e2c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d8e2c5:  * See the License for the specific language governing permissions and
1:6d8e2c5:  * limitations under the License.
1:6d8e2c5:  */
1:6d8e2c5: package org.apache.activemq.usage;
2:6d8e2c5: 
1:6d8e2c5: import java.util.List;
1:6d8e2c5: import java.util.concurrent.CopyOnWriteArrayList;
1:1a5ad28: import java.util.concurrent.ThreadPoolExecutor;
1:f21992e: 
1:6d8e2c5: import org.apache.activemq.Service;
1:f21992e: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:d5dd937: import org.apache.activemq.store.PListStore;
1:6d8e2c5: import org.apache.activemq.store.PersistenceAdapter;
1:6d8e2c5: 
1:6d8e2c5: /**
1:2b0024c:  * Holder for Usage instances for memory, store and temp files Main use case is
1:2b0024c:  * manage memory usage.
1:f21992e:  *
1:6d8e2c5:  * @org.apache.xbean.XBean
1:f21992e:  *
1:6d8e2c5:  */
1:2b0024c: public class SystemUsage implements Service {
1:6d8e2c5: 
1:2b0024c:     private SystemUsage parent;
1:2b0024c:     private String name;
1:2b0024c:     private MemoryUsage memoryUsage;
1:2b0024c:     private StoreUsage storeUsage;
1:2b0024c:     private TempUsage tempUsage;
1:1a5ad28:     private ThreadPoolExecutor executor;
1:f21992e:     private JobSchedulerUsage jobSchedulerUsage;
1:7db0fe6:     private String checkLimitsLogLevel = "warn";
1:2b0024c: 
1:6d8e2c5:     /**
1:6d8e2c5:      * True if someone called setSendFailIfNoSpace() on this particular usage
1:6d8e2c5:      * manager
1:6d8e2c5:      */
1:6d8e2c5:     private boolean sendFailIfNoSpaceExplicitySet;
1:6d8e2c5:     private boolean sendFailIfNoSpace;
1:83128fc:     private boolean sendFailIfNoSpaceAfterTimeoutExplicitySet;
1:83128fc:     private long sendFailIfNoSpaceAfterTimeout = 0;
1:1a5ad28: 
1:ee55abb:     private final List<SystemUsage> children = new CopyOnWriteArrayList<SystemUsage>();
1:6d8e2c5: 
1:2b0024c:     public SystemUsage() {
1:f21992e:         this("default", null, null, null);
1:6d8e2c5:     }
1:6d8e2c5: 
1:f21992e:     public SystemUsage(String name, PersistenceAdapter adapter, PListStore tempStore, JobSchedulerStore jobSchedulerStore) {
1:2b0024c:         this.parent = null;
1:2b0024c:         this.name = name;
1:2b0024c:         this.memoryUsage = new MemoryUsage(name + ":memory");
1:2b0024c:         this.storeUsage = new StoreUsage(name + ":store", adapter);
1:2b0024c:         this.tempUsage = new TempUsage(name + ":temp", tempStore);
1:f21992e:         this.jobSchedulerUsage = new JobSchedulerUsage(name + ":jobScheduler", jobSchedulerStore);
1:1a5ad28:         this.memoryUsage.setExecutor(getExecutor());
1:1a5ad28:         this.storeUsage.setExecutor(getExecutor());
1:1a5ad28:         this.tempUsage.setExecutor(getExecutor());
1:1a5ad28:     }
1:1a5ad28: 
1:2b0024c:     public SystemUsage(SystemUsage parent, String name) {
1:2b0024c:         this.parent = parent;
1:1a5ad28:         this.executor = parent.getExecutor();
1:2b0024c:         this.name = name;
1:2b0024c:         this.memoryUsage = new MemoryUsage(parent.memoryUsage, name + ":memory");
1:2b0024c:         this.storeUsage = new StoreUsage(parent.storeUsage, name + ":store");
1:2b0024c:         this.tempUsage = new TempUsage(parent.tempUsage, name + ":temp");
1:f21992e:         this.jobSchedulerUsage = new JobSchedulerUsage(parent.jobSchedulerUsage, name + ":jobScheduler");
1:1a5ad28:         this.memoryUsage.setExecutor(getExecutor());
1:1a5ad28:         this.storeUsage.setExecutor(getExecutor());
1:1a5ad28:         this.tempUsage.setExecutor(getExecutor());
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     public String getName() {
1:6d8e2c5:         return name;
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * @return the memoryUsage
1:6d8e2c5:      */
1:2b0024c:     public MemoryUsage getMemoryUsage() {
1:6d8e2c5:         return this.memoryUsage;
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * @return the storeUsage
1:6d8e2c5:      */
1:2b0024c:     public StoreUsage getStoreUsage() {
1:6d8e2c5:         return this.storeUsage;
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * @return the tempDiskUsage
1:6d8e2c5:      */
1:2b0024c:     public TempUsage getTempUsage() {
1:2b0024c:         return this.tempUsage;
1:6d8e2c5:     }
1:6d8e2c5: 
1:f21992e:     /**
1:f21992e:      * @return the schedulerUsage
1:f21992e:      */
1:f21992e:     public JobSchedulerUsage getJobSchedulerUsage() {
1:f21992e:         return this.jobSchedulerUsage;
1:f21992e:     }
1:f21992e: 
1:ee55abb:     @Override
1:2b0024c:     public String toString() {
1:2b0024c:         return "UsageManager(" + getName() + ")";
1:6d8e2c5:     }
1:6d8e2c5: 
1:f21992e:     @Override
1:2b0024c:     public void start() {
1:2b0024c:         if (parent != null) {
1:6d8e2c5:             parent.addChild(this);
1:6d8e2c5:         }
1:6d8e2c5:         this.memoryUsage.start();
1:6d8e2c5:         this.storeUsage.start();
1:2b0024c:         this.tempUsage.start();
1:f21992e:         this.jobSchedulerUsage.start();
1:6d8e2c5:     }
1:6d8e2c5: 
1:f21992e:     @Override
1:2b0024c:     public void stop() {
1:2b0024c:         if (parent != null) {
1:6d8e2c5:             parent.removeChild(this);
1:6d8e2c5:         }
1:6d8e2c5:         this.memoryUsage.stop();
1:6d8e2c5:         this.storeUsage.stop();
1:2b0024c:         this.tempUsage.stop();
1:f21992e:         this.jobSchedulerUsage.stop();
1:6d8e2c5:     }
1:2b0024c: 
1:6d8e2c5:     /**
1:6d8e2c5:      * Sets whether or not a send() should fail if there is no space free. The
1:6d8e2c5:      * default value is false which means to block the send() method until space
1:6d8e2c5:      * becomes available
1:6d8e2c5:      */
1:6d8e2c5:     public void setSendFailIfNoSpace(boolean failProducerIfNoSpace) {
1:6d8e2c5:         sendFailIfNoSpaceExplicitySet = true;
1:6d8e2c5:         this.sendFailIfNoSpace = failProducerIfNoSpace;
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     public boolean isSendFailIfNoSpace() {
1:6d8e2c5:         if (sendFailIfNoSpaceExplicitySet || parent == null) {
1:6d8e2c5:             return sendFailIfNoSpace;
1:6d8e2c5:         } else {
1:6d8e2c5:             return parent.isSendFailIfNoSpace();
1:6d8e2c5:         }
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     private void addChild(SystemUsage child) {
1:6d8e2c5:         children.add(child);
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     private void removeChild(SystemUsage child) {
1:6d8e2c5:         children.remove(child);
1:6d8e2c5:     }
1:2b0024c: 
1:2b0024c:     public SystemUsage getParent() {
1:2b0024c:         return parent;
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setParent(SystemUsage parent) {
1:2b0024c:         this.parent = parent;
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public boolean isSendFailIfNoSpaceExplicitySet() {
1:2b0024c:         return sendFailIfNoSpaceExplicitySet;
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setSendFailIfNoSpaceExplicitySet(boolean sendFailIfNoSpaceExplicitySet) {
1:2b0024c:         this.sendFailIfNoSpaceExplicitySet = sendFailIfNoSpaceExplicitySet;
1:2b0024c:     }
1:2b0024c: 
1:83128fc:     public long getSendFailIfNoSpaceAfterTimeout() {
1:83128fc:         if (sendFailIfNoSpaceAfterTimeoutExplicitySet || parent == null) {
1:83128fc:             return sendFailIfNoSpaceAfterTimeout;
1:83128fc:         } else {
1:83128fc:             return parent.getSendFailIfNoSpaceAfterTimeout();
1:6d8e2c5:         }
1:6d8e2c5:     }
1:6d8e2c5: 
1:83128fc:     public void setSendFailIfNoSpaceAfterTimeout(long sendFailIfNoSpaceAfterTimeout) {
1:83128fc:         this.sendFailIfNoSpaceAfterTimeoutExplicitySet = true;
1:83128fc:         this.sendFailIfNoSpaceAfterTimeout = sendFailIfNoSpaceAfterTimeout;
1:83128fc:     }
1:6d8e2c5: 
1:2b0024c:     public void setName(String name) {
1:2b0024c:         this.name = name;
1:2b0024c:         this.memoryUsage.setName(name + ":memory");
1:2b0024c:         this.storeUsage.setName(name + ":store");
1:2b0024c:         this.tempUsage.setName(name + ":temp");
1:f21992e:         this.jobSchedulerUsage.setName(name + ":jobScheduler");
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:2b0024c:         if (memoryUsage.getName() == null) {
1:2b0024c:             memoryUsage.setName(this.memoryUsage.getName());
1:2b0024c:         }
1:2b0024c:         if (parent != null) {
1:2b0024c:             memoryUsage.setParent(parent.memoryUsage);
1:2b0024c:         }
1:2b0024c:         this.memoryUsage = memoryUsage;
1:1a5ad28:         this.memoryUsage.setExecutor(getExecutor());
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setStoreUsage(StoreUsage storeUsage) {
1:2b0024c:         if (storeUsage.getStore() == null) {
1:2b0024c:             storeUsage.setStore(this.storeUsage.getStore());
1:2b0024c:         }
1:2b0024c:         if (storeUsage.getName() == null) {
1:2b0024c:             storeUsage.setName(this.storeUsage.getName());
1:2b0024c:         }
1:2b0024c:         if (parent != null) {
1:2b0024c:             storeUsage.setParent(parent.storeUsage);
1:2b0024c:         }
1:2b0024c:         this.storeUsage = storeUsage;
1:1a5ad28:         this.storeUsage.setExecutor(executor);
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setTempUsage(TempUsage tempDiskUsage) {
1:2b0024c:         if (tempDiskUsage.getStore() == null) {
1:2b0024c:             tempDiskUsage.setStore(this.tempUsage.getStore());
1:2b0024c:         }
1:2b0024c:         if (tempDiskUsage.getName() == null) {
1:2b0024c:             tempDiskUsage.setName(this.tempUsage.getName());
1:2b0024c:         }
1:2b0024c:         if (parent != null) {
1:2b0024c:             tempDiskUsage.setParent(parent.tempUsage);
1:2b0024c:         }
1:2b0024c:         this.tempUsage = tempDiskUsage;
1:1a5ad28:         this.tempUsage.setExecutor(getExecutor());
1:2b0024c:     }
1:2b0024c: 
1:f21992e:     public void setJobSchedulerUsage(JobSchedulerUsage jobSchedulerUsage) {
1:f21992e:         if (jobSchedulerUsage.getStore() == null) {
1:f21992e:             jobSchedulerUsage.setStore(this.jobSchedulerUsage.getStore());
1:f21992e:         }
1:f21992e:         if (jobSchedulerUsage.getName() == null) {
1:f21992e:             jobSchedulerUsage.setName(this.jobSchedulerUsage.getName());
1:f21992e:         }
1:f21992e:         if (parent != null) {
1:f21992e:             jobSchedulerUsage.setParent(parent.jobSchedulerUsage);
1:f21992e:         }
1:f21992e:         this.jobSchedulerUsage = jobSchedulerUsage;
1:f21992e:         this.jobSchedulerUsage.setExecutor(getExecutor());
1:f21992e:     }
1:f21992e: 
1:1a5ad28:     /**
1:1a5ad28:      * @return the executor
1:1a5ad28:      */
1:1a5ad28:     public ThreadPoolExecutor getExecutor() {
1:1a5ad28:         return this.executor;
1:1a5ad28:     }
1:1a5ad28: 
1:1a5ad28:     /**
1:1a5ad28:      * @param executor
1:1a5ad28:      *            the executor to set
1:1a5ad28:      */
1:1a5ad28:     public void setExecutor(ThreadPoolExecutor executor) {
1:1a5ad28:         this.executor = executor;
1:1a5ad28:         if (this.memoryUsage != null) {
1:1a5ad28:             this.memoryUsage.setExecutor(this.executor);
1:1a5ad28:         }
1:1a5ad28:         if (this.storeUsage != null) {
1:1a5ad28:             this.storeUsage.setExecutor(this.executor);
1:1a5ad28:         }
1:1a5ad28:         if (this.tempUsage != null) {
1:1a5ad28:             this.tempUsage.setExecutor(this.executor);
1:1a5ad28:         }
1:f21992e:         if(this.jobSchedulerUsage != null) {
1:f21992e:             this.jobSchedulerUsage.setExecutor(this.executor);
1:f21992e:         }
1:83128fc:     }
1:7db0fe6: 
1:7db0fe6:    public String getCheckLimitsLogLevel() {
1:7db0fe6:        return checkLimitsLogLevel;
1:7db0fe6:    }
1:7db0fe6: 
1:7db0fe6:    public void setCheckLimitsLogLevel(String checkLimitsLogLevel) {
1:7db0fe6:        this.checkLimitsLogLevel = checkLimitsLogLevel;
1:7db0fe6:    }
1:83128fc: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7db0fe6
/////////////////////////////////////////////////////////////////////////
1:     private String checkLimitsLogLevel = "warn";
/////////////////////////////////////////////////////////////////////////
1: 
1:    public String getCheckLimitsLogLevel() {
1:        return checkLimitsLogLevel;
1:    }
1: 
1:    public void setCheckLimitsLogLevel(String checkLimitsLogLevel) {
1:        this.checkLimitsLogLevel = checkLimitsLogLevel;
1:    }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f21992e
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private JobSchedulerUsage jobSchedulerUsage;
/////////////////////////////////////////////////////////////////////////
1:         this("default", null, null, null);
1:     public SystemUsage(String name, PersistenceAdapter adapter, PListStore tempStore, JobSchedulerStore jobSchedulerStore) {
1:         this.jobSchedulerUsage = new JobSchedulerUsage(name + ":jobScheduler", jobSchedulerStore);
/////////////////////////////////////////////////////////////////////////
1:         this.jobSchedulerUsage = new JobSchedulerUsage(parent.jobSchedulerUsage, name + ":jobScheduler");
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the schedulerUsage
1:      */
1:     public JobSchedulerUsage getJobSchedulerUsage() {
1:         return this.jobSchedulerUsage;
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         this.jobSchedulerUsage.start();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         this.jobSchedulerUsage.stop();
/////////////////////////////////////////////////////////////////////////
1:         this.jobSchedulerUsage.setName(name + ":jobScheduler");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void setJobSchedulerUsage(JobSchedulerUsage jobSchedulerUsage) {
1:         if (jobSchedulerUsage.getStore() == null) {
1:             jobSchedulerUsage.setStore(this.jobSchedulerUsage.getStore());
1:         }
1:         if (jobSchedulerUsage.getName() == null) {
1:             jobSchedulerUsage.setName(this.jobSchedulerUsage.getName());
1:         }
1:         if (parent != null) {
1:             jobSchedulerUsage.setParent(parent.jobSchedulerUsage);
1:         }
1:         this.jobSchedulerUsage = jobSchedulerUsage;
1:         this.jobSchedulerUsage.setExecutor(getExecutor());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if(this.jobSchedulerUsage != null) {
1:             this.jobSchedulerUsage.setExecutor(this.executor);
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:  * Holder for Usage instances for memory, store and temp files Main use case is
1:  * manage memory usage.
1: public class SystemUsage implements Service {
1:     private SystemUsage parent;
1:     private String name;
1:     private MemoryUsage memoryUsage;
1:     private StoreUsage storeUsage;
1:     private TempUsage tempUsage;
1: 
0:     private List<SystemUsage> children = new CopyOnWriteArrayList<SystemUsage>();
1:     public SystemUsage() {
0:         this("default", null, null);
0:     public SystemUsage(String name, PersistenceAdapter adapter, Store tempStore) {
1:         this.parent = null;
1:         this.name = name;
1:         this.memoryUsage = new MemoryUsage(name + ":memory");
1:         this.storeUsage = new StoreUsage(name + ":store", adapter);
1:         this.tempUsage = new TempUsage(name + ":temp", tempStore);
1:     public SystemUsage(SystemUsage parent, String name) {
1:         this.parent = parent;
1:         this.name = name;
1:         this.memoryUsage = new MemoryUsage(parent.memoryUsage, name + ":memory");
1:         this.storeUsage = new StoreUsage(parent.storeUsage, name + ":store");
1:         this.tempUsage = new TempUsage(parent.tempUsage, name + ":temp");
1:     public String getName() {
1:     public MemoryUsage getMemoryUsage() {
1:     public StoreUsage getStoreUsage() {
1:     public TempUsage getTempUsage() {
1:         return this.tempUsage;
1:     public String toString() {
1:         return "UsageManager(" + getName() + ")";
1:     public void start() {
1:         if (parent != null) {
1:         this.tempUsage.start();
1:     public void stop() {
1:         if (parent != null) {
1:         this.tempUsage.stop();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void addChild(SystemUsage child) {
1:     private void removeChild(SystemUsage child) {
1: 
1:     public SystemUsage getParent() {
1:         return parent;
1:     }
1: 
1:     public void setParent(SystemUsage parent) {
1:         this.parent = parent;
1:     }
1: 
1:     public boolean isSendFailIfNoSpaceExplicitySet() {
1:         return sendFailIfNoSpaceExplicitySet;
1:     }
1: 
1:     public void setSendFailIfNoSpaceExplicitySet(boolean sendFailIfNoSpaceExplicitySet) {
1:         this.sendFailIfNoSpaceExplicitySet = sendFailIfNoSpaceExplicitySet;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:         this.memoryUsage.setName(name + ":memory");
1:         this.storeUsage.setName(name + ":store");
1:         this.tempUsage.setName(name + ":temp");
1:     }
1: 
1:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:         if (memoryUsage.getName() == null) {
1:             memoryUsage.setName(this.memoryUsage.getName());
1:         }
1:         if (parent != null) {
1:             memoryUsage.setParent(parent.memoryUsage);
1:         }
1:         this.memoryUsage = memoryUsage;
1:     }
1: 
1:     public void setStoreUsage(StoreUsage storeUsage) {
1:         if (storeUsage.getStore() == null) {
1:             storeUsage.setStore(this.storeUsage.getStore());
1:         }
1:         if (storeUsage.getName() == null) {
1:             storeUsage.setName(this.storeUsage.getName());
1:         }
1:         if (parent != null) {
1:             storeUsage.setParent(parent.storeUsage);
1:         }
1:         this.storeUsage = storeUsage;
1: 
1:     }
1: 
1:     public void setTempUsage(TempUsage tempDiskUsage) {
1:         if (tempDiskUsage.getStore() == null) {
1:             tempDiskUsage.setStore(this.tempUsage.getStore());
1:         }
1:         if (tempDiskUsage.getName() == null) {
1:             tempDiskUsage.setName(this.tempUsage.getName());
1:         }
1:         if (parent != null) {
1:             tempDiskUsage.setParent(parent.tempUsage);
1:         }
1:         this.tempUsage = tempDiskUsage;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
1:     private ThreadPoolExecutor executor;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.memoryUsage.setExecutor(getExecutor());
1:         this.storeUsage.setExecutor(getExecutor());
1:         this.tempUsage.setExecutor(getExecutor());
1:         this.executor = parent.getExecutor();
1:         this.memoryUsage.setExecutor(getExecutor());
1:         this.storeUsage.setExecutor(getExecutor());
1:         this.tempUsage.setExecutor(getExecutor());
/////////////////////////////////////////////////////////////////////////
1:         this.memoryUsage.setExecutor(getExecutor());
/////////////////////////////////////////////////////////////////////////
1:         this.storeUsage.setExecutor(executor);
/////////////////////////////////////////////////////////////////////////
1:         this.tempUsage.setExecutor(getExecutor());
1:     }
1: 
1:     /**
1:      * @return the executor
1:      */
1:     public ThreadPoolExecutor getExecutor() {
1:         return this.executor;
1:     }
1: 
1:     /**
1:      * @param executor
1:      *            the executor to set
1:      */
1:     public void setExecutor(ThreadPoolExecutor executor) {
1:         this.executor = executor;
1:         if (this.memoryUsage != null) {
1:             this.memoryUsage.setExecutor(this.executor);
1:         }
1:         if (this.storeUsage != null) {
1:             this.storeUsage.setExecutor(this.executor);
1:         }
1:         if (this.tempUsage != null) {
1:             this.tempUsage.setExecutor(this.executor);
1:         }
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
1:     private final List<SystemUsage> children = new CopyOnWriteArrayList<SystemUsage>();
0:     public SystemUsage(String name, PersistenceAdapter adapter, PListStore tempStore) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: import org.apache.activemq.Service;
0: import org.apache.activemq.kaha.Store;
1: import org.apache.activemq.store.PersistenceAdapter;
1: 
1: 
1: /**
0:  * Holder for Usage instances for memory, store and temp files
1:  * 
0:  * Main use case is manage memory usage.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 1.3 $
1:  */
0: public class SystemUsage implements Service{
1: 
0:     private final SystemUsage parent;
0:     private final String name;
0:     private final MemoryUsage memoryUsage;
0:     private final StoreUsage storeUsage;
0:     private final TempUsage tempDiskUsage;
1:     /**
1:      * True if someone called setSendFailIfNoSpace() on this particular usage
1:      * manager
1:      */
1:     private boolean sendFailIfNoSpaceExplicitySet;
1:     private boolean sendFailIfNoSpace;
0:     private List<SystemUsage> children=new CopyOnWriteArrayList<SystemUsage>();
1: 
0:     public SystemUsage(){
0:         this.parent=null;
0:         this.name="default";
0:         this.memoryUsage=new MemoryUsage(name+":memory");
0:         this.storeUsage=null;
0:         this.tempDiskUsage=null;
1:     }
1: 
0:     public SystemUsage(String name,PersistenceAdapter adapter,Store tempStore){
0:         this.parent=null;
0:         this.name=name;
0:         this.memoryUsage=new MemoryUsage(name+":memory");
0:         this.storeUsage=new StoreUsage(name+":store",adapter);
0:         this.tempDiskUsage=new TempUsage(name+":temp",tempStore);
1:     }
1: 
0:     public SystemUsage(SystemUsage parent,String name){
0:         this.parent=parent;
0:         this.name=name;
0:         this.memoryUsage=new MemoryUsage(parent.memoryUsage,name+":memory");
0:         this.storeUsage=new StoreUsage(parent.storeUsage,name+":store");
0:         this.tempDiskUsage=new TempUsage(parent!=null?parent.tempDiskUsage:null,name+":temp");
1:     }
1: 
0:     public String getName(){
1:         return name;
1:     }
1: 
1:     /**
1:      * @return the memoryUsage
1:      */
0:     public MemoryUsage getMemoryUsage(){
1:         return this.memoryUsage;
1:     }
1: 
1:     /**
1:      * @return the storeUsage
1:      */
0:     public StoreUsage getStoreUsage(){
1:         return this.storeUsage;
1:     }
1: 
1:     /**
1:      * @return the tempDiskUsage
1:      */
0:     public TempUsage getTempDiskUsage(){
0:         return this.tempDiskUsage;
1:     }
1: 
0:     public String toString(){
0:         return "UsageManager("+getName()+")";
1:     }
1: 
0:     public void start(){
0:         if(parent!=null){
1:             parent.addChild(this);
1:         }
1:         this.memoryUsage.start();
1:         this.storeUsage.start();
0:         this.tempDiskUsage.start();
1:     }
1: 
0:     public void stop(){
0:         if(parent!=null){
1:             parent.removeChild(this);
1:         }
1:         this.memoryUsage.stop();
1:         this.storeUsage.stop();
0:         this.tempDiskUsage.stop();
1:     }
1:     
1:     /**
1:      * Sets whether or not a send() should fail if there is no space free. The
1:      * default value is false which means to block the send() method until space
1:      * becomes available
1:      */
1:     public void setSendFailIfNoSpace(boolean failProducerIfNoSpace) {
1:         sendFailIfNoSpaceExplicitySet = true;
1:         this.sendFailIfNoSpace = failProducerIfNoSpace;
1:     }
1: 
1:     public boolean isSendFailIfNoSpace() {
1:         if (sendFailIfNoSpaceExplicitySet || parent == null) {
1:             return sendFailIfNoSpace;
1:         } else {
1:             return parent.isSendFailIfNoSpace();
1:         }
1:     }
1: 
0:     private void addChild(SystemUsage child){
1:         children.add(child);
1:     }
1: 
0:     private void removeChild(SystemUsage child){
1:         children.remove(child);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:83128fc
/////////////////////////////////////////////////////////////////////////
1:     private boolean sendFailIfNoSpaceAfterTimeoutExplicitySet;
1:     private long sendFailIfNoSpaceAfterTimeout = 0;
0:     
/////////////////////////////////////////////////////////////////////////
1:     public long getSendFailIfNoSpaceAfterTimeout() {
1:         if (sendFailIfNoSpaceAfterTimeoutExplicitySet || parent == null) {
1:             return sendFailIfNoSpaceAfterTimeout;
1:         } else {
1:             return parent.getSendFailIfNoSpaceAfterTimeout();
1:         }
1:     }
0: 
1:     public void setSendFailIfNoSpaceAfterTimeout(long sendFailIfNoSpaceAfterTimeout) {
1:         this.sendFailIfNoSpaceAfterTimeoutExplicitySet = true;
1:         this.sendFailIfNoSpaceAfterTimeout = sendFailIfNoSpaceAfterTimeout;
1:     }
0: 
============================================================================