1:4e766d9: /**
1:4e766d9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4e766d9:  * contributor license agreements.  See the NOTICE file distributed with
1:4e766d9:  * this work for additional information regarding copyright ownership.
1:4e766d9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4e766d9:  * (the "License"); you may not use this file except in compliance with
1:4e766d9:  * the License.  You may obtain a copy of the License at
1:4e766d9:  *
1:4e766d9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4e766d9:  *
1:4e766d9:  * Unless required by applicable law or agreed to in writing, software
1:4e766d9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4e766d9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e766d9:  * See the License for the specific language governing permissions and
1:4e766d9:  * limitations under the License.
1:4e766d9:  */
1:4e766d9: package org.apache.activemq.test.retroactive;
1:4e766d9: 
1:4e766d9: import junit.framework.TestCase;
1:4e766d9: import org.apache.activemq.ActiveMQConnectionFactory;
1:4e766d9: import org.apache.activemq.broker.BrokerService;
1:4e766d9: import org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy;
1:4e766d9: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:4e766d9: import org.apache.activemq.broker.region.policy.PolicyMap;
1:4e766d9: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1:4e766d9: import org.apache.activemq.store.PersistenceAdapter;
1:4e766d9: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:4e766d9: import org.slf4j.Logger;
1:4e766d9: import org.slf4j.LoggerFactory;
1:4e766d9: 
1:4e766d9: import javax.jms.*;
1:4e766d9: 
1:4e766d9: public class RetroactiveConsumerBrokerRestartedTest extends TestCase {
1:4e766d9: 
1:4e766d9:     private static final Logger log = LoggerFactory.getLogger(RetroactiveConsumerBrokerRestartedTest.class);
1:4e766d9:     private final static String ACTIVEMQ_BROKER_URI = "tcp://localhost:62626";
1:4e766d9: 
1:4e766d9:     private BrokerService broker;
1:4e766d9:     Connection connection;
1:4e766d9: 
1:4e766d9:     @Override
1:4e766d9:     protected void setUp() throws Exception {
1:4e766d9:         createBroker();
1:4e766d9:         connection = getConnection();
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     @Override
1:4e766d9:     protected void tearDown() throws Exception {
1:4e766d9:         broker.stop();
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     protected void restartBroker() throws Exception {
1:4e766d9:         if (connection != null) {
1:4e766d9:             connection.close();
1:4e766d9:         }
1:4e766d9:         if (broker != null) {
1:4e766d9:             broker.stop();
1:4e766d9:             broker.waitUntilStopped();
1:4e766d9:         }
1:4e766d9:         createRestartedBroker();
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     private void createBroker() throws Exception {
1:4e766d9:         PolicyEntry policy = new PolicyEntry();
1:4e766d9:         policy.setTopic(">");
1:4e766d9:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1:4e766d9:         FixedCountSubscriptionRecoveryPolicy fixed = new FixedCountSubscriptionRecoveryPolicy();
1:4e766d9:         fixed.setMaximumSize(10);
1:4e766d9:         policy.setSubscriptionRecoveryPolicy(fixed);
1:4e766d9:         PolicyMap policyMap = new PolicyMap();
1:4e766d9:         policyMap.setDefaultEntry(policy);
1:4e766d9: 
1:4e766d9:         broker = new BrokerService();
1:4e766d9:         broker.setBrokerName("durable-broker");
1:4e766d9:         broker.setDeleteAllMessagesOnStartup(true);
1:4e766d9:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:4e766d9:         broker.setPersistent(true);
1:4e766d9:         broker.setDestinationPolicy(policyMap);
1:4e766d9: 
1:4e766d9:         broker.addConnector(ACTIVEMQ_BROKER_URI);
1:4e766d9:         broker.start();
1:4e766d9:         broker.waitUntilStarted();
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     private void createRestartedBroker() throws Exception {
1:4e766d9:         PolicyEntry policy = new PolicyEntry();
1:4e766d9:         policy.setTopic(">");
1:4e766d9:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1:4e766d9:         FixedCountSubscriptionRecoveryPolicy fixed = new FixedCountSubscriptionRecoveryPolicy();
1:4e766d9:         fixed.setMaximumSize(10);
1:4e766d9:         policy.setSubscriptionRecoveryPolicy(fixed);
1:4e766d9:         PolicyMap policyMap = new PolicyMap();
1:4e766d9:         policyMap.setDefaultEntry(policy);
1:4e766d9: 
1:4e766d9:         broker = new BrokerService();
1:4e766d9:         broker.setBrokerName("durable-broker");
1:4e766d9:         broker.setDeleteAllMessagesOnStartup(false);
1:4e766d9:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:4e766d9:         broker.setPersistent(true);
1:4e766d9:         broker.setDestinationPolicy(policyMap);
1:4e766d9: 
1:4e766d9:         broker.addConnector(ACTIVEMQ_BROKER_URI);
1:4e766d9:         broker.start();
1:4e766d9:         broker.waitUntilStarted();
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     protected PersistenceAdapter createPersistenceAdapter() throws Exception {
1:4e766d9:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:4e766d9:         return adapter;
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:4e766d9:         return new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     private Connection getConnection() throws Exception {
1:4e766d9:         Connection connection = createConnectionFactory().createConnection();
1:4e766d9:         connection.setClientID("cliId1");
1:4e766d9:         return connection;
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     public void testFixedCountSubscriptionRecoveryPolicy() throws Exception {
1:4e766d9: 
1:4e766d9:         connection.start();
1:4e766d9: 
1:4e766d9:         // Create the durable sub.
1:4e766d9:         Session session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:4e766d9: 
1:4e766d9:         // Ensure that consumer will receive messages sent before it was created
1:4e766d9:         Topic topicSub = session.createTopic("TestTopic?consumer.retroactive=true");
1:4e766d9:         Topic topic = session.createTopic("TestTopic");
1:4e766d9:         TopicSubscriber sub1 = session.createDurableSubscriber(topicSub, "sub1");
1:4e766d9: 
1:4e766d9:         // Produce a message
1:4e766d9:         MessageProducer producer = session.createProducer(topic);
1:4e766d9:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:4e766d9: 
1:4e766d9:         // Make sure it works when the durable sub is active.
1:4e766d9:         producer.send(session.createTextMessage("Msg:1"));
1:4e766d9:         producer.send(session.createTextMessage("Msg:2"));
1:4e766d9:         producer.send(session.createTextMessage("Msg:3"));
1:4e766d9: 
1:4e766d9:         restartBroker();
1:4e766d9: 
1:4e766d9:         connection = getConnection();
1:4e766d9:         connection.start();
1:4e766d9:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:4e766d9:         producer = session.createProducer(topic);
1:4e766d9:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:4e766d9:         producer.send(session.createTextMessage("Msg:4"));
1:4e766d9: 
1:4e766d9:         // Recreate the subscriber to check if it will be able to recover the messages
1:4e766d9:         sub1 = session.createDurableSubscriber(topicSub, "sub1");
1:4e766d9: 
1:4e766d9:         // Try to get the messages
1:4e766d9:         assertTextMessageEquals("Msg:1", sub1.receive(1000));
1:4e766d9:         assertTextMessageEquals("Msg:2", sub1.receive(1000));
1:4e766d9:         assertTextMessageEquals("Msg:3", sub1.receive(1000));
1:4e766d9:         assertTextMessageEquals("Msg:4", sub1.receive(1000));
1:4e766d9:     }
1:4e766d9: 
1:4e766d9:     private void assertTextMessageEquals(String string, Message message) throws JMSException {
1:4e766d9:         assertNotNull("Message was null", message);
1:4e766d9:         assertTrue("Message is not a TextMessage", message instanceof TextMessage);
1:4e766d9:         assertEquals(string, ((TextMessage) message).getText());
1:4e766d9:     }
1:4e766d9: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4e766d9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.retroactive;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: 
1: public class RetroactiveConsumerBrokerRestartedTest extends TestCase {
1: 
1:     private static final Logger log = LoggerFactory.getLogger(RetroactiveConsumerBrokerRestartedTest.class);
1:     private final static String ACTIVEMQ_BROKER_URI = "tcp://localhost:62626";
1: 
1:     private BrokerService broker;
1:     Connection connection;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         createBroker();
1:         connection = getConnection();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected void restartBroker() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         createRestartedBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTopic(">");
1:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1:         FixedCountSubscriptionRecoveryPolicy fixed = new FixedCountSubscriptionRecoveryPolicy();
1:         fixed.setMaximumSize(10);
1:         policy.setSubscriptionRecoveryPolicy(fixed);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policy);
1: 
1:         broker = new BrokerService();
1:         broker.setBrokerName("durable-broker");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:         broker.setPersistent(true);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.addConnector(ACTIVEMQ_BROKER_URI);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private void createRestartedBroker() throws Exception {
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTopic(">");
1:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1:         FixedCountSubscriptionRecoveryPolicy fixed = new FixedCountSubscriptionRecoveryPolicy();
1:         fixed.setMaximumSize(10);
1:         policy.setSubscriptionRecoveryPolicy(fixed);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policy);
1: 
1:         broker = new BrokerService();
1:         broker.setBrokerName("durable-broker");
1:         broker.setDeleteAllMessagesOnStartup(false);
1:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:         broker.setPersistent(true);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.addConnector(ACTIVEMQ_BROKER_URI);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected PersistenceAdapter createPersistenceAdapter() throws Exception {
1:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         return adapter;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:     }
1: 
1:     private Connection getConnection() throws Exception {
1:         Connection connection = createConnectionFactory().createConnection();
1:         connection.setClientID("cliId1");
1:         return connection;
1:     }
1: 
1:     public void testFixedCountSubscriptionRecoveryPolicy() throws Exception {
1: 
1:         connection.start();
1: 
1:         // Create the durable sub.
1:         Session session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         // Ensure that consumer will receive messages sent before it was created
1:         Topic topicSub = session.createTopic("TestTopic?consumer.retroactive=true");
1:         Topic topic = session.createTopic("TestTopic");
1:         TopicSubscriber sub1 = session.createDurableSubscriber(topicSub, "sub1");
1: 
1:         // Produce a message
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         producer.send(session.createTextMessage("Msg:2"));
1:         producer.send(session.createTextMessage("Msg:3"));
1: 
1:         restartBroker();
1: 
1:         connection = getConnection();
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage("Msg:4"));
1: 
1:         // Recreate the subscriber to check if it will be able to recover the messages
1:         sub1 = session.createDurableSubscriber(topicSub, "sub1");
1: 
1:         // Try to get the messages
1:         assertTextMessageEquals("Msg:1", sub1.receive(1000));
1:         assertTextMessageEquals("Msg:2", sub1.receive(1000));
1:         assertTextMessageEquals("Msg:3", sub1.receive(1000));
1:         assertTextMessageEquals("Msg:4", sub1.receive(1000));
1:     }
1: 
1:     private void assertTextMessageEquals(String string, Message message) throws JMSException {
1:         assertNotNull("Message was null", message);
1:         assertTrue("Message is not a TextMessage", message instanceof TextMessage);
1:         assertEquals(string, ((TextMessage) message).getText());
1:     }
1: }
============================================================================