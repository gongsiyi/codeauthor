1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:c46562b: 
1:d29ca2a: import java.io.IOException;
1:d4382e4: import java.util.List;
1:74a7a8b: 
1:74a7a8b: import javax.jms.InvalidSelectorException;
1:74a7a8b: import javax.management.ObjectName;
1:5e05df1: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:4098942: import org.apache.activemq.command.MessageDispatchNotification;
1:9d671b7: import org.apache.activemq.command.MessagePull;
1:9d671b7: import org.apache.activemq.command.Response;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
1:07d4e8c: 
1:f5f1366: /**
1:2b99f39:  *
1:d29ca2a:  */
1:a110604: public interface Subscription extends SubscriptionRecovery {
4:d29ca2a: 
1:c46562b:     /**
1:d29ca2a:      * Used to add messages that match the subscription.
3:d29ca2a:      * @param node
1:2b99f39:      * @throws Exception
1:2b99f39:      * @throws InterruptedException
1:2b99f39:      * @throws IOException
1:d29ca2a:      */
1:7f5213b:     void add(MessageReference node) throws Exception;
1:2b99f39: 
1:d29ca2a:     /**
1:2b99f39:      * Used when client acknowledge receipt of dispatched message.
1:2b99f39:      * @throws IOException
1:2b99f39:      * @throws Exception
1:d29ca2a:      */
1:7f5213b:     void acknowledge(ConnectionContext context, final MessageAck ack) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:9d671b7:      * Allows a consumer to pull a message on demand
1:4eef609:      */
1:9d671b7:     Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:94b404d:      * Returns true if this subscription is a Wildcard subscription.
1:94b404d:      * @return true if wildcard subscription.
1:94b404d:      */
1:94b404d:     boolean isWildcard();
1:94b404d: 
1:94b404d:     /**
1:d29ca2a:      * Is the subscription interested in the message?
1:2b99f39:      * @param node
4:d29ca2a:      * @param context
1:5e05df1:      * @return true if matching
1:2b99f39:      * @throws IOException
1:d29ca2a:      */
1:fbb26ba:     boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException;
1:2b99f39: 
1:d29ca2a:     /**
1:d29ca2a:      * Is the subscription interested in messages in the destination?
1:6683eb6:      * @param destination
1:5e05df1:      * @return true if matching
1:d29ca2a:      */
1:d29ca2a:     boolean matches(ActiveMQDestination destination);
1:2b99f39: 
1:d29ca2a:     /**
1:d29ca2a:      * The subscription will be receiving messages from the destination.
1:2b99f39:      * @param context
2:d29ca2a:      * @param destination
1:2b99f39:      * @throws Exception
1:d29ca2a:      */
1:7f5213b:     void add(ConnectionContext context, Destination destination) throws Exception;
1:2b99f39: 
1:d29ca2a:     /**
1:d29ca2a:      * The subscription will be no longer be receiving messages from the destination.
1:2b99f39:      * @param context
1:d29ca2a:      * @param destination
1:ae7de6c:      * @return a list of un-acked messages that were added to the subscription.
1:d29ca2a:      */
1:ae7de6c:     List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception;
1:2b99f39: 
1:d29ca2a:     /**
1:d29ca2a:      * The ConsumerInfo object that created the subscription.
1:d29ca2a:      */
1:d29ca2a:     ConsumerInfo getConsumerInfo();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * The subscription should release as may references as it can to help the garbage collector
1:d29ca2a:      * reclaim memory.
1:d29ca2a:      */
1:d29ca2a:     void gc();
1:2b99f39: 
1:d29ca2a:     /**
1:4098942:      * Used by a Slave Broker to update dispatch infomation
1:4098942:      * @param mdn
1:2b99f39:      * @throws Exception
1:4098942:      */
1:807e18f:     void processMessageDispatchNotification(MessageDispatchNotification  mdn) throws Exception;
1:30f531d: 
1:4eef609:     /**
1:3601e81:      * @return number of messages pending delivery
1:3601e81:      */
1:07d4e8c:     int getPendingQueueSize();
1:2b99f39: 
1:3601e81:     /**
1:734fb7d:      * @return size of the messages pending delivery
1:734fb7d:      */
1:734fb7d:     long getPendingMessageSize();
1:734fb7d: 
1:734fb7d:     /**
1:07d4e8c:      * @return number of messages dispatched to the client
1:3601e81:      */
1:07d4e8c:     int getDispatchedQueueSize();
1:2b99f39: 
1:07d4e8c:     /**
1:07d4e8c:      * @return number of messages dispatched to the client
1:07d4e8c:      */
1:07d4e8c:     long getDispatchedCounter();
1:2b99f39: 
1:3601e81:     /**
1:07d4e8c:      * @return number of messages that matched the subscription
1:3601e81:      */
1:07d4e8c:     long getEnqueueCounter();
1:07d4e8c: 
1:07d4e8c:     /**
1:07d4e8c:      * @return number of messages queued by the client
1:07d4e8c:      */
1:07d4e8c:     long getDequeueCounter();
1:07d4e8c: 
1:eece576:     SubscriptionStatistics getSubscriptionStatistics();
1:eece576: 
1:3601e81:     /**
1:5371cf5:      * @return the JMS selector on the current subscription
1:4098942:      */
1:fc00993:     String getSelector();
1:2b99f39: 
1:4098942:     /**
1:5371cf5:      * Attempts to change the current active selector on the subscription.
1:5371cf5:      * This operation is not supported for persistent topics.
1:9d671b7:      */
1:fc00993:     void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:d29ca2a: 
1:4098942:     /**
1:0def1d4:      * @return the JMX object name that this subscription was registered as if applicable
2:0def1d4:      */
1:fc00993:     ObjectName getObjectName();
1:d29ca2a: 
1:9d671b7:     /**
1:0def1d4:      * Set when the subscription is registered in JMX
1:6eaea6f:      */
1:fc00993:     void setObjectName(ObjectName objectName);
1:2b99f39: 
1:6eaea6f:     /**
1:6eaea6f:      * @return true when 60% or more room is left for dispatching messages
1:6eaea6f:      */
1:fc00993:     boolean isLowWaterMark();
1:2b99f39: 
1:6eaea6f:     /**
1:6eaea6f:      * @return true when 10% or less room is left for dispatching messages
1:6eaea6f:      */
1:fc00993:     boolean isHighWaterMark();
1:2b99f39: 
1:6eaea6f:     /**
1:d4382e4:      * @return true if there is no space to dispatch messages
1:d4382e4:      */
1:d4382e4:     boolean isFull();
1:2b99f39: 
1:d4382e4:     /**
1:6eaea6f:      * inform the MessageConsumer on the client to change it's prefetch
1:6eaea6f:      * @param newPrefetch
1:6eaea6f:      */
1:fc00993:     void updateConsumerPrefetch(int newPrefetch);
1:2b99f39: 
1:6eaea6f:     /**
1:c46562b:      * Called when the subscription is destroyed.
1:c46562b:      */
1:fc00993:     void destroy();
1:c46562b: 
2:0def1d4:     /**
1:f5f1366:      * @return the prefetch size that is configured for the subscription
1:f5f1366:      */
1:f5f1366:     int getPrefetchSize();
1:2b99f39: 
1:d4382e4:     /**
1:d4382e4:      * @return the number of messages awaiting acknowledgement
1:d4382e4:      */
1:d4382e4:     int getInFlightSize();
1:2b99f39: 
1:d4382e4:     /**
1:4605503:      * @return the size in bytes of the messages awaiting acknowledgement
1:4605503:      */
1:4605503:     long getInFlightMessageSize();
1:4605503: 
1:4605503:     /**
1:d4382e4:      * @return the in flight messages as a percentage of the prefetch size
1:d4382e4:      */
1:d4382e4:     int getInFlightUsage();
1:2b99f39: 
1:d4382e4:     /**
1:4eef609:      * Informs the Broker if the subscription needs to intervention to recover it's state
1:4eef609:      * e.g. DurableTopicSubscriber may do
1:6683eb6:      * @see org.apache.activemq.broker.region.cursors.PendingMessageCursor
1:4eef609:      * @return true if recovery required
1:d4382e4:      */
1:fc00993:     boolean isRecoveryRequired();
1:2b99f39: 
1:d4382e4:     /**
1:d4382e4:      * @return true if a browser
1:d4382e4:      */
1:d4382e4:     boolean isBrowser();
1:2b99f39: 
1:c8bd57c:     /**
1:c8bd57c:      * @return the number of messages this subscription can accept before its full
1:c8bd57c:      */
1:c8bd57c:     int countBeforeFull();
1:f5f1366: 
1:947659c:     ConnectionContext getContext();
1:2b99f39: 
1:785454a:     public int getCursorMemoryHighWaterMark();
1:d29ca2a: 
1:2b99f39:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
1:d29ca2a: 
1:1b6d397:     boolean isSlowConsumer();
1:d29ca2a: 
1:306f8a0:     void unmatched(MessageReference node) throws IOException;
1:2b99f39: 
1:2b99f39:     /**
1:2b99f39:      * Returns the time since the last Ack message was received by this subscription.
1:2b99f39:      *
1:2b99f39:      * If there has never been an ack this value should be set to the creation time of the
1:2b99f39:      * subscription.
1:2b99f39:      *
1:2b99f39:      * @return time of last received Ack message or Subscription create time if no Acks.
1:2b99f39:      */
1:2b99f39:     long getTimeOfLastMessageAck();
1:07ec890: 
1:6683eb6:     long  getConsumedCount();
1:6683eb6: 
1:6683eb6:     void incrementConsumedCount();
1:6683eb6: 
1:6683eb6:     void resetConsumedCount();
1:2b99f39: 
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:      * @return size of the messages pending delivery
1:      */
1:     long getPendingMessageSize();
1: 
1:     /**
commit:4605503
/////////////////////////////////////////////////////////////////////////
1:      * @return the size in bytes of the messages awaiting acknowledgement
1:      */
1:     long getInFlightMessageSize();
1: 
1:     /**
commit:eece576
/////////////////////////////////////////////////////////////////////////
1:     SubscriptionStatistics getSubscriptionStatistics();
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @return true if matching
/////////////////////////////////////////////////////////////////////////
1:      * @return true if matching
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1:      * Returns true if this subscription is a Wildcard subscription.
1:      * @return true if wildcard subscription.
1:      */
1:     boolean isWildcard();
1: 
1:     /**
author:rajdavies
-------------------------------------------------------------------------------
commit:6683eb6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.activemq.broker.region.cursors.PendingMessageCursor
/////////////////////////////////////////////////////////////////////////
1:     long  getConsumedCount();
1: 
1:     void incrementConsumedCount();
1: 
1:     void resetConsumedCount();
author:Rob Davies
-------------------------------------------------------------------------------
commit:07ec890
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.management.CountStatisticImpl;
/////////////////////////////////////////////////////////////////////////
0:     CountStatisticImpl getConsumedCount();
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2b99f39
/////////////////////////////////////////////////////////////////////////
1:  *
1:      * @throws Exception
1:      * @throws InterruptedException
1:      * @throws IOException
1: 
1:      * Used when client acknowledge receipt of dispatched message.
1:      * @throws IOException
1:      * @throws Exception
/////////////////////////////////////////////////////////////////////////
1:      * @param node
1:      * @throws IOException
1: 
1: 
1:      * @param context
1:      * @throws Exception
1: 
1:      * @param context
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @throws Exception
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
1: 
1:     /**
1:      * Returns the time since the last Ack message was received by this subscription.
1:      *
1:      * If there has never been an ack this value should be set to the creation time of the
1:      * subscription.
1:      *
1:      * @return time of last received Ack message or Subscription create time if no Acks.
1:      */
1:     long getTimeOfLastMessageAck();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
1: 
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ae7de6c
/////////////////////////////////////////////////////////////////////////
1:      * @return a list of un-acked messages that were added to the subscription.
1:     List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     String getSelector();
1:     void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException;
1:     ObjectName getObjectName();
1:     void setObjectName(ObjectName objectName);
1:     boolean isLowWaterMark();
1:     boolean isHighWaterMark();
1:     void updateConsumerPrefetch(int newPrefetch);
0:     void optimizePrefetch();
1:     void destroy();
/////////////////////////////////////////////////////////////////////////
1:     boolean isRecoveryRequired();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidSelectorException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:807e18f
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception 
1:     void processMessageDispatchNotification(MessageDispatchNotification  mdn) throws Exception;
commit:f5f1366
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the prefetch size that is configured for the subscription
1:      */
1:     int getPrefetchSize();
1: 
commit:c46562b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Called when the subscription is destroyed.
1:      */
0:     public void destroy();
1: 
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1:     int getPendingQueueSize();
1:      * @return number of messages dispatched to the client
1:     int getDispatchedQueueSize();
1:         
1:     /**
1:      * @return number of messages dispatched to the client
1:      */
1:     long getDispatchedCounter();
1:      * @return number of messages that matched the subscription
1:     long getEnqueueCounter();
1: 
1:     /**
1:      * @return number of messages queued by the client
1:      */
1:     long getDequeueCounter();
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     void add(MessageReference node) throws Exception;
0:      * @throws Exception 
1:     void acknowledge(ConnectionContext context, final MessageAck ack) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception 
1:     void add(ConnectionContext context, Destination destination) throws Exception;
0:     void remove(ConnectionContext context, Destination destination) throws Exception;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public interface Subscription {
1: 
1:     /**
1:      * Used to add messages that match the subscription.
1:      * @param node
0:      * @throws InterruptedException 
0:      * @throws IOException 
1:      */
0:     void add(MessageReference node) throws Throwable;
1:     
1:     /**
0:      * Used when client acknowledge receipt of dispatched message. 
1:      * @param node
0:      * @throws IOException 
0:      * @throws Throwable 
1:      */
0:     void acknowledge(ConnectionContext context, final MessageAck ack) throws Throwable;
1:     
1:     /**
1:      * Is the subscription interested in the message?
1:      * @param node 
1:      * @param context
0:      * @return
1:      */
0:     boolean matches(MessageReference node, MessageEvaluationContext context);
1:     
1:     /**
1:      * Is the subscription interested in messages in the destination?
1:      * @param context
0:      * @return
1:      */
1:     boolean matches(ActiveMQDestination destination);
1:     
1:     /**
1:      * The subscription will be receiving messages from the destination.
1:      * @param context 
1:      * @param destination
0:      * @throws Throwable 
1:      */
0:     void add(ConnectionContext context, Destination destination) throws Throwable;
1:     
1:     /**
1:      * The subscription will be no longer be receiving messages from the destination.
1:      * @param context 
1:      * @param destination
1:      */
0:     void remove(ConnectionContext context, Destination destination) throws Throwable;
1:     
1:     /**
1:      * The ConsumerInfo object that created the subscription.
1:      * @param destination
1:      */
1:     ConsumerInfo getConsumerInfo();
1: 
1:     /**
1:      * The subscription should release as may references as it can to help the garbage collector
1:      * reclaim memory.
1:      */
1:     void gc();
1:     
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:306f8a0
/////////////////////////////////////////////////////////////////////////
0: 
1:     void unmatched(MessageReference node) throws IOException;
commit:1b6d397
/////////////////////////////////////////////////////////////////////////
0: 
1:     boolean isSlowConsumer();
author:Robert Davies
-------------------------------------------------------------------------------
commit:785454a
/////////////////////////////////////////////////////////////////////////
0:     
1:     public int getCursorMemoryHighWaterMark();
0: 
0: 	public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
commit:c8bd57c
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return the number of messages this subscription can accept before its full
1:      */
1:     int countBeforeFull();
commit:dc4f299
/////////////////////////////////////////////////////////////////////////
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception 
/////////////////////////////////////////////////////////////////////////
1:      * @return true if there is no space to dispatch messages
1:      */
1:     boolean isFull();
0:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * @return the number of messages awaiting acknowledgement
1:      */
1:     int getInFlightSize();
0:     
1:     /**
1:      * @return the in flight messages as a percentage of the prefetch size
1:      */
1:     int getInFlightUsage();
0:     
1:     /**
0:     
0:     
1:     /**
1:      * @return true if a browser
1:      */
1:     boolean isBrowser();
0:     
1:     /**
0:      * Get the list of in flight messages
0:      * @return list
1:      */
0:     List<MessageReference> getInFlightMessages();
commit:071b4b1
/////////////////////////////////////////////////////////////////////////
0:         
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
0:     boolean isSlave();
commit:a110604
/////////////////////////////////////////////////////////////////////////
1: public interface Subscription extends SubscriptionRecovery {
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Informs the Broker if the subscription needs to intervention to recover it's state
1:      * e.g. DurableTopicSubscriber may do
0:      * @see org.apache.activemq.region.cursors.PendingMessageCursor
1:      * @return true if recovery required
1:      */
0:     public boolean isRecoveryRequired();
commit:6eaea6f
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true when 60% or more room is left for dispatching messages
1:      */
0:     public boolean isLowWaterMark();
0:     
1:     /**
1:      * @return true when 10% or less room is left for dispatching messages
1:      */
0:     public boolean isHighWaterMark();
0:     
1:     /**
1:      * inform the MessageConsumer on the client to change it's prefetch
1:      * @param newPrefetch
1:      */
0:     public void updateConsumerPrefetch(int newPrefetch);
0:     
1:     /**
0:      * optimize message consumer prefetch if the consumer supports it
0:      *
1:      */
0:     public void optimizePrefetch();
commit:3601e81
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return number of messages pending delivery
1:      */
0:     int pending();
0:     
1:     /**
0:      * @return number of messages dispatched
1:      */
0:     int dispatched();
0:     
1:     /**
0:      * @return number of messages delivered
1:      */
0:     int delivered();
0:     
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Used by a Slave Broker to update dispatch infomation
1:      * @param mdn
1:      */
0:     void processMessageDispatchNotification(MessageDispatchNotification  mdn);
0:     
1:     /**
0:      * @return true if the broker is currently in slave mode
1:      */
0:     boolean isSlaveBroker();
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:947659c
/////////////////////////////////////////////////////////////////////////
0: 
1:     ConnectionContext getContext();
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Allows a consumer to pull a message on demand
1:      */
1:     Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception;
0: 
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * @return the JMX object name that this subscription was registered as if applicable
1:      */
0:     public ObjectName getObjectName();
0: 
1:     /**
1:      * Set when the subscription is registered in JMX
1:      */
0:     public void setObjectName(ObjectName objectName);
commit:5371cf5
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.InvalidSelectorException;
0: 
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * @return the JMS selector on the current subscription
0:      */
0:     public String getSelector();
0:     
0:     /**
1:      * Attempts to change the current active selector on the subscription.
1:      * This operation is not supported for persistent topics.
0:      */
0:     public void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException;
commit:fbb26ba
/////////////////////////////////////////////////////////////////////////
0:      * @throws IOException 
1:     boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException;
============================================================================