1:6ae169e: /*
1:6ae169e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ae169e:  * contributor license agreements.  See the NOTICE file distributed with
1:6ae169e:  * this work for additional information regarding copyright ownership.
1:6ae169e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ae169e:  * (the "License"); you may not use this file except in compliance with
1:6ae169e:  * the License.  You may obtain a copy of the License at
1:6ae169e:  *
1:6ae169e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ae169e:  *
1:6ae169e:  * Unless required by applicable law or agreed to in writing, software
1:6ae169e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ae169e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ae169e:  * See the License for the specific language governing permissions and
1:6ae169e:  * limitations under the License.
1:6ae169e:  */
1:6ae169e: package org.apache.activemq.junit;
1:6ae169e: 
1:6ae169e: import org.junit.runners.model.Statement;
1:6ae169e: import org.slf4j.Logger;
1:6ae169e: import org.slf4j.LoggerFactory;
1:6ae169e: 
1:6ae169e: public final class RepeatStatement extends Statement {
1:6ae169e: 
1:6ae169e:     private static final Logger LOG = LoggerFactory.getLogger(RepeatStatement.class);
1:6ae169e: 
1:6ae169e:     private final int repetitions;
1:6ae169e:     private final boolean untilFailure;
1:6ae169e:     private final Statement statement;
1:6ae169e: 
1:6ae169e:     public static Builder builder() {
1:6ae169e:         return new Builder();
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     public RepeatStatement(int times, boolean untilFailure, Statement statement) {
1:6ae169e:         this.repetitions = times;
1:6ae169e:         this.untilFailure = untilFailure;
1:6ae169e:         this.statement = statement;
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     protected RepeatStatement(Builder builder, Statement next) {
1:6ae169e:         this.repetitions = builder.getRepetitions();
1:6ae169e:         this.untilFailure = builder.isUntilFailure();
1:6ae169e:         this.statement = next;
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     @Override
1:6ae169e:     public void evaluate() throws Throwable {
1:6ae169e:         for (int i = 0; i < repetitions && !untilFailure; i++) {
1:6ae169e:             if (untilFailure) {
1:6ae169e:                 LOG.info("Running test iteration: {}.", i + 1);
1:6ae169e:             } else {
1:6ae169e:                 LOG.info("Running test iteration: {} of configured repetitions: {}", i + 1, repetitions);
1:6ae169e:             }
1:6ae169e:             statement.evaluate();
1:6ae169e:         }
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     /**
1:6ae169e:      * Builder for {@link Repeat}.
1:6ae169e:      */
1:6ae169e:     public static class Builder {
1:6ae169e:         private int repetitions = 1;
1:6ae169e:         private boolean untilFailure = false;
1:6ae169e: 
1:6ae169e:         protected Builder() {}
1:6ae169e: 
1:6ae169e:         /**
1:6ae169e:          * Specifies the number of times to run the test.
1:6ae169e:          *
1:6ae169e:          * @param repetitions
1:6ae169e:          *      The number of times to run the test.
1:6ae169e:          *
1:6ae169e:          * @return {@code this} for method chaining.
1:6ae169e:          */
1:6ae169e:         public Builder withRepetitions(int repetitions) {
1:6ae169e:             if (repetitions <= 0) {
1:6ae169e:                 throw new IllegalArgumentException("repetitions must be greater than zero");
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             this.repetitions = repetitions;
1:6ae169e:             return this;
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         /**
1:6ae169e:          * Specifies the number of times to run the test.
1:6ae169e:          *
1:6ae169e:          * @param untilFailure
1:6ae169e:          *      true if the test should run until a failure occurs.
1:6ae169e:          *
1:6ae169e:          * @return {@code this} for method chaining.
1:6ae169e:          */
1:6ae169e:         public Builder withRunUntilFailure(boolean untilFailure) {
1:6ae169e:             this.untilFailure = untilFailure;
1:6ae169e:             return this;
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         protected int getRepetitions() {
1:6ae169e:             return repetitions;
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         protected boolean isUntilFailure()  {
1:6ae169e:             return untilFailure;
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         /**
1:6ae169e:          * Builds a {@link RepeatStatement} instance using the values in this builder.
1:6ae169e:          *
1:6ae169e:          * @param next
1:6ae169e:          *      The statement instance to wrap with the newly create repeat statement.
1:6ae169e:          *
1:6ae169e:          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.
1:6ae169e:          */
1:6ae169e:         public RepeatStatement build(Statement next) {
1:6ae169e:             if (next == null) {
1:6ae169e:                 throw new NullPointerException("statement cannot be null");
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             return new RepeatStatement(this, next);
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         /**
1:6ae169e:          * Builds a {@link RepeatStatement} instance using the values in this builder.
1:6ae169e:          *
1:6ae169e:          * @param annotation
1:6ae169e:          *      The {@link Repeat} annotation that triggered this statement being created.
1:6ae169e:          * @param next
1:6ae169e:          *      The statement instance to wrap with the newly create repeat statement.
1:6ae169e:          *
1:6ae169e:          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.
1:6ae169e:          */
1:6ae169e:         public RepeatStatement build(Repeat annotation, Statement next) {
1:6ae169e:             if (next == null) {
1:6ae169e:                 throw new NullPointerException("statement cannot be null");
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             if (annotation == null) {
1:6ae169e:                 throw new NullPointerException("annotation cannot be null");
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             withRepetitions(annotation.repetitions());
1:6ae169e:             withRunUntilFailure(annotation.untilFailure());
1:6ae169e: 
1:6ae169e:             return new RepeatStatement(this, next);
1:6ae169e:         }
1:6ae169e:     }
1:6ae169e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6ae169e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import org.junit.runners.model.Statement;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public final class RepeatStatement extends Statement {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(RepeatStatement.class);
1: 
1:     private final int repetitions;
1:     private final boolean untilFailure;
1:     private final Statement statement;
1: 
1:     public static Builder builder() {
1:         return new Builder();
1:     }
1: 
1:     public RepeatStatement(int times, boolean untilFailure, Statement statement) {
1:         this.repetitions = times;
1:         this.untilFailure = untilFailure;
1:         this.statement = statement;
1:     }
1: 
1:     protected RepeatStatement(Builder builder, Statement next) {
1:         this.repetitions = builder.getRepetitions();
1:         this.untilFailure = builder.isUntilFailure();
1:         this.statement = next;
1:     }
1: 
1:     @Override
1:     public void evaluate() throws Throwable {
1:         for (int i = 0; i < repetitions && !untilFailure; i++) {
1:             if (untilFailure) {
1:                 LOG.info("Running test iteration: {}.", i + 1);
1:             } else {
1:                 LOG.info("Running test iteration: {} of configured repetitions: {}", i + 1, repetitions);
1:             }
1:             statement.evaluate();
1:         }
1:     }
1: 
1:     /**
1:      * Builder for {@link Repeat}.
1:      */
1:     public static class Builder {
1:         private int repetitions = 1;
1:         private boolean untilFailure = false;
1: 
1:         protected Builder() {}
1: 
1:         /**
1:          * Specifies the number of times to run the test.
1:          *
1:          * @param repetitions
1:          *      The number of times to run the test.
1:          *
1:          * @return {@code this} for method chaining.
1:          */
1:         public Builder withRepetitions(int repetitions) {
1:             if (repetitions <= 0) {
1:                 throw new IllegalArgumentException("repetitions must be greater than zero");
1:             }
1: 
1:             this.repetitions = repetitions;
1:             return this;
1:         }
1: 
1:         /**
1:          * Specifies the number of times to run the test.
1:          *
1:          * @param untilFailure
1:          *      true if the test should run until a failure occurs.
1:          *
1:          * @return {@code this} for method chaining.
1:          */
1:         public Builder withRunUntilFailure(boolean untilFailure) {
1:             this.untilFailure = untilFailure;
1:             return this;
1:         }
1: 
1:         protected int getRepetitions() {
1:             return repetitions;
1:         }
1: 
1:         protected boolean isUntilFailure()  {
1:             return untilFailure;
1:         }
1: 
1:         /**
1:          * Builds a {@link RepeatStatement} instance using the values in this builder.
1:          *
1:          * @param next
1:          *      The statement instance to wrap with the newly create repeat statement.
1:          *
1:          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.
1:          */
1:         public RepeatStatement build(Statement next) {
1:             if (next == null) {
1:                 throw new NullPointerException("statement cannot be null");
1:             }
1: 
1:             return new RepeatStatement(this, next);
1:         }
1: 
1:         /**
1:          * Builds a {@link RepeatStatement} instance using the values in this builder.
1:          *
1:          * @param annotation
1:          *      The {@link Repeat} annotation that triggered this statement being created.
1:          * @param next
1:          *      The statement instance to wrap with the newly create repeat statement.
1:          *
1:          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.
1:          */
1:         public RepeatStatement build(Repeat annotation, Statement next) {
1:             if (next == null) {
1:                 throw new NullPointerException("statement cannot be null");
1:             }
1: 
1:             if (annotation == null) {
1:                 throw new NullPointerException("annotation cannot be null");
1:             }
1: 
1:             withRepetitions(annotation.repetitions());
1:             withRunUntilFailure(annotation.untilFailure());
1: 
1:             return new RepeatStatement(this, next);
1:         }
1:     }
1: }
============================================================================