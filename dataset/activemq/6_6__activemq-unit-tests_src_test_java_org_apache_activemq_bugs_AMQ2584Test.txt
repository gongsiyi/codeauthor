1:815c2f3: /**
1:815c2f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:815c2f3:  * contributor license agreements.  See the NOTICE file distributed with
1:815c2f3:  * this work for additional information regarding copyright ownership.
1:815c2f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:815c2f3:  * (the "License"); you may not use this file except in compliance with
1:815c2f3:  * the License.  You may obtain a copy of the License at
1:815c2f3:  *
1:815c2f3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:815c2f3:  *
1:815c2f3:  * Unless required by applicable law or agreed to in writing, software
1:815c2f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:815c2f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:815c2f3:  * See the License for the specific language governing permissions and
1:815c2f3:  * limitations under the License.
1:815c2f3:  */
1:815c2f3: package org.apache.activemq.bugs;
3:815c2f3: 
1:f7f294f: import java.util.ArrayList;
1:f7f294f: import java.util.Collection;
1:f7f294f: import java.util.List;
1:815c2f3: import java.util.Properties;
1:815c2f3: import java.util.concurrent.CountDownLatch;
1:815c2f3: import java.util.concurrent.TimeUnit;
1:7b19989: 
1:815c2f3: import javax.jms.JMSException;
1:815c2f3: import javax.jms.Message;
1:815c2f3: import javax.jms.MessageConsumer;
1:815c2f3: import javax.jms.MessageListener;
1:815c2f3: import javax.jms.MessageProducer;
1:815c2f3: import javax.jms.Session;
1:7b19989: 
1:815c2f3: import org.apache.activemq.ActiveMQConnection;
1:815c2f3: import org.apache.activemq.ActiveMQConnectionFactory;
1:f7f294f: import org.apache.activemq.TestSupport;
1:815c2f3: import org.apache.activemq.broker.BrokerService;
1:815c2f3: import org.apache.activemq.broker.jmx.BrokerView;
1:815c2f3: import org.apache.activemq.command.ActiveMQQueue;
1:815c2f3: import org.apache.activemq.command.ActiveMQTopic;
1:815c2f3: import org.apache.activemq.store.PersistenceAdapter;
1:815c2f3: import org.apache.activemq.util.IntrospectionSupport;
1:815c2f3: import org.apache.activemq.util.Wait;
1:f7f294f: import org.junit.After;
1:f7f294f: import org.junit.Before;
1:f7f294f: import org.junit.Test;
1:f7f294f: import org.junit.runner.RunWith;
1:f7f294f: import org.junit.runners.Parameterized;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:7b19989: 
1:f7f294f: @RunWith(value = Parameterized.class)
1:815c2f3: public class AMQ2584Test extends org.apache.activemq.TestSupport {
1:815c2f3: 
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(AMQ2584Test.class);
1:815c2f3:     BrokerService broker = null;
1:815c2f3:     ActiveMQTopic topic;
1:815c2f3: 
1:815c2f3:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:815c2f3:     Session producerSession;
1:815c2f3:     MessageProducer producer;
1:be7cef6:     final int minPercentUsageForStore = 3;
1:815c2f3:     String data;
1:815c2f3: 
1:f7f294f:     private final TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1:f7f294f: 
1:9d76668:     @Parameterized.Parameters(name="{0}")
1:f7f294f:     public static Collection<TestSupport.PersistenceAdapterChoice[]> getTestParameters() {
1:f7f294f:         TestSupport.PersistenceAdapterChoice[] kahaDb = {TestSupport.PersistenceAdapterChoice.KahaDB};
1:f7f294f:         TestSupport.PersistenceAdapterChoice[] levelDb = {TestSupport.PersistenceAdapterChoice.LevelDB};
1:f7f294f:         List<TestSupport.PersistenceAdapterChoice[]> choices = new ArrayList<TestSupport.PersistenceAdapterChoice[]>();
1:f7f294f:         choices.add(kahaDb);
1:f7f294f:         choices.add(levelDb);
1:f7f294f: 
1:f7f294f:         return choices;
1:815c2f3:     }
1:815c2f3: 
1:f7f294f:     public AMQ2584Test(TestSupport.PersistenceAdapterChoice choice) {
1:f7f294f:         this.persistenceAdapterChoice = choice;
1:815c2f3:     }
1:815c2f3: 
1:f7f294f:     @Test(timeout = 120000)
1:815c2f3:     public void testSize() throws Exception {
1:be7cef6:         int messages = 1000;
1:d91bdc4:         CountDownLatch redeliveryConsumerLatch = new CountDownLatch((messages*3));
1:815c2f3:         openConsumer(redeliveryConsumerLatch);
1:815c2f3: 
1:815c2f3:         assertEquals(0, broker.getAdminView().getStorePercentUsage());
1:815c2f3: 
1:be7cef6:         for (int i = 0; i < messages; i++) {
1:815c2f3:             sendMessage(false);
1:815c2f3:         }
1:815c2f3: 
1:815c2f3:         final BrokerView brokerView = broker.getAdminView();
1:815c2f3: 
1:815c2f3:         broker.getSystemUsage().getStoreUsage().isFull();
1:815c2f3:         LOG.info("store percent usage: "+brokerView.getStorePercentUsage());
1:be7cef6:         int storePercentUsage = broker.getAdminView().getStorePercentUsage();
1:be7cef6:         assertTrue("some store in use", storePercentUsage > minPercentUsageForStore);
1:815c2f3: 
1:815c2f3:         assertTrue("redelivery consumer got all it needs", redeliveryConsumerLatch.await(60, TimeUnit.SECONDS));
1:815c2f3:         closeConsumer();
1:815c2f3: 
1:815c2f3:         // consume from DLQ
1:d91bdc4:         final CountDownLatch received = new CountDownLatch(messages);
1:815c2f3:         consumerConnection = (ActiveMQConnection) createConnection();
1:815c2f3:         Session dlqSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:815c2f3:         MessageConsumer dlqConsumer = dlqSession.createConsumer(new ActiveMQQueue("ActiveMQ.DLQ"));
1:815c2f3:         dlqConsumer.setMessageListener(new MessageListener() {
1:7b19989:             @Override
1:815c2f3:             public void onMessage(Message message) {
1:815c2f3:                 if (received.getCount() % 500 == 0) {
1:815c2f3:                     LOG.info("remaining on DLQ: " + received.getCount());
1:815c2f3:                 }
1:815c2f3:                 received.countDown();
1:815c2f3:             }
2:815c2f3:         });
1:815c2f3:         consumerConnection.start();
1:815c2f3: 
1:815c2f3:         assertTrue("Not all messages reached the DLQ", received.await(60, TimeUnit.SECONDS));
1:815c2f3: 
1:815c2f3:         assertTrue("Store usage exceeds expected usage",
1:815c2f3:                 Wait.waitFor(new Wait.Condition() {
1:7b19989:                     @Override
1:815c2f3:                     public boolean isSatisified() throws Exception {
1:815c2f3:                         broker.getSystemUsage().getStoreUsage().isFull();
1:815c2f3:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:815c2f3:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:815c2f3:                     }
1:815c2f3:                 }));
1:815c2f3: 
1:815c2f3:          closeConsumer();
1:815c2f3: 
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void openConsumer(final CountDownLatch latch) throws Exception {
1:815c2f3:         consumerConnection = (ActiveMQConnection) createConnection();
1:815c2f3:         consumerConnection.setClientID("cliID");
1:815c2f3:         consumerConnection.start();
1:815c2f3:         final Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:815c2f3: 
1:815c2f3:         MessageListener listener = new MessageListener() {
1:7b19989:             @Override
1:815c2f3:             public void onMessage(Message message) {
1:815c2f3:                 latch.countDown();
1:815c2f3:                 try {
1:815c2f3:                     session.recover();
1:815c2f3:                 } catch (Exception ignored) {
1:815c2f3:                     ignored.printStackTrace();
1:815c2f3:                 }
1:815c2f3: 
1:815c2f3:             }
1:815c2f3:         };
1:815c2f3: 
1:815c2f3:         session.createDurableSubscriber(topic, "subName1").setMessageListener(listener);
1:815c2f3:         session.createDurableSubscriber(topic, "subName2").setMessageListener(listener);
1:815c2f3:         session.createDurableSubscriber(topic, "subName3").setMessageListener(listener);
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void closeConsumer() throws JMSException {
1:815c2f3:         if (consumerConnection != null)
1:815c2f3:             consumerConnection.close();
1:815c2f3:         consumerConnection = null;
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void sendMessage(boolean filter) throws Exception {
1:815c2f3:         if (producerConnection == null) {
1:815c2f3:             producerConnection = (ActiveMQConnection) createConnection();
1:815c2f3:             producerConnection.start();
1:815c2f3:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:815c2f3:             producer = producerSession.createProducer(topic);
1:815c2f3:         }
1:815c2f3: 
1:815c2f3:         Message message = producerSession.createMessage();
1:815c2f3:         message.setStringProperty("data", data);
1:815c2f3:         producer.send(message);
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void startBroker(boolean deleteMessages) throws Exception {
1:815c2f3:         broker = new BrokerService();
1:815c2f3:         broker.setAdvisorySupport(false);
1:815c2f3:         broker.setBrokerName("testStoreSize");
1:815c2f3: 
1:815c2f3:         if (deleteMessages) {
1:815c2f3:             broker.setDeleteAllMessagesOnStartup(true);
1:815c2f3:         }
1:f7f294f:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:f7f294f:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:815c2f3:         configurePersistenceAdapter(broker.getPersistenceAdapter());
1:815c2f3:         broker.getSystemUsage().getStoreUsage().setLimit(200 * 1000 * 1000);
1:815c2f3:         broker.start();
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void configurePersistenceAdapter(PersistenceAdapter persistenceAdapter) {
1:815c2f3:         Properties properties = new Properties();
1:815c2f3:         String maxFileLengthVal = String.valueOf(1 * 1024 * 1024);
1:815c2f3:         properties.put("journalMaxFileLength", maxFileLengthVal);
1:815c2f3:         properties.put("maxFileLength", maxFileLengthVal);
1:815c2f3:         properties.put("cleanupInterval", "2000");
1:815c2f3:         properties.put("checkpointInterval", "2000");
1:815c2f3: 
1:815c2f3:         IntrospectionSupport.setProperties(persistenceAdapter, properties);
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     private void stopBroker() throws Exception {
1:815c2f3:         if (broker != null)
1:815c2f3:             broker.stop();
1:815c2f3:         broker = null;
1:815c2f3:     }
1:815c2f3: 
1:7b19989:     @Override
1:815c2f3:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:3a26442:         return new ActiveMQConnectionFactory("vm://testStoreSize?jms.watchTopicAdvisories=false&jms.redeliveryPolicy.maximumRedeliveries=0&jms.closeTimeout=60000&waitForStart=5000&create=false");
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     @Override
1:f7f294f:     @Before
1:f7f294f:     public void setUp() throws Exception {
1:815c2f3:         StringBuilder sb = new StringBuilder(5000);
2:815c2f3:         for (int i = 0; i < 5000; i++) {
1:815c2f3:             sb.append('a');
1:815c2f3:         }
1:815c2f3:         data = sb.toString();
1:815c2f3: 
1:815c2f3:         startBroker(true);
1:815c2f3:         topic = (ActiveMQTopic) createDestination();
1:815c2f3:     }
1:815c2f3: 
1:815c2f3:     @Override
1:f7f294f:     @After
1:f7f294f:     public void tearDown() throws Exception {
1:815c2f3:         stopBroker();
1:815c2f3:     }
1:815c2f3: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:d91bdc4
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch redeliveryConsumerLatch = new CountDownLatch((messages*3));
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch received = new CountDownLatch(messages);
author:gtully
-------------------------------------------------------------------------------
commit:9d76668
/////////////////////////////////////////////////////////////////////////
1:     @Parameterized.Parameters(name="{0}")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:be7cef6
/////////////////////////////////////////////////////////////////////////
1:     final int minPercentUsageForStore = 3;
/////////////////////////////////////////////////////////////////////////
1:         int messages = 1000;
0:         CountDownLatch redeliveryConsumerLatch = new CountDownLatch((messages*3) -1);
1:         for (int i = 0; i < messages; i++) {
/////////////////////////////////////////////////////////////////////////
1:         int storePercentUsage = broker.getAdminView().getStorePercentUsage();
1:         assertTrue("some store in use", storePercentUsage > minPercentUsageForStore);
0:         final CountDownLatch received = new CountDownLatch(messages -1);
commit:77a679b
/////////////////////////////////////////////////////////////////////////
0:                         PersistenceAdapterChoice.LevelDB,
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f7f294f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:     private final TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1: 
0:     @Parameterized.Parameters
1:     public static Collection<TestSupport.PersistenceAdapterChoice[]> getTestParameters() {
1:         TestSupport.PersistenceAdapterChoice[] kahaDb = {TestSupport.PersistenceAdapterChoice.KahaDB};
1:         TestSupport.PersistenceAdapterChoice[] levelDb = {TestSupport.PersistenceAdapterChoice.LevelDB};
1:         List<TestSupport.PersistenceAdapterChoice[]> choices = new ArrayList<TestSupport.PersistenceAdapterChoice[]>();
1:         choices.add(kahaDb);
1:         choices.add(levelDb);
1: 
1:         return choices;
1:     public AMQ2584Test(TestSupport.PersistenceAdapterChoice choice) {
1:         this.persistenceAdapterChoice = choice;
1:     @Test(timeout = 120000)
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
commit:48effa8
/////////////////////////////////////////////////////////////////////////
0:                         PersistenceAdapterChoice.LevelDB,
commit:7b19989
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:                         //PersistenceAdapterChoice.LevelDB,  TODO readd and investiaget failures.
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:3a26442
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory("vm://testStoreSize?jms.watchTopicAdvisories=false&jms.redeliveryPolicy.maximumRedeliveries=0&jms.closeTimeout=60000&waitForStart=5000&create=false");
commit:c5da5f8
/////////////////////////////////////////////////////////////////////////
0:                         PersistenceAdapterChoice.AMQ,
commit:815c2f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.Properties;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class AMQ2584Test extends org.apache.activemq.TestSupport {
1: 
0:     static final Log LOG = LogFactory.getLog(AMQ2584Test.class);
1:     BrokerService broker = null;
1:     ActiveMQTopic topic;
1: 
1:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:     Session producerSession;
1:     MessageProducer producer;
0:     final int minPercentUsageForStore = 10;
1:     String data;
1: 
0:     public static Test suite() {
0:         return suite(AMQ2584Test.class);
1:     }
1: 
0:     public void initCombosForTestSize() throws Exception {
0:         this.addCombinationValues("defaultPersistenceAdapter",
0:                 new Object[]{
0:                         // PersistenceAdapterChoice.AMQ,
0:                         PersistenceAdapterChoice.KahaDB
1:                 });
1:     }
1: 
1:     public void testSize() throws Exception {
0:         CountDownLatch redeliveryConsumerLatch = new CountDownLatch(15000 -1);
1:         openConsumer(redeliveryConsumerLatch);
1: 
1:         assertEquals(0, broker.getAdminView().getStorePercentUsage());
1: 
1:         for (int i = 0; i < 5000; i++) {
1:             sendMessage(false);
1:         }
1: 
1:         final BrokerView brokerView = broker.getAdminView();
1: 
1:         broker.getSystemUsage().getStoreUsage().isFull();
1:         LOG.info("store percent usage: "+brokerView.getStorePercentUsage());
0:         assertTrue("some store in use", broker.getAdminView().getStorePercentUsage() > minPercentUsageForStore);
1: 
1:         assertTrue("redelivery consumer got all it needs", redeliveryConsumerLatch.await(60, TimeUnit.SECONDS));
1:         closeConsumer();
1: 
1:         // consume from DLQ
0:         final CountDownLatch received = new CountDownLatch(5000 -1);
1:         consumerConnection = (ActiveMQConnection) createConnection();
1:         Session dlqSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer dlqConsumer = dlqSession.createConsumer(new ActiveMQQueue("ActiveMQ.DLQ"));
1:         dlqConsumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 if (received.getCount() % 500 == 0) {
1:                     LOG.info("remaining on DLQ: " + received.getCount());
1:                 }
1:                 received.countDown();
1:             }
1:         });
1:         consumerConnection.start();
1: 
1:         assertTrue("Not all messages reached the DLQ", received.await(60, TimeUnit.SECONDS));
1: 
1:         assertTrue("Store usage exceeds expected usage",
1:                 Wait.waitFor(new Wait.Condition() {
1:                     public boolean isSatisified() throws Exception {
1:                         broker.getSystemUsage().getStoreUsage().isFull();
1:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:                     }
1:                 }));
1: 
1:          closeConsumer();
1: 
1:     }
1: 
1:     private void openConsumer(final CountDownLatch latch) throws Exception {
1:         consumerConnection = (ActiveMQConnection) createConnection();
1:         consumerConnection.setClientID("cliID");
1:         consumerConnection.start();
1:         final Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageListener listener = new MessageListener() {
1:             public void onMessage(Message message) {
1:                 latch.countDown();
1:                 try {
1:                     session.recover();
1:                 } catch (Exception ignored) {
1:                     ignored.printStackTrace();
1:                 }
1: 
1:             }
1:         };
1: 
1:         session.createDurableSubscriber(topic, "subName1").setMessageListener(listener);
1:         session.createDurableSubscriber(topic, "subName2").setMessageListener(listener);
1:         session.createDurableSubscriber(topic, "subName3").setMessageListener(listener);
1:     }
1: 
1:     private void closeConsumer() throws JMSException {
1:         if (consumerConnection != null)
1:             consumerConnection.close();
1:         consumerConnection = null;
1:     }
1: 
1:     private void sendMessage(boolean filter) throws Exception {
1:         if (producerConnection == null) {
1:             producerConnection = (ActiveMQConnection) createConnection();
1:             producerConnection.start();
1:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = producerSession.createProducer(topic);
1:         }
1: 
1:         Message message = producerSession.createMessage();
1:         message.setStringProperty("data", data);
1:         producer.send(message);
1:     }
1: 
1:     private void startBroker(boolean deleteMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setAdvisorySupport(false);
1:         broker.setBrokerName("testStoreSize");
1: 
1:         if (deleteMessages) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
0:         setDefaultPersistenceAdapter(broker);
1:         configurePersistenceAdapter(broker.getPersistenceAdapter());
1:         broker.getSystemUsage().getStoreUsage().setLimit(200 * 1000 * 1000);
1:         broker.start();
1:     }
1: 
1:     private void configurePersistenceAdapter(PersistenceAdapter persistenceAdapter) {
1:         Properties properties = new Properties();
1:         String maxFileLengthVal = String.valueOf(1 * 1024 * 1024);
1:         properties.put("journalMaxFileLength", maxFileLengthVal);
1:         properties.put("maxFileLength", maxFileLengthVal);
1:         properties.put("cleanupInterval", "2000");
1:         properties.put("checkpointInterval", "2000");
1: 
1:         IntrospectionSupport.setProperties(persistenceAdapter, properties);
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory("vm://testStoreSize?jms.watchTopicAdvisories=false&jms.redeliveryPolicy.maximumRedeliveries=0&waitForStart=5000&create=false");
1:     }
1: 
1:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
1:         StringBuilder sb = new StringBuilder(5000);
1:         for (int i = 0; i < 5000; i++) {
1:             sb.append('a');
1:         }
1:         data = sb.toString();
1: 
1:         startBroker(true);
1:         topic = (ActiveMQTopic) createDestination();
1:     }
1: 
1:     @Override
0:     protected void tearDown() throws Exception {
1:         stopBroker();
0:         super.tearDown();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ2584Test.class);
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================