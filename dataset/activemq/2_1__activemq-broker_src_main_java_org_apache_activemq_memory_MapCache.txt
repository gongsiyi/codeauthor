1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
1:d29ca2a: 
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:86cbdfd: import java.util.concurrent.ConcurrentHashMap;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Use any Map to implement the Cache.  No cache eviction going on here.  Just gives
1:d29ca2a:  * a Map a Cache interface.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class MapCache implements Cache {
1:d29ca2a:     
1:ecf89a6:     protected final Map<Object, Object> map;
1:d29ca2a:     
1:d29ca2a:     public MapCache() {
1:933eb2f:         this(new ConcurrentHashMap<Object, Object>());
1:d29ca2a:     }
1:d29ca2a:     
1:ecf89a6:     public MapCache(Map<Object, Object> map) {
1:d29ca2a:         this.map = map;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object put(Object key, Object value) {
1:d29ca2a:         return map.put(key, value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object get(Object key) {
1:d29ca2a:         return map.get(key);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object remove(Object key) {
1:d29ca2a:         return map.remove(key);
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     public void close() {
1:d29ca2a:         map.clear();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int size() {
1:d29ca2a:         return map.size();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         this(new ConcurrentHashMap<Object, Object>());
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     protected final Map<Object, Object> map;
1:     public MapCache(Map<Object, Object> map) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
1: import java.util.Map;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  * Use any Map to implement the Cache.  No cache eviction going on here.  Just gives
1:  * a Map a Cache interface.
1:  * 
0:  * @version $Revision$
1:  */
1: public class MapCache implements Cache {
1:     
0:     protected final Map map;
1:     
1:     public MapCache() {
0:         this(new ConcurrentHashMap());
1:     }
1:     
0:     public MapCache(Map map) {
1:         this.map = map;
1:     }
1: 
1:     public Object put(Object key, Object value) {
1:         return map.put(key, value);
1:     }
1: 
1:     public Object get(Object key) {
1:         return map.get(key);
1:     }
1: 
1:     public Object remove(Object key) {
1:         return map.remove(key);
1:     }
1:     
1:     public void close() {
1:         map.clear();
1:     }
1: 
1:     public int size() {
1:         return map.size();
1:     }
1: }
============================================================================