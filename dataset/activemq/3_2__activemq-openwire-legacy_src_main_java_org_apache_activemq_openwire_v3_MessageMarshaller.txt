1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
8:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
7:885c379: 
1:885c379: package org.apache.activemq.openwire.v3;
1:885c379: 
1:885c379: import java.io.DataInput;
1:885c379: import java.io.DataOutput;
1:885c379: import java.io.IOException;
1:885c379: 
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.command.Message;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:885c379: 
1:885c379: /**
1:74a7a8b:  * Marshalling code for Open Wire Format for MessageMarshaller NOTE!: This file
1:74a7a8b:  * is auto generated - do not modify! if you need to make a change, please see
1:74a7a8b:  * the modify the groovy scripts in the under src/gram/script and then use maven
1:74a7a8b:  * openwire:generate to regenerate this file.
1:b0c2a40:  * 
1:74a7a8b:  * 
1:885c379:  */
1:885c379: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1:885c379: 
1:885c379:     /**
1:885c379:      * Un-marshal an object instance from the data input stream
1:74a7a8b:      * 
1:885c379:      * @param o the object to un-marshal
1:885c379:      * @param dataIn the data input stream to build the object from
1:885c379:      * @throws IOException
1:885c379:      */
1:885c379:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:885c379:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:885c379: 
1:885c379:         Message info = (Message)o;
1:885c379: 
1:885c379:         info.beforeUnmarshall(wireFormat);
1:74a7a8b: 
1:74a7a8b:         info.setProducerId((org.apache.activemq.command.ProducerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setMessageId((org.apache.activemq.command.MessageId)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:885c379:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:885c379:         info.setGroupSequence(dataIn.readInt());
1:885c379:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:885c379:         info.setPersistent(bs.readBoolean());
1:885c379:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
1:885c379:         info.setPriority(dataIn.readByte());
1:74a7a8b:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:885c379:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:885c379:         info.setType(tightUnmarshalString(dataIn, bs));
1:885c379:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:885c379:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
1:74a7a8b:         info.setDataStructure((org.apache.activemq.command.DataStructure)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:885c379:         info.setCompressed(bs.readBoolean());
1:885c379:         info.setRedeliveryCounter(dataIn.readInt());
1:74a7a8b: 
1:885c379:         if (bs.readBoolean()) {
1:885c379:             short size = dataIn.readShort();
1:885c379:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
5:885c379:             }
1:885c379:             info.setBrokerPath(value);
1:74a7a8b:         } else {
1:885c379:             info.setBrokerPath(null);
1:885c379:         }
1:885c379:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:885c379:         info.setUserID(tightUnmarshalString(dataIn, bs));
1:885c379:         info.setRecievedByDFBridge(bs.readBoolean());
1:885c379:         info.setDroppable(bs.readBoolean());
1:885c379: 
1:8ec100f:         if (bs.readBoolean()) {
1:8ec100f:             short size = dataIn.readShort();
1:8ec100f:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
1:8ec100f:             }
1:8ec100f:             info.setCluster(value);
1:74a7a8b:         } else {
1:8ec100f:             info.setCluster(null);
1:8ec100f:         }
1:b3eb9a5:         info.setBrokerInTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:b3eb9a5:         info.setBrokerOutTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:8ec100f: 
1:885c379:         info.afterUnmarshall(wireFormat);
1:885c379: 
1:8ec100f:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * Write the booleans that this object uses to a BooleanStream
1:885c379:      */
1:885c379:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:885c379: 
1:885c379:         Message info = (Message)o;
1:885c379: 
1:885c379:         info.beforeMarshall(wireFormat);
1:885c379: 
1:885c379:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:885c379:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:885c379:         rc += tightMarshalString1(info.getGroupID(), bs);
1:885c379:         rc += tightMarshalString1(info.getCorrelationId(), bs);
1:885c379:         bs.writeBoolean(info.isPersistent());
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:885c379:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:885c379:         rc += tightMarshalString1(info.getType(), bs);
1:885c379:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:885c379:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:885c379:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:885c379:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:885c379:         bs.writeBoolean(info.isCompressed());
1:885c379:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:885c379:         rc += tightMarshalString1(info.getUserID(), bs);
1:885c379:         bs.writeBoolean(info.isRecievedByDFBridge());
1:885c379:         bs.writeBoolean(info.isDroppable());
1:8ec100f:         rc += tightMarshalObjectArray1(wireFormat, info.getCluster(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getBrokerInTime(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getBrokerOutTime(), bs);
1:885c379: 
1:885c379:         return rc + 9;
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * Write a object instance to data output stream
1:74a7a8b:      * 
1:885c379:      * @param o the instance to be marshaled
1:885c379:      * @param dataOut the output stream
1:885c379:      * @throws IOException thrown if an error occurs
1:885c379:      */
1:885c379:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:885c379:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:885c379: 
1:885c379:         Message info = (Message)o;
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:885c379:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:885c379:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:885c379:         dataOut.writeInt(info.getGroupSequence());
1:885c379:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:885c379:         bs.readBoolean();
1:885c379:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:885c379:         dataOut.writeByte(info.getPriority());
1:885c379:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:885c379:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:885c379:         tightMarshalString2(info.getType(), dataOut, bs);
1:885c379:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:885c379:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:885c379:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:885c379:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:885c379:         bs.readBoolean();
1:885c379:         dataOut.writeInt(info.getRedeliveryCounter());
1:885c379:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:885c379:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:885c379:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:885c379:         bs.readBoolean();
1:885c379:         bs.readBoolean();
1:8ec100f:         tightMarshalObjectArray2(wireFormat, info.getCluster(), dataOut, bs);
1:b3eb9a5:         tightMarshalLong2(wireFormat, info.getBrokerInTime(), dataOut, bs);
1:b3eb9a5:         tightMarshalLong2(wireFormat, info.getBrokerOutTime(), dataOut, bs);
1:885c379: 
1:885c379:         info.afterMarshall(wireFormat);
1:885c379: 
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * Un-marshal an object instance from the data input stream
1:74a7a8b:      * 
1:885c379:      * @param o the object to un-marshal
1:885c379:      * @param dataIn the data input stream to build the object from
1:885c379:      * @throws IOException
1:885c379:      */
1:885c379:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:885c379:         super.looseUnmarshal(wireFormat, o, dataIn);
1:885c379: 
1:885c379:         Message info = (Message)o;
1:885c379: 
1:885c379:         info.beforeUnmarshall(wireFormat);
1:885c379: 
1:74a7a8b:         info.setProducerId((org.apache.activemq.command.ProducerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setMessageId((org.apache.activemq.command.MessageId)looseUnmarsalNestedObject(wireFormat, dataIn));
1:74a7a8b:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:885c379:         info.setGroupID(looseUnmarshalString(dataIn));
1:885c379:         info.setGroupSequence(dataIn.readInt());
1:885c379:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:885c379:         info.setPersistent(dataIn.readBoolean());
1:885c379:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:885c379:         info.setPriority(dataIn.readByte());
1:74a7a8b:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalNestedObject(wireFormat, dataIn));
1:885c379:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:885c379:         info.setType(looseUnmarshalString(dataIn));
1:885c379:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:885c379:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
1:74a7a8b:         info.setDataStructure((org.apache.activemq.command.DataStructure)looseUnmarsalNestedObject(wireFormat, dataIn));
1:74a7a8b:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:885c379:         info.setCompressed(dataIn.readBoolean());
1:885c379:         info.setRedeliveryCounter(dataIn.readInt());
1:885c379: 
1:885c379:         if (dataIn.readBoolean()) {
1:885c379:             short size = dataIn.readShort();
1:885c379:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:8ec100f:             }
1:885c379:             info.setBrokerPath(value);
1:74a7a8b:         } else {
1:885c379:             info.setBrokerPath(null);
1:885c379:         }
1:885c379:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:885c379:         info.setUserID(looseUnmarshalString(dataIn));
1:885c379:         info.setRecievedByDFBridge(dataIn.readBoolean());
1:885c379:         info.setDroppable(dataIn.readBoolean());
1:8ec100f: 
1:8ec100f:         if (dataIn.readBoolean()) {
1:8ec100f:             short size = dataIn.readShort();
1:8ec100f:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:8ec100f:             }
1:8ec100f:             info.setCluster(value);
1:74a7a8b:         } else {
1:8ec100f:             info.setCluster(null);
1:8ec100f:         }
1:b3eb9a5:         info.setBrokerInTime(looseUnmarshalLong(wireFormat, dataIn));
1:b3eb9a5:         info.setBrokerOutTime(looseUnmarshalLong(wireFormat, dataIn));
1:885c379: 
1:885c379:         info.afterUnmarshall(wireFormat);
1:885c379: 
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * Write the booleans that this object uses to a BooleanStream
1:885c379:      */
1:885c379:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:885c379: 
1:885c379:         Message info = (Message)o;
1:885c379: 
1:885c379:         info.beforeMarshall(wireFormat);
1:885c379: 
1:885c379:         super.looseMarshal(wireFormat, o, dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:885c379:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:885c379:         looseMarshalString(info.getGroupID(), dataOut);
1:885c379:         dataOut.writeInt(info.getGroupSequence());
1:885c379:         looseMarshalString(info.getCorrelationId(), dataOut);
1:885c379:         dataOut.writeBoolean(info.isPersistent());
1:885c379:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:885c379:         dataOut.writeByte(info.getPriority());
1:885c379:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:885c379:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:885c379:         looseMarshalString(info.getType(), dataOut);
1:885c379:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:885c379:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:885c379:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:885c379:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:885c379:         dataOut.writeBoolean(info.isCompressed());
1:885c379:         dataOut.writeInt(info.getRedeliveryCounter());
1:885c379:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:885c379:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:885c379:         looseMarshalString(info.getUserID(), dataOut);
1:885c379:         dataOut.writeBoolean(info.isRecievedByDFBridge());
1:885c379:         dataOut.writeBoolean(info.isDroppable());
1:8ec100f:         looseMarshalObjectArray(wireFormat, info.getCluster(), dataOut);
1:b3eb9a5:         looseMarshalLong(wireFormat, info.getBrokerInTime(), dataOut);
1:b3eb9a5:         looseMarshalLong(wireFormat, info.getBrokerOutTime(), dataOut);
1:885c379: 
1:885c379:     }
1:885c379: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9c39f4e
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
1:  * Marshalling code for Open Wire Format for MessageMarshaller NOTE!: This file
1:  * is auto generated - do not modify! if you need to make a change, please see
1:  * the modify the groovy scripts in the under src/gram/script and then use maven
1:  * openwire:generate to regenerate this file.
1:  * 
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:         info.setProducerId((org.apache.activemq.command.ProducerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setMessageId((org.apache.activemq.command.MessageId)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
1:         } else {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:         rc += tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:         rc += tightMarshalLong1(wireFormat, info.getBrokerInTime(), bs);
1:         rc += tightMarshalLong1(wireFormat, info.getBrokerOutTime(), bs);
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:         info.setProducerId((org.apache.activemq.command.ProducerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setMessageId((org.apache.activemq.command.MessageId)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:         } else {
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:8ec100f
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:             }
1:             info.setCluster(value);
1:         }
0:         else {
1:             info.setCluster(null);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalObjectArray1(wireFormat, info.getCluster(), bs);
/////////////////////////////////////////////////////////////////////////
1:         tightMarshalObjectArray2(wireFormat, info.getCluster(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setCluster(value);
1:         }
0:         else {
1:             info.setCluster(null);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         looseMarshalObjectArray(wireFormat, info.getCluster(), dataOut);
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v3;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
0:  * Marshalling code for Open Wire Format for MessageMarshaller
1:  *
1:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
0:         info.setProducerId((org.apache.activemq.command.ProducerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:         info.setGroupSequence(dataIn.readInt());
1:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:         info.setPersistent(bs.readBoolean());
1:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setPriority(dataIn.readByte());
0:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setType(tightUnmarshalString(dataIn, bs));
1:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
0:         info.setDataStructure((org.apache.activemq.command.DataStructure) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setCompressed(bs.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1: 
1:         if (bs.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:             }
1:             info.setBrokerPath(value);
1:         }
0:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setUserID(tightUnmarshalString(dataIn, bs));
1:         info.setRecievedByDFBridge(bs.readBoolean());
1:         info.setDroppable(bs.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:         rc += tightMarshalString1(info.getGroupID(), bs);
1:         rc += tightMarshalString1(info.getCorrelationId(), bs);
1:         bs.writeBoolean(info.isPersistent());
0:         rc+=tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
0:         rc+=tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:         rc += tightMarshalString1(info.getType(), bs);
1:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:         bs.writeBoolean(info.isCompressed());
1:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
0:         rc+=tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:         rc += tightMarshalString1(info.getUserID(), bs);
1:         bs.writeBoolean(info.isRecievedByDFBridge());
1:         bs.writeBoolean(info.isDroppable());
1: 
1:         return rc + 9;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         Message info = (Message)o;
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:         dataOut.writeInt(info.getGroupSequence());
1:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:         bs.readBoolean();
1:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:         dataOut.writeByte(info.getPriority());
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:         tightMarshalString2(info.getType(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:         bs.readBoolean();
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:         bs.readBoolean();
1:         bs.readBoolean();
1: 
1:         info.afterMarshall(wireFormat);
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
0:         info.setProducerId((org.apache.activemq.command.ProducerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setGroupID(looseUnmarshalString(dataIn));
1:         info.setGroupSequence(dataIn.readInt());
1:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:         info.setPersistent(dataIn.readBoolean());
1:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setPriority(dataIn.readByte());
0:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setType(looseUnmarshalString(dataIn));
1:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
0:         info.setDataStructure((org.apache.activemq.command.DataStructure) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setCompressed(dataIn.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setBrokerPath(value);
1:         }
0:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setUserID(looseUnmarshalString(dataIn));
1:         info.setRecievedByDFBridge(dataIn.readBoolean());
1:         info.setDroppable(dataIn.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:         looseMarshalString(info.getGroupID(), dataOut);
1:         dataOut.writeInt(info.getGroupSequence());
1:         looseMarshalString(info.getCorrelationId(), dataOut);
1:         dataOut.writeBoolean(info.isPersistent());
1:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:         dataOut.writeByte(info.getPriority());
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:         looseMarshalString(info.getType(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:         dataOut.writeBoolean(info.isCompressed());
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:         looseMarshalString(info.getUserID(), dataOut);
1:         dataOut.writeBoolean(info.isRecievedByDFBridge());
1:         dataOut.writeBoolean(info.isDroppable());
1: 
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:b3eb9a5
/////////////////////////////////////////////////////////////////////////
1:         info.setBrokerInTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setBrokerOutTime(tightUnmarshalLong(wireFormat, dataIn, bs));
/////////////////////////////////////////////////////////////////////////
0:         rc+=tightMarshalLong1(wireFormat, info.getBrokerInTime(), bs);
0:         rc+=tightMarshalLong1(wireFormat, info.getBrokerOutTime(), bs);
/////////////////////////////////////////////////////////////////////////
1:         tightMarshalLong2(wireFormat, info.getBrokerInTime(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getBrokerOutTime(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
1:         info.setBrokerInTime(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setBrokerOutTime(looseUnmarshalLong(wireFormat, dataIn));
/////////////////////////////////////////////////////////////////////////
1:         looseMarshalLong(wireFormat, info.getBrokerInTime(), dataOut);
1:         looseMarshalLong(wireFormat, info.getBrokerOutTime(), dataOut);
author:James Strachan
-------------------------------------------------------------------------------
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
0: /**
============================================================================