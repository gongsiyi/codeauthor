1:fc00993: /**
1:8cf4795:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8cf4795:  * contributor license agreements.  See the NOTICE file distributed with
1:8cf4795:  * this work for additional information regarding copyright ownership.
1:8cf4795:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8cf4795:  * (the "License"); you may not use this file except in compliance with
1:8cf4795:  * the License.  You may obtain a copy of the License at
1:8cf4795:  *
1:8cf4795:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8cf4795:  *
1:8cf4795:  * Unless required by applicable law or agreed to in writing, software
1:8cf4795:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8cf4795:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8cf4795:  * See the License for the specific language governing permissions and
1:8cf4795:  * limitations under the License.
1:8cf4795:  */
1:8cf4795: package org.apache.activemq.openwire.v3;
5:8cf4795: 
1:74a7a8b: import java.io.DataInput;
1:74a7a8b: import java.io.DataOutput;
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.lang.reflect.Constructor;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:8cf4795: import org.apache.activemq.openwire.DataStreamMarshaller;
1:8cf4795: import org.apache.activemq.openwire.OpenWireFormat;
1:8cf4795: import org.apache.activemq.util.ByteSequence;
1:8cf4795: 
1:fc00993: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {
1:8cf4795: 
1:fc00993:     public static final Constructor STACK_TRACE_ELEMENT_CONSTRUCTOR;
1:8cf4795: 
1:8cf4795:     static {
1:f812e34:         Constructor constructor = null;
1:8cf4795:         try {
1:933eb2f:             constructor = StackTraceElement.class.getConstructor(new Class[] {String.class, String.class,
1:933eb2f:                                                                               String.class, int.class});
1:8cf4795:         } catch (Throwable e) {
1:8cf4795:         }
1:8cf4795:         STACK_TRACE_ELEMENT_CONSTRUCTOR = constructor;
1:8cf4795:     }
1:f812e34: 
1:fc00993:     public abstract byte getDataStructureType();
1:8cf4795: 
1:fc00993:     public abstract DataStructure createObject();
1:8cf4795: 
1:8cf4795:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:8cf4795:         return 0;
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs)
1:933eb2f:         throws IOException {
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs)
1:933eb2f:         throws IOException {
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public int tightMarshalLong1(OpenWireFormat wireFormat, long o, BooleanStream bs) throws IOException {
1:f812e34:         if (o == 0) {
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             return 0;
1:74a7a8b:         } else if ((o & 0xFFFFFFFFFFFF0000L) == 0) {
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             return 2;
1:74a7a8b:         } else if ((o & 0xFFFFFFFF00000000L) == 0) {
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             return 4;
1:8cf4795:         } else {
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             return 8;
1:8cf4795:         }
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     public void tightMarshalLong2(OpenWireFormat wireFormat, long o, DataOutput dataOut, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 dataOut.writeLong(o);
1:8cf4795:             } else {
1:f812e34:                 dataOut.writeInt((int)o);
1:8cf4795:             }
1:8cf4795:         } else {
1:f812e34:             if (bs.readBoolean()) {
1:f812e34:                 dataOut.writeShort((int)o);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     public long tightUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 return dataIn.readLong();
1:8cf4795:             } else {
1:8cf4795:                 return toLong(dataIn.readInt());
1:8cf4795:             }
1:8cf4795:         } else {
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 return toLong(dataIn.readShort());
1:8cf4795:             } else {
1:8cf4795:                 return 0;
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected long toLong(short value) {
1:8cf4795:         // lets handle negative values
1:8cf4795:         long answer = value;
1:8cf4795:         return answer & 0xffffL;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected long toLong(int value) {
1:8cf4795:         // lets handle negative values
1:8cf4795:         long answer = value;
1:8cf4795:         return answer & 0xffffffffL;
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected DataStructure tightUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn,
1:933eb2f:                                                       BooleanStream bs) throws IOException {
1:8cf4795:         return wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected int tightMarshalNestedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs)
1:933eb2f:         throws IOException {
1:8cf4795:         return wireFormat.tightMarshalNestedObject1(o, bs);
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected void tightMarshalNestedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut,
1:933eb2f:                                              BooleanStream bs) throws IOException {
1:8cf4795:         wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected DataStructure tightUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn,
1:933eb2f:                                                       BooleanStream bs) throws IOException {
1:f812e34:         if (wireFormat.isCacheEnabled()) {
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 short index = dataIn.readShort();
1:8cf4795:                 DataStructure object = wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:8cf4795:                 wireFormat.setInUnmarshallCache(index, object);
1:8cf4795:                 return object;
1:8cf4795:             } else {
1:8cf4795:                 short index = dataIn.readShort();
1:8cf4795:                 return wireFormat.getFromUnmarshallCache(index);
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             return wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected int tightMarshalCachedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (wireFormat.isCacheEnabled()) {
1:8cf4795:             Short index = wireFormat.getMarshallCacheIndex(o);
1:8cf4795:             bs.writeBoolean(index == null);
1:f812e34:             if (index == null) {
1:8cf4795:                 int rc = wireFormat.tightMarshalNestedObject1(o, bs);
1:8cf4795:                 wireFormat.addToMarshallCache(o);
1:f812e34:                 return 2 + rc;
1:8cf4795:             } else {
1:8cf4795:                 return 2;
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             return wireFormat.tightMarshalNestedObject1(o, bs);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void tightMarshalCachedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut,
1:933eb2f:                                              BooleanStream bs) throws IOException {
1:f812e34:         if (wireFormat.isCacheEnabled()) {
1:8cf4795:             Short index = wireFormat.getMarshallCacheIndex(o);
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 dataOut.writeShort(index.shortValue());
1:8cf4795:                 wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:8cf4795:             } else {
1:8cf4795:                 dataOut.writeShort(index.shortValue());
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected Throwable tightUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:f812e34:             String clazz = tightUnmarshalString(dataIn, bs);
1:8cf4795:             String message = tightUnmarshalString(dataIn, bs);
1:8cf4795:             Throwable o = createThrowable(clazz, message);
1:f812e34:             if (wireFormat.isStackTraceEnabled()) {
1:f812e34:                 if (STACK_TRACE_ELEMENT_CONSTRUCTOR != null) {
1:8cf4795:                     StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];
1:8cf4795:                     for (int i = 0; i < ss.length; i++) {
1:8cf4795:                         try {
1:933eb2f:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR
1:933eb2f:                                 .newInstance(new Object[] {tightUnmarshalString(dataIn, bs),
1:933eb2f:                                                            tightUnmarshalString(dataIn, bs),
1:933eb2f:                                                            tightUnmarshalString(dataIn, bs),
1:933eb2f:                                                            Integer.valueOf(dataIn.readInt())});
1:8cf4795:                         } catch (IOException e) {
1:8cf4795:                             throw e;
1:8cf4795:                         } catch (Throwable e) {
1:8cf4795:                         }
1:8cf4795:                     }
1:8cf4795:                     o.setStackTrace(ss);
1:8cf4795:                 } else {
1:8cf4795:                     short size = dataIn.readShort();
1:8cf4795:                     for (int i = 0; i < size; i++) {
1:8cf4795:                         tightUnmarshalString(dataIn, bs);
1:8cf4795:                         tightUnmarshalString(dataIn, bs);
1:8cf4795:                         tightUnmarshalString(dataIn, bs);
1:8cf4795:                         dataIn.readInt();
1:8cf4795:                     }
1:8cf4795:                 }
1:8cf4795:                 o.initCause(tightUnmarsalThrowable(wireFormat, dataIn, bs));
1:8cf4795: 
1:8cf4795:             }
1:8cf4795:             return o;
1:8cf4795:         } else {
1:8cf4795:             return null;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     private Throwable createThrowable(String className, String message) {
1:8cf4795:         try {
1:27c87d2:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());
1:f812e34:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});
1:f812e34:             return (Throwable)constructor.newInstance(new Object[] {message});
1:8cf4795:         } catch (Throwable e) {
1:f812e34:             return new Throwable(className + ": " + message);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected int tightMarshalThrowable1(OpenWireFormat wireFormat, Throwable o, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (o == null) {
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             return 0;
1:8cf4795:         } else {
1:f812e34:             int rc = 0;
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             rc += tightMarshalString1(o.getClass().getName(), bs);
1:8cf4795:             rc += tightMarshalString1(o.getMessage(), bs);
1:f812e34:             if (wireFormat.isStackTraceEnabled()) {
1:8cf4795:                 rc += 2;
1:8cf4795:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:8cf4795:                 for (int i = 0; i < stackTrace.length; i++) {
1:8cf4795:                     StackTraceElement element = stackTrace[i];
1:8cf4795:                     rc += tightMarshalString1(element.getClassName(), bs);
1:8cf4795:                     rc += tightMarshalString1(element.getMethodName(), bs);
1:8cf4795:                     rc += tightMarshalString1(element.getFileName(), bs);
1:8cf4795:                     rc += 4;
1:8cf4795:                 }
1:8cf4795:                 rc += tightMarshalThrowable1(wireFormat, o.getCause(), bs);
1:8cf4795:             }
1:8cf4795:             return rc;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void tightMarshalThrowable2(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut,
1:933eb2f:                                           BooleanStream bs) throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             tightMarshalString2(o.getClass().getName(), dataOut, bs);
1:8cf4795:             tightMarshalString2(o.getMessage(), dataOut, bs);
1:f812e34:             if (wireFormat.isStackTraceEnabled()) {
1:8cf4795:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:8cf4795:                 dataOut.writeShort(stackTrace.length);
1:8cf4795:                 for (int i = 0; i < stackTrace.length; i++) {
1:8cf4795:                     StackTraceElement element = stackTrace[i];
1:8cf4795:                     tightMarshalString2(element.getClassName(), dataOut, bs);
1:8cf4795:                     tightMarshalString2(element.getMethodName(), dataOut, bs);
1:8cf4795:                     tightMarshalString2(element.getFileName(), dataOut, bs);
1:8cf4795:                     dataOut.writeInt(element.getLineNumber());
1:8cf4795:                 }
1:8cf4795:                 tightMarshalThrowable2(wireFormat, o.getCause(), dataOut, bs);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     @SuppressWarnings("deprecation")
1:8cf4795:     protected String tightUnmarshalString(DataInput dataIn, BooleanStream bs) throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 int size = dataIn.readShort();
1:8cf4795:                 byte data[] = new byte[size];
1:8cf4795:                 dataIn.readFully(data);
1:933eb2f:                 // Yes deprecated, but we know what we are doing.
1:933eb2f:                 // This allows us to create a String from a ASCII byte array. (no UTF-8 decoding)
1:27c87d2:                 return new String(data, 0);
1:f812e34:             } else {
1:8cf4795:                 return dataIn.readUTF();
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             return null;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected int tightMarshalString1(String value, BooleanStream bs) throws IOException {
1:f812e34:         bs.writeBoolean(value != null);
1:f812e34:         if (value != null) {
1:8cf4795: 
1:8cf4795:             int strlen = value.length();
1:8cf4795:             int utflen = 0;
1:8cf4795:             char[] charr = new char[strlen];
1:933eb2f:             int c = 0;
1:f812e34:             boolean isOnlyAscii = true;
1:8cf4795: 
1:8cf4795:             value.getChars(0, strlen, charr, 0);
1:8cf4795: 
1:8cf4795:             for (int i = 0; i < strlen; i++) {
1:8cf4795:                 c = charr[i];
1:8cf4795:                 if ((c >= 0x0001) && (c <= 0x007F)) {
1:8cf4795:                     utflen++;
1:8cf4795:                 } else if (c > 0x07FF) {
1:8cf4795:                     utflen += 3;
1:f812e34:                     isOnlyAscii = false;
1:8cf4795:                 } else {
1:f812e34:                     isOnlyAscii = false;
1:8cf4795:                     utflen += 2;
1:8cf4795:                 }
1:8cf4795:             }
1:8cf4795: 
1:f812e34:             if (utflen >= Short.MAX_VALUE) {
1:8cf4795:                 throw new IOException("Encountered a String value that is too long to encode.");
1:f812e34:             }
1:8cf4795:             bs.writeBoolean(isOnlyAscii);
1:f812e34:             return utflen + 2;
1:8cf4795: 
1:8cf4795:         } else {
1:8cf4795:             return 0;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected void tightMarshalString2(String value, DataOutput dataOut, BooleanStream bs) throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             // If we verified it only holds ascii values
1:f812e34:             if (bs.readBoolean()) {
1:8cf4795:                 dataOut.writeShort(value.length());
1:8cf4795:                 dataOut.writeBytes(value);
1:8cf4795:             } else {
1:8cf4795:                 dataOut.writeUTF(value);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected int tightMarshalObjectArray1(OpenWireFormat wireFormat, DataStructure[] objects,
1:933eb2f:                                            BooleanStream bs) throws IOException {
1:f812e34:         if (objects != null) {
1:f812e34:             int rc = 0;
1:8cf4795:             bs.writeBoolean(true);
1:8cf4795:             rc += 2;
1:f812e34:             for (int i = 0; i < objects.length; i++) {
1:f812e34:                 rc += tightMarshalNestedObject1(wireFormat, objects[i], bs);
1:8cf4795:             }
1:8cf4795:             return rc;
1:8cf4795:         } else {
1:8cf4795:             bs.writeBoolean(false);
1:8cf4795:             return 0;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void tightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects,
1:933eb2f:                                             DataOutput dataOut, BooleanStream bs) throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             dataOut.writeShort(objects.length);
1:f812e34:             for (int i = 0; i < objects.length; i++) {
1:f812e34:                 tightMarshalNestedObject2(wireFormat, objects[i], dataOut, bs);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected int tightMarshalConstByteArray1(byte[] data, BooleanStream bs, int i) throws IOException {
1:8cf4795:         return i;
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected void tightMarshalConstByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs, int i)
1:933eb2f:         throws IOException {
1:8cf4795:         dataOut.write(data, 0, i);
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected byte[] tightUnmarshalConstByteArray(DataInput dataIn, BooleanStream bs, int i)
1:933eb2f:         throws IOException {
1:8cf4795:         byte data[] = new byte[i];
1:8cf4795:         dataIn.readFully(data);
1:8cf4795:         return data;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected int tightMarshalByteArray1(byte[] data, BooleanStream bs) throws IOException {
1:f812e34:         bs.writeBoolean(data != null);
1:f812e34:         if (data != null) {
1:f812e34:             return data.length + 4;
1:8cf4795:         } else {
1:8cf4795:             return 0;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void tightMarshalByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             dataOut.writeInt(data.length);
1:8cf4795:             dataOut.write(data);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected byte[] tightUnmarshalByteArray(DataInput dataIn, BooleanStream bs) throws IOException {
1:f812e34:         byte rc[] = null;
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             int size = dataIn.readInt();
1:8cf4795:             rc = new byte[size];
1:8cf4795:             dataIn.readFully(rc);
1:8cf4795:         }
1:8cf4795:         return rc;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected int tightMarshalByteSequence1(ByteSequence data, BooleanStream bs) throws IOException {
1:f812e34:         bs.writeBoolean(data != null);
1:f812e34:         if (data != null) {
1:f812e34:             return data.getLength() + 4;
1:8cf4795:         } else {
1:8cf4795:             return 0;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void tightMarshalByteSequence2(ByteSequence data, DataOutput dataOut, BooleanStream bs)
1:933eb2f:         throws IOException {
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             dataOut.writeInt(data.getLength());
1:8cf4795:             dataOut.write(data.getData(), data.getOffset(), data.getLength());
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected ByteSequence tightUnmarshalByteSequence(DataInput dataIn, BooleanStream bs) throws IOException {
1:f812e34:         ByteSequence rc = null;
1:f812e34:         if (bs.readBoolean()) {
1:8cf4795:             int size = dataIn.readInt();
1:8cf4795:             byte[] t = new byte[size];
1:8cf4795:             dataIn.readFully(t);
1:8cf4795:             return new ByteSequence(t, 0, size);
1:8cf4795:         }
1:8cf4795:         return rc;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     //
1:8cf4795:     // The loose marshaling logic
1:8cf4795:     //
1:8cf4795: 
1:8cf4795:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:8cf4795:     }
1:f812e34: 
1:8cf4795:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void looseMarshalLong(OpenWireFormat wireFormat, long o, DataOutput dataOut) throws IOException {
1:8cf4795:         dataOut.writeLong(o);
1:8cf4795:     }
1:f812e34: 
1:8cf4795:     public long looseUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {
1:8cf4795:         return dataIn.readLong();
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)
1:933eb2f:         throws IOException {
1:8cf4795:         return wireFormat.looseUnmarshalNestedObject(dataIn);
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected void looseMarshalNestedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)
1:933eb2f:         throws IOException {
1:8cf4795:         wireFormat.looseMarshalNestedObject(o, dataOut);
1:8cf4795:     }
1:f812e34: 
1:933eb2f:     protected DataStructure looseUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn)
1:933eb2f:         throws IOException {
1:f812e34:         if (wireFormat.isCacheEnabled()) {
1:f812e34:             if (dataIn.readBoolean()) {
1:8cf4795:                 short index = dataIn.readShort();
1:8cf4795:                 DataStructure object = wireFormat.looseUnmarshalNestedObject(dataIn);
1:8cf4795:                 wireFormat.setInUnmarshallCache(index, object);
1:8cf4795:                 return object;
1:8cf4795:             } else {
1:8cf4795:                 short index = dataIn.readShort();
1:8cf4795:                 return wireFormat.getFromUnmarshallCache(index);
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             return wireFormat.looseUnmarshalNestedObject(dataIn);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalCachedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)
1:933eb2f:         throws IOException {
1:f812e34:         if (wireFormat.isCacheEnabled()) {
1:8cf4795:             Short index = wireFormat.getMarshallCacheIndex(o);
1:8cf4795:             dataOut.writeBoolean(index == null);
1:f812e34:             if (index == null) {
1:8cf4795:                 index = wireFormat.addToMarshallCache(o);
1:8cf4795:                 dataOut.writeShort(index.shortValue());
1:8cf4795:                 wireFormat.looseMarshalNestedObject(o, dataOut);
1:8cf4795:             } else {
1:8cf4795:                 dataOut.writeShort(index.shortValue());
1:8cf4795:             }
1:8cf4795:         } else {
1:8cf4795:             wireFormat.looseMarshalNestedObject(o, dataOut);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected Throwable looseUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn)
1:933eb2f:         throws IOException {
1:f812e34:         if (dataIn.readBoolean()) {
1:f812e34:             String clazz = looseUnmarshalString(dataIn);
1:8cf4795:             String message = looseUnmarshalString(dataIn);
1:8cf4795:             Throwable o = createThrowable(clazz, message);
1:f812e34:             if (wireFormat.isStackTraceEnabled()) {
1:f812e34:                 if (STACK_TRACE_ELEMENT_CONSTRUCTOR != null) {
1:8cf4795:                     StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];
1:8cf4795:                     for (int i = 0; i < ss.length; i++) {
1:8cf4795:                         try {
1:933eb2f:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR
1:933eb2f:                                 .newInstance(new Object[] {looseUnmarshalString(dataIn),
1:933eb2f:                                                            looseUnmarshalString(dataIn),
1:933eb2f:                                                            looseUnmarshalString(dataIn),
1:933eb2f:                                                            Integer.valueOf(dataIn.readInt())});
1:8cf4795:                         } catch (IOException e) {
1:8cf4795:                             throw e;
1:8cf4795:                         } catch (Throwable e) {
1:8cf4795:                         }
1:8cf4795:                     }
1:8cf4795:                     o.setStackTrace(ss);
1:8cf4795:                 } else {
1:8cf4795:                     short size = dataIn.readShort();
1:8cf4795:                     for (int i = 0; i < size; i++) {
1:8cf4795:                         looseUnmarshalString(dataIn);
1:8cf4795:                         looseUnmarshalString(dataIn);
1:8cf4795:                         looseUnmarshalString(dataIn);
1:8cf4795:                         dataIn.readInt();
1:8cf4795:                     }
1:8cf4795:                 }
1:8cf4795:                 o.initCause(looseUnmarsalThrowable(wireFormat, dataIn));
1:8cf4795: 
1:8cf4795:             }
1:8cf4795:             return o;
1:8cf4795:         } else {
1:8cf4795:             return null;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut)
1:933eb2f:         throws IOException {
1:f812e34:         dataOut.writeBoolean(o != null);
1:f812e34:         if (o != null) {
1:8cf4795:             looseMarshalString(o.getClass().getName(), dataOut);
1:8cf4795:             looseMarshalString(o.getMessage(), dataOut);
1:f812e34:             if (wireFormat.isStackTraceEnabled()) {
1:8cf4795:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:8cf4795:                 dataOut.writeShort(stackTrace.length);
1:8cf4795:                 for (int i = 0; i < stackTrace.length; i++) {
1:8cf4795:                     StackTraceElement element = stackTrace[i];
1:8cf4795:                     looseMarshalString(element.getClassName(), dataOut);
1:8cf4795:                     looseMarshalString(element.getMethodName(), dataOut);
1:8cf4795:                     looseMarshalString(element.getFileName(), dataOut);
1:8cf4795:                     dataOut.writeInt(element.getLineNumber());
1:8cf4795:                 }
1:8cf4795:                 looseMarshalThrowable(wireFormat, o.getCause(), dataOut);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected String looseUnmarshalString(DataInput dataIn) throws IOException {
1:f812e34:         if (dataIn.readBoolean()) {
1:8cf4795:             return dataIn.readUTF();
1:8cf4795:         } else {
1:8cf4795:             return null;
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected void looseMarshalString(String value, DataOutput dataOut) throws IOException {
1:f812e34:         dataOut.writeBoolean(value != null);
1:f812e34:         if (value != null) {
1:8cf4795:             dataOut.writeUTF(value);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects,
1:933eb2f:                                            DataOutput dataOut) throws IOException {
1:f812e34:         dataOut.writeBoolean(objects != null);
1:f812e34:         if (objects != null) {
1:8cf4795:             dataOut.writeShort(objects.length);
1:f812e34:             for (int i = 0; i < objects.length; i++) {
1:f812e34:                 looseMarshalNestedObject(wireFormat, objects[i], dataOut);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalConstByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut,
1:933eb2f:                                               int i) throws IOException {
1:8cf4795:         dataOut.write(data, 0, i);
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected byte[] looseUnmarshalConstByteArray(DataInput dataIn, int i) throws IOException {
1:8cf4795:         byte data[] = new byte[i];
1:8cf4795:         dataIn.readFully(data);
1:8cf4795:         return data;
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut)
1:933eb2f:         throws IOException {
1:f812e34:         dataOut.writeBoolean(data != null);
1:f812e34:         if (data != null) {
1:8cf4795:             dataOut.writeInt(data.length);
1:8cf4795:             dataOut.write(data);
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected byte[] looseUnmarshalByteArray(DataInput dataIn) throws IOException {
1:f812e34:         byte rc[] = null;
1:f812e34:         if (dataIn.readBoolean()) {
1:8cf4795:             int size = dataIn.readInt();
1:8cf4795:             rc = new byte[size];
1:8cf4795:             dataIn.readFully(rc);
1:8cf4795:         }
1:8cf4795:         return rc;
1:8cf4795:     }
1:8cf4795: 
1:933eb2f:     protected void looseMarshalByteSequence(OpenWireFormat wireFormat, ByteSequence data, DataOutput dataOut)
1:933eb2f:         throws IOException {
1:f812e34:         dataOut.writeBoolean(data != null);
1:f812e34:         if (data != null) {
1:8cf4795:             dataOut.writeInt(data.getLength());
1:8cf4795:             dataOut.write(data.getData(), data.getOffset(), data.getLength());
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     protected ByteSequence looseUnmarshalByteSequence(DataInput dataIn) throws IOException {
1:f812e34:         ByteSequence rc = null;
1:f812e34:         if (dataIn.readBoolean()) {
1:8cf4795:             int size = dataIn.readInt();
1:8cf4795:             byte[] t = new byte[size];
1:8cf4795:             dataIn.readFully(t);
1:8cf4795:             rc = new ByteSequence(t, 0, size);
1:8cf4795:         }
1:8cf4795:         return rc;
1:8cf4795:     }
1:8cf4795: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9c39f4e
commit:9a8f6e4
commit:27c87d2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());
/////////////////////////////////////////////////////////////////////////
1:                 return new String(data, 0);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:             constructor = StackTraceElement.class.getConstructor(new Class[] {String.class, String.class,
1:                                                                               String.class, int.class});
/////////////////////////////////////////////////////////////////////////
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs)
1:         throws IOException {
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void tightMarshalLong2(OpenWireFormat wireFormat, long o, DataOutput dataOut, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public long tightUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected DataStructure tightUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn,
1:                                                       BooleanStream bs) throws IOException {
1:     protected int tightMarshalNestedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs)
1:         throws IOException {
1:     protected void tightMarshalNestedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut,
1:                                              BooleanStream bs) throws IOException {
1:     protected DataStructure tightUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn,
1:                                                       BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected int tightMarshalCachedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalCachedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut,
1:                                              BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected Throwable tightUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR
1:                                 .newInstance(new Object[] {tightUnmarshalString(dataIn, bs),
1:                                                            tightUnmarshalString(dataIn, bs),
1:                                                            tightUnmarshalString(dataIn, bs),
1:                                                            Integer.valueOf(dataIn.readInt())});
/////////////////////////////////////////////////////////////////////////
1:     protected int tightMarshalThrowable1(OpenWireFormat wireFormat, Throwable o, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalThrowable2(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut,
1:                                           BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("deprecation")
1:                 // Yes deprecated, but we know what we are doing.
1:                 // This allows us to create a String from a ASCII byte array. (no UTF-8 decoding)
0:                 return new String(data, 0); 
/////////////////////////////////////////////////////////////////////////
1:             int c = 0;
/////////////////////////////////////////////////////////////////////////
1:     protected int tightMarshalObjectArray1(OpenWireFormat wireFormat, DataStructure[] objects,
1:                                            BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects,
1:                                             DataOutput dataOut, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalConstByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs, int i)
1:         throws IOException {
1:     protected byte[] tightUnmarshalConstByteArray(DataInput dataIn, BooleanStream bs, int i)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void tightMarshalByteSequence2(ByteSequence data, DataOutput dataOut, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)
1:         throws IOException {
1:     protected void looseMarshalNestedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)
1:         throws IOException {
1:     protected DataStructure looseUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalCachedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected Throwable looseUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR
1:                                 .newInstance(new Object[] {looseUnmarshalString(dataIn),
1:                                                            looseUnmarshalString(dataIn),
1:                                                            looseUnmarshalString(dataIn),
1:                                                            Integer.valueOf(dataIn.readInt())});
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects,
1:                                            DataOutput dataOut) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalConstByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut,
1:                                               int i) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     protected void looseMarshalByteSequence(OpenWireFormat wireFormat, ByteSequence data, DataOutput dataOut)
1:         throws IOException {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {
1:     public static final Constructor STACK_TRACE_ELEMENT_CONSTRUCTOR;
/////////////////////////////////////////////////////////////////////////
1:     public abstract byte getDataStructureType();
1:     public abstract DataStructure createObject();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.lang.reflect.Constructor;
1: 
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.openwire.BooleanStream;
0: import org.apache.activemq.util.ClassLoading;
/////////////////////////////////////////////////////////////////////////
1:         } else if ((o & 0xFFFFFFFFFFFF0000L) == 0) {
1:         } else if ((o & 0xFFFFFFFF00000000L) == 0) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         Constructor constructor = null;
0:             constructor = StackTraceElement.class.getConstructor(new Class[] {String.class, String.class, String.class, int.class});
1: 
1: 
1: 
1:         if (o == 0) {
0:         } else if ((o & 0xFFFFFFFFFFFF0000l) == 0) {
0:         } else if ((o & 0xFFFFFFFF00000000l) == 0) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (bs.readBoolean()) {
1:             if (bs.readBoolean()) {
1:                 dataOut.writeInt((int)o);
1:             if (bs.readBoolean()) {
1:                 dataOut.writeShort((int)o);
1: 
1:         if (bs.readBoolean()) {
1:             if (bs.readBoolean()) {
1:             if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (wireFormat.isCacheEnabled()) {
1:             if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (wireFormat.isCacheEnabled()) {
1:             if (index == null) {
1:                 return 2 + rc;
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (wireFormat.isCacheEnabled()) {
1:             if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             String clazz = tightUnmarshalString(dataIn, bs);
1:             if (wireFormat.isStackTraceEnabled()) {
1:                 if (STACK_TRACE_ELEMENT_CONSTRUCTOR != null) {
0:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR.newInstance(new Object[] {tightUnmarshalString(dataIn, bs),
0:                                                                                                                  tightUnmarshalString(dataIn, bs),
0:                                                                                                                  tightUnmarshalString(dataIn, bs),
0:                                                                                                                  Integer.valueOf(dataIn.readInt())});
/////////////////////////////////////////////////////////////////////////
1:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});
1:             return (Throwable)constructor.newInstance(new Object[] {message});
1:             return new Throwable(className + ": " + message);
1:         if (o == null) {
1:             int rc = 0;
1:             if (wireFormat.isStackTraceEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             if (wireFormat.isStackTraceEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             if (bs.readBoolean()) {
0:                 return new String(data, 0); // Yes deprecated, but we know what
0:                 // we are doing.
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:         bs.writeBoolean(value != null);
1:         if (value != null) {
1:             boolean isOnlyAscii = true;
/////////////////////////////////////////////////////////////////////////
1:                     isOnlyAscii = false;
1:                     isOnlyAscii = false;
1:             if (utflen >= Short.MAX_VALUE) {
1:             }
1:             return utflen + 2;
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1:         if (objects != null) {
1:             int rc = 0;
1:             for (int i = 0; i < objects.length; i++) {
1:                 rc += tightMarshalNestedObject1(wireFormat, objects[i], bs);
/////////////////////////////////////////////////////////////////////////
1:         if (bs.readBoolean()) {
1:             for (int i = 0; i < objects.length; i++) {
1:                 tightMarshalNestedObject2(wireFormat, objects[i], dataOut, bs);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         bs.writeBoolean(data != null);
1:         if (data != null) {
1:             return data.length + 4;
1:         if (bs.readBoolean()) {
1:         byte rc[] = null;
1:         if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1:         bs.writeBoolean(data != null);
1:         if (data != null) {
1:             return data.getLength() + 4;
1:         if (bs.readBoolean()) {
1:         ByteSequence rc = null;
1:         if (bs.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (wireFormat.isCacheEnabled()) {
1:             if (dataIn.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (wireFormat.isCacheEnabled()) {
1:             if (index == null) {
/////////////////////////////////////////////////////////////////////////
1:         if (dataIn.readBoolean()) {
1:             String clazz = looseUnmarshalString(dataIn);
1:             if (wireFormat.isStackTraceEnabled()) {
1:                 if (STACK_TRACE_ELEMENT_CONSTRUCTOR != null) {
0:                             ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR.newInstance(new Object[] {looseUnmarshalString(dataIn), looseUnmarshalString(dataIn),
0:                                                                                                                  looseUnmarshalString(dataIn), Integer.valueOf(dataIn.readInt())});
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(o != null);
1:         if (o != null) {
1:             if (wireFormat.isStackTraceEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:         if (dataIn.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(value != null);
1:         if (value != null) {
1:         dataOut.writeBoolean(objects != null);
1:         if (objects != null) {
1:             for (int i = 0; i < objects.length; i++) {
1:                 looseMarshalNestedObject(wireFormat, objects[i], dataOut);
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(data != null);
1:         if (data != null) {
1:         byte rc[] = null;
1:         if (dataIn.readBoolean()) {
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(data != null);
1:         if (data != null) {
1:         ByteSequence rc = null;
1:         if (dataIn.readBoolean()) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                                 Integer.valueOf(dataIn.readInt())
/////////////////////////////////////////////////////////////////////////
0:                                 Integer.valueOf(dataIn.readInt())
author:James Strachan
-------------------------------------------------------------------------------
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v3;
1: 
1: import org.apache.activemq.openwire.DataStreamMarshaller;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.openwire.BooleanStream;
0: import org.apache.activemq.command.DataStructure;
0: import org.apache.activemq.util.ClassLoading;
1: import org.apache.activemq.util.ByteSequence;
1: 
0: import java.lang.reflect.Constructor;
0: import java.io.IOException;
0: import java.io.DataOutput;
0: import java.io.DataInput;
1: 
0: abstract public class BaseDataStreamMarshaller implements DataStreamMarshaller {
1: 
0:     static final public Constructor STACK_TRACE_ELEMENT_CONSTRUCTOR;
1: 
1:     static {
0:         Constructor constructor=null;
1:         try {
0:             constructor = StackTraceElement.class.getConstructor(new Class[]{String.class, String.class, String.class, int.class});
1:         } catch (Throwable e) {
1:         }
1:         STACK_TRACE_ELEMENT_CONSTRUCTOR = constructor;
1:     }
1: 
1: 
0:     abstract public byte getDataStructureType();
0:     abstract public DataStructure createObject();
1: 
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:         return 0;
1:     }
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:     }
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:     }
1: 
1:     public int tightMarshalLong1(OpenWireFormat wireFormat, long o, BooleanStream bs) throws IOException {
0:         if( o == 0 ) {
1:             bs.writeBoolean(false);
1:             bs.writeBoolean(false);
1:             return 0;
0:         } else if ( (o & 0xFFFFFFFFFFFF0000l ) == 0 ) {
1:             bs.writeBoolean(false);
1:             bs.writeBoolean(true);
1:             return 2;
0:         } else if ( (o & 0xFFFFFFFF00000000l ) == 0) {
1:             bs.writeBoolean(true);
1:             bs.writeBoolean(false);
1:             return 4;
1:         } else {
1:             bs.writeBoolean(true);
1:             bs.writeBoolean(true);
1:             return 8;
1:         }
1:     }
0:     public void tightMarshalLong2(OpenWireFormat wireFormat, long o, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
1:                 dataOut.writeLong(o);
1:             } else {
0:                 dataOut.writeInt((int) o);
1:             }
1:         } else {
0:             if( bs.readBoolean() ) {
0:                 dataOut.writeShort((int) o);
1:             }
1:         }
1:     }
0:     public long tightUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
1:                 return dataIn.readLong();
1:             } else {
1:                 return toLong(dataIn.readInt());
1:             }
1:         } else {
0:             if( bs.readBoolean() ) {
1:                 return toLong(dataIn.readShort());
1:             } else {
1:                 return 0;
1:             }
1:         }
1:     }
1: 
1:     protected long toLong(short value) {
1:         // lets handle negative values
1:         long answer = value;
1:         return answer & 0xffffL;
1:     }
1: 
1:     protected long toLong(int value) {
1:         // lets handle negative values
1:         long answer = value;
1:         return answer & 0xffffffffL;
1:     }
1: 
0:     protected DataStructure tightUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs) throws IOException {
1:         return wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:     }
0:     protected int tightMarshalNestedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs) throws IOException {
1:         return wireFormat.tightMarshalNestedObject1(o, bs);
1:     }
1: 
0:     protected void tightMarshalNestedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:     }
1: 
0:     protected DataStructure tightUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
0:             if( bs.readBoolean() ) {
1:                 short index = dataIn.readShort();
1:                 DataStructure object = wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:                 wireFormat.setInUnmarshallCache(index, object);
1:                 return object;
1:             } else {
1:                 short index = dataIn.readShort();
1:                 return wireFormat.getFromUnmarshallCache(index);
1:             }
1:         } else {
1:             return wireFormat.tightUnmarshalNestedObject(dataIn, bs);
1:         }
1:     }
0:     protected int tightMarshalCachedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
1:             Short index = wireFormat.getMarshallCacheIndex(o);
1:             bs.writeBoolean(index == null);
0:             if( index == null ) {
1:                 int rc = wireFormat.tightMarshalNestedObject1(o, bs);
1:                 wireFormat.addToMarshallCache(o);
0:                 return 2+rc;
1:             } else {
1:                 return 2;
1:             }
1:         } else {
1:             return wireFormat.tightMarshalNestedObject1(o, bs);
1:         }
1:     }
0:     protected void tightMarshalCachedObject2(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
1:             Short index = wireFormat.getMarshallCacheIndex(o);
0:             if( bs.readBoolean() ) {
1:                 dataOut.writeShort(index.shortValue());
1:                 wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:             } else {
1:                 dataOut.writeShort(index.shortValue());
1:             }
1:         } else {
1:             wireFormat.tightMarshalNestedObject2(o, dataOut, bs);
1:         }
1:     }
1: 
0:     protected Throwable tightUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             String clazz =  tightUnmarshalString(dataIn, bs);
1:             String message = tightUnmarshalString(dataIn, bs);
1:             Throwable o = createThrowable(clazz, message);
0:             if( wireFormat.isStackTraceEnabled() ) {
0:                 if( STACK_TRACE_ELEMENT_CONSTRUCTOR !=null) {
1:                     StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];
1:                     for (int i = 0; i < ss.length; i++) {
1:                         try {
0:                             ss[i] = (StackTraceElement) STACK_TRACE_ELEMENT_CONSTRUCTOR.newInstance(new Object[]{
0:                                 tightUnmarshalString(dataIn, bs),
0:                                 tightUnmarshalString(dataIn, bs),
0:                                 tightUnmarshalString(dataIn, bs),
0:                                 new Integer(dataIn.readInt())
0:                                 });
1:                         } catch (IOException e) {
1:                             throw e;
1:                         } catch (Throwable e) {
1:                         }
1:                     }
1:                     o.setStackTrace(ss);
1:                 } else {
1:                     short size = dataIn.readShort();
1:                     for (int i = 0; i < size; i++) {
1:                         tightUnmarshalString(dataIn, bs);
1:                         tightUnmarshalString(dataIn, bs);
1:                         tightUnmarshalString(dataIn, bs);
1:                         dataIn.readInt();
1:                     }
1:                 }
1:                 o.initCause(tightUnmarsalThrowable(wireFormat, dataIn, bs));
1: 
1:             }
1:             return o;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     private Throwable createThrowable(String className, String message) {
1:         try {
0:             Class clazz = ClassLoading.loadClass(className, BaseDataStreamMarshaller.class.getClassLoader());
0:             Constructor constructor = clazz.getConstructor(new Class[]{String.class});
0:             return (Throwable) constructor.newInstance(new Object[]{message});
1:         } catch (Throwable e) {
0:             return new Throwable(className+": "+message);
1:         }
1:     }
1: 
0:     protected int tightMarshalThrowable1(OpenWireFormat wireFormat, Throwable o, BooleanStream bs) throws IOException {
0:         if( o==null ) {
1:             bs.writeBoolean(false);
1:             return 0;
1:         } else {
0:             int rc=0;
1:             bs.writeBoolean(true);
1:             rc += tightMarshalString1(o.getClass().getName(), bs);
1:             rc += tightMarshalString1(o.getMessage(), bs);
0:             if( wireFormat.isStackTraceEnabled() ) {
1:                 rc += 2;
1:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:                 for (int i = 0; i < stackTrace.length; i++) {
1:                     StackTraceElement element = stackTrace[i];
1:                     rc += tightMarshalString1(element.getClassName(), bs);
1:                     rc += tightMarshalString1(element.getMethodName(), bs);
1:                     rc += tightMarshalString1(element.getFileName(), bs);
1:                     rc += 4;
1:                 }
1:                 rc += tightMarshalThrowable1(wireFormat, o.getCause(), bs);
1:             }
1:             return rc;
1:         }
1:     }
1: 
0:     protected void tightMarshalThrowable2(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
1:             tightMarshalString2(o.getClass().getName(), dataOut, bs);
1:             tightMarshalString2(o.getMessage(), dataOut, bs);
0:             if( wireFormat.isStackTraceEnabled() ) {
1:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:                 dataOut.writeShort(stackTrace.length);
1:                 for (int i = 0; i < stackTrace.length; i++) {
1:                     StackTraceElement element = stackTrace[i];
1:                     tightMarshalString2(element.getClassName(), dataOut, bs);
1:                     tightMarshalString2(element.getMethodName(), dataOut, bs);
1:                     tightMarshalString2(element.getFileName(), dataOut, bs);
1:                     dataOut.writeInt(element.getLineNumber());
1:                 }
1:                 tightMarshalThrowable2(wireFormat, o.getCause(), dataOut, bs);
1:             }
1:         }
1:     }
1: 
1:     protected String tightUnmarshalString(DataInput dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
1:                 int size = dataIn.readShort();
1:                 byte data[] = new byte[size];
1:                 dataIn.readFully(data);
0:                 return new String(data,0); // Yes deprecated, but we know what we are doing.
0:             }  else {
1:                 return dataIn.readUTF();
1:             }
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     protected int tightMarshalString1(String value, BooleanStream bs) throws IOException {
0:         bs.writeBoolean(value!=null);
0:         if( value!=null ) {
1: 
1:             int strlen = value.length();
1:             int utflen = 0;
1:             char[] charr = new char[strlen];
0:             int c, count = 0;
0:             boolean isOnlyAscii=true;
1: 
1:             value.getChars(0, strlen, charr, 0);
1: 
1:             for (int i = 0; i < strlen; i++) {
1:                 c = charr[i];
1:                 if ((c >= 0x0001) && (c <= 0x007F)) {
1:                     utflen++;
1:                 } else if (c > 0x07FF) {
1:                     utflen += 3;
0:                     isOnlyAscii=false;
1:                 } else {
0:                     isOnlyAscii=false;
1:                     utflen += 2;
1:                 }
1:             }
1: 
0:             if( utflen >= Short.MAX_VALUE )
1:                 throw new IOException("Encountered a String value that is too long to encode.");
1: 
1:             bs.writeBoolean(isOnlyAscii);
0:             return utflen+2;
1: 
1:         } else {
1:             return 0;
1:         }
1:     }
1: 
1:     protected void tightMarshalString2(String value, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
1:             // If we verified it only holds ascii values
0:             if( bs.readBoolean() ) {
1:                 dataOut.writeShort(value.length());
1:                 dataOut.writeBytes(value);
1:             } else {
1:                 dataOut.writeUTF(value);
1:             }
1:         }
1:     }
1: 
0:     protected int tightMarshalObjectArray1(OpenWireFormat wireFormat, DataStructure[] objects, BooleanStream bs) throws IOException {
0:         if( objects != null ) {
0:             int rc=0;
1:             bs.writeBoolean(true);
1:             rc += 2;
0:             for( int i=0; i < objects.length; i++ ) {
0:                 rc += tightMarshalNestedObject1(wireFormat,objects[i], bs);
1:             }
1:             return rc;
1:         } else {
1:             bs.writeBoolean(false);
1:             return 0;
1:         }
1:     }
1: 
0:     protected void tightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
1:             dataOut.writeShort(objects.length);
0:             for( int i=0; i < objects.length; i++ ) {
0:                 tightMarshalNestedObject2(wireFormat,objects[i], dataOut, bs);
1:             }
1:         }
1:     }
1: 
1:     protected int tightMarshalConstByteArray1(byte[] data, BooleanStream bs, int i) throws IOException {
1:         return i;
1:     }
0:     protected void tightMarshalConstByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs, int i) throws IOException {
1:         dataOut.write(data, 0, i);
1:     }
1: 
0:     protected byte[] tightUnmarshalConstByteArray(DataInput dataIn, BooleanStream bs, int i) throws IOException {
1:         byte data[] = new byte[i];
1:         dataIn.readFully(data);
1:         return data;
1:     }
1: 
1:     protected int tightMarshalByteArray1(byte[] data, BooleanStream bs) throws IOException {
0:         bs.writeBoolean(data!=null);
0:         if( data!=null ){
0:             return data.length+4;
1:         } else {
1:             return 0;
1:         }
1:     }
1: 
0:     protected void tightMarshalByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ){
1:             dataOut.writeInt(data.length);
1:             dataOut.write(data);
1:         }
1:     }
1: 
1:     protected byte[] tightUnmarshalByteArray(DataInput dataIn, BooleanStream bs) throws IOException {
0:         byte rc[]=null;
0:         if( bs.readBoolean() ) {
1:             int size = dataIn.readInt();
1:             rc = new byte[size];
1:             dataIn.readFully(rc);
1:         }
1:         return rc;
1:     }
1: 
1:     protected int tightMarshalByteSequence1(ByteSequence data, BooleanStream bs) throws IOException {
0:         bs.writeBoolean(data!=null);
0:         if( data!=null ){
0:             return data.getLength()+4;
1:         } else {
1:             return 0;
1:         }
1:     }
1: 
0:     protected void tightMarshalByteSequence2(ByteSequence data, DataOutput dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ){
1:             dataOut.writeInt(data.getLength());
1:             dataOut.write(data.getData(), data.getOffset(), data.getLength());
1:         }
1:     }
1: 
1:     protected ByteSequence tightUnmarshalByteSequence(DataInput dataIn, BooleanStream bs) throws IOException {
0:         ByteSequence rc=null;
0:         if( bs.readBoolean() ) {
1:             int size = dataIn.readInt();
1:             byte[] t = new byte[size];
1:             dataIn.readFully(t);
1:             return new ByteSequence(t, 0, size);
1:         }
1:         return rc;
1:     }
1: 
1:     //
1:     // The loose marshaling logic
1:     //
1: 
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:     }
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:     }
1: 
1:     public void looseMarshalLong(OpenWireFormat wireFormat, long o, DataOutput dataOut) throws IOException {
1:         dataOut.writeLong(o);
1:     }
1:     public long looseUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {
1:         return dataIn.readLong();
1:     }
1: 
0:     protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {
1:         return wireFormat.looseUnmarshalNestedObject(dataIn);
1:     }
0:     protected void looseMarshalNestedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut) throws IOException {
1:         wireFormat.looseMarshalNestedObject(o, dataOut);
1:     }
1: 
0:     protected DataStructure looseUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
0:             if( dataIn.readBoolean() ) {
1:                 short index = dataIn.readShort();
1:                 DataStructure object = wireFormat.looseUnmarshalNestedObject(dataIn);
1:                 wireFormat.setInUnmarshallCache(index, object);
1:                 return object;
1:             } else {
1:                 short index = dataIn.readShort();
1:                 return wireFormat.getFromUnmarshallCache(index);
1:             }
1:         } else {
1:             return wireFormat.looseUnmarshalNestedObject(dataIn);
1:         }
1:     }
0:     protected void looseMarshalCachedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
1:             Short index = wireFormat.getMarshallCacheIndex(o);
1:             dataOut.writeBoolean(index == null);
0:             if( index == null ) {
1:                 index = wireFormat.addToMarshallCache(o);
1:                 dataOut.writeShort(index.shortValue());
1:                 wireFormat.looseMarshalNestedObject(o, dataOut);
1:             } else {
1:                 dataOut.writeShort(index.shortValue());
1:             }
1:         } else {
1:             wireFormat.looseMarshalNestedObject(o, dataOut);
1:         }
1:     }
1: 
0:     protected Throwable looseUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {
0:         if( dataIn.readBoolean() ) {
0:             String clazz =  looseUnmarshalString(dataIn);
1:             String message = looseUnmarshalString(dataIn);
1:             Throwable o = createThrowable(clazz, message);
0:             if( wireFormat.isStackTraceEnabled() ) {
0:                 if( STACK_TRACE_ELEMENT_CONSTRUCTOR !=null) {
1:                     StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];
1:                     for (int i = 0; i < ss.length; i++) {
1:                         try {
0:                             ss[i] = (StackTraceElement) STACK_TRACE_ELEMENT_CONSTRUCTOR.newInstance(new Object[]{
0:                                 looseUnmarshalString(dataIn),
0:                                 looseUnmarshalString(dataIn),
0:                                 looseUnmarshalString(dataIn),
0:                                 new Integer(dataIn.readInt())
0:                                 });
1:                         } catch (IOException e) {
1:                             throw e;
1:                         } catch (Throwable e) {
1:                         }
1:                     }
1:                     o.setStackTrace(ss);
1:                 } else {
1:                     short size = dataIn.readShort();
1:                     for (int i = 0; i < size; i++) {
1:                         looseUnmarshalString(dataIn);
1:                         looseUnmarshalString(dataIn);
1:                         looseUnmarshalString(dataIn);
1:                         dataIn.readInt();
1:                     }
1:                 }
1:                 o.initCause(looseUnmarsalThrowable(wireFormat, dataIn));
1: 
1:             }
1:             return o;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1: 
0:     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut) throws IOException {
0:         dataOut.writeBoolean(o!=null);
0:         if( o!=null ) {
1:             looseMarshalString(o.getClass().getName(), dataOut);
1:             looseMarshalString(o.getMessage(), dataOut);
0:             if( wireFormat.isStackTraceEnabled() ) {
1:                 StackTraceElement[] stackTrace = o.getStackTrace();
1:                 dataOut.writeShort(stackTrace.length);
1:                 for (int i = 0; i < stackTrace.length; i++) {
1:                     StackTraceElement element = stackTrace[i];
1:                     looseMarshalString(element.getClassName(), dataOut);
1:                     looseMarshalString(element.getMethodName(), dataOut);
1:                     looseMarshalString(element.getFileName(), dataOut);
1:                     dataOut.writeInt(element.getLineNumber());
1:                 }
1:                 looseMarshalThrowable(wireFormat, o.getCause(), dataOut);
1:             }
1:         }
1:     }
1: 
1:     protected String looseUnmarshalString(DataInput dataIn) throws IOException {
0:         if( dataIn.readBoolean() ) {
1:             return dataIn.readUTF();
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     protected void looseMarshalString(String value, DataOutput dataOut) throws IOException {
0:         dataOut.writeBoolean(value!=null);
0:         if( value!=null ) {
1:             dataOut.writeUTF(value);
1:         }
1:     }
1: 
0:     protected void looseMarshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects, DataOutput dataOut) throws IOException {
0:         dataOut.writeBoolean(objects!=null);
0:         if( objects!=null ) {
1:             dataOut.writeShort(objects.length);
0:             for( int i=0; i < objects.length; i++ ) {
0:                 looseMarshalNestedObject(wireFormat,objects[i], dataOut);
1:             }
1:         }
1:     }
1: 
0:     protected void looseMarshalConstByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut, int i) throws IOException {
1:         dataOut.write(data, 0, i);
1:     }
1: 
1:     protected byte[] looseUnmarshalConstByteArray(DataInput dataIn, int i) throws IOException {
1:         byte data[] = new byte[i];
1:         dataIn.readFully(data);
1:         return data;
1:     }
1: 
0:     protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut) throws IOException {
0:         dataOut.writeBoolean(data!=null);
0:         if( data!=null ){
1:             dataOut.writeInt(data.length);
1:             dataOut.write(data);
1:         }
1:     }
1: 
1:     protected byte[] looseUnmarshalByteArray(DataInput dataIn) throws IOException {
0:         byte rc[]=null;
0:         if( dataIn.readBoolean() ) {
1:             int size = dataIn.readInt();
1:             rc = new byte[size];
1:             dataIn.readFully(rc);
1:         }
1:         return rc;
1:     }
1: 
0:     protected void looseMarshalByteSequence(OpenWireFormat wireFormat, ByteSequence data, DataOutput dataOut) throws IOException {
0:         dataOut.writeBoolean(data!=null);
0:         if( data!=null ){
1:             dataOut.writeInt(data.getLength());
1:             dataOut.write(data.getData(), data.getOffset(), data.getLength());
1:         }
1:     }
1: 
1:     protected ByteSequence looseUnmarshalByteSequence(DataInput dataIn) throws IOException {
0:         ByteSequence rc=null;
0:         if( dataIn.readBoolean() ) {
1:             int size = dataIn.readInt();
1:             byte[] t = new byte[size];
1:             dataIn.readFully(t);
1:             rc = new ByteSequence(t, 0, size);
1:         }
1:         return rc;
1:     }
1: }
============================================================================