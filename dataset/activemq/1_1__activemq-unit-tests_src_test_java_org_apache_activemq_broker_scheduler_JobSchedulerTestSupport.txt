1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: 
1:74846bb: package org.apache.activemq.broker.scheduler;
1:74846bb: 
1:74846bb: import java.io.File;
1:74846bb: 
1:74846bb: import javax.jms.Connection;
1:74846bb: import javax.jms.ConnectionFactory;
1:74846bb: import javax.jms.Queue;
1:74846bb: import javax.management.ObjectName;
1:74846bb: 
1:74846bb: import org.apache.activemq.ActiveMQConnectionFactory;
1:74846bb: import org.apache.activemq.broker.BrokerService;
1:74846bb: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1:74846bb: import org.apache.activemq.command.ActiveMQQueue;
1:74846bb: import org.apache.activemq.util.IOHelper;
1:74846bb: import org.junit.After;
1:74846bb: import org.junit.Before;
1:74846bb: import org.junit.Rule;
1:74846bb: import org.junit.rules.TestName;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * Base class for tests of the Broker's JobSchedulerStore.
1:74846bb:  */
1:74846bb: public class JobSchedulerTestSupport {
1:74846bb: 
1:74846bb:     @Rule public TestName name = new TestName();
1:74846bb: 
1:74846bb:     protected String connectionUri;
1:74846bb:     protected BrokerService broker;
1:74846bb:     protected JobScheduler jobScheduler;
1:74846bb:     protected Queue destination;
1:74846bb: 
1:74846bb:     @Before
1:74846bb:     public void setUp() throws Exception {
1:74846bb:         connectionUri = "vm://localhost";
1:74846bb:         destination = new ActiveMQQueue(name.getMethodName());
1:74846bb: 
1:74846bb:         broker = createBroker();
1:74846bb:         broker.start();
1:74846bb:         broker.waitUntilStarted();
1:74846bb: 
1:74846bb:         jobScheduler = broker.getJobSchedulerStore().getJobScheduler("JMS");
1:74846bb:     }
1:74846bb: 
1:74846bb:     @After
1:74846bb:     public void tearDown() throws Exception {
1:74846bb:         if (broker != null) {
1:74846bb:             broker.stop();
1:74846bb:             broker.waitUntilStopped();
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected Connection createConnection() throws Exception {
1:74846bb:         return createConnectionFactory().createConnection();
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:74846bb:         return new ActiveMQConnectionFactory(connectionUri);
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected BrokerService createBroker() throws Exception {
1:74846bb:         return createBroker(true);
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected boolean isUseJmx() {
1:74846bb:         return false;
1:74846bb:     }
1:74846bb: 
1:433912f:     protected boolean isPersistent() {
1:433912f:         return true;
1:433912f:     }
1:433912f: 
1:74846bb:     protected JobSchedulerViewMBean getJobSchedulerMBean() throws Exception {
1:74846bb:         ObjectName objectName = broker.getAdminView().getJMSJobScheduler();
1:74846bb:         JobSchedulerViewMBean scheduler = null;
1:74846bb:         if (objectName != null) {
1:74846bb:             scheduler = (JobSchedulerViewMBean) broker.getManagementContext()
1:74846bb:                 .newProxyInstance(objectName, JobSchedulerViewMBean.class, true);
1:74846bb:         }
1:74846bb: 
1:74846bb:         return scheduler;
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected BrokerService createBroker(boolean delete) throws Exception {
1:74846bb:         File schedulerDirectory = new File("target/scheduler");
1:74846bb:         if (delete) {
1:74846bb:             IOHelper.mkdirs(schedulerDirectory);
1:74846bb:             IOHelper.deleteChildren(schedulerDirectory);
1:74846bb:         }
1:74846bb: 
1:74846bb:         BrokerService answer = new BrokerService();
1:433912f:         answer.setPersistent(isPersistent());
1:74846bb:         answer.setDeleteAllMessagesOnStartup(true);
1:74846bb:         answer.setDataDirectory("target");
1:74846bb:         answer.setSchedulerDirectoryFile(schedulerDirectory);
1:74846bb:         answer.setSchedulerSupport(true);
1:74846bb:         answer.setUseJmx(isUseJmx());
1:74846bb:         return answer;
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         answer.setPersistent(isPersistent());
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Queue;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: 
1: /**
1:  * Base class for tests of the Broker's JobSchedulerStore.
1:  */
1: public class JobSchedulerTestSupport {
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     protected String connectionUri;
1:     protected BrokerService broker;
1:     protected JobScheduler jobScheduler;
1:     protected Queue destination;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         connectionUri = "vm://localhost";
1:         destination = new ActiveMQQueue(name.getMethodName());
1: 
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         jobScheduler = broker.getJobSchedulerStore().getJobScheduler("JMS");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         return createConnectionFactory().createConnection();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker(true);
1:     }
1: 
1:     protected boolean isUseJmx() {
1:         return false;
1:     }
1: 
1:     protected JobSchedulerViewMBean getJobSchedulerMBean() throws Exception {
1:         ObjectName objectName = broker.getAdminView().getJMSJobScheduler();
1:         JobSchedulerViewMBean scheduler = null;
1:         if (objectName != null) {
1:             scheduler = (JobSchedulerViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(objectName, JobSchedulerViewMBean.class, true);
1:         }
1: 
1:         return scheduler;
1:     }
1: 
1:     protected BrokerService createBroker(boolean delete) throws Exception {
1:         File schedulerDirectory = new File("target/scheduler");
1:         if (delete) {
1:             IOHelper.mkdirs(schedulerDirectory);
1:             IOHelper.deleteChildren(schedulerDirectory);
1:         }
1: 
1:         BrokerService answer = new BrokerService();
0:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.setDataDirectory("target");
1:         answer.setSchedulerDirectoryFile(schedulerDirectory);
1:         answer.setSchedulerSupport(true);
1:         answer.setUseJmx(isUseJmx());
1:         return answer;
1:     }
1: }
============================================================================