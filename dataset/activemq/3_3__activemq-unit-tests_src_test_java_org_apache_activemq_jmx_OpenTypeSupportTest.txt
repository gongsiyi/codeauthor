1:9edeb21: /**
1:9edeb21:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9edeb21:  * contributor license agreements.  See the NOTICE file distributed with
1:9edeb21:  * this work for additional information regarding copyright ownership.
1:9edeb21:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9edeb21:  * (the "License"); you may not use this file except in compliance with
1:9edeb21:  * the License.  You may obtain a copy of the License at
1:9edeb21:  *
1:9edeb21:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9edeb21:  *
1:9edeb21:  * Unless required by applicable law or agreed to in writing, software
1:9edeb21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9edeb21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9edeb21:  * See the License for the specific language governing permissions and
1:9edeb21:  * limitations under the License.
1:9edeb21:  */
1:9edeb21: package org.apache.activemq.jmx;
1:482be54: 
1:482be54: import javax.jms.BytesMessage;
1:482be54: import javax.jms.Connection;
1:482be54: import javax.jms.Destination;
1:482be54: import javax.jms.JMSException;
1:482be54: import javax.jms.MessageProducer;
1:482be54: import javax.jms.Session;
1:482be54: import javax.management.MalformedObjectNameException;
1:482be54: import javax.management.ObjectName;
1:482be54: import javax.management.openmbean.CompositeData;
1:482be54: import org.apache.activemq.ActiveMQConnectionFactory;
1:482be54: import org.apache.activemq.broker.BrokerService;
1:482be54: import org.apache.activemq.broker.jmx.CompositeDataConstants;
1:9edeb21: import org.apache.activemq.broker.jmx.OpenTypeSupport;
1:482be54: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:9edeb21: import org.apache.activemq.command.ActiveMQBytesMessage;
1:482be54: import org.apache.activemq.command.ActiveMQQueue;
1:482be54: import org.junit.After;
1:482be54: import org.junit.Before;
1:9edeb21: import org.junit.Test;
1:9edeb21: import org.slf4j.Logger;
1:9edeb21: import org.slf4j.LoggerFactory;
1:482be54: import static org.junit.Assert.assertEquals;
1:482be54: 
1:9edeb21: public class OpenTypeSupportTest {
1:9edeb21:     private static final Logger LOG = LoggerFactory.getLogger(OpenTypeSupportTest.class);
1:482be54: 
1:482be54:     private static BrokerService brokerService;
1:482be54:     private static String TESTQUEUE = "testQueue";
1:482be54:     private static ActiveMQConnectionFactory connectionFactory;
1:482be54:     private static String BYTESMESSAGE_TEXT = "This is a short text";
1:482be54:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:482be54:     private static ActiveMQQueue queue = new ActiveMQQueue(TESTQUEUE);
1:482be54: 
1:482be54:     private String connectionUri;
1:482be54: 
1:482be54:     @Before
1:482be54:     public void setUp() throws Exception {
1:482be54:         brokerService = new BrokerService();
1:482be54:         brokerService.setPersistent(false);
1:482be54:         brokerService.setUseJmx(true);
1:482be54:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:482be54:         brokerService.start();
1:482be54:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:482be54:         sendMessage();
1:482be54:     }
1:482be54: 
1:482be54:     @After
1:482be54:     public void tearDown() throws Exception {
1:482be54:         brokerService.stop();
1:482be54:         brokerService.waitUntilStopped();
1:482be54:     }
1:482be54: 
1:482be54:     private static void sendMessage() throws JMSException {
1:482be54:         Connection conn = connectionFactory.createConnection();
1:482be54:         try {
1:482be54:             conn.start();
1:482be54:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:482be54:             Destination queue = session.createQueue(TESTQUEUE);
1:482be54:             BytesMessage toSend = session.createBytesMessage();
1:482be54:             toSend.writeBytes(BYTESMESSAGE_TEXT.getBytes());
1:482be54:             MessageProducer producer = session.createProducer(queue);
1:482be54:             producer.send(queue, toSend);
1:482be54:         } finally {
1:482be54:             conn.close();
1:482be54:         }
1:482be54:     }
1:482be54: 
1:482be54:     @Test
1:482be54:     public void bytesMessagePreview() throws Exception {
1:482be54:         QueueViewMBean queue = getProxyToQueueViewMBean();
1:482be54:         assertEquals(extractText(queue.browse()[0]), extractText(queue.browse()[0]));
1:482be54:     }
1:482be54: 
1:9edeb21:     @Test
1:9edeb21:     public void testBrowseByteMessageFails() throws Exception {
1:9edeb21:         ActiveMQBytesMessage bm = new ActiveMQBytesMessage();
1:9edeb21:         bm.writeBytes("123456".getBytes());
1:9edeb21:         Object result = OpenTypeSupport.convert(bm);
1:9edeb21:         LOG.info("result : " + result);
1:9edeb21:     }
1:482be54: 
1:482be54:     private String extractText(CompositeData message) {
1:482be54:         Byte content[] = (Byte[]) message.get(CompositeDataConstants.BODY_PREVIEW);
1:482be54:         byte out[] = new byte[content.length];
1:482be54:         for (int i = 0; i < content.length; i++) {
1:482be54:             out[i] = content[i];
1:482be54:         }
1:482be54:         return new String(out);
1:482be54:     }
1:482be54: 
1:482be54:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, JMSException {
1:cb7b657:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
1:482be54:         QueueViewMBean proxy = (QueueViewMBean)
1:482be54:             brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:482be54:         return proxy;
1:482be54:     }
1:9edeb21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:482be54
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.CompositeDataConstants;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: 
1:     private static BrokerService brokerService;
1:     private static String TESTQUEUE = "testQueue";
1:     private static ActiveMQConnectionFactory connectionFactory;
1:     private static String BYTESMESSAGE_TEXT = "This is a short text";
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:     private static ActiveMQQueue queue = new ActiveMQQueue(TESTQUEUE);
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         sendMessage();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     private static void sendMessage() throws JMSException {
1:         Connection conn = connectionFactory.createConnection();
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination queue = session.createQueue(TESTQUEUE);
1:             BytesMessage toSend = session.createBytesMessage();
1:             toSend.writeBytes(BYTESMESSAGE_TEXT.getBytes());
1:             MessageProducer producer = session.createProducer(queue);
1:             producer.send(queue, toSend);
1:         } finally {
1:             conn.close();
1:         }
1:     }
1: 
1:     @Test
1:     public void bytesMessagePreview() throws Exception {
1:         QueueViewMBean queue = getProxyToQueueViewMBean();
1:         assertEquals(extractText(queue.browse()[0]), extractText(queue.browse()[0]));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private String extractText(CompositeData message) {
1:         Byte content[] = (Byte[]) message.get(CompositeDataConstants.BODY_PREVIEW);
1:         byte out[] = new byte[content.length];
1:         for (int i = 0; i < content.length; i++) {
1:             out[i] = content[i];
1:         }
1:         return new String(out);
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName(
0:                 "org.apache.activemq" + ":Type=Queue,Destination=" +
0:                 queue.getQueueName() + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean)
1:             brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
author:Gary Tully
-------------------------------------------------------------------------------
commit:9edeb21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jmx;
0: 
1: import org.apache.activemq.broker.jmx.OpenTypeSupport;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
1: public class OpenTypeSupportTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(OpenTypeSupportTest.class);
1:     @Test
1:     public void testBrowseByteMessageFails() throws Exception {
1:         ActiveMQBytesMessage bm = new ActiveMQBytesMessage();
1:         bm.writeBytes("123456".getBytes());
1:         Object result = OpenTypeSupport.convert(bm);
1:         LOG.info("result : " + result);
1:     }
1: }
============================================================================