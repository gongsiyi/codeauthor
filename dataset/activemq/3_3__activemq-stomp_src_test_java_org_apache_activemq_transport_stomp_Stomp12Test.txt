1:6d08aca: /**
1:6d08aca:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6d08aca:  * contributor license agreements.  See the NOTICE file distributed with
1:6d08aca:  * this work for additional information regarding copyright ownership.
1:6d08aca:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6d08aca:  * (the "License"); you may not use this file except in compliance with
1:6d08aca:  * the License.  You may obtain a copy of the License at
1:6d08aca:  *
1:6d08aca:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6d08aca:  *
1:6d08aca:  * Unless required by applicable law or agreed to in writing, software
1:6d08aca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d08aca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d08aca:  * See the License for the specific language governing permissions and
1:6d08aca:  * limitations under the License.
1:6d08aca:  */
1:6d08aca: package org.apache.activemq.transport.stomp;
13:6d08aca: 
1:1236bbf: import static org.junit.Assert.assertEquals;
1:1236bbf: import static org.junit.Assert.assertTrue;
1:1236bbf: 
1:6d08aca: import java.io.IOException;
1:6d08aca: import java.net.Socket;
1:57264bf: import java.util.Arrays;
1:388c16d: import java.util.concurrent.TimeUnit;
1:6d08aca: 
1:6d08aca: import javax.jms.Connection;
1:6d08aca: 
1:4fe2bd5: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:388c16d: import org.apache.activemq.util.Wait;
1:6d08aca: import org.junit.Test;
1:6d08aca: import org.slf4j.Logger;
1:6d08aca: import org.slf4j.LoggerFactory;
1:6d08aca: 
1:1236bbf: public class Stomp12Test extends StompTestSupport {
1:6d08aca: 
1:6d08aca:     private static final Logger LOG = LoggerFactory.getLogger(Stomp12Test.class);
1:6d08aca: 
1:6d08aca:     private Connection connection;
1:6d08aca: 
1:6d08aca:     @Override
1:1236bbf:     public void setUp() throws Exception {
1:6d08aca: 
1:1236bbf:         super.setUp();
1:6d08aca: 
1:6d08aca:         stompConnect();
1:6d08aca: 
1:6d08aca:         connection = cf.createConnection("system", "manager");
1:6d08aca:         connection.start();
5:6d08aca:     }
1:6d08aca: 
1:1236bbf:     @Override
1:540a66b:     public void tearDown() throws Exception {
1:540a66b:         try {
1:540a66b:             connection.close();
1:540a66b:         } catch (Exception ex) {}
1:540a66b: 
1:540a66b:         super.tearDown();
1:6d08aca:     }
1:6d08aca: 
1:6d08aca:     @Override
1:1236bbf:     protected Socket createSocket() throws IOException {
1:1236bbf:         return new Socket("127.0.0.1", this.port);
1:6d08aca:     }
1:6d08aca: 
1:1236bbf:     @Override
1:1236bbf:     protected String getQueueName() {
1:1236bbf:         return getClass().getName() + "." + getName();
1:6d08aca:     }
1:6d08aca: 
1:540a66b:     @Test(timeout = 60000)
1:6d08aca:     public void testTelnetStyleSends() throws Exception {
1:6d08aca: 
1:6d08aca:         stompConnection.setVersion(Stomp.V1_2);
1:6d08aca: 
1:6d08aca:         String connect = "CONNECT\r\n" +
1:6d08aca:                          "accept-version:1.2\r\n" +
1:6d08aca:                          "login:system\r\n" +
1:6d08aca:                          "passcode:manager\r\n" +
1:6d08aca:                          "\r\n" +
1:6d08aca:                          "\u0000\r\n";
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca: 
1:6d08aca:         String f = stompConnection.receiveFrame();
1:6d08aca:         LOG.info("Broker sent: " + f);
1:6d08aca: 
1:6d08aca:         assertTrue(f.startsWith("CONNECTED"));
1:6d08aca:         assertTrue(f.indexOf("version:1.2") >= 0);
1:6d08aca:         assertTrue(f.indexOf("session:") >= 0);
1:6d08aca: 
1:6d08aca:         String send = "SUBSCRIBE\r\n" +
1:6d08aca:                       "id:1\r\n" +
1:6d08aca:                       "destination:/queue/" + getQueueName() + "\r\n" +
1:6d08aca:                       "receipt:1\r\n" +
1:6d08aca:                       "\r\n"+
1:6d08aca:                       "\u0000\r\n";
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(send);
1:6d08aca: 
1:6d08aca:         StompFrame receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         String receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca:     }
1:6d08aca: 
1:540a66b:     @Test(timeout = 60000)
1:6d08aca:     public void testClientAckWithoutAckId() throws Exception {
1:6d08aca: 
1:6d08aca:         stompConnection.setVersion(Stomp.V1_2);
1:6d08aca: 
1:6d08aca:         String connect = "STOMP\r\n" +
1:6d08aca:                          "accept-version:1.2\r\n" +
1:6d08aca:                          "login:system\r\n" +
1:6d08aca:                          "passcode:manager\r\n" +
1:6d08aca:                          "\r\n" +
1:6d08aca:                          "\u0000\r\n";
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca: 
1:6d08aca:         String f = stompConnection.receiveFrame();
1:6d08aca:         LOG.info("Broker sent: " + f);
1:6d08aca: 
1:6d08aca:         assertTrue(f.startsWith("CONNECTED"));
1:6d08aca:         assertTrue(f.indexOf("version:1.2") >= 0);
1:6d08aca:         assertTrue(f.indexOf("session:") >= 0);
1:6d08aca: 
1:6d08aca:         String subscribe = "SUBSCRIBE\n" +
1:6d08aca:                            "id:1\n" +
1:3293579:                            "activemq.prefetchSize=1\n" +
1:6d08aca:                            "ack:client\n" +
1:6d08aca:                            "destination:/queue/" + getQueueName() + "\n" +
1:6d08aca:                            "receipt:1\n" +
1:6d08aca:                            "\n" + Stomp.NULL;
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(subscribe);
1:6d08aca: 
1:6d08aca:         StompFrame receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         String receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca: 
1:6d08aca:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
2:6d08aca:         stompConnection.sendFrame(message);
1:4e4d072: 
1:6d08aca:         StompFrame received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("1", received.getBody());
1:4e4d072: 
1:6d08aca:         String frame = "ACK\n" + "message-id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:4e4d072:         stompConnection.sendFrame(frame);
1:4fe2bd5: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("ERROR"));
1:6d08aca:         LOG.info("Broker sent: " + received);
1:6d08aca:     }
1:4fe2bd5: 
1:540a66b:     @Test(timeout = 60000)
1:6d08aca:     public void testClientAck() throws Exception {
1:6d08aca: 
1:6d08aca:         stompConnection.setVersion(Stomp.V1_2);
1:6d08aca: 
1:6d08aca:         String connect = "STOMP\r\n" +
1:6d08aca:                          "accept-version:1.2\r\n" +
1:6d08aca:                          "login:system\r\n" +
1:6d08aca:                          "passcode:manager\r\n" +
1:6d08aca:                          "\r\n" +
1:6d08aca:                          "\u0000\r\n";
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca: 
1:6d08aca:         String f = stompConnection.receiveFrame();
1:6d08aca:         LOG.info("Broker sent: " + f);
1:6d08aca: 
1:6d08aca:         assertTrue(f.startsWith("CONNECTED"));
1:6d08aca:         assertTrue(f.indexOf("version:1.2") >= 0);
1:6d08aca:         assertTrue(f.indexOf("session:") >= 0);
1:6d08aca: 
1:6d08aca:         String subscribe = "SUBSCRIBE\n" +
1:6d08aca:                            "id:1\n" +
1:6d08aca:                            "ack:client\n" +
1:6d08aca:                            "destination:/queue/" + getQueueName() + "\n" +
1:6d08aca:                            "receipt:1\n" +
1:6d08aca:                            "\n" + Stomp.NULL;
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(subscribe);
1:6d08aca: 
1:6d08aca:         StompFrame receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         String receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca: 
1:6d08aca:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(message);
1:3293579:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "2" + Stomp.NULL;
1:3293579:         stompConnection.sendFrame(message);
1:3293579: 
1:6d08aca:         StompFrame received = stompConnection.receive();
1:6d08aca:         LOG.info("Stomp Message: {}", received);
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("1", received.getBody());
1:6d08aca: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         LOG.info("Stomp Message: {}", received);
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("2", received.getBody());
1:6d08aca: 
1:6d08aca:         String frame = "ACK\n" + "id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:fdc2551:         stompConnection.sendFrame(frame);
1:6d08aca: 
1:6d08aca:         frame = "DISCONNECT\n\n" + Stomp.NULL;
5:6d08aca:         stompConnection.sendFrame(frame);
1:388c16d: 
1:388c16d:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:388c16d: 
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
1:6d08aca: 
1:6d08aca:         // reconnect and send some messages to the offline subscribers and then try to get
1:6d08aca:         // them after subscribing again.
1:6d08aca:         stompConnect();
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca:         frame = stompConnection.receiveFrame();
1:6d08aca:         LOG.debug("Broker sent: " + frame);
1:6d08aca:         assertTrue(frame.startsWith("CONNECTED"));
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(subscribe);
1:6d08aca: 
1:6d08aca:         receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca: 
1:6d08aca:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "3" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(message);
1:6d08aca: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         LOG.info("Stomp Message: {}", received);
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("3", received.getBody());
1:6d08aca: 
1:6d08aca:         frame = "ACK\n" + "id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:6d08aca:     }
1:6d08aca: 
1:540a66b:     @Test(timeout = 60000)
1:6d08aca:     public void testClientIndividualAck() throws Exception {
1:6d08aca: 
1:6d08aca:         stompConnection.setVersion(Stomp.V1_2);
1:6d08aca: 
1:6d08aca:         String connect = "STOMP\r\n" +
1:6d08aca:                          "accept-version:1.2\r\n" +
1:6d08aca:                          "login:system\r\n" +
1:6d08aca:                          "passcode:manager\r\n" +
1:6d08aca:                          "\r\n" +
1:6d08aca:                          "\u0000\r\n";
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca: 
1:6d08aca:         String f = stompConnection.receiveFrame();
1:6d08aca:         LOG.info("Broker sent: " + f);
1:6d08aca: 
1:6d08aca:         assertTrue(f.startsWith("CONNECTED"));
1:6d08aca:         assertTrue(f.indexOf("version:1.2") >= 0);
1:6d08aca:         assertTrue(f.indexOf("session:") >= 0);
1:6d08aca: 
1:6d08aca:         String subscribe = "SUBSCRIBE\n" +
1:6d08aca:                            "id:1\n" +
1:6d08aca:                            "ack:client-individual\n" +
1:6d08aca:                            "destination:/queue/" + getQueueName() + "\n" +
1:6d08aca:                            "receipt:1\n" +
1:6d08aca:                            "\n" + Stomp.NULL;
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(subscribe);
1:6d08aca: 
1:6d08aca:         StompFrame receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         String receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca: 
1:6d08aca:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(message);
2:6d08aca:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "2" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(message);
1:6d08aca: 
1:6d08aca:         StompFrame received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("1", received.getBody());
1:6d08aca: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("2", received.getBody());
1:6d08aca: 
1:6d08aca:         String frame = "ACK\n" + "id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(frame);
1:6d08aca: 
2:4fe2bd5:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(frame);
1:4fe2bd5:         Wait.waitFor(new Wait.Condition() {
1:4fe2bd5: 
1:4fe2bd5:             @Override
1:4fe2bd5:             public boolean isSatisified() throws Exception {
1:4fe2bd5:                 return getProxyToBroker().getCurrentConnectionsCount() <= 1;
1:4fe2bd5:             }
1:4fe2bd5:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:6d08aca: 
1:6d08aca:         // reconnect and send some messages to the offline subscribers and then try to get
1:6d08aca:         // them after subscribing again.
1:6d08aca:         stompConnect();
1:6d08aca:         stompConnection.sendFrame(connect);
1:6d08aca:         frame = stompConnection.receiveFrame();
1:6d08aca:         LOG.debug("Broker sent: " + frame);
1:6d08aca:         assertTrue(frame.startsWith("CONNECTED"));
1:6d08aca: 
1:6d08aca:         stompConnection.sendFrame(subscribe);
1:6d08aca: 
1:6d08aca:         receipt = stompConnection.receive();
1:6d08aca:         LOG.info("Broker sent: " + receipt);
1:6d08aca:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:6d08aca:         receiptId = receipt.getHeaders().get("receipt-id");
1:6d08aca:         assertEquals("1", receiptId);
1:6d08aca: 
1:6d08aca:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "3" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(message);
1:6d08aca: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("1", received.getBody());
1:6d08aca: 
1:6d08aca:         frame = "ACK\n" + "id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:6d08aca: 
1:6d08aca:         received = stompConnection.receive();
1:6d08aca:         assertTrue(received.getAction().equals("MESSAGE"));
1:6d08aca:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:6d08aca:         assertEquals("3", received.getBody());
1:6d08aca: 
1:6d08aca:         frame = "ACK\n" + "id:" +
1:6d08aca:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:6d08aca:         stompConnection.sendFrame(frame);
1:6d08aca:     }
1:6d08aca: 
1:540a66b:     @Test(timeout = 60000)
1:4e4d072:     public void testQueueBrowerSubscription() throws Exception {
1:4e4d072: 
1:4e4d072:         final int MSG_COUNT = 10;
1:57264bf: 
1:4e4d072:         String connectFrame = "STOMP\n" +
1:4e4d072:                               "login:system\n" +
1:4e4d072:                               "passcode:manager\n" +
1:4e4d072:                               "accept-version:1.2\n" +
1:4e4d072:                               "host:localhost\n" +
1:4e4d072:                               "\n" + Stomp.NULL;
1:4e4d072: 
1:4e4d072:         stompConnection.sendFrame(connectFrame);
1:4e4d072: 
1:4e4d072:         String f = stompConnection.receiveFrame();
1:4e4d072:         LOG.debug("Broker sent: " + f);
1:4e4d072: 
1:4e4d072:         assertTrue(f.startsWith("CONNECTED"));
1:4e4d072: 
1:4e4d072:         for(int i = 0; i < MSG_COUNT; ++i) {
1:4e4d072:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4e4d072:                              "receipt:0\n" +
1:4e4d072:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:4e4d072:             stompConnection.sendFrame(message);
1:4e4d072:             StompFrame repsonse = stompConnection.receive();
1:4e4d072:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:4e4d072:         }
1:4e4d072: 
1:4e4d072:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4e4d072:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:4e4d072:         stompConnection.sendFrame(subscribe);
1:fdc2551: 
1:4e4d072:         for(int i = 0; i < MSG_COUNT; ++i) {
1:4e4d072:             StompFrame message = stompConnection.receive();
1:4e4d072:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:4e4d072:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:4e4d072:         }
1:4e4d072: 
1:4e4d072:         // We should now get a browse done message
1:4e4d072:         StompFrame browseDone = stompConnection.receive();
1:4e4d072:         LOG.debug("Browse Done: " + browseDone.toString());
1:4e4d072:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:4e4d072:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:4e4d072:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:4e4d072:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1:4e4d072: 
1:4e4d072:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4fe2bd5:                        "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:4e4d072:         stompConnection.sendFrame(unsub);
1:4e4d072: 
1:388c16d:         StompFrame stompFrame = stompConnection.receive();
1:388c16d:         assertTrue(stompFrame.getAction().equals("RECEIPT"));
1:4e4d072: 
1:4e4d072:         subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n\n" + Stomp.NULL;
1:4e4d072:         stompConnection.sendFrame(subscribe);
1:4e4d072: 
1:4e4d072:         for(int i = 0; i < MSG_COUNT; ++i) {
1:4e4d072:             StompFrame message = stompConnection.receive();
1:4e4d072:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:4e4d072:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:4e4d072:         }
1:4e4d072: 
1:4e4d072:         stompConnection.sendFrame(unsub);
1:4e4d072:     }
1:4e4d072: 
1:540a66b:     @Test(timeout = 60000)
1:fdc2551:     public void testQueueBrowerNotInAutoAckMode() throws Exception {
1:fdc2551:         String connectFrame = "STOMP\n" +
1:fdc2551:                               "login:system\n" +
1:fdc2551:                               "passcode:manager\n" +
1:fdc2551:                               "accept-version:1.2\n" +
1:fdc2551:                               "host:localhost\n" +
1:fdc2551:                               "\n" + Stomp.NULL;
1:fdc2551: 
1:fdc2551:         stompConnection.sendFrame(connectFrame);
1:fdc2551: 
1:fdc2551:         String f = stompConnection.receiveFrame();
1:fdc2551:         LOG.debug("Broker sent: " + f);
1:fdc2551:         assertTrue(f.startsWith("CONNECTED"));
1:fdc2551: 
1:fdc2551:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:fdc2551:                            "ack:client\n" + "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:fdc2551:         stompConnection.sendFrame(subscribe);
1:fdc2551: 
1:fdc2551:         // We should now get a browse done message
1:fdc2551:         StompFrame browseDone = stompConnection.receive();
1:fdc2551:         LOG.debug("Browse Done: " + browseDone.toString());
1:fdc2551:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:fdc2551:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:fdc2551:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:fdc2551:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1:4e4d072: 
1:fdc2551:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:fdc2551:                        "id:12345\n\n" + Stomp.NULL;
1:fdc2551:         stompConnection.sendFrame(unsub);
1:fdc2551:     }
1:fdc2551: 
1:4fe2bd5:     @Test(timeout = 60000)
1:4fe2bd5:     public void testDurableSubAndUnSub() throws Exception {
1:4fe2bd5:         BrokerViewMBean view = getProxyToBroker();
1:4fe2bd5: 
1:4fe2bd5:         String connectFrame = "STOMP\n" +
1:4fe2bd5:                               "login:system\n" +
1:4fe2bd5:                               "passcode:manager\n" +
1:4fe2bd5:                               "accept-version:1.2\n" +
1:4fe2bd5:                               "host:localhost\n" +
1:4fe2bd5:                               "client-id:durableSubTest\n" +
1:4fe2bd5:                               "\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(connectFrame);
1:4fe2bd5: 
1:4fe2bd5:         String frame = stompConnection.receiveFrame();
1:4fe2bd5:         LOG.debug("Broker sent: " + frame);
1:4fe2bd5: 
1:4fe2bd5:         assertTrue(frame.startsWith("CONNECTED"));
1:4fe2bd5:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:4fe2bd5: 
1:4fe2bd5:         // subscribe to destination durably
1:4fe2bd5:         frame = "SUBSCRIBE\n" +
1:4fe2bd5:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:4fe2bd5:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:4fe2bd5:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:4fe2bd5: 
1:4fe2bd5:         StompFrame receipt = stompConnection.receive();
1:4fe2bd5:         LOG.debug("Broker sent: " + receipt);
1:4fe2bd5:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:4fe2bd5:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:4fe2bd5:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:4fe2bd5: 
1:4fe2bd5:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:4fe2bd5:         stompConnection.close();
1:4fe2bd5:         Wait.waitFor(new Wait.Condition() {
1:4fe2bd5: 
1:4fe2bd5:             @Override
1:4fe2bd5:             public boolean isSatisified() throws Exception {
1:4fe2bd5:                 return getProxyToBroker().getCurrentConnectionsCount() <= 1;
1:4fe2bd5:             }
1:4fe2bd5:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:4fe2bd5: 
1:4fe2bd5:         stompConnect();
1:4fe2bd5:         stompConnection.sendFrame(connectFrame);
1:4fe2bd5:         frame = stompConnection.receiveFrame();
1:4fe2bd5:         LOG.debug("Broker sent: " + frame);
1:4fe2bd5:         assertTrue(frame.startsWith("CONNECTED"));
1:4fe2bd5:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:4fe2bd5:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1:4fe2bd5: 
1:4fe2bd5:         // unsubscribe from topic
1:4fe2bd5:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:4fe2bd5:                 "id:durablesub-1\n" + "receipt:3\n" +
1:4fe2bd5:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:4fe2bd5:         receipt = stompConnection.receive();
1:4fe2bd5:         LOG.debug("Broker sent: " + frame);
1:4fe2bd5:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:4fe2bd5:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1:4fe2bd5: 
1:4fe2bd5:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:4fe2bd5:     }
1:4fe2bd5: 
1:4fe2bd5:     @Test(timeout = 60000)
1:4fe2bd5:     public void testSubscribeWithNoId() throws Exception {
1:4fe2bd5: 
1:4fe2bd5:         String connectFrame = "STOMP\n" +
1:4fe2bd5:                               "login:system\n" +
1:4fe2bd5:                               "passcode:manager\n" +
1:4fe2bd5:                               "accept-version:1.2\n" +
1:4fe2bd5:                               "host:localhost\n" +
1:4fe2bd5:                               "\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(connectFrame);
1:4fe2bd5: 
1:4fe2bd5:         String f = stompConnection.receiveFrame();
1:4fe2bd5:         LOG.debug("Broker sent: " + f);
1:4fe2bd5: 
1:4fe2bd5:         assertTrue(f.startsWith("CONNECTED"));
1:4fe2bd5: 
1:4fe2bd5:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4fe2bd5:                        "ack:auto\n\n" + Stomp.NULL;
1:4fe2bd5:         stompConnection.sendFrame(frame);
1:4fe2bd5: 
1:4fe2bd5:         frame = stompConnection.receiveFrame();
1:4fe2bd5:         assertTrue(frame.startsWith("ERROR"));
1:4fe2bd5:     }
1:57264bf: 
1:57264bf:     @Test(timeout = 60000)
1:57264bf:     public void testSizeAndBrokerUsage() throws Exception {
1:57264bf:         final int MSG_COUNT = 10;
1:57264bf:         final int numK = 4;
1:57264bf: 
1:57264bf:         final byte[] bigPropContent = new byte[numK*1024];
1:57264bf:         // fill so we don't fall foul to trimming in v<earlier than 1.2>
1:57264bf:         Arrays.fill(bigPropContent, Byte.MAX_VALUE);
1:57264bf:         final String bigProp = new String(bigPropContent);
1:57264bf: 
1:57264bf:         String connectFrame = "STOMP\n" +
1:57264bf:                               "login:system\n" +
1:57264bf:                               "passcode:manager\n" +
1:57264bf:                               "accept-version:1.2\n" +
1:57264bf:                               "host:localhost\n" +
1:57264bf:                               "\n" + Stomp.NULL;
1:57264bf: 
1:57264bf:         stompConnection.sendFrame(connectFrame);
1:57264bf: 
1:57264bf:         String f = stompConnection.receiveFrame();
1:57264bf:         LOG.debug("Broker sent: " + f);
1:57264bf: 
1:57264bf:         assertTrue(f.startsWith("CONNECTED"));
1:4fe2bd5: 
1:57264bf:         long usageStart = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:57264bf: 
1:57264bf:         for(int i = 0; i < MSG_COUNT; ++i) {
1:57264bf:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:57264bf:                              "receipt:0\n" +
1:57264bf:                              "myXkProp:" + bigProp + "\n"+
1:57264bf:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:57264bf:             stompConnection.sendFrame(message);
1:57264bf:             StompFrame repsonse = stompConnection.receive();
1:57264bf:             LOG.info("response:" + repsonse);
1:57264bf:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:57264bf:         }
1:57264bf: 
1:57264bf:         // verify usage accounts for our numK
1:57264bf:         long usageEnd = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1:57264bf: 
1:57264bf:         long usageDiff = usageEnd - usageStart;
1:57264bf:         LOG.info("usageDiff:" + usageDiff);
1:57264bf:         assertTrue(usageDiff > MSG_COUNT * numK * 1024);
1:57264bf: 
1:57264bf:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:57264bf:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:57264bf:         stompConnection.sendFrame(subscribe);
1:57264bf: 
1:57264bf:         for(int i = 0; i < MSG_COUNT; ++i) {
1:57264bf:             StompFrame message = stompConnection.receive();
1:57264bf:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:57264bf:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:57264bf:         }
1:57264bf: 
1:57264bf:     }
1:6d08aca: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:57264bf
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testSizeAndBrokerUsage() throws Exception {
1:         final int MSG_COUNT = 10;
1:         final int numK = 4;
1: 
1:         final byte[] bigPropContent = new byte[numK*1024];
1:         // fill so we don't fall foul to trimming in v<earlier than 1.2>
1:         Arrays.fill(bigPropContent, Byte.MAX_VALUE);
1:         final String bigProp = new String(bigPropContent);
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         long usageStart = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                              "receipt:0\n" +
1:                              "myXkProp:" + bigProp + "\n"+
1:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:             stompConnection.sendFrame(message);
1:             StompFrame repsonse = stompConnection.receive();
1:             LOG.info("response:" + repsonse);
1:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:         }
1: 
1:         // verify usage accounts for our numK
1:         long usageEnd = brokerService.getSystemUsage().getMemoryUsage().getUsage();
1: 
1:         long usageDiff = usageEnd - usageStart;
1:         LOG.info("usageDiff:" + usageDiff);
1:         assertTrue(usageDiff > MSG_COUNT * numK * 1024);
1: 
1:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             StompFrame message = stompConnection.receive();
1:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         }
1: 
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
1:         try {
1:             connection.close();
1:         } catch (Exception ex) {}
1: 
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4fe2bd5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() <= 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
/////////////////////////////////////////////////////////////////////////
1:                        "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testDurableSubAndUnSub() throws Exception {
1:         BrokerViewMBean view = getProxyToBroker();
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "client-id:durableSubTest\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1: 
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
1:         // subscribe to destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         stompConnection.close();
1:         Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() <= 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1: 
1:         stompConnect();
1:         stompConnection.sendFrame(connectFrame);
1:         frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1: 
1:         // unsubscribe from topic
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "id:durablesub-1\n" + "receipt:3\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1: 
1:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSubscribeWithNoId() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
1:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:388c16d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
/////////////////////////////////////////////////////////////////////////
0:                        "receipt:1" + "id:12345\n\n" + Stomp.NULL;
1:         StompFrame stompFrame = stompConnection.receive();
1:         assertTrue(stompFrame.getAction().equals("RECEIPT"));
commit:fdc2551
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testQueueBrowerNotInAutoAckMode() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                            "ack:client\n" + "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         // We should now get a browse done message
1:         StompFrame browseDone = stompConnection.receive();
1:         LOG.debug("Browse Done: " + browseDone.toString());
1:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4e4d072
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testQueueBrowerSubscription() throws Exception {
1: 
1:         final int MSG_COUNT = 10;
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                              "receipt:0\n" +
1:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:             stompConnection.sendFrame(message);
1:             StompFrame repsonse = stompConnection.receive();
1:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:         }
1: 
1:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             StompFrame message = stompConnection.receive();
1:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         }
1: 
1:         // We should now get a browse done message
1:         StompFrame browseDone = stompConnection.receive();
1:         LOG.debug("Browse Done: " + browseDone.toString());
1:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
0:                        "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
0:         Thread.sleep(2000);
1: 
1:         subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             StompFrame message = stompConnection.receive();
1:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         }
1: 
1:         stompConnection.sendFrame(unsub);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:7d90776
/////////////////////////////////////////////////////////////////////////
commit:3293579
/////////////////////////////////////////////////////////////////////////
0:     protected void addStompConnector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                            "activemq.prefetchSize=1\n" +
/////////////////////////////////////////////////////////////////////////
1:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "2" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
0: import org.apache.activemq.broker.TransportConnector;
1: public class Stomp12Test extends StompTestSupport {
1:     public void setUp() throws Exception {
1:         super.setUp();
1:     @Override
0: 	protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
1:     protected Socket createSocket() throws IOException {
1:         return new Socket("127.0.0.1", this.port);
1:     @Override
1:     protected String getQueueName() {
1:         return getClass().getName() + "." + getName();
commit:6d08aca
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: 
1: import javax.jms.Connection;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class Stomp12Test extends CombinationTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(Stomp12Test.class);
1: 
0:     protected String bindAddress = "stomp://localhost:61613";
0:     protected String confUri = "xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml";
0:     protected String jmsUri = "vm://localhost";
1: 
0:     private BrokerService broker;
0:     private StompConnection stompConnection = new StompConnection();
1:     private Connection connection;
1: 
1:     @Override
0:     protected void setUp() throws Exception {
1: 
0:         broker = BrokerFactory.createBroker(new URI(confUri));
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
1:         stompConnect();
1: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(jmsUri);
1:         connection = cf.createConnection("system", "manager");
1:         connection.start();
1:     }
1: 
0:     private void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
0:         URI connectUri = new URI(bindAddress);
0:         stompConnection.open(createSocket(connectUri));
1:     }
1: 
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
0:     protected String getQueueName() {
0:         return getClass().getName() + "." + getName();
1:     }
1: 
1:     @Override
0:     protected void tearDown() throws Exception {
0:         try {
0:             stompDisconnect();
0:         } catch(Exception e) {
0:             // Some tests explicitly disconnect from stomp so can ignore
0:         } finally {
0:             broker.stop();
0:             broker.waitUntilStopped();
1:         }
1:     }
1: 
0:     private void stompDisconnect() throws IOException {
0:         if (stompConnection != null) {
0:             stompConnection.close();
0:             stompConnection = null;
1:         }
1:     }
1: 
0:     @Test
1:     public void testTelnetStyleSends() throws Exception {
1: 
1:         stompConnection.setVersion(Stomp.V1_2);
1: 
1:         String connect = "CONNECT\r\n" +
1:                          "accept-version:1.2\r\n" +
1:                          "login:system\r\n" +
1:                          "passcode:manager\r\n" +
1:                          "\r\n" +
1:                          "\u0000\r\n";
1: 
1:         stompConnection.sendFrame(connect);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.info("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.2") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         String send = "SUBSCRIBE\r\n" +
1:                       "id:1\r\n" +
1:                       "destination:/queue/" + getQueueName() + "\r\n" +
1:                       "receipt:1\r\n" +
1:                       "\r\n"+
1:                       "\u0000\r\n";
1: 
1:         stompConnection.sendFrame(send);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         String receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
0:         String disconnect = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(disconnect);
1:     }
1: 
0:     @Test
1:     public void testClientAckWithoutAckId() throws Exception {
1: 
1:         stompConnection.setVersion(Stomp.V1_2);
1: 
1:         String connect = "STOMP\r\n" +
1:                          "accept-version:1.2\r\n" +
1:                          "login:system\r\n" +
1:                          "passcode:manager\r\n" +
1:                          "\r\n" +
1:                          "\u0000\r\n";
1: 
1:         stompConnection.sendFrame(connect);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.info("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.2") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         String subscribe = "SUBSCRIBE\n" +
1:                            "id:1\n" +
1:                            "ack:client\n" +
1:                            "destination:/queue/" + getQueueName() + "\n" +
1:                            "receipt:1\n" +
1:                            "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(subscribe);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         String receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("1", received.getBody());
1: 
1:         String frame = "ACK\n" + "message-id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("ERROR"));
1:         LOG.info("Broker sent: " + received);
1: 
0:         String disconnect = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(disconnect);
1:     }
1: 
0:     @Test
1:     public void testClientAck() throws Exception {
1: 
1:         stompConnection.setVersion(Stomp.V1_2);
1: 
1:         String connect = "STOMP\r\n" +
1:                          "accept-version:1.2\r\n" +
1:                          "login:system\r\n" +
1:                          "passcode:manager\r\n" +
1:                          "\r\n" +
1:                          "\u0000\r\n";
1: 
1:         stompConnection.sendFrame(connect);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.info("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.2") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         String subscribe = "SUBSCRIBE\n" +
1:                            "id:1\n" +
1:                            "ack:client\n" +
1:                            "destination:/queue/" + getQueueName() + "\n" +
1:                            "receipt:1\n" +
1:                            "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(subscribe);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         String receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "2" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         StompFrame received = stompConnection.receive();
1:         LOG.info("Stomp Message: {}", received);
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("1", received.getBody());
1: 
1:         received = stompConnection.receive();
1:         LOG.info("Stomp Message: {}", received);
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("2", received.getBody());
1: 
1:         String frame = "ACK\n" + "id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "DISCONNECT\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
0:         try {
0:             Thread.sleep(400);
0:         } catch (InterruptedException e){}
1: 
1:         // reconnect and send some messages to the offline subscribers and then try to get
1:         // them after subscribing again.
1:         stompConnect();
1:         stompConnection.sendFrame(connect);
1:         frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         stompConnection.sendFrame(subscribe);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
1:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "3" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         received = stompConnection.receive();
1:         LOG.info("Stomp Message: {}", received);
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("3", received.getBody());
1: 
1:         frame = "ACK\n" + "id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         String disconnect = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(disconnect);
1:     }
1: 
0:     @Test
1:     public void testClientIndividualAck() throws Exception {
1: 
1:         stompConnection.setVersion(Stomp.V1_2);
1: 
1:         String connect = "STOMP\r\n" +
1:                          "accept-version:1.2\r\n" +
1:                          "login:system\r\n" +
1:                          "passcode:manager\r\n" +
1:                          "\r\n" +
1:                          "\u0000\r\n";
1: 
1:         stompConnection.sendFrame(connect);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.info("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.2") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         String subscribe = "SUBSCRIBE\n" +
1:                            "id:1\n" +
1:                            "ack:client-individual\n" +
1:                            "destination:/queue/" + getQueueName() + "\n" +
1:                            "receipt:1\n" +
1:                            "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(subscribe);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         String receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "1" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "2" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("1", received.getBody());
1: 
1:         received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("2", received.getBody());
1: 
1:         String frame = "ACK\n" + "id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
0:         try {
0:             Thread.sleep(400);
0:         } catch (InterruptedException e){}
1: 
1:         // reconnect and send some messages to the offline subscribers and then try to get
1:         // them after subscribing again.
1:         stompConnect();
1:         stompConnection.sendFrame(connect);
1:         frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         stompConnection.sendFrame(subscribe);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.info("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         receiptId = receipt.getHeaders().get("receipt-id");
1:         assertEquals("1", receiptId);
1: 
1:         message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "3" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("1", received.getBody());
1: 
1:         frame = "ACK\n" + "id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1:         assertTrue(received.getHeaders().containsKey(Stomp.Headers.Message.ACK_ID));
1:         assertEquals("3", received.getBody());
1: 
1:         frame = "ACK\n" + "id:" +
1:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         String disconnect = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(disconnect);
1:     }
1: 
1: }
============================================================================