1:1aa6cbc: /**
1:1aa6cbc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1aa6cbc:  * contributor license agreements.  See the NOTICE file distributed with
1:1aa6cbc:  * this work for additional information regarding copyright ownership.
1:1aa6cbc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1aa6cbc:  * (the "License"); you may not use this file except in compliance with
1:1aa6cbc:  * the License.  You may obtain a copy of the License at
1:1aa6cbc:  *
1:1aa6cbc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1aa6cbc:  *
1:1aa6cbc:  * Unless required by applicable law or agreed to in writing, software
1:1aa6cbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1aa6cbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1aa6cbc:  * See the License for the specific language governing permissions and
1:1aa6cbc:  * limitations under the License.
1:1aa6cbc:  */
1:6ebc82c: package org.apache.activemq.bugs;
3:6ebc82c: 
1:1595378: import static org.junit.Assert.assertEquals;
1:1595378: import static org.junit.Assert.assertFalse;
1:1595378: 
1:6ebc82c: import java.io.IOException;
1:6ebc82c: import java.util.concurrent.CountDownLatch;
1:6ebc82c: 
1:6ebc82c: import javax.jms.BytesMessage;
1:6ebc82c: import javax.jms.Connection;
1:6ebc82c: import javax.jms.ConnectionFactory;
1:6ebc82c: import javax.jms.DeliveryMode;
1:6ebc82c: import javax.jms.Message;
1:6ebc82c: import javax.jms.MessageConsumer;
1:6ebc82c: import javax.jms.MessageListener;
1:6ebc82c: import javax.jms.MessageProducer;
1:6ebc82c: import javax.jms.Session;
1:1595378: 
1:6ebc82c: import org.apache.activemq.ActiveMQConnectionFactory;
1:6ebc82c: import org.apache.activemq.RedeliveryPolicy;
1:6ebc82c: import org.apache.activemq.broker.BrokerService;
1:6ebc82c: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:6ebc82c: import org.apache.activemq.store.kahadb.KahaDBStore;
1:6ebc82c: import org.junit.After;
1:6ebc82c: import org.junit.Assert;
1:6ebc82c: import org.junit.Before;
1:6ebc82c: import org.junit.Test;
1:6ebc82c: 
1:6ebc82c: public class AMQ2982Test {
1:6ebc82c: 
1:6ebc82c:     private static final int MAX_MESSAGES = 500;
1:6ebc82c: 
1:6ebc82c:     private static final String QUEUE_NAME = "test.queue";
1:6ebc82c: 
1:6ebc82c:     private BrokerService broker;
1:6ebc82c: 
1:6ebc82c:     private final CountDownLatch messageCountDown = new CountDownLatch(MAX_MESSAGES);
1:6ebc82c: 
1:6ebc82c:     private CleanableKahaDBStore kahaDB;
1:6ebc82c: 
1:6ebc82c:     private static class CleanableKahaDBStore extends KahaDBStore {
1:6ebc82c:         // make checkpoint cleanup accessible
1:6ebc82c:         public void forceCleanup() throws IOException {
1:6ebc82c:             checkpointCleanup(true);
1:6ebc82c:         }
1:6ebc82c: 
1:6ebc82c:         public int getFileMapSize() throws IOException {
1:6ebc82c:             // ensure save memory publishing, use the right lock
1:6ebc82c:             indexLock.readLock().lock();
1:6ebc82c:             try {
1:1595378:                 return getJournal().getFileMap().size();
1:6ebc82c:             } finally {
1:6ebc82c:                 indexLock.readLock().unlock();
1:6ebc82c:             }
1:6ebc82c:         }
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     @Before
1:6ebc82c:     public void setup() throws Exception {
1:6ebc82c: 
1:6ebc82c:         broker = new BrokerService();
1:6ebc82c:         broker.setDeleteAllMessagesOnStartup(true);
1:6ebc82c:         broker.setPersistent(true);
1:6ebc82c: 
1:6ebc82c:         kahaDB = new CleanableKahaDBStore();
1:6ebc82c:         kahaDB.setJournalMaxFileLength(256 * 1024);
1:6ebc82c:         broker.setPersistenceAdapter(kahaDB);
1:6ebc82c: 
1:6ebc82c:         broker.start();
1:6ebc82c:         broker.waitUntilStarted();
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     private Connection registerDLQMessageListener() throws Exception {
1:6ebc82c:         ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:6ebc82c:         Connection connection = factory.createConnection();
1:6ebc82c:         connection.start();
1:6ebc82c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ebc82c:         MessageConsumer consumer = session.createConsumer(session
1:6ebc82c:                 .createQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:6ebc82c:         consumer.setMessageListener(new MessageListener() {
1:6ebc82c: 
1:5219fa1:             @Override
1:6ebc82c:             public void onMessage(Message message) {
1:6ebc82c:                 messageCountDown.countDown();
1:6ebc82c:             }
1:6ebc82c:         });
1:6ebc82c: 
1:6ebc82c:         return connection;
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     class ConsumerThread extends Thread {
1:6ebc82c: 
1:6ebc82c:         @Override
1:6ebc82c:         public void run() {
1:6ebc82c:             try {
1:6ebc82c:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:6ebc82c: 
1:6ebc82c:                 RedeliveryPolicy policy = new RedeliveryPolicy();
1:6ebc82c:                 policy.setMaximumRedeliveries(0);
1:6ebc82c:                 policy.setInitialRedeliveryDelay(100);
1:6ebc82c:                 policy.setUseExponentialBackOff(false);
1:6ebc82c: 
1:6ebc82c:                 factory.setRedeliveryPolicy(policy);
1:6ebc82c: 
1:6ebc82c:                 Connection connection = factory.createConnection();
1:6ebc82c:                 connection.start();
1:6ebc82c:                 Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:6ebc82c:                 MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:6ebc82c:                 do {
1:6ebc82c:                     Message message = consumer.receive(300);
1:6ebc82c:                     if (message != null) {
1:6ebc82c:                         session.rollback();
1:6ebc82c:                     }
1:6ebc82c:                 } while (messageCountDown.getCount() != 0);
1:6ebc82c:                 consumer.close();
1:6ebc82c:                 session.close();
1:6ebc82c:                 connection.close();
1:6ebc82c:             } catch (Exception e) {
1:6ebc82c:                 Assert.fail(e.getMessage());
1:6ebc82c:             }
1:6ebc82c:         }
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     private void sendMessages() throws Exception {
1:6ebc82c:         ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:6ebc82c:         Connection connection = factory.createConnection();
1:6ebc82c:         connection.start();
1:6ebc82c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ebc82c:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:6ebc82c:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:6ebc82c:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:6ebc82c:             BytesMessage message = session.createBytesMessage();
1:6ebc82c:             message.writeBytes(new byte[1000]);
1:6ebc82c:             producer.send(message);
1:6ebc82c:         }
1:6ebc82c:         producer.close();
1:6ebc82c:         session.close();
1:6ebc82c:         connection.close();
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     @Test
1:6ebc82c:     public void testNoStickyKahaDbLogFilesOnLocalTransactionRollback() throws Exception {
1:6ebc82c: 
1:6ebc82c:         Connection dlqConnection = registerDLQMessageListener();
1:6ebc82c: 
1:6ebc82c:         ConsumerThread thread = new ConsumerThread();
1:6ebc82c:         thread.start();
1:6ebc82c: 
1:6ebc82c:         sendMessages();
1:6ebc82c: 
1:6ebc82c:         thread.join(60 * 1000);
1:6ebc82c:         assertFalse(thread.isAlive());
1:6ebc82c: 
1:6ebc82c:         dlqConnection.close();
1:6ebc82c: 
1:6ebc82c:         kahaDB.forceCleanup();
1:6ebc82c: 
1:6ebc82c:         assertEquals("only one active KahaDB log file after cleanup is expected", 1, kahaDB.getFileMapSize());
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c:     @After
1:6ebc82c:     public void tearDown() throws Exception {
1:6ebc82c:         broker.stop();
1:6ebc82c:     }
1:6ebc82c: 
1:6ebc82c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:1595378
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
0: import java.net.URISyntaxException;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 return getJournal().getFileMap().size();
author:Robert Davies
-------------------------------------------------------------------------------
commit:8e61f51
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
0:                 return getJournalManager().getFileMap().size();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1aa6cbc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:6ebc82c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
1: 
1: import java.io.IOException;
0: import java.net.URISyntaxException;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ2982Test {
1: 
1:     private static final int MAX_MESSAGES = 500;
1: 
1:     private static final String QUEUE_NAME = "test.queue";
1: 
1:     private BrokerService broker;
1: 
1:     private final CountDownLatch messageCountDown = new CountDownLatch(MAX_MESSAGES);
1: 
1:     private CleanableKahaDBStore kahaDB;
1: 
1:     private static class CleanableKahaDBStore extends KahaDBStore {
1:         // make checkpoint cleanup accessible
1:         public void forceCleanup() throws IOException {
1:             checkpointCleanup(true);
1:         }
1: 
1:         public int getFileMapSize() throws IOException {
1:             // ensure save memory publishing, use the right lock
1:             indexLock.readLock().lock();
1:             try {
0:                 return getJournal().getFileMap().size();
1:             } finally {
1:                 indexLock.readLock().unlock();
1:             }
1:         }
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1: 
1:         kahaDB = new CleanableKahaDBStore();
1:         kahaDB.setJournalMaxFileLength(256 * 1024);
1:         broker.setPersistenceAdapter(kahaDB);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private Connection registerDLQMessageListener() throws Exception {
1:         ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(session
1:                 .createQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 messageCountDown.countDown();
1:             }
1:         });
1: 
1:         return connection;
1:     }
1: 
1:     class ConsumerThread extends Thread {
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1: 
1:                 RedeliveryPolicy policy = new RedeliveryPolicy();
1:                 policy.setMaximumRedeliveries(0);
1:                 policy.setInitialRedeliveryDelay(100);
1:                 policy.setUseExponentialBackOff(false);
1: 
1:                 factory.setRedeliveryPolicy(policy);
1: 
1:                 Connection connection = factory.createConnection();
1:                 connection.start();
1:                 Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                 MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:                 do {
1:                     Message message = consumer.receive(300);
1:                     if (message != null) {
1:                         session.rollback();
1:                     }
1:                 } while (messageCountDown.getCount() != 0);
1:                 consumer.close();
1:                 session.close();
1:                 connection.close();
1:             } catch (Exception e) {
1:                 Assert.fail(e.getMessage());
1:             }
1:         }
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(new byte[1000]);
1:             producer.send(message);
1:         }
1:         producer.close();
1:         session.close();
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testNoStickyKahaDbLogFilesOnLocalTransactionRollback() throws Exception {
1: 
1:         Connection dlqConnection = registerDLQMessageListener();
1: 
1:         ConsumerThread thread = new ConsumerThread();
1:         thread.start();
1: 
1:         sendMessages();
1: 
1:         thread.join(60 * 1000);
1:         assertFalse(thread.isAlive());
1: 
1:         dlqConnection.close();
1: 
1:         kahaDB.forceCleanup();
1: 
1:         assertEquals("only one active KahaDB log file after cleanup is expected", 1, kahaDB.getFileMapSize());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1: }
============================================================================