1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:d29ca2a: 
1:468e697: import java.util.Map;
1:468e697: 
1:e6f5d30: import javax.management.openmbean.CompositeData;
1:e6f5d30: import javax.management.openmbean.OpenDataException;
1:e6f5d30: 
1:07d4e8c: public interface QueueViewMBean extends DestinationViewMBean {
1:fc00993: 
1:fc00993:     /**
1:07d4e8c:      * Retrieve a message from the destination's queue.
1:07d4e8c:      * 
1:fc00993:      * @param messageId the message id of the message to retrieve
1:07d4e8c:      * @return A CompositeData object which is a JMX version of the messages
1:07d4e8c:      * @throws OpenDataException
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("View a message from the destination by JMS message ID.")
1:ced6909:     CompositeData getMessage(@MBeanInfo("messageId") String messageId) throws OpenDataException;
1:fc00993: 
1:07d4e8c:     /**
1:9479de7:      * Removes a message from the queue. If the message has already been
1:9479de7:      * dispatched to another consumer, the message cannot be deleted and this
1:9479de7:      * method will return false.
1:07d4e8c:      * 
1:07d4e8c:      * @param messageId
1:9479de7:      * @return true if the message was found and could be successfully deleted.
1:fc00993:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Remove a message from the destination by JMS message ID.  If the message has been dispatched, it cannot be deleted and false is returned.")
1:ced6909:     boolean removeMessage(@MBeanInfo("messageId") String messageId) throws Exception;
1:07d4e8c: 
1:07d4e8c:     /**
1:9479de7:      * Removes the messages matching the given selector
1:07d4e8c:      * 
1:9479de7:      * @return the number of messages removed
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Removes messages from the destination based on an SQL-92 selection on the message headers or XPATH on the body.")
1:ced6909:     int removeMatchingMessages(@MBeanInfo("selector") String selector) throws Exception;
1:07d4e8c: 
1:07d4e8c:     /**
1:fc00993:      * Removes the messages matching the given selector up to the maximum number
1:fc00993:      * of matched messages
1:d29ca2a:      * 
1:9479de7:      * @return the number of messages removed
1:9479de7:      */
1:ced6909:     @MBeanInfo("Removes up to a specified number of messages from the destination based on an SQL-92 selection on the message headers or XPATH on the body.")
1:ced6909:     int removeMatchingMessages(@MBeanInfo("selector") String selector, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
1:07d4e8c: 
1:07d4e8c:     /**
1:9479de7:      * Removes all of the messages in the queue.
1:fc00993:      * 
1:fc00993:      * @throws Exception
1:9479de7:      */
1:ced6909:     @MBeanInfo("Removes all of the messages in the queue.")
1:fc00993:     void purge() throws Exception;
1:fc00993: 
1:9479de7:     /**
1:9479de7:      * Copies a given message to another destination.
1:d29ca2a:      * 
1:07d4e8c:      * @param messageId
1:07d4e8c:      * @param destinationName
1:9479de7:      * @return true if the message was found and was successfully copied to the
1:9479de7:      *         other destination.
1:07d4e8c:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Copies a message with the given JMS message ID into the specified destination.")
1:ced6909:     boolean copyMessageTo(@MBeanInfo("messageId") String messageId, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:07d4e8c: 
1:9479de7:     /**
1:9479de7:      * Copies the messages matching the given selector
4:9479de7:      * 
1:9479de7:      * @return the number of messages copied
1:9479de7:      */
1:ced6909:     @MBeanInfo("Copies messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:ced6909:     int copyMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:e6f5d30: 
1:9479de7:     /**
1:fc00993:      * Copies the messages matching the given selector up to the maximum number
1:fc00993:      * of matched messages
1:9479de7:      * 
1:9479de7:      * @return the number of messages copied
1:9479de7:      */
1:ced6909:     @MBeanInfo("Copies up to a specified number of messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:ced6909:     int copyMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
1:e6f5d30: 
1:9479de7:     /**
1:9479de7:      * Moves the message to another destination.
1:9479de7:      * 
3:9479de7:      * @param messageId
1:9479de7:      * @param destinationName
1:9479de7:      * @return true if the message was found and was successfully copied to the
1:9479de7:      *         other destination.
2:9479de7:      * @throws Exception
1:9479de7:      */
1:ced6909:     @MBeanInfo("Moves a message with the given JMS message ID into the specified destination.")
1:ced6909:     boolean moveMessageTo(@MBeanInfo("messageId") String messageId, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:d29ca2a: 
1:9479de7:     /**
1:323bb23:      * Moves a message back to its original destination
1:323bb23:      */
1:ced6909:     @MBeanInfo("Moves a message with the given JMS message back to its original destination")
1:ced6909:     boolean retryMessage(@MBeanInfo("messageId") String messageId) throws Exception;
1:d29ca2a:     
1:323bb23:     /**
1:9479de7:      * Moves the messages matching the given selector
1:9479de7:      * 
1:9479de7:      * @return the number of messages removed
1:9479de7:      */
1:ced6909:     @MBeanInfo("Moves messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:ced6909:     int moveMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:fc00993: 
1:9479de7:     /**
1:fc00993:      * Moves the messages matching the given selector up to the maximum number
1:fc00993:      * of matched messages
1:9479de7:      */
1:ced6909:     @MBeanInfo("Moves up to a specified number of messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:ced6909:     int moveMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
1:e1f170d: 
1:e1f170d:     /**
1:e1f170d:      * Retries messages sent to the DLQ
1:e1f170d:      */
1:e1f170d:     @MBeanInfo("Retries messages sent to the DLQ")
1:e1f170d:     public int retryMessages() throws Exception;
1:d29ca2a:     
1:9479de7:     /**
1:4dde323:      * @return true if the message cursor has memory space available
1:4dde323:      * to page in more messages
1:9479de7:      */
1:ced6909:     @MBeanInfo("Message cursor has memory space available")
1:4dde323:     public boolean doesCursorHaveSpace();
1:d29ca2a:     
2:4dde323:     /**
1:4dde323:      * @return true if the cursor has reached its memory limit for
1:4dde323:      * paged in messages
2:4dde323:      */
1:ced6909:     @MBeanInfo("Message cusor has reached its memory limit for paged in messages")
1:4dde323:     public boolean isCursorFull();
1:323bb23:     
1:4dde323:     /**
1:4dde323:      * @return true if the cursor has messages buffered to deliver
1:4dde323:      */
1:ced6909:     @MBeanInfo("Message cursor has buffered messages to deliver")
1:4dde323:     public boolean doesCursorHaveMessagesBuffered();
7:9479de7:     
1:4dde323:     /**
1:4dde323:      * @return the cursor memory usage in bytes
1:4dde323:      */
1:ced6909:     @MBeanInfo("Message cursor memory usage, in bytes.")
1:4dde323:     public long getCursorMemoryUsage();
1:9479de7:     
1:4dde323:     /**
1:4dde323:      * @return the cursor memory usage as a percentage
1:4dde323:      */
1:ced6909:     @MBeanInfo("Percentage of memory limit used")
1:4dde323:     public int getCursorPercentUsage();
1:9479de7:     
1:4dde323:     /**
1:4dde323:      * @return the number of messages available to be paged in 
1:4dde323:      * by the cursor
1:4dde323:      */
1:ced6909:     @MBeanInfo("Number of messages available to be paged in by the cursor.")
1:4dde323:     public int cursorSize();
1:323bb23: 
1:aad7e73:     /**
1:aad7e73:      * @return true if caching is currently enabled of for the destination
1:aad7e73:      */
1:aad7e73:     @MBeanInfo("Caching is enabled")
1:aad7e73:     boolean isCacheEnabled();
1:468e697: 
1:468e697: 
1:468e697:     /**
1:468e697:      * @return a Map of groupNames and ConsumerIds
1:468e697:      */
1:468e697:     @MBeanInfo("Map of groupNames and ConsumerIds")
1:468e697:     Map<String,String> getMessageGroups();
1:468e697: 
1:468e697:     /**
1:468e697:      * @return the message group type implementation (simple,bucket,cached)
1:468e697:      */
1:468e697:     @MBeanInfo("group  implementation (simple,bucket,cached)")
1:468e697:     String getMessageGroupType();
1:468e697: 
1:468e697:     /**
1:468e697:      * remove a message group = has the effect of rebalancing group
1:468e697:      * @param groupName
1:468e697:      */
1:468e697: 
1:468e697:     @MBeanInfo("remove a message group by its groupName")
1:468e697:     void removeMessageGroup(@MBeanInfo("groupName")String groupName);
1:468e697: 
1:468e697:     /**
1:468e697:      * remove all the message groups - will rebalance all message groups across consumers
1:468e697:      */
1:468e697:     @MBeanInfo("emove all the message groups - will rebalance all message groups across consumers")
1:468e697:     void removeAllMessageGroups();
1:85b9c81: 
1:85b9c81:     @MBeanInfo("pause dispatch to consumers")
1:85b9c81:     void pause();
1:85b9c81: 
1:85b9c81:     @MBeanInfo("resume dispatch to consumers if paused")
1:85b9c81:     void resume();
1:85b9c81: 
1:85b9c81:     @MBeanInfo("Dispatch to consumers is paused")
1:85b9c81:     boolean isPaused();
1:85b9c81: 
1:85b9c81: 
1:86cbdfd: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:85b9c81
/////////////////////////////////////////////////////////////////////////
1: 
1:     @MBeanInfo("pause dispatch to consumers")
1:     void pause();
1: 
1:     @MBeanInfo("resume dispatch to consumers if paused")
1:     void resume();
1: 
1:     @MBeanInfo("Dispatch to consumers is paused")
1:     boolean isPaused();
1: 
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:468e697
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * @return a Map of groupNames and ConsumerIds
1:      */
1:     @MBeanInfo("Map of groupNames and ConsumerIds")
1:     Map<String,String> getMessageGroups();
1: 
1:     /**
1:      * @return the message group type implementation (simple,bucket,cached)
1:      */
1:     @MBeanInfo("group  implementation (simple,bucket,cached)")
1:     String getMessageGroupType();
1: 
1:     /**
1:      * remove a message group = has the effect of rebalancing group
1:      * @param groupName
1:      */
1: 
1:     @MBeanInfo("remove a message group by its groupName")
1:     void removeMessageGroup(@MBeanInfo("groupName")String groupName);
1: 
1:     /**
1:      * remove all the message groups - will rebalance all message groups across consumers
1:      */
1:     @MBeanInfo("emove all the message groups - will rebalance all message groups across consumers")
1:     void removeAllMessageGroups();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Retries messages sent to the DLQ
1:      */
1:     @MBeanInfo("Retries messages sent to the DLQ")
1:     public int retryMessages() throws Exception;
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("View a message from the destination by JMS message ID.")
1:     CompositeData getMessage(@MBeanInfo("messageId") String messageId) throws OpenDataException;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Remove a message from the destination by JMS message ID.  If the message has been dispatched, it cannot be deleted and false is returned.")
1:     boolean removeMessage(@MBeanInfo("messageId") String messageId) throws Exception;
1:     @MBeanInfo("Removes messages from the destination based on an SQL-92 selection on the message headers or XPATH on the body.")
1:     int removeMatchingMessages(@MBeanInfo("selector") String selector) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Removes up to a specified number of messages from the destination based on an SQL-92 selection on the message headers or XPATH on the body.")
1:     int removeMatchingMessages(@MBeanInfo("selector") String selector, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
1:     @MBeanInfo("Removes all of the messages in the queue.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Copies a message with the given JMS message ID into the specified destination.")
1:     boolean copyMessageTo(@MBeanInfo("messageId") String messageId, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:     @MBeanInfo("Copies messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:     int copyMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Copies up to a specified number of messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:     int copyMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Moves a message with the given JMS message ID into the specified destination.")
1:     boolean moveMessageTo(@MBeanInfo("messageId") String messageId, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:     @MBeanInfo("Moves a message with the given JMS message back to its original destination")
1:     boolean retryMessage(@MBeanInfo("messageId") String messageId) throws Exception;
1:     @MBeanInfo("Moves messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:     int moveMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName) throws Exception;
1:     @MBeanInfo("Moves up to a specified number of messages based on an SQL-92 selecton on the message headers or XPATH on the body into the specified destination.")
1:     int moveMatchingMessagesTo(@MBeanInfo("selector") String selector, @MBeanInfo("destinationName") String destinationName, @MBeanInfo("maximumMessages") int maximumMessages) throws Exception;
1:     @MBeanInfo("Message cursor has memory space available")
1:     @MBeanInfo("Message cusor has reached its memory limit for paged in messages")
1:     @MBeanInfo("Message cursor has buffered messages to deliver")
1:     @MBeanInfo("Message cursor memory usage, in bytes.")
1:     @MBeanInfo("Percentage of memory limit used")
1:     @MBeanInfo("Number of messages available to be paged in by the cursor.")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @param messageId the message id of the message to retrieve
0:     CompositeData getMessage(String messageId) throws OpenDataException;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
0:     boolean removeMessage(String messageId) throws Exception;
0:     int removeMatchingMessages(String selector) throws Exception;
1:      * Removes the messages matching the given selector up to the maximum number
1:      * of matched messages
0:     int removeMatchingMessages(String selector, int maximumMessages) throws Exception;
1:      * 
1:      * @throws Exception
1:     void purge() throws Exception;
1: 
/////////////////////////////////////////////////////////////////////////
0:     boolean copyMessageTo(String messageId, String destinationName) throws Exception;
0:     int copyMatchingMessagesTo(String selector, String destinationName) throws Exception;
1:      * Copies the messages matching the given selector up to the maximum number
1:      * of matched messages
0:     int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     boolean moveMessageTo(String messageId, String destinationName) throws Exception;
0:     int moveMatchingMessagesTo(String selector, String destinationName) throws Exception;
1: 
1:      * Moves the messages matching the given selector up to the maximum number
1:      * of matched messages
0:     int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: public interface QueueViewMBean extends DestinationViewMBean {
1: 	/**
1: 	 * Retrieve a message from the destination's queue.
1: 	 * 
0: 	 * @param messageId the message id of the message to retreive
1: 	 * @return A CompositeData object which is a JMX version of the messages
1: 	 * @throws OpenDataException
1: 	 */
1:     
1:     /**
0:      * Removes a message from the queue.  If the message has allready been dispatched 
0:      * to another consumer, the message cannot be delted and this method will return 
0:      * false.
1:      * 
1:      * @param messageId 
0:      * @return true if the message was found and could be succesfully deleted.
1:      */
0:     public boolean removeMessage(String messageId);
1:     
1:     /**
0:      * Emptys out all the messages in the queue.
1:      */
1:     
1:     /**
0:      * Copys a given message to another destination.
1:      * 
1:      * @param messageId
1:      * @param destinationName
0:      * @return true if the message was found and was successfuly copied to the other destination.
1:      * @throws Exception
1:      */
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public boolean copyMessageTo(String messageId, String destinationName) throws Exception;
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
0:     public boolean copyMessageTo(String messageId, String destinationName) throws Throwable;
commit:e6f5d30
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
0: import javax.management.openmbean.TabularData;
1: 
0: public interface QueueViewMBean {
/////////////////////////////////////////////////////////////////////////
1:     
0:     public CompositeData[] browse() throws OpenDataException;
0:     public TabularData browseAsTable() throws OpenDataException;
0:     public CompositeData getMessage(String messageId) throws OpenDataException;
0:     public void removeMessage(String messageId);
0:     public void purge();
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: 
0: public interface DestinationViewMBean {
1:     
0:     public void gc();
0:     public void resetStatistics();
1: 
0:     public long getEnqueueCount();
0:     public long getDequeueCount();
0:     public long getConsumerCount();
0:     public long getMessages();
0:     public long getMessagesCached();
1: 
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if caching is currently enabled of for the destination
1:      */
1:     @MBeanInfo("Caching is enabled")
1:     boolean isCacheEnabled();
author:James Strachan
-------------------------------------------------------------------------------
commit:323bb23
/////////////////////////////////////////////////////////////////////////
1:      * Moves a message back to its original destination
1:      */
0:     boolean retryMessage(String messageId) throws Exception;
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
commit:9479de7
/////////////////////////////////////////////////////////////////////////
0:      * Retrieve a message from the destination's queue.
1:      * 
1:      * @param messageId
0:      *            the message id of the message to retrieve
0:      * @return A CompositeData object which is a JMX version of the messages
0:      * @throws OpenDataException
1:      */
1:      * Removes a message from the queue. If the message has already been
1:      * dispatched to another consumer, the message cannot be deleted and this
1:      * method will return false.
1:      * @param messageId
1:      * @return true if the message was found and could be successfully deleted.
1:      * @throws Exception 
0:     public boolean removeMessage(String messageId) throws Exception;
1: 
1:      * Removes the messages matching the given selector
1:      * 
1:      * @return the number of messages removed
1:      */
0:     public int removeMatchingMessages(String selector) throws Exception;
1: 
1:     /**
0:      * Removes the messages matching the given selector up to the maximum number of matched messages
1:      * 
1:      * @return the number of messages removed
1:      */
0:     public int removeMatchingMessages(String selector, int maximumMessages) throws Exception;
1: 
1: 
1:     /**
1:      * Removes all of the messages in the queue.
1:      * Copies a given message to another destination.
1:      * @return true if the message was found and was successfully copied to the
1:      *         other destination.
1:     /**
1:      * Copies the messages matching the given selector
1:      * 
1:      * @return the number of messages copied
1:      */
0:     public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception;
1: 
1:     /**
0:      * Copies the messages matching the given selector up to the maximum number of matched messages
1:      * 
1:      * @return the number of messages copied
1:      */
0:     public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception;
1: 
1:     /**
1:      * Moves the message to another destination.
1:      * 
1:      * @param messageId
1:      * @param destinationName
1:      * @return true if the message was found and was successfully copied to the
1:      *         other destination.
1:      * @throws Exception
1:      */
0:     public boolean moveMessageTo(String messageId, String destinationName) throws Exception;
1: 
1:     /**
1:      * Moves the messages matching the given selector
1:      * 
1:      * @return the number of messages removed
1:      */
0:     public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception;
1:     
1:     /**
0:      * Moves the messages matching the given selector up to the maximum number of matched messages
1:      */
0:     public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception;
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:4dde323
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if the message cursor has memory space available
1:      * to page in more messages
1:      */
1:     public boolean doesCursorHaveSpace();
0:     
1:     /**
1:      * @return true if the cursor has reached its memory limit for
1:      * paged in messages
1:      */
1:     public boolean isCursorFull();
0:     
1:     /**
1:      * @return true if the cursor has messages buffered to deliver
1:      */
1:     public boolean doesCursorHaveMessagesBuffered();
0:     
1:     /**
1:      * @return the cursor memory usage in bytes
1:      */
1:     public long getCursorMemoryUsage();
0:     
1:     /**
1:      * @return the cursor memory usage as a percentage
1:      */
1:     public int getCursorPercentUsage();
0:     
1:     /**
1:      * @return the number of messages available to be paged in 
1:      * by the cursor
1:      */
1:     public int cursorSize();
0:     
commit:b376ce2
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception 
0:     public void purge() throws Exception;
============================================================================