1:946e62d: /*
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:ef619b6:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ef619b6:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
6:456a2ba: 
1:456a2ba: import java.io.IOException;
1:8c218ee: import java.io.RandomAccessFile;
1:456a2ba: import java.util.Map;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.util.ByteSequence;
1:582af3e: import org.apache.activemq.util.RecoverableRandomAccessFile;
1:457dbd8: import org.slf4j.Logger;
1:457dbd8: import org.slf4j.LoggerFactory;
1:456a2ba: 
2:456a2ba: /**
1:456a2ba:  * Optimized Store reader and updater. Single threaded and synchronous. Use in
1:456a2ba:  * conjunction with the DataFileAccessorPool of concurrent use.
1:456a2ba:  */
1:456a2ba: final class DataFileAccessor {
1:456a2ba: 
1:457dbd8:     private static final Logger LOG = LoggerFactory.getLogger(DataFileAccessor.class);
1:456a2ba:     private final DataFile dataFile;
1:bb4a2f7:     private final Map<Journal.WriteKey, Journal.WriteCommand> inflightWrites;
1:582af3e:     private final RecoverableRandomAccessFile file;
1:456a2ba:     private boolean disposed;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Construct a Store reader
1:ef619b6:      *
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     public DataFileAccessor(Journal dataManager, DataFile dataFile) throws IOException {
1:456a2ba:         this.dataFile = dataFile;
1:456a2ba:         this.inflightWrites = dataManager.getInflightWrites();
1:456a2ba:         this.file = dataFile.openRandomAccessFile();
6:456a2ba:     }
1:ef619b6: 
1:456a2ba:     public DataFile getDataFile() {
1:456a2ba:         return dataFile;
1:456a2ba:     }
1:f73b622: 
1:456a2ba:     public void dispose() {
1:456a2ba:         if (disposed) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         disposed = true;
2:456a2ba:         try {
1:456a2ba:             dataFile.closeRandomAccessFile(file);
2:456a2ba:         } catch (IOException e) {
1:457dbd8:             LOG.warn("Failed to close file", e);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public ByteSequence readRecord(Location location) throws IOException {
1:456a2ba: 
1:456a2ba:         if (!location.isValid()) {
1:456a2ba:             throw new IOException("Invalid location: " + location);
1:456a2ba:         }
1:456a2ba: 
1:ef619b6:         Journal.WriteCommand asyncWrite = inflightWrites.get(new Journal.WriteKey(location));
2:456a2ba:         if (asyncWrite != null) {
1:456a2ba:             return asyncWrite.data;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         try {
1:456a2ba: 
1:456a2ba:             if (location.getSize() == Location.NOT_SET) {
2:456a2ba:                 file.seek(location.getOffset());
2:456a2ba:                 location.setSize(file.readInt());
1:f73b622:                 location.setType(file.readByte());
2:456a2ba:             } else {
1:f73b622:                 file.seek(location.getOffset() + Journal.RECORD_HEAD_SPACE);
1:456a2ba:             }
1:8c3ef6c:             if ((long)location.getOffset() + location.getSize() > dataFile.length) {
1:8c3ef6c:                 throw new IOException("Invalid location size: " + location + ", size: " + location.getSize());
1:8c3ef6c:             }
1:f73b622:             byte[] data = new byte[location.getSize() - Journal.RECORD_HEAD_SPACE];
3:456a2ba:             file.readFully(data);
1:456a2ba:             return new ByteSequence(data, 0, data.length);
1:456a2ba: 
1:456a2ba:         } catch (RuntimeException e) {
1:822e2be:             throw new IOException("Invalid location: " + location + " : " + e, e);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:76d3b46:     public void readFully(long offset, byte data[]) throws IOException {
1:f73b622:        file.seek(offset);
1:f73b622:        file.readFully(data);
1:f73b622:     }
1:456a2ba: 
1:76d3b46:     public int read(long offset, byte data[]) throws IOException {
1:76d3b46:        file.seek(offset);
1:76d3b46:        return file.read(data);
1:76d3b46:     }
1:76d3b46: 
1:456a2ba:     public void readLocationDetails(Location location) throws IOException {
1:ef619b6:         Journal.WriteCommand asyncWrite = inflightWrites.get(new Journal.WriteKey(location));
1:456a2ba:         if (asyncWrite != null) {
2:456a2ba:             location.setSize(asyncWrite.location.getSize());
2:456a2ba:             location.setType(asyncWrite.location.getType());
1:456a2ba:         } else {
1:456a2ba:             file.seek(location.getOffset());
1:456a2ba:             location.setSize(file.readInt());
2:456a2ba:             location.setType(file.readByte());
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: 
1:456a2ba:     public void updateRecord(Location location, ByteSequence data, boolean sync) throws IOException {
1:456a2ba: 
1:f73b622:         file.seek(location.getOffset() + Journal.RECORD_HEAD_SPACE);
1:456a2ba:         int size = Math.min(data.getLength(), location.getSize());
1:456a2ba:         file.write(data.getData(), data.getOffset(), size);
1:456a2ba:         if (sync) {
1:ef619b6:             file.sync();
1:456a2ba:         }
1:456a2ba:     }
1:8c218ee: 
1:8c218ee:     public RecoverableRandomAccessFile getRaf() {
1:8c218ee:         return file;
1:8c218ee:     }
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8c3ef6c
/////////////////////////////////////////////////////////////////////////
1:             if ((long)location.getOffset() + location.getSize() > dataFile.length) {
1:                 throw new IOException("Invalid location size: " + location + ", size: " + location.getSize());
1:             }
commit:8c218ee
/////////////////////////////////////////////////////////////////////////
1: import java.io.RandomAccessFile;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public RecoverableRandomAccessFile getRaf() {
1:         return file;
1:     }
commit:822e2be
/////////////////////////////////////////////////////////////////////////
1:             throw new IOException("Invalid location: " + location + " : " + e, e);
commit:95f7262
/////////////////////////////////////////////////////////////////////////
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
0:             throw new IOException("Invalid location: " + location + ", : " + e, e);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ef619b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:         Journal.WriteCommand asyncWrite = inflightWrites.get(new Journal.WriteKey(location));
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         Journal.WriteCommand asyncWrite = inflightWrites.get(new Journal.WriteKey(location));
/////////////////////////////////////////////////////////////////////////
1:             file.sync();
commit:97b12c7
/////////////////////////////////////////////////////////////////////////
0:             file.getFD().sync();
commit:c50b6c3
/////////////////////////////////////////////////////////////////////////
0:         	file.getChannel().force(false);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:457dbd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.AbstractKahaDBStore;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DataFileAccessor.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Failed to close file", e);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:582af3e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.RecoverableRandomAccessFile;
/////////////////////////////////////////////////////////////////////////
1:     private final RecoverableRandomAccessFile file;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
1: import org.apache.activemq.util.ByteSequence;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:76d3b46
/////////////////////////////////////////////////////////////////////////
1:     public void readFully(long offset, byte data[]) throws IOException {
1:     public int read(long offset, byte data[]) throws IOException {
1:        file.seek(offset);
1:        return file.read(data);
1:     }
1: 
commit:f73b622
/////////////////////////////////////////////////////////////////////////
1:                 location.setType(file.readByte());
1:                 file.seek(location.getOffset() + Journal.RECORD_HEAD_SPACE);
1:             byte[] data = new byte[location.getSize() - Journal.RECORD_HEAD_SPACE];
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void read(long offset, byte data[]) throws IOException {
1:        file.seek(offset);
1:        file.readFully(data);
1:     }
/////////////////////////////////////////////////////////////////////////
0: //    public boolean readLocationDetailsAndValidate(Location location) {
0: //        try {
0: //            WriteCommand asyncWrite = (WriteCommand)inflightWrites.get(new WriteKey(location));
0: //            if (asyncWrite != null) {
0: //                location.setSize(asyncWrite.location.getSize());
0: //                location.setType(asyncWrite.location.getType());
0: //            } else {
0: //                file.seek(location.getOffset());
0: //                location.setSize(file.readInt());
0: //                location.setType(file.readByte());
0: //
0: //                byte data[] = new byte[3];
0: //                file.seek(location.getOffset() + Journal.ITEM_HEAD_OFFSET_TO_SOR);
0: //                file.readFully(data);
0: //                if (data[0] != Journal.ITEM_HEAD_SOR[0]
0: //                    || data[1] != Journal.ITEM_HEAD_SOR[1]
0: //                    || data[2] != Journal.ITEM_HEAD_SOR[2]) {
0: //                    return false;
0: //                }
0: //                file.seek(location.getOffset() + location.getSize() - Journal.ITEM_FOOT_SPACE);
0: //                file.readFully(data);
0: //                if (data[0] != Journal.ITEM_HEAD_EOR[0]
0: //                    || data[1] != Journal.ITEM_HEAD_EOR[1]
0: //                    || data[2] != Journal.ITEM_HEAD_EOR[2]) {
0: //                    return false;
0: //                }
0: //            }
0: //        } catch (IOException e) {
0: //            return false;
0: //        }
0: //        return true;
0: //    }
1:         file.seek(location.getOffset() + Journal.RECORD_HEAD_SPACE);
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.IOException;
0: import java.io.RandomAccessFile;
1: import java.util.Map;
1: 
0: import org.apache.kahadb.journal.DataFileAppender.WriteCommand;
0: import org.apache.kahadb.journal.DataFileAppender.WriteKey;
0: import org.apache.kahadb.util.ByteSequence;
1: 
1: /**
1:  * Optimized Store reader and updater. Single threaded and synchronous. Use in
1:  * conjunction with the DataFileAccessorPool of concurrent use.
0:  * 
0:  * @version $Revision$
1:  */
1: final class DataFileAccessor {
1: 
1:     private final DataFile dataFile;
0:     private final Map<WriteKey, WriteCommand> inflightWrites;
0:     private final RandomAccessFile file;
1:     private boolean disposed;
1: 
1:     /**
1:      * Construct a Store reader
0:      * 
0:      * @param fileId
1:      * @throws IOException
1:      */
1:     public DataFileAccessor(Journal dataManager, DataFile dataFile) throws IOException {
1:         this.dataFile = dataFile;
1:         this.inflightWrites = dataManager.getInflightWrites();
1:         this.file = dataFile.openRandomAccessFile();
1:     }
1: 
1:     public DataFile getDataFile() {
1:         return dataFile;
1:     }
1: 
1:     public void dispose() {
1:         if (disposed) {
1:             return;
1:         }
1:         disposed = true;
1:         try {
1:             dataFile.closeRandomAccessFile(file);
1:         } catch (IOException e) {
0:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public ByteSequence readRecord(Location location) throws IOException {
1: 
1:         if (!location.isValid()) {
1:             throw new IOException("Invalid location: " + location);
1:         }
1: 
0:         WriteCommand asyncWrite = (WriteCommand)inflightWrites.get(new WriteKey(location));
1:         if (asyncWrite != null) {
1:             return asyncWrite.data;
1:         }
1: 
1:         try {
1: 
1:             if (location.getSize() == Location.NOT_SET) {
1:                 file.seek(location.getOffset());
1:                 location.setSize(file.readInt());
0:                 file.seek(location.getOffset() + Journal.ITEM_HEAD_SPACE);
1:             } else {
0:                 file.seek(location.getOffset() + Journal.ITEM_HEAD_SPACE);
1:             }
1: 
0:             byte[] data = new byte[location.getSize() - Journal.ITEM_HEAD_FOOT_SPACE];
1:             file.readFully(data);
1:             return new ByteSequence(data, 0, data.length);
1: 
1:         } catch (RuntimeException e) {
0:             throw new IOException("Invalid location: " + location + ", : " + e);
1:         }
1:     }
1: 
1:     public void readLocationDetails(Location location) throws IOException {
0:         WriteCommand asyncWrite = (WriteCommand)inflightWrites.get(new WriteKey(location));
1:         if (asyncWrite != null) {
1:             location.setSize(asyncWrite.location.getSize());
1:             location.setType(asyncWrite.location.getType());
1:         } else {
1:             file.seek(location.getOffset());
1:             location.setSize(file.readInt());
1:             location.setType(file.readByte());
1:         }
1:     }
1: 
0:     public boolean readLocationDetailsAndValidate(Location location) {
1:         try {
0:             WriteCommand asyncWrite = (WriteCommand)inflightWrites.get(new WriteKey(location));
1:             if (asyncWrite != null) {
1:                 location.setSize(asyncWrite.location.getSize());
1:                 location.setType(asyncWrite.location.getType());
1:             } else {
1:                 file.seek(location.getOffset());
1:                 location.setSize(file.readInt());
1:                 location.setType(file.readByte());
1: 
0:                 byte data[] = new byte[3];
0:                 file.seek(location.getOffset() + Journal.ITEM_HEAD_OFFSET_TO_SOR);
1:                 file.readFully(data);
0:                 if (data[0] != Journal.ITEM_HEAD_SOR[0]
0:                     || data[1] != Journal.ITEM_HEAD_SOR[1]
0:                     || data[2] != Journal.ITEM_HEAD_SOR[2]) {
0:                     return false;
1:                 }
0:                 file.seek(location.getOffset() + location.getSize() - Journal.ITEM_FOOT_SPACE);
1:                 file.readFully(data);
0:                 if (data[0] != Journal.ITEM_HEAD_EOR[0]
0:                     || data[1] != Journal.ITEM_HEAD_EOR[1]
0:                     || data[2] != Journal.ITEM_HEAD_EOR[2]) {
0:                     return false;
1:                 }
1:             }
1:         } catch (IOException e) {
0:             return false;
1:         }
0:         return true;
1:     }
1: 
1:     public void updateRecord(Location location, ByteSequence data, boolean sync) throws IOException {
1: 
0:         file.seek(location.getOffset() + Journal.ITEM_HEAD_SPACE);
1:         int size = Math.min(data.getLength(), location.getSize());
1:         file.write(data.getData(), data.getOffset(), size);
1:         if (sync) {
0:             file.getFD().sync();
1:         }
1: 
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:bb4a2f7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final Map<Journal.WriteKey, Journal.WriteCommand> inflightWrites;
/////////////////////////////////////////////////////////////////////////
0:         Journal.WriteCommand asyncWrite = (Journal.WriteCommand)inflightWrites.get(new Journal.WriteKey(location));
/////////////////////////////////////////////////////////////////////////
0:         Journal.WriteCommand asyncWrite = (Journal.WriteCommand)inflightWrites.get(new Journal.WriteKey(location));
============================================================================