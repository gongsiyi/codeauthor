1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:5a81bbb: package org.apache.activemq.broker.ft;
1:78529d4: 
1:13bbe52: import java.sql.PreparedStatement;
1:13bbe52: import java.sql.ResultSet;
1:13bbe52: import java.sql.SQLException;
1:32d3fd5: import java.util.List;
1:32d3fd5: import javax.jms.Connection;
1:5a81bbb: import javax.jms.Destination;
1:5a81bbb: import javax.jms.JMSException;
1:5a81bbb: import javax.jms.Message;
1:5a81bbb: import javax.jms.MessageProducer;
1:32d3fd5: import javax.jms.Session;
1:78529d4: import javax.jms.TransactionRolledBackException;
1:dc258ab: import org.apache.activemq.ActiveMQConnection;
1:13bbe52: import org.apache.activemq.broker.BrokerService;
1:13bbe52: import org.apache.activemq.command.ActiveMQMessage;
1:c7aad77: import org.apache.activemq.command.MessageId;
1:13bbe52: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:32d3fd5: import org.apache.derby.jdbc.EmbeddedDataSource;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:78529d4: 
1:5a81bbb: public class DbRestartJDBCQueueMasterSlaveTest extends JDBCQueueMasterSlaveTest {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveTest.class);
5:5a81bbb:     
1:dc258ab:     protected void messageSent() throws Exception {
1:dc258ab:         verifyExpectedBroker(inflightMessageCount);
1:5a81bbb:         if (++inflightMessageCount == failureCount) {
1:fb42a11:             LOG.info("STOPPING DB!@!!!!");
1:efaa351:             final EmbeddedDataSource ds = ((SyncCreateDataSource)getExistingDataSource()).getDelegate();
1:5a81bbb:             ds.setShutdownDatabase("shutdown");
1:5a81bbb:             LOG.info("DB STOPPED!@!!!!");
1:5a81bbb:             
1:5a81bbb:             Thread dbRestartThread = new Thread("db-re-start-thread") {
1:5a81bbb:                 public void run() {
1:dc258ab:                     delayTillRestartRequired();
1:5a81bbb:                     ds.setShutdownDatabase("false");
1:5a81bbb:                     LOG.info("DB RESTARTED!@!!!!");
5:5a81bbb:                 }
1:5a81bbb:             };
1:5a81bbb:             dbRestartThread.start();
1:5a81bbb:         }
1:dc258ab:         verifyExpectedBroker(inflightMessageCount);
1:5a81bbb:     }
1:32d3fd5: 
1:dc258ab:     protected void verifyExpectedBroker(int inflightMessageCount) {
1:dc258ab:         if (inflightMessageCount == 0) {
1:dc258ab:             assertEquals("connected to master", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:dc258ab:         } else if (inflightMessageCount == failureCount + 10) {
1:13bbe52:             assertEquals("connected to slave, count:" + inflightMessageCount, slave.get().getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:dc258ab:         }
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     protected void delayTillRestartRequired() {
1:dc258ab:         LOG.info("Waiting for master broker to Stop");
1:dc258ab:         master.waitUntilStopped();
1:dc258ab:     }
1:dc258ab: 
1:5a81bbb:     protected void sendToProducer(MessageProducer producer,
1:5a81bbb:             Destination producerDestination, Message message) throws JMSException {
1:13bbe52:         producer.send(producerDestination, message);
1:5a81bbb:     }
1:dc258ab: 
1:32d3fd5:     @Override
1:32d3fd5:     protected Session createReceiveSession(Connection receiveConnection) throws Exception {
1:32d3fd5:         return receiveConnection.createSession(true, Session.SESSION_TRANSACTED);
1:32d3fd5:     }
1:32d3fd5: 
1:32d3fd5:     @Override
1:32d3fd5:     protected void consumeMessage(Message message, List<Message> messageList) {
1:32d3fd5:         try {
1:32d3fd5:             receiveSession.commit();
1:32d3fd5:             super.consumeMessage(message, messageList);
1:32d3fd5:         } catch (JMSException e) {
1:78529d4:             LOG.info("Failed to commit message receipt: " + message, e);
1:32d3fd5:             try {
1:32d3fd5:                 receiveSession.rollback();
1:13bbe52:             } catch (JMSException ignored) {
1:13bbe52:             }
1:78529d4: 
1:13bbe52:             if (e instanceof TransactionRolledBackException) {
1:13bbe52:                 TransactionRolledBackException transactionRolledBackException = (TransactionRolledBackException) e;
1:78529d4:                 if (transactionRolledBackException.getMessage().indexOf("in doubt") != -1) {
1:13bbe52:                     // failover chucked bc there is a missing reply to a commit.
1:13bbe52:                     // failover is involved b/c the store exception is handled broker side and the client just
1:13bbe52:                     // sees a disconnect (socket.close()).
1:13bbe52:                     // If the client needs to be aware of the failure then it should not use IOExceptionHandler
1:13bbe52:                     // so that the exception will propagate back
1:13bbe52: 
1:13bbe52:                     // for this test case:
1:13bbe52:                     // the commit may have got there and the reply is lost "or" the commit may be lost.
1:13bbe52:                     // so we may or may not get a resend.
1:78529d4:                     //
1:13bbe52:                     // At the application level we need to determine if the message is there or not which is not trivial
1:13bbe52:                     // for this test we assert received == sent
1:13bbe52:                     // so we need to know whether the message will be replayed.
1:13bbe52:                     // we can ask the store b/c we know it is jdbc - guess we could go through a destination
1:13bbe52:                     // message store interface also or use jmx
1:13bbe52:                     java.sql.Connection dbConnection = null;
1:13bbe52:                     try {
1:13bbe52:                         ActiveMQMessage mqMessage = (ActiveMQMessage) message;
1:c7aad77:                         MessageId id = mqMessage.getMessageId();
1:13bbe52:                         dbConnection = sharedDs.getConnection();
1:bf5b1fc:                         PreparedStatement s = dbConnection.prepareStatement(findStatement);
1:c7aad77:                         s.setString(1, id.getProducerId().toString());
1:c7aad77:                         s.setLong(2, id.getProducerSequenceId());
1:13bbe52:                         ResultSet rs = s.executeQuery();
1:78529d4: 
1:13bbe52:                         if (!rs.next()) {
1:13bbe52:                             // message is gone, so lets count it as consumed
1:c7aad77:                             LOG.info("On TransactionRolledBackException we know that the ack/commit got there b/c message is gone so we count it: " + mqMessage);
1:13bbe52:                             super.consumeMessage(message, messageList);
1:13bbe52:                         } else {
1:13bbe52:                             LOG.info("On TransactionRolledBackException we know that the ack/commit was lost so we expect a replay of: " + mqMessage);
1:13bbe52:                         }
1:13bbe52:                     } catch (Exception dbe) {
1:13bbe52:                         dbe.printStackTrace();
1:13bbe52:                     } finally {
1:13bbe52:                         try {
1:13bbe52:                             dbConnection.close();
1:13bbe52:                         } catch (SQLException e1) {
1:13bbe52:                             e1.printStackTrace();
1:13bbe52:                         }
1:13bbe52:                     }
1:13bbe52:                 }
1:78529d4:             }
1:78529d4:         }
1:32d3fd5:     }
1:13bbe52: 
1:32d3fd5: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:bf5b1fc
/////////////////////////////////////////////////////////////////////////
1:                         PreparedStatement s = dbConnection.prepareStatement(findStatement);
/////////////////////////////////////////////////////////////////////////
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1:             final EmbeddedDataSource ds = ((SyncCreateDataSource)getExistingDataSource()).getDelegate();
author:Gary Tully
-------------------------------------------------------------------------------
commit:c7aad77
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1:                         MessageId id = mqMessage.getMessageId();
1:                         s.setString(1, id.getProducerId().toString());
1:                         s.setLong(2, id.getProducerSequenceId());
1:                             LOG.info("On TransactionRolledBackException we know that the ack/commit got there b/c message is gone so we count it: " + mqMessage);
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("connected to slave, count:" + inflightMessageCount, slave.get().getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:         producer.send(producerDestination, message);
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException ignored) {
1:             }
1:             if (e instanceof TransactionRolledBackException) {
1:                 TransactionRolledBackException transactionRolledBackException = (TransactionRolledBackException) e;
1:                     // failover chucked bc there is a missing reply to a commit.
1:                     // failover is involved b/c the store exception is handled broker side and the client just
1:                     // sees a disconnect (socket.close()).
1:                     // If the client needs to be aware of the failure then it should not use IOExceptionHandler
1:                     // so that the exception will propagate back
1: 
1:                     // for this test case:
1:                     // the commit may have got there and the reply is lost "or" the commit may be lost.
1:                     // so we may or may not get a resend.
1:                     // At the application level we need to determine if the message is there or not which is not trivial
1:                     // for this test we assert received == sent
1:                     // so we need to know whether the message will be replayed.
1:                     // we can ask the store b/c we know it is jdbc - guess we could go through a destination
1:                     // message store interface also or use jmx
1:                     java.sql.Connection dbConnection = null;
1:                     try {
1:                         ActiveMQMessage mqMessage = (ActiveMQMessage) message;
1:                         dbConnection = sharedDs.getConnection();
0:                         PreparedStatement s = dbConnection.prepareStatement(((JDBCPersistenceAdapter) connectedToBroker().getPersistenceAdapter()).getStatements().getFindMessageStatement());
0:                         s.setString(1, mqMessage.getMessageId().getProducerId().toString());
0:                         s.setLong(2, mqMessage.getMessageId().getProducerSequenceId());
1:                         ResultSet rs = s.executeQuery();
1:                         if (!rs.next()) {
1:                             // message is gone, so lets count it as consumed
0:                             LOG.info("On TransactionRolledBackException we know that the ack/commit got there b/c message is gone so we  count it: " + mqMessage);
1:                             super.consumeMessage(message, messageList);
1:                         } else {
1:                             LOG.info("On TransactionRolledBackException we know that the ack/commit was lost so we expect a replay of: " + mqMessage);
1:                         }
1:                     } catch (Exception dbe) {
1:                         dbe.printStackTrace();
1:                     } finally {
1:                         try {
1:                             dbConnection.close();
1:                         } catch (SQLException e1) {
1:                             e1.printStackTrace();
1:                         }
1:                     }
1: 
0:     private BrokerService connectedToBroker() {
0:         return ((ActiveMQConnection)receiveConnection).getBrokerInfo().getBrokerName().equals("master") ? master : slave.get();
1:     }
commit:78529d4
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TransactionRolledBackException;
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Failed to commit message receipt: " + message, e);
1: 
0:             if (e.getCause() instanceof TransactionRolledBackException) {
0:                 TransactionRolledBackException transactionRolledBackException = (TransactionRolledBackException)e.getCause();
1:                 if (transactionRolledBackException.getMessage().indexOf("in doubt") != -1) {
0:                     // failover chucked bc there is a missing reply to a commit. the ack may have got there and the reply
0:                     // was lost or the ack may be lost.
0:                     // so we may not get a resend.
1:                     //
0:                     // REVISIT: A JDBC store IO exception should not cause the connection to drop, so it needs to be wrapped
0:                     // possibly by the IOExceptionHandler
0:                     // The commit/close wrappers in jdbc TransactionContext need to delegate to the IOExceptionHandler
1: 
0:                     // this would leave the application aware of the store failure, and possible aware of whether the commit
0:                     // was a success, rather than going into failover-retries as it does now.
1: 
1:                 }
1: 
1:             }
commit:32d3fd5
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
/////////////////////////////////////////////////////////////////////////
0:             final EmbeddedDataSource ds = ((SyncDataSource)getExistingDataSource()).getDelegate();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     LOG.info("Exception on producer send for: " + message, e);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected Session createReceiveSession(Connection receiveConnection) throws Exception {
1:         return receiveConnection.createSession(true, Session.SESSION_TRANSACTED);
1:     }
1: 
1:     @Override
1:     protected void consumeMessage(Message message, List<Message> messageList) {
1:         try {
1:             receiveSession.commit();
1:             super.consumeMessage(message, messageList);
1:         } catch (JMSException e) {
0:             LOG.info("Faild to commit message receipt: " + message, e);
1:             try {
1:                 receiveSession.rollback();
0:             } catch (JMSException ignored) {}
1:         }
1:     }
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLException;
1: import org.apache.activemq.ActiveMQConnection;
/////////////////////////////////////////////////////////////////////////
1:     protected void messageSent() throws Exception {
1:         verifyExpectedBroker(inflightMessageCount);
/////////////////////////////////////////////////////////////////////////
1:                     delayTillRestartRequired();
0:                     try {
0:                         ds.getConnection().close();
0:                     } catch (SQLException ignored) {}
1:         verifyExpectedBroker(inflightMessageCount);
1: 
1:     protected void verifyExpectedBroker(int inflightMessageCount) {
1:         if (inflightMessageCount == 0) {
1:             assertEquals("connected to master", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:         } else if (inflightMessageCount == failureCount + 10) {
0:             assertEquals("connected to slave", slave.get().getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:         }
1:     }
1: 
1:     protected void delayTillRestartRequired() {
1:         LOG.info("Waiting for master broker to Stop");
1:         master.waitUntilStopped();
1:     }
1: 
commit:fb42a11
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("STOPPING DB!@!!!!");
commit:5a81bbb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.ft;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: public class DbRestartJDBCQueueMasterSlaveTest extends JDBCQueueMasterSlaveTest {
0:     private static final transient Log LOG = LogFactory.getLog(DbRestartJDBCQueueMasterSlaveTest.class);
1:     
0:     protected void messageSent() throws Exception {    
1:         if (++inflightMessageCount == failureCount) {
0:             final EmbeddedDataSource ds = getExistingDataSource();
1:             ds.setShutdownDatabase("shutdown");
1:             LOG.info("DB STOPPED!@!!!!");
1:             
1:             Thread dbRestartThread = new Thread("db-re-start-thread") {
1:                 public void run() {
0:                     LOG.info("Waiting for master broker to Stop");
0:                     master.waitUntilStopped();
1:                     ds.setShutdownDatabase("false");
1:                     LOG.info("DB RESTARTED!@!!!!");
1:                 }
1:             };
1:             dbRestartThread.start();
1:         }
1:     }
1:      
1:     protected void sendToProducer(MessageProducer producer,
1:             Destination producerDestination, Message message) throws JMSException {
0:         {   
0:             // do some retries as db failures filter back to the client until broker sees
0:             // db lock failure and shuts down
0:             boolean sent = false;
0:             do {
0:                 try { 
0:                     producer.send(producerDestination, message);
0:                     sent = true;
0:                 } catch (JMSException e) {
0:                     LOG.info("Exception on producer send:", e);
0:                     try { 
0:                         Thread.sleep(2000);
0:                     } catch (InterruptedException ignored) {
1:                     }
1:                 }
0:             } while(!sent);
1:         }
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================