2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
2:1760d1a: 
1:fde4721: import java.util.ArrayList;
1:d29ca2a: import java.util.Enumeration;
1:fde4721: import java.util.List;
1:c7d559f: 
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.QueueBrowser;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:7a7d684: import javax.management.ObjectName;
1:7a7d684: import javax.management.openmbean.CompositeData;
1:7a7d684: import javax.management.openmbean.TabularData;
1:c7d559f: 
1:7a7d684: import junit.framework.Test;
1:c7d559f: 
1:7a7d684: import org.apache.activemq.broker.BrokerService;
1:7a7d684: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a109a98: import org.apache.activemq.broker.region.BaseDestination;
1:7a7d684: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7a7d684: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:05796e7: import org.slf4j.Logger;
1:05796e7: import org.slf4j.LoggerFactory;
1:1760d1a: 
1:d29ca2a: public class JmsQueueBrowserTest extends JmsTestSupport {
1:05796e7: 
1:05796e7:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionFactoryTest.class);
1:7a7d684:     public boolean isUseCache = false;
1:7a7d684: 
1:7a7d684:     public static Test suite() throws Exception {
1:7a7d684:         return suite(JmsQueueBrowserTest.class);
1:7a7d684:     }
1:8e6ce9f: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests the queue browser. Browses the messages then the consumer tries to receive them. The messages should still
1:d29ca2a:      * be in the queue even when it was browsed.
1:c7d559f:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testReceiveBrowseReceive() throws Exception {
1:874e935:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:1760d1a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         connection.start();
1:a109a98: 
1:d29ca2a:         Message[] outbound = new Message[]{session.createTextMessage("First Message"),
1:d29ca2a:                                            session.createTextMessage("Second Message"),
1:d29ca2a:                                            session.createTextMessage("Third Message")};
1:c7d559f: 
1:d29ca2a:         // lets consume any outstanding messages from previous test runs
1:d29ca2a:         while (consumer.receive(1000) != null) {
2:d29ca2a:         }
1:c7d559f: 
1:d29ca2a:         producer.send(outbound[0]);
1:d29ca2a:         producer.send(outbound[1]);
1:d29ca2a:         producer.send(outbound[2]);
1:c7d559f: 
1:d29ca2a:         // Get the first.
1:d29ca2a:         assertEquals(outbound[0], consumer.receive(1000));
1:d29ca2a:         consumer.close();
1:7a7d684: 
1:c7d559f:         QueueBrowser browser = session.createBrowser(destination);
1:c7d559f:         Enumeration<?> enumeration = browser.getEnumeration();
1:1760d1a: 
1:d29ca2a:         // browse the second
1:d29ca2a:         assertTrue("should have received the second message", enumeration.hasMoreElements());
1:c7d559f:         assertEquals(outbound[1], enumeration.nextElement());
1:1760d1a: 
1:d29ca2a:         // browse the third.
1:d29ca2a:         assertTrue("Should have received the third message", enumeration.hasMoreElements());
1:c7d559f:         assertEquals(outbound[2], enumeration.nextElement());
1:1760d1a: 
1:d29ca2a:         // There should be no more.
1:d29ca2a:         boolean tooMany = false;
1:d29ca2a:         while (enumeration.hasMoreElements()) {
1:fc00993:             LOG.info("Got extra message: " + ((TextMessage) enumeration.nextElement()).getText());
1:d29ca2a:             tooMany = true;
1:d29ca2a:         }
1:d29ca2a:         assertFalse(tooMany);
1:d29ca2a:         browser.close();
1:fde4721: 
1:d29ca2a:         // Re-open the consumer.
1:d29ca2a:         consumer = session.createConsumer(destination);
1:d29ca2a:         // Receive the second.
1:d29ca2a:         assertEquals(outbound[1], consumer.receive(1000));
1:d29ca2a:         // Receive the third.
1:d29ca2a:         assertEquals(outbound[2], consumer.receive(1000));
1:d29ca2a:         consumer.close();
1:fde4721:     }
1:7a7d684: 
1:7a7d684:     public void initCombosForTestBatchSendBrowseReceive() {
1:7a7d684:         addCombinationValues("isUseCache", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:7a7d684:     }
1:7a7d684: 
1:7a7d684:     public void testBatchSendBrowseReceive() throws Exception {
1:7a7d684:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a7d684:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:7a7d684:         MessageProducer producer = session.createProducer(destination);
1:7a7d684:         MessageConsumer consumer = session.createConsumer(destination);
1:7a7d684:         connection.start();
1:7a7d684: 
1:7a7d684:         TextMessage[] outbound = new TextMessage[10];
1:7a7d684:         for (int i=0; i<10; i++) {
1:7a7d684:             outbound[i] = session.createTextMessage( i + " Message");
1:7a7d684:         };
1:7a7d684: 
1:7a7d684:         // lets consume any outstanding messages from previous test runs
1:7a7d684:         while (consumer.receive(1000) != null) {
1:7a7d684:         }
1:7a7d684:         consumer.close();
1:7a7d684: 
1:7a7d684:         for (int i=0;i<outbound.length; i++) {
1:7a7d684:             producer.send(outbound[i]);
1:7a7d684:         }
1:7a7d684: 
1:c7d559f:         QueueBrowser browser = session.createBrowser(destination);
1:c7d559f:         Enumeration<?> enumeration = browser.getEnumeration();
1:7a7d684: 
1:7a7d684:         for (int i=0; i<outbound.length; i++) {
1:7a7d684:             assertTrue("should have a", enumeration.hasMoreElements());
1:7a7d684:             assertEquals(outbound[i], enumeration.nextElement());
1:7a7d684:         }
1:7a7d684:         browser.close();
1:7a7d684: 
1:7a7d684:         for (int i=0;i<outbound.length; i++) {
1:7a7d684:             producer.send(outbound[i]);
1:7a7d684:         }
1:7a7d684: 
1:7a7d684:         // verify second batch is visible to browse
1:c7d559f:         browser = session.createBrowser(destination);
1:7a7d684:         enumeration = browser.getEnumeration();
1:7a7d684:         for (int j=0; j<2;j++) {
1:7a7d684:             for (int i=0; i<outbound.length; i++) {
1:7a7d684:                 assertTrue("should have a", enumeration.hasMoreElements());
1:7a7d684:                 assertEquals("j=" + j + ", i=" + i, outbound[i].getText(), ((TextMessage) enumeration.nextElement()).getText());
1:7a7d684:             }
1:7a7d684:         }
1:7a7d684:         browser.close();
1:7a7d684: 
1:7a7d684:         consumer = session.createConsumer(destination);
1:7a7d684:         for (int i=0; i<outbound.length * 2; i++) {
1:7a7d684:             assertNotNull("Got message: " + i, consumer.receive(2000));
1:7a7d684:         }
1:7a7d684:         consumer.close();
1:7a7d684:     }
1:7a7d684: 
1:7a7d684:     public void initCombosForTestBatchSendJmxBrowseReceive() {
1:7a7d684:         addCombinationValues("isUseCache", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:7a7d684:     }
1:7a7d684: 
1:7a7d684:     public void testBatchSendJmxBrowseReceive() throws Exception {
1:7a7d684:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a7d684:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:7a7d684:         MessageProducer producer = session.createProducer(destination);
1:7a7d684:         MessageConsumer consumer = session.createConsumer(destination);
1:7a7d684:         connection.start();
1:7a7d684: 
1:7a7d684:         TextMessage[] outbound = new TextMessage[10];
1:7a7d684:         for (int i=0; i<10; i++) {
1:7a7d684:             outbound[i] = session.createTextMessage( i + " Message");
1:7a7d684:         };
1:7a7d684: 
1:7a7d684:         // lets consume any outstanding messages from previous test runs
1:7a7d684:         while (consumer.receive(1000) != null) {
1:7a7d684:         }
1:7a7d684:         consumer.close();
1:7a7d684: 
1:7a7d684:         for (int i=0;i<outbound.length; i++) {
1:7a7d684:             producer.send(outbound[i]);
1:7a7d684:         }
1:7a7d684: 
1:cb7b657:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:7a7d684: 
1:7a7d684:         LOG.info("Create QueueView MBean...");
1:7a7d684:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:7a7d684: 
1:7a7d684:         long concount = proxy.getConsumerCount();
1:7a7d684:         LOG.info("Consumer Count :" + concount);
1:7a7d684:         long messcount = proxy.getQueueSize();
1:7a7d684:         LOG.info("current number of messages in the queue :" + messcount);
1:7a7d684: 
1:7a7d684:         // lets browse
1:7a7d684:         CompositeData[] compdatalist = proxy.browse();
1:7a7d684:         if (compdatalist.length == 0) {
1:7a7d684:             fail("There is no message in the queue:");
1:7a7d684:         }
1:7a7d684:         String[] messageIDs = new String[compdatalist.length];
1:7a7d684: 
1:7a7d684:         for (int i = 0; i < compdatalist.length; i++) {
1:7a7d684:             CompositeData cdata = compdatalist[i];
1:7a7d684: 
1:7a7d684:             if (i == 0) {
1:7a7d684:                 LOG.info("Columns: " + cdata.getCompositeType().keySet());
1:7a7d684:             }
1:7a7d684:             messageIDs[i] = (String)cdata.get("JMSMessageID");
1:7a7d684:             LOG.info("message " + i + " : " + cdata.values());
1:7a7d684:         }
1:7a7d684: 
1:7a7d684:         TabularData table = proxy.browseAsTable();
1:7a7d684:         LOG.info("Found tabular data: " + table);
1:7a7d684:         assertTrue("Table should not be empty!", table.size() > 0);
1:7a7d684: 
1:7a7d684:         assertEquals("Queue size", outbound.length, proxy.getQueueSize());
1:7a7d684:         assertEquals("Queue size", outbound.length, compdatalist.length);
1:7a7d684:         assertEquals("Queue size", outbound.length, table.size());
1:7a7d684: 
1:7a7d684: 
1:7a7d684:         LOG.info("Send another 10");
1:7a7d684:         for (int i=0;i<outbound.length; i++) {
1:7a7d684:             producer.send(outbound[i]);
1:7a7d684:         }
1:7a7d684: 
1:7a7d684:         LOG.info("Browse again");
1:7a7d684: 
1:7a7d684:         messcount = proxy.getQueueSize();
1:7a7d684:         LOG.info("current number of messages in the queue :" + messcount);
1:7a7d684: 
1:7a7d684:         compdatalist = proxy.browse();
1:7a7d684:         if (compdatalist.length == 0) {
1:7a7d684:             fail("There is no message in the queue:");
1:7a7d684:         }
1:7a7d684:         messageIDs = new String[compdatalist.length];
1:7a7d684: 
1:7a7d684:         for (int i = 0; i < compdatalist.length; i++) {
1:7a7d684:             CompositeData cdata = compdatalist[i];
1:7a7d684: 
1:7a7d684:             if (i == 0) {
1:7a7d684:                 LOG.info("Columns: " + cdata.getCompositeType().keySet());
1:7a7d684:             }
1:7a7d684:             messageIDs[i] = (String)cdata.get("JMSMessageID");
1:7a7d684:             LOG.info("message " + i + " : " + cdata.values());
1:7a7d684:         }
1:7a7d684: 
1:7a7d684:         table = proxy.browseAsTable();
1:7a7d684:         LOG.info("Found tabular data: " + table);
1:7a7d684:         assertTrue("Table should not be empty!", table.size() > 0);
1:7a7d684: 
1:7a7d684:         assertEquals("Queue size", outbound.length*2, proxy.getQueueSize());
1:7a7d684:         assertEquals("Queue size", outbound.length*2, compdatalist.length);
1:7a7d684:         assertEquals("Queue size", outbound.length * 2, table.size());
1:7a7d684: 
1:7a7d684:         consumer = session.createConsumer(destination);
1:7a7d684:         for (int i=0; i<outbound.length * 2; i++) {
1:7a7d684:             assertNotNull("Got message: " + i, consumer.receive(2000));
1:7a7d684:         }
1:7a7d684:         consumer.close();
1:7a7d684:     }
1:7a7d684: 
1:f54713a:     public void testBrowseReceive() throws Exception {
1:f54713a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f54713a:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:c7d559f: 
1:f54713a:         connection.start();
1:fde4721: 
1:7a7d684:         // create consumer
1:7a7d684:         MessageConsumer consumer = session.createConsumer(destination);
1:7a7d684:         // lets consume any outstanding messages from previous test runs
1:7a7d684:         while (consumer.receive(1000) != null) {
1:7a7d684:         }
1:7a7d684: 
1:f54713a:         Message[] outbound = new Message[]{session.createTextMessage("First Message"),
1:f54713a:                                            session.createTextMessage("Second Message"),
1:f54713a:                                            session.createTextMessage("Third Message")};
1:7a7d684: 
1:f54713a:         MessageProducer producer = session.createProducer(destination);
1:f54713a:         producer.send(outbound[0]);
1:fde4721: 
1:f54713a:         // create browser first
1:c7d559f:         QueueBrowser browser = session.createBrowser(destination);
1:c7d559f:         Enumeration<?> enumeration = browser.getEnumeration();
1:7a7d684: 
1:f54713a:         // browse the first message
1:3379622:         assertTrue("should have received the first message", enumeration.hasMoreElements());
1:c7d559f:         assertEquals(outbound[0], enumeration.nextElement());
1:c7d559f: 
1:f54713a:         // Receive the first message.
1:f54713a:         assertEquals(outbound[0], consumer.receive(1000));
1:f54713a:         consumer.close();
1:f54713a:         browser.close();
1:f54713a:         producer.close();
1:7a7d684:     }
1:c7d559f: 
1:8e6ce9f:     public void testLargeNumberOfMessages() throws Exception {
1:8e6ce9f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e6ce9f:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:8e6ce9f:         connection.start();
1:8e6ce9f: 
1:8e6ce9f:         MessageProducer producer = session.createProducer(destination);
1:8e6ce9f: 
1:d97f28c:         int numberOfMessages = 4096;
1:d97f28c: 
1:d97f28c:         for (int i = 0; i < numberOfMessages; i++) {
1:8e6ce9f:             producer.send(session.createTextMessage("Message: "  + i));
1:8e6ce9f:         }
1:8e6ce9f: 
1:c7d559f:         QueueBrowser browser = session.createBrowser(destination);
1:c7d559f:         Enumeration<?> enumeration = browser.getEnumeration();
1:8e6ce9f: 
1:8e6ce9f:         assertTrue(enumeration.hasMoreElements());
1:8e6ce9f: 
1:8e6ce9f:         int numberBrowsed = 0;
1:8e6ce9f: 
1:8e6ce9f:         while (enumeration.hasMoreElements()) {
1:05796e7:             Message browsed = (Message) enumeration.nextElement();
1:05796e7: 
1:05796e7:             if (LOG.isDebugEnabled()) {
1:05796e7:                 LOG.debug("Browsed Message [{}]", browsed.getJMSMessageID());
1:05796e7:             }
1:05796e7: 
1:8e6ce9f:             numberBrowsed++;
1:8e6ce9f:         }
1:8e6ce9f: 
1:8e6ce9f:         System.out.println("Number browsed:  " + numberBrowsed);
1:d97f28c:         assertEquals(numberOfMessages, numberBrowsed);
1:8e6ce9f:         browser.close();
1:8e6ce9f:         producer.close();
1:8e6ce9f:     }
1:8e6ce9f: 
1:fde4721:     public void testQueueBrowserWith2Consumers() throws Exception {
1:fde4721:         final int numMessages = 1000;
1:fde4721:         connection.setAlwaysSyncSend(false);
1:fde4721:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:fde4721:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:fde4721:         ActiveMQQueue destinationPrefetch10 = new ActiveMQQueue("TEST?jms.prefetchSize=10");
1:c7d559f:         ActiveMQQueue destinationPrefetch1 = new ActiveMQQueue("TEST?jms.prefetchsize=1");
1:fde4721:         connection.start();
1:7a7d684: 
1:fde4721:         ActiveMQConnection connection2 = (ActiveMQConnection)factory.createConnection(userName, password);
1:fde4721:         connection2.start();
1:fde4721:         connections.add(connection2);
1:fde4721:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a7d684: 
1:fde4721:         MessageProducer producer = session.createProducer(destination);
1:fde4721:         MessageConsumer consumer = session.createConsumer(destinationPrefetch10);
1:7a7d684: 
1:7a7d684:         // lets consume any outstanding messages from previous test runs
1:7a7d684:         while (consumer.receive(1000) != null) {
1:7a7d684:         }
1:fde4721: 
1:fde4721:         for (int i=0; i<numMessages; i++) {
1:fde4721:             TextMessage message = session.createTextMessage("Message: " + i);
1:c7d559f:             producer.send(message);
1:fde4721:         }
1:c7d559f: 
1:fde4721:         QueueBrowser browser = session2.createBrowser(destinationPrefetch1);
1:c7d559f:         @SuppressWarnings("unchecked")
1:fde4721:         Enumeration<Message> browserView = browser.getEnumeration();
1:c7d559f: 
1:fde4721:         List<Message> messages = new ArrayList<Message>();
1:fde4721:         for (int i = 0; i < numMessages; i++) {
1:fde4721:             Message m1 = consumer.receive(5000);
1:fde4721:             assertNotNull("m1 is null for index: " + i, m1);
1:fde4721:             messages.add(m1);
1:fde4721:         }
1:fde4721: 
1:fde4721:         int i = 0;
1:fde4721:         for (; i < numMessages && browserView.hasMoreElements(); i++) {
1:fde4721:             Message m1 = messages.get(i);
1:fde4721:             Message m2 = browserView.nextElement();
1:fde4721:             assertNotNull("m2 is null for index: " + i, m2);
1:fde4721:             assertEquals(m1.getJMSMessageID(), m2.getJMSMessageID());
1:fde4721:         }
1:c7d559f: 
1:a109a98:         // currently browse max page size is ignored for a queue browser consumer
1:a109a98:         // only guarantee is a page size - but a snapshot of pagedinpending is
1:a109a98:         // used so it is most likely more
1:a109a98:         assertTrue("got at least our expected minimum in the browser: ", i > BaseDestination.MAX_PAGE_SIZE);
1:fde4721: 
1:fde4721:         assertFalse("nothing left in the browser", browserView.hasMoreElements());
1:fde4721:         assertNull("consumer finished", consumer.receiveNoWait());
1:fde4721:     }
1:fde4721: 
1:1760d1a:     public void testBrowseClose() throws Exception {
1:1760d1a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1760d1a:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:fde4721: 
1:1760d1a:         connection.start();
1:1760d1a: 
1:1760d1a:         TextMessage[] outbound = new TextMessage[]{session.createTextMessage("First Message"),
1:1760d1a:                                            session.createTextMessage("Second Message"),
1:1760d1a:                                            session.createTextMessage("Third Message")};
1:1760d1a: 
1:7a7d684:         // create consumer
1:7a7d684:         MessageConsumer consumer = session.createConsumer(destination);
1:7a7d684:         // lets consume any outstanding messages from previous test runs
1:7a7d684:         while (consumer.receive(1000) != null) {
1:f54713a:         }
1:1760d1a: 
1:1760d1a:         MessageProducer producer = session.createProducer(destination);
1:1760d1a:         producer.send(outbound[0]);
1:1760d1a:         producer.send(outbound[1]);
1:1760d1a:         producer.send(outbound[2]);
1:1760d1a: 
1:1760d1a:         // create browser first
1:8e6ce9f:         QueueBrowser browser = session.createBrowser(destination);
1:c7d559f:         Enumeration<?> enumeration = browser.getEnumeration();
1:1760d1a: 
1:1760d1a:         // browse some messages
1:c7d559f:         assertEquals(outbound[0], enumeration.nextElement());
1:c7d559f:         assertEquals(outbound[1], enumeration.nextElement());
1:1760d1a:         //assertEquals(outbound[2], (Message) enumeration.nextElement());
1:1760d1a: 
1:1760d1a:         browser.close();
1:1760d1a: 
1:1760d1a:         // Receive the first message.
1:1760d1a:         TextMessage msg = (TextMessage)consumer.receive(1000);
1:1760d1a:         assertEquals("Expected " + outbound[0].getText() + " but received " + msg.getText(),  outbound[0], msg);
1:1760d1a:         msg = (TextMessage)consumer.receive(1000);
1:1760d1a:         assertEquals("Expected " + outbound[1].getText() + " but received " + msg.getText(), outbound[1], msg);
1:1760d1a:         msg = (TextMessage)consumer.receive(1000);
1:1760d1a:         assertEquals("Expected " + outbound[2].getText() + " but received " + msg.getText(), outbound[2], msg);
1:1760d1a: 
1:1760d1a:         consumer.close();
1:1760d1a:         producer.close();
1:1760d1a:     }
1:1760d1a: 
1:c7d559f:     @Override
1:7a7d684:     protected BrokerService createBroker() throws Exception {
1:7a7d684:         BrokerService brokerService = super.createBroker();
1:7a7d684:         PolicyMap policyMap = new PolicyMap();
1:7a7d684:         PolicyEntry policyEntry = new PolicyEntry();
1:7a7d684:         policyEntry.setUseCache(isUseCache);
1:85bc9ce:         policyEntry.setMaxBrowsePageSize(4096);
1:7a7d684:         policyMap.setDefaultEntry(policyEntry);
1:7a7d684:         brokerService.setDestinationPolicy(policyMap);
1:7a7d684:         return brokerService;
1:7a7d684:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:85bc9ce
/////////////////////////////////////////////////////////////////////////
1:         policyEntry.setMaxBrowsePageSize(4096);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d97f28c
/////////////////////////////////////////////////////////////////////////
1:         int numberOfMessages = 4096;
1: 
1:         for (int i = 0; i < numberOfMessages; i++) {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(numberOfMessages, numberBrowsed);
commit:05796e7
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionFactoryTest.class);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Message browsed = (Message) enumeration.nextElement();
1: 
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Browsed Message [{}]", browsed.getJMSMessageID());
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         QueueBrowser browser = session.createBrowser(destination);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         assertEquals(outbound[1], enumeration.nextElement());
1:         assertEquals(outbound[2], enumeration.nextElement());
/////////////////////////////////////////////////////////////////////////
1:         QueueBrowser browser = session.createBrowser(destination);
1:         Enumeration<?> enumeration = browser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
1:         browser = session.createBrowser(destination);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         QueueBrowser browser = session.createBrowser(destination);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         assertEquals(outbound[0], enumeration.nextElement());
1: 
/////////////////////////////////////////////////////////////////////////
1:         Enumeration<?> enumeration = browser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
1: 
1:         ActiveMQQueue destinationPrefetch1 = new ActiveMQQueue("TEST?jms.prefetchsize=1");
/////////////////////////////////////////////////////////////////////////
1: 
1:             producer.send(message);
1: 
1:         @SuppressWarnings("unchecked")
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         QueueBrowser browser = session.createBrowser(destination);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         assertEquals(outbound[0], enumeration.nextElement());
1:         assertEquals(outbound[1], enumeration.nextElement());
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Christian Posta
-------------------------------------------------------------------------------
commit:8e6ce9f
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testLargeNumberOfMessages() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(destination);
1: 
0:         for (int i = 0; i < 1000; i++) {
1:             producer.send(session.createTextMessage("Message: "  + i));
1:         }
1: 
1:         QueueBrowser browser = session.createBrowser(destination);
0:         Enumeration enumeration = browser.getEnumeration();
1: 
1:         assertTrue(enumeration.hasMoreElements());
1: 
1:         int numberBrowsed = 0;
1: 
1:         while (enumeration.hasMoreElements()) {
0:             enumeration.nextElement();
1:             numberBrowsed++;
1:         }
1: 
1:         System.out.println("Number browsed:  " + numberBrowsed);
0:         assertEquals(1000, numberBrowsed);
1:         browser.close();
1:         producer.close();
1: 
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
commit:18f9773
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:7a7d684
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: import junit.framework.Test;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseCache = false;
1: 
1:     public static Test suite() throws Exception {
1:         return suite(JmsQueueBrowserTest.class);
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void initCombosForTestBatchSendBrowseReceive() {
1:         addCombinationValues("isUseCache", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:     }
1: 
1:     public void testBatchSendBrowseReceive() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         connection.start();
1: 
1:         TextMessage[] outbound = new TextMessage[10];
1:         for (int i=0; i<10; i++) {
1:             outbound[i] = session.createTextMessage( i + " Message");
1:         };
1: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
1:         consumer.close();
1: 
1:         for (int i=0;i<outbound.length; i++) {
1:             producer.send(outbound[i]);
1:         }
1: 
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
0:         Enumeration enumeration = browser.getEnumeration();
1: 
1:         for (int i=0; i<outbound.length; i++) {
1:             assertTrue("should have a", enumeration.hasMoreElements());
1:             assertEquals(outbound[i], enumeration.nextElement());
1:         }
1:         browser.close();
1: 
1:         for (int i=0;i<outbound.length; i++) {
1:             producer.send(outbound[i]);
1:         }
1: 
1:         // verify second batch is visible to browse
0:         browser = session.createBrowser((Queue) destination);
1:         enumeration = browser.getEnumeration();
1:         for (int j=0; j<2;j++) {
1:             for (int i=0; i<outbound.length; i++) {
1:                 assertTrue("should have a", enumeration.hasMoreElements());
1:                 assertEquals("j=" + j + ", i=" + i, outbound[i].getText(), ((TextMessage) enumeration.nextElement()).getText());
1:             }
1:         }
1:         browser.close();
1: 
1:         consumer = session.createConsumer(destination);
1:         for (int i=0; i<outbound.length * 2; i++) {
1:             assertNotNull("Got message: " + i, consumer.receive(2000));
1:         }
1:         consumer.close();
1:     }
1: 
1: 
1:     public void initCombosForTestBatchSendJmxBrowseReceive() {
1:         addCombinationValues("isUseCache", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:     }
1: 
1:     public void testBatchSendJmxBrowseReceive() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         connection.start();
1: 
1:         TextMessage[] outbound = new TextMessage[10];
1:         for (int i=0; i<10; i++) {
1:             outbound[i] = session.createTextMessage( i + " Message");
1:         };
1: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
1:         consumer.close();
1: 
1:         for (int i=0;i<outbound.length; i++) {
1:             producer.send(outbound[i]);
1:         }
1: 
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:Type=Queue,Destination=TEST,BrokerName=localhost");
1: 
1:         LOG.info("Create QueueView MBean...");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long concount = proxy.getConsumerCount();
1:         LOG.info("Consumer Count :" + concount);
1:         long messcount = proxy.getQueueSize();
1:         LOG.info("current number of messages in the queue :" + messcount);
1: 
1:         // lets browse
1:         CompositeData[] compdatalist = proxy.browse();
1:         if (compdatalist.length == 0) {
1:             fail("There is no message in the queue:");
1:         }
1:         String[] messageIDs = new String[compdatalist.length];
1: 
1:         for (int i = 0; i < compdatalist.length; i++) {
1:             CompositeData cdata = compdatalist[i];
1: 
1:             if (i == 0) {
1:                 LOG.info("Columns: " + cdata.getCompositeType().keySet());
1:             }
1:             messageIDs[i] = (String)cdata.get("JMSMessageID");
1:             LOG.info("message " + i + " : " + cdata.values());
1:         }
1: 
1:         TabularData table = proxy.browseAsTable();
1:         LOG.info("Found tabular data: " + table);
1:         assertTrue("Table should not be empty!", table.size() > 0);
1: 
1:         assertEquals("Queue size", outbound.length, proxy.getQueueSize());
1:         assertEquals("Queue size", outbound.length, compdatalist.length);
1:         assertEquals("Queue size", outbound.length, table.size());
1: 
1: 
1:         LOG.info("Send another 10");
1:         for (int i=0;i<outbound.length; i++) {
1:             producer.send(outbound[i]);
1:         }
1: 
1:         LOG.info("Browse again");
1: 
1:         messcount = proxy.getQueueSize();
1:         LOG.info("current number of messages in the queue :" + messcount);
1: 
1:         compdatalist = proxy.browse();
1:         if (compdatalist.length == 0) {
1:             fail("There is no message in the queue:");
1:         }
1:         messageIDs = new String[compdatalist.length];
1: 
1:         for (int i = 0; i < compdatalist.length; i++) {
1:             CompositeData cdata = compdatalist[i];
1: 
1:             if (i == 0) {
1:                 LOG.info("Columns: " + cdata.getCompositeType().keySet());
1:             }
1:             messageIDs[i] = (String)cdata.get("JMSMessageID");
1:             LOG.info("message " + i + " : " + cdata.values());
1:         }
1: 
1:         table = proxy.browseAsTable();
1:         LOG.info("Found tabular data: " + table);
1:         assertTrue("Table should not be empty!", table.size() > 0);
1: 
1:         assertEquals("Queue size", outbound.length*2, proxy.getQueueSize());
1:         assertEquals("Queue size", outbound.length*2, compdatalist.length);
1:         assertEquals("Queue size", outbound.length * 2, table.size());
1: 
1:         consumer = session.createConsumer(destination);
1:         for (int i=0; i<outbound.length * 2; i++) {
1:             assertNotNull("Got message: " + i, consumer.receive(2000));
1:         }
1:         consumer.close();
1:     }
1: 
1:         // create consumer
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // create consumer
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService brokerService = super.createBroker();
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setUseCache(isUseCache);
1:         policyMap.setDefaultEntry(policyEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:         return brokerService;
1:     }
1: 
commit:a109a98
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.BaseDestination;
/////////////////////////////////////////////////////////////////////////
1:         
1:         // currently browse max page size is ignored for a queue browser consumer
1:         // only guarantee is a page size - but a snapshot of pagedinpending is
1:         // used so it is most likely more
1:         assertTrue("got at least our expected minimum in the browser: ", i > BaseDestination.MAX_PAGE_SIZE);
commit:fde4721
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.StubConnection;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.SessionInfo;
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     public void testQueueBrowserWith2Consumers() throws Exception {
1:         final int numMessages = 1000;
1:         connection.setAlwaysSyncSend(false);
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         ActiveMQQueue destinationPrefetch10 = new ActiveMQQueue("TEST?jms.prefetchSize=10");
0:         ActiveMQQueue destinationPrefetch1 = new ActiveMQQueue("TEST?jms.prefetchsize=1");      
1:         connection.start();
1: 
1:         ActiveMQConnection connection2 = (ActiveMQConnection)factory.createConnection(userName, password);
1:         connection2.start();
1:         connections.add(connection2);
1:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destinationPrefetch10);
1:   
1:         for (int i=0; i<numMessages; i++) {
1:             TextMessage message = session.createTextMessage("Message: " + i);
0:             producer.send(message);   
1:         }
1:         
1:         QueueBrowser browser = session2.createBrowser(destinationPrefetch1);
1:         Enumeration<Message> browserView = browser.getEnumeration();
1:     
1:         List<Message> messages = new ArrayList<Message>();
1:         for (int i = 0; i < numMessages; i++) {
1:             Message m1 = consumer.receive(5000);
1:             assertNotNull("m1 is null for index: " + i, m1);
1:             messages.add(m1);
1:         }
1: 
1:         int i = 0;
1:         for (; i < numMessages && browserView.hasMoreElements(); i++) {
1:             Message m1 = messages.get(i);
1:             Message m2 = browserView.nextElement();
1:             assertNotNull("m2 is null for index: " + i, m2);
1:             assertEquals(m1.getJMSMessageID(), m2.getJMSMessageID());
1:         }
0:         assertEquals("got all: ", numMessages, i);
1: 
1:         assertFalse("nothing left in the browser", browserView.hasMoreElements());
1:         assertNull("consumer finished", consumer.receiveNoWait());
1:     }
commit:874e935
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1760d1a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testBrowseClose() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1: 
1:         connection.start();
1: 
1:         TextMessage[] outbound = new TextMessage[]{session.createTextMessage("First Message"),
1:                                            session.createTextMessage("Second Message"),
1:                                            session.createTextMessage("Third Message")};
1: 
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(outbound[0]);
1:         producer.send(outbound[1]);
1:         producer.send(outbound[2]);
1: 
1: 
1:         // create browser first
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
0:         Enumeration enumeration = browser.getEnumeration();
1: 
1: 
1:         // browse some messages
0:         assertEquals(outbound[0], (Message) enumeration.nextElement());
0:         assertEquals(outbound[1], (Message) enumeration.nextElement());
1:         //assertEquals(outbound[2], (Message) enumeration.nextElement());
1: 
1: 
1:         browser.close();
1: 
0:         // create consumer
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         // Receive the first message.
1:         TextMessage msg = (TextMessage)consumer.receive(1000);
1:         assertEquals("Expected " + outbound[0].getText() + " but received " + msg.getText(),  outbound[0], msg);
1:         msg = (TextMessage)consumer.receive(1000);
1:         assertEquals("Expected " + outbound[1].getText() + " but received " + msg.getText(), outbound[1], msg);
1:         msg = (TextMessage)consumer.receive(1000);
1:         assertEquals("Expected " + outbound[2].getText() + " but received " + msg.getText(), outbound[2], msg);
1: 
1:         consumer.close();
1:         producer.close();
1: 
1:     }
commit:3379622
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("should have received the first message", enumeration.hasMoreElements());
commit:f54713a
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testBrowseReceive() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
0:        
1:         connection.start();
0: 
1:         Message[] outbound = new Message[]{session.createTextMessage("First Message"),
1:                                            session.createTextMessage("Second Message"),
1:                                            session.createTextMessage("Third Message")};
0: 
0:         
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(outbound[0]);
0:         
1:         // create browser first
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
0:         Enumeration enumeration = browser.getEnumeration();
0:         
0:         // create consumer
0:         MessageConsumer consumer = session.createConsumer(destination);
0:         
1:         // browse the first message
0:         assertTrue("should have received the fisrts message", enumeration.hasMoreElements());
0:         assertEquals(outbound[0], (Message) enumeration.nextElement());
0:         
1:         // Receive the first message.
1:         assertEquals(outbound[0], consumer.receive(1000));
1:         consumer.close();
1:         browser.close();
1:         producer.close();
0: 
1:     }    
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Got extra message: " + ((TextMessage) enumeration.nextElement()).getText());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
0: 
1: import java.util.Enumeration;
0: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: 
1: import org.apache.activemq.command.ActiveMQQueue;
0: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JmsQueueBrowserTest extends JmsTestSupport {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsQueueBrowserTest.class);
0:     
0: 
1:     /**
1:      * Tests the queue browser. Browses the messages then the consumer tries to receive them. The messages should still
1:      * be in the queue even when it was browsed.
1:      *
1:      * @throws Exception
1:      */
1:     public void testReceiveBrowseReceive() throws Exception {
0: 
0:         Session session = connection.createSession(false, 0);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
0:         MessageConsumer consumer = session.createConsumer(destination);
1:         connection.start();
0: 
1:         Message[] outbound = new Message[]{session.createTextMessage("First Message"),
1:                                            session.createTextMessage("Second Message"),
1:                                            session.createTextMessage("Third Message")};
0: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
0: 
1:         producer.send(outbound[0]);
1:         producer.send(outbound[1]);
1:         producer.send(outbound[2]);
0: 
1:         // Get the first.
1:         assertEquals(outbound[0], consumer.receive(1000));
1:         consumer.close();
0:         //Thread.sleep(200);
0: 
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
0:         Enumeration enumeration = browser.getEnumeration();
0: 
1:         // browse the second
1:         assertTrue("should have received the second message", enumeration.hasMoreElements());
0:         assertEquals(outbound[1], (Message) enumeration.nextElement());
0: 
1:         // browse the third.
1:         assertTrue("Should have received the third message", enumeration.hasMoreElements());
0:         assertEquals(outbound[2], (Message) enumeration.nextElement());
0: 
1:         // There should be no more.
1:         boolean tooMany = false;
1:         while (enumeration.hasMoreElements()) {
0:             log.info("Got extra message: " + ((TextMessage) enumeration.nextElement()).getText());
1:             tooMany = true;
1:         }
1:         assertFalse(tooMany);
1:         browser.close();
0: 
1:         // Re-open the consumer.
1:         consumer = session.createConsumer(destination);
1:         // Receive the second.
1:         assertEquals(outbound[1], consumer.receive(1000));
1:         // Receive the third.
1:         assertEquals(outbound[2], consumer.receive(1000));
1:         consumer.close();
0: 
1:     }
1: }
============================================================================