1:6672740: /**
1:6672740:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6672740:  * contributor license agreements.  See the NOTICE file distributed with
1:6672740:  * this work for additional information regarding copyright ownership.
1:6672740:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6672740:  * (the "License"); you may not use this file except in compliance with
1:6672740:  * the License.  You may obtain a copy of the License at
1:6672740:  *
1:6672740:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6672740:  *
1:6672740:  * Unless required by applicable law or agreed to in writing, software
1:6672740:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6672740:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6672740:  * See the License for the specific language governing permissions and
1:6672740:  * limitations under the License.
1:6672740:  */
1:6672740: package org.apache.activemq.usecases;
1:6672740: 
1:6672740: import javax.jms.Connection;
1:6672740: import javax.jms.Destination;
1:6672740: import javax.jms.Message;
1:6672740: import javax.jms.MessageConsumer;
1:6672740: import javax.jms.MessageProducer;
1:6672740: import javax.jms.Session;
1:6672740: 
1:6672740: import org.apache.activemq.ActiveMQConnectionFactory;
1:4743a20: import org.apache.activemq.TestSupport;
1:6672740: import org.apache.activemq.broker.BrokerFactory;
1:6672740: import org.apache.activemq.broker.BrokerService;
1:6672740: import org.apache.activemq.command.ActiveMQDestination;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6672740: 
1:6672740: public class AdvisoryTopicDeletionTest extends TestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryTopicDeletionTest.class);
1:6672740: 
1:6672740:     private BrokerService broker;
1:6672740:     private Connection connection;
1:6672740: 
1:4743a20:     @Override
1:6672740:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:6672740:         return new ActiveMQConnectionFactory("vm://" + getName());
1:6672740:     }
1:6672740: 
1:4743a20:     @Override
1:6672740:     protected void setUp() throws Exception {
1:6672740:         createBroker();
1:6672740:         topic = false;
1:6672740:         super.setUp();
1:6672740:     }
1:6672740: 
1:4743a20:     @Override
1:6672740:     protected void tearDown() throws Exception {
1:6672740:         super.tearDown();
1:6672740:         destroyBroker();
1:6672740:     }
1:6672740: 
1:6672740:     private void createBroker() throws Exception {
1:6672740:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:6672740:         broker.setPersistent(false);
1:6672740:         broker.setBrokerName(getName());
1:6672740:         broker.start();
1:6672740: 
1:6672740:         connection = createConnection();
1:6672740:     }
1:6672740: 
1:6672740:     @Override
1:6672740:     protected Connection createConnection() throws Exception {
1:6672740:         Connection con = super.createConnection();
1:6672740:         con.start();
1:6672740:         return con;
1:6672740:     }
1:6672740: 
1:6672740:     private void destroyBroker() throws Exception {
1:6672740:         if (connection != null)
1:6672740:             connection.close();
1:6672740:         if (broker != null)
1:6672740:             broker.stop();
1:6672740:     }
1:6672740: 
1:6672740:     public void doTest() throws Exception {
1:6672740:         Destination dest = createDestination();
1:6672740: 
1:6672740:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6672740:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6672740: 
1:6672740:         MessageConsumer consumer = consumerSession.createConsumer(dest);
1:6672740: 
1:6672740:         MessageProducer prod = producerSession.createProducer(dest);
1:6672740:         Message message = producerSession.createMessage();
1:6672740:         prod.send(message);
1:6672740: 
1:6672740:         consumer.receive(60 * 1000);
1:6672740:         connection.close();
1:6672740:         connection = null;
1:6672740: 
1:6672740:         if ( topic ) {
1:6672740:             broker.getAdminView().removeTopic(((ActiveMQDestination)dest).getPhysicalName());
1:6672740:         } else {
1:6672740:             broker.getAdminView().removeQueue(((ActiveMQDestination)dest).getPhysicalName());
1:6672740:         }
1:6672740: 
1:6672740:         ActiveMQDestination dests[] = broker.getRegionBroker().getDestinations();
1:6672740:         int matchingDestinations = 0;
1:6672740:         for (ActiveMQDestination destination: dests) {
1:6672740:             String name = destination.getPhysicalName();
1:6672740:             LOG.debug("Found destination " + name);
1:6672740:             if (name.startsWith("ActiveMQ.Advisory") && name.contains(getDestinationString())) {
1:6672740:                 matchingDestinations++;
1:6672740:             }
1:6672740:         }
1:6672740: 
1:6672740:         assertEquals("No matching destinations should be found", 0, matchingDestinations);
1:6672740:     }
1:6672740: 
1:6672740:     public void testTopic() throws Exception {
1:6672740:         topic=true;
1:6672740:         doTest();
1:6672740:     }
1:6672740: 
1:6672740:     public void testQueue() throws Exception {
1:6672740:         topic=false;
1:6672740:         doTest();
1:6672740:     }
1:6672740: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
commit:ef24cc9
commit:6672740
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class AdvisoryTopicDeletionTest extends TestSupport {
0:     private static final Log LOG = LogFactory.getLog(AdvisoryTopicDeletionTest.class);
1: 
1:     private BrokerService broker;
1:     private Connection connection;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName());
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         createBroker();
1:         topic = false;
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:         broker.setPersistent(false);
1:         broker.setBrokerName(getName());
1:         broker.start();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         Connection con = super.createConnection();
1:         con.start();
1:         return con;
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (connection != null)
1:             connection.close();
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     public void doTest() throws Exception {
1:         Destination dest = createDestination();
1: 
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumer = consumerSession.createConsumer(dest);
1: 
1:         MessageProducer prod = producerSession.createProducer(dest);
1:         Message message = producerSession.createMessage();
1:         prod.send(message);
1: 
1:         consumer.receive(60 * 1000);
1:         connection.close();
1:         connection = null;
1: 
1:         if ( topic ) {
1:             broker.getAdminView().removeTopic(((ActiveMQDestination)dest).getPhysicalName());
1:         } else {
1:             broker.getAdminView().removeQueue(((ActiveMQDestination)dest).getPhysicalName());
1:         }
1: 
1:         ActiveMQDestination dests[] = broker.getRegionBroker().getDestinations();
1:         int matchingDestinations = 0;
1:         for (ActiveMQDestination destination: dests) {
1:             String name = destination.getPhysicalName();
1:             LOG.debug("Found destination " + name);
1:             if (name.startsWith("ActiveMQ.Advisory") && name.contains(getDestinationString())) {
1:                 matchingDestinations++;
1:             }
1:         }
1: 
1:         assertEquals("No matching destinations should be found", 0, matchingDestinations);
1:     }
1: 
1:     public void testTopic() throws Exception {
1:         topic=true;
1:         doTest();
1:     }
1: 
1:     public void testQueue() throws Exception {
1:         topic=false;
1:         doTest();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryTopicDeletionTest.class);
============================================================================