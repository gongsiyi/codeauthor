1:e1d4780: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:e1d4780:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:e1d4780: package org.apache.activemq.broker.region.group;
2:e1d4780: 
1:74a7a8b: import junit.framework.TestCase;
1:e1d4780: import org.apache.activemq.command.ConnectionId;
1:e1d4780: import org.apache.activemq.command.ConsumerId;
1:e1d4780: import org.apache.activemq.command.SessionId;
1:e1d4780: 
1:e1d4780: /**
1:0bbc0ac:  * 
1:7f883f6:  * 
1:e1d4780:  */
1:e1d4780: public class MessageGroupMapTest extends TestCase {
1:e1d4780: 
1:e1d4780:     protected MessageGroupMap map;
1:e1d4780:     private ConsumerId consumer1;
1:e1d4780:     private ConsumerId consumer2;
1:e1d4780:     private ConsumerId consumer3;
1:e1d4780:     private long idCounter;
1:e1d4780: 
1:e1d4780:     public void testSingleConsumerForManyBucks() throws Exception {
1:e1d4780:         assertGet("1", null);
1:e1d4780: 
1:e1d4780:         map.put("1", consumer1);
1:e1d4780:         assertGet("1", consumer1);
1:e1d4780:         map.put("2", consumer1);
1:e1d4780:         assertGet("2", consumer1);
1:e1d4780:         map.put("3", consumer1);
1:e1d4780:         assertGet("3", consumer1);
1:e1d4780: 
1:e1d4780:         MessageGroupSet set = map.removeConsumer(consumer1);
1:e1d4780:         assertContains(set, "1");
1:e1d4780:         assertContains(set, "2");
1:e1d4780:         assertContains(set, "3");
1:e1d4780:         assertGet("1", null);
1:e1d4780:         assertGet("2", null);
1:e1d4780:         assertGet("3", null);
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     public void testManyConsumers() throws Exception {
1:e1d4780:         assertGet("1", null);
1:e1d4780: 
1:e1d4780:         map.put("1", consumer1);
1:e1d4780:         assertGet("1", consumer1);
1:e1d4780:         map.put("2", consumer2);
1:e1d4780:         assertGet("2", consumer2);
1:e1d4780:         map.put("3", consumer3);
1:e1d4780:         assertGet("3", consumer3);
1:e1d4780: 
1:e1d4780:         MessageGroupSet set = map.removeConsumer(consumer1);
1:e1d4780:         assertContains(set, "1");
1:e1d4780: 
1:e1d4780:         assertGet("1", null);
1:e1d4780:         map.put("1", consumer2);
1:e1d4780:         assertGet("1", consumer2);
1:e1d4780: 
1:e1d4780:         set = map.removeConsumer(consumer2);
1:e1d4780:         assertContains(set, "1");
1:e1d4780:         assertContains(set, "2");
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected void setUp() throws Exception {
1:e1d4780:         super.setUp();
1:e1d4780:         map = createMessageGroupMap();
1:e1d4780:         consumer1 = createConsumerId();
1:e1d4780:         consumer2 = createConsumerId();
1:e1d4780:         consumer3 = createConsumerId();
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected MessageGroupMap createMessageGroupMap() {
1:e1d4780:         return new SimpleMessageGroupMap();
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected ConsumerId createConsumerId() {
1:e1d4780:         ConnectionId connectionId = new ConnectionId("" + ++idCounter);
1:e1d4780:         SessionId sessionId = new SessionId(connectionId, ++idCounter);
1:e1d4780:         ConsumerId answer = new ConsumerId(sessionId, ++idCounter);
1:e1d4780:         return answer;
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected void assertGet(String groupdId, ConsumerId expected) {
1:e1d4780:         ConsumerId actual = map.get(groupdId);
1:e1d4780:         assertEquals("Entry for groupId: " + groupdId, expected, actual);
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected void assertContains(MessageGroupSet set, String groupID) {
1:e1d4780:         assertTrue("MessageGroup set: " + set + " does not contain groupID: " + groupID, set.contains(groupID));
1:e1d4780:     }
1:e1d4780: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:e1d4780
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.region.group;
1: 
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.SessionId;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class MessageGroupMapTest extends TestCase {
1: 
1:     protected MessageGroupMap map;
1:     private ConsumerId consumer1;
1:     private ConsumerId consumer2;
1:     private ConsumerId consumer3;
1:     private long idCounter;
1: 
1:     public void testSingleConsumerForManyBucks() throws Exception {
1:         assertGet("1", null);
1: 
1:         map.put("1", consumer1);
1:         assertGet("1", consumer1);
1:         map.put("2", consumer1);
1:         assertGet("2", consumer1);
1:         map.put("3", consumer1);
1:         assertGet("3", consumer1);
1: 
1:         MessageGroupSet set = map.removeConsumer(consumer1);
1:         assertContains(set, "1");
1:         assertContains(set, "2");
1:         assertContains(set, "3");
1:         assertGet("1", null);
1:         assertGet("2", null);
1:         assertGet("3", null);
1:     }
1: 
1:     public void testManyConsumers() throws Exception {
1:         assertGet("1", null);
1: 
1:         map.put("1", consumer1);
1:         assertGet("1", consumer1);
1:         map.put("2", consumer2);
1:         assertGet("2", consumer2);
1:         map.put("3", consumer3);
1:         assertGet("3", consumer3);
1: 
1:         MessageGroupSet set = map.removeConsumer(consumer1);
1:         assertContains(set, "1");
1: 
1:         assertGet("1", null);
1:         map.put("1", consumer2);
1:         assertGet("1", consumer2);
1: 
1:         set = map.removeConsumer(consumer2);
1:         assertContains(set, "1");
1:         assertContains(set, "2");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         map = createMessageGroupMap();
1:         consumer1 = createConsumerId();
1:         consumer2 = createConsumerId();
1:         consumer3 = createConsumerId();
1:     }
1: 
1:     protected MessageGroupMap createMessageGroupMap() {
1:         return new SimpleMessageGroupMap();
1:     }
1: 
1:     protected ConsumerId createConsumerId() {
1:         ConnectionId connectionId = new ConnectionId("" + ++idCounter);
1:         SessionId sessionId = new SessionId(connectionId, ++idCounter);
1:         ConsumerId answer = new ConsumerId(sessionId, ++idCounter);
1:         return answer;
1:     }
1: 
1:     protected void assertGet(String groupdId, ConsumerId expected) {
1:         ConsumerId actual = map.get(groupdId);
1:         assertEquals("Entry for groupId: " + groupdId, expected, actual);
1:     }
1: 
1:     protected void assertContains(MessageGroupSet set, String groupID) {
1:         assertTrue("MessageGroup set: " + set + " does not contain groupID: " + groupID, set.contains(groupID));
1:     }
1: }
============================================================================