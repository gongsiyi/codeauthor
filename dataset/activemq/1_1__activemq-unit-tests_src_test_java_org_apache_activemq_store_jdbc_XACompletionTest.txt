1:ea70e82: /**
1:ea70e82:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ea70e82:  * contributor license agreements.  See the NOTICE file distributed with
1:ea70e82:  * this work for additional information regarding copyright ownership.
1:ea70e82:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ea70e82:  * (the "License"); you may not use this file except in compliance with
1:ea70e82:  * the License.  You may obtain a copy of the License at
1:ea70e82:  *
1:ea70e82:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ea70e82:  *
1:ea70e82:  * Unless required by applicable law or agreed to in writing, software
1:ea70e82:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ea70e82:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ea70e82:  * See the License for the specific language governing permissions and
1:ea70e82:  * limitations under the License.
1:ea70e82:  */
1:ea70e82: 
1:ea70e82: package org.apache.activemq.store.jdbc;
1:ea70e82: 
1:ea70e82: import org.apache.activemq.ActiveMQConnectionFactory;
1:ea70e82: import org.apache.activemq.ActiveMQXAConnection;
1:ea70e82: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:ea70e82: import org.apache.activemq.TestSupport;
1:01384c7: import org.apache.activemq.broker.BrokerPlugin;
1:ea70e82: import org.apache.activemq.broker.BrokerService;
1:ea70e82: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:ea70e82: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ea70e82: import org.apache.activemq.broker.region.policy.PolicyMap;
1:01384c7: import org.apache.activemq.command.ActiveMQDestination;
1:ea70e82: import org.apache.activemq.command.ActiveMQMessage;
1:ea70e82: import org.apache.activemq.command.ActiveMQQueue;
1:ea70e82: import org.apache.activemq.command.XATransactionId;
1:01384c7: import org.apache.activemq.filter.AnyDestination;
1:01384c7: import org.apache.activemq.filter.DestinationMap;
1:01384c7: import org.apache.activemq.jaas.GroupPrincipal;
1:ea70e82: import org.apache.activemq.openwire.OpenWireFormat;
1:01384c7: import org.apache.activemq.security.AuthorizationPlugin;
1:01384c7: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:01384c7: import org.apache.activemq.security.SimpleAuthorizationMap;
1:ea70e82: import org.apache.activemq.util.ByteSequence;
1:ea70e82: import org.apache.activemq.util.Wait;
1:ea70e82: import org.apache.activemq.wireformat.WireFormat;
1:ea70e82: import org.junit.After;
1:ea70e82: import org.junit.Before;
1:ea70e82: import org.junit.Test;
1:ea70e82: import org.junit.runner.RunWith;
1:ea70e82: import org.junit.runners.Parameterized;
1:ea70e82: import org.slf4j.Logger;
1:ea70e82: import org.slf4j.LoggerFactory;
1:ea70e82: 
1:ea70e82: import javax.jms.ConnectionFactory;
1:ea70e82: import javax.jms.DeliveryMode;
1:ea70e82: import javax.jms.Destination;
1:ea70e82: import javax.jms.Message;
1:ea70e82: import javax.jms.MessageConsumer;
1:ea70e82: import javax.jms.MessageProducer;
1:ea70e82: import javax.jms.Queue;
1:ea70e82: import javax.jms.QueueBrowser;
1:ea70e82: import javax.jms.Session;
1:ea70e82: import javax.jms.XASession;
1:ea70e82: import javax.management.ObjectName;
1:ea70e82: import javax.transaction.xa.XAResource;
1:ea70e82: import javax.transaction.xa.Xid;
1:ea70e82: import java.sql.PreparedStatement;
1:ea70e82: import java.sql.ResultSet;
1:ea70e82: import java.util.Arrays;
1:ea70e82: import java.util.Enumeration;
1:ea70e82: 
1:ea70e82: import static org.apache.activemq.util.TestUtils.createXid;
1:ea70e82: 
1:ea70e82: 
1:ea70e82: @RunWith(value = Parameterized.class)
1:ea70e82: public class XACompletionTest extends TestSupport {
1:ea70e82:     private static final Logger LOG = LoggerFactory.getLogger(XACompletionTest.class);
1:ea70e82: 
1:ea70e82:     protected ActiveMQXAConnectionFactory factory;
1:ea70e82:     protected static final int messagesExpected = 1;
1:ea70e82:     protected BrokerService broker;
1:ea70e82:     protected String connectionUri;
1:ea70e82: 
1:ea70e82:     @Parameterized.Parameter
1:ea70e82:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1:ea70e82: 
1:01384c7:     @Parameterized.Parameters(name = "store={0}")
1:ea70e82:     public static Iterable<Object[]> getTestParameters() {
1:01384c7:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB}, {PersistenceAdapterChoice.JDBC}});
1:ea70e82:     }
1:ea70e82: 
1:01384c7:     @Before
1:ea70e82:     public void setUp() throws Exception {
1:ea70e82:         broker = createBroker();
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @After
1:ea70e82:     public void stopAll() throws Exception {
1:ea70e82:         if (broker != null) {
1:ea70e82:             broker.stop();
1:ea70e82:             broker.waitUntilStopped();
1:ea70e82:             broker = null;
1:ea70e82:         }
1:ea70e82:     }
1:ea70e82: 
1:ea70e82: 
1:72613aa:     @Test
1:ea70e82:     public void testStatsAndRedispatchAfterAckPreparedClosed() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(
1:ea70e82:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + 0);
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(1);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82:         resource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         resource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         Xid tid = createXid();
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         Message message = consumer.receive(2000);
1:ea70e82:         LOG.info("Received : " + message);
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82: 
1:ea70e82:         activeMQXAConnection.close();
1:ea70e82: 
1:bd45d93:         dumpMessages();
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Try jmx browse... after commit");
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertEquals("size", 1, proxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         LOG.info("Try receive... after rollback");
1:ea70e82:         message = regularReceive("TEST");
1:ea70e82: 
1:ea70e82:         assertNotNull("message gone", message);
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testStatsAndBrowseAfterAckPreparedCommitted() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(
1:ea70e82:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(messagesExpected);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82:         resource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         resource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         Xid tid = createXid();
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         int messagesReceived = 0;
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < messagesExpected; i++) {
1:ea70e82: 
1:ea70e82:             Message message = null;
1:ea70e82:             try {
1:ea70e82:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received : " + message);
1:ea70e82:                 messagesReceived++;
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82:         resource.prepare(tid);
1:ea70e82: 
1:ea70e82:         consumer.close();
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         resource.commit(tid, false);
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Try jmx browse... after commit");
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertTrue(proxy.browseMessages().isEmpty());
1:ea70e82:         assertEquals("prefetch 0", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size 0", 0, proxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         LOG.info("Try browse... after commit");
1:ea70e82:         Message browsed = regularBrowseFirst();
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         assertNull("message gone", browsed);
1:ea70e82: 
1:ea70e82:         LOG.info("Try receive... after commit");
1:ea70e82:         Message message = regularReceive("TEST");
1:ea70e82: 
1:ea70e82:         assertNull("message gone", message);
1:ea70e82: 
1:ea70e82:     }
1:ea70e82: 
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testStatsAndBrowseAfterAckPreparedRolledback() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(
1:ea70e82:                 connectionUri + "?jms.prefetchPolicy.all=0");
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(10);
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82:         resource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         resource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         assertEquals("prefetch 0", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size 0", 10, proxy.getQueueSize());
1:ea70e82:         assertEquals("size 0", 0, proxy.cursorSize());
1:ea70e82: 
1:ea70e82:         Xid tid = createXid();
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < 5; i++) {
1:ea70e82: 
1:ea70e82:             Message message = null;
1:ea70e82:             try {
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received : " + message);
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82:         resource.prepare(tid);
1:ea70e82: 
1:ea70e82:         consumer.close();
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         Wait.waitFor(new Wait.Condition() {
1:ea70e82:             @Override
1:ea70e82:             public boolean isSatisified() throws Exception {
1:ea70e82:                 return proxy.getInFlightCount() == 0l;
1:ea70e82:             }
1:ea70e82:         });
1:ea70e82:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size", 10, proxy.getQueueSize());
1:ea70e82:         assertEquals("cursor size", 0, proxy.cursorSize());
1:ea70e82: 
1:ea70e82:         resource.rollback(tid);
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Try jmx browse... after rollback");
1:ea70e82: 
1:ea70e82:         assertEquals(10, proxy.browseMessages().size());
1:ea70e82: 
1:ea70e82:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size", 10, proxy.getQueueSize());
1:ea70e82:         assertEquals("cursor size", 0, proxy.cursorSize());
1:ea70e82: 
1:ea70e82:         LOG.info("Try browse... after");
1:ea70e82:         Message browsed = regularBrowseFirst();
1:ea70e82:         assertNotNull("message gone", browsed);
1:ea70e82: 
1:ea70e82:         LOG.info("Try receive... after");
1:01384c7:         for (int i = 0; i < 10; i++) {
1:ea70e82:             Message message = regularReceive("TEST");
1:ea70e82:             assertNotNull("message gone", message);
1:ea70e82:         }
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testStatsAndConsumeAfterAckPreparedRolledback() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(10);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82:         resource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         resource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82:         Xid tid = createXid();
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         int messagesReceived = 0;
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < 5; i++) {
1:ea70e82: 
1:ea70e82:             Message message = null;
1:ea70e82:             try {
1:ea70e82:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received : " + message);
1:ea70e82:                 messagesReceived++;
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82:         resource.prepare(tid);
1:ea70e82: 
1:ea70e82:         consumer.close();
1:ea70e82: 
1:bd45d93:         LOG.info("after close");
1:bd45d93:         dumpMessages();
1:bd45d93: 
1:ea70e82:         assertEquals("drain", 5, drainUnack(5, "TEST"));
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         broker = restartBroker();
1:ea70e82: 
1:ea70e82:         assertEquals("redrain", 5, drainUnack(5, "TEST"));
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         LOG.info("Try consume... after restart");
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size", 5, proxy.getQueueSize());
1:ea70e82:         assertEquals("cursor size 0", 0, proxy.cursorSize());
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82: 
1:ea70e82:         activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         XAResource xaResource = xaSession.getXAResource();
1:ea70e82: 
1:ea70e82:         Xid[] xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         xaResource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         LOG.info("Rollback outcome for ack");
1:ea70e82:         xaResource.rollback(xids[0]);
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         LOG.info("Try receive... after rollback");
1:01384c7:         for (int i = 0; i < 10; i++) {
1:ea70e82:             Message message = regularReceive("TEST");
1:ea70e82:             assertNotNull("message gone: " + i, message);
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         assertNull("none left", regularReceive("TEST"));
1:ea70e82: 
1:ea70e82:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:ea70e82:         assertEquals("size", 0, proxy.getQueueSize());
1:ea70e82:         assertEquals("cursor size", 0, proxy.cursorSize());
1:ea70e82:         assertEquals("dq", 10, proxy.getDequeueCount());
1:ea70e82: 
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testStatsAndConsumeAfterAckPreparedRolledbackOutOfOrderRecovery() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(20);
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < 10; i++) {
1:ea70e82: 
1:ea70e82:             ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:             activeMQXAConnection.start();
1:ea70e82:             XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:             Destination destination = xaSession.createQueue("TEST");
1:ea70e82:             MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:             XAResource resource = xaSession.getXAResource();
1:ea70e82:             Xid tid = createXid();
1:ea70e82: 
1:ea70e82:             resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:             Message message = null;
1:ea70e82:             try {
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received (" + i + ") : ," + message);
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82: 
1:ea70e82:             resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82:             resource.prepare(tid);
1:ea70e82: 
1:ea70e82:             // no close - b/c messages end up in pagedInPendingDispatch!
1:ea70e82:             // activeMQXAConnection.close();
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         XAResource xaResource = xaSession.getXAResource();
1:ea70e82: 
1:ea70e82:         Xid[] xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         xaResource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         xaResource.rollback(xids[0]);
1:ea70e82:         xaResource.rollback(xids[1]);
1:ea70e82: 
1:ea70e82:         activeMQXAConnection.close();
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         LOG.info("RESTART");
1:ea70e82:         broker = restartBroker();
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         // set maxBatchSize=1
1:ea70e82:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=" + 1);
1:01384c7:         factory.setWatchTopicAdvisories(false);
2:ea70e82:         javax.jms.Connection connection = factory.createConnection();
1:ea70e82:         connection.start();
1:ea70e82:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:ea70e82:         Destination destination = session.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = session.createConsumer(destination);
1:ea70e82:         consumer.close();
1:ea70e82: 
1:ea70e82:         ActiveMQConnectionFactory receiveFactory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:01384c7:         receiveFactory.setWatchTopicAdvisories(false);
1:ea70e82: 
1:ea70e82:         // recover/rollback the second tx
1:ea70e82:         ActiveMQXAConnectionFactory activeMQXAConnectionFactory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:ea70e82:         activeMQXAConnectionFactory.setWatchTopicAdvisories(false);
1:ea70e82:         activeMQXAConnection = (ActiveMQXAConnection) activeMQXAConnectionFactory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         xaSession = activeMQXAConnection.createXASession();
1:ea70e82:         xaResource = xaSession.getXAResource();
1:ea70e82:         xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:ea70e82:         xaResource.recover(XAResource.TMNOFLAGS);
1:ea70e82: 
1:01384c7:         for (int i = 0; i < xids.length; i++) {
1:ea70e82:             xaResource.rollback(xids[i]);
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         // another prefetch demand of 1
1:ea70e82:         MessageConsumer consumer2 = session.createConsumer(new ActiveMQQueue("TEST?consumer.prefetchSize=2"));
1:ea70e82: 
1:ea70e82:         LOG.info("Try receive... after rollback");
1:ea70e82:         Message message = regularReceiveWith(receiveFactory, "TEST");
1:ea70e82:         assertNotNull("message 1: ", message);
1:ea70e82:         LOG.info("Received : " + message);
1:ea70e82: 
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         message = regularReceiveWith(receiveFactory, "TEST");
1:ea70e82:         assertNotNull("last message", message);
1:ea70e82:         LOG.info("Received : " + message);
1:ea70e82: 
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testMoveInTwoBranches() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(
1:ea70e82:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(messagesExpected);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82: 
1:ea70e82:         final Xid tid = createXid();
1:ea70e82:         byte[] branch = tid.getBranchQualifier();
1:01384c7:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
1:ea70e82:         branch2[0] = '!';
1:ea70e82: 
1:ea70e82:         Xid branchTid = new Xid() {
1:ea70e82:             @Override
1:ea70e82:             public int getFormatId() {
1:ea70e82:                 return tid.getFormatId();
1:ea70e82:             }
1:ea70e82: 
1:ea70e82:             @Override
1:ea70e82:             public byte[] getGlobalTransactionId() {
1:ea70e82:                 return tid.getGlobalTransactionId();
1:ea70e82:             }
1:ea70e82: 
1:ea70e82:             @Override
1:ea70e82:             public byte[] getBranchQualifier() {
1:ea70e82:                 return branch2;
1:ea70e82:             }
2:ea70e82:         };
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         int messagesReceived = 0;
1:ea70e82: 
1:ea70e82:         Message message = null;
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < messagesExpected; i++) {
1:ea70e82: 
1:ea70e82:             try {
1:ea70e82:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received : " + message);
1:ea70e82:                 messagesReceived++;
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnectionSend.start();
1:ea70e82:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:ea70e82:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1:ea70e82: 
1:ea70e82:         XAResource resourceSend = xaSessionSend.getXAResource();
1:ea70e82:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:ea70e82:         toSend.setTransactionId(new XATransactionId(branchTid));
1:ea70e82:         producer.send(toSend);
1:ea70e82: 
1:ea70e82:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:ea70e82:         resourceSend.prepare(branchTid);
1:ea70e82: 
1:ea70e82:         resource.prepare(tid);
1:ea70e82: 
1:ea70e82:         consumer.close();
1:ea70e82: 
1:ea70e82:         LOG.info("Prepared");
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Commit Ack");
1:ea70e82:         resource.commit(tid, false);
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Commit Send");
1:ea70e82:         resourceSend.commit(branchTid, false);
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         LOG.info("Try jmx browse... after commit");
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertTrue(proxy.browseMessages().isEmpty());
1:ea70e82:         assertEquals("dq ", 1, proxy.getDequeueCount());
1:ea70e82:         assertEquals("size 0", 0, proxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:ea70e82:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertEquals("enq", 1, moveProxy.getEnqueueCount());
1:ea70e82:         assertEquals("size 1", 1, moveProxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         assertNotNull(regularReceive("TEST_MOVE"));
1:ea70e82: 
1:ea70e82:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1:ea70e82: 
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     @Test
1:72613aa:     public void testMoveInTwoBranchesPreparedAckRecoveryRestartRollback() throws Exception {
1:72613aa: 
1:72613aa:         factory = new ActiveMQXAConnectionFactory(
1:72613aa:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:72613aa: 
1:72613aa:         factory.setWatchTopicAdvisories(false);
1:72613aa:         sendMessages(messagesExpected);
1:72613aa: 
1:72613aa:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:72613aa:         activeMQXAConnection.start();
1:72613aa:         XASession xaSession = activeMQXAConnection.createXASession();
1:72613aa: 
1:72613aa:         Destination destination = xaSession.createQueue("TEST");
1:72613aa:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:72613aa: 
1:72613aa:         XAResource resource = xaSession.getXAResource();
1:72613aa: 
1:72613aa:         final Xid tid = createXid();
1:72613aa:         byte[] branch = tid.getBranchQualifier();
1:01384c7:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
1:72613aa:         branch2[0] = '!';
1:72613aa: 
1:72613aa:         Xid branchTid = new Xid() {
1:72613aa:             @Override
1:72613aa:             public int getFormatId() {
1:72613aa:                 return tid.getFormatId();
1:72613aa:             }
1:72613aa: 
1:72613aa:             @Override
1:72613aa:             public byte[] getGlobalTransactionId() {
1:72613aa:                 return tid.getGlobalTransactionId();
1:72613aa:             }
1:72613aa: 
1:72613aa:             @Override
1:72613aa:             public byte[] getBranchQualifier() {
1:72613aa:                 return branch2;
1:72613aa:             }
1:72613aa:         };
1:72613aa: 
1:72613aa:         resource.start(tid, XAResource.TMNOFLAGS);
1:72613aa: 
1:72613aa:         int messagesReceived = 0;
1:72613aa: 
1:72613aa:         Message message = null;
1:72613aa: 
1:72613aa:         for (int i = 0; i < messagesExpected; i++) {
1:72613aa: 
1:72613aa:             try {
1:72613aa:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:72613aa:                 message = consumer.receive(2000);
1:72613aa:                 LOG.info("Received : " + message);
1:72613aa:                 messagesReceived++;
1:72613aa:             } catch (Exception e) {
1:72613aa:                 LOG.debug("Caught exception:", e);
1:72613aa:             }
1:72613aa:         }
1:72613aa: 
1:72613aa:         resource.end(tid, XAResource.TMSUCCESS);
1:72613aa: 
1:72613aa:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:72613aa:         activeMQXAConnectionSend.start();
1:72613aa:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1:72613aa: 
1:72613aa:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:72613aa:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1:72613aa: 
1:72613aa:         XAResource resourceSend = xaSessionSend.getXAResource();
1:72613aa:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1:72613aa: 
1:72613aa:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:72613aa:         toSend.setTransactionId(new XATransactionId(branchTid));
1:72613aa:         producer.send(toSend);
1:72613aa: 
1:72613aa:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:72613aa:         resourceSend.prepare(branchTid);
1:72613aa: 
1:72613aa:         // ack on TEST is prepared
1:72613aa:         resource.prepare(tid);
1:72613aa: 
1:72613aa:         // send to TEST_MOVE is rolledback
1:72613aa:         resourceSend.rollback(branchTid);
1:72613aa: 
1:72613aa:         consumer.close();
1:72613aa: 
1:72613aa:         LOG.info("Prepared");
1:72613aa:         dumpMessages();
1:72613aa: 
1:72613aa:         broker = restartBroker();
1:72613aa: 
1:72613aa:         LOG.info("New broker");
1:72613aa:         dumpMessages();
1:72613aa: 
1:72613aa:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:72613aa:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:72613aa:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:72613aa: 
1:72613aa:         assertEquals("size", 0, proxy.getQueueSize());
1:72613aa: 
1:72613aa:         assertNull(regularReceive("TEST_MOVE"));
1:72613aa: 
1:72613aa:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:72613aa:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:72613aa:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1:72613aa: 
1:72613aa:         assertEquals("enq", 0, moveProxy.getDequeueCount());
1:72613aa:         assertEquals("size", 0, moveProxy.getQueueSize());
1:72613aa: 
1:72613aa:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1:72613aa: 
1:72613aa:         factory = new ActiveMQXAConnectionFactory(
1:72613aa:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:72613aa:         factory.setWatchTopicAdvisories(false);
1:72613aa: 
1:72613aa:         activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:72613aa:         activeMQXAConnection.start();
1:72613aa:         xaSession = activeMQXAConnection.createXASession();
1:72613aa: 
1:72613aa:         resource = xaSession.getXAResource();
1:72613aa:         resource.rollback(tid);
1:72613aa: 
1:72613aa:         assertEquals("size", 1, proxy.getQueueSize());
1:72613aa:         assertEquals("c size", 1, proxy.cursorSize());
1:72613aa: 
1:72613aa:         assertNotNull(regularReceive("TEST"));
1:72613aa: 
1:72613aa:         assertEquals("size", 0, proxy.getQueueSize());
1:72613aa:         assertEquals("c size", 0, proxy.cursorSize());
1:72613aa:         assertEquals("dq", 1, proxy.getDequeueCount());
1:72613aa:     }
1:ea70e82: 
1:ea70e82: 
1:ea70e82:     @Test
1:ea70e82:     public void testMoveInTwoBranchesTwoBrokers() throws Exception {
1:ea70e82: 
1:ea70e82:         factory = new ActiveMQXAConnectionFactory(
1:ea70e82:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:ea70e82: 
1:ea70e82:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         sendMessages(messagesExpected);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnection.start();
1:ea70e82:         XASession xaSession = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destination = xaSession.createQueue("TEST");
1:ea70e82:         MessageConsumer consumer = xaSession.createConsumer(destination);
1:ea70e82: 
1:ea70e82:         XAResource resource = xaSession.getXAResource();
1:ea70e82: 
1:ea70e82:         final Xid tid = createXid();
1:ea70e82:         byte[] branch = tid.getBranchQualifier();
1:01384c7:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
1:ea70e82:         branch2[0] = '!';
1:ea70e82: 
1:ea70e82:         Xid branchTid = new Xid() {
1:ea70e82:             @Override
1:ea70e82:             public int getFormatId() {
1:ea70e82:                 return tid.getFormatId();
1:ea70e82:             }
1:ea70e82: 
1:ea70e82:             @Override
1:ea70e82:             public byte[] getGlobalTransactionId() {
1:ea70e82:                 return tid.getGlobalTransactionId();
1:ea70e82:             }
1:ea70e82: 
1:ea70e82:             @Override
1:ea70e82:             public byte[] getBranchQualifier() {
1:ea70e82:                 return branch2;
1:ea70e82:             }
1:ea70e82:         };
1:ea70e82: 
1:ea70e82:         resource.start(tid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         int messagesReceived = 0;
1:ea70e82: 
1:ea70e82:         Message message = null;
1:ea70e82: 
1:ea70e82:         for (int i = 0; i < messagesExpected; i++) {
1:ea70e82: 
1:ea70e82:             try {
1:ea70e82:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:ea70e82:                 message = consumer.receive(2000);
1:ea70e82:                 LOG.info("Received : " + message);
1:ea70e82:                 messagesReceived++;
1:ea70e82:             } catch (Exception e) {
1:ea70e82:                 LOG.debug("Caught exception:", e);
1:ea70e82:             }
1:ea70e82:         }
1:ea70e82: 
1:ea70e82:         resource.end(tid, XAResource.TMSUCCESS);
1:ea70e82: 
1:ea70e82:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:ea70e82:         activeMQXAConnectionSend.start();
1:ea70e82:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1:ea70e82: 
1:ea70e82:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:ea70e82:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1:ea70e82: 
1:ea70e82:         XAResource resourceSend = xaSessionSend.getXAResource();
1:ea70e82:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1:ea70e82: 
1:ea70e82:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:ea70e82:         toSend.setTransactionId(new XATransactionId(branchTid));
1:ea70e82:         producer.send(toSend);
1:ea70e82: 
1:ea70e82:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:ea70e82:         resourceSend.prepare(branchTid);
1:ea70e82: 
1:ea70e82:         resource.prepare(tid);
1:ea70e82: 
1:ea70e82:         consumer.close();
1:ea70e82: 
1:ea70e82:         LOG.info("Prepared");
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Commit Ack");
1:ea70e82:         resource.commit(tid, false);
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82:         LOG.info("Commit Send");
1:ea70e82:         resourceSend.commit(branchTid, false);
1:ea70e82:         dumpMessages();
1:ea70e82: 
1:ea70e82: 
1:ea70e82:         LOG.info("Try jmx browse... after commit");
1:ea70e82: 
1:ea70e82:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:ea70e82:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertTrue(proxy.browseMessages().isEmpty());
1:ea70e82:         assertEquals("dq ", 1, proxy.getDequeueCount());
1:ea70e82:         assertEquals("size 0", 0, proxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:ea70e82:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:ea70e82:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1:ea70e82: 
1:ea70e82:         assertEquals("enq", 1, moveProxy.getEnqueueCount());
1:ea70e82:         assertEquals("size 1", 1, moveProxy.getQueueSize());
1:ea70e82: 
1:ea70e82:         assertNotNull(regularReceive("TEST_MOVE"));
1:ea70e82: 
1:ea70e82:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1:ea70e82: 
1:ea70e82:     }
1:ea70e82: 
1:ea70e82: 
1:ea70e82:     private Message regularReceive(String qName) throws Exception {
1:ea70e82:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:01384c7:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         return regularReceiveWith(factory, qName);
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     private Message regularReceiveWith(ActiveMQConnectionFactory factory, String qName) throws Exception {
1:ea70e82:         javax.jms.Connection connection = factory.createConnection();
1:ea70e82:         try {
1:ea70e82:             connection.start();
1:ea70e82:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ea70e82:             Destination destination = session.createQueue(qName);
1:ea70e82:             MessageConsumer consumer = session.createConsumer(destination);
1:ea70e82:             return consumer.receive(2000);
1:ea70e82:         } finally {
1:ea70e82:             connection.close();
1:ea70e82:         }
1:ea70e82:     }
1:01384c7: 
1:ea70e82:     private int drainUnack(int limit, String qName) throws Exception {
1:ea70e82:         int drained = 0;
1:ea70e82:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=" + limit);
1:01384c7:         factory.setWatchTopicAdvisories(false);
1:ea70e82:         javax.jms.Connection connection = factory.createConnection();
1:ea70e82:         try {
1:ea70e82:             connection.start();
1:ea70e82:             Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:ea70e82:             Destination destination = session.createQueue(qName);
1:ea70e82:             MessageConsumer consumer = session.createConsumer(destination);
1:ea70e82:             while (drained < limit && consumer.receive(2000) != null) {
1:ea70e82:                 drained++;
1:01384c7:             }
1:01384c7:             ;
1:ea70e82:             consumer.close();
1:ea70e82:         } finally {
1:ea70e82:             connection.close();
1:ea70e82:         }
1:ea70e82:         return drained;
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     private Message regularBrowseFirst() throws Exception {
1:004be56:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:004be56:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1:004be56:         javax.jms.Connection connection = activeMQConnectionFactory.createConnection();
1:ea70e82:         try {
1:ea70e82:             connection.start();
1:ea70e82:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ea70e82:             Queue destination = session.createQueue("TEST");
1:ea70e82:             QueueBrowser browser = session.createBrowser(destination);
1:ea70e82:             Enumeration e = browser.getEnumeration();
1:ea70e82:             if (e.hasMoreElements()) {
1:ea70e82:                 return (Message) e.nextElement();
1:ea70e82:             }
1:ea70e82:             return null;
1:ea70e82:         } finally {
1:ea70e82:             connection.close();
1:ea70e82:         }
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected void sendMessages(int messagesExpected) throws Exception {
1:004be56:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:004be56:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1:004be56:         sendMessagesWith(activeMQConnectionFactory, messagesExpected);
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected void sendMessagesWith(ConnectionFactory factory, int messagesExpected) throws Exception {
1:ea70e82:         javax.jms.Connection connection = factory.createConnection();
1:ea70e82:         connection.start();
1:ea70e82:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ea70e82:         Destination destination = session.createQueue("TEST");
1:ea70e82:         MessageProducer producer = session.createProducer(destination);
1:ea70e82:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:ea70e82: 
1:01384c7:         for (int i = 0; i < messagesExpected; i++) {
1:01384c7:             LOG.debug("Sending message " + (i + 1) + " of " + messagesExpected);
1:01384c7:             producer.send(session.createTextMessage("test message " + (i + 1)));
1:ea70e82:         }
1:ea70e82:         connection.close();
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected void dumpMessages() throws Exception {
1:ea70e82: 
1:ea70e82:         if (persistenceAdapterChoice.compareTo(PersistenceAdapterChoice.JDBC) != 0) {
1:ea70e82:             return;
1:ea70e82:         }
1:ea70e82:         WireFormat wireFormat = new OpenWireFormat();
1:ea70e82:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
1:ea70e82:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG, XID FROM ACTIVEMQ_MSGS");
1:ea70e82:         ResultSet result = statement.executeQuery();
1:ea70e82:         LOG.info("Messages in broker db...");
1:01384c7:         while (result.next()) {
1:ea70e82:             long id = result.getLong(1);
1:01384c7:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message) wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
1:ea70e82:             String xid = result.getString(3);
1:ea70e82:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", XID:" + xid + ", MSG: " + message);
1:ea70e82:         }
1:ea70e82:         statement.close();
1:ea70e82:         conn.close();
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected BrokerService createBroker() throws Exception {
1:ea70e82:         return createBroker(true);
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected BrokerService restartBroker() throws Exception {
1:ea70e82:         broker.stop();
1:ea70e82:         broker.waitUntilStopped();
1:ea70e82:         return createBroker(false);
1:ea70e82:     }
1:ea70e82: 
1:ea70e82:     protected BrokerService createBroker(boolean del) throws Exception {
1:ea70e82: 
1:ea70e82:         BrokerService broker = new BrokerService();
1:ea70e82:         broker.setAdvisorySupport(false);
1:ea70e82:         PolicyMap policyMap = new PolicyMap();
1:ea70e82:         PolicyEntry policyEntry = new PolicyEntry();
1:ea70e82:         policyEntry.setExpireMessagesPeriod(0);
1:ea70e82:         policyMap.setDefaultEntry(policyEntry);
1:ea70e82:         broker.setDestinationPolicy(policyMap);
1:ea70e82: 
1:ea70e82:         broker.setDeleteAllMessagesOnStartup(del);
1:ea70e82: 
1:ea70e82:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:ea70e82:         broker.setPersistent(true);
1:ea70e82:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:01384c7: 
1:01384c7:         // ensure we run through a destination filter
1:01384c7:         final String id = "a";
1:01384c7:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:01384c7:         SimpleAuthorizationMap map = new SimpleAuthorizationMap();
1:01384c7:         DestinationMap destinationMap = new DestinationMap();
1:01384c7:         GroupPrincipal anaGroup = new GroupPrincipal(id);
1:01384c7:         destinationMap.put(new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">")}), anaGroup);
1:01384c7:         map.setWriteACLs(destinationMap);
1:01384c7:         map.setAdminACLs(destinationMap);
1:01384c7:         map.setReadACLs(destinationMap);
1:01384c7:         authorizationPlugin.setMap(map);
1:01384c7:         SimpleAuthenticationPlugin simpleAuthenticationPlugin = new SimpleAuthenticationPlugin();
1:01384c7:         simpleAuthenticationPlugin.setAnonymousAccessAllowed(true);
1:01384c7:         simpleAuthenticationPlugin.setAnonymousGroup(id);
1:01384c7:         simpleAuthenticationPlugin.setAnonymousUser(id);
1:01384c7: 
1:01384c7:         broker.setPlugins(new BrokerPlugin[]{simpleAuthenticationPlugin, authorizationPlugin});
1:ea70e82:         broker.start();
1:ea70e82:         return broker;
1:ea70e82:     }
1:ea70e82: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1:         javax.jms.Connection connection = activeMQConnectionFactory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1:         sendMessagesWith(activeMQConnectionFactory, messagesExpected);
commit:01384c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.filter.AnyDestination;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.security.SimpleAuthorizationMap;
/////////////////////////////////////////////////////////////////////////
1:     @Parameterized.Parameters(name = "store={0}")
1:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB}, {PersistenceAdapterChoice.JDBC}});
1:     @Before
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 10; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 10; i++) {
/////////////////////////////////////////////////////////////////////////
1:         factory.setWatchTopicAdvisories(false);
/////////////////////////////////////////////////////////////////////////
1:         receiveFactory.setWatchTopicAdvisories(false);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < xids.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
/////////////////////////////////////////////////////////////////////////
1:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
/////////////////////////////////////////////////////////////////////////
1:         final byte[] branch2 = Arrays.copyOf(branch, branch.length);
/////////////////////////////////////////////////////////////////////////
1:         factory.setWatchTopicAdvisories(false);
/////////////////////////////////////////////////////////////////////////
1:         factory.setWatchTopicAdvisories(false);
/////////////////////////////////////////////////////////////////////////
1:             }
1:             ;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < messagesExpected; i++) {
1:             LOG.debug("Sending message " + (i + 1) + " of " + messagesExpected);
1:             producer.send(session.createTextMessage("test message " + (i + 1)));
/////////////////////////////////////////////////////////////////////////
1:         while (result.next()) {
1:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message) wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
/////////////////////////////////////////////////////////////////////////
1: 
1:         // ensure we run through a destination filter
1:         final String id = "a";
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:         SimpleAuthorizationMap map = new SimpleAuthorizationMap();
1:         DestinationMap destinationMap = new DestinationMap();
1:         GroupPrincipal anaGroup = new GroupPrincipal(id);
1:         destinationMap.put(new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">")}), anaGroup);
1:         map.setWriteACLs(destinationMap);
1:         map.setAdminACLs(destinationMap);
1:         map.setReadACLs(destinationMap);
1:         authorizationPlugin.setMap(map);
1:         SimpleAuthenticationPlugin simpleAuthenticationPlugin = new SimpleAuthenticationPlugin();
1:         simpleAuthenticationPlugin.setAnonymousAccessAllowed(true);
1:         simpleAuthenticationPlugin.setAnonymousGroup(id);
1:         simpleAuthenticationPlugin.setAnonymousUser(id);
1: 
1:         broker.setPlugins(new BrokerPlugin[]{simpleAuthenticationPlugin, authorizationPlugin});
commit:72613aa
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testMoveInTwoBranchesPreparedAckRecoveryRestartRollback() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(messagesExpected);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1: 
1:         final Xid tid = createXid();
1:         byte[] branch = tid.getBranchQualifier();
0:         final byte[] branch2  = Arrays.copyOf(branch, branch.length);
1:         branch2[0] = '!';
1: 
1:         Xid branchTid = new Xid() {
1:             @Override
1:             public int getFormatId() {
1:                 return tid.getFormatId();
1:             }
1: 
1:             @Override
1:             public byte[] getGlobalTransactionId() {
1:                 return tid.getGlobalTransactionId();
1:             }
1: 
1:             @Override
1:             public byte[] getBranchQualifier() {
1:                 return branch2;
1:             }
1:         };
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         int messagesReceived = 0;
1: 
1:         Message message = null;
1: 
1:         for (int i = 0; i < messagesExpected; i++) {
1: 
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 messagesReceived++;
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1: 
1:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnectionSend.start();
1:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1: 
1:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1: 
1:         XAResource resourceSend = xaSessionSend.getXAResource();
1:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1: 
1:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:         toSend.setTransactionId(new XATransactionId(branchTid));
1:         producer.send(toSend);
1: 
1:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:         resourceSend.prepare(branchTid);
1: 
1:         // ack on TEST is prepared
1:         resource.prepare(tid);
1: 
1:         // send to TEST_MOVE is rolledback
1:         resourceSend.rollback(branchTid);
1: 
1:         consumer.close();
1: 
1:         LOG.info("Prepared");
1:         dumpMessages();
1: 
1:         broker = restartBroker();
1: 
1:         LOG.info("New broker");
1:         dumpMessages();
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("size", 0, proxy.getQueueSize());
1: 
1:         assertNull(regularReceive("TEST_MOVE"));
1: 
1:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("enq", 0, moveProxy.getDequeueCount());
1:         assertEquals("size", 0, moveProxy.getQueueSize());
1: 
1:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1:         factory.setWatchTopicAdvisories(false);
1: 
1:         activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         xaSession = activeMQXAConnection.createXASession();
1: 
1:         resource = xaSession.getXAResource();
1:         resource.rollback(tid);
1: 
1:         assertEquals("size", 1, proxy.getQueueSize());
1:         assertEquals("c size", 1, proxy.cursorSize());
1: 
1:         assertNotNull(regularReceive("TEST"));
1: 
1:         assertEquals("size", 0, proxy.getQueueSize());
1:         assertEquals("c size", 0, proxy.cursorSize());
1:         assertEquals("dq", 1, proxy.getDequeueCount());
1:     }
commit:bd45d93
/////////////////////////////////////////////////////////////////////////
1:         dumpMessages();
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("after close");
1:         dumpMessages();
1: 
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQXAConnection;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.XASession;
1: import javax.management.ObjectName;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.util.Arrays;
1: import java.util.Enumeration;
1: 
1: import static org.apache.activemq.util.TestUtils.createXid;
1: 
1: 
1: @RunWith(value = Parameterized.class)
1: public class XACompletionTest extends TestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(XACompletionTest.class);
1: 
1:     protected ActiveMQXAConnectionFactory factory;
1:     protected static final int messagesExpected = 1;
1:     protected BrokerService broker;
1:     protected String connectionUri;
1: 
1:     @Parameterized.Parameter
1:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1: 
0:     @Parameterized.Parameters(name="store={0}")
1:     public static Iterable<Object[]> getTestParameters() {
0:         return Arrays.asList(new Object[][]{ {TestSupport.PersistenceAdapterChoice.KahaDB},{PersistenceAdapterChoice.JDBC} });
1:     }
1: 
0:         @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:     }
1: 
1:     @After
1:     public void stopAll() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1: 
1:     @Test
1:     public void testStatsAndRedispatchAfterAckPreparedClosed() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + 0);
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(1);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1:         resource.recover(XAResource.TMSTARTRSCAN);
1:         resource.recover(XAResource.TMNOFLAGS);
1: 
1:         Xid tid = createXid();
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         Message message = consumer.receive(2000);
1:         LOG.info("Received : " + message);
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1: 
1:         activeMQXAConnection.close();
1: 
1:         dumpMessages();
1: 
1:         dumpMessages();
1: 
1:         LOG.info("Try jmx browse... after commit");
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("size", 1, proxy.getQueueSize());
1: 
1:         LOG.info("Try receive... after rollback");
1:         message = regularReceive("TEST");
1: 
1:         assertNotNull("message gone", message);
1:     }
1: 
1:     @Test
1:     public void testStatsAndBrowseAfterAckPreparedCommitted() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(messagesExpected);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1:         resource.recover(XAResource.TMSTARTRSCAN);
1:         resource.recover(XAResource.TMNOFLAGS);
1: 
1:         Xid tid = createXid();
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         int messagesReceived = 0;
1: 
1:         for (int i = 0; i < messagesExpected; i++) {
1: 
1:             Message message = null;
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 messagesReceived++;
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.prepare(tid);
1: 
1:         consumer.close();
1: 
1:         dumpMessages();
1: 
1:         resource.commit(tid, false);
1: 
1:         dumpMessages();
1: 
1:         LOG.info("Try jmx browse... after commit");
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertTrue(proxy.browseMessages().isEmpty());
1:         assertEquals("prefetch 0", 0, proxy.getInFlightCount());
1:         assertEquals("size 0", 0, proxy.getQueueSize());
1: 
1:         LOG.info("Try browse... after commit");
1:         Message browsed = regularBrowseFirst();
1: 
1: 
1:         assertNull("message gone", browsed);
1: 
1:         LOG.info("Try receive... after commit");
1:         Message message = regularReceive("TEST");
1: 
1:         assertNull("message gone", message);
1: 
1:     }
1: 
1: 
1:     @Test
1:     public void testStatsAndBrowseAfterAckPreparedRolledback() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0");
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(10);
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1:         resource.recover(XAResource.TMSTARTRSCAN);
1:         resource.recover(XAResource.TMNOFLAGS);
1: 
1:         assertEquals("prefetch 0", 0, proxy.getInFlightCount());
1:         assertEquals("size 0", 10, proxy.getQueueSize());
1:         assertEquals("size 0", 0, proxy.cursorSize());
1: 
1:         Xid tid = createXid();
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         for (int i = 0; i < 5; i++) {
1: 
1:             Message message = null;
1:             try {
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.prepare(tid);
1: 
1:         consumer.close();
1: 
1:         dumpMessages();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return proxy.getInFlightCount() == 0l;
1:             }
1:         });
1:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:         assertEquals("size", 10, proxy.getQueueSize());
1:         assertEquals("cursor size", 0, proxy.cursorSize());
1: 
1:         resource.rollback(tid);
1: 
1:         dumpMessages();
1: 
1:         LOG.info("Try jmx browse... after rollback");
1: 
1:         assertEquals(10, proxy.browseMessages().size());
1: 
1:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:         assertEquals("size", 10, proxy.getQueueSize());
1:         assertEquals("cursor size", 0, proxy.cursorSize());
1: 
1:         LOG.info("Try browse... after");
1:         Message browsed = regularBrowseFirst();
1:         assertNotNull("message gone", browsed);
1: 
1:         LOG.info("Try receive... after");
0:         for (int i=0; i<10; i++) {
1:             Message message = regularReceive("TEST");
1:             assertNotNull("message gone", message);
1:         }
1:     }
1: 
1:     @Test
1:     public void testStatsAndConsumeAfterAckPreparedRolledback() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(10);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1:         resource.recover(XAResource.TMSTARTRSCAN);
1:         resource.recover(XAResource.TMNOFLAGS);
1: 
1:         Xid tid = createXid();
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         int messagesReceived = 0;
1: 
1:         for (int i = 0; i < 5; i++) {
1: 
1:             Message message = null;
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 messagesReceived++;
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.prepare(tid);
1: 
1:         consumer.close();
1: 
1:         assertEquals("drain", 5, drainUnack(5, "TEST"));
1: 
1:         dumpMessages();
1: 
1:         broker = restartBroker();
1: 
1:         assertEquals("redrain", 5, drainUnack(5, "TEST"));
1: 
1: 
1:         LOG.info("Try consume... after restart");
1:         dumpMessages();
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:         assertEquals("size", 5, proxy.getQueueSize());
1:         assertEquals("cursor size 0", 0, proxy.cursorSize());
1: 
1:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:         factory.setWatchTopicAdvisories(false);
1: 
1:         activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         xaSession = activeMQXAConnection.createXASession();
1: 
1:         XAResource xaResource = xaSession.getXAResource();
1: 
1:         Xid[] xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:         xaResource.recover(XAResource.TMNOFLAGS);
1: 
1:         LOG.info("Rollback outcome for ack");
1:         xaResource.rollback(xids[0]);
1: 
1: 
1:         LOG.info("Try receive... after rollback");
0:         for (int i=0;i<10; i++) {
1:             Message message = regularReceive("TEST");
1:             assertNotNull("message gone: " + i, message);
1:         }
1: 
1:         dumpMessages();
1: 
1:         assertNull("none left", regularReceive("TEST"));
1: 
1:         assertEquals("prefetch", 0, proxy.getInFlightCount());
1:         assertEquals("size", 0, proxy.getQueueSize());
1:         assertEquals("cursor size", 0, proxy.cursorSize());
1:         assertEquals("dq", 10, proxy.getDequeueCount());
1: 
1:     }
1: 
1:     @Test
1:     public void testStatsAndConsumeAfterAckPreparedRolledbackOutOfOrderRecovery() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(20);
1: 
1: 
1:         for (int i = 0; i < 10; i++) {
1: 
1:             ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:             activeMQXAConnection.start();
1:             XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:             Destination destination = xaSession.createQueue("TEST");
1:             MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:             XAResource resource = xaSession.getXAResource();
1:             Xid tid = createXid();
1: 
1:             resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:             Message message = null;
1:             try {
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received (" + i + ") : ," + message);
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1: 
1:             resource.end(tid, XAResource.TMSUCCESS);
1:             resource.prepare(tid);
1: 
1:             // no close - b/c messages end up in pagedInPendingDispatch!
1:             // activeMQXAConnection.close();
1:         }
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         XAResource xaResource = xaSession.getXAResource();
1: 
1:         Xid[] xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:         xaResource.recover(XAResource.TMNOFLAGS);
1: 
1: 
1:         xaResource.rollback(xids[0]);
1:         xaResource.rollback(xids[1]);
1: 
1:         activeMQXAConnection.close();
1: 
1: 
1:         LOG.info("RESTART");
1:         broker = restartBroker();
1: 
1:         dumpMessages();
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1: 
1:         // set maxBatchSize=1
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=" + 1);
1:         javax.jms.Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST");
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.close();
1: 
1:         ActiveMQConnectionFactory receiveFactory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1: 
1:         // recover/rollback the second tx
1:         ActiveMQXAConnectionFactory activeMQXAConnectionFactory = new ActiveMQXAConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=0");
1:         activeMQXAConnectionFactory.setWatchTopicAdvisories(false);
1:         activeMQXAConnection = (ActiveMQXAConnection) activeMQXAConnectionFactory.createXAConnection();
1:         activeMQXAConnection.start();
1:         xaSession = activeMQXAConnection.createXASession();
1:         xaResource = xaSession.getXAResource();
1:         xids = xaResource.recover(XAResource.TMSTARTRSCAN);
1:         xaResource.recover(XAResource.TMNOFLAGS);
1: 
0:         for (int i=0; i< xids.length; i++) {
1:             xaResource.rollback(xids[i]);
1:         }
1: 
1:         // another prefetch demand of 1
1:         MessageConsumer consumer2 = session.createConsumer(new ActiveMQQueue("TEST?consumer.prefetchSize=2"));
1: 
1:         LOG.info("Try receive... after rollback");
1:         Message message = regularReceiveWith(receiveFactory, "TEST");
1:         assertNotNull("message 1: ", message);
1:         LOG.info("Received : " + message);
1: 
1:         dumpMessages();
1: 
1:         message = regularReceiveWith(receiveFactory, "TEST");
1:         assertNotNull("last message", message);
1:         LOG.info("Received : " + message);
1: 
1:     }
1: 
1:     @Test
1:     public void testMoveInTwoBranches() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(messagesExpected);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1: 
1:         final Xid tid = createXid();
1:         byte[] branch = tid.getBranchQualifier();
0:         final byte[] branch2  = Arrays.copyOf(branch, branch.length);
1:         branch2[0] = '!';
1: 
1:         Xid branchTid = new Xid() {
1:             @Override
1:             public int getFormatId() {
1:                 return tid.getFormatId();
1:             }
1: 
1:             @Override
1:             public byte[] getGlobalTransactionId() {
1:                 return tid.getGlobalTransactionId();
1:             }
1: 
1:             @Override
1:             public byte[] getBranchQualifier() {
1:                 return branch2;
1:             }
1:         };
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         int messagesReceived = 0;
1: 
1:         Message message = null;
1: 
1:         for (int i = 0; i < messagesExpected; i++) {
1: 
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 messagesReceived++;
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1: 
1:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnectionSend.start();
1:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1: 
1:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1: 
1:         XAResource resourceSend = xaSessionSend.getXAResource();
1:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1: 
1:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:         toSend.setTransactionId(new XATransactionId(branchTid));
1:         producer.send(toSend);
1: 
1:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:         resourceSend.prepare(branchTid);
1: 
1:         resource.prepare(tid);
1: 
1:         consumer.close();
1: 
1:         LOG.info("Prepared");
1:         dumpMessages();
1: 
1:         LOG.info("Commit Ack");
1:         resource.commit(tid, false);
1:         dumpMessages();
1: 
1:         LOG.info("Commit Send");
1:         resourceSend.commit(branchTid, false);
1:         dumpMessages();
1: 
1: 
1:         LOG.info("Try jmx browse... after commit");
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertTrue(proxy.browseMessages().isEmpty());
1:         assertEquals("dq ", 1, proxy.getDequeueCount());
1:         assertEquals("size 0", 0, proxy.getQueueSize());
1: 
1:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("enq", 1, moveProxy.getEnqueueCount());
1:         assertEquals("size 1", 1, moveProxy.getQueueSize());
1: 
1:         assertNotNull(regularReceive("TEST_MOVE"));
1: 
1:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1: 
1:     }
1: 
1: 
1: 
1:     @Test
1:     public void testMoveInTwoBranchesTwoBrokers() throws Exception {
1: 
1:         factory = new ActiveMQXAConnectionFactory(
1:                 connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=" + messagesExpected);
1: 
1:         factory.setWatchTopicAdvisories(false);
1:         sendMessages(messagesExpected);
1: 
1:         ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnection.start();
1:         XASession xaSession = activeMQXAConnection.createXASession();
1: 
1:         Destination destination = xaSession.createQueue("TEST");
1:         MessageConsumer consumer = xaSession.createConsumer(destination);
1: 
1:         XAResource resource = xaSession.getXAResource();
1: 
1:         final Xid tid = createXid();
1:         byte[] branch = tid.getBranchQualifier();
0:         final byte[] branch2  = Arrays.copyOf(branch, branch.length);
1:         branch2[0] = '!';
1: 
1:         Xid branchTid = new Xid() {
1:             @Override
1:             public int getFormatId() {
1:                 return tid.getFormatId();
1:             }
1: 
1:             @Override
1:             public byte[] getGlobalTransactionId() {
1:                 return tid.getGlobalTransactionId();
1:             }
1: 
1:             @Override
1:             public byte[] getBranchQualifier() {
1:                 return branch2;
1:             }
1:         };
1: 
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         int messagesReceived = 0;
1: 
1:         Message message = null;
1: 
1:         for (int i = 0; i < messagesExpected; i++) {
1: 
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived + 1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 messagesReceived++;
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception:", e);
1:             }
1:         }
1: 
1:         resource.end(tid, XAResource.TMSUCCESS);
1: 
1:         ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();
1:         activeMQXAConnectionSend.start();
1:         XASession xaSessionSend = activeMQXAConnection.createXASession();
1: 
1:         Destination destinationSend = xaSessionSend.createQueue("TEST_MOVE");
1:         MessageProducer producer = xaSessionSend.createProducer(destinationSend);
1: 
1:         XAResource resourceSend = xaSessionSend.getXAResource();
1:         resourceSend.start(branchTid, XAResource.TMNOFLAGS);
1: 
1:         ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();
1:         toSend.setTransactionId(new XATransactionId(branchTid));
1:         producer.send(toSend);
1: 
1:         resourceSend.end(branchTid, XAResource.TMSUCCESS);
1:         resourceSend.prepare(branchTid);
1: 
1:         resource.prepare(tid);
1: 
1:         consumer.close();
1: 
1:         LOG.info("Prepared");
1:         dumpMessages();
1: 
1:         LOG.info("Commit Ack");
1:         resource.commit(tid, false);
1:         dumpMessages();
1: 
1:         LOG.info("Commit Send");
1:         resourceSend.commit(branchTid, false);
1:         dumpMessages();
1: 
1: 
1:         LOG.info("Try jmx browse... after commit");
1: 
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertTrue(proxy.browseMessages().isEmpty());
1:         assertEquals("dq ", 1, proxy.getDequeueCount());
1:         assertEquals("size 0", 0, proxy.getQueueSize());
1: 
1:         ObjectName queueMoveViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE");
1:         QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("enq", 1, moveProxy.getEnqueueCount());
1:         assertEquals("size 1", 1, moveProxy.getQueueSize());
1: 
1:         assertNotNull(regularReceive("TEST_MOVE"));
1: 
1:         assertEquals("size 0", 0, moveProxy.getQueueSize());
1: 
1:     }
1: 
1: 
1:     private Message regularReceive(String qName) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         return regularReceiveWith(factory, qName);
1:     }
1: 
1:     private Message regularReceiveWith(ActiveMQConnectionFactory factory, String qName) throws Exception {
1:         javax.jms.Connection connection = factory.createConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(qName);
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             return consumer.receive(2000);
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private int drainUnack(int limit, String qName) throws Exception {
1:         int drained = 0;
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?jms.prefetchPolicy.all=" + limit);
1:         javax.jms.Connection connection = factory.createConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(qName);
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             while (drained < limit && consumer.receive(2000) != null) {
1:                 drained++;
1:             };
1:             consumer.close();
1:         } finally {
1:             connection.close();
1:         }
1:         return drained;
1:     }
1: 
1:     private Message regularBrowseFirst() throws Exception {
1:         javax.jms.Connection connection = factory.createConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue destination = session.createQueue("TEST");
1:             QueueBrowser browser = session.createBrowser(destination);
1:             Enumeration e = browser.getEnumeration();
1:             if (e.hasMoreElements()) {
1:                 return (Message) e.nextElement();
1:             }
1:             return null;
1:         } finally {
1:             connection.close();
1:         }
1:     }
1:     protected void sendMessages(int messagesExpected) throws Exception {
0:         sendMessagesWith(factory, messagesExpected);
1:     }
1: 
1:     protected void sendMessagesWith(ConnectionFactory factory, int messagesExpected) throws Exception {
1:         javax.jms.Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
0:         for (int i=0; i<messagesExpected; i++) {
0:             LOG.debug("Sending message " + (i+1) + " of " + messagesExpected);
0:             producer.send(session.createTextMessage("test message " + (i+1)));
1:         }
1:         connection.close();
1:     }
1: 
1:     protected void dumpMessages() throws Exception {
1: 
1:         if (persistenceAdapterChoice.compareTo(PersistenceAdapterChoice.JDBC) != 0) {
1:             return;
1:         }
1:         WireFormat wireFormat = new OpenWireFormat();
1:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
1:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG, XID FROM ACTIVEMQ_MSGS");
1:         ResultSet result = statement.executeQuery();
1:         LOG.info("Messages in broker db...");
0:         while(result.next()) {
1:             long id = result.getLong(1);
0:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
1:             String xid = result.getString(3);
1:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", XID:" + xid + ", MSG: " + message);
1:         }
1:         statement.close();
1:         conn.close();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker(true);
1:     }
1: 
1:     protected BrokerService restartBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         return createBroker(false);
1:     }
1: 
1:     protected BrokerService createBroker(boolean del) throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setAdvisorySupport(false);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(0);
1:         policyMap.setDefaultEntry(policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.setDeleteAllMessagesOnStartup(del);
1: 
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:         broker.setPersistent(true);
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         broker.start();
1:         return broker;
1:     }
1: }
============================================================================