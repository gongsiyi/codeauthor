1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:3c3feb4: package org.apache.activemq.transport.discovery.zeroconf;
1:f812e34: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.InetAddress;
1:d29ca2a: import java.net.UnknownHostException;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.Map;
1:74a7a8b: import java.util.concurrent.CopyOnWriteArrayList;
1:53b1282: 
1:d29ca2a: import javax.jmdns.JmDNS;
1:d29ca2a: import javax.jmdns.ServiceEvent;
1:d29ca2a: import javax.jmdns.ServiceInfo;
1:d29ca2a: import javax.jmdns.ServiceListener;
14:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.DiscoveryEvent;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryListener;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.MapHelper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:53b1282:  * A {@link DiscoveryAgent} using <a
1:53b1282:  * href="http://www.zeroconf.org/">Zeroconf</a> via the <a
1:53b1282:  * href="http://jmdns.sf.net/">jmDNS</a> library
1:d29ca2a:  */
1:3c3feb4: public class ZeroconfDiscoveryAgent implements DiscoveryAgent, ServiceListener {
1:3c3feb4:     private static final Logger LOG = LoggerFactory.getLogger(ZeroconfDiscoveryAgent.class);
1:d29ca2a: 
1:9a32e38:     private static final String TYPE_SUFFIX = "ActiveMQ-5.";
1:d29ca2a: 
1:d29ca2a:     private JmDNS jmdns;
1:d29ca2a:     private InetAddress localAddress;
1:d29ca2a:     private String localhost;
1:933eb2f:     private int weight;
1:933eb2f:     private int priority;
1:53b1282:     private String typeSuffix = TYPE_SUFFIX;
1:d29ca2a: 
1:d29ca2a:     private DiscoveryListener listener;
1:d29ca2a:     private String group = "default";
1:53b1282:     private final CopyOnWriteArrayList<ServiceInfo> serviceInfos =
1:53b1282:         new CopyOnWriteArrayList<ServiceInfo>();
1:d29ca2a: 
1:d29ca2a:     // DiscoveryAgent interface
1:f812e34:     // -------------------------------------------------------------------------
1:53b1282:     @Override
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         if (group == null) {
1:d29ca2a:             throw new IOException("You must specify a group to discover");
7:d29ca2a:         }
1:d29ca2a:         String type = getType();
1:d29ca2a:         if (!type.endsWith(".")) {
1:53b1282:             LOG.warn("The type '{}' should end with '.' to be a valid Rendezvous type", type);
1:d29ca2a:             type += ".";
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             // force lazy construction
1:d29ca2a:             getJmdns();
1:f812e34:             if (listener != null) {
1:53b1282:                 LOG.info("Discovering service of type: {}", type);
1:d29ca2a:                 jmdns.addServiceListener(type, this);
1:d29ca2a:             }
1:f812e34:         } catch (IOException e) {
1:d29ca2a:             JMSExceptionSupport.create("Failed to start JmDNS service: " + e, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:53b1282:     @Override
1:d29ca2a:     public void stop() {
1:f812e34:         if (jmdns != null) {
1:933eb2f:             for (Iterator<ServiceInfo> iter = serviceInfos.iterator(); iter.hasNext();) {
1:933eb2f:                 ServiceInfo si = iter.next();
1:d29ca2a:                 jmdns.unregisterService(si);
1:d29ca2a:             }
1:f812e34: 
1:d29ca2a:             // Close it down async since this could block for a while.
1:d29ca2a:             final JmDNS closeTarget = jmdns;
1:d29ca2a:             Thread thread = new Thread() {
1:53b1282:                 @Override
1:d29ca2a:                 public void run() {
1:9a32e38:                     try {
1:13270e4:                         if (JmDNSFactory.onClose(getLocalAddress())) {
1:d29ca2a:                             closeTarget.close();
1:d29ca2a:                         };
1:9a32e38:                     } catch (IOException e) {
1:53b1282:                         LOG.debug("Error closing JmDNS {}. This exception will be ignored.", getLocalhost(), e);
1:d29ca2a:                     }
1:d29ca2a:                 }
1:13270e4:             };
1:f812e34: 
1:d29ca2a:             thread.setDaemon(true);
1:d29ca2a:             thread.start();
1:f812e34: 
1:f812e34:             jmdns = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:53b1282:     @Override
1:d29ca2a:     public void registerService(String name) throws IOException {
1:53b1282:         ServiceInfo si = createServiceInfo(name, new HashMap<String, Object>());
1:d29ca2a:         serviceInfos.add(si);
1:d29ca2a:         getJmdns().registerService(si);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // ServiceListener interface
1:f812e34:     // -------------------------------------------------------------------------
1:d29ca2a:     public void addService(JmDNS jmDNS, String type, String name) {
1:53b1282:         LOG.debug("addService with type: {} name: {}", type, name);
1:fc00993:         if (listener != null) {
1:d29ca2a:             listener.onServiceAdd(new DiscoveryEvent(name));
1:fc00993:         }
1:d29ca2a:         jmDNS.requestServiceInfo(type, name);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void removeService(JmDNS jmDNS, String type, String name) {
1:53b1282:         LOG.debug("removeService with type: {} name: {}", type, name);
1:fc00993:         if (listener != null) {
1:d29ca2a:             listener.onServiceRemove(new DiscoveryEvent(name));
1:fc00993:         }
1:d29ca2a:     }
1:d29ca2a: 
1:53b1282:     @Override
1:f812e34:     public void serviceAdded(ServiceEvent event) {
1:f812e34:         addService(event.getDNS(), event.getType(), event.getName());
1:f812e34:     }
1:f812e34: 
1:53b1282:     @Override
1:f812e34:     public void serviceRemoved(ServiceEvent event) {
1:f812e34:         removeService(event.getDNS(), event.getType(), event.getName());
1:f812e34:     }
1:f812e34: 
1:53b1282:     @Override
1:d29ca2a:     public void serviceResolved(ServiceEvent event) {
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void resolveService(JmDNS jmDNS, String type, String name, ServiceInfo serviceInfo) {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getPriority() {
1:d29ca2a:         return priority;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setPriority(int priority) {
1:d29ca2a:         this.priority = priority;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getWeight() {
1:d29ca2a:         return weight;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setWeight(int weight) {
1:d29ca2a:         this.weight = weight;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public JmDNS getJmdns() throws IOException {
1:d29ca2a:         if (jmdns == null) {
1:d29ca2a:             jmdns = createJmDNS();
1:d29ca2a:         }
1:d29ca2a:         return jmdns;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setJmdns(JmDNS jmdns) {
1:d29ca2a:         this.jmdns = jmdns;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public InetAddress getLocalAddress() throws UnknownHostException {
1:d29ca2a:         if (localAddress == null) {
1:d29ca2a:             localAddress = createLocalAddress();
1:d29ca2a:         }
1:d29ca2a:         return localAddress;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setLocalAddress(InetAddress localAddress) {
1:d29ca2a:         this.localAddress = localAddress;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getLocalhost() {
1:d29ca2a:         return localhost;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setLocalhost(String localhost) {
1:d29ca2a:         this.localhost = localhost;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:f812e34:     // -------------------------------------------------------------------------
1:d29ca2a:     protected ServiceInfo createServiceInfo(String name, Map map) {
1:d29ca2a:         int port = MapHelper.getInt(map, "port", 0);
1:d29ca2a:         String type = getType();
1:53b1282:         LOG.debug("Registering service type: {} name: {} details: {}", new Object[]{type, name, map});
1:9a32e38:         return ServiceInfo.create(type, name + "." + type, port, weight, priority, "");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected JmDNS createJmDNS() throws IOException {
1:d29ca2a:         return JmDNSFactory.create(getLocalAddress());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected InetAddress createLocalAddress() throws UnknownHostException {
1:d29ca2a:         if (localhost != null) {
1:d29ca2a:             return InetAddress.getByName(localhost);
1:d29ca2a:         }
1:d29ca2a:         return InetAddress.getLocalHost();
1:d29ca2a:     }
1:d29ca2a: 
1:53b1282:     @Override
1:d29ca2a:     public void setDiscoveryListener(DiscoveryListener listener) {
1:d29ca2a:         this.listener = listener;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getGroup() {
1:d29ca2a:         return group;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setGroup(String group) {
1:f812e34:         this.group = group;
1:d29ca2a:     }
1:d29ca2a: 
1:53b1282:     public void setType(String typeSuffix) {
1:53b1282:         this.typeSuffix = typeSuffix;
1:d29ca2a:     }
1:d29ca2a: 
1:53b1282:     public String getType() {
1:53b1282:         if (typeSuffix == null || typeSuffix.isEmpty()) {
1:53b1282:             typeSuffix = TYPE_SUFFIX;
1:53b1282:         }
1:53b1282: 
1:53b1282:         return "_" + group + "." + typeSuffix;
1:53b1282:     }
1:53b1282: 
1:53b1282:     @Override
1:d29ca2a:     public void serviceFailed(DiscoveryEvent event) throws IOException {
1:d29ca2a:         // TODO: is there a way to notify the JmDNS that the service failed?
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:53b1282
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * A {@link DiscoveryAgent} using <a
1:  * href="http://www.zeroconf.org/">Zeroconf</a> via the <a
1:  * href="http://jmdns.sf.net/">jmDNS</a> library
/////////////////////////////////////////////////////////////////////////
1:     private String typeSuffix = TYPE_SUFFIX;
1:     private final CopyOnWriteArrayList<ServiceInfo> serviceInfos =
1:         new CopyOnWriteArrayList<ServiceInfo>();
1:     @Override
1:             LOG.warn("The type '{}' should end with '.' to be a valid Rendezvous type", type);
1:                 LOG.info("Discovering service of type: {}", type);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1:                         LOG.debug("Error closing JmDNS {}. This exception will be ignored.", getLocalhost(), e);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         ServiceInfo si = createServiceInfo(name, new HashMap<String, Object>());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("addService with type: {} name: {}", type, name);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("removeService with type: {} name: {}", type, name);
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Registering service type: {} name: {} details: {}", new Object[]{type, name, map});
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     public void setType(String typeSuffix) {
1:         this.typeSuffix = typeSuffix;
1:     public String getType() {
1:         if (typeSuffix == null || typeSuffix.isEmpty()) {
1:             typeSuffix = TYPE_SUFFIX;
1:         }
1: 
1:         return "_" + group + "." + typeSuffix;
1:     }
1: 
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:af27811
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.jmdns.JmDNS;
0: import org.apache.activemq.jmdns.ServiceEvent;
0: import org.apache.activemq.jmdns.ServiceInfo;
0: import org.apache.activemq.jmdns.ServiceListener;
commit:43b808d
/////////////////////////////////////////////////////////////////////////
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private int weight;
1:     private int priority;
0:     private final CopyOnWriteArrayList<ServiceInfo> serviceInfos = new CopyOnWriteArrayList<ServiceInfo>();
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator<ServiceInfo> iter = serviceInfos.iterator(); iter.hasNext();) {
1:                 ServiceInfo si = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(RendezvousDiscoveryAgent.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("The type '" + type + "' should end with '.' to be a valid Rendezvous type");
0:                 LOG.info("Discovering service of type: " + type);
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("addService with type: " + type + " name: " + name);
1:         if (listener != null) {
1:         }
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("removeService with type: " + type + " name: " + name);
1:         if (listener != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("Registering service type: " + type + " name: " + name + " details: " + map);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:             if (listener != null) {
0:                 log.info("Discovering service of type: " + type);
1:         } catch (IOException e) {
1:         if (jmdns != null) {
0:                 ServiceInfo si = (ServiceInfo)iter.next();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             jmdns = null;
1: 
1:     // -------------------------------------------------------------------------
0:         if (listener != null)
/////////////////////////////////////////////////////////////////////////
0:         if (listener != null)
1:     public void serviceAdded(ServiceEvent event) {
1:         addService(event.getDNS(), event.getType(), event.getName());
1:     }
1: 
1:     public void serviceRemoved(ServiceEvent event) {
1:         removeService(event.getDNS(), event.getType(), event.getName());
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
0:         return new ServiceInfo(type, name + "." + type, port, weight, priority, "");
/////////////////////////////////////////////////////////////////////////
1:         this.group = group;
0:         return "_" + group + "." + TYPE_SUFFIX;
/////////////////////////////////////////////////////////////////////////
0:     public void setBrokerName(String brokerName) {
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.discovery.rendezvous;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import javax.jmdns.JmDNS;
1: import javax.jmdns.ServiceEvent;
1: import javax.jmdns.ServiceInfo;
1: import javax.jmdns.ServiceListener;
1: 
1: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1: import org.apache.activemq.transport.discovery.DiscoveryListener;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: import org.apache.activemq.util.MapHelper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
1: /**
0:  * A {@link DiscoveryAgent} using <a href="http://www.zeroconf.org/">Zeroconf</a>
0:  * via the <a href="http://jmdns.sf.net/">jmDNS</a> library
0:  *
0:  * @version $Revision$
1:  */
0: public class RendezvousDiscoveryAgent implements DiscoveryAgent, ServiceListener {
0:     private static final Log log = LogFactory.getLog(RendezvousDiscoveryAgent.class);
1: 
0:     private static final String TYPE_SUFFIX = "ActiveMQ-4.";
1: 
1:     private JmDNS jmdns;
1:     private InetAddress localAddress;
1:     private String localhost;
0:     private int weight = 0;
0:     private int priority = 0;
1: 
1:     private DiscoveryListener listener;
1:     private String group = "default";
0:     private final CopyOnWriteArrayList serviceInfos = new CopyOnWriteArrayList();
1: 
0:     private String brokerName;
1: 
1:     // DiscoveryAgent interface
0:     //-------------------------------------------------------------------------
1:     public void start() throws Exception {
1:         if (group == null) {
1:             throw new IOException("You must specify a group to discover");
1:         }
1:         String type = getType();
1:         if (!type.endsWith(".")) {
0:             log.warn("The type '" + type + "' should end with '.' to be a valid Rendezvous type");
1:             type += ".";
1:         }
1:         try {
1:             // force lazy construction
1:             getJmdns();
0:             if (listener!=null) {
0:                 log.info("Discovering service of type: " +type);
1:                 jmdns.addServiceListener(type, this);
1:             }
1:         }
0:         catch (IOException e) {
1:             JMSExceptionSupport.create("Failed to start JmDNS service: " + e, e);
1:         }
1:     }
1: 
1:     public void stop() {
0:         if( jmdns!=null ) {
0:             for (Iterator iter = serviceInfos.iterator(); iter.hasNext();) {
0:                 ServiceInfo si = (ServiceInfo) iter.next();
1:                 jmdns.unregisterService(si);
1:             }
1:             
1:             // Close it down async since this could block for a while.
1:             final JmDNS closeTarget = jmdns;
1:             Thread thread = new Thread() {
1:                 public void run() {
1:                     closeTarget.close();
1:                 }
1:             };
1:             
1:             thread.setDaemon(true);
1:             thread.start();
1:             
0:             jmdns=null;
1:         }
1:     }
1:     
1:     public void registerService(String name) throws IOException {
0:         ServiceInfo si = createServiceInfo(name, new HashMap());
1:         serviceInfos.add(si);
1:         getJmdns().registerService(si);
1:     }
1: 
1: 
1:     // ServiceListener interface
0:     //-------------------------------------------------------------------------
1:     public void addService(JmDNS jmDNS, String type, String name) {
0:         if (log.isDebugEnabled()) {
0:             log.debug("addService with type: " + type + " name: " + name);
1:         }
0:         if( listener!=null ) 
1:             listener.onServiceAdd(new DiscoveryEvent(name));
1:         jmDNS.requestServiceInfo(type, name);
1:     }
1: 
1:     public void removeService(JmDNS jmDNS, String type, String name) {
0:         if (log.isDebugEnabled()) {
0:             log.debug("removeService with type: " + type + " name: " + name);
1:         }
0:         if( listener!=null )
1:             listener.onServiceRemove(new DiscoveryEvent(name));
1:     }
1: 
0: 	public void serviceAdded(ServiceEvent event) {
0: 		addService(event.getDNS(), event.getType(), event.getName());
1: 	}
0: 	public void serviceRemoved(ServiceEvent event) {
0: 		removeService(event.getDNS(), event.getType(), event.getName());
1: 	}
1:     public void serviceResolved(ServiceEvent event) {
1:     }
1:     public void resolveService(JmDNS jmDNS, String type, String name, ServiceInfo serviceInfo) {
1:     }
1: 
1:     public int getPriority() {
1:         return priority;
1:     }
1: 
1:     public void setPriority(int priority) {
1:         this.priority = priority;
1:     }
1: 
1:     public int getWeight() {
1:         return weight;
1:     }
1: 
1:     public void setWeight(int weight) {
1:         this.weight = weight;
1:     }
1: 
1:     public JmDNS getJmdns() throws IOException {
1:         if (jmdns == null) {
1:             jmdns = createJmDNS();
1:         }
1:         return jmdns;
1:     }
1: 
1:     public void setJmdns(JmDNS jmdns) {
1:         this.jmdns = jmdns;
1:     }
1: 
1: 
1:     public InetAddress getLocalAddress() throws UnknownHostException {
1:         if (localAddress == null) {
1:             localAddress = createLocalAddress();
1:         }
1:         return localAddress;
1:     }
1: 
1:     public void setLocalAddress(InetAddress localAddress) {
1:         this.localAddress = localAddress;
1:     }
1: 
1:     public String getLocalhost() {
1:         return localhost;
1:     }
1: 
1:     public void setLocalhost(String localhost) {
1:         this.localhost = localhost;
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1:     protected ServiceInfo createServiceInfo(String name, Map map) {
1:         int port = MapHelper.getInt(map, "port", 0);
1: 
1:         String type = getType();
1: 
0:         if (log.isDebugEnabled()) {
0:             log.debug("Registering service type: " + type + " name: " + name + " details: " + map);
1:         }
0:         return new ServiceInfo(type, name+"."+type, port, weight, priority, "");
1:     }
1: 
1:     protected JmDNS createJmDNS() throws IOException {
1:         return JmDNSFactory.create(getLocalAddress());
1:     }
1: 
1:     protected InetAddress createLocalAddress() throws UnknownHostException {
1:         if (localhost != null) {
1:             return InetAddress.getByName(localhost);
1:         }
1:         return InetAddress.getLocalHost();
1:     }
1: 
1:     public void setDiscoveryListener(DiscoveryListener listener) {
1:         this.listener = listener;
1:     }
1: 
1:     public String getGroup() {
1:         return group;
1:     }
1: 
1:     public void setGroup(String group) {
0:         this.group=group;
1:     }
1: 
0:     public String getType() {
0:         return group+"."+TYPE_SUFFIX;
1:     }
1: 
0:     public void setBrokerName(String brokerName) {
0:         this.brokerName = brokerName;        
1:     }
1: 
1:     public void serviceFailed(DiscoveryEvent event) throws IOException {
1:         // TODO: is there a way to notify the JmDNS that the service failed?
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:13270e4
/////////////////////////////////////////////////////////////////////////
1:                         if (JmDNSFactory.onClose(getLocalAddress())) {
0:                             closeTarget.close();
1:                         };
commit:3c3feb4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.discovery.zeroconf;
/////////////////////////////////////////////////////////////////////////
1: public class ZeroconfDiscoveryAgent implements DiscoveryAgent, ServiceListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(ZeroconfDiscoveryAgent.class);
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:9a32e38
/////////////////////////////////////////////////////////////////////////
0: import javax.jmdns.JmDNS;
0: import javax.jmdns.ServiceEvent;
0: import javax.jmdns.ServiceInfo;
0: import javax.jmdns.ServiceListener;
/////////////////////////////////////////////////////////////////////////
1:     private static final String TYPE_SUFFIX = "ActiveMQ-5.";
/////////////////////////////////////////////////////////////////////////
1:                     try {
0:                         JmDNSFactory.onClose(getLocalAddress(), closeTarget);
1:                     } catch (IOException e) {
0:                         LOG.debug("Error closing JmDNS " + getLocalhost() + ". This exception will be ignored.", e);
0:                     }
/////////////////////////////////////////////////////////////////////////
1:         return ServiceInfo.create(type, name + "." + type, port, weight, priority, "");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(RendezvousDiscoveryAgent.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @param brokerName
0:      * @see org.apache.activemq.transport.discovery.DiscoveryAgent#setBrokerName(java.lang.String)
0:      */
0:     public void setBrokerName(String brokerName){
0:         // implementation of interface
0:         
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:9d50686
/////////////////////////////////////////////////////////////////////////
0:         return "_" + group+"."+TYPE_SUFFIX;
============================================================================