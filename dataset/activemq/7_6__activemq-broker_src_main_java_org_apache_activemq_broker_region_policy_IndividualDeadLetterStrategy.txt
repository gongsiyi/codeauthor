1:88203ae: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:88203ae:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:88203ae: package org.apache.activemq.broker.region.policy;
2:88203ae: 
1:9a8f6e4: import org.apache.activemq.broker.region.Destination;
1:27c1719: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:27c1719: import org.apache.activemq.broker.region.Subscription;
1:88203ae: import org.apache.activemq.command.ActiveMQDestination;
1:88203ae: import org.apache.activemq.command.ActiveMQQueue;
1:88203ae: import org.apache.activemq.command.ActiveMQTopic;
1:27c1719: import org.apache.activemq.command.Message;
1:88203ae: 
1:88203ae: /**
1:88203ae:  * A {@link DeadLetterStrategy} where each destination has its own individual
1:88203ae:  * DLQ using the subject naming hierarchy.
1:5be5a62:  *
1:68d245f:  * @org.apache.xbean.XBean
1:0bbc0ac:  *
1:88203ae:  */
1:a414c20: public class IndividualDeadLetterStrategy extends AbstractDeadLetterStrategy {
1:88203ae: 
1:88203ae:     private String topicPrefix = "ActiveMQ.DLQ.Topic.";
1:88203ae:     private String queuePrefix = "ActiveMQ.DLQ.Queue.";
1:620d26d:     private String topicSuffix;
1:620d26d:     private String queueSuffix;
1:88203ae:     private boolean useQueueForQueueMessages = true;
1:88203ae:     private boolean useQueueForTopicMessages = true;
1:27c1719:     private boolean destinationPerDurableSubscriber;
1:88203ae: 
1:6579d9e:     public ActiveMQDestination getDeadLetterQueueFor(Message message, Subscription subscription) {
1:27c1719:         if (message.getDestination().isQueue()) {
1:620d26d:             return createDestination(message, queuePrefix, queueSuffix, useQueueForQueueMessages, subscription);
1:74a7a8b:         } else {
1:620d26d:             return createDestination(message, topicPrefix, topicSuffix, useQueueForTopicMessages, subscription);
8:88203ae:         }
1:e1f170d:     }
1:e1f170d: 
1:88203ae:     // Properties
1:88203ae:     // -------------------------------------------------------------------------
1:88203ae: 
1:88203ae:     public String getQueuePrefix() {
1:88203ae:         return queuePrefix;
1:e1f170d:     }
1:88203ae: 
1:88203ae:     /**
1:88203ae:      * Sets the prefix to use for all dead letter queues for queue messages
1:88203ae:      */
1:88203ae:     public void setQueuePrefix(String queuePrefix) {
1:88203ae:         this.queuePrefix = queuePrefix;
1:88203ae:     }
1:88203ae: 
1:88203ae:     public String getTopicPrefix() {
1:88203ae:         return topicPrefix;
1:88203ae:     }
1:88203ae: 
1:88203ae:     /**
1:88203ae:      * Sets the prefix to use for all dead letter queues for topic messages
1:88203ae:      */
1:88203ae:     public void setTopicPrefix(String topicPrefix) {
1:88203ae:         this.topicPrefix = topicPrefix;
1:88203ae:     }
1:88203ae: 
1:620d26d:     public String getQueueSuffix() {
1:620d26d:         return queueSuffix;
1:620d26d:     }
1:620d26d: 
1:620d26d:     /**
1:620d26d:      * Sets the suffix to use for all dead letter queues for queue messages
1:620d26d:      */
1:620d26d:     public void setQueueSuffix(String queueSuffix) {
1:620d26d:         this.queueSuffix = queueSuffix;
1:620d26d:     }
1:620d26d: 
1:620d26d:     public String getTopicSuffix() {
1:620d26d:         return topicSuffix;
1:620d26d:     }
1:620d26d: 
1:620d26d:     /**
1:620d26d:      * Sets the suffix to use for all dead letter queues for topic messages
1:620d26d:      */
1:620d26d:     public void setTopicSuffix(String topicSuffix) {
1:620d26d:         this.topicSuffix = topicSuffix;
1:620d26d:     }
1:620d26d: 
1:88203ae:     public boolean isUseQueueForQueueMessages() {
1:88203ae:         return useQueueForQueueMessages;
1:88203ae:     }
1:88203ae: 
1:88203ae:     /**
1:88203ae:      * Sets whether a queue or topic should be used for queue messages sent to a
1:88203ae:      * DLQ. The default is to use a Queue
1:88203ae:      */
1:88203ae:     public void setUseQueueForQueueMessages(boolean useQueueForQueueMessages) {
1:88203ae:         this.useQueueForQueueMessages = useQueueForQueueMessages;
1:88203ae:     }
1:88203ae: 
1:88203ae:     public boolean isUseQueueForTopicMessages() {
1:88203ae:         return useQueueForTopicMessages;
1:88203ae:     }
1:88203ae: 
1:88203ae:     /**
1:88203ae:      * Sets whether a queue or topic should be used for topic messages sent to a
1:88203ae:      * DLQ. The default is to use a Queue
1:88203ae:      */
1:88203ae:     public void setUseQueueForTopicMessages(boolean useQueueForTopicMessages) {
1:88203ae:         this.useQueueForTopicMessages = useQueueForTopicMessages;
1:88203ae:     }
1:88203ae: 
1:27c1719:     public boolean isDestinationPerDurableSubscriber() {
1:27c1719:         return destinationPerDurableSubscriber;
1:27c1719:     }
1:27c1719: 
1:27c1719:     /**
1:27c1719:      * sets whether durable topic subscriptions are to get individual dead letter destinations.
1:27c1719:      * When true, the DLQ is of the form 'topicPrefix.clientId:subscriptionName'
1:27c1719:      * The default is false.
1:27c1719:      * @param destinationPerDurableSubscriber
1:27c1719:      */
1:27c1719:     public void setDestinationPerDurableSubscriber(boolean destinationPerDurableSubscriber) {
1:27c1719:         this.destinationPerDurableSubscriber = destinationPerDurableSubscriber;
1:27c1719:     }
1:27c1719: 
1:88203ae:     // Implementation methods
1:88203ae:     // -------------------------------------------------------------------------
1:27c1719:     protected ActiveMQDestination createDestination(Message message,
1:27c1719:                                                     String prefix,
1:620d26d:                                                     String suffix,
1:27c1719:                                                     boolean useQueue,
1:27c1719:                                                     Subscription subscription ) {
1:6579d9e:         String name = null;
1:6579d9e: 
1:9a8f6e4:         Destination regionDestination = (Destination) message.getRegionDestination();
1:9a8f6e4:         if (regionDestination != null
1:9a8f6e4:                 && regionDestination.getActiveMQDestination() != null
1:9a8f6e4:                 && regionDestination.getActiveMQDestination().getPhysicalName() != null
1:9a8f6e4:                 && !regionDestination.getActiveMQDestination().getPhysicalName().isEmpty()){
1:9a8f6e4:             name = prefix + regionDestination.getActiveMQDestination().getPhysicalName();
1:e1f170d:         } else {
1:6579d9e:             name = prefix + message.getDestination().getPhysicalName();
1:6579d9e:         }
1:6579d9e: 
1:27c1719:         if (destinationPerDurableSubscriber && subscription instanceof DurableTopicSubscription) {
1:27c1719:             name += "." + ((DurableTopicSubscription)subscription).getSubscriptionKey();
1:27c1719:         }
1:620d26d: 
1:620d26d:         if (suffix != null && !suffix.isEmpty()) {
1:620d26d:             name += suffix;
1:620d26d:         }
1:620d26d: 
1:88203ae:         if (useQueue) {
1:88203ae:             return new ActiveMQQueue(name);
1:74a7a8b:         } else {
1:88203ae:             return new ActiveMQTopic(name);
1:e1f170d:         }
1:e1f170d:     }
1:88203ae: 
1:620d26d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:be919fb
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
0:     public boolean isDLQ(ActiveMQDestination destination) {
0:         String name = destination.getPhysicalName();
0:         if (destination.isQueue()) {
0:             if ((queuePrefix != null && name.startsWith(queuePrefix)) || (queueSuffix != null && name.endsWith(queueSuffix))) {
0:                 return true;
1:             }
1:         } else {
0:             if ((topicPrefix != null && name.startsWith(topicPrefix)) || (topicSuffix != null && name.endsWith(topicSuffix))) {
0:                 return true;
1:             }
1:         }
0:         return false;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:         Destination regionDestination = (Destination) message.getRegionDestination();
1:         if (regionDestination != null
1:                 && regionDestination.getActiveMQDestination() != null
1:                 && regionDestination.getActiveMQDestination().getPhysicalName() != null
1:                 && !regionDestination.getActiveMQDestination().getPhysicalName().isEmpty()){
1:             name = prefix + regionDestination.getActiveMQDestination().getPhysicalName();
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:620d26d
/////////////////////////////////////////////////////////////////////////
1:     private String topicSuffix;
1:     private String queueSuffix;
1:             return createDestination(message, queuePrefix, queueSuffix, useQueueForQueueMessages, subscription);
1:             return createDestination(message, topicPrefix, topicSuffix, useQueueForTopicMessages, subscription);
/////////////////////////////////////////////////////////////////////////
1:     public String getQueueSuffix() {
1:         return queueSuffix;
1:     }
1: 
1:     /**
1:      * Sets the suffix to use for all dead letter queues for queue messages
1:      */
1:     public void setQueueSuffix(String queueSuffix) {
1:         this.queueSuffix = queueSuffix;
1:     }
1: 
1:     public String getTopicSuffix() {
1:         return topicSuffix;
1:     }
1: 
1:     /**
1:      * Sets the suffix to use for all dead letter queues for topic messages
1:      */
1:     public void setTopicSuffix(String topicSuffix) {
1:         this.topicSuffix = topicSuffix;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                                                     String suffix,
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (suffix != null && !suffix.isEmpty()) {
1:             name += suffix;
1:         }
1: 
1: }
commit:6579d9e
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQDestination getDeadLetterQueueFor(Message message, Subscription subscription) {
/////////////////////////////////////////////////////////////////////////
1:         String name = null;
1: 
0:         if (message.getRegionDestination() != null
0:                 && message.getRegionDestination().getActiveMQDestination() != null
0:                 && message.getRegionDestination().getActiveMQDestination().getPhysicalName() != null
0:                 && !message.getRegionDestination().getActiveMQDestination().getPhysicalName().isEmpty()){
0:             name = prefix + message.getRegionDestination().getActiveMQDestination().getPhysicalName();
0:         } else {
1:             name = prefix + message.getDestination().getPhysicalName();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:     private boolean destinationPerDurableSubscriber;
0:     public ActiveMQDestination getDeadLetterQueueFor(Message message,
0:                                                      Subscription subscription) {
1:         if (message.getDestination().isQueue()) {
0:             return createDestination(message, queuePrefix, useQueueForQueueMessages, subscription);
0:             return createDestination(message, topicPrefix, useQueueForTopicMessages, subscription);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDestinationPerDurableSubscriber() {
1:         return destinationPerDurableSubscriber;
1:     }
1: 
1:     /**
1:      * sets whether durable topic subscriptions are to get individual dead letter destinations.
1:      * When true, the DLQ is of the form 'topicPrefix.clientId:subscriptionName'
1:      * The default is false.
1:      * @param destinationPerDurableSubscriber
1:      */
1:     public void setDestinationPerDurableSubscriber(boolean destinationPerDurableSubscriber) {
1:         this.destinationPerDurableSubscriber = destinationPerDurableSubscriber;
1:     }
1: 
1:     protected ActiveMQDestination createDestination(Message message,
1:                                                     String prefix,
1:                                                     boolean useQueue,
1:                                                     Subscription subscription ) {
0:         String name = prefix + message.getDestination().getPhysicalName();
1:         if (destinationPerDurableSubscriber && subscription instanceof DurableTopicSubscription) {
1:             name += "." + ((DurableTopicSubscription)subscription).getSubscriptionKey();
1:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: public class IndividualDeadLetterStrategy extends AbstractDeadLetterStrategy {
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
1:  * A {@link DeadLetterStrategy} where each destination has its own individual
1:  * DLQ using the subject naming hierarchy.
0:  * 
0:  * @org.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
0: public class IndividualDeadLetterStrategy implements DeadLetterStrategy {
1: 
1:     private String topicPrefix = "ActiveMQ.DLQ.Topic.";
1:     private String queuePrefix = "ActiveMQ.DLQ.Queue.";
1:     private boolean useQueueForQueueMessages = true;
1:     private boolean useQueueForTopicMessages = true;
1: 
0:     public ActiveMQDestination getDeadLetterQueueFor(ActiveMQDestination originalDestination) {
0:         if (originalDestination.isQueue()) {
0:             return createDestination(originalDestination, queuePrefix, useQueueForQueueMessages);
1:         }
0:         else {
0:             return createDestination(originalDestination, topicPrefix, useQueueForTopicMessages);
1:         }
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public String getQueuePrefix() {
1:         return queuePrefix;
1:     }
1: 
1:     /**
1:      * Sets the prefix to use for all dead letter queues for queue messages
1:      */
1:     public void setQueuePrefix(String queuePrefix) {
1:         this.queuePrefix = queuePrefix;
1:     }
1: 
1:     public String getTopicPrefix() {
1:         return topicPrefix;
1:     }
1: 
1:     /**
1:      * Sets the prefix to use for all dead letter queues for topic messages
1:      */
1:     public void setTopicPrefix(String topicPrefix) {
1:         this.topicPrefix = topicPrefix;
1:     }
1: 
1:     public boolean isUseQueueForQueueMessages() {
1:         return useQueueForQueueMessages;
1:     }
1: 
1:     /**
1:      * Sets whether a queue or topic should be used for queue messages sent to a
1:      * DLQ. The default is to use a Queue
1:      */
1:     public void setUseQueueForQueueMessages(boolean useQueueForQueueMessages) {
1:         this.useQueueForQueueMessages = useQueueForQueueMessages;
1:     }
1: 
1:     public boolean isUseQueueForTopicMessages() {
1:         return useQueueForTopicMessages;
1:     }
1: 
1:     /**
1:      * Sets whether a queue or topic should be used for topic messages sent to a
1:      * DLQ. The default is to use a Queue
1:      */
1:     public void setUseQueueForTopicMessages(boolean useQueueForTopicMessages) {
1:         this.useQueueForTopicMessages = useQueueForTopicMessages;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected ActiveMQDestination createDestination(ActiveMQDestination originalDestination, String prefix, boolean useQueue) {
0:         String name = prefix + originalDestination.getPhysicalName();
1:         if (useQueue) {
1:             return new ActiveMQQueue(name);
1:         }
0:         else {
1:             return new ActiveMQTopic(name);
1:         }
1:     }
1: 
1: }
============================================================================