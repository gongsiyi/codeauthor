1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.vm;
1:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.BrokerRegistry;
1:d29ca2a: import org.apache.activemq.broker.BrokerTestSupport;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to see if the VM transport starts an embedded broker on demand.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class VMTransportEmbeddedBrokerTest extends BrokerTestSupport {
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(VMTransportEmbeddedBrokerTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testConsumerPrefetchAtOne() throws Exception {
1:d29ca2a:         
1:d29ca2a:         // Make sure the broker is created due to the connection being started.
1:d29ca2a:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));
1:d29ca2a: 
1:d29ca2a:         // Start a producer and consumer
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         connection.send(producerInfo);
1:d29ca2a:         
1:d29ca2a:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:d29ca2a: 
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);  
1:d29ca2a:         consumerInfo.setPrefetchSize(1);
1:d29ca2a:         connection.send(consumerInfo);
1:d29ca2a:         
1:d29ca2a:         // Send 2 messages to the broker.
1:d29ca2a:         connection.send(createMessage(producerInfo, destination, DeliveryMode.NON_PERSISTENT));
1:d29ca2a:         connection.send(createMessage(producerInfo, destination, DeliveryMode.NON_PERSISTENT));
1:d29ca2a:         
1:d29ca2a:         // Make sure only 1 message was delivered.
1:d29ca2a:         Message m = receiveMessage(connection);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         assertNoMessagesLeft(connection);
1:d29ca2a:         
1:d29ca2a:         // Make sure the broker is shutdown when the connection is stopped.
1:d29ca2a:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:d29ca2a:         connection.stop();
1:d29ca2a:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         // Don't call super since it manually starts up a broker.
1:d29ca2a:     }
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         // Don't call super since it manually tears down a broker.
1:d29ca2a:     }
1:d29ca2a:     protected StubConnection createConnection() throws Exception {
1:d29ca2a:         try {
1:d29ca2a:             Transport transport = TransportFactory.connect(new URI("vm://localhost?broker.persistent=false"));
1:d29ca2a:             StubConnection connection = new StubConnection(transport);
1:d29ca2a:             return connection;
1:d29ca2a:         } catch (URISyntaxException e) {
1:d29ca2a:             throw IOExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerPrefetchAtOne() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.vm;
1: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.util.IOExceptionSupport;
1: 
1: /**
1:  * Used to see if the VM transport starts an embedded broker on demand.
1:  * 
0:  * @version $Revision$
1:  */
1: public class VMTransportEmbeddedBrokerTest extends BrokerTestSupport {
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(VMTransportEmbeddedBrokerTest.class);
1:     }
1: 
0:     public void testConsumerPrefetchAtOne() throws Throwable {
1:         
1:         // Make sure the broker is created due to the connection being started.
1:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:         StubConnection connection = createConnection();
1:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));
1: 
1:         // Start a producer and consumer
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);
1:         
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1: 
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);  
1:         consumerInfo.setPrefetchSize(1);
1:         connection.send(consumerInfo);
1:         
1:         // Send 2 messages to the broker.
1:         connection.send(createMessage(producerInfo, destination, DeliveryMode.NON_PERSISTENT));
1:         connection.send(createMessage(producerInfo, destination, DeliveryMode.NON_PERSISTENT));
1:         
1:         // Make sure only 1 message was delivered.
1:         Message m = receiveMessage(connection);
1:         assertNotNull(m);
1:         assertNoMessagesLeft(connection);
1:         
1:         // Make sure the broker is shutdown when the connection is stopped.
1:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:         connection.stop();
1:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));        
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         // Don't call super since it manually starts up a broker.
1:     }
1:     protected void tearDown() throws Exception {
1:         // Don't call super since it manually tears down a broker.
1:     }
1:     protected StubConnection createConnection() throws Exception {
1:         try {
1:             Transport transport = TransportFactory.connect(new URI("vm://localhost?broker.persistent=false"));
1:             StubConnection connection = new StubConnection(transport);
1:             return connection;
1:         } catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1: }
============================================================================