1:1595378: /**
1:1595378:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1595378:  * contributor license agreements.  See the NOTICE file distributed with
1:1595378:  * this work for additional information regarding copyright ownership.
1:1595378:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1595378:  * (the "License"); you may not use this file except in compliance with
1:1595378:  * the License.  You may obtain a copy of the License at
1:1595378:  *
1:1595378:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1595378:  *
1:1595378:  * Unless required by applicable law or agreed to in writing, software
1:1595378:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1595378:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1595378:  * See the License for the specific language governing permissions and
1:1595378:  * limitations under the License.
1:1595378:  */
1:1595378: package org.apache.activemq.store;
1:1595378: 
1:85edfb3: import java.io.File;
1:1595378: import java.io.IOException;
1:1595378: import java.util.ArrayList;
1:1595378: import java.util.Vector;
1:1595378: import java.util.concurrent.ExecutorService;
1:1595378: import java.util.concurrent.Executors;
1:1595378: import java.util.concurrent.TimeUnit;
1:1595378: import javax.jms.Connection;
1:1595378: import javax.jms.JMSException;
1:1595378: import javax.jms.MessageConsumer;
1:1595378: import javax.jms.MessageProducer;
1:1595378: import javax.jms.Session;
1:1595378: import org.apache.activemq.ActiveMQConnectionFactory;
1:1595378: import org.apache.activemq.broker.BrokerService;
1:1595378: import org.apache.activemq.command.ActiveMQQueue;
1:1595378: import org.apache.activemq.command.TransactionId;
1:1595378: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:1595378: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:1595378: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:1595378: import org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore;
1:1595378: import org.apache.activemq.usage.SystemUsage;
1:1595378: import org.apache.activemq.util.Wait;
1:1595378: import org.junit.After;
1:1595378: import org.junit.Before;
1:1595378: import org.junit.Test;
1:1595378: import org.slf4j.Logger;
1:1595378: import org.slf4j.LoggerFactory;
1:1595378: 
1:1595378: import static org.junit.Assert.assertEquals;
1:1595378: import static org.junit.Assert.assertTrue;
1:1595378: 
1:1595378: public class StorePerDestinationTest  {
1:1595378:     static final Logger LOG = LoggerFactory.getLogger(StorePerDestinationTest.class);
1:1595378:     final static int maxFileLength = 1024*100;
1:94de98a:     final static int numToSend = 5000;
1:1595378:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:1595378:     BrokerService brokerService;
1:1595378: 
1:1595378:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1:1595378: 
1:1595378:         BrokerService broker = new BrokerService();
1:1595378:         broker.setUseJmx(false);
1:1595378:         broker.setPersistenceAdapter(kaha);
1:1595378:         return broker;
1:1595378:     }
1:1595378: 
1:f75520f:     protected PersistenceAdapter createStore(boolean delete) throws IOException {
1:1595378:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:1595378:         kaha.setJournalMaxFileLength(maxFileLength);
1:1595378:         kaha.setCleanupInterval(5000);
1:1595378:         if (delete) {
1:1595378:             kaha.deleteAllMessages();
1:1595378:         }
1:1595378:         return kaha;
1:1595378:     }
1:1595378: 
1:1595378:     @Before
1:1595378:     public void prepareCleanBrokerWithMultiStore() throws Exception {
1:1595378:            prepareBrokerWithMultiStore(true);
1:1595378:     }
1:1595378: 
1:1595378:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1:1595378: 
1:1595378:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:1595378:         if (deleteAllMessages) {
1:1595378:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:1595378:         }
1:1595378:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:1595378: 
1:1595378:         FilteredKahaDBPersistenceAdapter theRest = new FilteredKahaDBPersistenceAdapter();
1:1595378:         theRest.setPersistenceAdapter(createStore(deleteAllMessages));
1:1595378:         // default destination when not set is a match for all
1:1595378:         adapters.add(theRest);
1:1595378: 
1:1595378:         // separate store for FastQ
1:1595378:         FilteredKahaDBPersistenceAdapter fastQStore = new FilteredKahaDBPersistenceAdapter();
1:1595378:         fastQStore.setPersistenceAdapter(createStore(deleteAllMessages));
1:1595378:         fastQStore.setDestination(new ActiveMQQueue("FastQ"));
1:1595378:         adapters.add(fastQStore);
1:1595378: 
1:1595378:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:1595378:         brokerService  = createBroker(multiKahaDBPersistenceAdapter);
1:1595378:     }
1:1595378: 
1:1595378:     @After
1:1595378:     public void tearDown() throws Exception {
1:1595378:         brokerService.stop();
1:1595378:     }
1:1595378: 
1:1595378:     @Test
1:1595378:     public void testTransactedSendReceive() throws Exception {
1:1595378:         brokerService.start();
1:1595378:         sendMessages(true, "SlowQ", 1, 0);
1:1595378:         assertEquals("got one", 1, receiveMessages(true, "SlowQ", 1));
1:1595378:     }
1:1595378: 
1:1595378:     @Test
1:1595378:     public void testTransactedSendReceiveAcrossStores() throws Exception {
1:1595378:         brokerService.start();
1:1595378:         sendMessages(true, "SlowQ,FastQ", 1, 0);
1:1595378:         assertEquals("got one", 2, receiveMessages(true, "SlowQ,FastQ", 2));
1:1595378:     }
1:1595378: 
1:1595378:     @Test
1:1595378:     public void testCommitRecovery() throws Exception {
1:1595378:         doTestRecovery(true);
1:1595378:     }
1:1595378: 
1:1595378:      @Test
1:1595378:     public void testRollbackRecovery() throws Exception {
1:1595378:         doTestRecovery(false);
1:1595378:     }
1:1595378: 
1:1595378:     public void doTestRecovery(final boolean haveOutcome) throws Exception {
1:1595378:         final MultiKahaDBPersistenceAdapter persistenceAdapter =
1:1595378:                 (MultiKahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1:1595378:         MultiKahaDBTransactionStore transactionStore =
1:1595378:                 new MultiKahaDBTransactionStore(persistenceAdapter) {
1:1595378:                     @Override
1:1595378:                     public void persistOutcome(Tx tx, TransactionId txid) throws IOException {
1:1595378:                         if (haveOutcome) {
1:1595378:                             super.persistOutcome(tx, txid);
1:1595378:                         }
1:1595378:                         try {
1:1595378:                             // IOExceptions will stop the broker
1:1595378:                             persistenceAdapter.stop();
1:1595378:                         } catch (Exception e) {
1:1595378:                             LOG.error("ex on stop ", e);
1:1595378:                             exceptions.add(e);
1:1595378:                         }
1:1595378:                     }
1:1595378:                 };
1:1595378:         persistenceAdapter.setTransactionStore(transactionStore);
1:1595378:         brokerService.start();
1:1595378: 
1:1595378:         ExecutorService executorService = Executors.newCachedThreadPool();
1:1595378:         executorService.execute(new Runnable() {
1:1595378:             @Override
1:1595378:             public void run() {
1:1595378:                 try {
1:1595378:                     // commit will block
1:1595378:                     sendMessages(true, "SlowQ,FastQ", 1, 0);
1:1595378:                 } catch(Exception expected) {
1:1595378:                     LOG.info("expected", expected);
1:1595378:                 }
1:1595378:             }
1:1595378:         });
1:1595378: 
1:1595378:         brokerService.waitUntilStopped();
1:1595378:         // interrupt the send thread
1:1595378:         executorService.shutdownNow();
1:1595378: 
1:1595378:         // verify auto recovery
1:1595378:         prepareBrokerWithMultiStore(false);
1:1595378:         brokerService.start();
1:1595378: 
1:1595378:         assertEquals("expect to get the recovered message", haveOutcome ? 2 : 0, receiveMessages(false, "SlowQ,FastQ", 2));
1:1595378:         assertEquals("all transactions are complete", 0, brokerService.getBroker().getPreparedTransactions(null).length);
1:1595378:     }
1:1595378: 
1:1595378:     @Test
1:85edfb3:     public void testDirectoryDefault() throws Exception {
1:85edfb3:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:85edfb3:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:85edfb3: 
1:85edfb3:         FilteredKahaDBPersistenceAdapter otherFilteredKahaDBPersistenceAdapter =
1:85edfb3:                 new FilteredKahaDBPersistenceAdapter();
1:f75520f:         PersistenceAdapter otherStore = createStore(false);
1:85edfb3:         File someOtherDisk = new File("target" + File.separator + "someOtherDisk");
1:85edfb3:         otherStore.setDirectory(someOtherDisk);
1:85edfb3:         otherFilteredKahaDBPersistenceAdapter.setPersistenceAdapter(otherStore);
1:85edfb3:         otherFilteredKahaDBPersistenceAdapter.setDestination(new ActiveMQQueue("Other"));
1:85edfb3:         adapters.add(otherFilteredKahaDBPersistenceAdapter);
1:85edfb3: 
1:85edfb3:         FilteredKahaDBPersistenceAdapter filteredKahaDBPersistenceAdapterDefault =
1:85edfb3:                 new FilteredKahaDBPersistenceAdapter();
1:f75520f:         PersistenceAdapter storeDefault = createStore(false);
1:85edfb3:         filteredKahaDBPersistenceAdapterDefault.setPersistenceAdapter(storeDefault);
1:85edfb3:         adapters.add(filteredKahaDBPersistenceAdapterDefault);
1:85edfb3: 
1:85edfb3:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:85edfb3: 
1:85edfb3:         assertEquals(multiKahaDBPersistenceAdapter.getDirectory(), storeDefault.getDirectory().getParentFile());
1:221da8b:         assertEquals(someOtherDisk, otherStore.getDirectory().getParentFile());
1:85edfb3:     }
1:85edfb3: 
1:85edfb3:     @Test
1:1595378:     public void testSlowFastDestinationsStoreUsage() throws Exception {
1:1595378:         brokerService.start();
1:1595378:         ExecutorService executorService = Executors.newCachedThreadPool();
1:1595378:         executorService.execute(new Runnable() {
1:1595378:             @Override
1:1595378:             public void run() {
1:1595378:                 try {
1:1595378:                     sendMessages(false, "SlowQ", 50, 500);
1:1595378:                 } catch (Exception e) {
1:1595378:                     exceptions.add(e);
1:1595378:                 }
1:1595378:             }
1:1595378:         });
1:1595378: 
1:1595378:         executorService.execute(new Runnable() {
1:1595378:             @Override
1:1595378:             public void run() {
1:1595378:                 try {
1:1595378:                     sendMessages(false, "FastQ", numToSend, 0);
1:1595378:                 } catch (Exception e) {
1:1595378:                     exceptions.add(e);
1:1595378:                 }
1:1595378:             }
1:1595378:         });
1:1595378: 
1:1595378:         executorService.execute(new Runnable() {
1:1595378:             @Override
1:1595378:             public void run() {
1:1595378:                 try {
1:1595378:                     assertEquals("Got all sent", numToSend, receiveMessages(false, "FastQ", numToSend));
1:1595378:                 } catch (Exception e) {
1:1595378:                     exceptions.add(e);
1:1595378:                 }
1:1595378:             }
1:1595378:         });
1:1595378: 
1:1595378:         executorService.shutdown();
1:94de98a:         assertTrue("consumers executor finished on time", executorService.awaitTermination(5*60, TimeUnit.SECONDS));
1:1595378:         final SystemUsage usage = brokerService.getSystemUsage();
1:1595378:         assertTrue("Store is not hogged", Wait.waitFor(new Wait.Condition() {
1:1595378: 
1:1595378:             @Override
1:1595378:             public boolean isSatisified() throws Exception {
1:1595378:                 long storeUsage = usage.getStoreUsage().getUsage();
1:1595378:                 LOG.info("Store Usage: " + storeUsage);
1:1595378:                 return storeUsage < 5 * maxFileLength;
1:1595378:             }
1:1595378:         }));
1:1595378:         assertTrue("no exceptions", exceptions.isEmpty());
1:1595378:     }
1:1595378: 
1:1595378:     private void sendMessages(boolean transacted, String destName, int count, long sleep) throws Exception {
1:1595378:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:1595378:         Connection connection = cf.createConnection();
1:1595378:         try {
1:1595378:             Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1595378:             MessageProducer producer = session.createProducer(new ActiveMQQueue(destName));
1:1595378:             for (int i = 0; i < count; i++) {
1:1595378:                 if (sleep > 0) {
1:1595378:                     TimeUnit.MILLISECONDS.sleep(sleep);
1:1595378:                 }
1:1595378:                 producer.send(session.createTextMessage(createContent(i)));
1:1595378:             }
1:1595378:             if (transacted) {
1:1595378:                 session.commit();
1:1595378:             }
1:1595378:         } finally {
1:1595378:             connection.close();
1:1595378:         }
1:1595378:     }
1:1595378: 
1:1595378:     private int receiveMessages(boolean transacted, String destName, int max) throws JMSException {
1:1595378:         int rc = 0;
1:1595378:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:1595378:         Connection connection = cf.createConnection();
1:1595378:         try {
1:1595378:             connection.start();
1:1595378:             Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1595378:             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue(destName));
1:1595378:             while (rc < max && messageConsumer.receive(4000) != null) {
1:1595378:                 rc++;
1:1595378: 
1:1595378:                 if (transacted && rc % 200 == 0) {
1:1595378:                     session.commit();
1:1595378:                 }
1:1595378:             }
1:1595378:             if (transacted) {
1:1595378:                 session.commit();
1:1595378:             }
1:1595378:             return rc;
1:1595378:         } finally {
1:1595378:             connection.close();
1:1595378:         }
1:1595378:     }
1:1595378: 
1:1595378:     private String createContent(int i) {
1:1595378:         StringBuilder sb = new StringBuilder(i + ":");
1:1595378:         while (sb.length() < 1024) {
1:1595378:             sb.append("*");
1:1595378:         }
1:1595378:         return sb.toString();
1:1595378:     }
1:1595378: 
1:1595378: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:f75520f
/////////////////////////////////////////////////////////////////////////
1:     protected PersistenceAdapter createStore(boolean delete) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter otherStore = createStore(false);
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter storeDefault = createStore(false);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:221da8b
/////////////////////////////////////////////////////////////////////////
0:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(someOtherDisk, otherStore.getDirectory().getParentFile());
commit:85edfb3
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:     public void testDirectoryDefault() throws Exception {
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         FilteredKahaDBPersistenceAdapter otherFilteredKahaDBPersistenceAdapter =
1:                 new FilteredKahaDBPersistenceAdapter();
0:         KahaDBPersistenceAdapter otherStore = createStore(false);
1:         File someOtherDisk = new File("target" + File.separator + "someOtherDisk");
1:         otherStore.setDirectory(someOtherDisk);
1:         otherFilteredKahaDBPersistenceAdapter.setPersistenceAdapter(otherStore);
1:         otherFilteredKahaDBPersistenceAdapter.setDestination(new ActiveMQQueue("Other"));
1:         adapters.add(otherFilteredKahaDBPersistenceAdapter);
1: 
1:         FilteredKahaDBPersistenceAdapter filteredKahaDBPersistenceAdapterDefault =
1:                 new FilteredKahaDBPersistenceAdapter();
0:         KahaDBPersistenceAdapter storeDefault = createStore(false);
1:         filteredKahaDBPersistenceAdapterDefault.setPersistenceAdapter(storeDefault);
1:         adapters.add(filteredKahaDBPersistenceAdapterDefault);
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1: 
1:         assertEquals(multiKahaDBPersistenceAdapter.getDirectory(), storeDefault.getDirectory().getParentFile());
0:         assertEquals(someOtherDisk, otherStore.getDirectory());
1:     }
1: 
1:     @Test
commit:94de98a
/////////////////////////////////////////////////////////////////////////
1:     final static int numToSend = 5000;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("consumers executor finished on time", executorService.awaitTermination(5*60, TimeUnit.SECONDS));
commit:1595378
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class StorePerDestinationTest  {
1:     static final Logger LOG = LoggerFactory.getLogger(StorePerDestinationTest.class);
1:     final static int maxFileLength = 1024*100;
0:     final static int numToSend = 10000;
1:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:     BrokerService brokerService;
1: 
1:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1: 
0:     private KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setJournalMaxFileLength(maxFileLength);
1:         kaha.setCleanupInterval(5000);
1:         if (delete) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     @Before
1:     public void prepareCleanBrokerWithMultiStore() throws Exception {
1:            prepareBrokerWithMultiStore(true);
1:     }
1: 
1:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1: 
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         if (deleteAllMessages) {
1:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:         }
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         FilteredKahaDBPersistenceAdapter theRest = new FilteredKahaDBPersistenceAdapter();
1:         theRest.setPersistenceAdapter(createStore(deleteAllMessages));
1:         // default destination when not set is a match for all
1:         adapters.add(theRest);
1: 
1:         // separate store for FastQ
1:         FilteredKahaDBPersistenceAdapter fastQStore = new FilteredKahaDBPersistenceAdapter();
1:         fastQStore.setPersistenceAdapter(createStore(deleteAllMessages));
1:         fastQStore.setDestination(new ActiveMQQueue("FastQ"));
1:         adapters.add(fastQStore);
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:         brokerService  = createBroker(multiKahaDBPersistenceAdapter);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     public void testTransactedSendReceive() throws Exception {
1:         brokerService.start();
1:         sendMessages(true, "SlowQ", 1, 0);
1:         assertEquals("got one", 1, receiveMessages(true, "SlowQ", 1));
1:     }
1: 
1:     @Test
1:     public void testTransactedSendReceiveAcrossStores() throws Exception {
1:         brokerService.start();
1:         sendMessages(true, "SlowQ,FastQ", 1, 0);
1:         assertEquals("got one", 2, receiveMessages(true, "SlowQ,FastQ", 2));
1:     }
1: 
1:     @Test
1:     public void testCommitRecovery() throws Exception {
1:         doTestRecovery(true);
1:     }
1: 
1:      @Test
1:     public void testRollbackRecovery() throws Exception {
1:         doTestRecovery(false);
1:     }
1: 
1:     public void doTestRecovery(final boolean haveOutcome) throws Exception {
1:         final MultiKahaDBPersistenceAdapter persistenceAdapter =
1:                 (MultiKahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1:         MultiKahaDBTransactionStore transactionStore =
1:                 new MultiKahaDBTransactionStore(persistenceAdapter) {
1:                     @Override
1:                     public void persistOutcome(Tx tx, TransactionId txid) throws IOException {
1:                         if (haveOutcome) {
1:                             super.persistOutcome(tx, txid);
1:                         }
1:                         try {
1:                             // IOExceptions will stop the broker
1:                             persistenceAdapter.stop();
1:                         } catch (Exception e) {
1:                             LOG.error("ex on stop ", e);
1:                             exceptions.add(e);
1:                         }
1:                     }
1:                 };
1:         persistenceAdapter.setTransactionStore(transactionStore);
1:         brokerService.start();
1: 
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     // commit will block
1:                     sendMessages(true, "SlowQ,FastQ", 1, 0);
1:                 } catch(Exception expected) {
1:                     LOG.info("expected", expected);
1:                 }
1:             }
1:         });
1: 
1:         brokerService.waitUntilStopped();
1:         // interrupt the send thread
1:         executorService.shutdownNow();
1: 
1:         // verify auto recovery
1:         prepareBrokerWithMultiStore(false);
1:         brokerService.start();
1: 
1:         assertEquals("expect to get the recovered message", haveOutcome ? 2 : 0, receiveMessages(false, "SlowQ,FastQ", 2));
1:         assertEquals("all transactions are complete", 0, brokerService.getBroker().getPreparedTransactions(null).length);
1:     }
1: 
1:     @Test
1:     public void testSlowFastDestinationsStoreUsage() throws Exception {
1:         brokerService.start();
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     sendMessages(false, "SlowQ", 50, 500);
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         });
1: 
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     sendMessages(false, "FastQ", numToSend, 0);
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         });
1: 
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     assertEquals("Got all sent", numToSend, receiveMessages(false, "FastQ", numToSend));
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         });
1: 
1:         executorService.shutdown();
0:         assertTrue("consumers executor finished on time", executorService.awaitTermination(60, TimeUnit.SECONDS));
1:         final SystemUsage usage = brokerService.getSystemUsage();
1:         assertTrue("Store is not hogged", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long storeUsage = usage.getStoreUsage().getUsage();
1:                 LOG.info("Store Usage: " + storeUsage);
1:                 return storeUsage < 5 * maxFileLength;
1:             }
1:         }));
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     private void sendMessages(boolean transacted, String destName, int count, long sleep) throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         try {
1:             Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(new ActiveMQQueue(destName));
1:             for (int i = 0; i < count; i++) {
1:                 if (sleep > 0) {
1:                     TimeUnit.MILLISECONDS.sleep(sleep);
1:                 }
1:                 producer.send(session.createTextMessage(createContent(i)));
1:             }
1:             if (transacted) {
1:                 session.commit();
1:             }
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private int receiveMessages(boolean transacted, String destName, int max) throws JMSException {
1:         int rc = 0;
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         try {
1:             connection.start();
1:             Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue(destName));
1:             while (rc < max && messageConsumer.receive(4000) != null) {
1:                 rc++;
1: 
1:                 if (transacted && rc % 200 == 0) {
1:                     session.commit();
1:                 }
1:             }
1:             if (transacted) {
1:                 session.commit();
1:             }
1:             return rc;
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private String createContent(int i) {
1:         StringBuilder sb = new StringBuilder(i + ":");
1:         while (sb.length() < 1024) {
1:             sb.append("*");
1:         }
1:         return sb.toString();
1:     }
1: 
1: }
============================================================================