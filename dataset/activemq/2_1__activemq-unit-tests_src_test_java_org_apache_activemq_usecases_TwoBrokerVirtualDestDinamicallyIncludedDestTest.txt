1:1a177f3: /**
1:1a177f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a177f3:  * contributor license agreements.  See the NOTICE file distributed with
1:1a177f3:  * this work for additional information regarding copyright ownership.
1:1a177f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a177f3:  * (the "License"); you may not use this file except in compliance with
1:1a177f3:  * the License.  You may obtain a copy of the License at
1:1a177f3:  *
1:1a177f3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a177f3:  *
1:1a177f3:  * Unless required by applicable law or agreed to in writing, software
1:1a177f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a177f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a177f3:  * See the License for the specific language governing permissions and
1:1a177f3:  * limitations under the License.
1:1a177f3:  */
1:1a177f3: package org.apache.activemq.usecases;
3:1a177f3: 
1:1a177f3: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:1a177f3: import org.apache.activemq.broker.BrokerService;
1:1a177f3: import org.apache.activemq.broker.region.DestinationInterceptor;
1:1a177f3: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:1a177f3: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:1a177f3: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:1a177f3: import org.apache.activemq.command.ActiveMQDestination;
1:1a177f3: import org.apache.activemq.network.NetworkConnector;
1:1a177f3: import org.apache.activemq.store.kahadb.KahaDBStore;
1:1a177f3: import org.apache.activemq.util.MessageIdList;
1:1a177f3: 
1:75e6f19: import javax.jms.Destination;
1:75e6f19: import javax.jms.MessageConsumer;
1:75e6f19: import java.io.File;
1:75e6f19: import java.io.IOException;
1:75e6f19: import java.net.URI;
1:75e6f19: 
1:1a177f3: public class TwoBrokerVirtualDestDinamicallyIncludedDestTest extends JmsMultipleBrokersTestSupport {
1:1a177f3:     protected static final int MESSAGE_COUNT = 10;
1:1a177f3:     boolean dynamicOnly = true;
1:1a177f3:     int networkTTL = 1;
1:1a177f3:     boolean conduit = true;
1:1a177f3:     boolean suppressDuplicateQueueSubscriptions = true;
1:1a177f3:     boolean decreaseNetworkConsumerPriority = true;
1:1a177f3: 
1:1a177f3:     /**
1:1a177f3:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:1a177f3:      */
1:1a177f3:     public void testTopicDinamicallyIncludedBehavior() throws Exception {
1:1a177f3: 
1:1a177f3:         startAllBrokers();
1:1a177f3: 
1:1a177f3:         // Setup destination
1:1a177f3:         Destination dest = createDestination("test", true);
1:1a177f3: 
1:1a177f3:         // Setup consumers
1:1a177f3:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:1a177f3:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:1a177f3: 
1:1a177f3:         Thread.sleep(2*1000);
1:1a177f3: 
1:1a177f3:         // Send messages
1:1a177f3:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:1a177f3: 
1:1a177f3:         // Get message count
1:1a177f3:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:1a177f3:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:1a177f3:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:1a177f3: 
1:1a177f3:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:1a177f3:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:1a177f3:         assertEquals(0, msgsB.getMessageCount());
1:1a177f3: 
1:1a177f3:     }
1:1a177f3: 
1:1a177f3:     /**
1:1a177f3:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:1a177f3:      */
1:1a177f3:     public void testVirtualDestinationsDinamicallyIncludedBehavior1() throws Exception {
1:1a177f3: 
1:1a177f3:         startAllBrokers();
1:1a177f3: 
1:1a177f3:         // Setup destination
1:1a177f3:         Destination dest = createDestination("global.test", true);
1:1a177f3: 
1:1a177f3:         // Setup consumers
1:1a177f3:         MessageConsumer clientB1 = createConsumer("BrokerB", dest);
1:1a177f3:         MessageConsumer clientB2 = createConsumer("BrokerB", createDestination("Consumer.foo-bar.global.test", false));
1:1a177f3: 
1:1a177f3:         Thread.sleep(2*1000);
1:1a177f3: 
1:1a177f3:         int messageCount = MESSAGE_COUNT;
1:1a177f3:         // Send messages
1:1a177f3:         sendMessages("BrokerA", dest, messageCount);
1:1a177f3: 
1:1a177f3:         // Get message count
1:1a177f3:         MessageIdList msgsB1 = getConsumerMessages("BrokerB", clientB1);
1:1a177f3:         msgsB1.waitForMessagesToArrive(messageCount);
1:1a177f3:         assertEquals(messageCount, msgsB1.getMessageCount());
1:1a177f3: 
1:1a177f3:         MessageIdList msgsB2 = getConsumerMessages("BrokerB", clientB2);
1:1a177f3:         msgsB2.waitForMessagesToArrive(messageCount);
1:1a177f3:         assertEquals(messageCount, msgsB2.getMessageCount());
1:1a177f3: 
1:1a177f3:     }
1:1a177f3: 
1:1a177f3:     /**
1:1a177f3:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:1a177f3:      */
1:1a177f3:     public void testVirtualDestinationsDinamicallyIncludedBehavior2() throws Exception {
1:1a177f3: 
1:1a177f3:         startAllBrokers();
1:1a177f3: 
1:1a177f3:         // Setup destination
1:1a177f3:         Destination dest = createDestination("global.test", true);
1:1a177f3: 
1:1a177f3:         // Setup consumers
1:1a177f3:         //MessageConsumer clientB1 = createConsumer("BrokerB", dest);
1:1a177f3:         MessageConsumer clientB2 = createConsumer("BrokerB", createDestination("Consumer.foo-bar.global.test", false));
1:1a177f3: 
1:1a177f3:         Thread.sleep(2*1000);
1:1a177f3: 
1:1a177f3:         // Send messages
1:1a177f3:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:1a177f3: 
1:1a177f3:         // Get message count
1:1a177f3:         MessageIdList msgsB2 = getConsumerMessages("BrokerB", clientB2);
1:1a177f3:         msgsB2.waitForMessagesToArrive(MESSAGE_COUNT);
1:1a177f3:         assertEquals(MESSAGE_COUNT, msgsB2.getMessageCount());
1:75e6f19: 
1:1a177f3:     }
1:1a177f3:     
1:75e6f19:     /**
1:75e6f19:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:75e6f19:      */
1:75e6f19:     public void testVirtualDestinationsDinamicallyIncludedBehavior3() throws Exception {
1:75e6f19:     	final String topic = "global.test";
1:75e6f19:     	final String vq = "Consumer.foo." + topic;
1:75e6f19: 
1:75e6f19:         startAllBrokers();
1:75e6f19:         final int msgs1 = 1001;
1:75e6f19:         final int msgs2 = 1456;
1:75e6f19:     	
1:75e6f19:         // Setup destination
1:75e6f19:         Destination tDest = createDestination(topic, true);
1:75e6f19:         Destination vqDest = createDestination(vq, false);
1:75e6f19: 
1:75e6f19:         // Setup consumers
1:75e6f19:         MessageConsumer clientB1t = createConsumer("BrokerA", tDest);
1:75e6f19:         MessageConsumer clientB2t = createConsumer("BrokerB", tDest);
1:75e6f19:         MessageConsumer clientB1vq = createConsumer("BrokerA", vqDest);
1:75e6f19:         
1:75e6f19:         Thread.sleep(2*1000);
1:75e6f19:         
1:75e6f19:         // Send messages
1:75e6f19:         sendMessages("BrokerA", tDest, msgs1);
1:75e6f19:         sendMessages("BrokerB", tDest, msgs2);
1:75e6f19: 
1:75e6f19:         Thread.sleep(5000);
1:75e6f19:         
1:75e6f19:         // Get message count
1:75e6f19:         MessageIdList msgsB1t = getConsumerMessages("BrokerA", clientB1t);
1:75e6f19:         msgsB1t.waitForMessagesToArrive(msgs1 + msgs2);
1:75e6f19:         assertEquals(msgs1 + msgs2, msgsB1t.getMessageCount());
1:75e6f19:         MessageIdList msgsB2t = getConsumerMessages("BrokerB", clientB2t);
1:75e6f19:         msgsB2t.waitForMessagesToArrive(msgs1 + msgs2);
1:75e6f19:         assertEquals(msgs1 + msgs2, msgsB2t.getMessageCount());
1:75e6f19:         MessageIdList msgsB1vq = getConsumerMessages("BrokerA", clientB1vq);
1:75e6f19:         msgsB1vq.waitForMessagesToArrive(msgs1 + msgs2);
1:75e6f19:         assertEquals(msgs1 + msgs2, msgsB1vq.getMessageCount());
1:75e6f19:         
1:75e6f19:         assertEquals(0, getQueueSize("BrokerA", (ActiveMQDestination)vqDest));
1:75e6f19:         assertEquals(0, getQueueSize("BrokerB", (ActiveMQDestination)vqDest));
1:75e6f19:         destroyAllBrokers();
1:75e6f19:     }
1:75e6f19:     
1:75e6f19:     public long getQueueSize(String broker, ActiveMQDestination destination) throws Exception {
1:75e6f19:     	BrokerItem bi = brokers.get(broker);
1:75e6f19:         return bi.broker.getDestination(destination).getDestinationStatistics().getMessages().getCount();
1:75e6f19:     }
1:1a177f3: 
1:1a177f3:     public void setUp() throws Exception {
1:1a177f3:         super.setAutoFail(true);
1:1a177f3:         super.setUp();
1:1a177f3:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:1a177f3:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:1a177f3:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:1a177f3: 
1:1a177f3:         // Setup broker networks
1:1a177f3:         NetworkConnector nc1 = bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:1a177f3:         nc1.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:1a177f3:         nc1.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:75e6f19:         nc1.addStaticallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
1:3c3b5bb:         //nc1.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
1:3c3b5bb:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3: 
1:1a177f3:         NetworkConnector nc2 = bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1:1a177f3:         nc2.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:1a177f3:         nc2.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:75e6f19:         nc2.addStaticallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
1:3c3b5bb:         //nc2.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
1:3c3b5bb:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:1a177f3:     }
1:1a177f3: 
1:1a177f3:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:1a177f3:         BrokerService broker = createBroker(uri);
1:1a177f3: 
1:1a177f3:         configurePersistenceAdapter(broker);
1:1a177f3: 
1:1a177f3:         // make all topics virtual and consumers use the default prefix
1:1a177f3:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:3c3b5bb:         VirtualTopic vTopic = new VirtualTopic();
1:3c3b5bb:         vTopic.setLocal(true);
1:3c3b5bb:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{vTopic});
1:1a177f3:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:1a177f3:         broker.setDestinationInterceptors(destinationInterceptors);
1:1a177f3:         return broker;
1:1a177f3:     }
1:1a177f3: 
1:1a177f3:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:1a177f3:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:1a177f3:         KahaDBStore kaha = new KahaDBStore();
1:1a177f3:         kaha.setDirectory(dataFileDir);
1:75e6f19:         kaha.deleteAllMessages();
1:1a177f3:         broker.setPersistenceAdapter(kaha);
1:1a177f3:     }
1:1a177f3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c3b5bb
/////////////////////////////////////////////////////////////////////////
1:         //nc1.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:         //nc2.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
/////////////////////////////////////////////////////////////////////////
1:         VirtualTopic vTopic = new VirtualTopic();
1:         vTopic.setLocal(true);
1:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{vTopic});
commit:75e6f19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:      */
1:     public void testVirtualDestinationsDinamicallyIncludedBehavior3() throws Exception {
1:     	final String topic = "global.test";
1:     	final String vq = "Consumer.foo." + topic;
1: 
1:         startAllBrokers();
1:         final int msgs1 = 1001;
1:         final int msgs2 = 1456;
1:     	
1:         // Setup destination
1:         Destination tDest = createDestination(topic, true);
1:         Destination vqDest = createDestination(vq, false);
1: 
1:         // Setup consumers
1:         MessageConsumer clientB1t = createConsumer("BrokerA", tDest);
1:         MessageConsumer clientB2t = createConsumer("BrokerB", tDest);
1:         MessageConsumer clientB1vq = createConsumer("BrokerA", vqDest);
1:         
1:         Thread.sleep(2*1000);
1:         
1:         // Send messages
1:         sendMessages("BrokerA", tDest, msgs1);
1:         sendMessages("BrokerB", tDest, msgs2);
1: 
1:         Thread.sleep(5000);
1:         
1:         // Get message count
1:         MessageIdList msgsB1t = getConsumerMessages("BrokerA", clientB1t);
1:         msgsB1t.waitForMessagesToArrive(msgs1 + msgs2);
1:         assertEquals(msgs1 + msgs2, msgsB1t.getMessageCount());
1:         MessageIdList msgsB2t = getConsumerMessages("BrokerB", clientB2t);
1:         msgsB2t.waitForMessagesToArrive(msgs1 + msgs2);
1:         assertEquals(msgs1 + msgs2, msgsB2t.getMessageCount());
1:         MessageIdList msgsB1vq = getConsumerMessages("BrokerA", clientB1vq);
1:         msgsB1vq.waitForMessagesToArrive(msgs1 + msgs2);
1:         assertEquals(msgs1 + msgs2, msgsB1vq.getMessageCount());
1:         
1:         assertEquals(0, getQueueSize("BrokerA", (ActiveMQDestination)vqDest));
1:         assertEquals(0, getQueueSize("BrokerB", (ActiveMQDestination)vqDest));
1:         destroyAllBrokers();
1:     }
1:     
1:     public long getQueueSize(String broker, ActiveMQDestination destination) throws Exception {
1:     	BrokerItem bi = brokers.get(broker);
1:         return bi.broker.getDestination(destination).getDestinationStatistics().getMessages().getCount();
1:     }
/////////////////////////////////////////////////////////////////////////
1:         nc1.addStaticallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
0:         nc1.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
0:         //nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
1:         nc2.addStaticallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
0:         nc2.addExcludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
0:         //nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
/////////////////////////////////////////////////////////////////////////
1:         kaha.deleteAllMessages();
commit:1a177f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.URI;
1: 
0: import javax.jms.Destination;
0: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: public class TwoBrokerVirtualDestDinamicallyIncludedDestTest extends JmsMultipleBrokersTestSupport {
1:     protected static final int MESSAGE_COUNT = 10;
1:     boolean dynamicOnly = true;
1:     int networkTTL = 1;
1:     boolean conduit = true;
1:     boolean suppressDuplicateQueueSubscriptions = true;
1:     boolean decreaseNetworkConsumerPriority = true;
1: 
1:     /**
1:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:      */
1:     public void testTopicDinamicallyIncludedBehavior() throws Exception {
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("test", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1: 
1:         Thread.sleep(2*1000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1: 
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:         assertEquals(0, msgsB.getMessageCount());
1: 
1:     }
1: 
1:     /**
1:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:      */
1:     public void testVirtualDestinationsDinamicallyIncludedBehavior1() throws Exception {
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("global.test", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientB1 = createConsumer("BrokerB", dest);
1:         MessageConsumer clientB2 = createConsumer("BrokerB", createDestination("Consumer.foo-bar.global.test", false));
1: 
1:         Thread.sleep(2*1000);
1: 
1:         int messageCount = MESSAGE_COUNT;
1:         // Send messages
1:         sendMessages("BrokerA", dest, messageCount);
1: 
1:         // Get message count
1:         MessageIdList msgsB1 = getConsumerMessages("BrokerB", clientB1);
1:         msgsB1.waitForMessagesToArrive(messageCount);
1:         assertEquals(messageCount, msgsB1.getMessageCount());
1: 
1:         MessageIdList msgsB2 = getConsumerMessages("BrokerB", clientB2);
1:         msgsB2.waitForMessagesToArrive(messageCount);
1:         assertEquals(messageCount, msgsB2.getMessageCount());
1: 
1:     }
1: 
1:     /**
1:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:      */
1:     public void testVirtualDestinationsDinamicallyIncludedBehavior2() throws Exception {
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("global.test", true);
1: 
1:         // Setup consumers
1:         //MessageConsumer clientB1 = createConsumer("BrokerB", dest);
1:         MessageConsumer clientB2 = createConsumer("BrokerB", createDestination("Consumer.foo-bar.global.test", false));
1: 
1:         Thread.sleep(2*1000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsB2 = getConsumerMessages("BrokerB", clientB2);
1:         msgsB2.waitForMessagesToArrive(MESSAGE_COUNT);
1:         assertEquals(MESSAGE_COUNT, msgsB2.getMessageCount());
1: 
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1: 
1:         // Setup broker networks
1:         NetworkConnector nc1 = bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:         nc1.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:         nc1.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.QUEUE_TYPE));
1:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
0:         nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.>", ActiveMQDestination.QUEUE_TYPE));
1: 
1:         NetworkConnector nc2 = bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1:         nc2.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:         nc2.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.QUEUE_TYPE));
1:         nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("global.>", ActiveMQDestination.TOPIC_TYPE));
1:     }
1: 
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
1: 
1:         configurePersistenceAdapter(broker);
1: 
1:         // make all topics virtual and consumers use the default prefix
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
0:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:         broker.setDestinationInterceptors(destinationInterceptors);
1:         return broker;
1:     }
1: 
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1: }
============================================================================