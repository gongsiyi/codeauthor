1:57a6f23: /**
1:57a6f23:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57a6f23:  * contributor license agreements.  See the NOTICE file distributed with
1:57a6f23:  * this work for additional information regarding copyright ownership.
1:57a6f23:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57a6f23:  * (the "License"); you may not use this file except in compliance with
1:57a6f23:  * the License.  You may obtain a copy of the License at
1:57a6f23:  *
1:57a6f23:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57a6f23:  *
1:57a6f23:  * Unless required by applicable law or agreed to in writing, software
1:57a6f23:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57a6f23:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57a6f23:  * See the License for the specific language governing permissions and
1:57a6f23:  * limitations under the License.
1:57a6f23:  */
1:57a6f23: package org.apache.activemq.broker.jmx;
1:57a6f23: 
1:57a6f23: import org.apache.activemq.ActiveMQConnectionFactory;
1:57a6f23: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:57a6f23: import org.apache.activemq.broker.BrokerService;
1:57a6f23: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:57a6f23: import org.apache.activemq.broker.region.policy.PolicyMap;
1:57a6f23: import org.slf4j.Logger;
1:57a6f23: import org.slf4j.LoggerFactory;
1:57a6f23: 
1:57a6f23: import javax.jms.Connection;
1:57a6f23: import javax.jms.ConnectionFactory;
1:57a6f23: import javax.jms.JMSException;
1:57a6f23: import javax.jms.Message;
1:57a6f23: import javax.jms.MessageProducer;
1:57a6f23: import javax.jms.Session;
1:57a6f23: import javax.jms.TextMessage;
1:57a6f23: import javax.management.MBeanServer;
1:57a6f23: import javax.management.MBeanServerInvocationHandler;
1:57a6f23: import javax.management.MalformedObjectNameException;
1:57a6f23: import javax.management.ObjectName;
1:57a6f23: import java.util.ArrayList;
1:57a6f23: import java.util.List;
1:57a6f23: 
1:57a6f23: /**
1:57a6f23:  * Purging with large message that hit the memory limit boundaries of a queue.
1:57a6f23:  */
1:57a6f23: public class PurgeLargeMessageTest extends EmbeddedBrokerTestSupport {
1:57a6f23:     private static final Logger LOG = LoggerFactory.getLogger(PurgeLargeMessageTest.class);
1:57a6f23: 
1:57a6f23:     protected MBeanServer mbeanServer;
1:57a6f23:     protected String domain = "org.apache.activemq";
1:57a6f23:     protected String clientID = "foo";
1:57a6f23: 
1:57a6f23:     protected Connection connection;
1:57a6f23:     protected boolean transacted;
1:57a6f23:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:57a6f23: 
1:57a6f23: 
1:57a6f23: 
1:57a6f23:     public void testPurgeLargeMessage() throws Exception {
1:57a6f23: 
1:57a6f23:         final int messageCount = 600;
1:57a6f23: 
1:57a6f23:         // Send some messages
1:57a6f23:         connection = connectionFactory.createConnection();
1:57a6f23:         connection.setClientID(clientID);
1:57a6f23:         connection.start();
1:57a6f23:         Session session = connection.createSession(transacted, authMode);
1:57a6f23:         destination = createDestination();
1:57a6f23:         MessageProducer producer = session.createProducer(destination);
1:57a6f23:         Message message = createTextMessage(session, 5000);
1:57a6f23:         for (int i = 0; i < messageCount; i++) {
1:57a6f23:             producer.send(message);
1:57a6f23:         }
1:57a6f23: 
1:57a6f23:         // Now get the QueueViewMBean and purge
1:57a6f23:         String objectNameStr = broker.getBrokerObjectName().toString();
1:57a6f23:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:57a6f23:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:57a6f23:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:57a6f23: 
1:57a6f23:         long count = proxy.getQueueSize();
1:57a6f23:         assertEquals("Queue size", count, messageCount);
1:57a6f23: 
1:57a6f23:         //force a page in to exceed the memory limit.
1:57a6f23:         proxy.browse();
1:57a6f23: 
1:57a6f23:         // try a purge, with message still to load from the store.
1:57a6f23:         proxy.purge();
1:57a6f23: 
1:57a6f23:         count = proxy.getQueueSize();
1:57a6f23:         assertEquals("Queue size", count, 0);
1:57a6f23:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1:57a6f23: 
1:57a6f23:         producer.close();
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     private TextMessage createTextMessage(Session session, long textSize) throws JMSException {
1:57a6f23: 
1:57a6f23:         StringBuilder stringBuilder = new StringBuilder();
1:57a6f23:         for(long i = 0; i<textSize;i++){
1:57a6f23:             stringBuilder.append('A');
1:57a6f23:         }
1:57a6f23:         return session.createTextMessage(stringBuilder.toString());
1:57a6f23:     }
1:57a6f23: 
1:57a6f23: 
1:57a6f23:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:57a6f23:         ObjectName objectName = new ObjectName(name);
1:57a6f23:         if (mbeanServer.isRegistered(objectName)) {
1:57a6f23:             echo("Bean Registered: " + objectName);
1:57a6f23:         } else {
1:57a6f23:             fail("Could not find MBean!: " + objectName);
1:57a6f23:         }
1:57a6f23:         return objectName;
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     protected void setUp() throws Exception {
1:57a6f23:         bindAddress = "tcp://localhost:0";
1:57a6f23:         useTopic = false;
1:57a6f23:         super.setUp();
1:57a6f23:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     protected void tearDown() throws Exception {
1:57a6f23:         if (connection != null) {
1:57a6f23:             connection.close();
1:57a6f23:             connection = null;
1:57a6f23:         }
1:57a6f23:         super.tearDown();
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     protected BrokerService createBroker() throws Exception {
1:57a6f23:         BrokerService answer = new BrokerService();
1:57a6f23:         answer.setUseJmx(true);
1:57a6f23:         answer.setEnableStatistics(true);
1:57a6f23:         answer.addConnector(bindAddress);
1:57a6f23:         answer.deleteAllMessages();
1:57a6f23: 
1:57a6f23:         PolicyMap policyMap = new PolicyMap();
1:57a6f23:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:57a6f23:         PolicyEntry pe = new PolicyEntry();
1:57a6f23: 
1:57a6f23:         //make the paging a little more deterministic
1:57a6f23:         // by turning off the cache and periodic expiry
1:57a6f23:         pe.setQueue(">");
1:57a6f23:         pe.setUseCache(false);
1:57a6f23:         pe.setMemoryLimit(1000000);
1:57a6f23:         pe.setExpireMessagesPeriod(0);
1:57a6f23: 
1:57a6f23: 
1:57a6f23:         entries.add(pe);
1:57a6f23: 
1:57a6f23:         policyMap.setPolicyEntries(entries);
1:57a6f23:         answer.setDestinationPolicy(policyMap);
1:57a6f23: 
1:57a6f23:         return answer;
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     @Override
1:57a6f23:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:57a6f23:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     protected void echo(String text) {
1:57a6f23:         LOG.info(text);
1:57a6f23:     }
1:57a6f23: 
1:57a6f23:     /**
1:57a6f23:      * Returns the name of the destination used in this test case
1:57a6f23:      */
1:57a6f23:     protected String getDestinationString() {
1:57a6f23:         return getClass().getName() + "." + getName(true);
1:57a6f23:     }
1:57a6f23: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:57a6f23
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: /**
1:  * Purging with large message that hit the memory limit boundaries of a queue.
1:  */
1: public class PurgeLargeMessageTest extends EmbeddedBrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(PurgeLargeMessageTest.class);
1: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1:     protected String clientID = "foo";
1: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1: 
1: 
1: 
1:     public void testPurgeLargeMessage() throws Exception {
1: 
1:         final int messageCount = 600;
1: 
1:         // Send some messages
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID(clientID);
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
1:         Message message = createTextMessage(session, 5000);
1:         for (int i = 0; i < messageCount; i++) {
1:             producer.send(message);
1:         }
1: 
1:         // Now get the QueueViewMBean and purge
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1: 
1:         //force a page in to exceed the memory limit.
1:         proxy.browse();
1: 
1:         // try a purge, with message still to load from the store.
1:         proxy.purge();
1: 
1:         count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, 0);
1:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1: 
1:         producer.close();
1:     }
1: 
1:     private TextMessage createTextMessage(Session session, long textSize) throws JMSException {
1: 
1:         StringBuilder stringBuilder = new StringBuilder();
1:         for(long i = 0; i<textSize;i++){
1:             stringBuilder.append('A');
1:         }
1:         return session.createTextMessage(stringBuilder.toString());
1:     }
1: 
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             echo("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
1:         answer.setEnableStatistics(true);
1:         answer.addConnector(bindAddress);
1:         answer.deleteAllMessages();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         //make the paging a little more deterministic
1:         // by turning off the cache and periodic expiry
1:         pe.setQueue(">");
1:         pe.setUseCache(false);
1:         pe.setMemoryLimit(1000000);
1:         pe.setExpireMessagesPeriod(0);
1: 
1: 
1:         entries.add(pe);
1: 
1:         policyMap.setPolicyEntries(entries);
1:         answer.setDestinationPolicy(policyMap);
1: 
1:         return answer;
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:     protected void echo(String text) {
1:         LOG.info(text);
1:     }
1: 
1:     /**
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
1:         return getClass().getName() + "." + getName(true);
1:     }
1: }
============================================================================