1:148f3bd: /**
1:148f3bd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:148f3bd:  * contributor license agreements.  See the NOTICE file distributed with
1:148f3bd:  * this work for additional information regarding copyright ownership.
1:148f3bd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:148f3bd:  * (the "License"); you may not use this file except in compliance with
1:148f3bd:  * the License.  You may obtain a copy of the License at
2:148f3bd:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:148f3bd:  *
1:148f3bd:  * Unless required by applicable law or agreed to in writing, software
1:148f3bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:148f3bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:148f3bd:  * See the License for the specific language governing permissions and
1:148f3bd:  * limitations under the License.
1:148f3bd:  */
1:148f3bd: import java.util.Arrays;
7:148f3bd: 
1:540dd5c: import javax.jms.BytesMessage;
1:540dd5c: import javax.jms.Connection;
1:540dd5c: import javax.jms.DeliveryMode;
1:540dd5c: import javax.jms.JMSException;
1:540dd5c: import javax.jms.Message;
1:540dd5c: import javax.jms.MessageListener;
1:540dd5c: import javax.jms.MessageProducer;
1:540dd5c: import javax.jms.Session;
1:540dd5c: import javax.jms.TextMessage;
1:540dd5c: import javax.jms.Topic;
1:148f3bd: 
1:148f3bd: import org.apache.activemq.ActiveMQConnectionFactory;
1:148f3bd: 
1:148f3bd: /**
1:540dd5c:  * Use in conjunction with TopicListener to test the performance of ActiveMQ
1:540dd5c:  * Topics.
1:148f3bd:  */
1:540dd5c: public class TopicPublisher implements MessageListener {
1:540dd5c: 
1:540dd5c:     private static final char[] DATA = "abcdefghijklmnopqrstuvwxyz".toCharArray();
1:540dd5c: 
1:148f3bd:     private final Object mutex = new Object();
1:148f3bd:     private Connection connection;
1:148f3bd:     private Session session;
1:148f3bd:     private MessageProducer publisher;
1:540dd5c:     private Topic topic;
1:540dd5c:     private Topic control;
1:148f3bd: 
1:540dd5c:     private String url = "tcp://localhost:61616";
1:540dd5c:     private int size = 256;
1:540dd5c:     private int subscribers = 1;
1:540dd5c:     private int remaining;
1:540dd5c:     private int messages = 10000;
1:540dd5c:     private long delay;
1:77f6790:     private int batch = 2000;
1:540dd5c: 
1:540dd5c:     private byte[] payload;
1:540dd5c: 
1:540dd5c:     public static void main(String[] argv) throws Exception {
1:540dd5c:         TopicPublisher p = new TopicPublisher();
1:540dd5c:         String[] unknown = CommandLineSupport.setOptions(p, argv);
1:540dd5c:         if (unknown.length > 0) {
1:540dd5c:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:540dd5c:             System.exit(-1);
1:540dd5c:         }
1:540dd5c:         p.run();
10:148f3bd:     }
1:148f3bd: 
1:540dd5c:     private void run() throws Exception {
1:540dd5c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:540dd5c:         connection = factory.createConnection();
1:148f3bd:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:540dd5c:         topic = session.createTopic("topictest.messages");
1:540dd5c:         control = session.createTopic("topictest.control");
1:540dd5c: 
1:148f3bd:         publisher = session.createProducer(topic);
1:148f3bd:         publisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:540dd5c: 
1:148f3bd:         payload = new byte[size];
1:540dd5c:         for (int i = 0; i < size; i++) {
1:540dd5c:             payload[i] = (byte)DATA[i % DATA.length];
1:148f3bd:         }
1:148f3bd: 
1:148f3bd:         session.createConsumer(control).setMessageListener(this);
1:148f3bd:         connection.start();
1:148f3bd: 
1:148f3bd:         long[] times = new long[batch];
1:540dd5c:         for (int i = 0; i < batch; i++) {
1:540dd5c:             if (i > 0) {
1:540dd5c:                 Thread.sleep(delay * 1000);
1:540dd5c:             }
1:148f3bd:             times[i] = batch(messages);
1:540dd5c:             System.out.println("Batch " + (i + 1) + " of " + batch + " completed in " + times[i] + " ms.");
1:148f3bd:         }
1:148f3bd: 
1:148f3bd:         long min = min(times);
1:148f3bd:         long max = max(times);
1:148f3bd:         System.out.println("min: " + min + ", max: " + max + " avg: " + avg(times, min, max));
1:148f3bd: 
1:540dd5c:         // request shutdown
1:148f3bd:         publisher.send(session.createTextMessage("SHUTDOWN"));
1:148f3bd: 
1:148f3bd:         connection.stop();
1:148f3bd:         connection.close();
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     private long batch(int msgCount) throws Exception {
1:148f3bd:         long start = System.currentTimeMillis();
1:540dd5c:         remaining = subscribers;
1:148f3bd:         publish();
1:148f3bd:         waitForCompletion();
1:148f3bd:         return System.currentTimeMillis() - start;
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     private void publish() throws Exception {
1:148f3bd: 
1:540dd5c:         // send events
1:148f3bd:         BytesMessage msg = session.createBytesMessage();
1:148f3bd:         msg.writeBytes(payload);
1:540dd5c:         for (int i = 0; i < messages; i++) {
1:148f3bd:             publisher.send(msg);
1:540dd5c:             if ((i + 1) % 1000 == 0) {
1:148f3bd:                 System.out.println("Sent " + (i + 1) + " messages");
1:148f3bd:             }
1:148f3bd:         }
1:148f3bd: 
1:540dd5c:         // request report
1:148f3bd:         publisher.send(session.createTextMessage("REPORT"));
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     private void waitForCompletion() throws Exception {
1:148f3bd:         System.out.println("Waiting for completion...");
1:540dd5c:         synchronized (mutex) {
1:540dd5c:             while (remaining > 0) {
1:148f3bd:                 mutex.wait();
1:148f3bd:             }
1:148f3bd:         }
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     public void onMessage(Message message) {
1:540dd5c:         synchronized (mutex) {
1:148f3bd:             System.out.println("Received report " + getReport(message) + " " + --remaining + " remaining");
1:540dd5c:             if (remaining == 0) {
1:540dd5c:                 mutex.notify();
1:148f3bd:             }
1:148f3bd:         }
1:148f3bd:     }
1:540dd5c: 
1:540dd5c:     Object getReport(Message m) {
1:540dd5c:         try {
1:540dd5c:             return ((TextMessage)m).getText();
1:540dd5c:         } catch (JMSException e) {
1:148f3bd:             e.printStackTrace(System.out);
1:148f3bd:             return e.toString();
1:540dd5c:         }
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     static long min(long[] times) {
1:148f3bd:         long min = times.length > 0 ? times[0] : 0;
1:540dd5c:         for (int i = 0; i < times.length; i++) {
1:148f3bd:             min = Math.min(min, times[i]);
1:148f3bd:         }
1:148f3bd:         return min;
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     static long max(long[] times) {
1:148f3bd:         long max = times.length > 0 ? times[0] : 0;
1:540dd5c:         for (int i = 0; i < times.length; i++) {
1:148f3bd:             max = Math.max(max, times[i]);
1:148f3bd:         }
1:148f3bd:         return max;
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     static long avg(long[] times, long min, long max) {
1:148f3bd:         long sum = 0;
1:540dd5c:         for (int i = 0; i < times.length; i++) {
1:148f3bd:             sum += times[i];
1:148f3bd:         }
1:148f3bd:         sum -= min;
1:148f3bd:         sum -= max;
1:540dd5c:         return sum / times.length - 2;
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     public void setBatch(int batch) {
1:540dd5c:         this.batch = batch;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setDelay(long delay) {
1:540dd5c:         this.delay = delay;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setMessages(int messages) {
1:540dd5c:         this.messages = messages;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setSize(int size) {
1:540dd5c:         this.size = size;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setSubscribers(int subscribers) {
1:540dd5c:         this.subscribers = subscribers;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setUrl(String url) {
1:540dd5c:         this.url = url;
1:540dd5c:     }
1:148f3bd: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:James Strachan
-------------------------------------------------------------------------------
commit:77f6790
/////////////////////////////////////////////////////////////////////////
1:     private int batch = 2000;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1:  * Use in conjunction with TopicListener to test the performance of ActiveMQ
1:  * Topics.
1: public class TopicPublisher implements MessageListener {
1: 
1:     private static final char[] DATA = "abcdefghijklmnopqrstuvwxyz".toCharArray();
1: 
1:     private Topic topic;
1:     private Topic control;
1:     private String url = "tcp://localhost:61616";
1:     private int size = 256;
1:     private int subscribers = 1;
1:     private int remaining;
1:     private int messages = 10000;
1:     private long delay;
0:     private int batch = 40;
1: 
1:     private byte[] payload;
1: 
1:     public static void main(String[] argv) throws Exception {
1:         TopicPublisher p = new TopicPublisher();
1:         String[] unknown = CommandLineSupport.setOptions(p, argv);
1:         if (unknown.length > 0) {
1:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:             System.exit(-1);
1:         }
1:         p.run();
1:     private void run() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         connection = factory.createConnection();
1:         topic = session.createTopic("topictest.messages");
1:         control = session.createTopic("topictest.control");
1: 
1: 
1:         for (int i = 0; i < size; i++) {
1:             payload[i] = (byte)DATA[i % DATA.length];
1:         for (int i = 0; i < batch; i++) {
1:             if (i > 0) {
1:                 Thread.sleep(delay * 1000);
1:             }
1:             System.out.println("Batch " + (i + 1) + " of " + batch + " completed in " + times[i] + " ms.");
1:         // request shutdown
1:     private long batch(int msgCount) throws Exception {
1:         remaining = subscribers;
1:     private void publish() throws Exception {
1:         // send events
1:         for (int i = 0; i < messages; i++) {
1:             if ((i + 1) % 1000 == 0) {
1:         // request report
1:     private void waitForCompletion() throws Exception {
1:         synchronized (mutex) {
1:             while (remaining > 0) {
1:     public void onMessage(Message message) {
1:         synchronized (mutex) {
1:             if (remaining == 0) {
1:                 mutex.notify();
1: 
1:     Object getReport(Message m) {
1:         try {
1:             return ((TextMessage)m).getText();
1:         } catch (JMSException e) {
1:     }
1:     static long min(long[] times) {
1:         for (int i = 0; i < times.length; i++) {
1:     static long max(long[] times) {
1:         for (int i = 0; i < times.length; i++) {
1:     static long avg(long[] times, long min, long max) {
1:         for (int i = 0; i < times.length; i++) {
1:         return sum / times.length - 2;
1:     public void setBatch(int batch) {
1:         this.batch = batch;
1:     }
1: 
1:     public void setDelay(long delay) {
1:         this.delay = delay;
1:     }
1: 
1:     public void setMessages(int messages) {
1:         this.messages = messages;
1:     }
1: 
1:     public void setSize(int size) {
1:         this.size = size;
1:     }
1: 
1:     public void setSubscribers(int subscribers) {
1:         this.subscribers = subscribers;
1:     }
1: 
1:     public void setUrl(String url) {
1:         this.url = url;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:148f3bd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.util.Arrays;
1: 
0: import javax.jms.*;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * Use in conjunction with TopicListener to test the performance of ActiveMQ Topics.
1:  */
0: public class TopicPublisher implements MessageListener
0: {
1:     private final Object mutex = new Object();
1:     private Connection connection;
1:     private Session session;
1:     private MessageProducer publisher;
0: 	private Topic topic;
0: 	private Topic control;
1: 	
0: //	private String url="tcp://localhost:61616?jms.dispatchAsync=true&jms.useAsyncSend=true&jms.optimizeAcknowledge=true&jms.disableTimeStampsByDefault=true&jms.optimizedMessageDispatch=true&wireFormat.cacheEnabled=false&wireFormat.tightEncodingEnabled=false";
0: 	private String url="tcp://localhost:61616";
0: 	private int size=256;
0: 	private int subscribers=1;
0: 	private int remaining;
0: 	private int messages=10000;
0: 	private long delay;
0: 	private int batch=40;
1: 	
0: 	private byte[] payload;
0:     private static final char[] DATA = "abcdefghijklmnopqrstuvwxyz".toCharArray();
1: 
0:     public static void main(String[] argv) throws Exception
0:     {
0:     	TopicPublisher p = new TopicPublisher();
0:     	String[] unknonwn = CommnadLineSupport.setOptions(p, argv);
0: 		if (unknonwn.length > 0) {
0: 			System.out.println("Unknown options: " + Arrays.toString(unknonwn));
0: 			System.exit(-1);
1: 		}
0:     	p.run();
1:     }
1: 
0:     private void run() throws Exception
0:     {
0: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
0: 		connection = factory.createConnection();    	
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		topic = session.createTopic("topictest.messages");
0: 		control = session.createTopic("topictest.control");
1:         
1:         publisher = session.createProducer(topic);
1:         publisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         
1:         payload = new byte[size];
0:         for(int i = 0; i < size; i++)
0:         {
0:             payload[i] = (byte) DATA[i % DATA.length];
1:         }
1: 
1:         session.createConsumer(control).setMessageListener(this);
1:         connection.start();
1: 
1:         long[] times = new long[batch];
0:         for(int i = 0; i < batch; i++)
0:         {
0:             if(i > 0) Thread.sleep(delay*1000);
1:             times[i] = batch(messages);
0:             System.out.println("Batch " + (i+1) + " of " + batch + " completed in " + times[i] + " ms.");
1:         }
1: 
1:         long min = min(times);
1:         long max = max(times);
1:         System.out.println("min: " + min + ", max: " + max + " avg: " + avg(times, min, max));
1: 
0:         //request shutdown
1:         publisher.send(session.createTextMessage("SHUTDOWN"));
1: 
1:         connection.stop();
1:         connection.close();
1:     }
1: 
0:     private long batch(int msgCount) throws Exception
0:     {
1:         long start = System.currentTimeMillis();
0:         remaining=subscribers;
1:         publish();
1:         waitForCompletion();
1:         return System.currentTimeMillis() - start;
1:     }
1: 
0:     private void publish() throws Exception
0:     {
1: 
0:         //send events
1:         BytesMessage msg = session.createBytesMessage();
1:         msg.writeBytes(payload);
0:         for (int i = 0; i < messages; i++)
0:         {
1:             publisher.send(msg);
0:             if ((i + 1) % 1000 == 0)
0:             {
1:                 System.out.println("Sent " + (i + 1) + " messages");
1:             }
1:         }
1: 
0:         //request report
1:         publisher.send(session.createTextMessage("REPORT"));
1:     }
1: 
0:     private void waitForCompletion() throws Exception
0:     {
1:         System.out.println("Waiting for completion...");
0:         synchronized (mutex)
0:         {
0:             while (remaining > 0)
0:             {
1:                 mutex.wait();
1:             }
1:         }
1:     }
1: 
1: 
0:     public void onMessage(Message message)
0:     {
0:         synchronized (mutex)
0:         {
1:             System.out.println("Received report " + getReport(message) + " " + --remaining + " remaining");
0:             if (remaining == 0)
0:             {
0:             	mutex.notify();
1:             }
1:         }
1:     }
1:     
0:     Object getReport(Message m)
0:     {
0:         try
0:         {
0:             return ((TextMessage) m).getText();
1:         }
0:         catch (JMSException e)
0:         {
1:             e.printStackTrace(System.out);
1:             return e.toString();
1:         }
1:     }    
1: 
0:     static long min(long[] times)
0:     {
1:         long min = times.length > 0 ? times[0] : 0;
0:         for(int i = 0; i < times.length; i++)
0:         {
1:             min = Math.min(min, times[i]);
1:         }
1:         return min;
1:     }
1: 
0:     static long max(long[] times)
0:     {
1:         long max = times.length > 0 ? times[0] : 0;
0:         for(int i = 0; i < times.length; i++)
0:         {
1:             max = Math.max(max, times[i]);
1:         }
1:         return max;
1:     }
1: 
0:     static long avg(long[] times, long min, long max)
0:     {
1:         long sum = 0;
0:         for(int i = 0; i < times.length; i++)
0:         {
1:             sum += times[i];
1:         }
1:         sum -= min;
1:         sum -= max;
0:         return (sum / times.length - 2);
1:     }
1: 
0: 	public void setBatch(int batch) {
0: 		this.batch = batch;
1: 	}
0: 	public void setDelay(long delay) {
0: 		this.delay = delay;
1: 	}
0: 	public void setMessages(int messages) {
0: 		this.messages = messages;
1: 	}
0: 	public void setSize(int size) {
0: 		this.size = size;
1: 	}
0: 	public void setSubscribers(int subscribers) {
0: 		this.subscribers = subscribers;
1: 	}
0: 	public void setUrl(String url) {
0: 		this.url = url;
1: 	}
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:0ef421d
/////////////////////////////////////////////////////////////////////////
0:     	String[] unknown = CommandLineSupport.setOptions(p, argv);
0: 		if (unknown.length > 0) {
0: 			System.out.println("Unknown options: " + Arrays.toString(unknown));
============================================================================