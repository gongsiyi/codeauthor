1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
7:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:ecf89a6: 
1:1a88ac6: package org.apache.activemq.security;
13:1a88ac6: 
1:1a88ac6: import java.security.Principal;
1:1a88ac6: import java.security.cert.X509Certificate;
1:1a88ac6: 
1:1a88ac6: import javax.security.auth.Subject;
1:1a88ac6: import javax.security.auth.callback.CallbackHandler;
1:1a88ac6: import javax.security.auth.login.LoginContext;
1:1a88ac6: 
1:74a7a8b: import org.apache.activemq.broker.Broker;
1:74a7a8b: import org.apache.activemq.broker.BrokerFilter;
1:74a7a8b: import org.apache.activemq.broker.ConnectionContext;
1:74a7a8b: import org.apache.activemq.command.ConnectionInfo;
1:74a7a8b: import org.apache.activemq.jaas.JaasCertificateCallbackHandler;
1:74a7a8b: import org.apache.activemq.jaas.UserPrincipal;
1:74a7a8b: 
1:1a88ac6: /**
1:ecf89a6:  * A JAAS Authentication Broker that uses SSL Certificates. This class will
1:ecf89a6:  * provide the JAAS framework with a JaasCertificateCallbackHandler that will
1:ecf89a6:  * grant JAAS access to incoming connections' SSL certificate chains. NOTE:
1:ecf89a6:  * There is a chance that the incoming connection does not have a valid
1:ecf89a6:  * certificate (has null).
1:1a88ac6:  */
1:67ccfca: public class JaasCertificateAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
1:1a88ac6:     private final String jaasConfiguration;
1:ecf89a6: 
1:1a88ac6:     /**
1:1a88ac6:      * Simple constructor. Leaves everything to superclass.
1:67ccfca:      *
1:1a88ac6:      * @param next The Broker that does the actual work for this Filter.
1:5e05df1:      * @param jaasConfiguration The JAAS domain configuration name (refere to
1:ecf89a6:      *                JAAS documentation).
1:1a88ac6:      */
1:1a88ac6:     public JaasCertificateAuthenticationBroker(Broker next, String jaasConfiguration) {
1:1a88ac6:         super(next);
1:ecf89a6: 
1:ecf89a6:         this.jaasConfiguration = jaasConfiguration;
4:1a88ac6:     }
1:ecf89a6: 
1:1a88ac6:     /**
1:1a88ac6:      * Overridden to allow for authentication based on client certificates.
1:ecf89a6:      * Connections being added will be authenticated based on their certificate
1:ecf89a6:      * chain and the JAAS module specified through the JAAS framework. NOTE: The
1:ecf89a6:      * security context's username will be set to the first UserPrincipal
1:ecf89a6:      * created by the login module.
1:67ccfca:      *
1:1a88ac6:      * @param context The context for the incoming Connection.
1:ecf89a6:      * @param info The ConnectionInfo Command representing the incoming
1:ecf89a6:      *                connection.
1:1a88ac6:      */
1:67ccfca:     @Override
1:1a88ac6:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:ecf89a6: 
1:1a88ac6:         if (context.getSecurityContext() == null) {
1:ecf89a6:             if (!(info.getTransportContext() instanceof X509Certificate[])) {
1:1a88ac6:                 throw new SecurityException("Unable to authenticate transport without SSL certificate.");
1:1a88ac6:             }
1:ecf89a6: 
1:ecf89a6:             // Set the TCCL since it seems JAAS needs it to find the login
1:ecf89a6:             // module classes.
1:1a88ac6:             ClassLoader original = Thread.currentThread().getContextClassLoader();
1:1a88ac6:             Thread.currentThread().setContextClassLoader(JaasAuthenticationBroker.class.getClassLoader());
2:1a88ac6:             try {
1:67ccfca:                 SecurityContext s = authenticate(info.getUserName(), info.getPassword(), (X509Certificate[]) info.getTransportContext());
1:67ccfca:                 context.setSecurityContext(s);
1:1a88ac6:             } finally {
1:1a88ac6:                 Thread.currentThread().setContextClassLoader(original);
1:1a88ac6:             }
1:1a88ac6:         }
1:1a88ac6:         super.addConnection(context, info);
1:1a88ac6:     }
1:ecf89a6: 
1:1a88ac6:     /**
1:1a88ac6:      * Overriding removeConnection to make sure the security context is cleaned.
1:1a88ac6:      */
1:67ccfca:     @Override
1:1a88ac6:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:1a88ac6:         super.removeConnection(context, info, error);
1:ecf89a6: 
1:1a88ac6:         context.setSecurityContext(null);
1:1a88ac6:     }
1:67ccfca: 
1:67ccfca:     @Override
1:67ccfca:     public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:67ccfca:         try {
1:67ccfca:             CallbackHandler callback = new JaasCertificateCallbackHandler(peerCertificates);
1:67ccfca:             LoginContext lc = new LoginContext(jaasConfiguration, callback);
1:67ccfca:             lc.login();
1:67ccfca:             Subject subject = lc.getSubject();
1:67ccfca: 
1:67ccfca:             String dnName = "";
1:67ccfca: 
1:67ccfca:             for (Principal principal : subject.getPrincipals()) {
1:67ccfca:                 if (principal instanceof UserPrincipal) {
1:67ccfca:                     dnName = ((UserPrincipal)principal).getName();
1:67ccfca:                     break;
1:67ccfca:                 }
1:67ccfca:             }
1:67ccfca: 
1:67ccfca:             return new JaasCertificateSecurityContext(dnName, subject, peerCertificates);
1:67ccfca:         } catch (Exception e) {
1:67ccfca:             throw new SecurityException("User name [" + username + "] or password is invalid. " + e.getMessage(), e);
1:67ccfca:         }
1:67ccfca:     }
1:1a88ac6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * @param jaasConfiguration The JAAS domain configuration name (refere to
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: public class JaasCertificateAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 SecurityContext s = authenticate(info.getUserName(), info.getPassword(), (X509Certificate[]) info.getTransportContext());
1:                 context.setSecurityContext(s);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:     @Override
1:     public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:         try {
1:             CallbackHandler callback = new JaasCertificateCallbackHandler(peerCertificates);
1:             LoginContext lc = new LoginContext(jaasConfiguration, callback);
1:             lc.login();
1:             Subject subject = lc.getSubject();
1: 
1:             String dnName = "";
1: 
1:             for (Principal principal : subject.getPrincipals()) {
1:                 if (principal instanceof UserPrincipal) {
1:                     dnName = ((UserPrincipal)principal).getName();
1:                     break;
1:                 }
1:             }
1: 
1:             return new JaasCertificateSecurityContext(dnName, subject, peerCertificates);
1:         } catch (Exception e) {
1:             throw new SecurityException("User name [" + username + "] or password is invalid. " + e.getMessage(), e);
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:  * A JAAS Authentication Broker that uses SSL Certificates. This class will
1:  * provide the JAAS framework with a JaasCertificateCallbackHandler that will
1:  * grant JAAS access to incoming connections' SSL certificate chains. NOTE:
1:  * There is a chance that the incoming connection does not have a valid
1:  * certificate (has null).
1: 
0:      * @param jassConfiguration The JAAS domain configuration name (refere to
1:      *                JAAS documentation).
1: 
1:         this.jaasConfiguration = jaasConfiguration;
1: 
1:      * Connections being added will be authenticated based on their certificate
1:      * chain and the JAAS module specified through the JAAS framework. NOTE: The
1:      * security context's username will be set to the first UserPrincipal
1:      * created by the login module.
1:      * @param info The ConnectionInfo Command representing the incoming
1:      *                connection.
1:             if (!(info.getTransportContext() instanceof X509Certificate[])) {
1: 
1:             // Set the TCCL since it seems JAAS needs it to find the login
1:             // module classes.
0:                     CallbackHandler callback = new JaasCertificateCallbackHandler((X509Certificate[])info.getTransportContext());
1: 
1: 
0:                     for (Iterator iter = subject.getPrincipals().iterator(); iter.hasNext();) {
0:                     SecurityContext s = new JaasCertificateSecurityContext(dnName, subject, (X509Certificate[])info.getTransportContext());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.jaas.JaasCertificateCallbackHandler;
1: import org.apache.activemq.jaas.UserPrincipal;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:6bae959
/////////////////////////////////////////////////////////////////////////
0:                     SecurityContext s = new JaasCertificateSecurityContext(
0:                         dnName, subject, (X509Certificate[])info.getTransportContext());
0:                     throw new SecurityException("User name or password is invalid: " + e.getMessage(), e);
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerFilter;
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.jaas.JaasCertificateCallbackHandler;
0: import org.apache.activemq.jaas.UserPrincipal;
0: import org.apache.activemq.security.JaasAuthenticationBroker.JaasSecurityContext;
1: 
1: import java.security.Principal;
1: import java.security.cert.X509Certificate;
0: import java.util.Iterator;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.login.LoginContext;
1: 
1: /**
0:  * A JAAS Authentication Broker that uses SSL Certificates.
1:  * 
0:  * This class will provide the JAAS framework with a JaasCertificateCallbackHandler that will grant JAAS access to
0:  *      incoming connections' SSL certificate chains. 
0:  * NOTE: There is a chance that the incoming connection does not have a valid certificate (has null).
1:  * 
0:  * @author sepandm@gmail.com (Sepand)
1:  */
0: public class JaasCertificateAuthenticationBroker extends BrokerFilter {
1:     private final String jaasConfiguration;
1:     
1:     /**
1:      * Simple constructor. Leaves everything to superclass.
1:      * 
1:      * @param next The Broker that does the actual work for this Filter.
0:      * @param jassConfiguration The JAAS domain configuration name (refere to JAAS documentation).
1:      */
1:     public JaasCertificateAuthenticationBroker(Broker next, String jaasConfiguration) {
1:         super(next);
1:         
0:         this.jaasConfiguration = jaasConfiguration; 
1:     }
1:     
1:     /**
1:      * Overridden to allow for authentication based on client certificates.
1:      * 
0:      * Connections being added will be authenticated based on their certificate chain and the JAAS module specified
0:      *      through the JAAS framework.
0:      * NOTE: The security context's username will be set to the first UserPrincipal created by the login module.
1:      * 
1:      * @param context The context for the incoming Connection.
0:      * @param info The ConnectionInfo Command representing the incoming connection.
1:      */
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1: 
1:         if (context.getSecurityContext() == null) {
0:             if (!( info.getTransportContext() instanceof X509Certificate[] )) {
1:                 throw new SecurityException("Unable to authenticate transport without SSL certificate.");
1:             }
1:             
0:             // Set the TCCL since it seems JAAS needs it to find the login module classes.
1:             ClassLoader original = Thread.currentThread().getContextClassLoader();
1:             Thread.currentThread().setContextClassLoader(JaasAuthenticationBroker.class.getClassLoader());
1:             try {
0:                 // Do the login.
1:                 try {
0:                     CallbackHandler callback =
0:                         new JaasCertificateCallbackHandler((X509Certificate[])info.getTransportContext());
0:                     LoginContext lc = new LoginContext(jaasConfiguration, callback);
0:                     lc.login();
0:                     Subject subject = lc.getSubject();
1:                     
0:                     String dnName = "";
1:                     
0:                     for (Iterator iter = subject.getPrincipals().iterator(); iter.hasNext(); ) {
0:                         Principal nextPrincipal = (Principal)iter.next();
0:                         if (nextPrincipal instanceof UserPrincipal) {
0:                             dnName = ((UserPrincipal)nextPrincipal).getName();
0:                             break;
1:                         }
1:                     }
1:                     
0:                     SecurityContext s = new JaasSecurityContext(dnName, subject);
0:                     context.setSecurityContext(s);
0:                 } catch (Exception e) {
0:                     throw new SecurityException("User name or password is invalid.", e);
1:                 }
1:             } finally {
1:                 Thread.currentThread().setContextClassLoader(original);
1:             }
1:         }
1:         super.addConnection(context, info);
1:     }
1:     
1:     /**
1:      * Overriding removeConnection to make sure the security context is cleaned.
1:      */
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         super.removeConnection(context, info, error);
1:         
1:         context.setSecurityContext(null);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     for (Principal principal : subject.getPrincipals()) {
0:                         if (principal instanceof UserPrincipal) {
0:                             dnName = ((UserPrincipal)principal).getName();
commit:2a0b489
/////////////////////////////////////////////////////////////////////////
0:                     throw new SecurityException("User name [" + info.getUserName() + "] or password is invalid. " + e.getMessage(), e);
============================================================================