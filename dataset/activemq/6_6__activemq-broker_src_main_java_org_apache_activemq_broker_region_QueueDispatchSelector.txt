1:d4382e4: /**
1:a0a3d63:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0a3d63:  * contributor license agreements.  See the NOTICE file distributed with
1:a0a3d63:  * this work for additional information regarding copyright ownership.
1:a0a3d63:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0a3d63:  * (the "License"); you may not use this file except in compliance with
1:a0a3d63:  * the License.  You may obtain a copy of the License at
2:a0a3d63:  *
1:a0a3d63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:a0a3d63:  * Unless required by applicable law or agreed to in writing, software
1:a0a3d63:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0a3d63:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0a3d63:  * See the License for the specific language governing permissions and
1:a0a3d63:  * limitations under the License.
1:d4382e4:  */
1:d4382e4: package org.apache.activemq.broker.region;
18:d4382e4: 
1:d4382e4: import org.apache.activemq.broker.region.policy.SimpleDispatchSelector;
1:d4382e4: import org.apache.activemq.command.ActiveMQDestination;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d4382e4: 
1:d4382e4: /**
1:d4382e4:  * Queue dispatch policy that determines if a message can be sent to a subscription
1:5e05df1:  *
1:d4382e4:  * @org.apache.xbean.XBean
1:5e05df1:  *
1:d4382e4:  */
1:d4382e4: public class QueueDispatchSelector extends SimpleDispatchSelector {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueueDispatchSelector.class);
1:d4382e4:     private Subscription exclusiveConsumer;
1:85b9c81:     private boolean paused;
1:85b9c81: 
1:d4382e4:     /**
1:d4382e4:      * @param destination
1:d4382e4:      */
1:d4382e4:     public QueueDispatchSelector(ActiveMQDestination destination) {
1:d4382e4:         super(destination);
11:d4382e4:     }
1:5e05df1: 
1:d4382e4:     public Subscription getExclusiveConsumer() {
1:d4382e4:         return exclusiveConsumer;
1:d4382e4:     }
1:d4382e4:     public void setExclusiveConsumer(Subscription exclusiveConsumer) {
1:d4382e4:         this.exclusiveConsumer = exclusiveConsumer;
1:d4382e4:     }
1:5e05df1: 
1:d4382e4:     public boolean isExclusiveConsumer(Subscription s) {
1:d4382e4:         return s == this.exclusiveConsumer;
1:d4382e4:     }
1:5e05df1: 
1:d4382e4:     public boolean canSelect(Subscription subscription,
1:d4382e4:             MessageReference m) throws Exception {
1:5e05df1: 
1:85b9c81:         boolean result = !paused && super.canDispatch(subscription, m);
1:9216c18:         if (result && !subscription.isBrowser()) {
1:227ed96:             result = exclusiveConsumer == null || exclusiveConsumer == subscription;
1:d4382e4:         }
1:d4382e4:         return result;
1:d4382e4:     }
1:85b9c81: 
1:85b9c81:     public void pause() {
1:85b9c81:         paused = true;
1:85b9c81:     }
1:85b9c81: 
1:85b9c81:     public void resume() {
1:85b9c81:         paused = false;
1:85b9c81:     }
1:85b9c81: 
1:85b9c81:     public boolean isPaused() {
1:85b9c81:         return paused;
1:85b9c81:     }
1:d4382e4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
author:gtully
-------------------------------------------------------------------------------
commit:85b9c81
/////////////////////////////////////////////////////////////////////////
1:     private boolean paused;
1: 
/////////////////////////////////////////////////////////////////////////
1:         boolean result = !paused && super.canDispatch(subscription, m);
1: 
1:     public void pause() {
1:         paused = true;
1:     }
1: 
1:     public void resume() {
1:         paused = false;
1:     }
1: 
1:     public boolean isPaused() {
1:         return paused;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:a0a3d63
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueDispatchSelector.class);
commit:227ed96
/////////////////////////////////////////////////////////////////////////
1:             result = exclusiveConsumer == null || exclusiveConsumer == subscription;
commit:977393d
/////////////////////////////////////////////////////////////////////////
0:             if (result) {
commit:807f645
/////////////////////////////////////////////////////////////////////////
0:             if (result && !subscription.isFull()) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:9216c18
/////////////////////////////////////////////////////////////////////////
0:         boolean result =  super.canDispatch(subscription, m);
1:         if (result && !subscription.isBrowser()) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
1:  */
1: package org.apache.activemq.broker.region;
1: 
0: import java.io.IOException;
0: import java.util.List;
1: 
0: import javax.jms.JMSException;
1: 
0: import org.apache.activemq.broker.region.group.MessageGroupMap;
1: import org.apache.activemq.broker.region.policy.SimpleDispatchSelector;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Queue dispatch policy that determines if a message can be sent to a subscription
0:  * 
1:  * @org.apache.xbean.XBean
0:  * @version $Revision$
1:  */
1: public class QueueDispatchSelector extends SimpleDispatchSelector {
0:     private static final Log LOG = LogFactory.getLog(QueueDispatchSelector.class);
1:     private Subscription exclusiveConsumer;
1:    
1:    
1:     /**
1:      * @param destination
1:      */
1:     public QueueDispatchSelector(ActiveMQDestination destination) {
1:         super(destination);
1:     }
1:     
1:     public Subscription getExclusiveConsumer() {
1:         return exclusiveConsumer;
1:     }
1:     public void setExclusiveConsumer(Subscription exclusiveConsumer) {
1:         this.exclusiveConsumer = exclusiveConsumer;
1:     }
1:     
1:     public boolean isExclusiveConsumer(Subscription s) {
1:         return s == this.exclusiveConsumer;
1:     }
1:     
1:        
1:     public boolean canSelect(Subscription subscription,
1:             MessageReference m) throws Exception {
0:         if (subscription.isBrowser() && super.canDispatch(subscription, m)) {
0:             return true;
1:         }
1:        
0:         boolean result =  super.canDispatch(subscription, m) ;
0:         if (result) {
0:             result = exclusiveConsumer == null
0:                     || exclusiveConsumer == subscription;
0:             if (result) {
0:                 QueueMessageReference node = (QueueMessageReference) m;
0:                 // Keep message groups together.
0:                 String groupId = node.getGroupID();
0:                 int sequence = node.getGroupSequence();
0:                 if (groupId != null) {
0:                     MessageGroupMap messageGroupOwners = ((Queue) node
0:                             .getRegionDestination()).getMessageGroupOwners();
1: 
0:                     // If we can own the first, then no-one else should own the
0:                     // rest.
0:                     if (sequence == 1) {
0:                         assignGroup(subscription, messageGroupOwners, node,groupId);
0:                     }else {
1:     
0:                         // Make sure that the previous owner is still valid, we may
0:                         // need to become the new owner.
0:                         ConsumerId groupOwner;
1:     
0:                         groupOwner = messageGroupOwners.get(groupId);
0:                         if (groupOwner == null) {
0:                             assignGroup(subscription, messageGroupOwners, node,groupId);
0:                         } else {
0:                             if (groupOwner.equals(subscription.getConsumerInfo().getConsumerId())) {
0:                                 // A group sequence < 1 is an end of group signal.
0:                                 if (sequence < 0) {
0:                                     messageGroupOwners.removeGroup(groupId);
1:                                 }
0:                             } else {
0:                                 result = false;
1:                             }
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         return result;
1:     }
1:     
0:     protected void assignGroup(Subscription subs,MessageGroupMap messageGroupOwners, MessageReference n, String groupId) throws IOException {
0:         messageGroupOwners.put(groupId, subs.getConsumerInfo().getConsumerId());
0:         Message message = n.getMessage();
0:         if (message instanceof ActiveMQMessage) {
0:             ActiveMQMessage activeMessage = (ActiveMQMessage)message;
0:             try {
0:                 activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
0:             } catch (JMSException e) {
0:                 LOG.warn("Failed to set boolean header: " + e, e);
1:             }
1:         }
1:     }
1:     
1:     
1:     
1:     
1: }
============================================================================