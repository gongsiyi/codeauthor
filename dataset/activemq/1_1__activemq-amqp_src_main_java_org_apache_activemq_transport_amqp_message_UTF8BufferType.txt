1:9ec6ee4: /*
1:9ec6ee4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9ec6ee4:  * contributor license agreements.  See the NOTICE file distributed with
1:9ec6ee4:  * this work for additional information regarding copyright ownership.
1:9ec6ee4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9ec6ee4:  * (the "License"); you may not use this file except in compliance with
1:9ec6ee4:  * the License.  You may obtain a copy of the License at
1:9ec6ee4:  *
1:9ec6ee4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ec6ee4:  *
1:9ec6ee4:  * Unless required by applicable law or agreed to in writing, software
1:9ec6ee4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ec6ee4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ec6ee4:  * See the License for the specific language governing permissions and
1:9ec6ee4:  * limitations under the License.
1:9ec6ee4:  */
1:9ec6ee4: package org.apache.activemq.transport.amqp.message;
1:9ec6ee4: 
1:9ec6ee4: import java.util.Arrays;
1:9ec6ee4: import java.util.Collection;
1:9ec6ee4: 
1:9ec6ee4: import org.apache.qpid.proton.codec.DecoderImpl;
1:9ec6ee4: import org.apache.qpid.proton.codec.EncoderImpl;
1:9ec6ee4: import org.apache.qpid.proton.codec.EncodingCodes;
1:9ec6ee4: import org.apache.qpid.proton.codec.PrimitiveType;
1:9ec6ee4: import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;
1:9ec6ee4: import org.apache.qpid.proton.codec.TypeEncoding;
1:9ec6ee4: import org.apache.qpid.proton.codec.WritableBuffer;
1:9ec6ee4: import org.fusesource.hawtbuf.UTF8Buffer;
1:9ec6ee4: 
1:9ec6ee4: /**
1:9ec6ee4:  * AMQP Type used to allow to proton-j codec to deal with UTF8Buffer types as if
1:9ec6ee4:  * they were String elements.
1:9ec6ee4:  */
1:9ec6ee4: public class UTF8BufferType implements PrimitiveType<UTF8Buffer> {
1:9ec6ee4: 
1:9ec6ee4:     private final UTF8BufferEncoding largeBufferEncoding;
1:9ec6ee4:     private final UTF8BufferEncoding smallBufferEncoding;
1:9ec6ee4: 
1:9ec6ee4:     public UTF8BufferType(EncoderImpl encoder, DecoderImpl decoder) {
1:9ec6ee4:         this.largeBufferEncoding = new LargeUTF8BufferEncoding(encoder, decoder);
1:9ec6ee4:         this.smallBufferEncoding = new SmallUTF8BufferEncoding(encoder, decoder);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Override
1:9ec6ee4:     public Class<UTF8Buffer> getTypeClass() {
1:9ec6ee4:         return UTF8Buffer.class;
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Override
1:9ec6ee4:     public PrimitiveTypeEncoding<UTF8Buffer> getEncoding(UTF8Buffer value) {
1:9ec6ee4:         return value.getLength() <= 255 ? smallBufferEncoding : largeBufferEncoding;
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Override
1:9ec6ee4:     public PrimitiveTypeEncoding<UTF8Buffer> getCanonicalEncoding() {
1:9ec6ee4:         return largeBufferEncoding;
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Override
1:9ec6ee4:     public Collection<? extends PrimitiveTypeEncoding<UTF8Buffer>> getAllEncodings() {
1:9ec6ee4:         return Arrays.asList(smallBufferEncoding, largeBufferEncoding);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Override
1:9ec6ee4:     public void write(UTF8Buffer value) {
1:9ec6ee4:         final TypeEncoding<UTF8Buffer> encoding = getEncoding(value);
1:9ec6ee4:         encoding.writeConstructor();
1:9ec6ee4:         encoding.writeValue(value);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     public abstract class UTF8BufferEncoding implements PrimitiveTypeEncoding<UTF8Buffer> {
1:9ec6ee4: 
1:9ec6ee4:         private final EncoderImpl encoder;
1:9ec6ee4:         private final DecoderImpl decoder;
1:9ec6ee4: 
1:9ec6ee4:         public UTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:9ec6ee4:             this.encoder = encoder;
1:9ec6ee4:             this.decoder = decoder;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public int getConstructorSize() {
1:9ec6ee4:             return 1;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public boolean isFixedSizeVal() {
1:9ec6ee4:             return false;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public boolean encodesJavaPrimitive() {
1:9ec6ee4:             return false;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         /**
1:9ec6ee4:          * @return the number of bytes the size portion of the encoded value requires.
1:9ec6ee4:          */
1:9ec6ee4:         public abstract int getSizeBytes();
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public void writeConstructor() {
1:9ec6ee4:             getEncoder().writeRaw(getEncodingCode());
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public void writeValue(UTF8Buffer value) {
1:9ec6ee4:             writeSize(value);
1:9ec6ee4:             WritableBuffer buffer = getEncoder().getBuffer();
1:9ec6ee4:             buffer.put(value.getData(), value.getOffset(), value.getLength());
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         /**
1:9ec6ee4:          * Write the size of the buffer using the appropriate type (byte or int) depending
1:9ec6ee4:          * on the encoding type being used.
1:9ec6ee4:          *
1:9ec6ee4:          * @param value
1:9ec6ee4:          *      The UTF8Buffer value that is being encoded.
1:9ec6ee4:          */
1:9ec6ee4:         public abstract void writeSize(UTF8Buffer value);
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public int getValueSize(UTF8Buffer value) {
1:9ec6ee4:             return getSizeBytes() + value.getLength();
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public Class<UTF8Buffer> getTypeClass() {
1:9ec6ee4:             return UTF8Buffer.class;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public PrimitiveType<UTF8Buffer> getType() {
1:9ec6ee4:             return UTF8BufferType.this;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public boolean encodesSuperset(TypeEncoding<UTF8Buffer> encoding) {
1:9ec6ee4:             return (getType() == encoding.getType());
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public UTF8Buffer readValue() {
1:9ec6ee4:             throw new UnsupportedOperationException("No decoding to UTF8Buffer exists");
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public void skipValue() {
1:9ec6ee4:             throw new UnsupportedOperationException("No decoding to UTF8Buffer exists");
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         public DecoderImpl getDecoder() {
1:9ec6ee4:             return decoder;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         public EncoderImpl getEncoder() {
1:9ec6ee4:             return encoder;
1:9ec6ee4:         }
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     public class LargeUTF8BufferEncoding extends UTF8BufferEncoding {
1:9ec6ee4: 
1:9ec6ee4:         public LargeUTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:9ec6ee4:             super(encoder, decoder);
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public byte getEncodingCode() {
1:9ec6ee4:             return EncodingCodes.STR32;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public int getSizeBytes() {
1:9ec6ee4:             return Integer.BYTES;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public void writeSize(UTF8Buffer value) {
1:9ec6ee4:             getEncoder().getBuffer().putInt(value.getLength());
1:9ec6ee4:         }
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     public class SmallUTF8BufferEncoding extends UTF8BufferEncoding {
1:9ec6ee4: 
1:9ec6ee4:         public SmallUTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:9ec6ee4:             super(encoder, decoder);
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public byte getEncodingCode() {
1:9ec6ee4:             return EncodingCodes.STR8;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public int getSizeBytes() {
1:9ec6ee4:             return Byte.BYTES;
1:9ec6ee4:         }
1:9ec6ee4: 
1:9ec6ee4:         @Override
1:9ec6ee4:         public void writeSize(UTF8Buffer value) {
1:9ec6ee4:             getEncoder().getBuffer().put((byte) value.getLength());
1:9ec6ee4:         }
1:9ec6ee4:     }
1:9ec6ee4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ec6ee4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.qpid.proton.codec.DecoderImpl;
1: import org.apache.qpid.proton.codec.EncoderImpl;
1: import org.apache.qpid.proton.codec.EncodingCodes;
1: import org.apache.qpid.proton.codec.PrimitiveType;
1: import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;
1: import org.apache.qpid.proton.codec.TypeEncoding;
1: import org.apache.qpid.proton.codec.WritableBuffer;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: 
1: /**
1:  * AMQP Type used to allow to proton-j codec to deal with UTF8Buffer types as if
1:  * they were String elements.
1:  */
1: public class UTF8BufferType implements PrimitiveType<UTF8Buffer> {
1: 
1:     private final UTF8BufferEncoding largeBufferEncoding;
1:     private final UTF8BufferEncoding smallBufferEncoding;
1: 
1:     public UTF8BufferType(EncoderImpl encoder, DecoderImpl decoder) {
1:         this.largeBufferEncoding = new LargeUTF8BufferEncoding(encoder, decoder);
1:         this.smallBufferEncoding = new SmallUTF8BufferEncoding(encoder, decoder);
1:     }
1: 
1:     @Override
1:     public Class<UTF8Buffer> getTypeClass() {
1:         return UTF8Buffer.class;
1:     }
1: 
1:     @Override
1:     public PrimitiveTypeEncoding<UTF8Buffer> getEncoding(UTF8Buffer value) {
1:         return value.getLength() <= 255 ? smallBufferEncoding : largeBufferEncoding;
1:     }
1: 
1:     @Override
1:     public PrimitiveTypeEncoding<UTF8Buffer> getCanonicalEncoding() {
1:         return largeBufferEncoding;
1:     }
1: 
1:     @Override
1:     public Collection<? extends PrimitiveTypeEncoding<UTF8Buffer>> getAllEncodings() {
1:         return Arrays.asList(smallBufferEncoding, largeBufferEncoding);
1:     }
1: 
1:     @Override
1:     public void write(UTF8Buffer value) {
1:         final TypeEncoding<UTF8Buffer> encoding = getEncoding(value);
1:         encoding.writeConstructor();
1:         encoding.writeValue(value);
1:     }
1: 
1:     public abstract class UTF8BufferEncoding implements PrimitiveTypeEncoding<UTF8Buffer> {
1: 
1:         private final EncoderImpl encoder;
1:         private final DecoderImpl decoder;
1: 
1:         public UTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:             this.encoder = encoder;
1:             this.decoder = decoder;
1:         }
1: 
1:         @Override
1:         public int getConstructorSize() {
1:             return 1;
1:         }
1: 
1:         @Override
1:         public boolean isFixedSizeVal() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean encodesJavaPrimitive() {
1:             return false;
1:         }
1: 
1:         /**
1:          * @return the number of bytes the size portion of the encoded value requires.
1:          */
1:         public abstract int getSizeBytes();
1: 
1:         @Override
1:         public void writeConstructor() {
1:             getEncoder().writeRaw(getEncodingCode());
1:         }
1: 
1:         @Override
1:         public void writeValue(UTF8Buffer value) {
1:             writeSize(value);
1:             WritableBuffer buffer = getEncoder().getBuffer();
1:             buffer.put(value.getData(), value.getOffset(), value.getLength());
1:         }
1: 
1:         /**
1:          * Write the size of the buffer using the appropriate type (byte or int) depending
1:          * on the encoding type being used.
1:          *
1:          * @param value
1:          *      The UTF8Buffer value that is being encoded.
1:          */
1:         public abstract void writeSize(UTF8Buffer value);
1: 
1:         @Override
1:         public int getValueSize(UTF8Buffer value) {
1:             return getSizeBytes() + value.getLength();
1:         }
1: 
1:         @Override
1:         public Class<UTF8Buffer> getTypeClass() {
1:             return UTF8Buffer.class;
1:         }
1: 
1:         @Override
1:         public PrimitiveType<UTF8Buffer> getType() {
1:             return UTF8BufferType.this;
1:         }
1: 
1:         @Override
1:         public boolean encodesSuperset(TypeEncoding<UTF8Buffer> encoding) {
1:             return (getType() == encoding.getType());
1:         }
1: 
1:         @Override
1:         public UTF8Buffer readValue() {
1:             throw new UnsupportedOperationException("No decoding to UTF8Buffer exists");
1:         }
1: 
1:         @Override
1:         public void skipValue() {
1:             throw new UnsupportedOperationException("No decoding to UTF8Buffer exists");
1:         }
1: 
1:         public DecoderImpl getDecoder() {
1:             return decoder;
1:         }
1: 
1:         public EncoderImpl getEncoder() {
1:             return encoder;
1:         }
1:     }
1: 
1:     public class LargeUTF8BufferEncoding extends UTF8BufferEncoding {
1: 
1:         public LargeUTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:             super(encoder, decoder);
1:         }
1: 
1:         @Override
1:         public byte getEncodingCode() {
1:             return EncodingCodes.STR32;
1:         }
1: 
1:         @Override
1:         public int getSizeBytes() {
1:             return Integer.BYTES;
1:         }
1: 
1:         @Override
1:         public void writeSize(UTF8Buffer value) {
1:             getEncoder().getBuffer().putInt(value.getLength());
1:         }
1:     }
1: 
1:     public class SmallUTF8BufferEncoding extends UTF8BufferEncoding {
1: 
1:         public SmallUTF8BufferEncoding(EncoderImpl encoder, DecoderImpl decoder) {
1:             super(encoder, decoder);
1:         }
1: 
1:         @Override
1:         public byte getEncodingCode() {
1:             return EncodingCodes.STR8;
1:         }
1: 
1:         @Override
1:         public int getSizeBytes() {
1:             return Byte.BYTES;
1:         }
1: 
1:         @Override
1:         public void writeSize(UTF8Buffer value) {
1:             getEncoder().getBuffer().put((byte) value.getLength());
1:         }
1:     }
1: }
============================================================================