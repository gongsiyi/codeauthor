1:ccaf083: /**
1:ccaf083:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ccaf083:  * contributor license agreements.  See the NOTICE file distributed with
1:ccaf083:  * this work for additional information regarding copyright ownership.
1:ccaf083:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ccaf083:  * (the "License"); you may not use this file except in compliance with
1:ccaf083:  * the License.  You may obtain a copy of the License at
1:ccaf083:  *
1:ccaf083:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ccaf083:  *
1:ccaf083:  * Unless required by applicable law or agreed to in writing, software
1:ccaf083:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ccaf083:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:ccaf083:  * See the License for the specific language governing permissions and
1:ccaf083:  * limitations under the License.
1:ccaf083:  */
1:ccaf083: package org.apache.activemq.usecases;
1:ccaf083: 
1:ccaf083: import static org.junit.Assert.assertTrue;
1:ccaf083: 
1:ccaf083: import java.io.File;
1:ccaf083: import java.util.concurrent.TimeUnit;
1:ccaf083: 
1:ccaf083: import javax.jms.Connection;
1:ccaf083: import javax.jms.ConnectionFactory;
1:ccaf083: import javax.jms.JMSException;
1:ccaf083: import javax.jms.Message;
1:ccaf083: import javax.jms.MessageConsumer;
1:ccaf083: import javax.jms.MessageProducer;
1:ccaf083: import javax.jms.Session;
1:ccaf083: 
1:ccaf083: import org.apache.activemq.ActiveMQConnectionFactory;
1:ccaf083: import org.apache.activemq.broker.BrokerFactory;
1:ccaf083: import org.apache.activemq.broker.BrokerService;
1:ccaf083: import org.apache.activemq.command.ActiveMQTopic;
1:ccaf083: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:ccaf083: import org.apache.activemq.util.Wait;
1:ccaf083: import org.junit.After;
1:ccaf083: import org.junit.Before;
1:ccaf083: import org.junit.Test;
1:ccaf083: import org.slf4j.Logger;
1:ccaf083: import org.slf4j.LoggerFactory;
1:ccaf083: 
1:ccaf083: public class DurableSubSelectorDelayWithRestartTest {
1:ccaf083: 
1:ccaf083:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubSelectorDelayWithRestartTest.class);
1:ccaf083: 
1:ccaf083:     public static final long RUNTIME = 1 * 60 * 1000;
1:ccaf083: 
1:ccaf083:     private boolean RESTART = true;
1:ccaf083:     private int NUMBER_SUBSCRIBERS = 3;
1:ccaf083: 
1:ccaf083:     private BrokerService broker;
1:ccaf083:     private ActiveMQTopic topic;
1:ccaf083: 
1:ccaf083:     @Test
1:ccaf083:     public void testProcess() throws Exception {
1:ccaf083: 
1:ccaf083:         MsgProducer msgProducer = new MsgProducer();
1:ccaf083:         msgProducer.start();
1:ccaf083: 
1:ccaf083:         DurableSubscriber subscribers[] = new DurableSubscriber[NUMBER_SUBSCRIBERS];
1:ccaf083: 
1:ccaf083:         for (int i = 0; i < subscribers.length - 1; i++) {
1:ccaf083:             subscribers[i] = new DurableSubscriber(i);
1:ccaf083:             subscribers[i].process();
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         // wait for server to finish
1:ccaf083:         msgProducer.join();
1:ccaf083: 
1:ccaf083:         //for the last subscriber pop one message into the topic.
1:ccaf083:         subscribers[(subscribers.length - 1)] = new DurableSubscriber((subscribers.length - 1));
1:ccaf083:         subscribers[(subscribers.length - 1)].subscribe();
1:ccaf083:         MsgProducer msgProducer2 = new MsgProducer();
1:ccaf083:         msgProducer2.send();
1:ccaf083:         subscribers[(subscribers.length - 1)].process();
1:ccaf083: 
1:ccaf083:         // unsubscribe all, but the last subscriber.
1:ccaf083:         for (int j = 0; j < (subscribers.length - 1); j++) {
1:ccaf083:             LOG.info("Unsubscribing subscriber " + subscribers[j]);
1:ccaf083:             subscribers[j].unsubscribe();
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:2efb6df:         assertTrue("small number of journal files should be left ", Wait.waitFor(new Wait.Condition() {
1:ccaf083: 
1:ccaf083:             @Override
1:ccaf083:             public boolean isSatisified() throws Exception {
1:2efb6df:                 LOG.info("journal data file count - expected {} actual {}", 4, pa.getStore().getJournal().getFileMap().size());
1:42b606d:                 return pa.getStore().getJournal().getFileMap().size() <= 4;
1:ccaf083:             }
1:ccaf083:         }, TimeUnit.MINUTES.toMillis(3)));
1:ccaf083: 
1:ccaf083:         LOG.info("DONE.");
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     /**
1:ccaf083:      * Message Producer
1:ccaf083:      */
1:ccaf083:     final class MsgProducer extends Thread {
1:ccaf083: 
1:ccaf083:          final String url = "failover:(tcp://localhost:61656)";
1:ccaf083: 
1:ccaf083:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1:ccaf083: 
1:ccaf083:         int transRover = 0;
1:ccaf083:         int messageRover = 0;
1:ccaf083: 
1:ccaf083:         public MsgProducer() {
1:ccaf083:             super("MsgProducer");
1:ccaf083:             setDaemon(true);
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         @Override
1:ccaf083:         public void run() {
1:ccaf083:             long endTime = RUNTIME + System.currentTimeMillis();
1:ccaf083: 
1:ccaf083:             try {
1:ccaf083:                 while (endTime > System.currentTimeMillis()) {
1:ccaf083:                     Thread.sleep(400);
1:ccaf083:                     send();
1:ccaf083: 
1:ccaf083:                     //restart broker all the time
1:ccaf083:                     if(RESTART){
1:ccaf083:                      destroyBroker();
1:ccaf083:                      startBroker(false);
1:ccaf083:                     }
1:ccaf083:                 }
1:ccaf083:             } catch (Throwable e) {
1:ccaf083:                e.printStackTrace(System.out);
1:ccaf083:                throw new RuntimeException(e);
1:ccaf083:             }
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         public void send() throws JMSException {
1:ccaf083: 
1:ccaf083:             int trans = ++transRover;
1:ccaf083:             boolean relevantTrans = true;
1:ccaf083:             int count = 40;
1:ccaf083: 
1:ccaf083:             LOG.info("Sending Trans[id=" + trans + ", count="
1:ccaf083:                     + count + "]");
1:ccaf083: 
1:ccaf083:             Connection con = cf.createConnection();
1:ccaf083: 
1:ccaf083:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccaf083: 
1:ccaf083:             MessageProducer prod = sess.createProducer(null);
1:ccaf083: 
1:ccaf083:             for (int i = 0; i < count; i++) {
1:ccaf083:                 Message message = sess.createMessage();
1:ccaf083:                 message.setIntProperty("ID", ++messageRover);
1:ccaf083:                 message.setIntProperty("TRANS", trans);
1:ccaf083:                 message.setBooleanProperty("RELEVANT", false);
1:ccaf083:                 prod.send(topic, message);
1:ccaf083:             }
1:ccaf083: 
1:ccaf083:             Message message = sess.createMessage();
1:ccaf083:             message.setIntProperty("ID", ++messageRover);
1:ccaf083:             message.setIntProperty("TRANS", trans);
1:ccaf083:             message.setBooleanProperty("COMMIT", true);
1:ccaf083:             message.setBooleanProperty("RELEVANT", relevantTrans);
1:ccaf083:             prod.send(topic, message);
1:ccaf083: 
1:ccaf083:             LOG.info("Committed Trans[id=" + trans + ", count="
1:ccaf083:                     + count + "], ID=" + messageRover);
1:ccaf083: 
2:ccaf083:             sess.close();
2:ccaf083:             con.close();
1:ccaf083:         }
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     /**
1:ccaf083:      * Consumes massages from a durable subscription. Goes online/offline
1:ccaf083:      * periodically. Checks the incoming messages against the sent messages of
1:ccaf083:      * the server.
1:ccaf083:      */
1:ccaf083:     private final class DurableSubscriber {
1:ccaf083: 
1:ccaf083:         final String url = "failover:(tcp://localhost:61656)";
1:ccaf083: 
1:ccaf083:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1:ccaf083: 
1:ccaf083:         private final String subName ;
1:ccaf083: 
1:ccaf083:         private final int id;
1:ccaf083:         private final String conClientId;
1:ccaf083:         private final String selector;
1:ccaf083: 
1:ccaf083:         public DurableSubscriber(int id) throws JMSException {
1:ccaf083:             this.id = id;
1:ccaf083:             conClientId = "cli" + id;
1:ccaf083:             subName = "subscription"+ id;
1:ccaf083:             selector ="RELEVANT = true";
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         private void process() throws JMSException {
1:ccaf083:             long end = System.currentTimeMillis() + 20000;
1:ccaf083:             int transCount = 0;
1:ccaf083: 
1:ccaf083:             LOG.info(toString() + " ONLINE.");
1:ccaf083:             Connection con = openConnection();
1:ccaf083: 
1:ccaf083:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccaf083:             MessageConsumer consumer = sess.createDurableSubscriber(topic, subName, selector, false);
1:ccaf083: 
1:ccaf083:             try {
1:ccaf083: 
1:ccaf083:                 do {
1:ccaf083:                     long max = end - System.currentTimeMillis();
1:ccaf083: 
1:ccaf083:                     if (max <= 0) {
1:ccaf083:                             break;
1:ccaf083:                     }
1:ccaf083: 
1:ccaf083:                     Message message = consumer.receive(max);
1:ccaf083:                     if (message == null) {
1:ccaf083:                         continue;
1:ccaf083:                     }
1:ccaf083: 
1:ccaf083:                     LOG.info("Received Trans[id="
1:ccaf083:                             + message.getIntProperty("TRANS") + ", count="
1:ccaf083:                             + transCount + "] in " + this + ".");
1:ccaf083: 
1:ccaf083:                 } while (true);
1:ccaf083: 
1:ccaf083:             } finally {
1:a7533ba:                 try {
1:a7533ba:                     sess.close();
1:a7533ba:                     con.close();
1:a7533ba:                 } catch (Exception e) {}
1:ccaf083: 
1:ccaf083:                 LOG.info(toString() + " OFFLINE.");
1:ccaf083:             }
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         private Connection openConnection() throws JMSException {
1:ccaf083:             Connection con = cf.createConnection();
1:ccaf083:             con.setClientID(conClientId);
1:ccaf083:             con.start();
1:ccaf083:             return con;
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         public void subscribe() throws JMSException{
1:ccaf083:             LOG.info(toString() + "SUBSCRIBING");
1:ccaf083:             Connection con = openConnection();
1:ccaf083: 
1:ccaf083:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccaf083:             sess.createDurableSubscriber(topic, subName, selector, false);
1:ccaf083: 
1:ccaf083:             sess.close();
1:ccaf083:             con.close();
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         private void unsubscribe() throws JMSException {
1:ccaf083:             Connection con = openConnection();
1:ccaf083:             Session session = con
1:ccaf083:                     .createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccaf083:             session.unsubscribe(subName);
1:ccaf083:             session.close();
1:ccaf083:             con.close();
1:ccaf083:         }
1:ccaf083: 
1:ccaf083:         @Override
1:ccaf083:         public String toString() {
1:ccaf083:             return "DurableSubscriber[id=" + id + "]";
1:ccaf083:         }
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     @Before
1:ccaf083:     public void setUp() throws Exception {
1:ccaf083:         topic = new ActiveMQTopic("TopicT");
1:ccaf083:         startBroker();
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     @After
1:ccaf083:     public void tearDown() throws Exception {
1:ccaf083:         destroyBroker();
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     private void startBroker() throws Exception {
1:ccaf083:         startBroker(true);
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:ccaf083:         if (broker != null)
1:ccaf083:             return;
1:ccaf083: 
1:ccaf083:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:ccaf083:         broker.setBrokerName(getName());
1:ccaf083:         broker.setAdvisorySupport(false);
1:ccaf083:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:ccaf083: 
1:ccaf083:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
1:ccaf083:         if (deleteAllMessages)
1:ccaf083:             delete(kahadbData);
1:ccaf083: 
1:ccaf083:         broker.setPersistent(true);
1:ccaf083:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:ccaf083:         kahadb.setDirectory(kahadbData);
1:ccaf083:         kahadb.setJournalMaxFileLength(  10 * 1024);
1:2efb6df:         kahadb.setCleanupInterval(5000);
1:ccaf083:         broker.setPersistenceAdapter(kahadb);
1:ccaf083: 
1:ccaf083:         broker.addConnector("tcp://localhost:61656");
1:ccaf083: 
1:ccaf083:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:ccaf083:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:ccaf083:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1:ccaf083: 
1:ccaf083:         LOG.info(toString() + "Starting Broker...");
1:ccaf083:         broker.start();
1:ccaf083:         broker.waitUntilStarted();
1:ccaf083: 
1:ccaf083:         LOG.info(toString() + " Broker started!!");
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     protected static String getName() {
1:ccaf083:         return "DurableSubSelectorDelayTest";
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     private static boolean delete(File path) {
1:ccaf083:         if (path == null)
1:ccaf083:             return true;
1:ccaf083: 
1:ccaf083:         if (path.isDirectory()) {
1:ccaf083:             for (File file : path.listFiles()) {
1:ccaf083:                 delete(file);
1:ccaf083:             }
1:ccaf083:         }
1:ccaf083:         return path.delete();
1:ccaf083:     }
1:ccaf083: 
1:ccaf083:     private void destroyBroker() throws Exception {
1:ccaf083:         if (broker == null)
1:ccaf083:             return;
1:ccaf083: 
1:ccaf083:         broker.stop();
1:ccaf083:         broker = null;
1:ccaf083:     }
1:ccaf083: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:42b606d
/////////////////////////////////////////////////////////////////////////
1:                 return pa.getStore().getJournal().getFileMap().size() <= 4;
commit:2efb6df
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("small number of journal files should be left ", Wait.waitFor(new Wait.Condition() {
1:                 LOG.info("journal data file count - expected {} actual {}", 4, pa.getStore().getJournal().getFileMap().size());
/////////////////////////////////////////////////////////////////////////
1:         kahadb.setCleanupInterval(5000);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a7533ba
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     sess.close();
1:                     con.close();
1:                 } catch (Exception e) {}
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:ccaf083
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubSelectorDelayWithRestartTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubSelectorDelayWithRestartTest.class);
1: 
1:     public static final long RUNTIME = 1 * 60 * 1000;
1: 
1:     private boolean RESTART = true;
1:     private int NUMBER_SUBSCRIBERS = 3;
1: 
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
1: 
1:     @Test
1:     public void testProcess() throws Exception {
1: 
1:         MsgProducer msgProducer = new MsgProducer();
1:         msgProducer.start();
1: 
1:         DurableSubscriber subscribers[] = new DurableSubscriber[NUMBER_SUBSCRIBERS];
1: 
1:         for (int i = 0; i < subscribers.length - 1; i++) {
1:             subscribers[i] = new DurableSubscriber(i);
1:             subscribers[i].process();
1:         }
1: 
1:         // wait for server to finish
1:         msgProducer.join();
1: 
1:         //for the last subscriber pop one message into the topic.
1:         subscribers[(subscribers.length - 1)] = new DurableSubscriber((subscribers.length - 1));
1:         subscribers[(subscribers.length - 1)].subscribe();
1:         MsgProducer msgProducer2 = new MsgProducer();
1:         msgProducer2.send();
1:         subscribers[(subscribers.length - 1)].process();
1: 
1:         // unsubscribe all, but the last subscriber.
1:         for (int j = 0; j < (subscribers.length - 1); j++) {
1:             LOG.info("Unsubscribing subscriber " + subscribers[j]);
1:             subscribers[j].unsubscribe();
1:         }
1: 
1:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         assertTrue("only one journal file should be left ", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return pa.getStore().getJournal().getFileMap().size() < 4;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(3)));
1: 
1:         LOG.info("DONE.");
1:     }
1: 
1:     /**
1:      * Message Producer
1:      */
1:     final class MsgProducer extends Thread {
1: 
1:          final String url = "failover:(tcp://localhost:61656)";
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
1:         int transRover = 0;
1:         int messageRover = 0;
1: 
1:         public MsgProducer() {
1:             super("MsgProducer");
1:             setDaemon(true);
1:         }
1: 
1:         @Override
1:         public void run() {
1:             long endTime = RUNTIME + System.currentTimeMillis();
1: 
1:             try {
1:                 while (endTime > System.currentTimeMillis()) {
1:                     Thread.sleep(400);
1:                     send();
1: 
1:                     //restart broker all the time
1:                     if(RESTART){
1:                      destroyBroker();
1:                      startBroker(false);
1:                     }
1:                 }
1:             } catch (Throwable e) {
1:                e.printStackTrace(System.out);
1:                throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         public void send() throws JMSException {
1: 
1:             int trans = ++transRover;
1:             boolean relevantTrans = true;
1:             int count = 40;
1: 
1:             LOG.info("Sending Trans[id=" + trans + ", count="
1:                     + count + "]");
1: 
1:             Connection con = cf.createConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             MessageProducer prod = sess.createProducer(null);
1: 
1:             for (int i = 0; i < count; i++) {
1:                 Message message = sess.createMessage();
1:                 message.setIntProperty("ID", ++messageRover);
1:                 message.setIntProperty("TRANS", trans);
1:                 message.setBooleanProperty("RELEVANT", false);
1:                 prod.send(topic, message);
1:             }
1: 
1:             Message message = sess.createMessage();
1:             message.setIntProperty("ID", ++messageRover);
1:             message.setIntProperty("TRANS", trans);
1:             message.setBooleanProperty("COMMIT", true);
1:             message.setBooleanProperty("RELEVANT", relevantTrans);
1:             prod.send(topic, message);
1: 
1:             LOG.info("Committed Trans[id=" + trans + ", count="
1:                     + count + "], ID=" + messageRover);
1: 
1:             sess.close();
1:             con.close();
1:         }
1:     }
1: 
1:     /**
1:      * Consumes massages from a durable subscription. Goes online/offline
1:      * periodically. Checks the incoming messages against the sent messages of
1:      * the server.
1:      */
1:     private final class DurableSubscriber {
1: 
1:         final String url = "failover:(tcp://localhost:61656)";
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
1:         private final String subName ;
1: 
1:         private final int id;
1:         private final String conClientId;
1:         private final String selector;
1: 
1:         public DurableSubscriber(int id) throws JMSException {
1:             this.id = id;
1:             conClientId = "cli" + id;
1:             subName = "subscription"+ id;
1:             selector ="RELEVANT = true";
1:         }
1: 
1:         private void process() throws JMSException {
1:             long end = System.currentTimeMillis() + 20000;
1:             int transCount = 0;
1: 
1:             LOG.info(toString() + " ONLINE.");
1:             Connection con = openConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = sess.createDurableSubscriber(topic, subName, selector, false);
1: 
1:             try {
1: 
1:                 do {
1:                     long max = end - System.currentTimeMillis();
1: 
1:                     if (max <= 0) {
1:                             break;
1:                     }
1: 
1:                     Message message = consumer.receive(max);
1:                     if (message == null) {
1:                         continue;
1:                     }
1: 
1:                     LOG.info("Received Trans[id="
1:                             + message.getIntProperty("TRANS") + ", count="
1:                             + transCount + "] in " + this + ".");
1: 
1:                 } while (true);
1: 
1:             } finally {
1:                 sess.close();
1:                 con.close();
1: 
1:                 LOG.info(toString() + " OFFLINE.");
1:             }
1:         }
1: 
1:         private Connection openConnection() throws JMSException {
1:             Connection con = cf.createConnection();
1:             con.setClientID(conClientId);
1:             con.start();
1:             return con;
1:         }
1: 
1:         public void subscribe() throws JMSException{
1:             LOG.info(toString() + "SUBSCRIBING");
1:             Connection con = openConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             sess.createDurableSubscriber(topic, subName, selector, false);
1: 
1:             sess.close();
1:             con.close();
1:         }
1: 
1:         private void unsubscribe() throws JMSException {
1:             Connection con = openConnection();
1:             Session session = con
1:                     .createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.unsubscribe(subName);
1:             session.close();
1:             con.close();
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             return "DurableSubscriber[id=" + id + "]";
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         topic = new ActiveMQTopic("TopicT");
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         destroyBroker();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         startBroker(true);
1:     }
1: 
1:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:         if (broker != null)
1:             return;
1: 
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:         broker.setBrokerName(getName());
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1: 
1:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
1:         if (deleteAllMessages)
1:             delete(kahadbData);
1: 
1:         broker.setPersistent(true);
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:         kahadb.setDirectory(kahadbData);
1:         kahadb.setJournalMaxFileLength(  10 * 1024);
1:         broker.setPersistenceAdapter(kahadb);
1: 
1:         broker.addConnector("tcp://localhost:61656");
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1: 
1:         LOG.info(toString() + "Starting Broker...");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         LOG.info(toString() + " Broker started!!");
1:     }
1: 
1:     protected static String getName() {
1:         return "DurableSubSelectorDelayTest";
1:     }
1: 
1:     private static boolean delete(File path) {
1:         if (path == null)
1:             return true;
1: 
1:         if (path.isDirectory()) {
1:             for (File file : path.listFiles()) {
1:                 delete(file);
1:             }
1:         }
1:         return path.delete();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker == null)
1:             return;
1: 
1:         broker.stop();
1:         broker = null;
1:     }
1: }
============================================================================