1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
5:d29ca2a: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  *
1:4afa5d6:  * @openwire:marshaller code="3"
1:b0c2a40:  *
1:d29ca2a:  */
1:d29ca2a: public class ConnectionInfo extends BaseCommand {
1:f812e34: 
1:f812e34:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.CONNECTION_INFO;
1:f812e34: 
1:d29ca2a:     protected ConnectionId connectionId;
1:d29ca2a:     protected String clientId;
1:b5579ac:     protected String clientIp;
1:d29ca2a:     protected String userName;
1:d29ca2a:     protected String password;
1:d29ca2a:     protected BrokerId[] brokerPath;
1:ef0734b:     protected boolean brokerMasterConnector;
1:ef0734b:     protected boolean manageable;
1:f812e34:     protected boolean clientMaster = true;
1:f392884:     protected boolean faultTolerant = false;
1:6778a49:     protected boolean failoverReconnect;
1:f812e34:     protected transient Object transportContext;
1:f812e34: 
1:f812e34:     public ConnectionInfo() {
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     public ConnectionInfo(ConnectionId connectionId) {
1:f812e34:         this.connectionId = connectionId;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:7711c74:     }
1:f812e34: 
1:e08cc35:     public ConnectionInfo copy() {
1:e08cc35:         ConnectionInfo copy = new ConnectionInfo();
1:e08cc35:         copy(copy);
1:e08cc35:         return copy;
1:d29ca2a:     }
1:7711c74: 
1:e08cc35:     private void copy(ConnectionInfo copy) {
1:ef0734b:         super.copy(copy);
1:e08cc35:         copy.connectionId = connectionId;
1:ef0734b:         copy.clientId = clientId;
1:ef0734b:         copy.userName = userName;
1:ef0734b:         copy.password = password;
1:ef0734b:         copy.brokerPath = brokerPath;
1:ef0734b:         copy.brokerMasterConnector = brokerMasterConnector;
1:ef0734b:         copy.manageable = manageable;
1:e08cc35:         copy.clientMaster = clientMaster;
1:e08cc35:         copy.transportContext = transportContext;
1:f392884:         copy.faultTolerant= faultTolerant;
1:b5579ac:         copy.clientIp = clientIp;
1:f812e34:     }
1:7711c74: 
1:7711c74:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ConnectionId getConnectionId() {
1:d29ca2a:         return connectionId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setConnectionId(ConnectionId connectionId) {
1:d29ca2a:         this.connectionId = connectionId;
1:d29ca2a:     }
1:f812e34: 
1:7711c74:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getClientId() {
1:d29ca2a:         return clientId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setClientId(String clientId) {
1:d29ca2a:         this.clientId = clientId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public RemoveInfo createRemoveCommand() {
1:d29ca2a:         RemoveInfo command = new RemoveInfo(getConnectionId());
1:d29ca2a:         command.setResponseRequired(isResponseRequired());
1:d29ca2a:         return command;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getPassword() {
1:d29ca2a:         return password;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setPassword(String password) {
1:d29ca2a:         this.password = password;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getUserName() {
1:d29ca2a:         return userName;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setUserName(String userName) {
1:d29ca2a:         this.userName = userName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * The route of brokers the command has moved through.
1:7711c74:      *
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public BrokerId[] getBrokerPath() {
1:d29ca2a:         return brokerPath;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setBrokerPath(BrokerId[] brokerPath) {
1:d29ca2a:         this.brokerPath = brokerPath;
1:d29ca2a:     }
1:f812e34: 
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:f812e34:         return visitor.processAddConnection(this);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:ef0734b:      * @openwire:property version=1
1:5c4bd06:      */
1:f812e34:     public boolean isBrokerMasterConnector() {
1:ef0734b:         return brokerMasterConnector;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:e08cc35:      * @param slaveBroker The brokerMasterConnector to set.
2:ef0734b:      */
1:f812e34:     public void setBrokerMasterConnector(boolean slaveBroker) {
1:f812e34:         this.brokerMasterConnector = slaveBroker;
1:d29ca2a:     }
1:f812e34: 
2:ef0734b:     /**
1:ef0734b:      * @openwire:property version=1
1:ef0734b:      */
1:f812e34:     public boolean isManageable() {
1:ef0734b:         return manageable;
1:ef0734b:     }
1:f812e34: 
1:ef0734b:     /**
1:ef0734b:      * @param manageable The manageable to set.
1:ef0734b:      */
1:f812e34:     public void setManageable(boolean manageable) {
1:f812e34:         this.manageable = manageable;
4:ef0734b:     }
1:f812e34: 
1:ef0734b:     /**
1:f812e34:      * Transports may wish to associate additional data with the connection. For
1:f812e34:      * example, an SSL transport may use this field to attach the client
1:692411e:      * certificates used when the connection was established.
1:7711c74:      *
1:7711c74:      * @return the transport context.
1:7711c74:      */
1:f812e34:     public Object getTransportContext() {
1:f812e34:         return transportContext;
1:f812e34:     }
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Transports may wish to associate additional data with the connection. For
1:f812e34:      * example, an SSL transport may use this field to attach the client
1:692411e:      * certificates used when the connection was established.
1:f812e34:      *
1:f812e34:      * @param transportContext value used to set the transport context
1:f812e34:      */
1:f812e34:     public void setTransportContext(Object transportContext) {
1:f812e34:         this.transportContext = transportContext;
1:f812e34:     }
1:f812e34: 
1:5c4bd06:     /**
1:5c4bd06:      * @openwire:property version=2
1:5c4bd06:      * @return the clientMaster
1:7711c74:      */
1:f812e34:     public boolean isClientMaster() {
1:5c4bd06:         return this.clientMaster;
1:7711c74:     }
1:f812e34: 
1:5c4bd06:     /**
1:5c4bd06:      * @param clientMaster the clientMaster to set
1:5c4bd06:      */
1:f812e34:     public void setClientMaster(boolean clientMaster) {
1:f812e34:         this.clientMaster = clientMaster;
1:5c4bd06:     }
1:d29ca2a: 
1:f392884:     /**
1:f392884:      * @openwire:property version=6 cache=false
1:f392884:      * @return the faultTolerant
1:f392884:      */
1:f392884:     public boolean isFaultTolerant() {
1:f392884:         return this.faultTolerant;
1:f392884:     }
1:d29ca2a: 
1:f392884:     /**
1:f392884:      * @param faultTolerant the faultTolerant to set
1:f392884:      */
1:f392884:     public void setFaultTolerant(boolean faultTolerant) {
1:f392884:         this.faultTolerant = faultTolerant;
1:f392884:     }
1:d29ca2a: 
1:a6a6a70:     /**
1:a6a6a70:      * @openwire:property version=6 cache=false
1:a6a6a70:      * @return failoverReconnect true if this is a reconnect
1:a6a6a70:      */
1:a6a6a70:     public boolean isFailoverReconnect() {
1:a6a6a70:         return this.failoverReconnect;
1:a6a6a70:     }
1:d29ca2a: 
1:a6a6a70:     public void setFailoverReconnect(boolean failoverReconnect) {
1:a6a6a70:         this.failoverReconnect = failoverReconnect;
1:a6a6a70:     }
1:d29ca2a: 
1:fd6c731:     /**
1:fd6c731:      * @openwire:property version=8
1:fd6c731:      */
1:b5579ac:     public String getClientIp() {
1:b5579ac:         return clientIp;
1:b5579ac:     }
1:d29ca2a: 
1:b5579ac:     public void setClientIp(String clientIp) {
1:b5579ac:         this.clientIp = clientIp;
1:b5579ac:     }
1:5c4bd06: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.CONNECTION_INFO;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean clientMaster = true;
1:     protected transient Object transportContext;
1: 
1:     public ConnectionInfo() {
1: 
1:     public ConnectionInfo(ConnectionId connectionId) {
1:         this.connectionId = connectionId;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * The route of brokers the command has moved through.
1: 
1: 
1:         return visitor.processAddConnection(this);
1: 
1:     public boolean isBrokerMasterConnector() {
1: 
1:     public void setBrokerMasterConnector(boolean slaveBroker) {
1:         this.brokerMasterConnector = slaveBroker;
1: 
1:     public boolean isManageable() {
1: 
1:     public void setManageable(boolean manageable) {
1:         this.manageable = manageable;
1: 
1:      * Transports may wish to associate additional data with the connection. For
1:      * example, an SSL transport may use this field to attach the client
0:      * certificates used when the conection was established.
1:     public Object getTransportContext() {
1:         return transportContext;
1:     }
1: 
1:     /**
1:      * Transports may wish to associate additional data with the connection. For
1:      * example, an SSL transport may use this field to attach the client
0:      * certificates used when the conection was established.
1:      * 
1:      * @param transportContext value used to set the transport context
1:      */
1:     public void setTransportContext(Object transportContext) {
1:         this.transportContext = transportContext;
1:     }
1: 
1:     public boolean isClientMaster() {
1: 
1:     public void setClientMaster(boolean clientMaster) {
1:         this.clientMaster = clientMaster;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:7711c74
/////////////////////////////////////////////////////////////////////////
0:     protected transient Object transportContext; 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0: 	 * Transports may wish to associate additional data with the connection.  For
0: 	 * example, an SSL transport may use this field to attach the client certificates
0: 	 * used when the conection was established.
1:      * 
1:      * @return the transport context.
1:      */
0: 	public Object getTransportContext() {
0: 		return transportContext;
1: 	}
1: 	
1: 	/**
0: 	 * Transports may wish to associate additional data with the connection.  For
0: 	 * example, an SSL transport may use this field to attach the client certificates
0: 	 * used when the conection was established.
1: 	 *  
0: 	 * @param transportContext value used to set the transport context
1: 	 */
0: 	public void setTransportContext(Object transportContext) {
0: 		this.transportContext = transportContext;
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.11 $
1:  */
1: public class ConnectionInfo extends BaseCommand {
1:     
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.CONNECTION_INFO;
1:     
1:     protected ConnectionId connectionId;
1:     protected String clientId;
1:     protected String userName;
1:     protected String password;
1:     protected BrokerId[] brokerPath;
1:     
0:     public ConnectionInfo() {        
1:     }    
0:     public ConnectionInfo(ConnectionId connectionId) {
0:         this.connectionId=connectionId;
1:     }
1:     
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ConnectionId getConnectionId() {
1:         return connectionId;
1:     }
1:     public void setConnectionId(ConnectionId connectionId) {
1:         this.connectionId = connectionId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getClientId() {
1:         return clientId;
1:     }
1:     public void setClientId(String clientId) {
1:         this.clientId = clientId;
1:     }
1:     
1:     public RemoveInfo createRemoveCommand() {
1:         RemoveInfo command = new RemoveInfo(getConnectionId());
1:         command.setResponseRequired(isResponseRequired());
1:         return command;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getPassword() {
1:         return password;
1:     }
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getUserName() {
1:         return userName;
1:     }
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1: 
1:     /**
0:      * The route of brokers the command has moved through. 
1:      * 
1:      * @openwire:property version=1 cache=true
1:      */
1:     public BrokerId[] getBrokerPath() {
1:         return brokerPath;
1:     }
1:     public void setBrokerPath(BrokerId[] brokerPath) {
1:         this.brokerPath = brokerPath;
1:     }
1:     
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         return visitor.processAddConnection( this );
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:692411e
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:      * certificates used when the connection was established.
0:      *
/////////////////////////////////////////////////////////////////////////
1:      * certificates used when the connection was established.
0:      *
author:Gary Tully
-------------------------------------------------------------------------------
commit:6778a49
/////////////////////////////////////////////////////////////////////////
1:     protected boolean failoverReconnect;
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
0:     private boolean failoverReconnect;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=6 cache=false
1:      * @return failoverReconnect true if this is a reconnect
1:      */
1:     public boolean isFailoverReconnect() {
1:         return this.failoverReconnect;
1:     }
0: 
1:     public void setFailoverReconnect(boolean failoverReconnect) {
1:         this.failoverReconnect = failoverReconnect;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fd6c731
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=8
1:      */
commit:b5579ac
/////////////////////////////////////////////////////////////////////////
1:     protected String clientIp;
/////////////////////////////////////////////////////////////////////////
1:         copy.clientIp = clientIp;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public String getClientIp() {
1:         return clientIp;
1:     }
0: 
1:     public void setClientIp(String clientIp) {
1:         this.clientIp = clientIp;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1:     protected boolean faultTolerant = false;
/////////////////////////////////////////////////////////////////////////
1:         copy.faultTolerant= faultTolerant;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=6 cache=false
1:      * @return the faultTolerant
1:      */
1:     public boolean isFaultTolerant() {
1:         return this.faultTolerant;
1:     }
0: 
1:     /**
1:      * @param faultTolerant the faultTolerant to set
1:      */
1:     public void setFaultTolerant(boolean faultTolerant) {
1:         this.faultTolerant = faultTolerant;
1:     }
0: 
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
0:     protected boolean clientMaster=true;
commit:5c4bd06
/////////////////////////////////////////////////////////////////////////
0:     protected boolean clientMaster;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @openwire:property version=2
1:      * @return the clientMaster
1:      */
0:     public boolean isClientMaster(){
1:         return this.clientMaster;
1:     }
0:     
1:     /**
1:      * @param clientMaster the clientMaster to set
1:      */
0:     public void setClientMaster(boolean clientMaster){
0:         this.clientMaster=clientMaster;
1:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
1:     protected boolean brokerMasterConnector;
1:     protected boolean manageable;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void copy(ConnectionInfo copy) {
1:         super.copy(copy);
1:         copy.clientId = clientId;
1:         copy.userName = userName;
1:         copy.password = password;
1:         copy.brokerPath = brokerPath;
1:         copy.brokerMasterConnector = brokerMasterConnector;
1:         copy.manageable = manageable;
1:     } 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public boolean isBrokerMasterConnector(){
1:         return brokerMasterConnector;
1:     }
1:     /**
0:      * @param brokerMasterConnector The brokerMasterConnector to set.
1:      */
0:     public void setBrokerMasterConnector(boolean slaveBroker){
0:         this.brokerMasterConnector=slaveBroker;
1:     }
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public boolean isManageable(){
1:         return manageable;
1:     }
1:     /**
1:      * @param manageable The manageable to set.
1:      */
0:     public void setManageable(boolean manageable){
0:         this.manageable=manageable;
1:     }
author:David Jencks
-------------------------------------------------------------------------------
commit:e08cc35
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionInfo copy() {
1:         ConnectionInfo copy = new ConnectionInfo();
1:         copy(copy);
1:         return copy;
0:     }
0: 
1:     private void copy(ConnectionInfo copy) {
1:         copy.connectionId = connectionId;
1:         copy.clientMaster = clientMaster;
1:         copy.transportContext = transportContext;
/////////////////////////////////////////////////////////////////////////
1:      * @param slaveBroker The brokerMasterConnector to set.
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="3"
============================================================================