1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
1:456a2ba: 
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.io.OutputStream;
1:456a2ba: import java.io.PrintWriter;
1:456a2ba: import java.util.Iterator;
1:456a2ba: import java.util.Map;
1:456a2ba: import java.util.concurrent.atomic.AtomicBoolean;
1:456a2ba: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Page;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.Marshaller;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * BTreeIndex represents a Variable Magnitude B+Tree in a Page File.
1:456a2ba:  * A BTree is a bit flexible in that it can be used for set or
1:456a2ba:  * map-based indexing.  Leaf nodes are linked together for faster
1:456a2ba:  * iteration of the values. 
1:456a2ba:  *
1:456a2ba:  * <br>
1:456a2ba:  * The Variable Magnitude attribute means that the BTree attempts
1:456a2ba:  * to store as many values and pointers on one page as is possible.
1:456a2ba:  * 
1:456a2ba:  * <br>
1:456a2ba:  * The implementation can optionally a be Simple-Prefix B+Tree.
1:456a2ba:  * 
1:456a2ba:  * <br>
1:456a2ba:  * For those who don't know how a Simple-Prefix B+Tree works, the primary
1:456a2ba:  * distinction is that instead of promoting actual keys to branch pages,
1:456a2ba:  * when leaves are split, a shortest-possible separator is generated at
1:456a2ba:  * the pivot.  That separator is what is promoted to the parent branch
1:456a2ba:  * (and continuing up the list).  As a result, actual keys and pointers
1:456a2ba:  * can only be found at the leaf level.  This also affords the index the
1:456a2ba:  * ability to ignore costly merging and redistribution of pages when
1:456a2ba:  * deletions occur.  Deletions only affect leaf pages in this
1:456a2ba:  * implementation, and so it is entirely possible for a leaf page to be
1:456a2ba:  * completely empty after all of its keys have been removed.
1:456a2ba:  *
1:0bbc0ac:  * , $Date$
1:456a2ba:  */
1:456a2ba: public class BTreeIndex<Key,Value> implements Index<Key,Value> {
1:456a2ba: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(BTreeIndex.class);
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Interface used to determine the simple prefix of two keys.
1:456a2ba:      *
1:0bbc0ac:      * , $Date$
1:456a2ba:      */
1:456a2ba:     static public interface Prefixer<Key> {
1:456a2ba:         
1:456a2ba:         /**
1:456a2ba:          * This methods should return shortest prefix of value2 where the following still holds:<br/>
1:456a2ba:          * value1 <= prefix <= value2.<br/><br/>
1:456a2ba:          * 
1:456a2ba:          * When this method is called, the following is guaranteed:<br/>
1:456a2ba:          * value1 < value2<br/><br/>
1:456a2ba:          * 
1:456a2ba:          * 
1:456a2ba:          * @param value1
1:456a2ba:          * @param value2
1:456a2ba:          * @return
1:456a2ba:          */
1:456a2ba:         public Key getSimplePrefix(Key value1, Key value2);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     /**
1:456a2ba:      * StringPrefixer is a Prefixer implementation that works on strings.
1:456a2ba:      */
1:456a2ba:     static public class StringPrefixer implements Prefixer<String> {
1:456a2ba:         
1:456a2ba:         /**
1:456a2ba:          * Example:
1:456a2ba:          * If value1 is "Hello World"
1:456a2ba:          * and value 2 is "Help Me"
1:456a2ba:          * then the result will be: "Help"
1:456a2ba:          * 
1:456a2ba:          * @see  Prefixer#getSimplePrefix
1:456a2ba:          */
1:456a2ba:         public String getSimplePrefix(String value1, String value2) {
1:456a2ba:             char[] c1 = value1.toCharArray();
1:456a2ba:             char[] c2 = value2.toCharArray();
1:456a2ba:             int n = Math.min(c1.length, c2.length);
1:456a2ba:             int i =0;
1:456a2ba:             while (i < n) {
1:456a2ba:                 if (c1[i] != c2[i]) {
1:456a2ba:                     return value2.substring(0,i+1);
1:456a2ba:                 }
1:456a2ba:                 i++;
1:456a2ba:             }
1:456a2ba:             
1:456a2ba:             if( n == c2.length ) {
1:456a2ba:                 return value2;
1:456a2ba:             }
1:456a2ba:             return value2.substring(0,n);
1:456a2ba:         }
1:456a2ba:     }    
1:456a2ba: 
1:3d64397:     private PageFile pageFile;
1:3d64397:     private long pageId;
1:456a2ba:     private AtomicBoolean loaded = new AtomicBoolean();
1:456a2ba:     
1:456a2ba:     private final BTreeNode.Marshaller<Key, Value> marshaller = new BTreeNode.Marshaller<Key, Value>(this);
1:456a2ba:     private Marshaller<Key> keyMarshaller;
1:456a2ba:     private Marshaller<Value> valueMarshaller;
1:456a2ba:     private Prefixer<Key> prefixer;
1:456a2ba: 
1:3d64397:     public BTreeIndex() {
1:3d64397:     }
1:3d64397: 
1:3d64397:     public BTreeIndex(long rootPageId) {
1:3d64397:         this.pageId = rootPageId;
1:3d64397:     }
1:3d64397:     
1:3d64397:     @SuppressWarnings("unchecked")
1:3d64397:     public BTreeIndex(Page page) {
1:3d64397:         this(page.getPageId());
1:3d64397:     }
1:3d64397:     
1:456a2ba:     public BTreeIndex(PageFile pageFile, long rootPageId) {
1:456a2ba:         this.pageFile = pageFile;
1:456a2ba:         this.pageId = rootPageId;
1:456a2ba:     }
1:456a2ba: 
1:3d64397:     @SuppressWarnings("unchecked")
1:456a2ba:     public BTreeIndex(PageFile pageFile, Page page) {
1:456a2ba:         this(pageFile, page.getPageId());
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public void load(Transaction tx) throws IOException {
1:456a2ba:         if (loaded.compareAndSet(false, true)) {
1:456a2ba:             LOG.debug("loading");
1:456a2ba:             if( keyMarshaller == null ) {
1:456a2ba:                 throw new IllegalArgumentException("The key marshaller must be set before loading the BTreeIndex");
1:456a2ba:             }
1:456a2ba:             if( valueMarshaller == null ) {
1:456a2ba:                 throw new IllegalArgumentException("The value marshaller must be set before loading the BTreeIndex");
1:456a2ba:             }
1:456a2ba:             
1:456a2ba:             final Page<BTreeNode<Key,Value>> p = tx.load(pageId, null);
1:456a2ba:             if( p.getType() == Page.PAGE_FREE_TYPE ) {
1:456a2ba:                  // Need to initialize it..
1:456a2ba:                 BTreeNode<Key, Value> root = createNode(p, null);
1:456a2ba:                 storeNode(tx, root, true);
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     synchronized public void unload(Transaction tx) {
1:456a2ba:         if (loaded.compareAndSet(true, false)) {
1:456a2ba:         }    
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     private BTreeNode<Key,Value> getRoot(Transaction tx) throws IOException {
1:456a2ba:         return loadNode(tx, pageId, null);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     synchronized public boolean containsKey(Transaction tx, Key key) throws IOException {
1:456a2ba:         assertLoaded();
1:456a2ba:         return getRoot(tx).contains(tx, key);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public Value get(Transaction tx, Key key) throws IOException {
1:456a2ba:         assertLoaded();
1:456a2ba:         return getRoot(tx).get(tx, key);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public Value put(Transaction tx, Key key, Value value) throws IOException {
1:456a2ba:         assertLoaded();
1:456a2ba:         return getRoot(tx).put(tx, key, value);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public Value remove(Transaction tx, Key key) throws IOException {
1:456a2ba:         assertLoaded();
1:456a2ba:         return getRoot(tx).remove(tx, key);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public boolean isTransient() {
1:456a2ba:         return false;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public void clear(Transaction tx) throws IOException {
1:456a2ba:         getRoot(tx).clear(tx);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public int getMinLeafDepth(Transaction tx) throws IOException {
1:456a2ba:         return getRoot(tx).getMinLeafDepth(tx, 0);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public int getMaxLeafDepth(Transaction tx) throws IOException {
1:456a2ba:         return getRoot(tx).getMaxLeafDepth(tx, 0);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public void printStructure(Transaction tx, PrintWriter out) throws IOException {
1:456a2ba:         getRoot(tx).printStructure(tx, out, "");
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     synchronized public void printStructure(Transaction tx, OutputStream out) throws IOException {
1:456a2ba:         PrintWriter pw = new PrintWriter(out,false);
1:456a2ba:         getRoot(tx).printStructure(tx, pw, "");
1:456a2ba:         pw.flush();
1:456a2ba:     }
1:456a2ba: 
1:a33d668:     synchronized public boolean isEmpty(final Transaction tx) throws IOException {
1:a33d668:         return getRoot(tx).isEmpty(tx);
1:a33d668:     }
1:a33d668: 
1:456a2ba:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx) throws IOException {
1:456a2ba:         return getRoot(tx).iterator(tx);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key initialKey) throws IOException {
1:54e2e3b:         return getRoot(tx).iterator(tx, initialKey, null);
1:54e2e3b:     }
1:54e2e3b: 
1:54e2e3b:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key initialKey, Key maxKey) throws IOException {
1:54e2e3b:         return getRoot(tx).iterator(tx, initialKey, maxKey);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     synchronized public void visit(Transaction tx, BTreeVisitor<Key, Value> visitor) throws IOException {
1:456a2ba:         getRoot(tx).visit(tx, visitor);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public Map.Entry<Key,Value> getFirst(Transaction tx) throws IOException {
1:456a2ba:         return getRoot(tx).getFirst(tx);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     synchronized public Map.Entry<Key,Value> getLast(Transaction tx) throws IOException {
1:456a2ba:         return getRoot(tx).getLast(tx);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba:     // Internal implementation methods
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba:     
1:456a2ba:     private void assertLoaded() throws IllegalStateException {
1:456a2ba:         if( !loaded.get() ) {
1:456a2ba:             throw new IllegalStateException("The BTreeIndex is not loaded");
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba:     // Internal methods made accessible to BTreeNode
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba: 
1:456a2ba:     BTreeNode<Key,Value> loadNode(Transaction tx, long pageId, BTreeNode<Key,Value> parent) throws IOException {
1:456a2ba:         Page<BTreeNode<Key,Value>> page = tx.load(pageId, marshaller);
1:456a2ba:         BTreeNode<Key, Value> node = page.get();
1:456a2ba:         node.setPage(page);
1:456a2ba:         node.setParent(parent);
1:456a2ba:         return node;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     BTreeNode<Key,Value> createNode(Transaction tx, BTreeNode<Key,Value> parent) throws IOException {
1:456a2ba:         Page<BTreeNode<Key,Value>> p = tx.allocate();
1:456a2ba:         BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(this);
1:456a2ba:         node.setPage(p);
1:456a2ba:         node.setParent(parent);
1:456a2ba:         node.setEmpty();
1:456a2ba:         p.set(node);
1:456a2ba:         return node;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     BTreeNode<Key,Value> createNode(Page<BTreeNode<Key,Value>> p, BTreeNode<Key,Value> parent) throws IOException {
1:456a2ba:         BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(this);
1:456a2ba:         node.setPage(p);
1:456a2ba:         node.setParent(parent);
1:456a2ba:         node.setEmpty();
1:456a2ba:         p.set(node);
1:456a2ba:         return node;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     void storeNode(Transaction tx, BTreeNode<Key,Value> node, boolean overflow) throws IOException {
1:456a2ba:         tx.store(node.getPage(), marshaller, overflow);
1:456a2ba:     }
1:456a2ba:         
1:456a2ba:    
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba:     // Property Accessors
1:456a2ba:     ///////////////////////////////////////////////////////////////////
1:456a2ba: 
1:456a2ba:     public PageFile getPageFile() {
1:456a2ba:         return pageFile;
1:456a2ba:     }
1:456a2ba:     public long getPageId() {
1:456a2ba:         return pageId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Marshaller<Key> getKeyMarshaller() {
1:456a2ba:         return keyMarshaller;
1:456a2ba:     }
1:456a2ba:     public void setKeyMarshaller(Marshaller<Key> keyMarshaller) {
1:456a2ba:         this.keyMarshaller = keyMarshaller;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Marshaller<Value> getValueMarshaller() {
1:456a2ba:         return valueMarshaller;
1:456a2ba:     }
1:456a2ba:     public void setValueMarshaller(Marshaller<Value> valueMarshaller) {
1:456a2ba:         this.valueMarshaller = valueMarshaller;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Prefixer<Key> getPrefixer() {
1:456a2ba:         return prefixer;
1:456a2ba:     }
1:456a2ba:     public void setPrefixer(Prefixer<Key> prefixer) {
1:456a2ba:         this.prefixer = prefixer;
1:456a2ba:     }
1:456a2ba: 
1:3d64397:     public void setPageFile(PageFile pageFile) {
1:3d64397:         this.pageFile = pageFile;
1:3d64397:     }
1:3d64397: 
1:3d64397:     public void setPageId(long pageId) {
1:3d64397:         this.pageId = pageId;
1:3d64397:     }
1:3d64397: 
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:         return getRoot(tx).iterator(tx, initialKey, null);
1:     }
1: 
1:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key initialKey, Key maxKey) throws IOException {
1:         return getRoot(tx).iterator(tx, initialKey, maxKey);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.page.Page;
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.Marshaller;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * , $Date$
/////////////////////////////////////////////////////////////////////////
1:      * , $Date$
commit:a33d668
/////////////////////////////////////////////////////////////////////////
1:     synchronized public boolean isEmpty(final Transaction tx) throws IOException {
1:         return getRoot(tx).isEmpty(tx);
1:     }
1: 
commit:3d64397
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private PageFile pageFile;
1:     private long pageId;
/////////////////////////////////////////////////////////////////////////
1:     public BTreeIndex() {
1:     }
1: 
1:     public BTreeIndex(long rootPageId) {
1:         this.pageId = rootPageId;
1:     }
1:     
1:     @SuppressWarnings("unchecked")
1:     public BTreeIndex(Page page) {
1:         this(page.getPageId());
1:     }
1:     
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:     public void setPageFile(PageFile pageFile) {
1:         this.pageFile = pageFile;
1:     }
1: 
1:     public void setPageId(long pageId) {
1:         this.pageId = pageId;
1:     }
1: 
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
0: import java.io.PrintStream;
1: import java.io.PrintWriter;
0: import java.io.StringWriter;
0: import java.io.Writer;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.kahadb.page.Page;
0: import org.apache.kahadb.page.PageFile;
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.page.Transaction.Closure;
0: import org.apache.kahadb.util.Marshaller;
1: 
1: /**
1:  * BTreeIndex represents a Variable Magnitude B+Tree in a Page File.
1:  * A BTree is a bit flexible in that it can be used for set or
1:  * map-based indexing.  Leaf nodes are linked together for faster
1:  * iteration of the values. 
1:  *
1:  * <br>
1:  * The Variable Magnitude attribute means that the BTree attempts
1:  * to store as many values and pointers on one page as is possible.
1:  * 
1:  * <br>
1:  * The implementation can optionally a be Simple-Prefix B+Tree.
1:  * 
1:  * <br>
1:  * For those who don't know how a Simple-Prefix B+Tree works, the primary
1:  * distinction is that instead of promoting actual keys to branch pages,
1:  * when leaves are split, a shortest-possible separator is generated at
1:  * the pivot.  That separator is what is promoted to the parent branch
1:  * (and continuing up the list).  As a result, actual keys and pointers
1:  * can only be found at the leaf level.  This also affords the index the
1:  * ability to ignore costly merging and redistribution of pages when
1:  * deletions occur.  Deletions only affect leaf pages in this
1:  * implementation, and so it is entirely possible for a leaf page to be
1:  * completely empty after all of its keys have been removed.
1:  *
0:  * @version $Revision$, $Date$
1:  */
1: public class BTreeIndex<Key,Value> implements Index<Key,Value> {
1: 
0:     private static final Log LOG = LogFactory.getLog(BTreeIndex.class);
1: 
1:     /**
1:      * Interface used to determine the simple prefix of two keys.
1:      *
0:      * @version $Revision$, $Date$
1:      */
1:     static public interface Prefixer<Key> {
1:         
1:         /**
1:          * This methods should return shortest prefix of value2 where the following still holds:<br/>
1:          * value1 <= prefix <= value2.<br/><br/>
1:          * 
1:          * When this method is called, the following is guaranteed:<br/>
1:          * value1 < value2<br/><br/>
1:          * 
1:          * 
1:          * @param value1
1:          * @param value2
1:          * @return
1:          */
1:         public Key getSimplePrefix(Key value1, Key value2);
1:     }
1:     
1:     /**
1:      * StringPrefixer is a Prefixer implementation that works on strings.
1:      */
1:     static public class StringPrefixer implements Prefixer<String> {
1:         
1:         /**
1:          * Example:
1:          * If value1 is "Hello World"
1:          * and value 2 is "Help Me"
1:          * then the result will be: "Help"
1:          * 
1:          * @see  Prefixer#getSimplePrefix
1:          */
1:         public String getSimplePrefix(String value1, String value2) {
1:             char[] c1 = value1.toCharArray();
1:             char[] c2 = value2.toCharArray();
1:             int n = Math.min(c1.length, c2.length);
1:             int i =0;
1:             while (i < n) {
1:                 if (c1[i] != c2[i]) {
1:                     return value2.substring(0,i+1);
1:                 }
1:                 i++;
1:             }
1:             
1:             if( n == c2.length ) {
1:                 return value2;
1:             }
1:             return value2.substring(0,n);
1:         }
1:     }    
1: 
0:     private final PageFile pageFile;
0:     private final long pageId;
1:     private AtomicBoolean loaded = new AtomicBoolean();
1:     
1:     private final BTreeNode.Marshaller<Key, Value> marshaller = new BTreeNode.Marshaller<Key, Value>(this);
1:     private Marshaller<Key> keyMarshaller;
1:     private Marshaller<Value> valueMarshaller;
1:     private Prefixer<Key> prefixer;
1: 
1:     public BTreeIndex(PageFile pageFile, long rootPageId) {
1:         this.pageFile = pageFile;
1:         this.pageId = rootPageId;
1:     }
1: 
1:     public BTreeIndex(PageFile pageFile, Page page) {
1:         this(pageFile, page.getPageId());
1:     }
1: 
1:     synchronized public void load(Transaction tx) throws IOException {
1:         if (loaded.compareAndSet(false, true)) {
1:             LOG.debug("loading");
1:             if( keyMarshaller == null ) {
1:                 throw new IllegalArgumentException("The key marshaller must be set before loading the BTreeIndex");
1:             }
1:             if( valueMarshaller == null ) {
1:                 throw new IllegalArgumentException("The value marshaller must be set before loading the BTreeIndex");
1:             }
1:             
1:             final Page<BTreeNode<Key,Value>> p = tx.load(pageId, null);
1:             if( p.getType() == Page.PAGE_FREE_TYPE ) {
1:                  // Need to initialize it..
1:                 BTreeNode<Key, Value> root = createNode(p, null);
1:                 storeNode(tx, root, true);
1:             }
1:         }
1:     }
1:     
1:     synchronized public void unload(Transaction tx) {
1:         if (loaded.compareAndSet(true, false)) {
1:         }    
1:     }
1:     
1:     private BTreeNode<Key,Value> getRoot(Transaction tx) throws IOException {
1:         return loadNode(tx, pageId, null);
1:     }
1:     
1:     synchronized public boolean containsKey(Transaction tx, Key key) throws IOException {
1:         assertLoaded();
1:         return getRoot(tx).contains(tx, key);
1:     }
1: 
1:     synchronized public Value get(Transaction tx, Key key) throws IOException {
1:         assertLoaded();
1:         return getRoot(tx).get(tx, key);
1:     }
1: 
1:     synchronized public Value put(Transaction tx, Key key, Value value) throws IOException {
1:         assertLoaded();
1:         return getRoot(tx).put(tx, key, value);
1:     }
1: 
1:     synchronized public Value remove(Transaction tx, Key key) throws IOException {
1:         assertLoaded();
1:         return getRoot(tx).remove(tx, key);
1:     }
1:     
1:     public boolean isTransient() {
1:         return false;
1:     }
1: 
1:     synchronized public void clear(Transaction tx) throws IOException {
1:         getRoot(tx).clear(tx);
1:     }
1: 
1:     synchronized public int getMinLeafDepth(Transaction tx) throws IOException {
1:         return getRoot(tx).getMinLeafDepth(tx, 0);
1:     }
1: 
1:     synchronized public int getMaxLeafDepth(Transaction tx) throws IOException {
1:         return getRoot(tx).getMaxLeafDepth(tx, 0);
1:     }
1: 
1:     synchronized public void printStructure(Transaction tx, PrintWriter out) throws IOException {
1:         getRoot(tx).printStructure(tx, out, "");
1:     }
1:     
1:     synchronized public void printStructure(Transaction tx, OutputStream out) throws IOException {
1:         PrintWriter pw = new PrintWriter(out,false);
1:         getRoot(tx).printStructure(tx, pw, "");
1:         pw.flush();
1:     }
1: 
1:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx) throws IOException {
1:         return getRoot(tx).iterator(tx);
1:     }
1:     
1:     synchronized public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key initialKey) throws IOException {
0:         return getRoot(tx).iterator(tx, initialKey);
1:     }
1:     
1:     synchronized public void visit(Transaction tx, BTreeVisitor<Key, Value> visitor) throws IOException {
1:         getRoot(tx).visit(tx, visitor);
1:     }
1: 
1:     synchronized public Map.Entry<Key,Value> getFirst(Transaction tx) throws IOException {
1:         return getRoot(tx).getFirst(tx);
1:     }
1: 
1:     synchronized public Map.Entry<Key,Value> getLast(Transaction tx) throws IOException {
1:         return getRoot(tx).getLast(tx);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////
1:     // Internal implementation methods
1:     ///////////////////////////////////////////////////////////////////
1:     
1:     private void assertLoaded() throws IllegalStateException {
1:         if( !loaded.get() ) {
1:             throw new IllegalStateException("The BTreeIndex is not loaded");
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////
1:     // Internal methods made accessible to BTreeNode
1:     ///////////////////////////////////////////////////////////////////
1: 
1:     BTreeNode<Key,Value> loadNode(Transaction tx, long pageId, BTreeNode<Key,Value> parent) throws IOException {
1:         Page<BTreeNode<Key,Value>> page = tx.load(pageId, marshaller);
1:         BTreeNode<Key, Value> node = page.get();
1:         node.setPage(page);
1:         node.setParent(parent);
1:         return node;
1:     }
1: 
1:     BTreeNode<Key,Value> createNode(Transaction tx, BTreeNode<Key,Value> parent) throws IOException {
1:         Page<BTreeNode<Key,Value>> p = tx.allocate();
1:         BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(this);
1:         node.setPage(p);
1:         node.setParent(parent);
1:         node.setEmpty();
1:         p.set(node);
1:         return node;
1:     }
1: 
1:     BTreeNode<Key,Value> createNode(Page<BTreeNode<Key,Value>> p, BTreeNode<Key,Value> parent) throws IOException {
1:         BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(this);
1:         node.setPage(p);
1:         node.setParent(parent);
1:         node.setEmpty();
1:         p.set(node);
1:         return node;
1:     }
1:     
1:     void storeNode(Transaction tx, BTreeNode<Key,Value> node, boolean overflow) throws IOException {
1:         tx.store(node.getPage(), marshaller, overflow);
1:     }
1:         
1:    
1:     ///////////////////////////////////////////////////////////////////
1:     // Property Accessors
1:     ///////////////////////////////////////////////////////////////////
1: 
1:     public PageFile getPageFile() {
1:         return pageFile;
1:     }
1:     public long getPageId() {
1:         return pageId;
1:     }
1: 
1:     public Marshaller<Key> getKeyMarshaller() {
1:         return keyMarshaller;
1:     }
1:     public void setKeyMarshaller(Marshaller<Key> keyMarshaller) {
1:         this.keyMarshaller = keyMarshaller;
1:     }
1: 
1:     public Marshaller<Value> getValueMarshaller() {
1:         return valueMarshaller;
1:     }
1:     public void setValueMarshaller(Marshaller<Value> valueMarshaller) {
1:         this.valueMarshaller = valueMarshaller;
1:     }
1: 
1:     public Prefixer<Key> getPrefixer() {
1:         return prefixer;
1:     }
1:     public void setPrefixer(Prefixer<Key> prefixer) {
1:         this.prefixer = prefixer;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(BTreeIndex.class);
============================================================================