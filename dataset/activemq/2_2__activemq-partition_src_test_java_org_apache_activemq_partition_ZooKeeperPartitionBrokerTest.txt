1:25f70ad: /**
1:25f70ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25f70ad:  * contributor license agreements.  See the NOTICE file distributed with
1:25f70ad:  * this work for additional information regarding copyright ownership.
1:25f70ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25f70ad:  * (the "License"); you may not use this file except in compliance with
1:25f70ad:  * the License.  You may obtain a copy of the License at
1:25f70ad:  *
1:25f70ad:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25f70ad:  *
1:25f70ad:  * Unless required by applicable law or agreed to in writing, software
1:25f70ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25f70ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25f70ad:  * See the License for the specific language governing permissions and
1:25f70ad:  * limitations under the License.
1:25f70ad:  */
1:25f70ad: package org.apache.activemq.partition;
1:25f70ad: 
1:25f70ad: import org.apache.activemq.broker.BrokerPlugin;
1:25f70ad: import org.apache.activemq.broker.BrokerService;
1:25f70ad: import org.apache.activemq.leveldb.replicated.groups.ZKClient;
1:25f70ad: import org.apache.zookeeper.CreateMode;
1:25f70ad: import org.apache.zookeeper.server.NIOServerCnxnFactory;
1:25f70ad: import org.apache.zookeeper.server.ZooKeeperServer;
1:25f70ad: import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
1:25f70ad: import org.junit.After;
1:25f70ad: import org.junit.Before;
1:25f70ad: import org.linkedin.util.clock.Timespan;
1:25f70ad: 
1:25f70ad: import java.io.File;
1:25f70ad: import java.net.InetSocketAddress;
1:25f70ad: 
1:25f70ad: /**
1:25f70ad:  */
1:25f70ad: public class ZooKeeperPartitionBrokerTest extends PartitionBrokerTest {
1:25f70ad: 
1:25f70ad:     NIOServerCnxnFactory connector;
1:25f70ad: 
1:25f70ad:     @Before
1:25f70ad:     public void setUp() throws Exception {
1:25f70ad:         System.out.println("Starting ZooKeeper");
1:25f70ad:         ZooKeeperServer zk_server = new ZooKeeperServer();
1:25f70ad:         zk_server.setTickTime(500);
1:25f70ad:         zk_server.setTxnLogFactory(new FileTxnSnapLog(new File("target/test-data/zk-log"), new File("target/test-data/zk-data")));
1:25f70ad:         connector = new NIOServerCnxnFactory();
1:25f70ad:         connector.configure(new InetSocketAddress(0), 100);
1:25f70ad:         connector.startup(zk_server);
1:59af747:         System.out.println("ZooKeeper started");
1:25f70ad:         super.setUp();
1:25f70ad:     }
1:25f70ad: 
1:25f70ad: 
1:25f70ad:     @After
1:25f70ad:     public void tearDown() throws Exception {
1:25f70ad:         super.tearDown();
1:25f70ad:         if( connector!=null ) {
1:25f70ad:           connector.shutdown();
1:25f70ad:           connector = null;
1:25f70ad:         }
1:25f70ad:     }
1:25f70ad: 
1:25f70ad:     String zkPath = "/partition-config";
1:25f70ad: 
1:25f70ad:     @Override
1:25f70ad:     protected void createBrokerCluster(int brokerCount) throws Exception {
1:25f70ad:         // Store the partitioning in ZK.
1:25f70ad:         ZKClient zk_client = new ZKClient("localhost:" + connector.getLocalPort(), Timespan.parse("10s"), null);
1:25f70ad:         try {
1:25f70ad:             zk_client.start();
1:25f70ad:             zk_client.waitForConnected(Timespan.parse("30s"));
1:25f70ad:             try {
1:25f70ad:                 zk_client.delete(zkPath);
1:25f70ad:             } catch (Throwable e) {
1:25f70ad:             }
1:25f70ad:             zk_client.create(zkPath, partitioning.toString(), CreateMode.PERSISTENT);
1:25f70ad:         } finally {
1:25f70ad:             zk_client.close();
1:25f70ad:         }
1:25f70ad:         super.createBrokerCluster(brokerCount);
1:25f70ad:     }
1:25f70ad: 
1:25f70ad:     @Override
1:25f70ad:     protected void addPartitionBrokerPlugin(BrokerService broker) {
1:25f70ad:         // Have the borker plugin get the partition config via ZK.
1:25f70ad:         ZooKeeperPartitionBrokerPlugin plugin = new ZooKeeperPartitionBrokerPlugin(){
1:25f70ad:             @Override
1:25f70ad:             public String getBrokerURL(PartitionBroker partitionBroker, String id) {
1:25f70ad:                 try {
1:25f70ad:                     return getConnectURL(id);
1:25f70ad:                 } catch (Exception e) {
1:25f70ad:                     return null;
1:25f70ad:                 }
1:25f70ad:             }
1:25f70ad:         };
1:25f70ad:         plugin.setZkAddress("localhost:" + connector.getLocalPort());
1:25f70ad:         plugin.setZkPath(zkPath);
1:25f70ad:         broker.setPlugins(new BrokerPlugin[]{plugin});
1:25f70ad:     }
1:25f70ad: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:59af747
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("ZooKeeper started");
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:25f70ad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.leveldb.replicated.groups.ZKClient;
1: import org.apache.zookeeper.CreateMode;
1: import org.apache.zookeeper.server.NIOServerCnxnFactory;
1: import org.apache.zookeeper.server.ZooKeeperServer;
1: import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.linkedin.util.clock.Timespan;
1: 
1: import java.io.File;
1: import java.net.InetSocketAddress;
1: 
1: /**
1:  */
1: public class ZooKeeperPartitionBrokerTest extends PartitionBrokerTest {
1: 
1:     NIOServerCnxnFactory connector;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         System.out.println("Starting ZooKeeper");
1:         ZooKeeperServer zk_server = new ZooKeeperServer();
1:         zk_server.setTickTime(500);
1:         zk_server.setTxnLogFactory(new FileTxnSnapLog(new File("target/test-data/zk-log"), new File("target/test-data/zk-data")));
1:         connector = new NIOServerCnxnFactory();
1:         connector.configure(new InetSocketAddress(0), 100);
1:         connector.startup(zk_server);
0:         System.out.println("ZooKeeper Started");
1:         super.setUp();
1:     }
1: 
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         if( connector!=null ) {
1:           connector.shutdown();
1:           connector = null;
1:         }
1:     }
1: 
1:     String zkPath = "/partition-config";
1: 
1:     @Override
1:     protected void createBrokerCluster(int brokerCount) throws Exception {
1:         // Store the partitioning in ZK.
1:         ZKClient zk_client = new ZKClient("localhost:" + connector.getLocalPort(), Timespan.parse("10s"), null);
1:         try {
1:             zk_client.start();
1:             zk_client.waitForConnected(Timespan.parse("30s"));
1:             try {
1:                 zk_client.delete(zkPath);
1:             } catch (Throwable e) {
1:             }
1:             zk_client.create(zkPath, partitioning.toString(), CreateMode.PERSISTENT);
1:         } finally {
1:             zk_client.close();
1:         }
1:         super.createBrokerCluster(brokerCount);
1:     }
1: 
1:     @Override
1:     protected void addPartitionBrokerPlugin(BrokerService broker) {
1:         // Have the borker plugin get the partition config via ZK.
1:         ZooKeeperPartitionBrokerPlugin plugin = new ZooKeeperPartitionBrokerPlugin(){
1:             @Override
1:             public String getBrokerURL(PartitionBroker partitionBroker, String id) {
1:                 try {
1:                     return getConnectURL(id);
1:                 } catch (Exception e) {
1:                     return null;
1:                 }
1:             }
1:         };
1:         plugin.setZkAddress("localhost:" + connector.getLocalPort());
1:         plugin.setZkPath(zkPath);
1:         broker.setPlugins(new BrokerPlugin[]{plugin});
1:     }
1: }
============================================================================