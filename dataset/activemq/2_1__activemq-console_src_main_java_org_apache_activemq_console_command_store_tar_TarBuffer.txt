1:3f32507: /*
1:3f32507:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  *  contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  *  this work for additional information regarding copyright ownership.
1:3f32507:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  *  (the "License"); you may not use this file except in compliance with
1:3f32507:  *  the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  *  Unless required by applicable law or agreed to in writing, software
1:3f32507:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  *  See the License for the specific language governing permissions and
1:3f32507:  *  limitations under the License.
1:3f32507:  *
1:3f32507:  */
1:3f32507: 
1:3f32507: /*
1:3f32507:  * This package is based on the work done by Timothy Gerard Endres
1:3f32507:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:3f32507:  */
1:3f32507: 
1:3f32507: package org.apache.activemq.console.command.store.tar;
1:3f32507: 
1:3f32507: import java.io.InputStream;
1:3f32507: import java.io.OutputStream;
1:3f32507: import java.io.IOException;
1:3f32507: import java.util.Arrays;
1:3f32507: 
1:3f32507: /**
1:3f32507:  * The TarBuffer class implements the tar archive concept
1:3f32507:  * of a buffered input stream. This concept goes back to the
1:3f32507:  * days of blocked tape drives and special io devices. In the
1:3f32507:  * Java universe, the only real function that this class
1:3f32507:  * performs is to ensure that files have the correct "block"
1:3f32507:  * size, or other tars will complain.
1:3f32507:  * <p>
1:3f32507:  * You should never have a need to access this class directly.
1:3f32507:  * TarBuffers are created by Tar IO Streams.
1:3f32507:  *
1:3f32507:  */
1:3f32507: 
1:3f32507: public class TarBuffer {
1:3f32507: 
1:3f32507:     /** Default record size */
1:3f32507:     public static final int DEFAULT_RCDSIZE = (512);
1:3f32507: 
1:3f32507:     /** Default block size */
1:3f32507:     public static final int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
1:3f32507: 
1:3f32507:     private InputStream     inStream;
1:3f32507:     private OutputStream    outStream;
1:3f32507:     private byte[]          blockBuffer;
1:3f32507:     private int             currBlkIdx;
1:3f32507:     private int             currRecIdx;
1:3f32507:     private int             blockSize;
1:3f32507:     private int             recordSize;
1:3f32507:     private int             recsPerBlock;
1:3f32507:     private boolean         debug;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an input stream.
1:3f32507:      * @param inStream the input stream to use
1:3f32507:      */
1:3f32507:     public TarBuffer(InputStream inStream) {
1:3f32507:         this(inStream, TarBuffer.DEFAULT_BLKSIZE);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an input stream.
1:3f32507:      * @param inStream the input stream to use
1:3f32507:      * @param blockSize the block size to use
1:3f32507:      */
1:3f32507:     public TarBuffer(InputStream inStream, int blockSize) {
1:3f32507:         this(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an input stream.
1:3f32507:      * @param inStream the input stream to use
1:3f32507:      * @param blockSize the block size to use
1:3f32507:      * @param recordSize the record size to use
1:3f32507:      */
1:3f32507:     public TarBuffer(InputStream inStream, int blockSize, int recordSize) {
1:3f32507:         this.inStream = inStream;
1:3f32507:         this.outStream = null;
1:3f32507: 
1:3f32507:         this.initialize(blockSize, recordSize);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an output stream.
1:3f32507:      * @param outStream the output stream to use
1:3f32507:      */
1:3f32507:     public TarBuffer(OutputStream outStream) {
1:3f32507:         this(outStream, TarBuffer.DEFAULT_BLKSIZE);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an output stream.
1:3f32507:      * @param outStream the output stream to use
1:3f32507:      * @param blockSize the block size to use
1:3f32507:      */
1:3f32507:     public TarBuffer(OutputStream outStream, int blockSize) {
1:3f32507:         this(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Constructor for a TarBuffer on an output stream.
1:3f32507:      * @param outStream the output stream to use
1:3f32507:      * @param blockSize the block size to use
1:3f32507:      * @param recordSize the record size to use
1:3f32507:      */
1:3f32507:     public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {
1:3f32507:         this.inStream = null;
1:3f32507:         this.outStream = outStream;
1:3f32507: 
1:3f32507:         this.initialize(blockSize, recordSize);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Initialization common to all constructors.
1:3f32507:      */
1:3f32507:     private void initialize(int blockSize, int recordSize) {
1:3f32507:         this.debug = false;
1:3f32507:         this.blockSize = blockSize;
1:3f32507:         this.recordSize = recordSize;
1:3f32507:         this.recsPerBlock = (this.blockSize / this.recordSize);
1:3f32507:         this.blockBuffer = new byte[this.blockSize];
1:3f32507: 
1:3f32507:         if (this.inStream != null) {
1:3f32507:             this.currBlkIdx = -1;
1:3f32507:             this.currRecIdx = this.recsPerBlock;
1:3f32507:         } else {
1:3f32507:             this.currBlkIdx = 0;
1:3f32507:             this.currRecIdx = 0;
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Get the TAR Buffer's block size. Blocks consist of multiple records.
1:3f32507:      * @return the block size
1:3f32507:      */
1:3f32507:     public int getBlockSize() {
1:3f32507:         return this.blockSize;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Get the TAR Buffer's record size.
1:3f32507:      * @return the record size
1:3f32507:      */
1:3f32507:     public int getRecordSize() {
1:3f32507:         return this.recordSize;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Set the debugging flag for the buffer.
1:3f32507:      *
1:3f32507:      * @param debug If true, print debugging output.
1:3f32507:      */
1:3f32507:     public void setDebug(boolean debug) {
1:3f32507:         this.debug = debug;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Determine if an archive record indicate End of Archive. End of
1:3f32507:      * archive is indicated by a record that consists entirely of null bytes.
1:3f32507:      *
1:3f32507:      * @param record The record data to check.
1:3f32507:      * @return true if the record data is an End of Archive
1:3f32507:      */
1:3f32507:     public boolean isEOFRecord(byte[] record) {
1:3f32507:         for (int i = 0, sz = getRecordSize(); i < sz; ++i) {
1:3f32507:             if (record[i] != 0) {
1:3f32507:                 return false;
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         return true;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Skip over a record on the input stream.
1:3f32507:      * @throws IOException on error
1:3f32507:      */
1:3f32507:     public void skipRecord() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("SkipRecord: recIdx = " + currRecIdx
1:3f32507:                                + " blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (inStream == null) {
1:3f32507:             throw new IOException("reading (via skip) from an output buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (currRecIdx >= recsPerBlock) {
1:3f32507:             if (!readBlock()) {
1:3f32507:                 return;    // UNDONE
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         currRecIdx++;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Read a record from the input stream and return the data.
1:3f32507:      *
1:3f32507:      * @return The record data.
1:3f32507:      * @throws IOException on error
1:3f32507:      */
1:3f32507:     public byte[] readRecord() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("ReadRecord: recIdx = " + currRecIdx
1:3f32507:                                + " blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (inStream == null) {
1:3f32507:             throw new IOException("reading from an output buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (currRecIdx >= recsPerBlock) {
1:3f32507:             if (!readBlock()) {
1:3f32507:                 return null;
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         byte[] result = new byte[recordSize];
1:3f32507: 
1:3f32507:         System.arraycopy(blockBuffer,
1:3f32507:                          (currRecIdx * recordSize), result, 0,
1:3f32507:                          recordSize);
1:3f32507: 
1:3f32507:         currRecIdx++;
1:3f32507: 
1:3f32507:         return result;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * @return false if End-Of-File, else true
1:3f32507:      */
1:3f32507:     private boolean readBlock() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("ReadBlock: blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (inStream == null) {
1:3f32507:             throw new IOException("reading from an output buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         currRecIdx = 0;
1:3f32507: 
1:3f32507:         int offset = 0;
1:3f32507:         int bytesNeeded = blockSize;
1:3f32507: 
1:3f32507:         while (bytesNeeded > 0) {
1:3f32507:             long numBytes = inStream.read(blockBuffer, offset,
1:3f32507:                                                bytesNeeded);
1:3f32507: 
1:3f32507:             //
1:3f32507:             // NOTE
1:3f32507:             // We have fit EOF, and the block is not full!
1:3f32507:             //
1:3f32507:             // This is a broken archive. It does not follow the standard
1:3f32507:             // blocking algorithm. However, because we are generous, and
1:3f32507:             // it requires little effort, we will simply ignore the error
1:3f32507:             // and continue as if the entire block were read. This does
1:3f32507:             // not appear to break anything upstream. We used to return
1:3f32507:             // false in this case.
1:3f32507:             //
1:3f32507:             // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
1:3f32507:             //
1:3f32507:             if (numBytes == -1) {
1:3f32507:                 if (offset == 0) {
1:3f32507:                     // Ensure that we do not read gigabytes of zeros
1:3f32507:                     // for a corrupt tar file.
1:3f32507:                     // See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924
1:3f32507:                     return false;
1:3f32507:                 }
1:3f32507:                 // However, just leaving the unread portion of the buffer dirty does
1:3f32507:                 // cause problems in some cases.  This problem is described in
1:3f32507:                 // http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
1:3f32507:                 //
1:3f32507:                 // The solution is to fill the unused portion of the buffer with zeros.
1:3f32507: 
1:3f32507:                 Arrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);
1:3f32507: 
1:3f32507:                 break;
1:3f32507:             }
1:3f32507: 
1:3f32507:             offset += numBytes;
1:3f32507:             bytesNeeded -= numBytes;
1:3f32507: 
1:3f32507:             if (numBytes != blockSize) {
1:3f32507:                 if (debug) {
1:3f32507:                     System.err.println("ReadBlock: INCOMPLETE READ "
1:3f32507:                                        + numBytes + " of " + blockSize
1:3f32507:                                        + " bytes read.");
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         currBlkIdx++;
1:3f32507: 
1:3f32507:         return true;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Get the current block number, zero based.
1:3f32507:      *
1:3f32507:      * @return The current zero based block number.
1:3f32507:      */
1:3f32507:     public int getCurrentBlockNum() {
1:3f32507:         return currBlkIdx;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Get the current record number, within the current block, zero based.
1:3f32507:      * Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.
1:3f32507:      *
1:3f32507:      * @return The current zero based record number.
1:3f32507:      */
1:3f32507:     public int getCurrentRecordNum() {
1:3f32507:         return currRecIdx - 1;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Write an archive record to the archive.
1:3f32507:      *
1:3f32507:      * @param record The record data to write to the archive.
1:3f32507:      * @throws IOException on error
1:3f32507:      */
1:3f32507:     public void writeRecord(byte[] record) throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("WriteRecord: recIdx = " + currRecIdx
1:3f32507:                                + " blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (outStream == null) {
1:3f32507:             throw new IOException("writing to an input buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (record.length != recordSize) {
1:3f32507:             throw new IOException("record to write has length '"
1:3f32507:                                   + record.length
1:3f32507:                                   + "' which is not the record size of '"
1:3f32507:                                   + recordSize + "'");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (currRecIdx >= recsPerBlock) {
1:3f32507:             writeBlock();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.arraycopy(record, 0, blockBuffer,
1:3f32507:                          (currRecIdx * recordSize),
1:3f32507:                          recordSize);
1:3f32507: 
1:3f32507:         currRecIdx++;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Write an archive record to the archive, where the record may be
1:3f32507:      * inside of a larger array buffer. The buffer must be "offset plus
1:3f32507:      * record size" long.
1:3f32507:      *
1:3f32507:      * @param buf The buffer containing the record data to write.
1:3f32507:      * @param offset The offset of the record data within buf.
1:3f32507:      * @throws IOException on error
1:3f32507:      */
1:3f32507:     public void writeRecord(byte[] buf, int offset) throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("WriteRecord: recIdx = " + currRecIdx
1:3f32507:                                + " blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (outStream == null) {
1:3f32507:             throw new IOException("writing to an input buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if ((offset + recordSize) > buf.length) {
1:3f32507:             throw new IOException("record has length '" + buf.length
1:3f32507:                                   + "' with offset '" + offset
1:3f32507:                                   + "' which is less than the record size of '"
1:3f32507:                                   + recordSize + "'");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (currRecIdx >= recsPerBlock) {
1:3f32507:             writeBlock();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.arraycopy(buf, offset, blockBuffer,
1:3f32507:                          (currRecIdx * recordSize),
1:3f32507:                          recordSize);
1:3f32507: 
1:3f32507:         currRecIdx++;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Write a TarBuffer block to the archive.
1:3f32507:      */
1:3f32507:     private void writeBlock() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("WriteBlock: blkIdx = " + currBlkIdx);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (outStream == null) {
1:3f32507:             throw new IOException("writing to an input buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         outStream.write(blockBuffer, 0, blockSize);
1:3f32507:         outStream.flush();
1:3f32507: 
1:3f32507:         currRecIdx = 0;
1:3f32507:         currBlkIdx++;
1:3f32507:         Arrays.fill(blockBuffer, (byte) 0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Flush the current data block if it has any data in it.
1:3f32507:      */
1:3f32507:     void flushBlock() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("TarBuffer.flushBlock() called.");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (outStream == null) {
1:3f32507:             throw new IOException("writing to an input buffer");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (currRecIdx > 0) {
1:3f32507:             writeBlock();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Close the TarBuffer. If this is an output buffer, also flush the
1:3f32507:      * current block before closing.
1:3f32507:      * @throws IOException on error
1:3f32507:      */
1:3f32507:     public void close() throws IOException {
1:3f32507:         if (debug) {
1:3f32507:             System.err.println("TarBuffer.closeBuffer().");
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (outStream != null) {
1:3f32507:             flushBlock();
1:3f32507: 
1:3f32507:             if (outStream != System.out
1:3f32507:                     && outStream != System.err) {
1:3f32507:                 outStream.close();
1:3f32507: 
1:3f32507:                 outStream = null;
1:3f32507:             }
1:3f32507:         } else if (inStream != null) {
1:3f32507:             if (inStream != System.in) {
1:3f32507:                 inStream.close();
1:3f32507: 
1:3f32507:                 inStream = null;
1:3f32507:             }
1:3f32507:         }
1:3f32507:     }
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  *
1:  */
1: 
1: /*
1:  * This package is based on the work done by Timothy Gerard Endres
1:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:  */
1: 
1: package org.apache.activemq.console.command.store.tar;
1: 
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.util.Arrays;
1: 
1: /**
1:  * The TarBuffer class implements the tar archive concept
1:  * of a buffered input stream. This concept goes back to the
1:  * days of blocked tape drives and special io devices. In the
1:  * Java universe, the only real function that this class
1:  * performs is to ensure that files have the correct "block"
1:  * size, or other tars will complain.
1:  * <p>
1:  * You should never have a need to access this class directly.
1:  * TarBuffers are created by Tar IO Streams.
1:  *
1:  */
1: 
1: public class TarBuffer {
1: 
1:     /** Default record size */
1:     public static final int DEFAULT_RCDSIZE = (512);
1: 
1:     /** Default block size */
1:     public static final int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
1: 
1:     private InputStream     inStream;
1:     private OutputStream    outStream;
1:     private byte[]          blockBuffer;
1:     private int             currBlkIdx;
1:     private int             currRecIdx;
1:     private int             blockSize;
1:     private int             recordSize;
1:     private int             recsPerBlock;
1:     private boolean         debug;
1: 
1:     /**
1:      * Constructor for a TarBuffer on an input stream.
1:      * @param inStream the input stream to use
1:      */
1:     public TarBuffer(InputStream inStream) {
1:         this(inStream, TarBuffer.DEFAULT_BLKSIZE);
1:     }
1: 
1:     /**
1:      * Constructor for a TarBuffer on an input stream.
1:      * @param inStream the input stream to use
1:      * @param blockSize the block size to use
1:      */
1:     public TarBuffer(InputStream inStream, int blockSize) {
1:         this(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
1:     }
1: 
1:     /**
1:      * Constructor for a TarBuffer on an input stream.
1:      * @param inStream the input stream to use
1:      * @param blockSize the block size to use
1:      * @param recordSize the record size to use
1:      */
1:     public TarBuffer(InputStream inStream, int blockSize, int recordSize) {
1:         this.inStream = inStream;
1:         this.outStream = null;
1: 
1:         this.initialize(blockSize, recordSize);
1:     }
1: 
1:     /**
1:      * Constructor for a TarBuffer on an output stream.
1:      * @param outStream the output stream to use
1:      */
1:     public TarBuffer(OutputStream outStream) {
1:         this(outStream, TarBuffer.DEFAULT_BLKSIZE);
1:     }
1: 
1:     /**
1:      * Constructor for a TarBuffer on an output stream.
1:      * @param outStream the output stream to use
1:      * @param blockSize the block size to use
1:      */
1:     public TarBuffer(OutputStream outStream, int blockSize) {
1:         this(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
1:     }
1: 
1:     /**
1:      * Constructor for a TarBuffer on an output stream.
1:      * @param outStream the output stream to use
1:      * @param blockSize the block size to use
1:      * @param recordSize the record size to use
1:      */
1:     public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {
1:         this.inStream = null;
1:         this.outStream = outStream;
1: 
1:         this.initialize(blockSize, recordSize);
1:     }
1: 
1:     /**
1:      * Initialization common to all constructors.
1:      */
1:     private void initialize(int blockSize, int recordSize) {
1:         this.debug = false;
1:         this.blockSize = blockSize;
1:         this.recordSize = recordSize;
1:         this.recsPerBlock = (this.blockSize / this.recordSize);
1:         this.blockBuffer = new byte[this.blockSize];
1: 
1:         if (this.inStream != null) {
1:             this.currBlkIdx = -1;
1:             this.currRecIdx = this.recsPerBlock;
1:         } else {
1:             this.currBlkIdx = 0;
1:             this.currRecIdx = 0;
1:         }
1:     }
1: 
1:     /**
1:      * Get the TAR Buffer's block size. Blocks consist of multiple records.
1:      * @return the block size
1:      */
1:     public int getBlockSize() {
1:         return this.blockSize;
1:     }
1: 
1:     /**
1:      * Get the TAR Buffer's record size.
1:      * @return the record size
1:      */
1:     public int getRecordSize() {
1:         return this.recordSize;
1:     }
1: 
1:     /**
1:      * Set the debugging flag for the buffer.
1:      *
1:      * @param debug If true, print debugging output.
1:      */
1:     public void setDebug(boolean debug) {
1:         this.debug = debug;
1:     }
1: 
1:     /**
1:      * Determine if an archive record indicate End of Archive. End of
1:      * archive is indicated by a record that consists entirely of null bytes.
1:      *
1:      * @param record The record data to check.
1:      * @return true if the record data is an End of Archive
1:      */
1:     public boolean isEOFRecord(byte[] record) {
1:         for (int i = 0, sz = getRecordSize(); i < sz; ++i) {
1:             if (record[i] != 0) {
1:                 return false;
1:             }
1:         }
1: 
1:         return true;
1:     }
1: 
1:     /**
1:      * Skip over a record on the input stream.
1:      * @throws IOException on error
1:      */
1:     public void skipRecord() throws IOException {
1:         if (debug) {
1:             System.err.println("SkipRecord: recIdx = " + currRecIdx
1:                                + " blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (inStream == null) {
1:             throw new IOException("reading (via skip) from an output buffer");
1:         }
1: 
1:         if (currRecIdx >= recsPerBlock) {
1:             if (!readBlock()) {
1:                 return;    // UNDONE
1:             }
1:         }
1: 
1:         currRecIdx++;
1:     }
1: 
1:     /**
1:      * Read a record from the input stream and return the data.
1:      *
1:      * @return The record data.
1:      * @throws IOException on error
1:      */
1:     public byte[] readRecord() throws IOException {
1:         if (debug) {
1:             System.err.println("ReadRecord: recIdx = " + currRecIdx
1:                                + " blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (inStream == null) {
1:             throw new IOException("reading from an output buffer");
1:         }
1: 
1:         if (currRecIdx >= recsPerBlock) {
1:             if (!readBlock()) {
1:                 return null;
1:             }
1:         }
1: 
1:         byte[] result = new byte[recordSize];
1: 
1:         System.arraycopy(blockBuffer,
1:                          (currRecIdx * recordSize), result, 0,
1:                          recordSize);
1: 
1:         currRecIdx++;
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * @return false if End-Of-File, else true
1:      */
1:     private boolean readBlock() throws IOException {
1:         if (debug) {
1:             System.err.println("ReadBlock: blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (inStream == null) {
1:             throw new IOException("reading from an output buffer");
1:         }
1: 
1:         currRecIdx = 0;
1: 
1:         int offset = 0;
1:         int bytesNeeded = blockSize;
1: 
1:         while (bytesNeeded > 0) {
1:             long numBytes = inStream.read(blockBuffer, offset,
1:                                                bytesNeeded);
1: 
1:             //
1:             // NOTE
1:             // We have fit EOF, and the block is not full!
1:             //
1:             // This is a broken archive. It does not follow the standard
1:             // blocking algorithm. However, because we are generous, and
1:             // it requires little effort, we will simply ignore the error
1:             // and continue as if the entire block were read. This does
1:             // not appear to break anything upstream. We used to return
1:             // false in this case.
1:             //
1:             // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
1:             //
1:             if (numBytes == -1) {
1:                 if (offset == 0) {
1:                     // Ensure that we do not read gigabytes of zeros
1:                     // for a corrupt tar file.
1:                     // See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924
1:                     return false;
1:                 }
1:                 // However, just leaving the unread portion of the buffer dirty does
1:                 // cause problems in some cases.  This problem is described in
1:                 // http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
1:                 //
1:                 // The solution is to fill the unused portion of the buffer with zeros.
1: 
1:                 Arrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);
1: 
1:                 break;
1:             }
1: 
1:             offset += numBytes;
1:             bytesNeeded -= numBytes;
1: 
1:             if (numBytes != blockSize) {
1:                 if (debug) {
1:                     System.err.println("ReadBlock: INCOMPLETE READ "
1:                                        + numBytes + " of " + blockSize
1:                                        + " bytes read.");
1:                 }
1:             }
1:         }
1: 
1:         currBlkIdx++;
1: 
1:         return true;
1:     }
1: 
1:     /**
1:      * Get the current block number, zero based.
1:      *
1:      * @return The current zero based block number.
1:      */
1:     public int getCurrentBlockNum() {
1:         return currBlkIdx;
1:     }
1: 
1:     /**
1:      * Get the current record number, within the current block, zero based.
1:      * Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.
1:      *
1:      * @return The current zero based record number.
1:      */
1:     public int getCurrentRecordNum() {
1:         return currRecIdx - 1;
1:     }
1: 
1:     /**
1:      * Write an archive record to the archive.
1:      *
1:      * @param record The record data to write to the archive.
1:      * @throws IOException on error
1:      */
1:     public void writeRecord(byte[] record) throws IOException {
1:         if (debug) {
1:             System.err.println("WriteRecord: recIdx = " + currRecIdx
1:                                + " blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (outStream == null) {
1:             throw new IOException("writing to an input buffer");
1:         }
1: 
1:         if (record.length != recordSize) {
1:             throw new IOException("record to write has length '"
1:                                   + record.length
1:                                   + "' which is not the record size of '"
1:                                   + recordSize + "'");
1:         }
1: 
1:         if (currRecIdx >= recsPerBlock) {
1:             writeBlock();
1:         }
1: 
1:         System.arraycopy(record, 0, blockBuffer,
1:                          (currRecIdx * recordSize),
1:                          recordSize);
1: 
1:         currRecIdx++;
1:     }
1: 
1:     /**
1:      * Write an archive record to the archive, where the record may be
1:      * inside of a larger array buffer. The buffer must be "offset plus
1:      * record size" long.
1:      *
1:      * @param buf The buffer containing the record data to write.
1:      * @param offset The offset of the record data within buf.
1:      * @throws IOException on error
1:      */
1:     public void writeRecord(byte[] buf, int offset) throws IOException {
1:         if (debug) {
1:             System.err.println("WriteRecord: recIdx = " + currRecIdx
1:                                + " blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (outStream == null) {
1:             throw new IOException("writing to an input buffer");
1:         }
1: 
1:         if ((offset + recordSize) > buf.length) {
1:             throw new IOException("record has length '" + buf.length
1:                                   + "' with offset '" + offset
1:                                   + "' which is less than the record size of '"
1:                                   + recordSize + "'");
1:         }
1: 
1:         if (currRecIdx >= recsPerBlock) {
1:             writeBlock();
1:         }
1: 
1:         System.arraycopy(buf, offset, blockBuffer,
1:                          (currRecIdx * recordSize),
1:                          recordSize);
1: 
1:         currRecIdx++;
1:     }
1: 
1:     /**
1:      * Write a TarBuffer block to the archive.
1:      */
1:     private void writeBlock() throws IOException {
1:         if (debug) {
1:             System.err.println("WriteBlock: blkIdx = " + currBlkIdx);
1:         }
1: 
1:         if (outStream == null) {
1:             throw new IOException("writing to an input buffer");
1:         }
1: 
1:         outStream.write(blockBuffer, 0, blockSize);
1:         outStream.flush();
1: 
1:         currRecIdx = 0;
1:         currBlkIdx++;
1:         Arrays.fill(blockBuffer, (byte) 0);
1:     }
1: 
1:     /**
1:      * Flush the current data block if it has any data in it.
1:      */
1:     void flushBlock() throws IOException {
1:         if (debug) {
1:             System.err.println("TarBuffer.flushBlock() called.");
1:         }
1: 
1:         if (outStream == null) {
1:             throw new IOException("writing to an input buffer");
1:         }
1: 
1:         if (currRecIdx > 0) {
1:             writeBlock();
1:         }
1:     }
1: 
1:     /**
1:      * Close the TarBuffer. If this is an output buffer, also flush the
1:      * current block before closing.
1:      * @throws IOException on error
1:      */
1:     public void close() throws IOException {
1:         if (debug) {
1:             System.err.println("TarBuffer.closeBuffer().");
1:         }
1: 
1:         if (outStream != null) {
1:             flushBlock();
1: 
1:             if (outStream != System.out
1:                     && outStream != System.err) {
1:                 outStream.close();
1: 
1:                 outStream = null;
1:             }
1:         } else if (inStream != null) {
1:             if (inStream != System.in) {
1:                 inStream.close();
1: 
1:                 inStream = null;
1:             }
1:         }
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
0: /*
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  *
0:  */
0: 
0: /*
0:  * This package is based on the work done by Timothy Gerard Endres
0:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
0:  */
0: 
0: package org.apache.activemq.console.command.store.tar;
0: 
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.util.Arrays;
0: 
0: /**
0:  * The TarBuffer class implements the tar archive concept
0:  * of a buffered input stream. This concept goes back to the
0:  * days of blocked tape drives and special io devices. In the
0:  * Java universe, the only real function that this class
0:  * performs is to ensure that files have the correct "block"
0:  * size, or other tars will complain.
0:  * <p>
0:  * You should never have a need to access this class directly.
0:  * TarBuffers are created by Tar IO Streams.
0:  *
0:  */
0: 
0: public class TarBuffer {
0: 
0:     /** Default record size */
0:     public static final int DEFAULT_RCDSIZE = (512);
0: 
0:     /** Default block size */
0:     public static final int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
0: 
0:     private InputStream     inStream;
0:     private OutputStream    outStream;
0:     private byte[]          blockBuffer;
0:     private int             currBlkIdx;
0:     private int             currRecIdx;
0:     private int             blockSize;
0:     private int             recordSize;
0:     private int             recsPerBlock;
0:     private boolean         debug;
0: 
0:     /**
0:      * Constructor for a TarBuffer on an input stream.
0:      * @param inStream the input stream to use
0:      */
0:     public TarBuffer(InputStream inStream) {
0:         this(inStream, TarBuffer.DEFAULT_BLKSIZE);
0:     }
0: 
0:     /**
0:      * Constructor for a TarBuffer on an input stream.
0:      * @param inStream the input stream to use
0:      * @param blockSize the block size to use
0:      */
0:     public TarBuffer(InputStream inStream, int blockSize) {
0:         this(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
0:     }
0: 
0:     /**
0:      * Constructor for a TarBuffer on an input stream.
0:      * @param inStream the input stream to use
0:      * @param blockSize the block size to use
0:      * @param recordSize the record size to use
0:      */
0:     public TarBuffer(InputStream inStream, int blockSize, int recordSize) {
0:         this.inStream = inStream;
0:         this.outStream = null;
0: 
0:         this.initialize(blockSize, recordSize);
0:     }
0: 
0:     /**
0:      * Constructor for a TarBuffer on an output stream.
0:      * @param outStream the output stream to use
0:      */
0:     public TarBuffer(OutputStream outStream) {
0:         this(outStream, TarBuffer.DEFAULT_BLKSIZE);
0:     }
0: 
0:     /**
0:      * Constructor for a TarBuffer on an output stream.
0:      * @param outStream the output stream to use
0:      * @param blockSize the block size to use
0:      */
0:     public TarBuffer(OutputStream outStream, int blockSize) {
0:         this(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);
0:     }
0: 
0:     /**
0:      * Constructor for a TarBuffer on an output stream.
0:      * @param outStream the output stream to use
0:      * @param blockSize the block size to use
0:      * @param recordSize the record size to use
0:      */
0:     public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {
0:         this.inStream = null;
0:         this.outStream = outStream;
0: 
0:         this.initialize(blockSize, recordSize);
0:     }
0: 
0:     /**
0:      * Initialization common to all constructors.
0:      */
0:     private void initialize(int blockSize, int recordSize) {
0:         this.debug = false;
0:         this.blockSize = blockSize;
0:         this.recordSize = recordSize;
0:         this.recsPerBlock = (this.blockSize / this.recordSize);
0:         this.blockBuffer = new byte[this.blockSize];
0: 
0:         if (this.inStream != null) {
0:             this.currBlkIdx = -1;
0:             this.currRecIdx = this.recsPerBlock;
0:         } else {
0:             this.currBlkIdx = 0;
0:             this.currRecIdx = 0;
0:         }
0:     }
0: 
0:     /**
0:      * Get the TAR Buffer's block size. Blocks consist of multiple records.
0:      * @return the block size
0:      */
0:     public int getBlockSize() {
0:         return this.blockSize;
0:     }
0: 
0:     /**
0:      * Get the TAR Buffer's record size.
0:      * @return the record size
0:      */
0:     public int getRecordSize() {
0:         return this.recordSize;
0:     }
0: 
0:     /**
0:      * Set the debugging flag for the buffer.
0:      *
0:      * @param debug If true, print debugging output.
0:      */
0:     public void setDebug(boolean debug) {
0:         this.debug = debug;
0:     }
0: 
0:     /**
0:      * Determine if an archive record indicate End of Archive. End of
0:      * archive is indicated by a record that consists entirely of null bytes.
0:      *
0:      * @param record The record data to check.
0:      * @return true if the record data is an End of Archive
0:      */
0:     public boolean isEOFRecord(byte[] record) {
0:         for (int i = 0, sz = getRecordSize(); i < sz; ++i) {
0:             if (record[i] != 0) {
0:                 return false;
0:             }
0:         }
0: 
0:         return true;
0:     }
0: 
0:     /**
0:      * Skip over a record on the input stream.
0:      * @throws IOException on error
0:      */
0:     public void skipRecord() throws IOException {
0:         if (debug) {
0:             System.err.println("SkipRecord: recIdx = " + currRecIdx
0:                                + " blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (inStream == null) {
0:             throw new IOException("reading (via skip) from an output buffer");
0:         }
0: 
0:         if (currRecIdx >= recsPerBlock) {
0:             if (!readBlock()) {
0:                 return;    // UNDONE
0:             }
0:         }
0: 
0:         currRecIdx++;
0:     }
0: 
0:     /**
0:      * Read a record from the input stream and return the data.
0:      *
0:      * @return The record data.
0:      * @throws IOException on error
0:      */
0:     public byte[] readRecord() throws IOException {
0:         if (debug) {
0:             System.err.println("ReadRecord: recIdx = " + currRecIdx
0:                                + " blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (inStream == null) {
0:             throw new IOException("reading from an output buffer");
0:         }
0: 
0:         if (currRecIdx >= recsPerBlock) {
0:             if (!readBlock()) {
0:                 return null;
0:             }
0:         }
0: 
0:         byte[] result = new byte[recordSize];
0: 
0:         System.arraycopy(blockBuffer,
0:                          (currRecIdx * recordSize), result, 0,
0:                          recordSize);
0: 
0:         currRecIdx++;
0: 
0:         return result;
0:     }
0: 
0:     /**
0:      * @return false if End-Of-File, else true
0:      */
0:     private boolean readBlock() throws IOException {
0:         if (debug) {
0:             System.err.println("ReadBlock: blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (inStream == null) {
0:             throw new IOException("reading from an output buffer");
0:         }
0: 
0:         currRecIdx = 0;
0: 
0:         int offset = 0;
0:         int bytesNeeded = blockSize;
0: 
0:         while (bytesNeeded > 0) {
0:             long numBytes = inStream.read(blockBuffer, offset,
0:                                                bytesNeeded);
0: 
0:             //
0:             // NOTE
0:             // We have fit EOF, and the block is not full!
0:             //
0:             // This is a broken archive. It does not follow the standard
0:             // blocking algorithm. However, because we are generous, and
0:             // it requires little effort, we will simply ignore the error
0:             // and continue as if the entire block were read. This does
0:             // not appear to break anything upstream. We used to return
0:             // false in this case.
0:             //
0:             // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
0:             //
0:             if (numBytes == -1) {
0:                 if (offset == 0) {
0:                     // Ensure that we do not read gigabytes of zeros
0:                     // for a corrupt tar file.
0:                     // See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924
0:                     return false;
0:                 }
0:                 // However, just leaving the unread portion of the buffer dirty does
0:                 // cause problems in some cases.  This problem is described in
0:                 // http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
0:                 //
0:                 // The solution is to fill the unused portion of the buffer with zeros.
0: 
0:                 Arrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);
0: 
0:                 break;
0:             }
0: 
0:             offset += numBytes;
0:             bytesNeeded -= numBytes;
0: 
0:             if (numBytes != blockSize) {
0:                 if (debug) {
0:                     System.err.println("ReadBlock: INCOMPLETE READ "
0:                                        + numBytes + " of " + blockSize
0:                                        + " bytes read.");
0:                 }
0:             }
0:         }
0: 
0:         currBlkIdx++;
0: 
0:         return true;
0:     }
0: 
0:     /**
0:      * Get the current block number, zero based.
0:      *
0:      * @return The current zero based block number.
0:      */
0:     public int getCurrentBlockNum() {
0:         return currBlkIdx;
0:     }
0: 
0:     /**
0:      * Get the current record number, within the current block, zero based.
0:      * Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.
0:      *
0:      * @return The current zero based record number.
0:      */
0:     public int getCurrentRecordNum() {
0:         return currRecIdx - 1;
0:     }
0: 
0:     /**
0:      * Write an archive record to the archive.
0:      *
0:      * @param record The record data to write to the archive.
0:      * @throws IOException on error
0:      */
0:     public void writeRecord(byte[] record) throws IOException {
0:         if (debug) {
0:             System.err.println("WriteRecord: recIdx = " + currRecIdx
0:                                + " blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (outStream == null) {
0:             throw new IOException("writing to an input buffer");
0:         }
0: 
0:         if (record.length != recordSize) {
0:             throw new IOException("record to write has length '"
0:                                   + record.length
0:                                   + "' which is not the record size of '"
0:                                   + recordSize + "'");
0:         }
0: 
0:         if (currRecIdx >= recsPerBlock) {
0:             writeBlock();
0:         }
0: 
0:         System.arraycopy(record, 0, blockBuffer,
0:                          (currRecIdx * recordSize),
0:                          recordSize);
0: 
0:         currRecIdx++;
0:     }
0: 
0:     /**
0:      * Write an archive record to the archive, where the record may be
0:      * inside of a larger array buffer. The buffer must be "offset plus
0:      * record size" long.
0:      *
0:      * @param buf The buffer containing the record data to write.
0:      * @param offset The offset of the record data within buf.
0:      * @throws IOException on error
0:      */
0:     public void writeRecord(byte[] buf, int offset) throws IOException {
0:         if (debug) {
0:             System.err.println("WriteRecord: recIdx = " + currRecIdx
0:                                + " blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (outStream == null) {
0:             throw new IOException("writing to an input buffer");
0:         }
0: 
0:         if ((offset + recordSize) > buf.length) {
0:             throw new IOException("record has length '" + buf.length
0:                                   + "' with offset '" + offset
0:                                   + "' which is less than the record size of '"
0:                                   + recordSize + "'");
0:         }
0: 
0:         if (currRecIdx >= recsPerBlock) {
0:             writeBlock();
0:         }
0: 
0:         System.arraycopy(buf, offset, blockBuffer,
0:                          (currRecIdx * recordSize),
0:                          recordSize);
0: 
0:         currRecIdx++;
0:     }
0: 
0:     /**
0:      * Write a TarBuffer block to the archive.
0:      */
0:     private void writeBlock() throws IOException {
0:         if (debug) {
0:             System.err.println("WriteBlock: blkIdx = " + currBlkIdx);
0:         }
0: 
0:         if (outStream == null) {
0:             throw new IOException("writing to an input buffer");
0:         }
0: 
0:         outStream.write(blockBuffer, 0, blockSize);
0:         outStream.flush();
0: 
0:         currRecIdx = 0;
0:         currBlkIdx++;
0:         Arrays.fill(blockBuffer, (byte) 0);
0:     }
0: 
0:     /**
0:      * Flush the current data block if it has any data in it.
0:      */
0:     void flushBlock() throws IOException {
0:         if (debug) {
0:             System.err.println("TarBuffer.flushBlock() called.");
0:         }
0: 
0:         if (outStream == null) {
0:             throw new IOException("writing to an input buffer");
0:         }
0: 
0:         if (currRecIdx > 0) {
0:             writeBlock();
0:         }
0:     }
0: 
0:     /**
0:      * Close the TarBuffer. If this is an output buffer, also flush the
0:      * current block before closing.
0:      * @throws IOException on error
0:      */
0:     public void close() throws IOException {
0:         if (debug) {
0:             System.err.println("TarBuffer.closeBuffer().");
0:         }
0: 
0:         if (outStream != null) {
0:             flushBlock();
0: 
0:             if (outStream != System.out
0:                     && outStream != System.err) {
0:                 outStream.close();
0: 
0:                 outStream = null;
0:             }
0:         } else if (inStream != null) {
0:             if (inStream != System.in) {
0:                 inStream.close();
0: 
0:                 inStream = null;
0:             }
0:         }
0:     }
0: }
============================================================================