1:886e2d4: /**
1:886e2d4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:886e2d4:  * contributor license agreements.  See the NOTICE file distributed with
1:886e2d4:  * this work for additional information regarding copyright ownership.
1:886e2d4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:886e2d4:  * (the "License"); you may not use this file except in compliance with
1:886e2d4:  * the License.  You may obtain a copy of the License at
1:886e2d4:  *
1:886e2d4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:886e2d4:  *
1:886e2d4:  * Unless required by applicable law or agreed to in writing, software
1:886e2d4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:886e2d4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:886e2d4:  * See the License for the specific language governing permissions and
1:886e2d4:  * limitations under the License.
1:886e2d4:  */
1:886e2d4: package org.apache.activemq.broker.policy;
1:886e2d4: 
1:886e2d4: import static org.junit.Assert.assertTrue;
1:886e2d4: 
1:886e2d4: import java.io.File;
1:886e2d4: 
1:886e2d4: import javax.jms.Connection;
1:886e2d4: import javax.jms.ConnectionFactory;
1:886e2d4: import javax.jms.MessageProducer;
1:886e2d4: import javax.jms.Queue;
1:886e2d4: import javax.jms.Session;
1:886e2d4: import javax.jms.Topic;
1:886e2d4: 
1:886e2d4: import org.apache.activemq.ActiveMQConnectionFactory;
1:886e2d4: import org.apache.activemq.broker.BrokerService;
1:886e2d4: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:886e2d4: import org.apache.activemq.broker.region.policy.PolicyMap;
1:886e2d4: import org.apache.activemq.command.ActiveMQDestination;
1:886e2d4: import org.apache.activemq.command.ActiveMQQueue;
1:886e2d4: import org.apache.activemq.command.ActiveMQTopic;
1:886e2d4: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:886e2d4: import org.junit.After;
1:886e2d4: import org.junit.Before;
1:886e2d4: import org.junit.Test;
1:886e2d4: 
1:886e2d4: import com.google.common.collect.Lists;
1:886e2d4: 
1:886e2d4: /**
1:886e2d4:  * This unit test is to test that setting the property "maxDestinations" on
1:886e2d4:  * PolicyEntry works correctly. If this property is set, it will limit the
1:886e2d4:  * number of destinations that can be created. Advisory topics will be ignored
1:886e2d4:  * during calculations.
1:886e2d4:  *
1:886e2d4:  */
1:886e2d4: public class MaxDestinationsPolicyTest {
1:886e2d4:     BrokerService broker;
1:886e2d4:     ConnectionFactory factory;
1:886e2d4:     Connection connection;
1:886e2d4:     Session session;
1:886e2d4:     MessageProducer producer;
1:886e2d4: 
1:886e2d4:     @Before
1:886e2d4:     public void setUp() throws Exception {
1:886e2d4:         broker = new BrokerService();
1:886e2d4: 
1:886e2d4:         File testDataDir = new File("target/activemq-data/AMQ-5751");
1:886e2d4:         broker.setDataDirectoryFile(testDataDir);
1:886e2d4:         broker.setUseJmx(true);
1:886e2d4:         broker.setDeleteAllMessagesOnStartup(true);
1:886e2d4:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l * 1024 * 64);
1:886e2d4:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:886e2d4:         persistenceAdapter.setDirectory(new File(testDataDir, "kahadb"));
1:886e2d4:         broker.setPersistenceAdapter(persistenceAdapter);
1:886e2d4:         broker.addConnector("tcp://localhost:0");
1:886e2d4:         broker.start();
1:886e2d4:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors()
1:886e2d4:                 .get(0).getConnectUri().toString());
1:886e2d4:         connection = factory.createConnection();
1:886e2d4:         connection.start();
1:886e2d4:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     @After
1:886e2d4:     public void tearDown() throws Exception {
1:886e2d4:         session.close();
1:886e2d4:         connection.stop();
1:886e2d4:         connection.close();
1:886e2d4:         broker.stop();
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that 10 queues can be created when default policy allows it.
1:886e2d4:      */
1:886e2d4:     @Test
1:886e2d4:     public void testMaxDestinationDefaultPolicySuccess() throws Exception {
1:886e2d4:         applyDefaultMaximumDestinationPolicy(10);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 10; i++) {
1:886e2d4:             createQueue("queue." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that default policy prevents going beyond max
1:886e2d4:      */
1:886e2d4:     @Test(expected = javax.jms.IllegalStateException.class)
1:886e2d4:     public void testMaxDestinationDefaultPolicyFail() throws Exception {
1:886e2d4:         applyDefaultMaximumDestinationPolicy(10);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 11; i++) {
1:886e2d4:             createQueue("queue." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that a queue policy overrides the default policy
1:886e2d4:      */
1:886e2d4:     @Test(expected = javax.jms.IllegalStateException.class)
1:886e2d4:     public void testMaxDestinationOnQueuePolicy() throws Exception {
1:886e2d4:         PolicyMap policyMap = applyDefaultMaximumDestinationPolicy(10);
1:886e2d4:         applyMaximumDestinationPolicy(policyMap, new ActiveMQQueue("queue.>"),
1:886e2d4:                 5);
1:886e2d4: 
1:886e2d4:         // This should fail even though the default policy is set to a limit of
1:886e2d4:         // 10 because the
1:886e2d4:         // queue policy overrides it
1:886e2d4:         for (int i = 0; i < 6; i++) {
1:886e2d4:             createQueue("queue." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that 10 topics can be created when default policy allows it.
1:886e2d4:      */
1:886e2d4:     @Test
1:886e2d4:     public void testTopicMaxDestinationDefaultPolicySuccess() throws Exception {
1:886e2d4:         applyDefaultMaximumDestinationPolicy(10);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 10; i++) {
1:886e2d4:             createTopic("topic." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that topic creation will faill when exceeding the limit
1:886e2d4:      */
1:886e2d4:     @Test(expected = javax.jms.IllegalStateException.class)
1:886e2d4:     public void testTopicMaxDestinationDefaultPolicyFail() throws Exception {
1:886e2d4:         applyDefaultMaximumDestinationPolicy(20);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 21; i++) {
1:886e2d4:             createTopic("topic." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test that no limit is enforced
1:886e2d4:      */
1:886e2d4:     @Test
1:886e2d4:     public void testTopicDefaultPolicyNoMaxDestinations() throws Exception {
1:886e2d4:         // -1 is the default and signals no max destinations
1:886e2d4:         applyDefaultMaximumDestinationPolicy(-1);
1:886e2d4:         for (int i = 0; i < 100; i++) {
1:886e2d4:             createTopic("topic." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test a mixture of queue and topic policies
1:886e2d4:      */
1:886e2d4:     @Test
1:886e2d4:     public void testComplexMaxDestinationPolicy() throws Exception {
1:886e2d4:         PolicyMap policyMap = applyMaximumDestinationPolicy(new PolicyMap(),
1:886e2d4:                 new ActiveMQQueue("queue.>"), 5);
1:886e2d4:         applyMaximumDestinationPolicy(policyMap, new ActiveMQTopic("topic.>"),
1:886e2d4:                 10);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 5; i++) {
1:886e2d4:             createQueue("queue." + i);
1:886e2d4:         }
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 10; i++) {
1:886e2d4:             createTopic("topic." + i);
1:886e2d4:         }
1:886e2d4: 
1:886e2d4:         // Make sure that adding one more of either a topic or a queue fails
1:886e2d4:         boolean fail = false;
1:886e2d4:         try {
1:886e2d4:             createTopic("topic.test");
1:886e2d4:         } catch (javax.jms.IllegalStateException e) {
1:886e2d4:             fail = true;
1:886e2d4:         }
1:886e2d4:         assertTrue(fail);
1:886e2d4: 
1:886e2d4:         fail = false;
1:886e2d4:         try {
1:886e2d4:             createQueue("queue.test");
1:886e2d4:         } catch (javax.jms.IllegalStateException e) {
1:886e2d4:             fail = true;
1:886e2d4:         }
1:886e2d4:         assertTrue(fail);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test child destinations of a policy
1:886e2d4:      */
1:886e2d4:     @Test
1:886e2d4:     public void testMaxDestinationPolicyOnChildDests() throws Exception {
1:886e2d4:         applyMaximumDestinationPolicy(new PolicyMap(), new ActiveMQTopic(
1:886e2d4:                 "topic.>"), 10);
1:886e2d4: 
1:886e2d4:         for (int i = 0; i < 10; i++) {
1:886e2d4:             createTopic("topic.test" + i);
1:886e2d4:         }
1:886e2d4: 
1:886e2d4:         // Make sure that adding one more fails
1:886e2d4:         boolean fail = false;
1:886e2d4:         try {
1:886e2d4:             createTopic("topic.abc.test");
1:886e2d4:         } catch (javax.jms.IllegalStateException e) {
1:886e2d4:             fail = true;
1:886e2d4:         }
1:886e2d4:         assertTrue(fail);
1:886e2d4: 
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * Test a topic policy overrides the default
1:886e2d4:      */
1:886e2d4:     @Test(expected = javax.jms.IllegalStateException.class)
1:886e2d4:     public void testMaxDestinationOnTopicPolicy() throws Exception {
1:886e2d4:         PolicyMap policyMap = applyDefaultMaximumDestinationPolicy(10);
1:886e2d4:         applyMaximumDestinationPolicy(policyMap, new ActiveMQTopic("topic.>"),
1:886e2d4:                 5);
1:886e2d4: 
1:886e2d4:         // This should fail even though the default policy is set to a limit of
1:886e2d4:         // 10 because the
1:886e2d4:         // queue policy overrides it
1:886e2d4:         for (int i = 0; i < 6; i++) {
1:886e2d4:             createTopic("topic." + i);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     private PolicyMap applyMaximumDestinationPolicy(PolicyMap policyMap,
1:886e2d4:             ActiveMQDestination destination, int maxDestinations) {
1:886e2d4:         PolicyEntry entry = new PolicyEntry();
1:886e2d4:         entry.setDestination(destination);
1:886e2d4:         entry.setMaxDestinations(maxDestinations);
1:886e2d4:         policyMap.setPolicyEntries(Lists.newArrayList(entry));
1:886e2d4:         broker.setDestinationPolicy(policyMap);
1:886e2d4:         return policyMap;
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     private PolicyMap applyDefaultMaximumDestinationPolicy(int maxDestinations) {
1:886e2d4:         PolicyMap policyMap = new PolicyMap();
1:886e2d4:         PolicyEntry defaultEntry = new PolicyEntry();
1:886e2d4:         if (maxDestinations >= 0) {
1:886e2d4:             defaultEntry.setMaxDestinations(maxDestinations);
1:886e2d4:         }
1:886e2d4:         policyMap.setDefaultEntry(defaultEntry);
1:886e2d4:         broker.setDestinationPolicy(policyMap);
1:886e2d4:         return policyMap;
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     private void createQueue(String queueName) throws Exception {
1:886e2d4:         Queue queue = session.createQueue(queueName);
1:886e2d4:         producer = session.createProducer(queue);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     private void createTopic(String topicName) throws Exception {
1:886e2d4:         Topic topic = session.createTopic(topicName);
1:886e2d4:         producer = session.createProducer(topic);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:886e2d4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import com.google.common.collect.Lists;
1: 
1: /**
1:  * This unit test is to test that setting the property "maxDestinations" on
1:  * PolicyEntry works correctly. If this property is set, it will limit the
1:  * number of destinations that can be created. Advisory topics will be ignored
1:  * during calculations.
1:  *
1:  */
1: public class MaxDestinationsPolicyTest {
1:     BrokerService broker;
1:     ConnectionFactory factory;
1:     Connection connection;
1:     Session session;
1:     MessageProducer producer;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1: 
1:         File testDataDir = new File("target/activemq-data/AMQ-5751");
1:         broker.setDataDirectoryFile(testDataDir);
1:         broker.setUseJmx(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l * 1024 * 64);
1:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(new File(testDataDir, "kahadb"));
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors()
1:                 .get(0).getConnectUri().toString());
1:         connection = factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         session.close();
1:         connection.stop();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:     /**
1:      * Test that 10 queues can be created when default policy allows it.
1:      */
1:     @Test
1:     public void testMaxDestinationDefaultPolicySuccess() throws Exception {
1:         applyDefaultMaximumDestinationPolicy(10);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createQueue("queue." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test that default policy prevents going beyond max
1:      */
1:     @Test(expected = javax.jms.IllegalStateException.class)
1:     public void testMaxDestinationDefaultPolicyFail() throws Exception {
1:         applyDefaultMaximumDestinationPolicy(10);
1: 
1:         for (int i = 0; i < 11; i++) {
1:             createQueue("queue." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test that a queue policy overrides the default policy
1:      */
1:     @Test(expected = javax.jms.IllegalStateException.class)
1:     public void testMaxDestinationOnQueuePolicy() throws Exception {
1:         PolicyMap policyMap = applyDefaultMaximumDestinationPolicy(10);
1:         applyMaximumDestinationPolicy(policyMap, new ActiveMQQueue("queue.>"),
1:                 5);
1: 
1:         // This should fail even though the default policy is set to a limit of
1:         // 10 because the
1:         // queue policy overrides it
1:         for (int i = 0; i < 6; i++) {
1:             createQueue("queue." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test that 10 topics can be created when default policy allows it.
1:      */
1:     @Test
1:     public void testTopicMaxDestinationDefaultPolicySuccess() throws Exception {
1:         applyDefaultMaximumDestinationPolicy(10);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createTopic("topic." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test that topic creation will faill when exceeding the limit
1:      */
1:     @Test(expected = javax.jms.IllegalStateException.class)
1:     public void testTopicMaxDestinationDefaultPolicyFail() throws Exception {
1:         applyDefaultMaximumDestinationPolicy(20);
1: 
1:         for (int i = 0; i < 21; i++) {
1:             createTopic("topic." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test that no limit is enforced
1:      */
1:     @Test
1:     public void testTopicDefaultPolicyNoMaxDestinations() throws Exception {
1:         // -1 is the default and signals no max destinations
1:         applyDefaultMaximumDestinationPolicy(-1);
1:         for (int i = 0; i < 100; i++) {
1:             createTopic("topic." + i);
1:         }
1:     }
1: 
1:     /**
1:      * Test a mixture of queue and topic policies
1:      */
1:     @Test
1:     public void testComplexMaxDestinationPolicy() throws Exception {
1:         PolicyMap policyMap = applyMaximumDestinationPolicy(new PolicyMap(),
1:                 new ActiveMQQueue("queue.>"), 5);
1:         applyMaximumDestinationPolicy(policyMap, new ActiveMQTopic("topic.>"),
1:                 10);
1: 
1:         for (int i = 0; i < 5; i++) {
1:             createQueue("queue." + i);
1:         }
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createTopic("topic." + i);
1:         }
1: 
1:         // Make sure that adding one more of either a topic or a queue fails
1:         boolean fail = false;
1:         try {
1:             createTopic("topic.test");
1:         } catch (javax.jms.IllegalStateException e) {
1:             fail = true;
1:         }
1:         assertTrue(fail);
1: 
1:         fail = false;
1:         try {
1:             createQueue("queue.test");
1:         } catch (javax.jms.IllegalStateException e) {
1:             fail = true;
1:         }
1:         assertTrue(fail);
1:     }
1: 
1:     /**
1:      * Test child destinations of a policy
1:      */
1:     @Test
1:     public void testMaxDestinationPolicyOnChildDests() throws Exception {
1:         applyMaximumDestinationPolicy(new PolicyMap(), new ActiveMQTopic(
1:                 "topic.>"), 10);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createTopic("topic.test" + i);
1:         }
1: 
1:         // Make sure that adding one more fails
1:         boolean fail = false;
1:         try {
1:             createTopic("topic.abc.test");
1:         } catch (javax.jms.IllegalStateException e) {
1:             fail = true;
1:         }
1:         assertTrue(fail);
1: 
1:     }
1: 
1:     /**
1:      * Test a topic policy overrides the default
1:      */
1:     @Test(expected = javax.jms.IllegalStateException.class)
1:     public void testMaxDestinationOnTopicPolicy() throws Exception {
1:         PolicyMap policyMap = applyDefaultMaximumDestinationPolicy(10);
1:         applyMaximumDestinationPolicy(policyMap, new ActiveMQTopic("topic.>"),
1:                 5);
1: 
1:         // This should fail even though the default policy is set to a limit of
1:         // 10 because the
1:         // queue policy overrides it
1:         for (int i = 0; i < 6; i++) {
1:             createTopic("topic." + i);
1:         }
1:     }
1: 
1:     private PolicyMap applyMaximumDestinationPolicy(PolicyMap policyMap,
1:             ActiveMQDestination destination, int maxDestinations) {
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setDestination(destination);
1:         entry.setMaxDestinations(maxDestinations);
1:         policyMap.setPolicyEntries(Lists.newArrayList(entry));
1:         broker.setDestinationPolicy(policyMap);
1:         return policyMap;
1:     }
1: 
1:     private PolicyMap applyDefaultMaximumDestinationPolicy(int maxDestinations) {
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         if (maxDestinations >= 0) {
1:             defaultEntry.setMaxDestinations(maxDestinations);
1:         }
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:         return policyMap;
1:     }
1: 
1:     private void createQueue(String queueName) throws Exception {
1:         Queue queue = session.createQueue(queueName);
1:         producer = session.createProducer(queue);
1:     }
1: 
1:     private void createTopic(String topicName) throws Exception {
1:         Topic topic = session.createTopic(topicName);
1:         producer = session.createProducer(topic);
1:     }
1: 
1: }
============================================================================