1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
11:a3344e6: 
1:261ccab: package org.apache.activemq.bugs;
1:a3344e6: 
1:a3344e6: import javax.jms.Connection;
1:a3344e6: import javax.jms.ConnectionFactory;
1:a3344e6: import javax.jms.Destination;
1:a3344e6: import javax.jms.JMSException;
1:a3344e6: import javax.jms.Message;
1:a3344e6: import javax.jms.MessageConsumer;
1:a3344e6: import javax.jms.MessageProducer;
1:a3344e6: import javax.jms.Session;
1:a3344e6: import javax.jms.TextMessage;
1:a3344e6: 
1:a3344e6: import junit.framework.TestCase;
1:a3344e6: 
1:a3344e6: import org.apache.activemq.ActiveMQConnectionFactory;
1:a3344e6: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a3344e6: 
1:a3344e6: public class OutOfOrderTestCase extends TestCase {
1:a3344e6: 
1:42e51a3:     private static final Logger log = LoggerFactory.getLogger(OutOfOrderTestCase.class);
1:a3344e6: 
1:42e51a3:     private static final String BROKER_URL = "tcp://localhost:0";
1:42e51a3:     private static final int PREFETCH = 10;
1:42e51a3:     private static final String CONNECTION_URL_OPTIONS = "?jms.prefetchPolicy.all=" + PREFETCH;
1:a3344e6: 
1:42e51a3:     private static final String DESTINATION = "QUEUE?consumer.exclusive=true";
1:a3344e6: 
1:42e51a3:     private BrokerService brokerService;
1:42e51a3:     private Session session;
1:42e51a3:     private Connection connection;
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:42e51a3:     private int seq = 0;
1:42e51a3: 
1:42e51a3:     public void setUp() throws Exception {
1:42e51a3:         brokerService = new BrokerService();
1:42e51a3:         brokerService.setUseJmx(true);
1:42e51a3:         brokerService.addConnector(BROKER_URL);
1:42e51a3:         brokerService.deleteAllMessages();
1:42e51a3:         brokerService.start();
1:42e51a3:         brokerService.waitUntilStarted();
1:42e51a3: 
1:42e51a3:         connectionUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:42e51a3: 
1:42e51a3:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri + CONNECTION_URL_OPTIONS);
1:42e51a3:         connection = connectionFactory.createConnection();
1:42e51a3:         connection.start();
1:42e51a3:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:42e51a3:     }
1:42e51a3: 
1:42e51a3:     protected void tearDown() throws Exception {
1:42e51a3:         session.close();
1:42e51a3:         connection.close();
1:42e51a3:         brokerService.stop();
1:42e51a3:     }
1:a3344e6: 
1:a3344e6:     public void testOrder() throws Exception {
1:a3344e6: 
1:a3344e6:         log.info("Producing messages 0-29 . . .");
1:a3344e6:         Destination destination = session.createQueue(DESTINATION);
1:a3344e6:         final MessageProducer messageProducer = session
1:a3344e6:                 .createProducer(destination);
1:a3344e6:         try {
1:a3344e6:             for (int i = 0; i < 30; ++i) {
1:a3344e6:                 final Message message = session
1:a3344e6:                         .createTextMessage(createMessageText(i));
1:a3344e6:                 message.setStringProperty("JMSXGroupID", "FOO");
1:a3344e6: 
1:a3344e6:                 messageProducer.send(message);
1:a3344e6:                 log.info("sent " + toString(message));
6:a3344e6:             }
1:a3344e6:         } finally {
1:a3344e6:             messageProducer.close();
1:a3344e6:         }
1:a3344e6: 
1:a3344e6:         log.info("Consuming messages 0-9 . . .");
1:a3344e6:         consumeBatch();
1:a3344e6: 
1:a3344e6:         log.info("Consuming messages 10-19 . . .");
1:a3344e6:         consumeBatch();
1:a3344e6: 
1:a3344e6:         log.info("Consuming messages 20-29 . . .");
1:a3344e6:         consumeBatch();
1:a3344e6:     }
1:42e51a3: 
1:a3344e6:     protected void consumeBatch() throws Exception {
1:a3344e6:         Destination destination = session.createQueue(DESTINATION);
1:a3344e6:         final MessageConsumer messageConsumer = session.createConsumer(destination);
1:a3344e6:         try {
1:a3344e6:             for (int i = 0; i < 10; ++i) {
1:a3344e6:                 final Message message = messageConsumer.receive(1000L);
1:a3344e6:                 log.info("received " + toString(message));
1:a3344e6:                 assertEquals("Message out of order", createMessageText(seq++), ((TextMessage) message).getText());
1:a3344e6:                 message.acknowledge();
1:a3344e6:             }
1:a3344e6:         } finally {
1:a3344e6:             messageConsumer.close();
1:a3344e6:         }
1:a3344e6:     }
1:a3344e6: 
1:42e51a3:     private String toString(final Message message) throws JMSException {
1:42e51a3:         String ret = "received message '" + ((TextMessage) message).getText() + "' - " + message.getJMSMessageID();
1:42e51a3:         if (message.getJMSRedelivered())
1:42e51a3:              ret += " (redelivered)";
1:42e51a3:         return ret;
1:42e51a3: 
1:42e51a3:     }
1:a3344e6: 
1:42e51a3:     private static String createMessageText(final int index) {
1:42e51a3:         return "message #" + index;
1:42e51a3:     }
1:8bf987b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(OutOfOrderTestCase.class);
1:     private static final String BROKER_URL = "tcp://localhost:0";
1:     private static final int PREFETCH = 10;
1:     private static final String CONNECTION_URL_OPTIONS = "?jms.prefetchPolicy.all=" + PREFETCH;
1:     private static final String DESTINATION = "QUEUE?consumer.exclusive=true";
1:     private BrokerService brokerService;
1:     private Session session;
1:     private Connection connection;
1:     private String connectionUri;
1: 
1:     private int seq = 0;
1: 
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(true);
1:         brokerService.addConnector(BROKER_URL);
1:         brokerService.deleteAllMessages();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri + CONNECTION_URL_OPTIONS);
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         session.close();
1:         connection.close();
1:         brokerService.stop();
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String toString(final Message message) throws JMSException {
1:         String ret = "received message '" + ((TextMessage) message).getText() + "' - " + message.getJMSMessageID();
1:         if (message.getJMSRedelivered())
1:              ret += " (redelivered)";
1:         return ret;
1:     }
1: 
1:     private static String createMessageText(final int index) {
1:         return "message #" + index;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 	private static final Logger log = LoggerFactory.getLogger(OutOfOrderTestCase.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
/////////////////////////////////////////////////////////////////////////
commit:a3344e6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.bugs;
1: 
0: import java.util.Date;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.bugs.AMQ1866.ConsumerThread;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class OutOfOrderTestCase extends TestCase {
1: 	
0: 	private static final Log log = LogFactory.getLog(OutOfOrderTestCase.class);
1: 	
0: 	public static final String BROKER_URL = "tcp://localhost:61616";
0: 	private static final int PREFETCH = 10;
0: 	private static final String CONNECTION_URL = BROKER_URL + "?jms.prefetchPolicy.all=" + PREFETCH;
1: 
0: 	public static final String QUEUE_NAME = "QUEUE";
0: 	private static final String DESTINATION = "QUEUE?consumer.exclusive=true";
1: 	
0: 	BrokerService brokerService;
0: 	Session session;
0: 	Connection connection;
1: 	
0: 	int seq = 0;
1: 	
0: 	public void setUp() throws Exception {
0: 		brokerService = new BrokerService();
0: 		brokerService.setUseJmx(true);
0: 		brokerService.addConnector(BROKER_URL);
0: 		brokerService.deleteAllMessages();
0: 		brokerService.start();
1: 		
0: 		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONNECTION_URL);
0: 		connection = connectionFactory.createConnection();
0: 		connection.start();
0: 		session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:  
1: 	}
1: 	
1: 
0: 	protected void tearDown() throws Exception {
0: 		session.close();
0: 		connection.close();
0: 		brokerService.stop();
1: 	}
1: 
1: 
1: 
1:     public void testOrder() throws Exception {
1: 
1:         log.info("Producing messages 0-29 . . .");
1:         Destination destination = session.createQueue(DESTINATION);
1:         final MessageProducer messageProducer = session
1:                 .createProducer(destination);
1:         try {
1:             for (int i = 0; i < 30; ++i) {
1:                 final Message message = session
1:                         .createTextMessage(createMessageText(i));
1:                 message.setStringProperty("JMSXGroupID", "FOO");
1: 
1:                 messageProducer.send(message);
1:                 log.info("sent " + toString(message));
1:             }
1:         } finally {
1:             messageProducer.close();
1:         }
1: 
1:         log.info("Consuming messages 0-9 . . .");
1:         consumeBatch();
1: 
1:         log.info("Consuming messages 10-19 . . .");
1:         consumeBatch();
1: 
1:         log.info("Consuming messages 20-29 . . .");
1:         consumeBatch();
1:     }
1: 	
1:     protected void consumeBatch() throws Exception {
1:         Destination destination = session.createQueue(DESTINATION);
1:         final MessageConsumer messageConsumer = session.createConsumer(destination);
1:         try {
1:             for (int i = 0; i < 10; ++i) {
1:                 final Message message = messageConsumer.receive(1000L);
1:                 log.info("received " + toString(message));
1:                 assertEquals("Message out of order", createMessageText(seq++), ((TextMessage) message).getText());
1:                 message.acknowledge();
1:             }
1:         } finally {
1:             messageConsumer.close();
1:         }
1:     }
1: 
0: 	private String toString(final Message message) throws JMSException {
0: 	    String ret = "received message '" + ((TextMessage) message).getText() + "' - " + message.getJMSMessageID();
0: 		if (message.getJMSRedelivered())
0: 			 ret += " (redelivered)";
0: 		return ret;
1: 		
1: 	}
1: 
0: 	private static String createMessageText(final int index) {
0: 		return "message #" + index;
1: 	}
1: }
============================================================================