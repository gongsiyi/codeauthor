1:14a9381: /**
1:14a9381:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:14a9381:  * contributor license agreements.  See the NOTICE file distributed with
1:14a9381:  * this work for additional information regarding copyright ownership.
1:14a9381:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:14a9381:  * (the "License"); you may not use this file except in compliance with
1:14a9381:  * the License.  You may obtain a copy of the License at
1:14a9381:  *
1:14a9381:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14a9381:  *
1:14a9381:  * Unless required by applicable law or agreed to in writing, software
1:14a9381:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14a9381:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14a9381:  * See the License for the specific language governing permissions and
1:14a9381:  * limitations under the License.
1:14a9381:  */
1:14a9381: package org.apache.activemq.karaf.itest;
8:14a9381: 
1:4dd3aa4: import static org.junit.Assert.assertEquals;
1:4dd3aa4: import static org.junit.Assert.assertTrue;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1:4dd3aa4: 
1:14a9381: import java.io.File;
1:14a9381: import java.util.concurrent.Callable;
1:ac5ba40: 
1:25f18ad: import org.junit.Ignore;
1:14a9381: import org.junit.Test;
1:a678244: import org.junit.runner.RunWith;
1:25f18ad: import org.ops4j.pax.exam.Configuration;
1:14a9381: import org.ops4j.pax.exam.Option;
1:a678244: import org.ops4j.pax.exam.junit.PaxExam;
1:14a9381: 
1:a678244: @RunWith(PaxExam.class)
1:50ea308: public class ActiveMQBrokerNdExternalCamelFeatureTest extends AbstractFeatureTest {
1:14a9381: 
1:14a9381:     @Configuration
1:14a9381:     public static Option[] configure() {
1:4dd3aa4:         return new Option[] //
1:4dd3aa4:         {
1:4dd3aa4:          configure("activemq"),
1:4dd3aa4:          // copy camel.xml into a temporary directory in karaf, so we later can hot-deploy it
1:4dd3aa4:          replaceConfigurationFile("data/tmp/camel.xml", new File(RESOURCE_BASE + "camel.xml")),
1:4dd3aa4:          editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion())
1:4dd3aa4:         };
3:14a9381:     }
1:14a9381: 
1:25f18ad:     @Ignore("camel.xml from auto deploy directory does not seem to get picked up, no idea why atm")
1:b70fc9a:     @Test(timeout = 2 * 60 * 1000)
1:14a9381:     public void test() throws Throwable {
1:25f18ad:         assertFeatureInstalled("activemq");
1:3a6d67e:         installAndAssertFeature("camel");
1:25f18ad:         installAndAssertFeature("activemq-camel");
1:ac5ba40: 
1:50ea308:         assertBrokerStarted();
1:4dd3aa4:         withinReason(new Runnable() {
1:a678244:             @Override
1:4dd3aa4:             public void run() {
1:4dd3aa4:                 getBundle("org.apache.activemq.activemq-camel");
1:14a9381:             }
1:25f18ad:         });
1:25f18ad: 
1:ac5ba40:         // hot deploy the camel.xml file by copying it to the deploy directory
1:ac5ba40:         String karafDir = System.getProperty("karaf.base");
1:4dd3aa4:         System.err.println("Karaf is running in dir: " + karafDir);
1:ac5ba40:         System.err.println("Hot deploying Camel application");
1:ac5ba40:         copyFile(new File(karafDir + "/data/tmp/camel.xml"), new File(karafDir + "/deploy/camel.xml"));
1:25f18ad: 
1:25f18ad:         withinReason(new Callable<Boolean>(){
1:25f18ad:             @Override
1:25f18ad:             public Boolean call() throws Exception {
1:25f18ad:                 assertTrue("we have camel consumers", executeCommand("activemq:dstat").trim().contains("camel_in"));
1:25f18ad:                 return true;
1:25f18ad:             }
1:25f18ad:         });
1:25f18ad: 
1:14a9381:         // produce and consume
1:50ea308:         JMSTester tester = new JMSTester();
1:50ea308:         tester.produceMessage("camel_in");
1:50ea308:         assertEquals("got our message", "camel_in", tester.consumeMessage("camel_out"));
1:50ea308:         tester.close();
1:25f18ad:     }
1:ac5ba40: 
1:14a9381: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a678244
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: @RunWith(PaxExam.class)
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:1597132
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("feature:repo-add " + getCamelFeatureUrl());
commit:28e4090
/////////////////////////////////////////////////////////////////////////
0: //@RunWith(PaxExam.class)
0: @Ignore
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQBrokerNdExternalCamelFeatureTest extends AbstractFeatureTest {
/////////////////////////////////////////////////////////////////////////
1:         assertBrokerStarted();
/////////////////////////////////////////////////////////////////////////
1:         JMSTester tester = new JMSTester();
1:         tester.produceMessage("camel_in");
1:         assertEquals("got our message", "camel_in", tester.consumeMessage("camel_out"));
1:         tester.close();
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1: 
1:         return new Option[] //
1:         {
1:          configure("activemq"),
1:          // copy camel.xml into a temporary directory in karaf, so we later can hot-deploy it
1:          replaceConfigurationFile("data/tmp/camel.xml", new File(RESOURCE_BASE + "camel.xml")),
1:          editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion())
1:         };
1:         withinReason(new Runnable() {
1:             public void run() {
1:                 getBundle("org.apache.activemq.activemq-camel");
1:         System.err.println("Karaf is running in dir: " + karafDir);
commit:b0884f8
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:3a6d67e
/////////////////////////////////////////////////////////////////////////
1:         installAndAssertFeature("camel");
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.junit.PaxExam;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
0: @RunWith(PaxExam.class)
0:         Option[] baseOptions = configure("activemq");
0:         baseOptions = append(replaceConfigurationFile("data/tmp/camel.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/camel.xml")), baseOptions);
0:         baseOptions = append(editConfigurationFilePut("etc/system.properties", "camel.version", MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel")), baseOptions);
0:         return configureBrokerStart(baseOptions);
1:     @Ignore("camel.xml from auto deploy directory does not seem to get picked up, no idea why atm")
1:         assertFeatureInstalled("activemq");
0:         executeCommand("features:addurl " + getCamelFeatureUrl());
1:         installAndAssertFeature("activemq-camel");
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Callable<Boolean>() {
1:             @Override
1:             public Boolean call() throws Exception {
0:                 assertTrue("activemq-camel bundle installed", verifyBundleInstalled("org.apache.activemq.activemq-camel"));
1:                 return true;
1:             }
1:         });
1: 
0:         assertFeatureInstalled("activemq-camel");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
1:                 assertTrue("we have camel consumers", executeCommand("activemq:dstat").trim().contains("camel_in"));
0:                 return true;
1:             }
1:         });
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
/////////////////////////////////////////////////////////////////////////
0:         return configureBrokerStart(append(features(getCamelFeatureUrl(
author:Kevin Earls
-------------------------------------------------------------------------------
commit:b70fc9a
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 2 * 60 * 1000)
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:26c41d0
/////////////////////////////////////////////////////////////////////////
0:                 configure("activemq", "activemq-camel"));
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:ac5ba40
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         // copy camel.xml into a temporary directory in karaf, so we later can hot-deploy it
0:                 replaceConfigurationFile("data/tmp/camel.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/camel.xml")),
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         // hot deploy the camel.xml file by copying it to the deploy directory
0:         System.err.println("Karaf is running in dir: " + System.getProperty("karaf.base"));
1:         String karafDir = System.getProperty("karaf.base");
1:         System.err.println("Hot deploying Camel application");
1:         copyFile(new File(karafDir + "/data/tmp/camel.xml"), new File(karafDir + "/deploy/camel.xml"));
0:         Thread.sleep(3 * 1000);
0:         System.err.println("Continuing...");
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:14a9381
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
1: 
1: import java.io.File;
1: import java.util.concurrent.Callable;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.MavenUtils;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
0: import static org.ops4j.pax.exam.CoreOptions.scanFeatures;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ActiveMQBrokerNdExternalCamelFeatureTest extends AbstractJmsFeatureTest {
1: 
1:     @Configuration
1:     public static Option[] configure() {
0:         Option[] baseOptions = append(
0:                 replaceConfigurationFile("deploy/camel.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/camel.xml")),
0:                 configure("activemq"));
0:         return configureBrokerStart(append(scanFeatures(getCamelFeatureUrl(
0:                 MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel")
0:         ), "activemq-camel"), baseOptions));
1:     }
1: 
0:     @Test
1:     public void test() throws Throwable {
0:         System.err.println(executeCommand("features:list").trim());
0:         System.err.println(executeCommand("osgi:ls").trim());
0:         System.err.println(executeCommand("osgi:list").trim());
1: 
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertEquals("brokerName = amq-broker", executeCommand("activemq:list").trim());
0:                 return true;
1:             }
0:         });
1: 
1: 
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue(executeCommand("activemq:bstat").trim().contains("BrokerName = amq-broker"));
0:                 return true;
1:             }
0:         });
1: 
0:         System.err.println(executeCommand("activemq:bstat").trim());
1: 
1:         // produce and consume
0:         final String nameAndPayload = String.valueOf(System.currentTimeMillis());
0:         produceMessage("camel_in");
0:         assertEquals("got our message", "camel_in", consumeMessage("camel_out"));
1:     }
1: 
1: }
============================================================================