1:975fc55: /**
1:975fc55:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:975fc55:  * contributor license agreements.  See the NOTICE file distributed with
1:975fc55:  * this work for additional information regarding copyright ownership.
1:975fc55:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:975fc55:  * (the "License"); you may not use this file except in compliance with
1:975fc55:  * the License.  You may obtain a copy of the License at
1:975fc55:  *
1:975fc55:  *      http://www.apache.org/licenses/LICENSE-2.0
1:975fc55:  *
1:975fc55:  * Unless required by applicable law or agreed to in writing, software
1:975fc55:  * distributed under the License is distributed on an "AS IS" BASIS,
1:975fc55:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:975fc55:  * See the License for the specific language governing permissions and
1:975fc55:  * limitations under the License.
1:975fc55:  */
1:975fc55: package org.apache.activemq;
3:975fc55: 
1:3d5a758: import java.util.concurrent.TimeUnit;
1:3d5a758: 
1:975fc55: import javax.jms.MessageConsumer;
1:975fc55: import javax.jms.MessageProducer;
1:975fc55: import javax.jms.Queue;
1:975fc55: import javax.jms.Session;
1:3d5a758: 
1:975fc55: import org.apache.activemq.broker.BrokerRegistry;
1:975fc55: import org.apache.activemq.broker.region.RegionBroker;
1:975fc55: import org.apache.activemq.util.Wait;
1:9b73470: import org.slf4j.Logger;
1:9b73470: import org.slf4j.LoggerFactory;
1:975fc55: 
1:975fc55: public class OptimizedAckTest extends TestSupport {
1:9b73470:     private static final Logger LOG = LoggerFactory.getLogger(OptimizedAckTest.class);
1:975fc55:     private ActiveMQConnection connection;
1:975fc55: 
1:f88b216:     @Override
1:975fc55:     protected void setUp() throws Exception {
1:975fc55:         super.setUp();
1:975fc55:         connection = (ActiveMQConnection) createConnection();
1:975fc55:         connection.setOptimizeAcknowledge(true);
1:9b73470:         connection.setOptimizeAcknowledgeTimeOut(0);
1:975fc55:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:975fc55:         prefetchPolicy.setAll(10);
1:975fc55:         connection.setPrefetchPolicy(prefetchPolicy);
4:f88b216:     }
1:3d5a758: 
4:f88b216:     @Override
1:975fc55:     protected void tearDown() throws Exception {
1:975fc55:         connection.close();
1:975fc55:         super.tearDown();
1:f88b216:     }
1:975fc55: 
1:f88b216:     public void testReceivedMessageStillInflight() throws Exception {
1:f88b216:         connection.start();
1:f88b216:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f88b216:         Queue queue = session.createQueue("test");
1:f88b216:         MessageProducer producer = session.createProducer(queue);
4:f88b216:         for (int i = 0; i < 10; i++) {
1:f88b216:             producer.send(session.createTextMessage("Hello" + i));
1:f88b216:         }
1:3d5a758: 
1:f88b216:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:f88b216:         MessageConsumer consumer = session.createConsumer(queue);
1:9b73470: 
1:f88b216:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:f88b216:             @Override
4:f88b216:             public boolean isSatisified() throws Exception {
3:f88b216:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:f88b216:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:f88b216:             }
4:f88b216:         }));
1:9b73470: 
1:7f022c9:         for (int i = 0; i < 6; i++) {
1:975fc55:             javax.jms.Message msg = consumer.receive(4000);
1:975fc55:             assertNotNull(msg);
1:7f022c9:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1:7f022c9:         }
1:7f022c9: 
1:7f022c9:         for (int i = 6; i < 10; i++) {
1:7f022c9:             javax.jms.Message msg = consumer.receive(4000);
1:7f022c9:             assertNotNull(msg);
1:7f022c9: 
1:7f022c9:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:7f022c9:                 @Override
1:7f022c9:                 public boolean isSatisified() throws Exception {
1:7f022c9:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:7f022c9:                 }
1:7f022c9:             }));
1:7f022c9:         }
1:7f022c9:     }
1:7f022c9: 
1:f88b216:     public void testVerySlowReceivedMessageStillInflight() throws Exception {
1:f88b216:         connection.start();
1:f88b216:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f88b216:         Queue queue = session.createQueue("test");
1:f88b216:         MessageProducer producer = session.createProducer(queue);
1:f88b216:         for (int i = 0; i < 10; i++) {
1:f88b216:             producer.send(session.createTextMessage("Hello" + i));
1:f88b216:         }
1:7f022c9: 
1:f88b216:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:f88b216:         MessageConsumer consumer = session.createConsumer(queue);
1:9b73470: 
1:f88b216:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:7f022c9:             @Override
1:7f022c9:             public boolean isSatisified() throws Exception {
1:f88b216:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:f88b216:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:f88b216:             }
1:7f022c9:         }));
1:9b73470: 
1:7f022c9:         for (int i = 0; i < 6; i++) {
1:f88b216:             Thread.sleep(400);
1:7f022c9:             javax.jms.Message msg = consumer.receive(4000);
1:7f022c9:             assertNotNull(msg);
1:7f022c9:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1:7f022c9:         }
1:7f022c9: 
1:7f022c9:         for (int i = 6; i < 10; i++) {
1:7f022c9:             Thread.sleep(400);
1:7f022c9:             javax.jms.Message msg = consumer.receive(4000);
1:7f022c9:             assertNotNull(msg);
1:7f022c9: 
1:7f022c9:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:7f022c9:                 @Override
1:7f022c9:                 public boolean isSatisified() throws Exception {
1:7f022c9:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:7f022c9:                 }
1:7f022c9:             }));
1:f88b216:         }
1:975fc55: 
1:f88b216:     }
1:975fc55: 
1:f88b216:     public void testReceivedMessageNotInFlightAfterScheduledAckFires() throws Exception {
1:f88b216:         connection.setOptimizedAckScheduledAckInterval(TimeUnit.SECONDS.toMillis(10));
1:f88b216:         connection.start();
1:f88b216:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f88b216:         Queue queue = session.createQueue("test");
1:f88b216:         MessageProducer producer = session.createProducer(queue);
1:f88b216:         for (int i = 0; i < 10; i++) {
1:f88b216:             producer.send(session.createTextMessage("Hello" + i));
1:f88b216:         }
1:3d5a758: 
1:f88b216:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:f88b216:         MessageConsumer consumer = session.createConsumer(queue);
1:3d5a758: 
1:f88b216:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:f88b216:             @Override
1:f88b216:             public boolean isSatisified() throws Exception {
1:f88b216:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:f88b216:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:f88b216:             }
1:f88b216:         }));
1:3d5a758: 
1:7f022c9:         for (int i = 0; i < 6; i++) {
1:3d5a758:             javax.jms.Message msg = consumer.receive(4000);
1:3d5a758:             assertNotNull(msg);
1:7f022c9:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1:f88b216:         }
1:975fc55: 
1:7f022c9:         for (int i = 6; i < 10; i++) {
1:975fc55:             javax.jms.Message msg = consumer.receive(4000);
1:975fc55:             assertNotNull(msg);
1:7f022c9:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:f88b216:                 @Override
1:f88b216:                 public boolean isSatisified() throws Exception {
1:7f022c9:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:f88b216:                 }
1:f88b216:             }));
1:f88b216:         }
1:975fc55: 
1:f88b216:         assertTrue("After delay the scheduled ack should ack all inflight.", Wait.waitFor(new Wait.Condition() {
1:f88b216:             @Override
1:f88b216:             public boolean isSatisified() throws Exception {
1:f88b216:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:f88b216:                 return 0 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:f88b216:             }
1:f88b216:         }));
1:f88b216:     }
1:f88b216: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7f022c9
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 6; i++) {
1:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1:         }
1: 
1:         for (int i = 6; i < 10; i++) {
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
1: 
1:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                 }
1:             }));
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 6; i++) {
1:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1: 
1:         for (int i = 6; i < 10; i++) {
1:             Thread.sleep(400);
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
1: 
1:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                 }
1:             }));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 6; i++) {
1:             assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
1:         }
1: 
1:         for (int i = 6; i < 10; i++) {
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
1:             assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                 }
1:             }));
commit:f88b216
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void testReceivedMessageStillInflight() throws Exception {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 10; i++) {
1:             producer.send(session.createTextMessage("Hello" + i));
1:         }
1:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:             }
1:         }));
1:         for (int i = 0; i < 10; i++) {
0:             long inFlightCount = regionBroker.getDestinationStatistics().getInflight().getCount();
0:             if (i < 7) {
0:                 assertEquals("all prefetch is still in flight", 10, inFlightCount);
0:             } else {
0:                 assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                         return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                     }
1:                 }));
1:             }
1:         }
1:     }
1:     public void testVerySlowReceivedMessageStillInflight() throws Exception {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 10; i++) {
1:             producer.send(session.createTextMessage("Hello" + i));
1:         }
1:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:             }
1:         }));
1:         for (int i = 0; i < 10; i++) {
1:             Thread.sleep(400);
0:             long inFlightCount = regionBroker.getDestinationStatistics().getInflight().getCount();
0:             if (i < 7) {
0:                 assertEquals("all prefetch is still in flight: " + i, 10, inFlightCount);
0:             } else {
0:                 assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
0:                         return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                     }
1:                 }));
1:             }
1:         }
1:     }
1:     public void testReceivedMessageNotInFlightAfterScheduledAckFires() throws Exception {
1:         connection.setOptimizedAckScheduledAckInterval(TimeUnit.SECONDS.toMillis(10));
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 10; i++) {
1:             producer.send(session.createTextMessage("Hello" + i));
1:         }
1:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:             }
1:         }));
1:         for (int i = 0; i < 10; i++) {
0:             long inFlightCount = regionBroker.getDestinationStatistics().getInflight().getCount();
0:             if (i < 7) {
0:                 assertEquals("all prefetch is still in flight", 10, inFlightCount);
0:             } else {
0:                 assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                         return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:                     }
1:                 }));
1:             }
1:         }
1:         assertTrue("After delay the scheduled ack should ack all inflight.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return 0 == regionBroker.getDestinationStatistics().getInflight().getCount();
1:             }
1:         }));
1:     }
commit:b8bbca6
/////////////////////////////////////////////////////////////////////////
0:              long inFlightCount = regionBroker.getDestinationStatistics().getInflight().getCount();
0:                  assertEquals("all prefetch is still in flight: " + i, 10, inFlightCount);
/////////////////////////////////////////////////////////////////////////
0:              long inFlightCount = regionBroker.getDestinationStatistics().getInflight().getCount();
0:                  assertEquals("all prefetch is still in flight", 10, inFlightCount);
commit:ef24cc9
commit:3d5a758
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:      public void testReceivedMessageNotInFlightAfterScheduledAckFires() throws Exception {
0:          connection.setOptimizedAckScheduledAckInterval(TimeUnit.SECONDS.toMillis(10));
0:          connection.start();
0:          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:          Queue queue = session.createQueue("test");
0:          MessageProducer producer = session.createProducer(queue);
0:          for (int i = 0; i < 10; i++) {
0:              producer.send(session.createTextMessage("Hello" + i));
0:          }
1: 
0:          final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
0:          MessageConsumer consumer = session.createConsumer(queue);
1: 
0:          assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
0:              @Override
0:              public boolean isSatisified() throws Exception {
0:                  LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                  return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:              }
0:          }));
1: 
0:          for (int i=0; i<10; i++) {
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
0:              if (i<7) {
0:                  assertEquals("all prefetch is still in flight", 10, regionBroker.getDestinationStatistics().getInflight().getCount());
0:              } else {
0:                  assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition(){
0:                      @Override
0:                      public boolean isSatisified() throws Exception {
0:                          LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                          return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:                      }
0:                  }));
0:              }
0:          }
1: 
0:          assertTrue("After delay the scheduled ack should ack all inflight.", Wait.waitFor(new Wait.Condition(){
0:              @Override
0:              public boolean isSatisified() throws Exception {
0:                  LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                  return 0 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:              }
0:          }));
0:      }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9b73470
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(OptimizedAckTest.class);
1:         connection.setOptimizeAcknowledgeTimeOut(0);
/////////////////////////////////////////////////////////////////////////
0:          connection.start();
0:          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:          Queue queue = session.createQueue("test");
0:          MessageProducer producer = session.createProducer(queue);
0:          for (int i = 0; i < 10; i++) {
0:              producer.send(session.createTextMessage("Hello" + i));
0:          }
0:          final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
0:          MessageConsumer consumer = session.createConsumer(queue);
1: 
0:          assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
0:              @Override
0:              public boolean isSatisified() throws Exception {
0:                  LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                  return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:              }
0:          }));
1: 
/////////////////////////////////////////////////////////////////////////
0:                          LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
/////////////////////////////////////////////////////////////////////////
0:          connection.start();
0:          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:          Queue queue = session.createQueue("test");
0:          MessageProducer producer = session.createProducer(queue);
0:          for (int i = 0; i < 10; i++) {
0:              producer.send(session.createTextMessage("Hello" + i));
0:          }
0:          final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
0:          MessageConsumer consumer = session.createConsumer(queue);
1: 
0:          assertTrue("prefetch full", Wait.waitFor(new Wait.Condition() {
0:              @Override
0:              public boolean isSatisified() throws Exception {
0:                  LOG.info("inflight count: " + regionBroker.getDestinationStatistics().getInflight().getCount());
0:                  return 10 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:              }
0:          }));
1: 
commit:975fc55
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.util.Wait;
1: 
1: public class OptimizedAckTest extends TestSupport {
1: 
1:     private ActiveMQConnection connection;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = (ActiveMQConnection) createConnection();
1:         connection.setOptimizeAcknowledge(true);
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(10);
1:         connection.setPrefetchPolicy(prefetchPolicy);
0:     }
1: 
1:     protected void tearDown() throws Exception {
1:         connection.close();
1:         super.tearDown();
0:     }
1: 
0:      public void testReceivedMessageStillInflight() throws Exception {
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Queue queue = session.createQueue("test");
0:         MessageProducer producer = session.createProducer(queue);
0:         for (int i=0; i<10; i++) {
0:             producer.send(session.createTextMessage("Hello" + i));
0:         }
1: 
0:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
0:         MessageConsumer consumer = session.createConsumer(queue);
0:          for (int i=0; i<10; i++) {
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
0:              if (i<7) {
0:                  assertEquals("all prefetch is still in flight", 10, regionBroker.getDestinationStatistics().getInflight().getCount());
0:              } else {
0:                  assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition(){
0:                      @Override
0:                      public boolean isSatisified() throws Exception {
0:                          return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:                      }
0:                  }));
0:              }
0:          }
0:      }
1: 
1: 
0:      public void testVerySlowReceivedMessageStillInflight() throws Exception {
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         connection.setOptimizeAcknowledgeTimeOut(0);
0:         Queue queue = session.createQueue("test");
0:         MessageProducer producer = session.createProducer(queue);
0:         for (int i=0; i<10; i++) {
0:             producer.send(session.createTextMessage("Hello" + i));
0:         }
1: 
0:         final RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().findFirst().getRegionBroker();
0:         MessageConsumer consumer = session.createConsumer(queue);
0:          for (int i=0; i<10; i++) {
0:              Thread.sleep(400);
1:             javax.jms.Message msg = consumer.receive(4000);
1:             assertNotNull(msg);
0:              if (i<7) {
0:                  assertEquals("all prefetch is still in flight: " + i, 10, regionBroker.getDestinationStatistics().getInflight().getCount());
0:              } else {
0:                  assertTrue("most are acked but 3 remain", Wait.waitFor(new Wait.Condition(){
0:                      @Override
0:                      public boolean isSatisified() throws Exception {
0:                          return 3 == regionBroker.getDestinationStatistics().getInflight().getCount();
0:                      }
0:                  }));
0:              }
0:          }
0:      }
0: }
============================================================================