1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:6ce702d:  *
1:90d0c4b:  *      http://www.apache.org/licenses/LICENSE-2.0
4:90d0c4b:  *
1:90d0c4b:  * Unless required by applicable law or agreed to in writing, software
1:90d0c4b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90d0c4b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90d0c4b:  * See the License for the specific language governing permissions and
1:90d0c4b:  * limitations under the License.
1:90d0c4b:  */
1:90d0c4b: package org.apache.activemq.store.jdbc;
1:90d0c4b: 
1:8274f09: import java.io.IOException;
1:8274f09: 
1:90d0c4b: import org.apache.activemq.Service;
1:90d0c4b: 
1:90d0c4b: /**
1:90d0c4b:  * Represents some kind of lock service to ensure that a broker is the only master
1:b0c2a40:  *
1:6ce702d:  * @deprecated As of 5.7.0, use more general {@link org.apache.activemq.broker.Locker} instead
1:90d0c4b:  */
1:6ce702d: @Deprecated
1:90d0c4b: public interface DatabaseLocker extends Service {
1:90d0c4b: 
1:90d0c4b:     /**
1:8274f09:      * allow the injection of a jdbc persistence adapter
1:8274f09:      * @param adapter the persistence adapter to use
1:8274f09:      * @throws IOException 
1:8274f09:      */
1:8274f09:     void setPersistenceAdapter(JDBCPersistenceAdapter adapter) throws IOException;
1:8274f09:     
1:8274f09:     /**
1:90d0c4b:      * Used by a timer to keep alive the lock.
1:90d0c4b:      * If the method returns false the broker should be terminated
1:dc258ab:      * if an exception is thrown, the lock state cannot be determined
1:90d0c4b:      */
1:dc258ab:     boolean keepAlive() throws IOException;
1:8274f09: 
1:8274f09:     /**
1:8274f09:      * set the delay interval in milliseconds between lock acquire attempts
1:8274f09:      * @param lockAcquireSleepInterval the sleep interval in miliseconds
1:8274f09:      */
1:8274f09:     void setLockAcquireSleepInterval(long lockAcquireSleepInterval);
1:90d0c4b:     
1:90d0c4b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     boolean keepAlive();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * @deprecated As of 5.7.0, use more general {@link org.apache.activemq.broker.Locker} instead
1: @Deprecated
author:Gary Tully
-------------------------------------------------------------------------------
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1:      * if an exception is thrown, the lock state cannot be determined
1:     boolean keepAlive() throws IOException;
commit:8274f09
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * allow the injection of a jdbc persistence adapter
1:      * @param adapter the persistence adapter to use
1:      * @throws IOException 
1:      */
1:     void setPersistenceAdapter(JDBCPersistenceAdapter adapter) throws IOException;
1:     
1:     /**
1: 
1:     /**
1:      * set the delay interval in milliseconds between lock acquire attempts
1:      * @param lockAcquireSleepInterval the sleep interval in miliseconds
1:      */
1:     void setLockAcquireSleepInterval(long lockAcquireSleepInterval);
author:James Strachan
-------------------------------------------------------------------------------
commit:90d0c4b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.Service;
1: 
1: /**
1:  * Represents some kind of lock service to ensure that a broker is the only master
1:  * 
0:  * @version $Revision: $
1:  */
1: public interface DatabaseLocker extends Service {
1: 
1:     /**
1:      * Used by a timer to keep alive the lock.
1:      * If the method returns false the broker should be terminated
1:      */
0:     public boolean keepAlive();
1:     
1: }
============================================================================