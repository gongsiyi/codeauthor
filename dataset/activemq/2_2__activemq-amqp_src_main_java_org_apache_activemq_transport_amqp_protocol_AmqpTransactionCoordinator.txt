1:3306467: /**
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
1:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
1:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
1:3306467: 
1:3306467: import static org.apache.activemq.transport.amqp.AmqpSupport.toBytes;
1:3306467: import static org.apache.activemq.transport.amqp.AmqpSupport.toLong;
1:3306467: 
1:3306467: import java.io.IOException;
1:ed26683: import java.util.HashSet;
1:ed26683: import java.util.Set;
1:3306467: 
1:3306467: import org.apache.activemq.command.ActiveMQDestination;
1:3306467: import org.apache.activemq.command.ConnectionId;
1:3306467: import org.apache.activemq.command.ExceptionResponse;
1:3306467: import org.apache.activemq.command.LocalTransactionId;
1:3306467: import org.apache.activemq.command.Response;
1:3306467: import org.apache.activemq.command.TransactionInfo;
1:3306467: import org.apache.activemq.transport.amqp.AmqpProtocolConverter;
1:3306467: import org.apache.activemq.transport.amqp.ResponseHandler;
1:3306467: import org.apache.qpid.proton.Proton;
1:3306467: import org.apache.qpid.proton.amqp.Binary;
1:3306467: import org.apache.qpid.proton.amqp.Symbol;
1:3306467: import org.apache.qpid.proton.amqp.messaging.Accepted;
1:3306467: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:3306467: import org.apache.qpid.proton.amqp.messaging.Rejected;
1:3306467: import org.apache.qpid.proton.amqp.transaction.Declare;
1:3306467: import org.apache.qpid.proton.amqp.transaction.Declared;
1:3306467: import org.apache.qpid.proton.amqp.transaction.Discharge;
1:3306467: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:3306467: import org.apache.qpid.proton.engine.Delivery;
1:3306467: import org.apache.qpid.proton.engine.Receiver;
1:3306467: import org.apache.qpid.proton.message.Message;
1:3306467: import org.fusesource.hawtbuf.Buffer;
1:3306467: import org.slf4j.Logger;
1:3306467: import org.slf4j.LoggerFactory;
1:3306467: 
1:3306467: /**
1:3306467:  * Implements the AMQP Transaction Coordinator support to manage local
1:3306467:  * transactions between an AMQP client and the broker.
1:3306467:  */
1:3306467: public class AmqpTransactionCoordinator extends AmqpAbstractReceiver {
1:3306467: 
1:3306467:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionCoordinator.class);
1:3306467: 
1:ed26683:     private final Set<AmqpSession> txSessions = new HashSet<AmqpSession>();
1:3306467: 
1:3306467:     /**
1:3306467:      * Creates a new Transaction coordinator used to manage AMQP transactions.
1:3306467:      *
1:3306467:      * @param session
1:3306467:      *        the AmqpSession under which the coordinator was created.
1:3306467:      * @param receiver
1:3306467:      *        the AMQP receiver link endpoint for this coordinator.
1:3306467:      */
1:3306467:     public AmqpTransactionCoordinator(AmqpSession session, Receiver endpoint) {
1:3306467:         super(session, endpoint);
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     protected void processDelivery(final Delivery delivery, Buffer deliveryBytes) throws Exception {
1:3306467:         Message message = Proton.message();
1:3306467:         int offset = deliveryBytes.offset;
1:3306467:         int len = deliveryBytes.length;
1:3306467: 
1:3306467:         while (len > 0) {
1:3306467:             final int decoded = message.decode(deliveryBytes.data, offset, len);
1:3306467:             assert decoded > 0 : "Make progress decoding the message";
1:3306467:             offset += decoded;
1:3306467:             len -= decoded;
1:3306467:         }
1:3306467: 
1:3306467:         final AmqpSession session = (AmqpSession) getEndpoint().getSession().getContext();
1:ed26683:         final ConnectionId connectionId = session.getConnection().getConnectionId();
1:3306467:         final Object action = ((AmqpValue) message.getBody()).getValue();
1:3306467: 
1:3306467:         LOG.debug("COORDINATOR received: {}, [{}]", action, deliveryBytes);
1:3306467:         if (action instanceof Declare) {
1:3306467:             Declare declare = (Declare) action;
1:3306467:             if (declare.getGlobalId() != null) {
1:3306467:                 throw new Exception("don't know how to handle a declare /w a set GlobalId");
1:3306467:             }
1:3306467: 
1:ed26683:             LocalTransactionId txId = session.getConnection().getNextTransactionId();
1:ed26683:             TransactionInfo txInfo = new TransactionInfo(connectionId, txId, TransactionInfo.BEGIN);
1:ed26683:             session.getConnection().registerTransaction(txId, this);
1:ed26683:             sendToActiveMQ(txInfo, null);
1:0dd806f:             LOG.trace("started transaction {}", txId);
1:3306467: 
1:3306467:             Declared declared = new Declared();
1:ed26683:             declared.setTxnId(new Binary(toBytes(txId.getValue())));
1:3306467:             delivery.disposition(declared);
1:3306467:             delivery.settle();
1:3306467:         } else if (action instanceof Discharge) {
1:ed26683:             final Discharge discharge = (Discharge) action;
1:ed26683:             final LocalTransactionId txId = new LocalTransactionId(connectionId, toLong(discharge.getTxnId()));
1:3306467:             final byte operation;
1:ed26683: 
1:3306467:             if (discharge.getFail()) {
1:0dd806f:                 LOG.trace("rollback transaction {}", txId);
1:3306467:                 operation = TransactionInfo.ROLLBACK;
2:3306467:             } else {
1:0dd806f:                 LOG.trace("commit transaction {}", txId);
1:3306467:                 operation = TransactionInfo.COMMIT_ONE_PHASE;
1:3306467:             }
1:3306467: 
1:ed26683:             for (AmqpSession txSession : txSessions) {
1:ed26683:                 if (operation == TransactionInfo.ROLLBACK) {
1:0dd806f:                     txSession.rollback(txId);
1:ed26683:                 } else {
1:0dd806f:                     txSession.commit(txId);
1:ed26683:                 }
1:3306467:             }
1:3306467: 
1:ed26683:             txSessions.clear();
1:ed26683:             session.getConnection().unregisterTransaction(txId);
1:ed26683: 
1:ed26683:             TransactionInfo txinfo = new TransactionInfo(connectionId, txId, operation);
1:3306467:             sendToActiveMQ(txinfo, new ResponseHandler() {
1:3306467:                 @Override
1:3306467:                 public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:3306467:                     if (response.isException()) {
1:3306467:                         ExceptionResponse er = (ExceptionResponse) response;
1:3306467:                         Rejected rejected = new Rejected();
1:3306467:                         rejected.setError(new ErrorCondition(Symbol.valueOf("failed"), er.getException().getMessage()));
1:3306467:                         delivery.disposition(rejected);
1:3306467:                     } else {
1:3306467:                         delivery.disposition(Accepted.getInstance());
1:3306467:                     }
1:ed26683: 
1:3306467:                     LOG.debug("TX: {} settling {}", operation, action);
1:3306467:                     delivery.settle();
1:3306467:                     session.pumpProtonToSocket();
1:3306467:                 }
1:3306467:             });
1:3306467: 
2:3306467:             if (operation == TransactionInfo.ROLLBACK) {
1:3306467:                 session.flushPendingMessages();
1:3306467:             }
1:3306467: 
1:3306467:         } else {
1:3306467:             throw new Exception("Expected coordinator message type: " + action.getClass());
1:3306467:         }
1:3306467: 
1:fa81c1f:         replenishCredit();
1:3306467:     }
1:3306467: 
1:fa81c1f:     private void replenishCredit() {
1:fa81c1f:         if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .2)) {
1:fa81c1f:             LOG.debug("Sending more credit ({}) to transaction coordinator on session {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), session.getSessionId());
1:fa81c1f:             getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
1:fa81c1f:             session.pumpProtonToSocket();
1:3306467:         }
2:fa81c1f:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public ActiveMQDestination getDestination() {
1:3306467:         return null;
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void setDestination(ActiveMQDestination destination) {
1:3306467:     }
1:ed26683: 
1:ed26683:     public void enlist(AmqpSession session) {
1:ed26683:         txSessions.add(session);
1:ed26683:     }
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0dd806f
/////////////////////////////////////////////////////////////////////////
1:             LOG.trace("started transaction {}", txId);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("rollback transaction {}", txId);
1:                 LOG.trace("commit transaction {}", txId);
1:                     txSession.rollback(txId);
1:                     txSession.commit(txId);
commit:ed26683
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     private final Set<AmqpSession> txSessions = new HashSet<AmqpSession>();
/////////////////////////////////////////////////////////////////////////
1:         final ConnectionId connectionId = session.getConnection().getConnectionId();
/////////////////////////////////////////////////////////////////////////
1:             LocalTransactionId txId = session.getConnection().getNextTransactionId();
1:             TransactionInfo txInfo = new TransactionInfo(connectionId, txId, TransactionInfo.BEGIN);
1:             session.getConnection().registerTransaction(txId, this);
1:             sendToActiveMQ(txInfo, null);
0:             LOG.trace("started transaction {}", txId.getValue());
1:             declared.setTxnId(new Binary(toBytes(txId.getValue())));
1:             final Discharge discharge = (Discharge) action;
1:             final LocalTransactionId txId = new LocalTransactionId(connectionId, toLong(discharge.getTxnId()));
1: 
0:                 LOG.trace("rollback transaction {}", txId.getValue());
0:                 LOG.trace("commit transaction {}", txId.getValue());
1:             for (AmqpSession txSession : txSessions) {
1:                 if (operation == TransactionInfo.ROLLBACK) {
0:                     txSession.rollback();
1:                 } else {
0:                     txSession.commit();
1:                 }
1:             txSessions.clear();
1:             session.getConnection().unregisterTransaction(txId);
1: 
1:             TransactionInfo txinfo = new TransactionInfo(connectionId, txId, operation);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void enlist(AmqpSession session) {
1:         txSessions.add(session);
1:     }
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.apache.activemq.transport.amqp.AmqpSupport.toBytes;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.toLong;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.TransactionInfo;
1: import org.apache.activemq.transport.amqp.AmqpProtocolConverter;
1: import org.apache.activemq.transport.amqp.ResponseHandler;
1: import org.apache.qpid.proton.Proton;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.Accepted;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.Rejected;
1: import org.apache.qpid.proton.amqp.transaction.Declare;
1: import org.apache.qpid.proton.amqp.transaction.Declared;
1: import org.apache.qpid.proton.amqp.transaction.Discharge;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.apache.qpid.proton.message.Message;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Implements the AMQP Transaction Coordinator support to manage local
1:  * transactions between an AMQP client and the broker.
1:  */
1: public class AmqpTransactionCoordinator extends AmqpAbstractReceiver {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionCoordinator.class);
1: 
0:     private long nextTransactionId;
1: 
1:     /**
1:      * Creates a new Transaction coordinator used to manage AMQP transactions.
1:      *
1:      * @param session
1:      *        the AmqpSession under which the coordinator was created.
1:      * @param receiver
1:      *        the AMQP receiver link endpoint for this coordinator.
1:      */
1:     public AmqpTransactionCoordinator(AmqpSession session, Receiver endpoint) {
1:         super(session, endpoint);
1:     }
1: 
1:     @Override
1:     protected void processDelivery(final Delivery delivery, Buffer deliveryBytes) throws Exception {
1:         Message message = Proton.message();
1:         int offset = deliveryBytes.offset;
1:         int len = deliveryBytes.length;
1: 
1:         while (len > 0) {
1:             final int decoded = message.decode(deliveryBytes.data, offset, len);
1:             assert decoded > 0 : "Make progress decoding the message";
1:             offset += decoded;
1:             len -= decoded;
1:         }
1: 
1:         final AmqpSession session = (AmqpSession) getEndpoint().getSession().getContext();
0:         ConnectionId connectionId = session.getConnection().getConnectionId();
1:         final Object action = ((AmqpValue) message.getBody()).getValue();
1: 
1:         LOG.debug("COORDINATOR received: {}, [{}]", action, deliveryBytes);
1:         if (action instanceof Declare) {
1:             Declare declare = (Declare) action;
1:             if (declare.getGlobalId() != null) {
1:                 throw new Exception("don't know how to handle a declare /w a set GlobalId");
1:             }
1: 
0:             long txid = getNextTransactionId();
0:             TransactionInfo txinfo = new TransactionInfo(connectionId, new LocalTransactionId(connectionId, txid), TransactionInfo.BEGIN);
0:             sendToActiveMQ(txinfo, null);
0:             LOG.trace("started transaction {}", txid);
1: 
1:             Declared declared = new Declared();
0:             declared.setTxnId(new Binary(toBytes(txid)));
1:             delivery.disposition(declared);
1:             delivery.settle();
1:         } else if (action instanceof Discharge) {
0:             Discharge discharge = (Discharge) action;
0:             long txid = toLong(discharge.getTxnId());
1: 
1:             final byte operation;
1:             if (discharge.getFail()) {
0:                 LOG.trace("rollback transaction {}", txid);
1:                 operation = TransactionInfo.ROLLBACK;
1:             } else {
0:                 LOG.trace("commit transaction {}", txid);
1:                 operation = TransactionInfo.COMMIT_ONE_PHASE;
1:             }
1: 
1:             if (operation == TransactionInfo.ROLLBACK) {
0:                 session.rollback();
1:             } else {
0:                 session.commit();
1:             }
1: 
0:             TransactionInfo txinfo = new TransactionInfo(connectionId, new LocalTransactionId(connectionId, txid), operation);
1:             sendToActiveMQ(txinfo, new ResponseHandler() {
1:                 @Override
1:                 public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:                     if (response.isException()) {
1:                         ExceptionResponse er = (ExceptionResponse) response;
1:                         Rejected rejected = new Rejected();
1:                         rejected.setError(new ErrorCondition(Symbol.valueOf("failed"), er.getException().getMessage()));
1:                         delivery.disposition(rejected);
1:                     } else {
1:                         delivery.disposition(Accepted.getInstance());
1:                     }
1:                     LOG.debug("TX: {} settling {}", operation, action);
1:                     delivery.settle();
1:                     session.pumpProtonToSocket();
1:                 }
1:             });
1: 
1:             if (operation == TransactionInfo.ROLLBACK) {
1:                 session.flushPendingMessages();
1:             }
1: 
1:         } else {
1:             throw new Exception("Expected coordinator message type: " + action.getClass());
1:         }
1:     }
1: 
0:     private long getNextTransactionId() {
0:         return ++nextTransactionId;
1:     }
1: 
1:     @Override
1:     public ActiveMQDestination getDestination() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void setDestination(ActiveMQDestination destination) {
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:fa81c1f
/////////////////////////////////////////////////////////////////////////
0: 
1:         replenishCredit();
1:     }
0: 
1:     private void replenishCredit() {
1:         if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .2)) {
1:             LOG.debug("Sending more credit ({}) to transaction coordinator on session {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), session.getSessionId());
1:             getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
1:             session.pumpProtonToSocket();
1:         }
============================================================================