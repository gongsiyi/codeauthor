1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
4:a677c21: 
1:74a7a8b: import java.util.List;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageListener;
1:a677c21: import javax.jms.Session;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.command.ActiveMQTopic;
1:74a7a8b: import org.apache.activemq.test.JmsSendReceiveTestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class CompositePublishTest extends JmsSendReceiveTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CompositePublishTest.class);
1:a677c21: 
1:a677c21:     protected Connection sendConnection;
1:a677c21:     protected Connection receiveConnection;
1:a677c21:     protected Session receiveSession;
1:a677c21:     protected MessageConsumer[] consumers;
1:4743a20:     @SuppressWarnings("rawtypes")
1:a677c21:     protected List[] messageLists;
1:a677c21: 
1:4743a20:     @SuppressWarnings("unchecked")
1:4743a20:     @Override
1:a677c21:     protected void setUp() throws Exception {
1:a677c21:         super.setUp();
1:a677c21: 
1:a677c21:         connectionFactory = createConnectionFactory();
1:a677c21: 
1:a677c21:         sendConnection = createConnection();
1:a677c21:         sendConnection.start();
1:a677c21: 
1:a677c21:         receiveConnection = createConnection();
1:a677c21:         receiveConnection.start();
1:a677c21: 
1:230a86c:         LOG.info("Created sendConnection: " + sendConnection);
1:230a86c:         LOG.info("Created receiveConnection: " + receiveConnection);
1:a677c21: 
1:a677c21:         session = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21: 
1:230a86c:         LOG.info("Created sendSession: " + session);
1:230a86c:         LOG.info("Created receiveSession: " + receiveSession);
1:a677c21: 
1:a677c21:         producer = session.createProducer(null);
1:a677c21: 
1:230a86c:         LOG.info("Created producer: " + producer);
1:a677c21: 
1:a677c21:         if (topic) {
1:a677c21:             consumerDestination = session.createTopic(getConsumerSubject());
1:a677c21:             producerDestination = session.createTopic(getProducerSubject());
1:74a7a8b:         } else {
1:a677c21:             consumerDestination = session.createQueue(getConsumerSubject());
1:a677c21:             producerDestination = session.createQueue(getProducerSubject());
2:a677c21:         }
1:a677c21: 
1:230a86c:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:230a86c:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:a677c21: 
1:a677c21:         Destination[] destinations = getDestinations();
1:a677c21:         consumers = new MessageConsumer[destinations.length];
1:a677c21:         messageLists = new List[destinations.length];
1:a677c21:         for (int i = 0; i < destinations.length; i++) {
1:a677c21:             Destination dest = destinations[i];
1:a677c21:             messageLists[i] = createConcurrentList();
1:a677c21:             consumers[i] = receiveSession.createConsumer(dest);
1:a677c21:             consumers[i].setMessageListener(createMessageListener(i, messageLists[i]));
1:a677c21:         }
1:a677c21: 
1:230a86c:         LOG.info("Started connections");
1:a677c21:     }
1:a677c21: 
1:933eb2f:     protected MessageListener createMessageListener(int i, final List<Message> messageList) {
1:a677c21:         return new MessageListener() {
1:4743a20:             @Override
1:a677c21:             public void onMessage(Message message) {
1:a677c21:                 consumeMessage(message, messageList);
1:a677c21:             }
1:a677c21:         };
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * Returns the subject on which we publish
1:a677c21:      */
1:4743a20:     @Override
1:a677c21:     protected String getSubject() {
1:a677c21:         return getPrefix() + "FOO.BAR," + getPrefix() + "FOO.X.Y";
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * Returns the destinations to which we consume
1:a677c21:      */
1:a677c21:     protected Destination[] getDestinations() {
1:74a7a8b:         return new Destination[] {new ActiveMQTopic(getPrefix() + "FOO.BAR"), new ActiveMQTopic(getPrefix() + "FOO.*"), new ActiveMQTopic(getPrefix() + "FOO.X.Y")};
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected String getPrefix() {
1:a677c21:         return super.getSubject() + ".";
1:a677c21:     }
1:a677c21: 
1:4743a20:     @SuppressWarnings("unchecked")
1:4743a20:     @Override
1:a677c21:     protected void assertMessagesAreReceived() throws JMSException {
1:a677c21:         waitForMessagesToBeDelivered();
1:933eb2f:         int size = messageLists.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:230a86c:             LOG.info("Message list: " + i + " contains: " + messageLists[i].size() + " message(s)");
1:a677c21:         }
1:933eb2f:         size = messageLists.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:a677c21:             assertMessagesReceivedAreValid(messageLists[i]);
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected ActiveMQConnectionFactory createConnectionFactory() {
1:a677c21:         return new ActiveMQConnectionFactory("vm://localhost");
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         session.close();
1:a677c21:         receiveSession.close();
1:a677c21: 
1:a677c21:         sendConnection.close();
1:a677c21:         receiveConnection.close();
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     @SuppressWarnings("unchecked")
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected MessageListener createMessageListener(int i, final List<Message> messageList) {
/////////////////////////////////////////////////////////////////////////
1:         int size = messageLists.length;
1:         for (int i = 0; i < size; i++) {
1:         size = messageLists.length;
1:         for (int i = 0; i < size; i++) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.test.retroactive.RetroactiveConsumerTestWithSimpleMessageListTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(CompositePublishTest.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.test.JmsSendReceiveTestSupport;
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new Destination[] {new ActiveMQTopic(getPrefix() + "FOO.BAR"), new ActiveMQTopic(getPrefix() + "FOO.*"), new ActiveMQTopic(getPrefix() + "FOO.X.Y")};
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created sendConnection: " + sendConnection);
1:         LOG.info("Created receiveConnection: " + receiveConnection);
1:         LOG.info("Created sendSession: " + session);
1:         LOG.info("Created receiveSession: " + receiveSession);
1:         LOG.info("Created producer: " + producer);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Started connections");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message list: " + i + " contains: " + messageLists[i].size() + " message(s)");
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(CompositePublishTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.test.JmsSendReceiveTestSupport;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
0: import java.util.List;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class CompositePublishTest extends JmsSendReceiveTestSupport {
1: 
1:     protected Connection sendConnection;
1:     protected Connection receiveConnection;
1:     protected Session receiveSession;
1:     protected MessageConsumer[] consumers;
1:     protected List[] messageLists;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connectionFactory = createConnectionFactory();
1: 
1:         sendConnection = createConnection();
1:         sendConnection.start();
1: 
1:         receiveConnection = createConnection();
1:         receiveConnection.start();
1: 
0:         log.info("Created sendConnection: " + sendConnection);
0:         log.info("Created receiveConnection: " + receiveConnection);
1: 
1:         session = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         log.info("Created sendSession: " + session);
0:         log.info("Created receiveSession: " + receiveSession);
1: 
1:         producer = session.createProducer(null);
1: 
0:         log.info("Created producer: " + producer);
1: 
1:         if (topic) {
1:             consumerDestination = session.createTopic(getConsumerSubject());
1:             producerDestination = session.createTopic(getProducerSubject());
1:         }
0:         else {
1:             consumerDestination = session.createQueue(getConsumerSubject());
1:             producerDestination = session.createQueue(getProducerSubject());
1:         }
1: 
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
0:         log.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1: 
1:         Destination[] destinations = getDestinations();
1:         consumers = new MessageConsumer[destinations.length];
1:         messageLists = new List[destinations.length];
1:         for (int i = 0; i < destinations.length; i++) {
1:             Destination dest = destinations[i];
1:             messageLists[i] = createConcurrentList();
1:             consumers[i] = receiveSession.createConsumer(dest);
1:             consumers[i].setMessageListener(createMessageListener(i, messageLists[i]));
1:         }
1: 
1: 
0:         log.info("Started connections");
1:     }
1: 
0:     protected MessageListener createMessageListener(int i, final List messageList) {
1:         return new MessageListener() {
1:             public void onMessage(Message message) {
1:                 consumeMessage(message, messageList);
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Returns the subject on which we publish
1:      */
1:     protected String getSubject() {
1:         return getPrefix() + "FOO.BAR," + getPrefix() + "FOO.X.Y";
1:     }
1: 
1:     /**
1:      * Returns the destinations to which we consume
1:      */
1:     protected Destination[] getDestinations() {
0:         return new Destination[]{new ActiveMQTopic(getPrefix() + "FOO.BAR"), new ActiveMQTopic(getPrefix() + "FOO.*"), new ActiveMQTopic(getPrefix() + "FOO.X.Y")};
1:     }
1: 
1:     protected String getPrefix() {
1:         return super.getSubject() + ".";
1:     }
1: 
1:     protected void assertMessagesAreReceived() throws JMSException {
1:         waitForMessagesToBeDelivered();
1: 
0:         for (int i = 0, size = messageLists.length; i < size; i++) {
0:             log.info("Message list: " + i + " contains: " + messageLists[i].size() + " message(s)");
1:         }
1: 
0:         for (int i = 0, size = messageLists.length; i < size; i++) {
1:             assertMessagesReceivedAreValid(messageLists[i]);
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         session.close();
1:         receiveSession.close();
1: 
1:         sendConnection.close();
1:         receiveConnection.close();
1:     }
1: }
============================================================================