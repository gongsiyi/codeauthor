1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.activemq.shiro.ConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.env.EnvironmentFilter;
1:f9451e5: import org.apache.activemq.shiro.subject.ConnectionSubjectResolver;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1:f9451e5: import org.apache.shiro.authc.AuthenticationException;
1:f9451e5: import org.apache.shiro.authc.AuthenticationToken;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: import org.slf4j.Logger;
1:f9451e5: import org.slf4j.LoggerFactory;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * The {@code AuthenticationFilter} enforces if authentication is required before allowing the broker filter chain
1:f9451e5:  * to continue.
1:f9451e5:  * <p/>
1:f9451e5:  * This implementation performs a connection-level authentication assertion:  If the {@link Subject} associated with the
1:f9451e5:  * connection<b>*</b> is not authenticated, and the
1:f9451e5:  * {@link AuthenticationPolicy AuthenticationPolicy} requires the {@code Subject} to be authenticated, it will attempt
1:f9451e5:  * to {@link Subject#login(org.apache.shiro.authc.AuthenticationToken) login} the Subject automatically.  The
1:f9451e5:  * {@link AuthenticationToken} used to login is created by the
1:f9451e5:  * {@link #getAuthenticationTokenFactory() authenticationTokenFactory}, typically by acquiring any credentials
1:f9451e5:  * associated with the connection.
1:f9451e5:  * <p/>
1:f9451e5:  * Once the connection's {@code Subject} is authenticated as necessary, the broker filter chain will continue
1:f9451e5:  * as expected.
1:f9451e5:  * <p/>
1:f9451e5:  * <b>*</b>: The upstream {@link org.apache.activemq.shiro.subject.SubjectFilter} is expected to execute before this one, ensuring a Subject instance
1:f9451e5:  * is already associated with the connection.
1:f9451e5:  *
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class AuthenticationFilter extends EnvironmentFilter {
1:f9451e5: 
1:f9451e5:     private static final Logger LOG = LoggerFactory.getLogger(AuthenticationFilter.class);
1:f9451e5: 
1:f9451e5:     private AuthenticationPolicy authenticationPolicy;
1:f9451e5:     private AuthenticationTokenFactory authenticationTokenFactory;
1:f9451e5: 
1:f9451e5:     public AuthenticationFilter() {
1:f9451e5:         this.authenticationPolicy = new DefaultAuthenticationPolicy();
1:f9451e5:         this.authenticationTokenFactory = new DefaultAuthenticationTokenFactory();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public AuthenticationPolicy getAuthenticationPolicy() {
1:f9451e5:         return authenticationPolicy;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAuthenticationPolicy(AuthenticationPolicy authenticationPolicy) {
1:f9451e5:         this.authenticationPolicy = authenticationPolicy;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public AuthenticationTokenFactory getAuthenticationTokenFactory() {
1:f9451e5:         return authenticationTokenFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAuthenticationTokenFactory(AuthenticationTokenFactory authenticationTokenFactory) {
1:f9451e5:         this.authenticationTokenFactory = authenticationTokenFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected Subject getSubject(ConnectionReference conn) {
1:f9451e5:         return new ConnectionSubjectResolver(conn).getSubject();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         if (isEnabled()) { //disabled means don't enforce authentication (i.e. allow anonymous access):
1:f9451e5: 
1:f9451e5:             Subject subject = getSubject(new ConnectionReference(context, info, getEnvironment()));
1:f9451e5: 
1:f9451e5:             if (!subject.isAuthenticated()) {
1:f9451e5: 
1:f9451e5:                 SubjectConnectionReference connection = new SubjectConnectionReference(context, info, getEnvironment(), subject);
1:f9451e5: 
1:f9451e5:                 if (this.authenticationPolicy.isAuthenticationRequired(connection)) {
1:f9451e5:                     AuthenticationToken token = this.authenticationTokenFactory.getAuthenticationToken(connection);
1:f9451e5:                     if (token == null) {
1:f9451e5:                         String msg = "Unable to obtain authentication credentials for newly established connection.  " +
1:f9451e5:                                 "Authentication is required.";
1:f9451e5:                         throw new AuthenticationException(msg);
1:f9451e5:                     }
1:f9451e5:                     //token is not null - login the current subject:
1:f9451e5:                     subject.login(token);
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         super.addConnection(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:f9451e5:         try {
1:f9451e5:             super.removeConnection(context, info, error);
1:f9451e5:         } finally {
1:f9451e5:             SecurityContext secCtx = context.getSecurityContext();
1:f9451e5: 
1:f9451e5:             if (secCtx instanceof SubjectSecurityContext) {
1:f9451e5: 
1:f9451e5:                 SubjectSecurityContext subjectSecurityContext = (SubjectSecurityContext) secCtx;
1:f9451e5:                 Subject subject = subjectSecurityContext.getSubject();
1:f9451e5: 
1:f9451e5:                 if (subject != null) {
1:f9451e5:                     try {
1:f9451e5:                         subject.logout();
1:f9451e5:                     } catch (Throwable t) {
1:f9451e5:                         String msg = "Unable to cleanly logout connection Subject during connection removal.  This is " +
1:f9451e5:                                 "unexpected but not critical: it can be safely ignored because the " +
1:f9451e5:                                 "connection will no longer be used.";
1:f9451e5:                         LOG.info(msg, t);
1:f9451e5:                     }
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.shiro.ConnectionReference;
1: import org.apache.activemq.shiro.env.EnvironmentFilter;
1: import org.apache.activemq.shiro.subject.ConnectionSubjectResolver;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1: import org.apache.shiro.authc.AuthenticationException;
1: import org.apache.shiro.authc.AuthenticationToken;
1: import org.apache.shiro.subject.Subject;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * The {@code AuthenticationFilter} enforces if authentication is required before allowing the broker filter chain
1:  * to continue.
1:  * <p/>
1:  * This implementation performs a connection-level authentication assertion:  If the {@link Subject} associated with the
1:  * connection<b>*</b> is not authenticated, and the
1:  * {@link AuthenticationPolicy AuthenticationPolicy} requires the {@code Subject} to be authenticated, it will attempt
1:  * to {@link Subject#login(org.apache.shiro.authc.AuthenticationToken) login} the Subject automatically.  The
1:  * {@link AuthenticationToken} used to login is created by the
1:  * {@link #getAuthenticationTokenFactory() authenticationTokenFactory}, typically by acquiring any credentials
1:  * associated with the connection.
1:  * <p/>
1:  * Once the connection's {@code Subject} is authenticated as necessary, the broker filter chain will continue
1:  * as expected.
1:  * <p/>
1:  * <b>*</b>: The upstream {@link org.apache.activemq.shiro.subject.SubjectFilter} is expected to execute before this one, ensuring a Subject instance
1:  * is already associated with the connection.
1:  *
1:  * @since 5.10.0
1:  */
1: public class AuthenticationFilter extends EnvironmentFilter {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AuthenticationFilter.class);
1: 
1:     private AuthenticationPolicy authenticationPolicy;
1:     private AuthenticationTokenFactory authenticationTokenFactory;
1: 
1:     public AuthenticationFilter() {
1:         this.authenticationPolicy = new DefaultAuthenticationPolicy();
1:         this.authenticationTokenFactory = new DefaultAuthenticationTokenFactory();
1:     }
1: 
1:     public AuthenticationPolicy getAuthenticationPolicy() {
1:         return authenticationPolicy;
1:     }
1: 
1:     public void setAuthenticationPolicy(AuthenticationPolicy authenticationPolicy) {
1:         this.authenticationPolicy = authenticationPolicy;
1:     }
1: 
1:     public AuthenticationTokenFactory getAuthenticationTokenFactory() {
1:         return authenticationTokenFactory;
1:     }
1: 
1:     public void setAuthenticationTokenFactory(AuthenticationTokenFactory authenticationTokenFactory) {
1:         this.authenticationTokenFactory = authenticationTokenFactory;
1:     }
1: 
1:     protected Subject getSubject(ConnectionReference conn) {
1:         return new ConnectionSubjectResolver(conn).getSubject();
1:     }
1: 
1:     @Override
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1: 
1:         if (isEnabled()) { //disabled means don't enforce authentication (i.e. allow anonymous access):
1: 
1:             Subject subject = getSubject(new ConnectionReference(context, info, getEnvironment()));
1: 
1:             if (!subject.isAuthenticated()) {
1: 
1:                 SubjectConnectionReference connection = new SubjectConnectionReference(context, info, getEnvironment(), subject);
1: 
1:                 if (this.authenticationPolicy.isAuthenticationRequired(connection)) {
1:                     AuthenticationToken token = this.authenticationTokenFactory.getAuthenticationToken(connection);
1:                     if (token == null) {
1:                         String msg = "Unable to obtain authentication credentials for newly established connection.  " +
1:                                 "Authentication is required.";
1:                         throw new AuthenticationException(msg);
1:                     }
1:                     //token is not null - login the current subject:
1:                     subject.login(token);
1:                 }
1:             }
1:         }
1: 
1:         super.addConnection(context, info);
1:     }
1: 
1:     @Override
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         try {
1:             super.removeConnection(context, info, error);
1:         } finally {
1:             SecurityContext secCtx = context.getSecurityContext();
1: 
1:             if (secCtx instanceof SubjectSecurityContext) {
1: 
1:                 SubjectSecurityContext subjectSecurityContext = (SubjectSecurityContext) secCtx;
1:                 Subject subject = subjectSecurityContext.getSubject();
1: 
1:                 if (subject != null) {
1:                     try {
1:                         subject.logout();
1:                     } catch (Throwable t) {
1:                         String msg = "Unable to cleanly logout connection Subject during connection removal.  This is " +
1:                                 "unexpected but not critical: it can be safely ignored because the " +
1:                                 "connection will no longer be used.";
1:                         LOG.info(msg, t);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================