1:e9a64b1: /**
1:e9a64b1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e9a64b1:  * contributor license agreements.  See the NOTICE file distributed with
1:e9a64b1:  * this work for additional information regarding copyright ownership.
1:e9a64b1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e9a64b1:  * (the "License"); you may not use this file except in compliance with
1:e9a64b1:  * the License.  You may obtain a copy of the License at
1:e9a64b1:  *
1:e9a64b1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e9a64b1:  *
1:e9a64b1:  * Unless required by applicable law or agreed to in writing, software
1:e9a64b1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9a64b1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9a64b1:  * See the License for the specific language governing permissions and
1:e9a64b1:  * limitations under the License.
1:e9a64b1:  */
1:e9a64b1: package org.apache.activemq.util;
1:e9a64b1: 
1:e9a64b1: public class JenkinsHash {
1:e9a64b1: 
1:7f4851f:     private static final long INT_MASK = 0x00000000ffffffffL;
1:7f4851f:     private static final long BYTE_MASK = 0x00000000000000ffL;
1:e9a64b1: 
1:7f4851f:     private static final JenkinsHash _instance = new JenkinsHash();
1:e9a64b1: 
1:e9a64b1:     public static JenkinsHash getInstance() {
1:e9a64b1:         return _instance;
2:e9a64b1:     }
1:e9a64b1: 
1:e9a64b1:     private static long rot(long val, int pos) {
1:e9a64b1:         return ((Integer.rotateLeft((int) (val & INT_MASK), pos)) & INT_MASK);
1:e9a64b1:     }
1:e9a64b1: 
1:e9a64b1:     /**
1:e9a64b1:      * Calculate a hash using all bytes from the input argument, and
1:e9a64b1:      * a seed of -1.
1:e9a64b1:      * @param bytes input bytes
1:e9a64b1:      * @return hash value
1:e9a64b1:      */
1:e9a64b1:     public int hash(byte[] bytes) {
1:e9a64b1:         return hash(bytes, bytes.length, -1);
1:e9a64b1:     }
1:e9a64b1: 
1:e9a64b1:     /**
1:e9a64b1:      * Calculate a hash using all bytes from the input argument, and
1:e9a64b1:      * a seed of -1.
1:e9a64b1:      * @param bytes input bytes
1:e9a64b1:      * @return hash value
1:e9a64b1:      */
1:e9a64b1:     public int hash(byte[] bytes, int initVal) {
1:e9a64b1:         return hash(bytes, bytes.length, initVal);
1:e9a64b1:     }
1:e9a64b1: 
1:e9a64b1:     /**
1:e9a64b1:      * taken from  hashlittle() -- hash a variable-length key into a 32-bit value
1:e9a64b1:      *
1:e9a64b1:      * @param key     the key (the unaligned variable-length array of bytes)
1:e9a64b1:      * @param nbytes  number of bytes to include in hash
1:e9a64b1:      * @param initval can be any integer value
1:e9a64b1:      * @return a 32-bit value.  Every bit of the key affects every bit of the
1:e9a64b1:      * return value.  Two keys differing by one or two bits will have totally
1:e9a64b1:      * different hash values.
1:e9a64b1:      * <p>
1:e9a64b1:      * <p>The best hash table sizes are powers of 2.  There is no need to do mod
1:e9a64b1:      * a prime (mod is sooo slow!).  If you need less than 32 bits, use a bitmask.
1:e9a64b1:      * For example, if you need only 10 bits, do
1:e9a64b1:      * <code>h = (h & hashmask(10));</code>
1:e9a64b1:      * In which case, the hash table should have hashsize(10) elements.
1:e9a64b1:      * <p>
1:e9a64b1:      * <p>If you are hashing n strings byte[][] k, do it like this:
1:e9a64b1:      * for (int i = 0, h = 0; i < n; ++i) h = hash( k[i], h);
1:e9a64b1:      * <p>
1:e9a64b1:      * <p>By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this
1:e9a64b1:      * code any way you wish, private, educational, or commercial.  It's free.
1:e9a64b1:      * <p>
1:e9a64b1:      * <p>Use for hash table lookup, or anything where one collision in 2^^32 is
1:e9a64b1:      * acceptable.  Do NOT use for cryptographic purposes.
1:e9a64b1:      */
1:e9a64b1:     public int hash(byte[] key, int nbytes, int initval) {
1:e9a64b1:         int length = nbytes;
1:e9a64b1:         long a, b, c;       // We use longs because we don't have unsigned ints
1:e9a64b1:         a = b = c = (0x00000000deadbeefL + length + initval) & INT_MASK;
1:e9a64b1:         int offset = 0;
1:e9a64b1:         for (; length > 12; offset += 12, length -= 12) {
1:e9a64b1:             a = (a + (key[offset + 0] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:             a = (a + (((key[offset + 1] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             a = (a + (((key[offset + 2] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             a = (a + (((key[offset + 3] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1:             b = (b + (key[offset + 4] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:             b = (b + (((key[offset + 5] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             b = (b + (((key[offset + 6] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             b = (b + (((key[offset + 7] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1:             c = (c + (key[offset + 8] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:             c = (c + (((key[offset + 9] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             c = (c + (((key[offset + 10] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             c = (c + (((key[offset + 11] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1: 
1:e9a64b1:             /*
1:e9a64b1:              * mix -- mix 3 32-bit values reversibly.
1:e9a64b1:              * This is reversible, so any information in (a,b,c) before mix() is
1:e9a64b1:              * still in (a,b,c) after mix().
1:e9a64b1:              *
1:e9a64b1:              * If four pairs of (a,b,c) inputs are run through mix(), or through
1:e9a64b1:              * mix() in reverse, there are at least 32 bits of the output that
1:e9a64b1:              * are sometimes the same for one pair and different for another pair.
1:e9a64b1:              *
1:e9a64b1:              * This was tested for:
1:e9a64b1:              * - pairs that differed by one bit, by two bits, in any combination
1:e9a64b1:              *   of top bits of (a,b,c), or in any combination of bottom bits of
1:e9a64b1:              *   (a,b,c).
1:e9a64b1:              * - "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
1:e9a64b1:              *   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
1:e9a64b1:              *    is commonly produced by subtraction) look like a single 1-bit
1:e9a64b1:              *    difference.
1:e9a64b1:              * - the base values were pseudorandom, all zero but one bit set, or
1:e9a64b1:              *   all zero plus a counter that starts at zero.
1:e9a64b1:              *
1:e9a64b1:              * Some k values for my "a-=c; a^=rot(c,k); c+=b;" arrangement that
1:e9a64b1:              * satisfy this are
1:e9a64b1:              *     4  6  8 16 19  4
1:e9a64b1:              *     9 15  3 18 27 15
1:e9a64b1:              *    14  9  3  7 17  3
1:e9a64b1:              * Well, "9 15 3 18 27 15" didn't quite get 32 bits diffing for
1:e9a64b1:              * "differ" defined as + with a one-bit base and a two-bit delta.  I
1:e9a64b1:              * used http://burtleburtle.net/bob/hash/avalanche.html to choose
1:e9a64b1:              * the operations, constants, and arrangements of the variables.
1:e9a64b1:              *
1:e9a64b1:              * This does not achieve avalanche.  There are input bits of (a,b,c)
1:e9a64b1:              * that fail to affect some output bits of (a,b,c), especially of a.
1:e9a64b1:              * The most thoroughly mixed value is c, but it doesn't really even
1:e9a64b1:              * achieve avalanche in c.
1:e9a64b1:              *
1:e9a64b1:              * This allows some parallelism.  Read-after-writes are good at doubling
1:e9a64b1:              * the number of bits affected, so the goal of mixing pulls in the
1:e9a64b1:              * opposite direction as the goal of parallelism.  I did what I could.
1:e9a64b1:              * Rotates seem to cost as much as shifts on every machine I could lay
1:e9a64b1:              * my hands on, and rotates are much kinder to the top and bottom bits,
1:e9a64b1:              * so I used rotates.
1:e9a64b1:              *
1:e9a64b1:              * #define mix(a,b,c) \
1:e9a64b1:              * { \
1:e9a64b1:              *   a -= c;  a ^= rot(c, 4);  c += b; \
1:e9a64b1:              *   b -= a;  b ^= rot(a, 6);  a += c; \
1:e9a64b1:              *   c -= b;  c ^= rot(b, 8);  b += a; \
1:e9a64b1:              *   a -= c;  a ^= rot(c,16);  c += b; \
1:e9a64b1:              *   b -= a;  b ^= rot(a,19);  a += c; \
1:e9a64b1:              *   c -= b;  c ^= rot(b, 4);  b += a; \
1:e9a64b1:              * }
1:e9a64b1:              *
1:e9a64b1:              * mix(a,b,c);
1:e9a64b1:              */
1:e9a64b1:             a = (a - c) & INT_MASK;
1:e9a64b1:             a ^= rot(c, 4);
1:e9a64b1:             c = (c + b) & INT_MASK;
1:e9a64b1:             b = (b - a) & INT_MASK;
1:e9a64b1:             b ^= rot(a, 6);
1:e9a64b1:             a = (a + c) & INT_MASK;
1:e9a64b1:             c = (c - b) & INT_MASK;
1:e9a64b1:             c ^= rot(b, 8);
1:e9a64b1:             b = (b + a) & INT_MASK;
1:e9a64b1:             a = (a - c) & INT_MASK;
1:e9a64b1:             a ^= rot(c, 16);
1:e9a64b1:             c = (c + b) & INT_MASK;
1:e9a64b1:             b = (b - a) & INT_MASK;
1:e9a64b1:             b ^= rot(a, 19);
1:e9a64b1:             a = (a + c) & INT_MASK;
1:e9a64b1:             c = (c - b) & INT_MASK;
1:e9a64b1:             c ^= rot(b, 4);
1:e9a64b1:             b = (b + a) & INT_MASK;
1:e9a64b1:         }
1:e9a64b1: 
1:e9a64b1:         //-------------------------------- last block: affect all 32 bits of (c)
1:e9a64b1:         switch (length) {                   // all the case statements fall through
1:e9a64b1:             case 12:
1:e9a64b1:                 c = (c + (((key[offset + 11] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 11:
1:e9a64b1:                 c = (c + (((key[offset + 10] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 10:
1:e9a64b1:                 c = (c + (((key[offset + 9] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 9:
1:e9a64b1:                 c = (c + (key[offset + 8] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:             case 8:
1:e9a64b1:                 b = (b + (((key[offset + 7] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 7:
1:e9a64b1:                 b = (b + (((key[offset + 6] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 6:
1:e9a64b1:                 b = (b + (((key[offset + 5] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 5:
1:e9a64b1:                 b = (b + (key[offset + 4] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:             case 4:
1:e9a64b1:                 a = (a + (((key[offset + 3] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 3:
1:e9a64b1:                 a = (a + (((key[offset + 2] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 2:
1:e9a64b1:                 a = (a + (((key[offset + 1] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:e9a64b1:             case 1:
1:e9a64b1:                 a = (a + (key[offset + 0] & BYTE_MASK)) & INT_MASK;
1:e9a64b1:                 break;
1:e9a64b1:             case 0:
1:e9a64b1:                 return (int) (c & INT_MASK);
1:7f4851f:         }
1:e9a64b1: 
1:e9a64b1:         /*
1:e9a64b1:          * final -- final mixing of 3 32-bit values (a,b,c) into c
1:e9a64b1:          *
1:e9a64b1:          * Pairs of (a,b,c) values differing in only a few bits will usually
1:e9a64b1:          * produce values of c that look totally different.  This was tested for
1:e9a64b1:          * - pairs that differed by one bit, by two bits, in any combination
1:e9a64b1:          *   of top bits of (a,b,c), or in any combination of bottom bits of
1:e9a64b1:          *   (a,b,c).
1:e9a64b1:          *
1:e9a64b1:          * - "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
1:e9a64b1:          *   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
1:e9a64b1:          *   is commonly produced by subtraction) look like a single 1-bit
1:e9a64b1:          *   difference.
1:e9a64b1:          *
1:e9a64b1:          * - the base values were pseudorandom, all zero but one bit set, or
1:e9a64b1:          *   all zero plus a counter that starts at zero.
1:e9a64b1:          *
1:e9a64b1:          * These constants passed:
1:e9a64b1:          *   14 11 25 16 4 14 24
1:e9a64b1:          *   12 14 25 16 4 14 24
1:e9a64b1:          * and these came close:
1:e9a64b1:          *    4  8 15 26 3 22 24
1:e9a64b1:          *   10  8 15 26 3 22 24
1:e9a64b1:          *   11  8 15 26 3 22 24
1:e9a64b1:          *
1:e9a64b1:          * #define final(a,b,c) \
1:e9a64b1:          * {
1:e9a64b1:          *   c ^= b; c -= rot(b,14); \
1:e9a64b1:          *   a ^= c; a -= rot(c,11); \
1:e9a64b1:          *   b ^= a; b -= rot(a,25); \
1:e9a64b1:          *   c ^= b; c -= rot(b,16); \
1:e9a64b1:          *   a ^= c; a -= rot(c,4);  \
1:e9a64b1:          *   b ^= a; b -= rot(a,14); \
1:e9a64b1:          *   c ^= b; c -= rot(b,24); \
1:e9a64b1:          * }
1:e9a64b1:          *
1:e9a64b1:          */
1:e9a64b1:         c ^= b;
1:e9a64b1:         c = (c - rot(b, 14)) & INT_MASK;
1:e9a64b1:         a ^= c;
1:e9a64b1:         a = (a - rot(c, 11)) & INT_MASK;
1:e9a64b1:         b ^= a;
1:e9a64b1:         b = (b - rot(a, 25)) & INT_MASK;
1:e9a64b1:         c ^= b;
1:e9a64b1:         c = (c - rot(b, 16)) & INT_MASK;
1:e9a64b1:         a ^= c;
1:e9a64b1:         a = (a - rot(c, 4)) & INT_MASK;
1:e9a64b1:         b ^= a;
1:e9a64b1:         b = (b - rot(a, 14)) & INT_MASK;
1:e9a64b1:         c ^= b;
1:e9a64b1:         c = (c - rot(b, 24)) & INT_MASK;
1:e9a64b1: 
1:e9a64b1:         return (int) (c & INT_MASK);
1:e9a64b1:     }
1:e9a64b1: 
1:e9a64b1: }
============================================================================
author:Jeff Genender
-------------------------------------------------------------------------------
commit:7f4851f
/////////////////////////////////////////////////////////////////////////
1:     private static final long INT_MASK = 0x00000000ffffffffL;
1:     private static final long BYTE_MASK = 0x00000000000000ffL;
1:     private static final JenkinsHash _instance = new JenkinsHash();
/////////////////////////////////////////////////////////////////////////
1: }
author:jgoodyear
-------------------------------------------------------------------------------
commit:e9a64b1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: public class JenkinsHash {
1: 
0:     private static long INT_MASK = 0x00000000ffffffffL;
0:     private static long BYTE_MASK = 0x00000000000000ffL;
1: 
0:     private static JenkinsHash _instance = new JenkinsHash();
1: 
1:     public static JenkinsHash getInstance() {
1:         return _instance;
1:     }
1: 
1:     private static long rot(long val, int pos) {
1:         return ((Integer.rotateLeft((int) (val & INT_MASK), pos)) & INT_MASK);
1:     }
1: 
1:     /**
1:      * Calculate a hash using all bytes from the input argument, and
1:      * a seed of -1.
1:      * @param bytes input bytes
1:      * @return hash value
1:      */
1:     public int hash(byte[] bytes) {
1:         return hash(bytes, bytes.length, -1);
1:     }
1: 
1:     /**
1:      * Calculate a hash using all bytes from the input argument, and
1:      * a seed of -1.
1:      * @param bytes input bytes
1:      * @return hash value
1:      */
1:     public int hash(byte[] bytes, int initVal) {
1:         return hash(bytes, bytes.length, initVal);
1:     }
1: 
1:     /**
1:      * taken from  hashlittle() -- hash a variable-length key into a 32-bit value
1:      *
1:      * @param key     the key (the unaligned variable-length array of bytes)
1:      * @param nbytes  number of bytes to include in hash
1:      * @param initval can be any integer value
1:      * @return a 32-bit value.  Every bit of the key affects every bit of the
1:      * return value.  Two keys differing by one or two bits will have totally
1:      * different hash values.
1:      * <p>
1:      * <p>The best hash table sizes are powers of 2.  There is no need to do mod
1:      * a prime (mod is sooo slow!).  If you need less than 32 bits, use a bitmask.
1:      * For example, if you need only 10 bits, do
1:      * <code>h = (h & hashmask(10));</code>
1:      * In which case, the hash table should have hashsize(10) elements.
1:      * <p>
1:      * <p>If you are hashing n strings byte[][] k, do it like this:
1:      * for (int i = 0, h = 0; i < n; ++i) h = hash( k[i], h);
1:      * <p>
1:      * <p>By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this
1:      * code any way you wish, private, educational, or commercial.  It's free.
1:      * <p>
1:      * <p>Use for hash table lookup, or anything where one collision in 2^^32 is
1:      * acceptable.  Do NOT use for cryptographic purposes.
1:      */
1:     public int hash(byte[] key, int nbytes, int initval) {
1:         int length = nbytes;
1:         long a, b, c;       // We use longs because we don't have unsigned ints
1:         a = b = c = (0x00000000deadbeefL + length + initval) & INT_MASK;
1:         int offset = 0;
1:         for (; length > 12; offset += 12, length -= 12) {
1:             a = (a + (key[offset + 0] & BYTE_MASK)) & INT_MASK;
1:             a = (a + (((key[offset + 1] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             a = (a + (((key[offset + 2] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             a = (a + (((key[offset + 3] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:             b = (b + (key[offset + 4] & BYTE_MASK)) & INT_MASK;
1:             b = (b + (((key[offset + 5] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             b = (b + (((key[offset + 6] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             b = (b + (((key[offset + 7] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:             c = (c + (key[offset + 8] & BYTE_MASK)) & INT_MASK;
1:             c = (c + (((key[offset + 9] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             c = (c + (((key[offset + 10] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             c = (c + (((key[offset + 11] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1: 
1:             /*
1:              * mix -- mix 3 32-bit values reversibly.
1:              * This is reversible, so any information in (a,b,c) before mix() is
1:              * still in (a,b,c) after mix().
1:              *
1:              * If four pairs of (a,b,c) inputs are run through mix(), or through
1:              * mix() in reverse, there are at least 32 bits of the output that
1:              * are sometimes the same for one pair and different for another pair.
1:              *
1:              * This was tested for:
1:              * - pairs that differed by one bit, by two bits, in any combination
1:              *   of top bits of (a,b,c), or in any combination of bottom bits of
1:              *   (a,b,c).
1:              * - "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
1:              *   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
1:              *    is commonly produced by subtraction) look like a single 1-bit
1:              *    difference.
1:              * - the base values were pseudorandom, all zero but one bit set, or
1:              *   all zero plus a counter that starts at zero.
1:              *
1:              * Some k values for my "a-=c; a^=rot(c,k); c+=b;" arrangement that
1:              * satisfy this are
1:              *     4  6  8 16 19  4
1:              *     9 15  3 18 27 15
1:              *    14  9  3  7 17  3
1:              * Well, "9 15 3 18 27 15" didn't quite get 32 bits diffing for
1:              * "differ" defined as + with a one-bit base and a two-bit delta.  I
1:              * used http://burtleburtle.net/bob/hash/avalanche.html to choose
1:              * the operations, constants, and arrangements of the variables.
1:              *
1:              * This does not achieve avalanche.  There are input bits of (a,b,c)
1:              * that fail to affect some output bits of (a,b,c), especially of a.
1:              * The most thoroughly mixed value is c, but it doesn't really even
1:              * achieve avalanche in c.
1:              *
1:              * This allows some parallelism.  Read-after-writes are good at doubling
1:              * the number of bits affected, so the goal of mixing pulls in the
1:              * opposite direction as the goal of parallelism.  I did what I could.
1:              * Rotates seem to cost as much as shifts on every machine I could lay
1:              * my hands on, and rotates are much kinder to the top and bottom bits,
1:              * so I used rotates.
1:              *
1:              * #define mix(a,b,c) \
1:              * { \
1:              *   a -= c;  a ^= rot(c, 4);  c += b; \
1:              *   b -= a;  b ^= rot(a, 6);  a += c; \
1:              *   c -= b;  c ^= rot(b, 8);  b += a; \
1:              *   a -= c;  a ^= rot(c,16);  c += b; \
1:              *   b -= a;  b ^= rot(a,19);  a += c; \
1:              *   c -= b;  c ^= rot(b, 4);  b += a; \
1:              * }
1:              *
1:              * mix(a,b,c);
1:              */
1:             a = (a - c) & INT_MASK;
1:             a ^= rot(c, 4);
1:             c = (c + b) & INT_MASK;
1:             b = (b - a) & INT_MASK;
1:             b ^= rot(a, 6);
1:             a = (a + c) & INT_MASK;
1:             c = (c - b) & INT_MASK;
1:             c ^= rot(b, 8);
1:             b = (b + a) & INT_MASK;
1:             a = (a - c) & INT_MASK;
1:             a ^= rot(c, 16);
1:             c = (c + b) & INT_MASK;
1:             b = (b - a) & INT_MASK;
1:             b ^= rot(a, 19);
1:             a = (a + c) & INT_MASK;
1:             c = (c - b) & INT_MASK;
1:             c ^= rot(b, 4);
1:             b = (b + a) & INT_MASK;
1:         }
1: 
1:         //-------------------------------- last block: affect all 32 bits of (c)
1:         switch (length) {                   // all the case statements fall through
1:             case 12:
1:                 c = (c + (((key[offset + 11] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:             case 11:
1:                 c = (c + (((key[offset + 10] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             case 10:
1:                 c = (c + (((key[offset + 9] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             case 9:
1:                 c = (c + (key[offset + 8] & BYTE_MASK)) & INT_MASK;
1:             case 8:
1:                 b = (b + (((key[offset + 7] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:             case 7:
1:                 b = (b + (((key[offset + 6] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             case 6:
1:                 b = (b + (((key[offset + 5] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             case 5:
1:                 b = (b + (key[offset + 4] & BYTE_MASK)) & INT_MASK;
1:             case 4:
1:                 a = (a + (((key[offset + 3] & BYTE_MASK) << 24) & INT_MASK)) & INT_MASK;
1:             case 3:
1:                 a = (a + (((key[offset + 2] & BYTE_MASK) << 16) & INT_MASK)) & INT_MASK;
1:             case 2:
1:                 a = (a + (((key[offset + 1] & BYTE_MASK) << 8) & INT_MASK)) & INT_MASK;
1:             case 1:
1:                 a = (a + (key[offset + 0] & BYTE_MASK)) & INT_MASK;
1:                 break;
1:             case 0:
1:                 return (int) (c & INT_MASK);
1:         }
1: 
1:         /*
1:          * final -- final mixing of 3 32-bit values (a,b,c) into c
1:          *
1:          * Pairs of (a,b,c) values differing in only a few bits will usually
1:          * produce values of c that look totally different.  This was tested for
1:          * - pairs that differed by one bit, by two bits, in any combination
1:          *   of top bits of (a,b,c), or in any combination of bottom bits of
1:          *   (a,b,c).
1:          *
1:          * - "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
1:          *   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
1:          *   is commonly produced by subtraction) look like a single 1-bit
1:          *   difference.
1:          *
1:          * - the base values were pseudorandom, all zero but one bit set, or
1:          *   all zero plus a counter that starts at zero.
1:          *
1:          * These constants passed:
1:          *   14 11 25 16 4 14 24
1:          *   12 14 25 16 4 14 24
1:          * and these came close:
1:          *    4  8 15 26 3 22 24
1:          *   10  8 15 26 3 22 24
1:          *   11  8 15 26 3 22 24
1:          *
1:          * #define final(a,b,c) \
1:          * {
1:          *   c ^= b; c -= rot(b,14); \
1:          *   a ^= c; a -= rot(c,11); \
1:          *   b ^= a; b -= rot(a,25); \
1:          *   c ^= b; c -= rot(b,16); \
1:          *   a ^= c; a -= rot(c,4);  \
1:          *   b ^= a; b -= rot(a,14); \
1:          *   c ^= b; c -= rot(b,24); \
1:          * }
1:          *
1:          */
1:         c ^= b;
1:         c = (c - rot(b, 14)) & INT_MASK;
1:         a ^= c;
1:         a = (a - rot(c, 11)) & INT_MASK;
1:         b ^= a;
1:         b = (b - rot(a, 25)) & INT_MASK;
1:         c ^= b;
1:         c = (c - rot(b, 16)) & INT_MASK;
1:         a ^= c;
1:         a = (a - rot(c, 4)) & INT_MASK;
1:         b ^= a;
1:         b = (b - rot(a, 14)) & INT_MASK;
1:         c ^= b;
1:         c = (c - rot(b, 24)) & INT_MASK;
1: 
1:         return (int) (c & INT_MASK);
1:     }
1: 
1: }
============================================================================