1:1ad0117: /**
1:1ad0117:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1ad0117:  * contributor license agreements.  See the NOTICE file distributed with
1:1ad0117:  * this work for additional information regarding copyright ownership.
1:1ad0117:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1ad0117:  * (the "License"); you may not use this file except in compliance with
1:1ad0117:  * the License.  You may obtain a copy of the License at
1:1ad0117:  *
1:1ad0117:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1ad0117:  *
1:1ad0117:  * Unless required by applicable law or agreed to in writing, software
1:1ad0117:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1ad0117:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1ad0117:  * See the License for the specific language governing permissions and
1:1ad0117:  * limitations under the License.
1:1ad0117:  */
1:1ad0117: package org.apache.activemq.usecases;
1:1ad0117: 
1:1ad0117: import java.util.ArrayList;
1:1ad0117: import java.util.Arrays;
1:1ad0117: import java.util.concurrent.atomic.AtomicLong;
1:1ad0117: import javax.jms.Connection;
1:1ad0117: import javax.jms.Message;
1:1ad0117: import javax.jms.MessageListener;
1:1ad0117: import javax.jms.MessageProducer;
1:1ad0117: import javax.jms.Session;
1:1ad0117: import javax.jms.TopicSubscriber;
1:1ad0117: import javax.management.ObjectName;
1:1ad0117: import junit.framework.TestCase;
1:1ad0117: import org.apache.activemq.ActiveMQConnectionFactory;
1:1ad0117: import org.apache.activemq.broker.BrokerService;
1:1ad0117: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:1ad0117: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:1ad0117: import org.apache.activemq.broker.region.policy.PolicyMap;
1:1ad0117: import org.apache.activemq.command.ActiveMQTopic;
1:1ad0117: import org.apache.activemq.util.Wait;
1:1ad0117: import org.slf4j.Logger;
1:1ad0117: import org.slf4j.LoggerFactory;
1:1ad0117: 
1:1ad0117: public class TopicProducerDurableSubFlowControlTest extends TestCase implements MessageListener {
1:1ad0117:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerDurableSubFlowControlTest.class);
1:1ad0117:     private static final String brokerName = "testBroker";
1:1ad0117:     private static final String brokerUrl = "vm://" + brokerName;
1:1ad0117:     protected static final int destinationMemLimit = 2097152; // 2MB
1:1ad0117:     private static final AtomicLong produced = new AtomicLong();
1:1ad0117:     private static final AtomicLong consumed = new AtomicLong();
1:1ad0117:     private static final int numMessagesToSend = 10000;
1:1ad0117: 
1:1ad0117:     private BrokerService broker;
1:1ad0117: 
1:1ad0117:     protected void setUp() throws Exception {
1:1ad0117:         doSetup(true);
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     private void doSetup(boolean deleteAll) throws Exception {
1:1ad0117:         // Setup and start the broker
1:1ad0117:         broker = new BrokerService();
1:1ad0117:         broker.setBrokerName(brokerName);
1:1ad0117:         broker.setSchedulerSupport(false);
1:1ad0117:         broker.setUseJmx(true);
1:1ad0117:         broker.setUseShutdownHook(false);
1:1ad0117:         broker.addConnector(brokerUrl);
1:1ad0117:         broker.setAdvisorySupport(false);
1:1ad0117: 
1:1ad0117:         broker.getSystemUsage().getMemoryUsage().setLimit(destinationMemLimit * 10);
1:1ad0117: 
1:1ad0117:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:1ad0117: 
1:1ad0117:         // Setup the destination policy
1:1ad0117:         PolicyMap pm = new PolicyMap();
1:1ad0117: 
1:1ad0117:         // Setup the topic destination policy
1:1ad0117:         PolicyEntry tpe = new PolicyEntry();
1:1ad0117:         tpe.setTopic(">");
1:1ad0117:         tpe.setMemoryLimit(destinationMemLimit);
1:1ad0117:         tpe.setCursorMemoryHighWaterMark(10);
1:1ad0117:         tpe.setProducerFlowControl(true);
1:1ad0117:         tpe.setAdvisoryWhenFull(true);
1:1ad0117:         tpe.setExpireMessagesPeriod(0);
1:1ad0117: 
1:1ad0117: 
1:1ad0117:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
1:1ad0117: 
1:1ad0117:         setDestinationPolicy(broker, pm);
1:1ad0117: 
1:1ad0117:         // Start the broker
1:1ad0117:         broker.start();
1:1ad0117:         broker.waitUntilStarted();
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:1ad0117:         broker.setDestinationPolicy(pm);
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     protected void tearDown() throws Exception {
1:1ad0117:         broker.stop();
1:1ad0117:         broker.waitUntilStopped();
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     public void testTopicProducerFlowControl() throws Exception {
1:1ad0117: 
1:1ad0117:         // Create the connection factory
1:1ad0117:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:1ad0117:         connectionFactory.setAlwaysSyncSend(true);
1:1ad0117: 
1:1ad0117:         // Start the test destination listener
1:1ad0117:         Connection c = connectionFactory.createConnection();
1:1ad0117:         c.setClientID("cliId1");
1:1ad0117:         c.start();
1:1ad0117:         Session listenerSession = c.createSession(false, 1);
1:1ad0117: 
1:1ad0117:         TopicSubscriber durable = listenerSession.createDurableSubscriber(createDestination(), "DurableSub-0");
1:1ad0117:         durable.close();
1:1ad0117: 
1:1ad0117:         durable = listenerSession.createDurableSubscriber(createDestination(), "DurableSub-1");
1:1ad0117:         durable.setMessageListener(this);
1:1ad0117: 
1:1ad0117: 
1:1ad0117:         // Start producing the test messages
1:1ad0117:         final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1ad0117:         final MessageProducer producer = session.createProducer(createDestination());
1:1ad0117: 
1:1ad0117:         final Thread producingThread = new Thread("Producing Thread") {
1:1ad0117:             public void run() {
1:1ad0117:                 try {
1:1ad0117:                     for (long i = 0; i < numMessagesToSend; i++) {
1:1ad0117:                         producer.send(session.createTextMessage("test"));
1:1ad0117: 
1:1ad0117:                         long count = produced.incrementAndGet();
1:1ad0117:                         if (count % 10000 == 0) {
1:1ad0117:                             LOG.info("Produced " + count + " messages");
1:1ad0117:                         }
1:1ad0117:                     }
1:1ad0117:                 } catch (Throwable ex) {
1:1ad0117:                     ex.printStackTrace();
1:1ad0117:                 } finally {
1:1ad0117:                     try {
1:1ad0117:                         producer.close();
1:1ad0117:                         session.close();
1:1ad0117:                     } catch (Exception e) {
1:1ad0117:                     }
1:1ad0117:                 }
1:1ad0117:             }
1:1ad0117:         };
1:1ad0117: 
1:1ad0117:         producingThread.start();
1:1ad0117: 
1:1ad0117:         ArrayList<ObjectName> subON = new ArrayList<>();
1:1ad0117: 
1:1ad0117:         final ArrayList<DurableSubscriptionViewMBean> subViews = new ArrayList<>();
1:1ad0117:         subON.addAll(Arrays.asList(broker.getAdminView().getInactiveDurableTopicSubscribers()));
1:1ad0117:         subON.addAll(Arrays.asList(broker.getAdminView().getDurableTopicSubscribers()));
1:1ad0117:         assertTrue("have a sub", !subON.isEmpty());
1:1ad0117: 
1:1ad0117:         for (ObjectName subName : subON) {
1:1ad0117:             subViews.add((DurableSubscriptionViewMBean)
1:1ad0117:                     broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true));
1:1ad0117:         }
1:1ad0117: 
1:1ad0117:         LOG.info("Wait for producer to stop");
1:1ad0117: 
1:1ad0117:         assertTrue("producer thread is done", Wait.waitFor(new Wait.Condition() {
1:1ad0117:             @Override
1:1ad0117:             public boolean isSatisified() throws Exception {
1:1ad0117:                 for (DurableSubscriptionViewMBean sub : subViews) {
1:1ad0117:                     LOG.info("name: " + sub.getSubscriptionName());
1:1ad0117:                     LOG.info("cursor size: " + sub.cursorSize());
1:1ad0117:                     LOG.info("mem usage: " + sub.getCursorMemoryUsage());
1:1ad0117:                     LOG.info("mem % usage: " + sub.getCursorPercentUsage());
1:1ad0117:                 }
1:1ad0117: 
1:1ad0117:                 return !producingThread.isAlive();
1:1ad0117: 
1:1ad0117:             }
1:92d5efc:         }, 10 * 60 * 1000));
1:1ad0117: 
1:1ad0117:         for (DurableSubscriptionViewMBean sub : subViews) {
1:1ad0117:             LOG.info("name: " + sub.getSubscriptionName());
1:1ad0117:             LOG.info("cursor size: " + sub.cursorSize());
1:1ad0117:             LOG.info("mem usage: " + sub.getCursorMemoryUsage());
1:1ad0117:             LOG.info("mem % usage: " + sub.getCursorPercentUsage());
1:1ad0117: 
1:1ad0117:             if (sub.cursorSize() > 0 ) {
1:1ad0117:                 assertTrue("Has a decent usage", sub.getCursorPercentUsage() > 5);
1:1ad0117:             }
1:1ad0117:         }
1:1ad0117: 
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     protected ActiveMQTopic createDestination() throws Exception {
1:1ad0117:         return new ActiveMQTopic("test");
1:1ad0117:     }
1:1ad0117: 
1:1ad0117:     @Override
1:1ad0117:     public void onMessage(Message message) {
1:1ad0117:         long count = consumed.incrementAndGet();
1:1ad0117:         if (count % 10000 == 0) {
1:1ad0117:             LOG.info("\tConsumed " + count + " messages");
1:1ad0117:         }
1:1ad0117:     }
1:1ad0117: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:92d5efc
/////////////////////////////////////////////////////////////////////////
1:         }, 10 * 60 * 1000));
commit:1ad0117
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: import javax.management.ObjectName;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TopicProducerDurableSubFlowControlTest extends TestCase implements MessageListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerDurableSubFlowControlTest.class);
1:     private static final String brokerName = "testBroker";
1:     private static final String brokerUrl = "vm://" + brokerName;
1:     protected static final int destinationMemLimit = 2097152; // 2MB
1:     private static final AtomicLong produced = new AtomicLong();
1:     private static final AtomicLong consumed = new AtomicLong();
1:     private static final int numMessagesToSend = 10000;
1: 
1:     private BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         doSetup(true);
1:     }
1: 
1:     private void doSetup(boolean deleteAll) throws Exception {
1:         // Setup and start the broker
1:         broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1:         broker.setSchedulerSupport(false);
1:         broker.setUseJmx(true);
1:         broker.setUseShutdownHook(false);
1:         broker.addConnector(brokerUrl);
1:         broker.setAdvisorySupport(false);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(destinationMemLimit * 10);
1: 
1:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1: 
1:         // Setup the destination policy
1:         PolicyMap pm = new PolicyMap();
1: 
1:         // Setup the topic destination policy
1:         PolicyEntry tpe = new PolicyEntry();
1:         tpe.setTopic(">");
1:         tpe.setMemoryLimit(destinationMemLimit);
1:         tpe.setCursorMemoryHighWaterMark(10);
1:         tpe.setProducerFlowControl(true);
1:         tpe.setAdvisoryWhenFull(true);
1:         tpe.setExpireMessagesPeriod(0);
1: 
1: 
1:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
1: 
1:         setDestinationPolicy(broker, pm);
1: 
1:         // Start the broker
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:         broker.setDestinationPolicy(pm);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     public void testTopicProducerFlowControl() throws Exception {
1: 
1:         // Create the connection factory
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:         connectionFactory.setAlwaysSyncSend(true);
1: 
1:         // Start the test destination listener
1:         Connection c = connectionFactory.createConnection();
1:         c.setClientID("cliId1");
1:         c.start();
1:         Session listenerSession = c.createSession(false, 1);
1: 
1:         TopicSubscriber durable = listenerSession.createDurableSubscriber(createDestination(), "DurableSub-0");
1:         durable.close();
1: 
1:         durable = listenerSession.createDurableSubscriber(createDestination(), "DurableSub-1");
1:         durable.setMessageListener(this);
1: 
1: 
1:         // Start producing the test messages
1:         final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(createDestination());
1: 
1:         final Thread producingThread = new Thread("Producing Thread") {
1:             public void run() {
1:                 try {
1:                     for (long i = 0; i < numMessagesToSend; i++) {
1:                         producer.send(session.createTextMessage("test"));
1: 
1:                         long count = produced.incrementAndGet();
1:                         if (count % 10000 == 0) {
1:                             LOG.info("Produced " + count + " messages");
1:                         }
1:                     }
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 } finally {
1:                     try {
1:                         producer.close();
1:                         session.close();
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             }
1:         };
1: 
1:         producingThread.start();
1: 
1:         ArrayList<ObjectName> subON = new ArrayList<>();
1: 
1:         final ArrayList<DurableSubscriptionViewMBean> subViews = new ArrayList<>();
1:         subON.addAll(Arrays.asList(broker.getAdminView().getInactiveDurableTopicSubscribers()));
1:         subON.addAll(Arrays.asList(broker.getAdminView().getDurableTopicSubscribers()));
1:         assertTrue("have a sub", !subON.isEmpty());
1: 
1:         for (ObjectName subName : subON) {
1:             subViews.add((DurableSubscriptionViewMBean)
1:                     broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true));
1:         }
1: 
1:         LOG.info("Wait for producer to stop");
1: 
1:         assertTrue("producer thread is done", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 for (DurableSubscriptionViewMBean sub : subViews) {
1:                     LOG.info("name: " + sub.getSubscriptionName());
1:                     LOG.info("cursor size: " + sub.cursorSize());
1:                     LOG.info("mem usage: " + sub.getCursorMemoryUsage());
1:                     LOG.info("mem % usage: " + sub.getCursorPercentUsage());
1:                 }
1: 
1:                 return !producingThread.isAlive();
1: 
1:             }
0:         }, 5 * 60 * 1000));
1: 
1:         for (DurableSubscriptionViewMBean sub : subViews) {
1:             LOG.info("name: " + sub.getSubscriptionName());
1:             LOG.info("cursor size: " + sub.cursorSize());
1:             LOG.info("mem usage: " + sub.getCursorMemoryUsage());
1:             LOG.info("mem % usage: " + sub.getCursorPercentUsage());
1: 
1:             if (sub.cursorSize() > 0 ) {
1:                 assertTrue("Has a decent usage", sub.getCursorPercentUsage() > 5);
1:             }
1:         }
1: 
1:     }
1: 
1:     protected ActiveMQTopic createDestination() throws Exception {
1:         return new ActiveMQTopic("test");
1:     }
1: 
1:     @Override
1:     public void onMessage(Message message) {
1:         long count = consumed.incrementAndGet();
1:         if (count % 10000 == 0) {
1:             LOG.info("\tConsumed " + count + " messages");
1:         }
1:     }
1: }
============================================================================