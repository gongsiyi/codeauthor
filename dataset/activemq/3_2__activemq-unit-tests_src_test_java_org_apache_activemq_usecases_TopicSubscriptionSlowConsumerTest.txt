1:974f689: /**
1:974f689:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:974f689:  * contributor license agreements.  See the NOTICE file distributed with
1:974f689:  * this work for additional information regarding copyright ownership.
1:974f689:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:974f689:  * (the "License"); you may not use this file except in compliance with
1:974f689:  * the License.  You may obtain a copy of the License at
1:974f689:  *
1:974f689:  *      http://www.apache.org/licenses/LICENSE-2.0
1:974f689:  *
1:974f689:  * Unless required by applicable law or agreed to in writing, software
1:974f689:  * distributed under the License is distributed on an "AS IS" BASIS,
1:974f689:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:974f689:  * See the License for the specific language governing permissions and
1:974f689:  * limitations under the License.
1:974f689:  */
1:1be9398: package org.apache.activemq.usecases;
1:1be9398: 
1:1be9398: import junit.framework.TestCase;
1:1be9398: import org.apache.activemq.ActiveMQConnectionFactory;
1:1be9398: import org.apache.activemq.advisory.AdvisorySupport;
1:1be9398: import org.apache.activemq.broker.BrokerService;
1:1be9398: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:1be9398: import org.apache.activemq.broker.region.policy.PolicyMap;
1:1be9398: import org.apache.activemq.command.ActiveMQTopic;
1:1be9398: import org.junit.Assert;
1:1be9398: 
1:974f689: import javax.jms.Connection;
1:974f689: import javax.jms.Message;
1:974f689: import javax.jms.MessageConsumer;
1:974f689: import javax.jms.MessageProducer;
1:974f689: import javax.jms.Session;
1:974f689: 
1:1be9398: 
1:1be9398: /**
1:1be9398:  * Checks to see if "slow consumer advisory messages" are generated when 
1:1be9398:  * small number of messages (2) are published to a topic which has a subscriber 
1:1be9398:  * with a prefetch of one set.
1:1be9398:  * 
1:1be9398:  */
1:1be9398: 
1:1be9398: public class TopicSubscriptionSlowConsumerTest extends TestCase {
1:1be9398: 
1:1be9398: 	private static final String TOPIC_NAME = "slow.consumer";
1:1be9398: 	Connection connection;
1:1be9398: 	private Session session;
1:1be9398: 	private ActiveMQTopic destination;
1:1be9398: 	private MessageProducer producer;
1:1be9398: 	private MessageConsumer consumer;
1:1be9398: 	private BrokerService brokerService;
1:1be9398: 
1:1be9398: 	
1:1be9398: 	public void setUp() throws Exception {
1:1be9398: 
1:1be9398: 		brokerService = createBroker();
1:1be9398: 		
1:1be9398: 		ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:1be9398: 		
1:1be9398: 		activeMQConnectionFactory.setWatchTopicAdvisories(true);
1:1be9398: 		connection = activeMQConnectionFactory.createConnection();
1:1be9398: 		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1be9398: 		destination = new ActiveMQTopic(TOPIC_NAME);
1:1be9398: 		producer = session.createProducer(destination);
1:1be9398: 		
1:1be9398: 		connection.start();
1:1be9398: 	}
1:1be9398: 
1:1be9398: 	
1:1be9398: 	
1:1be9398: 	public void testPrefetchValueOne() throws Exception{
1:1be9398: 		
1:1be9398: 		ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC_NAME+"?consumer.prefetchSize=1");
1:1be9398: 		consumer = session.createConsumer(consumerDestination);
1:1be9398: 		
1:1be9398: 		//add a consumer to the slow consumer advisory topic. 
1:1be9398: 		ActiveMQTopic slowConsumerAdvisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination);
1:1be9398: 		MessageConsumer slowConsumerAdvisory = session.createConsumer(slowConsumerAdvisoryTopic);
1:1be9398: 		
1:1be9398: 		//publish 2 messages
1:1be9398: 		Message txtMessage = session.createTextMessage("Sample Text Message");
1:1be9398: 		for(int i= 0; i<2; i++){
1:1be9398: 			producer.send(txtMessage);
1:1be9398: 		}
1:1be9398: 		
1:1be9398: 		//consume 2 messages
1:1be9398: 		for(int i= 0; i<2; i++){
1:1be9398: 			Message receivedMsg = consumer.receive(100);
1:1be9398: 			Assert.assertNotNull("received msg "+i+" should not be null",receivedMsg);
1:1be9398: 		}
1:1be9398: 
1:1be9398: 		//check for "slow consumer" advisory message
1:1be9398: 		Message slowAdvisoryMessage = slowConsumerAdvisory.receive(100);
1:1be9398: 		Assert.assertNull( "should not have received a slow consumer advisory message",slowAdvisoryMessage);
1:1be9398: 		
1:1be9398: 	}
1:1be9398: 
1:1be9398: 	
1:1be9398: 
1:1be9398: 	public void tearDown() throws Exception {
1:1be9398: 		consumer.close();
1:1be9398: 		producer.close();
1:1be9398: 		session.close();
1:1be9398: 		connection.close();
1:1be9398: 		brokerService.stop();
1:1be9398: 	}
1:1be9398: 	
1:1be9398: 	
1:1be9398: 	//helper method to create a broker with slow consumer advisory turned on
1:1be9398: 	private BrokerService createBroker() throws Exception {
1:1be9398: 		BrokerService broker = new BrokerService();
1:1be9398: 		broker.setBrokerName("localhost");
1:1be9398: 		broker.setUseJmx(true);
1:1be9398: 		broker.setDeleteAllMessagesOnStartup(true);
1:1be9398: 		broker.addConnector("vm://localhost");
1:1be9398: 
1:1be9398: 		PolicyMap policyMap = new PolicyMap();
1:1be9398: 		PolicyEntry defaultEntry = new PolicyEntry();
1:1be9398: 		defaultEntry.setAdvisoryForSlowConsumers(true);
1:1be9398: 
1:1be9398: 		policyMap.setDefaultEntry(defaultEntry);
1:1be9398: 
1:1be9398: 		broker.setDestinationPolicy(policyMap);
1:1be9398: 		broker.start();
1:1be9398: 		broker.waitUntilStarted();
1:1be9398: 		return broker;
1:1be9398: 	}
1:1be9398: 
1:1be9398: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:974f689
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:1be9398
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.usecases;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.Assert;
1: 
1: 
1: /**
1:  * Checks to see if "slow consumer advisory messages" are generated when 
1:  * small number of messages (2) are published to a topic which has a subscriber 
1:  * with a prefetch of one set.
1:  * 
1:  */
1: 
1: public class TopicSubscriptionSlowConsumerTest extends TestCase {
1: 
1: 	private static final String TOPIC_NAME = "slow.consumer";
1: 	Connection connection;
1: 	private Session session;
1: 	private ActiveMQTopic destination;
1: 	private MessageProducer producer;
1: 	private MessageConsumer consumer;
1: 	private BrokerService brokerService;
1: 
1: 	
1: 	public void setUp() throws Exception {
1: 
1: 		brokerService = createBroker();
1: 		
1: 		ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1: 		
1: 		activeMQConnectionFactory.setWatchTopicAdvisories(true);
1: 		connection = activeMQConnectionFactory.createConnection();
1: 		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		destination = new ActiveMQTopic(TOPIC_NAME);
1: 		producer = session.createProducer(destination);
1: 		
1: 		connection.start();
1: 	}
1: 
1: 	
1: 	
1: 	public void testPrefetchValueOne() throws Exception{
1: 		
1: 		ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC_NAME+"?consumer.prefetchSize=1");
1: 		consumer = session.createConsumer(consumerDestination);
1: 		
1: 		//add a consumer to the slow consumer advisory topic. 
1: 		ActiveMQTopic slowConsumerAdvisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination);
1: 		MessageConsumer slowConsumerAdvisory = session.createConsumer(slowConsumerAdvisoryTopic);
1: 		
1: 		//publish 2 messages
1: 		Message txtMessage = session.createTextMessage("Sample Text Message");
1: 		for(int i= 0; i<2; i++){
1: 			producer.send(txtMessage);
1: 		}
1: 		
1: 		//consume 2 messages
1: 		for(int i= 0; i<2; i++){
1: 			Message receivedMsg = consumer.receive(100);
1: 			Assert.assertNotNull("received msg "+i+" should not be null",receivedMsg);
1: 		}
1: 
1: 		//check for "slow consumer" advisory message
1: 		Message slowAdvisoryMessage = slowConsumerAdvisory.receive(100);
1: 		Assert.assertNull( "should not have received a slow consumer advisory message",slowAdvisoryMessage);
1: 		
1: 	}
1: 
1: 	
1: 
1: 	public void tearDown() throws Exception {
1: 		consumer.close();
1: 		producer.close();
1: 		session.close();
1: 		connection.close();
1: 		brokerService.stop();
1: 	}
1: 	
1: 	
1: 	//helper method to create a broker with slow consumer advisory turned on
1: 	private BrokerService createBroker() throws Exception {
1: 		BrokerService broker = new BrokerService();
1: 		broker.setBrokerName("localhost");
1: 		broker.setUseJmx(true);
1: 		broker.setDeleteAllMessagesOnStartup(true);
1: 		broker.addConnector("vm://localhost");
1: 
1: 		PolicyMap policyMap = new PolicyMap();
1: 		PolicyEntry defaultEntry = new PolicyEntry();
1: 		defaultEntry.setAdvisoryForSlowConsumers(true);
1: 
1: 		policyMap.setDefaultEntry(defaultEntry);
1: 
1: 		broker.setDestinationPolicy(policyMap);
1: 		broker.start();
1: 		broker.waitUntilStarted();
1: 		return broker;
1: 	}
1: 
1: }
============================================================================