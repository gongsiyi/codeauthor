1:34242e2: /**
1:34242e2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:34242e2:  * contributor license agreements.  See the NOTICE file distributed with
1:34242e2:  * this work for additional information regarding copyright ownership.
1:34242e2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:34242e2:  * (the "License"); you may not use this file except in compliance with
1:34242e2:  * the License.  You may obtain a copy of the License at
1:34242e2:  *
1:34242e2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:34242e2:  *
1:34242e2:  * Unless required by applicable law or agreed to in writing, software
1:34242e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:34242e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:34242e2:  * See the License for the specific language governing permissions and
1:34242e2:  * limitations under the License.
1:34242e2:  */
3:34242e2: 
1:34242e2: package org.apache.activemq.transport.http;
1:34242e2: 
1:34242e2: import java.net.URISyntaxException;
1:34242e2: import javax.jms.ConnectionFactory;
1:34242e2: import javax.jms.MapMessage;
1:34242e2: import javax.jms.MessageConsumer;
1:34242e2: import javax.jms.MessageProducer;
1:34242e2: import javax.jms.Session;
1:34242e2: 
1:34242e2: import junit.framework.Test;
1:34242e2: import org.apache.activemq.ActiveMQConnectionFactory;
1:34242e2: import org.apache.activemq.JMSMessageTest;
1:34242e2: import org.apache.activemq.broker.BrokerService;
1:34242e2: import org.junit.After;
1:34242e2: import org.junit.Before;
1:34242e2: 
1:34242e2: public class HttpJMSMessageTest extends JMSMessageTest {
1:34242e2: 
1:34242e2:     @Before
1:34242e2:     public void setUp() throws Exception {
1:34242e2:         super.setUp();
1:34242e2:     }
1:34242e2: 
1:34242e2:     @After
1:34242e2:     public void tearDown() throws Exception {
1:34242e2:         super.tearDown();
1:34242e2:     }
1:34242e2: 
1:34242e2:     public static Test suite() {
1:34242e2:         return suite(HttpJMSMessageTest.class);
1:34242e2:     }
1:34242e2: 
1:34242e2:     @Override
1:34242e2:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:34242e2:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL());
1:34242e2:         return factory;
1:34242e2:     }
1:34242e2: 
1:34242e2:     protected String getBrokerURL() {
1:34242e2:         return "http://localhost:8161";
1:34242e2:     }
1:34242e2: 
1:34242e2:     @Override
1:34242e2:     protected BrokerService createBroker() throws Exception {
1:34242e2:         BrokerService answer = new BrokerService();
1:34242e2:         answer.setPersistent(false);
1:34242e2:         answer.setUseJmx(false);
1:34242e2:         answer.setManagementContext(null);
1:34242e2:         answer.addConnector(getBrokerURL());
1:34242e2:         return answer;
1:34242e2:     }
1:34242e2: 
1:34242e2:     public void testEmptyMapMessage() throws Exception {
1:34242e2: 
1:34242e2:         // Receive a message with the JMS API
1:34242e2:         connection.start();
1:34242e2:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:34242e2:         destination = createDestination(session, destinationType);
1:34242e2:         MessageConsumer consumer = session.createConsumer(destination);
1:34242e2:         MessageProducer producer = session.createProducer(destination);
1:34242e2: 
1:34242e2:         // send the message.
1:34242e2:         {
1:34242e2:             MapMessage message = session.createMapMessage();
1:34242e2:             producer.send(message);
1:34242e2:         }
1:34242e2: 
1:34242e2:         // get the message.
1:34242e2:         {
1:34242e2:             MapMessage message = (MapMessage)consumer.receive(1000);
1:34242e2:             assertNotNull(message);
1:34242e2:             assertFalse(message.getMapNames().hasMoreElements());
1:34242e2:         }
1:34242e2:         assertNull(consumer.receiveNoWait());
1:34242e2:     }
1:34242e2: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:34242e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.http;
1: 
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JMSMessageTest;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: 
1: public class HttpJMSMessageTest extends JMSMessageTest {
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     public static Test suite() {
1:         return suite(HttpJMSMessageTest.class);
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL());
1:         return factory;
1:     }
1: 
1:     protected String getBrokerURL() {
1:         return "http://localhost:8161";
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
1:         answer.setManagementContext(null);
1:         answer.addConnector(getBrokerURL());
1:         return answer;
1:     }
1: 
1:     public void testEmptyMapMessage() throws Exception {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // send the message.
1:         {
1:             MapMessage message = session.createMapMessage();
1:             producer.send(message);
1:         }
1: 
1:         // get the message.
1:         {
1:             MapMessage message = (MapMessage)consumer.receive(1000);
1:             assertNotNull(message);
1:             assertFalse(message.getMapNames().hasMoreElements());
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1: }
============================================================================