1:3e945b5: /**
1:3e945b5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3e945b5:  * contributor license agreements.  See the NOTICE file distributed with
1:3e945b5:  * this work for additional information regarding copyright ownership.
1:3e945b5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3e945b5:  * (the "License"); you may not use this file except in compliance with
1:3e945b5:  * the License.  You may obtain a copy of the License at
4:3e945b5:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3e945b5:  *
1:3e945b5:  * Unless required by applicable law or agreed to in writing, software
1:3e945b5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3e945b5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3e945b5:  * See the License for the specific language governing permissions and
1:3e945b5:  * limitations under the License.
1:3e945b5:  */
1:3e945b5: package org.apache.activemq.security;
9:3e945b5: 
1:3e945b5: import java.text.MessageFormat;
1:3e945b5: import java.util.HashSet;
1:3e945b5: import java.util.Hashtable;
1:3e945b5: import java.util.Iterator;
1:3e945b5: import java.util.Map;
1:3e945b5: import java.util.Set;
1:e78e72f: 
1:3e945b5: import javax.naming.Context;
1:3e945b5: import javax.naming.NamingEnumeration;
1:3e945b5: import javax.naming.NamingException;
1:3e945b5: import javax.naming.directory.Attribute;
1:3e945b5: import javax.naming.directory.Attributes;
1:3e945b5: import javax.naming.directory.DirContext;
1:3e945b5: import javax.naming.directory.InitialDirContext;
1:3e945b5: import javax.naming.directory.SearchControls;
1:3e945b5: import javax.naming.directory.SearchResult;
1:0a8e505: import javax.naming.ldap.LdapName;
1:0a8e505: import javax.naming.ldap.Rdn;
1:3e945b5: 
1:046130e: import org.apache.activemq.advisory.AdvisorySupport;
1:3e945b5: import org.apache.activemq.command.ActiveMQDestination;
1:5dda6e6: import org.apache.activemq.filter.DestinationMap;
1:3e945b5: import org.apache.activemq.jaas.GroupPrincipal;
1:3e945b5: import org.apache.activemq.jaas.LDAPLoginModule;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3e945b5: 
1:3e945b5: /**
1:3e945b5:  * An {@link AuthorizationMap} which uses LDAP
1:3dbc9c9:  *
1:3e945b5:  * @org.apache.xbean.XBean
1:3e945b5:  * @author ngcutura
1:3e945b5:  */
1:3e945b5: public class LDAPAuthorizationMap implements AuthorizationMap {
1:3e945b5: 
1:3e945b5:     public static final String INITIAL_CONTEXT_FACTORY = "initialContextFactory";
1:3e945b5:     public static final String CONNECTION_URL = "connectionURL";
1:3e945b5:     public static final String CONNECTION_USERNAME = "connectionUsername";
1:3e945b5:     public static final String CONNECTION_PASSWORD = "connectionPassword";
1:3e945b5:     public static final String CONNECTION_PROTOCOL = "connectionProtocol";
1:3e945b5:     public static final String AUTHENTICATION = "authentication";
1:3e945b5: 
1:3e945b5:     public static final String TOPIC_SEARCH_MATCHING = "topicSearchMatching";
1:3e945b5:     public static final String TOPIC_SEARCH_SUBTREE = "topicSearchSubtree";
1:3e945b5:     public static final String QUEUE_SEARCH_MATCHING = "queueSearchMatching";
1:3e945b5:     public static final String QUEUE_SEARCH_SUBTREE = "queueSearchSubtree";
1:3e945b5: 
1:3e945b5:     public static final String ADMIN_BASE = "adminBase";
1:3e945b5:     public static final String ADMIN_ATTRIBUTE = "adminAttribute";
1:3e945b5:     public static final String READ_BASE = "readBase";
1:3e945b5:     public static final String READ_ATTRIBUTE = "readAttribute";
1:3e945b5:     public static final String WRITE_BASE = "writeBAse";
1:3e945b5:     public static final String WRITE_ATTRIBUTE = "writeAttribute";
1:933eb2f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LDAPLoginModule.class);
1:3e945b5: 
1:3e945b5:     private String initialContextFactory;
1:3e945b5:     private String connectionURL;
1:3e945b5:     private String connectionUsername;
1:3e945b5:     private String connectionPassword;
1:3e945b5:     private String connectionProtocol;
1:3e945b5:     private String authentication;
1:3e945b5: 
1:3e945b5:     private DirContext context;
1:3e945b5: 
1:3e945b5:     private MessageFormat topicSearchMatchingFormat;
1:3e945b5:     private MessageFormat queueSearchMatchingFormat;
1:046130e:     private String advisorySearchBase = "uid=ActiveMQ.Advisory,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com";
1:efcd57f:     private String tempSearchBase = "uid=ActiveMQ.Temp,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com";
1:3e945b5: 
1:3e945b5:     private boolean topicSearchSubtreeBool = true;
1:3e945b5:     private boolean queueSearchSubtreeBool = true;
1:046130e:     private boolean useAdvisorySearchBase = true;
1:3e945b5: 
1:3e945b5:     private String adminBase;
1:3e945b5:     private String adminAttribute;
1:3e945b5:     private String readBase;
1:3e945b5:     private String readAttribute;
1:3e945b5:     private String writeBase;
1:3e945b5:     private String writeAttribute;
1:3e945b5: 
1:3e945b5:     public LDAPAuthorizationMap() {
1:3e945b5:         // lets setup some sensible defaults
1:3e945b5:         initialContextFactory = "com.sun.jndi.ldap.LdapCtxFactory";
1:3e945b5:         connectionURL = "ldap://localhost:10389";
1:3e945b5:         connectionUsername = "uid=admin,ou=system";
1:3e945b5:         connectionPassword = "secret";
1:3e945b5:         connectionProtocol = "s";
1:3e945b5:         authentication = "simple";
1:3e945b5: 
1:046130e:         topicSearchMatchingFormat = new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com");
1:046130e:         queueSearchMatchingFormat = new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,dc=example,dc=com");
1:046130e: 
1:3e945b5: 
1:3e945b5:         adminBase = "(cn=admin)";
1:3e945b5:         adminAttribute = "uniqueMember";
1:3e945b5:         readBase = "(cn=read)";
1:3e945b5:         readAttribute = "uniqueMember";
1:3e945b5:         writeBase = "(cn=write)";
1:3e945b5:         writeAttribute = "uniqueMember";
11:3e945b5:     }
1:74a7a8b: 
1:3dbc9c9:     public LDAPAuthorizationMap(Map<String,String> options) {
1:3dbc9c9:         initialContextFactory = options.get(INITIAL_CONTEXT_FACTORY);
1:3dbc9c9:         connectionURL = options.get(CONNECTION_URL);
1:3dbc9c9:         connectionUsername = options.get(CONNECTION_USERNAME);
1:3dbc9c9:         connectionPassword = options.get(CONNECTION_PASSWORD);
1:3dbc9c9:         connectionProtocol = options.get(CONNECTION_PROTOCOL);
1:3dbc9c9:         authentication = options.get(AUTHENTICATION);
1:74a7a8b: 
1:3dbc9c9:         adminBase = options.get(ADMIN_BASE);
1:3dbc9c9:         adminAttribute = options.get(ADMIN_ATTRIBUTE);
1:3dbc9c9:         readBase = options.get(READ_BASE);
1:3dbc9c9:         readAttribute = options.get(READ_ATTRIBUTE);
1:3dbc9c9:         writeBase = options.get(WRITE_BASE);
1:3dbc9c9:         writeAttribute = options.get(WRITE_ATTRIBUTE);
1:74a7a8b: 
1:3dbc9c9:         String topicSearchMatching = options.get(TOPIC_SEARCH_MATCHING);
1:3dbc9c9:         String topicSearchSubtree = options.get(TOPIC_SEARCH_SUBTREE);
1:3dbc9c9:         String queueSearchMatching = options.get(QUEUE_SEARCH_MATCHING);
1:3dbc9c9:         String queueSearchSubtree = options.get(QUEUE_SEARCH_SUBTREE);
1:3e945b5:         topicSearchMatchingFormat = new MessageFormat(topicSearchMatching);
1:3e945b5:         queueSearchMatchingFormat = new MessageFormat(queueSearchMatching);
1:d36c0d4:         topicSearchSubtreeBool = Boolean.valueOf(topicSearchSubtree).booleanValue();
1:d36c0d4:         queueSearchSubtreeBool = Boolean.valueOf(queueSearchSubtree).booleanValue();
1:74a7a8b:     }
1:74a7a8b: 
1:933eb2f:     public Set<GroupPrincipal> getTempDestinationAdminACLs() {
1:efcd57f:         try {
1:efcd57f:             context = open();
1:74a7a8b:         } catch (NamingException e) {
1:efcd57f:             LOG.error(e.toString());
1:efcd57f:             return new HashSet<GroupPrincipal>();
1:74a7a8b:         }
1:efcd57f:         SearchControls constraints = new SearchControls();
1:efcd57f:         constraints.setReturningAttributes(new String[] {adminAttribute});
1:efcd57f:         return getACLs(tempSearchBase, constraints, adminBase, adminAttribute);
1:efcd57f:     }
1:046130e: 
1:933eb2f:     public Set<GroupPrincipal> getTempDestinationReadACLs() {
1:efcd57f:         try {
1:efcd57f:             context = open();
1:efcd57f:         } catch (NamingException e) {
1:efcd57f:             LOG.error(e.toString());
1:efcd57f:             return new HashSet<GroupPrincipal>();
1:efcd57f:         }
1:efcd57f:         SearchControls constraints = new SearchControls();
1:efcd57f:         constraints.setReturningAttributes(new String[] {readAttribute});
1:efcd57f:         return getACLs(tempSearchBase, constraints, readBase, readAttribute);
1:efcd57f:     }
1:e78e72f: 
1:933eb2f:     public Set<GroupPrincipal> getTempDestinationWriteACLs() {
1:efcd57f:         try {
1:efcd57f:             context = open();
1:efcd57f:         } catch (NamingException e) {
1:efcd57f:             LOG.error(e.toString());
1:efcd57f:             return new HashSet<GroupPrincipal>();
1:933eb2f:         }
1:efcd57f:         SearchControls constraints = new SearchControls();
1:efcd57f:         constraints.setReturningAttributes(new String[] {writeAttribute});
1:efcd57f:         return getACLs(tempSearchBase, constraints, writeBase, writeAttribute);
1:e78e72f:     }
1:933eb2f: 
1:933eb2f:     public Set<GroupPrincipal> getAdminACLs(ActiveMQDestination destination) {
1:046130e:         if (destination.isComposite()) {
1:046130e:             return getCompositeACLs(destination, adminBase, adminAttribute);
1:046130e:         }
1:3e945b5:         return getACLs(destination, adminBase, adminAttribute);
1:e78e72f:     }
1:e78e72f: 
1:933eb2f:     public Set<GroupPrincipal> getReadACLs(ActiveMQDestination destination) {
1:046130e:         if (destination.isComposite()) {
1:046130e:             return getCompositeACLs(destination, readBase, readAttribute);
1:046130e:         }
1:3e945b5:         return getACLs(destination, readBase, readAttribute);
1:e78e72f:     }
1:e78e72f: 
1:933eb2f:     public Set<GroupPrincipal> getWriteACLs(ActiveMQDestination destination) {
1:046130e:         if (destination.isComposite()) {
1:046130e:             return getCompositeACLs(destination, writeBase, writeAttribute);
1:046130e:         }
1:3e945b5:         return getACLs(destination, writeBase, writeAttribute);
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     // Properties
1:3e945b5:     // -------------------------------------------------------------------------
1:3e945b5: 
1:3e945b5:     public String getAdminAttribute() {
1:3e945b5:         return adminAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setAdminAttribute(String adminAttribute) {
1:3e945b5:         this.adminAttribute = adminAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getAdminBase() {
1:3e945b5:         return adminBase;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setAdminBase(String adminBase) {
1:3e945b5:         this.adminBase = adminBase;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getAuthentication() {
1:3e945b5:         return authentication;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setAuthentication(String authentication) {
1:3e945b5:         this.authentication = authentication;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getConnectionPassword() {
1:3e945b5:         return connectionPassword;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setConnectionPassword(String connectionPassword) {
1:3e945b5:         this.connectionPassword = connectionPassword;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getConnectionProtocol() {
1:3e945b5:         return connectionProtocol;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setConnectionProtocol(String connectionProtocol) {
1:3e945b5:         this.connectionProtocol = connectionProtocol;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getConnectionURL() {
1:3e945b5:         return connectionURL;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setConnectionURL(String connectionURL) {
1:3e945b5:         this.connectionURL = connectionURL;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getConnectionUsername() {
1:3e945b5:         return connectionUsername;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setConnectionUsername(String connectionUsername) {
1:3e945b5:         this.connectionUsername = connectionUsername;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public DirContext getContext() {
1:3e945b5:         return context;
1:0a8e505:     }
1:3e945b5: 
1:3e945b5:     public void setContext(DirContext context) {
1:3e945b5:         this.context = context;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getInitialContextFactory() {
1:3e945b5:         return initialContextFactory;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setInitialContextFactory(String initialContextFactory) {
1:3e945b5:         this.initialContextFactory = initialContextFactory;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public MessageFormat getQueueSearchMatchingFormat() {
1:3e945b5:         return queueSearchMatchingFormat;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setQueueSearchMatchingFormat(MessageFormat queueSearchMatchingFormat) {
1:3e945b5:         this.queueSearchMatchingFormat = queueSearchMatchingFormat;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public boolean isQueueSearchSubtreeBool() {
1:3e945b5:         return queueSearchSubtreeBool;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setQueueSearchSubtreeBool(boolean queueSearchSubtreeBool) {
1:3e945b5:         this.queueSearchSubtreeBool = queueSearchSubtreeBool;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getReadAttribute() {
1:3e945b5:         return readAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setReadAttribute(String readAttribute) {
1:3e945b5:         this.readAttribute = readAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getReadBase() {
1:3e945b5:         return readBase;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setReadBase(String readBase) {
1:3e945b5:         this.readBase = readBase;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public MessageFormat getTopicSearchMatchingFormat() {
1:3e945b5:         return topicSearchMatchingFormat;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setTopicSearchMatchingFormat(MessageFormat topicSearchMatchingFormat) {
1:3e945b5:         this.topicSearchMatchingFormat = topicSearchMatchingFormat;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public boolean isTopicSearchSubtreeBool() {
1:3e945b5:         return topicSearchSubtreeBool;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setTopicSearchSubtreeBool(boolean topicSearchSubtreeBool) {
1:3e945b5:         this.topicSearchSubtreeBool = topicSearchSubtreeBool;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getWriteAttribute() {
1:3e945b5:         return writeAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setWriteAttribute(String writeAttribute) {
1:3e945b5:         this.writeAttribute = writeAttribute;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public String getWriteBase() {
1:3e945b5:         return writeBase;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     public void setWriteBase(String writeBase) {
1:3e945b5:         this.writeBase = writeBase;
1:3e945b5:     }
1:3e945b5: 
1:046130e:     public boolean isUseAdvisorySearchBase() {
1:046130e:         return useAdvisorySearchBase;
1:046130e:     }
1:046130e: 
1:046130e:     public void setUseAdvisorySearchBase(boolean useAdvisorySearchBase) {
1:046130e:         this.useAdvisorySearchBase = useAdvisorySearchBase;
1:046130e:     }
1:046130e: 
1:046130e:     public String getAdvisorySearchBase() {
1:046130e:         return advisorySearchBase;
1:046130e:     }
1:046130e: 
1:046130e:     public void setAdvisorySearchBase(String advisorySearchBase) {
1:046130e:         this.advisorySearchBase = advisorySearchBase;
1:046130e:     }
1:046130e: 
1:efcd57f:     public String getTempSearchBase() {
1:efcd57f:         return tempSearchBase;
1:efcd57f:     }
1:efcd57f: 
1:efcd57f:     public void setTempSearchBase(String tempSearchBase) {
1:efcd57f:         this.tempSearchBase = tempSearchBase;
1:efcd57f:     }
1:efcd57f: 
1:046130e:     protected Set<GroupPrincipal> getCompositeACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) {
1:046130e:         ActiveMQDestination[] dests = destination.getCompositeDestinations();
1:5dda6e6:         Set<GroupPrincipal> acls = null;
1:046130e:         for (ActiveMQDestination dest : dests) {
1:5dda6e6:             acls = DestinationMap.union(acls, getACLs(dest, roleBase, roleAttribute));
1:5dda6e6:             if (acls == null || acls.isEmpty()) {
1:5dda6e6:                 break;
1:046130e:             }
1:5dda6e6:         }
1:046130e:         return acls;
1:046130e:     }
1:046130e: 
1:3e945b5:     // Implementation methods
1:3e945b5:     // -------------------------------------------------------------------------
1:933eb2f:     protected Set<GroupPrincipal> getACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) {
1:3e945b5:         try {
1:3e945b5:             context = open();
1:efcd57f:         } catch (NamingException e) {
1:8bf987b:             LOG.error(e.toString());
1:933eb2f:             return new HashSet<GroupPrincipal>();
1:3e945b5:         }
1:3e945b5: 
1:3e945b5: 
1:3e945b5: 
1:3e945b5:         String destinationBase = "";
1:3e945b5:         SearchControls constraints = new SearchControls();
1:046130e:         if (AdvisorySupport.isAdvisoryTopic(destination) && useAdvisorySearchBase) {
1:0a8e505:             destinationBase = advisorySearchBase;
3:046130e:         } else {
1:046130e:             if ((destination.getDestinationType() & ActiveMQDestination.QUEUE_TYPE) == ActiveMQDestination.QUEUE_TYPE) {
1:046130e:                 destinationBase = queueSearchMatchingFormat.format(new String[]{destination.getPhysicalName()});
1:046130e:                 if (queueSearchSubtreeBool) {
1:046130e:                     constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:74a7a8b:                 } else {
1:046130e:                     constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:046130e:                 }
1:3e945b5:             }
1:046130e:             if ((destination.getDestinationType() & ActiveMQDestination.TOPIC_TYPE) == ActiveMQDestination.TOPIC_TYPE) {
1:046130e:                 destinationBase = topicSearchMatchingFormat.format(new String[]{destination.getPhysicalName()});
1:046130e:                 if (topicSearchSubtreeBool) {
1:046130e:                     constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:74a7a8b:                 } else {
1:046130e:                     constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:046130e:                 }
1:3e945b5:             }
1:3e945b5:         }
1:3e945b5: 
1:74a7a8b:         constraints.setReturningAttributes(new String[] {roleAttribute});
1:3e945b5: 
1:efcd57f:         return getACLs(destinationBase, constraints, roleBase, roleAttribute);
1:efcd57f:     }
1:efcd57f: 
1:efcd57f:     protected Set<GroupPrincipal> getACLs(String destinationBase, SearchControls constraints, String roleBase, String roleAttribute) {
1:3e945b5:         try {
1:933eb2f:             Set<GroupPrincipal> roles = new HashSet<GroupPrincipal>();
1:933eb2f:             Set<String> acls = new HashSet<String>();
1:3dbc9c9:             NamingEnumeration<?> results = context.search(destinationBase, roleBase, constraints);
1:3e945b5:             while (results.hasMore()) {
1:74a7a8b:                 SearchResult result = (SearchResult)results.next();
1:3e945b5:                 Attributes attrs = result.getAttributes();
1:3e945b5:                 if (attrs == null) {
1:3e945b5:                     continue;
1:3e945b5:                 }
1:3e945b5:                 acls = addAttributeValues(roleAttribute, attrs, acls);
1:3e945b5:             }
1:933eb2f:             for (Iterator<String> iter = acls.iterator(); iter.hasNext();) {
1:933eb2f:                 String roleName = iter.next();
1:0a8e505:                 LdapName ldapname = new LdapName(roleName);
1:0a8e505:                 Rdn rdn = ldapname.getRdn(ldapname.size() - 1);
1:0a8e505:                 LOG.debug("Found role: [" + rdn.getValue().toString() + "]");
1:0a8e505:                 roles.add(new GroupPrincipal(rdn.getValue().toString()));
1:3e945b5:             }
1:3e945b5:             return roles;
1:74a7a8b:         } catch (NamingException e) {
1:8bf987b:             LOG.error(e.toString());
1:933eb2f:             return new HashSet<GroupPrincipal>();
1:3e945b5:         }
1:3e945b5:     }
1:3e945b5: 
1:933eb2f:     protected Set<String> addAttributeValues(String attrId, Attributes attrs, Set<String> values) throws NamingException {
1:3e945b5:         if (attrId == null || attrs == null) {
1:3e945b5:             return values;
1:3e945b5:         }
1:3e945b5:         if (values == null) {
1:933eb2f:             values = new HashSet<String>();
1:3e945b5:         }
1:3e945b5:         Attribute attr = attrs.get(attrId);
1:3e945b5:         if (attr == null) {
1:74a7a8b:             return values;
1:3e945b5:         }
1:3dbc9c9:         NamingEnumeration<?> e = attr.getAll();
1:3e945b5:         while (e.hasMore()) {
1:74a7a8b:             String value = (String)e.next();
1:3e945b5:             values.add(value);
1:3e945b5:         }
1:3e945b5:         return values;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     protected DirContext open() throws NamingException {
1:3e945b5:         if (context != null) {
1:3e945b5:             return context;
1:3e945b5:         }
1:3e945b5: 
1:3e945b5:         try {
1:933eb2f:             Hashtable<String, String> env = new Hashtable<String, String>();
1:3e945b5:             env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
1:0b5231a:             if (connectionUsername != null && !"".equals(connectionUsername)) {
1:3e945b5:                 env.put(Context.SECURITY_PRINCIPAL, connectionUsername);
1:0b5231a:             } else {
1:0b5231a:                 throw new NamingException("Empty username is not allowed");
1:3e945b5:             }
1:0b5231a:             if (connectionPassword != null && !"".equals(connectionPassword)) {
1:3e945b5:                 env.put(Context.SECURITY_CREDENTIALS, connectionPassword);
1:0b5231a:             } else {
1:0b5231a:                 throw new NamingException("Empty password is not allowed");
1:3e945b5:             }
1:3e945b5:             env.put(Context.SECURITY_PROTOCOL, connectionProtocol);
1:3e945b5:             env.put(Context.PROVIDER_URL, connectionURL);
1:3e945b5:             env.put(Context.SECURITY_AUTHENTICATION, authentication);
1:3e945b5:             context = new InitialDirContext(env);
1:3e945b5: 
1:74a7a8b:         } catch (NamingException e) {
1:8bf987b:             LOG.error(e.toString());
1:3e945b5:             throw e;
1:3e945b5:         }
1:3e945b5:         return context;
1:3e945b5:     }
1:3e945b5: 
1:3e945b5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0b5231a
/////////////////////////////////////////////////////////////////////////
1:             if (connectionUsername != null && !"".equals(connectionUsername)) {
1:             } else {
1:                 throw new NamingException("Empty username is not allowed");
1:             if (connectionPassword != null && !"".equals(connectionPassword)) {
1:             } else {
1:                 throw new NamingException("Empty password is not allowed");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(LDAPLoginModule.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Set<GroupPrincipal> getTempDestinationAdminACLs() {
1:     public Set<GroupPrincipal> getTempDestinationReadACLs() {
1:     public Set<GroupPrincipal> getTempDestinationWriteACLs() {
0:         // TODO insert implementation
0:         return null;
1:     }
1: 
1:     public Set<GroupPrincipal> getAdminACLs(ActiveMQDestination destination) {
1:     public Set<GroupPrincipal> getReadACLs(ActiveMQDestination destination) {
1:     public Set<GroupPrincipal> getWriteACLs(ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
1:     protected Set<GroupPrincipal> getACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) {
0:             LOG.error(e);
1:             return new HashSet<GroupPrincipal>();
/////////////////////////////////////////////////////////////////////////
1:             Set<GroupPrincipal> roles = new HashSet<GroupPrincipal>();
1:             Set<String> acls = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator<String> iter = acls.iterator(); iter.hasNext();) {
1:                 String roleName = iter.next();
0:             LOG.error(e);
1:             return new HashSet<GroupPrincipal>();
1:     protected Set<String> addAttributeValues(String attrId, Attributes attrs, Set<String> values) throws NamingException {
1:             values = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
1:             Hashtable<String, String> env = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
0:             LOG.error(e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         initialContextFactory = (String)options.get(INITIAL_CONTEXT_FACTORY);
0:         connectionURL = (String)options.get(CONNECTION_URL);
0:         connectionUsername = (String)options.get(CONNECTION_USERNAME);
0:         connectionPassword = (String)options.get(CONNECTION_PASSWORD);
0:         connectionProtocol = (String)options.get(CONNECTION_PROTOCOL);
0:         authentication = (String)options.get(AUTHENTICATION);
0:         adminBase = (String)options.get(ADMIN_BASE);
0:         adminAttribute = (String)options.get(ADMIN_ATTRIBUTE);
0:         readBase = (String)options.get(READ_BASE);
0:         readAttribute = (String)options.get(READ_ATTRIBUTE);
0:         writeBase = (String)options.get(WRITE_BASE);
0:         writeAttribute = (String)options.get(WRITE_ATTRIBUTE);
0:         String topicSearchMatching = (String)options.get(TOPIC_SEARCH_MATCHING);
0:         String topicSearchSubtree = (String)options.get(TOPIC_SEARCH_SUBTREE);
0:         String queueSearchMatching = (String)options.get(QUEUE_SEARCH_MATCHING);
0:         String queueSearchSubtree = (String)options.get(QUEUE_SEARCH_SUBTREE);
/////////////////////////////////////////////////////////////////////////
0:         // TODO insert implementation
1: 
1: 
0:     public Set getTempDestinationReadACLs() {
0:         // TODO insert implementation
1:     }
1: 
0:     public Set getTempDestinationWriteACLs() {
0:         // TODO insert implementation
0:         return null;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (NamingException e) {
/////////////////////////////////////////////////////////////////////////
0:             destinationBase = queueSearchMatchingFormat.format(new String[] {destination.getPhysicalName()});
1:             } else {
0:             destinationBase = topicSearchMatchingFormat.format(new String[] {destination.getPhysicalName()});
1:             } else {
1:         constraints.setReturningAttributes(new String[] {roleAttribute});
1:                 SearchResult result = (SearchResult)results.next();
/////////////////////////////////////////////////////////////////////////
0:                 String roleName = (String)iter.next();
1:         } catch (NamingException e) {
/////////////////////////////////////////////////////////////////////////
1:             return values;
1:             String value = (String)e.next();
/////////////////////////////////////////////////////////////////////////
1:         } catch (NamingException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0a8e505
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.ldap.LdapName;
1: import javax.naming.ldap.Rdn;
/////////////////////////////////////////////////////////////////////////
1:             destinationBase = advisorySearchBase;
/////////////////////////////////////////////////////////////////////////
1:                 LdapName ldapname = new LdapName(roleName);
1:                 Rdn rdn = ldapname.getRdn(ldapname.size() - 1);
1:                 LOG.debug("Found role: [" + rdn.getValue().toString() + "]");
1:                 roles.add(new GroupPrincipal(rdn.getValue().toString()));
/////////////////////////////////////////////////////////////////////////
1: }
commit:efcd57f
/////////////////////////////////////////////////////////////////////////
1:     private String tempSearchBase = "uid=ActiveMQ.Temp,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com";
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             context = open();
1:         } catch (NamingException e) {
1:             LOG.error(e.toString());
1:             return new HashSet<GroupPrincipal>();
1:         }
1:         SearchControls constraints = new SearchControls();
1:         constraints.setReturningAttributes(new String[] {adminAttribute});
1:         return getACLs(tempSearchBase, constraints, adminBase, adminAttribute);
1:         try {
1:             context = open();
1:         } catch (NamingException e) {
1:             LOG.error(e.toString());
1:             return new HashSet<GroupPrincipal>();
1:         }
1:         SearchControls constraints = new SearchControls();
1:         constraints.setReturningAttributes(new String[] {readAttribute});
1:         return getACLs(tempSearchBase, constraints, readBase, readAttribute);
1:         try {
1:             context = open();
1:         } catch (NamingException e) {
1:             LOG.error(e.toString());
1:             return new HashSet<GroupPrincipal>();
1:         }
1:         SearchControls constraints = new SearchControls();
1:         constraints.setReturningAttributes(new String[] {writeAttribute});
1:         return getACLs(tempSearchBase, constraints, writeBase, writeAttribute);
/////////////////////////////////////////////////////////////////////////
1:     public String getTempSearchBase() {
1:         return tempSearchBase;
1:     }
1: 
1:     public void setTempSearchBase(String tempSearchBase) {
1:         this.tempSearchBase = tempSearchBase;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return getACLs(destinationBase, constraints, roleBase, roleAttribute);
1:     }
1: 
1:     protected Set<GroupPrincipal> getACLs(String destinationBase, SearchControls constraints, String roleBase, String roleAttribute) {
commit:046130e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1:     private String advisorySearchBase = "uid=ActiveMQ.Advisory,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com";
1:     private boolean useAdvisorySearchBase = true;
/////////////////////////////////////////////////////////////////////////
1:         topicSearchMatchingFormat = new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com");
1:         queueSearchMatchingFormat = new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,dc=example,dc=com");
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isComposite()) {
1:             return getCompositeACLs(destination, adminBase, adminAttribute);
1:         }
1:         if (destination.isComposite()) {
1:             return getCompositeACLs(destination, readBase, readAttribute);
1:         }
1:         if (destination.isComposite()) {
1:             return getCompositeACLs(destination, writeBase, writeAttribute);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseAdvisorySearchBase() {
1:         return useAdvisorySearchBase;
1:     }
1: 
1:     public void setUseAdvisorySearchBase(boolean useAdvisorySearchBase) {
1:         this.useAdvisorySearchBase = useAdvisorySearchBase;
1:     }
1: 
1:     public String getAdvisorySearchBase() {
1:         return advisorySearchBase;
1:     }
1: 
1:     public void setAdvisorySearchBase(String advisorySearchBase) {
1:         this.advisorySearchBase = advisorySearchBase;
1:     }
1: 
1:     protected Set<GroupPrincipal> getCompositeACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) {
1:         ActiveMQDestination[] dests = destination.getCompositeDestinations();
0:         Set<GroupPrincipal> acls = new HashSet<GroupPrincipal>();
1:         for (ActiveMQDestination dest : dests) {
0:             acls.addAll(getACLs(dest, roleBase, roleAttribute));
1:         }
1:         return acls;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (AdvisorySupport.isAdvisoryTopic(destination) && useAdvisorySearchBase) {
0:            destinationBase = advisorySearchBase;
1:         } else {
1:             if ((destination.getDestinationType() & ActiveMQDestination.QUEUE_TYPE) == ActiveMQDestination.QUEUE_TYPE) {
1:                 destinationBase = queueSearchMatchingFormat.format(new String[]{destination.getPhysicalName()});
1:                 if (queueSearchSubtreeBool) {
1:                     constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:                 } else {
1:                     constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:                 }
1:             if ((destination.getDestinationType() & ActiveMQDestination.TOPIC_TYPE) == ActiveMQDestination.TOPIC_TYPE) {
1:                 destinationBase = topicSearchMatchingFormat.format(new String[]{destination.getPhysicalName()});
1:                 if (topicSearchSubtreeBool) {
1:                     constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:                 } else {
1:                     constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:                 }
commit:26cf6a7
/////////////////////////////////////////////////////////////////////////
0:         topicSearchMatchingFormat = new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,ou=system");
0:         queueSearchMatchingFormat = new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,ou=system");
/////////////////////////////////////////////////////////////////////////
0:                 String[] components = roleName.split("=", 2);
0:                 roles.add(new GroupPrincipal(components[components.length - 1]));
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(LDAPLoginModule.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error(e.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.error(e.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.error(e.toString());
author:Gary Tully
-------------------------------------------------------------------------------
commit:5dda6e6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationMap;
/////////////////////////////////////////////////////////////////////////
1:         Set<GroupPrincipal> acls = null;
1:             acls = DestinationMap.union(acls, getACLs(dest, roleBase, roleAttribute));
1:             if (acls == null || acls.isEmpty()) {
1:                 break;
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public LDAPAuthorizationMap(Map<String,String> options) {
1:         initialContextFactory = options.get(INITIAL_CONTEXT_FACTORY);
1:         connectionURL = options.get(CONNECTION_URL);
1:         connectionUsername = options.get(CONNECTION_USERNAME);
1:         connectionPassword = options.get(CONNECTION_PASSWORD);
1:         connectionProtocol = options.get(CONNECTION_PROTOCOL);
1:         authentication = options.get(AUTHENTICATION);
1:         adminBase = options.get(ADMIN_BASE);
1:         adminAttribute = options.get(ADMIN_ATTRIBUTE);
1:         readBase = options.get(READ_BASE);
1:         readAttribute = options.get(READ_ATTRIBUTE);
1:         writeBase = options.get(WRITE_BASE);
1:         writeAttribute = options.get(WRITE_ATTRIBUTE);
1:         String topicSearchMatching = options.get(TOPIC_SEARCH_MATCHING);
1:         String topicSearchSubtree = options.get(TOPIC_SEARCH_SUBTREE);
1:         String queueSearchMatching = options.get(QUEUE_SEARCH_MATCHING);
1:         String queueSearchSubtree = options.get(QUEUE_SEARCH_SUBTREE);
/////////////////////////////////////////////////////////////////////////
1:             NamingEnumeration<?> results = context.search(destinationBase, roleBase, constraints);
/////////////////////////////////////////////////////////////////////////
1:         NamingEnumeration<?> e = attr.getAll();
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:         topicSearchSubtreeBool = Boolean.valueOf(topicSearchSubtree).booleanValue();
1:         queueSearchSubtreeBool = Boolean.valueOf(queueSearchSubtree).booleanValue();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:e78e72f
/////////////////////////////////////////////////////////////////////////
0:     public Set getTempDestinationAdminACLs() {
0:         //TODO insert implementation
1:     	
0:         return null;
1:     }    
1:     
0:     public Set getTempDestinationReadACLs() {
0:     	//    	TODO insert implementation
0:         return null;
1:     }
1:     
0:     public Set getTempDestinationWriteACLs() {
0:     	//    	TODO insert implementation
0:         return null;
1:     }      
1:     
author:James Strachan
-------------------------------------------------------------------------------
commit:3e945b5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.text.MessageFormat;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.NamingException;
1: import javax.naming.directory.Attribute;
1: import javax.naming.directory.Attributes;
1: import javax.naming.directory.DirContext;
1: import javax.naming.directory.InitialDirContext;
1: import javax.naming.directory.SearchControls;
1: import javax.naming.directory.SearchResult;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.jaas.LDAPLoginModule;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * An {@link AuthorizationMap} which uses LDAP
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
1:  * @author ngcutura
1:  */
1: public class LDAPAuthorizationMap implements AuthorizationMap {
1: 
0:     private static Log log = LogFactory.getLog(LDAPLoginModule.class);
1: 
1:     public static final String INITIAL_CONTEXT_FACTORY = "initialContextFactory";
1:     public static final String CONNECTION_URL = "connectionURL";
1:     public static final String CONNECTION_USERNAME = "connectionUsername";
1:     public static final String CONNECTION_PASSWORD = "connectionPassword";
1:     public static final String CONNECTION_PROTOCOL = "connectionProtocol";
1:     public static final String AUTHENTICATION = "authentication";
1: 
1:     public static final String TOPIC_SEARCH_MATCHING = "topicSearchMatching";
1:     public static final String TOPIC_SEARCH_SUBTREE = "topicSearchSubtree";
1:     public static final String QUEUE_SEARCH_MATCHING = "queueSearchMatching";
1:     public static final String QUEUE_SEARCH_SUBTREE = "queueSearchSubtree";
1: 
1:     public static final String ADMIN_BASE = "adminBase";
1:     public static final String ADMIN_ATTRIBUTE = "adminAttribute";
1:     public static final String READ_BASE = "readBase";
1:     public static final String READ_ATTRIBUTE = "readAttribute";
1:     public static final String WRITE_BASE = "writeBAse";
1:     public static final String WRITE_ATTRIBUTE = "writeAttribute";
1: 
1:     private String initialContextFactory;
1:     private String connectionURL;
1:     private String connectionUsername;
1:     private String connectionPassword;
1:     private String connectionProtocol;
1:     private String authentication;
1: 
1:     private DirContext context;
1: 
1:     private MessageFormat topicSearchMatchingFormat;
1:     private MessageFormat queueSearchMatchingFormat;
1: 
1:     private boolean topicSearchSubtreeBool = true;
1:     private boolean queueSearchSubtreeBool = true;
1: 
1:     private String adminBase;
1:     private String adminAttribute;
1:     private String readBase;
1:     private String readAttribute;
1:     private String writeBase;
1:     private String writeAttribute;
1: 
1:     public LDAPAuthorizationMap() {
1:         // lets setup some sensible defaults
1:         initialContextFactory = "com.sun.jndi.ldap.LdapCtxFactory";
1:         connectionURL = "ldap://localhost:10389";
1:         connectionUsername = "uid=admin,ou=system";
1:         connectionPassword = "secret";
1:         connectionProtocol = "s";
1:         authentication = "simple";
1: 
0:         topicSearchMatchingFormat = new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com");
0:         queueSearchMatchingFormat = new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,dc=example,dc=com");
1: 
1:         adminBase = "(cn=admin)";
1:         adminAttribute = "uniqueMember";
1:         readBase = "(cn=read)";
1:         readAttribute = "uniqueMember";
1:         writeBase = "(cn=write)";
1:         writeAttribute = "uniqueMember";
1:     }
1: 
0:     public LDAPAuthorizationMap(Map options) {
0:         initialContextFactory = (String) options.get(INITIAL_CONTEXT_FACTORY);
0:         connectionURL = (String) options.get(CONNECTION_URL);
0:         connectionUsername = (String) options.get(CONNECTION_USERNAME);
0:         connectionPassword = (String) options.get(CONNECTION_PASSWORD);
0:         connectionProtocol = (String) options.get(CONNECTION_PROTOCOL);
0:         authentication = (String) options.get(AUTHENTICATION);
1: 
0:         adminBase = (String) options.get(ADMIN_BASE);
0:         adminAttribute = (String) options.get(ADMIN_ATTRIBUTE);
0:         readBase = (String) options.get(READ_BASE);
0:         readAttribute = (String) options.get(READ_ATTRIBUTE);
0:         writeBase = (String) options.get(WRITE_BASE);
0:         writeAttribute = (String) options.get(WRITE_ATTRIBUTE);
1: 
0:         String topicSearchMatching = (String) options.get(TOPIC_SEARCH_MATCHING);
0:         String topicSearchSubtree = (String) options.get(TOPIC_SEARCH_SUBTREE);
0:         String queueSearchMatching = (String) options.get(QUEUE_SEARCH_MATCHING);
0:         String queueSearchSubtree = (String) options.get(QUEUE_SEARCH_SUBTREE);
1:         topicSearchMatchingFormat = new MessageFormat(topicSearchMatching);
1:         queueSearchMatchingFormat = new MessageFormat(queueSearchMatching);
0:         topicSearchSubtreeBool = new Boolean(topicSearchSubtree).booleanValue();
0:         queueSearchSubtreeBool = new Boolean(queueSearchSubtree).booleanValue();
1:     }
1: 
0:     public Set getAdminACLs(ActiveMQDestination destination) {
1:         return getACLs(destination, adminBase, adminAttribute);
1:     }
1: 
0:     public Set getReadACLs(ActiveMQDestination destination) {
1:         return getACLs(destination, readBase, readAttribute);
1:     }
1: 
0:     public Set getWriteACLs(ActiveMQDestination destination) {
1:         return getACLs(destination, writeBase, writeAttribute);
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public String getAdminAttribute() {
1:         return adminAttribute;
1:     }
1: 
1:     public void setAdminAttribute(String adminAttribute) {
1:         this.adminAttribute = adminAttribute;
1:     }
1: 
1:     public String getAdminBase() {
1:         return adminBase;
1:     }
1: 
1:     public void setAdminBase(String adminBase) {
1:         this.adminBase = adminBase;
1:     }
1: 
1:     public String getAuthentication() {
1:         return authentication;
1:     }
1: 
1:     public void setAuthentication(String authentication) {
1:         this.authentication = authentication;
1:     }
1: 
1:     public String getConnectionPassword() {
1:         return connectionPassword;
1:     }
1: 
1:     public void setConnectionPassword(String connectionPassword) {
1:         this.connectionPassword = connectionPassword;
1:     }
1: 
1:     public String getConnectionProtocol() {
1:         return connectionProtocol;
1:     }
1: 
1:     public void setConnectionProtocol(String connectionProtocol) {
1:         this.connectionProtocol = connectionProtocol;
1:     }
1: 
1:     public String getConnectionURL() {
1:         return connectionURL;
1:     }
1: 
1:     public void setConnectionURL(String connectionURL) {
1:         this.connectionURL = connectionURL;
1:     }
1: 
1:     public String getConnectionUsername() {
1:         return connectionUsername;
1:     }
1: 
1:     public void setConnectionUsername(String connectionUsername) {
1:         this.connectionUsername = connectionUsername;
1:     }
1: 
1:     public DirContext getContext() {
1:         return context;
1:     }
1: 
1:     public void setContext(DirContext context) {
1:         this.context = context;
1:     }
1: 
1:     public String getInitialContextFactory() {
1:         return initialContextFactory;
1:     }
1: 
1:     public void setInitialContextFactory(String initialContextFactory) {
1:         this.initialContextFactory = initialContextFactory;
1:     }
1: 
1:     public MessageFormat getQueueSearchMatchingFormat() {
1:         return queueSearchMatchingFormat;
1:     }
1: 
1:     public void setQueueSearchMatchingFormat(MessageFormat queueSearchMatchingFormat) {
1:         this.queueSearchMatchingFormat = queueSearchMatchingFormat;
1:     }
1: 
1:     public boolean isQueueSearchSubtreeBool() {
1:         return queueSearchSubtreeBool;
1:     }
1: 
1:     public void setQueueSearchSubtreeBool(boolean queueSearchSubtreeBool) {
1:         this.queueSearchSubtreeBool = queueSearchSubtreeBool;
1:     }
1: 
1:     public String getReadAttribute() {
1:         return readAttribute;
1:     }
1: 
1:     public void setReadAttribute(String readAttribute) {
1:         this.readAttribute = readAttribute;
1:     }
1: 
1:     public String getReadBase() {
1:         return readBase;
1:     }
1: 
1:     public void setReadBase(String readBase) {
1:         this.readBase = readBase;
1:     }
1: 
1:     public MessageFormat getTopicSearchMatchingFormat() {
1:         return topicSearchMatchingFormat;
1:     }
1: 
1:     public void setTopicSearchMatchingFormat(MessageFormat topicSearchMatchingFormat) {
1:         this.topicSearchMatchingFormat = topicSearchMatchingFormat;
1:     }
1: 
1:     public boolean isTopicSearchSubtreeBool() {
1:         return topicSearchSubtreeBool;
1:     }
1: 
1:     public void setTopicSearchSubtreeBool(boolean topicSearchSubtreeBool) {
1:         this.topicSearchSubtreeBool = topicSearchSubtreeBool;
1:     }
1: 
1:     public String getWriteAttribute() {
1:         return writeAttribute;
1:     }
1: 
1:     public void setWriteAttribute(String writeAttribute) {
1:         this.writeAttribute = writeAttribute;
1:     }
1: 
1:     public String getWriteBase() {
1:         return writeBase;
1:     }
1: 
1:     public void setWriteBase(String writeBase) {
1:         this.writeBase = writeBase;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected Set getACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) {
1:         try {
1:             context = open();
1:         }
0:         catch (NamingException e) {
0:             log.error(e);
0:             return new HashSet();
1:         }
1: 
0:         // if ((destination.getDestinationType() &
0:         // (ActiveMQDestination.QUEUE_TYPE | ActiveMQDestination.TOPIC_TYPE)) !=
0:         // 0)
0:         // return new HashSet();
1: 
1:         String destinationBase = "";
1:         SearchControls constraints = new SearchControls();
1: 
0:         if ((destination.getDestinationType() & ActiveMQDestination.QUEUE_TYPE) == ActiveMQDestination.QUEUE_TYPE) {
0:             destinationBase = queueSearchMatchingFormat.format(new String[] { destination.getPhysicalName() });
0:             if (queueSearchSubtreeBool) {
0:                 constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:             }
0:             else {
0:                 constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:             }
1:         }
0:         if ((destination.getDestinationType() & ActiveMQDestination.TOPIC_TYPE) == ActiveMQDestination.TOPIC_TYPE) {
0:             destinationBase = topicSearchMatchingFormat.format(new String[] { destination.getPhysicalName() });
0:             if (topicSearchSubtreeBool) {
0:                 constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
1:             }
0:             else {
0:                 constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
1:             }
1:         }
1: 
0:         constraints.setReturningAttributes(new String[] { roleAttribute });
1: 
1:         try {
0:             Set roles = new HashSet();
0:             Set acls = new HashSet();
0:             NamingEnumeration results = context.search(destinationBase, roleBase, constraints);
1:             while (results.hasMore()) {
0:                 SearchResult result = (SearchResult) results.next();
1:                 Attributes attrs = result.getAttributes();
1:                 if (attrs == null) {
1:                     continue;
1:                 }
1:                 acls = addAttributeValues(roleAttribute, attrs, acls);
1:             }
0:             for (Iterator iter = acls.iterator(); iter.hasNext();) {
0:                 String roleName = (String) iter.next();
0:                 roles.add(new GroupPrincipal(roleName));
1:             }
1:             return roles;
1:         }
0:         catch (NamingException e) {
0:             log.error(e);
0:             return new HashSet();
1:         }
1:     }
1: 
0:     protected Set addAttributeValues(String attrId, Attributes attrs, Set values) throws NamingException {
1:         if (attrId == null || attrs == null) {
1:             return values;
1:         }
1:         if (values == null) {
0:             values = new HashSet();
1:         }
1:         Attribute attr = attrs.get(attrId);
1:         if (attr == null) {
0:             return (values);
1:         }
0:         NamingEnumeration e = attr.getAll();
1:         while (e.hasMore()) {
0:             String value = (String) e.next();
1:             values.add(value);
1:         }
1:         return values;
1:     }
1: 
1:     protected DirContext open() throws NamingException {
1:         if (context != null) {
1:             return context;
1:         }
1: 
1:         try {
0:             Hashtable env = new Hashtable();
1:             env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
0:             if (connectionUsername != null || !"".equals(connectionUsername)) {
1:                 env.put(Context.SECURITY_PRINCIPAL, connectionUsername);
1:             }
0:             if (connectionPassword != null || !"".equals(connectionPassword)) {
1:                 env.put(Context.SECURITY_CREDENTIALS, connectionPassword);
1:             }
1:             env.put(Context.SECURITY_PROTOCOL, connectionProtocol);
1:             env.put(Context.PROVIDER_URL, connectionURL);
1:             env.put(Context.SECURITY_AUTHENTICATION, authentication);
1:             context = new InitialDirContext(env);
1: 
1:         }
0:         catch (NamingException e) {
0:             log.error(e);
1:             throw e;
1:         }
1:         return context;
1:     }
1: 
1: }
============================================================================