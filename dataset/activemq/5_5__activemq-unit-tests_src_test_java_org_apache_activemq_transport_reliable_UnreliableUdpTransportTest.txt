1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:2a076d0:  *
1:2a076d0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:2a076d0:  * Unless required by applicable law or agreed to in writing, software
1:2a076d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a076d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a076d0:  * See the License for the specific language governing permissions and
1:2a076d0:  * limitations under the License.
1:2a076d0:  */
1:2a076d0: package org.apache.activemq.transport.reliable;
3:2a076d0: 
1:74a7a8b: import java.net.SocketAddress;
1:74a7a8b: import java.net.URI;
1:74a7a8b: 
1:2a076d0: import org.apache.activemq.openwire.OpenWireFormat;
1:2a076d0: import org.apache.activemq.transport.CommandJoiner;
1:2a076d0: import org.apache.activemq.transport.Transport;
1:2a076d0: import org.apache.activemq.transport.udp.ResponseRedirectInterceptor;
1:2a076d0: import org.apache.activemq.transport.udp.UdpTransport;
1:2a076d0: import org.apache.activemq.transport.udp.UdpTransportTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2a076d0: 
1:2a076d0: /**
1:4743a20:  *
1:4743a20:  *
1:2a076d0:  */
1:2a076d0: public class UnreliableUdpTransportTest extends UdpTransportTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(UnreliableUdpTransportTest.class);
1:2a076d0: 
1:2a076d0:     protected DropCommandStrategy dropStrategy = new DropCommandStrategy() {
1:4743a20: 
1:4743a20:         @Override
1:2a076d0:         public boolean shouldDropCommand(int commandId, SocketAddress address, boolean redelivery) {
1:2a076d0:             if (redelivery) {
1:2a076d0:                 return false;
1:2a076d0:             }
1:2a076d0:             return commandId % 3 == 2;
1:2a076d0:         }
1:2a076d0:     };
1:2a076d0: 
1:4743a20:     @Override
1:2a076d0:     protected Transport createProducer() throws Exception {
1:fc00993:         LOG.info("Producer using URI: " + producerURI);
1:2a076d0: 
1:2a076d0:         OpenWireFormat wireFormat = createWireFormat();
1:2a076d0:         UnreliableUdpTransport transport = new UnreliableUdpTransport(wireFormat, new URI(producerURI));
1:2a076d0:         transport.setDropCommandStrategy(dropStrategy);
1:2a076d0: 
1:2a076d0:         ReliableTransport reliableTransport = new ReliableTransport(transport, transport);
1:2a076d0:         Replayer replayer = reliableTransport.getReplayer();
1:2a076d0:         reliableTransport.setReplayStrategy(createReplayStrategy(replayer));
1:2a076d0: 
1:2a076d0:         return new CommandJoiner(reliableTransport, wireFormat);
1:2a076d0:     }
1:2a076d0: 
1:4743a20:     @Override
1:2a076d0:     protected Transport createConsumer() throws Exception {
1:fc00993:         LOG.info("Consumer on port: " + consumerPort);
1:2a076d0:         OpenWireFormat wireFormat = createWireFormat();
1:2a076d0:         UdpTransport transport = new UdpTransport(wireFormat, consumerPort);
1:2a076d0: 
1:2a076d0:         ReliableTransport reliableTransport = new ReliableTransport(transport, transport);
1:2a076d0:         Replayer replayer = reliableTransport.getReplayer();
1:2a076d0:         reliableTransport.setReplayStrategy(createReplayStrategy(replayer));
1:2a076d0: 
1:2a076d0:         ResponseRedirectInterceptor redirectInterceptor = new ResponseRedirectInterceptor(reliableTransport, transport);
1:2a076d0:         return new CommandJoiner(redirectInterceptor, wireFormat);
1:2a076d0:     }
1:2a076d0: 
1:2a076d0:     protected ReplayStrategy createReplayStrategy(Replayer replayer) {
1:2a076d0:         assertNotNull("Should have a replayer!", replayer);
1:2a076d0:         return new DefaultReplayStrategy(1);
1:2a076d0:     }
1:6549342: 
1:6549342:     @Override
1:6549342:     public void testSendingMediumMessage() throws Exception {
1:6549342:         // Ignoring, see AMQ-4973
1:6549342:     }
1:6549342: 
1:6549342:     @Override
1:6549342:     public void testSendingLargeMessage() throws Exception {
1:6549342:         // Ignoring, see AMQ-4973
1:6549342:     }
1:2a076d0: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:6549342
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void testSendingMediumMessage() throws Exception {
1:         // Ignoring, see AMQ-4973
1:     }
1: 
1:     @Override
1:     public void testSendingLargeMessage() throws Exception {
1:         // Ignoring, see AMQ-4973
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.test.JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(UnreliableUdpTransportTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Producer using URI: " + producerURI);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consumer on port: " + consumerPort);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.SocketAddress;
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Producer using URI: " + producerURI);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Consumer on port: " + consumerPort);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(UnreliableUdpTransportTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:2a076d0
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.transport.CommandJoiner;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.udp.ResponseRedirectInterceptor;
1: import org.apache.activemq.transport.udp.UdpTransport;
1: import org.apache.activemq.transport.udp.UdpTransportTest;
1: 
0: import java.net.SocketAddress;
0: import java.net.URI;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class UnreliableUdpTransportTest extends UdpTransportTest {
1: 
1:     protected DropCommandStrategy dropStrategy = new DropCommandStrategy() {
1:         
1:         public boolean shouldDropCommand(int commandId, SocketAddress address, boolean redelivery) {
1:             if (redelivery) {
1:                 return false;
1:             }
1:             return commandId % 3 == 2;
1:         }
1:     };
1: 
1:     protected Transport createProducer() throws Exception {
0:         System.out.println("Producer using URI: " + producerURI);
1: 
1:         OpenWireFormat wireFormat = createWireFormat();
1:         UnreliableUdpTransport transport = new UnreliableUdpTransport(wireFormat, new URI(producerURI));
1:         transport.setDropCommandStrategy(dropStrategy);
1: 
1:         ReliableTransport reliableTransport = new ReliableTransport(transport, transport);
1:         Replayer replayer = reliableTransport.getReplayer();
1:         reliableTransport.setReplayStrategy(createReplayStrategy(replayer));
1: 
1:         return new CommandJoiner(reliableTransport, wireFormat);
1:     }
1: 
1:     protected Transport createConsumer() throws Exception {
0:         System.out.println("Consumer on port: " + consumerPort);
1:         OpenWireFormat wireFormat = createWireFormat();
1:         UdpTransport transport = new UdpTransport(wireFormat, consumerPort);
1: 
1:         ReliableTransport reliableTransport = new ReliableTransport(transport, transport);
1:         Replayer replayer = reliableTransport.getReplayer();
1:         reliableTransport.setReplayStrategy(createReplayStrategy(replayer));
1: 
1:         ResponseRedirectInterceptor redirectInterceptor = new ResponseRedirectInterceptor(reliableTransport, transport);
1:         return new CommandJoiner(redirectInterceptor, wireFormat);
1:     }
1: 
1:     protected ReplayStrategy createReplayStrategy(Replayer replayer) {
1:         assertNotNull("Should have a replayer!", replayer);
1:         return new DefaultReplayStrategy(1);
1:     }
1: }
============================================================================