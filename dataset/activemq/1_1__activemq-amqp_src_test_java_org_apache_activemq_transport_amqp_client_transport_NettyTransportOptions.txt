1:4b018b4: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
2:82a5839: /**
1:82a5839:  * Encapsulates all the TCP Transport options in one configuration object.
1:82a5839:  */
1:28e7cb0: public class NettyTransportOptions implements Cloneable {
1:82a5839: 
1:82a5839:     public static final int DEFAULT_SEND_BUFFER_SIZE = 64 * 1024;
1:82a5839:     public static final int DEFAULT_RECEIVE_BUFFER_SIZE = DEFAULT_SEND_BUFFER_SIZE;
1:82a5839:     public static final int DEFAULT_TRAFFIC_CLASS = 0;
1:82a5839:     public static final boolean DEFAULT_TCP_NO_DELAY = true;
1:82a5839:     public static final boolean DEFAULT_TCP_KEEP_ALIVE = false;
1:82a5839:     public static final int DEFAULT_SO_LINGER = Integer.MIN_VALUE;
1:82a5839:     public static final int DEFAULT_SO_TIMEOUT = -1;
1:82a5839:     public static final int DEFAULT_CONNECT_TIMEOUT = 60000;
1:82a5839:     public static final int DEFAULT_TCP_PORT = 5672;
1:154ff81:     public static final boolean DEFAULT_TRACE_BYTES = false;
1:82a5839: 
1:82a5839:     public static final NettyTransportOptions INSTANCE = new NettyTransportOptions();
1:82a5839: 
1:82a5839:     private int sendBufferSize = DEFAULT_SEND_BUFFER_SIZE;
1:82a5839:     private int receiveBufferSize = DEFAULT_RECEIVE_BUFFER_SIZE;
1:82a5839:     private int trafficClass = DEFAULT_TRAFFIC_CLASS;
1:82a5839:     private int connectTimeout = DEFAULT_CONNECT_TIMEOUT;
1:82a5839:     private int soTimeout = DEFAULT_SO_TIMEOUT;
1:82a5839:     private int soLinger = DEFAULT_SO_LINGER;
1:82a5839:     private boolean tcpKeepAlive = DEFAULT_TCP_KEEP_ALIVE;
1:82a5839:     private boolean tcpNoDelay = DEFAULT_TCP_NO_DELAY;
1:82a5839:     private int defaultTcpPort = DEFAULT_TCP_PORT;
1:154ff81:     private boolean traceBytes = DEFAULT_TRACE_BYTES;
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the currently set send buffer size in bytes.
1:82a5839:      */
1:82a5839:     public int getSendBufferSize() {
1:82a5839:         return sendBufferSize;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Sets the send buffer size in bytes, the value must be greater than zero
1:82a5839:      * or an {@link IllegalArgumentException} will be thrown.
1:82a5839:      *
1:82a5839:      * @param sendBufferSize
1:82a5839:      *        the new send buffer size for the TCP Transport.
1:82a5839:      *
1:82a5839:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:82a5839:      */
1:82a5839:     public void setSendBufferSize(int sendBufferSize) {
1:82a5839:         if (sendBufferSize <= 0) {
1:82a5839:             throw new IllegalArgumentException("The send buffer size must be > 0");
1:82a5839:         }
1:82a5839: 
1:82a5839:         this.sendBufferSize = sendBufferSize;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the currently configured receive buffer size in bytes.
1:82a5839:      */
1:82a5839:     public int getReceiveBufferSize() {
1:82a5839:         return receiveBufferSize;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Sets the receive buffer size in bytes, the value must be greater than zero
1:82a5839:      * or an {@link IllegalArgumentException} will be thrown.
1:82a5839:      *
1:82a5839:      * @param receiveBufferSize
1:82a5839:      *        the new receive buffer size for the TCP Transport.
1:82a5839:      *
1:82a5839:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:82a5839:      */
1:82a5839:     public void setReceiveBufferSize(int receiveBufferSize) {
1:82a5839:         if (receiveBufferSize <= 0) {
1:82a5839:             throw new IllegalArgumentException("The send buffer size must be > 0");
1:82a5839:         }
1:82a5839: 
1:82a5839:         this.receiveBufferSize = receiveBufferSize;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the currently configured traffic class value.
1:82a5839:      */
1:82a5839:     public int getTrafficClass() {
1:82a5839:         return trafficClass;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Sets the traffic class value used by the TCP connection, valid
1:82a5839:      * range is between 0 and 255.
1:82a5839:      *
1:82a5839:      * @param trafficClass
1:82a5839:      *        the new traffic class value.
1:82a5839:      *
1:82a5839:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:82a5839:      */
1:82a5839:     public void setTrafficClass(int trafficClass) {
1:82a5839:         if (trafficClass < 0 || trafficClass > 255) {
1:82a5839:             throw new IllegalArgumentException("Traffic class must be in the range [0..255]");
1:82a5839:         }
1:82a5839: 
1:82a5839:         this.trafficClass = trafficClass;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public int getSoTimeout() {
1:82a5839:         return soTimeout;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setSoTimeout(int soTimeout) {
1:82a5839:         this.soTimeout = soTimeout;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public boolean isTcpNoDelay() {
1:82a5839:         return tcpNoDelay;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setTcpNoDelay(boolean tcpNoDelay) {
1:82a5839:         this.tcpNoDelay = tcpNoDelay;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public int getSoLinger() {
1:82a5839:         return soLinger;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setSoLinger(int soLinger) {
1:82a5839:         this.soLinger = soLinger;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public boolean isTcpKeepAlive() {
1:82a5839:         return tcpKeepAlive;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setTcpKeepAlive(boolean keepAlive) {
1:82a5839:         this.tcpKeepAlive = keepAlive;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public int getConnectTimeout() {
1:82a5839:         return connectTimeout;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setConnectTimeout(int connectTimeout) {
1:82a5839:         this.connectTimeout = connectTimeout;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public int getDefaultTcpPort() {
1:82a5839:         return defaultTcpPort;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setDefaultTcpPort(int defaultTcpPort) {
1:82a5839:         this.defaultTcpPort = defaultTcpPort;
1:82a5839:     }
1:82a5839: 
1:154ff81:     /**
1:154ff81:      * @return true if the transport should enable byte tracing
1:154ff81:      */
1:154ff81:     public boolean isTraceBytes() {
1:154ff81:         return traceBytes;
1:154ff81:     }
1:154ff81: 
1:154ff81:     /**
1:154ff81:      * Determines if the transport should add a logger for bytes in / out
1:154ff81:      *
1:154ff81:      * @param traceBytes
1:154ff81:      *      should the transport log the bytes in and out.
1:154ff81:      */
1:154ff81:     public void setTraceBytes(boolean traceBytes) {
1:154ff81:         this.traceBytes = traceBytes;
1:154ff81:     }
1:154ff81: 
1:4b018b4:     public boolean isSSL() {
1:4b018b4:         return false;
1:4b018b4:     }
1:4b018b4: 
1:82a5839:     @Override
1:82a5839:     public NettyTransportOptions clone() {
1:82a5839:         return copyOptions(new NettyTransportOptions());
1:82a5839:     }
1:82a5839: 
1:82a5839:     protected NettyTransportOptions copyOptions(NettyTransportOptions copy) {
1:82a5839:         copy.setConnectTimeout(getConnectTimeout());
1:82a5839:         copy.setReceiveBufferSize(getReceiveBufferSize());
1:82a5839:         copy.setSendBufferSize(getSendBufferSize());
1:82a5839:         copy.setSoLinger(getSoLinger());
1:82a5839:         copy.setSoTimeout(getSoTimeout());
1:82a5839:         copy.setTcpKeepAlive(isTcpKeepAlive());
1:82a5839:         copy.setTcpNoDelay(isTcpNoDelay());
1:82a5839:         copy.setTrafficClass(getTrafficClass());
1:82a5839: 
1:82a5839:         return copy;
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:154ff81
/////////////////////////////////////////////////////////////////////////
1:     public static final boolean DEFAULT_TRACE_BYTES = false;
/////////////////////////////////////////////////////////////////////////
1:     private boolean traceBytes = DEFAULT_TRACE_BYTES;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if the transport should enable byte tracing
1:      */
1:     public boolean isTraceBytes() {
1:         return traceBytes;
1:     }
1: 
1:     /**
1:      * Determines if the transport should add a logger for bytes in / out
1:      *
1:      * @param traceBytes
1:      *      should the transport log the bytes in and out.
1:      */
1:     public void setTraceBytes(boolean traceBytes) {
1:         this.traceBytes = traceBytes;
1:     }
1: 
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSSL() {
1:         return false;
1:     }
1: 
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
1: public class NettyTransportOptions implements Cloneable {
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: /**
1:  * Encapsulates all the TCP Transport options in one configuration object.
1:  */
0: public class NettyTransportOptions {
1: 
1:     public static final int DEFAULT_SEND_BUFFER_SIZE = 64 * 1024;
1:     public static final int DEFAULT_RECEIVE_BUFFER_SIZE = DEFAULT_SEND_BUFFER_SIZE;
1:     public static final int DEFAULT_TRAFFIC_CLASS = 0;
1:     public static final boolean DEFAULT_TCP_NO_DELAY = true;
1:     public static final boolean DEFAULT_TCP_KEEP_ALIVE = false;
1:     public static final int DEFAULT_SO_LINGER = Integer.MIN_VALUE;
1:     public static final int DEFAULT_SO_TIMEOUT = -1;
1:     public static final int DEFAULT_CONNECT_TIMEOUT = 60000;
1:     public static final int DEFAULT_TCP_PORT = 5672;
1: 
1:     public static final NettyTransportOptions INSTANCE = new NettyTransportOptions();
1: 
1:     private int sendBufferSize = DEFAULT_SEND_BUFFER_SIZE;
1:     private int receiveBufferSize = DEFAULT_RECEIVE_BUFFER_SIZE;
1:     private int trafficClass = DEFAULT_TRAFFIC_CLASS;
1:     private int connectTimeout = DEFAULT_CONNECT_TIMEOUT;
1:     private int soTimeout = DEFAULT_SO_TIMEOUT;
1:     private int soLinger = DEFAULT_SO_LINGER;
1:     private boolean tcpKeepAlive = DEFAULT_TCP_KEEP_ALIVE;
1:     private boolean tcpNoDelay = DEFAULT_TCP_NO_DELAY;
1:     private int defaultTcpPort = DEFAULT_TCP_PORT;
1: 
1:     /**
1:      * @return the currently set send buffer size in bytes.
1:      */
1:     public int getSendBufferSize() {
1:         return sendBufferSize;
1:     }
1: 
1:     /**
1:      * Sets the send buffer size in bytes, the value must be greater than zero
1:      * or an {@link IllegalArgumentException} will be thrown.
1:      *
1:      * @param sendBufferSize
1:      *        the new send buffer size for the TCP Transport.
1:      *
1:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:      */
1:     public void setSendBufferSize(int sendBufferSize) {
1:         if (sendBufferSize <= 0) {
1:             throw new IllegalArgumentException("The send buffer size must be > 0");
1:         }
1: 
1:         this.sendBufferSize = sendBufferSize;
1:     }
1: 
1:     /**
1:      * @return the currently configured receive buffer size in bytes.
1:      */
1:     public int getReceiveBufferSize() {
1:         return receiveBufferSize;
1:     }
1: 
1:     /**
1:      * Sets the receive buffer size in bytes, the value must be greater than zero
1:      * or an {@link IllegalArgumentException} will be thrown.
1:      *
1:      * @param receiveBufferSize
1:      *        the new receive buffer size for the TCP Transport.
1:      *
1:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:      */
1:     public void setReceiveBufferSize(int receiveBufferSize) {
1:         if (receiveBufferSize <= 0) {
1:             throw new IllegalArgumentException("The send buffer size must be > 0");
1:         }
1: 
1:         this.receiveBufferSize = receiveBufferSize;
1:     }
1: 
1:     /**
1:      * @return the currently configured traffic class value.
1:      */
1:     public int getTrafficClass() {
1:         return trafficClass;
1:     }
1: 
1:     /**
1:      * Sets the traffic class value used by the TCP connection, valid
1:      * range is between 0 and 255.
1:      *
1:      * @param trafficClass
1:      *        the new traffic class value.
1:      *
1:      * @throws IllegalArgumentException if the value given is not in the valid range.
1:      */
1:     public void setTrafficClass(int trafficClass) {
1:         if (trafficClass < 0 || trafficClass > 255) {
1:             throw new IllegalArgumentException("Traffic class must be in the range [0..255]");
1:         }
1: 
1:         this.trafficClass = trafficClass;
1:     }
1: 
1:     public int getSoTimeout() {
1:         return soTimeout;
1:     }
1: 
1:     public void setSoTimeout(int soTimeout) {
1:         this.soTimeout = soTimeout;
1:     }
1: 
1:     public boolean isTcpNoDelay() {
1:         return tcpNoDelay;
1:     }
1: 
1:     public void setTcpNoDelay(boolean tcpNoDelay) {
1:         this.tcpNoDelay = tcpNoDelay;
1:     }
1: 
1:     public int getSoLinger() {
1:         return soLinger;
1:     }
1: 
1:     public void setSoLinger(int soLinger) {
1:         this.soLinger = soLinger;
1:     }
1: 
1:     public boolean isTcpKeepAlive() {
1:         return tcpKeepAlive;
1:     }
1: 
1:     public void setTcpKeepAlive(boolean keepAlive) {
1:         this.tcpKeepAlive = keepAlive;
1:     }
1: 
1:     public int getConnectTimeout() {
1:         return connectTimeout;
1:     }
1: 
1:     public void setConnectTimeout(int connectTimeout) {
1:         this.connectTimeout = connectTimeout;
1:     }
1: 
1:     public int getDefaultTcpPort() {
1:         return defaultTcpPort;
1:     }
1: 
1:     public void setDefaultTcpPort(int defaultTcpPort) {
1:         this.defaultTcpPort = defaultTcpPort;
1:     }
1: 
1:     @Override
1:     public NettyTransportOptions clone() {
1:         return copyOptions(new NettyTransportOptions());
1:     }
1: 
1:     protected NettyTransportOptions copyOptions(NettyTransportOptions copy) {
1:         copy.setConnectTimeout(getConnectTimeout());
1:         copy.setReceiveBufferSize(getReceiveBufferSize());
1:         copy.setSendBufferSize(getSendBufferSize());
1:         copy.setSoLinger(getSoLinger());
1:         copy.setSoTimeout(getSoTimeout());
1:         copy.setTcpKeepAlive(isTcpKeepAlive());
1:         copy.setTcpNoDelay(isTcpNoDelay());
1:         copy.setTrafficClass(getTrafficClass());
1: 
1:         return copy;
1:     }
1: }
============================================================================