1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
4:6e69319: 
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_DATA;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_NULL;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_SEQUENCE;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_BINARY;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_LIST;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_MAP;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_NULL;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_STRING;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_ORIGINAL_ENCODING;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.getCharsetForTextualContent;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.isContentType;
1:d54e21b: 
1:d54e21b: import java.nio.ByteBuffer;
1:d54e21b: import java.nio.CharBuffer;
1:d54e21b: import java.nio.charset.CharacterCodingException;
1:d54e21b: import java.nio.charset.Charset;
1:d54e21b: import java.nio.charset.StandardCharsets;
1:d88c4e4: import java.util.Arrays;
1:6e69319: import java.util.List;
1:6e69319: import java.util.Map;
1:63d62a7: import java.util.Set;
1:6e69319: 
1:63d62a7: import javax.jms.JMSException;
1:63d62a7: import javax.jms.MessageNotWriteableException;
1:6e69319: 
1:63d62a7: import org.apache.activemq.command.ActiveMQBytesMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQMapMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQObjectMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQStreamMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQTextMessage;
1:d54e21b: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1:63d62a7: import org.apache.activemq.util.ByteSequence;
1:6e69319: import org.apache.qpid.proton.amqp.Binary;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.Data;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.Section;
1:d54e21b: import org.apache.qpid.proton.message.Message;
1:6e69319: 
1:6e69319: public class JMSMappingInboundTransformer extends InboundTransformer {
1:6e69319: 
1:13b915a:     @Override
1:13b915a:     public String getTransformerName() {
1:13b915a:         return TRANSFORMER_JMS;
1:13b915a:     }
1:d54e21b: 
1:13b915a:     @Override
1:13b915a:     public InboundTransformer getFallbackTransformer() {
1:63d62a7:         return new AMQPNativeInboundTransformer();
1:13b915a:     }
1:13b915a: 
1:6e69319:     @Override
1:63d62a7:     protected ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception {
1:d54e21b:         Message amqp = amqpMessage.decode();
1:d54e21b: 
1:63d62a7:         ActiveMQMessage result = createMessage(amqp, amqpMessage);
1:d54e21b: 
1:d54e21b:         populateMessage(result, amqp);
1:d54e21b: 
1:63d62a7:         if (amqpMessage.getMessageFormat() != 0) {
1:63d62a7:             result.setLongProperty(JMS_AMQP_MESSAGE_FORMAT, amqpMessage.getMessageFormat());
1:63d62a7:         }
1:d54e21b: 
1:d54e21b:         return result;
1:d54e21b:     }
1:63d62a7: 
1:d54e21b:     @SuppressWarnings({ "unchecked" })
1:63d62a7:     private ActiveMQMessage createMessage(Message message, EncodedMessage original) throws Exception {
1:d54e21b: 
1:d54e21b:         Section body = message.getBody();
1:63d62a7:         ActiveMQMessage result;
1:d54e21b: 
1:6e69319:         if (body == null) {
1:d54e21b:             if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
1:63d62a7:                 result = new ActiveMQObjectMessage();
1:d54e21b:             } else if (isContentType(OCTET_STREAM_CONTENT_TYPE, message) || isContentType(null, message)) {
1:63d62a7:                 result = new ActiveMQBytesMessage();
1:d54e21b:             } else {
1:d54e21b:                 Charset charset = getCharsetForTextualContent(message.getContentType());
1:d54e21b:                 if (charset != null) {
1:63d62a7:                     result = new ActiveMQTextMessage();
1:d54e21b:                 } else {
1:63d62a7:                     result = new ActiveMQMessage();
1:d54e21b:                 }
1:d54e21b:             }
1:d54e21b: 
1:63d62a7:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_NULL);
1:6e69319:         } else if (body instanceof Data) {
1:d54e21b:             Binary payload = ((Data) body).getValue();
1:d54e21b: 
1:d54e21b:             if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
1:63d62a7:                 result = createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:             } else if (isContentType(OCTET_STREAM_CONTENT_TYPE, message)) {
1:63d62a7:                 result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:             } else {
1:d54e21b:                 Charset charset = getCharsetForTextualContent(message.getContentType());
1:d54e21b:                 if (StandardCharsets.UTF_8.equals(charset)) {
1:d54e21b:                     ByteBuffer buf = ByteBuffer.wrap(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b: 
1:d54e21b:                     try {
1:d54e21b:                         CharBuffer chars = charset.newDecoder().decode(buf);
1:63d62a7:                         result = createTextMessage(String.valueOf(chars));
1:d54e21b:                     } catch (CharacterCodingException e) {
1:63d62a7:                         result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:                     }
1:d54e21b:                 } else {
1:63d62a7:                     result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:                 }
1:d54e21b:             }
1:d54e21b: 
1:63d62a7:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:6e69319:         } else if (body instanceof AmqpSequence) {
1:6e69319:             AmqpSequence sequence = (AmqpSequence) body;
1:63d62a7:             ActiveMQStreamMessage m = new ActiveMQStreamMessage();
1:6e69319:             for (Object item : sequence.getValue()) {
1:6e69319:                 m.writeObject(item);
4:6e69319:             }
1:d54e21b: 
1:d54e21b:             result = m;
1:63d62a7:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:6e69319:         } else if (body instanceof AmqpValue) {
1:6e69319:             Object value = ((AmqpValue) body).getValue();
1:d54e21b:             if (value == null || value instanceof String) {
1:63d62a7:                 result = createTextMessage((String) value);
1:d54e21b: 
1:63d62a7:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, value == null ? AMQP_VALUE_NULL : AMQP_VALUE_STRING);
1:6e69319:             } else if (value instanceof Binary) {
1:d54e21b:                 Binary payload = (Binary) value;
1:d54e21b: 
1:d54e21b:                 if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
1:63d62a7:                     result = createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:                 } else {
1:63d62a7:                     result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:d54e21b:                 }
1:d54e21b: 
1:63d62a7:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:6e69319:             } else if (value instanceof List) {
1:63d62a7:                 ActiveMQStreamMessage m = new ActiveMQStreamMessage();
1:6e69319:                 for (Object item : (List<Object>) value) {
1:6e69319:                     m.writeObject(item);
1:6e69319:                 }
1:d54e21b:                 result = m;
1:63d62a7:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_LIST);
1:6e69319:             } else if (value instanceof Map) {
1:63d62a7:                 result = createMapMessage((Map<String, Object>) value);
1:63d62a7:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_MAP);
1:6e69319:             } else {
1:d54e21b:                 // Trigger fall-back to native encoder which generates BytesMessage with the
1:d54e21b:                 // original message stored in the message body.
1:d54e21b:                 throw new AmqpProtocolException("Unable to encode to ActiveMQ JMS Message", false);
1:6e69319:             }
1:6e69319:         } else {
1:6e69319:             throw new RuntimeException("Unexpected body type: " + body.getClass());
1:6e69319:         }
1:13b915a: 
1:d54e21b:         return result;
1:6e69319:     }
1:6e69319: 
1:63d62a7:     private static ActiveMQBytesMessage createBytesMessage(byte[] content, int offset, int length) {
1:63d62a7:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:63d62a7:         message.setContent(new ByteSequence(content, offset, length));
1:63d62a7:         return message;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     public static ActiveMQTextMessage createTextMessage(String text) {
1:63d62a7:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:63d62a7:         try {
1:63d62a7:             message.setText(text);
1:63d62a7:         } catch (MessageNotWriteableException ex) {}
1:63d62a7: 
1:63d62a7:         return message;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     public static ActiveMQObjectMessage createObjectMessage(byte[] content, int offset, int length) {
1:63d62a7:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:63d62a7:         message.setContent(new ByteSequence(content, offset, length));
1:63d62a7:         return message;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     public static ActiveMQMapMessage createMapMessage(Map<String, Object> content) throws JMSException {
1:63d62a7:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1:63d62a7:         final Set<Map.Entry<String, Object>> set = content.entrySet();
1:63d62a7:         for (Map.Entry<String, Object> entry : set) {
1:d88c4e4:             Object value = entry.getValue();
1:d88c4e4:             if (value instanceof Binary) {
1:d88c4e4:                 Binary binary = (Binary) value;
1:d88c4e4:                 value = Arrays.copyOfRange(binary.getArray(), binary.getArrayOffset(), binary.getLength());
1:d88c4e4:             }
1:d88c4e4:             message.setObject(entry.getKey(), value);
1:63d62a7:         }
1:63d62a7:         return message;
1:63d62a7:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d88c4e4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             Object value = entry.getValue();
1:             if (value instanceof Binary) {
1:                 Binary binary = (Binary) value;
1:                 value = Arrays.copyOfRange(binary.getArray(), binary.getArrayOffset(), binary.getLength());
1:             }
1:             message.setObject(entry.getKey(), value);
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_ORIGINAL_ENCODING;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import javax.jms.JMSException;
1: import javax.jms.MessageNotWriteableException;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.util.ByteSequence;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new AMQPNativeInboundTransformer();
1:     protected ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception {
1:         ActiveMQMessage result = createMessage(amqp, amqpMessage);
1:         if (amqpMessage.getMessageFormat() != 0) {
1:             result.setLongProperty(JMS_AMQP_MESSAGE_FORMAT, amqpMessage.getMessageFormat());
1:         }
1:     private ActiveMQMessage createMessage(Message message, EncodedMessage original) throws Exception {
1:         ActiveMQMessage result;
1:                 result = new ActiveMQObjectMessage();
1:                 result = new ActiveMQBytesMessage();
1:                     result = new ActiveMQTextMessage();
1:                     result = new ActiveMQMessage();
1:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_NULL);
1:                 result = createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                 result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
/////////////////////////////////////////////////////////////////////////
1:                         result = createTextMessage(String.valueOf(chars));
1:                         result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                     result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:             ActiveMQStreamMessage m = new ActiveMQStreamMessage();
1:             result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:                 result = createTextMessage((String) value);
1:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, value == null ? AMQP_VALUE_NULL : AMQP_VALUE_STRING);
1:                     result = createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                     result = createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:                 ActiveMQStreamMessage m = new ActiveMQStreamMessage();
1:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_LIST);
1:                 result = createMapMessage((Map<String, Object>) value);
1:                 result.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_MAP);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static ActiveMQBytesMessage createBytesMessage(byte[] content, int offset, int length) {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         message.setContent(new ByteSequence(content, offset, length));
1:         return message;
1:     }
1: 
1:     public static ActiveMQTextMessage createTextMessage(String text) {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         try {
1:             message.setText(text);
1:         } catch (MessageNotWriteableException ex) {}
1: 
1:         return message;
1:     }
1: 
1:     public static ActiveMQObjectMessage createObjectMessage(byte[] content, int offset, int length) {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         message.setContent(new ByteSequence(content, offset, length));
1:         return message;
1:     }
1: 
1:     public static ActiveMQMapMessage createMapMessage(Map<String, Object> content) throws JMSException {
1:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1:         final Set<Map.Entry<String, Object>> set = content.entrySet();
1:         for (Map.Entry<String, Object> entry : set) {
0:             message.setObject(entry.getKey(), entry.getValue());
1:         }
1:         return message;
1:     }
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_DATA;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_NULL;
0: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_ORIGINAL_ENCODING_KEY;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_SEQUENCE;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_BINARY;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_LIST;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_MAP;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_NULL;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_STRING;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.getCharsetForTextualContent;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.isContentType;
1: 
1: import java.nio.ByteBuffer;
1: import java.nio.CharBuffer;
1: import java.nio.charset.CharacterCodingException;
1: import java.nio.charset.Charset;
1: import java.nio.charset.StandardCharsets;
1: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1: import org.apache.qpid.proton.message.Message;
0:     public JMSMappingInboundTransformer(ActiveMQJMSVendor vendor) {
/////////////////////////////////////////////////////////////////////////
0:     protected javax.jms.Message doTransform(EncodedMessage amqpMessage) throws Exception {
1:         Message amqp = amqpMessage.decode();
0:         javax.jms.Message result = createMessage(amqp, amqpMessage);
1: 
0:         result.setJMSDeliveryMode(defaultDeliveryMode);
0:         result.setJMSPriority(defaultPriority);
0:         result.setJMSExpiration(defaultTtl);
1: 
1:         populateMessage(result, amqp);
1: 
0:         result.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
0:         result.setBooleanProperty(prefixVendor + "NATIVE", false);
1: 
1:         return result;
1:     }
1: 
1:     @SuppressWarnings({ "unchecked" })
0:     private javax.jms.Message createMessage(Message message, EncodedMessage original) throws Exception {
1: 
1:         Section body = message.getBody();
0:         javax.jms.Message result;
1: 
1:             if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
0:                 result = vendor.createObjectMessage();
1:             } else if (isContentType(OCTET_STREAM_CONTENT_TYPE, message) || isContentType(null, message)) {
0:                 result = vendor.createBytesMessage();
1:             } else {
1:                 Charset charset = getCharsetForTextualContent(message.getContentType());
1:                 if (charset != null) {
0:                     result = vendor.createTextMessage();
1:                 } else {
0:                     result = vendor.createMessage();
1:                 }
1:             }
1: 
0:             result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_NULL);
1:             Binary payload = ((Data) body).getValue();
1: 
1:             if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
0:                 result = vendor.createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:             } else if (isContentType(OCTET_STREAM_CONTENT_TYPE, message)) {
0:                 result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:             } else {
1:                 Charset charset = getCharsetForTextualContent(message.getContentType());
1:                 if (StandardCharsets.UTF_8.equals(charset)) {
1:                     ByteBuffer buf = ByteBuffer.wrap(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1: 
1:                     try {
1:                         CharBuffer chars = charset.newDecoder().decode(buf);
0:                         result = vendor.createTextMessage(String.valueOf(chars));
1:                     } catch (CharacterCodingException e) {
0:                         result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                     }
1:                 } else {
0:                     result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                 }
1:             }
1: 
0:             result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_DATA);
1: 
1:             result = m;
0:             result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_SEQUENCE);
1:             if (value == null || value instanceof String) {
0:                 result = vendor.createTextMessage((String) value);
1: 
0:                 result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, value == null ? AMQP_VALUE_NULL : AMQP_VALUE_STRING);
1:                 Binary payload = (Binary) value;
1: 
1:                 if (isContentType(SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, message)) {
0:                     result = vendor.createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                 } else {
0:                     result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
1:                 }
1: 
0:                 result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:                 result = m;
0:                 result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_LIST);
0:                 result = vendor.createMapMessage((Map<String, Object>) value);
0:                 result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_MAP);
1:                 // Trigger fall-back to native encoder which generates BytesMessage with the
1:                 // original message stored in the message body.
1:                 throw new AmqpProtocolException("Unable to encode to ActiveMQ JMS Message", false);
1:         return result;
commit:13b915a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getTransformerName() {
1:         return TRANSFORMER_JMS;
1:     }
1: 
1:     @Override
1:     public InboundTransformer getFallbackTransformer() {
0:         return new AMQPNativeInboundTransformer(getVendor());
1:     }
1: 
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import java.io.Serializable;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.Set;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.MapMessage;
0: import javax.jms.Message;
0: import javax.jms.ObjectMessage;
0: import javax.jms.StreamMessage;
0: import javax.jms.TextMessage;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.Data;
1: import org.apache.qpid.proton.amqp.messaging.Section;
1: 
1: public class JMSMappingInboundTransformer extends InboundTransformer {
1: 
0:     public JMSMappingInboundTransformer(JMSVendor vendor) {
0:         super(vendor);
1:     }
1: 
0:     @SuppressWarnings({ "unchecked" })
1:     @Override
0:     public Message transform(EncodedMessage amqpMessage) throws Exception {
0:         org.apache.qpid.proton.message.Message amqp = amqpMessage.decode();
1: 
0:         Message rc;
0:         final Section body = amqp.getBody();
1:         if (body == null) {
0:             rc = vendor.createMessage();
1:         } else if (body instanceof Data) {
0:             Binary d = ((Data) body).getValue();
0:             BytesMessage m = vendor.createBytesMessage();
0:             m.writeBytes(d.getArray(), d.getArrayOffset(), d.getLength());
0:             rc = m;
1:         } else if (body instanceof AmqpSequence) {
1:             AmqpSequence sequence = (AmqpSequence) body;
0:             StreamMessage m = vendor.createStreamMessage();
1:             for (Object item : sequence.getValue()) {
1:                 m.writeObject(item);
1:             }
0:             rc = m;
1:         } else if (body instanceof AmqpValue) {
1:             Object value = ((AmqpValue) body).getValue();
0:             if (value == null) {
0:                 rc = vendor.createObjectMessage();
1:             }
0:             if (value instanceof String) {
0:                 TextMessage m = vendor.createTextMessage();
0:                 m.setText((String) value);
0:                 rc = m;
1:             } else if (value instanceof Binary) {
0:                 Binary d = (Binary) value;
0:                 BytesMessage m = vendor.createBytesMessage();
0:                 m.writeBytes(d.getArray(), d.getArrayOffset(), d.getLength());
0:                 rc = m;
1:             } else if (value instanceof List) {
0:                 StreamMessage m = vendor.createStreamMessage();
1:                 for (Object item : (List<Object>) value) {
1:                     m.writeObject(item);
1:                 }
0:                 rc = m;
1:             } else if (value instanceof Map) {
0:                 MapMessage m = vendor.createMapMessage();
0:                 final Set<Map.Entry<String, Object>> set = ((Map<String, Object>) value).entrySet();
0:                 for (Map.Entry<String, Object> entry : set) {
0:                     m.setObject(entry.getKey(), entry.getValue());
1:                 }
0:                 rc = m;
1:             } else {
0:                 ObjectMessage m = vendor.createObjectMessage();
0:                 m.setObject((Serializable) value);
0:                 rc = m;
1:             }
1:         } else {
1:             throw new RuntimeException("Unexpected body type: " + body.getClass());
1:         }
0:         rc.setJMSDeliveryMode(defaultDeliveryMode);
0:         rc.setJMSPriority(defaultPriority);
0:         rc.setJMSExpiration(defaultTtl);
1: 
0:         populateMessage(rc, amqp);
1: 
0:         rc.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
0:         rc.setBooleanProperty(prefixVendor + "NATIVE", false);
0:         return rc;
1:     }
1: }
============================================================================