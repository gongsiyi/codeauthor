1:a2af47b: /**
1:a2af47b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a2af47b:  * contributor license agreements.  See the NOTICE file distributed with
1:a2af47b:  * this work for additional information regarding copyright ownership.
1:a2af47b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a2af47b:  * (the "License"); you may not use this file except in compliance with
1:a2af47b:  * the License.  You may obtain a copy of the License at
1:a2af47b:  *
1:a2af47b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a2af47b:  *
1:a2af47b:  * Unless required by applicable law or agreed to in writing, software
1:a2af47b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a2af47b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2af47b:  * See the License for the specific language governing permissions and
1:a2af47b:  * limitations under the License.
1:a2af47b:  */
1:a2af47b: package org.apache.activemq;
25:a2af47b: 
1:a2af47b: import static org.junit.Assert.assertEquals;
1:3e4fc0a: import static org.junit.Assert.assertNotNull;
1:a2af47b: import static org.junit.Assert.assertTrue;
1:c7d559f: import static org.junit.Assert.fail;
1:3e4fc0a: 
1:a2af47b: import java.util.ArrayList;
1:a2af47b: import java.util.List;
1:a2af47b: import java.util.concurrent.CountDownLatch;
1:a2af47b: import java.util.concurrent.ExecutorService;
1:a2af47b: import java.util.concurrent.Executors;
1:a2af47b: import java.util.concurrent.TimeUnit;
1:a2af47b: import java.util.concurrent.atomic.AtomicInteger;
1:3e4fc0a: 
1:a2af47b: import javax.jms.Connection;
1:a2af47b: import javax.jms.ConnectionFactory;
1:3e4fc0a: import javax.jms.JMSException;
1:a2af47b: import javax.jms.Message;
1:a2af47b: import javax.jms.MessageConsumer;
1:a2af47b: import javax.jms.MessageListener;
1:a2af47b: import javax.jms.MessageProducer;
1:a2af47b: import javax.jms.Session;
1:a2af47b: import javax.jms.Topic;
1:156a609: 
1:3e4fc0a: import org.apache.activemq.advisory.AdvisorySupport;
1:a2af47b: import org.apache.activemq.broker.BrokerService;
1:a2af47b: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:156a609: import org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy;
1:a2af47b: import org.apache.activemq.broker.region.policy.OldestMessageEvictionStrategy;
1:156a609: import org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy;
1:a2af47b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a2af47b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:156a609: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:a2af47b: import org.apache.activemq.command.ActiveMQDestination;
1:3e4fc0a: import org.apache.activemq.command.ActiveMQMessage;
1:3e4fc0a: import org.apache.activemq.command.ActiveMQTopic;
1:156a609: import org.apache.activemq.util.Wait;
1:a2af47b: import org.junit.After;
1:a2af47b: import org.junit.Test;
1:c7d559f: import org.slf4j.Logger;
1:c7d559f: import org.slf4j.LoggerFactory;
1:156a609: 
1:a2af47b: public class MessageEvictionTest {
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(MessageEvictionTest.class);
1:a2af47b:     private BrokerService broker;
1:a2af47b:     private ConnectionFactory connectionFactory;
1:a2af47b:     Connection connection;
1:a2af47b:     private Session session;
1:a2af47b:     private Topic destination;
1:3e4fc0a:     private final String destinationName = "verifyEvection";
1:3e4fc0a:     protected int numMessages = 2000;
1:a2af47b:     protected String payload = new String(new byte[1024*2]);
1:156a609: 
1:156a609:     public void setUp(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
1:156a609:         broker = createBroker(pendingSubscriberPolicy);
1:a2af47b:         broker.start();
1:a2af47b:         connectionFactory = createConnectionFactory();
1:a2af47b:         connection = connectionFactory.createConnection();
1:a2af47b:         connection.start();
1:a2af47b:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:3e4fc0a:         destination = session.createTopic(destinationName);
3:a2af47b:     }
1:c7d559f: 
1:a2af47b:     @After
1:a2af47b:     public void tearDown() throws Exception {
1:a2af47b:         connection.stop();
1:a2af47b:         broker.stop();
1:a2af47b:     }
1:c7d559f: 
1:a2af47b:     @Test
1:156a609:     public void testMessageEvictionMemoryUsageFileCursor() throws Exception {
1:3e4fc0a:         setUp(new FilePendingSubscriberMessageStoragePolicy());
1:3e4fc0a:         doTestMessageEvictionMemoryUsage();
1:156a609:     }
1:c7d559f: 
1:156a609:     @Test
1:156a609:     public void testMessageEvictionMemoryUsageVmCursor() throws Exception {
1:3e4fc0a:         setUp(new VMPendingSubscriberMessageStoragePolicy());
1:3e4fc0a:         doTestMessageEvictionMemoryUsage();
1:156a609:     }
1:c7d559f: 
1:3e4fc0a:     @Test
1:3e4fc0a:     public void testMessageEvictionDiscardedAdvisory() throws Exception {
1:3e4fc0a:         setUp(new VMPendingSubscriberMessageStoragePolicy());
1:c7d559f: 
1:3e4fc0a:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:3e4fc0a:         final CountDownLatch consumerRegistered = new CountDownLatch(1);
1:3e4fc0a:         final CountDownLatch gotAdvisory = new CountDownLatch(1);
1:3e4fc0a:         final CountDownLatch advisoryIsGood = new CountDownLatch(1);
1:c7d559f: 
1:3e4fc0a:         executor.execute(new Runnable() {
1:c7d559f:             @Override
1:3e4fc0a:             public void run() {
1:3e4fc0a:                 try {
1:c7d559f:                     ActiveMQTopic discardedAdvisoryDestination =
1:3e4fc0a:                         AdvisorySupport.getMessageDiscardedAdvisoryTopic(destination);
1:c7d559f:                     // use separate session rather than asyncDispatch on consumer session
1:3e4fc0a:                     // as we want consumer session to block
1:3e4fc0a:                     Session advisorySession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3e4fc0a:                     final MessageConsumer consumer = advisorySession.createConsumer(discardedAdvisoryDestination);
1:3e4fc0a:                     consumer.setMessageListener(new MessageListener() {
1:c909e96:                         int advisoriesReceived = 0;
1:c7d559f:                         @Override
1:3e4fc0a:                         public void onMessage(Message message) {
1:3e4fc0a:                             try {
1:3e4fc0a:                                 LOG.info("advisory:" + message);
1:3e4fc0a:                                 ActiveMQMessage activeMQMessage = (ActiveMQMessage) message;
1:3e4fc0a:                                 assertNotNull(activeMQMessage.getStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID));
1:c909e96:                                 assertEquals(++advisoriesReceived, activeMQMessage.getIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT));
1:3e4fc0a:                                 message.acknowledge();
1:3e4fc0a:                                 advisoryIsGood.countDown();
1:3e4fc0a:                             } catch (JMSException e) {
1:3e4fc0a:                                 e.printStackTrace();
1:3e4fc0a:                                 fail(e.toString());
1:3e4fc0a:                             } finally {
1:3e4fc0a:                                 gotAdvisory.countDown();
1:c7d559f:                             }
1:3e4fc0a:                         }
1:3e4fc0a:                     });
1:3e4fc0a:                     consumerRegistered.countDown();
1:3e4fc0a:                     gotAdvisory.await(120, TimeUnit.SECONDS);
1:3e4fc0a:                     consumer.close();
1:3e4fc0a:                     advisorySession.close();
1:3e4fc0a:                 } catch (Exception e) {
1:1b6d397:                     e.printStackTrace();
1:3e4fc0a:                     fail(e.toString());
1:3e4fc0a:                 }
1:3e4fc0a:             }
1:3e4fc0a:         });
1:3e4fc0a:         assertTrue("we have an advisory consumer", consumerRegistered.await(60, TimeUnit.SECONDS));
1:3e4fc0a:         doTestMessageEvictionMemoryUsage();
1:3e4fc0a:         assertTrue("got an advisory for discarded", gotAdvisory.await(0, TimeUnit.SECONDS));
1:3e4fc0a:         assertTrue("advisory is good",advisoryIsGood.await(0, TimeUnit.SECONDS));
1:3e4fc0a:     }
1:c7d559f: 
1:3e4fc0a:     public void doTestMessageEvictionMemoryUsage() throws Exception {
1:c7d559f: 
1:a2af47b:         ExecutorService executor = Executors.newCachedThreadPool();
1:a2af47b:         final CountDownLatch doAck = new CountDownLatch(1);
1:1b6d397:         final CountDownLatch ackDone = new CountDownLatch(1);
1:a2af47b:         final CountDownLatch consumerRegistered = new CountDownLatch(1);
1:a2af47b:         executor.execute(new Runnable() {
1:c7d559f:             @Override
1:a2af47b:             public void run() {
1:a2af47b:                 try {
1:a2af47b:                     final MessageConsumer consumer = session.createConsumer(destination);
1:a2af47b:                     consumer.setMessageListener(new MessageListener() {
1:c7d559f:                         @Override
1:a2af47b:                         public void onMessage(Message message) {
1:a2af47b:                             try {
1:a2af47b:                                 // very slow, only ack once
2:a2af47b:                                 doAck.await(60, TimeUnit.SECONDS);
1:c909e96:                                 LOG.info("acking: " + message.getJMSMessageID());
1:a2af47b:                                 message.acknowledge();
1:1b6d397:                                 ackDone.countDown();
1:a2af47b:                             } catch (Exception e) {
1:c7d559f:                                 e.printStackTrace();
1:a2af47b:                                 fail(e.toString());
1:1b6d397:                             } finally {
1:1b6d397:                                 consumerRegistered.countDown();
1:1b6d397:                                 ackDone.countDown();
1:c7d559f:                             }
1:3e4fc0a:                         }
1:a2af47b:                     });
2:a2af47b:                     consumerRegistered.countDown();
1:1b6d397:                     ackDone.await(60, TimeUnit.SECONDS);
1:a2af47b:                     consumer.close();
1:a2af47b:                 } catch (Exception e) {
1:3e4fc0a:                     e.printStackTrace();
1:a2af47b:                     fail(e.toString());
1:a2af47b:                 }
1:a2af47b:             }
1:a2af47b:         });
1:c7d559f: 
1:a2af47b:         assertTrue("we have a consumer", consumerRegistered.await(10, TimeUnit.SECONDS));
1:c7d559f: 
1:a2af47b:         final AtomicInteger sent = new AtomicInteger(0);
1:a2af47b:         final CountDownLatch sendDone = new CountDownLatch(1);
1:a2af47b:         executor.execute(new Runnable() {
1:c7d559f:             @Override
1:a2af47b:             public void run() {
1:a2af47b:                MessageProducer producer;
1:a2af47b:                try {
1:a2af47b:                    producer = session.createProducer(destination);
1:a2af47b:                    for (int i=0; i< numMessages; i++) {
1:a2af47b:                        producer.send(session.createTextMessage(payload));
1:a2af47b:                        sent.incrementAndGet();
1:a2af47b:                    }
1:a2af47b:                    producer.close();
1:a2af47b:                    sendDone.countDown();
1:a2af47b:                } catch (Exception e) {
1:a2af47b:                    sendDone.countDown();
3:a2af47b:                    e.printStackTrace();
1:a2af47b:                    fail(e.toString());
1:a2af47b:                }
1:a2af47b:             }
1:a2af47b:         });
1:c7d559f: 
1:3e4fc0a:         assertTrue("messages sending done", sendDone.await(180, TimeUnit.SECONDS));
1:a2af47b:         assertEquals("all message were sent", numMessages, sent.get());
1:c7d559f: 
1:a2af47b:         doAck.countDown();
1:a2af47b:         executor.shutdown();
1:a2af47b:         executor.awaitTermination(30, TimeUnit.SECONDS);
1:c7d559f: 
1:156a609:         assertTrue("usage goes to 0 once consumer goes away", Wait.waitFor(new Wait.Condition() {
1:c7d559f:             @Override
1:156a609:             public boolean isSatisified() throws Exception {
1:c7d559f:                 return 0 == TestSupport.getDestination(broker,
1:156a609:                         ActiveMQDestination.transform(destination)).getMemoryUsage().getPercentUsage();
1:156a609:             }
1:156a609:         }));
1:a2af47b:     }
1:3e4fc0a: 
1:156a609:     BrokerService createBroker(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
1:a2af47b:         BrokerService brokerService = new BrokerService();
1:a2af47b:         brokerService.addConnector("tcp://localhost:0");
1:a2af47b:         brokerService.setUseJmx(false);
1:a2af47b:         brokerService.setDeleteAllMessagesOnStartup(true);
1:c7d559f: 
1:a2af47b:         // spooling to disk early so topic memory limit is not reached
1:a2af47b:         brokerService.getSystemUsage().getMemoryUsage().setLimit(500*1024);
1:c7d559f: 
1:a2af47b:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:a2af47b:         final PolicyEntry entry = new PolicyEntry();
1:a2af47b:         entry.setTopic(">");
1:c7d559f: 
1:3e4fc0a:         entry.setAdvisoryForDiscardingMessages(true);
1:c7d559f: 
1:a2af47b:         // so consumer does not get over run while blocked limit the prefetch
1:a2af47b:         entry.setTopicPrefetch(50);
1:c7d559f: 
1:c7d559f: 
1:156a609:         entry.setPendingSubscriberPolicy(pendingSubscriberPolicy);
1:c7d559f: 
1:a2af47b:         // limit the number of outstanding messages, large enough to use the file store
1:156a609:         // or small enough not to blow memory limit
1:156a609:         int pendingMessageLimit = 50;
1:156a609:         if (pendingSubscriberPolicy instanceof FilePendingSubscriberMessageStoragePolicy) {
1:156a609:             pendingMessageLimit = 500;
1:156a609:         }
1:a2af47b:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:156a609:         pendingMessageLimitStrategy.setLimit(pendingMessageLimit);
1:a2af47b:         entry.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1:3e4fc0a: 
1:a2af47b:         // to keep the limit in check and up to date rather than just the first few, evict some
1:a2af47b:         OldestMessageEvictionStrategy messageEvictionStrategy = new OldestMessageEvictionStrategy();
1:1b6d397:         // whether to check expiry before eviction, default limit 1000 is fine as no ttl set in this test
1:1b6d397:         //messageEvictionStrategy.setEvictExpiredMessagesHighWatermark(1000);
1:a2af47b:         entry.setMessageEvictionStrategy(messageEvictionStrategy);
1:c7d559f: 
1:a2af47b:         // let evicted messaged disappear
1:a2af47b:         entry.setDeadLetterStrategy(null);
1:a2af47b:         policyEntries.add(entry);
1:3e4fc0a: 
1:a2af47b:         final PolicyMap policyMap = new PolicyMap();
1:a2af47b:         policyMap.setPolicyEntries(policyEntries);
1:a2af47b:         brokerService.setDestinationPolicy(policyMap);
1:c7d559f: 
1:a2af47b:         return brokerService;
1:a2af47b:     }
1:156a609: 
1:a2af47b:     ConnectionFactory createConnectionFactory() throws Exception {
1:c7d559f:         String url = broker.getTransportConnectors().get(0).getServer().getConnectURI().toString();
1:a2af47b:         ActiveMQConnectionFactory factory =  new ActiveMQConnectionFactory(url);
1:a2af47b:         factory.setWatchTopicAdvisories(false);
1:a2af47b:         return factory;
1:a2af47b:     }
1:a2af47b: 
1:a2af47b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:01cfa77
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:             @Override
1:                     ActiveMQTopic discardedAdvisoryDestination =
1:                     // use separate session rather than asyncDispatch on consumer session
1:                         @Override
/////////////////////////////////////////////////////////////////////////
1:                         }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             @Override
1:                         @Override
/////////////////////////////////////////////////////////////////////////
1:                                 e.printStackTrace();
1:                         }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:             @Override
1:                 return 0 == TestSupport.getDestination(broker,
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         String url = broker.getTransportConnectors().get(0).getServer().getConnectURI().toString();
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(MessageEvictionTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:1b6d397
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch ackDone = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:                                 ackDone.countDown();
1:                                 e.printStackTrace();   
1:                             } finally {
1:                                 consumerRegistered.countDown();
1:                                 ackDone.countDown();
1:                     ackDone.await(60, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         // whether to check expiry before eviction, default limit 1000 is fine as no ttl set in this test
1:         //messageEvictionStrategy.setEvictExpiredMessagesHighWatermark(1000);
commit:c909e96
/////////////////////////////////////////////////////////////////////////
1:                         int advisoriesReceived = 0;
1:                                 assertEquals(++advisoriesReceived, activeMQMessage.getIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT));
/////////////////////////////////////////////////////////////////////////
1:                                 LOG.info("acking: " + message.getJMSMessageID());
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:     private final String destinationName = "verifyEvection";
1:     protected int numMessages = 2000;
/////////////////////////////////////////////////////////////////////////
1:         destination = session.createTopic(destinationName);
/////////////////////////////////////////////////////////////////////////
1:         setUp(new FilePendingSubscriberMessageStoragePolicy());
1:         doTestMessageEvictionMemoryUsage();
1:         setUp(new VMPendingSubscriberMessageStoragePolicy());
1:         doTestMessageEvictionMemoryUsage();
1:     @Test
1:     public void testMessageEvictionDiscardedAdvisory() throws Exception {
1:         setUp(new VMPendingSubscriberMessageStoragePolicy());
1:         
1:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:         final CountDownLatch consumerRegistered = new CountDownLatch(1);
1:         final CountDownLatch gotAdvisory = new CountDownLatch(1);
1:         final CountDownLatch advisoryIsGood = new CountDownLatch(1);
1:         
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                 try {
0:                     ActiveMQTopic discardedAdvisoryDestination = 
1:                         AdvisorySupport.getMessageDiscardedAdvisoryTopic(destination);
0:                     // use separate session rather than asyncDispatch on consumer session 
1:                     // as we want consumer session to block
1:                     Session advisorySession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     final MessageConsumer consumer = advisorySession.createConsumer(discardedAdvisoryDestination);
1:                     consumer.setMessageListener(new MessageListener() {
1:                         public void onMessage(Message message) {
1:                             try {
1:                                 LOG.info("advisory:" + message);
1:                                 ActiveMQMessage activeMQMessage = (ActiveMQMessage) message;
1:                                 assertNotNull(activeMQMessage.getStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID));
0:                                 assertEquals(1, activeMQMessage.getIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT));
1:                                 message.acknowledge();
1:                                 advisoryIsGood.countDown();
1:                             } catch (JMSException e) {
1:                                 e.printStackTrace();
1:                                 fail(e.toString());
1:                             } finally {
1:                                 gotAdvisory.countDown();
1:                             }
1:                         }           
1:                     });
1:                     consumerRegistered.countDown();
1:                     gotAdvisory.await(120, TimeUnit.SECONDS);
1:                     consumer.close();
1:                     advisorySession.close();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                     fail(e.toString());
1:                 }
1:             }
1:         });
1:         assertTrue("we have an advisory consumer", consumerRegistered.await(60, TimeUnit.SECONDS));
1:         doTestMessageEvictionMemoryUsage();
1:         assertTrue("got an advisory for discarded", gotAdvisory.await(0, TimeUnit.SECONDS));
1:         assertTrue("advisory is good",advisoryIsGood.await(0, TimeUnit.SECONDS));
1:     }
1:     
1:     public void doTestMessageEvictionMemoryUsage() throws Exception {
1:         
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("messages sending done", sendDone.await(180, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
1:         entry.setAdvisoryForDiscardingMessages(true);
1:         
/////////////////////////////////////////////////////////////////////////
commit:156a609
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     public void setUp(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
1:         broker = createBroker(pendingSubscriberPolicy);
/////////////////////////////////////////////////////////////////////////
1:     public void testMessageEvictionMemoryUsageFileCursor() throws Exception {
0:         doTestMessageEvictionMemoryUsage(new FilePendingSubscriberMessageStoragePolicy());
1:     }
1:     
1:     @Test
1:     public void testMessageEvictionMemoryUsageVmCursor() throws Exception {
0:         doTestMessageEvictionMemoryUsage(new VMPendingSubscriberMessageStoragePolicy());
1:     }
1:     
0:     public void doTestMessageEvictionMemoryUsage(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
0:         setUp(pendingSubscriberPolicy);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("usage goes to 0 once consumer goes away", Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
0:                 return 0 == TestSupport.getDestination(broker, 
1:                         ActiveMQDestination.transform(destination)).getMemoryUsage().getPercentUsage();
1:             }
1:         }));
1:     BrokerService createBroker(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         
1:         entry.setPendingSubscriberPolicy(pendingSubscriberPolicy);
1:         
1:         // or small enough not to blow memory limit
1:         int pendingMessageLimit = 50;
1:         if (pendingSubscriberPolicy instanceof FilePendingSubscriberMessageStoragePolicy) {
1:             pendingMessageLimit = 500;
1:         }
1:         pendingMessageLimitStrategy.setLimit(pendingMessageLimit);
commit:a2af47b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import static junit.framework.Assert.fail;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.OldestMessageEvictionStrategy;
0: import org.apache.activemq.broker.region.policy.PendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.PrefetchRatePendingMessageLimitStrategy;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.util.ThreadTracker;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MessageEvictionTest {
0:     static final Log LOG = LogFactory.getLog(MessageEvictionTest.class);
1:     private BrokerService broker;
1:     private ConnectionFactory connectionFactory;
1:     Connection connection;
1:     private Session session;
1:     private Topic destination;
0:     protected int numMessages = 4000;
1:     protected String payload = new String(new byte[1024*2]);
1: 
0:     @Before
0:     public void setUp() throws Exception {
0:         broker = createBroker();
1:         broker.start();
1:         connectionFactory = createConnectionFactory();
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         destination = session.createTopic("verifyEvection");
1:     }
1:     
1:     @After
1:     public void tearDown() throws Exception {
0:         ThreadTracker.result();
1:         connection.stop();
1:         broker.stop();
1:     }
1:     
1:     @Test
0:     public void testMessageEvictionMemoryUsage() throws Exception {
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         final CountDownLatch doAck = new CountDownLatch(1);
1:         final CountDownLatch consumerRegistered = new CountDownLatch(1);
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     final MessageConsumer consumer = session.createConsumer(destination);
1:                     consumer.setMessageListener(new MessageListener() {
1:                         public void onMessage(Message message) {
1:                             try {
1:                                 // very slow, only ack once
1:                                 doAck.await(60, TimeUnit.SECONDS);
1:                                 message.acknowledge();
1:                             } catch (Exception e) {
1:                                 e.printStackTrace();
1:                                 consumerRegistered.countDown();
1:                                 fail(e.toString());
1:                             }
1:                         }           
1:                     });
1:                     consumerRegistered.countDown();
1:                     doAck.await(60, TimeUnit.SECONDS);
1:                     consumer.close();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                     fail(e.toString());
1:                 }
1:             }
1:         });
1:         
1:         assertTrue("we have a consumer", consumerRegistered.await(10, TimeUnit.SECONDS));
1:         
1:         final AtomicInteger sent = new AtomicInteger(0);
1:         final CountDownLatch sendDone = new CountDownLatch(1);
1:         executor.execute(new Runnable() {
1:             public void run() {
1:                MessageProducer producer;
1:                try {
1:                    producer = session.createProducer(destination);
1:                    for (int i=0; i< numMessages; i++) {
1:                        producer.send(session.createTextMessage(payload));
1:                        sent.incrementAndGet();
0:                        TimeUnit.MILLISECONDS.sleep(10);
1:                    }
1:                    producer.close();
1:                    sendDone.countDown();
1:                } catch (Exception e) {
1:                    sendDone.countDown();
1:                    e.printStackTrace();
1:                    fail(e.toString());
1:                }
1:             }
1:         });
1:         
0:         assertTrue("messages sending done", sendDone.await(90, TimeUnit.SECONDS));
1:         assertEquals("all message were sent", numMessages, sent.get());
1:         
1:         doAck.countDown();
1:         executor.shutdown();
1:         executor.awaitTermination(30, TimeUnit.SECONDS);
1:         
0:         assertEquals("usage goes to 0", 0,
0:                 TestSupport.getDestination(broker, 
0:                         ActiveMQDestination.transform(destination)).getMemoryUsage().getPercentUsage());
1:         
1:     }
1: 
0:     BrokerService createBroker() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setUseJmx(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         
1:         // spooling to disk early so topic memory limit is not reached
1:         brokerService.getSystemUsage().getMemoryUsage().setLimit(500*1024);
1:         
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setTopic(">");
1:         
1:         // so consumer does not get over run while blocked limit the prefetch
1:         entry.setTopicPrefetch(50);
1:         
1:         // limit the number of outstanding messages, large enough to use the file store
1:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
0:         pendingMessageLimitStrategy.setLimit(500);
1:         entry.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1: 
1:         // to keep the limit in check and up to date rather than just the first few, evict some
1:         OldestMessageEvictionStrategy messageEvictionStrategy = new OldestMessageEvictionStrategy();
0:         messageEvictionStrategy.setEvictExpiredMessagesHighWatermark(100);
1:         entry.setMessageEvictionStrategy(messageEvictionStrategy);
1:         
1:         // let evicted messaged disappear
1:         entry.setDeadLetterStrategy(null);
1:         policyEntries.add(entry);
1: 
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         brokerService.setDestinationPolicy(policyMap);
1:         
0:         brokerService.setAdvisorySupport(false);
1:         
1:         return brokerService;
1:     }
1: 
1:     ConnectionFactory createConnectionFactory() throws Exception {
0:         String url = ((TransportConnector) broker.getTransportConnectors().get(0)).getServer().getConnectURI().toString();
1:         ActiveMQConnectionFactory factory =  new ActiveMQConnectionFactory(url);
1:         factory.setWatchTopicAdvisories(false);
1:         return factory;
1:     }
1: 
1: }
============================================================================