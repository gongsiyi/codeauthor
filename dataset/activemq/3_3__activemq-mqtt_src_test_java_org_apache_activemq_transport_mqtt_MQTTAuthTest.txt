1:fb569e3: /**
1:fb569e3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fb569e3:  * contributor license agreements.  See the NOTICE file distributed with
1:fb569e3:  * this work for additional information regarding copyright ownership.
1:fb569e3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fb569e3:  * (the "License"); you may not use this file except in compliance with
1:fb569e3:  * the License.  You may obtain a copy of the License at
1:fb569e3:  *
1:fb569e3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fb569e3:  *
1:fb569e3:  * Unless required by applicable law or agreed to in writing, software
1:fb569e3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb569e3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb569e3:  * See the License for the specific language governing permissions and
1:fb569e3:  * limitations under the License.
1:fb569e3:  */
1:fb569e3: package org.apache.activemq.transport.mqtt;
1:fb569e3: 
1:fb569e3: import static org.junit.Assert.assertEquals;
1:fb569e3: import static org.junit.Assert.assertFalse;
1:fb569e3: import static org.junit.Assert.assertNotNull;
1:fb569e3: import static org.junit.Assert.assertNull;
1:fb569e3: import static org.junit.Assert.fail;
1:fb569e3: 
1:fb569e3: import java.net.ProtocolException;
1:fb569e3: import java.util.Arrays;
1:fb569e3: import java.util.Collection;
1:619864d: import java.util.List;
1:fb569e3: import java.util.concurrent.TimeUnit;
1:fb569e3: import java.util.concurrent.atomic.AtomicBoolean;
1:619864d: import java.util.concurrent.atomic.AtomicInteger;
1:fb569e3: 
1:619864d: import javax.jms.InvalidClientIDException;
1:619864d: import javax.security.auth.login.CredentialException;
1:619864d: 
1:619864d: import org.apache.activemq.broker.Broker;
1:619864d: import org.apache.activemq.broker.BrokerFilter;
1:619864d: import org.apache.activemq.broker.BrokerPlugin;
1:619864d: import org.apache.activemq.broker.ConnectionContext;
1:619864d: import org.apache.activemq.command.ConnectionInfo;
1:fb569e3: import org.fusesource.mqtt.client.BlockingConnection;
1:fb569e3: import org.fusesource.mqtt.client.MQTT;
1:fb569e3: import org.fusesource.mqtt.client.Message;
1:fb569e3: import org.fusesource.mqtt.client.QoS;
1:fb569e3: import org.fusesource.mqtt.client.Topic;
1:fb569e3: import org.fusesource.mqtt.client.Tracer;
1:fb569e3: import org.fusesource.mqtt.codec.CONNACK;
1:fb569e3: import org.fusesource.mqtt.codec.MQTTFrame;
1:fb569e3: import org.junit.Test;
1:fb569e3: import org.junit.runner.RunWith;
1:fb569e3: import org.junit.runners.Parameterized;
1:fb569e3: import org.junit.runners.Parameterized.Parameters;
1:fb569e3: import org.slf4j.Logger;
1:fb569e3: import org.slf4j.LoggerFactory;
1:fb569e3: 
1:fb569e3: /**
1:fb569e3:  * Tests various use cases that require authentication or authorization over MQTT
1:fb569e3:  */
1:fb569e3: @RunWith(Parameterized.class)
1:145b64a: public class MQTTAuthTest extends MQTTAuthTestSupport {
1:fb569e3: 
1:145b64a:     private static final Logger LOG = LoggerFactory.getLogger(MQTTAuthTest.class);
1:fb569e3: 
1:145b64a:     @Parameters(name="{0}")
1:fb569e3:     public static Collection<Object[]> data() {
1:fb569e3:         return Arrays.asList(new Object[][] {
1:fb569e3:                 {"mqtt", false},
1:fb569e3:                 {"mqtt+ssl", true},
1:7c04ead:                 {"mqtt+nio", false},
1:7c04ead:                 {"mqtt+nio+ssl", true}
1:fb569e3:             });
1:fb569e3:     }
1:fb569e3: 
1:145b64a:     public MQTTAuthTest(String connectorScheme, boolean useSSL) {
1:7c04ead:         super(connectorScheme, useSSL);
1:7c04ead:     }
1:7c04ead: 
1:fb569e3:     @Test(timeout = 60 * 1000)
1:fb569e3:     public void testAnonymousUserConnect() throws Exception {
1:fb569e3:         MQTT mqtt = createMQTTConnection();
1:fb569e3:         mqtt.setCleanSession(true);
1:fb569e3:         mqtt.setUserName((String)null);
1:fb569e3:         mqtt.setPassword((String)null);
2:fb569e3:         final BlockingConnection connection = mqtt.blockingConnection();
1:fb569e3:         connection.connect();
1:fb569e3:         LOG.info("Connected as anonymous client");
1:fb569e3:         connection.disconnect();
1:fb569e3:     }
1:fb569e3: 
1:fb569e3:     @Test(timeout = 60 * 1000)
1:fb569e3:     public void testBadUserNameOrPasswordGetsConnAckWithErrorCode() throws Exception {
1:fb569e3:         MQTT mqttPub = createMQTTConnection("pub", true);
1:fb569e3:         mqttPub.setUserName("foo");
1:fb569e3:         mqttPub.setPassword("bar");
1:fb569e3: 
1:fb569e3:         final AtomicBoolean failed = new AtomicBoolean();
1:fb569e3: 
1:fb569e3:         mqttPub.setTracer(new Tracer() {
1:fb569e3:             @Override
1:fb569e3:             public void onReceive(MQTTFrame frame) {
1:fb569e3:                 LOG.info("Client received: {}", frame);
1:fb569e3:                 if (frame.messageType() == CONNACK.TYPE) {
1:fb569e3:                     CONNACK connAck = new CONNACK();
1:fb569e3:                     try {
1:fb569e3:                         connAck.decode(frame);
1:fb569e3:                         LOG.info("{}", connAck);
1:619864d:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_NOT_AUTHORIZED, connAck.code());
1:fb569e3:                     } catch (ProtocolException e) {
1:fb569e3:                         failed.set(true);
1:fb569e3:                         fail("Error decoding publish " + e.getMessage());
1:fb569e3:                     } catch (Throwable err) {
1:fb569e3:                         failed.set(true);
1:fb569e3:                         throw err;
1:fb569e3:                     }
1:fb569e3:                 }
1:fb569e3:             }
1:fb569e3: 
1:fb569e3:             @Override
1:fb569e3:             public void onSend(MQTTFrame frame) {
1:fb569e3:                 LOG.info("Client sent: {}", frame);
1:fb569e3:             }
1:fb569e3:         });
1:fb569e3: 
1:fb569e3:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:fb569e3:         try {
1:fb569e3:             connectionPub.connect();
1:fb569e3:             fail("Should not be able to connect.");
1:fb569e3:         } catch (Exception e) {
1:fb569e3:         }
1:fb569e3: 
1:fb569e3:         assertFalse("connection should have failed.", failed.get());
1:fb569e3:     }
1:fb569e3: 
1:fb569e3:     @Test(timeout = 60 * 1000)
1:fb569e3:     public void testFailedSubscription() throws Exception {
1:fb569e3:         final String ANONYMOUS = "anonymous";
1:fb569e3: 
1:fb569e3:         MQTT mqtt = createMQTTConnection();
1:fb569e3:         mqtt.setClientId("foo");
1:fb569e3:         mqtt.setKeepAlive((short) 2);
1:a4fbe70:         mqtt.setVersion("3.1.1");
1:fb569e3: 
1:a4fbe70:         BlockingConnection connection = mqtt.blockingConnection();
1:fb569e3:         connection.connect();
1:fb569e3: 
1:fb569e3:         final String NAMED = "named";
1:fb569e3:         byte[] qos = connection.subscribe(new Topic[] { new Topic(NAMED, QoS.AT_MOST_ONCE), new Topic(ANONYMOUS, QoS.EXACTLY_ONCE) });
1:fb569e3:         assertEquals((byte) 0x80, qos[0]);
1:fb569e3:         assertEquals((byte) QoS.EXACTLY_ONCE.ordinal(), qos[1]);
1:fb569e3: 
1:fb569e3:         // validate the subscription by sending a retained message
1:fb569e3:         connection.publish(ANONYMOUS, ANONYMOUS.getBytes(), QoS.AT_MOST_ONCE, true);
1:fb569e3:         Message msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:fb569e3:         assertNotNull(msg);
1:fb569e3:         assertEquals(ANONYMOUS, new String(msg.getPayload()));
1:fb569e3:         msg.ack();
1:fb569e3: 
1:fb569e3:         connection.unsubscribe(new String[] { ANONYMOUS });
1:fb569e3:         qos = connection.subscribe(new Topic[] { new Topic(ANONYMOUS, QoS.AT_LEAST_ONCE) });
1:fb569e3:         assertEquals((byte) QoS.AT_LEAST_ONCE.ordinal(), qos[0]);
1:fb569e3: 
1:fb569e3:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:fb569e3:         assertNotNull(msg);
1:fb569e3:         assertEquals(ANONYMOUS, new String(msg.getPayload()));
1:fb569e3:         msg.ack();
1:fb569e3: 
1:a4fbe70:         //delete retained message
1:a4fbe70:         connection.publish(ANONYMOUS, "".getBytes(), QoS.AT_MOST_ONCE, true);
1:fb569e3: 
1:f5283a9:         // that delete retained message gets dispatched! Wonder if that is expected?
1:f5283a9:         // guess it is simpler if it is - it shows up on the assertNull:196 below on occasion
1:f5283a9:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:f5283a9:         assertNotNull(msg);
1:f5283a9:         assertEquals(ANONYMOUS, new String(msg.getTopic()));
1:f5283a9:         msg.ack();
1:f5283a9: 
1:fb569e3:         connection.disconnect();
1:a4fbe70: 
1:a4fbe70:         // Test 3.1 functionality
1:a4fbe70:         mqtt.setVersion("3.1");
1:a4fbe70:         connection = mqtt.blockingConnection();
1:a4fbe70:         connection.connect();
1:a4fbe70:         qos = connection.subscribe(new Topic[] { new Topic(NAMED, QoS.AT_MOST_ONCE) });
1:a4fbe70:         assertEquals(QoS.AT_MOST_ONCE.ordinal(), qos[0]);
1:a4fbe70: 
1:a4fbe70:         MQTT mqttPub = createMQTTConnection("pub", true);
1:a4fbe70:         mqttPub.setUserName("admin");
1:a4fbe70:         mqttPub.setPassword("admin");
1:a4fbe70: 
1:a4fbe70:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:a4fbe70:         connectionPub.connect();
1:a4fbe70:         connectionPub.publish(NAMED, NAMED.getBytes(), QoS.AT_MOST_ONCE, true);
1:a4fbe70: 
1:a4fbe70:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:f5283a9:         LOG.info("got msg: " + msg + ", " + (msg != null ? new String(msg.getTopic()) : ""));
1:a4fbe70:         assertNull(msg);
1:fb569e3:     }
1:789eb9a: 
1:789eb9a:     @Test(timeout = 30 * 1000)
1:789eb9a:     public void testPublishWhenNotAuthorizedDoesNotStall() throws Exception {
1:789eb9a: 
1:789eb9a:         getProxyToBroker().addTopic("USERS.foo");
1:789eb9a: 
1:789eb9a:         MQTT mqtt = null;
1:789eb9a:         BlockingConnection connection = null;
1:789eb9a: 
1:789eb9a:         // Test 3.1 functionality
1:789eb9a:         mqtt = createMQTTConnection("pub", true);
1:789eb9a:         mqtt.setUserName("guest");
1:789eb9a:         mqtt.setPassword("password");
1:789eb9a:         mqtt.setVersion("3.1");
1:789eb9a: 
1:789eb9a:         connection = mqtt.blockingConnection();
1:789eb9a:         connection.connect();
1:789eb9a:         connection.publish("USERS.foo", "test-AT_MOST_ONCE".getBytes(), QoS.AT_MOST_ONCE, true);
1:789eb9a:         connection.publish("USERS.foo", "test-AT_LEAST_ONCE".getBytes(), QoS.AT_LEAST_ONCE, true);
1:789eb9a:         connection.publish("USERS.foo", "test-EXACTLY_ONCE".getBytes(), QoS.EXACTLY_ONCE, true);
1:789eb9a:         connection.disconnect();
1:789eb9a: 
1:789eb9a:         assertEquals(0, getProxyToTopic("USERS.foo").getEnqueueCount());
1:789eb9a: 
1:789eb9a:         // Test 3.1.1 functionality
1:789eb9a:         mqtt = createMQTTConnection("pub", true);
1:789eb9a:         mqtt.setUserName("guest");
1:789eb9a:         mqtt.setPassword("password");
1:789eb9a:         mqtt.setVersion("3.1.1");
1:789eb9a: 
1:789eb9a:         connection = mqtt.blockingConnection();
1:789eb9a:         connection.connect();
1:789eb9a:         connection.publish("USERS.foo", "test-AT_MOST_ONCE".getBytes(), QoS.AT_MOST_ONCE, true);
1:789eb9a:         connection.publish("USERS.foo", "test-AT_LEAST_ONCE".getBytes(), QoS.AT_LEAST_ONCE, true);
1:789eb9a:         connection.publish("USERS.foo", "test-EXACTLY_ONCE".getBytes(), QoS.EXACTLY_ONCE, true);
1:789eb9a:         connection.disconnect();
1:789eb9a: 
1:789eb9a:         assertEquals(0, getProxyToTopic("USERS.foo").getEnqueueCount());
1:789eb9a:     }
1:a4fbe70: 
1:fb569e3:     @Test(timeout = 60 * 1000)
1:fb569e3:     public void testWildcardRetainedSubscription() throws Exception {
1:fb569e3:         MQTT mqttPub = createMQTTConnection("pub", true);
1:fb569e3:         mqttPub.setUserName("admin");
1:fb569e3:         mqttPub.setPassword("admin");
1:fb569e3: 
1:fb569e3:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:fb569e3:         connectionPub.connect();
1:fb569e3:         connectionPub.publish("one", "test".getBytes(), QoS.AT_LEAST_ONCE, true);
1:fb569e3: 
1:fb569e3:         MQTT mqttSub = createMQTTConnection("sub", true);
1:fb569e3:         mqttSub.setUserName("user");
1:fb569e3:         mqttSub.setPassword("password");
1:fb569e3:         BlockingConnection connectionSub = mqttSub.blockingConnection();
1:fb569e3:         connectionSub.connect();
1:fb569e3:         connectionSub.subscribe(new Topic[]{new Topic("#", QoS.AT_LEAST_ONCE)});
1:fb569e3:         Message msg = connectionSub.receive(1, TimeUnit.SECONDS);
1:fb569e3:         assertNull("Shouldn't receive the message", msg);
1:fb569e3:     }
1:619864d: 
1:619864d:     @Test(timeout = 60 * 1000)
1:619864d:     public void testInvalidClientIdGetCorrectErrorCode() throws Exception {
1:619864d:         MQTT mqttPub = createMQTTConnection("invalid", true);
1:619864d: 
1:619864d:         final AtomicInteger errorCode = new AtomicInteger();
1:619864d: 
1:619864d:         mqttPub.setTracer(new Tracer() {
1:619864d:             @Override
1:619864d:             public void onReceive(MQTTFrame frame) {
1:619864d:                 LOG.info("Client received: {}", frame);
1:619864d:                 if (frame.messageType() == CONNACK.TYPE) {
1:619864d:                     CONNACK connAck = new CONNACK();
1:619864d:                     try {
1:619864d:                         connAck.decode(frame);
1:619864d:                         LOG.info("{}", connAck);
1:619864d:                         errorCode.set(connAck.code().ordinal());
1:619864d:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_IDENTIFIER_REJECTED, connAck.code());
1:619864d:                     } catch (ProtocolException e) {
1:619864d:                         fail("Error decoding publish " + e.getMessage());
1:619864d:                     }
1:619864d:                 }
1:619864d:             }
1:619864d: 
1:619864d:             @Override
1:619864d:             public void onSend(MQTTFrame frame) {
1:619864d:                 LOG.info("Client sent: {}", frame);
1:619864d:             }
1:619864d:         });
1:619864d: 
1:619864d:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:619864d:         try {
1:619864d:             connectionPub.connect();
1:619864d:             fail("Should not be able to connect.");
1:619864d:         } catch (Exception e) {
1:619864d:         }
1:619864d: 
1:619864d:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_IDENTIFIER_REJECTED.ordinal(), errorCode.get());
1:619864d:     }
1:619864d: 
1:619864d:     @Test(timeout = 60 * 1000)
1:619864d:     public void testBadCredentialExceptionGetsCorrectErrorCode() throws Exception {
1:619864d:         MQTT mqttPub = createMQTTConnection("bad-credential", true);
1:619864d:         mqttPub.setUserName("admin");
1:619864d:         mqttPub.setPassword("admin");
1:619864d: 
1:619864d:         final AtomicInteger errorCode = new AtomicInteger();
1:619864d: 
1:619864d:         mqttPub.setTracer(new Tracer() {
1:619864d:             @Override
1:619864d:             public void onReceive(MQTTFrame frame) {
1:619864d:                 LOG.info("Client received: {}", frame);
1:619864d:                 if (frame.messageType() == CONNACK.TYPE) {
1:619864d:                     CONNACK connAck = new CONNACK();
1:619864d:                     try {
1:619864d:                         connAck.decode(frame);
1:619864d:                         LOG.info("{}", connAck);
1:619864d:                         errorCode.set(connAck.code().ordinal());
1:619864d:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD, connAck.code());
1:619864d:                     } catch (ProtocolException e) {
1:619864d:                         fail("Error decoding publish " + e.getMessage());
1:619864d:                     }
1:619864d:                 }
1:619864d:             }
1:619864d: 
1:619864d:             @Override
1:619864d:             public void onSend(MQTTFrame frame) {
1:619864d:                 LOG.info("Client sent: {}", frame);
1:619864d:             }
1:619864d:         });
1:619864d: 
1:619864d:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:619864d:         try {
1:619864d:             connectionPub.connect();
1:619864d:             fail("Should not be able to connect.");
1:619864d:         } catch (Exception e) {
1:619864d:         }
1:619864d: 
1:619864d:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD.ordinal(), errorCode.get());
1:619864d:     }
1:619864d: 
1:619864d:     @Override
1:619864d:     protected void createPlugins(List<BrokerPlugin> plugins) throws Exception {
1:619864d:         BrokerPlugin failOnSpecificConditionsPlugin = new BrokerPlugin() {
1:619864d:             @Override
1:619864d:             public Broker installPlugin(Broker broker) throws Exception {
1:619864d:                 return new BrokerFilter(broker) {
1:619864d:                     @Override
1:619864d:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:619864d:                         String clientId = info.getClientId();
1:619864d:                         if (clientId != null && !clientId.isEmpty()) {
1:619864d:                             if (clientId.equalsIgnoreCase("invalid")) {
1:619864d:                                 LOG.info("Client ID was invalid");
1:619864d:                                 throw new InvalidClientIDException("Bad client Id");
1:619864d:                             } else if (clientId.equalsIgnoreCase("bad-credential")) {
1:619864d:                                 LOG.info("User Name was invalid");
1:619864d:                                 throw new CredentialException("Unknwon User Name.");
1:619864d:                             }
1:619864d:                         }
1:619864d:                     }
1:619864d:                 };
1:619864d:             }
1:619864d:         };
1:619864d: 
1:619864d:         plugins.add(failOnSpecificConditionsPlugin);
1:619864d:     }
1:fb569e3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:789eb9a
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30 * 1000)
1:     public void testPublishWhenNotAuthorizedDoesNotStall() throws Exception {
1: 
1:         getProxyToBroker().addTopic("USERS.foo");
1: 
1:         MQTT mqtt = null;
1:         BlockingConnection connection = null;
1: 
1:         // Test 3.1 functionality
1:         mqtt = createMQTTConnection("pub", true);
1:         mqtt.setUserName("guest");
1:         mqtt.setPassword("password");
1:         mqtt.setVersion("3.1");
1: 
1:         connection = mqtt.blockingConnection();
1:         connection.connect();
1:         connection.publish("USERS.foo", "test-AT_MOST_ONCE".getBytes(), QoS.AT_MOST_ONCE, true);
1:         connection.publish("USERS.foo", "test-AT_LEAST_ONCE".getBytes(), QoS.AT_LEAST_ONCE, true);
1:         connection.publish("USERS.foo", "test-EXACTLY_ONCE".getBytes(), QoS.EXACTLY_ONCE, true);
1:         connection.disconnect();
1: 
1:         assertEquals(0, getProxyToTopic("USERS.foo").getEnqueueCount());
1: 
1:         // Test 3.1.1 functionality
1:         mqtt = createMQTTConnection("pub", true);
1:         mqtt.setUserName("guest");
1:         mqtt.setPassword("password");
1:         mqtt.setVersion("3.1.1");
1: 
1:         connection = mqtt.blockingConnection();
1:         connection.connect();
1:         connection.publish("USERS.foo", "test-AT_MOST_ONCE".getBytes(), QoS.AT_MOST_ONCE, true);
1:         connection.publish("USERS.foo", "test-AT_LEAST_ONCE".getBytes(), QoS.AT_LEAST_ONCE, true);
1:         connection.publish("USERS.foo", "test-EXACTLY_ONCE".getBytes(), QoS.EXACTLY_ONCE, true);
1:         connection.disconnect();
1: 
1:         assertEquals(0, getProxyToTopic("USERS.foo").getEnqueueCount());
1:     }
1: 
commit:145b64a
/////////////////////////////////////////////////////////////////////////
1: public class MQTTAuthTest extends MQTTAuthTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTAuthTest.class);
1:     @Parameters(name="{0}")
/////////////////////////////////////////////////////////////////////////
1:     public MQTTAuthTest(String connectorScheme, boolean useSSL) {
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1:                 {"mqtt+nio", false},
1:                 {"mqtt+nio+ssl", true}
0:     public MQTTAuthTests(String connectorScheme, boolean useSSL) {
1:         super(connectorScheme, useSSL);
1:     }
1: 
commit:619864d
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.InvalidClientIDException;
1: import javax.security.auth.login.CredentialException;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
/////////////////////////////////////////////////////////////////////////
1:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_NOT_AUTHORIZED, connAck.code());
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testInvalidClientIdGetCorrectErrorCode() throws Exception {
1:         MQTT mqttPub = createMQTTConnection("invalid", true);
1: 
1:         final AtomicInteger errorCode = new AtomicInteger();
1: 
1:         mqttPub.setTracer(new Tracer() {
1:             @Override
1:             public void onReceive(MQTTFrame frame) {
1:                 LOG.info("Client received: {}", frame);
1:                 if (frame.messageType() == CONNACK.TYPE) {
1:                     CONNACK connAck = new CONNACK();
1:                     try {
1:                         connAck.decode(frame);
1:                         LOG.info("{}", connAck);
1:                         errorCode.set(connAck.code().ordinal());
1:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_IDENTIFIER_REJECTED, connAck.code());
1:                     } catch (ProtocolException e) {
1:                         fail("Error decoding publish " + e.getMessage());
1:                     }
1:                 }
1:             }
1: 
1:             @Override
1:             public void onSend(MQTTFrame frame) {
1:                 LOG.info("Client sent: {}", frame);
1:             }
1:         });
1: 
1:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:         try {
1:             connectionPub.connect();
1:             fail("Should not be able to connect.");
1:         } catch (Exception e) {
1:         }
1: 
1:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_IDENTIFIER_REJECTED.ordinal(), errorCode.get());
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testBadCredentialExceptionGetsCorrectErrorCode() throws Exception {
1:         MQTT mqttPub = createMQTTConnection("bad-credential", true);
1:         mqttPub.setUserName("admin");
1:         mqttPub.setPassword("admin");
1: 
1:         final AtomicInteger errorCode = new AtomicInteger();
1: 
1:         mqttPub.setTracer(new Tracer() {
1:             @Override
1:             public void onReceive(MQTTFrame frame) {
1:                 LOG.info("Client received: {}", frame);
1:                 if (frame.messageType() == CONNACK.TYPE) {
1:                     CONNACK connAck = new CONNACK();
1:                     try {
1:                         connAck.decode(frame);
1:                         LOG.info("{}", connAck);
1:                         errorCode.set(connAck.code().ordinal());
1:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD, connAck.code());
1:                     } catch (ProtocolException e) {
1:                         fail("Error decoding publish " + e.getMessage());
1:                     }
1:                 }
1:             }
1: 
1:             @Override
1:             public void onSend(MQTTFrame frame) {
1:                 LOG.info("Client sent: {}", frame);
1:             }
1:         });
1: 
1:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:         try {
1:             connectionPub.connect();
1:             fail("Should not be able to connect.");
1:         } catch (Exception e) {
1:         }
1: 
1:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD.ordinal(), errorCode.get());
1:     }
1: 
1:     @Override
1:     protected void createPlugins(List<BrokerPlugin> plugins) throws Exception {
1:         BrokerPlugin failOnSpecificConditionsPlugin = new BrokerPlugin() {
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1:                     @Override
1:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:                         String clientId = info.getClientId();
1:                         if (clientId != null && !clientId.isEmpty()) {
1:                             if (clientId.equalsIgnoreCase("invalid")) {
1:                                 LOG.info("Client ID was invalid");
1:                                 throw new InvalidClientIDException("Bad client Id");
1:                             } else if (clientId.equalsIgnoreCase("bad-credential")) {
1:                                 LOG.info("User Name was invalid");
1:                                 throw new CredentialException("Unknwon User Name.");
1:                             }
1:                         }
1:                     }
1:                 };
1:             }
1:         };
1: 
1:         plugins.add(failOnSpecificConditionsPlugin);
1:     }
commit:fb569e3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.net.ProtocolException;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.Message;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import org.fusesource.mqtt.client.Tracer;
1: import org.fusesource.mqtt.codec.CONNACK;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests various use cases that require authentication or authorization over MQTT
1:  */
1: @RunWith(Parameterized.class)
0: public class MQTTAuthTests extends MQTTAuthTestSupport {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(MQTTAuthTests.class);
1: 
0:     @Parameters(name= "{index}: scheme({0})")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"mqtt", false},
1:                 {"mqtt+ssl", true},
0:                 {"mqtt+nio", false}
0:                 // TODO - Fails {"mqtt+nio+ssl", true}
1:             });
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testAnonymousUserConnect() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setCleanSession(true);
1:         mqtt.setUserName((String)null);
1:         mqtt.setPassword((String)null);
1:         final BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1:         LOG.info("Connected as anonymous client");
1:         connection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testBadUserNameOrPasswordGetsConnAckWithErrorCode() throws Exception {
1:         MQTT mqttPub = createMQTTConnection("pub", true);
1:         mqttPub.setUserName("foo");
1:         mqttPub.setPassword("bar");
1: 
1:         final AtomicBoolean failed = new AtomicBoolean();
1: 
1:         mqttPub.setTracer(new Tracer() {
1:             @Override
1:             public void onReceive(MQTTFrame frame) {
1:                 LOG.info("Client received: {}", frame);
1:                 if (frame.messageType() == CONNACK.TYPE) {
1:                     CONNACK connAck = new CONNACK();
1:                     try {
1:                         connAck.decode(frame);
1:                         LOG.info("{}", connAck);
0:                         assertEquals(CONNACK.Code.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD, connAck.code());
1:                     } catch (ProtocolException e) {
1:                         failed.set(true);
1:                         fail("Error decoding publish " + e.getMessage());
1:                     } catch (Throwable err) {
1:                         failed.set(true);
1:                         throw err;
1:                     }
1:                 }
1:             }
1: 
1:             @Override
1:             public void onSend(MQTTFrame frame) {
1:                 LOG.info("Client sent: {}", frame);
1:             }
1:         });
1: 
1:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:         try {
1:             connectionPub.connect();
1:             fail("Should not be able to connect.");
1:         } catch (Exception e) {
1:         }
1: 
1:         assertFalse("connection should have failed.", failed.get());
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testFailedSubscription() throws Exception {
1:         final String ANONYMOUS = "anonymous";
1: 
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("foo");
1:         mqtt.setKeepAlive((short) 2);
1: 
1:         final BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1: 
1:         final String NAMED = "named";
1:         byte[] qos = connection.subscribe(new Topic[] { new Topic(NAMED, QoS.AT_MOST_ONCE), new Topic(ANONYMOUS, QoS.EXACTLY_ONCE) });
1:         assertEquals((byte) 0x80, qos[0]);
1:         assertEquals((byte) QoS.EXACTLY_ONCE.ordinal(), qos[1]);
1: 
1:         // validate the subscription by sending a retained message
1:         connection.publish(ANONYMOUS, ANONYMOUS.getBytes(), QoS.AT_MOST_ONCE, true);
1:         Message msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:         assertNotNull(msg);
1:         assertEquals(ANONYMOUS, new String(msg.getPayload()));
1:         msg.ack();
1: 
1:         connection.unsubscribe(new String[] { ANONYMOUS });
1:         qos = connection.subscribe(new Topic[] { new Topic(ANONYMOUS, QoS.AT_LEAST_ONCE) });
1:         assertEquals((byte) QoS.AT_LEAST_ONCE.ordinal(), qos[0]);
1: 
1:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:         assertNotNull(msg);
1:         assertEquals(ANONYMOUS, new String(msg.getPayload()));
1:         msg.ack();
1: 
1:         connection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testWildcardRetainedSubscription() throws Exception {
1:         MQTT mqttPub = createMQTTConnection("pub", true);
1:         mqttPub.setUserName("admin");
1:         mqttPub.setPassword("admin");
1: 
1:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:         connectionPub.connect();
1:         connectionPub.publish("one", "test".getBytes(), QoS.AT_LEAST_ONCE, true);
1: 
1:         MQTT mqttSub = createMQTTConnection("sub", true);
1:         mqttSub.setUserName("user");
1:         mqttSub.setPassword("password");
1:         BlockingConnection connectionSub = mqttSub.blockingConnection();
1:         connectionSub.connect();
1:         connectionSub.subscribe(new Topic[]{new Topic("#", QoS.AT_LEAST_ONCE)});
1:         Message msg = connectionSub.receive(1, TimeUnit.SECONDS);
1:         assertNull("Shouldn't receive the message", msg);
1:     }
1: }
author:gtully
-------------------------------------------------------------------------------
commit:f5283a9
/////////////////////////////////////////////////////////////////////////
1:         // that delete retained message gets dispatched! Wonder if that is expected?
1:         // guess it is simpler if it is - it shows up on the assertNull:196 below on occasion
1:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:         assertNotNull(msg);
1:         assertEquals(ANONYMOUS, new String(msg.getTopic()));
1:         msg.ack();
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("got msg: " + msg + ", " + (msg != null ? new String(msg.getTopic()) : ""));
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a4fbe70
/////////////////////////////////////////////////////////////////////////
1:         mqtt.setVersion("3.1.1");
1:         BlockingConnection connection = mqtt.blockingConnection();
/////////////////////////////////////////////////////////////////////////
1:         //delete retained message
1:         connection.publish(ANONYMOUS, "".getBytes(), QoS.AT_MOST_ONCE, true);
1: 
1: 
1:         // Test 3.1 functionality
1:         mqtt.setVersion("3.1");
1:         connection = mqtt.blockingConnection();
1:         connection.connect();
1:         qos = connection.subscribe(new Topic[] { new Topic(NAMED, QoS.AT_MOST_ONCE) });
1:         assertEquals(QoS.AT_MOST_ONCE.ordinal(), qos[0]);
1: 
1:         MQTT mqttPub = createMQTTConnection("pub", true);
1:         mqttPub.setUserName("admin");
1:         mqttPub.setPassword("admin");
1: 
1:         BlockingConnection connectionPub = mqttPub.blockingConnection();
1:         connectionPub.connect();
1:         connectionPub.publish(NAMED, NAMED.getBytes(), QoS.AT_MOST_ONCE, true);
1: 
1:         msg = connection.receive(1000, TimeUnit.MILLISECONDS);
1:         assertNull(msg);
============================================================================