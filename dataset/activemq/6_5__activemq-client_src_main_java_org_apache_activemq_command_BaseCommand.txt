1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
6:d29ca2a: 
1:1f01c94: import java.util.Map;
1:25c99a6: 
1:013f372: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:25c99a6:  *
1:d29ca2a:  * @openwire:marshaller
1:25c99a6:  *
1:d29ca2a:  */
1:fc00993: public abstract class BaseCommand implements Command {
1:d29ca2a: 
1:8704338:     protected int commandId;
1:d29ca2a:     protected boolean responseRequired;
1:25c99a6: 
1:8704338:     private transient Endpoint from;
1:8704338:     private transient Endpoint to;
1:25c99a6: 
1:d29ca2a:     public void copy(BaseCommand copy) {
1:d29ca2a:         copy.commandId = commandId;
1:d29ca2a:         copy.responseRequired = responseRequired;
1:25c99a6:     }
1:d29ca2a: 
1:8704338:     /**
1:d29ca2a:      * @openwire:property version=1
1:8704338:      */
1:25c99a6:     @Override
1:8704338:     public int getCommandId() {
1:d29ca2a:         return commandId;
2:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:8704338:     public void setCommandId(int commandId) {
1:d29ca2a:         this.commandId = commandId;
1:d29ca2a:     }
1:d29ca2a: 
1:8704338:     /**
1:d29ca2a:      * @openwire:property version=1
1:8704338:      */
1:25c99a6:     @Override
1:d29ca2a:     public boolean isResponseRequired() {
1:d29ca2a:         return responseRequired;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public void setResponseRequired(boolean responseRequired) {
1:d29ca2a:         this.responseRequired = responseRequired;
1:d29ca2a:     }
1:d29ca2a: 
1:f392884:     @Override
1:d29ca2a:     public String toString() {
1:1f01c94:         return toString(null);
1:d29ca2a:     }
1:25c99a6: 
1:25c99a6:     public String toString(Map<String, Object> overrideFields) {
1:25c99a6:         return IntrospectionSupport.toString(this, BaseCommand.class, overrideFields);
1:d29ca2a:     }
1:25c99a6: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isWireFormatInfo() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isBrokerInfo() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isResponse() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isMessageDispatch() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isMessage() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isMarshallAware() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isMessageAck() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:6ce83ac:     public boolean isMessageDispatchNotification() {
1:5a429d9:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:6ce83ac:     public boolean isShutdownInfo() {
1:4098942:         return false;
1:d29ca2a:     }
1:25c99a6: 
1:25c99a6:     @Override
1:f392884:     public boolean isConnectionControl() {
1:f392884:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:25c99a6:     public boolean isConsumerControl() {
1:25c99a6:         return false;
1:25c99a6:     }
1:25c99a6: 
1:d29ca2a:     /**
1:8704338:      * The endpoint within the transport where this message came from.
1:d29ca2a:      */
1:25c99a6:     @Override
1:8704338:     public Endpoint getFrom() {
1:8704338:         return from;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:8704338:     public void setFrom(Endpoint from) {
1:8704338:         this.from = from;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:25c99a6:      * The endpoint within the transport where this message is going to - null
1:25c99a6:      * means all endpoints.
1:d29ca2a:      */
1:25c99a6:     @Override
1:8704338:     public Endpoint getTo() {
1:8704338:         return to;
1:d29ca2a:     }
1:d29ca2a: 
1:25c99a6:     @Override
1:8704338:     public void setTo(Endpoint to) {
1:8704338:         this.to = to;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
1:  *
1: 
1: 
1:     }
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString(Map<String, Object> overrideFields) {
1:         return IntrospectionSupport.toString(this, BaseCommand.class, overrideFields);
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1:     public boolean isConsumerControl() {
1:         return false;
1:     }
1: 
1:     @Override
1:     @Override
1:      * The endpoint within the transport where this message is going to - null
1:      * means all endpoints.
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class BaseCommand implements Command {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
0: abstract public class BaseCommand implements Command {
commit:013f372
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
0:         return IntrospectionSupport.toString(this, BaseCommand.class);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import java.lang.reflect.Field;
0: import java.lang.reflect.Modifier;
0: import java.util.Arrays;
0: import java.util.LinkedHashMap;
1: 
1: /**
1:  * 
1:  * @openwire:marshaller
0:  * @version $Revision: 1.11 $
1:  */
0: abstract public class BaseCommand implements Command {
1: 
0:     protected short commandId;
1:     protected boolean responseRequired;
1:     
1:     public void copy(BaseCommand copy) {
1:         copy.commandId = commandId;
1:         copy.responseRequired = responseRequired;
1:     }    
1: 
1:     public boolean isWireFormatInfo() {
1:         return false;
1:     }
1: 
1:     public boolean isBrokerInfo() {
1:         return false;
1:     }
1: 
1:     public boolean isResponse() {
1:         return false;
1:     }
1:     
1:     public boolean isMessageDispatch() {
1:         return false;
1:     }
1:     
1:     public boolean isMessage() {
1:         return false;
1:     }
1:     
1:     public boolean isMarshallAware() {
1:         return false;
1:     }
1:     
1:     public boolean isMessageAck() {
1:         return false;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public short getCommandId() {
1:         return commandId;
1:     }
1: 
0:     public void setCommandId(short commandId) {
1:         this.commandId = commandId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public boolean isResponseRequired() {
1:         return responseRequired;
1:     }
1: 
1:     public void setResponseRequired(boolean responseRequired) {
1:         this.responseRequired = responseRequired;
1:     }
1: 
1:     public String toString() {
0:         LinkedHashMap map = new LinkedHashMap();
0:         addFields(map, getClass());
0:         return simpleName(getClass())+" "+map;
1:     }
1: 
0:     public static String simpleName(Class clazz) {
0:         String name = clazz.getName();
0:         int p = name.lastIndexOf(".");
0:         if( p >= 0 ) {
0:             name = name.substring(p+1);
1:         }
0:         return name;
1:     }
1:     
1: 
0:     private void addFields(LinkedHashMap map, Class clazz) {
1:         
0:         if( clazz!=BaseCommand.class ) 
0:             addFields( map, clazz.getSuperclass() );
1:         
0:         Field[] fields = clazz.getDeclaredFields();
0:         for (int i = 0; i < fields.length; i++) {
0:             Field field = fields[i];
0:             if( Modifier.isStatic(field.getModifiers()) || 
0:                 Modifier.isTransient(field.getModifiers()) ||
0:                 Modifier.isPrivate(field.getModifiers())  ) {
0:                 continue;
1:             }
1:             
0:             try {
0:                 Object o = field.get(this);
0:                 if( o!=null && o.getClass().isArray() ) {
0:                     try {
0:                         o = Arrays.asList((Object[]) o);
0:                     } catch (Throwable e) {
1:                     }
1:                 }
0:                 map.put(field.getName(), o);
0:             } catch (Throwable e) {
0:                 e.printStackTrace();
1:             }
1:         }
1:         
1:     }
1: 
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isConnectionControl() {
1:         return false;
0:     }
commit:5a429d9
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isShutdownInfo(){
1:         return false;
0:     }
commit:4098942
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isMessageDispatchNotification(){
1:         return false;
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f01c94
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0: 
/////////////////////////////////////////////////////////////////////////
1:         return toString(null);
0:     }
0:     
0:     public String toString(Map<String, Object>overrideFields) {
0:     	return IntrospectionSupport.toString(this, BaseCommand.class, overrideFields);
author:James Strachan
-------------------------------------------------------------------------------
commit:8704338
/////////////////////////////////////////////////////////////////////////
1:     protected int commandId;
1:     private transient Endpoint from;
1:     private transient Endpoint to;
0:     
/////////////////////////////////////////////////////////////////////////
1:     public int getCommandId() {
1:     public void setCommandId(int commandId) {
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * The endpoint within the transport where this message came from.
1:      */
1:     public Endpoint getFrom() {
1:         return from;
0:     }
0: 
1:     public void setFrom(Endpoint from) {
1:         this.from = from;
0:     }
0: 
1:     /**
0:      * The endpoint within the transport where this message is going to - null means all endpoints.
1:      */
1:     public Endpoint getTo() {
1:         return to;
0:     }
0: 
1:     public void setTo(Endpoint to) {
1:         this.to = to;
0:     }
0:     
0:     
commit:6ce83ac
/////////////////////////////////////////////////////////////////////////
0: 
0: abstract public class BaseCommand extends DataStructureSupport implements Command {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isWireFormatInfo() {
0:         return false;
0:     }
0:     public boolean isBrokerInfo() {
0:         return false;
0:     }
0: 
0:     public boolean isResponse() {
0:         return false;
0:     }
0: 
0:     public boolean isMessageDispatch() {
0:         return false;
0:     }
0: 
0:     public boolean isMessage() {
0:         return false;
0:     }
0: 
0:     public boolean isMarshallAware() {
0:         return false;
0:     }
0: 
0:     public boolean isMessageAck() {
0:         return false;
0:     }
0: 
1:     public boolean isMessageDispatchNotification() {
0:         return false;
0:     }
0: 
1:     public boolean isShutdownInfo() {
0:         return false;
0:     }
============================================================================