1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
5:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.advisory.AdvisorySupport;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:933eb2f: import org.apache.activemq.command.ActiveMQTempDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.DataStructure;
1:d29ca2a: import org.apache.activemq.command.DestinationInfo;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class AdvisoryConsumer implements ActiveMQDispatcher {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(AdvisoryConsumer.class);
1:fc00993: 
1:fc00993:     int deliveredCounter;
1:d29ca2a: 
1:d29ca2a:     private final ActiveMQConnection connection;
1:d29ca2a:     private ConsumerInfo info;
1:d29ca2a:     private boolean closed;
1:d29ca2a: 
1:d29ca2a:     public AdvisoryConsumer(ActiveMQConnection connection, ConsumerId consumerId) throws JMSException {
1:d29ca2a:         this.connection = connection;
1:d29ca2a:         info = new ConsumerInfo(consumerId);
1:d29ca2a:         info.setDestination(AdvisorySupport.TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC);
1:d29ca2a:         info.setPrefetchSize(1000);
1:d29ca2a:         info.setNoLocal(true);
1:ba9037c:         info.setDispatchAsync(true);
1:230a86c: 
1:d29ca2a:         this.connection.addDispatcher(info.getConsumerId(), this);
1:d29ca2a:         this.connection.syncSendPacket(this.info);
1:d29ca2a:     }
1:230a86c: 
1:56be6b9:     public synchronized void dispose() {
1:d29ca2a:         if (!closed) {
1:56be6b9:             try {
1:56be6b9:                 this.connection.asyncSendPacket(info.createRemoveCommand());
1:230a86c:             } catch (JMSException e) {
1:f998d1b:                 LOG.debug("Failed to send remove command: " + e, e);
2:56be6b9:             }
1:d29ca2a:             this.connection.removeDispatcher(info.getConsumerId());
1:d29ca2a:             closed = true;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void dispatch(MessageDispatch md) {
1:230a86c: 
1:d29ca2a:         // Auto ack messages when we reach 75% of the prefetch
1:d29ca2a:         deliveredCounter++;
1:230a86c:         if (deliveredCounter > (0.75 * info.getPrefetchSize())) {
1:d29ca2a:             try {
1:d29ca2a:                 MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredCounter);
1:d29ca2a:                 connection.asyncSendPacket(ack);
1:d29ca2a:                 deliveredCounter = 0;
1:d29ca2a:             } catch (JMSException e) {
1:0acf545:                 connection.onClientInternalException(e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         DataStructure o = md.getMessage().getDataStructure();
1:230a86c:         if (o != null && o.getClass() == DestinationInfo.class) {
1:230a86c:             processDestinationInfo((DestinationInfo)o);
1:d29ca2a:         } else {
1:c803f53:             //This can happen across networks
1:c803f53:             if (LOG.isDebugEnabled()) {
1:c803f53:                 LOG.debug("Unexpected message was dispatched to the AdvisoryConsumer: "+md);
1:d29ca2a:             }
1:d29ca2a:         }
1:230a86c: 
1:c803f53:     }
1:d29ca2a: 
1:d29ca2a:     private void processDestinationInfo(DestinationInfo dinfo) {
1:d29ca2a:         ActiveMQDestination dest = dinfo.getDestination();
1:933eb2f:         if (!dest.isTemporary()) {
1:933eb2f:             return;
1:933eb2f:         }
1:933eb2f: 
1:933eb2f:         ActiveMQTempDestination tempDest = (ActiveMQTempDestination)dest;
1:230a86c:         if (dinfo.getOperationType() == DestinationInfo.ADD_OPERATION_TYPE) {
1:0d08a5a:             if (tempDest.getConnection() != null) {
1:0d08a5a:                 tempDest = (ActiveMQTempDestination) tempDest.createDestination(tempDest.getPhysicalName());
1:d29ca2a:             }
1:933eb2f:             connection.activeTempDestinations.put(tempDest, tempDest);
1:230a86c:         } else if (dinfo.getOperationType() == DestinationInfo.REMOVE_OPERATION_TYPE) {
1:933eb2f:             connection.activeTempDestinations.remove(tempDest);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:0d08a5a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTempDestination;
/////////////////////////////////////////////////////////////////////////
0:             connection.onAsyncException(new JMSException(
0:                                                          "Unexpected message was dispatched to the AdvisoryConsumer: "
0:                                                              + md));
1:         if (!dest.isTemporary()) {
1:             return;
1:         }
1: 
1:         ActiveMQTempDestination tempDest = (ActiveMQTempDestination)dest;
1:             connection.activeTempDestinations.put(tempDest, tempDest);
1:             connection.activeTempDestinations.remove(tempDest);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(AdvisoryConsumer.class);
1: 
1:     int deliveredCounter;
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Failed to send remove command: " + e, e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (deliveredCounter > (0.75 * info.getPrefetchSize())) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (o != null && o.getClass() == DestinationInfo.class) {
1:             processDestinationInfo((DestinationInfo)o);
0:             connection.onAsyncException(new JMSException("Unexpected message was dispatched to the AdvisoryConsumer: " + md));
1: 
1:         if (dinfo.getOperationType() == DestinationInfo.ADD_OPERATION_TYPE) {
0:             connection.activeTempDestinations.put(dest, dest);
1:         } else if (dinfo.getOperationType() == DestinationInfo.REMOVE_OPERATION_TYPE) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: 
1: public class AdvisoryConsumer implements ActiveMQDispatcher {
1: 
1:     private final ActiveMQConnection connection;
1:     private ConsumerInfo info;
1:     private boolean closed;
0:     int deliveredCounter;
1: 
1:     public AdvisoryConsumer(ActiveMQConnection connection, ConsumerId consumerId) throws JMSException {
1:         this.connection = connection;
1:         info = new ConsumerInfo(consumerId);
1:         info.setDestination(AdvisorySupport.TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC);
1:         info.setPrefetchSize(1000);
1:         info.setNoLocal(true);
1:         
1:         this.connection.addDispatcher(info.getConsumerId(), this);
1:         this.connection.syncSendPacket(this.info);
1:     }
1: 
0:     public void dispose() {
1:         if (!closed) {
1:             this.connection.removeDispatcher(info.getConsumerId());
1:             closed = true;
1:         }
1:     }
1: 
1:     public void dispatch(MessageDispatch md) {
1:         
1:         // Auto ack messages when we reach 75% of the prefetch
1:         deliveredCounter++;
0:         if( deliveredCounter > (0.75 * info.getPrefetchSize()) ) {
1:             try {
1:                 MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredCounter);
1:                 connection.asyncSendPacket(ack);
1:                 deliveredCounter = 0;
1:             } catch (JMSException e) {
0:                 connection.onAsyncException(e);
1:             }
1:         }
1:         
1:         DataStructure o = md.getMessage().getDataStructure();
0:         if( o!=null && o.getClass() == DestinationInfo.class ) {
0:             processDestinationInfo((DestinationInfo) o);
1:         } else {
0:             connection.onAsyncException(new JMSException("Unexpected message was dispatched to the AdvisoryConsumer: "+md));
1:         }
1:         
1:     }
1: 
1:     private void processDestinationInfo(DestinationInfo dinfo) {
1:         ActiveMQDestination dest = dinfo.getDestination();
0:         if( dinfo.getOperationType() == DestinationInfo.ADD_OPERATION_TYPE ) {
0:             connection.activeTempDestinations.put(dest,dest);
0:         } else if( dinfo.getOperationType() == DestinationInfo.REMOVE_OPERATION_TYPE ) {
0:             connection.activeTempDestinations.remove(dest);
1:         }
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:ba9037c
/////////////////////////////////////////////////////////////////////////
1:         info.setDispatchAsync(true);
commit:f998d1b
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Failed to send remove command: " + e, e);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0d08a5a
/////////////////////////////////////////////////////////////////////////
1:             if (tempDest.getConnection() != null) {
1:                 tempDest = (ActiveMQTempDestination) tempDest.createDestination(tempDest.getPhysicalName());
1:             }
commit:4f14f1e
/////////////////////////////////////////////////////////////////////////
0:             tempDest.setConnection(null);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AdvisoryConsumer.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:0acf545
/////////////////////////////////////////////////////////////////////////
1:                 connection.onClientInternalException(e);
commit:c803f53
/////////////////////////////////////////////////////////////////////////
1:             //This can happen across networks
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Unexpected message was dispatched to the AdvisoryConsumer: "+md);
1:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:56be6b9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final transient Log log = LogFactory.getLog(AdvisoryConsumer.class);
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void dispose() {
1:             try {
1:                 this.connection.asyncSendPacket(info.createRemoveCommand());
1:             }
0:             catch (JMSException e) {
0:                 log.info("Failed to send remove command: " + e, e);
1:             }
============================================================================