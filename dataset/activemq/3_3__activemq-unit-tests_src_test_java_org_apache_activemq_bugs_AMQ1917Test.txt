1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:ba16efd: package org.apache.activemq.bugs;
9:ba16efd: 
1:ba16efd: import junit.framework.TestCase;
1:ba16efd: import java.util.concurrent.ArrayBlockingQueue;
1:ba16efd: import java.util.concurrent.BlockingQueue;
1:ba16efd: import java.util.concurrent.CountDownLatch;
1:ba16efd: import java.util.concurrent.ThreadFactory;
1:ba16efd: import java.util.concurrent.ThreadPoolExecutor;
1:ba16efd: import java.util.concurrent.TimeUnit;
1:ba16efd: 
1:ba16efd: import javax.jms.Connection;
1:ba16efd: import javax.jms.DeliveryMode;
1:ba16efd: import javax.jms.Destination;
1:ba16efd: import javax.jms.JMSException;
1:ba16efd: import javax.jms.Message;
1:ba16efd: import javax.jms.MessageConsumer;
1:ba16efd: import javax.jms.MessageProducer;
1:ba16efd: import javax.jms.Session;
1:ba16efd: import javax.jms.TextMessage;
1:ba16efd: 
1:ba16efd: import org.apache.activemq.ActiveMQConnectionFactory;
1:ba16efd: import org.apache.activemq.broker.BrokerService;
1:ba16efd: import org.apache.activemq.command.ActiveMQDestination;
1:ba16efd: 
1:ba16efd: 
1:ba16efd: public class AMQ1917Test extends TestCase {
1:ba16efd: 
1:ba16efd:         private static final int NUM_MESSAGES = 4000;
1:ba16efd:         private static final int NUM_THREADS = 10;
1:42e51a3:         private static final String REQUEST_QUEUE = "mock.in.queue";
1:42e51a3:         private static final String REPLY_QUEUE = "mock.out.queue";
1:ba16efd: 
1:42e51a3:         private Destination requestDestination = ActiveMQDestination.createDestination(
1:ba16efd:                 REQUEST_QUEUE, ActiveMQDestination.QUEUE_TYPE);
1:42e51a3:         private Destination replyDestination = ActiveMQDestination.createDestination(
1:ba16efd:                 REPLY_QUEUE, ActiveMQDestination.QUEUE_TYPE);
1:ba16efd: 
1:42e51a3:         private CountDownLatch roundTripLatch = new CountDownLatch(NUM_MESSAGES);
1:42e51a3:         private CountDownLatch errorLatch = new CountDownLatch(1);
1:42e51a3:         private ThreadPoolExecutor tpe;
1:0e7d5a9:         private final String BROKER_URL = "tcp://localhost:0";
1:42e51a3:         private String connectionUri;
1:42e51a3:         private BrokerService broker = null;
1:ba16efd:         private boolean working = true;
1:42e51a3: 
2:ba16efd:         // trival session/producer pool
1:ba16efd:         final Session[] sessions = new Session[NUM_THREADS];
1:ba16efd:         final MessageProducer[] producers = new MessageProducer[NUM_THREADS];
1:ba16efd: 
1:ba16efd:         public void setUp() throws Exception {
1:ba16efd:             broker = new BrokerService();
1:ba16efd:             broker.setPersistent(false);
1:ba16efd:             broker.addConnector(BROKER_URL);
1:ba16efd:             broker.start();
1:42e51a3: 
1:42e51a3:             connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:42e51a3: 
1:ba16efd:             BlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(10000);
1:ba16efd:             tpe = new ThreadPoolExecutor(NUM_THREADS, NUM_THREADS, 60000,
1:ba16efd:                     TimeUnit.MILLISECONDS, queue);
1:42e51a3:             ThreadFactory limitedthreadFactory = new LimitedThreadFactory(tpe.getThreadFactory());
1:ba16efd:             tpe.setThreadFactory(limitedthreadFactory);
2:ba16efd:         }
1:42e51a3: 
1:ba16efd:         public void tearDown() throws Exception {
1:ba16efd:             broker.stop();
1:ba16efd:             tpe.shutdown();
1:ba16efd:         }
1:42e51a3: 
1:42e51a3:         public void testLoadedSendRecieveWithCorrelationId() throws Exception {
1:42e51a3: 
1:ba16efd:             ActiveMQConnectionFactory connectionFactory = new org.apache.activemq.ActiveMQConnectionFactory();
1:42e51a3:             connectionFactory.setBrokerURL(connectionUri);
1:42e51a3:             Connection connection = connectionFactory.createConnection();
1:ba16efd:             setupReceiver(connection);
1:ba16efd: 
1:ba16efd:             connection = connectionFactory.createConnection();
1:ba16efd:             connection.start();
1:42e51a3: 
1:42e51a3:             // trival session/producer pool
1:ba16efd:             for (int i=0; i<NUM_THREADS; i++) {
1:ba16efd:                 sessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ba16efd:                 producers[i] = sessions[i].createProducer(requestDestination);
1:ba16efd:             }
1:42e51a3: 
1:ba16efd:             for (int i = 0; i < NUM_MESSAGES; i++) {
1:ba16efd:                 MessageSenderReceiver msr = new MessageSenderReceiver(requestDestination,
1:ba16efd:                         replyDestination, "Test Message : " + i);
1:ba16efd:                 tpe.execute(msr);
1:ba16efd:             }
1:42e51a3: 
1:ba16efd:             while (!roundTripLatch.await(4000, TimeUnit.MILLISECONDS)) {
1:ba16efd:                 if (errorLatch.await(1000, TimeUnit.MILLISECONDS)) {
1:ba16efd:                     fail("there was an error, check the console for thread or thread allocation failure");
1:ba16efd:                     break;
1:ba16efd:                 }
1:ba16efd:             }
1:ba16efd:             working = false;
1:ba16efd:         }
1:ba16efd: 
1:ba16efd:         private void setupReceiver(final Connection connection) throws Exception {
1:ba16efd: 
1:ba16efd:             final Session session = connection.createSession(false,
1:ba16efd:                     Session.AUTO_ACKNOWLEDGE);
1:ba16efd:             final MessageConsumer consumer = session
1:ba16efd:                     .createConsumer(requestDestination);
1:ba16efd:             final MessageProducer sender = session.createProducer(replyDestination);
1:ba16efd:             connection.start();
1:ba16efd: 
1:ba16efd:             new Thread() {
1:ba16efd:                 public void run() {
1:ba16efd:                     while (working) {
1:ba16efd:                         // wait for messages in infinitive loop
1:ba16efd:                         // time out is set to show the client is awaiting
1:ba16efd:                         try {
1:ba16efd:                             TextMessage msg = (TextMessage) consumer.receive(20000);
1:ba16efd:                             if (msg == null) {
2:ba16efd:                                 errorLatch.countDown();
1:42e51a3:                                 fail("Response timed out."
1:ba16efd:                                         + " latchCount=" + roundTripLatch.getCount());
1:ba16efd:                             } else {
1:ba16efd:                                 String result = msg.getText();
1:ba16efd:                                 //System.out.println("Request:" + (i++)
1:ba16efd:                                 //        + ", msg=" + result + ", ID" + msg.getJMSMessageID());
1:ba16efd:                                 TextMessage response = session.createTextMessage();
1:ba16efd:                                 response.setJMSCorrelationID(msg.getJMSMessageID());
1:ba16efd:                                 response.setText(result);
1:ba16efd:                                 sender.send(response);
1:ba16efd:                             }
1:ba16efd:                         } catch (JMSException e) {
1:e45bb06:                             if (working) {
1:e45bb06:                                 errorLatch.countDown();
1:e45bb06:                                 fail("Unexpected exception:" + e);
1:e45bb06:                             }
1:ba16efd:                         }
1:ba16efd:                     }
1:ba16efd:                 }
1:ba16efd:             }.start();
1:ba16efd:         }
1:ba16efd: 
1:ba16efd:         class MessageSenderReceiver implements Runnable {
1:ba16efd: 
1:ba16efd:             Destination reqDest;
1:ba16efd:             Destination replyDest;
1:ba16efd:             String origMsg;
1:ba16efd: 
1:ba16efd:             public MessageSenderReceiver(Destination reqDest,
1:ba16efd:                     Destination replyDest, String msg) throws Exception {
1:ba16efd:                 this.replyDest = replyDest;
1:ba16efd:                 this.reqDest = reqDest;
1:ba16efd:                 this.origMsg = msg;
1:ba16efd:             }
1:ba16efd: 
1:ba16efd:             private int getIndexFromCurrentThread() {
1:ba16efd:                 String name = Thread.currentThread().getName();
1:ba16efd:                 String num = name.substring(name.lastIndexOf('-') +1);
1:ba16efd:                 int idx = Integer.parseInt(num) -1;
1:ba16efd:                 assertTrue("idx is in range: idx=" + idx,  idx < NUM_THREADS);
1:ba16efd:                 return idx;
1:ba16efd:             }
1:ba16efd: 
1:ba16efd:             public void run() {
1:ba16efd:                 try {
1:ba16efd:                     // get thread session and producer from pool
1:ba16efd:                     int threadIndex = getIndexFromCurrentThread();
1:ba16efd:                     Session session = sessions[threadIndex];
1:ba16efd:                     MessageProducer producer = producers[threadIndex];
1:ba16efd: 
1:ba16efd:                     final Message sendJmsMsg = session.createTextMessage(origMsg);
1:ba16efd:                     producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:ba16efd:                     producer.send(sendJmsMsg);
1:ba16efd: 
1:ba16efd:                     String jmsId = sendJmsMsg.getJMSMessageID();
1:ba16efd:                     String selector = "JMSCorrelationID='" + jmsId + "'";
1:ba16efd: 
1:ba16efd:                     MessageConsumer consumer = session.createConsumer(replyDest,
1:ba16efd:                             selector);
1:ba16efd:                     Message receiveJmsMsg = consumer.receive(2000);
1:ba16efd:                     consumer.close();
1:ba16efd:                     if (receiveJmsMsg == null) {
1:ba16efd:                         errorLatch.countDown();
1:ba16efd:                         fail("Unable to receive response for:" + origMsg
1:ba16efd:                                 + ", with selector=" + selector);
1:ba16efd:                     } else {
1:ba16efd:                         //System.out.println("received response message :"
1:ba16efd:                         //        + ((TextMessage) receiveJmsMsg).getText()
1:ba16efd:                         //        + " with selector : " + selector);
1:ba16efd:                         roundTripLatch.countDown();
1:ba16efd:                     }
1:ba16efd:                 } catch (JMSException e) {
1:ba16efd:                     fail("unexpected exception:" + e);
1:ba16efd:                 }
1:ba16efd:             }
1:ba16efd:         }
1:ba16efd: 
1:ba16efd:         public class LimitedThreadFactory implements ThreadFactory {
1:ba16efd:             int threadCount;
1:ba16efd:             private ThreadFactory factory;
1:ba16efd:             public LimitedThreadFactory(ThreadFactory threadFactory) {
1:ba16efd:                 this.factory = threadFactory;
1:ba16efd:             }
1:ba16efd: 
1:ba16efd:             public Thread newThread(Runnable arg0) {
1:ba16efd:                 if (++threadCount > NUM_THREADS) {
1:ba16efd:                     errorLatch.countDown();
1:ba16efd:                     fail("too many threads requested");
1:42e51a3:                 }
1:ba16efd:                 return factory.newThread(arg0);
1:ba16efd:             }
1:ba16efd:         }
1:ba16efd:     }
1:ba16efd: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0e7d5a9
/////////////////////////////////////////////////////////////////////////
1:         private final String BROKER_URL = "tcp://localhost:0";
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:         private static final String REQUEST_QUEUE = "mock.in.queue";
1:         private static final String REPLY_QUEUE = "mock.out.queue";
1:         private Destination requestDestination = ActiveMQDestination.createDestination(
1:         private Destination replyDestination = ActiveMQDestination.createDestination(
1:         private CountDownLatch roundTripLatch = new CountDownLatch(NUM_MESSAGES);
1:         private CountDownLatch errorLatch = new CountDownLatch(1);
1:         private ThreadPoolExecutor tpe;
0:         private final String BROKER_URL = "tcp://localhost:61616";
1:         private String connectionUri;
1:         private BrokerService broker = null;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:             ThreadFactory limitedthreadFactory = new LimitedThreadFactory(tpe.getThreadFactory());
/////////////////////////////////////////////////////////////////////////
1: 
1:         public void testLoadedSendRecieveWithCorrelationId() throws Exception {
1: 
1:             connectionFactory.setBrokerURL(connectionUri);
1:             Connection connection = connectionFactory.createConnection();
1: 
1:             // trival session/producer pool
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                                 fail("Response timed out."
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Gary Tully
-------------------------------------------------------------------------------
commit:e45bb06
/////////////////////////////////////////////////////////////////////////
1:                             if (working) {
1:                                 errorLatch.countDown();
1:                                 fail("Unexpected exception:" + e);
1:                             }
commit:ba16efd
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import junit.framework.TestCase;
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: 
1: public class AMQ1917Test extends TestCase {
1: 
1:         private static final int NUM_MESSAGES = 4000;
1:         private static final int NUM_THREADS = 10;
0:         public static final String REQUEST_QUEUE = "mock.in.queue";
0:         public static final String REPLY_QUEUE = "mock.out.queue";
1: 
0:         Destination requestDestination = ActiveMQDestination.createDestination(
1:                 REQUEST_QUEUE, ActiveMQDestination.QUEUE_TYPE);
0:         Destination replyDestination = ActiveMQDestination.createDestination(
1:                 REPLY_QUEUE, ActiveMQDestination.QUEUE_TYPE);
1: 
0:         CountDownLatch roundTripLatch = new CountDownLatch(NUM_MESSAGES);
0:         CountDownLatch errorLatch = new CountDownLatch(1);
0:         ThreadPoolExecutor tpe;
0:         final String BROKER_URL = "tcp://localhost:61616";
0:         BrokerService broker = null;
1:         private boolean working = true;
1:         
1:         // trival session/producer pool
1:         final Session[] sessions = new Session[NUM_THREADS];
1:         final MessageProducer[] producers = new MessageProducer[NUM_THREADS];
1: 
1:         public void setUp() throws Exception {
1:             broker = new BrokerService();
1:             broker.setPersistent(false);
1:             broker.addConnector(BROKER_URL);
1:             broker.start();
1:             
1:             BlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(10000);
1:             tpe = new ThreadPoolExecutor(NUM_THREADS, NUM_THREADS, 60000,
1:                     TimeUnit.MILLISECONDS, queue);
0:             ThreadFactory limitedthreadFactory = new LimitedThreadFactory(tpe.getThreadFactory());  
1:             tpe.setThreadFactory(limitedthreadFactory);
1:         }
1: 
1:         public void tearDown() throws Exception {
1:             broker.stop();
1:             tpe.shutdown();
1:         }
1:         
0:         public void testLoadedSendRecieveWithCorrelationId() throws Exception {            
1:            
1:             ActiveMQConnectionFactory connectionFactory = new org.apache.activemq.ActiveMQConnectionFactory();
0:             connectionFactory.setBrokerURL(BROKER_URL);
0:             Connection connection = connectionFactory.createConnection();          
1:             setupReceiver(connection);
1: 
1:             connection = connectionFactory.createConnection();
1:             connection.start();
1:             
1:             // trival session/producer pool   
1:             for (int i=0; i<NUM_THREADS; i++) {
1:                 sessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 producers[i] = sessions[i].createProducer(requestDestination);
1:             }
1:             
1:             for (int i = 0; i < NUM_MESSAGES; i++) {
1:                 MessageSenderReceiver msr = new MessageSenderReceiver(requestDestination,
1:                         replyDestination, "Test Message : " + i);
1:                 tpe.execute(msr);
1:             }
1:             
1:             while (!roundTripLatch.await(4000, TimeUnit.MILLISECONDS)) {
1:                 if (errorLatch.await(1000, TimeUnit.MILLISECONDS)) {
1:                     fail("there was an error, check the console for thread or thread allocation failure");
1:                     break;
1:                 }
1:             }
1:             working = false;
1:         }
1: 
1:         private void setupReceiver(final Connection connection) throws Exception {
1: 
1:             final Session session = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             final MessageConsumer consumer = session
1:                     .createConsumer(requestDestination);
1:             final MessageProducer sender = session.createProducer(replyDestination);
1:             connection.start();
1: 
1:             new Thread() {
1:                 public void run() {
1:                     while (working) {
1:                         // wait for messages in infinitive loop
1:                         // time out is set to show the client is awaiting
1:                         try {
1:                             TextMessage msg = (TextMessage) consumer.receive(20000);
1:                             if (msg == null) {
1:                                 errorLatch.countDown();
0:                                 fail("Response timed out." 
1:                                         + " latchCount=" + roundTripLatch.getCount());
1:                             } else {
1:                                 String result = msg.getText();
1:                                 //System.out.println("Request:" + (i++)
1:                                 //        + ", msg=" + result + ", ID" + msg.getJMSMessageID());
1:                                 TextMessage response = session.createTextMessage();
1:                                 response.setJMSCorrelationID(msg.getJMSMessageID());
1:                                 response.setText(result);
1:                                 sender.send(response);
1:                             }
1:                         } catch (JMSException e) {
1:                             errorLatch.countDown();
0:                             fail("Unexpected exception:" + e);
1:                         }
1:                     }
1:                 }
1:             }.start();
1:         }
1: 
1:         class MessageSenderReceiver implements Runnable {
1: 
1:             Destination reqDest;
1:             Destination replyDest;
1:             String origMsg;
1: 
1:             public MessageSenderReceiver(Destination reqDest,
1:                     Destination replyDest, String msg) throws Exception {
1:                 this.replyDest = replyDest;
1:                 this.reqDest = reqDest;
1:                 this.origMsg = msg;
1:             }
1: 
1:             private int getIndexFromCurrentThread() {
1:                 String name = Thread.currentThread().getName();
1:                 String num = name.substring(name.lastIndexOf('-') +1);
1:                 int idx = Integer.parseInt(num) -1;
1:                 assertTrue("idx is in range: idx=" + idx,  idx < NUM_THREADS);
1:                 return idx;
1:             }
1: 
1:             public void run() {
1:                 try {
1:                     // get thread session and producer from pool
1:                     int threadIndex = getIndexFromCurrentThread();
1:                     Session session = sessions[threadIndex];
1:                     MessageProducer producer = producers[threadIndex];
1: 
1:                     final Message sendJmsMsg = session.createTextMessage(origMsg);
1:                     producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:                     producer.send(sendJmsMsg);
1: 
1:                     String jmsId = sendJmsMsg.getJMSMessageID();
1:                     String selector = "JMSCorrelationID='" + jmsId + "'";
1: 
1:                     MessageConsumer consumer = session.createConsumer(replyDest,
1:                             selector);
1:                     Message receiveJmsMsg = consumer.receive(2000);
1:                     consumer.close();
1:                     if (receiveJmsMsg == null) {
1:                         errorLatch.countDown();
1:                         fail("Unable to receive response for:" + origMsg
1:                                 + ", with selector=" + selector);
1:                     } else {
1:                         //System.out.println("received response message :"
1:                         //        + ((TextMessage) receiveJmsMsg).getText()
1:                         //        + " with selector : " + selector);
1:                         roundTripLatch.countDown();
1:                     }
1:                 } catch (JMSException e) {
1:                     fail("unexpected exception:" + e);
1:                 }
1:             }
1:         }
1:         
1:         public class LimitedThreadFactory implements ThreadFactory {
1:             int threadCount;
1:             private ThreadFactory factory;
1:             public LimitedThreadFactory(ThreadFactory threadFactory) {
1:                 this.factory = threadFactory;
1:             }
1: 
1:             public Thread newThread(Runnable arg0) {
1:                 if (++threadCount > NUM_THREADS) {
1:                     errorLatch.countDown();
1:                     fail("too many threads requested");
1:                 }       
1:                 return factory.newThread(arg0);
1:             }
1:         }
1:     }
1: 
============================================================================