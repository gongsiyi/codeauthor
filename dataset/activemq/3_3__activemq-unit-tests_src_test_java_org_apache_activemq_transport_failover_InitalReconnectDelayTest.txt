1:974f689: /**
1:974f689:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:974f689:  * contributor license agreements.  See the NOTICE file distributed with
1:974f689:  * this work for additional information regarding copyright ownership.
1:974f689:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:974f689:  * (the "License"); you may not use this file except in compliance with
1:974f689:  * the License.  You may obtain a copy of the License at
1:974f689:  *
1:974f689:  *      http://www.apache.org/licenses/LICENSE-2.0
1:974f689:  *
1:974f689:  * Unless required by applicable law or agreed to in writing, software
1:974f689:  * distributed under the License is distributed on an "AS IS" BASIS,
1:974f689:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:974f689:  * See the License for the specific language governing permissions and
1:974f689:  * limitations under the License.
1:974f689:  */
1:b6b6911: package org.apache.activemq.transport.failover;
1:bb1e246: 
1:4f19f31: import java.io.IOException;
1:bb1e246: import java.util.Date;
1:4f19f31: import java.util.concurrent.atomic.AtomicInteger;
1:bb1e246: import javax.jms.Connection;
1:4f19f31: import javax.jms.Message;
1:bb1e246: import javax.jms.MessageProducer;
1:bb1e246: import javax.jms.Queue;
1:bb1e246: import javax.jms.Session;
1:b6b6911: import org.apache.activemq.ActiveMQConnectionFactory;
1:b6b6911: import org.apache.activemq.broker.BrokerService;
1:4f19f31: import org.apache.activemq.transport.TransportListener;
1:b6b6911: import org.junit.After;
1:b6b6911: import org.junit.Before;
1:b6b6911: import org.junit.Test;
1:b6b6911: import org.slf4j.Logger;
1:b6b6911: import org.slf4j.LoggerFactory;
1:4f19f31: 
1:bb1e246: 
1:4f19f31: import static org.junit.Assert.*;
1:4f19f31: 
1:b6b6911: public class InitalReconnectDelayTest {
1:bb1e246: 
1:b6b6911:     private static final transient Logger LOG = LoggerFactory.getLogger(InitalReconnectDelayTest.class);
1:b6b6911:     protected BrokerService broker1;
1:b6b6911:     protected BrokerService broker2;
8:b6b6911: 
1:b6b6911:     @Test
1:b6b6911:     public void testInitialReconnectDelay() throws Exception {
1:b6b6911: 
1:4f19f31:         String uriString = "failover://(tcp://localhost:" +
1:4f19f31:             broker1.getTransportConnectors().get(0).getConnectUri().getPort() +
1:4f19f31:             ",tcp://localhost:" +
1:4f19f31:             broker2.getTransportConnectors().get(0).getConnectUri().getPort() +
1:4f19f31:             ")?randomize=false&initialReconnectDelay=15000";
1:4f19f31: 
1:b6b6911:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uriString);
1:b6b6911:         Connection connection = connectionFactory.createConnection();
1:b6b6911:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b6b6911:         Queue destination = session.createQueue("foo");
1:b6b6911:         MessageProducer producer = session.createProducer(destination);
1:b6b6911: 
1:b6b6911:         long start = (new Date()).getTime();
1:b6b6911:         producer.send(session.createTextMessage("TEST"));
1:b6b6911:         long end = (new Date()).getTime();
1:b6b6911: 
1:b6b6911:         //Verify we can send quickly
1:b6b6911:         assertTrue((end - start) < 2000);
1:b6b6911: 
1:b6b6911:         //Halt the broker1...
1:b6b6911:         LOG.info("Stopping the Broker1...");
1:bb1e246:         start = (new Date()).getTime();
1:b6b6911:         broker1.stop();
1:b6b6911: 
1:b6b6911:         LOG.info("Attempting to send... failover should kick in...");
1:b6b6911:         producer.send(session.createTextMessage("TEST"));
1:b6b6911:         end = (new Date()).getTime();
1:b6b6911: 
1:b6b6911:         //Inital reconnection should kick in and be darned close to what we expected
1:b6b6911:         LOG.info("Failover took " + (end - start) + " ms.");
1:b6b6911:         assertTrue("Failover took " + (end - start) + " ms and should be > 14000.", (end - start) > 14000);
2:b6b6911:     }
1:b6b6911: 
1:4f19f31:     @Test
1:4f19f31:     public void testNoSuspendedCallbackOnNoReconnect() throws Exception {
1:4f19f31: 
1:4f19f31:         String uriString = "failover://(tcp://localhost:" +
1:4f19f31:             broker1.getTransportConnectors().get(0).getConnectUri().getPort() +
1:4f19f31:             ",tcp://localhost:" +
1:4f19f31:             broker2.getTransportConnectors().get(0).getConnectUri().getPort() +
1:4f19f31:             ")?randomize=false&maxReconnectAttempts=0";
1:4f19f31: 
1:4f19f31: 
1:4f19f31:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uriString);
1:4f19f31:         final AtomicInteger calls = new AtomicInteger(0);
1:4f19f31:         connectionFactory.setTransportListener(new TransportListener() {
1:4f19f31:             @Override
1:4f19f31:             public void onCommand(Object command) {
1:4f19f31:             }
1:4f19f31: 
1:4f19f31:             @Override
1:4f19f31:             public void onException(IOException error) {
1:4f19f31:                 LOG.info("on exception: " + error);
1:4f19f31:                 calls.set(0x01 | calls.intValue());
1:4f19f31:             }
1:4f19f31: 
1:4f19f31:             @Override
1:4f19f31:             public void transportInterupted() {
1:4f19f31:                 LOG.info("on transportInterupted");
1:4f19f31:                 calls.set(0x02 | calls.intValue());
1:4f19f31:             }
1:4f19f31: 
1:4f19f31:             @Override
1:4f19f31:             public void transportResumed() {
1:4f19f31:                 LOG.info("on transportResumed");
1:4f19f31:                 calls.set(0x04 | calls.intValue());
1:4f19f31:             }
1:4f19f31:         });
1:4f19f31:         Connection connection = connectionFactory.createConnection();
1:4f19f31:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4f19f31:         Queue destination = session.createQueue("foo");
1:4f19f31:         MessageProducer producer = session.createProducer(destination);
1:4f19f31: 
1:4f19f31:         final Message message = session.createTextMessage("TEST");
1:4f19f31:         producer.send(message);
1:4f19f31: 
1:4f19f31:         // clear listener state
1:4f19f31:         calls.set(0);
1:4f19f31: 
1:4f19f31:         LOG.info("Stopping the Broker1...");
1:4f19f31:         broker1.stop();
1:4f19f31: 
1:4f19f31:         LOG.info("Attempting to send... failover should throw on disconnect");
1:4f19f31:         try {
1:4f19f31:             producer.send(destination, message);
1:4f19f31:             fail("Expect IOException to bubble up on send");
1:4f19f31:         } catch (javax.jms.IllegalStateException producerClosed) {
1:4f19f31:         }
1:4f19f31: 
1:4f19f31:         assertEquals("Only an exception is reported to the listener", 0x1, calls.get());
1:4f19f31:     }
1:4f19f31: 
1:b6b6911:     @Before
1:b6b6911:     public void setUp() throws Exception {
1:b6b6911: 
1:b6b6911:         final String dataDir = "target/data/shared";
1:b6b6911: 
1:b6b6911:         broker1 = new BrokerService();
1:b6b6911: 
1:b6b6911:         broker1.setBrokerName("broker1");
1:b6b6911:         broker1.setDeleteAllMessagesOnStartup(true);
1:b6b6911:         broker1.setDataDirectory(dataDir);
1:4f19f31:         broker1.addConnector("tcp://localhost:0");
1:b6b6911:         broker1.setUseJmx(false);
1:b6b6911:         broker1.start();
1:b6b6911:         broker1.waitUntilStarted();
1:b6b6911: 
1:b6b6911:         broker2 = new BrokerService();
1:b6b6911:         broker2.setBrokerName("broker2");
1:b6b6911:         broker2.setDataDirectory(dataDir);
1:b6b6911:         broker2.setUseJmx(false);
1:4f19f31:         broker2.addConnector("tcp://localhost:0");
1:b6b6911:         broker2.start();
1:b6b6911:         broker2.waitUntilStarted();
1:b6b6911: 
1:b6b6911:     }
1:b6b6911: 
1:b6b6911:     protected String getSlaveXml() {
1:b6b6911:         return "org/apache/activemq/broker/ft/sharedFileSlave.xml";
1:b6b6911:     }
1:b6b6911: 
1:b6b6911:     protected String getMasterXml() {
1:b6b6911:         return "org/apache/activemq/broker/ft/sharedFileMaster.xml";
1:b6b6911:     }
1:b6b6911: 
1:b6b6911:     @After
1:b6b6911:     public void tearDown() throws Exception {
1:b6b6911: 
1:b6b6911:         if (broker1.isStarted()) {
1:b6b6911:             broker1.stop();
1:b6b6911:             broker1.waitUntilStopped();
1:b6b6911:         }
1:b6b6911: 
1:b6b6911:         if (broker2.isStarted()) {
1:b6b6911:             broker2.stop();
1:b6b6911:             broker2.waitUntilStopped();
1:b6b6911:         }
1:b6b6911:     }
1:b6b6911: 
1:b6b6911: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4f19f31
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Message;
1: import org.apache.activemq.transport.TransportListener;
1: 
1: import static org.junit.Assert.*;
1: 
1:         String uriString = "failover://(tcp://localhost:" +
1:             broker1.getTransportConnectors().get(0).getConnectUri().getPort() +
1:             ",tcp://localhost:" +
1:             broker2.getTransportConnectors().get(0).getConnectUri().getPort() +
1:             ")?randomize=false&initialReconnectDelay=15000";
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testNoSuspendedCallbackOnNoReconnect() throws Exception {
1: 
1:         String uriString = "failover://(tcp://localhost:" +
1:             broker1.getTransportConnectors().get(0).getConnectUri().getPort() +
1:             ",tcp://localhost:" +
1:             broker2.getTransportConnectors().get(0).getConnectUri().getPort() +
1:             ")?randomize=false&maxReconnectAttempts=0";
1: 
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uriString);
1:         final AtomicInteger calls = new AtomicInteger(0);
1:         connectionFactory.setTransportListener(new TransportListener() {
1:             @Override
1:             public void onCommand(Object command) {
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1:                 LOG.info("on exception: " + error);
1:                 calls.set(0x01 | calls.intValue());
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1:                 LOG.info("on transportInterupted");
1:                 calls.set(0x02 | calls.intValue());
1:             }
1: 
1:             @Override
1:             public void transportResumed() {
1:                 LOG.info("on transportResumed");
1:                 calls.set(0x04 | calls.intValue());
1:             }
1:         });
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue destination = session.createQueue("foo");
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         final Message message = session.createTextMessage("TEST");
1:         producer.send(message);
1: 
1:         // clear listener state
1:         calls.set(0);
1: 
1:         LOG.info("Stopping the Broker1...");
1:         broker1.stop();
1: 
1:         LOG.info("Attempting to send... failover should throw on disconnect");
1:         try {
1:             producer.send(destination, message);
1:             fail("Expect IOException to bubble up on send");
1:         } catch (javax.jms.IllegalStateException producerClosed) {
1:         }
1: 
1:         assertEquals("Only an exception is reported to the listener", 0x1, calls.get());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker1.addConnector("tcp://localhost:0");
/////////////////////////////////////////////////////////////////////////
1:         broker2.addConnector("tcp://localhost:0");
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:bb1e246
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Date;
0: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         start = (new Date()).getTime();
commit:b6b6911
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.failover;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import java.util.Date;
0: import java.util.concurrent.CountDownLatch;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: public class InitalReconnectDelayTest {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(InitalReconnectDelayTest.class);
1:     protected BrokerService broker1;
1:     protected BrokerService broker2;
0:     protected CountDownLatch broker2Started = new CountDownLatch(1);
0:     protected String uriString = "failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false&initialReconnectDelay=15000";
1: 
1:     @Test
1:     public void testInitialReconnectDelay() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uriString);
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue destination = session.createQueue("foo");
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         long start = (new Date()).getTime();
1:         producer.send(session.createTextMessage("TEST"));
1:         long end = (new Date()).getTime();
1: 
1:         //Verify we can send quickly
1:         assertTrue((end - start) < 2000);
1: 
1:         //Halt the broker1...
1:         LOG.info("Stopping the Broker1...");
1:         broker1.stop();
1: 
1:         LOG.info("Attempting to send... failover should kick in...");
0:         start = (new Date()).getTime();
1:         producer.send(session.createTextMessage("TEST"));
1:         end = (new Date()).getTime();
1: 
1:         //Inital reconnection should kick in and be darned close to what we expected
1:         LOG.info("Failover took " + (end - start) + " ms.");
1:         assertTrue("Failover took " + (end - start) + " ms and should be > 14000.", (end - start) > 14000);
1: 
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         final String dataDir = "target/data/shared";
1: 
1:         broker1 = new BrokerService();
1: 
1:         broker1.setBrokerName("broker1");
1:         broker1.setDeleteAllMessagesOnStartup(true);
1:         broker1.setDataDirectory(dataDir);
0:         broker1.addConnector("tcp://localhost:62001");
1:         broker1.setUseJmx(false);
1:         broker1.start();
1:         broker1.waitUntilStarted();
1: 
1:         broker2 = new BrokerService();
1:         broker2.setBrokerName("broker2");
1:         broker2.setDataDirectory(dataDir);
1:         broker2.setUseJmx(false);
0:         broker2.addConnector("tcp://localhost:62002");
1:         broker2.start();
1:         broker2.waitUntilStarted();
1: 
1:     }
1: 
1:     protected String getSlaveXml() {
1:         return "org/apache/activemq/broker/ft/sharedFileSlave.xml";
1:     }
1: 
1:     protected String getMasterXml() {
1:         return "org/apache/activemq/broker/ft/sharedFileMaster.xml";
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:         if (broker1.isStarted()) {
1:             broker1.stop();
1:             broker1.waitUntilStopped();
1:         }
1: 
1:         if (broker2.isStarted()) {
1:             broker2.stop();
1:             broker2.waitUntilStopped();
1:         }
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory(uriString);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:974f689
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================