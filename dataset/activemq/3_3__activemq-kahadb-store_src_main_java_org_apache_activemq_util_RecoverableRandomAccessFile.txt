1:582af3e: /**
1:582af3e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:582af3e:  * contributor license agreements.  See the NOTICE file distributed with
1:582af3e:  * this work for additional information regarding copyright ownership.
1:582af3e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:582af3e:  * (the "License"); you may not use this file except in compliance with
1:582af3e:  * the License.  You may obtain a copy of the License at
1:582af3e:  *
1:582af3e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:582af3e:  *
1:582af3e:  * Unless required by applicable law or agreed to in writing, software
1:582af3e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:582af3e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:582af3e:  * See the License for the specific language governing permissions and
1:582af3e:  * limitations under the License.
1:582af3e:  */
1:582af3e: package org.apache.activemq.util;
3:582af3e: 
1:ef619b6: import java.io.File;
1:ef619b6: import java.io.FileDescriptor;
1:ef619b6: import java.io.FileNotFoundException;
1:ef619b6: import java.io.IOException;
1:ef619b6: import java.io.RandomAccessFile;
1:ef619b6: import java.nio.channels.FileChannel;
1:582af3e: 
1:582af3e: public class RecoverableRandomAccessFile implements java.io.DataOutput, java.io.DataInput, java.io.Closeable {
1:582af3e: 
1:ef619b6:     private static final boolean SKIP_METADATA_UPDATE =
1:ef619b6:         Boolean.getBoolean("org.apache.activemq.kahaDB.files.skipMetadataUpdate");
1:ef619b6: 
1:582af3e:     RandomAccessFile raf;
1:582af3e:     File file;
1:582af3e:     String mode;
1:42bf6e9:     final boolean isSkipMetadataUpdate;
1:582af3e: 
1:42bf6e9:     public RecoverableRandomAccessFile(File file, String mode, boolean skipMetadataUpdate) throws FileNotFoundException {
1:582af3e:         this.file = file;
2:582af3e:         this.mode = mode;
2:582af3e:         raf = new RandomAccessFile(file, mode);
1:42bf6e9:         isSkipMetadataUpdate = skipMetadataUpdate;
1:42bf6e9:     }
1:42bf6e9: 
1:42bf6e9:     public RecoverableRandomAccessFile(File file, String mode) throws FileNotFoundException {
1:42bf6e9:         this(file, mode, SKIP_METADATA_UPDATE);
4:582af3e:     }
1:582af3e: 
1:582af3e:     public RecoverableRandomAccessFile(String name, String mode) throws FileNotFoundException {
1:42bf6e9:         this(new File(name), mode);
1:582af3e:     }
1:582af3e: 
1:8c218ee:     public RandomAccessFile getRaf() throws IOException {
1:582af3e:         if (raf == null) {
1:582af3e:             raf = new RandomAccessFile(file, mode);
1:582af3e:         }
1:582af3e:         return raf;
1:582af3e:     }
1:582af3e: 
1:582af3e:     protected void handleException() throws IOException {
3:582af3e:         try {
1:582af3e:             if (raf != null) {
2:582af3e:                 raf.close();
1:582af3e:             }
1:582af3e:         } catch (Throwable ignore) {
1:582af3e:         } finally {
1:582af3e:             raf = null;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void close() throws IOException {
1:5dacae3:         if (raf != null) {
1:5dacae3:             raf.close();
1:5dacae3:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void readFully(byte[] bytes) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().readFully(bytes);
2:582af3e:         } catch (IOException ioe) {
3:582af3e:             handleException();
3:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:c50b6c3: 
1:582af3e:     @Override
1:582af3e:     public void readFully(byte[] bytes, int i, int i2) throws IOException {
1:c50b6c3:         try {
1:582af3e:             getRaf().readFully(bytes, i, i2);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:c50b6c3: 
1:582af3e:     @Override
1:582af3e:     public int skipBytes(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().skipBytes(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public boolean readBoolean() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readBoolean();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public byte readByte() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readByte();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public int readUnsignedByte() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readUnsignedByte();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public short readShort() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readShort();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public int readUnsignedShort() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readUnsignedShort();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public char readChar() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readChar();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public int readInt() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readInt();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public long readLong() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readLong();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public float readFloat() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readFloat();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public double readDouble() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readDouble();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public String readLine() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readLine();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public String readUTF() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().readUTF();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void write(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().write(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void write(byte[] bytes) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().write(bytes);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void write(byte[] bytes, int i, int i2) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().write(bytes, i, i2);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeBoolean(boolean b) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeBoolean(b);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeByte(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeByte(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeShort(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeShort(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeChar(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeChar(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeInt(int i) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeInt(i);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeLong(long l) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeLong(l);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeFloat(float v) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeFloat(v);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeDouble(double v) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeDouble(v);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeBytes(String s) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeBytes(s);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeChars(String s) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeChars(s);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     @Override
1:582af3e:     public void writeUTF(String s) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().writeUTF(s);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e: 
1:582af3e:     //RAF methods
1:582af3e:     public long length() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().length();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     public void setLength(long length) throws IOException {
1:95f7262:         throw new IllegalStateException("File size is pre allocated");
1:582af3e:     }
1:582af3e: 
1:582af3e:     public void seek(long pos) throws IOException {
1:582af3e:         try {
1:582af3e:             getRaf().seek(pos);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:582af3e:     public FileDescriptor getFD() throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().getFD();
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: 
1:ef619b6:     public void sync() throws IOException {
1:ef619b6:         try {
1:42bf6e9:             getRaf().getChannel().force(!isSkipMetadataUpdate);;
1:ef619b6:         } catch (IOException ioe) {
1:ef619b6:             handleException();
1:ef619b6:             throw ioe;
1:ef619b6:         }
1:ef619b6:     }
1:ef619b6: 
1:ef619b6:     public FileChannel getChannel() throws IOException {
1:ef619b6:         try {
1:ef619b6:             return getRaf().getChannel();
1:ef619b6:         } catch (IOException ioe) {
1:ef619b6:             handleException();
1:ef619b6:             throw ioe;
1:ef619b6:         }
1:ef619b6:     }
1:ef619b6: 
1:582af3e:     public int read(byte[] b, int off, int len) throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().read(b, off, len);
1:582af3e:         } catch (IOException ioe) {
1:c50b6c3:             handleException();
1:c50b6c3:             throw ioe;
1:c50b6c3:         }
1:c50b6c3:     }
1:582af3e: 
1:582af3e:     public int read(byte[] b) throws IOException {
1:582af3e:         try {
1:582af3e:             return getRaf().read(b);
1:582af3e:         } catch (IOException ioe) {
1:582af3e:             handleException();
1:582af3e:             throw ioe;
1:582af3e:         }
1:582af3e:     }
1:582af3e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:42bf6e9
/////////////////////////////////////////////////////////////////////////
1:     final boolean isSkipMetadataUpdate;
1:     public RecoverableRandomAccessFile(File file, String mode, boolean skipMetadataUpdate) throws FileNotFoundException {
1:         isSkipMetadataUpdate = skipMetadataUpdate;
1:     }
1: 
1:     public RecoverableRandomAccessFile(File file, String mode) throws FileNotFoundException {
1:         this(file, mode, SKIP_METADATA_UPDATE);
1:         this(new File(name), mode);
/////////////////////////////////////////////////////////////////////////
1:             getRaf().getChannel().force(!isSkipMetadataUpdate);;
commit:8c218ee
/////////////////////////////////////////////////////////////////////////
1:     public RandomAccessFile getRaf() throws IOException {
commit:95f7262
/////////////////////////////////////////////////////////////////////////
1:         throw new IllegalStateException("File size is pre allocated");
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ef619b6
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileDescriptor;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.channels.FileChannel;
1:     private static final boolean SKIP_METADATA_UPDATE =
1:         Boolean.getBoolean("org.apache.activemq.kahaDB.files.skipMetadataUpdate");
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void sync() throws IOException {
1:         try {
0:             getRaf().getChannel().force(!SKIP_METADATA_UPDATE);;
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public FileChannel getChannel() throws IOException {
1:         try {
1:             return getRaf().getChannel();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
commit:97b12c7
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
/////////////////////////////////////////////////////////////////////////
commit:c50b6c3
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileDescriptor;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.RandomAccessFile;
0: import java.nio.channels.FileChannel;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public FileChannel getChannel() throws IOException {
1:     	
1:     	try {
0:     		return getRaf().getChannel();
0:         } catch (IOException ioe)
0:         {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5dacae3
/////////////////////////////////////////////////////////////////////////
1:         if (raf != null) {
1:             raf.close();
1:         }
commit:582af3e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import java.io.*;
1: 
1: public class RecoverableRandomAccessFile implements java.io.DataOutput, java.io.DataInput, java.io.Closeable {
1: 
1:     RandomAccessFile raf;
1:     File file;
1:     String mode;
1: 
0:     public RecoverableRandomAccessFile(File file, String mode) throws FileNotFoundException {
1:         this.file = file;
1:         this.mode = mode;
1:         raf = new RandomAccessFile(file, mode);
1:     }
1: 
1:     public RecoverableRandomAccessFile(String name, String mode) throws FileNotFoundException {
0:         this.file = new File(name);
1:         this.mode = mode;
1:         raf = new RandomAccessFile(file, mode);
1:     }
1: 
0:     protected RandomAccessFile getRaf() throws IOException {
1:         if (raf == null) {
1:             raf = new RandomAccessFile(file, mode);
1:         }
1:         return raf;
1:     }
1: 
1:     protected void handleException() throws IOException {
1:         try {
1:             if (raf != null) {
1:                 raf.close();
1:             }
1:         } catch (Throwable ignore) {
1:         } finally {
1:             raf = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void close() throws IOException {
1:         raf.close();
1:     }
1: 
1:     @Override
1:     public void readFully(byte[] bytes) throws IOException {
1:         try {
1:             getRaf().readFully(bytes);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void readFully(byte[] bytes, int i, int i2) throws IOException {
1:         try {
1:             getRaf().readFully(bytes, i, i2);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public int skipBytes(int i) throws IOException {
1:         try {
1:             return getRaf().skipBytes(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public boolean readBoolean() throws IOException {
1:         try {
1:             return getRaf().readBoolean();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public byte readByte() throws IOException {
1:         try {
1:             return getRaf().readByte();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public int readUnsignedByte() throws IOException {
1:         try {
1:             return getRaf().readUnsignedByte();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public short readShort() throws IOException {
1:         try {
1:             return getRaf().readShort();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public int readUnsignedShort() throws IOException {
1:         try {
1:             return getRaf().readUnsignedShort();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public char readChar() throws IOException {
1:         try {
1:             return getRaf().readChar();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public int readInt() throws IOException {
1:         try {
1:             return getRaf().readInt();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public long readLong() throws IOException {
1:         try {
1:             return getRaf().readLong();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public float readFloat() throws IOException {
1:         try {
1:             return getRaf().readFloat();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public double readDouble() throws IOException {
1:         try {
1:             return getRaf().readDouble();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public String readLine() throws IOException {
1:         try {
1:             return getRaf().readLine();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public String readUTF() throws IOException {
1:         try {
1:             return getRaf().readUTF();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void write(int i) throws IOException {
1:         try {
1:             getRaf().write(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void write(byte[] bytes) throws IOException {
1:         try {
1:             getRaf().write(bytes);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void write(byte[] bytes, int i, int i2) throws IOException {
1:         try {
1:             getRaf().write(bytes, i, i2);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeBoolean(boolean b) throws IOException {
1:         try {
1:             getRaf().writeBoolean(b);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeByte(int i) throws IOException {
1:         try {
1:             getRaf().writeByte(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeShort(int i) throws IOException {
1:         try {
1:             getRaf().writeShort(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeChar(int i) throws IOException {
1:         try {
1:             getRaf().writeChar(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeInt(int i) throws IOException {
1:         try {
1:             getRaf().writeInt(i);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeLong(long l) throws IOException {
1:         try {
1:             getRaf().writeLong(l);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeFloat(float v) throws IOException {
1:         try {
1:             getRaf().writeFloat(v);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeDouble(double v) throws IOException {
1:         try {
1:             getRaf().writeDouble(v);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeBytes(String s) throws IOException {
1:         try {
1:             getRaf().writeBytes(s);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeChars(String s) throws IOException {
1:         try {
1:             getRaf().writeChars(s);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     @Override
1:     public void writeUTF(String s) throws IOException {
1:         try {
1:             getRaf().writeUTF(s);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1: 
1:     //RAF methods
1:     public long length() throws IOException {
1:         try {
1:             return getRaf().length();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public void setLength(long length) throws IOException {
1:         try {
0:             getRaf().setLength(length);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public void seek(long pos) throws IOException {
1:         try {
1:             getRaf().seek(pos);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public FileDescriptor getFD() throws IOException {
1:         try {
1:             return getRaf().getFD();
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         try {
1:             return getRaf().read(b, off, len);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: 
1:     public int read(byte[] b) throws IOException {
1:         try {
1:             return getRaf().read(b);
1:         } catch (IOException ioe) {
1:             handleException();
1:             throw ioe;
1:         }
1:     }
1: }
============================================================================