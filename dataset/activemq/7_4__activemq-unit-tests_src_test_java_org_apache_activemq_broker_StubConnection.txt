1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:74a7a8b: import java.util.concurrent.BlockingQueue;
1:74a7a8b: import java.util.concurrent.LinkedBlockingQueue;
1:eccb337: import java.util.concurrent.atomic.AtomicReference;
1:9ca56a0: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.Command;
1:d29ca2a: import org.apache.activemq.command.ExceptionResponse;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.Response;
1:d29ca2a: import org.apache.activemq.command.ShutdownInfo;
1:f915da5: import org.apache.activemq.transport.DefaultTransportListener;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:da7478d: import org.apache.activemq.transport.TransportFactory;
1:01bdc52: import org.apache.activemq.transport.TransportListener;
1:7f5213b: import org.apache.activemq.util.JMSExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.ServiceSupport;
1:9ca56a0: 
1:d29ca2a: public class StubConnection implements Service {
1:d29ca2a: 
1:933eb2f:     private final BlockingQueue<Object> dispatchQueue = new LinkedBlockingQueue<Object>();
1:d29ca2a:     private Connection connection;
1:d29ca2a:     private Transport transport;
1:933eb2f:     private boolean shuttingDown;
1:01bdc52:     private TransportListener listener;
1:eccb337:     public AtomicReference<Throwable> error = new AtomicReference<Throwable>();
1:230a86c: 
1:da7478d:     public StubConnection(BrokerService broker) throws Exception {
1:230a86c:         this(TransportFactory.connect(broker.getVmConnectorURI()));
13:d29ca2a:     }
1:da7478d: 
1:d29ca2a:     public StubConnection(Connection connection) {
1:d29ca2a:         this.connection = connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public StubConnection(Transport transport) throws Exception {
1:645037e:         this(transport, null);
1:645037e:     }
1:645037e: 
1:645037e:     public StubConnection(Transport transport, TransportListener transportListener) throws Exception {
1:645037e:         listener = transportListener;
1:d29ca2a:         this.transport = transport;
1:f915da5:         transport.setTransportListener(new DefaultTransportListener() {
1:9ca56a0:             public void onCommand(Object command) {
2:d29ca2a:                 try {
1:a2fc7a2:                     if (command.getClass() == ShutdownInfo.class) {
1:d29ca2a:                         shuttingDown = true;
1:d29ca2a:                     }
2:d29ca2a:                     StubConnection.this.dispatch(command);
1:230a86c:                 } catch (Exception e) {
1:d29ca2a:                     onException(new IOException("" + e));
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a: 
1:eccb337:             public void onException(IOException e) {
1:01bdc52:                 if (listener != null) {
1:eccb337:                     listener.onException(e);
1:01bdc52:                 }
1:eccb337:                 error.set(e);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         transport.start();
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     protected void dispatch(Object command) throws InterruptedException, IOException {
1:01bdc52:         if (listener != null) {
1:01bdc52:             listener.onCommand(command);
1:01bdc52:         }
1:933eb2f:         dispatchQueue.put(command);
1:933eb2f:     }
1:933eb2f: 
1:933eb2f:     public BlockingQueue<Object> getDispatchQueue() {
1:d29ca2a:         return dispatchQueue;
1:230a86c:     }
1:d29ca2a: 
1:7f5213b:     public void send(Command command) throws Exception {
1:230a86c:         if (command instanceof Message) {
1:230a86c:             Message message = (Message)command;
1:d29ca2a:             message.setProducerId(message.getMessageId().getProducerId());
1:da7478d:         }
1:d29ca2a:         command.setResponseRequired(false);
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             Response response = connection.service(command);
1:d29ca2a:             if (response != null && response.isException()) {
1:230a86c:                 ExceptionResponse er = (ExceptionResponse)response;
1:7f5213b:                 throw JMSExceptionSupport.create(er.getException());
1:d29ca2a:             }
1:230a86c:         } else if (transport != null) {
1:d29ca2a:             transport.oneway(command);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public Response request(Command command) throws Exception {
1:230a86c:         if (command instanceof Message) {
1:230a86c:             Message message = (Message)command;
1:d29ca2a:             message.setProducerId(message.getMessageId().getProducerId());
1:d29ca2a:         }
1:d29ca2a:         command.setResponseRequired(true);
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             Response response = connection.service(command);
1:d29ca2a:             if (response != null && response.isException()) {
1:230a86c:                 ExceptionResponse er = (ExceptionResponse)response;
1:7f5213b:                 throw JMSExceptionSupport.create(er.getException());
1:d29ca2a:             }
1:d29ca2a:             return response;
1:230a86c:         } else if (transport != null) {
1:230a86c:             Response response = (Response)transport.request(command);
1:d29ca2a:             if (response != null && response.isException()) {
1:230a86c:                 ExceptionResponse er = (ExceptionResponse)response;
1:7f5213b:                 throw JMSExceptionSupport.create(er.getException());
1:d29ca2a:             }
1:d29ca2a:             return response;
1:d29ca2a:         }
1:d29ca2a:         return null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Connection getConnection() {
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Transport getTransport() {
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:         shuttingDown = true;
1:d29ca2a:         if (transport != null) {
1:d29ca2a:             try {
1:d29ca2a:                 transport.oneway(new ShutdownInfo());
1:230a86c:             } catch (IOException e) {
1:d29ca2a:             }
1:d29ca2a:             ServiceSupport.dispose(transport);
1:d29ca2a:         }
1:d29ca2a:     }
1:01bdc52: 
1:01bdc52:     public TransportListener getListener() {
1:01bdc52:         return listener;
1:01bdc52:     }
1:01bdc52: 
1:01bdc52:     public void setListener(TransportListener listener) {
1:01bdc52:         this.listener = listener;
1:01bdc52:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:645037e
/////////////////////////////////////////////////////////////////////////
1:         this(transport, null);
1:     }
1: 
1:     public StubConnection(Transport transport, TransportListener transportListener) throws Exception {
1:         listener = transportListener;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:eccb337
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1:     public AtomicReference<Throwable> error = new AtomicReference<Throwable>();
/////////////////////////////////////////////////////////////////////////
1:             public void onException(IOException e) {
1:                     listener.onException(e);
1:                 error.set(e);
commit:01bdc52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
1:     private TransportListener listener;
/////////////////////////////////////////////////////////////////////////
1:                 if (listener != null) {
0:                     listener.onException(error);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         if (listener != null) {
1:             listener.onCommand(command);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     public TransportListener getListener() {
1:         return listener;
1:     }
1: 
1:     public void setListener(TransportListener listener) {
1:         this.listener = listener;
1:     }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private final BlockingQueue<Object> dispatchQueue = new LinkedBlockingQueue<Object>();
1:     private boolean shuttingDown;
/////////////////////////////////////////////////////////////////////////
1:     protected void dispatch(Object command) throws InterruptedException, IOException {
1:         dispatchQueue.put(command);
1:     }
1: 
1:     public BlockingQueue<Object> getDispatchQueue() {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.LinkedBlockingQueue;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     boolean shuttingDown;
1: 
1:         this(TransportFactory.connect(broker.getVmConnectorURI()));
1:     }
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
0:     public BlockingQueue getDispatchQueue() {
1:         if (command instanceof Message) {
1:             Message message = (Message)command;
1:                 ExceptionResponse er = (ExceptionResponse)response;
1:         } else if (transport != null) {
1:         if (command instanceof Message) {
1:             Message message = (Message)command;
1:                 ExceptionResponse er = (ExceptionResponse)response;
1:         } else if (transport != null) {
1:             Response response = (Response)transport.request(command);
1:                 ExceptionResponse er = (ExceptionResponse)response;
/////////////////////////////////////////////////////////////////////////
1:             } catch (IOException e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.BlockingQueue;
0: import java.util.concurrent.LinkedBlockingQueue;
commit:da7478d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportFactory;
/////////////////////////////////////////////////////////////////////////
1:     public StubConnection(BrokerService broker) throws Exception {
0: 		this(TransportFactory.connect(broker.getVmConnectorURI()));
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
0: 	public BlockingQueue getDispatchQueue() {
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected void dispatch(Object command) throws InterruptedException, IOException {
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
0:             Response response = (Response) transport.request(command);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.JMSExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:     public void send(Command command) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 throw JMSExceptionSupport.create(er.getException());
/////////////////////////////////////////////////////////////////////////
1:     public Response request(Command command) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 throw JMSExceptionSupport.create(er.getException());
/////////////////////////////////////////////////////////////////////////
1:                 throw JMSExceptionSupport.create(er.getException());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.Service;
0: import org.apache.activemq.broker.AbstractConnection;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.ShutdownInfo;
0: import org.apache.activemq.thread.TaskRunnerFactory;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.util.ServiceSupport;
0: import org.axiondb.engine.commands.ShutdownCommand;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue;
1: 
1: public class StubConnection implements Service {
1: 
0:     private final BlockingQueue dispatchQueue = new LinkedBlockingQueue();
1:     private Connection connection;
1:     private Transport transport;
0:     boolean shuttingDown = false;
1: 
0:     public StubConnection(BrokerService broker) throws Exception {
0:         this(broker, null);
1:     }
1: 
0:     public StubConnection(BrokerService broker, TaskRunnerFactory taskRunnerFactory) throws Exception {
0:         connection = new AbstractConnection(null, broker.getBroker(), null) {
0:             protected void dispatch(Command command) {
1:                 try {
1:                     StubConnection.this.dispatch(command);
1:                 }
0:                 catch (Exception e) {
0:                     serviceException(e);
1:                 }
1:             }
0:         };
1:     }
1: 
0:     protected void dispatch(Command command) throws InterruptedException, IOException {
0:         dispatchQueue.put(command);
1:     }
1: 
1:     public StubConnection(Connection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     public StubConnection(Transport transport) throws Exception {
1:         this.transport = transport;
0:         transport.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
1:                 try {
0:                     if (command.getClass() == ShutdownCommand.class) {
1:                         shuttingDown = true;
1:                     }
1:                     StubConnection.this.dispatch(command);
1:                 }
0:                 catch (Exception e) {
1:                     onException(new IOException("" + e));
1:                 }
1:             }
1: 
0:             public void onException(IOException error) {
0:                 if (!shuttingDown) {
0:                     error.printStackTrace();
1:                 }
1:             }
1:         });
1:         transport.start();
1:     }
1: 
0:     public BlockingQueue getDispatchQueue() {
1:         return dispatchQueue;
1:     }
1: 
0:     public void send(Command command) throws Throwable {
0:         if( command instanceof Message ) {
0:             Message message = (Message) command;
1:             message.setProducerId(message.getMessageId().getProducerId());
1:         }
1:         command.setResponseRequired(false);
1:         if (connection != null) {
1:             Response response = connection.service(command);
1:             if (response != null && response.isException()) {
0:                 ExceptionResponse er = (ExceptionResponse) response;
0:                 throw er.getException();
1:             }
1:         }
0:         else if (transport != null) {
1:             transport.oneway(command);
1:         }
1:     }
1: 
0:     public Response request(Command command) throws Throwable {
0:         if( command instanceof Message ) {
0:             Message message = (Message) command;
1:             message.setProducerId(message.getMessageId().getProducerId());
1:         }
1:         command.setResponseRequired(true);
1:         if (connection != null) {
1:             Response response = connection.service(command);
1:             if (response != null && response.isException()) {
0:                 ExceptionResponse er = (ExceptionResponse) response;
0:                 throw er.getException();
1:             }
1:             return response;
1:         }
0:         else if (transport != null) {
0:             Response response = transport.request(command);
1:             if (response != null && response.isException()) {
0:                 ExceptionResponse er = (ExceptionResponse) response;
0:                 throw er.getException();
1:             }
1:             return response;
1:         }
1:         return null;
1:     }
1: 
1:     public Connection getConnection() {
1:         return connection;
1:     }
1: 
1:     public Transport getTransport() {
1:         return transport;
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:         shuttingDown = true;
1:         if (transport != null) {
1:             try {
1:                 transport.oneway(new ShutdownInfo());
1:             }
0:             catch (IOException e) {
1:             }
1:             ServiceSupport.dispose(transport);
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
0: 
0: 			public String getRemoteAddress() {
0: 				return null;
0: 			}
commit:8704338
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.openwire.OpenWireFormat;
/////////////////////////////////////////////////////////////////////////
0:     private OpenWireFormat wireFormat = new OpenWireFormat();
0:     
/////////////////////////////////////////////////////////////////////////
0: 
0:             protected OpenWireFormat getWireFormat() {
0:                 return wireFormat;
0:             }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:a2fc7a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     if (command.getClass() == ShutdownInfo.class) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:f915da5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.DefaultTransportListener;
/////////////////////////////////////////////////////////////////////////
1:         transport.setTransportListener(new DefaultTransportListener() {
============================================================================