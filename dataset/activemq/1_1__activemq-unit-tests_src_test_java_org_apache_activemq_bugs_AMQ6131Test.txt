1:193f6be: /*
1:193f6be:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:193f6be:  * contributor license agreements.  See the NOTICE file distributed with
1:193f6be:  * this work for additional information regarding copyright ownership.
1:193f6be:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:193f6be:  * (the "License"); you may not use this file except in compliance with
1:193f6be:  * the License.  You may obtain a copy of the License at
1:193f6be:  *
1:193f6be:  *      http://www.apache.org/licenses/LICENSE-2.0
1:193f6be:  *
1:193f6be:  * Unless required by applicable law or agreed to in writing, software
1:193f6be:  * distributed under the License is distributed on an "AS IS" BASIS,
1:193f6be:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:193f6be:  * See the License for the specific language governing permissions and
1:193f6be:  * limitations under the License.
1:193f6be:  */
1:193f6be: package org.apache.activemq.bugs;
1:193f6be: 
1:193f6be: import static org.junit.Assert.assertEquals;
1:193f6be: import static org.junit.Assert.assertFalse;
1:193f6be: import static org.junit.Assert.assertNotNull;
1:193f6be: import static org.junit.Assert.assertNull;
1:193f6be: import static org.junit.Assert.assertTrue;
1:193f6be: 
1:193f6be: import java.io.File;
1:193f6be: import java.io.IOException;
1:193f6be: import java.net.URI;
1:193f6be: import java.util.ArrayList;
1:193f6be: import java.util.Random;
1:193f6be: import java.util.concurrent.atomic.AtomicInteger;
1:193f6be: 
1:193f6be: import javax.jms.MessageProducer;
1:193f6be: import javax.jms.Session;
1:193f6be: import javax.jms.TopicSubscriber;
1:193f6be: 
1:193f6be: import org.apache.activemq.ActiveMQConnection;
1:193f6be: import org.apache.activemq.ActiveMQConnectionFactory;
1:193f6be: import org.apache.activemq.broker.BrokerService;
1:193f6be: import org.apache.activemq.broker.TransportConnector;
1:193f6be: import org.apache.activemq.command.ActiveMQBytesMessage;
1:193f6be: import org.apache.activemq.command.ActiveMQTopic;
1:193f6be: import org.apache.activemq.store.kahadb.MessageDatabase;
1:193f6be: import org.apache.activemq.util.ByteSequence;
1:193f6be: import org.apache.activemq.util.Wait;
1:193f6be: import org.apache.activemq.util.Wait.Condition;
1:193f6be: import org.apache.commons.io.FileUtils;
1:193f6be: import org.apache.commons.io.filefilter.TrueFileFilter;
1:193f6be: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:193f6be: import org.apache.log4j.Level;
1:193f6be: import org.junit.After;
1:193f6be: import org.junit.Before;
1:193f6be: import org.junit.Test;
1:193f6be: 
1:193f6be: /**
1:193f6be:  * This class is to show that a durable can lose messages after index deletion.
1:193f6be:  */
1:193f6be: public class AMQ6131Test {
1:193f6be: 
1:193f6be:     protected BrokerService broker;
1:193f6be:     protected URI brokerConnectURI;
1:193f6be: 
1:193f6be:     @Before
1:193f6be:     public void startBroker() throws Exception {
1:193f6be:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1:193f6be:         setUpBroker(true);
1:193f6be:     }
1:193f6be: 
1:193f6be:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1:193f6be: 
1:193f6be:         broker = new BrokerService();
1:193f6be:         broker.setPersistent(true);
1:193f6be:         broker.setDeleteAllMessagesOnStartup(clearDataDir);
1:193f6be: 
1:193f6be:         // set up a transport
1:193f6be:         TransportConnector connector = broker.addConnector(new TransportConnector());
1:193f6be:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:193f6be:         connector.setName("tcp");
1:193f6be: 
1:193f6be:         broker.start();
1:193f6be:         broker.waitUntilStarted();
1:193f6be:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:193f6be:     }
1:193f6be: 
1:193f6be:     @After
1:193f6be:     public void stopBroker() throws Exception {
1:193f6be:         broker.stop();
1:193f6be:         broker.waitUntilStopped();
1:193f6be:     }
1:193f6be: 
1:193f6be:     protected BrokerService getBroker() {
1:193f6be:         return this.broker;
1:193f6be:     }
1:193f6be: 
1:193f6be:     public File getPersistentDir() throws IOException {
1:193f6be:         return getBroker().getPersistenceAdapter().getDirectory();
1:193f6be:     }
1:193f6be: 
1:193f6be:     @Test(timeout = 300000)
1:193f6be:     public void testDurableWithOnePendingAfterRestartAndIndexRecovery() throws Exception {
1:193f6be:         final File persistentDir = getPersistentDir();
1:193f6be: 
1:193f6be:         broker.getBroker().addDestination(broker.getAdminConnectionContext(), new ActiveMQTopic("durable.sub"), false);
1:193f6be: 
1:193f6be:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:193f6be:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:193f6be:         connection.setClientID("myId");
1:193f6be:         connection.start();
1:193f6be:         final Session jmsSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:193f6be: 
1:193f6be:         TopicSubscriber durable = jmsSession.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:193f6be:         final MessageProducer producer = jmsSession.createProducer(new ActiveMQTopic("durable.sub"));
1:193f6be: 
1:193f6be:         final int original = new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1:193f6be: 
1:193f6be:         // 100k messages
1:193f6be:         final byte[] data = new byte[100000];
1:193f6be:         final Random random = new Random();
1:193f6be:         random.nextBytes(data);
1:193f6be: 
1:193f6be:         // run test with enough messages to create a second journal file
1:193f6be:         final AtomicInteger messageCount = new AtomicInteger();
1:193f6be:         assertTrue("Should have added a journal file", Wait.waitFor(new Condition() {
1:193f6be: 
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 final ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:193f6be:                 message.setContent(new ByteSequence(data));
1:193f6be: 
1:193f6be:                 for (int i = 0; i < 100; i++) {
1:193f6be:                     producer.send(message);
1:193f6be:                     messageCount.getAndIncrement();
1:193f6be:                 }
1:193f6be: 
1:193f6be:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() > original;
1:193f6be:             }
1:193f6be:         }));
1:193f6be: 
1:193f6be:         // Consume all but 1 message
1:193f6be:         for (int i = 0; i < messageCount.get() - 1; i++) {
1:193f6be:             durable.receive();
1:193f6be:         }
1:193f6be: 
1:193f6be:         durable.close();
1:193f6be: 
1:193f6be:         // wait until a journal file has been GC'd after receiving messages
1:193f6be:         assertTrue("Subscription should go inactive", Wait.waitFor(new Condition() {
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:193f6be:             }
1:193f6be:         }));
1:193f6be: 
1:193f6be:         // force a GC of unneeded journal files
1:193f6be:         getBroker().getPersistenceAdapter().checkpoint(true);
1:193f6be: 
1:193f6be:         // wait until a journal file has been GC'd after receiving messages
1:193f6be:         assertFalse("Should not have garbage collected", Wait.waitFor(new Wait.Condition() {
1:193f6be: 
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() == original;
1:193f6be:             }
1:193f6be:         }, 5000, 500));
1:193f6be: 
1:193f6be:         // stop the broker so we can blow away the index
1:193f6be:         getBroker().stop();
1:193f6be:         getBroker().waitUntilStopped();
1:193f6be: 
1:193f6be:         // delete the index so that the durables are gone from the index
1:193f6be:         // The test passes if you take out this delete section
1:193f6be:         for (File index : FileUtils.listFiles(persistentDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:193f6be:             FileUtils.deleteQuietly(index);
1:193f6be:         }
1:193f6be: 
1:193f6be:         stopBroker();
1:193f6be:         setUpBroker(false);
1:193f6be: 
1:193f6be:         assertEquals(1, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:193f6be:         assertEquals(0, broker.getAdminView().getDurableTopicSubscribers().length);
1:193f6be: 
1:193f6be:         ActiveMQConnectionFactory connectionFactory2 = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:193f6be:         ActiveMQConnection connection2 = (ActiveMQConnection) connectionFactory2.createConnection();
1:193f6be:         connection2.setClientID("myId");
1:193f6be:         connection2.start();
1:193f6be:         final Session jmsSession2 = connection2.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:193f6be: 
1:193f6be:         TopicSubscriber durable2 = jmsSession2.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:193f6be: 
1:193f6be:         assertEquals(0, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:193f6be:         assertEquals(1, broker.getAdminView().getDurableTopicSubscribers().length);
1:193f6be: 
1:193f6be:         assertNotNull(durable2.receive(5000));
1:193f6be:     }
1:193f6be: 
1:193f6be:     @Test(timeout = 300000)
1:193f6be:     public void testDurableWithNoMessageAfterRestartAndIndexRecovery() throws Exception {
1:193f6be:         final File persistentDir = getPersistentDir();
1:193f6be: 
1:193f6be:         broker.getBroker().addDestination(broker.getAdminConnectionContext(), new ActiveMQTopic("durable.sub"), false);
1:193f6be: 
1:193f6be:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:193f6be:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:193f6be:         connection.setClientID("myId");
1:193f6be:         connection.start();
1:193f6be:         final Session jmsSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:193f6be: 
1:193f6be:         TopicSubscriber durable = jmsSession.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:193f6be:         final MessageProducer producer = jmsSession.createProducer(new ActiveMQTopic("durable.sub"));
1:193f6be: 
1:193f6be:         final int original = new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1:193f6be: 
1:193f6be:         // 100k messages
1:193f6be:         final byte[] data = new byte[100000];
1:193f6be:         final Random random = new Random();
1:193f6be:         random.nextBytes(data);
1:193f6be: 
1:193f6be:         // run test with enough messages to create a second journal file
1:193f6be:         final AtomicInteger messageCount = new AtomicInteger();
1:193f6be:         assertTrue("Should have added a journal file", Wait.waitFor(new Condition() {
1:193f6be: 
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 final ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:193f6be:                 message.setContent(new ByteSequence(data));
1:193f6be: 
1:193f6be:                 for (int i = 0; i < 100; i++) {
1:193f6be:                     producer.send(message);
1:193f6be:                     messageCount.getAndIncrement();
1:193f6be:                 }
1:193f6be: 
1:193f6be:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() > original;
1:193f6be:             }
1:193f6be:         }));
1:193f6be: 
1:193f6be:         // Consume all messages
1:193f6be:         for (int i = 0; i < messageCount.get(); i++) {
1:193f6be:             durable.receive();
1:193f6be:         }
1:193f6be: 
1:193f6be:         durable.close();
1:193f6be: 
1:193f6be:         assertTrue("Subscription should go inactive", Wait.waitFor(new Condition() {
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:193f6be:             }
1:193f6be:         }));
1:193f6be: 
1:193f6be:         // force a GC of unneeded journal files
1:193f6be:         getBroker().getPersistenceAdapter().checkpoint(true);
1:193f6be: 
1:193f6be:         // wait until a journal file has been GC'd after receiving messages
1:193f6be:         assertTrue("Should have garbage collected", Wait.waitFor(new Wait.Condition() {
1:193f6be: 
1:193f6be:             @Override
1:193f6be:             public boolean isSatisified() throws Exception {
1:193f6be:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() == original;
1:193f6be:             }
1:193f6be:         }));
1:193f6be: 
1:193f6be:         // stop the broker so we can blow away the index
1:193f6be:         getBroker().stop();
1:193f6be:         getBroker().waitUntilStopped();
1:193f6be: 
1:193f6be:         // delete the index so that the durables are gone from the index
1:193f6be:         // The test passes if you take out this delete section
1:193f6be:         for (File index : FileUtils.listFiles(persistentDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:193f6be:             FileUtils.deleteQuietly(index);
1:193f6be:         }
1:193f6be: 
1:193f6be:         stopBroker();
1:193f6be:         setUpBroker(false);
1:193f6be: 
1:193f6be:         assertEquals(1, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:193f6be:         assertEquals(0, broker.getAdminView().getDurableTopicSubscribers().length);
1:193f6be: 
1:193f6be:         ActiveMQConnectionFactory connectionFactory2 = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:193f6be:         ActiveMQConnection connection2 = (ActiveMQConnection) connectionFactory2.createConnection();
1:193f6be:         connection2.setClientID("myId");
1:193f6be:         connection2.start();
1:193f6be:         final Session jmsSession2 = connection2.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:193f6be: 
1:193f6be:         TopicSubscriber durable2 = jmsSession2.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:193f6be: 
1:193f6be:         assertEquals(0, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:193f6be:         assertEquals(1, broker.getAdminView().getDurableTopicSubscribers().length);
1:193f6be: 
1:193f6be:         assertNull(durable2.receive(500));
1:193f6be:     }
1:193f6be: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:193f6be
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Random;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.MessageDatabase;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.filefilter.TrueFileFilter;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
1: import org.apache.log4j.Level;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * This class is to show that a durable can lose messages after index deletion.
1:  */
1: public class AMQ6131Test {
1: 
1:     protected BrokerService broker;
1:     protected URI brokerConnectURI;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1:         setUpBroker(true);
1:     }
1: 
1:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(clearDataDir);
1: 
1:         // set up a transport
1:         TransportConnector connector = broker.addConnector(new TransportConnector());
1:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:         connector.setName("tcp");
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService getBroker() {
1:         return this.broker;
1:     }
1: 
1:     public File getPersistentDir() throws IOException {
1:         return getBroker().getPersistenceAdapter().getDirectory();
1:     }
1: 
1:     @Test(timeout = 300000)
1:     public void testDurableWithOnePendingAfterRestartAndIndexRecovery() throws Exception {
1:         final File persistentDir = getPersistentDir();
1: 
1:         broker.getBroker().addDestination(broker.getAdminConnectionContext(), new ActiveMQTopic("durable.sub"), false);
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setClientID("myId");
1:         connection.start();
1:         final Session jmsSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber durable = jmsSession.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:         final MessageProducer producer = jmsSession.createProducer(new ActiveMQTopic("durable.sub"));
1: 
1:         final int original = new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1: 
1:         // 100k messages
1:         final byte[] data = new byte[100000];
1:         final Random random = new Random();
1:         random.nextBytes(data);
1: 
1:         // run test with enough messages to create a second journal file
1:         final AtomicInteger messageCount = new AtomicInteger();
1:         assertTrue("Should have added a journal file", Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 final ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:                 message.setContent(new ByteSequence(data));
1: 
1:                 for (int i = 0; i < 100; i++) {
1:                     producer.send(message);
1:                     messageCount.getAndIncrement();
1:                 }
1: 
1:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() > original;
1:             }
1:         }));
1: 
1:         // Consume all but 1 message
1:         for (int i = 0; i < messageCount.get() - 1; i++) {
1:             durable.receive();
1:         }
1: 
1:         durable.close();
1: 
1:         // wait until a journal file has been GC'd after receiving messages
1:         assertTrue("Subscription should go inactive", Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         // force a GC of unneeded journal files
1:         getBroker().getPersistenceAdapter().checkpoint(true);
1: 
1:         // wait until a journal file has been GC'd after receiving messages
1:         assertFalse("Should not have garbage collected", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() == original;
1:             }
1:         }, 5000, 500));
1: 
1:         // stop the broker so we can blow away the index
1:         getBroker().stop();
1:         getBroker().waitUntilStopped();
1: 
1:         // delete the index so that the durables are gone from the index
1:         // The test passes if you take out this delete section
1:         for (File index : FileUtils.listFiles(persistentDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:             FileUtils.deleteQuietly(index);
1:         }
1: 
1:         stopBroker();
1:         setUpBroker(false);
1: 
1:         assertEquals(1, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:         assertEquals(0, broker.getAdminView().getDurableTopicSubscribers().length);
1: 
1:         ActiveMQConnectionFactory connectionFactory2 = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:         ActiveMQConnection connection2 = (ActiveMQConnection) connectionFactory2.createConnection();
1:         connection2.setClientID("myId");
1:         connection2.start();
1:         final Session jmsSession2 = connection2.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber durable2 = jmsSession2.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1: 
1:         assertEquals(0, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:         assertEquals(1, broker.getAdminView().getDurableTopicSubscribers().length);
1: 
1:         assertNotNull(durable2.receive(5000));
1:     }
1: 
1:     @Test(timeout = 300000)
1:     public void testDurableWithNoMessageAfterRestartAndIndexRecovery() throws Exception {
1:         final File persistentDir = getPersistentDir();
1: 
1:         broker.getBroker().addDestination(broker.getAdminConnectionContext(), new ActiveMQTopic("durable.sub"), false);
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setClientID("myId");
1:         connection.start();
1:         final Session jmsSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber durable = jmsSession.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1:         final MessageProducer producer = jmsSession.createProducer(new ActiveMQTopic("durable.sub"));
1: 
1:         final int original = new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1: 
1:         // 100k messages
1:         final byte[] data = new byte[100000];
1:         final Random random = new Random();
1:         random.nextBytes(data);
1: 
1:         // run test with enough messages to create a second journal file
1:         final AtomicInteger messageCount = new AtomicInteger();
1:         assertTrue("Should have added a journal file", Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 final ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:                 message.setContent(new ByteSequence(data));
1: 
1:                 for (int i = 0; i < 100; i++) {
1:                     producer.send(message);
1:                     messageCount.getAndIncrement();
1:                 }
1: 
1:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() > original;
1:             }
1:         }));
1: 
1:         // Consume all messages
1:         for (int i = 0; i < messageCount.get(); i++) {
1:             durable.receive();
1:         }
1: 
1:         durable.close();
1: 
1:         assertTrue("Subscription should go inactive", Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         // force a GC of unneeded journal files
1:         getBroker().getPersistenceAdapter().checkpoint(true);
1: 
1:         // wait until a journal file has been GC'd after receiving messages
1:         assertTrue("Should have garbage collected", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return new ArrayList<File>(FileUtils.listFiles(persistentDir, new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size() == original;
1:             }
1:         }));
1: 
1:         // stop the broker so we can blow away the index
1:         getBroker().stop();
1:         getBroker().waitUntilStopped();
1: 
1:         // delete the index so that the durables are gone from the index
1:         // The test passes if you take out this delete section
1:         for (File index : FileUtils.listFiles(persistentDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:             FileUtils.deleteQuietly(index);
1:         }
1: 
1:         stopBroker();
1:         setUpBroker(false);
1: 
1:         assertEquals(1, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:         assertEquals(0, broker.getAdminView().getDurableTopicSubscribers().length);
1: 
1:         ActiveMQConnectionFactory connectionFactory2 = new ActiveMQConnectionFactory(this.brokerConnectURI);
1:         ActiveMQConnection connection2 = (ActiveMQConnection) connectionFactory2.createConnection();
1:         connection2.setClientID("myId");
1:         connection2.start();
1:         final Session jmsSession2 = connection2.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber durable2 = jmsSession2.createDurableSubscriber(new ActiveMQTopic("durable.sub"), "sub");
1: 
1:         assertEquals(0, broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:         assertEquals(1, broker.getAdminView().getDurableTopicSubscribers().length);
1: 
1:         assertNull(durable2.receive(500));
1:     }
1: }
============================================================================