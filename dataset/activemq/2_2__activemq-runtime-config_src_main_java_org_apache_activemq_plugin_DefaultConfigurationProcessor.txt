1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.util.IntrospectionSupport;
1:bbc039f: import org.slf4j.Logger;
1:bbc039f: import org.slf4j.LoggerFactory;
1:bbc039f: 
1:b488df6: import javax.annotation.PostConstruct;
1:bbc039f: import javax.xml.bind.JAXBElement;
1:bbc039f: import java.lang.reflect.Method;
1:bbc039f: import java.util.ArrayList;
1:bbc039f: import java.util.LinkedList;
1:bbc039f: import java.util.List;
1:bbc039f: import java.util.Properties;
1:bbc039f: import java.util.regex.Pattern;
1:bbc039f: import org.apache.activemq.schema.core.DtoBroker;
1:bbc039f: 
1:bbc039f: public class DefaultConfigurationProcessor implements ConfigurationProcessor {
1:bbc039f: 
1:bbc039f:     public static final Logger LOG = LoggerFactory.getLogger(DefaultConfigurationProcessor.class);
1:bbc039f:     RuntimeConfigurationBroker plugin;
1:bbc039f:     Class configurationClass;
1:bbc039f: 
1:bbc039f:     Pattern matchPassword = Pattern.compile("password=.*,");
1:bbc039f: 
1:bbc039f:     public DefaultConfigurationProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:bbc039f:         this.plugin = plugin;
1:bbc039f:         this.configurationClass = configurationClass;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void processChanges(DtoBroker currentConfiguration, DtoBroker modifiedConfiguration) {
1:bbc039f:         List current = filter(currentConfiguration, configurationClass);
1:bbc039f:         List modified = filter(modifiedConfiguration, configurationClass);
1:bbc039f: 
1:bbc039f:         if (current.equals(modified)) {
1:bbc039f:             plugin.debug("no changes to " + configurationClass.getSimpleName());
1:bbc039f:             return;
1:bbc039f:         } else {
1:bbc039f:             plugin.info("changes to " + configurationClass.getSimpleName());
1:bbc039f:         }
1:bbc039f: 
1:bbc039f:         processChanges(current, modified);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void processChanges(List current, List modified) {
1:bbc039f:         int modIndex = 0, currentIndex = 0;
1:bbc039f:         for (; modIndex < modified.size() && currentIndex < current.size(); modIndex++, currentIndex++) {
1:bbc039f:             // walk the list for mods
1:bbc039f:             applyModifications(getContents(current.get(currentIndex)),
1:bbc039f:                     getContents(modified.get(modIndex)));
1:bbc039f:         }
1:bbc039f: 
1:bbc039f:         for (; modIndex < modified.size(); modIndex++) {
1:bbc039f:             // new element; add all
1:bbc039f:             for (Object nc : getContents(modified.get(modIndex))) {
1:bbc039f:                 ConfigurationProcessor processor = findProcessor(nc);
1:bbc039f:                 if (processor != null) {
1:bbc039f:                     processor.addNew(nc);
1:bbc039f:                 } else {
1:bbc039f:                     addNew(nc);
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f: 
1:bbc039f:         for (; currentIndex < current.size(); currentIndex++) {
1:bbc039f:             // removal of element; remove all
1:bbc039f:             for (Object nc : getContents(current.get(currentIndex))) {
1:bbc039f:                 ConfigurationProcessor processor = findProcessor(nc);
1:bbc039f:                 if (processor != null) {
1:bbc039f:                     processor.remove(nc);
1:bbc039f:                 } else {
1:bbc039f:                     remove(nc);
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected void applyModifications(List<Object> current, List<Object> modification) {
1:bbc039f:         int modIndex = 0, currentIndex = 0;
1:bbc039f:         for (; modIndex < modification.size() && currentIndex < current.size(); modIndex++, currentIndex++) {
1:bbc039f:             Object existing = current.get(currentIndex);
1:bbc039f:             Object candidate = modification.get(modIndex);
1:bbc039f:             if (!existing.equals(candidate)) {
1:c1e94c6:                 plugin.debug("modification to:" + existing + " , with: " + candidate);
1:bbc039f:                 ConfigurationProcessor processor = findProcessor(existing);
1:bbc039f:                 if (processor != null) {
1:bbc039f:                     processor.modify(existing, candidate);
1:bbc039f:                 } else {
1:bbc039f:                     modify(existing, candidate);
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         for (; modIndex < modification.size(); modIndex++) {
1:bbc039f:             Object mod = modification.get(modIndex);
1:bbc039f:             ConfigurationProcessor processor = findProcessor(mod);
1:bbc039f:             if (processor != null) {
1:bbc039f:                 processor.addNew(mod);
1:bbc039f:             } else {
1:bbc039f:                 addNew(mod);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         for (; currentIndex < current.size(); currentIndex++) {
1:bbc039f:             Object mod = current.get(currentIndex);
1:bbc039f:             ConfigurationProcessor processor = findProcessor(mod);
1:bbc039f:             if (processor != null) {
1:bbc039f:                 processor.remove(mod);
1:bbc039f:             } else {
1:bbc039f:                 remove(mod);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void modify(Object existing, Object candidate) {
1:bbc039f:         remove(existing);
1:bbc039f:         addNew(candidate);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void addNew(Object o) {
1:bbc039f:         plugin.info("No runtime support for additions of " + o);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void remove(Object o) {
1:bbc039f:         plugin.info("No runtime support for removal of: " + o);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public ConfigurationProcessor findProcessor(Object o) {
1:bbc039f:         plugin.info("No processor for " + o);
1:bbc039f:         return null;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     // mapping all supported updatable elements to support getContents
1:bbc039f:     protected List<Object> getContents(Object o) {
1:bbc039f:         List<Object> answer = new ArrayList<Object>();
1:bbc039f:         try {
1:bbc039f:             Object val = o.getClass().getMethod("getContents", new Class[]{}).invoke(o, new Object[]{});
1:bbc039f:             if (val instanceof List) {
1:bbc039f:                 answer = (List<Object>) val;
1:bbc039f:             } else {
1:bbc039f:                 answer.add(val);
1:bbc039f:             }
1:bbc039f:         } catch (NoSuchMethodException mappingIncomplete) {
1:bbc039f:             plugin.debug(filterPasswords(o) + " has no modifiable elements");
1:bbc039f:         } catch (Exception e) {
1:bbc039f:             plugin.info("Failed to access getContents for " + o + ", runtime modifications not supported", e);
1:bbc039f:         }
1:bbc039f:         return answer;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected String filterPasswords(Object toEscape) {
1:bbc039f:         return matchPassword.matcher(toEscape.toString()).replaceAll("password=???,");
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected <T> List<Object> filter(Object obj, Class<T> type) {
1:bbc039f:         return filter(getContents(obj), type);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected <T> List<Object> filter(List<Object> objectList, Class<T> type) {
1:bbc039f:         List<Object> result = new LinkedList<Object>();
1:bbc039f:         for (Object o : objectList) {
1:bbc039f:             if (o instanceof JAXBElement) {
1:bbc039f:                 JAXBElement element = (JAXBElement) o;
1:bbc039f:                 if (type.isAssignableFrom(element.getDeclaredType())) {
1:bbc039f:                     result.add((T) element.getValue());
1:bbc039f:                 }
1:bbc039f:             } else if (type.isAssignableFrom(o.getClass())) {
1:bbc039f:                 result.add((T) o);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         return result;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected <T> T fromDto(Object dto, T instance) {
1:bbc039f:         Properties properties = new Properties();
1:bbc039f:         IntrospectionSupport.getProperties(dto, properties, null);
1:bbc039f:         plugin.placeHolderUtil.filter(properties);
1:bbc039f:         LOG.trace("applying props: " + filterPasswords(properties) + ", to " + instance.getClass().getSimpleName());
1:bbc039f:         IntrospectionSupport.setProperties(instance, properties);
1:bbc039f: 
1:bbc039f:         // deal with nested elements
1:bbc039f:         for (Object nested : filter(dto, Object.class)) {
1:bbc039f:             String elementName = nested.getClass().getSimpleName();
1:bbc039f:             Method setter = JAXBUtils.findSetter(instance, elementName);
1:bbc039f:             if (setter != null) {
1:bbc039f:                 List<Object> argument = new LinkedList<Object>();
1:bbc039f:                 for (Object elementContent : filter(nested, Object.class)) {
1:bbc039f:                     argument.add(fromDto(elementContent, JAXBUtils.inferTargetObject(elementContent)));
1:bbc039f:                 }
1:bbc039f:                 try {
1:bbc039f:                     setter.invoke(instance, JAXBUtils.matchType(argument, setter.getParameterTypes()[0]));
1:bbc039f:                 } catch (Exception e) {
1:b488df6:                     plugin.info("failed to invoke " + setter + " on " + instance + " with args " + argument, e);
1:bbc039f:                 }
1:bbc039f:             } else {
1:bbc039f:                 plugin.info("failed to find setter for " + elementName + " on :" + instance);
1:bbc039f:             }
1:bbc039f:         }
1:b488df6:         invokePostConstruct(instance);
1:bbc039f:         return instance;
1:bbc039f:     }
1:b488df6: 
1:b488df6:     private <T> void invokePostConstruct(T instance) {
1:b488df6:         try {
1:b488df6:             for (Method m : instance.getClass().getDeclaredMethods()) {
1:b488df6:                 if (m.isAnnotationPresent(PostConstruct.class) && m.getParameterCount() == 0) {
1:b488df6:                     try {
1:b488df6:                         JAXBUtils.ensureAccessible(m);
1:b488df6:                         m.invoke(instance, null);
1:b488df6:                     } catch (Exception e) {
1:b488df6:                         plugin.info("failed to invoke @PostConstruct method " + m + " on " + instance, e);
1:b488df6:                     }
1:b488df6:                 }
1:b488df6:             }
1:b488df6:         } catch (Exception ignored) {}
1:b488df6:     }
1:bbc039f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b488df6
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
/////////////////////////////////////////////////////////////////////////
1:                     plugin.info("failed to invoke " + setter + " on " + instance + " with args " + argument, e);
1:         invokePostConstruct(instance);
1: 
1:     private <T> void invokePostConstruct(T instance) {
1:         try {
1:             for (Method m : instance.getClass().getDeclaredMethods()) {
1:                 if (m.isAnnotationPresent(PostConstruct.class) && m.getParameterCount() == 0) {
1:                     try {
1:                         JAXBUtils.ensureAccessible(m);
1:                         m.invoke(instance, null);
1:                     } catch (Exception e) {
1:                         plugin.info("failed to invoke @PostConstruct method " + m + " on " + instance, e);
1:                     }
1:                 }
1:             }
1:         } catch (Exception ignored) {}
1:     }
commit:c1e94c6
/////////////////////////////////////////////////////////////////////////
1:                 plugin.debug("modification to:" + existing + " , with: " + candidate);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.xml.bind.JAXBElement;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Properties;
1: import java.util.regex.Pattern;
1: import org.apache.activemq.schema.core.DtoBroker;
1: 
1: public class DefaultConfigurationProcessor implements ConfigurationProcessor {
1: 
1:     public static final Logger LOG = LoggerFactory.getLogger(DefaultConfigurationProcessor.class);
1:     RuntimeConfigurationBroker plugin;
1:     Class configurationClass;
1: 
1:     Pattern matchPassword = Pattern.compile("password=.*,");
1: 
1:     public DefaultConfigurationProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         this.plugin = plugin;
1:         this.configurationClass = configurationClass;
1:     }
1: 
1:     @Override
1:     public void processChanges(DtoBroker currentConfiguration, DtoBroker modifiedConfiguration) {
1:         List current = filter(currentConfiguration, configurationClass);
1:         List modified = filter(modifiedConfiguration, configurationClass);
1: 
1:         if (current.equals(modified)) {
1:             plugin.debug("no changes to " + configurationClass.getSimpleName());
1:             return;
1:         } else {
1:             plugin.info("changes to " + configurationClass.getSimpleName());
1:         }
1: 
1:         processChanges(current, modified);
1:     }
1: 
1:     public void processChanges(List current, List modified) {
1:         int modIndex = 0, currentIndex = 0;
1:         for (; modIndex < modified.size() && currentIndex < current.size(); modIndex++, currentIndex++) {
1:             // walk the list for mods
1:             applyModifications(getContents(current.get(currentIndex)),
1:                     getContents(modified.get(modIndex)));
1:         }
1: 
1:         for (; modIndex < modified.size(); modIndex++) {
1:             // new element; add all
1:             for (Object nc : getContents(modified.get(modIndex))) {
1:                 ConfigurationProcessor processor = findProcessor(nc);
1:                 if (processor != null) {
1:                     processor.addNew(nc);
1:                 } else {
1:                     addNew(nc);
1:                 }
1:             }
1:         }
1: 
1:         for (; currentIndex < current.size(); currentIndex++) {
1:             // removal of element; remove all
1:             for (Object nc : getContents(current.get(currentIndex))) {
1:                 ConfigurationProcessor processor = findProcessor(nc);
1:                 if (processor != null) {
1:                     processor.remove(nc);
1:                 } else {
1:                     remove(nc);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected void applyModifications(List<Object> current, List<Object> modification) {
1:         int modIndex = 0, currentIndex = 0;
1:         for (; modIndex < modification.size() && currentIndex < current.size(); modIndex++, currentIndex++) {
1:             Object existing = current.get(currentIndex);
1:             Object candidate = modification.get(modIndex);
1:             if (!existing.equals(candidate)) {
0:                 plugin.info("modification to:" + existing + " , with: " + candidate);
1:                 ConfigurationProcessor processor = findProcessor(existing);
1:                 if (processor != null) {
1:                     processor.modify(existing, candidate);
1:                 } else {
1:                     modify(existing, candidate);
1:                 }
1:             }
1:         }
1:         for (; modIndex < modification.size(); modIndex++) {
1:             Object mod = modification.get(modIndex);
1:             ConfigurationProcessor processor = findProcessor(mod);
1:             if (processor != null) {
1:                 processor.addNew(mod);
1:             } else {
1:                 addNew(mod);
1:             }
1:         }
1:         for (; currentIndex < current.size(); currentIndex++) {
1:             Object mod = current.get(currentIndex);
1:             ConfigurationProcessor processor = findProcessor(mod);
1:             if (processor != null) {
1:                 processor.remove(mod);
1:             } else {
1:                 remove(mod);
1:             }
1:         }
1:     }
1: 
1:     public void modify(Object existing, Object candidate) {
1:         remove(existing);
1:         addNew(candidate);
1:     }
1: 
1:     public void addNew(Object o) {
1:         plugin.info("No runtime support for additions of " + o);
1:     }
1: 
1:     public void remove(Object o) {
1:         plugin.info("No runtime support for removal of: " + o);
1:     }
1: 
1:     @Override
1:     public ConfigurationProcessor findProcessor(Object o) {
1:         plugin.info("No processor for " + o);
1:         return null;
1:     }
1: 
1:     // mapping all supported updatable elements to support getContents
1:     protected List<Object> getContents(Object o) {
1:         List<Object> answer = new ArrayList<Object>();
1:         try {
1:             Object val = o.getClass().getMethod("getContents", new Class[]{}).invoke(o, new Object[]{});
1:             if (val instanceof List) {
1:                 answer = (List<Object>) val;
1:             } else {
1:                 answer.add(val);
1:             }
1:         } catch (NoSuchMethodException mappingIncomplete) {
1:             plugin.debug(filterPasswords(o) + " has no modifiable elements");
1:         } catch (Exception e) {
1:             plugin.info("Failed to access getContents for " + o + ", runtime modifications not supported", e);
1:         }
1:         return answer;
1:     }
1: 
1:     protected String filterPasswords(Object toEscape) {
1:         return matchPassword.matcher(toEscape.toString()).replaceAll("password=???,");
1:     }
1: 
1:     protected <T> List<Object> filter(Object obj, Class<T> type) {
1:         return filter(getContents(obj), type);
1:     }
1: 
1:     protected <T> List<Object> filter(List<Object> objectList, Class<T> type) {
1:         List<Object> result = new LinkedList<Object>();
1:         for (Object o : objectList) {
1:             if (o instanceof JAXBElement) {
1:                 JAXBElement element = (JAXBElement) o;
1:                 if (type.isAssignableFrom(element.getDeclaredType())) {
1:                     result.add((T) element.getValue());
1:                 }
1:             } else if (type.isAssignableFrom(o.getClass())) {
1:                 result.add((T) o);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     protected <T> T fromDto(Object dto, T instance) {
1:         Properties properties = new Properties();
1:         IntrospectionSupport.getProperties(dto, properties, null);
1:         plugin.placeHolderUtil.filter(properties);
1:         LOG.trace("applying props: " + filterPasswords(properties) + ", to " + instance.getClass().getSimpleName());
1:         IntrospectionSupport.setProperties(instance, properties);
1: 
1:         // deal with nested elements
1:         for (Object nested : filter(dto, Object.class)) {
1:             String elementName = nested.getClass().getSimpleName();
1:             Method setter = JAXBUtils.findSetter(instance, elementName);
1:             if (setter != null) {
1:                 List<Object> argument = new LinkedList<Object>();
1:                 for (Object elementContent : filter(nested, Object.class)) {
1:                     argument.add(fromDto(elementContent, JAXBUtils.inferTargetObject(elementContent)));
1:                 }
1:                 try {
1:                     setter.invoke(instance, JAXBUtils.matchType(argument, setter.getParameterTypes()[0]));
1:                 } catch (Exception e) {
0:                     plugin.info("failed to invoke " + setter + " on " + instance, e);
1:                 }
1:             } else {
1:                 plugin.info("failed to find setter for " + elementName + " on :" + instance);
1:             }
1:         }
1:         return instance;
1:     }
1: }
============================================================================