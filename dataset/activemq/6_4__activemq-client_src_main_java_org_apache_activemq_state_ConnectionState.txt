1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
8:d29ca2a: 
1:d29ca2a: package org.apache.activemq.state;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Collection;
1:d29ca2a: import java.util.Collections;
1:8d3ca90: import java.util.HashMap;
1:9614aa9: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:8d3ca90: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:ea74731: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:ea74731: import java.util.concurrent.atomic.AtomicBoolean;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:8d3ca90: import org.apache.activemq.command.ConsumerId;
1:8d3ca90: import org.apache.activemq.command.ConsumerInfo;
1:9614aa9: import org.apache.activemq.command.DestinationInfo;
1:d29ca2a: import org.apache.activemq.command.SessionId;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:220ad62: import org.apache.activemq.command.TransactionId;
1:d29ca2a: 
1:d29ca2a: public class ConnectionState {
1:f812e34: 
1:ea74731:     ConnectionInfo info;
1:9ef4259:     private final ConcurrentMap<TransactionId, TransactionState> transactions = new ConcurrentHashMap<TransactionId, TransactionState>();
1:9ef4259:     private final ConcurrentMap<SessionId, SessionState> sessions = new ConcurrentHashMap<SessionId, SessionState>();
1:ecf89a6:     private final List<DestinationInfo> tempDestinations = Collections.synchronizedList(new ArrayList<DestinationInfo>());
1:1ac3421:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
1:8d3ca90:     private boolean connectionInterruptProcessingComplete = true;
1:8d3ca90:     private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
1:f812e34: 
1:d29ca2a:     public ConnectionState(ConnectionInfo info) {
1:d29ca2a:         this.info = info;
1:d29ca2a:         // Add the default session id.
1:d29ca2a:         addSession(new SessionInfo(info, -1));
1:1ac3421:     }
1:f812e34: 
1:9ef4259:     @Override
1:d29ca2a:     public String toString() {
1:d29ca2a:         return info.toString();
1:86cbdfd:     }
1:ea74731: 
1:f812e34:     public void reset(ConnectionInfo info) {
1:f812e34:         this.info = info;
1:f812e34:         transactions.clear();
1:f812e34:         sessions.clear();
1:f812e34:         tempDestinations.clear();
1:f812e34:         shutdown.set(false);
1:01e2aec:         // Add the default session id.
1:01e2aec:         addSession(new SessionInfo(info, -1));
1:f812e34:     }
1:ea74731: 
1:9614aa9:     public void addTempDestination(DestinationInfo info) {
1:f812e34:         checkShutdown();
1:9614aa9:         tempDestinations.add(info);
1:ea74731:     }
1:220ad62: 
1:f812e34:     public void removeTempDestination(ActiveMQDestination destination) {
1:ecf89a6:         for (Iterator<DestinationInfo> iter = tempDestinations.iterator(); iter.hasNext();) {
1:ecf89a6:             DestinationInfo di = iter.next();
1:f812e34:             if (di.getDestination().equals(destination)) {
1:9614aa9:                 iter.remove();
1:220ad62:             }
1:9614aa9:         }
1:9614aa9:     }
1:f812e34: 
1:220ad62:     public void addTransactionState(TransactionId id) {
1:f812e34:         checkShutdown();
1:f812e34:         transactions.put(id, new TransactionState(id));
1:f812e34:     }
1:f812e34: 
1:220ad62:     public TransactionState getTransactionState(TransactionId id) {
1:ecf89a6:         return transactions.get(id);
1:220ad62:     }
1:f812e34: 
1:ecf89a6:     public Collection<TransactionState> getTransactionStates() {
1:220ad62:         return transactions.values();
1:220ad62:     }
1:f812e34: 
1:220ad62:     public TransactionState removeTransactionState(TransactionId id) {
1:ecf89a6:         return transactions.remove(id);
1:220ad62:     }
1:1ac3421: 
1:d29ca2a:     public void addSession(SessionInfo info) {
1:f812e34:         checkShutdown();
1:f812e34:         sessions.put(info.getSessionId(), new SessionState(info));
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public SessionState removeSession(SessionId id) {
1:ecf89a6:         return sessions.remove(id);
5:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public SessionState getSessionState(SessionId id) {
1:ecf89a6:         return sessions.get(id);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public ConnectionInfo getInfo() {
1:d29ca2a:         return info;
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     public Set<SessionId> getSessionIds() {
1:d29ca2a:         return sessions.keySet();
1:d29ca2a:     }
1:d29ca2a: 
1:53ea4ca:     public List<DestinationInfo> getTempDestinations() {
1:d29ca2a:         return tempDestinations;
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     public Collection<SessionState> getSessionStates() {
1:d29ca2a:         return sessions.values();
1:1ac3421:     }
1:f812e34: 
1:1ac3421:     private void checkShutdown() {
1:ecf89a6:         if (shutdown.get()) {
1:f812e34:             throw new IllegalStateException("Disposed");
1:ecf89a6:         }
1:f812e34:     }
1:f812e34: 
1:1ac3421:     public void shutdown() {
1:f812e34:         if (shutdown.compareAndSet(false, true)) {
1:ecf89a6:             for (Iterator<SessionState> iter = sessions.values().iterator(); iter.hasNext();) {
1:ecf89a6:                 SessionState ss = iter.next();
1:f812e34:                 ss.shutdown();
1:f812e34:             }
1:f812e34:         }
1:1ac3421:     }
1:1ac3421: 
1:8d3ca90:     public Map<ConsumerId, ConsumerInfo> getRecoveringPullConsumers() {
1:8d3ca90:         if (recoveringPullConsumers == null) {
1:8d3ca90:             recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>();
1:1ac3421:         }
1:8d3ca90:         return recoveringPullConsumers;
1:1ac3421:     }
1:d29ca2a: 
1:8d3ca90:     public void setConnectionInterruptProcessingComplete(boolean connectionInterruptProcessingComplete) {
1:8d3ca90:         this.connectionInterruptProcessingComplete = connectionInterruptProcessingComplete;
1:d29ca2a:     }
1:9ef4259: 
1:8d3ca90:     public boolean isConnectionInterruptProcessingComplete() {
1:8d3ca90:         return connectionInterruptProcessingComplete;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<TransactionId, TransactionState> transactions = new ConcurrentHashMap<TransactionId, TransactionState>();
1:     private final ConcurrentMap<SessionId, SessionState> sessions = new ConcurrentHashMap<SessionId, SessionState>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentHashMap<TransactionId, TransactionState> transactions = new ConcurrentHashMap<TransactionId, TransactionState>();
0:     private final ConcurrentHashMap<SessionId, SessionState> sessions = new ConcurrentHashMap<SessionId, SessionState>();
1:     private final List<DestinationInfo> tempDestinations = Collections.synchronizedList(new ArrayList<DestinationInfo>());
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<DestinationInfo> iter = tempDestinations.iterator(); iter.hasNext();) {
1:             DestinationInfo di = iter.next();
/////////////////////////////////////////////////////////////////////////
1:         return transactions.get(id);
1:     public Collection<TransactionState> getTransactionStates() {
1:         return transactions.remove(id);
/////////////////////////////////////////////////////////////////////////
1:         return sessions.remove(id);
1:         return sessions.get(id);
1:     public Set<SessionId> getSessionIds() {
0:     public List<DestinationInfo> getTempDesinations() {
1:     public Collection<SessionState> getSessionStates() {
1:         if (shutdown.get()) {
1:         }
1:             for (Iterator<SessionState> iter = sessions.values().iterator(); iter.hasNext();) {
1:                 SessionState ss = iter.next();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     public void reset(ConnectionInfo info) {
1:         this.info = info;
1:         transactions.clear();
1:         sessions.clear();
1:         tempDestinations.clear();
1:         shutdown.set(false);
1:     }
1:         checkShutdown();
1:     public void removeTempDestination(ActiveMQDestination destination) {
0:             DestinationInfo di = (DestinationInfo)iter.next();
1:             if (di.getDestination().equals(destination)) {
1: 
1:         checkShutdown();
1:         transactions.put(id, new TransactionState(id));
1:     }
1: 
1: 
1: 
0:         return (TransactionState)transactions.remove(id);
1:         checkShutdown();
1:         sessions.put(info.getSessionId(), new SessionState(info));
1:     }
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (shutdown.get())
1:             throw new IllegalStateException("Disposed");
1:     }
1: 
1:         if (shutdown.compareAndSet(false, true)) {
0:             for (Iterator iter = sessions.values().iterator(); iter.hasNext();) {
0:                 SessionState ss = (SessionState)iter.next();
1:                 ss.shutdown();
1:             }
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ea74731
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     ConnectionInfo info;
/////////////////////////////////////////////////////////////////////////
1:     
0: 	public void reset(ConnectionInfo info) {
0: 		this.info=info;
0: 		transactions.clear();
0: 		sessions.clear();
0: 		tempDestinations.clear();
0: 		shutdown.set(false);
1: 	}
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:220ad62
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.TransactionId;
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentHashMap transactions = new ConcurrentHashMap();
/////////////////////////////////////////////////////////////////////////
1: 	
1:     public void addTransactionState(TransactionId id) {
0:     	checkShutdown();
0:     	transactions.put(id, new TransactionState(id));
1:     }        
1:     public TransactionState getTransactionState(TransactionId id) {
0:         return (TransactionState)transactions.get(id);
1:     }
0:     public Collection getTransactionStates() {
1:         return transactions.values();
1:     }
1:     public TransactionState removeTransactionState(TransactionId id) {
0:         return (TransactionState) transactions.remove(id);
1:     }
commit:295850d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:8b21570
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
commit:1ac3421
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
0:     	checkShutdown();
0: 	public void removeTempDestination(ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
0:     	checkShutdown();
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     private void checkShutdown() {
0: 		if( shutdown.get() )
0: 			throw new IllegalStateException("Disposed");
1: 	}
1:     
1:     public void shutdown() {
0:     	if( shutdown.compareAndSet(false, true) ) {
0:     		for (Iterator iter = sessions.values().iterator(); iter.hasNext();) {
0: 				SessionState ss = (SessionState) iter.next();
0: 				ss.shutdown();
1: 			}
1:     	}
1:     }
commit:9614aa9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
1:     public void addTempDestination(DestinationInfo info) {
1:         tempDestinations.add(info);
0:         for (Iterator iter = tempDestinations.iterator(); iter.hasNext();) {
0:             DestinationInfo di = (DestinationInfo) iter.next();
0:             if( di.getDestination().equals(destination) ) {
1:                 iter.remove();
1:             }
1:         }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.state;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.SessionId;
1: import org.apache.activemq.command.SessionInfo;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: public class ConnectionState {
1:     
0:     final ConnectionInfo info;
0:     private final ConcurrentHashMap sessions = new ConcurrentHashMap();
0:     private final List tempDestinations = Collections.synchronizedList(new ArrayList());
1:     
1:     public ConnectionState(ConnectionInfo info) {
1:         this.info = info;
1:         // Add the default session id.
1:         addSession(new SessionInfo(info, -1));
1:     }
1:     
1:     public String toString() {
1:         return info.toString();
1:     }
1: 
0:     public void addTempDestination(ActiveMQDestination destination) {
0:         tempDestinations.add(destination);
1:     }
1: 
0:     public void removeTempDestination(ActiveMQDestination destination) {
0:         tempDestinations.remove(destination);
1:     }
1: 
1:     public void addSession(SessionInfo info) {
0:         sessions.put(info.getSessionId(), new SessionState(info));            
1:     }        
1:     public SessionState removeSession(SessionId id) {
0:         return (SessionState)sessions.remove(id);
1:     }
1:     public SessionState getSessionState(SessionId id) {
0:         return (SessionState)sessions.get(id);
1:     }
1:     
1:     public ConnectionInfo getInfo() {
1:         return info;
1:     }
1: 
0:     public Set getSessionIds() {
1:         return sessions.keySet();
1:     }
1: 
0:     public List getTempDesinations() {
1:         return tempDestinations;
1:     }
1: 
0:     public Collection getSessionStates() {
1:         return sessions.values();
1:     }        
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:53ea4ca
/////////////////////////////////////////////////////////////////////////
1:     public List<DestinationInfo> getTempDestinations() {
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
1:     private boolean connectionInterruptProcessingComplete = true;
1:     private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public Map<ConsumerId, ConsumerInfo> getRecoveringPullConsumers() {
1:         if (recoveringPullConsumers == null) {
1:             recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>();
0:         }
1:         return recoveringPullConsumers;
0:     }
0: 
1:     public void setConnectionInterruptProcessingComplete(boolean connectionInterruptProcessingComplete) {
1:         this.connectionInterruptProcessingComplete = connectionInterruptProcessingComplete;
0:     }
0:     
1:     public boolean isConnectionInterruptProcessingComplete() {
1:         return connectionInterruptProcessingComplete;
0:     }
commit:01e2aec
/////////////////////////////////////////////////////////////////////////
1:         // Add the default session id.
1:         addSession(new SessionInfo(info, -1));
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:04c3b07
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.TransactionId;
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentHashMap transactions = new ConcurrentHashMap();
/////////////////////////////////////////////////////////////////////////
0: 	
0:     public void addTransactionState(TransactionId id) {
0:     	checkShutdown();
0:     	transactions.put(id, new TransactionState(id));
0:     }        
0:     public TransactionState getTransactionState(TransactionId id) {
0:         return (TransactionState)transactions.get(id);
0:     }
0:     public Collection getTransactionStates() {
0:         return transactions.values();
0:     }
0:     public TransactionState removeTransactionState(TransactionId id) {
0:         return (TransactionState) transactions.remove(id);
0:     }
============================================================================