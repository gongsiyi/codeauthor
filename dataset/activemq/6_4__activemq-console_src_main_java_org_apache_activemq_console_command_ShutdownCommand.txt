1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
7:a107823: 
1:a107823: import java.util.Collection;
1:a107823: import java.util.HashSet;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: 
1:5f1adbe: import javax.management.MBeanServerConnection;
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: import javax.management.ObjectName;
1:5f1adbe: 
1:5f1adbe: import org.apache.activemq.console.util.JmxMBeansUtil;
1:a107823: 
1:a107823: public class ShutdownCommand extends AbstractJmxCommand {
1:5f1adbe: 
1:5f1adbe:     protected String[] helpFile = new String[] {
1:5f1adbe:         "Task Usage: Main stop [stop-options] [broker-name1] [broker-name2] ...",
1:5f1adbe:         "Description: Stops a running broker.",
1:5f1adbe:         "", 
1:5f1adbe:         "Stop Options:",
1:0dec0b6:         "    --jmxurl <url>             Set the JMX URL to connect to.",
1:87eba29:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
1:0dec0b6:         "    --jmxuser <user>           Set the JMX user used for authenticating.",
1:0dec0b6:         "    --jmxpassword <password>   Set the JMX password used for authenticating.",
1:0dec0b6:         "    --jmxlocal                 Use the local JMX server instead of a remote one.",
1:0dec0b6:         "    --all                      Stop all brokers.",
1:0dec0b6:         "    --version                  Display the version information.",
1:0dec0b6:         "    -h,-?,--help               Display the stop broker help information.",
1:5f1adbe:         "",
1:5f1adbe:         "Broker Names:",
1:5f1adbe:         "    Name of the brokers that will be stopped.",
1:5f1adbe:         "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
1:5f1adbe:         "    Use -all to stop all running brokers.",
1:5f1adbe:         ""
1:5f1adbe:     };
1:5f1adbe: 
1:5f1adbe:     private boolean isStopAllBrokers;
1:a107823: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "stop";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Stops a running broker specified by the broker name.";
1:60646c9:     }
1:60646c9: 
1:a107823:     /**
1:a107823:      * Shuts down the specified broker or brokers
1:5f1adbe:      * 
1:a107823:      * @param brokerNames - names of brokers to shutdown
2:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     protected void runTask(List brokerNames) throws Exception {
1:73f9131:         Collection mbeans;
1:a107823: 
1:73f9131:         // Stop all brokers
1:73f9131:         if (isStopAllBrokers) {
1:73f9131:             mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
1:73f9131:             brokerNames.clear();
1:73f9131:         } else if (brokerNames.isEmpty()) {
1:73f9131:             // Stop the default broker
1:73f9131:             mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
1:73f9131:             // If there is no broker to stop
1:73f9131:             if (mbeans.isEmpty()) {
1:73f9131:                 context.printInfo("There are no brokers to stop.");
1:73f9131:                 return;
1:a107823: 
1:73f9131:                 // There should only be one broker to stop
1:73f9131:             } else if (mbeans.size() > 1) {
1:73f9131:                 context.printInfo("There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers.");
1:73f9131:                 return;
1:a107823: 
1:73f9131:                 // Get the first broker only
1:5f1adbe:             } else {
1:73f9131:                 Object firstBroker = mbeans.iterator().next();
1:73f9131:                 mbeans.clear();
1:73f9131:                 mbeans.add(firstBroker);
1:73f9131:             }
1:73f9131:         } else {
1:73f9131:             // Stop each specified broker
1:73f9131:             String brokerName;
1:73f9131:             mbeans = new HashSet();
1:73f9131:             while (!brokerNames.isEmpty()) {
1:73f9131:                 brokerName = (String) brokerNames.remove(0);
1:73f9131:                 Collection matchedBrokers = JmxMBeansUtil.getBrokersByName(createJmxConnection(), brokerName);
1:73f9131:                 if (matchedBrokers.isEmpty()) {
1:73f9131:                     context.printInfo(brokerName + " did not match any running brokers.");
1:73f9131:                 } else {
1:73f9131:                     mbeans.addAll(matchedBrokers);
5:a107823:                 }
1:a107823:             }
1:a107823:         }
1:73f9131: 
1:73f9131:         // Stop all brokers in set
1:73f9131:         stopBrokers(createJmxConnection(), mbeans);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Stops the list of brokers.
1:5f1adbe:      * 
1:0dec0b6:      * @param jmxConnection - connection to the mbean server
1:0dec0b6:      * @param brokerBeans - broker mbeans to stop @throws Exception
1:a107823:      */
1:0dec0b6:     protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception {
1:a107823:         ObjectName brokerObjName;
1:5f1adbe:         for (Iterator i = brokerBeans.iterator(); i.hasNext();) {
1:a107823:             brokerObjName = ((ObjectInstance)i.next()).getObjectName();
1:a107823: 
1:8ab1c8d:             String brokerName = brokerObjName.getKeyProperty("brokerName");
1:54eb93e:             context.print("Stopping broker: " + brokerName);
1:a107823: 
2:a107823:             try {
1:0dec0b6:                 jmxConnection.invoke(brokerObjName, "terminateJVM", new Object[] {
1:5f1adbe:                     Integer.valueOf(0)
1:5f1adbe:                 }, new String[] {
1:5f1adbe:                     "int"
1:5f1adbe:                 });
1:54eb93e:                 context.print("Succesfully stopped broker: " + brokerName);
2:a107823:             } catch (Exception e) {
1:a107823:                 // TODO: Check exceptions throwned
1:5f1adbe:                 // System.out.println("Failed to stop broker: [ " + brokerName +
1:5f1adbe:                 // " ]. Reason: " + e.getMessage());
1:a107823:             }
1:a107823:         }
1:a107823: 
1:0dec0b6:         closeJmxConnection();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Handle the --all option.
1:5f1adbe:      * 
1:a107823:      * @param token - option token to handle
1:a107823:      * @param tokens - succeeding command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:a107823:         // Try to handle the options first
1:a107823:         if (token.equals("--all")) {
1:a107823:             isStopAllBrokers = true;
3:a107823:         } else {
1:a107823:             // Let the super class handle the option
1:a107823:             super.handleOption(token, tokens);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print the help messages for the browse command
1:a107823:      */
1:a107823:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1:         Collection mbeans;
1:         // Stop all brokers
1:         if (isStopAllBrokers) {
1:             mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
1:             brokerNames.clear();
1:         } else if (brokerNames.isEmpty()) {
1:             // Stop the default broker
1:             mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
1:             // If there is no broker to stop
1:             if (mbeans.isEmpty()) {
1:                 context.printInfo("There are no brokers to stop.");
1:                 return;
1:                 // There should only be one broker to stop
1:             } else if (mbeans.size() > 1) {
1:                 context.printInfo("There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers.");
1:                 return;
1:                 // Get the first broker only
1:                 Object firstBroker = mbeans.iterator().next();
1:                 mbeans.clear();
1:                 mbeans.add(firstBroker);
1:             }
1:         } else {
1:             // Stop each specified broker
1:             String brokerName;
1:             mbeans = new HashSet();
1:             while (!brokerNames.isEmpty()) {
1:                 brokerName = (String) brokerNames.remove(0);
1:                 Collection matchedBrokers = JmxMBeansUtil.getBrokersByName(createJmxConnection(), brokerName);
1:                 if (matchedBrokers.isEmpty()) {
1:                     context.printInfo(brokerName + " did not match any running brokers.");
1:                 } else {
1:                     mbeans.addAll(matchedBrokers);
1: 
1:         // Stop all brokers in set
1:         stopBrokers(createJmxConnection(), mbeans);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8ab1c8d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             String brokerName = brokerObjName.getKeyProperty("brokerName");
commit:87eba29
/////////////////////////////////////////////////////////////////////////
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "stop";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Stops a running broker specified by the broker name.";
1:     }
1: 
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     context.printInfo("There are no brokers to stop.");
0:                     context.printInfo("There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers.");
/////////////////////////////////////////////////////////////////////////
0:                         context.printInfo(brokerName + " did not match any running brokers.");
/////////////////////////////////////////////////////////////////////////
0:             context.printException(new RuntimeException("Failed to execute stop task. Reason: " + e));
/////////////////////////////////////////////////////////////////////////
1:             context.print("Stopping broker: " + brokerName);
/////////////////////////////////////////////////////////////////////////
1:                 context.print("Succesfully stopped broker: " + brokerName);
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
0: import javax.management.remote.JMXServiceURL;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
1: 
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: Main stop [stop-options] [broker-name1] [broker-name2] ...",
1:         "Description: Stops a running broker.",
1:         "", 
1:         "Stop Options:",
0:         "    --jmxurl <url>      Set the JMX URL to connect to.",
0:         "    --all               Stop all brokers.",
0:         "    --version           Display the version information.",
0:         "    -h,-?,--help        Display the stop broker help information.",
1:         "",
1:         "Broker Names:",
1:         "    Name of the brokers that will be stopped.",
1:         "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
1:         "    Use -all to stop all running brokers.",
1:         ""
1:     };
1: 
1:     private boolean isStopAllBrokers;
1:      * 
/////////////////////////////////////////////////////////////////////////
0:             } else if (brokerNames.isEmpty()) {
0:                 // Stop the default broker
/////////////////////////////////////////////////////////////////////////
0:                     // There should only be one broker to stop
0:                     // Get the first broker only
1:             } else {
0:                 // Stop each specified broker
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = brokerBeans.iterator(); i.hasNext();) {
0:                 server.invoke(brokerObjName, "terminateJVM", new Object[] {
1:                     Integer.valueOf(0)
1:                 }, new String[] {
1:                     "int"
1:                 });
1:                 // System.out.println("Failed to stop broker: [ " + brokerName +
1:                 // " ]. Reason: " + e.getMessage());
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: 
0: import javax.management.MBeanServerConnection;
0: import javax.management.ObjectName;
0: import javax.management.ObjectInstance;
0: import javax.management.remote.JMXServiceURL;
0: import java.util.List;
0: import java.util.Iterator;
1: import java.util.Collection;
1: import java.util.HashSet;
1: 
1: public class ShutdownCommand extends AbstractJmxCommand {
0:     private boolean isStopAllBrokers = false;
1: 
1:     /**
1:      * Shuts down the specified broker or brokers
1:      * @param brokerNames - names of brokers to shutdown
1:      * @throws Exception
1:      */
1:     protected void runTask(List brokerNames) throws Exception {
1:         try {
0:             Collection mbeans;
1: 
0:             // Stop all brokers
0:             if (isStopAllBrokers) {
0:                 mbeans = JmxMBeansUtil.getAllBrokers(useJmxServiceUrl());
0:                 brokerNames.clear();
1:             }
1: 
0:             // Stop the default broker
0:             else if (brokerNames.isEmpty()) {
0:                 mbeans = JmxMBeansUtil.getAllBrokers(useJmxServiceUrl());
1: 
0:                 // If there is no broker to stop
0:                 if (mbeans.isEmpty()) {
0:                     GlobalWriter.printInfo("There are no brokers to stop.");
0:                     return;
1: 
0:                 // There should only be one broker to stop
0:                 } else if (mbeans.size() > 1) {
0:                     GlobalWriter.printInfo("There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers.");
0:                     return;
1: 
0:                 // Get the first broker only
1:                 } else {
0:                     Object firstBroker = mbeans.iterator().next();
0:                     mbeans.clear();
0:                     mbeans.add(firstBroker);
1:                 }
1:             }
1: 
0:             // Stop each specified broker
0:             else {
0:                 String brokerName;
0:                 mbeans = new HashSet();
0:                 while (!brokerNames.isEmpty()) {
0:                     brokerName = (String)brokerNames.remove(0);
0:                     Collection matchedBrokers = JmxMBeansUtil.getBrokersByName(useJmxServiceUrl(), brokerName);
0:                     if (matchedBrokers.isEmpty()) {
0:                         GlobalWriter.printInfo(brokerName + " did not match any running brokers.");
1:                     } else {
0:                         mbeans.addAll(matchedBrokers);
1:                     }
1:                 }
1:             }
1: 
0:             // Stop all brokers in set
0:             stopBrokers(useJmxServiceUrl(), mbeans);
1:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute stop task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
1:      * Stops the list of brokers.
0:      * @param jmxServiceUrl - JMX service url to connect to
0:      * @param brokerBeans - broker mbeans to stop
1:      * @throws Exception
1:      */
0:     protected void stopBrokers(JMXServiceURL jmxServiceUrl, Collection brokerBeans) throws Exception {
0:         MBeanServerConnection server = createJmxConnector().getMBeanServerConnection();
1: 
1:         ObjectName brokerObjName;
0:         for (Iterator i=brokerBeans.iterator(); i.hasNext();) {
1:             brokerObjName = ((ObjectInstance)i.next()).getObjectName();
1: 
0:             String brokerName = brokerObjName.getKeyProperty("BrokerName");
0:             GlobalWriter.print("Stopping broker: " + brokerName);
1: 
1:             try {
0:                 server.invoke(brokerObjName, "terminateJVM", new Object[] {new Integer(0)}, new String[] {"int"});
0:                 GlobalWriter.print("Succesfully stopped broker: " + brokerName);
1:             } catch (Exception e) {
1:                 // TODO: Check exceptions throwned
0:                 //System.out.println("Failed to stop broker: [ " + brokerName + " ]. Reason: " + e.getMessage());
1:             }
1:         }
1: 
0:         closeJmxConnector();
1:     }
1: 
1:     /**
1:      * Handle the --all option.
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1:         // Try to handle the options first
1:         if (token.equals("--all")) {
1:             isStopAllBrokers = true;
1:         } else {
1:             // Let the super class handle the option
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main stop [stop-options] [broker-name1] [broker-name2] ...",
0:         "Description: Stops a running broker.",
0:         "",
0:         "Stop Options:",
0:         "    --jmxurl <url>      Set the JMX URL to connect to.",
0:         "    --all               Stop all brokers.",
0:         "    --version           Display the version information.",
0:         "    -h,-?,--help        Display the stop broker help information.",
0:         "",
0:         "Broker Names:",
0:         "    Name of the brokers that will be stopped.",
0:         "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
0:         "    Use -all to stop all running brokers.",
0:         ""
0:     };
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         "    --jmxurl <url>             Set the JMX URL to connect to.",
1:         "    --jmxuser <user>           Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>   Set the JMX password used for authenticating.",
1:         "    --jmxlocal                 Use the local JMX server instead of a remote one.",
1:         "    --all                      Stop all brokers.",
1:         "    --version                  Display the version information.",
1:         "    -h,-?,--help               Display the stop broker help information.",
/////////////////////////////////////////////////////////////////////////
0:                 mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
0:                 mbeans = JmxMBeansUtil.getAllBrokers(createJmxConnection());
/////////////////////////////////////////////////////////////////////////
0:                     Collection matchedBrokers = JmxMBeansUtil.getBrokersByName(createJmxConnection(), brokerName);
/////////////////////////////////////////////////////////////////////////
0:             stopBrokers(createJmxConnection(), mbeans);
/////////////////////////////////////////////////////////////////////////
1:      * @param jmxConnection - connection to the mbean server
1:      * @param brokerBeans - broker mbeans to stop @throws Exception
1:     protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 jmxConnection.invoke(brokerObjName, "terminateJVM", new Object[] {
/////////////////////////////////////////////////////////////////////////
1:         closeJmxConnection();
author:Robert Davies
-------------------------------------------------------------------------------
commit:5d41efc
/////////////////////////////////////////////////////////////////////////
0:                 server.invoke(brokerObjName, "terminateJVM", new Object[] {Integer.valueOf(0)}, new String[] {"int"});
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.broker.console.JmxMBeansUtil;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: 
0: import javax.management.MBeanServerConnection;
0: import javax.management.ObjectName;
0: import javax.management.ObjectInstance;
0: import javax.management.remote.JMXServiceURL;
0: import java.util.List;
0: import java.util.Iterator;
0: import java.util.Collection;
0: import java.util.HashSet;
0: 
0: public class ShutdownCommand extends AbstractJmxCommand {
0:     private boolean isStopAllBrokers = false;
0: 
0:     /**
0:      * Shuts down the specified broker or brokers
0:      * @param brokerNames - names of brokers to shutdown
0:      * @throws Exception
0:      */
0:     protected void runTask(List brokerNames) throws Exception {
0:         try {
0:             Collection mbeans;
0: 
0:             // Stop all brokers
0:             if (isStopAllBrokers) {
0:                 mbeans = JmxMBeansUtil.getAllBrokers(useJmxServiceUrl());
0:                 brokerNames.clear();
0:             }
0: 
0:             // Stop the default broker
0:             else if (brokerNames.isEmpty()) {
0:                 mbeans = JmxMBeansUtil.getAllBrokers(useJmxServiceUrl());
0: 
0:                 // If there is no broker to stop
0:                 if (mbeans.isEmpty()) {
0:                     GlobalWriter.printInfo("There are no brokers to stop.");
0:                     return;
0: 
0:                 // There should only be one broker to stop
0:                 } else if (mbeans.size() > 1) {
0:                     GlobalWriter.printInfo("There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers.");
0:                     return;
0: 
0:                 // Get the first broker only
0:                 } else {
0:                     Object firstBroker = mbeans.iterator().next();
0:                     mbeans.clear();
0:                     mbeans.add(firstBroker);
0:                 }
0:             }
0: 
0:             // Stop each specified broker
0:             else {
0:                 String brokerName;
0:                 mbeans = new HashSet();
0:                 while (!brokerNames.isEmpty()) {
0:                     brokerName = (String)brokerNames.remove(0);
0:                     Collection matchedBrokers = JmxMBeansUtil.getBrokersByName(useJmxServiceUrl(), brokerName);
0:                     if (matchedBrokers.isEmpty()) {
0:                         GlobalWriter.printInfo(brokerName + " did not match any running brokers.");
0:                     } else {
0:                         mbeans.addAll(matchedBrokers);
0:                     }
0:                 }
0:             }
0: 
0:             // Stop all brokers in set
0:             stopBrokers(useJmxServiceUrl(), mbeans);
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute stop task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Stops the list of brokers.
0:      * @param jmxServiceUrl - JMX service url to connect to
0:      * @param brokerBeans - broker mbeans to stop
0:      * @throws Exception
0:      */
0:     protected void stopBrokers(JMXServiceURL jmxServiceUrl, Collection brokerBeans) throws Exception {
0:         MBeanServerConnection server = createJmxConnector().getMBeanServerConnection();
0: 
0:         ObjectName brokerObjName;
0:         for (Iterator i=brokerBeans.iterator(); i.hasNext();) {
0:             brokerObjName = ((ObjectInstance)i.next()).getObjectName();
0: 
0:             String brokerName = brokerObjName.getKeyProperty("BrokerName");
0:             GlobalWriter.print("Stopping broker: " + brokerName);
0: 
0:             try {
0:                 server.invoke(brokerObjName, "terminateJVM", new Object[] {new Integer(0)}, new String[] {"int"});
0:                 GlobalWriter.print("Succesfully stopped broker: " + brokerName);
0:             } catch (Exception e) {
0:                 // TODO: Check exceptions throwned
0:                 //System.out.println("Failed to stop broker: [ " + brokerName + " ]. Reason: " + e.getMessage());
0:             }
0:         }
0: 
0:         closeJmxConnector();
0:     }
0: 
0:     /**
0:      * Handle the --all option.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0:         // Try to handle the options first
0:         if (token.equals("--all")) {
0:             isStopAllBrokers = true;
0:         } else {
0:             // Let the super class handle the option
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main stop [stop-options] [broker-name1] [broker-name2] ...",
0:         "Description: Stops a running broker.",
0:         "",
0:         "Stop Options:",
0:         "    --jmxurl <url>      Set the JMX URL to connect to.",
0:         "    --all               Stop all brokers.",
0:         "    --version           Display the version information.",
0:         "    -h,-?,--help        Display the stop broker help information.",
0:         "",
0:         "Broker Names:",
0:         "    Name of the brokers that will be stopped.",
0:         "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
0:         "    Use -all to stop all running brokers.",
0:         ""
0:     };
0: }
============================================================================