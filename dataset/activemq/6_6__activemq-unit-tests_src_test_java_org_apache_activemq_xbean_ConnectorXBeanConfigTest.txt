1:523ea5f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:523ea5f:  *
1:523ea5f:  * Unless required by applicable law or agreed to in writing, software
1:523ea5f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:523ea5f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:523ea5f:  * See the License for the specific language governing permissions and
1:523ea5f:  * limitations under the License.
1:523ea5f:  */
1:523ea5f: package org.apache.activemq.xbean;
8:523ea5f: 
1:523ea5f: import java.net.URI;
1:e2b83bd: import java.util.List;
1:c6fe94e: import java.util.concurrent.CountDownLatch;
1:e2b83bd: 
1:c6fe94e: import javax.jms.*;
1:e2b83bd: 
1:523ea5f: import junit.framework.TestCase;
1:e2b83bd: 
1:62e1abf: import org.apache.activemq.ActiveMQConnectionFactory;
1:523ea5f: import org.apache.activemq.broker.BrokerFactory;
1:523ea5f: import org.apache.activemq.broker.BrokerService;
1:523ea5f: import org.apache.activemq.broker.TransportConnector;
1:4743a20: import org.apache.activemq.command.ActiveMQDestination;
1:e2b83bd: import org.apache.activemq.command.ActiveMQQueue;
1:e2b83bd: import org.apache.activemq.command.ActiveMQTopic;
1:e2b83bd: import org.apache.activemq.network.NetworkConnector;
1:c6fe94e: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:523ea5f: 
1:523ea5f: /**
1:4743a20:  *
1:523ea5f:  */
1:523ea5f: public class ConnectorXBeanConfigTest extends TestCase {
1:523ea5f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConnectorXBeanConfigTest.class);
1:523ea5f:     protected BrokerService brokerService;
1:523ea5f: 
1:7f5213b:     public void testConnectorConfiguredCorrectly() throws Exception {
1:230a86c: 
1:4743a20:         TransportConnector connector = brokerService.getTransportConnectors().get(0);
1:230a86c: 
1:230a86c:         assertEquals(new URI("tcp://localhost:61636"), connector.getUri());
1:230a86c:         assertTrue(connector.getTaskRunnerFactory() == brokerService.getTaskRunnerFactory());
1:230a86c: 
1:4743a20:         NetworkConnector netConnector = brokerService.getNetworkConnectors().get(0);
1:4743a20:         List<ActiveMQDestination> excludedDestinations = netConnector.getExcludedDestinations();
1:e2b83bd:         assertEquals(new ActiveMQQueue("exclude.test.foo"), excludedDestinations.get(0));
1:e2b83bd:         assertEquals(new ActiveMQTopic("exclude.test.bar"), excludedDestinations.get(1));
1:230a86c: 
1:4743a20:         List<ActiveMQDestination> dynamicallyIncludedDestinations = netConnector.getDynamicallyIncludedDestinations();
1:e2b83bd:         assertEquals(new ActiveMQQueue("include.test.foo"), dynamicallyIncludedDestinations.get(0));
1:e2b83bd:         assertEquals(new ActiveMQTopic("include.test.bar"), dynamicallyIncludedDestinations.get(1));
1:523ea5f:     }
1:4743a20: 
1:72b9416:     public void testBrokerRestartIsAllowed() throws Exception {
1:4743a20:         brokerService.stop();
1:4743a20:         brokerService.waitUntilStopped();
1:4743a20: 
1:4743a20:         // redundant start is now ignored
1:4743a20:         brokerService.start();
1:4800a7a: 
1:4800a7a:         assertTrue("mapped address in published address", brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString().contains("Mapped"));
2:62e1abf:     }
1:4743a20: 
1:62e1abf:     public void testForceBrokerRestart() throws Exception {
1:4743a20:         brokerService.stop();
1:4743a20:         brokerService.waitUntilStopped();
1:4743a20: 
1:4743a20:         brokerService.start(true); // force restart
1:4743a20:         brokerService.waitUntilStarted();
1:4743a20: 
1:4743a20:         LOG.info("try and connect to restarted broker");
1:4743a20:         //send and receive a message from a restarted broker
1:4743a20:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61636");
1:4743a20:         Connection conn = factory.createConnection();
1:4743a20:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4743a20:         conn.start();
1:4743a20:         Destination dest = new ActiveMQQueue("test");
1:4743a20:         MessageConsumer consumer = sess.createConsumer(dest);
1:c6fe94e:         MessageProducer producer = sess.createProducer(dest);
1:4743a20:         producer.send(sess.createTextMessage("test"));
1:4743a20:         TextMessage msg = (TextMessage)consumer.receive(1000);
1:4743a20:         assertEquals("test", msg.getText());
1:62e1abf:     }
1:c6fe94e: 
1:230a86c: 
1:c6fe94e:     public void testBrokerWontStop() throws Exception {
1:c6fe94e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:c6fe94e:         factory.setDispatchAsync(false);
1:c6fe94e:         factory.setAlwaysSessionAsync(false);
1:c6fe94e:         Connection conn = factory.createConnection();
1:c6fe94e:         final Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:c6fe94e:         conn.start();
1:c6fe94e:         final Destination dest = new ActiveMQQueue("TEST");
1:c6fe94e:         final CountDownLatch stop = new CountDownLatch(1);
1:c6fe94e:         final CountDownLatch sendSecond = new CountDownLatch(1);
1:c6fe94e:         final CountDownLatch shutdown = new CountDownLatch(1);
1:c6fe94e:         final CountDownLatch test = new CountDownLatch(1);
1:c6fe94e: 
1:c6fe94e:         ActiveMQConnectionFactory testFactory = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:c6fe94e:         Connection testConn = testFactory.createConnection();
1:c6fe94e:         testConn.start();
1:c6fe94e:         Destination testDestination = sess.createQueue("NEW");
1:c6fe94e:         Session testSess = testConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c6fe94e:         MessageProducer testProducer = testSess.createProducer(testDestination);
1:c6fe94e: 
1:c6fe94e:         final Thread consumerThread = new Thread() {
1:c6fe94e:             @Override
1:c6fe94e:             public void run() {
1:c6fe94e:                 try {
1:c6fe94e:                 MessageProducer producer = sess.createProducer(dest);
1:c6fe94e:                 producer.send(sess.createTextMessage("msg1"));
1:c6fe94e:                 MessageConsumer consumer = sess.createConsumer(dest);
1:c6fe94e:                 consumer.setMessageListener(new MessageListener() {
1:c6fe94e:                     @Override
1:c6fe94e:                     public void onMessage(Message message) {
1:c6fe94e:                         try {
1:c6fe94e:                             // send a message that will block
1:c6fe94e:                             Thread.sleep(2000);
1:c6fe94e:                             sendSecond.countDown();
1:c6fe94e:                             // try to stop the broker
1:c6fe94e:                             Thread.sleep(5000);
1:c6fe94e:                             stop.countDown();
1:c6fe94e:                             // run the test
1:c6fe94e:                             Thread.sleep(5000);
1:c6fe94e:                             test.countDown();
1:c6fe94e:                             shutdown.await();
1:c6fe94e:                         } catch (InterruptedException ie) {
1:c6fe94e:                         }
1:c6fe94e:                     }
1:c6fe94e:                 });
1:c6fe94e:                 } catch (Exception e) {
1:c6fe94e:                     e.printStackTrace();
1:c6fe94e:                 }
1:c6fe94e:             }
1:c6fe94e:         };
1:c6fe94e: 
1:c6fe94e:         consumerThread.start();
1:c6fe94e: 
1:c6fe94e:         final Thread producerThread = new Thread() {
1:c6fe94e:             @Override
1:c6fe94e:             public void run() {
1:c6fe94e:                 try {
1:c6fe94e:                     sendSecond.await();
1:c6fe94e:                     MessageProducer producer = sess.createProducer(dest);
1:c6fe94e:                     producer.send(sess.createTextMessage("msg2"));
1:c6fe94e:                 } catch (Exception e) {
1:c6fe94e:                     e.printStackTrace();
1:c6fe94e:                 }
1:c6fe94e:             }
1:c6fe94e:         };
1:c6fe94e: 
1:c6fe94e:         producerThread.start();
1:c6fe94e: 
1:c6fe94e:         final Thread stopThread = new Thread() {
1:c6fe94e:             @Override
1:c6fe94e:             public void run() {
1:c6fe94e:                 try {
1:c6fe94e:                     stop.await();
1:c6fe94e:                     brokerService.stop();
1:c6fe94e:                 } catch (Exception e) {
1:c6fe94e:                     e.printStackTrace();
1:c6fe94e:                 }
1:c6fe94e:             }
1:c6fe94e:         };
1:c6fe94e: 
1:c6fe94e:         stopThread.start();
1:c6fe94e: 
1:c6fe94e:         test.await();
1:c6fe94e:         try {
1:c6fe94e:             testSess.createConsumer(testDestination);
1:c6fe94e:             fail("Should have failed creating a consumer!");
1:c6fe94e:         } catch (Exception e) {
1:c6fe94e:             e.printStackTrace();
1:c6fe94e:         }
1:c6fe94e: 
1:c6fe94e:         try {
1:c6fe94e:             testProducer.send(testSess.createTextMessage("msg3"));
1:c6fe94e:             fail("Should have failed sending a message!");
1:c6fe94e:         } catch (Exception e) {
1:c6fe94e:             e.printStackTrace();
1:c6fe94e:         }
1:c6fe94e: 
1:c6fe94e:         shutdown.countDown();
1:c6fe94e: 
1:c6fe94e: 
1:c6fe94e:     }
1:c6fe94e: 
1:4743a20:     @Override
1:523ea5f:     protected void setUp() throws Exception {
1:523ea5f:         brokerService = createBroker();
1:523ea5f:         brokerService.start();
1:523ea5f:     }
1:e2b83bd: 
1:4743a20:     @Override
1:523ea5f:     protected void tearDown() throws Exception {
1:523ea5f:         if (brokerService != null) {
1:523ea5f:             brokerService.stop();
1:523ea5f:         }
1:523ea5f:     }
1:523ea5f: 
1:523ea5f:     protected BrokerService createBroker() throws Exception {
1:523ea5f:         String uri = "org/apache/activemq/xbean/connector-test.xml";
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:523ea5f:     }
1:523ea5f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4800a7a
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("mapped address in published address", brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString().contains("Mapped"));
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c6fe94e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer = sess.createProducer(dest);
1: 
1:     public void testBrokerWontStop() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:         factory.setDispatchAsync(false);
1:         factory.setAlwaysSessionAsync(false);
1:         Connection conn = factory.createConnection();
1:         final Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         conn.start();
1:         final Destination dest = new ActiveMQQueue("TEST");
1:         final CountDownLatch stop = new CountDownLatch(1);
1:         final CountDownLatch sendSecond = new CountDownLatch(1);
1:         final CountDownLatch shutdown = new CountDownLatch(1);
1:         final CountDownLatch test = new CountDownLatch(1);
1: 
1:         ActiveMQConnectionFactory testFactory = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:         Connection testConn = testFactory.createConnection();
1:         testConn.start();
1:         Destination testDestination = sess.createQueue("NEW");
1:         Session testSess = testConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer testProducer = testSess.createProducer(testDestination);
1: 
1:         final Thread consumerThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                 MessageProducer producer = sess.createProducer(dest);
1:                 producer.send(sess.createTextMessage("msg1"));
1:                 MessageConsumer consumer = sess.createConsumer(dest);
1:                 consumer.setMessageListener(new MessageListener() {
1:                     @Override
1:                     public void onMessage(Message message) {
1:                         try {
1:                             // send a message that will block
1:                             Thread.sleep(2000);
1:                             sendSecond.countDown();
1:                             // try to stop the broker
1:                             Thread.sleep(5000);
1:                             stop.countDown();
1:                             // run the test
1:                             Thread.sleep(5000);
1:                             test.countDown();
1:                             shutdown.await();
1:                         } catch (InterruptedException ie) {
1:                         }
1:                     }
1:                 });
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         consumerThread.start();
1: 
1:         final Thread producerThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     sendSecond.await();
1:                     MessageProducer producer = sess.createProducer(dest);
1:                     producer.send(sess.createTextMessage("msg2"));
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         producerThread.start();
1: 
1:         final Thread stopThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     stop.await();
1:                     brokerService.stop();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         stopThread.start();
1: 
1:         test.await();
1:         try {
1:             testSess.createConsumer(testDestination);
1:             fail("Should have failed creating a consumer!");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1: 
1:         try {
1:             testProducer.send(testSess.createTextMessage("msg3"));
1:             fail("Should have failed sending a message!");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1: 
1:         shutdown.countDown();
1: 
1: 
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = brokerService.getTransportConnectors().get(0);
1:         NetworkConnector netConnector = brokerService.getNetworkConnectors().get(0);
1:         List<ActiveMQDestination> excludedDestinations = netConnector.getExcludedDestinations();
1:         List<ActiveMQDestination> dynamicallyIncludedDestinations = netConnector.getDynamicallyIncludedDestinations();
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:         // redundant start is now ignored
1:         brokerService.start();
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:         brokerService.start(true); // force restart
1:         brokerService.waitUntilStarted();
1: 
1:         LOG.info("try and connect to restarted broker");
1:         //send and receive a message from a restarted broker
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61636");
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Destination dest = new ActiveMQQueue("test");
0:         MessageProducer producer = sess.createProducer(dest);
1:         MessageConsumer consumer = sess.createConsumer(dest);
1:         producer.send(sess.createTextMessage("test"));
1:         TextMessage msg = (TextMessage)consumer.receive(1000);
1:         assertEquals("test", msg.getText());
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         TransportConnector connector = (TransportConnector)brokerService.getTransportConnectors().get(0);
1: 
1:         assertEquals(new URI("tcp://localhost:61636"), connector.getUri());
1:         assertTrue(connector.getTaskRunnerFactory() == brokerService.getTaskRunnerFactory());
1: 
0:         NetworkConnector netConnector = (NetworkConnector)brokerService.getNetworkConnectors().get(0);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectorConfiguredCorrectly() throws Exception {
commit:e2b83bd
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1:         
1:         
0:         NetworkConnector netConnector = (NetworkConnector) brokerService.getNetworkConnectors().get(0);
0:         List excludedDestinations = netConnector.getExcludedDestinations();
1:         assertEquals(new ActiveMQQueue("exclude.test.foo"), excludedDestinations.get(0));
1:         assertEquals(new ActiveMQTopic("exclude.test.bar"), excludedDestinations.get(1));
1:         
0:         List dynamicallyIncludedDestinations = netConnector.getDynamicallyIncludedDestinations();
1:         assertEquals(new ActiveMQQueue("include.test.foo"), dynamicallyIncludedDestinations.get(0));
1:         assertEquals(new ActiveMQTopic("include.test.bar"), dynamicallyIncludedDestinations.get(1));
1:         
commit:523ea5f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
1: import java.net.URI;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ConnectorXBeanConfigTest extends TestCase {
1: 
1:     protected BrokerService brokerService;
1: 
0:     public void testConnectorConfiguredCorrectly() throws Throwable {
1:         
0:         TransportConnector connector = (TransportConnector) brokerService.getTransportConnectors().get(0);
1:         
0:         assertEquals( new URI("tcp://localhost:61636"), connector.getUri() );
0:         assertTrue( connector.getTaskRunnerFactory() == brokerService.getTaskRunnerFactory() );
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         String uri = "org/apache/activemq/xbean/connector-test.xml";
0:         return BrokerFactory.createBroker(new URI("xbean:"+uri));
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectorXBeanConfigTest.class);
commit:62e1abf
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void testBrokerRestartFails() throws Exception {
0:     	brokerService.stop();
0:     	brokerService.waitUntilStopped();
0:     	
0:     	try {
0:     		brokerService.start();
0:     	} catch (Exception e) {
0:     		return;
1:     	}
0:     	fail("Error broker should have prevented us from starting it again");
1:     }
0:     
1:     public void testForceBrokerRestart() throws Exception {
0:     	brokerService.stop();
0:     	brokerService.waitUntilStopped();
0:     	
0:     	brokerService.start(true); // force restart
0:     	brokerService.waitUntilStarted();
0:     	
0:     	//send and receive a message from a restarted broker
0:     	ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61636");
0:     	Connection conn = factory.createConnection();
0:     	Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	conn.start();
0:     	Destination dest = new ActiveMQQueue("test");
0:     	MessageProducer producer = sess.createProducer(dest);
0:     	MessageConsumer consumer = sess.createConsumer(dest);
0:     	producer.send(sess.createTextMessage("test"));
0:     	TextMessage msg = (TextMessage)consumer.receive(1000);
0:     	assertEquals("test", msg.getText());
1:     }
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:e1389a6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ConnectorXBeanConfigTest.class);
/////////////////////////////////////////////////////////////////////////
0:     	LOG.info("try and connect to restarted broker");
commit:72b9416
/////////////////////////////////////////////////////////////////////////
1:     public void testBrokerRestartIsAllowed() throws Exception {
0:     
0:     	// redundant start is now ignored
0:     	brokerService.start();
============================================================================