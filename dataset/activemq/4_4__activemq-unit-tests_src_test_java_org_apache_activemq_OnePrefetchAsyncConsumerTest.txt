1:6a73c40: /**
1:6a73c40:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6a73c40:  * contributor license agreements.  See the NOTICE file distributed with
1:6a73c40:  * this work for additional information regarding copyright ownership.
1:6a73c40:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6a73c40:  * (the "License"); you may not use this file except in compliance with
1:6a73c40:  * the License.  You may obtain a copy of the License at
1:6a73c40:  *
1:6a73c40:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6a73c40:  *
1:6a73c40:  * Unless required by applicable law or agreed to in writing, software
1:6a73c40:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6a73c40:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6a73c40:  * See the License for the specific language governing permissions and
1:6a73c40:  * limitations under the License.
1:6a73c40:  */
1:6a73c40: package org.apache.activemq;
7:6a73c40: 
1:6a73c40: import java.util.concurrent.TimeUnit;
1:5b533c7: import java.util.concurrent.atomic.AtomicBoolean;
1:6a73c40: 
1:6a73c40: import javax.jms.Connection;
1:6a73c40: import javax.jms.ConnectionConsumer;
1:42e51a3: import javax.jms.ConnectionFactory;
1:6a73c40: import javax.jms.JMSException;
1:6a73c40: import javax.jms.Message;
1:6a73c40: import javax.jms.MessageListener;
1:6a73c40: import javax.jms.MessageProducer;
1:6a73c40: import javax.jms.Queue;
1:6a73c40: import javax.jms.ServerSession;
1:6a73c40: import javax.jms.ServerSessionPool;
1:6a73c40: import javax.jms.Session;
1:6a73c40: import javax.jms.TextMessage;
1:6a73c40: 
1:6a73c40: import org.apache.activemq.broker.BrokerService;
1:6a73c40: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6a73c40: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6a73c40: import org.apache.activemq.command.ActiveMQQueue;
1:5b533c7: import org.apache.activemq.util.Wait;
1:4faf11d: import org.junit.After;
1:4faf11d: import org.junit.Before;
1:4faf11d: import org.junit.Ignore;
1:4faf11d: import org.junit.Test;
1:4faf11d: import org.junit.runner.RunWith;
1:4faf11d: import org.junit.runners.BlockJUnit4ClassRunner;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6a73c40: 
1:6a73c40: // see: https://issues.apache.org/activemq/browse/AMQ-2651
1:4faf11d: @RunWith(BlockJUnit4ClassRunner.class)
1:6a73c40: public class OnePrefetchAsyncConsumerTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(OnePrefetchAsyncConsumerTest.class);
1:6a73c40: 
1:5b533c7:     private Connection connection;
1:5b533c7:     private ConnectionConsumer connectionConsumer;
1:5b533c7:     private Queue queue;
1:5b533c7:     private final AtomicBoolean completed = new AtomicBoolean();
1:5b533c7:     private final AtomicBoolean success = new AtomicBoolean();
1:6a73c40: 
1:4faf11d:     @Ignore("https://issues.apache.org/jira/browse/AMQ-5126")
1:4faf11d:     @Test(timeout = 60 * 1000)
1:6a73c40:     public void testPrefetchExtension() throws Exception {
1:6a73c40:         Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:6a73c40:         MessageProducer producer = session.createProducer(queue);
1:6a73c40: 
1:6a73c40:         // when Msg1 is acked, the PrefetchSubscription will (incorrectly?) increment its prefetchExtension
1:6a73c40:         producer.send(session.createTextMessage("Msg1"));
1:6a73c40: 
1:6a73c40:         // Msg2 will exhaust the ServerSessionPool (since it only has 1 ServerSession)
1:6a73c40:         producer.send(session.createTextMessage("Msg2"));
1:6a73c40: 
1:6a73c40:         // Msg3 will cause the test to fail as it will attempt to retrieve an additional ServerSession from
1:5b533c7:         // an exhausted ServerSessionPool due to the (incorrectly?) incremented prefetchExtension in the
1:5b533c7:         // PrefetchSubscription
1:6a73c40:         producer.send(session.createTextMessage("Msg3"));
1:42e51a3: 
2:6a73c40:         session.commit();
1:42e51a3: 
1:5b533c7:         assertTrue("test completed on time", Wait.waitFor(new Wait.Condition() {
1:6a73c40: 
1:5b533c7:             @Override
1:5b533c7:             public boolean isSatisified() throws Exception {
1:5b533c7:                 return completed.get();
1:5b533c7:             }
1:5b533c7:         }));
1:5b533c7: 
1:5b533c7:         assertTrue("Attempted to retrieve more than one ServerSession at a time", success.get());
24:6a73c40:     }
1:42e51a3: 
1:6d2f262:     @Override
1:42e51a3:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:42e51a3:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:42e51a3:     }
1:42e51a3: 
1:4faf11d:     @Before
1:4faf11d:     public void setUp() throws Exception {
1:c2179d1:         setAutoFail(true);
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:6a73c40:         super.setUp();
1:6a73c40: 
1:6a73c40:         connection = createConnection();
1:6a73c40:         queue = createQueue();
1:6a73c40:         // note the last arg of 1, this becomes the prefetchSize in PrefetchSubscription
1:5b533c7:         connectionConsumer = connection.createConnectionConsumer(queue, null, new TestServerSessionPool(connection), 1);
1:6a73c40:         connection.start();
1:6a73c40:     }
1:6a73c40: 
1:4faf11d:     @After
1:4faf11d:     public void tearDown() throws Exception {
1:6a73c40:         connectionConsumer.close();
1:6a73c40:         connection.close();
1:6a73c40:         super.tearDown();
1:6a73c40:     }
1:6a73c40: 
1:6d2f262:     @Override
1:6a73c40:     protected BrokerService createBroker() throws Exception {
1:6a73c40:         BrokerService answer = super.createBroker();
1:6a73c40:         PolicyMap policyMap = new PolicyMap();
1:6a73c40:         PolicyEntry defaultEntry = new PolicyEntry();
1:6a73c40:         // ensure prefetch is exact. only delivery next when current is acked
1:6a73c40:         defaultEntry.setUsePrefetchExtension(false);
1:6a73c40:         policyMap.setDefaultEntry(defaultEntry);
1:6a73c40:         answer.setDestinationPolicy(policyMap);
1:6a73c40:         return answer;
1:6a73c40:     }
1:42e51a3: 
1:6a73c40:     protected Queue createQueue() {
1:6a73c40:         return new ActiveMQQueue(getDestinationString());
1:6a73c40:     }
1:6a73c40: 
1:6a73c40:     // simulates a ServerSessionPool with only 1 ServerSession
1:6a73c40:     private class TestServerSessionPool implements ServerSessionPool {
1:5b533c7:         Connection connection;
1:5b533c7:         TestServerSession serverSession;
1:5b533c7:         boolean serverSessionInUse = false;
1:6a73c40: 
1:5b533c7:         public TestServerSessionPool(Connection connection) throws JMSException {
1:5b533c7:             this.connection = connection;
1:5b533c7:             this.serverSession = new TestServerSession(this);
1:5b533c7:         }
1:6a73c40: 
1:5b533c7:         @Override
1:6d2f262:         public ServerSession getServerSession() throws JMSException {
1:5b533c7:             synchronized (this) {
1:5b533c7:                 if (serverSessionInUse) {
1:5b533c7:                     LOG.info("asked for session while in use, not serialised delivery");
1:5b533c7:                     success.set(false);
1:5b533c7:                     completed.set(true);
1:5b533c7:                 }
1:5b533c7:                 serverSessionInUse = true;
1:5b533c7:                 return serverSession;
1:5b533c7:             }
1:5b533c7:         }
1:6a73c40:     }
1:6a73c40: 
1:6a73c40:     private class TestServerSession implements ServerSession {
1:5b533c7:         TestServerSessionPool pool;
1:5b533c7:         Session session;
1:6a73c40: 
1:5b533c7:         public TestServerSession(TestServerSessionPool pool) throws JMSException {
1:5b533c7:             this.pool = pool;
1:5b533c7:             session = pool.connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:5b533c7:             session.setMessageListener(new TestMessageListener());
1:5b533c7:         }
1:6a73c40: 
1:5b533c7:         @Override
1:6d2f262:         public Session getSession() throws JMSException {
1:5b533c7:             return session;
1:5b533c7:         }
1:6a73c40: 
1:5b533c7:         @Override
1:6d2f262:         public void start() throws JMSException {
1:5b533c7:             // use a separate thread to process the message asynchronously
1:5b533c7:             new Thread() {
1:5b533c7:                 @Override
1:6d2f262:                 public void run() {
1:5b533c7:                     // let the session deliver the message
1:5b533c7:                     session.run();
1:6a73c40: 
1:5b533c7:                     // commit the tx and return ServerSession to pool
1:4faf11d:                     LOG.debug("Waiting on pool");
1:5b533c7:                     synchronized (pool) {
1:8ec1347:                         try {
1:4faf11d:                             LOG.debug("About to call session.commit");
1:8ec1347:                             session.commit();
1:4faf11d:                             LOG.debug("Commit completed");
1:5b533c7:                         } catch (JMSException e) {
1:4faf11d:                             LOG.error("In start", e);
1:8ec1347:                         }
1:8ec1347:                         pool.serverSessionInUse = false;
1:5b533c7:                     }
1:5b533c7:                 }
1:5b533c7:             }.start();
1:5b533c7:         }
1:8ec1347:     }
1:6a73c40: 
1:6a73c40:     private class TestMessageListener implements MessageListener {
1:6d2f262:         @Override
1:6a73c40:         public void onMessage(Message message) {
2:6a73c40:             try {
1:5b533c7:                 String text = ((TextMessage) message).getText();
1:5b533c7:                 LOG.info("got message: " + text);
1:5b533c7:                 if (text.equals("Msg3")) {
1:5b533c7:                     // if we get here, Exception in getServerSession() was not thrown, test is
1:5b533c7:                     // successful this obviously doesn't happen now, need to fix prefetchExtension
1:5b533c7:                     // computation logic in PrefetchSubscription to get here
1:5b533c7:                     success.set(true);
1:5b533c7:                     completed.set(true);
1:5b533c7:                 } else if (text.equals("Msg2")) {
1:5b533c7:                     // simulate long message processing so that Msg3 comes when Msg2 is still being
1:5b533c7:                     // processed and thus the single ServerSession is in use
1:5b533c7:                     TimeUnit.SECONDS.sleep(4);
1:5b533c7:                 }
1:5b533c7:             } catch (JMSException e) {
1:4faf11d:                 LOG.error("in onMessage", e);
1:5b533c7:             } catch (InterruptedException e) {
1:4faf11d:                 LOG.error("in onMessage",e);
1:6a73c40:             }
1:6a73c40:         }
1:6a73c40:     }
1:6a73c40: 
1:6a73c40: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:4faf11d
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
1:     @Ignore("https://issues.apache.org/jira/browse/AMQ-5126")
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("Waiting on pool");
1:                             LOG.debug("About to call session.commit");
1:                             LOG.debug("Commit completed");
1:                             LOG.error("In start", e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("in onMessage", e);
1:                 LOG.error("in onMessage",e);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5b533c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     private Connection connection;
1:     private ConnectionConsumer connectionConsumer;
1:     private Queue queue;
1:     private final AtomicBoolean completed = new AtomicBoolean();
1:     private final AtomicBoolean success = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
1:         // an exhausted ServerSessionPool due to the (incorrectly?) incremented prefetchExtension in the
1:         // PrefetchSubscription
1:         assertTrue("test completed on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return completed.get();
1:             }
1:         }));
1: 
1:         assertTrue("Attempted to retrieve more than one ServerSession at a time", success.get());
/////////////////////////////////////////////////////////////////////////
1:         connectionConsumer = connection.createConnectionConsumer(queue, null, new TestServerSessionPool(connection), 1);
/////////////////////////////////////////////////////////////////////////
1:         Connection connection;
1:         TestServerSession serverSession;
1:         boolean serverSessionInUse = false;
1:         public TestServerSessionPool(Connection connection) throws JMSException {
1:             this.connection = connection;
1:             this.serverSession = new TestServerSession(this);
1:         }
1:         @Override
1:             synchronized (this) {
1:                 if (serverSessionInUse) {
1:                     LOG.info("asked for session while in use, not serialised delivery");
1:                     success.set(false);
1:                     completed.set(true);
1:                 }
1:                 serverSessionInUse = true;
1:                 return serverSession;
1:             }
1:         }
1:         TestServerSessionPool pool;
1:         Session session;
1:         public TestServerSession(TestServerSessionPool pool) throws JMSException {
1:             this.pool = pool;
1:             session = pool.connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:             session.setMessageListener(new TestMessageListener());
1:         }
1:         @Override
1:             return session;
1:         }
1:         @Override
1:             // use a separate thread to process the message asynchronously
1:             new Thread() {
1:                 @Override
1:                     // let the session deliver the message
1:                     session.run();
1:                     // commit the tx and return ServerSession to pool
1:                     synchronized (pool) {
1:                         } catch (JMSException e) {
1:                     }
1:                 }
1:             }.start();
1:         }
1:                 String text = ((TextMessage) message).getText();
1:                 LOG.info("got message: " + text);
1:                 if (text.equals("Msg3")) {
1:                     // if we get here, Exception in getServerSession() was not thrown, test is
1:                     // successful this obviously doesn't happen now, need to fix prefetchExtension
1:                     // computation logic in PrefetchSubscription to get here
1:                     success.set(true);
1:                     completed.set(true);
1:                 } else if (text.equals("Msg2")) {
1:                     // simulate long message processing so that Msg3 comes when Msg2 is still being
1:                     // processed and thus the single ServerSession is in use
1:                     TimeUnit.SECONDS.sleep(4);
1:                 }
1:             } catch (JMSException e) {
1:             } catch (InterruptedException e) {
commit:ef24cc9
commit:6d2f262
/////////////////////////////////////////////////////////////////////////
0:               testMutex.wait(TimeUnit.SECONDS.toMillis(10));
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:          @Override
1:         public ServerSession getServerSession() throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:          @Override
1:         public Session getSession() throws JMSException {
0:          @Override
1:         public void start() throws JMSException {
0:                  @Override
1:                 public void run() {
/////////////////////////////////////////////////////////////////////////
0:         @Override
commit:934eaf9
/////////////////////////////////////////////////////////////////////////
0:               testMutex.wait(TimeUnit.SECONDS.toMillis(5));
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:         bindAddress = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:039b646
/////////////////////////////////////////////////////////////////////////
0:         long done = System.currentTimeMillis() + getMaxTestTime();
0:            while (!testMutex.testCompleted && System.currentTimeMillis() < done) {
0:          assertTrue("completed on time", testMutex.testCompleted);
/////////////////////////////////////////////////////////////////////////
0:                          testMutex.notifyAll();
/////////////////////////////////////////////////////////////////////////
0:                           testMutex.notifyAll();
commit:c2179d1
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
commit:8ec1347
/////////////////////////////////////////////////////////////////////////
0:                      // commit the tx and
1:                         try {
1:                             session.commit();
1:                         }
0:                         catch (JMSException e) {
1:                         }
1:                         pool.serverSessionInUse = false;
commit:6a73c40
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.ServerSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: // see: https://issues.apache.org/activemq/browse/AMQ-2651
1: public class OnePrefetchAsyncConsumerTest extends EmbeddedBrokerTestSupport {
0:     private static final Log LOG = LogFactory.getLog(OnePrefetchAsyncConsumerTest.class);
1: 
0:     private TestMutex testMutex;
0:     protected Connection connection;
0:     protected ConnectionConsumer connectionConsumer;
0:     protected Queue queue;
0:     protected CountDownLatch messageTwoDelay = new CountDownLatch(1);
1: 
1:     public void testPrefetchExtension() throws Exception {
1:         Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         // when Msg1 is acked, the PrefetchSubscription will (incorrectly?) increment its prefetchExtension
1:         producer.send(session.createTextMessage("Msg1"));
1: 
1:         // Msg2 will exhaust the ServerSessionPool (since it only has 1 ServerSession)
1:         producer.send(session.createTextMessage("Msg2"));
1: 
1:         // Msg3 will cause the test to fail as it will attempt to retrieve an additional ServerSession from
0:         // an exhausted ServerSessionPool due to the (incorrectly?) incremented prefetchExtension in the PrefetchSubscription
1:         producer.send(session.createTextMessage("Msg3"));
1:         
1:         session.commit();
1:         
0:         // wait for test to complete and the test result to get set
0:         // this happens asynchronously since the messages are delivered asynchronously
0:         synchronized (testMutex) {
0:            while (!testMutex.testCompleted) {
0:               testMutex.wait();
1:            }
1:         }
1:         
0:         //test completed, result is ready
0:         assertTrue("Attempted to retrieve more than one ServerSession at a time", testMutex.testSuccessful);
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         super.setUp();
1: 
0:         testMutex = new TestMutex();
1:         connection = createConnection();
1:         queue = createQueue();
1:         // note the last arg of 1, this becomes the prefetchSize in PrefetchSubscription
0:         connectionConsumer = connection.createConnectionConsumer(
0:            queue, null, new TestServerSessionPool(connection), 1);
1:         connection.start();
1:     }
1: 
0:     protected void tearDown() throws Exception {
1:         connectionConsumer.close();
1:         connection.close();
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = super.createBroker();
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         // ensure prefetch is exact. only delivery next when current is acked
1:         defaultEntry.setUsePrefetchExtension(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         answer.setDestinationPolicy(policyMap);
1:         return answer;
1:     }
1:     
1:     protected Queue createQueue() {
1:         return new ActiveMQQueue(getDestinationString());
1:     }
1: 
1:     // simulates a ServerSessionPool with only 1 ServerSession
1:     private class TestServerSessionPool implements ServerSessionPool {
0:          Connection connection;
0:          TestServerSession serverSession;
0:          boolean serverSessionInUse = false;
1: 
0:          public TestServerSessionPool(Connection connection) throws JMSException {
0:              this.connection = connection;
0:              serverSession = new TestServerSession(this);
1:          }
1: 
0:          public ServerSession getServerSession() throws JMSException {
0:              synchronized (this) {
0:                  if (serverSessionInUse) {
0:                      LOG.info("asked for session while in use, not serialised delivery");
0:                      synchronized (testMutex) {
0:                         testMutex.testSuccessful = false;
0:                         testMutex.testCompleted = true;
1:                      }
1:                  }
0:                  serverSessionInUse = true;
0:                  return serverSession;
1:              }
1:          }
1:     }
1: 
1:     private class TestServerSession implements ServerSession {
0:          TestServerSessionPool pool;
0:          Session session;
1: 
0:          public TestServerSession(TestServerSessionPool pool) throws JMSException {
0:              this.pool = pool;
0:              session = pool.connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
0:              session.setMessageListener(new TestMessageListener());
1:          }
1: 
0:          public Session getSession() throws JMSException {
0:              return session;
1:          }
1: 
0:          public void start() throws JMSException {
0:              // use a separate thread to process the message asynchronously
0:              new Thread() {
0:                  public void run() {
0:                      // let the session deliver the message
0:                      session.run();
1: 
0:                      // commit the tx
1:                      try {
1:                          session.commit();
1:                      }
0:                      catch (JMSException e) {
1:                      }
1: 
0:                      // return ServerSession to pool
0:                      synchronized (pool) {
0:                          pool.serverSessionInUse = false;
1:                      }
1: 
0:                      // let the test check if the test was completed
0:                      synchronized (testMutex) {
0:                          testMutex.notify();
1:                      }
1:                  }
0:               }.start();
1:          }
1:     }
1: 
1:     private class TestMessageListener implements MessageListener {
1:         public void onMessage(Message message) {
1:             try {
0:                String text = ((TextMessage)message).getText();
0:                LOG.info("got message: " + text);
0:                if (text.equals("Msg3")) {
0:                   // if we get here, Exception in getServerSession() was not thrown, test is successful
0:                   // this obviously doesn't happen now,
0:                   // need to fix prefetchExtension computation logic in PrefetchSubscription to get here
0:                   synchronized (testMutex) {
0:                       if (!testMutex.testCompleted) {
0:                           testMutex.testSuccessful = true;
0:                           testMutex.testCompleted = true;
1:                       }
1:                   }
1:                }
0:                else if (text.equals("Msg2")) {
0:                   // simulate long message processing so that Msg3 comes when Msg2 is still being processed
0:                   // and thus the single ServerSession is in use
0:                   TimeUnit.SECONDS.sleep(4);
1:                }
1:             }
0:             catch (JMSException e) {
1:             }
0:             catch (InterruptedException e) {
1:             }
1:         }
1:     }
1: 
0:     private class TestMutex {
0:         boolean testCompleted = false;
0:         boolean testSuccessful = true;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(OnePrefetchAsyncConsumerTest.class);
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================