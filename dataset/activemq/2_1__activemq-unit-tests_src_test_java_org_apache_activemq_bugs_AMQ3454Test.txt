1:00fb101: /**
1:00fb101:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:00fb101:  * contributor license agreements.  See the NOTICE file distributed with
1:00fb101:  * this work for additional information regarding copyright ownership.
1:00fb101:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:00fb101:  * (the "License"); you may not use this file except in compliance with
1:00fb101:  * the License.  You may obtain a copy of the License at
1:00fb101:  *
1:00fb101:  *      http://www.apache.org/licenses/LICENSE-2.0
1:00fb101:  *
1:00fb101:  * Unless required by applicable law or agreed to in writing, software
1:00fb101:  * distributed under the License is distributed on an "AS IS" BASIS,
1:00fb101:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00fb101:  * See the License for the specific language governing permissions and
1:00fb101:  * limitations under the License.
1:00fb101:  */
1:00fb101: package org.apache.activemq.bugs;
1:00fb101: 
1:00fb101: import javax.jms.Connection;
1:00fb101: import javax.jms.Message;
1:00fb101: import javax.jms.MessageProducer;
1:00fb101: import javax.jms.Session;
1:00fb101: import junit.framework.TestCase;
1:00fb101: import org.apache.activemq.ActiveMQConnectionFactory;
1:00fb101: import org.apache.activemq.broker.BrokerService;
1:00fb101: import org.apache.activemq.command.ActiveMQDestination;
1:00fb101: import org.apache.activemq.command.ActiveMQQueue;
1:00fb101: import org.slf4j.Logger;
1:00fb101: import org.slf4j.LoggerFactory;
1:00fb101: 
1:00fb101: public class AMQ3454Test extends TestCase {
1:00fb101: 
1:00fb101:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3454Test.class);
1:00fb101:     private static final int MESSAGES_COUNT = 10000;
1:00fb101: 
1:00fb101:     public void testSendWithLotsOfDestinations() throws Exception {
1:00fb101:         final BrokerService broker = new BrokerService();
1:00fb101:         broker.setPersistent(false);
1:00fb101:         broker.setUseJmx(false);
1:00fb101:         broker.setDeleteAllMessagesOnStartup(true);
1:00fb101: 
1:00fb101:         broker.addConnector("tcp://localhost:0");
1:00fb101: 
1:00fb101:         // populate a bunch of destinations, validate the impact on a call to send
1:00fb101:         ActiveMQDestination[] destinations = new ActiveMQDestination[MESSAGES_COUNT];
1:00fb101:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:00fb101:             destinations[idx] = new ActiveMQQueue(getDestinationName() + "-" + idx);
1:00fb101:         }
1:00fb101:         broker.setDestinations(destinations);
1:00fb101:         broker.start();
1:00fb101: 
1:00fb101:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:00fb101:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
1:00fb101:         final Connection connection = factory.createConnection();
1:00fb101:         connection.start();
1:00fb101: 
1:00fb101:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:00fb101:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getDestinationName()));
1:00fb101: 
1:00fb101:         long start = System.currentTimeMillis();
1:00fb101:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:00fb101:             Message message = session.createTextMessage("" + idx);
1:00fb101:             producer.send(message);
1:00fb101:         }
1:00fb101:         LOG.info("Duration: " + (System.currentTimeMillis() - start) + " millis");
1:00fb101:         producer.close();
1:00fb101:         session.close();
1:00fb101: 
1:00fb101:     }
1:00fb101: 
1:00fb101:     protected String getDestinationName() {
1:00fb101:         return getClass().getName() + "." + getName();
1:00fb101:     }
1:00fb101: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:00fb101
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3454Test extends TestCase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3454Test.class);
1:     private static final int MESSAGES_COUNT = 10000;
1: 
1:     public void testSendWithLotsOfDestinations() throws Exception {
1:         final BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         broker.addConnector("tcp://localhost:0");
1: 
1:         // populate a bunch of destinations, validate the impact on a call to send
1:         ActiveMQDestination[] destinations = new ActiveMQDestination[MESSAGES_COUNT];
1:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:             destinations[idx] = new ActiveMQQueue(getDestinationName() + "-" + idx);
1:         }
1:         broker.setDestinations(destinations);
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         final Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getDestinationName()));
1: 
1:         long start = System.currentTimeMillis();
1:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:             Message message = session.createTextMessage("" + idx);
1:             producer.send(message);
1:         }
1:         LOG.info("Duration: " + (System.currentTimeMillis() - start) + " millis");
1:         producer.close();
1:         session.close();
1: 
1:     }
1: 
1:     protected String getDestinationName() {
1:         return getClass().getName() + "." + getName();
1:     }
1: }
============================================================================