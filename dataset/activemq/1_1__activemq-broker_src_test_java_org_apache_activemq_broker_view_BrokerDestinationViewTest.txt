1:56070af: /**
1:56070af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56070af:  * contributor license agreements.  See the NOTICE file distributed with
1:56070af:  * this work for additional information regarding copyright ownership.
1:56070af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56070af:  * (the "License"); you may not use this file except in compliance with
1:56070af:  * the License.  You may obtain a copy of the License at
1:56070af:  *
1:56070af:  *      http://www.apache.org/licenses/LICENSE-2.0
1:56070af:  *
1:56070af:  * Unless required by applicable law or agreed to in writing, software
1:56070af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56070af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56070af:  * See the License for the specific language governing permissions and
1:56070af:  * limitations under the License.
1:56070af:  */
1:56070af: package org.apache.activemq.broker.view;
1:56070af: 
1:56070af: import javax.jms.Connection;
1:56070af: import javax.jms.Message;
1:56070af: import javax.jms.MessageConsumer;
1:56070af: import javax.jms.MessageProducer;
1:56070af: import javax.jms.Queue;
1:56070af: import javax.jms.Session;
1:56070af: import org.apache.activemq.ActiveMQConnectionFactory;
1:56070af: import org.apache.activemq.broker.BrokerRegistry;
1:56070af: import org.apache.activemq.broker.BrokerService;
1:56070af: import org.junit.After;
1:56070af: import org.junit.Before;
1:56070af: import org.junit.Test;
1:56070af: import static org.junit.Assert.assertEquals;
1:56070af: 
1:56070af: public class BrokerDestinationViewTest {
1:56070af: 
1:56070af:     protected BrokerService brokerService;
1:56070af:     protected ActiveMQConnectionFactory factory;
1:56070af:     protected Connection producerConnection;
1:56070af: 
1:56070af:     protected Session producerSession;
1:56070af:     protected MessageConsumer consumer;
1:56070af:     protected MessageProducer producer;
1:56070af:     protected Queue queue;
1:56070af:     protected int messageCount = 10000;
1:56070af:     protected int timeOutInSeconds = 10;
1:56070af: 
1:56070af: 
1:56070af: 
1:56070af:     @Before
1:56070af:     public void setUp() throws Exception {
1:56070af:         brokerService = new BrokerService();
1:56070af:         brokerService.setPersistent(false);
1:56070af:         brokerService.start();
1:56070af: 
1:56070af:         factory =  new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:56070af:         producerConnection = factory.createConnection();
1:56070af:         producerConnection.start();
1:56070af:         producerSession = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:56070af:         queue = producerSession.createQueue(getClass().getName());
1:56070af:         producer = producerSession.createProducer(queue);
1:56070af:     }
1:56070af: 
1:56070af:     @After
1:56070af:     public void tearDown() throws Exception {
1:56070af:         if (producerConnection != null){
1:56070af:             producerConnection.close();
1:56070af:         }
1:56070af:         if (brokerService != null) {
1:56070af:             brokerService.stop();
1:56070af:         }
1:56070af:     }
1:56070af: 
1:56070af:     @Test
1:56070af:     public void testBrokerDestinationView() throws Exception {
1:56070af:          for (int i = 0; i < messageCount; i++){
1:56070af:              Message message = producerSession.createTextMessage("test " + i);
1:56070af:              producer.send(message);
1:56070af: 
1:56070af:          }
1:56070af:          MessageBrokerView messageBrokerView = MessageBrokerViewRegistry.getInstance().lookup("");
1:56070af:          BrokerDestinationView destinationView = messageBrokerView.getQueueDestinationView(getClass().getName());
1:56070af:          assertEquals(destinationView.getQueueSize(),messageCount);
1:56070af: 
1:56070af:     }
1:56070af: }
============================================================================
author:Robert Davies
-------------------------------------------------------------------------------
commit:56070af
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.view;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
1: 
1: public class BrokerDestinationViewTest {
1: 
1:     protected BrokerService brokerService;
1:     protected ActiveMQConnectionFactory factory;
1:     protected Connection producerConnection;
1: 
1:     protected Session producerSession;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Queue queue;
1:     protected int messageCount = 10000;
1:     protected int timeOutInSeconds = 10;
1: 
1: 
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1: 
1:         factory =  new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:         producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         producerSession = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         queue = producerSession.createQueue(getClass().getName());
1:         producer = producerSession.createProducer(queue);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (producerConnection != null){
1:             producerConnection.close();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testBrokerDestinationView() throws Exception {
1:          for (int i = 0; i < messageCount; i++){
1:              Message message = producerSession.createTextMessage("test " + i);
1:              producer.send(message);
1: 
1:          }
1:          MessageBrokerView messageBrokerView = MessageBrokerViewRegistry.getInstance().lookup("");
1:          BrokerDestinationView destinationView = messageBrokerView.getQueueDestinationView(getClass().getName());
1:          assertEquals(destinationView.getQueueSize(),messageCount);
1: 
1:     }
1: }
============================================================================