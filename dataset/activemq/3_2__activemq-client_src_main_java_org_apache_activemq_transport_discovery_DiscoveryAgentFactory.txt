1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery;
3:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:d29ca2a: 
1:88acb0e: import org.apache.activemq.util.FactoryFinder;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: 
1:d29ca2a: public abstract class DiscoveryAgentFactory {
1:d29ca2a: 
1:fc00993:     private static final FactoryFinder DISCOVERY_AGENT_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/transport/discoveryagent/");
1:9ef4259:     private static final ConcurrentMap<String, DiscoveryAgentFactory> DISCOVERY_AGENT_FACTORYS = new ConcurrentHashMap<String, DiscoveryAgentFactory>();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param uri
1:d29ca2a:      * @return
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     private static DiscoveryAgentFactory findDiscoveryAgentFactory(URI uri) throws IOException {
1:d29ca2a:         String scheme = uri.getScheme();
1:fc00993:         if (scheme == null) {
1:d29ca2a:             throw new IOException("DiscoveryAgent scheme not specified: [" + uri + "]");
1:fc00993:         }
1:933eb2f:         DiscoveryAgentFactory daf = DISCOVERY_AGENT_FACTORYS.get(scheme);
1:d29ca2a:         if (daf == null) {
1:d29ca2a:             // Try to load if from a META-INF property.
1:d29ca2a:             try {
1:fc00993:                 daf = (DiscoveryAgentFactory)DISCOVERY_AGENT_FINDER.newInstance(scheme);
1:fc00993:                 DISCOVERY_AGENT_FACTORYS.put(scheme, daf);
1:f812e34:             } catch (Throwable e) {
1:d29ca2a:                 throw IOExceptionSupport.create("DiscoveryAgent scheme NOT recognized: [" + scheme + "]", e);
2:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return daf;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static DiscoveryAgent createDiscoveryAgent(URI uri) throws IOException {
1:d29ca2a:         DiscoveryAgentFactory tf = findDiscoveryAgentFactory(uri);
1:d29ca2a:         return tf.doCreateDiscoveryAgent(uri);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     protected abstract DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException;
1:f812e34:     // {
1:f812e34:     // try {
1:f812e34:     // String type = ( uri.getScheme() == null ) ? uri.getPath() :
1:f812e34:     // uri.getScheme();
1:f812e34:     // DiscoveryAgent rc = (DiscoveryAgent)
1:f812e34:     // discoveryAgentFinder.newInstance(type);
1:f812e34:     // Map options = URISupport.parseParamters(uri);
1:f812e34:     // IntrospectionSupport.setProperties(rc, options);
1:f812e34:     // if( rc.getClass() == SimpleDiscoveryAgent.class ) {
1:f812e34:     // CompositeData data = URISupport.parseComposite(uri);
1:f812e34:     // ((SimpleDiscoveryAgent)rc).setServices(data.getComponents());
1:f812e34:     // }
1:f812e34:     // return rc;
1:f812e34:     // } catch (Throwable e) {
1:f812e34:     // throw IOExceptionSupport.create("Could not create discovery agent: "+uri,
1:f812e34:     // e);
1:f812e34:     // }
1:f812e34:     // }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private static final ConcurrentMap<String, DiscoveryAgentFactory> DISCOVERY_AGENT_FACTORYS = new ConcurrentHashMap<String, DiscoveryAgentFactory>();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final ConcurrentHashMap<String, DiscoveryAgentFactory> DISCOVERY_AGENT_FACTORYS = new ConcurrentHashMap<String, DiscoveryAgentFactory>();
/////////////////////////////////////////////////////////////////////////
1:         DiscoveryAgentFactory daf = DISCOVERY_AGENT_FACTORYS.get(scheme);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final FactoryFinder DISCOVERY_AGENT_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/transport/discoveryagent/");
0:     private static final ConcurrentHashMap DISCOVERY_AGENT_FACTORYS = new ConcurrentHashMap();
/////////////////////////////////////////////////////////////////////////
1:         if (scheme == null) {
1:         }
0:         DiscoveryAgentFactory daf = (DiscoveryAgentFactory)DISCOVERY_AGENT_FACTORYS.get(scheme);
1:                 daf = (DiscoveryAgentFactory)DISCOVERY_AGENT_FINDER.newInstance(scheme);
1:                 DISCOVERY_AGENT_FACTORYS.put(scheme, daf);
/////////////////////////////////////////////////////////////////////////
1:     protected abstract DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     static final private FactoryFinder discoveryAgentFinder = new FactoryFinder("META-INF/services/org/apache/activemq/transport/discoveryagent/");
/////////////////////////////////////////////////////////////////////////
0:         if (scheme == null)
0:         DiscoveryAgentFactory daf = (DiscoveryAgentFactory)discoveryAgentFactorys.get(scheme);
0:                 daf = (DiscoveryAgentFactory)discoveryAgentFinder.newInstance(scheme);
1:             } catch (Throwable e) {
1: 
/////////////////////////////////////////////////////////////////////////
1:     // {
1:     // try {
1:     // String type = ( uri.getScheme() == null ) ? uri.getPath() :
1:     // uri.getScheme();
1:     // DiscoveryAgent rc = (DiscoveryAgent)
1:     // discoveryAgentFinder.newInstance(type);
1:     // Map options = URISupport.parseParamters(uri);
1:     // IntrospectionSupport.setProperties(rc, options);
1:     // if( rc.getClass() == SimpleDiscoveryAgent.class ) {
1:     // CompositeData data = URISupport.parseComposite(uri);
1:     // ((SimpleDiscoveryAgent)rc).setServices(data.getComponents());
1:     // }
1:     // return rc;
1:     // } catch (Throwable e) {
1:     // throw IOExceptionSupport.create("Could not create discovery agent: "+uri,
1:     // e);
1:     // }
1:     // }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.FactoryFinder;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.util.FactoryFinder;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
0: import org.activeio.FactoryFinder;
1: import org.apache.activemq.util.IOExceptionSupport;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: public abstract class DiscoveryAgentFactory {
1: 
0:     static final private FactoryFinder discoveryAgentFinder = new FactoryFinder("META-INF/services/org/apache/activemq/transport/discoveryagent/");    
0:     static final private ConcurrentHashMap discoveryAgentFactorys = new ConcurrentHashMap();
1: 
1:     /**
1:      * @param uri
1:      * @return
1:      * @throws IOException
1:      */
1:     private static DiscoveryAgentFactory findDiscoveryAgentFactory(URI uri) throws IOException {
1:         String scheme = uri.getScheme();
0:         if( scheme == null )
1:             throw new IOException("DiscoveryAgent scheme not specified: [" + uri + "]");
0:         DiscoveryAgentFactory daf = (DiscoveryAgentFactory) discoveryAgentFactorys.get(scheme);
1:         if (daf == null) {
1:             // Try to load if from a META-INF property.
1:             try {
0:                 daf = (DiscoveryAgentFactory) discoveryAgentFinder.newInstance(scheme);
0:                 discoveryAgentFactorys.put(scheme, daf);
1:             }
0:             catch (Throwable e) {
1:                 throw IOExceptionSupport.create("DiscoveryAgent scheme NOT recognized: [" + scheme + "]", e);
1:             }
1:         }
1:         return daf;
1:     }
1:     
1:     public static DiscoveryAgent createDiscoveryAgent(URI uri) throws IOException {
1:         DiscoveryAgentFactory tf = findDiscoveryAgentFactory(uri);
1:         return tf.doCreateDiscoveryAgent(uri);
1: 
1:     }
1: 
0:     abstract protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException;
0: //    {
0: //        try {
0: //            String type = ( uri.getScheme() == null ) ? uri.getPath() : uri.getScheme();
0: //            DiscoveryAgent rc = (DiscoveryAgent) discoveryAgentFinder.newInstance(type);
0: //            Map options = URISupport.parseParamters(uri);
0: //            IntrospectionSupport.setProperties(rc, options);
0: //            if( rc.getClass() == SimpleDiscoveryAgent.class ) {
0: //                CompositeData data = URISupport.parseComposite(uri);
0: //                ((SimpleDiscoveryAgent)rc).setServices(data.getComponents());
0: //            }
0: //            return rc;
0: //        } catch (Throwable e) {
0: //            throw IOExceptionSupport.create("Could not create discovery agent: "+uri, e);
0: //        }
0: //    }   
1: }
============================================================================