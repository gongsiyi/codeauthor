1:b0c0441: /**
1:b0c0441:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b0c0441:  * contributor license agreements.  See the NOTICE file distributed with
1:b0c0441:  * this work for additional information regarding copyright ownership.
1:b0c0441:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b0c0441:  * (the "License"); you may not use this file except in compliance with
1:b0c0441:  * the License.  You may obtain a copy of the License at
1:b0c0441:  *
1:b0c0441:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c0441:  *
1:b0c0441:  * Unless required by applicable law or agreed to in writing, software
1:b0c0441:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b0c0441:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b0c0441:  * See the License for the specific language governing permissions and
1:b0c0441:  * limitations under the License.
1:b0c0441:  */
1:b0c0441: package org.apache.activemq.usecases;
1:b0c0441: 
1:b0c0441: import java.net.URI;
1:b0c0441: import java.util.Arrays;
1:b0c0441: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:b0c0441: import org.apache.activemq.broker.BrokerService;
1:b0c0441: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:b0c0441: import org.apache.activemq.network.NetworkConnector;
1:b0c0441: import org.slf4j.Logger;
1:b0c0441: import org.slf4j.LoggerFactory;
1:b0c0441: 
1:b0c0441: public class NetworkBrokerNameColonTest extends JmsMultipleBrokersTestSupport {
1:b0c0441:     private static final Logger LOG = LoggerFactory.getLogger(NetworkBrokerNameColonTest.class);
1:b0c0441: 
1:b0c0441:     public void testNetworkStartupColon() throws Exception {
1:b0c0441: 
1:b0c0441:         BrokerService brokerColon = new BrokerService();
1:b0c0441:         brokerColon.setBrokerName("BrokerA:Colon");
1:b0c0441:         brokerColon.setUseJmx(true);
1:b0c0441: 
1:b0c0441:         BrokerService brokerColonB = createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:b0c0441:         brokerColonB.addConnector("tcp://localhost:0");
1:b0c0441:         brokerColonB.start();
1:b0c0441: 
1:b0c0441:         String uri = "static:(" + brokerColonB.getTransportConnectors().get(0).getPublishableConnectString() + ")";
1:b0c0441:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:b0c0441:         connector.setName("bridge-to-b");
1:b0c0441:         brokerColon.setNetworkConnectors(Arrays.asList(new NetworkConnector[]{connector}));
1:b0c0441: 
1:b0c0441:         LOG.info("starting broker with Colon in name");
1:b0c0441:         brokerColon.start();
1:b0c0441: 
1:b0c0441:         assertTrue("got bridge to B", waitForBridgeFormation(brokerColon, 1, 0));
1:b0c0441:     }
1:b0c0441: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b0c0441
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.Arrays;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class NetworkBrokerNameColonTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkBrokerNameColonTest.class);
1: 
1:     public void testNetworkStartupColon() throws Exception {
1: 
1:         BrokerService brokerColon = new BrokerService();
1:         brokerColon.setBrokerName("BrokerA:Colon");
1:         brokerColon.setUseJmx(true);
1: 
1:         BrokerService brokerColonB = createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:         brokerColonB.addConnector("tcp://localhost:0");
1:         brokerColonB.start();
1: 
1:         String uri = "static:(" + brokerColonB.getTransportConnectors().get(0).getPublishableConnectString() + ")";
1:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:         connector.setName("bridge-to-b");
1:         brokerColon.setNetworkConnectors(Arrays.asList(new NetworkConnector[]{connector}));
1: 
1:         LOG.info("starting broker with Colon in name");
1:         brokerColon.start();
1: 
1:         assertTrue("got bridge to B", waitForBridgeFormation(brokerColon, 1, 0));
1:     }
1: }
============================================================================