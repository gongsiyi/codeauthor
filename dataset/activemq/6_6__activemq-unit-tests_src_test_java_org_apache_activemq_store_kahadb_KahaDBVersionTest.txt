1:91ae171: /**
1:91ae171:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:91ae171:  * contributor license agreements.  See the NOTICE file distributed with
1:91ae171:  * this work for additional information regarding copyright ownership.
1:91ae171:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:91ae171:  * (the "License"); you may not use this file except in compliance with
1:91ae171:  * the License.  You may obtain a copy of the License at
2:91ae171:  *
1:91ae171:  *      http://www.apache.org/licenses/LICENSE-2.0
1:91ae171:  *
1:91ae171:  * Unless required by applicable law or agreed to in writing, software
1:91ae171:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91ae171:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91ae171:  * See the License for the specific language governing permissions and
1:91ae171:  * limitations under the License.
1:91ae171:  */
1:91ae171: package org.apache.activemq.store.kahadb;
1:cba0468: 
1:cba0468: import java.io.File;
1:e6bfc94: import java.io.IOException;
1:e6bfc94: import java.security.ProtectionDomain;
1:cba0468: 
1:3bf9d0c: import javax.jms.Connection;
1:3bf9d0c: import javax.jms.Message;
1:3bf9d0c: import javax.jms.MessageConsumer;
1:3bf9d0c: import javax.jms.MessageProducer;
1:3bf9d0c: import javax.jms.Queue;
1:3bf9d0c: import javax.jms.Session;
1:3bf9d0c: import javax.jms.TextMessage;
1:3bf9d0c: import javax.jms.Topic;
1:3bf9d0c: 
1:3bf9d0c: import junit.framework.TestCase;
1:3bf9d0c: 
1:3bf9d0c: import org.apache.activemq.ActiveMQConnectionFactory;
1:3bf9d0c: import org.apache.activemq.broker.BrokerService;
1:3bf9d0c: import org.apache.activemq.util.IOHelper;
1:3bf9d0c: import org.slf4j.Logger;
1:3bf9d0c: import org.slf4j.LoggerFactory;
1:3bf9d0c: 
1:91ae171: /**
1:cba0468:  * @author chirino
1:91ae171:  */
1:91ae171: public class KahaDBVersionTest extends TestCase {
1:e6bfc94:     static String basedir;
1:e6bfc94:     static {
1:e6bfc94:         try {
1:e6bfc94:             ProtectionDomain protectionDomain = KahaDBVersionTest.class.getProtectionDomain();
1:e6bfc94:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalPath();
1:e6bfc94:         } catch (IOException e) {
1:e6bfc94:             basedir = ".";
1:e6bfc94:         }
1:e6bfc94:     }
1:8871c67: 
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(KahaDBVersionTest.class);
1:3bf9d0c:     final static File VERSION_1_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion1");
1:3bf9d0c:     final static File VERSION_2_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion2");
1:3bf9d0c:     final static File VERSION_3_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion3");
1:3bf9d0c:     final static File VERSION_4_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion4");
1:8871b0e:     final static File VERSION_5_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion5");
1:8871b0e: 
1:3bf9d0c: 
1:8871c67:     BrokerService broker = null;
1:8871c67: 
1:91ae171:     protected BrokerService createBroker(KahaDBPersistenceAdapter kaha) throws Exception {
1:8871c67:         broker = new BrokerService();
1:91ae171:         broker.setUseJmx(false);
1:91ae171:         broker.setPersistenceAdapter(kaha);
1:91ae171:         broker.start();
1:91ae171:         return broker;
3:91ae171:     }
1:cba0468: 
1:3bf9d0c:     @Override
1:8871c67:     protected void tearDown() throws Exception {
1:8871c67:         if (broker != null) {
1:8871c67:             broker.stop();
1:8871c67:         }
1:8871c67:     }
1:3bf9d0c: 
1:cba0468:     public void XtestCreateStore() throws Exception {
1:cba0468:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:8871b0e:         File dir = new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion5");
1:91ae171:         IOHelper.deleteFile(dir);
1:91ae171:         kaha.setDirectory(dir);
1:3bf9d0c:         kaha.setJournalMaxFileLength(1024 * 1024);
2:91ae171:         BrokerService broker = createBroker(kaha);
1:3f0cf98:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
2:91ae171:         Connection connection = cf.createConnection();
2:91ae171:         connection.setClientID("test");
2:91ae171:         connection.start();
1:8871c67:         producerSomeMessages(connection, 1000);
1:3f0cf98:         connection.close();
1:3f0cf98:         broker.stop();
1:3f0cf98:     }
1:3f0cf98: 
1:8871c67:     private void producerSomeMessages(Connection connection, int numToSend) throws Exception {
2:91ae171:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
2:91ae171:         Topic topic = session.createTopic("test.topic");
2:91ae171:         Queue queue = session.createQueue("test.queue");
1:3bf9d0c:         MessageConsumer consumer = session.createDurableSubscriber(topic, "test");
1:91ae171:         consumer.close();
1:91ae171:         MessageProducer producer = session.createProducer(topic);
1:3f0cf98:         producer.setPriority(9);
1:3bf9d0c:         for (int i = 0; i < numToSend; i++) {
1:3bf9d0c:             Message msg = session.createTextMessage("test message:" + i);
1:91ae171:             producer.send(msg);
1:8bf987b:         }
1:3bf9d0c:         LOG.info("sent " + numToSend + " to topic");
1:91ae171:         producer = session.createProducer(queue);
1:3bf9d0c:         for (int i = 0; i < numToSend; i++) {
1:3bf9d0c:             Message msg = session.createTextMessage("test message:" + i);
1:91ae171:             producer.send(msg);
1:91ae171:         }
1:3bf9d0c:         LOG.info("sent " + numToSend + " to queue");
1:91ae171:     }
1:3f0cf98: 
1:3bf9d0c:     public void testVersion1Conversion() throws Exception {
1:3f0cf98:         doConvertRestartCycle(VERSION_1_DB);
1:3f0cf98:     }
1:3f0cf98: 
1:3bf9d0c:     public void testVersion2Conversion() throws Exception {
1:3f0cf98:         doConvertRestartCycle(VERSION_2_DB);
1:3f0cf98:     }
1:3f0cf98: 
1:3bf9d0c:     public void testVersion3Conversion() throws Exception {
1:d1357b4:         doConvertRestartCycle(VERSION_3_DB);
1:d1357b4:     }
1:d1357b4: 
1:3bf9d0c:     public void testVersion4Conversion() throws Exception {
1:3bf9d0c:         doConvertRestartCycle(VERSION_4_DB);
1:3bf9d0c:     }
1:3bf9d0c: 
1:8871b0e:     public void testVersion5Conversion() throws Exception {
1:8871b0e:         doConvertRestartCycle(VERSION_5_DB);
1:8871b0e:     }
1:8871b0e: 
1:3f0cf98:     public void doConvertRestartCycle(File existingStore) throws Exception {
1:3f0cf98: 
1:91ae171:         File testDir = new File("target/activemq-data/kahadb/versionDB");
1:91ae171:         IOHelper.deleteFile(testDir);
1:3f0cf98:         IOHelper.copyFile(existingStore, testDir);
1:8871c67:         final int numToSend = 1000;
1:3f0cf98: 
1:3f0cf98:         // on repeat store will be upgraded
1:3f0cf98:         for (int repeats = 0; repeats < 3; repeats++) {
1:3f0cf98:             KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:3f0cf98:             kaha.setDirectory(testDir);
1:3f0cf98:             kaha.setJournalMaxFileLength(1024 * 1024);
1:3f0cf98:             BrokerService broker = createBroker(kaha);
1:3f0cf98:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:3f0cf98:             Connection connection = cf.createConnection();
1:3f0cf98:             connection.setClientID("test");
1:3f0cf98:             connection.start();
1:3f0cf98:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f0cf98:             Topic topic = session.createTopic("test.topic");
1:3f0cf98:             Queue queue = session.createQueue("test.queue");
1:3f0cf98: 
1:3f0cf98:             if (repeats > 0) {
1:3f0cf98:                 // upgraded store will be empty so generated some more messages
1:8871c67:                 producerSomeMessages(connection, numToSend);
1:3f0cf98:             }
1:3f0cf98: 
1:3f0cf98:             MessageConsumer queueConsumer = session.createConsumer(queue);
1:8871c67:             int count = 0;
1:8871c67:             for (int i = 0; i < (repeats == 0 ? 1000 : numToSend); i++) {
1:3f0cf98:                 TextMessage msg = (TextMessage) queueConsumer.receive(10000);
1:8871c67:                 count++;
1:3bf9d0c:                 // System.err.println(msg.getText());
2:3f0cf98:                 assertNotNull(msg);
1:3f0cf98:             }
1:8871c67:             LOG.info("Consumed " + count + " from queue");
1:8871c67:             count = 0;
1:3f0cf98:             MessageConsumer topicConsumer = session.createDurableSubscriber(topic, "test");
1:8871c67:             for (int i = 0; i < (repeats == 0 ? 1000 : numToSend); i++) {
1:3f0cf98:                 TextMessage msg = (TextMessage) topicConsumer.receive(10000);
1:8871c67:                 count++;
1:3bf9d0c:                 // System.err.println(msg.getText());
1:90d6c20:                 assertNotNull("" + count, msg);
1:3f0cf98:             }
1:8871c67:             LOG.info("Consumed " + count + " from topic");
1:3f0cf98:             connection.close();
1:3f0cf98: 
1:3f0cf98:             broker.stop();
1:91ae171:         }
1:91ae171:     }
1:91ae171: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:8871b0e
/////////////////////////////////////////////////////////////////////////
1:     final static File VERSION_5_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion5");
1: 
/////////////////////////////////////////////////////////////////////////
1:         File dir = new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion5");
/////////////////////////////////////////////////////////////////////////
1:     public void testVersion5Conversion() throws Exception {
1:         doConvertRestartCycle(VERSION_5_DB);
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:90d6c20
/////////////////////////////////////////////////////////////////////////
1:                 assertNotNull("" + count, msg);
commit:d1357b4
/////////////////////////////////////////////////////////////////////////
0:     final static File VERSION_3_DB= new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion3");
/////////////////////////////////////////////////////////////////////////
0:     public void testVersion3Conversion() throws Exception{
1:           doConvertRestartCycle(VERSION_3_DB);
1:     }
1: 
commit:8871c67
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     static final Log LOG = LogFactory.getLog(KahaDBVersionTest.class);
1: 
1:     BrokerService broker = null;
1: 
1:         broker = new BrokerService();
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         producerSomeMessages(connection, 1000);
1:     private void producerSomeMessages(Connection connection, int numToSend) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         for (int i =0; i < numToSend; i++) {
0:         LOG.info("sent "  + numToSend +" to topic");
0:         for (int i =0; i < numToSend; i++) {
0:         LOG.info("sent " + numToSend +" to queue");
/////////////////////////////////////////////////////////////////////////
1:         final int numToSend = 1000;
/////////////////////////////////////////////////////////////////////////
1:                 producerSomeMessages(connection, numToSend);
1:             int count = 0;
1:             for (int i = 0; i < (repeats == 0 ? 1000 : numToSend); i++) {
1:                 count++;
1:             LOG.info("Consumed " + count + " from queue");
1:             count = 0;
1:             for (int i = 0; i < (repeats == 0 ? 1000 : numToSend); i++) {
1:                 count++;
1:             LOG.info("Consumed " + count + " from topic");
commit:3f0cf98
/////////////////////////////////////////////////////////////////////////
0:     final static File VERSION_2_DB= new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion2");
/////////////////////////////////////////////////////////////////////////
0:         File dir = new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersionX");
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");        
0:         producerSomeMessages(connection);
1:         connection.close();
1:         broker.stop();
1:     }
1: 
0:     private void producerSomeMessages(Connection connection) throws Exception {
1:         producer.setPriority(9);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void testVersion1Conversion() throws Exception{
1:           doConvertRestartCycle(VERSION_1_DB);
1:     }
1: 
0:     public void testVersion2Conversion() throws Exception{
1:           doConvertRestartCycle(VERSION_2_DB);
1:     }
1: 
1:     public void doConvertRestartCycle(File existingStore) throws Exception {
1: 
1:         IOHelper.copyFile(existingStore, testDir);
1: 
1:         // on repeat store will be upgraded
1:         for (int repeats = 0; repeats < 3; repeats++) {
1:             KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:             kaha.setDirectory(testDir);
1:             kaha.setJournalMaxFileLength(1024 * 1024);
1:             BrokerService broker = createBroker(kaha);
1:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:             Connection connection = cf.createConnection();
1:             connection.setClientID("test");
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Topic topic = session.createTopic("test.topic");
1:             Queue queue = session.createQueue("test.queue");
1: 
1:             if (repeats > 0) {
1:                 // upgraded store will be empty so generated some more messages
0:                 producerSomeMessages(connection);
1:             }
1: 
1:             MessageConsumer queueConsumer = session.createConsumer(queue);
0:             for (int i = 0; i < 1000; i++) {
1:                 TextMessage msg = (TextMessage) queueConsumer.receive(10000);
0:                 //System.err.println(msg.getText());
1:                 assertNotNull(msg);
1:             }
1:             MessageConsumer topicConsumer = session.createDurableSubscriber(topic, "test");
0:             for (int i = 0; i < 1000; i++) {
1:                 TextMessage msg = (TextMessage) topicConsumer.receive(10000);
0:                 //System.err.println(msg.getText());
1:                 assertNotNull(msg);
1:             }
1:             connection.close();
1:             
1:             broker.stop();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3bf9d0c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:     final static File VERSION_1_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion1");
1:     final static File VERSION_2_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion2");
1:     final static File VERSION_3_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion3");
1:     final static File VERSION_4_DB = new File(basedir + "/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion4");
1:     @Override
1: 
0:         File dir = new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion4");
1:         kaha.setJournalMaxFileLength(1024 * 1024);
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "test");
1:         for (int i = 0; i < numToSend; i++) {
1:             Message msg = session.createTextMessage("test message:" + i);
1:         LOG.info("sent " + numToSend + " to topic");
1:         for (int i = 0; i < numToSend; i++) {
1:             Message msg = session.createTextMessage("test message:" + i);
1:         LOG.info("sent " + numToSend + " to queue");
1:     public void testVersion1Conversion() throws Exception {
0:         doConvertRestartCycle(VERSION_1_DB);
1:     public void testVersion2Conversion() throws Exception {
0:         doConvertRestartCycle(VERSION_2_DB);
1:     public void testVersion3Conversion() throws Exception {
0:         doConvertRestartCycle(VERSION_3_DB);
1:     }
1: 
1:     public void testVersion4Conversion() throws Exception {
1:         doConvertRestartCycle(VERSION_4_DB);
/////////////////////////////////////////////////////////////////////////
1:                 // System.err.println(msg.getText());
/////////////////////////////////////////////////////////////////////////
1:                 // System.err.println(msg.getText());
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:e6bfc94
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.ProtectionDomain;
1:     static String basedir;
1:     static {
1:         try {
1:             ProtectionDomain protectionDomain = KahaDBVersionTest.class.getProtectionDomain();
1:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalPath();
1:         } catch (IOException e) {
1:             basedir = ".";
1:         }
1:     }
0:     final static File VERSION_1_DB= new File(basedir+"/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion1");
0:     final static File VERSION_2_DB= new File(basedir+"/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion2");
0:     final static File VERSION_3_DB= new File(basedir+"/src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion3");
commit:58aca86
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     static final Logger LOG = LoggerFactory.getLogger(KahaDBVersionTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cba0468
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import javax.jms.*;
1: import java.io.File;
0: import java.io.IOException;
0: import java.io.RandomAccessFile;
0: import java.io.FileNotFoundException;
1: 
1:  * @author chirino
/////////////////////////////////////////////////////////////////////////
1:         
1:     public void XtestCreateStore() throws Exception {
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
/////////////////////////////////////////////////////////////////////////
0:         connection.stop();
0:     public void testVersionConversion() throws Exception{
1:         
/////////////////////////////////////////////////////////////////////////
0:             TextMessage msg  = (TextMessage) queueConsumer.receive(10000);
0:             //System.err.println(msg.getText());
0:             assertNotNull(msg);
0:             TextMessage msg  = (TextMessage) topicConsumer.receive(10000);
0:             //System.err.println(msg.getText());
0:             assertNotNull(msg);
0:         
0:     
commit:91ae171
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
0: 
0: import java.io.File;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.jms.Topic;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.IOHelper;
0: 
1: /**
1:  * 
1:  */
1: public class KahaDBVersionTest extends TestCase {
0: 
0:     final static File VERSION_1_DB= new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion1");
1:     protected BrokerService createBroker(KahaDBPersistenceAdapter kaha) throws Exception {
0: 
0:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistenceAdapter(kaha);
1:         broker.start();
1:         return broker;
0: 
1:     }
0: 
0:     
0:     public void testCreateStore() throws Exception {
0:         File dir = new File("src/test/resources/org/apache/activemq/store/kahadb/KahaDBVersion1");
1:         IOHelper.deleteFile(dir);
0:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setDirectory(dir);
0:         kaha.setJournalMaxFileLength(1024*1024);
1:         BrokerService broker = createBroker(kaha);
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("test");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("test.topic");
1:         Queue queue = session.createQueue("test.queue");
0:         MessageConsumer consumer = session.createDurableSubscriber(topic,"test");
1:         consumer.close();
1:         MessageProducer producer = session.createProducer(topic);
0:         for (int i =0; i < 1000; i++) {
0:             Message msg = session.createTextMessage("test message:"+i);
1:             producer.send(msg);
1:         }
1:         producer = session.createProducer(queue);
0:         for (int i =0; i < 1000; i++) {
0:             Message msg = session.createTextMessage("test message:"+i);
1:             producer.send(msg);
1:         }
0:         connection.close();
0:         broker.stop();
0: 
0:         
0: 
1:     }
0:     
0:     public void XtestVersionConversion() throws Exception{
1:         File testDir = new File("target/activemq-data/kahadb/versionDB");
1:         IOHelper.deleteFile(testDir);
0:         IOHelper.copyFile(VERSION_1_DB, testDir);
0:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
0:         kaha.setDirectory(testDir);
0:         kaha.setJournalMaxFileLength(1024*1024);
1:         BrokerService broker = createBroker(kaha);
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("test");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("test.topic");
1:         Queue queue = session.createQueue("test.queue");
0:         MessageConsumer queueConsumer = session.createConsumer(queue);
0:         for (int i = 0; i < 1000; i++) {
0:             TextMessage msg  = (TextMessage) queueConsumer.receive();
0:             System.err.println(msg.getText());
1:         }
0:         MessageConsumer topicConsumer = session.createDurableSubscriber(topic,"test");
0:         for (int i = 0; i < 1000; i++) {
0:             TextMessage msg  = (TextMessage) topicConsumer.receive();
0:             System.err.println(msg.getText());
1:         }
0:         broker.stop();
1:     }
0: 
0:    
0: 
0: 
0:     
0: 
1: }
============================================================================