1:c1da3ac: /**
1:c1da3ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c1da3ac:  * contributor license agreements.  See the NOTICE file distributed with
1:c1da3ac:  * this work for additional information regarding copyright ownership.
1:c1da3ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c1da3ac:  * (the "License"); you may not use this file except in compliance with
1:c1da3ac:  * the License.  You may obtain a copy of the License at
1:c1da3ac:  *
1:c1da3ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c1da3ac:  *
1:c1da3ac:  * Unless required by applicable law or agreed to in writing, software
1:c1da3ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1da3ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1da3ac:  * See the License for the specific language governing permissions and
1:c1da3ac:  * limitations under the License.
1:c1da3ac:  */
1:c1da3ac: package org.apache.activemq.bugs;
1:c1da3ac: 
1:c1da3ac: import javax.jms.Connection;
1:c1da3ac: import javax.jms.Message;
1:c1da3ac: import javax.jms.MessageConsumer;
1:c1da3ac: import javax.jms.MessageProducer;
1:c1da3ac: import javax.jms.Session;
1:7c3bb40: 
1:c1da3ac: import org.apache.activemq.ActiveMQConnectionFactory;
1:c1da3ac: import org.apache.activemq.ActiveMQSession;
1:c1da3ac: import org.apache.activemq.broker.BrokerTestSupport;
1:c1da3ac: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c1da3ac: import org.apache.activemq.command.ActiveMQDestination;
1:c1da3ac: import org.apache.activemq.command.ActiveMQMapMessage;
1:c1da3ac: import org.apache.activemq.command.ActiveMQObjectMessage;
1:c1da3ac: import org.apache.activemq.command.ActiveMQQueue;
1:c1da3ac: import org.apache.activemq.command.ActiveMQTextMessage;
1:c1da3ac: import org.apache.activemq.usecases.MyObject;
1:7c3bb40: import org.junit.Ignore;
1:c1da3ac: 
1:7c3bb40: import junit.framework.Test;
1:7c3bb40: 
1:7c3bb40: 
1:7c3bb40: /**
1:7c3bb40:  * AMQ-6477 changes the behavior to only clear memory if the marshalled state exists
1:7c3bb40:  * so this test no longer works
1:7c3bb40:  */
1:7c3bb40: @Ignore
1:c1da3ac: public class AMQ2103Test extends BrokerTestSupport {
1:c1da3ac:     static PolicyEntry reduceMemoryFootprint = new PolicyEntry();
1:c1da3ac:     static {
1:c1da3ac:         reduceMemoryFootprint.setReduceMemoryFootprint(true);
1:c1da3ac:     }
1:c1da3ac: 
1:c1da3ac:     public PolicyEntry defaultPolicy = reduceMemoryFootprint;
1:c1da3ac: 
1:c1da3ac:     @Override
1:c1da3ac:     protected PolicyEntry getDefaultPolicy() {
1:c1da3ac:         return defaultPolicy;
1:c1da3ac:     }
1:c1da3ac: 
1:c1da3ac:     public void initCombosForTestVerifyMarshalledStateIsCleared() throws Exception {
1:7c3bb40:         addCombinationValues("defaultPolicy", new Object[]{defaultPolicy, null});
1:c1da3ac:     }
1:c1da3ac: 
1:c1da3ac:     public static Test suite() {
1:c1da3ac:         return suite(AMQ2103Test.class);
1:c1da3ac:     }
1:c1da3ac: 
1:c1da3ac:     /**
1:c1da3ac:      * use mem persistence so no marshaling,
1:c1da3ac:      * reduceMemoryFootprint on/off that will reduce memory by whacking the marshaled state
1:c1da3ac:      * With vm transport and deferred serialisation and no persistence (mem persistence),
1:c1da3ac:      * we see the message as sent by the client so we can validate the contents against
1:c1da3ac:      * the policy
1:7c3bb40:      *
1:7c3bb40:      *
1:c1da3ac:      * @throws Exception
1:c1da3ac:      */
1:c1da3ac:     public void testVerifyMarshalledStateIsCleared() throws Exception {
1:c1da3ac: 
1:c1da3ac:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:c1da3ac:         factory.setOptimizedMessageDispatch(true);
1:c1da3ac:         factory.setObjectMessageSerializationDefered(true);
1:c1da3ac:         factory.setCopyMessageOnSend(false);
1:c1da3ac: 
1:c1da3ac:         Connection connection = factory.createConnection();
1:c1da3ac:         Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c1da3ac:         ActiveMQDestination destination = new ActiveMQQueue("testQ");
1:c1da3ac: 		MessageConsumer consumer = session.createConsumer(destination);
1:c1da3ac: 		connection.start();
1:c1da3ac: 
1:c1da3ac:         MessageProducer producer = session.createProducer(destination);
1:c1da3ac:         final MyObject obj = new MyObject("A message");
1:c1da3ac:         ActiveMQObjectMessage m1 = (ActiveMQObjectMessage)session.createObjectMessage();
1:c1da3ac:         m1.setObject(obj);
1:c1da3ac:         producer.send(m1);
1:c1da3ac: 
1:c1da3ac:         ActiveMQTextMessage m2 = new ActiveMQTextMessage();
1:c1da3ac:         m2.setText("Test Message Payload.");
1:c1da3ac:         producer.send(m2);
1:c1da3ac: 
1:c1da3ac:         ActiveMQMapMessage m3 = new ActiveMQMapMessage();
1:c1da3ac:         m3.setString("text", "my message");
1:c1da3ac:         producer.send(m3);
1:c1da3ac: 
1:c1da3ac:         Message m = consumer.receive(maxWait);
1:c1da3ac:         assertNotNull(m);
1:c1da3ac:         assertEquals(m1.getMessageId().toString(), m.getJMSMessageID());
1:c1da3ac:         assertTrue(m instanceof ActiveMQObjectMessage);
1:c1da3ac: 
1:c1da3ac:         if (getDefaultPolicy() != null) {
1:c1da3ac:             assertNull("object data cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:c1da3ac:                 ((ActiveMQObjectMessage)m).getObject());
1:c1da3ac:         }
1:c1da3ac: 
1:c1da3ac:         // verify no serialisation via vm transport
1:c1da3ac:         assertEquals("writeObject called", 0, obj.getWriteObjectCalled());
1:c1da3ac:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:c1da3ac:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1:c1da3ac: 
1:c1da3ac:         m = consumer.receive(maxWait);
1:c1da3ac:         assertNotNull(m);
1:c1da3ac:         assertEquals(m2.getMessageId().toString(), m.getJMSMessageID());
1:c1da3ac:         assertTrue(m instanceof ActiveMQTextMessage);
1:c1da3ac: 
1:c1da3ac:         if (getDefaultPolicy() != null) {
1:c1da3ac:             assertNull("text cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:c1da3ac:                 ((ActiveMQTextMessage)m).getText());
1:c1da3ac:         }
1:c1da3ac: 
1:c1da3ac:         m = consumer.receive(maxWait);
1:c1da3ac:         assertNotNull(m);
1:c1da3ac:         assertEquals(m3.getMessageId().toString(), m.getJMSMessageID());
1:c1da3ac:         assertTrue(m instanceof ActiveMQMapMessage);
1:c1da3ac: 
1:c1da3ac:         if (getDefaultPolicy() != null) {
1:c1da3ac:             assertNull("text cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:c1da3ac:                 ((ActiveMQMapMessage)m).getStringProperty("text"));
1:c1da3ac:         }
1:c1da3ac: 
1:c1da3ac:         connection.close();
1:c1da3ac:     }
1:c1da3ac: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:7c3bb40
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
1: import junit.framework.Test;
1: 
1: 
1: /**
1:  * AMQ-6477 changes the behavior to only clear memory if the marshalled state exists
1:  * so this test no longer works
1:  */
1: @Ignore
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("defaultPolicy", new Object[]{defaultPolicy, null});
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c1da3ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.usecases.MyObject;
1: 
1: public class AMQ2103Test extends BrokerTestSupport {
1:     static PolicyEntry reduceMemoryFootprint = new PolicyEntry();
1:     static {
1:         reduceMemoryFootprint.setReduceMemoryFootprint(true);
1:     }
1: 
1:     public PolicyEntry defaultPolicy = reduceMemoryFootprint;
1: 
1:     @Override
1:     protected PolicyEntry getDefaultPolicy() {
1:         return defaultPolicy;
1:     }
1: 
1:     public void initCombosForTestVerifyMarshalledStateIsCleared() throws Exception {
0:         addCombinationValues("defaultPolicy", new Object[]{defaultPolicy, null});    
1:     }
1: 
1:     public static Test suite() {
1:         return suite(AMQ2103Test.class);
1:     }
1: 
1:     /**
1:      * use mem persistence so no marshaling,
1:      * reduceMemoryFootprint on/off that will reduce memory by whacking the marshaled state
1:      * With vm transport and deferred serialisation and no persistence (mem persistence),
1:      * we see the message as sent by the client so we can validate the contents against
1:      * the policy
1:      * @throws Exception
1:      */
1:     public void testVerifyMarshalledStateIsCleared() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.setOptimizedMessageDispatch(true);
1:         factory.setObjectMessageSerializationDefered(true);
1:         factory.setCopyMessageOnSend(false);
1: 
1:         Connection connection = factory.createConnection();
1:         Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQDestination destination = new ActiveMQQueue("testQ");
1: 		MessageConsumer consumer = session.createConsumer(destination);
1: 		connection.start();
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         final MyObject obj = new MyObject("A message");
1:         ActiveMQObjectMessage m1 = (ActiveMQObjectMessage)session.createObjectMessage();
1:         m1.setObject(obj);
1:         producer.send(m1);
1: 
1:         ActiveMQTextMessage m2 = new ActiveMQTextMessage();
1:         m2.setText("Test Message Payload.");
1:         producer.send(m2);
1: 
1:         ActiveMQMapMessage m3 = new ActiveMQMapMessage();
1:         m3.setString("text", "my message");
1:         producer.send(m3);
1: 
1:         Message m = consumer.receive(maxWait);
1:         assertNotNull(m);
1:         assertEquals(m1.getMessageId().toString(), m.getJMSMessageID());
1:         assertTrue(m instanceof ActiveMQObjectMessage);
1: 
1:         if (getDefaultPolicy() != null) {
1:             assertNull("object data cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:                 ((ActiveMQObjectMessage)m).getObject());
1:         }
1: 
1:         // verify no serialisation via vm transport
1:         assertEquals("writeObject called", 0, obj.getWriteObjectCalled());
1:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1: 
1:         m = consumer.receive(maxWait);
1:         assertNotNull(m);
1:         assertEquals(m2.getMessageId().toString(), m.getJMSMessageID());
1:         assertTrue(m instanceof ActiveMQTextMessage);
1: 
1:         if (getDefaultPolicy() != null) {
1:             assertNull("text cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:                 ((ActiveMQTextMessage)m).getText());
1:         }
1: 
1:         m = consumer.receive(maxWait);
1:         assertNotNull(m);
1:         assertEquals(m3.getMessageId().toString(), m.getJMSMessageID());
1:         assertTrue(m instanceof ActiveMQMapMessage);
1: 
1:         if (getDefaultPolicy() != null) {
1:             assertNull("text cleared by reduceMemoryFootprint (and never marshalled as using mem persistence)",
1:                 ((ActiveMQMapMessage)m).getStringProperty("text"));
1:         }
1: 
1:         connection.close();
1:     }
1: }
============================================================================