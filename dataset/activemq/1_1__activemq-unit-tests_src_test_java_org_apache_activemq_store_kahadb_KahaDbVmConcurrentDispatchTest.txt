1:b9f9f03: /**
1:b9f9f03:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b9f9f03:  * contributor license agreements.  See the NOTICE file distributed with
1:b9f9f03:  * this work for additional information regarding copyright ownership.
1:b9f9f03:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b9f9f03:  * (the "License"); you may not use this file except in compliance with
1:b9f9f03:  * the License.  You may obtain a copy of the License at
1:b9f9f03:  *
1:b9f9f03:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b9f9f03:  *
1:b9f9f03:  * Unless required by applicable law or agreed to in writing, software
1:b9f9f03:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b9f9f03:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b9f9f03:  * See the License for the specific language governing permissions and
1:b9f9f03:  * limitations under the License.
1:b9f9f03:  */
1:b9f9f03: package org.apache.activemq.store.kahadb;
1:b9f9f03: 
1:b9f9f03: import java.io.IOException;
1:b9f9f03: import java.util.ArrayList;
1:b9f9f03: import java.util.Collection;
1:b9f9f03: import java.util.List;
1:b9f9f03: 
1:b9f9f03: import org.apache.activemq.broker.BrokerService;
1:b9f9f03: import org.apache.activemq.store.AbstractVmConcurrentDispatchTest;
1:b9f9f03: import org.junit.runner.RunWith;
1:b9f9f03: import org.junit.runners.Parameterized;
1:b9f9f03: import org.junit.runners.Parameterized.Parameters;
1:b9f9f03: 
1:b9f9f03: @RunWith(Parameterized.class)
1:b9f9f03: public class KahaDbVmConcurrentDispatchTest extends AbstractVmConcurrentDispatchTest {
1:b9f9f03: 
1:b9f9f03:     private final boolean concurrentDispatch;
1:b9f9f03:     private static boolean[] concurrentDispatchVals = booleanVals;
1:b9f9f03: 
1:a953f11:       @Parameters(name="Type:{0}; ReduceMemoryFootPrint:{1}; ConcurrentDispatch:{2}; UseTopic:{3}")
1:b9f9f03:       public static Collection<Object[]> data() {
1:b9f9f03:           List<Object[]> values = new ArrayList<>();
1:b9f9f03: 
1:b9f9f03:           for (MessageType mt : MessageType.values()) {
1:b9f9f03:               for (boolean rmfVal : reduceMemoryFootPrintVals) {
1:b9f9f03:                   for (boolean cdVal : concurrentDispatchVals) {
1:a953f11:                       for (boolean tpVal : useTopicVals) {
1:a953f11:                           values.add(new Object[] {mt, rmfVal, cdVal, tpVal});
1:a953f11:                       }
1:b9f9f03:                   }
1:b9f9f03:               }
1:b9f9f03:           }
1:b9f9f03: 
1:b9f9f03:           return values;
1:b9f9f03:       }
1:b9f9f03: 
1:b9f9f03:     /**
1:b9f9f03:      * @param messageType
1:b9f9f03:      * @param reduceMemoryFootPrint
1:b9f9f03:      * @param concurrentDispatch
1:b9f9f03:      */
1:b9f9f03:     public KahaDbVmConcurrentDispatchTest(MessageType messageType, boolean reduceMemoryFootPrint,
1:a953f11:             boolean concurrentDispatch, boolean useTopic) {
1:a953f11:         super(messageType, reduceMemoryFootPrint, useTopic);
1:b9f9f03:         this.concurrentDispatch = concurrentDispatch;
1:b9f9f03:     }
1:b9f9f03: 
1:b9f9f03:     @Override
1:b9f9f03:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:b9f9f03:         KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:a953f11:         if (useTopic) {
1:a953f11:             ad.setConcurrentStoreAndDispatchTopics(concurrentDispatch);
1:a953f11:         } else {
1:a953f11:             ad.setConcurrentStoreAndDispatchQueues(concurrentDispatch);
1:a953f11:         }
1:b9f9f03:     }
1:b9f9f03: 
1:b9f9f03: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a953f11
/////////////////////////////////////////////////////////////////////////
1:       @Parameters(name="Type:{0}; ReduceMemoryFootPrint:{1}; ConcurrentDispatch:{2}; UseTopic:{3}")
1:                       for (boolean tpVal : useTopicVals) {
1:                           values.add(new Object[] {mt, rmfVal, cdVal, tpVal});
1:                       }
/////////////////////////////////////////////////////////////////////////
1:             boolean concurrentDispatch, boolean useTopic) {
1:         super(messageType, reduceMemoryFootPrint, useTopic);
1:         if (useTopic) {
1:             ad.setConcurrentStoreAndDispatchTopics(concurrentDispatch);
1:         } else {
1:             ad.setConcurrentStoreAndDispatchQueues(concurrentDispatch);
1:         }
commit:b9f9f03
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.AbstractVmConcurrentDispatchTest;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class KahaDbVmConcurrentDispatchTest extends AbstractVmConcurrentDispatchTest {
1: 
1:     private final boolean concurrentDispatch;
1:     private static boolean[] concurrentDispatchVals = booleanVals;
1: 
0:       @Parameters(name="Type:{0}; ReduceMemoryFootPrint:{1}; ConcurrentDispatch:{2}")
1:       public static Collection<Object[]> data() {
1:           List<Object[]> values = new ArrayList<>();
1: 
1:           for (MessageType mt : MessageType.values()) {
1:               for (boolean rmfVal : reduceMemoryFootPrintVals) {
1:                   for (boolean cdVal : concurrentDispatchVals) {
0:                       values.add(new Object[] {mt, rmfVal, cdVal});
1:                   }
1:               }
1:           }
1: 
1:           return values;
1:       }
1: 
1:     /**
1:      * @param messageType
1:      * @param reduceMemoryFootPrint
1:      * @param concurrentDispatch
1:      */
1:     public KahaDbVmConcurrentDispatchTest(MessageType messageType, boolean reduceMemoryFootPrint,
0:             boolean concurrentDispatch) {
0:         super(messageType, reduceMemoryFootPrint);
1:         this.concurrentDispatch = concurrentDispatch;
1:     }
1: 
1:     @Override
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         ad.setConcurrentStoreAndDispatchQueues(concurrentDispatch);
1:     }
1: 
1: }
============================================================================