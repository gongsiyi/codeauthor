1:810375a: /**
1:810375a:  *
1:810375a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:810375a:  * contributor license agreements.  See the NOTICE file distributed with
1:810375a:  * this work for additional information regarding copyright ownership.
1:810375a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:810375a:  * (the "License"); you may not use this file except in compliance with
1:810375a:  * the License.  You may obtain a copy of the License at
1:810375a:  *
1:810375a:  * http://www.apache.org/licenses/LICENSE-2.0
1:810375a:  *
1:810375a:  * Unless required by applicable law or agreed to in writing, software
1:810375a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810375a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810375a:  * See the License for the specific language governing permissions and
1:810375a:  * limitations under the License.
1:810375a:  */
1:810375a: package org.apache.activemq.camel.converter;
1:810375a: 
1:810375a: import java.io.Serializable;
1:810375a: 
1:810375a: import javax.jms.JMSException;
1:810375a: import javax.jms.MessageListener;
1:810375a: import javax.jms.Message;
1:810375a: 
1:810375a: import org.apache.activemq.command.ActiveMQMessage;
1:810375a: import org.apache.activemq.command.ActiveMQObjectMessage;
1:810375a: import org.apache.activemq.command.ActiveMQTextMessage;
1:810375a: import org.apache.camel.Converter;
1:810375a: import org.apache.camel.Exchange;
1:810375a: import org.apache.camel.Processor;
1:810375a: import org.apache.camel.component.jms.JmsBinding;
1:d2e9236: import org.apache.camel.component.jms.JmsEndpoint;
1:810375a: 
1:810375a: /**
1:0bbc0ac:  * 
1:810375a:  */
1:810375a: @Converter
1:810375a: public class ActiveMQMessageConverter {
1:810375a:     private JmsBinding binding = new JmsBinding();
1:810375a: 
1:810375a:     /**
1:810375a:      * Converts the inbound message exchange to an ActiveMQ JMS message
1:810375a:      *
1:810375a:      * @return the ActiveMQ message
1:810375a:      */
1:810375a:     @Converter
1:810375a:     public ActiveMQMessage toMessage(Exchange exchange) throws JMSException {
1:810375a:         ActiveMQMessage message = createActiveMQMessage(exchange);
1:810375a:         getBinding().appendJmsProperties(message, exchange);
1:810375a:         return message;
1:810375a:     }
1:810375a: 
1:810375a:     /**
1:810375a:      * Allows a JMS {@link MessageListener} to be converted to a Camel {@link Processor}
1:810375a:      * so that we can provide better
1:810375a:      * <a href="">Bean Integration</a> so that we can use any JMS MessageListener in
1:810375a:      * in Camel as a bean
1:810375a:      * @param listener the JMS message listener
1:810375a:      * @return a newly created Camel Processor which when invoked will invoke
1:810375a:      * {@link MessageListener#onMessage(Message)}
1:810375a:      */
1:810375a:     @Converter
1:810375a:     public Processor toProcessor(final MessageListener listener) {
1:810375a:         return new Processor() {
1:810375a:             public void process(Exchange exchange) throws Exception {
1:810375a:                 Message message = toMessage(exchange);
1:810375a:                 listener.onMessage(message);
1:810375a:             }
1:810375a: 
1:810375a:             @Override
1:810375a:             public String toString() {
1:810375a:                 return "Processor of MessageListener: " + listener;
1:810375a:             }
1:810375a:         };
1:810375a:     }
1:810375a: 
1:810375a:     private static ActiveMQMessage createActiveMQMessage(Exchange exchange) throws JMSException {
1:810375a:         Object body = exchange.getIn().getBody();
1:810375a:         if (body instanceof String) {
1:810375a:             ActiveMQTextMessage answer = new ActiveMQTextMessage();
1:810375a:             answer.setText((String) body);
1:810375a:             return answer;
1:810375a:         } else if (body instanceof Serializable) {
1:810375a:             ActiveMQObjectMessage answer = new ActiveMQObjectMessage();
1:810375a:             answer.setObject((Serializable) body);
1:810375a:             return answer;
1:810375a:         } else {
1:810375a:             return new ActiveMQMessage();
1:810375a:         }
1:810375a: 
1:810375a:     }
1:810375a: 
1:810375a:     // Properties
1:810375a:     //-------------------------------------------------------------------------
1:810375a:     public JmsBinding getBinding() {
1:810375a:         return binding;
1:810375a:     }
1:810375a: 
1:810375a:     public void setBinding(JmsBinding binding) {
1:810375a:         this.binding = binding;
1:810375a:     }
1:810375a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d2e9236
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.component.jms.JmsEndpoint;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:810375a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.converter;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageListener;
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.camel.Converter;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Processor;
1: import org.apache.camel.component.jms.JmsBinding;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: @Converter
1: public class ActiveMQMessageConverter {
1:     private JmsBinding binding = new JmsBinding();
1: 
1:     /**
1:      * Converts the inbound message exchange to an ActiveMQ JMS message
1:      *
1:      * @return the ActiveMQ message
1:      */
1:     @Converter
1:     public ActiveMQMessage toMessage(Exchange exchange) throws JMSException {
1:         ActiveMQMessage message = createActiveMQMessage(exchange);
1:         getBinding().appendJmsProperties(message, exchange);
1:         return message;
1:     }
1: 
1:     /**
1:      * Allows a JMS {@link MessageListener} to be converted to a Camel {@link Processor}
1:      * so that we can provide better
1:      * <a href="">Bean Integration</a> so that we can use any JMS MessageListener in
1:      * in Camel as a bean
1:      * @param listener the JMS message listener
1:      * @return a newly created Camel Processor which when invoked will invoke
1:      * {@link MessageListener#onMessage(Message)}
1:      */
1:     @Converter
1:     public Processor toProcessor(final MessageListener listener) {
1:         return new Processor() {
1:             public void process(Exchange exchange) throws Exception {
1:                 Message message = toMessage(exchange);
1:                 listener.onMessage(message);
1:             }
1: 
1:             @Override
1:             public String toString() {
1:                 return "Processor of MessageListener: " + listener;
1:             }
1:         };
1:     }
1: 
1:     private static ActiveMQMessage createActiveMQMessage(Exchange exchange) throws JMSException {
1:         Object body = exchange.getIn().getBody();
1:         if (body instanceof String) {
1:             ActiveMQTextMessage answer = new ActiveMQTextMessage();
1:             answer.setText((String) body);
1:             return answer;
1:         } else if (body instanceof Serializable) {
1:             ActiveMQObjectMessage answer = new ActiveMQObjectMessage();
1:             answer.setObject((Serializable) body);
1:             return answer;
1:         } else {
1:             return new ActiveMQMessage();
1:         }
1: 
1:     }
1: 
1:     // Properties
1:     //-------------------------------------------------------------------------
1:     public JmsBinding getBinding() {
1:         return binding;
1:     }
1: 
1:     public void setBinding(JmsBinding binding) {
1:         this.binding = binding;
1:     }
1: }
============================================================================