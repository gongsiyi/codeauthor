1:400b1fc: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:a80acbb:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
7:400b1fc:  *
1:400b1fc:  * Unless required by applicable law or agreed to in writing, software
1:400b1fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:400b1fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:400b1fc:  * See the License for the specific language governing permissions and
1:400b1fc:  * limitations under the License.
1:400b1fc:  */
1:400b1fc: package org.apache.activemq.network;
3:400b1fc: 
1:74a7a8b: import java.net.URI;
1:74a7a8b: 
1:400b1fc: import org.apache.activemq.transport.Transport;
1:400b1fc: import org.apache.activemq.transport.TransportFactory;
1:400b1fc: import org.apache.activemq.util.ServiceStopper;
1:400b1fc: 
1:400b1fc: /**
1:400b1fc:  * A network connector which uses some kind of multicast-like transport that
1:400b1fc:  * communicates with potentially many remote brokers over a single logical
1:400b1fc:  * {@link Transport} instance such as when using multicast.
1:a80acbb:  *
1:400b1fc:  * This implementation does not depend on multicast at all; any other group
1:400b1fc:  * based transport could be used.
1:a80acbb:  *
1:400b1fc:  * @org.apache.xbean.XBean
1:0bbc0ac:  *
1:400b1fc:  */
1:400b1fc: public class MulticastNetworkConnector extends NetworkConnector {
1:400b1fc: 
1:400b1fc:     private Transport localTransport;
1:400b1fc:     private Transport remoteTransport;
1:400b1fc:     private URI remoteURI;
1:400b1fc:     private DemandForwardingBridgeSupport bridge;
1:400b1fc: 
1:400b1fc:     public MulticastNetworkConnector() {
5:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public MulticastNetworkConnector(URI remoteURI) {
1:400b1fc:         this.remoteURI = remoteURI;
1:520a2de:     }
1:400b1fc: 
1:400b1fc:     // Properties
1:400b1fc:     // -------------------------------------------------------------------------
1:400b1fc: 
1:400b1fc:     public DemandForwardingBridgeSupport getBridge() {
1:400b1fc:         return bridge;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public void setBridge(DemandForwardingBridgeSupport bridge) {
1:400b1fc:         this.bridge = bridge;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public Transport getLocalTransport() {
1:400b1fc:         return localTransport;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public void setLocalTransport(Transport localTransport) {
1:400b1fc:         this.localTransport = localTransport;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public Transport getRemoteTransport() {
1:400b1fc:         return remoteTransport;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     /**
1:400b1fc:      * Sets the remote transport implementation
1:400b1fc:      */
1:400b1fc:     public void setRemoteTransport(Transport remoteTransport) {
1:400b1fc:         this.remoteTransport = remoteTransport;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     public URI getRemoteURI() {
1:400b1fc:         return remoteURI;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     /**
1:400b1fc:      * Sets the remote transport URI to some group transport like
1:400b1fc:      * <code>multicast://address:port</code>
1:400b1fc:      */
1:400b1fc:     public void setRemoteURI(URI remoteURI) {
1:400b1fc:         this.remoteURI = remoteURI;
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     // Implementation methods
1:400b1fc:     // -------------------------------------------------------------------------
1:400b1fc: 
1:ae73f86:     protected void handleStart() throws Exception {
1:400b1fc:         if (remoteTransport == null) {
1:400b1fc:             if (remoteURI == null) {
1:400b1fc:                 throw new IllegalArgumentException("You must specify the remoteURI property");
1:400b1fc:             }
1:400b1fc:             remoteTransport = TransportFactory.connect(remoteURI);
1:400b1fc:         }
1:400b1fc: 
1:400b1fc:         if (localTransport == null) {
1:400b1fc:             localTransport = createLocalTransport();
1:400b1fc:         }
1:400b1fc: 
1:400b1fc:         bridge = createBridge(localTransport, remoteTransport);
1:400b1fc:         configureBridge(bridge);
1:400b1fc:         bridge.start();
1:400b1fc: 
1:400b1fc:         // we need to start the transports after we've created the bridge
1:400b1fc:         remoteTransport.start();
1:400b1fc:         localTransport.start();
1:400b1fc: 
1:ae73f86:         super.handleStart();
1:400b1fc:     }
1:400b1fc: 
1:ae73f86:     protected void handleStop(ServiceStopper stopper) throws Exception {
1:ae73f86:         super.handleStop(stopper);
1:400b1fc:         if (bridge != null) {
1:400b1fc:             try {
1:400b1fc:                 bridge.stop();
1:f812e34:             } catch (Exception e) {
1:400b1fc:                 stopper.onException(this, e);
1:400b1fc:             }
1:400b1fc:         }
1:400b1fc:         if (remoteTransport != null) {
1:400b1fc:             try {
1:400b1fc:                 remoteTransport.stop();
1:f812e34:             } catch (Exception e) {
1:400b1fc:                 stopper.onException(this, e);
1:400b1fc:             }
1:400b1fc:         }
1:400b1fc:         if (localTransport != null) {
1:400b1fc:             try {
1:400b1fc:                 localTransport.stop();
1:f812e34:             } catch (Exception e) {
1:400b1fc:                 stopper.onException(this, e);
1:400b1fc:             }
1:400b1fc:         }
1:400b1fc:     }
1:400b1fc: 
1:27d0ff4:     @Override
1:27d0ff4:     public String toString() {
1:27d0ff4:         return getClass().getName() + ":" + getName() + "["  + remoteTransport.toString() + "]";
1:400b1fc:     }
1:400b1fc: 
1:400b1fc:     protected DemandForwardingBridgeSupport createBridge(Transport local, Transport remote) {
1:301203e:         CompositeDemandForwardingBridge bridge = new CompositeDemandForwardingBridge(this, local, remote);
1:301203e:         bridge.setBrokerService(getBrokerService());
1:301203e:         return bridge;
1:400b1fc:     }
1:400b1fc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
1:             } catch (Exception e) {
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
0:         return new CompositeDemandForwardingBridge(this, local, remote);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return getClass().getName() + ":" + getName() + "["  + remoteTransport.toString() + "]";
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:         CompositeDemandForwardingBridge bridge = new CompositeDemandForwardingBridge(this, local, remote);
1:         bridge.setBrokerService(getBrokerService());
1:         return bridge;
author:Robert Davies
-------------------------------------------------------------------------------
commit:520a2de
/////////////////////////////////////////////////////////////////////////
0:         String name = super.getName();
0:         if(name == null) {
0:             name = remoteTransport.toString();
0:             super.setName(name);
1:         }
0:         return name;
commit:54114cc
/////////////////////////////////////////////////////////////////////////
0:     public String getName() {
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1:     protected void handleStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         super.handleStart();
1:     protected void handleStop(ServiceStopper stopper) throws Exception {
1:         super.handleStop(stopper);
/////////////////////////////////////////////////////////////////////////
0:         return new CompositeDemandForwardingBridge(this,local, remote);
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.util.ServiceStopper;
1: 
0: import java.net.URI;
1: 
1: /**
1:  * A network connector which uses some kind of multicast-like transport that
1:  * communicates with potentially many remote brokers over a single logical
1:  * {@link Transport} instance such as when using multicast.
1:  * 
1:  * This implementation does not depend on multicast at all; any other group
1:  * based transport could be used.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class MulticastNetworkConnector extends NetworkConnector {
1: 
1:     private Transport localTransport;
1:     private Transport remoteTransport;
1:     private URI remoteURI;
1:     private DemandForwardingBridgeSupport bridge;
1: 
1:     public MulticastNetworkConnector() {
1:     }
1: 
1:     public MulticastNetworkConnector(URI remoteURI) {
1:         this.remoteURI = remoteURI;
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public DemandForwardingBridgeSupport getBridge() {
1:         return bridge;
1:     }
1: 
1:     public void setBridge(DemandForwardingBridgeSupport bridge) {
1:         this.bridge = bridge;
1:     }
1: 
1:     public Transport getLocalTransport() {
1:         return localTransport;
1:     }
1: 
1:     public void setLocalTransport(Transport localTransport) {
1:         this.localTransport = localTransport;
1:     }
1: 
1:     public Transport getRemoteTransport() {
1:         return remoteTransport;
1:     }
1: 
1:     /**
1:      * Sets the remote transport implementation
1:      */
1:     public void setRemoteTransport(Transport remoteTransport) {
1:         this.remoteTransport = remoteTransport;
1:     }
1: 
1:     public URI getRemoteURI() {
1:         return remoteURI;
1:     }
1: 
1:     /**
1:      * Sets the remote transport URI to some group transport like
1:      * <code>multicast://address:port</code>
1:      */
1:     public void setRemoteURI(URI remoteURI) {
1:         this.remoteURI = remoteURI;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1: 
0:     protected void doStart() throws Exception {
1:         if (remoteTransport == null) {
1:             if (remoteURI == null) {
1:                 throw new IllegalArgumentException("You must specify the remoteURI property");
1:             }
1:             remoteTransport = TransportFactory.connect(remoteURI);
1:         }
1: 
1:         if (localTransport == null) {
1:             localTransport = createLocalTransport();
1:         }
1: 
1:         bridge = createBridge(localTransport, remoteTransport);
1:         configureBridge(bridge);
1:         bridge.start();
1: 
1:         // we need to start the transports after we've created the bridge
1:         remoteTransport.start();
1:         localTransport.start();
1: 
0:         super.doStart();
1:     }
1: 
0:     protected void doStop(ServiceStopper stopper) throws Exception {
0:         super.doStop(stopper);
1:         if (bridge != null) {
1:             try {
1:                 bridge.stop();
1:             }
0:             catch (Exception e) {
1:                 stopper.onException(this, e);
1:             }
1:         }
1:         if (remoteTransport != null) {
1:             try {
1:                 remoteTransport.stop();
1:             }
0:             catch (Exception e) {
1:                 stopper.onException(this, e);
1:             }
1:         }
1:         if (localTransport != null) {
1:             try {
1:                 localTransport.stop();
1:             }
0:             catch (Exception e) {
1:                 stopper.onException(this, e);
1:             }
1:         }
1:     }
1: 
0:     protected String createName() {
0:         return remoteTransport.toString();
1:     }
1: 
1:     protected DemandForwardingBridgeSupport createBridge(Transport local, Transport remote) {
0:         return new CompositeDemandForwardingBridge(local, remote);
1:     }
1: 
1: }
============================================================================