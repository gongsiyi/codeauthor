1:7d0df2d: /**
1:7d0df2d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d0df2d:  * contributor license agreements.  See the NOTICE file distributed with
1:7d0df2d:  * this work for additional information regarding copyright ownership.
1:7d0df2d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d0df2d:  * (the "License"); you may not use this file except in compliance with
1:7d0df2d:  * the License.  You may obtain a copy of the License at
1:7d0df2d:  * <p>
1:7d0df2d:  * http://www.apache.org/licenses/LICENSE-2.0
1:7d0df2d:  * <p>
1:7d0df2d:  * Unless required by applicable law or agreed to in writing, software
1:7d0df2d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d0df2d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d0df2d:  * See the License for the specific language governing permissions and
1:7d0df2d:  * limitations under the License.
1:7d0df2d:  */
1:7d0df2d: package org.apache.activemq.network;
2:7d0df2d: 
1:7d0df2d: import org.apache.activemq.ActiveMQConnectionFactory;
1:7d0df2d: import org.apache.activemq.broker.BrokerService;
1:9d6bc3a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:9d6bc3a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7d0df2d: import org.apache.activemq.command.ActiveMQDestination;
1:7d0df2d: import org.apache.activemq.command.ActiveMQQueue;
1:a67c75a: import org.apache.activemq.command.ActiveMQTopic;
1:105128a: import org.apache.activemq.util.Wait;
1:7d0df2d: 
1:7d0df2d: import javax.jms.Connection;
1:a67c75a: import javax.jms.MessageConsumer;
1:7d0df2d: import javax.jms.MessageProducer;
1:7d0df2d: import javax.jms.Session;
1:7d0df2d: import javax.jms.TextMessage;
1:7d0df2d: import java.util.Arrays;
1:7d0df2d: import java.util.concurrent.TimeUnit;
1:7d0df2d: 
1:7d0df2d: import static org.junit.Assert.assertEquals;
1:7d0df2d: 
1:7d0df2d: public class DrainBridgeTest {
1:7d0df2d: 
1:7d0df2d:     @org.junit.Test
1:7d0df2d:     public void testDrain() throws Exception {
1:7d0df2d:         prepareBrokerWithMessages();
1:7d0df2d: 
1:7d0df2d:         BrokerService target = prepareDrainTarget();
1:7d0df2d: 
1:7d0df2d:         BrokerService drainingBroker = new BrokerService();
1:7d0df2d:         drainingBroker.setBrokerName("HOST");
1:7d0df2d: 
1:7d0df2d:         // add the draining bridge that subscribes to all queues and forwards on start - irrespective of demand
1:7d0df2d:         NetworkConnector drainingNetworkConnector = drainingBroker.addNetworkConnector("static:(" + target.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")");
1:7d0df2d:         drainingNetworkConnector.setStaticBridge(true);
1:105128a:         drainingNetworkConnector.setStaticallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue(">")}));
1:9d6bc3a: 
1:9d6bc3a:         // ensure replay back to the origin is allowed
1:9d6bc3a:         PolicyMap policyMap = new PolicyMap();
1:9d6bc3a:         PolicyEntry defaultEntry = new PolicyEntry();
1:9d6bc3a:         defaultEntry.setExpireMessagesPeriod(0);
1:9d6bc3a:         ConditionalNetworkBridgeFilterFactory filterFactory = new ConditionalNetworkBridgeFilterFactory();
1:9d6bc3a:         filterFactory.setReplayWhenNoConsumers(true);
1:9d6bc3a:         defaultEntry.setNetworkBridgeFilterFactory(filterFactory);
1:9d6bc3a:         policyMap.setDefaultEntry(defaultEntry); // applies to all destinations
1:9d6bc3a:         drainingBroker.setDestinationPolicy(policyMap);
1:9d6bc3a:         
1:7d0df2d:         drainingBroker.start();
1:7d0df2d: 
1:7d0df2d:         System.out.println("Local count: " + drainingBroker.getAdminView().getTotalMessageCount() + ", target count:" + target.getAdminView().getTotalMessageCount());
1:7d0df2d: 
1:a67c75a:         assertEquals("local messages", 22, drainingBroker.getAdminView().getTotalMessageCount());
1:7d0df2d:         assertEquals("no remote messages", 0, target.getAdminView().getTotalMessageCount());
1:7d0df2d: 
1:105128a:         Wait.waitFor(new Wait.Condition() {
1:105128a:             @Override
1:105128a:             public boolean isSatisified() throws Exception {
1:a67c75a:                 System.out.println("Local count: " + drainingBroker.getAdminView().getTotalMessageCount() + ", target count:" + target.getAdminView().getTotalMessageCount());
1:a67c75a: 
1:105128a:                 return drainingBroker.getAdminView().getTotalMessageCount() == 0l;
1:105128a:             }
1:105128a:         });
1:7d0df2d: 
1:7d0df2d:         assertEquals("no local messages", 0, drainingBroker.getAdminView().getTotalMessageCount());
1:a67c75a:         assertEquals("remote messages", 22, target.getAdminView().getTotalMessageCount());
1:a67c75a:         assertEquals("number of queues match", drainingBroker.getAdminView().getQueues().length, target.getAdminView().getQueues().length);
1:7d0df2d:         drainingBroker.stop();
1:7d0df2d:         target.stop();
2:7d0df2d:     }
1:7d0df2d: 
1:7d0df2d:     private BrokerService prepareDrainTarget() throws Exception {
1:7d0df2d:         BrokerService broker = new BrokerService();
1:7d0df2d:         broker.setDeleteAllMessagesOnStartup(true);
1:7d0df2d:         broker.setBrokerName("TARGET");
1:7d0df2d:         broker.addConnector("tcp://localhost:0");
1:7d0df2d:         broker.start();
1:7d0df2d:         return broker;
1:7d0df2d:     }
1:7d0df2d: 
1:7d0df2d:     private void prepareBrokerWithMessages() throws Exception {
1:7d0df2d:         BrokerService broker = new BrokerService();
1:7d0df2d:         broker.setDeleteAllMessagesOnStartup(true);
1:7d0df2d:         broker.setBrokerName("HOST");
1:7d0df2d:         broker.start();
1:7d0df2d:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:7d0df2d:         Connection conn = connectionFactory.createConnection();
1:7d0df2d:         conn.start();
1:7d0df2d:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7d0df2d:         TextMessage msg = session.createTextMessage("This is a message.");
1:a67c75a:         MessageProducer producer = session.createProducer(null);
1:a67c75a:         ActiveMQQueue queue = new ActiveMQQueue("Q.Foo,Bar");
1:7d0df2d:         for (int i = 0; i < 10; i++) {
1:a67c75a:             producer.send(queue, msg);
1:7d0df2d:         }
1:a67c75a: 
1:a67c75a:         // add virtual topic consumer Q
1:a67c75a:         MessageConsumer messageConsumerA = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.Y"));
1:a67c75a:         MessageConsumer messageConsumeB = session.createConsumer(new ActiveMQQueue("Consumer.B.VirtualTopic.Y"));
1:a67c75a: 
1:a67c75a:         producer.send(new ActiveMQTopic("VirtualTopic.Y"), msg);
1:a67c75a: 
1:7d0df2d:         conn.close();
1:7d0df2d:         broker.stop();
1:7d0df2d:     }
1:7d0df2d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a67c75a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
1: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("local messages", 22, drainingBroker.getAdminView().getTotalMessageCount());
1:                 System.out.println("Local count: " + drainingBroker.getAdminView().getTotalMessageCount() + ", target count:" + target.getAdminView().getTotalMessageCount());
1: 
1:         assertEquals("remote messages", 22, target.getAdminView().getTotalMessageCount());
1:         assertEquals("number of queues match", drainingBroker.getAdminView().getQueues().length, target.getAdminView().getQueues().length);
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer = session.createProducer(null);
1:         ActiveMQQueue queue = new ActiveMQQueue("Q.Foo,Bar");
1:             producer.send(queue, msg);
1: 
1:         // add virtual topic consumer Q
1:         MessageConsumer messageConsumerA = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.Y"));
1:         MessageConsumer messageConsumeB = session.createConsumer(new ActiveMQQueue("Consumer.B.VirtualTopic.Y"));
1: 
1:         producer.send(new ActiveMQTopic("VirtualTopic.Y"), msg);
1: 
commit:105128a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         drainingNetworkConnector.setStaticallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue(">")}));
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return drainingBroker.getAdminView().getTotalMessageCount() == 0l;
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
0:         MessageProducer producer = session.createProducer(new ActiveMQQueue("Q.Foo,Bar"));
commit:9d6bc3a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // ensure replay back to the origin is allowed
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         ConditionalNetworkBridgeFilterFactory filterFactory = new ConditionalNetworkBridgeFilterFactory();
1:         filterFactory.setReplayWhenNoConsumers(true);
1:         defaultEntry.setNetworkBridgeFilterFactory(filterFactory);
1:         policyMap.setDefaultEntry(defaultEntry); // applies to all destinations
1:         drainingBroker.setDestinationPolicy(policyMap);
1:         
commit:7d0df2d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.Arrays;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class DrainBridgeTest {
1: 
1:     @org.junit.Test
1:     public void testDrain() throws Exception {
1:         prepareBrokerWithMessages();
1: 
1:         BrokerService target = prepareDrainTarget();
1: 
1:         BrokerService drainingBroker = new BrokerService();
1:         drainingBroker.setBrokerName("HOST");
1: 
1:         // add the draining bridge that subscribes to all queues and forwards on start - irrespective of demand
1:         NetworkConnector drainingNetworkConnector = drainingBroker.addNetworkConnector("static:(" + target.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")");
1:         drainingNetworkConnector.setStaticBridge(true);
0:         drainingNetworkConnector.setStaticallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue("*")}));
1:         drainingBroker.start();
1: 
1:         System.out.println("Local count: " + drainingBroker.getAdminView().getTotalMessageCount() + ", target count:" + target.getAdminView().getTotalMessageCount());
1: 
0:         assertEquals("local messages", 20, drainingBroker.getAdminView().getTotalMessageCount());
1:         assertEquals("no remote messages", 0, target.getAdminView().getTotalMessageCount());
1: 
0:         while (drainingBroker.getAdminView().getTotalMessageCount() > 0) {
0:             TimeUnit.SECONDS.sleep(5);
1:         }
1: 
1:         assertEquals("no local messages", 0, drainingBroker.getAdminView().getTotalMessageCount());
0:         assertEquals("remote messages", 20, target.getAdminView().getTotalMessageCount());
1: 
1:         drainingBroker.stop();
1:         target.stop();
1:     }
1: 
1:     private BrokerService prepareDrainTarget() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setBrokerName("TARGET");
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         return broker;
1:     }
1: 
1:     private void prepareBrokerWithMessages() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setBrokerName("HOST");
1:         broker.start();
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         Connection conn = connectionFactory.createConnection();
1:         conn.start();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TextMessage msg = session.createTextMessage("This is a message.");
0:         MessageProducer producer = session.createProducer(new ActiveMQQueue("Foo,Bar"));
1:         for (int i = 0; i < 10; i++) {
0:             producer.send(msg);
1:         }
1:         conn.close();
1:         broker.stop();
1:     }
1: }
============================================================================