1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.Broker;
1:f9451e5: import org.apache.activemq.broker.BrokerPluginSupport;
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectAdapter;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1:f9451e5: import org.apache.shiro.authc.AuthenticationToken;
1:f9451e5: import org.apache.shiro.env.DefaultEnvironment;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class AuthenticationFilterTest {
1:f9451e5: 
1:f9451e5:     AuthenticationFilter filter = new AuthenticationFilter();
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetAuthenticationTokenFactory() {
1:f9451e5:         AuthenticationTokenFactory factory = new AuthenticationTokenFactory() {
1:f9451e5:             @Override
1:f9451e5:             public AuthenticationToken getAuthenticationToken(SubjectConnectionReference ref) throws Exception {
1:f9451e5:                 return null;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         filter.setAuthenticationTokenFactory(factory);
1:f9451e5:         assertSame(factory, filter.getAuthenticationTokenFactory());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testRemoveAuthenticationWithLogoutThrowable() throws Exception {
1:f9451e5: 
1:f9451e5:         final boolean[] invoked = new boolean[1];
1:f9451e5: 
1:f9451e5:         Broker broker = new BrokerPluginSupport() {
1:f9451e5:             @Override
1:f9451e5:             public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:f9451e5:                 invoked[0] = true;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         DefaultEnvironment env = new DefaultEnvironment();
1:f9451e5: 
1:f9451e5:         filter.setNext(broker);
1:f9451e5:         filter.setEnvironment(env);
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public void logout() {
1:f9451e5:                 throw new RuntimeException("Simulated failure.");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext ctx = new ConnectionContext();
1:f9451e5:         ConnectionInfo info = new ConnectionInfo();
1:f9451e5:         SubjectConnectionReference conn = new SubjectConnectionReference(ctx, info, env, subject);
1:f9451e5:         SubjectSecurityContext ssc = new SubjectSecurityContext(conn);
1:f9451e5:         ctx.setSecurityContext(ssc);
1:f9451e5: 
1:f9451e5:         filter.removeConnection(ctx, info, null);
1:f9451e5: 
1:f9451e5:         assertTrue(invoked[0]);
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.shiro.subject.SubjectAdapter;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1: import org.apache.shiro.authc.AuthenticationToken;
1: import org.apache.shiro.env.DefaultEnvironment;
1: import org.apache.shiro.subject.Subject;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class AuthenticationFilterTest {
1: 
1:     AuthenticationFilter filter = new AuthenticationFilter();
1: 
1:     @Test
1:     public void testSetAuthenticationTokenFactory() {
1:         AuthenticationTokenFactory factory = new AuthenticationTokenFactory() {
1:             @Override
1:             public AuthenticationToken getAuthenticationToken(SubjectConnectionReference ref) throws Exception {
1:                 return null;
1:             }
1:         };
1:         filter.setAuthenticationTokenFactory(factory);
1:         assertSame(factory, filter.getAuthenticationTokenFactory());
1:     }
1: 
1:     @Test
1:     public void testRemoveAuthenticationWithLogoutThrowable() throws Exception {
1: 
1:         final boolean[] invoked = new boolean[1];
1: 
1:         Broker broker = new BrokerPluginSupport() {
1:             @Override
1:             public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:                 invoked[0] = true;
1:             }
1:         };
1: 
1:         DefaultEnvironment env = new DefaultEnvironment();
1: 
1:         filter.setNext(broker);
1:         filter.setEnvironment(env);
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public void logout() {
1:                 throw new RuntimeException("Simulated failure.");
1:             }
1:         };
1: 
1:         ConnectionContext ctx = new ConnectionContext();
1:         ConnectionInfo info = new ConnectionInfo();
1:         SubjectConnectionReference conn = new SubjectConnectionReference(ctx, info, env, subject);
1:         SubjectSecurityContext ssc = new SubjectSecurityContext(conn);
1:         ctx.setSecurityContext(ssc);
1: 
1:         filter.removeConnection(ctx, info, null);
1: 
1:         assertTrue(invoked[0]);
1:     }
1: }
============================================================================