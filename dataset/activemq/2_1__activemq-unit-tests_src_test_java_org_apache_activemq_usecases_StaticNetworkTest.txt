1:4c8ab44: /**
1:4c8ab44:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c8ab44:  * contributor license agreements.  See the NOTICE file distributed with
1:4c8ab44:  * this work for additional information regarding copyright ownership.
1:4c8ab44:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c8ab44:  * (the "License"); you may not use this file except in compliance with
1:4c8ab44:  * the License.  You may obtain a copy of the License at
1:4c8ab44:  *
1:4c8ab44:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c8ab44:  *
1:4c8ab44:  * Unless required by applicable law or agreed to in writing, software
1:4c8ab44:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c8ab44:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c8ab44:  * See the License for the specific language governing permissions and
1:4c8ab44:  * limitations under the License.
1:4c8ab44:  */
1:4c8ab44: package org.apache.activemq.usecases;
1:4c8ab44: 
1:4c8ab44: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:4c8ab44: import org.apache.activemq.command.ActiveMQDestination;
1:4c8ab44: import org.apache.activemq.network.NetworkConnector;
1:4c8ab44: import org.apache.activemq.util.MessageIdList;
1:4c8ab44: 
1:4c8ab44: import javax.jms.MessageConsumer;
1:4c8ab44: import java.net.URI;
1:4c8ab44: 
1:4c8ab44: public class StaticNetworkTest extends JmsMultipleBrokersTestSupport {
1:4c8ab44: 
1:4c8ab44:     public void testStaticNetwork() throws Exception {
1:4c8ab44:         // Setup destination
1:4c8ab44:         ActiveMQDestination dest = createDestination("TEST", false);
1:4c8ab44:         ActiveMQDestination dest1 = createDestination("TEST1", false);
1:4c8ab44: 
1:4c8ab44:         NetworkConnector bridgeAB =bridgeBrokers("BrokerA", "BrokerB", true);
1:4c8ab44:         bridgeAB.addStaticallyIncludedDestination(dest);
1:4c8ab44:         bridgeAB.setStaticBridge(true);
1:4c8ab44: 
1:4c8ab44:         startAllBrokers();
1:4c8ab44:         waitForBridgeFormation();
1:4c8ab44: 
1:4c8ab44:         MessageConsumer consumer1 = createConsumer("BrokerB", dest);
1:4c8ab44:         MessageConsumer consumer2 = createConsumer("BrokerB", dest1);
1:4c8ab44: 
1:4c8ab44: 
1:4c8ab44:         Thread.sleep(1000);
1:4c8ab44: 
1:4c8ab44: 
1:4c8ab44:         sendMessages("BrokerA", dest,  1);
1:4c8ab44:         sendMessages("BrokerA", dest1, 1);
1:4c8ab44: 
1:4c8ab44:         MessageIdList msgs1 = getConsumerMessages("BrokerB", consumer1);
1:4c8ab44:         MessageIdList msgs2 = getConsumerMessages("BrokerB", consumer2);
1:4c8ab44: 
1:4c8ab44:         msgs1.waitForMessagesToArrive(1);
1:4c8ab44: 
1:4c8ab44:         Thread.sleep(1000);
1:4c8ab44: 
1:4c8ab44:         assertEquals(1, msgs1.getMessageCount());
1:4c8ab44:         assertEquals(0, msgs2.getMessageCount());
1:4c8ab44: 
1:4c8ab44:     }
1:4c8ab44: 
1:4c8ab44:     @Override
1:4c8ab44:     public void setUp() throws Exception {
1:4c8ab44:         super.setAutoFail(true);
1:4c8ab44:         super.setUp();
1:4c8ab44:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:4c8ab44:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:4c8ab44:     }
1:4c8ab44: 
1:4c8ab44: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4c8ab44
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: import javax.jms.MessageConsumer;
1: import java.net.URI;
1: 
1: public class StaticNetworkTest extends JmsMultipleBrokersTestSupport {
1: 
1:     public void testStaticNetwork() throws Exception {
1:         // Setup destination
1:         ActiveMQDestination dest = createDestination("TEST", false);
1:         ActiveMQDestination dest1 = createDestination("TEST1", false);
1: 
1:         NetworkConnector bridgeAB =bridgeBrokers("BrokerA", "BrokerB", true);
1:         bridgeAB.addStaticallyIncludedDestination(dest);
1:         bridgeAB.setStaticBridge(true);
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer consumer1 = createConsumer("BrokerB", dest);
1:         MessageConsumer consumer2 = createConsumer("BrokerB", dest1);
1: 
1: 
1:         Thread.sleep(1000);
1: 
1: 
1:         sendMessages("BrokerA", dest,  1);
1:         sendMessages("BrokerA", dest1, 1);
1: 
1:         MessageIdList msgs1 = getConsumerMessages("BrokerB", consumer1);
1:         MessageIdList msgs2 = getConsumerMessages("BrokerB", consumer2);
1: 
1:         msgs1.waitForMessagesToArrive(1);
1: 
1:         Thread.sleep(1000);
1: 
1:         assertEquals(1, msgs1.getMessageCount());
1:         assertEquals(0, msgs2.getMessageCount());
1: 
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:     }
1: 
1: }
============================================================================