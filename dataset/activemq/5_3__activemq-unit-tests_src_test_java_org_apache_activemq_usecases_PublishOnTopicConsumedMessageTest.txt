1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
3:a677c21: 
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: 
1:74a7a8b: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class PublishOnTopicConsumedMessageTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:fc00993: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PublishOnTopicConsumedMessageTest.class);
1:fc00993: 
1:a677c21:     private MessageProducer replyProducer;
1:a677c21: 
1:a677c21:     public synchronized void onMessage(Message message) {
1:a677c21: 
1:a677c21:         // lets resend the message somewhere else
1:a677c21:         try {
1:a677c21:             Message msgCopy = (Message)((org.apache.activemq.command.Message)message).copy();
1:a677c21:             replyProducer.send(msgCopy);
1:a677c21: 
1:74a7a8b:             // log.info("Sending reply: " + message);
1:a677c21:             super.onMessage(message);
1:74a7a8b:         } catch (JMSException e) {
1:fc00993:             LOG.info("Failed to send message: " + e);
1:a677c21:             e.printStackTrace();
3:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void setUp() throws Exception {
1:a677c21:         super.setUp();
1:a677c21: 
1:a677c21:         Destination replyDestination = null;
1:a677c21: 
1:a677c21:         if (topic) {
1:a677c21:             replyDestination = receiveSession.createTopic("REPLY." + getSubject());
1:74a7a8b:         } else {
1:a677c21:             replyDestination = receiveSession.createQueue("REPLY." + getSubject());
1:a677c21:         }
1:a677c21: 
1:a677c21:         replyProducer = receiveSession.createProducer(replyDestination);
1:fc00993:         LOG.info("Created replyProducer: " + replyProducer);
1:a677c21: 
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(PublishOnTopicConsumedMessageTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Failed to send message: " + e);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created replyProducer: " + replyProducer);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: 
/////////////////////////////////////////////////////////////////////////
1:             // log.info("Sending reply: " + message);
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(PublishOnTopicConsumedMessageTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class PublishOnTopicConsumedMessageTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:     private MessageProducer replyProducer;
1: 
1: 
1:     public synchronized void onMessage(Message message) {
1: 
1:         // lets resend the message somewhere else
1:         try {
1:             Message msgCopy = (Message)((org.apache.activemq.command.Message)message).copy();
1:             replyProducer.send(msgCopy);
1: 
0:             //log.info("Sending reply: " + message);
1:             super.onMessage(message);
1:         }
0:         catch (JMSException e) {
0:             log.info("Failed to send message: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         Destination replyDestination = null;
1: 
1:         if (topic) {
1:             replyDestination = receiveSession.createTopic("REPLY." + getSubject());
1:         }
0:         else {
1:             replyDestination = receiveSession.createQueue("REPLY." + getSubject());
1:         }
1: 
1:         replyProducer = receiveSession.createProducer(replyDestination);
0:         log.info("Created replyProducer: " + replyProducer);
1: 
1:     }
1: }
============================================================================