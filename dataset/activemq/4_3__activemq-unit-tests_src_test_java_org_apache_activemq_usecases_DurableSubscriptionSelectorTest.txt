1:2b6f36d: /**
1:2b6f36d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b6f36d:  * contributor license agreements.  See the NOTICE file distributed with
1:2b6f36d:  * this work for additional information regarding copyright ownership.
1:2b6f36d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b6f36d:  * (the "License"); you may not use this file except in compliance with
1:2b6f36d:  * the License.  You may obtain a copy of the License at
1:2b6f36d:  *
1:2b6f36d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2b6f36d:  *
1:2b6f36d:  * Unless required by applicable law or agreed to in writing, software
1:2b6f36d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b6f36d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b6f36d:  * See the License for the specific language governing permissions and
1:2b6f36d:  * limitations under the License.
1:2b6f36d:  */
1:2b6f36d: package org.apache.activemq.usecases;
5:2b6f36d: 
1:2b6f36d: import java.lang.management.ManagementFactory;
1:2b6f36d: 
1:2b6f36d: import javax.jms.JMSException;
1:2b6f36d: import javax.jms.Message;
1:2b6f36d: import javax.jms.MessageListener;
1:2b6f36d: import javax.jms.MessageProducer;
1:2b6f36d: import javax.jms.Session;
1:2b6f36d: import javax.jms.TopicSubscriber;
1:2b6f36d: import javax.management.MBeanServer;
1:2b6f36d: 
1:06cbebc: import junit.framework.Test;
1:4743a20: 
1:2b6f36d: import org.apache.activemq.ActiveMQConnection;
1:2b6f36d: import org.apache.activemq.ActiveMQConnectionFactory;
1:2b6f36d: import org.apache.activemq.broker.BrokerService;
1:c55f6a8: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c55f6a8: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2b6f36d: import org.apache.activemq.command.ActiveMQTopic;
1:4fbf92d: import org.apache.activemq.util.Wait;
1:2b6f36d: 
1:06cbebc: public class DurableSubscriptionSelectorTest extends org.apache.activemq.TestSupport {
1:2b6f36d: 
1:2b6f36d:     MBeanServer mbs;
1:2b6f36d:     BrokerService broker = null;
1:2b6f36d:     ActiveMQTopic topic;
1:2b6f36d: 
1:2b6f36d:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:2b6f36d:     Session producerSession;
1:2b6f36d:     MessageProducer producer;
1:2b6f36d: 
1:2b6f36d:     private int received = 0;
1:2b6f36d: 
1:06cbebc:     public static Test suite() {
1:06cbebc:         return suite(DurableSubscriptionSelectorTest.class);
1:06cbebc:     }
1:06cbebc: 
1:06cbebc:     public void initCombosForTestSubscription() throws Exception {
1:06cbebc:         this.addCombinationValues("defaultPersistenceAdapter", PersistenceAdapterChoice.values());
1:06cbebc:     }
1:06cbebc: 
1:2b6f36d:     public void testSubscription() throws Exception {
1:2b6f36d:         openConsumer();
1:2b6f36d:         for (int i = 0; i < 4000; i++) {
1:2b6f36d:             sendMessage(false);
5:2b6f36d:         }
2:2b6f36d:         Thread.sleep(1000);
1:d96c1cb: 
1:2b6f36d:         assertEquals("Invalid message received.", 0, received);
1:2b6f36d: 
1:2b6f36d:         closeProducer();
1:2b6f36d:         closeConsumer();
1:2b6f36d:         stopBroker();
1:2b6f36d: 
1:2b6f36d:         startBroker(false);
1:2b6f36d:         openConsumer();
1:2b6f36d: 
1:2b6f36d:         sendMessage(true);
1:4fbf92d: 
1:4743a20:         Wait.waitFor(new Wait.Condition() { @Override
1:4743a20:         public boolean isSatisified() { return received >= 1;} }, 10000);
1:2b6f36d: 
1:a5eb7c6:         assertEquals("Message is not received.", 1, received);
1:2b6f36d: 
1:2b6f36d:         sendMessage(true);
1:2b6f36d:         Thread.sleep(100);
1:2b6f36d: 
1:a5eb7c6:         assertEquals("Message is not received.", 2, received);
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     private void openConsumer() throws Exception {
1:2b6f36d:         consumerConnection = (ActiveMQConnection) createConnection();
1:2b6f36d:         consumerConnection.setClientID("cliID");
1:2b6f36d:         consumerConnection.start();
1:2b6f36d:         Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2b6f36d:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, "subName", "filter=true", false);
1:2b6f36d: 
1:2b6f36d:         subscriber.setMessageListener(new MessageListener() {
1:4743a20:             @Override
1:2b6f36d:             public void onMessage(Message message) {
1:2b6f36d:                 received++;
1:2b6f36d:             }
1:2b6f36d:         });
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     private void closeConsumer() throws JMSException {
1:2b6f36d:         if (consumerConnection != null)
1:2b6f36d:             consumerConnection.close();
1:2b6f36d:         consumerConnection = null;
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     private void sendMessage(boolean filter) throws Exception {
1:2b6f36d:         if (producerConnection == null) {
1:2b6f36d:             producerConnection = (ActiveMQConnection) createConnection();
1:2b6f36d:             producerConnection.start();
1:2b6f36d:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2b6f36d:             producer = producerSession.createProducer(topic);
1:2b6f36d:         }
1:2b6f36d: 
1:2b6f36d:         Message message = producerSession.createMessage();
1:2b6f36d:         message.setBooleanProperty("filter", filter);
1:2b6f36d:         producer.send(message);
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     private void closeProducer() throws JMSException {
1:2b6f36d:         if (producerConnection != null)
1:2b6f36d:             producerConnection.close();
1:2b6f36d:         producerConnection = null;
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     private void startBroker(boolean deleteMessages) throws Exception {
1:2b6f36d:         broker = new BrokerService();
1:2b6f36d:         broker.setBrokerName("test-broker");
1:4743a20: 
1:2b6f36d:         if (deleteMessages) {
1:2b6f36d:             broker.setDeleteAllMessagesOnStartup(true);
1:2b6f36d:         }
1:06cbebc:         setDefaultPersistenceAdapter(broker);
1:4fbf92d: 
1:c55f6a8:         /* use maxPageSize policy in place of always pulling from the broker in maxRows chunks
1:4fbf92d:         if (broker.getPersistenceAdapter() instanceof JDBCPersistenceAdapter) {
1:c55f6a8:             ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).setMaxRows(5000);
1:c55f6a8:         }*/
1:c55f6a8: 
1:c55f6a8:         PolicyMap policyMap = new PolicyMap();
1:c55f6a8:         PolicyEntry defaultEntry = new PolicyEntry();
1:c55f6a8:         defaultEntry.setMaxPageSize(5000);
1:c55f6a8:         policyMap.setDefaultEntry(defaultEntry);
1:c55f6a8:         broker.setDestinationPolicy(policyMap);
1:c55f6a8: 
1:2b6f36d:         broker.start();
1:4fbf92d:     }
1:2b6f36d: 
1:2b6f36d:     private void stopBroker() throws Exception {
1:2b6f36d:         if (broker != null)
1:2b6f36d:             broker.stop();
1:2b6f36d:         broker = null;
1:2b6f36d:     }
1:4743a20: 
1:4743a20:     @Override
1:2b6f36d:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:2b6f36d:         return new ActiveMQConnectionFactory("vm://test-broker?jms.watchTopicAdvisories=false&waitForStart=5000&create=false");
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     @Override
1:2b6f36d:     protected void setUp() throws Exception {
1:38666e9:         setAutoFail(true);
1:2b6f36d:         super.setUp();
1:2b6f36d: 
1:2b6f36d:         startBroker(true);
1:2b6f36d:         topic = (ActiveMQTopic) createDestination();
1:2b6f36d:         mbs = ManagementFactory.getPlatformMBeanServer();
1:2b6f36d:     }
1:2b6f36d: 
1:2b6f36d:     @Override
1:2b6f36d:     protected void tearDown() throws Exception {
1:2b6f36d:         stopBroker();
1:2b6f36d:         super.tearDown();
1:2b6f36d:     }
1:2b6f36d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() { @Override
1:         public boolean isSatisified() { return received >= 1;} }, 10000);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:a5eb7c6
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Message is not received.", 1, received);
1:         assertEquals("Message is not received.", 2, received);
commit:c55f6a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         /* use maxPageSize policy in place of always pulling from the broker in maxRows chunks
1:             ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).setMaxRows(5000);
1:         }*/
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setMaxPageSize(5000);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
commit:38666e9
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
commit:4fbf92d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: 
0:         Wait.waitFor(new Wait.Condition() { public boolean isSatisified() { return received >= 1;} }, 10000);
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (broker.getPersistenceAdapter() instanceof JDBCPersistenceAdapter) {
0:             ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).setMaxRows(5000);    
1:         }
commit:06cbebc
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: public class DurableSubscriptionSelectorTest extends org.apache.activemq.TestSupport {
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite() {
1:         return suite(DurableSubscriptionSelectorTest.class);
1:     }
1: 
1:     public void initCombosForTestSubscription() throws Exception {
1:         this.addCombinationValues("defaultPersistenceAdapter", PersistenceAdapterChoice.values());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         setDefaultPersistenceAdapter(broker);
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9f417a2
/////////////////////////////////////////////////////////////////////////
0:         broker.setPersistenceAdapter(createPersistenceAdapter());
commit:d96c1cb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.PersistenceAdapter;
0: abstract public class DurableSubscriptionSelectorTest extends org.apache.activemq.TestSupport {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
0:     abstract public PersistenceAdapter createPersistenceAdapter() throws Exception;
commit:2b6f36d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.lang.management.ManagementFactory;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
1: 
0: public class SubscriptionSelectorTest extends org.apache.activemq.TestSupport {
1: 
1:     MBeanServer mbs;
1:     BrokerService broker = null;
1:     ActiveMQTopic topic;
1: 
1:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:     Session producerSession;
1:     MessageProducer producer;
1: 
1:     private int received = 0;
1: 
1:     public void testSubscription() throws Exception {
1:         openConsumer();
1:         for (int i = 0; i < 4000; i++) {
1:             sendMessage(false);
1:         }
1:         Thread.sleep(1000);
1: 
1:         assertEquals("Invalid message received.", 0, received);
1: 
1:         closeProducer();
1:         closeConsumer();
1:         stopBroker();
1: 
1:         startBroker(false);
1:         openConsumer();
1: 
1:         sendMessage(true);
1:         Thread.sleep(1000);
1: 
0:         assertEquals("Message is not recieved.", 1, received);
1: 
1:         sendMessage(true);
1:         Thread.sleep(100);
1: 
0:         assertEquals("Message is not recieved.", 2, received);
1:     }
1: 
1:     private void openConsumer() throws Exception {
1:         consumerConnection = (ActiveMQConnection) createConnection();
1:         consumerConnection.setClientID("cliID");
1:         consumerConnection.start();
1:         Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, "subName", "filter=true", false);
1: 
1:         subscriber.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 received++;
1:             }
1:         });
1:     }
1: 
1:     private void closeConsumer() throws JMSException {
1:         if (consumerConnection != null)
1:             consumerConnection.close();
1:         consumerConnection = null;
1:     }
1: 
1:     private void sendMessage(boolean filter) throws Exception {
1:         if (producerConnection == null) {
1:             producerConnection = (ActiveMQConnection) createConnection();
1:             producerConnection.start();
1:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = producerSession.createProducer(topic);
1:         }
1: 
1:         Message message = producerSession.createMessage();
1:         message.setBooleanProperty("filter", filter);
1:         producer.send(message);
1:     }
1: 
1:     private void closeProducer() throws JMSException {
1:         if (producerConnection != null)
1:             producerConnection.close();
1:         producerConnection = null;
1:     }
1: 
0:     private int getPendingQueueSize() throws Exception {
0:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
0:         for (ObjectName sub: subs) {
0:             if ("cliID".equals(mbs.getAttribute(sub, "ClientId"))) {
0:                 Integer size = (Integer) mbs.getAttribute(sub, "PendingQueueSize");
0:                 return size != null ? size : 0;
1:             }
1:         }
0:         assertTrue(false);
0:         return -1;
1:     }
1: 
1:     private void startBroker(boolean deleteMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setBrokerName("test-broker");
1:         
0:         //TODO create variants for different stores
0:         //broker.setPersistenceAdapter(new AMQPersistenceAdapter());
1:         if (deleteMessages) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
1:         broker.start();
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://test-broker?jms.watchTopicAdvisories=false&waitForStart=5000&create=false");
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         startBroker(true);
1:         topic = (ActiveMQTopic) createDestination();
1:         mbs = ManagementFactory.getPlatformMBeanServer();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         stopBroker();
1:         super.tearDown();
1:     }
1: }
============================================================================