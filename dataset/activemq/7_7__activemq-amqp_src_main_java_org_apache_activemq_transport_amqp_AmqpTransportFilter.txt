2:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
2:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
8:cdd5150: 
1:f2653e6: import java.io.IOException;
1:f2653e6: import java.security.cert.X509Certificate;
1:f2653e6: import java.util.concurrent.locks.ReentrantLock;
1:f2653e6: 
1:adafdfe: import org.apache.activemq.broker.BrokerService;
1:cdd5150: import org.apache.activemq.command.Command;
1:cdd5150: import org.apache.activemq.transport.Transport;
1:cdd5150: import org.apache.activemq.transport.TransportFilter;
1:cdd5150: import org.apache.activemq.transport.TransportListener;
1:98c5866: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:cdd5150: import org.apache.activemq.transport.tcp.SslTransport;
1:cdd5150: import org.apache.activemq.util.IOExceptionSupport;
1:cdd5150: import org.apache.activemq.wireformat.WireFormat;
1:cdd5150: import org.slf4j.Logger;
1:cdd5150: import org.slf4j.LoggerFactory;
1:cdd5150: 
1:6a6ef45: /**
1:cdd5150:  * The AMQPTransportFilter normally sits on top of a TcpTransport that has been
1:0e148fb:  * configured with the AmqpWireFormat and is used to convert AMQP commands to
1:cdd5150:  * ActiveMQ commands. All of the conversion work is done by delegating to the
1:cdd5150:  * AMQPProtocolConverter
1:6a6ef45:  */
1:cdd5150: public class AmqpTransportFilter extends TransportFilter implements AmqpTransport {
1:cdd5150:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransportFilter.class);
1:e8eb58a:     static final Logger TRACE_BYTES = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".BYTES");
1:3306467:     public static final Logger TRACE_FRAMES = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".FRAMES");
1:3306467:     private AmqpProtocolConverter protocolConverter;
1:cdd5150:     private AmqpWireFormat wireFormat;
1:8b36701:     private AmqpInactivityMonitor monitor;
1:cdd5150: 
1:cdd5150:     private boolean trace;
1:f2653e6:     private final ReentrantLock lock = new ReentrantLock();
1:cdd5150: 
1:adafdfe:     public AmqpTransportFilter(Transport next, WireFormat wireFormat, BrokerService brokerService) {
1:cdd5150:         super(next);
1:3306467:         this.protocolConverter = new AmqpProtocolDiscriminator(this, brokerService);
1:cdd5150:         if (wireFormat instanceof AmqpWireFormat) {
1:cdd5150:             this.wireFormat = (AmqpWireFormat) wireFormat;
2:cdd5150:         }
1:cdd5150:     }
1:ab3de0c: 
1:f2653e6:     @Override
1:8b36701:     public void start() throws Exception {
1:8b36701:         if (monitor != null) {
1:4b4cf7c:             monitor.setAmqpTransport(this);
1:4b4cf7c:             monitor.startConnectionTimeoutChecker(getConnectAttemptTimeout());
1:8b36701:         }
1:8b36701:         super.start();
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:cdd5150:     public void oneway(Object o) throws IOException {
1:4b4cf7c:         try {
1:cdd5150:             final Command command = (Command) o;
1:8d5b9a5:             lock.lock();
1:2db73e2:             try {
1:72d72ab:                 protocolConverter.onActiveMQCommand(command);
1:6baed7a:             } finally {
1:8d5b9a5:                 lock.unlock();
1:72d72ab:             }
1:cdd5150:         } catch (Exception e) {
1:cdd5150:             throw IOExceptionSupport.create(e);
1:cdd5150:         }
1:cdd5150:     }
1:2db73e2: 
1:f2653e6:     @Override
1:2db73e2:     public void onException(IOException error) {
1:8d5b9a5:         lock.lock();
1:2db73e2:         try {
1:0dfa5f4:             protocolConverter.onAMQPException(error);
1:2db73e2:         } finally {
1:8d5b9a5:             lock.unlock();
1:2db73e2:         }
1:2db73e2:     }
1:2db73e2: 
1:f2653e6:     @Override
1:0dfa5f4:     public void sendToActiveMQ(IOException error) {
1:0dfa5f4:         super.onException(error);
1:0dfa5f4:     }
1:0dfa5f4: 
1:f2653e6:     @Override
1:cdd5150:     public void onCommand(Object command) {
1:6baed7a:         try {
1:e1bbde7:             if (trace) {
1:e1bbde7:                 TRACE_BYTES.trace("Received: \n{}", command);
1:2db73e2:             }
1:8d5b9a5:             lock.lock();
1:6baed7a:             try {
1:dc4ceb4:                 protocolConverter.onAMQPData(command);
1:2db73e2:             } finally {
1:8d5b9a5:                 lock.unlock();
1:72d72ab:             }
1:cdd5150:         } catch (IOException e) {
1:cdd5150:             handleException(e);
1:dc4ceb4:         } catch (Exception e) {
1:cdd5150:             onException(IOExceptionSupport.create(e));
1:cdd5150:         }
1:cdd5150:     }
1:cdd5150: 
1:f2653e6:     @Override
1:cdd5150:     public void sendToActiveMQ(Command command) {
1:8d5b9a5:         assert lock.isHeldByCurrentThread();
1:cdd5150:         TransportListener l = transportListener;
1:cdd5150:         if (l != null) {
1:cdd5150:             l.onCommand(command);
1:cdd5150:         }
1:cdd5150:     }
1:cdd5150: 
1:f2653e6:     @Override
1:dc4ceb4:     public void sendToAmqp(Object command) throws IOException {
1:8d5b9a5:         assert lock.isHeldByCurrentThread();
1:e1bbde7:         if (trace) {
1:e1bbde7:             TRACE_BYTES.trace("Sending: \n{}", command);
1:cdd5150:         }
1:cdd5150:         Transport n = next;
1:cdd5150:         if (n != null) {
1:cdd5150:             n.oneway(command);
1:cdd5150:         }
1:cdd5150:     }
1:cdd5150: 
1:f2653e6:     @Override
1:4b4cf7c:     public long keepAlive() {
1:4b4cf7c:         long nextKeepAliveDelay = 0l;
1:4b4cf7c: 
1:4b4cf7c:         try {
1:4b4cf7c:             lock.lock();
2:cdd5150:             try {
1:4b4cf7c:                 nextKeepAliveDelay = protocolConverter.keepAlive();
1:4b4cf7c:             } finally {
1:4b4cf7c:                 lock.unlock();
1:4b4cf7c:             }
1:4b4cf7c:         } catch (IOException e) {
1:4b4cf7c:             handleException(e);
1:4b4cf7c:         } catch (Exception e) {
1:4b4cf7c:             onException(IOExceptionSupport.create(e));
1:4b4cf7c:         }
1:4b4cf7c: 
1:4b4cf7c:         return nextKeepAliveDelay;
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:cdd5150:     public X509Certificate[] getPeerCertificates() {
1:98c5866:         X509Certificate[] peerCerts = null;
1:cdd5150:         if (next instanceof SslTransport) {
1:98c5866:             peerCerts = ((SslTransport) next).getPeerCertificates();
1:98c5866:         } else if (next instanceof NIOSSLTransport) {
1:98c5866:             peerCerts = ((NIOSSLTransport) next).getPeerCertificates();
1:cdd5150:         }
1:98c5866:         if (trace && peerCerts != null) {
1:98c5866:             LOG.debug("Peer Identity has been verified\n");
1:98c5866:         }
1:98c5866:         return peerCerts;
1:cdd5150:     }
1:cdd5150: 
1:2db73e2:     @Override
1:cdd5150:     public boolean isTrace() {
1:cdd5150:         return trace;
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     public void setTrace(boolean trace) {
1:cdd5150:         this.trace = trace;
1:e8eb58a:         this.protocolConverter.updateTracer();
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     @Override
1:cdd5150:     public AmqpWireFormat getWireFormat() {
1:cdd5150:         return this.wireFormat;
1:cdd5150:     }
1:2db73e2: 
1:cdd5150:     public void handleException(IOException e) {
1:cdd5150:         super.onException(e);
1:cdd5150:     }
1:cdd5150: 
1:f2653e6:     @Override
1:b8a6e5a:     public String getTransformer() {
1:3306467:         return wireFormat.getTransformer();
1:cdd5150:     }
1:cdd5150: 
1:b8a6e5a:     public void setTransformer(String transformer) {
1:3306467:         wireFormat.setTransformer(transformer);
1:8d5b9a5:     }
1:f2653e6: 
1:f2653e6:     @Override
1:3306467:     public AmqpProtocolConverter getProtocolConverter() {
1:8d5b9a5:         return protocolConverter;
1:8d5b9a5:     }
1:8d5b9a5: 
1:f2653e6:     @Override
1:3306467:     public void setProtocolConverter(AmqpProtocolConverter protocolConverter) {
1:8d5b9a5:         this.protocolConverter = protocolConverter;
1:838bbeb:     }
1:838bbeb: 
1:ab3de0c:     public void setProducerCredit(int producerCredit) {
1:3306467:         wireFormat.setProducerCredit(producerCredit);
1:3306467:     }
1:3306467: 
1:3306467:     public int getProducerCredit() {
1:3306467:         return wireFormat.getProducerCredit();
1:ab3de0c:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     public void setInactivityMonitor(AmqpInactivityMonitor monitor) {
1:8b36701:         this.monitor = monitor;
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     public AmqpInactivityMonitor getInactivityMonitor() {
1:8b36701:         return monitor;
1:8b36701:     }
1:8b36701: 
1:4b4cf7c:     @Override
1:4b4cf7c:     public boolean isUseInactivityMonitor() {
1:4b4cf7c:         return monitor != null;
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     public int getConnectAttemptTimeout() {
1:8b36701:         return wireFormat.getConnectAttemptTimeout();
1:8b36701:     }
1:8b36701: 
1:4b4cf7c:     public void setConnectAttemptTimeout(int connectAttemptTimeout) {
1:8b36701:         wireFormat.setConnectAttemptTimeout(connectAttemptTimeout);
1:8b36701:     }
1:7c41ebc: 
1:7c41ebc:     public long getMaxFrameSize() {
1:7c41ebc:         return wireFormat.getMaxFrameSize();
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     public void setMaxFrameSize(long maxFrameSize) {
1:7c41ebc:         wireFormat.setMaxFrameSize(maxFrameSize);
1:7c41ebc:     }
1:cdd5150: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
/////////////////////////////////////////////////////////////////////////
1:         X509Certificate[] peerCerts = null;
1:             peerCerts = ((SslTransport) next).getPeerCertificates();
1:         } else if (next instanceof NIOSSLTransport) {
1:             peerCerts = ((NIOSSLTransport) next).getPeerCertificates();
1:         if (trace && peerCerts != null) {
1:             LOG.debug("Peer Identity has been verified\n");
1:         }
1:         return peerCerts;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:19ea551
/////////////////////////////////////////////////////////////////////////
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getMaxFrameSize() {
1:         return wireFormat.getMaxFrameSize();
1:     }
1: 
1:     public void setMaxFrameSize(long maxFrameSize) {
1:         wireFormat.setMaxFrameSize(maxFrameSize);
1:     }
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
1:             monitor.setAmqpTransport(this);
1:             monitor.startConnectionTimeoutChecker(getConnectAttemptTimeout());
/////////////////////////////////////////////////////////////////////////
1:     public long keepAlive() {
1:         long nextKeepAliveDelay = 0l;
1: 
1:         try {
1:             lock.lock();
1:             try {
1:                 nextKeepAliveDelay = protocolConverter.keepAlive();
1:             } finally {
1:                 lock.unlock();
1:             }
1:         } catch (IOException e) {
1:             handleException(e);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1: 
1:         return nextKeepAliveDelay;
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isUseInactivityMonitor() {
1:         return monitor != null;
1:     }
1: 
1:     public int getConnectAttemptTimeout() {
1:     public void setConnectAttemptTimeout(int connectAttemptTimeout) {
commit:3306467
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final Logger TRACE_FRAMES = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".FRAMES");
1:     private AmqpProtocolConverter protocolConverter;
1:         this.protocolConverter = new AmqpProtocolDiscriminator(this, brokerService);
/////////////////////////////////////////////////////////////////////////
1:         return wireFormat.getTransformer();
1:         wireFormat.setTransformer(transformer);
1:     public AmqpProtocolConverter getProtocolConverter() {
1:     public void setProtocolConverter(AmqpProtocolConverter protocolConverter) {
/////////////////////////////////////////////////////////////////////////
1:         wireFormat.setProducerCredit(producerCredit);
1:     }
1: 
1:     public int getProducerCredit() {
1:         return wireFormat.getProducerCredit();
commit:6a6ef45
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @deprecated AMQP receiver configures it's prefetch via flow, remove on next release.
1:      */
0:     @Deprecated
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.amqp.message.InboundTransformer;
commit:8b36701
/////////////////////////////////////////////////////////////////////////
1:     private AmqpInactivityMonitor monitor;
/////////////////////////////////////////////////////////////////////////
1:     public void start() throws Exception {
1:         if (monitor != null) {
0:             monitor.setProtocolConverter(protocolConverter);
0:             monitor.startConnectChecker(getConnectAttemptTimeout());
1:         }
1:         super.start();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setInactivityMonitor(AmqpInactivityMonitor monitor) {
1:         this.monitor = monitor;
1:     }
1: 
1:     @Override
1:     public AmqpInactivityMonitor getInactivityMonitor() {
1:         return monitor;
1:     }
1: 
0:     public long getConnectAttemptTimeout() {
1:         return wireFormat.getConnectAttemptTimeout();
1:     }
1: 
0:     public void setConnectAttemptTimeout(long connectAttemptTimeout) {
1:         wireFormat.setConnectAttemptTimeout(connectAttemptTimeout);
1:     }
commit:adafdfe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     public AmqpTransportFilter(Transport next, WireFormat wireFormat, BrokerService brokerService) {
0:         this.protocolConverter = new AMQPProtocolDiscriminator(this, brokerService);
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.cert.X509Certificate;
1: import java.util.concurrent.locks.ReentrantLock;
1: 
0: import org.apache.qpid.proton.jms.InboundTransformer;
/////////////////////////////////////////////////////////////////////////
1:     private final ReentrantLock lock = new ReentrantLock();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @Override
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             if (trace) {
1:                 TRACE_BYTES.trace("Received: \n{}", command);
/////////////////////////////////////////////////////////////////////////
1:         if (trace) {
1:             TRACE_BYTES.trace("Sending: \n{}", command);
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ab3de0c
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setProducerCredit(int producerCredit) {
0:         protocolConverter.setProducerCredit(producerCredit);
1:     }
commit:838bbeb
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void setPrefetch(int prefetch) {
0:         protocolConverter.setPrefetch(prefetch);
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:8d5b9a5
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.locks.ReentrantLock;
/////////////////////////////////////////////////////////////////////////
0:     private IAmqpProtocolConverter protocolConverter;
0:     private ReentrantLock lock = new ReentrantLock();
0:         this.protocolConverter = new AMQPProtocolDiscriminator(this);
/////////////////////////////////////////////////////////////////////////
1:             lock.lock();
1:                 lock.unlock();
/////////////////////////////////////////////////////////////////////////
1:         lock.lock();
1:             lock.unlock();
/////////////////////////////////////////////////////////////////////////
1:             lock.lock();
1:                 lock.unlock();
/////////////////////////////////////////////////////////////////////////
1:         assert lock.isHeldByCurrentThread();
/////////////////////////////////////////////////////////////////////////
1:         assert lock.isHeldByCurrentThread();
/////////////////////////////////////////////////////////////////////////
0:     public IAmqpProtocolConverter getProtocolConverter() {
1:         return protocolConverter;
1:     }
1: 
0:     public void setProtocolConverter(IAmqpProtocolConverter protocolConverter) {
1:         this.protocolConverter = protocolConverter;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:e8eb58a
/////////////////////////////////////////////////////////////////////////
1:     static final Logger TRACE_BYTES = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".BYTES");
0:     static final Logger TRACE_FRAMES = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".FRAMES");
/////////////////////////////////////////////////////////////////////////
0:             if (trace && TRACE_BYTES.isTraceEnabled()) {
0:                 TRACE_BYTES.trace("Received: \n" + command);
/////////////////////////////////////////////////////////////////////////
0:         if (trace && TRACE_BYTES.isTraceEnabled()) {
0:             TRACE_BYTES.trace("Sending: \n" + command);
/////////////////////////////////////////////////////////////////////////
1:         this.protocolConverter.updateTracer();
commit:0dfa5f4
/////////////////////////////////////////////////////////////////////////
0:         protocolConverter.lock.lock();
1:             protocolConverter.onAMQPException(error);
0:             protocolConverter.lock.unlock();
1:     public void sendToActiveMQ(IOException error) {
1:         super.onException(error);
1:     }
1: 
commit:3016b39
/////////////////////////////////////////////////////////////////////////
0: import org.apache.qpid.proton.jms.InboundTransformer;
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:dc4ceb4
/////////////////////////////////////////////////////////////////////////
1:                 protocolConverter.onAMQPData(command);
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:     public void sendToAmqp(Object command) throws IOException {
commit:2db73e2
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void onException(IOException error) {
1:         try {
0:             protocolConverter.lock.lock();
1:             try {
0:                 protocolConverter.onAMQPException(error);
1:             } finally {
0:                 protocolConverter.lock.unlock();
1:             }
1:         } finally {
0:             super.onException(error);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:6baed7a
/////////////////////////////////////////////////////////////////////////
0:             protocolConverter.lock.lock();
1:             try {
1:             } finally {
0:                 protocolConverter.lock.unlock();
/////////////////////////////////////////////////////////////////////////
0:             protocolConverter.lock.lock();
1:             try {
0:             } finally {
0:                 protocolConverter.lock.unlock();
/////////////////////////////////////////////////////////////////////////
0:         assert protocolConverter.lock.isHeldByCurrentThread();
/////////////////////////////////////////////////////////////////////////
0:         assert protocolConverter.lock.isHeldByCurrentThread();
commit:72d72ab
/////////////////////////////////////////////////////////////////////////
0:             synchronized (protocolConverter) {
1:                 protocolConverter.onActiveMQCommand(command);
1:             }
/////////////////////////////////////////////////////////////////////////
0:             synchronized (protocolConverter) {
0:                 protocolConverter.onAMQPData((Buffer) command);
1:             }
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.tcp.SslTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.hawtbuf.Buffer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.JMSException;
0: import java.io.IOException;
0: import java.security.cert.X509Certificate;
1: 
1: /**
1:  * The AMQPTransportFilter normally sits on top of a TcpTransport that has been
0:  * configured with the StompWireFormat and is used to convert AMQP commands to
1:  * ActiveMQ commands. All of the conversion work is done by delegating to the
1:  * AMQPProtocolConverter
1:  */
1: public class AmqpTransportFilter extends TransportFilter implements AmqpTransport {
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransportFilter.class);
0:     private static final Logger TRACE = LoggerFactory.getLogger(AmqpTransportFilter.class.getPackage().getName() + ".AMQPIO");
0:     private final AmqpProtocolConverter protocolConverter;
0: //    private AmqpInactivityMonitor monitor;
1:     private AmqpWireFormat wireFormat;
1: 
1:     private boolean trace;
1: 
0:     public AmqpTransportFilter(Transport next, WireFormat wireFormat, BrokerContext brokerContext) {
1:         super(next);
0:         this.protocolConverter = new AmqpProtocolConverter(this, brokerContext);
1: 
1:         if (wireFormat instanceof AmqpWireFormat) {
1:             this.wireFormat = (AmqpWireFormat) wireFormat;
1:         }
1:     }
1: 
1:     public void oneway(Object o) throws IOException {
1:         try {
1:             final Command command = (Command) o;
0:             protocolConverter.onActiveMQCommand(command);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public void onCommand(Object command) {
1:         try {
0:             if (trace) {
0:                 TRACE.trace("Received: \n" + command);
1:             }
1: 
0:             protocolConverter.onAMQPData((Buffer) command);
1:         } catch (IOException e) {
1:             handleException(e);
0:         } catch (JMSException e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     public void sendToActiveMQ(Command command) {
1:         TransportListener l = transportListener;
1:         if (l != null) {
1:             l.onCommand(command);
1:         }
1:     }
1: 
0:     public void sendToAmqp(Buffer command) throws IOException {
0:         if (trace) {
0:             TRACE.trace("Sending: \n" + command);
1:         }
1:         Transport n = next;
1:         if (n != null) {
1:             n.oneway(command);
1:         }
1:     }
1: 
1:     public X509Certificate[] getPeerCertificates() {
1:         if (next instanceof SslTransport) {
0:             X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
0:             if (trace && peerCerts != null) {
0:                 LOG.debug("Peer Identity has been verified\n");
1:             }
0:             return peerCerts;
1:         }
0:         return null;
1:     }
1: 
1:     public boolean isTrace() {
1:         return trace;
1:     }
1: 
1:     public void setTrace(boolean trace) {
1:         this.trace = trace;
1:     }
1: 
0: //    @Override
0: //    public AmqpInactivityMonitor getInactivityMonitor() {
0: //        return monitor;
0: //    }
0: //
0: //    public void setInactivityMonitor(AmqpInactivityMonitor monitor) {
0: //        this.monitor = monitor;
0: //    }
1: 
1:     @Override
1:     public AmqpWireFormat getWireFormat() {
1:         return this.wireFormat;
1:     }
1: 
1:     public void handleException(IOException e) {
1:         super.onException(e);
1:     }
1: 
1: 
1: }
author:Christian Posta
-------------------------------------------------------------------------------
commit:0e148fb
/////////////////////////////////////////////////////////////////////////
1:  * configured with the AmqpWireFormat and is used to convert AMQP commands to
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b8a6e5a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.amqp.transform.InboundTransformer;
/////////////////////////////////////////////////////////////////////////
0:     private String transformer = InboundTransformer.TRANSFORMER_NATIVE;
/////////////////////////////////////////////////////////////////////////
1:     public String getTransformer() {
0:         return transformer;
0:     }
0: 
1:     public void setTransformer(String transformer) {
0:         this.transformer = transformer;
0:     }
============================================================================