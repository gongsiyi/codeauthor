2:2e57fb5: /**
1:2e57fb5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e57fb5:  * contributor license agreements.  See the NOTICE file distributed with
1:2e57fb5:  * this work for additional information regarding copyright ownership.
1:2e57fb5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e57fb5:  * (the "License"); you may not use this file except in compliance with
1:2e57fb5:  * the License.  You may obtain a copy of the License at
1:a59c9ba:  *
1:2e57fb5:  *      http://www.apache.org/licenses/LICENSE-2.0
3:2e57fb5:  *
1:2e57fb5:  * Unless required by applicable law or agreed to in writing, software
1:2e57fb5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e57fb5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e57fb5:  * See the License for the specific language governing permissions and
1:2e57fb5:  * limitations under the License.
2:2e57fb5:  */
1:b66559e: package org.apache.activemq.jms.pool;
1:d1aeb04: 
1:b66559e: import javax.jms.Connection;
1:2e57fb5: import javax.jms.JMSException;
1:2e57fb5: import javax.jms.Session;
1:b66559e: import javax.jms.XAConnection;
1:2e57fb5: import javax.transaction.RollbackException;
1:2e57fb5: import javax.transaction.Status;
1:2e57fb5: import javax.transaction.SystemException;
1:2e57fb5: import javax.transaction.TransactionManager;
1:2e57fb5: import javax.transaction.xa.XAResource;
1:a59c9ba: 
1:a59c9ba: /**
1:9f78f82:  * An XA-aware connection pool. When a session is created and an xa transaction
1:9f78f82:  * is active, the session will automatically be enlisted in the current
1:9f78f82:  * transaction.
1:a59c9ba:  */
1:2e57fb5: public class XaConnectionPool extends ConnectionPool {
12:2e57fb5: 
1:a34fbb9:     private final TransactionManager transactionManager;
1:2e57fb5: 
1:b66559e:     public XaConnectionPool(Connection connection, TransactionManager transactionManager) {
1:a59c9ba:         super(connection);
1:2e57fb5:         this.transactionManager = transactionManager;
1:a59c9ba:     }
1:9f78f82: 
1:9f78f82:     @Override
1:b66559e:     protected Session makeSession(SessionKey key) throws JMSException {
1:9f78f82:         return ((XAConnection) connection).createXASession();
1:9f78f82:     }
1:9f78f82: 
1:9f78f82:     @Override
1:2e57fb5:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
1:2e57fb5:         try {
1:2e57fb5:             boolean isXa = (transactionManager != null && transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION);
1:2e57fb5:             if (isXa) {
1:9f78f82:                 // if the xa tx aborts inflight we don't want to auto create a
1:9f78f82:                 // local transaction or auto ack
1:c387522:                 transacted = false;
1:c387522:                 ackMode = Session.CLIENT_ACKNOWLEDGE;
1:a3578eb:             } else if (transactionManager != null) {
1:a3578eb:                 // cmt or transactionManager managed
1:a3578eb:                 transacted = false;
1:a3578eb:                 if (ackMode == Session.SESSION_TRANSACTED) {
1:a3578eb:                     ackMode = Session.AUTO_ACKNOWLEDGE;
1:9f78f82:                 }
1:9f78f82:             }
1:2e57fb5:             PooledSession session = (PooledSession) super.createSession(transacted, ackMode);
1:2e57fb5:             if (isXa) {
1:9f78f82:                 session.setIgnoreClose(true);
1:628a0cd:                 session.setIsXa(true);
1:2e57fb5:                 transactionManager.getTransaction().registerSynchronization(new Synchronization(session));
1:2e57fb5:                 incrementReferenceCount();
1:2e57fb5:                 transactionManager.getTransaction().enlistResource(createXaResource(session));
1:d1aeb04:             } else {
1:d1aeb04:                 session.setIgnoreClose(false);
1:b66559e:             }
1:2e57fb5:             return session;
1:2e57fb5:         } catch (RollbackException e) {
1:2e57fb5:             final JMSException jmsException = new JMSException("Rollback Exception");
1:2e57fb5:             jmsException.initCause(e);
1:2e57fb5:             throw jmsException;
1:2e57fb5:         } catch (SystemException e) {
1:2e57fb5:             final JMSException jmsException = new JMSException("System Exception");
1:2e57fb5:             jmsException.initCause(e);
1:2e57fb5:             throw jmsException;
1:a3578eb:         }
5:2e57fb5:     }
1:9f78f82: 
1:2e57fb5:     protected XAResource createXaResource(PooledSession session) throws JMSException {
1:9a1f9c2:         return session.getXAResource();
1:2e57fb5:     }
1:b66559e: 
1:2e57fb5:     protected class Synchronization implements javax.transaction.Synchronization {
1:2e57fb5:         private final PooledSession session;
1:a59c9ba: 
1:2e57fb5:         private Synchronization(PooledSession session) {
1:2e57fb5:             this.session = session;
1:2e57fb5:         }
1:a59c9ba: 
1:9f78f82:         @Override
1:2e57fb5:         public void beforeCompletion() {
1:2e57fb5:         }
1:a59c9ba: 
1:b66559e:         @Override
1:2e57fb5:         public void afterCompletion(int status) {
1:2e57fb5:             try {
1:2e57fb5:                 // This will return session to the pool.
1:2e57fb5:                 session.setIgnoreClose(false);
1:2e57fb5:                 session.close();
1:2e57fb5:                 decrementReferenceCount();
1:2e57fb5:             } catch (JMSException e) {
1:2e57fb5:                 throw new RuntimeException(e);
1:2e57fb5:             }
1:2e57fb5:         }
1:2e57fb5:     }
1:2e57fb5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f395c70
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9f78f82
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
/////////////////////////////////////////////////////////////////////////
1:  * An XA-aware connection pool. When a session is created and an xa transaction
1:  * is active, the session will automatically be enlisted in the current
1:  * transaction.
/////////////////////////////////////////////////////////////////////////
1:         return ((XAConnection) connection).createXASession();
/////////////////////////////////////////////////////////////////////////
1:                 // if the xa tx aborts inflight we don't want to auto create a
1:                 // local transaction or auto ack
/////////////////////////////////////////////////////////////////////////
0:                 session.addSessionEventListener(new PooledSessionEventListener() {
1: 
1:                     @Override
0:                     public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
1:                     }
1: 
1:                     @Override
0:                     public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
1:                     }
1: 
1:                     @Override
0:                     public void onSessionClosed(PooledSession session) {
1:                         session.setIgnoreClose(true);
0:                         session.setIsXa(false);
1:                     }
0:                 });
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
1: import javax.jms.Connection;
1: import javax.jms.XAConnection;
/////////////////////////////////////////////////////////////////////////
1:     public XaConnectionPool(Connection connection, TransactionManager transactionManager) {
1:     protected Session makeSession(SessionKey key) throws JMSException {
0:         return ((XAConnection)connection).createXASession();
1:     }
1: 
1:     @Override
commit:c387522
/////////////////////////////////////////////////////////////////////////
0:                 // if the xa tx aborts inflight we don't want to auto create a local transaction or auto ack
1:                 transacted = false;
1:                 ackMode = Session.CLIENT_ACKNOWLEDGE;
author:Gary Tully
-------------------------------------------------------------------------------
commit:a3578eb
/////////////////////////////////////////////////////////////////////////
1:             } else if (transactionManager != null) {
1:                 // cmt or transactionManager managed
1:                 transacted = false;
1:                 if (ackMode == Session.SESSION_TRANSACTED) {
1:                     ackMode = Session.AUTO_ACKNOWLEDGE;
1:                 }
commit:628a0cd
/////////////////////////////////////////////////////////////////////////
1:                 session.setIsXa(true);
/////////////////////////////////////////////////////////////////////////
0:                 session.setIsXa(false);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a34fbb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final TransactionManager transactionManager;
/////////////////////////////////////////////////////////////////////////
0:         @Override
0:         @Override
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.commons.pool.ObjectPoolFactory;
1: 
1:  *
0:     public XaConnectionPool(ActiveMQConnection connection, TransactionManager transactionManager) {
1:         super(connection);
1:     /**
0:      * @deprecated
1:      */
0:     public XaConnectionPool(ActiveMQConnection connection, ObjectPoolFactory poolFactory, TransactionManager transactionManager) {
0:         this(connection, transactionManager);
1:     }
1: 
0:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d1aeb04
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.commons.pool.ObjectPoolFactory;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:                 session.setIgnoreClose(false);
/////////////////////////////////////////////////////////////////////////
0:                 session.setIgnoreClose(true);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9a1f9c2
/////////////////////////////////////////////////////////////////////////
1:         return session.getXAResource();
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.SystemException;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.commons.pool.ObjectPoolFactory;
1: 
1: /**
0:  * An XA-aware connection pool.  When a session is created and an xa transaction is active,
0:  * the session will automatically be enlisted in the current transaction.
1:  * 
0:  * @author gnodet
1:  */
1: public class XaConnectionPool extends ConnectionPool {
1: 
0:     private TransactionManager transactionManager;
1: 
0:     public XaConnectionPool(ActiveMQConnection connection, ObjectPoolFactory poolFactory, TransactionManager transactionManager) {
0:         super(connection, poolFactory);
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
1:         try {
1:             boolean isXa = (transactionManager != null && transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION);
1:             if (isXa) {
0:                 transacted = true;
0:                 ackMode = Session.SESSION_TRANSACTED;
1:             }
1:             PooledSession session = (PooledSession) super.createSession(transacted, ackMode);
1:             if (isXa) {
0:                 session.setIgnoreClose(true);
1:                 transactionManager.getTransaction().registerSynchronization(new Synchronization(session));
1:                 incrementReferenceCount();
1:                 transactionManager.getTransaction().enlistResource(createXaResource(session));
1:             }
1:             return session;
1:         } catch (RollbackException e) {
1:             final JMSException jmsException = new JMSException("Rollback Exception");
1:             jmsException.initCause(e);
1:             throw jmsException;
1:         } catch (SystemException e) {
1:             final JMSException jmsException = new JMSException("System Exception");
1:             jmsException.initCause(e);
1:             throw jmsException;
1:         }
1:     }
1: 
1:     protected XAResource createXaResource(PooledSession session) throws JMSException {
0:         return session.getSession().getTransactionContext();
1:     }
1:     
1:     
1:     protected class Synchronization implements javax.transaction.Synchronization {
1:         private final PooledSession session;
1: 
1:         private Synchronization(PooledSession session) {
1:             this.session = session;
1:         }
1: 
1:         public void beforeCompletion() {
1:         }
1:         
1:         public void afterCompletion(int status) {
1:             try {
1:                 // This will return session to the pool.
1:                 session.setIgnoreClose(false);
1:                 session.close();
1:                 decrementReferenceCount();
1:             } catch (JMSException e) {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
1:     
1: }
============================================================================