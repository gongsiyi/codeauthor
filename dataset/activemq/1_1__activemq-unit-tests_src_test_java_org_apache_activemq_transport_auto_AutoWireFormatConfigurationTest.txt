1:9ab9488: /**
1:9ab9488:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9ab9488:  * contributor license agreements.  See the NOTICE file distributed with
1:9ab9488:  * this work for additional information regarding copyright ownership.
1:9ab9488:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9ab9488:  * (the "License"); you may not use this file except in compliance with
1:9ab9488:  * the License.  You may obtain a copy of the License at
1:9ab9488:  *
1:9ab9488:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ab9488:  *
1:9ab9488:  * Unless required by applicable law or agreed to in writing, software
1:9ab9488:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ab9488:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ab9488:  * See the License for the specific language governing permissions and
1:9ab9488:  * limitations under the License.
1:9ab9488:  */
1:9ab9488: package org.apache.activemq.transport.auto;
1:9ab9488: 
1:9ab9488: import static org.junit.Assert.assertEquals;
1:9ab9488: 
1:9ab9488: import java.util.Arrays;
1:9ab9488: import java.util.Collection;
1:9ab9488: 
1:9ab9488: import org.apache.activemq.ActiveMQConnectionFactory;
1:9ab9488: import org.apache.activemq.broker.BrokerService;
1:9ab9488: import org.apache.activemq.broker.TransportConnection;
1:9ab9488: import org.apache.activemq.broker.TransportConnector;
1:9ab9488: import org.apache.activemq.openwire.OpenWireFormat;
1:9ab9488: import org.junit.After;
1:9ab9488: import org.junit.Before;
1:9ab9488: import org.junit.Test;
1:9ab9488: import org.junit.runner.RunWith;
1:9ab9488: import org.junit.runners.Parameterized;
1:9ab9488: import org.junit.runners.Parameterized.Parameters;
1:9ab9488: 
1:9ab9488: @RunWith(Parameterized.class)
1:9ab9488: public class AutoWireFormatConfigurationTest {
1:9ab9488: 
1:9ab9488:     public static final String KEYSTORE_TYPE = "jks";
1:9ab9488:     public static final String PASSWORD = "password";
1:9ab9488:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:9ab9488:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:9ab9488: 
1:9ab9488:     private String uri;
1:9ab9488:     private final String protocol;
1:9ab9488:     private BrokerService brokerService;
1:9ab9488:     //Use the scheme for applying wireformat options or apply to all wireformats if false
1:9ab9488:     private final boolean onlyScheme;
1:9ab9488: 
1:9ab9488:     @Parameters(name="protocol={0},onlyScheme={1}")
1:9ab9488:     public static Collection<Object[]> data() {
1:9ab9488:         return Arrays.asList(new Object[][] {
1:9ab9488:                 {"auto", true},
1:9ab9488:                 {"auto+nio", true},
1:9ab9488:                 {"auto+nio+ssl", true},
1:9ab9488:                 {"auto+ssl", true},
1:9ab9488:                 {"auto", false},
1:9ab9488:                 {"auto+nio", false},
1:9ab9488:                 {"auto+nio+ssl", false},
1:9ab9488:                 {"auto+ssl", false}
1:9ab9488:             });
1:9ab9488:     }
1:9ab9488: 
1:9ab9488:     static {
1:9ab9488:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:9ab9488:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:9ab9488:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:9ab9488:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:9ab9488:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:9ab9488:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:9ab9488:     }
1:9ab9488: 
1:9ab9488:     @Before
1:9ab9488:     public void before() throws Exception {
1:9ab9488:         BrokerService brokerService = new BrokerService();
1:9ab9488:         brokerService.setPersistent(false);
1:9ab9488: 
1:9ab9488:         String wireFormatSetting = onlyScheme ?
1:9ab9488:                 "wireFormat.default.cacheEnabled=false" : "wireFormat.cacheEnabled=false";
1:9ab9488:         TransportConnector connector =
1:9ab9488:                 brokerService.addConnector(protocol + "://localhost:0?" + wireFormatSetting);
1:9ab9488:         connector.setName("auto");
1:9ab9488: 
1:9ab9488:         uri = connector.getPublishableConnectString();
1:9ab9488: 
1:9ab9488:         this.brokerService = brokerService;
1:9ab9488:         brokerService.start();
1:9ab9488:         brokerService.waitUntilStarted();
1:9ab9488:     }
1:9ab9488: 
1:9ab9488:     @After
1:9ab9488:     public void after() throws Exception {
1:9ab9488:         if (brokerService != null) {
1:9ab9488:             brokerService.stop();
1:9ab9488:             brokerService.waitUntilStopped();
1:9ab9488:         }
1:9ab9488:     }
1:9ab9488: 
1:9ab9488:     /**
1:9ab9488:      * @param isNio
1:9ab9488:      */
1:9ab9488:     public AutoWireFormatConfigurationTest(String protocol, boolean onlyScheme) {
1:9ab9488:         this.protocol = protocol;
1:9ab9488:         this.onlyScheme = onlyScheme;
1:9ab9488:     }
1:9ab9488: 
1:9ab9488:     @Test(timeout = 10000)
1:9ab9488:     public void testConnect() throws Exception {
1:9ab9488:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:9ab9488:         factory.setBrokerURL(uri);
1:9ab9488: 
1:9ab9488:         //Create 5 connections to make sure all are properly set
1:9ab9488:         for (int i = 0; i < 5; i++) {
1:9ab9488:             factory.createConnection().start();
1:9ab9488:         }
1:9ab9488: 
1:9ab9488:         for (TransportConnection connection : brokerService.getTransportConnectorByName("auto").getConnections()) {
1:9ab9488:             //Cache should be disabled on the wire format
1:9ab9488:             OpenWireFormat wireFormat = (OpenWireFormat) connection.getTransport().getWireFormat();
1:9ab9488:             assertEquals(false, wireFormat.isCacheEnabled());
1:9ab9488:         }
1:9ab9488:     }
1:9ab9488: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9ab9488
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.auto;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class AutoWireFormatConfigurationTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     private String uri;
1:     private final String protocol;
1:     private BrokerService brokerService;
1:     //Use the scheme for applying wireformat options or apply to all wireformats if false
1:     private final boolean onlyScheme;
1: 
1:     @Parameters(name="protocol={0},onlyScheme={1}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto", true},
1:                 {"auto+nio", true},
1:                 {"auto+nio+ssl", true},
1:                 {"auto+ssl", true},
1:                 {"auto", false},
1:                 {"auto+nio", false},
1:                 {"auto+nio+ssl", false},
1:                 {"auto+ssl", false}
1:             });
1:     }
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1: 
1:         String wireFormatSetting = onlyScheme ?
1:                 "wireFormat.default.cacheEnabled=false" : "wireFormat.cacheEnabled=false";
1:         TransportConnector connector =
1:                 brokerService.addConnector(protocol + "://localhost:0?" + wireFormatSetting);
1:         connector.setName("auto");
1: 
1:         uri = connector.getPublishableConnectString();
1: 
1:         this.brokerService = brokerService;
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * @param isNio
1:      */
1:     public AutoWireFormatConfigurationTest(String protocol, boolean onlyScheme) {
1:         this.protocol = protocol;
1:         this.onlyScheme = onlyScheme;
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConnect() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:         factory.setBrokerURL(uri);
1: 
1:         //Create 5 connections to make sure all are properly set
1:         for (int i = 0; i < 5; i++) {
1:             factory.createConnection().start();
1:         }
1: 
1:         for (TransportConnection connection : brokerService.getTransportConnectorByName("auto").getConnections()) {
1:             //Cache should be disabled on the wire format
1:             OpenWireFormat wireFormat = (OpenWireFormat) connection.getTransport().getWireFormat();
1:             assertEquals(false, wireFormat.isCacheEnabled());
1:         }
1:     }
1: }
============================================================================