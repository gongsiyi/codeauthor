1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
4:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.LinkedList;
1:d29ca2a: import java.util.List;
1:1a5ad28: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:d29ca2a: import org.apache.activemq.broker.region.Topic;
1:2748ae1: import org.apache.activemq.command.ActiveMQDestination;
1:2748ae1: import org.apache.activemq.command.Message;
1:2748ae1: import org.apache.activemq.filter.DestinationFilter;
1:d29ca2a: import org.apache.activemq.thread.Scheduler;
1:c1a0cd6: 
1:d29ca2a: /**
1:d29ca2a:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a timed
1:d29ca2a:  * buffer of messages around in memory and use that to recover new
1:d29ca2a:  * subscriptions.
1:d29ca2a:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class TimedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:d29ca2a: 
1:d29ca2a:     private static final int GC_INTERVAL = 1000;
1:1a5ad28:     private Scheduler scheduler;
1:d29ca2a:     
1:d29ca2a:     // TODO: need to get a better synchronized linked list that has little
1:d29ca2a:     // contention between enqueuing and dequeuing
1:933eb2f:     private final List<TimestampWrapper> buffer = Collections.synchronizedList(new LinkedList<TimestampWrapper>());
1:d29ca2a:     private volatile long lastGCRun = System.currentTimeMillis();
1:d29ca2a: 
1:d29ca2a:     private long recoverDuration = 60 * 1000; // Buffer for 1 min.
1:d29ca2a: 
1:d29ca2a:     static class TimestampWrapper {
1:d29ca2a:         public MessageReference message;
1:d29ca2a:         public long timestamp;
1:d29ca2a: 
1:d29ca2a:         public TimestampWrapper(MessageReference message, long timestamp) {
1:d29ca2a:             this.message = message;
1:d29ca2a:             this.timestamp = timestamp;
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     private final Runnable gcTask = new Runnable() {
1:d29ca2a:         public void run() {
1:d29ca2a:             gc();
1:d29ca2a:         }
1:d29ca2a:     };
1:d29ca2a: 
1:c1a0cd6:     public SubscriptionRecoveryPolicy copy() {
1:c1a0cd6:         TimedSubscriptionRecoveryPolicy rc = new TimedSubscriptionRecoveryPolicy();
1:c1a0cd6:         rc.setRecoverDuration(recoverDuration);
1:c1a0cd6:         return rc;
1:c1a0cd6:     }
1:c1a0cd6: 
1:7f5213b:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
1:d29ca2a:         buffer.add(new TimestampWrapper(message, lastGCRun));
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:d29ca2a:         // Re-dispatch the messages from the buffer.
1:933eb2f:         ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer);
1:230a86c:         if (!copy.isEmpty()) {
1:933eb2f:             for (Iterator<TimestampWrapper> iter = copy.iterator(); iter.hasNext();) {
1:933eb2f:                 TimestampWrapper timestampWrapper = iter.next();
1:230a86c:                 MessageReference message = timestampWrapper.message;
1:230a86c:                 sub.addRecoveredMessage(context, message);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a:     
1:1a5ad28:     public void setBroker(Broker broker) {  
1:1a5ad28:         this.scheduler = broker.getScheduler();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:2b2b35e:         scheduler.executePeriodically(gcTask, GC_INTERVAL);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:2b2b35e:         scheduler.cancel(gcTask);
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a: 
1:d29ca2a:     public void gc() {
1:d29ca2a:         lastGCRun = System.currentTimeMillis();
1:d29ca2a:         while (buffer.size() > 0) {
1:933eb2f:             TimestampWrapper timestampWrapper = buffer.get(0);
1:230a86c:             if (lastGCRun > timestampWrapper.timestamp + recoverDuration) {
1:d29ca2a:                 // GC it.
1:d29ca2a:                 buffer.remove(0);
1:230a86c:             } else {
1:d29ca2a:                 break;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public long getRecoverDuration() {
1:d29ca2a:         return recoverDuration;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setRecoverDuration(long recoverDuration) {
1:d29ca2a:         this.recoverDuration = recoverDuration;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:933eb2f:         List<Message> result = new ArrayList<Message>();
1:933eb2f:         ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer);
1:230a86c:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:933eb2f:         for (Iterator<TimestampWrapper> iter = copy.iterator(); iter.hasNext();) {
1:933eb2f:             TimestampWrapper timestampWrapper = iter.next();
1:2748ae1:             MessageReference ref = timestampWrapper.message;
1:230a86c:             Message message = ref.getMessage();
1:230a86c:             if (filter.matches(message.getDestination())) {
1:2748ae1:                 result.add(message);
1:d29ca2a:             }
1:d29ca2a:         }
1:933eb2f:         return result.toArray(new Message[result.size()]);
1:d29ca2a:     }
1:d29ca2a: 
1:1a5ad28: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private final List<TimestampWrapper> buffer = Collections.synchronizedList(new LinkedList<TimestampWrapper>());
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer);
1:             for (Iterator<TimestampWrapper> iter = copy.iterator(); iter.hasNext();) {
1:                 TimestampWrapper timestampWrapper = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             TimestampWrapper timestampWrapper = buffer.get(0);
/////////////////////////////////////////////////////////////////////////
1:         List<Message> result = new ArrayList<Message>();
1:         ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer);
1:         for (Iterator<TimestampWrapper> iter = copy.iterator(); iter.hasNext();) {
1:             TimestampWrapper timestampWrapper = iter.next();
1:         return result.toArray(new Message[result.size()]);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
0:         ArrayList copy = new ArrayList(buffer);
1:         if (!copy.isEmpty()) {
0:             MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
0:             for (Iterator iter = copy.iterator(); iter.hasNext();) {
0:                 TimestampWrapper timestampWrapper = (TimestampWrapper)iter.next();
1:                 MessageReference message = timestampWrapper.message;
1:                 sub.addRecoveredMessage(context, message);
/////////////////////////////////////////////////////////////////////////
0:             TimestampWrapper timestampWrapper = (TimestampWrapper)buffer.get(0);
1:             if (lastGCRun > timestampWrapper.timestamp + recoverDuration) {
1:             } else {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
0:             TimestampWrapper timestampWrapper = (TimestampWrapper)iter.next();
1:             Message message = ref.getMessage();
1:             if (filter.matches(message.getDestination())) {
0:         return (Message[])result.toArray(new Message[result.size()]);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c1a0cd6
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public SubscriptionRecoveryPolicy copy() {
1:         TimedSubscriptionRecoveryPolicy rc = new TimedSubscriptionRecoveryPolicy();
1:         rc.setRecoverDuration(recoverDuration);
1:         return rc;
1:     }
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public Message[] browse(ActiveMQDestination destination) throws Exception{
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.thread.Scheduler;
1: 
1: /**
1:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a timed
1:  * buffer of messages around in memory and use that to recover new
1:  * subscriptions.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class TimedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
1:     private static final int GC_INTERVAL = 1000;
1: 
1:     // TODO: need to get a better synchronized linked list that has little
1:     // contention between enqueuing and dequeuing
0:     private final List buffer = Collections.synchronizedList(new LinkedList());
1:     private volatile long lastGCRun = System.currentTimeMillis();
1: 
1:     private long recoverDuration = 60 * 1000; // Buffer for 1 min.
1: 
1:     static class TimestampWrapper {
1:         public MessageReference message;
1:         public long timestamp;
1: 
1:         public TimestampWrapper(MessageReference message, long timestamp) {
1:             this.message = message;
1:             this.timestamp = timestamp;
1:         }
1:     }
1:     
1:     private final Runnable gcTask = new Runnable() {
1:         public void run() {
1:             gc();
1:         }
1:     };
1: 
0:     public boolean add(ConnectionContext context, MessageReference message) throws Throwable {
1:         buffer.add(new TimestampWrapper(message, lastGCRun));
1:         return true;
1:     }
1: 
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Throwable {
1:         
1:         // Re-dispatch the messages from the buffer.
0:         ArrayList copy = new ArrayList(buffer);
1: 
0:         if (!copy.isEmpty()) {
0:             MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
0:             try {
0:                 for (Iterator iter = copy.iterator(); iter.hasNext();) {
0:                     TimestampWrapper timestampWrapper = (TimestampWrapper) iter.next();
0:                     MessageReference message = timestampWrapper.message;
0:                     msgContext.setDestination(message.getRegionDestination().getActiveMQDestination());
0:                     msgContext.setMessageReference(message);
0:                     if (sub.matches(message, msgContext)) {
0:                         sub.add(timestampWrapper.message);
1:                     }
1:                 }
0:             }finally {
0:                 msgContext.clear();
1:             }
1:         }
1:     }
1: 
1:     public void start() throws Exception {
0:         Scheduler.executePeriodically(gcTask, GC_INTERVAL);
1:     }
1: 
1:     public void stop() throws Exception {
0:         Scheduler.cancel(gcTask);
1:     }
1: 
1:     public void gc() {
1:         lastGCRun = System.currentTimeMillis();
1:         while (buffer.size() > 0) {
0:             TimestampWrapper timestampWrapper = (TimestampWrapper) buffer.get(0);
0:             if( lastGCRun > timestampWrapper.timestamp+recoverDuration ) {
1:                 // GC it.
1:                 buffer.remove(0);
1:             }
0:             else {
1:                 break;
1:             }
1:         }
1:     }
1: 
1:     public long getRecoverDuration() {
1:         return recoverDuration;
1:     }
1: 
1:     public void setRecoverDuration(long recoverDuration) {
1:         this.recoverDuration = recoverDuration;
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private Scheduler scheduler;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setBroker(Broker broker) {  
1:         this.scheduler = broker.getScheduler();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     
commit:a110604
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
/////////////////////////////////////////////////////////////////////////
0:     public void recover(ConnectionContext context,Topic topic,SubscriptionRecovery sub) throws Exception{
0:         ArrayList copy=new ArrayList(buffer);
0:         if(!copy.isEmpty()){
0:             MessageEvaluationContext msgContext=context.getMessageEvaluationContext();
0:             for(Iterator iter=copy.iterator();iter.hasNext();){
0:                 TimestampWrapper timestampWrapper=(TimestampWrapper)iter.next();
0:                 MessageReference message=timestampWrapper.message;
0:                 sub.addRecoveredMessage(context,message);
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationFilter;
0: import org.apache.activemq.filter.MessageEvaluationContext;
0: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Message[] browse(ActiveMQDestination destination) throws Throwable{
0:         List result = new ArrayList();
0:         ArrayList copy = new ArrayList(buffer);
0:         DestinationFilter filter=DestinationFilter.parseFilter(destination);
0:         for (Iterator iter = copy.iterator(); iter.hasNext();) {
0:             TimestampWrapper timestampWrapper = (TimestampWrapper) iter.next();
1:             MessageReference ref = timestampWrapper.message;
0:             Message message=ref.getMessage();
0:             if (filter.matches(message.getDestination())){
1:                 result.add(message);
0:             }
0:         }
0:         return (Message[]) result.toArray(new Message[result.size()]);
0:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2b2b35e
/////////////////////////////////////////////////////////////////////////
0:     protected static final Scheduler scheduler = Scheduler.getInstance();
0:     
/////////////////////////////////////////////////////////////////////////
1:         scheduler.executePeriodically(gcTask, GC_INTERVAL);
1:         scheduler.cancel(gcTask);
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.Iterator;
0: import java.util.LinkedList;
0: import java.util.List;
0: 
============================================================================