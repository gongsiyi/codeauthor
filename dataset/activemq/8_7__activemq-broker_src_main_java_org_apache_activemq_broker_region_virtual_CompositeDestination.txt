1:5096463: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f55edcf:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f55edcf:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
2:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region.virtual;
5:da67a38: 
1:da67a38: import java.util.Collection;
1:da67a38: 
1:d17eceb: import org.apache.activemq.broker.Broker;
1:d17eceb: import org.apache.activemq.broker.ConnectionContext;
1:74a7a8b: import org.apache.activemq.broker.region.Destination;
1:d17eceb: import org.apache.activemq.command.ActiveMQDestination;
1:f55edcf: import org.apache.activemq.command.CommandTypes;
1:74a7a8b: 
1:da67a38: public abstract class CompositeDestination implements VirtualDestination {
1:5096463: 
1:da67a38:     private String name;
1:4ae7e1c:     private Collection forwardTo;
1:da67a38:     private boolean forwardOnly = true;
1:08bb172:     private boolean concurrentSend = false;
1:da67a38: 
1:f55edcf:     @Override
1:da67a38:     public Destination intercept(Destination destination) {
1:5096463:         return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isConcurrentSend());
1:da67a38:     }
1:f55edcf: 
1:f55edcf:     @Override
1:d17eceb:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) {
1:d17eceb:     }
1:16f2d75: 
1:f55edcf:     @Override
1:f55edcf:     public void remove(Destination destination) {
1:16f2d75:     }
1:16f2d75: 
1:da67a38:     public String getName() {
1:da67a38:         return name;
1:da67a38:     }
1:da67a38: 
1:08bb172:     /**
1:da67a38:      * Sets the name of this composite destination
1:da67a38:      */
1:da67a38:     public void setName(String name) {
1:da67a38:         this.name = name;
1:da67a38:     }
1:08bb172: 
1:4ae7e1c:     public Collection getForwardTo() {
1:4ae7e1c:         return forwardTo;
1:da67a38:     }
1:da67a38: 
3:da67a38:     /**
1:da67a38:      * Sets the list of destinations to forward to
1:da67a38:      */
1:4ae7e1c:     public void setForwardTo(Collection forwardDestinations) {
1:4ae7e1c:         this.forwardTo = forwardDestinations;
1:da67a38:     }
1:da67a38: 
1:da67a38:     public boolean isForwardOnly() {
1:da67a38:         return forwardOnly;
1:da67a38:     }
1:da67a38: 
1:da67a38:     /**
1:da67a38:      * Sets if the virtual destination is forward only (and so there is no
1:da67a38:      * physical queue to match the virtual queue) or if there is also a physical
1:da67a38:      * queue with the same name).
1:da67a38:      */
1:da67a38:     public void setForwardOnly(boolean forwardOnly) {
1:da67a38:         this.forwardOnly = forwardOnly;
1:da67a38:     }
1:4ae7e1c: 
1:5096463:     @Deprecated
1:4ae7e1c:     public boolean isCopyMessage() {
1:5096463:         return true;
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     /**
1:4ae7e1c:      * Sets whether a copy of the message will be sent to each destination.
1:4ae7e1c:      * Defaults to true so that the forward destination is set as the
1:4ae7e1c:      * destination of the message
1:5096463:      *
1:5096463:      * @deprecated this option will be removed in a later release, message are always copied.
1:4ae7e1c:      */
1:5096463:     @Deprecated
1:4ae7e1c:     public void setCopyMessage(boolean copyMessage) {
1:4ae7e1c:     }
1:4ae7e1c: 
1:da67a38:     /**
1:08bb172:      * when true, sends are done in parallel with the broker executor
1:08bb172:      */
1:08bb172:     public void setConcurrentSend(boolean concurrentSend) {
1:08bb172:         this.concurrentSend = concurrentSend;
1:08bb172:     }
1:08bb172: 
1:08bb172:     public boolean isConcurrentSend() {
1:08bb172:         return this.concurrentSend;
1:08bb172:     }
1:f55edcf: 
1:f55edcf:     @Override
1:f55edcf:     public ActiveMQDestination getMappedDestinations() {
1:f55edcf:         final ActiveMQDestination[] destinations = new ActiveMQDestination[forwardTo.size()];
1:f55edcf:         int i = 0;
1:f55edcf:         for (Object dest : forwardTo) {
1:f55edcf:             if (dest instanceof FilteredDestination) {
1:f55edcf:                 FilteredDestination filteredDestination = (FilteredDestination) dest;
1:f55edcf:                 destinations[i++] = filteredDestination.getDestination();
1:f55edcf:             } else if (dest instanceof ActiveMQDestination) {
1:f55edcf:                 destinations[i++] = (ActiveMQDestination) dest;
1:f55edcf:             } else {
1:f55edcf:                 // highly unlikely, but just in case!
1:f55edcf:                 throw new IllegalArgumentException("Unknown mapped destination type " + dest);
1:f55edcf:             }
1:f55edcf:         }
1:f55edcf: 
1:f55edcf:         // used just for matching destination paths
1:f55edcf:         return new ActiveMQDestination(destinations) {
1:f55edcf:             @Override
1:f55edcf:             protected String getQualifiedPrefix() {
1:f55edcf:                 return "mapped://";
1:f55edcf:             }
1:f55edcf: 
1:f55edcf:             @Override
1:f55edcf:             public byte getDestinationType() {
1:f55edcf:                 return QUEUE_TYPE | TOPIC_TYPE;
1:f55edcf:             }
1:f55edcf: 
1:f55edcf:             @Override
1:f55edcf:             public byte getDataStructureType() {
1:f55edcf:                 return CommandTypes.ACTIVEMQ_QUEUE | CommandTypes.ACTIVEMQ_TOPIC;
1:f55edcf:             }
1:f55edcf:         };
1:f55edcf:     }
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public int hashCode() {
1:cc81680:         final int prime = 31;
1:cc81680:         int result = 1;
1:cc81680:         result = prime * result + (concurrentSend ? 1231 : 1237);
1:cc81680:         result = prime * result + (forwardOnly ? 1231 : 1237);
1:5096463:         result = prime * result + ((forwardTo == null) ? 0 : forwardTo.hashCode());
1:cc81680:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1:cc81680:         return result;
1:cc81680:     }
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public boolean equals(Object obj) {
1:5096463:         if (this == obj) {
1:cc81680:             return true;
1:5096463:         }
1:5096463: 
1:5096463:         if (obj == null) {
2:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:5096463:         if (getClass() != obj.getClass()) {
1:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:cc81680:         CompositeDestination other = (CompositeDestination) obj;
1:5096463:         if (concurrentSend != other.concurrentSend) {
1:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:5096463:         if (forwardOnly != other.forwardOnly) {
1:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:cc81680:         if (forwardTo == null) {
1:5096463:             if (other.forwardTo != null) {
1:cc81680:                 return false;
1:5096463:             }
1:5096463:         } else if (!forwardTo.equals(other.forwardTo)) {
1:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:cc81680:         if (name == null) {
1:cc81680:             if (other.name != null)
1:cc81680:                 return false;
1:5096463:         } else if (!name.equals(other.name)) {
1:cc81680:             return false;
1:5096463:         }
1:5096463: 
1:cc81680:         return true;
1:cc81680:     }
1:da67a38: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5096463
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: 
1:         return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isConcurrentSend());
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:         return true;
1:      *
1:      * @deprecated this option will be removed in a later release, message are always copied.
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         result = prime * result + ((forwardTo == null) ? 0 : forwardTo.hashCode());
1:         if (this == obj) {
1:         }
1: 
1:         if (obj == null) {
1:         }
1: 
1:         if (getClass() != obj.getClass()) {
1:         }
1: 
1:         if (concurrentSend != other.concurrentSend) {
1:         }
1: 
1:         if (forwardOnly != other.forwardOnly) {
1:         }
1: 
1:             if (other.forwardTo != null) {
1:             }
1:         } else if (!forwardTo.equals(other.forwardTo)) {
1:         }
1: 
1:         } else if (!name.equals(other.name)) {
1:         }
1: 
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.CommandTypes;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:     @Override
1:     @Override
1:     public void remove(Destination destination) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ActiveMQDestination getMappedDestinations() {
1: 
1:         final ActiveMQDestination[] destinations = new ActiveMQDestination[forwardTo.size()];
1:         int i = 0;
1:         for (Object dest : forwardTo) {
1:             if (dest instanceof FilteredDestination) {
1:                 FilteredDestination filteredDestination = (FilteredDestination) dest;
1:                 destinations[i++] = filteredDestination.getDestination();
1:             } else if (dest instanceof ActiveMQDestination) {
1:                 destinations[i++] = (ActiveMQDestination) dest;
1:             } else {
1:                 // highly unlikely, but just in case!
1:                 throw new IllegalArgumentException("Unknown mapped destination type " + dest);
1:             }
1:         }
1: 
1:         // used just for matching destination paths
1:         return new ActiveMQDestination(destinations) {
1:             @Override
1:             protected String getQualifiedPrefix() {
1:                 return "mapped://";
1:             }
1: 
1:             @Override
1:             public byte getDestinationType() {
1:                 return QUEUE_TYPE | TOPIC_TYPE;
1:             }
1: 
1:             @Override
1:             public byte getDataStructureType() {
1:                 return CommandTypes.ACTIVEMQ_QUEUE | CommandTypes.ACTIVEMQ_TOPIC;
1:             }
1:         };
1:     }
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:1ccd177
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + (concurrentSend ? 1231 : 1237);
0:         result = prime * result + (copyMessage ? 1231 : 1237);
1:         result = prime * result + (forwardOnly ? 1231 : 1237);
0:         result = prime * result
0:                 + ((forwardTo == null) ? 0 : forwardTo.hashCode());
1:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
0:         if (this == obj)
1:             return true;
0:         if (obj == null)
1:             return false;
0:         if (getClass() != obj.getClass())
1:             return false;
1:         CompositeDestination other = (CompositeDestination) obj;
0:         if (concurrentSend != other.concurrentSend)
1:             return false;
0:         if (copyMessage != other.copyMessage)
1:             return false;
0:         if (forwardOnly != other.forwardOnly)
1:             return false;
1:         if (forwardTo == null) {
0:             if (other.forwardTo != null)
1:                 return false;
0:         } else if (!forwardTo.equals(other.forwardTo))
1:             return false;
1:         if (name == null) {
1:             if (other.name != null)
1:                 return false;
0:         } else if (!name.equals(other.name))
1:             return false;
1:         return true;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:08bb172
/////////////////////////////////////////////////////////////////////////
1:     private boolean concurrentSend = false;
0:         return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isCopyMessage(), isConcurrentSend());
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * when true, sends are done in parallel with the broker executor
1:      */
1:     public void setConcurrentSend(boolean concurrentSend) {
1:         this.concurrentSend = concurrentSend;
1:     }
1: 
1:     public boolean isConcurrentSend() {
1:         return this.concurrentSend;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) {
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1:     
1: 
0:     public void remove(Destination destination) {        
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:42b768a
/////////////////////////////////////////////////////////////////////////
0:         return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isCopyMessage());
commit:4ae7e1c
/////////////////////////////////////////////////////////////////////////
1:     private Collection forwardTo;
0:     private boolean copyMessage = true;
0:         return new CompositeDestinationInterceptor(destination, getForwardTo(), isForwardOnly(), isCopyMessage());
/////////////////////////////////////////////////////////////////////////
1:     public Collection getForwardTo() {
1:         return forwardTo;
1:     public void setForwardTo(Collection forwardDestinations) {
1:         this.forwardTo = forwardDestinations;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isCopyMessage() {
0:         return copyMessage;
1:     }
1: 
1:     /**
1:      * Sets whether a copy of the message will be sent to each destination.
1:      * Defaults to true so that the forward destination is set as the
1:      * destination of the message
1:      */
1:     public void setCopyMessage(boolean copyMessage) {
0:         this.copyMessage = copyMessage;
1:     }
1: 
commit:da67a38
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
0: import org.apache.activemq.broker.region.Destination;
1: 
1: import java.util.Collection;
1: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public abstract class CompositeDestination implements VirtualDestination {
1: 
1:     private String name;
0:     private Collection forwardDestinations;
1:     private boolean forwardOnly = true;
1: 
1:     public Destination intercept(Destination destination) {
0:         return new CompositeDestinationInterceptor(destination, getForwardDestinations(), isForwardOnly());
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * Sets the name of this composite destination
1:      */
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
0:     public Collection getForwardDestinations() {
0:         return forwardDestinations;
1:     }
1: 
1:     /**
1:      * Sets the list of destinations to forward to
1:      */
0:     public void setForwardDestinations(Collection forwardDestinations) {
0:         this.forwardDestinations = forwardDestinations;
1:     }
1: 
1:     public boolean isForwardOnly() {
1:         return forwardOnly;
1:     }
1: 
1:     /**
1:      * Sets if the virtual destination is forward only (and so there is no
1:      * physical queue to match the virtual queue) or if there is also a physical
1:      * queue with the same name).
1:      */
1:     public void setForwardOnly(boolean forwardOnly) {
1:         this.forwardOnly = forwardOnly;
1:     }
1: }
============================================================================