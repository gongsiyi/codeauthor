1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:d29ca2a: 
1:6f68a94: import java.util.Set;
1:d29ca2a: import org.apache.activemq.command.Message;
1:6f68a94: import org.apache.activemq.jaas.UserPrincipal;
1:6f68a94: import org.apache.activemq.security.SecurityContext;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * This broker filter will append the producer's user ID into the JMSXUserID header
1:d29ca2a:  * to allow folks to know reliably who the user was who produced a message.
1:d29ca2a:  * Note that you cannot trust the client, especially if working over the internet
1:d29ca2a:  * as they can spoof headers to be anything they like.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class UserIDBroker extends BrokerFilter {
1:6f68a94:     boolean useAuthenticatePrincipal = false;
1:d29ca2a:     public UserIDBroker(Broker next) {
1:d29ca2a:         super(next);
1:d29ca2a:     }
1:d29ca2a: 
1:84eb9f8:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:84eb9f8:         final ConnectionContext context = producerExchange.getConnectionContext();
1:d29ca2a:         String userID = context.getUserName();
1:6f68a94:         if (isUseAuthenticatePrincipal()) {
1:6f68a94:             SecurityContext securityContext = context.getSecurityContext();
1:6f68a94:             if (securityContext != null) {
1:6f68a94:                 Set<?> principals = securityContext.getPrincipals();
1:6f68a94:                 if (principals != null) {
1:6f68a94:                     for (Object candidate : principals) {
1:6f68a94:                         if (candidate instanceof UserPrincipal) {
1:6f68a94:                             userID = ((UserPrincipal)candidate).getName();
1:6f68a94:                             break;
1:6f68a94:                         }
1:6f68a94:                     }
1:6f68a94:                 }
1:6f68a94:             }
1:6f68a94:         }
1:d29ca2a:         messageSend.setUserID(userID);
1:84eb9f8:         super.send(producerExchange, messageSend);
1:d29ca2a:     }
1:d29ca2a: 
2:6f68a94: 
1:6f68a94:     public boolean isUseAuthenticatePrincipal() {
1:6f68a94:         return useAuthenticatePrincipal;
1:d29ca2a:     }
1:6f68a94: 
1:6f68a94:     public void setUseAuthenticatePrincipal(boolean useAuthenticatePrincipal) {
1:6f68a94:         this.useAuthenticatePrincipal = useAuthenticatePrincipal;
1:6f68a94:     }
1:6f68a94: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.command.Message;
1: 
1: /**
1:  * This broker filter will append the producer's user ID into the JMSXUserID header
1:  * to allow folks to know reliably who the user was who produced a message.
1:  * Note that you cannot trust the client, especially if working over the internet
1:  * as they can spoof headers to be anything they like.
1:  * 
0:  * @version $Revision: 1.8 $
1:  */
1: public class UserIDBroker extends BrokerFilter {
1:     
1:     public UserIDBroker(Broker next) {
1:         super(next);
1:     }
1: 
0:     public void send(ConnectionContext context, Message messageSend) throws Throwable {
1:         String userID = context.getUserName();
1:         messageSend.setUserID(userID);
0:         super.send(context, messageSend);
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:6f68a94
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import org.apache.activemq.jaas.UserPrincipal;
1: import org.apache.activemq.security.SecurityContext;
/////////////////////////////////////////////////////////////////////////
1:     boolean useAuthenticatePrincipal = false;
/////////////////////////////////////////////////////////////////////////
1:         if (isUseAuthenticatePrincipal()) {
1:             SecurityContext securityContext = context.getSecurityContext();
1:             if (securityContext != null) {
1:                 Set<?> principals = securityContext.getPrincipals();
1:                 if (principals != null) {
1:                     for (Object candidate : principals) {
1:                         if (candidate instanceof UserPrincipal) {
1:                             userID = ((UserPrincipal)candidate).getName();
1:                             break;
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1: 
1: 
1:     public boolean isUseAuthenticatePrincipal() {
1:         return useAuthenticatePrincipal;
1:     }
1: 
1:     public void setUseAuthenticatePrincipal(boolean useAuthenticatePrincipal) {
1:         this.useAuthenticatePrincipal = useAuthenticatePrincipal;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         final ConnectionContext context = producerExchange.getConnectionContext();
1:         super.send(producerExchange, messageSend);
============================================================================