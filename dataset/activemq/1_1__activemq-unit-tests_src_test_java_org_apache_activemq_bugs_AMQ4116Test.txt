1:849baa6: /**
1:849baa6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:849baa6:  * contributor license agreements.  See the NOTICE file distributed with
1:849baa6:  * this work for additional information regarding copyright ownership.
1:849baa6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:849baa6:  * (the "License"); you may not use this file except in compliance with
1:849baa6:  * the License.  You may obtain a copy of the License at
1:849baa6:  *
1:849baa6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:849baa6:  *
1:849baa6:  * Unless required by applicable law or agreed to in writing, software
1:849baa6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:849baa6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:849baa6:  * See the License for the specific language governing permissions and
1:849baa6:  * limitations under the License.
1:849baa6:  */
1:849baa6: 
1:849baa6: package org.apache.activemq.bugs;
1:849baa6: 
1:849baa6: import javax.jms.Connection;
1:849baa6: import javax.jms.ConnectionFactory;
1:849baa6: import javax.jms.Message;
1:849baa6: import javax.jms.MessageConsumer;
1:849baa6: import javax.jms.MessageProducer;
1:849baa6: import javax.jms.Session;
1:849baa6: 
1:849baa6: import org.apache.activemq.ActiveMQConnectionFactory;
1:849baa6: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:849baa6: import org.apache.activemq.broker.BrokerService;
1:849baa6: import org.apache.activemq.broker.region.Destination;
1:849baa6: import org.apache.activemq.command.ActiveMQMessage;
1:849baa6: import org.apache.activemq.command.ActiveMQQueue;
1:849baa6: import org.junit.Assert;
1:849baa6: 
1:849baa6: public class AMQ4116Test extends EmbeddedBrokerTestSupport {
1:849baa6: 
1:849baa6:     private final String tcpAddr = "tcp://localhost:0";
1:849baa6:     private String connectionUri;
1:849baa6: 
1:849baa6:     /**
1:849baa6:      * In this test, a message is produced and consumed from the test queue.
1:849baa6:      * Memory usage on the test queue should be reset to 0. The memory that was
1:849baa6:      * consumed is then sent to a second queue. Memory usage on the original
1:849baa6:      * test queue should remain 0, but actually increased when the second
1:849baa6:      * enqueue occurs.
1:849baa6:      */
1:849baa6:     public void testVMTransport() throws Exception {
1:849baa6:         runTest(connectionFactory);
1:849baa6:     }
1:849baa6: 
1:849baa6:     /**
1:849baa6:      * This is an analog to the previous test, but occurs over TCP and passes.
1:849baa6:      */
1:849baa6:     public void testTCPTransport() throws Exception {
1:849baa6:         runTest(new ActiveMQConnectionFactory(connectionUri));
1:849baa6:     }
1:849baa6: 
1:849baa6:     private void runTest(ConnectionFactory connFactory) throws Exception {
1:849baa6:         // Verify that test queue is empty and not using any memory.
1:849baa6:         Destination physicalDestination = broker.getDestination(destination);
1:849baa6:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1:849baa6: 
1:849baa6:         // Enqueue a single message and verify that the test queue is using
1:849baa6:         // memory.
1:849baa6:         Connection conn = connFactory.createConnection();
1:849baa6:         conn.start();
1:849baa6:         Session session = conn.createSession(true, Session.SESSION_TRANSACTED);
1:849baa6:         MessageProducer producer = session.createProducer(destination);
1:849baa6: 
1:849baa6:         producer.send(new ActiveMQMessage());
1:849baa6: 
1:849baa6:         // Commit, which ensures message is in queue and memory usage updated.
1:849baa6:         session.commit();
1:849baa6:         Assert.assertTrue(physicalDestination.getMemoryUsage().getUsage() > 0);
1:849baa6: 
1:849baa6:         // Consume the message and verify that the test queue is no longer using
1:849baa6:         // any memory.
1:849baa6:         MessageConsumer consumer = session.createConsumer(destination);
1:849baa6:         Message received = consumer.receive();
1:849baa6:         Assert.assertNotNull(received);
1:849baa6: 
1:849baa6:         // Commit, which ensures message is removed from queue and memory usage
1:849baa6:         // updated.
1:849baa6:         session.commit();
1:849baa6:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1:849baa6: 
1:849baa6:         // Resend the message to a different queue and verify that the original
1:849baa6:         // test queue is still not using any memory.
1:849baa6:         ActiveMQQueue secondDestination = new ActiveMQQueue(AMQ4116Test.class + ".second");
1:849baa6:         MessageProducer secondPproducer = session.createProducer(secondDestination);
1:849baa6: 
1:849baa6:         secondPproducer.send(received);
1:849baa6: 
1:849baa6:         // Commit, which ensures message is in queue and memory usage updated.
1:849baa6:         // NOTE: This assertion fails due to bug.
1:849baa6:         session.commit();
1:849baa6:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1:849baa6: 
1:849baa6:         conn.stop();
1:849baa6:     }
1:849baa6: 
1:849baa6:     /**
1:849baa6:      * Create an embedded broker that has both TCP and VM connectors.
1:849baa6:      */
1:849baa6:     @Override
1:849baa6:     protected BrokerService createBroker() throws Exception {
1:849baa6:         BrokerService broker = super.createBroker();
1:849baa6:         connectionUri = broker.addConnector(tcpAddr).getPublishableConnectString();
1:849baa6:         return broker;
1:849baa6:     }
1:849baa6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:849baa6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.Assert;
1: 
1: public class AMQ4116Test extends EmbeddedBrokerTestSupport {
1: 
1:     private final String tcpAddr = "tcp://localhost:0";
1:     private String connectionUri;
1: 
1:     /**
1:      * In this test, a message is produced and consumed from the test queue.
1:      * Memory usage on the test queue should be reset to 0. The memory that was
1:      * consumed is then sent to a second queue. Memory usage on the original
1:      * test queue should remain 0, but actually increased when the second
1:      * enqueue occurs.
1:      */
1:     public void testVMTransport() throws Exception {
1:         runTest(connectionFactory);
1:     }
1: 
1:     /**
1:      * This is an analog to the previous test, but occurs over TCP and passes.
1:      */
1:     public void testTCPTransport() throws Exception {
1:         runTest(new ActiveMQConnectionFactory(connectionUri));
1:     }
1: 
1:     private void runTest(ConnectionFactory connFactory) throws Exception {
1:         // Verify that test queue is empty and not using any memory.
1:         Destination physicalDestination = broker.getDestination(destination);
1:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1: 
1:         // Enqueue a single message and verify that the test queue is using
1:         // memory.
1:         Connection conn = connFactory.createConnection();
1:         conn.start();
1:         Session session = conn.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         producer.send(new ActiveMQMessage());
1: 
1:         // Commit, which ensures message is in queue and memory usage updated.
1:         session.commit();
1:         Assert.assertTrue(physicalDestination.getMemoryUsage().getUsage() > 0);
1: 
1:         // Consume the message and verify that the test queue is no longer using
1:         // any memory.
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message received = consumer.receive();
1:         Assert.assertNotNull(received);
1: 
1:         // Commit, which ensures message is removed from queue and memory usage
1:         // updated.
1:         session.commit();
1:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1: 
1:         // Resend the message to a different queue and verify that the original
1:         // test queue is still not using any memory.
1:         ActiveMQQueue secondDestination = new ActiveMQQueue(AMQ4116Test.class + ".second");
1:         MessageProducer secondPproducer = session.createProducer(secondDestination);
1: 
1:         secondPproducer.send(received);
1: 
1:         // Commit, which ensures message is in queue and memory usage updated.
1:         // NOTE: This assertion fails due to bug.
1:         session.commit();
1:         Assert.assertEquals(0, physicalDestination.getMemoryUsage().getUsage());
1: 
1:         conn.stop();
1:     }
1: 
1:     /**
1:      * Create an embedded broker that has both TCP and VM connectors.
1:      */
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         connectionUri = broker.addConnector(tcpAddr).getPublishableConnectString();
1:         return broker;
1:     }
1: }
============================================================================