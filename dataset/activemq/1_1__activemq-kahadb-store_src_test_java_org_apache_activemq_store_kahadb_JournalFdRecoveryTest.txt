1:d427952: /**
1:d427952:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d427952:  * contributor license agreements.  See the NOTICE file distributed with
1:d427952:  * this work for additional information regarding copyright ownership.
1:d427952:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d427952:  * (the "License"); you may not use this file except in compliance with
1:d427952:  * the License.  You may obtain a copy of the License at
1:d427952:  *
1:d427952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d427952:  *
1:d427952:  * Unless required by applicable law or agreed to in writing, software
1:d427952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d427952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d427952:  * See the License for the specific language governing permissions and
1:d427952:  * limitations under the License.
1:d427952:  */
1:d427952: package org.apache.activemq.store.kahadb;
6:d427952: 
1:d427952: import org.apache.activemq.ActiveMQConnectionFactory;
1:d427952: import org.apache.activemq.broker.BrokerService;
1:fcd9047: import org.apache.activemq.broker.region.RegionBroker;
1:6b8e743: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6b8e743: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d427952: import org.apache.activemq.command.ActiveMQQueue;
1:d427952: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1:d427952: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:d427952: import org.junit.After;
1:8c218ee: import org.junit.Before;
1:d427952: import org.junit.Test;
1:d427952: import org.slf4j.Logger;
1:d427952: import org.slf4j.LoggerFactory;
1:d427952: 
1:d427952: import javax.jms.Connection;
1:d427952: import javax.jms.Destination;
1:6b8e743: import javax.jms.JMSException;
1:d427952: import javax.jms.Message;
1:6b8e743: import javax.jms.MessageConsumer;
1:d427952: import javax.jms.MessageProducer;
1:d427952: import javax.jms.Session;
1:d427952: import javax.management.Attribute;
1:d427952: import javax.management.ObjectName;
1:d427952: import java.io.File;
1:d427952: import java.io.IOException;
1:8c218ee: import java.time.Duration;
1:8c218ee: import java.time.Instant;
1:d427952: import java.util.Collection;
1:6b8e743: import java.util.concurrent.CountDownLatch;
1:6b8e743: import java.util.concurrent.TimeUnit;
1:d427952: 
1:822e2be: import static org.apache.activemq.store.kahadb.JournalCorruptionEofIndexRecoveryTest.drain;
1:d427952: import static org.junit.Assert.assertEquals;
1:6b8e743: import static org.junit.Assert.assertNotEquals;
1:d427952: import static org.junit.Assert.assertTrue;
1:d427952: 
1:d427952: public class JournalFdRecoveryTest {
1:d427952: 
1:d427952:     private static final Logger LOG = LoggerFactory.getLogger(JournalFdRecoveryTest.class);
1:d427952: 
1:d427952:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
1:8c218ee:     private String payload;
1:d427952:     private ActiveMQConnectionFactory cf = null;
1:d427952:     private BrokerService broker = null;
1:d427952:     private final Destination destination = new ActiveMQQueue("Test");
1:d427952:     private String connectionUri;
1:d427952:     private KahaDBPersistenceAdapter adapter;
1:d427952: 
1:d427952:     public byte fill = Byte.valueOf("3");
1:8c218ee:     private int maxJournalSizeBytes;
1:d427952: 
1:d427952:     protected void startBroker() throws Exception {
1:d427952:         doStartBroker(true);
4:d427952:     }
1:fcd9047: 
1:d427952:     protected void restartBroker() throws Exception {
1:d427952:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1:d427952: 
1:d427952:         if (broker != null) {
1:d427952:             broker.stop();
1:d427952:             broker.waitUntilStopped();
1:d427952:         }
1:d427952: 
1:d427952:         whackIndex(dataDir);
1:d427952: 
1:d427952:         doStartBroker(false);
1:d427952:     }
1:d427952: 
1:d427952:     private void doStartBroker(boolean delete) throws Exception {
1:fcd9047:         doCreateBroker(delete);
1:fcd9047:         LOG.info("Starting broker..");
1:fcd9047:         broker.start();
1:fcd9047:     }
1:fcd9047: 
1:fcd9047:     private void doCreateBroker(boolean delete) throws Exception {
1:d427952:         broker = new BrokerService();
1:d427952:         broker.setDeleteAllMessagesOnStartup(delete);
1:d427952:         broker.setPersistent(true);
1:d427952:         broker.setUseJmx(true);
1:d427952:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:d427952:         broker.addConnector("tcp://localhost:0");
1:d427952: 
1:6b8e743:         PolicyMap policyMap = new PolicyMap();
1:6b8e743:         PolicyEntry policyEntry = new PolicyEntry();
1:6b8e743:         policyEntry.setUseCache(false);
1:6b8e743:         policyMap.setDefaultEntry(policyEntry);
1:6b8e743:         broker.setDestinationPolicy(policyMap);
1:6b8e743: 
1:d427952:         configurePersistence(broker);
1:d427952: 
1:d427952:         connectionUri = "vm://localhost?create=false";
1:d427952:         cf = new ActiveMQConnectionFactory(connectionUri);
1:d427952:     }
1:d427952: 
1:d427952:     protected void configurePersistence(BrokerService brokerService) throws Exception {
1:d427952:         adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1:d427952: 
1:d427952:         // ensure there are a bunch of data files but multiple entries in each
1:8c218ee:         adapter.setJournalMaxFileLength(maxJournalSizeBytes);
1:d427952: 
1:d427952:         // speed up the test case, checkpoint an cleanup early and often
1:d427952:         adapter.setCheckpointInterval(5000);
1:d427952:         adapter.setCleanupInterval(5000);
1:d427952: 
1:d427952:         adapter.setCheckForCorruptJournalFiles(true);
1:d427952:         adapter.setIgnoreMissingJournalfiles(true);
1:d427952: 
1:d427952:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL_ASYNC.name());
1:d427952:     }
1:d427952: 
1:d427952:     @After
1:d427952:     public void tearDown() throws Exception {
1:d427952:         if (broker != null) {
1:d427952:             broker.stop();
1:d427952:             broker.waitUntilStopped();
1:d427952:         }
1:d427952:     }
1:d427952: 
1:8c218ee:     @Before
1:8c218ee:     public void initPayLoad() {
1:8c218ee:         payload = new String(new byte[1024]);
1:8c218ee:         maxJournalSizeBytes = 1024 * 20;
1:8c218ee:     }
1:8c218ee: 
1:d427952: 
1:8c218ee:     @Test
1:6b8e743:     public void testStopOnPageInIOError() throws Exception {
1:6b8e743:         startBroker();
1:6b8e743: 
1:6b8e743:         int sent = produceMessagesToConsumeMultipleDataFiles(50);
1:6b8e743: 
1:6b8e743:         int numFiles = getNumberOfJournalFiles();
1:6b8e743:         LOG.info("Num journal files: " + numFiles);
1:6b8e743: 
1:6b8e743:         assertTrue("more than x files: " + numFiles, numFiles > 4);
1:6b8e743: 
1:6b8e743:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1:6b8e743: 
1:6b8e743:         for (int i=2;i<4;i++) {
1:6b8e743:             whackDataFile(dataDir, i);
1:6b8e743:         }
1:6b8e743: 
1:6b8e743:         final CountDownLatch gotShutdown = new CountDownLatch(1);
1:6b8e743:         broker.addShutdownHook(new Runnable() {
1:6b8e743:             @Override
1:6b8e743:             public void run() {
1:6b8e743:                 gotShutdown.countDown();
1:6b8e743:             }
1:6b8e743:         });
1:6b8e743: 
1:6b8e743:         int received = tryConsume(destination, sent);
1:6b8e743:         assertNotEquals("not all message received", sent, received);
1:6b8e743:         assertTrue("broker got shutdown on page in error", gotShutdown.await(5, TimeUnit.SECONDS));
1:6b8e743:     }
1:6b8e743: 
1:6b8e743:     private void whackDataFile(File dataDir, int i) throws Exception {
1:6b8e743:         whackFile(dataDir, "db-" + i + ".log");
1:6b8e743:     }
1:6b8e743: 
1:fcd9047:     @Test
1:d427952:     public void testRecoveryAfterCorruption() throws Exception {
1:d427952:         startBroker();
1:d427952: 
1:d427952:         produceMessagesToConsumeMultipleDataFiles(50);
1:d427952: 
1:d427952:         int numFiles = getNumberOfJournalFiles();
1:d427952:         LOG.info("Num journal files: " + numFiles);
1:d427952: 
1:d427952:         assertTrue("more than x files: " + numFiles, numFiles > 4);
1:d427952: 
1:d427952:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1:d427952: 
1:d427952:         if (broker != null) {
1:d427952:             broker.stop();
1:d427952:             broker.waitUntilStopped();
1:d427952:         }
1:d427952:         long afterStop = totalOpenFileDescriptorCount(broker);
1:d427952:         whackIndex(dataDir);
1:d427952: 
1:d427952:         LOG.info("Num Open files with broker stopped: " + afterStop);
1:d427952: 
1:d427952:         doStartBroker(false);
1:d427952: 
1:d427952:         LOG.info("Journal read pool: " + adapter.getStore().getJournal().getAccessorPool().size());
1:d427952: 
1:d427952:         assertEquals("one entry in the pool on start", 1, adapter.getStore().getJournal().getAccessorPool().size());
1:d427952: 
1:d427952:         long afterRecovery = totalOpenFileDescriptorCount(broker);
1:d427952:         LOG.info("Num Open files with broker recovered: " + afterRecovery);
1:d427952: 
1:d427952:     }
1:d427952: 
1:6b8e743:     @Test
1:fcd9047:     public void testRecoveryWithMissingMssagesWithValidAcks() throws Exception {
1:fcd9047: 
1:fcd9047:         doCreateBroker(true);
1:fcd9047:         adapter.setCheckpointInterval(50000);
1:fcd9047:         adapter.setCleanupInterval(50000);
1:fcd9047:         broker.start();
1:fcd9047: 
1:fcd9047:         int toSend = 50;
1:fcd9047:         produceMessagesToConsumeMultipleDataFiles(toSend);
1:fcd9047: 
1:fcd9047:         int numFiles = getNumberOfJournalFiles();
1:fcd9047:         LOG.info("Num files: " + numFiles);
1:fcd9047:         assertTrue("more than x files: " + numFiles, numFiles > 5);
1:fcd9047:         assertEquals("Drain", 30, tryConsume(destination, 30));
1:fcd9047: 
1:fcd9047:         LOG.info("Num files after stopped: " + getNumberOfJournalFiles());
1:fcd9047: 
1:fcd9047:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1:fcd9047:         broker.stop();
1:fcd9047:         broker.waitUntilStopped();
1:fcd9047: 
1:fcd9047:         whackDataFile(dataDir, 4);
1:fcd9047: 
1:fcd9047:         whackIndex(dataDir);
1:fcd9047: 
1:fcd9047:         doStartBroker(false);
1:fcd9047: 
1:fcd9047:         LOG.info("Num files after restarted: " + getNumberOfJournalFiles());
1:fcd9047: 
1:fcd9047:         assertEquals("Empty?", 18, tryConsume(destination, 20));
1:fcd9047: 
1:fcd9047:         assertEquals("no queue size ", 0l,  ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getMessages().getCount());
1:fcd9047: 
1:fcd9047:     }
1:fcd9047: 
1:d427952:     @Test
1:8c218ee:     public void testRecoveryCheckSpeedSmallMessages() throws Exception {
1:8c218ee:         maxJournalSizeBytes = Journal.DEFAULT_MAX_FILE_LENGTH;
1:8c218ee:         doCreateBroker(true);
1:8c218ee:         broker.start();
1:8c218ee: 
1:8c218ee:         int toSend = 20000;
1:8c218ee:         payload = new String(new byte[100]);
1:8c218ee:         produceMessagesToConsumeMultipleDataFiles(toSend);
1:8c218ee: 
1:8c218ee:         broker.stop();
1:8c218ee:         broker.waitUntilStopped();
1:8c218ee: 
1:8c218ee:         Instant b = Instant.now();
1:8c218ee:         doStartBroker(false);
1:8c218ee:         Instant e = Instant.now();
1:8c218ee: 
1:8c218ee:         Duration timeElapsed = Duration.between(b, e);
1:8c218ee:         LOG.info("Elapsed: " + timeElapsed);
1:8c218ee:     }
1:8c218ee: 
1:d427952:     private long totalOpenFileDescriptorCount(BrokerService broker) {
1:d427952:         long result = 0;
2:d427952:         try {
1:d427952:             javax.management.AttributeList list = broker.getManagementContext().getMBeanServer().getAttributes(new ObjectName("java.lang:type=OperatingSystem"), new String[]{"OpenFileDescriptorCount"});
1:d427952:             if (!list.isEmpty()) {
1:d427952:                 result = ((Long) ((Attribute) list.get(0)).getValue());
1:d427952:             }
1:d427952:         } catch (Exception ignored) {
1:d427952:         }
1:d427952: 
1:d427952:         return result;
1:d427952:     }
1:d427952: 
1:6b8e743:     private void whackIndex(File dataDir) throws Exception {
1:6b8e743:         whackFile(dataDir, "db.data");
1:6b8e743:     }
1:6b8e743: 
1:6b8e743:     private void whackFile(File dataDir, String name) throws Exception {
1:6b8e743:         File indexToDelete = new File(dataDir, name);
1:d427952:         LOG.info("Whacking index: " + indexToDelete);
1:d427952:         indexToDelete.delete();
1:d427952:     }
1:d427952: 
1:d427952:     private int getNumberOfJournalFiles() throws IOException {
1:d427952:         Collection<DataFile> files = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore().getJournal().getFileMap().values();
1:d427952:         int reality = 0;
1:d427952:         for (DataFile file : files) {
1:d427952:             if (file != null) {
1:d427952:                 reality++;
1:d427952:             }
1:d427952:         }
1:d427952:         return reality;
1:d427952:     }
1:d427952: 
1:d427952:     private int produceMessages(Destination destination, int numToSend) throws Exception {
1:d427952:         int sent = 0;
1:6b8e743:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:6b8e743:         connection.start();
1:6b8e743:         try {
1:6b8e743:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d427952:             MessageProducer producer = session.createProducer(destination);
1:d427952:             for (int i = 0; i < numToSend; i++) {
1:d427952:                 producer.send(createMessage(session, i));
1:d427952:                 sent++;
1:6b8e743:             }
1:6b8e743:         } finally {
1:6b8e743:             connection.close();
1:6b8e743:         }
1:6b8e743: 
1:d427952:         return sent;
1:6b8e743:     }
1:6b8e743: 
1:6b8e743:     private int tryConsume(Destination destination, int numToGet) throws Exception {
1:822e2be:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:822e2be:         return  drain(cf, destination, numToGet);
1:6b8e743:     }
1:6b8e743: 
1:d427952:     private int produceMessagesToConsumeMultipleDataFiles(int numToSend) throws Exception {
1:d427952:         return produceMessages(destination, numToSend);
1:d427952:     }
1:d427952: 
1:d427952:     private Message createMessage(Session session, int i) throws Exception {
1:d427952:         return session.createTextMessage(payload + "::" + i);
1:d427952:     }
1:d427952: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8c218ee
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1: import java.time.Duration;
1: import java.time.Instant;
/////////////////////////////////////////////////////////////////////////
1:     private String payload;
/////////////////////////////////////////////////////////////////////////
1:     private int maxJournalSizeBytes;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         adapter.setJournalMaxFileLength(maxJournalSizeBytes);
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void initPayLoad() {
1:         payload = new String(new byte[1024]);
1:         maxJournalSizeBytes = 1024 * 20;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRecoveryCheckSpeedSmallMessages() throws Exception {
1:         maxJournalSizeBytes = Journal.DEFAULT_MAX_FILE_LENGTH;
1:         doCreateBroker(true);
1:         broker.start();
1: 
1:         int toSend = 20000;
1:         payload = new String(new byte[100]);
1:         produceMessagesToConsumeMultipleDataFiles(toSend);
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         Instant b = Instant.now();
1:         doStartBroker(false);
1:         Instant e = Instant.now();
1: 
1:         Duration timeElapsed = Duration.between(b, e);
1:         LOG.info("Elapsed: " + timeElapsed);
1:     }
1: 
commit:fcd9047
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.RegionBroker;
/////////////////////////////////////////////////////////////////////////
1:         doCreateBroker(delete);
1:         LOG.info("Starting broker..");
1:         broker.start();
1:     }
1: 
1:     private void doCreateBroker(boolean delete) throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRecoveryWithMissingMssagesWithValidAcks() throws Exception {
1: 
1:         doCreateBroker(true);
1:         adapter.setCheckpointInterval(50000);
1:         adapter.setCleanupInterval(50000);
1:         broker.start();
1: 
1:         int toSend = 50;
1:         produceMessagesToConsumeMultipleDataFiles(toSend);
1: 
1:         int numFiles = getNumberOfJournalFiles();
1:         LOG.info("Num files: " + numFiles);
1:         assertTrue("more than x files: " + numFiles, numFiles > 5);
1:         assertEquals("Drain", 30, tryConsume(destination, 30));
1: 
1:         LOG.info("Num files after stopped: " + getNumberOfJournalFiles());
1: 
1:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         whackDataFile(dataDir, 4);
1: 
1:         whackIndex(dataDir);
1: 
1:         doStartBroker(false);
1: 
1:         LOG.info("Num files after restarted: " + getNumberOfJournalFiles());
1: 
1:         assertEquals("Empty?", 18, tryConsume(destination, 20));
1: 
1:         assertEquals("no queue size ", 0l,  ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getMessages().getCount());
1: 
1:     }
1: 
commit:822e2be
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.store.kahadb.JournalCorruptionEofIndexRecoveryTest.drain;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:         return  drain(cf, destination, numToGet);
commit:6b8e743
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import static org.junit.Assert.assertNotEquals;
/////////////////////////////////////////////////////////////////////////
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setUseCache(false);
1:         policyMap.setDefaultEntry(policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testStopOnPageInIOError() throws Exception {
1:         startBroker();
1: 
1:         int sent = produceMessagesToConsumeMultipleDataFiles(50);
1: 
1:         int numFiles = getNumberOfJournalFiles();
1:         LOG.info("Num journal files: " + numFiles);
1: 
1:         assertTrue("more than x files: " + numFiles, numFiles > 4);
1: 
1:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1: 
1:         for (int i=2;i<4;i++) {
1:             whackDataFile(dataDir, i);
1:         }
1: 
1:         final CountDownLatch gotShutdown = new CountDownLatch(1);
1:         broker.addShutdownHook(new Runnable() {
1:             @Override
1:             public void run() {
1:                 gotShutdown.countDown();
1:             }
1:         });
1: 
1:         int received = tryConsume(destination, sent);
1:         assertNotEquals("not all message received", sent, received);
1:         assertTrue("broker got shutdown on page in error", gotShutdown.await(5, TimeUnit.SECONDS));
1:     }
1: 
1:     private void whackDataFile(File dataDir, int i) throws Exception {
1:         whackFile(dataDir, "db-" + i + ".log");
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     private void whackIndex(File dataDir) throws Exception {
1:         whackFile(dataDir, "db.data");
1:     }
1: 
1:     private void whackFile(File dataDir, String name) throws Exception {
1:         File indexToDelete = new File(dataDir, name);
/////////////////////////////////////////////////////////////////////////
1:     private int tryConsume(Destination destination, int numToGet) throws Exception {
0:         int got = 0;
1:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             MessageConsumer consumer = session.createConsumer(destination);
0:             for (int i = 0; i < numToGet; i++) {
0:                 if (consumer.receive(4000) == null) {
0:                     // give up on timeout or error
0:                     break;
1:                 }
0:                 got++;
1: 
1:             }
0:         } catch (JMSException ok) {
1:         } finally {
1:             connection.close();
1:         }
1: 
0:         return got;
1:     }
1: 
commit:d427952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.Attribute;
1: import javax.management.ObjectName;
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class JournalFdRecoveryTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JournalFdRecoveryTest.class);
1: 
1:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
0:     private final String payload = new String(new byte[1024]);
1: 
1:     private ActiveMQConnectionFactory cf = null;
1:     private BrokerService broker = null;
1:     private final Destination destination = new ActiveMQQueue("Test");
1:     private String connectionUri;
1:     private KahaDBPersistenceAdapter adapter;
1: 
1:     public byte fill = Byte.valueOf("3");
1: 
1:     protected void startBroker() throws Exception {
1:         doStartBroker(true);
1:     }
1: 
1:     protected void restartBroker() throws Exception {
1:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1:         whackIndex(dataDir);
1: 
1:         doStartBroker(false);
1:     }
1: 
1:     private void doStartBroker(boolean delete) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(delete);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:         broker.addConnector("tcp://localhost:0");
1: 
1:         configurePersistence(broker);
1: 
1:         connectionUri = "vm://localhost?create=false";
1:         cf = new ActiveMQConnectionFactory(connectionUri);
1: 
0:         broker.start();
0:         LOG.info("Starting broker..");
1:     }
1: 
1:     protected void configurePersistence(BrokerService brokerService) throws Exception {
1:         adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1: 
1:         // ensure there are a bunch of data files but multiple entries in each
0:         adapter.setJournalMaxFileLength(1024 * 20);
1: 
1:         // speed up the test case, checkpoint an cleanup early and often
1:         adapter.setCheckpointInterval(5000);
1:         adapter.setCleanupInterval(5000);
1: 
1:         adapter.setCheckForCorruptJournalFiles(true);
1:         adapter.setIgnoreMissingJournalfiles(true);
1: 
1:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL_ASYNC.name());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1: 
1:     @Test
1:     public void testRecoveryAfterCorruption() throws Exception {
1:         startBroker();
1: 
1:         produceMessagesToConsumeMultipleDataFiles(50);
1: 
1:         int numFiles = getNumberOfJournalFiles();
1:         LOG.info("Num journal files: " + numFiles);
1: 
1:         assertTrue("more than x files: " + numFiles, numFiles > 4);
1: 
1:         File dataDir = broker.getPersistenceAdapter().getDirectory();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         long afterStop = totalOpenFileDescriptorCount(broker);
1:         whackIndex(dataDir);
1: 
1:         LOG.info("Num Open files with broker stopped: " + afterStop);
1: 
1:         doStartBroker(false);
1: 
1:         LOG.info("Journal read pool: " + adapter.getStore().getJournal().getAccessorPool().size());
1: 
1:         assertEquals("one entry in the pool on start", 1, adapter.getStore().getJournal().getAccessorPool().size());
1: 
1:         long afterRecovery = totalOpenFileDescriptorCount(broker);
1:         LOG.info("Num Open files with broker recovered: " + afterRecovery);
1: 
1:     }
1: 
1:     private long totalOpenFileDescriptorCount(BrokerService broker) {
1:         long result = 0;
1:         try {
1:             javax.management.AttributeList list = broker.getManagementContext().getMBeanServer().getAttributes(new ObjectName("java.lang:type=OperatingSystem"), new String[]{"OpenFileDescriptorCount"});
1:             if (!list.isEmpty()) {
1:                 result = ((Long) ((Attribute) list.get(0)).getValue());
1:             }
1:         } catch (Exception ignored) {
1:         }
1: 
1:         return result;
1:     }
1: 
0:     private void whackIndex(File dataDir) {
0:         File indexToDelete = new File(dataDir, "db.data");
1:         LOG.info("Whacking index: " + indexToDelete);
1:         indexToDelete.delete();
1:     }
1: 
1:     private int getNumberOfJournalFiles() throws IOException {
1:         Collection<DataFile> files = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore().getJournal().getFileMap().values();
1:         int reality = 0;
1:         for (DataFile file : files) {
1:             if (file != null) {
1:                 reality++;
1:             }
1:         }
1:         return reality;
1:     }
1: 
1:     private int produceMessages(Destination destination, int numToSend) throws Exception {
1:         int sent = 0;
0:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
0:         connection.start();
1:         try {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             for (int i = 0; i < numToSend; i++) {
1:                 producer.send(createMessage(session, i));
1:                 sent++;
1:             }
0:         } finally {
0:             connection.close();
1:         }
1: 
1:         return sent;
1:     }
1: 
1:     private int produceMessagesToConsumeMultipleDataFiles(int numToSend) throws Exception {
1:         return produceMessages(destination, numToSend);
1:     }
1: 
1:     private Message createMessage(Session session, int i) throws Exception {
1:         return session.createTextMessage(payload + "::" + i);
1:     }
1: }
============================================================================