1:4c38438: /**
1:4c38438:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c38438:  * contributor license agreements.  See the NOTICE file distributed with
1:4c38438:  * this work for additional information regarding copyright ownership.
1:4c38438:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c38438:  * (the "License"); you may not use this file except in compliance with
1:4c38438:  * the License.  You may obtain a copy of the License at
1:4c38438:  *
1:4c38438:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c38438:  *
1:4c38438:  * Unless required by applicable law or agreed to in writing, software
1:4c38438:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c38438:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c38438:  * See the License for the specific language governing permissions and
1:4c38438:  * limitations under the License.
1:4c38438:  */
1:4c38438: package org.apache.activemq.transport.mqtt;
2:4c38438: 
1:4c38438: import java.io.IOException;
1:4c38438: import java.net.Socket;
1:4c38438: import java.net.URI;
1:4c38438: import java.net.UnknownHostException;
1:4c38438: import java.nio.ByteBuffer;
1:4c38438: 
1:4c38438: import javax.net.SocketFactory;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:7c04ead: 
1:4c38438: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:4c38438: import org.apache.activemq.wireformat.WireFormat;
1:4c38438: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1:4c38438: 
1:4c38438: public class MQTTNIOSSLTransport extends NIOSSLTransport {
1:4c38438: 
1:7c04ead:     private MQTTCodec codec;
1:4c38438: 
1:4c38438:     public MQTTNIOSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:4c38438:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:4c38438:     }
1:4c38438: 
1:4c38438:     public MQTTNIOSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:04ee70a:         super(wireFormat, socket, null, null, null);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public MQTTNIOSSLTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
1:4c38438:     }
1:4c38438: 
1:4c38438:     @Override
1:4c38438:     protected void initializeStreams() throws IOException {
1:3454a8b:         codec = new MQTTCodec(this, (MQTTWireFormat) getWireFormat());
1:4c38438:         super.initializeStreams();
1:4c38438:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
1:4c38438:             serviceRead();
1:4c38438:         }
1:4c38438:     }
1:4c38438: 
1:4c38438:     @Override
1:4c38438:     protected void processCommand(ByteBuffer plain) throws Exception {
1:4c38438:         byte[] fill = new byte[plain.remaining()];
1:4c38438:         plain.get(fill);
1:4c38438:         DataByteArrayInputStream dis = new DataByteArrayInputStream(fill);
1:4c38438:         codec.parse(dis, fill.length);
1:4c38438:     }
1:04ee70a: 
1:04ee70a:     /* (non-Javadoc)
1:04ee70a:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#doInit()
1:04ee70a:      */
1:04ee70a:     @Override
1:04ee70a:     protected void doInit() throws Exception {
1:04ee70a:         if (initBuffer != null) {
1:04ee70a:             nextFrameSize = -1;
1:04ee70a:             receiveCounter += initBuffer.readSize;
1:04ee70a:             initBuffer.buffer.flip();
1:04ee70a:             processCommand(initBuffer.buffer);
1:04ee70a:         }
1:ed0e786:         super.doInit();
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:4c38438: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1:         super.doInit();
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLEngine;
/////////////////////////////////////////////////////////////////////////
1:         super(wireFormat, socket, null, null, null);
1:     }
1: 
1:     public MQTTNIOSSLTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#doInit()
1:      */
1:     @Override
1:     protected void doInit() throws Exception {
1:         if (initBuffer != null) {
1:             nextFrameSize = -1;
1:             receiveCounter += initBuffer.readSize;
1:             initBuffer.buffer.flip();
1:             processCommand(initBuffer.buffer);
1:         }
1:     }
1: 
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1:         codec = new MQTTCodec(this, (MQTTWireFormat) getWireFormat());
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1: 
1:     private MQTTCodec codec;
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Robert Davies
-------------------------------------------------------------------------------
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: 
1: import javax.net.SocketFactory;
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1: 
1: public class MQTTNIOSSLTransport extends NIOSSLTransport {
1: 
0:     MQTTCodec codec;
1: 
1:     public MQTTNIOSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1:     public MQTTNIOSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
0:         super(wireFormat, socket);
1:     }
1: 
1:     @Override
1:     protected void initializeStreams() throws IOException {
0:         codec = new MQTTCodec(this);
1:         super.initializeStreams();
1:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
1:             serviceRead();
1:         }
1:     }
1: 
1:     @Override
1:     protected void processCommand(ByteBuffer plain) throws Exception {
1:         byte[] fill = new byte[plain.remaining()];
1:         plain.get(fill);
1:         DataByteArrayInputStream dis = new DataByteArrayInputStream(fill);
1:         codec.parse(dis, fill.length);
1:     }
1: 
1: }
============================================================================