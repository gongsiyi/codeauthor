2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
7:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.QueueSession;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TopicSession;
1:d29ca2a: import javax.jms.TransactionInProgressException;
1:d29ca2a: import javax.jms.XAQueueSession;
1:d29ca2a: import javax.jms.XATopicSession;
1:d29ca2a: import javax.transaction.xa.XAResource;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.SessionId;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * The XASession interface extends the capability of Session by adding access
1:d29ca2a:  * to a JMS provider's support for the  Java Transaction API (JTA) (optional).
1:d29ca2a:  * This support takes the form of a javax.transaction.xa.XAResource object.
1:d29ca2a:  * The functionality of this object closely resembles that defined by the
1:d29ca2a:  * standard X/Open XA Resource interface.
1:d29ca2a:  * <p/>
1:d29ca2a:  * An application server controls the transactional assignment of an XASession
1:d29ca2a:  * by obtaining its XAResource. It uses the XAResource to assign the session
1:d29ca2a:  * to a transaction, prepare and commit work on the transaction, and so on.
1:d29ca2a:  * <p/>
1:d29ca2a:  * An XAResource provides some fairly sophisticated facilities for
1:d29ca2a:  * interleaving work on multiple transactions, recovering a list of
1:d29ca2a:  * transactions in progress, and so on. A JTA aware JMS provider must fully
1:d29ca2a:  * implement this functionality. This could be done by using the services of a
1:d29ca2a:  * database that supports XA, or a JMS provider may choose to implement this
1:d29ca2a:  * functionality from scratch.
1:d29ca2a:  * <p/>
1:d29ca2a:  * A client of the application server is given what it thinks is a regular
1:d29ca2a:  * JMS Session. Behind the scenes, the application server controls the
1:d29ca2a:  * transaction management of the underlying XASession.
1:d29ca2a:  * <p/>
1:d29ca2a:  * The XASession interface is optional. JMS providers are not required to
1:d29ca2a:  * support this interface. This interface is for use by JMS providers to
1:d29ca2a:  * support transactional environments. Client programs are strongly encouraged
1:d29ca2a:  * to use the transactional support  available in their environment, rather
1:d29ca2a:  * than use these XA  interfaces directly.
1:b0c2a40:  *
1:d29ca2a:  * 
1:d29ca2a:  * @see javax.jms.Session
1:d29ca2a:  * @see javax.jms.QueueSession
1:d29ca2a:  * @see javax.jms.TopicSession
1:d29ca2a:  * @see javax.jms.XASession
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQXASession extends ActiveMQSession implements QueueSession, TopicSession, XAQueueSession, XATopicSession {
1:d29ca2a: 
1:d29ca2a:     public ActiveMQXASession(ActiveMQXAConnection connection, SessionId sessionId, int theAcknowlegeMode, boolean dispatchAsync) throws JMSException {
1:d29ca2a:         super(connection, sessionId, theAcknowlegeMode, dispatchAsync);
10:d29ca2a:     }
1:50a98e3: 
1:d29ca2a:     public void rollback() throws JMSException {
2:885b8c9:         checkClosed();
1:d29ca2a:         throw new TransactionInProgressException("Cannot rollback() inside an XASession");
1:50a98e3:     }
1:d29ca2a: 
1:d29ca2a:     public void commit() throws JMSException {
1:885b8c9:         checkClosed();
1:d29ca2a:         throw new TransactionInProgressException("Cannot commit() inside an XASession");
1:50a98e3:     }
1:d29ca2a: 
1:d29ca2a:     public Session getSession() throws JMSException {
1:d29ca2a:         return this;
1:50a98e3:     }
1:d29ca2a: 
1:d29ca2a:     public XAResource getXAResource() {
1:d29ca2a:         return getTransactionContext();
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a:     public QueueSession getQueueSession() throws JMSException {
1:d29ca2a:         return new ActiveMQQueueSession(this);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TopicSession getTopicSession() throws JMSException {
1:d29ca2a:         return new ActiveMQTopicSession(this);
1:ab2cd11:     }
1:ab2cd11: 
1:d29ca2a:     protected void doStartTransaction() throws JMSException {
1:004be56:         if (acknowledgementMode != SESSION_TRANSACTED) {
1:004be56:             // ok once the factory XaAckMode has been explicitly set to allow use outside an XA tx
1:004be56:         } else if (!getTransactionContext().isInXATransaction()) {
1:004be56:             throw new JMSException("Session's XAResource has not been enlisted in a distributed transaction.");
1:004be56:         }
1:50a98e3:     }
1:50a98e3: 
1:50a98e3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (acknowledgementMode != SESSION_TRANSACTED) {
1:             // ok once the factory XaAckMode has been explicitly set to allow use outside an XA tx
1:         } else if (!getTransactionContext().isInXATransaction()) {
1:             throw new JMSException("Session's XAResource has not been enlisted in a distributed transaction.");
1:         }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Gary Tully
-------------------------------------------------------------------------------
commit:885b8c9
/////////////////////////////////////////////////////////////////////////
1:         checkClosed();
1:         checkClosed();
1:         checkClosed();
commit:ab2cd11
/////////////////////////////////////////////////////////////////////////
0:         return getTransactionContext().isInXATransaction();
/////////////////////////////////////////////////////////////////////////
0:     /*
0:      * when there is no XA transaction it is auto ack
0:     public boolean isAutoAcknowledge() {
0:       return true;
1:     }
1:     
0:         // allow non transactional auto ack work on an XASession
0:         // Seems ok by the spec that an XAConnection can be used without an XA tx
commit:50a98e3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transaction.Synchronization;
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void close() throws JMSException {
0:         if (getTransactionContext().isInXATransaction()) {
0:             getTransactionContext().addSynchronization(new Synchronization() {
0:                 public void afterCommit() throws Exception {
0:                     doClose();
1:                 }
1:                 
0:                 public void afterRollback() throws Exception {
0:                     doClose();
1:                 }
0:             });
1:         }
1:     }
1: 
0:     void doClose() throws JMSException {
0:         super.close();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TopicSession;
1: import javax.jms.TransactionInProgressException;
1: import javax.jms.XAQueueSession;
1: import javax.jms.XATopicSession;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.activemq.command.SessionId;
1: 
1: /**
1:  * The XASession interface extends the capability of Session by adding access
1:  * to a JMS provider's support for the  Java Transaction API (JTA) (optional).
1:  * This support takes the form of a javax.transaction.xa.XAResource object.
1:  * The functionality of this object closely resembles that defined by the
1:  * standard X/Open XA Resource interface.
1:  * <p/>
1:  * An application server controls the transactional assignment of an XASession
1:  * by obtaining its XAResource. It uses the XAResource to assign the session
1:  * to a transaction, prepare and commit work on the transaction, and so on.
1:  * <p/>
1:  * An XAResource provides some fairly sophisticated facilities for
1:  * interleaving work on multiple transactions, recovering a list of
1:  * transactions in progress, and so on. A JTA aware JMS provider must fully
1:  * implement this functionality. This could be done by using the services of a
1:  * database that supports XA, or a JMS provider may choose to implement this
1:  * functionality from scratch.
1:  * <p/>
1:  * A client of the application server is given what it thinks is a regular
1:  * JMS Session. Behind the scenes, the application server controls the
1:  * transaction management of the underlying XASession.
1:  * <p/>
1:  * The XASession interface is optional. JMS providers are not required to
1:  * support this interface. This interface is for use by JMS providers to
1:  * support transactional environments. Client programs are strongly encouraged
1:  * to use the transactional support  available in their environment, rather
1:  * than use these XA  interfaces directly.
1:  *
0:  * @version $Revision: 1.5 $
1:  * @see javax.jms.Session
1:  * @see javax.jms.QueueSession
1:  * @see javax.jms.TopicSession
1:  * @see javax.jms.XASession
1:  */
1: public class ActiveMQXASession extends ActiveMQSession implements QueueSession, TopicSession, XAQueueSession, XATopicSession {
1: 
1:     public ActiveMQXASession(ActiveMQXAConnection connection, SessionId sessionId, int theAcknowlegeMode, boolean dispatchAsync) throws JMSException {
1:         super(connection, sessionId, theAcknowlegeMode, dispatchAsync);
1:     }
1: 
0:     public boolean getTransacted() throws JMSException {
0:         return true;
1:     }
1: 
1:     public void rollback() throws JMSException {
1:         throw new TransactionInProgressException("Cannot rollback() inside an XASession");
1:     }
1: 
1:     public void commit() throws JMSException {
1:         throw new TransactionInProgressException("Cannot commit() inside an XASession");
1:     }
1: 
1:     public Session getSession() throws JMSException {
1:         return this;
1:     }
1: 
1:     public XAResource getXAResource() {
1:         return getTransactionContext();
1:     }
1: 
1:     public QueueSession getQueueSession() throws JMSException {
1:         return new ActiveMQQueueSession(this);
1:     }
1: 
1:     public TopicSession getTopicSession() throws JMSException {
1:         return new ActiveMQTopicSession(this);
1:     }
1: 
1:     /**
0:      * This is called before transacted work is done by
0:      * the session.  XA Work can only be done when this
0:      * XA resource is associated with an Xid.
1:      *
0:      * @throws JMSException not associated with an Xid
1:      */
1:     protected void doStartTransaction() throws JMSException {
1: 
0:         if (!getTransactionContext().isInXATransaction()) {
0:             throw new JMSException("Session's XAResource has not been enlisted in a distributed transaction.");
1:         }
1: 
1:     }
1: 
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:2387612
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================