1:c360c3e: /**
1:c360c3e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c360c3e:  * contributor license agreements.  See the NOTICE file distributed with
1:c360c3e:  * this work for additional information regarding copyright ownership.
1:c360c3e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c360c3e:  * (the "License"); you may not use this file except in compliance with
1:c360c3e:  * the License.  You may obtain a copy of the License at
1:c360c3e:  *
1:c360c3e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c360c3e:  *
1:c360c3e:  * Unless required by applicable law or agreed to in writing, software
1:c360c3e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c360c3e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c360c3e:  * See the License for the specific language governing permissions and
1:c360c3e:  * limitations under the License.
1:c360c3e:  */
1:c360c3e: package org.apache.activemq.transport.stomp;
1:c360c3e: 
1:c360c3e: import static org.junit.Assert.assertEquals;
1:c360c3e: import static org.junit.Assert.assertFalse;
1:c360c3e: import static org.junit.Assert.assertTrue;
1:c360c3e: 
1:c360c3e: import java.util.Arrays;
1:c360c3e: import java.util.UUID;
1:c360c3e: 
1:c360c3e: import org.apache.activemq.command.ActiveMQDestination;
1:c360c3e: import org.junit.Before;
1:c360c3e: import org.junit.Test;
1:c360c3e: import org.mockito.Mockito;
1:c360c3e: import org.mockito.invocation.InvocationOnMock;
1:c360c3e: import org.mockito.stubbing.Answer;
1:c360c3e: 
1:c360c3e: /**
1:c360c3e:  * Tests for conversion capabilities of LegacyFrameTranslator
1:c360c3e:  */
1:c360c3e: public class LegacyFrameTranslatorTest {
1:c360c3e: 
1:c360c3e:     private ProtocolConverter converter;
1:c360c3e:     private LegacyFrameTranslator translator;
1:c360c3e: 
1:c360c3e:     @Before
1:c360c3e:     public void setUp() {
1:c360c3e:         converter = Mockito.mock(ProtocolConverter.class);
1:c360c3e: 
1:c360c3e:         // Stub out a temp destination creation
1:c360c3e:         Mockito.when(converter.createTempDestination(Mockito.anyString(), Mockito.anyBoolean())).thenAnswer(new Answer<ActiveMQDestination>() {
1:c360c3e: 
1:c360c3e:             @Override
1:c360c3e:             public ActiveMQDestination answer(InvocationOnMock invocation) throws Throwable {
1:c360c3e: 
1:c360c3e:                 String name = invocation.getArgumentAt(0, String.class);
1:c360c3e:                 boolean topic = invocation.getArgumentAt(1, Boolean.class);
1:c360c3e: 
1:c360c3e:                 name = "temp-" + (topic ? "topic://" : "queue://X:") + UUID.randomUUID().toString();
1:c360c3e: 
1:c360c3e:                 return ActiveMQDestination.createDestination(name, ActiveMQDestination.QUEUE_TYPE);
1:c360c3e:             }
1:c360c3e:         });
1:c360c3e: 
1:c360c3e:         translator = new LegacyFrameTranslator();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertQueue() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/queue/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals("test", destination.getPhysicalName());
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertTopic() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/topic/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals("test", destination.getPhysicalName());
1:c360c3e:         assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertTemporaryQueue() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/temp-queue/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertTemporaryTopic() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/temp-topic/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertRemoteTempQueue() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/remote-temp-queue/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals("test", destination.getPhysicalName());
1:c360c3e:         assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertRemoteTempTopic() throws Exception {
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, "/remote-temp-topic/test", false);
1:c360c3e: 
1:c360c3e:         assertFalse(destination.isComposite());
1:c360c3e:         assertEquals("test", destination.getPhysicalName());
1:c360c3e:         assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertCompositeQueues() throws Exception {
1:c360c3e:         String destinationA = "destinationA";
1:c360c3e:         String destinationB = "destinationB";
1:c360c3e: 
1:c360c3e:         String composite = "/queue/" + destinationA + ",/queue/" + destinationB;
1:c360c3e: 
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:         assertTrue(destination.isComposite());
1:c360c3e:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:c360c3e:         assertEquals(2, composites.length);
1:c360c3e: 
1:c360c3e:         Arrays.sort(composites);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType());
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[1].getDestinationType());
1:c360c3e: 
1:c360c3e:         assertEquals(destinationA, composites[0].getPhysicalName());
1:c360c3e:         assertEquals(destinationB, composites[1].getPhysicalName());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertCompositeTopics() throws Exception {
1:c360c3e:         String destinationA = "destinationA";
1:c360c3e:         String destinationB = "destinationB";
1:c360c3e: 
1:c360c3e:         String composite = "/topic/" + destinationA + ",/topic/" + destinationB;
1:c360c3e: 
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType());
1:c360c3e:         assertTrue(destination.isComposite());
1:c360c3e:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:c360c3e:         assertEquals(2, composites.length);
1:c360c3e: 
1:c360c3e:         Arrays.sort(composites);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[0].getDestinationType());
1:c360c3e:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType());
1:c360c3e: 
1:c360c3e:         assertEquals(destinationA, composites[0].getPhysicalName());
1:c360c3e:         assertEquals(destinationB, composites[1].getPhysicalName());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertCompositeQueueAndTopic() throws Exception {
1:c360c3e:         String destinationA = "destinationA";
1:c360c3e:         String destinationB = "destinationB";
1:c360c3e: 
1:c360c3e:         String composite = "/queue/" + destinationA + ",/topic/" + destinationB;
1:c360c3e: 
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:         assertTrue(destination.isComposite());
1:c360c3e:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:c360c3e:         assertEquals(2, composites.length);
1:c360c3e: 
1:c360c3e:         Arrays.sort(composites);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType());
1:c360c3e:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType());
1:c360c3e: 
1:c360c3e:         assertEquals(destinationA, composites[0].getPhysicalName());
1:c360c3e:         assertEquals(destinationB, composites[1].getPhysicalName());
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 10000)
1:c360c3e:     public void testConvertCompositeMixture() throws Exception {
1:c360c3e:         String destinationA = "destinationA";
1:c360c3e:         String destinationB = "destinationB";
1:c360c3e:         String destinationC = "destinationC";
1:c360c3e:         String destinationD = "destinationD";
1:c360c3e: 
1:c360c3e:         String composite = "/queue/" + destinationA + ",/topic/" + destinationB +
1:c360c3e:                            ",/temp-queue/" + destinationC + ",/temp-topic/" + destinationD;
1:c360c3e: 
1:c360c3e:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1:c360c3e: 
1:c360c3e:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:c360c3e:         assertTrue(destination.isComposite());
1:c360c3e:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:c360c3e:         assertEquals(4, composites.length);
1:c360c3e: 
1:c360c3e:         Arrays.sort(composites);
1:c360c3e: 
1:c360c3e:         boolean foundQueue = false;
1:c360c3e:         boolean foundTopic = false;
1:c360c3e:         boolean foundTempTopic = false;
1:c360c3e:         boolean foundTempQueue = false;
1:c360c3e: 
1:c360c3e:         for (ActiveMQDestination dest : composites) {
1:c360c3e:             if (dest.getDestinationType() == ActiveMQDestination.QUEUE_TYPE) {
1:c360c3e:                 foundQueue = true;
1:c360c3e:             } else if (dest.getDestinationType() == ActiveMQDestination.TOPIC_TYPE) {
1:c360c3e:                 foundTopic = true;
1:c360c3e:             } else if (dest.getDestinationType() == ActiveMQDestination.TEMP_TOPIC_TYPE) {
1:c360c3e:                 foundTempTopic = true;
1:c360c3e:             } else if (dest.getDestinationType() == ActiveMQDestination.TEMP_QUEUE_TYPE) {
1:c360c3e:                 foundTempQueue = true;
1:c360c3e:             }
1:c360c3e:         }
1:c360c3e: 
1:c360c3e:         assertTrue(foundQueue);
1:c360c3e:         assertTrue(foundTopic);
1:c360c3e:         assertTrue(foundTempTopic);
1:c360c3e:         assertTrue(foundTempQueue);
1:c360c3e:     }
1:c360c3e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c360c3e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.UUID;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: import org.mockito.invocation.InvocationOnMock;
1: import org.mockito.stubbing.Answer;
1: 
1: /**
1:  * Tests for conversion capabilities of LegacyFrameTranslator
1:  */
1: public class LegacyFrameTranslatorTest {
1: 
1:     private ProtocolConverter converter;
1:     private LegacyFrameTranslator translator;
1: 
1:     @Before
1:     public void setUp() {
1:         converter = Mockito.mock(ProtocolConverter.class);
1: 
1:         // Stub out a temp destination creation
1:         Mockito.when(converter.createTempDestination(Mockito.anyString(), Mockito.anyBoolean())).thenAnswer(new Answer<ActiveMQDestination>() {
1: 
1:             @Override
1:             public ActiveMQDestination answer(InvocationOnMock invocation) throws Throwable {
1: 
1:                 String name = invocation.getArgumentAt(0, String.class);
1:                 boolean topic = invocation.getArgumentAt(1, Boolean.class);
1: 
1:                 name = "temp-" + (topic ? "topic://" : "queue://X:") + UUID.randomUUID().toString();
1: 
1:                 return ActiveMQDestination.createDestination(name, ActiveMQDestination.QUEUE_TYPE);
1:             }
1:         });
1: 
1:         translator = new LegacyFrameTranslator();
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertQueue() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/queue/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals("test", destination.getPhysicalName());
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertTopic() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/topic/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals("test", destination.getPhysicalName());
1:         assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertTemporaryQueue() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/temp-queue/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertTemporaryTopic() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/temp-topic/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertRemoteTempQueue() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/remote-temp-queue/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals("test", destination.getPhysicalName());
1:         assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertRemoteTempTopic() throws Exception {
1:         ActiveMQDestination destination = translator.convertDestination(converter, "/remote-temp-topic/test", false);
1: 
1:         assertFalse(destination.isComposite());
1:         assertEquals("test", destination.getPhysicalName());
1:         assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertCompositeQueues() throws Exception {
1:         String destinationA = "destinationA";
1:         String destinationB = "destinationB";
1: 
1:         String composite = "/queue/" + destinationA + ",/queue/" + destinationB;
1: 
1:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1: 
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:         assertTrue(destination.isComposite());
1:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:         assertEquals(2, composites.length);
1: 
1:         Arrays.sort(composites);
1: 
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType());
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[1].getDestinationType());
1: 
1:         assertEquals(destinationA, composites[0].getPhysicalName());
1:         assertEquals(destinationB, composites[1].getPhysicalName());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertCompositeTopics() throws Exception {
1:         String destinationA = "destinationA";
1:         String destinationB = "destinationB";
1: 
1:         String composite = "/topic/" + destinationA + ",/topic/" + destinationB;
1: 
1:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1: 
1:         assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType());
1:         assertTrue(destination.isComposite());
1:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:         assertEquals(2, composites.length);
1: 
1:         Arrays.sort(composites);
1: 
1:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[0].getDestinationType());
1:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType());
1: 
1:         assertEquals(destinationA, composites[0].getPhysicalName());
1:         assertEquals(destinationB, composites[1].getPhysicalName());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertCompositeQueueAndTopic() throws Exception {
1:         String destinationA = "destinationA";
1:         String destinationB = "destinationB";
1: 
1:         String composite = "/queue/" + destinationA + ",/topic/" + destinationB;
1: 
1:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1: 
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:         assertTrue(destination.isComposite());
1:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:         assertEquals(2, composites.length);
1: 
1:         Arrays.sort(composites);
1: 
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType());
1:         assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType());
1: 
1:         assertEquals(destinationA, composites[0].getPhysicalName());
1:         assertEquals(destinationB, composites[1].getPhysicalName());
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testConvertCompositeMixture() throws Exception {
1:         String destinationA = "destinationA";
1:         String destinationB = "destinationB";
1:         String destinationC = "destinationC";
1:         String destinationD = "destinationD";
1: 
1:         String composite = "/queue/" + destinationA + ",/topic/" + destinationB +
1:                            ",/temp-queue/" + destinationC + ",/temp-topic/" + destinationD;
1: 
1:         ActiveMQDestination destination = translator.convertDestination(converter, composite, false);
1: 
1:         assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
1:         assertTrue(destination.isComposite());
1:         ActiveMQDestination[] composites = destination.getCompositeDestinations();
1:         assertEquals(4, composites.length);
1: 
1:         Arrays.sort(composites);
1: 
1:         boolean foundQueue = false;
1:         boolean foundTopic = false;
1:         boolean foundTempTopic = false;
1:         boolean foundTempQueue = false;
1: 
1:         for (ActiveMQDestination dest : composites) {
1:             if (dest.getDestinationType() == ActiveMQDestination.QUEUE_TYPE) {
1:                 foundQueue = true;
1:             } else if (dest.getDestinationType() == ActiveMQDestination.TOPIC_TYPE) {
1:                 foundTopic = true;
1:             } else if (dest.getDestinationType() == ActiveMQDestination.TEMP_TOPIC_TYPE) {
1:                 foundTempTopic = true;
1:             } else if (dest.getDestinationType() == ActiveMQDestination.TEMP_QUEUE_TYPE) {
1:                 foundTempQueue = true;
1:             }
1:         }
1: 
1:         assertTrue(foundQueue);
1:         assertTrue(foundTopic);
1:         assertTrue(foundTempTopic);
1:         assertTrue(foundTempQueue);
1:     }
1: }
============================================================================