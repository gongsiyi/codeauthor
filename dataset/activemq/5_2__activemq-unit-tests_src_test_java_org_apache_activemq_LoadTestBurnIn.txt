1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:230a86c: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:230a86c: import java.util.concurrent.CountDownLatch;
1:230a86c: import java.util.concurrent.TimeUnit;
15:d29ca2a: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * Small burn test moves sends a moderate amount of messages through the broker,
1:230a86c:  * to checking to make sure that the broker does not lock up after a while of
1:230a86c:  * sustained messaging.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class LoadTestBurnIn extends JmsTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(LoadTestBurnIn.class);
1:230a86c: 
1:933eb2f:     public ActiveMQDestination destination;
1:933eb2f:     public int deliveryMode;
1:933eb2f:     public byte destinationType;
1:933eb2f:     public boolean durableConsumer;
1:933eb2f:     public int messageCount = 50000;
1:933eb2f:     public int messageSize = 1024;
1:933eb2f: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(LoadTestBurnIn.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:fc00993:         LOG.info("Start: " + getName());
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         try {
1:d29ca2a:             super.tearDown();
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:             e.printStackTrace(System.out);
1:d29ca2a:         } finally {
1:fc00993:             LOG.info("End: " + getName());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         return BrokerFactory.createBroker(new URI("broker://(tcp://localhost:0)?useJmx=true"));
1:230a86c:         // return BrokerFactory.createBroker(new
1:230a86c:         // URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
1:f812e34:         return new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0))
1:f812e34:             .getServer().getConnectURI());
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void initCombosForTestSendReceive() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT),
1:f812e34:                                                            Integer.valueOf(DeliveryMode.PERSISTENT)});
1:f812e34:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
1:f812e34:         addCombinationValues("durableConsumer", new Object[] {Boolean.TRUE});
1:f812e34:         addCombinationValues("messageSize", new Object[] {Integer.valueOf(101), Integer.valueOf(102),
1:f812e34:                                                           Integer.valueOf(103), Integer.valueOf(104),
1:f812e34:                                                           Integer.valueOf(105), Integer.valueOf(106),
1:f812e34:                                                           Integer.valueOf(107), Integer.valueOf(108)});
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testSendReceive() throws Exception {
1:d29ca2a: 
1:230a86c:         // Durable consumer combination is only valid with topics
1:f812e34:         if (durableConsumer && destinationType != ActiveMQDestination.TOPIC_TYPE) {
1:d29ca2a:             return;
1:f812e34:         }
1:230a86c: 
1:d29ca2a:         connection.setClientID(getName());
1:d29ca2a:         connection.getPrefetchPolicy().setAll(1000);
1:d29ca2a:         connection.start();
1:d29ca2a: 
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer;
1:230a86c:         if (durableConsumer) {
1:f812e34:             consumer = session.createDurableSubscriber((Topic)destination, "sub1:"
1:f812e34:                                                                            + System.currentTimeMillis());
1:d29ca2a:         } else {
1:d29ca2a:             consumer = session.createConsumer(destination);
1:d29ca2a:         }
1:d29ca2a:         profilerPause("Ready: ");
1:230a86c: 
1:d29ca2a:         final CountDownLatch producerDoneLatch = new CountDownLatch(1);
1:230a86c: 
1:d29ca2a:         // Send the messages, async
1:d29ca2a:         new Thread() {
1:d29ca2a:             public void run() {
1:230a86c:                 Connection connection2 = null;
1:d29ca2a:                 try {
1:d29ca2a:                     connection2 = factory.createConnection();
1:d29ca2a:                     Session session = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:                     MessageProducer producer = session.createProducer(destination);
1:d29ca2a:                     producer.setDeliveryMode(deliveryMode);
1:d29ca2a:                     for (int i = 0; i < messageCount; i++) {
1:230a86c:                         BytesMessage m = session.createBytesMessage();
1:230a86c:                         m.writeBytes(new byte[messageSize]);
1:230a86c:                         producer.send(m);
1:d29ca2a:                     }
1:d29ca2a:                     producer.close();
1:d29ca2a:                 } catch (JMSException e) {
1:d29ca2a:                     e.printStackTrace();
1:d29ca2a:                 } finally {
1:d29ca2a:                     safeClose(connection2);
1:d29ca2a:                     producerDoneLatch.countDown();
1:d29ca2a:                 }
1:230a86c: 
1:d29ca2a:             }
1:d29ca2a:         }.start();
1:d29ca2a: 
1:d29ca2a:         // Make sure all the messages were delivered.
1:d29ca2a:         Message message = null;
1:d29ca2a:         for (int i = 0; i < messageCount; i++) {
1:d29ca2a:             message = consumer.receive(5000);
1:230a86c:             assertNotNull("Did not get message: " + i, message);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         profilerPause("Done: ");
1:230a86c: 
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:         message.acknowledge();
1:d29ca2a: 
1:d29ca2a:         // Make sure the producer thread finishes.
1:d29ca2a:         assertTrue(producerDoneLatch.await(5, TimeUnit.SECONDS));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQDestination destination;
1:     public int deliveryMode;
1:     public byte destinationType;
1:     public boolean durableConsumer;
1:     public int messageCount = 50000;
1:     public int messageSize = 1024;
1: 
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(LoadTestBurnIn.class);
1:         LOG.info("Start: " + getName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("End: " + getName());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0))
1:             .getServer().getConnectURI());
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT),
1:                                                            Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
1:         addCombinationValues("durableConsumer", new Object[] {Boolean.TRUE});
1:         addCombinationValues("messageSize", new Object[] {Integer.valueOf(101), Integer.valueOf(102),
1:                                                           Integer.valueOf(103), Integer.valueOf(104),
1:                                                           Integer.valueOf(105), Integer.valueOf(106),
1:                                                           Integer.valueOf(107), Integer.valueOf(108)});
1:         if (durableConsumer && destinationType != ActiveMQDestination.TOPIC_TYPE) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:             consumer = session.createDurableSubscriber((Topic)destination, "sub1:"
1:                                                                            + System.currentTimeMillis());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * Small burn test moves sends a moderate amount of messages through the broker,
1:  * to checking to make sure that the broker does not lock up after a while of
1:  * sustained messaging.
1: 
0:         log.info("Start: " + getName());
/////////////////////////////////////////////////////////////////////////
0:             log.info("End: " + getName());
1: 
1: 
1:         // return BrokerFactory.createBroker(new
1:         // URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
0:         return new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0)).getServer().getConnectURI());
1: 
1: 
0:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
0:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),});
0:         addCombinationValues("durableConsumer", new Object[] {Boolean.TRUE,});
0:         addCombinationValues("messageSize", new Object[] {Integer.valueOf(101), Integer.valueOf(102), Integer.valueOf(103), Integer.valueOf(104), Integer.valueOf(105),
0:                                                           Integer.valueOf(106), Integer.valueOf(107), Integer.valueOf(108),});
1:         // Durable consumer combination is only valid with topics
0:         if (durableConsumer && destinationType != ActiveMQDestination.TOPIC_TYPE)
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (durableConsumer) {
0:             consumer = session.createDurableSubscriber((Topic)destination, "sub1:" + System.currentTimeMillis());
1: 
1: 
1:                 Connection connection2 = null;
1:                         BytesMessage m = session.createBytesMessage();
1:                         m.writeBytes(new byte[messageSize]);
1:                         producer.send(m);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("Did not get message: " + i, message);
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testSendReceive() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import junit.framework.Test;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: /**
0:  * Small burn test moves sends a moderate amount of messages through the broker, to 
0:  * checking to make sure that the broker does not lock up after a while of sustained
0:  * messaging.
1:  * 
0:  * @version $Revision$
1:  */
1: public class LoadTestBurnIn extends JmsTestSupport {
1:     
1:     public static Test suite() {
1:         return suite(LoadTestBurnIn.class);
1:     }
1: 
1:     protected void setUp() throws Exception {
0:         System.out.println("Start: "+getName());
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         try {
1:             super.tearDown();
1:         } catch (Throwable e) {
1:             e.printStackTrace(System.out);
1:         } finally {
0:             System.out.println("End: "+getName());
1:         }
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1:     
1:     protected BrokerService createBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("broker://(tcp://localhost:0)?useJmx=true"));
0: //        return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
0:         return new ActiveMQConnectionFactory(((TransportConnector) broker.getTransportConnectors().get(0)).getServer().getConnectURI());
1:     }
1: 
0:     public ActiveMQDestination destination;
0:     public int deliveryMode;
0:     public byte destinationType;
0:     public boolean durableConsumer;
1:     
0:     public int messageCount = 50000;
0:     public int messageSize = 1024;
1:     
1:     public void initCombosForTestSendReceive() {
0:         addCombinationValues("deliveryMode", new Object[] { 
0:                 new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
0:         addCombinationValues("destinationType", new Object[] { 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0: //                new Byte(ActiveMQDestination.QUEUE_TYPE),
0:                 });
0:         addCombinationValues("durableConsumer", new Object[] { 
0:                 Boolean.TRUE, 
0: //                Boolean.FALSE,
0:                 });
0:         addCombinationValues("messageSize", new Object[] { 
0:                 new Integer(101), 
0:                 new Integer(102), 
0:                 new Integer(103), 
0:                 new Integer(104), 
0:                 new Integer(105), 
0:                 new Integer(106), 
0:                 new Integer(107), 
0:                 new Integer(108), 
0:         });
1:     }
1: 
0:     public void testSendReceive() throws Throwable {
1: 
0:         // Durable consumer combination is only valid with topics 
0:         if( durableConsumer && destinationType!=ActiveMQDestination.TOPIC_TYPE)
1:             return;
1:         
1:         connection.setClientID(getName());
1:         connection.getPrefetchPolicy().setAll(1000);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer;
0:         if( durableConsumer ) {
0:             consumer = session.createDurableSubscriber((Topic) destination, "sub1:"+System.currentTimeMillis());
1:         } else {
1:             consumer = session.createConsumer(destination);
1:         }
1:         profilerPause("Ready: ");
1:         
1:         final CountDownLatch producerDoneLatch = new CountDownLatch(1);
1:         
1:         // Send the messages, async
1:         new Thread() {
1:             public void run() {
0:                 Connection connection2=null;
1:                 try {
1:                     connection2 = factory.createConnection();
1:                     Session session = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     for (int i = 0; i < messageCount; i++) {
0:                          BytesMessage m = session.createBytesMessage();
0:                          m.writeBytes(new byte[messageSize]);
0:                          producer.send(m);
1:                     }
1:                     producer.close();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 } finally {
1:                     safeClose(connection2);
1:                     producerDoneLatch.countDown();
1:                 }
1:                 
1:             }
1:         }.start();
1: 
1:         // Make sure all the messages were delivered.
1:         Message message = null;
1:         for (int i = 0; i < messageCount; i++) {
1:             message = consumer.receive(5000);
0:             assertNotNull("Did not get message: "+i, message);
1:         }
1: 
1:         profilerPause("Done: ");
1:         
1:         assertNull(consumer.receiveNoWait());
1:         message.acknowledge();
1: 
1:         // Make sure the producer thread finishes.
1:         assertTrue(producerDoneLatch.await(5, TimeUnit.SECONDS));
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(LoadTestBurnIn.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:                 Integer.valueOf(DeliveryMode.PERSISTENT) });
0:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE), 
0: //                Byte.valueOf(ActiveMQDestination.QUEUE_TYPE),
0:                 Integer.valueOf(101), 
0:                 Integer.valueOf(102), 
0:                 Integer.valueOf(103), 
0:                 Integer.valueOf(104), 
0:                 Integer.valueOf(105), 
0:                 Integer.valueOf(106), 
0:                 Integer.valueOf(107), 
0:                 Integer.valueOf(108), 
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(LoadTestBurnIn.class);
0:         log.info("Start: "+getName());
/////////////////////////////////////////////////////////////////////////
0:             log.info("End: "+getName());
============================================================================