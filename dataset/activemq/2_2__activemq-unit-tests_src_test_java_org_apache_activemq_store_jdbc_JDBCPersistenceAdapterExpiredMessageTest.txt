1:b9fad53: /**
1:b9fad53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b9fad53:  * contributor license agreements.  See the NOTICE file distributed with
1:b9fad53:  * this work for additional information regarding copyright ownership.
1:b9fad53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b9fad53:  * (the "License"); you may not use this file except in compliance with
1:b9fad53:  * the License.  You may obtain a copy of the License at
1:b9fad53:  *
1:b9fad53:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b9fad53:  *
1:b9fad53:  * Unless required by applicable law or agreed to in writing, software
1:b9fad53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b9fad53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b9fad53:  * See the License for the specific language governing permissions and
1:b9fad53:  * limitations under the License.
1:b9fad53:  */
1:b9fad53: package org.apache.activemq.store.jdbc;
1:b9fad53: 
1:b9fad53: import static org.junit.Assert.assertTrue;
1:b9fad53: 
1:b9fad53: import java.io.File;
1:b9fad53: import java.io.IOException;
1:b9fad53: import java.util.concurrent.atomic.AtomicBoolean;
1:b9fad53: 
1:b9fad53: import javax.jms.Connection;
1:b9fad53: import javax.jms.MessageProducer;
1:b9fad53: import javax.jms.Session;
1:b9fad53: import javax.jms.TopicSubscriber;
1:b9fad53: 
1:b9fad53: import org.apache.activemq.ActiveMQConnectionFactory;
1:b9fad53: import org.apache.activemq.broker.BrokerService;
1:b9fad53: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b9fad53: import org.apache.activemq.broker.region.policy.PolicyMap;
1:026c6f4: import org.apache.activemq.command.ActiveMQQueue;
1:b9fad53: import org.apache.activemq.command.ActiveMQTopic;
1:b9fad53: import org.apache.activemq.command.Message;
1:b9fad53: import org.apache.activemq.command.MessageId;
1:b9fad53: import org.apache.activemq.store.MessageRecoveryListener;
1:b9fad53: import org.apache.activemq.store.ProxyTopicMessageStore;
1:b9fad53: import org.apache.activemq.store.TopicMessageStore;
1:b9fad53: import org.apache.activemq.util.Wait;
1:b9fad53: import org.apache.activemq.util.Wait.Condition;
1:b9fad53: import org.junit.After;
1:b9fad53: import org.junit.Before;
1:b9fad53: import org.junit.Rule;
1:b9fad53: import org.junit.Test;
1:b9fad53: import org.junit.rules.TemporaryFolder;
1:026c6f4: import org.slf4j.Logger;
1:026c6f4: import org.slf4j.LoggerFactory;
1:b9fad53: 
1:b9fad53: public class JDBCPersistenceAdapterExpiredMessageTest {
1:026c6f4:     private static final Logger LOG = LoggerFactory.getLogger(JDBCPersistenceAdapterExpiredMessageTest.class);
1:b9fad53: 
1:b9fad53:     @Rule
1:b9fad53:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:b9fad53: 
1:b9fad53:     protected BrokerService brokerService;
1:b9fad53:     private AtomicBoolean hasSpaceCalled = new AtomicBoolean();
1:b9fad53:     private int expireSize = 5;
1:b9fad53: 
1:b9fad53:     @Before
1:b9fad53:     public void setUp() throws Exception {
1:b9fad53:         hasSpaceCalled.set(false);
1:b9fad53:         brokerService = new BrokerService();
1:b9fad53: 
1:b9fad53:         //Wrap the adapter and listener to set a flag to make sure we are calling hasSpace()
1:b9fad53:         //during expiration
1:b9fad53:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter() {
1:b9fad53: 
1:b9fad53:             @Override
1:b9fad53:             public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:b9fad53:                 ProxyTopicMessageStore proxy = new ProxyTopicMessageStore(super.createTopicMessageStore(destination)) {
1:b9fad53: 
1:b9fad53:                     @Override
1:b9fad53:                     public void recover(final MessageRecoveryListener listener) throws Exception {
1:b9fad53:                         MessageRecoveryListener delegate = new MessageRecoveryListener() {
1:b9fad53: 
1:b9fad53:                             @Override
1:b9fad53:                             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:b9fad53:                                 return listener.recoverMessageReference(ref);
1:b9fad53:                             }
1:b9fad53: 
1:b9fad53:                             @Override
1:b9fad53:                             public boolean recoverMessage(Message message) throws Exception {
1:b9fad53:                                 return listener.recoverMessage(message);
1:b9fad53:                             }
1:b9fad53: 
1:b9fad53:                             @Override
1:b9fad53:                             public boolean isDuplicate(MessageId ref) {
1:b9fad53:                                 return listener.isDuplicate(ref);
1:b9fad53:                             }
1:b9fad53: 
1:b9fad53:                             @Override
1:b9fad53:                             public boolean hasSpace() {
1:b9fad53:                                 hasSpaceCalled.set(true);
1:b9fad53:                                 return listener.hasSpace();
1:b9fad53:                             }
1:b9fad53:                         };
1:b9fad53:                         super.recover(delegate);
1:b9fad53:                     }
1:b9fad53: 
1:b9fad53:                 };
1:b9fad53:                 return proxy;
1:b9fad53:             }
1:b9fad53: 
1:b9fad53:         };
1:b9fad53: 
1:b9fad53:         brokerService.setSchedulerSupport(false);
1:b9fad53:         brokerService.setDataDirectoryFile(dataFileDir.getRoot());
1:b9fad53:         brokerService.setPersistenceAdapter(jdbc);
1:b9fad53:         brokerService.setDeleteAllMessagesOnStartup(true);
1:b9fad53: 
1:b9fad53:         PolicyMap policyMap = new PolicyMap();
1:b9fad53:         PolicyEntry defaultEntry = new PolicyEntry();
1:b9fad53:         defaultEntry.setExpireMessagesPeriod(5000);
1:b9fad53:         defaultEntry.setMaxExpirePageSize(expireSize);
1:026c6f4:         defaultEntry.setMemoryLimit(100*16*1024);
1:b9fad53:         policyMap.setDefaultEntry(defaultEntry);
1:b9fad53:         brokerService.setDestinationPolicy(policyMap);
1:b9fad53: 
1:b9fad53:         brokerService.start();
1:b9fad53:     }
1:b9fad53: 
1:b9fad53:     @After
1:b9fad53:     public void stop() throws Exception {
1:b9fad53:         if (brokerService != null) {
1:b9fad53:             brokerService.stop();
1:b9fad53:             brokerService.waitUntilStopped();
1:b9fad53:         }
1:b9fad53:     }
1:b9fad53: 
1:b9fad53:     @Test
1:b9fad53:     public void testMaxExpirePageSize() throws Exception {
1:b9fad53:         final ActiveMQTopic topic = new ActiveMQTopic("test.topic");
1:b9fad53:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:b9fad53:         factory.setClientID("clientId");;
1:b9fad53:         Connection conn = factory.createConnection();
1:b9fad53:         conn.start();
1:b9fad53:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b9fad53:         TopicSubscriber sub = sess.createDurableSubscriber(topic, "sub1");
1:b9fad53:         sub.close();
1:b9fad53: 
1:b9fad53:         MessageProducer producer = sess.createProducer(topic);
1:b9fad53:         producer.setTimeToLive(1000);
1:b9fad53: 
1:b9fad53:         for (int i = 0; i < 50; i++) {
1:b9fad53:             producer.send(sess.createTextMessage("test message: " + i));
1:b9fad53:         }
1:b9fad53: 
1:b9fad53:         //There should be exactly 5 messages expired because the limit was hit and it stopped
1:b9fad53:         //The expire messages period is 5 seconds which should give enough time for this assertion
1:b9fad53:         //to pass before expiring more messages
1:b9fad53:         assertTrue(Wait.waitFor(new Condition() {
1:b9fad53: 
1:b9fad53:             @Override
1:b9fad53:             public boolean isSatisified() throws Exception {
1:b9fad53:                 long expired = brokerService.getDestination(topic).getDestinationStatistics().getExpired().getCount();
1:b9fad53:                 return expired == expireSize && hasSpaceCalled.get();
1:b9fad53:             }
1:b9fad53:         }, 15000, 1000));
1:b9fad53:     }
1:026c6f4: 
1:026c6f4:     @Test
1:026c6f4:     public void testExpiredAfterCacheExhausted() throws Exception {
1:026c6f4:         final ActiveMQQueue queue = new ActiveMQQueue("test.q");
1:026c6f4:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:026c6f4:         factory.setWatchTopicAdvisories(false);
1:026c6f4:         Connection conn = factory.createConnection();
1:026c6f4:         conn.start();
1:026c6f4:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:026c6f4: 
1:026c6f4:         MessageProducer producer = sess.createProducer(queue);
1:026c6f4:         producer.setTimeToLive(1000);
1:026c6f4:         String payLoad = new String(new byte[16*1024]);
1:026c6f4: 
1:026c6f4:         final int numMessages = 500;
1:026c6f4:         for (int i = 0; i < numMessages; i++) {
1:026c6f4:             producer.send(sess.createTextMessage("test message: " + payLoad));
1:026c6f4:         }
1:026c6f4: 
1:026c6f4:         assertTrue(Wait.waitFor(new Condition() {
1:026c6f4: 
1:026c6f4:             @Override
1:026c6f4:             public boolean isSatisified() throws Exception {
1:026c6f4:                 long expired = brokerService.getDestination(queue).getDestinationStatistics().getExpired().getCount();
1:026c6f4:                 LOG.info("Expired: " + expired);
1:026c6f4:                 return expired == numMessages;
1:026c6f4:             }
1:026c6f4:         }, 15000, 1000));
1:026c6f4:     }
1:b9fad53: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:026c6f4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCPersistenceAdapterExpiredMessageTest.class);
/////////////////////////////////////////////////////////////////////////
1:         defaultEntry.setMemoryLimit(100*16*1024);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testExpiredAfterCacheExhausted() throws Exception {
1:         final ActiveMQQueue queue = new ActiveMQQueue("test.q");
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = sess.createProducer(queue);
1:         producer.setTimeToLive(1000);
1:         String payLoad = new String(new byte[16*1024]);
1: 
1:         final int numMessages = 500;
1:         for (int i = 0; i < numMessages; i++) {
1:             producer.send(sess.createTextMessage("test message: " + payLoad));
1:         }
1: 
1:         assertTrue(Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long expired = brokerService.getDestination(queue).getDestinationStatistics().getExpired().getCount();
1:                 LOG.info("Expired: " + expired);
1:                 return expired == numMessages;
1:             }
1:         }, 15000, 1000));
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b9fad53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.ProxyTopicMessageStore;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: 
1: public class JDBCPersistenceAdapterExpiredMessageTest {
1: 
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     protected BrokerService brokerService;
1:     private AtomicBoolean hasSpaceCalled = new AtomicBoolean();
1:     private int expireSize = 5;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         hasSpaceCalled.set(false);
1:         brokerService = new BrokerService();
1: 
1:         //Wrap the adapter and listener to set a flag to make sure we are calling hasSpace()
1:         //during expiration
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter() {
1: 
1:             @Override
1:             public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:                 ProxyTopicMessageStore proxy = new ProxyTopicMessageStore(super.createTopicMessageStore(destination)) {
1: 
1:                     @Override
1:                     public void recover(final MessageRecoveryListener listener) throws Exception {
1:                         MessageRecoveryListener delegate = new MessageRecoveryListener() {
1: 
1:                             @Override
1:                             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:                                 return listener.recoverMessageReference(ref);
1:                             }
1: 
1:                             @Override
1:                             public boolean recoverMessage(Message message) throws Exception {
1:                                 return listener.recoverMessage(message);
1:                             }
1: 
1:                             @Override
1:                             public boolean isDuplicate(MessageId ref) {
1:                                 return listener.isDuplicate(ref);
1:                             }
1: 
1:                             @Override
1:                             public boolean hasSpace() {
1:                                 hasSpaceCalled.set(true);
1:                                 return listener.hasSpace();
1:                             }
1:                         };
1:                         super.recover(delegate);
1:                     }
1: 
1:                 };
1:                 return proxy;
1:             }
1: 
1:         };
1: 
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setDataDirectoryFile(dataFileDir.getRoot());
1:         brokerService.setPersistenceAdapter(jdbc);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(5000);
1:         defaultEntry.setMaxExpirePageSize(expireSize);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stop() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testMaxExpirePageSize() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic("test.topic");
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.setClientID("clientId");;
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber sub = sess.createDurableSubscriber(topic, "sub1");
1:         sub.close();
1: 
1:         MessageProducer producer = sess.createProducer(topic);
1:         producer.setTimeToLive(1000);
1: 
1:         for (int i = 0; i < 50; i++) {
1:             producer.send(sess.createTextMessage("test message: " + i));
1:         }
1: 
1:         //There should be exactly 5 messages expired because the limit was hit and it stopped
1:         //The expire messages period is 5 seconds which should give enough time for this assertion
1:         //to pass before expiring more messages
1:         assertTrue(Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long expired = brokerService.getDestination(topic).getDestinationStatistics().getExpired().getCount();
1:                 return expired == expireSize && hasSpaceCalled.get();
1:             }
1:         }, 15000, 1000));
1:     }
1: }
============================================================================