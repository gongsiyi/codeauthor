1:8e00c6c: /**
1:8e00c6c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e00c6c:  * contributor license agreements.  See the NOTICE file distributed with
1:8e00c6c:  * this work for additional information regarding copyright ownership.
1:8e00c6c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e00c6c:  * (the "License"); you may not use this file except in compliance with
1:8e00c6c:  * the License.  You may obtain a copy of the License at
1:8e00c6c:  *
1:8e00c6c:  * http://www.apache.org/licenses/LICENSE-2.0
1:8e00c6c:  *
1:8e00c6c:  * Unless required by applicable law or agreed to in writing, software
1:8e00c6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e00c6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e00c6c:  * See the License for the specific language governing permissions and
1:8e00c6c:  * limitations under the License.
1:8e00c6c:  */
1:8e00c6c: package org.apache.activemq.usecases;
1:8e00c6c: 
1:8e00c6c: import org.apache.activemq.ActiveMQConnectionFactory;
1:8e00c6c: import org.apache.activemq.broker.BrokerPlugin;
1:8e00c6c: import org.apache.activemq.broker.BrokerPluginSupport;
1:8e00c6c: import org.apache.activemq.broker.BrokerService;
1:8e00c6c: import org.apache.activemq.broker.ConnectionContext;
1:8e00c6c: import org.apache.activemq.broker.region.Subscription;
1:8e00c6c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8e00c6c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8e00c6c: import org.apache.activemq.command.ActiveMQQueue;
1:8e00c6c: import org.apache.activemq.command.ConsumerInfo;
1:8e00c6c: import org.apache.activemq.network.DemandForwardingBridge;
1:8e00c6c: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:8e00c6c: import org.apache.activemq.network.NetworkBridge;
1:8e00c6c: import org.apache.activemq.network.NetworkConnector;
1:8e00c6c: import org.apache.activemq.util.TestUtils;
1:8e00c6c: import org.apache.activemq.util.Wait;
1:8e00c6c: import org.junit.After;
1:8e00c6c: import org.junit.Before;
1:8e00c6c: import org.junit.BeforeClass;
1:8e00c6c: import org.junit.Test;
1:8e00c6c: import org.slf4j.Logger;
1:8e00c6c: import org.slf4j.LoggerFactory;
1:8e00c6c: 
1:8e00c6c: import javax.jms.BytesMessage;
1:8e00c6c: import javax.jms.Connection;
1:8e00c6c: import javax.jms.Destination;
1:8e00c6c: import javax.jms.JMSException;
1:8e00c6c: import javax.jms.Message;
1:8e00c6c: import javax.jms.MessageListener;
1:8e00c6c: import javax.jms.MessageProducer;
1:8e00c6c: import javax.jms.Session;
1:8e00c6c: import java.net.InetAddress;
1:8e00c6c: import java.net.Socket;
1:8e00c6c: import java.net.URI;
1:8e00c6c: import java.util.LinkedList;
1:8e00c6c: import java.util.List;
1:8e00c6c: import java.util.concurrent.TimeUnit;
1:8e00c6c: import java.util.concurrent.atomic.AtomicLong;
1:8e00c6c: 
1:8e00c6c: import static org.junit.Assert.assertTrue;
1:8e00c6c: 
1:8e00c6c: // https://issues.apache.org/jira/browse/AMQ-6640
1:8e00c6c: public class DuplexAdvisoryRaceTest {
1:8e00c6c:     private static final Logger LOG = LoggerFactory.getLogger(DuplexAdvisoryRaceTest.class);
1:8e00c6c:     private static String hostName;
1:8e00c6c: 
1:8e00c6c:     final AtomicLong responseReceived = new AtomicLong(0);
1:8e00c6c: 
1:8e00c6c:     BrokerService brokerA,brokerB;
1:8e00c6c:     String networkConnectorUrlString;
1:8e00c6c: 
1:8e00c6c:     @BeforeClass
1:8e00c6c:     public static void initIp() throws Exception {
1:8e00c6c:         // attempt to bypass loopback - not vital but it helps to reproduce
1:8e00c6c:         hostName = InetAddress.getLocalHost().getHostAddress();
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     @Before
1:8e00c6c:     public void createBrokers() throws Exception {
1:8e00c6c:         networkConnectorUrlString = "tcp://" + hostName + ":" + TestUtils.findOpenPort();
1:8e00c6c: 
1:8e00c6c:         brokerA = newBroker("A");
1:8e00c6c:         brokerB = newBroker("B");
1:8e00c6c:         responseReceived.set(0);
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     @After
1:8e00c6c:     public void stopBrokers() throws Exception {
1:8e00c6c:         brokerA.stop();
1:8e00c6c:         brokerB.stop();
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c: 
1:8e00c6c:     // to be sure to be sure
1:8e00c6c:     public void repeatTestHang() throws Exception {
1:8e00c6c:         for (int i=0; i<10;i++) {
1:8e00c6c:             testHang();
1:8e00c6c:             stopBrokers();
1:8e00c6c:             createBrokers();
1:8e00c6c:         }
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     @Test
1:8e00c6c:     public void testHang() throws Exception {
1:8e00c6c: 
1:8e00c6c:         brokerA.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:8e00c6c:             @Override
1:8e00c6c:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:8e00c6c:                 Subscription subscription = super.addConsumer(context, info);
1:8e00c6c:                 // delay return to allow dispatch to interleave
1:8e00c6c:                 if (context.isNetworkConnection()) {
1:5ac9657:                     TimeUnit.MILLISECONDS.sleep(200);
1:8e00c6c:                 }
1:8e00c6c:                 return subscription;
1:8e00c6c:             };
1:8e00c6c:         }});
1:8e00c6c: 
1:8e00c6c:         // bridge
1:8e00c6c:         NetworkConnector networkConnector = bridgeBrokers(brokerA, brokerB);
1:8e00c6c: 
1:8e00c6c:         brokerA.start();
1:8e00c6c:         brokerB.start();
1:8e00c6c: 
1:8e00c6c:         ActiveMQConnectionFactory brokerAFactory = new ActiveMQConnectionFactory(brokerA.getTransportConnectorByScheme("tcp").getPublishableConnectString()
1:8e00c6c:                 + "?jms.watchTopicAdvisories=false");
1:8e00c6c: 
1:8e00c6c:         ActiveMQConnectionFactory brokerBFactory = new ActiveMQConnectionFactory(brokerB.getTransportConnectorByScheme("tcp").getPublishableConnectString()
1:8e00c6c:                 + "?jms.watchTopicAdvisories=false");
1:8e00c6c: 
1:8e00c6c:         // populate dests
1:5ac9657:         final int numDests = 400;
1:d84a586:         final int numMessagesPerDest = 50;
1:d84a586:         final int numConsumersPerDest = 5;
1:8e00c6c:         populate(brokerAFactory, 0, numDests/2, numMessagesPerDest);
1:8e00c6c:         populate(brokerBFactory, numDests/2, numDests, numMessagesPerDest);
1:8e00c6c: 
1:8e00c6c:         // demand
1:8e00c6c:         List<Connection> connections = new LinkedList<>();
1:8e00c6c:         connections.add(demand(brokerBFactory, 0, numDests/2, numConsumersPerDest));
1:8e00c6c:         connections.add(demand(brokerAFactory, numDests/2, numDests, numConsumersPerDest));
1:8e00c6c: 
1:8e00c6c: 
1:8e00c6c:         LOG.info("Allow duplex bridge to connect....");
1:8e00c6c:         // allow bridge to start
1:8e00c6c:         brokerB.startTransportConnector(brokerB.addConnector(networkConnectorUrlString + "?transport.socketBufferSize=1024"));
1:8e00c6c: 
1:8e00c6c:        if (!Wait.waitFor(new Wait.Condition() {
1:8e00c6c:             @Override
1:8e00c6c:             public boolean isSatisified() throws Exception {
1:8e00c6c:                 LOG.info("received: " + responseReceived.get());
1:8e00c6c:                 return responseReceived.get() >= numMessagesPerDest * numDests;
1:8e00c6c:             }
1:5ac9657:         }, 10*60*1000)) {
1:8e00c6c: 
1:8e00c6c:            org.apache.activemq.TestSupport.dumpAllThreads("DD");
1:8e00c6c: 
1:8e00c6c:            // when hung close will also hang!
1:8e00c6c:            for (NetworkBridge networkBridge : networkConnector.activeBridges()) {
1:8e00c6c:                if (networkBridge instanceof DemandForwardingBridge) {
1:8e00c6c:                    DemandForwardingBridge demandForwardingBridge = (DemandForwardingBridge) networkBridge;
1:8e00c6c:                    Socket socket = demandForwardingBridge.getRemoteBroker().narrow(Socket.class);
1:8e00c6c:                    socket.close();
1:8e00c6c:                }
1:8e00c6c:            }
1:8e00c6c:        }
1:8e00c6c: 
1:8e00c6c:         networkConnector.stop();
1:8e00c6c:         for (Connection connection: connections) {
1:8e00c6c:             try {
1:8e00c6c:                 connection.close();
1:8e00c6c:             } catch (Exception ignored) {}
1:8e00c6c:         }
1:8e00c6c:         assertTrue("received all sent: " + responseReceived.get(), responseReceived.get() >= numMessagesPerDest * numDests);
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c: 
1:8e00c6c:     private void populate(ActiveMQConnectionFactory factory, int minDest, int maxDest, int numMessages) throws JMSException {
1:8e00c6c:         Connection connection = factory.createConnection();
1:8e00c6c:         connection.start();
1:8e00c6c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e00c6c:         final BytesMessage message = session.createBytesMessage();
1:8e00c6c:         MessageProducer producer = session.createProducer(null);;
1:8e00c6c:         for (int i=minDest; i<maxDest; i++) {
1:8e00c6c:             Destination destination = qFromInt(i);
1:8e00c6c:             for (int j=0; j<numMessages; j++) {
1:8e00c6c:                 producer.send(destination, message);
1:8e00c6c:             }
1:8e00c6c:         }
1:8e00c6c:         connection.close();
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     private Connection demand(ActiveMQConnectionFactory factory, int minDest, int maxDest, int numConsumers) throws Exception {
1:8e00c6c:         Connection connection = factory.createConnection();
1:8e00c6c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e00c6c:         for (int i=minDest; i<maxDest; i++) {
1:8e00c6c:             Destination destination = qFromInt(i);
1:8e00c6c:             for (int j=0; j<numConsumers; j++) {
1:8e00c6c:                 session.createConsumer(destination).setMessageListener(new MessageListener() {
1:8e00c6c:                     @Override
1:8e00c6c:                     public void onMessage(Message message) {
1:8e00c6c:                         responseReceived.incrementAndGet();
1:8e00c6c:                     }
1:8e00c6c:                 });
1:8e00c6c:             }
1:8e00c6c:         }
1:8e00c6c:         connection.start();
1:8e00c6c:         return connection;
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     private Destination qFromInt(int val) {
1:8e00c6c:         StringBuilder builder = new StringBuilder();
1:8e00c6c:         String digits = String.format("%03d", val);
1:8e00c6c:         for (int i=0; i<3; i++) {
1:8e00c6c:             builder.append(digits.charAt(i));
1:8e00c6c:             if (i < 2) {
1:8e00c6c:                 builder.append('.');
1:8e00c6c:             }
1:8e00c6c:         }
1:8e00c6c:         return new ActiveMQQueue("Test." + builder.toString());
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c:     private BrokerService newBroker(String name) throws Exception {
1:8e00c6c:         BrokerService brokerService = new BrokerService();
1:8e00c6c:         brokerService.setPersistent(false);
1:8e00c6c:         brokerService.setUseJmx(false);
1:8e00c6c:         brokerService.setBrokerName(name);
1:8e00c6c:         brokerService.addConnector("tcp://" + hostName + ":0?transport.socketBufferSize=1024");
1:8e00c6c: 
1:8e00c6c:         PolicyMap map = new PolicyMap();
1:8e00c6c:         PolicyEntry defaultEntry = new PolicyEntry();
1:8e00c6c:         defaultEntry.setExpireMessagesPeriod(0);
1:8e00c6c:         map.setDefaultEntry(defaultEntry);
1:8e00c6c:         brokerService.setDestinationPolicy(map);
1:8e00c6c:         return brokerService;
1:8e00c6c:     }
1:8e00c6c: 
1:8e00c6c: 
1:8e00c6c:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception {
1:8e00c6c: 
1:d84a586:         String uri = "static:(failover:(" + networkConnectorUrlString + "?socketBufferSize=1024&trace=false)?maxReconnectAttempts=0)";
1:8e00c6c: 
1:8e00c6c:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:8e00c6c:         connector.setName(localBroker.getBrokerName() + "-to-" + remoteBroker.getBrokerName());
1:8e00c6c:         connector.setDuplex(true);
1:8e00c6c:         localBroker.addNetworkConnector(connector);
1:8e00c6c:         return connector;
1:8e00c6c:     }
1:8e00c6c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5ac9657
/////////////////////////////////////////////////////////////////////////
1:                     TimeUnit.MILLISECONDS.sleep(200);
/////////////////////////////////////////////////////////////////////////
1:         final int numDests = 400;
/////////////////////////////////////////////////////////////////////////
1:         }, 10*60*1000)) {
commit:d84a586
/////////////////////////////////////////////////////////////////////////
0:         final int numDests = 800;
1:         final int numMessagesPerDest = 50;
1:         final int numConsumersPerDest = 5;
/////////////////////////////////////////////////////////////////////////
0:         }, 5*60*1000)) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String uri = "static:(failover:(" + networkConnectorUrlString + "?socketBufferSize=1024&trace=false)?maxReconnectAttempts=0)";
commit:8e00c6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.network.DemandForwardingBridge;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkBridge;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.TestUtils;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.net.InetAddress;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: // https://issues.apache.org/jira/browse/AMQ-6640
1: public class DuplexAdvisoryRaceTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(DuplexAdvisoryRaceTest.class);
1:     private static String hostName;
1: 
1:     final AtomicLong responseReceived = new AtomicLong(0);
1: 
1:     BrokerService brokerA,brokerB;
1:     String networkConnectorUrlString;
1: 
1:     @BeforeClass
1:     public static void initIp() throws Exception {
1:         // attempt to bypass loopback - not vital but it helps to reproduce
1:         hostName = InetAddress.getLocalHost().getHostAddress();
1:     }
1: 
1:     @Before
1:     public void createBrokers() throws Exception {
1:         networkConnectorUrlString = "tcp://" + hostName + ":" + TestUtils.findOpenPort();
1: 
1:         brokerA = newBroker("A");
1:         brokerB = newBroker("B");
1:         responseReceived.set(0);
1:     }
1: 
1:     @After
1:     public void stopBrokers() throws Exception {
1:         brokerA.stop();
1:         brokerB.stop();
1:     }
1: 
1: 
1:     // to be sure to be sure
1:     public void repeatTestHang() throws Exception {
1:         for (int i=0; i<10;i++) {
1:             testHang();
1:             stopBrokers();
1:             createBrokers();
1:         }
1:     }
1: 
1:     @Test
1:     public void testHang() throws Exception {
1: 
1:         brokerA.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:             @Override
1:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:                 Subscription subscription = super.addConsumer(context, info);
1:                 // delay return to allow dispatch to interleave
1:                 if (context.isNetworkConnection()) {
0:                     TimeUnit.MILLISECONDS.sleep(300);
1:                 }
1:                 return subscription;
1:             };
1:         }});
1: 
1:         // bridge
1:         NetworkConnector networkConnector = bridgeBrokers(brokerA, brokerB);
1: 
1:         brokerA.start();
1:         brokerB.start();
1: 
1:         ActiveMQConnectionFactory brokerAFactory = new ActiveMQConnectionFactory(brokerA.getTransportConnectorByScheme("tcp").getPublishableConnectString()
1:                 + "?jms.watchTopicAdvisories=false");
1: 
1:         ActiveMQConnectionFactory brokerBFactory = new ActiveMQConnectionFactory(brokerB.getTransportConnectorByScheme("tcp").getPublishableConnectString()
1:                 + "?jms.watchTopicAdvisories=false");
1: 
1:         // populate dests
0:         final int numDests = 200;
0:         final int numMessagesPerDest = 300;
0:         final int numConsumersPerDest = 100;
1:         populate(brokerAFactory, 0, numDests/2, numMessagesPerDest);
1:         populate(brokerBFactory, numDests/2, numDests, numMessagesPerDest);
1: 
1:         // demand
1:         List<Connection> connections = new LinkedList<>();
1:         connections.add(demand(brokerBFactory, 0, numDests/2, numConsumersPerDest));
1:         connections.add(demand(brokerAFactory, numDests/2, numDests, numConsumersPerDest));
1: 
1: 
1:         LOG.info("Allow duplex bridge to connect....");
1:         // allow bridge to start
1:         brokerB.startTransportConnector(brokerB.addConnector(networkConnectorUrlString + "?transport.socketBufferSize=1024"));
1: 
1:        if (!Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("received: " + responseReceived.get());
1:                 return responseReceived.get() >= numMessagesPerDest * numDests;
1:             }
0:         }, 2*60*1000)) {
1: 
1:            org.apache.activemq.TestSupport.dumpAllThreads("DD");
1: 
1:            // when hung close will also hang!
1:            for (NetworkBridge networkBridge : networkConnector.activeBridges()) {
1:                if (networkBridge instanceof DemandForwardingBridge) {
1:                    DemandForwardingBridge demandForwardingBridge = (DemandForwardingBridge) networkBridge;
1:                    Socket socket = demandForwardingBridge.getRemoteBroker().narrow(Socket.class);
1:                    socket.close();
1:                }
1:            }
1:        }
1: 
1:         networkConnector.stop();
1:         for (Connection connection: connections) {
1:             try {
1:                 connection.close();
1:             } catch (Exception ignored) {}
1:         }
1:         assertTrue("received all sent: " + responseReceived.get(), responseReceived.get() >= numMessagesPerDest * numDests);
1:     }
1: 
1: 
1:     private void populate(ActiveMQConnectionFactory factory, int minDest, int maxDest, int numMessages) throws JMSException {
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final BytesMessage message = session.createBytesMessage();
0:         //message.writeBytes(new byte[50]);
1:         MessageProducer producer = session.createProducer(null);;
1:         for (int i=minDest; i<maxDest; i++) {
1:             Destination destination = qFromInt(i);
1:             for (int j=0; j<numMessages; j++) {
1:                 producer.send(destination, message);
1:             }
1:         }
1:         connection.close();
1:     }
1: 
1:     private Connection demand(ActiveMQConnectionFactory factory, int minDest, int maxDest, int numConsumers) throws Exception {
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         for (int i=minDest; i<maxDest; i++) {
1:             Destination destination = qFromInt(i);
1:             for (int j=0; j<numConsumers; j++) {
1:                 session.createConsumer(destination).setMessageListener(new MessageListener() {
1:                     @Override
1:                     public void onMessage(Message message) {
1:                         responseReceived.incrementAndGet();
1:                     }
1:                 });
1:             }
1:         }
1:         connection.start();
1:         return connection;
1:     }
1: 
1:     private Destination qFromInt(int val) {
1:         StringBuilder builder = new StringBuilder();
1:         String digits = String.format("%03d", val);
1:         for (int i=0; i<3; i++) {
1:             builder.append(digits.charAt(i));
1:             if (i < 2) {
1:                 builder.append('.');
1:             }
1:         }
1:         return new ActiveMQQueue("Test." + builder.toString());
1:     }
1: 
1:     private BrokerService newBroker(String name) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setBrokerName(name);
1:         brokerService.addConnector("tcp://" + hostName + ":0?transport.socketBufferSize=1024");
1: 
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         map.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(map);
1:         return brokerService;
1:     }
1: 
1: 
1:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception {
1: 
0:         String uri = "static:(failover:(" + networkConnectorUrlString + "?socketBufferSize=1024)?maxReconnectAttempts=0)";
1: 
1:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:         connector.setName(localBroker.getBrokerName() + "-to-" + remoteBroker.getBrokerName());
1:         connector.setDuplex(true);
1:         localBroker.addNetworkConnector(connector);
1:         return connector;
1:     }
1: }
============================================================================