1:751ba90: /**
1:751ba90:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:751ba90:  * contributor license agreements.  See the NOTICE file distributed with
1:751ba90:  * this work for additional information regarding copyright ownership.
1:751ba90:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:751ba90:  * (the "License"); you may not use this file except in compliance with
1:751ba90:  * the License.  You may obtain a copy of the License at
1:751ba90:  *
1:751ba90:  *      http://www.apache.org/licenses/LICENSE-2.0
1:751ba90:  *
1:751ba90:  * Unless required by applicable law or agreed to in writing, software
1:751ba90:  * distributed under the License is distributed on an "AS IS" BASIS,
1:751ba90:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:751ba90:  * See the License for the specific language governing permissions and
1:751ba90:  * limitations under the License.
1:751ba90:  */
1:751ba90: package org.apache.activemq.bugs;
1:751ba90: 
1:751ba90: import java.util.*;
1:751ba90: import java.util.concurrent.CopyOnWriteArrayList;
1:751ba90: import javax.jms.*;
1:751ba90: import javax.jms.Queue;
1:751ba90: 
1:751ba90: import org.apache.activemq.ActiveMQConnectionFactory;
1:751ba90: import org.apache.activemq.broker.BrokerService;
1:751ba90: import org.apache.activemq.command.ActiveMQQueue;
1:751ba90: import org.slf4j.Logger;
1:751ba90: import org.slf4j.LoggerFactory;
1:751ba90: import org.junit.After;
1:751ba90: import org.junit.Before;
1:751ba90: import org.junit.Test;
1:751ba90: 
1:751ba90: import static org.junit.Assert.*;
1:751ba90: 
1:751ba90: public class AMQ2171Test implements Thread.UncaughtExceptionHandler {
1:751ba90: 
1:751ba90:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2171Test.class);
1:751ba90:     private static final String BROKER_URL = "tcp://localhost:0";
1:751ba90:     private static final int QUEUE_SIZE = 100;
1:751ba90: 
1:751ba90:     private static BrokerService brokerService;
1:751ba90:     private static Queue destination;
1:751ba90: 
1:751ba90:     private String brokerUri;
1:751ba90:     private String brokerUriNoPrefetch;
1:751ba90:     private Collection<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
1:751ba90: 
1:751ba90:     @Before
1:751ba90:     public void setUp() throws Exception {
1:751ba90:         // Start an embedded broker up.
1:751ba90:         brokerService = new BrokerService();
1:751ba90:         brokerService.setDeleteAllMessagesOnStartup(true);
1:751ba90:         brokerService.addConnector(BROKER_URL);
1:751ba90:         brokerService.start();
1:751ba90: 
1:751ba90:         brokerUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString().toString();
1:751ba90:         brokerUriNoPrefetch = brokerUri + "?jms.prefetchPolicy.all=0";
1:751ba90: 
1:751ba90:         destination = new ActiveMQQueue("Test");
1:751ba90:         produce(brokerUri, QUEUE_SIZE);
1:751ba90:     }
1:751ba90: 
1:751ba90:     @Before
1:751ba90:     public void addHandler() {
1:751ba90:         Thread.setDefaultUncaughtExceptionHandler(this);
1:751ba90:     }
1:751ba90: 
1:751ba90:     @After
1:751ba90:     public void tearDown() throws Exception {
1:751ba90:         brokerService.stop();
1:751ba90:     }
1:751ba90: 
1:751ba90:     @Test(timeout = 10000)
1:751ba90:     public void testBrowsePrefetch() throws Exception {
1:751ba90:         runTest(brokerUri);
1:751ba90:     }
1:751ba90: 
1:751ba90:     @Test(timeout = 10000)
1:751ba90:     public void testBrowseNoPrefetch() throws Exception {
1:751ba90:         runTest(brokerUriNoPrefetch);
1:751ba90:     }
1:751ba90: 
1:751ba90:     private void runTest(String brokerURL) throws Exception {
1:751ba90: 
1:751ba90:         Connection connection = new ActiveMQConnectionFactory(brokerURL).createConnection();
1:751ba90: 
1:751ba90:         try {
1:751ba90:             connection.start();
1:751ba90: 
1:751ba90:             Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:751ba90:             @SuppressWarnings("unchecked")
1:751ba90:             Enumeration<Message> unread = (Enumeration<Message>) session.createBrowser(destination).getEnumeration();
1:751ba90: 
1:751ba90:             int count = 0;
1:751ba90:             while (unread.hasMoreElements()) {
1:751ba90:                 unread.nextElement();
1:751ba90:                 count++;
1:751ba90:             }
1:751ba90: 
1:751ba90:             assertEquals(QUEUE_SIZE, count);
1:751ba90:             assertTrue(exceptions.isEmpty());
1:751ba90:         } finally {
1:751ba90:             try {
1:751ba90:                 connection.close();
1:751ba90:             } catch (JMSException e) {
1:751ba90:                 exceptions.add(e);
1:751ba90:             }
1:751ba90:         }
1:751ba90:     }
1:751ba90: 
1:751ba90:     private static void produce(String brokerURL, int count) throws Exception {
1:751ba90:         Connection connection = null;
1:751ba90: 
1:751ba90:         try {
1:751ba90: 
1:751ba90:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURL);
1:751ba90:             connection = factory.createConnection();
1:751ba90:             Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:751ba90:             MessageProducer producer = session.createProducer(destination);
1:751ba90:             producer.setTimeToLive(0);
1:751ba90:             connection.start();
1:751ba90: 
1:751ba90:             for (int i = 0; i < count; i++) {
1:751ba90:                 int id = i + 1;
1:751ba90:                 TextMessage message = session.createTextMessage("Message " + id);
1:751ba90:                 message.setIntProperty("MsgNumber", id);
1:751ba90:                 producer.send(message);
1:751ba90: 
1:751ba90:                 if (id % 500 == 0) {
1:751ba90:                     LOG.info("sent " + id + ", ith " + message);
1:751ba90:                 }
1:751ba90:             }
1:751ba90:         } finally {
1:751ba90:             try {
1:751ba90:                 if (connection != null) {
1:751ba90:                     connection.close();
1:751ba90:                 }
1:751ba90:             } catch (Throwable e) {
1:751ba90:             }
1:751ba90:         }
1:751ba90:     }
1:751ba90: 
1:751ba90:     public void uncaughtException(Thread t, Throwable e) {
1:751ba90:         exceptions.add(e);
1:751ba90:     }
1:751ba90: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:751ba90
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.*;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: import javax.jms.*;
1: import javax.jms.Queue;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class AMQ2171Test implements Thread.UncaughtExceptionHandler {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2171Test.class);
1:     private static final String BROKER_URL = "tcp://localhost:0";
1:     private static final int QUEUE_SIZE = 100;
1: 
1:     private static BrokerService brokerService;
1:     private static Queue destination;
1: 
1:     private String brokerUri;
1:     private String brokerUriNoPrefetch;
1:     private Collection<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         // Start an embedded broker up.
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.addConnector(BROKER_URL);
1:         brokerService.start();
1: 
1:         brokerUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString().toString();
1:         brokerUriNoPrefetch = brokerUri + "?jms.prefetchPolicy.all=0";
1: 
1:         destination = new ActiveMQQueue("Test");
1:         produce(brokerUri, QUEUE_SIZE);
1:     }
1: 
1:     @Before
1:     public void addHandler() {
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testBrowsePrefetch() throws Exception {
1:         runTest(brokerUri);
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testBrowseNoPrefetch() throws Exception {
1:         runTest(brokerUriNoPrefetch);
1:     }
1: 
1:     private void runTest(String brokerURL) throws Exception {
1: 
1:         Connection connection = new ActiveMQConnectionFactory(brokerURL).createConnection();
1: 
1:         try {
1:             connection.start();
1: 
1:             Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:             @SuppressWarnings("unchecked")
1:             Enumeration<Message> unread = (Enumeration<Message>) session.createBrowser(destination).getEnumeration();
1: 
1:             int count = 0;
1:             while (unread.hasMoreElements()) {
1:                 unread.nextElement();
1:                 count++;
1:             }
1: 
1:             assertEquals(QUEUE_SIZE, count);
1:             assertTrue(exceptions.isEmpty());
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:                 exceptions.add(e);
1:             }
1:         }
1:     }
1: 
1:     private static void produce(String brokerURL, int count) throws Exception {
1:         Connection connection = null;
1: 
1:         try {
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURL);
1:             connection = factory.createConnection();
1:             Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setTimeToLive(0);
1:             connection.start();
1: 
1:             for (int i = 0; i < count; i++) {
1:                 int id = i + 1;
1:                 TextMessage message = session.createTextMessage("Message " + id);
1:                 message.setIntProperty("MsgNumber", id);
1:                 producer.send(message);
1: 
1:                 if (id % 500 == 0) {
1:                     LOG.info("sent " + id + ", ith " + message);
1:                 }
1:             }
1:         } finally {
1:             try {
1:                 if (connection != null) {
1:                     connection.close();
1:                 }
1:             } catch (Throwable e) {
1:             }
1:         }
1:     }
1: 
1:     public void uncaughtException(Thread t, Throwable e) {
1:         exceptions.add(e);
1:     }
1: }
============================================================================