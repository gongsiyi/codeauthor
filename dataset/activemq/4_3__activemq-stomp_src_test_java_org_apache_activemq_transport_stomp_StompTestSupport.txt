1:1236bbf: /**
1:1236bbf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1236bbf:  * contributor license agreements.  See the NOTICE file distributed with
1:1236bbf:  * this work for additional information regarding copyright ownership.
1:1236bbf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1236bbf:  * (the "License"); you may not use this file except in compliance with
1:1236bbf:  * the License.  You may obtain a copy of the License at
1:1236bbf:  *
1:1236bbf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1236bbf:  *
1:1236bbf:  * Unless required by applicable law or agreed to in writing, software
1:1236bbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1236bbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1236bbf:  * See the License for the specific language governing permissions and
1:1236bbf:  * limitations under the License.
1:1236bbf:  */
6:1236bbf: 
1:1236bbf: package org.apache.activemq.transport.stomp;
1:1236bbf: 
1:1236bbf: import java.io.File;
1:1236bbf: import java.io.IOException;
1:1236bbf: import java.net.Socket;
1:1236bbf: import java.security.ProtectionDomain;
1:1236bbf: import java.util.ArrayList;
1:1236bbf: import java.util.List;
1:540a66b: import java.util.Vector;
1:1236bbf: 
1:2468be1: import javax.jms.JMSException;
1:2468be1: import javax.management.MalformedObjectNameException;
1:2468be1: import javax.management.ObjectName;
1:2468be1: 
1:1236bbf: import org.apache.activemq.ActiveMQConnectionFactory;
1:1236bbf: import org.apache.activemq.broker.BrokerPlugin;
1:1236bbf: import org.apache.activemq.broker.BrokerService;
1:1236bbf: import org.apache.activemq.broker.TransportConnector;
1:2468be1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:2468be1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:0fdd461: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:1236bbf: import org.apache.activemq.filter.DestinationMapEntry;
1:1236bbf: import org.apache.activemq.security.AuthenticationUser;
1:1236bbf: import org.apache.activemq.security.AuthorizationEntry;
1:1236bbf: import org.apache.activemq.security.AuthorizationPlugin;
1:1236bbf: import org.apache.activemq.security.DefaultAuthorizationMap;
1:1236bbf: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:8320e66: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1:1236bbf: import org.apache.activemq.transport.stomp.util.ResourceLoadingSslContext;
1:1236bbf: import org.apache.activemq.transport.stomp.util.XStreamBrokerContext;
1:1236bbf: import org.junit.After;
1:1236bbf: import org.junit.Before;
1:1236bbf: import org.junit.Rule;
1:1236bbf: import org.junit.rules.TestName;
1:388c16d: import org.slf4j.Logger;
1:388c16d: import org.slf4j.LoggerFactory;
1:1236bbf: 
1:1236bbf: public class StompTestSupport {
1:1236bbf: 
1:388c16d:     protected static final Logger LOG = LoggerFactory.getLogger(StompTestSupport.class);
1:388c16d: 
1:1236bbf:     protected BrokerService brokerService;
1:540a66b:     protected int openwirePort;
1:1236bbf:     protected int port;
1:1236bbf:     protected int sslPort;
1:1236bbf:     protected int nioPort;
1:1236bbf:     protected int nioSslPort;
1:04ee70a:     protected int autoPort;
1:04ee70a:     protected int autoSslPort;
1:04ee70a:     protected int autoNioPort;
1:04ee70a:     protected int autoNioSslPort;
1:1236bbf:     protected String jmsUri = "vm://localhost";
1:540a66b:     protected StompConnection stompConnection;
1:1236bbf:     protected ActiveMQConnectionFactory cf;
1:540a66b:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1:1236bbf: 
1:1236bbf:     @Rule public TestName name = new TestName();
1:1236bbf: 
1:1236bbf:     public File basedir() throws IOException {
1:1236bbf:         ProtectionDomain protectionDomain = getClass().getProtectionDomain();
1:1236bbf:         return new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalFile();
2:1236bbf:     }
1:2468be1: 
1:1236bbf:     public static void main(String[] args) throws Exception {
1:1236bbf:         final StompTestSupport s = new StompTestSupport();
1:1236bbf: 
1:1236bbf:         s.sslPort = 5675;
1:1236bbf:         s.port = 5676;
1:1236bbf:         s.nioPort = 5677;
1:1236bbf:         s.nioSslPort = 5678;
1:04ee70a:         s.autoPort = 5679;
1:04ee70a:         s.autoSslPort = 5680;
1:04ee70a:         s.autoNioPort = 5681;
1:04ee70a:         s.autoNioSslPort = 5682;
1:1236bbf: 
1:1236bbf:         s.startBroker();
1:1236bbf:         while(true) {
1:1236bbf:             Thread.sleep(100000);
1:1236bbf:         }
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getName() {
1:1236bbf:         return name.getMethodName();
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     @Before
1:1236bbf:     public void setUp() throws Exception {
1:388c16d:         LOG.info("========== start " + getName() + " ==========");
1:1236bbf:         startBroker();
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     @After
1:1236bbf:     public void tearDown() throws Exception {
1:1236bbf:         try {
1:1236bbf:             stompDisconnect();
1:1236bbf:         } catch (Exception ex) {
1:1236bbf:             // its okay if the stomp connection is already closed.
1:1236bbf:         } finally {
1:1236bbf:             stopBroker();
1:1236bbf:         }
1:540a66b:         LOG.info("========== finished " + getName() + " ==========");
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void startBroker() throws Exception {
1:540a66b:         createBroker(true);
1:1236bbf: 
1:1236bbf:         XStreamBrokerContext context = new XStreamBrokerContext();
1:1236bbf:         brokerService.setBrokerContext(context);
1:1236bbf: 
1:1236bbf:         applyBrokerPolicies();
1:1236bbf:         applyMemoryLimitPolicy();
1:1236bbf: 
1:1236bbf:         // Setup SSL context...
1:1236bbf:         File keyStore = new File(basedir(), "src/test/resources/server.keystore");
1:1236bbf:         File trustStore = new File(basedir(), "src/test/resources/client.keystore");
1:1236bbf: 
1:1236bbf:         final ResourceLoadingSslContext sslContext = new ResourceLoadingSslContext();
1:1236bbf:         sslContext.setKeyStore(keyStore.getCanonicalPath());
1:1236bbf:         sslContext.setKeyStorePassword("password");
1:1236bbf:         sslContext.setTrustStore(trustStore.getCanonicalPath());
1:1236bbf:         sslContext.setTrustStorePassword("password");
1:1236bbf:         sslContext.afterPropertiesSet();
1:1236bbf:         brokerService.setSslContext(sslContext);
1:1236bbf: 
1:540a66b:         System.setProperty("javax.net.ssl.trustStore", keyStore.getCanonicalPath());
1:540a66b:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:540a66b:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:540a66b:         System.setProperty("javax.net.ssl.keyStore", trustStore.getCanonicalPath());
1:540a66b:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:540a66b:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:540a66b: 
1:1236bbf:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1:1236bbf: 
1:540a66b:         addTranportConnectors();
1:1236bbf:         addOpenWireConnector();
1:1236bbf: 
1:1236bbf:         BrokerPlugin authenticationPlugin = configureAuthentication();
1:1236bbf:         if (authenticationPlugin != null) {
1:1236bbf:             plugins.add(configureAuthorization());
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         BrokerPlugin authorizationPlugin = configureAuthorization();
1:1236bbf:         if (authorizationPlugin != null) {
1:1236bbf:             plugins.add(configureAuthentication());
1:1236bbf:         }
1:1236bbf: 
1:533cedc:         addAdditionalPlugins(plugins);
1:533cedc: 
1:1236bbf:         if (!plugins.isEmpty()) {
1:1236bbf:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:1236bbf:             brokerService.setPlugins(plugins.toArray(array));
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         brokerService.start();
1:1236bbf:         brokerService.waitUntilStarted();
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     public void stopBroker() throws Exception {
1:540a66b:         if (brokerService != null) {
1:540a66b:             brokerService.stop();
1:540a66b:             brokerService.waitUntilStopped();
1:540a66b:             brokerService = null;
1:540a66b:         }
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     public void restartBroker() throws Exception {
1:540a66b:         restartBroker(false);
1:540a66b:     }
1:540a66b: 
1:540a66b:     public void restartBroker(boolean deleteAllOnStartup) throws Exception {
1:540a66b:         stopBroker();
1:540a66b:         createBroker(deleteAllOnStartup);
1:540a66b:         brokerService.start();
1:540a66b:         brokerService.waitUntilStarted();
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected void createBroker(boolean deleteAllOnStartup) throws Exception {
1:1236bbf:         brokerService = new BrokerService();
1:540a66b:         brokerService.setPersistent(isPersistent());
1:540a66b:         brokerService.setDeleteAllMessagesOnStartup(deleteAllOnStartup);
1:1236bbf:         brokerService.setAdvisorySupport(false);
1:1236bbf:         brokerService.setSchedulerSupport(true);
1:1236bbf:         brokerService.setPopulateJMSXUserID(true);
1:8320e66:         brokerService.setSchedulerSupport(true);
1:540a66b:         brokerService.setUseJmx(isUseJmx());
1:388c16d:         brokerService.getManagementContext().setCreateConnector(false);
1:388c16d:         brokerService.getManagementContext().setCreateMBeanServer(false);
1:1236bbf:     }
1:8320e66: 
1:533cedc:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:533cedc:     }
1:533cedc: 
1:540a66b:     protected void applyMemoryLimitPolicy() throws Exception {
1:540a66b:     }
1:540a66b: 
1:1236bbf:     protected BrokerPlugin configureAuthentication() throws Exception {
1:1236bbf:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:1236bbf:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:1236bbf:         users.add(new AuthenticationUser("user", "password", "users"));
1:1236bbf:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:1236bbf:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:8320e66: 
1:1236bbf:         return authenticationPlugin;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected BrokerPlugin configureAuthorization() throws Exception {
1:1236bbf: 
1:1236bbf:         @SuppressWarnings("rawtypes")
1:1236bbf:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1:1236bbf: 
1:1236bbf:         AuthorizationEntry entry = new AuthorizationEntry();
1:1236bbf:         entry.setQueue(">");
1:1236bbf:         entry.setRead("admins");
1:1236bbf:         entry.setWrite("admins");
1:1236bbf:         entry.setAdmin("admins");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setQueue("USERS.>");
1:1236bbf:         entry.setRead("users");
1:1236bbf:         entry.setWrite("users");
1:1236bbf:         entry.setAdmin("users");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setQueue("GUEST.>");
1:1236bbf:         entry.setRead("guests");
1:1236bbf:         entry.setWrite("guests,users");
1:1236bbf:         entry.setAdmin("guests,users");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setTopic(">");
1:1236bbf:         entry.setRead("admins");
1:1236bbf:         entry.setWrite("admins");
1:1236bbf:         entry.setAdmin("admins");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setTopic("USERS.>");
1:1236bbf:         entry.setRead("users");
1:1236bbf:         entry.setWrite("users");
1:1236bbf:         entry.setAdmin("users");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setTopic("GUEST.>");
1:1236bbf:         entry.setRead("guests");
1:1236bbf:         entry.setWrite("guests,users");
1:1236bbf:         entry.setAdmin("guests,users");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf:         entry = new AuthorizationEntry();
1:1236bbf:         entry.setTopic("ActiveMQ.Advisory.>");
1:1236bbf:         entry.setRead("guests,users");
1:1236bbf:         entry.setWrite("guests,users");
1:1236bbf:         entry.setAdmin("guests,users");
1:1236bbf:         authorizationEntries.add(entry);
1:1236bbf: 
1:8320e66:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:8320e66:         tempEntry.setRead("admins");
1:8320e66:         tempEntry.setWrite("admins");
1:8320e66:         tempEntry.setAdmin("admins");
1:8320e66: 
1:8320e66:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:8320e66:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:1236bbf:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:1236bbf: 
1:1236bbf:         return authorizationPlugin;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected void applyBrokerPolicies() throws Exception {
1:1236bbf:         // NOOP here
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     public void addOpenWireConnector() throws Exception {
1:540a66b:         cf = new ActiveMQConnectionFactory(jmsUri);
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     protected void addTranportConnectors() throws Exception {
1:1236bbf:         TransportConnector connector = null;
1:1236bbf: 
1:540a66b:         if (isUseTcpConnector()) {
1:540a66b:             connector = brokerService.addConnector(
1:540a66b:                 "stomp://0.0.0.0:" + port + getAdditionalConfig());
1:540a66b:             port = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using stomp port " + port);
1:540a66b:         }
1:540a66b:         if (isUseSslConnector()) {
1:540a66b:             connector = brokerService.addConnector(
1:540a66b:                 "stomp+ssl://0.0.0.0:" + sslPort + getAdditionalConfig());
1:540a66b:             sslPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using stomp+ssl port " + sslPort);
1:540a66b:         }
1:540a66b:         if (isUseNioConnector()) {
1:540a66b:             connector = brokerService.addConnector(
1:540a66b:                 "stomp+nio://0.0.0.0:" + nioPort + getAdditionalConfig());
1:540a66b:             nioPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using stomp+nio port " + nioPort);
1:540a66b:         }
1:540a66b:         if (isUseNioPlusSslConnector()) {
1:540a66b:             connector = brokerService.addConnector(
1:540a66b:                 "stomp+nio+ssl://0.0.0.0:" + nioSslPort + getAdditionalConfig());
1:540a66b:             nioSslPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using stomp+nio+ssl port " + nioSslPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto://0.0.0.0:" + autoPort + getAdditionalConfig());
1:04ee70a:             autoPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using auto port " + autoPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoSslConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+ssl://0.0.0.0:" + autoSslPort + getAdditionalConfig());
1:04ee70a:             autoSslPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using auto+ssl port " + autoSslPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoNioConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+nio://0.0.0.0:" + autoNioPort + getAdditionalConfig());
1:04ee70a:             autoNioPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using auto+nio port " + autoNioPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoNioPlusSslConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+nio+ssl://0.0.0.0:" + autoNioSslPort + getAdditionalConfig());
1:04ee70a:             autoNioSslPort = connector.getConnectUri().getPort();
1:04ee70a:             LOG.debug("Using auto+nio+ssl port " + autoNioSslPort);
1:540a66b:         }
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     protected boolean isPersistent() {
1:540a66b:         return false;
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected boolean isUseJmx() {
1:540a66b:         return true;
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected boolean isUseTcpConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected boolean isUseSslConnector() {
1:540a66b:         return false;
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected boolean isUseNioConnector() {
1:540a66b:         return false;
1:540a66b:     }
1:540a66b: 
1:540a66b:     protected boolean isUseNioPlusSslConnector() {
1:540a66b:         return false;
1:540a66b:     }
1:540a66b: 
1:04ee70a:     protected boolean isUseAutoConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoSslConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoNioConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoNioPlusSslConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:540a66b:     protected String getAdditionalConfig() {
1:540a66b:         return "";
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected StompConnection stompConnect() throws Exception {
1:1236bbf:         if (stompConnection == null) {
1:1236bbf:             stompConnection = new StompConnection();
1:1236bbf:         }
1:1236bbf:         stompConnection.open(createSocket());
1:1236bbf:         return stompConnection;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected StompConnection stompConnect(StompConnection connection) throws Exception {
1:1236bbf:         connection.open(createSocket());
1:1236bbf:         return stompConnection;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected Socket createSocket() throws IOException {
1:1236bbf:         return new Socket("127.0.0.1", this.port);
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected String getQueueName() {
1:1236bbf:         return getClass().getName() + "." + name.getMethodName();
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected String getTopicName() {
1:1236bbf:         return getClass().getName() + "." + name.getMethodName();
1:1236bbf:     }
1:1236bbf: 
1:540a66b:     protected void stompDisconnect() throws Exception {
1:1236bbf:         if (stompConnection != null) {
1:540a66b:             stompConnection.disconnect();
1:1236bbf:             stompConnection.close();
1:1236bbf:             stompConnection = null;
1:1236bbf:         }
1:1236bbf:     }
1:2468be1: 
1:2468be1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:2468be1:         ObjectName brokerViewMBean = new ObjectName(
1:2468be1:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:2468be1:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:2468be1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:2468be1:         return proxy;
1:2468be1:     }
1:2468be1: 
1:2468be1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:2468be1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
2:2468be1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
2:2468be1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:2468be1:         return proxy;
1:2468be1:     }
1:2468be1: 
1:0fdd461:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:0fdd461:         ObjectName topicViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:0fdd461:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:0fdd461:                 .newProxyInstance(topicViewMBeanName, TopicViewMBean.class, true);
1:2468be1:         return proxy;
1:2468be1:     }
1:1236bbf: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e100638
/////////////////////////////////////////////////////////////////////////
commit:a7e2a44
/////////////////////////////////////////////////////////////////////////
0:         System.setProperty("org.apache.activemq.SERIALIZABLE_PACKAGES", "*");
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     protected int autoPort;
1:     protected int autoSslPort;
1:     protected int autoNioPort;
1:     protected int autoNioSslPort;
/////////////////////////////////////////////////////////////////////////
1:         s.autoPort = 5679;
1:         s.autoSslPort = 5680;
1:         s.autoNioPort = 5681;
1:         s.autoNioSslPort = 5682;
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Using stomp port " + port);
1:             LOG.debug("Using stomp+ssl port " + sslPort);
1:             LOG.debug("Using stomp+nio port " + nioPort);
1:             LOG.debug("Using stomp+nio+ssl port " + nioSslPort);
1:         }
1:         if (isUseAutoConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto://0.0.0.0:" + autoPort + getAdditionalConfig());
1:             autoPort = connector.getConnectUri().getPort();
1:             LOG.debug("Using auto port " + autoPort);
1:         }
1:         if (isUseAutoSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+ssl://0.0.0.0:" + autoSslPort + getAdditionalConfig());
1:             autoSslPort = connector.getConnectUri().getPort();
1:             LOG.debug("Using auto+ssl port " + autoSslPort);
1:         }
1:         if (isUseAutoNioConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+nio://0.0.0.0:" + autoNioPort + getAdditionalConfig());
1:             autoNioPort = connector.getConnectUri().getPort();
1:             LOG.debug("Using auto+nio port " + autoNioPort);
1:         }
1:         if (isUseAutoNioPlusSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+nio+ssl://0.0.0.0:" + autoNioSslPort + getAdditionalConfig());
1:             autoNioSslPort = connector.getConnectUri().getPort();
1:             LOG.debug("Using auto+nio+ssl port " + autoNioSslPort);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseAutoConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoSslConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoNioConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoNioPlusSslConnector() {
1:         return false;
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
1:     protected int openwirePort;
1:     protected StompConnection stompConnection;
1:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("========== finished " + getName() + " ==========");
1:         createBroker(true);
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("javax.net.ssl.trustStore", keyStore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", trustStore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         addTranportConnectors();
/////////////////////////////////////////////////////////////////////////
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     public void restartBroker() throws Exception {
1:         restartBroker(false);
1:     }
1: 
1:     public void restartBroker(boolean deleteAllOnStartup) throws Exception {
1:         stopBroker();
1:         createBroker(deleteAllOnStartup);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     protected void createBroker(boolean deleteAllOnStartup) throws Exception {
1:         brokerService.setPersistent(isPersistent());
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllOnStartup);
1:         brokerService.setUseJmx(isUseJmx());
/////////////////////////////////////////////////////////////////////////
1:     protected void applyMemoryLimitPolicy() throws Exception {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void addOpenWireConnector() throws Exception {
1:         cf = new ActiveMQConnectionFactory(jmsUri);
1:     protected void addTranportConnectors() throws Exception {
1:         if (isUseTcpConnector()) {
1:             connector = brokerService.addConnector(
1:                 "stomp://0.0.0.0:" + port + getAdditionalConfig());
1:             port = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp port " + port);
1:         }
1:         if (isUseSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "stomp+ssl://0.0.0.0:" + sslPort + getAdditionalConfig());
1:             sslPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+ssl port " + sslPort);
1:         }
1:         if (isUseNioConnector()) {
1:             connector = brokerService.addConnector(
1:                 "stomp+nio://0.0.0.0:" + nioPort + getAdditionalConfig());
1:             nioPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+nio port " + nioPort);
1:         }
1:         if (isUseNioPlusSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "stomp+nio+ssl://0.0.0.0:" + nioSslPort + getAdditionalConfig());
1:             nioSslPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+nio+ssl port " + nioSslPort);
1:         }
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseJmx() {
1:         return true;
1:     }
1: 
1:     protected boolean isUseTcpConnector() {
1:         return true;
1:     }
1: 
1:     protected boolean isUseSslConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseNioConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseNioPlusSslConnector() {
1:         return false;
1:     }
1: 
1:     protected String getAdditionalConfig() {
1:         return "";
/////////////////////////////////////////////////////////////////////////
1:     protected void stompDisconnect() throws Exception {
1:             stompConnection.disconnect();
commit:551f4fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:388c16d
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(StompTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("========== start " + getName() + " ==========");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("========== finished " + getName() + " ==========");
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.getManagementContext().setCreateMBeanServer(false);
commit:533cedc
/////////////////////////////////////////////////////////////////////////
1:         addAdditionalPlugins(plugins);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:     }
1: 
commit:0fdd461
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName topicViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(topicViewMBeanName, TopicViewMBean.class, true);
commit:8320e66
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
0: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setSchedulerSupport(true);
1: 
0:         JobSchedulerStoreImpl jobStore = new JobSchedulerStoreImpl();
0:         jobStore.setDirectory(new File("activemq-data"));
1: 
0:         brokerService.setJobSchedulerStore(jobStore);
/////////////////////////////////////////////////////////////////////////
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("admins");
1:         tempEntry.setWrite("admins");
1:         tempEntry.setAdmin("admins");
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2468be1
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
0:     protected QueueViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.security.ProtectionDomain;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.AutoFailTestSupport;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
0: import org.apache.activemq.security.AuthorizationMap;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.transport.stomp.util.ResourceLoadingSslContext;
1: import org.apache.activemq.transport.stomp.util.XStreamBrokerContext;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: 
1: public class StompTestSupport {
1: 
0:     protected final AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {};
1:     protected BrokerService brokerService;
1:     protected int port;
1:     protected int sslPort;
1:     protected int nioPort;
1:     protected int nioSslPort;
1:     protected String jmsUri = "vm://localhost";
0:     protected StompConnection stompConnection = new StompConnection();
1:     protected ActiveMQConnectionFactory cf;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     public File basedir() throws IOException {
1:         ProtectionDomain protectionDomain = getClass().getProtectionDomain();
1:         return new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalFile();
1:     }
1: 
1:     public static void main(String[] args) throws Exception {
1:         final StompTestSupport s = new StompTestSupport();
1: 
1:         s.sslPort = 5675;
1:         s.port = 5676;
1:         s.nioPort = 5677;
1:         s.nioSslPort = 5678;
1: 
1:         s.startBroker();
1:         while(true) {
1:             Thread.sleep(100000);
1:         }
1:     }
1: 
1:     public String getName() {
1:         return name.getMethodName();
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         autoFailTestSupport.startAutoFailThread();
1:         startBroker();
0:         stompConnect();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
0:         autoFailTestSupport.stopAutoFailThread();
1:         try {
1:             stompDisconnect();
1:         } catch (Exception ex) {
1:             // its okay if the stomp connection is already closed.
1:         } finally {
1:             stopBroker();
1:         }
1:     }
1: 
1:     public void startBroker() throws Exception {
1: 
0:         createBroker();
1: 
1:         XStreamBrokerContext context = new XStreamBrokerContext();
1:         brokerService.setBrokerContext(context);
1: 
1:         applyBrokerPolicies();
1:         applyMemoryLimitPolicy();
1: 
1:         // Setup SSL context...
1:         File keyStore = new File(basedir(), "src/test/resources/server.keystore");
1:         File trustStore = new File(basedir(), "src/test/resources/client.keystore");
1: 
1:         final ResourceLoadingSslContext sslContext = new ResourceLoadingSslContext();
1:         sslContext.setKeyStore(keyStore.getCanonicalPath());
1:         sslContext.setKeyStorePassword("password");
1:         sslContext.setTrustStore(trustStore.getCanonicalPath());
1:         sslContext.setTrustStorePassword("password");
1:         sslContext.afterPropertiesSet();
1:         brokerService.setSslContext(sslContext);
1: 
1:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1: 
0:         addStompConnector();
1:         addOpenWireConnector();
1: 
0:         cf = new ActiveMQConnectionFactory(jmsUri);
1: 
1:         BrokerPlugin authenticationPlugin = configureAuthentication();
1:         if (authenticationPlugin != null) {
1:             plugins.add(configureAuthorization());
1:         }
1: 
1:         BrokerPlugin authorizationPlugin = configureAuthorization();
1:         if (authorizationPlugin != null) {
1:             plugins.add(configureAuthentication());
1:         }
1: 
1:         if (!plugins.isEmpty()) {
1:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:             brokerService.setPlugins(plugins.toArray(array));
1:         }
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
0:     protected void applyMemoryLimitPolicy() throws Exception {
1:     }
1: 
0:     protected void createBroker() throws Exception {
1:         brokerService = new BrokerService();
0:         brokerService.setPersistent(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(true);
1:         brokerService.setPopulateJMSXUserID(true);
1:     }
1: 
1:     protected BrokerPlugin configureAuthentication() throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:         users.add(new AuthenticationUser("user", "password", "users"));
1:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         return authenticationPlugin;
1:     }
1: 
1:     protected BrokerPlugin configureAuthorization() throws Exception {
1: 
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("ActiveMQ.Advisory.>");
1:         entry.setRead("guests,users");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1: 
0:         AuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         return authorizationPlugin;
1:     }
1: 
1:     protected void applyBrokerPolicies() throws Exception {
1:         // NOOP here
1:     }
1: 
0:     protected void addOpenWireConnector() throws Exception {
1:     }
1: 
0:     protected void addStompConnector() throws Exception {
1:         TransportConnector connector = null;
1: 
0:         // Subclasses can tailor this list to speed up the test startup / shutdown
0:         connector = brokerService.addConnector("stomp+ssl://0.0.0.0:"+sslPort);
0:         sslPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio://0.0.0.0:"+nioPort);
0:         nioPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio+ssl://0.0.0.0:"+nioSslPort);
0:         nioSslPort = connector.getConnectUri().getPort();
1:     }
1: 
0:     public void stopBroker() throws Exception {
0:         if (brokerService != null) {
0:             brokerService.stop();
0:             brokerService.waitUntilStopped();
0:             brokerService = null;
1:         }
1:     }
1: 
1:     protected StompConnection stompConnect() throws Exception {
1:         if (stompConnection == null) {
1:             stompConnection = new StompConnection();
1:         }
1:         stompConnection.open(createSocket());
1:         return stompConnection;
1:     }
1: 
1:     protected StompConnection stompConnect(StompConnection connection) throws Exception {
1:         connection.open(createSocket());
1:         return stompConnection;
1:     }
1: 
1:     protected Socket createSocket() throws IOException {
1:         return new Socket("127.0.0.1", this.port);
1:     }
1: 
1:     protected String getQueueName() {
1:         return getClass().getName() + "." + name.getMethodName();
1:     }
1: 
1:     protected String getTopicName() {
1:         return getClass().getName() + "." + name.getMethodName();
1:     }
1: 
0:     protected void stompDisconnect() throws IOException {
1:         if (stompConnection != null) {
1:             stompConnection.close();
1:             stompConnection = null;
1:         }
1:     }
1: }
============================================================================