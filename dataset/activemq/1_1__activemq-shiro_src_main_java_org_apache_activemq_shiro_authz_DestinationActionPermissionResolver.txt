1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.command.ActiveMQDestination;
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.permission.WildcardPermission;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: import java.util.HashSet;
1:f9451e5: import java.util.LinkedHashSet;
1:f9451e5: import java.util.Set;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * A {@code DestinationActionPermissionResolver} inspects {@link DestinationAction}s and returns one or more
1:f9451e5:  * {@link WildcardPermission}s that must be granted to a {@code Subject} in order for that {@code Subject} to
1:f9451e5:  * perform the action being taken on an {@link ActiveMQDestination}.
1:f9451e5:  * <p/>
1:f9451e5:  * See the {@link #createPermissionString createPermissionString documentation} to see what the
1:f9451e5:  * resulting {@link WildcardPermission} instances would look like.
1:f9451e5:  *
1:f9451e5:  * @see #createPermissionString(org.apache.activemq.command.ActiveMQDestination, String) )
1:f9451e5:  * @see #setPermissionStringPrefix(String)
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class DestinationActionPermissionResolver implements ActionPermissionResolver {
1:f9451e5: 
1:f9451e5:     private String permissionStringPrefix;
1:f9451e5:     private boolean permissionStringCaseSensitive = true;
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns the String prefix that should be automatically prepended to a permission String before the
1:f9451e5:      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a
1:f9451e5:      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any
1:f9451e5:      * others you might assign to user accounts.  The default value is {@code null}, indicating no prefix will be
1:f9451e5:      * set by default.
1:f9451e5:      * <p/>
1:f9451e5:      * For example, the default settings might result in permissions Strings that look like this:
1:f9451e5:      * <pre>
1:f9451e5:      * topic:TEST:create
1:f9451e5:      * temp-queue:MyQueue:remove
1:f9451e5:      * topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      * <p/>
1:f9451e5:      * However, if your application has any application-specific permissions that start with the tokens {@code topic},
1:f9451e5:      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between
1:f9451e5:      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the
1:f9451e5:      * {@code permissionStringPrefix}. For example, if you set:
1:f9451e5:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:
1:f9451e5:      * <pre>
1:f9451e5:      * jms:topic:TEST:create
1:f9451e5:      * jms:temp-queue:MyQueue:remove
1:f9451e5:      * jms:topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      * <p/>
1:f9451e5:      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:
1:f9451e5:      * <pre>
1:f9451e5:      * activeMQ:topic:TEST:create
1:f9451e5:      * activeMQ:temp-queue:MyQueue:remove
1:f9451e5:      * activeMQ:topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      *
1:f9451e5:      * @return any String prefix that should be automatically prepended to a permission String before the
1:f9451e5:      *         String is converted to a {@link WildcardPermission} instance.  Useful for namespacing permissions.
1:f9451e5:      */
1:f9451e5:     public String getPermissionStringPrefix() {
1:f9451e5:         return permissionStringPrefix;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Sets the String prefix that should be automatically prepended to a permission String before the
1:f9451e5:      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a
1:f9451e5:      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any
1:f9451e5:      * others you might assign to user accounts. The default value is {@code null}, indicating no prefix will be
1:f9451e5:      * set by default.
1:f9451e5:      * <p/>
1:f9451e5:      * For example, the default settings might result in permissions Strings that look like this:
1:f9451e5:      * <pre>
1:f9451e5:      * topic:TEST:create
1:f9451e5:      * temp-queue:MyQueue:remove
1:f9451e5:      * topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      * <p/>
1:f9451e5:      * However, if your application has any application-specific permissions that start with the tokens {@code topic},
1:f9451e5:      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between
1:f9451e5:      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the
1:f9451e5:      * {@code permissionStringPrefix}. For example, if you set:
1:f9451e5:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:
1:f9451e5:      * <pre>
1:f9451e5:      * jms:topic:TEST:create
1:f9451e5:      * jms:temp-queue:MyQueue:remove
1:f9451e5:      * jms:topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      * <p/>
1:f9451e5:      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:
1:f9451e5:      * <pre>
1:f9451e5:      * activeMQ:topic:TEST:create
1:f9451e5:      * activeMQ:temp-queue:MyQueue:remove
1:f9451e5:      * activeMQ:topic:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      *
1:f9451e5:      * @param permissionStringPrefix any String prefix that should be automatically prepended to a permission String
1:f9451e5:      *                               before the String is converted to a {@link WildcardPermission} instance.  Useful
1:f9451e5:      *                               for namespacing permissions.
1:f9451e5:      */
1:f9451e5:     public void setPermissionStringPrefix(String permissionStringPrefix) {
1:f9451e5:         this.permissionStringPrefix = permissionStringPrefix;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,
1:f9451e5:      * {@code false} otherwise.  The default value is {@code true}, which is <em>not</em> the normal
1:f9451e5:      * {@link WildcardPermission} default setting.  This default was chosen to reflect ActiveMQ's
1:f9451e5:      * <a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.
1:f9451e5:      *
1:f9451e5:      * @return {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,
1:f9451e5:      *         {@code false} otherwise.
1:f9451e5:      */
1:f9451e5:     public boolean isPermissionStringCaseSensitive() {
1:f9451e5:         return permissionStringCaseSensitive;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Sets whether returned {@link WildcardPermission} instances should be considered case-sensitive.
1:f9451e5:      * The default value is {@code true}, which is <em>not</em> the normal
1:f9451e5:      * {@link WildcardPermission} default setting.  This default was chosen to accurately reflect ActiveMQ's
1:f9451e5:      * <a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.
1:f9451e5:      *
1:f9451e5:      * @param permissionStringCaseSensitive whether returned {@link WildcardPermission} instances should be considered
1:f9451e5:      *                                      case-sensitive.
1:f9451e5:      */
1:f9451e5:     public void setPermissionStringCaseSensitive(boolean permissionStringCaseSensitive) {
1:f9451e5:         this.permissionStringCaseSensitive = permissionStringCaseSensitive;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Collection<Permission> getPermissions(Action action) {
1:f9451e5:         if (!(action instanceof DestinationAction)) {
1:f9451e5:             throw new IllegalArgumentException("Action argument must be a " + DestinationAction.class.getName() + " instance.");
1:f9451e5:         }
1:f9451e5:         DestinationAction da = (DestinationAction) action;
1:f9451e5:         return getPermissions(da);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected Collection<Permission> getPermissions(DestinationAction da) {
1:f9451e5:         ActiveMQDestination dest = da.getDestination();
1:f9451e5:         String verb = da.getVerb();
1:f9451e5:         return createPermissions(dest, verb);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected Collection<Permission> createPermissions(ActiveMQDestination dest, String verb) {
1:f9451e5: 
1:f9451e5:         Set<Permission> set;
1:f9451e5: 
1:f9451e5:         if (dest.isComposite()) {
1:f9451e5:             ActiveMQDestination[] composites = dest.getCompositeDestinations();
1:f9451e5:             set = new LinkedHashSet<Permission>(composites.length);
1:f9451e5:             for(ActiveMQDestination d : composites) {
1:f9451e5:                 Collection<Permission> perms = createPermissions(d, verb);
1:f9451e5:                 set.addAll(perms);
1:f9451e5:             }
1:f9451e5:         } else {
1:f9451e5:             set = new HashSet<Permission>(1);
1:f9451e5:             String permString = createPermissionString(dest, verb);
1:f9451e5:             Permission perm = createPermission(permString);
1:f9451e5:             set.add(perm);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return set;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Inspects the specified {@code destination} and {@code verb} and returns a {@link WildcardPermission}-compatible
1:f9451e5:      * String the represents the action.
1:f9451e5:      * <h3>Format</h3>
1:f9451e5:      * This implementation returns WildcardPermission strings with the following format:
1:f9451e5:      * <pre>
1:f9451e5:      * optionalPermissionStringPrefix + destinationType + ':' + destinationPhysicalName + ':' + actionVerb
1:f9451e5:      * </pre>
1:f9451e5:      * where:
1:f9451e5:      * <ol>
1:f9451e5:      * <li>{@code optionalPermissionStringPrefix} is the {@link #getPermissionStringPrefix() permissionStringPrefix}
1:f9451e5:      * followed by a colon delimiter (':').  This is only present if the {@code permissionStringPrefix} has been
1:f9451e5:      * specified and is non-null</li>
1:f9451e5:      * <li>{@code destinationType} is one of the following four string tokens:
1:f9451e5:      * <ul>
1:f9451e5:      * <li>{@code topic}</li>
1:f9451e5:      * <li>{@code temp-topic}</li>
1:f9451e5:      * <li>{@code queue}</li>
1:f9451e5:      * <li>{@code temp-queue}</li>
1:f9451e5:      * </ul>
1:f9451e5:      * based on whether the {@link DestinationAction#getDestination() destination} is
1:f9451e5:      * a topic, temporary topic, queue, or temporary queue (respectively).
1:f9451e5:      * </li>
1:f9451e5:      * <li>
1:f9451e5:      * {@code destinationPhysicalName} is
1:f9451e5:      * {@link org.apache.activemq.command.ActiveMQDestination#getPhysicalName() destination.getPhysicalName()}
1:f9451e5:      * </li>
1:f9451e5:      * <li>
1:f9451e5:      * {@code actionVerb} is {@link DestinationAction#getVerb() action.getVerb()}
1:f9451e5:      * </li>
1:f9451e5:      * </ol>
1:f9451e5:      * <h3>Examples</h3>
1:f9451e5:      * With the default settings (no {@link #getPermissionStringPrefix() permissionStringPrefix}), this might produce
1:f9451e5:      * strings that look like the following:
1:f9451e5:      * <pre>
1:f9451e5:      * topic:TEST:create
1:f9451e5:      * temp-queue:MyTempQueue:remove
1:f9451e5:      * queue:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      * If {@link #getPermissionStringPrefix() permissionStringPrefix} was set to {@code jms}, the above examples would
1:f9451e5:      * look like this:
1:f9451e5:      * <pre>
1:f9451e5:      * jms:topic:TEST:create
1:f9451e5:      * jms:temp-queue:MyTempQueue:remove
1:f9451e5:      * jms:queue:ActiveMQ.Advisory.*:read
1:f9451e5:      * </pre>
1:f9451e5:      *
1:f9451e5:      * @param dest the destination to inspect and convert to a {@link WildcardPermission} string.
1:f9451e5:      * @param verb the behavior taken on the destination
1:f9451e5:      * @return a {@link WildcardPermission} string that represents the specified {@code action}.
1:f9451e5:      * @see #getPermissionStringPrefix() getPermissionStringPrefix() for more on why you might want to set this value
1:f9451e5:      */
1:f9451e5:     protected String createPermissionString(ActiveMQDestination dest, String verb) {
1:f9451e5:         if (dest.isComposite()) {
1:f9451e5:             throw new IllegalArgumentException("Use createPermissionStrings for composite destinations.");
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         StringBuilder sb = new StringBuilder();
1:f9451e5: 
1:f9451e5:         if (permissionStringPrefix != null) {
1:f9451e5:             sb.append(permissionStringPrefix);
1:f9451e5:             if (!permissionStringPrefix.endsWith(":")) {
1:f9451e5:                 sb.append(":");
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (dest.isTemporary()) {
1:f9451e5:             sb.append("temp-");
1:f9451e5:         }
1:f9451e5:         if (dest.isTopic()) {
1:f9451e5:             sb.append("topic:");
1:f9451e5:         } else {
1:f9451e5:             sb.append("queue:");
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         sb.append(dest.getPhysicalName());
1:f9451e5:         sb.append(':');
1:f9451e5:         sb.append(verb);
1:f9451e5: 
1:f9451e5:         return sb.toString();
1:f9451e5: 
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected Permission createPermission(String permissionString) {
1:f9451e5:         return new ActiveMQWildcardPermission(permissionString, isPermissionStringCaseSensitive());
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.permission.WildcardPermission;
1: 
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.LinkedHashSet;
1: import java.util.Set;
1: 
1: /**
1:  * A {@code DestinationActionPermissionResolver} inspects {@link DestinationAction}s and returns one or more
1:  * {@link WildcardPermission}s that must be granted to a {@code Subject} in order for that {@code Subject} to
1:  * perform the action being taken on an {@link ActiveMQDestination}.
1:  * <p/>
1:  * See the {@link #createPermissionString createPermissionString documentation} to see what the
1:  * resulting {@link WildcardPermission} instances would look like.
1:  *
1:  * @see #createPermissionString(org.apache.activemq.command.ActiveMQDestination, String) )
1:  * @see #setPermissionStringPrefix(String)
1:  * @since 5.10.0
1:  */
1: public class DestinationActionPermissionResolver implements ActionPermissionResolver {
1: 
1:     private String permissionStringPrefix;
1:     private boolean permissionStringCaseSensitive = true;
1: 
1:     /**
1:      * Returns the String prefix that should be automatically prepended to a permission String before the
1:      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a
1:      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any
1:      * others you might assign to user accounts.  The default value is {@code null}, indicating no prefix will be
1:      * set by default.
1:      * <p/>
1:      * For example, the default settings might result in permissions Strings that look like this:
1:      * <pre>
1:      * topic:TEST:create
1:      * temp-queue:MyQueue:remove
1:      * topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      * <p/>
1:      * However, if your application has any application-specific permissions that start with the tokens {@code topic},
1:      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between
1:      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the
1:      * {@code permissionStringPrefix}. For example, if you set:
1:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:
1:      * <pre>
1:      * jms:topic:TEST:create
1:      * jms:temp-queue:MyQueue:remove
1:      * jms:topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      * <p/>
1:      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:
1:      * <pre>
1:      * activeMQ:topic:TEST:create
1:      * activeMQ:temp-queue:MyQueue:remove
1:      * activeMQ:topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      *
1:      * @return any String prefix that should be automatically prepended to a permission String before the
1:      *         String is converted to a {@link WildcardPermission} instance.  Useful for namespacing permissions.
1:      */
1:     public String getPermissionStringPrefix() {
1:         return permissionStringPrefix;
1:     }
1: 
1:     /**
1:      * Sets the String prefix that should be automatically prepended to a permission String before the
1:      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a
1:      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any
1:      * others you might assign to user accounts. The default value is {@code null}, indicating no prefix will be
1:      * set by default.
1:      * <p/>
1:      * For example, the default settings might result in permissions Strings that look like this:
1:      * <pre>
1:      * topic:TEST:create
1:      * temp-queue:MyQueue:remove
1:      * topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      * <p/>
1:      * However, if your application has any application-specific permissions that start with the tokens {@code topic},
1:      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between
1:      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the
1:      * {@code permissionStringPrefix}. For example, if you set:
1:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:
1:      * <pre>
1:      * jms:topic:TEST:create
1:      * jms:temp-queue:MyQueue:remove
1:      * jms:topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      * <p/>
1:      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:
1:      * <pre>
1:      * activeMQ:topic:TEST:create
1:      * activeMQ:temp-queue:MyQueue:remove
1:      * activeMQ:topic:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      *
1:      * @param permissionStringPrefix any String prefix that should be automatically prepended to a permission String
1:      *                               before the String is converted to a {@link WildcardPermission} instance.  Useful
1:      *                               for namespacing permissions.
1:      */
1:     public void setPermissionStringPrefix(String permissionStringPrefix) {
1:         this.permissionStringPrefix = permissionStringPrefix;
1:     }
1: 
1:     /**
1:      * Returns {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,
1:      * {@code false} otherwise.  The default value is {@code true}, which is <em>not</em> the normal
1:      * {@link WildcardPermission} default setting.  This default was chosen to reflect ActiveMQ's
1:      * <a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.
1:      *
1:      * @return {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,
1:      *         {@code false} otherwise.
1:      */
1:     public boolean isPermissionStringCaseSensitive() {
1:         return permissionStringCaseSensitive;
1:     }
1: 
1:     /**
1:      * Sets whether returned {@link WildcardPermission} instances should be considered case-sensitive.
1:      * The default value is {@code true}, which is <em>not</em> the normal
1:      * {@link WildcardPermission} default setting.  This default was chosen to accurately reflect ActiveMQ's
1:      * <a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.
1:      *
1:      * @param permissionStringCaseSensitive whether returned {@link WildcardPermission} instances should be considered
1:      *                                      case-sensitive.
1:      */
1:     public void setPermissionStringCaseSensitive(boolean permissionStringCaseSensitive) {
1:         this.permissionStringCaseSensitive = permissionStringCaseSensitive;
1:     }
1: 
1:     @Override
1:     public Collection<Permission> getPermissions(Action action) {
1:         if (!(action instanceof DestinationAction)) {
1:             throw new IllegalArgumentException("Action argument must be a " + DestinationAction.class.getName() + " instance.");
1:         }
1:         DestinationAction da = (DestinationAction) action;
1:         return getPermissions(da);
1:     }
1: 
1:     protected Collection<Permission> getPermissions(DestinationAction da) {
1:         ActiveMQDestination dest = da.getDestination();
1:         String verb = da.getVerb();
1:         return createPermissions(dest, verb);
1:     }
1: 
1:     protected Collection<Permission> createPermissions(ActiveMQDestination dest, String verb) {
1: 
1:         Set<Permission> set;
1: 
1:         if (dest.isComposite()) {
1:             ActiveMQDestination[] composites = dest.getCompositeDestinations();
1:             set = new LinkedHashSet<Permission>(composites.length);
1:             for(ActiveMQDestination d : composites) {
1:                 Collection<Permission> perms = createPermissions(d, verb);
1:                 set.addAll(perms);
1:             }
1:         } else {
1:             set = new HashSet<Permission>(1);
1:             String permString = createPermissionString(dest, verb);
1:             Permission perm = createPermission(permString);
1:             set.add(perm);
1:         }
1: 
1:         return set;
1:     }
1: 
1:     /**
1:      * Inspects the specified {@code destination} and {@code verb} and returns a {@link WildcardPermission}-compatible
1:      * String the represents the action.
1:      * <h3>Format</h3>
1:      * This implementation returns WildcardPermission strings with the following format:
1:      * <pre>
1:      * optionalPermissionStringPrefix + destinationType + ':' + destinationPhysicalName + ':' + actionVerb
1:      * </pre>
1:      * where:
1:      * <ol>
1:      * <li>{@code optionalPermissionStringPrefix} is the {@link #getPermissionStringPrefix() permissionStringPrefix}
1:      * followed by a colon delimiter (':').  This is only present if the {@code permissionStringPrefix} has been
1:      * specified and is non-null</li>
1:      * <li>{@code destinationType} is one of the following four string tokens:
1:      * <ul>
1:      * <li>{@code topic}</li>
1:      * <li>{@code temp-topic}</li>
1:      * <li>{@code queue}</li>
1:      * <li>{@code temp-queue}</li>
1:      * </ul>
1:      * based on whether the {@link DestinationAction#getDestination() destination} is
1:      * a topic, temporary topic, queue, or temporary queue (respectively).
1:      * </li>
1:      * <li>
1:      * {@code destinationPhysicalName} is
1:      * {@link org.apache.activemq.command.ActiveMQDestination#getPhysicalName() destination.getPhysicalName()}
1:      * </li>
1:      * <li>
1:      * {@code actionVerb} is {@link DestinationAction#getVerb() action.getVerb()}
1:      * </li>
1:      * </ol>
1:      * <h3>Examples</h3>
1:      * With the default settings (no {@link #getPermissionStringPrefix() permissionStringPrefix}), this might produce
1:      * strings that look like the following:
1:      * <pre>
1:      * topic:TEST:create
1:      * temp-queue:MyTempQueue:remove
1:      * queue:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      * If {@link #getPermissionStringPrefix() permissionStringPrefix} was set to {@code jms}, the above examples would
1:      * look like this:
1:      * <pre>
1:      * jms:topic:TEST:create
1:      * jms:temp-queue:MyTempQueue:remove
1:      * jms:queue:ActiveMQ.Advisory.*:read
1:      * </pre>
1:      *
1:      * @param dest the destination to inspect and convert to a {@link WildcardPermission} string.
1:      * @param verb the behavior taken on the destination
1:      * @return a {@link WildcardPermission} string that represents the specified {@code action}.
1:      * @see #getPermissionStringPrefix() getPermissionStringPrefix() for more on why you might want to set this value
1:      */
1:     protected String createPermissionString(ActiveMQDestination dest, String verb) {
1:         if (dest.isComposite()) {
1:             throw new IllegalArgumentException("Use createPermissionStrings for composite destinations.");
1:         }
1: 
1:         StringBuilder sb = new StringBuilder();
1: 
1:         if (permissionStringPrefix != null) {
1:             sb.append(permissionStringPrefix);
1:             if (!permissionStringPrefix.endsWith(":")) {
1:                 sb.append(":");
1:             }
1:         }
1: 
1:         if (dest.isTemporary()) {
1:             sb.append("temp-");
1:         }
1:         if (dest.isTopic()) {
1:             sb.append("topic:");
1:         } else {
1:             sb.append("queue:");
1:         }
1: 
1:         sb.append(dest.getPhysicalName());
1:         sb.append(':');
1:         sb.append(verb);
1: 
1:         return sb.toString();
1: 
1:     }
1: 
1:     protected Permission createPermission(String permissionString) {
1:         return new ActiveMQWildcardPermission(permissionString, isPermissionStringCaseSensitive());
1:     }
1: }
============================================================================