1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
2:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An expression which performs an operation on two expression values
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public abstract class ArithmeticExpression extends BinaryExpression {
1:d29ca2a: 
1:d29ca2a:     protected static final int INTEGER = 1;
1:d29ca2a:     protected static final int LONG = 2;
1:d29ca2a:     protected static final int DOUBLE = 3;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param left
1:d29ca2a:      * @param right
1:d29ca2a:      */
1:d29ca2a:     public ArithmeticExpression(Expression left, Expression right) {
1:d29ca2a:         super(left, right);
5:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Expression createPlus(Expression left, Expression right) {
1:d29ca2a:         return new ArithmeticExpression(left, right) {
1:d29ca2a:             protected Object evaluate(Object lvalue, Object rvalue) {
1:d29ca2a:                 if (lvalue instanceof String) {
1:f812e34:                     String text = (String)lvalue;
1:d29ca2a:                     String answer = text + rvalue;
1:d29ca2a:                     return answer;
1:f812e34:                 } else if (lvalue instanceof Number) {
1:f812e34:                     return plus((Number)lvalue, asNumber(rvalue));
1:d29ca2a:                 }
1:d29ca2a:                 throw new RuntimeException("Cannot call plus operation on: " + lvalue + " and: " + rvalue);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "+";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Expression createMinus(Expression left, Expression right) {
1:d29ca2a:         return new ArithmeticExpression(left, right) {
1:d29ca2a:             protected Object evaluate(Object lvalue, Object rvalue) {
1:d29ca2a:                 if (lvalue instanceof Number) {
1:f812e34:                     return minus((Number)lvalue, asNumber(rvalue));
1:d29ca2a:                 }
1:d29ca2a:                 throw new RuntimeException("Cannot call minus operation on: " + lvalue + " and: " + rvalue);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "-";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Expression createMultiply(Expression left, Expression right) {
1:d29ca2a:         return new ArithmeticExpression(left, right) {
1:d29ca2a: 
1:d29ca2a:             protected Object evaluate(Object lvalue, Object rvalue) {
1:d29ca2a:                 if (lvalue instanceof Number) {
1:f812e34:                     return multiply((Number)lvalue, asNumber(rvalue));
1:d29ca2a:                 }
1:d29ca2a:                 throw new RuntimeException("Cannot call multiply operation on: " + lvalue + " and: " + rvalue);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "*";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Expression createDivide(Expression left, Expression right) {
1:d29ca2a:         return new ArithmeticExpression(left, right) {
1:d29ca2a: 
1:d29ca2a:             protected Object evaluate(Object lvalue, Object rvalue) {
1:d29ca2a:                 if (lvalue instanceof Number) {
1:f812e34:                     return divide((Number)lvalue, asNumber(rvalue));
1:d29ca2a:                 }
1:d29ca2a:                 throw new RuntimeException("Cannot call divide operation on: " + lvalue + " and: " + rvalue);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "/";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Expression createMod(Expression left, Expression right) {
1:d29ca2a:         return new ArithmeticExpression(left, right) {
1:d29ca2a: 
1:d29ca2a:             protected Object evaluate(Object lvalue, Object rvalue) {
1:d29ca2a:                 if (lvalue instanceof Number) {
1:f812e34:                     return mod((Number)lvalue, asNumber(rvalue));
1:d29ca2a:                 }
1:d29ca2a:                 throw new RuntimeException("Cannot call mod operation on: " + lvalue + " and: " + rvalue);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "%";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number plus(Number left, Number right) {
1:d29ca2a:         switch (numberType(left, right)) {
1:f812e34:         case INTEGER:
1:f812e34:             return new Integer(left.intValue() + right.intValue());
1:f812e34:         case LONG:
1:f812e34:             return new Long(left.longValue() + right.longValue());
1:f812e34:         default:
1:f812e34:             return new Double(left.doubleValue() + right.doubleValue());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number minus(Number left, Number right) {
1:d29ca2a:         switch (numberType(left, right)) {
1:f812e34:         case INTEGER:
1:f812e34:             return new Integer(left.intValue() - right.intValue());
1:f812e34:         case LONG:
1:f812e34:             return new Long(left.longValue() - right.longValue());
1:f812e34:         default:
1:f812e34:             return new Double(left.doubleValue() - right.doubleValue());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number multiply(Number left, Number right) {
1:d29ca2a:         switch (numberType(left, right)) {
1:f812e34:         case INTEGER:
1:f812e34:             return new Integer(left.intValue() * right.intValue());
1:f812e34:         case LONG:
1:f812e34:             return new Long(left.longValue() * right.longValue());
1:f812e34:         default:
1:f812e34:             return new Double(left.doubleValue() * right.doubleValue());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number divide(Number left, Number right) {
1:d29ca2a:         return new Double(left.doubleValue() / right.doubleValue());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number mod(Number left, Number right) {
1:d29ca2a:         return new Double(left.doubleValue() % right.doubleValue());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private int numberType(Number left, Number right) {
1:d29ca2a:         if (isDouble(left) || isDouble(right)) {
1:d29ca2a:             return DOUBLE;
1:f812e34:         } else if (left instanceof Long || right instanceof Long) {
1:d29ca2a:             return LONG;
1:f812e34:         } else {
1:d29ca2a:             return INTEGER;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private boolean isDouble(Number n) {
1:d29ca2a:         return n instanceof Float || n instanceof Double;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Number asNumber(Object value) {
1:d29ca2a:         if (value instanceof Number) {
1:f812e34:             return (Number)value;
1:f812e34:         } else {
1:d29ca2a:             throw new RuntimeException("Cannot convert value: " + value + " into a number");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         Object lvalue = left.evaluate(message);
1:d29ca2a:         if (lvalue == null) {
1:d29ca2a:             return null;
1:d29ca2a:         }
1:d29ca2a:         Object rvalue = right.evaluate(message);
1:d29ca2a:         if (rvalue == null) {
1:d29ca2a:             return null;
1:d29ca2a:         }
1:d29ca2a:         return evaluate(lvalue, rvalue);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param lvalue
1:d29ca2a:      * @param rvalue
1:d29ca2a:      * @return
1:d29ca2a:      */
1:fc00993:     protected abstract Object evaluate(Object lvalue, Object rvalue);
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected abstract Object evaluate(Object lvalue, Object rvalue);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:                     String text = (String)lvalue;
1:                 } else if (lvalue instanceof Number) {
1:                     return plus((Number)lvalue, asNumber(rvalue));
/////////////////////////////////////////////////////////////////////////
1:                     return minus((Number)lvalue, asNumber(rvalue));
/////////////////////////////////////////////////////////////////////////
1:                     return multiply((Number)lvalue, asNumber(rvalue));
/////////////////////////////////////////////////////////////////////////
1:                     return divide((Number)lvalue, asNumber(rvalue));
/////////////////////////////////////////////////////////////////////////
1:                     return mod((Number)lvalue, asNumber(rvalue));
/////////////////////////////////////////////////////////////////////////
1:         case INTEGER:
1:             return new Integer(left.intValue() + right.intValue());
1:         case LONG:
1:             return new Long(left.longValue() + right.longValue());
1:         default:
1:             return new Double(left.doubleValue() + right.doubleValue());
1:         case INTEGER:
1:             return new Integer(left.intValue() - right.intValue());
1:         case LONG:
1:             return new Long(left.longValue() - right.longValue());
1:         default:
1:             return new Double(left.doubleValue() - right.doubleValue());
1:         case INTEGER:
1:             return new Integer(left.intValue() * right.intValue());
1:         case LONG:
1:             return new Long(left.longValue() * right.longValue());
1:         default:
1:             return new Double(left.doubleValue() * right.doubleValue());
/////////////////////////////////////////////////////////////////////////
1:         } else if (left instanceof Long || right instanceof Long) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             return (Number)value;
1:         } else {
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import javax.jms.JMSException;
1: 
1: /**
1:  * An expression which performs an operation on two expression values
1:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public abstract class ArithmeticExpression extends BinaryExpression {
1: 
1:     protected static final int INTEGER = 1;
1:     protected static final int LONG = 2;
1:     protected static final int DOUBLE = 3;
1: 
1:     /**
1:      * @param left
1:      * @param right
1:      */
1:     public ArithmeticExpression(Expression left, Expression right) {
1:         super(left, right);
1:     }
1: 
1:     public static Expression createPlus(Expression left, Expression right) {
1:         return new ArithmeticExpression(left, right) {
1:             protected Object evaluate(Object lvalue, Object rvalue) {
1:                 if (lvalue instanceof String) {
0:                     String text = (String) lvalue;
1:                     String answer = text + rvalue;
0:                     System.out.println("lvalue: " + lvalue + " rvalue: " + rvalue + " result: " + answer);
1:                     return answer;
1:                 }
0:                 else if (lvalue instanceof Number) {
0:                     return plus((Number) lvalue, asNumber(rvalue));
1:                 }
1:                 throw new RuntimeException("Cannot call plus operation on: " + lvalue + " and: " + rvalue);
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "+";
1:             }
1:         };
1:     }
1: 
1:     public static Expression createMinus(Expression left, Expression right) {
1:         return new ArithmeticExpression(left, right) {
1:             protected Object evaluate(Object lvalue, Object rvalue) {
1:                 if (lvalue instanceof Number) {
0:                     return minus((Number) lvalue, asNumber(rvalue));
1:                 }
1:                 throw new RuntimeException("Cannot call minus operation on: " + lvalue + " and: " + rvalue);
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "-";
1:             }
1:         };
1:     }
1: 
1:     public static Expression createMultiply(Expression left, Expression right) {
1:         return new ArithmeticExpression(left, right) {
1: 
1:             protected Object evaluate(Object lvalue, Object rvalue) {
1:                 if (lvalue instanceof Number) {
0:                     return multiply((Number) lvalue, asNumber(rvalue));
1:                 }
1:                 throw new RuntimeException("Cannot call multiply operation on: " + lvalue + " and: " + rvalue);
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "*";
1:             }
1:         };
1:     }
1: 
1:     public static Expression createDivide(Expression left, Expression right) {
1:         return new ArithmeticExpression(left, right) {
1: 
1:             protected Object evaluate(Object lvalue, Object rvalue) {
1:                 if (lvalue instanceof Number) {
0:                     return divide((Number) lvalue, asNumber(rvalue));
1:                 }
1:                 throw new RuntimeException("Cannot call divide operation on: " + lvalue + " and: " + rvalue);
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "/";
1:             }
1:         };
1:     }
1: 
1:     public static Expression createMod(Expression left, Expression right) {
1:         return new ArithmeticExpression(left, right) {
1: 
1:             protected Object evaluate(Object lvalue, Object rvalue) {
1:                 if (lvalue instanceof Number) {
0:                     return mod((Number) lvalue, asNumber(rvalue));
1:                 }
1:                 throw new RuntimeException("Cannot call mod operation on: " + lvalue + " and: " + rvalue);
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "%";
1:             }
1:         };
1:     }
1: 
1:     protected Number plus(Number left, Number right) {
1:         switch (numberType(left, right)) {
0:             case INTEGER:
0:                 return new Integer(left.intValue() + right.intValue());
0:             case LONG:
0:                 return new Long(left.longValue() + right.longValue());
0:             default:
0:                 return new Double(left.doubleValue() + right.doubleValue());
1:         }
1:     }
1: 
1:     protected Number minus(Number left, Number right) {
1:         switch (numberType(left, right)) {
0:             case INTEGER:
0:                 return new Integer(left.intValue() - right.intValue());
0:             case LONG:
0:                 return new Long(left.longValue() - right.longValue());
0:             default:
0:                 return new Double(left.doubleValue() - right.doubleValue());
1:         }
1:     }
1: 
1:     protected Number multiply(Number left, Number right) {
1:         switch (numberType(left, right)) {
0:             case INTEGER:
0:                 return new Integer(left.intValue() * right.intValue());
0:             case LONG:
0:                 return new Long(left.longValue() * right.longValue());
0:             default:
0:                 return new Double(left.doubleValue() * right.doubleValue());
1:         }
1:     }
1: 
1:     protected Number divide(Number left, Number right) {
1:         return new Double(left.doubleValue() / right.doubleValue());
1:     }
1: 
1:     protected Number mod(Number left, Number right) {
1:         return new Double(left.doubleValue() % right.doubleValue());
1:     }
1: 
1:     private int numberType(Number left, Number right) {
1:         if (isDouble(left) || isDouble(right)) {
1:             return DOUBLE;
1:         }
0:         else if (left instanceof Long || right instanceof Long) {
1:             return LONG;
1:         }
0:         else {
1:             return INTEGER;
1:         }
1:     }
1: 
1:     private boolean isDouble(Number n) {
1:         return n instanceof Float || n instanceof Double;
1:     }
1: 
1:     protected Number asNumber(Object value) {
1:         if (value instanceof Number) {
0:             return (Number) value;
1:         }
0:         else {
1:             throw new RuntimeException("Cannot convert value: " + value + " into a number");
1:         }
1:     }
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         Object lvalue = left.evaluate(message);
1:         if (lvalue == null) {
1:             return null;
1:         }
1:         Object rvalue = right.evaluate(message);
1:         if (rvalue == null) {
1:             return null;
1:         }
1:         return evaluate(lvalue, rvalue);
1:     }
1: 
1: 
1:     /**
1:      * @param lvalue
1:      * @param rvalue
1:      * @return
1:      */
0:     abstract protected Object evaluate(Object lvalue, Object rvalue);
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:0afd5a8
/////////////////////////////////////////////////////////////////////////
============================================================================