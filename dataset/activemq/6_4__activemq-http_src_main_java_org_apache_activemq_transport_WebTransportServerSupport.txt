1:cb895f0: /**
1:cb895f0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cb895f0:  * contributor license agreements.  See the NOTICE file distributed with
1:cb895f0:  * this work for additional information regarding copyright ownership.
1:cb895f0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cb895f0:  * (the "License"); you may not use this file except in compliance with
1:cb895f0:  * the License.  You may obtain a copy of the License at
1:cb895f0:  *
1:cb895f0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cb895f0:  *
1:cb895f0:  * Unless required by applicable law or agreed to in writing, software
1:cb895f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cb895f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb895f0:  * See the License for the specific language governing permissions and
1:cb895f0:  * limitations under the License.
1:cb895f0:  */
1:cb895f0: package org.apache.activemq.transport;
3:cb895f0: 
1:cb895f0: import java.net.InetAddress;
1:cb895f0: import java.net.URI;
1:473b328: import java.util.Map;
1:cb895f0: 
1:cb895f0: import org.apache.activemq.util.InetAddressUtil;
1:473b328: import org.apache.activemq.util.IntrospectionSupport;
1:473b328: import org.eclipse.jetty.security.ConstraintMapping;
1:473b328: import org.eclipse.jetty.security.ConstraintSecurityHandler;
1:cb895f0: import org.eclipse.jetty.server.Connector;
1:cb895f0: import org.eclipse.jetty.server.Server;
1:473b328: import org.eclipse.jetty.util.security.Constraint;
1:cb895f0: 
1:cb895f0: abstract public class WebTransportServerSupport extends TransportServerSupport {
1:cb895f0: 
1:cb895f0:     protected URI bindAddress;
1:cb895f0:     protected Server server;
1:cb895f0:     protected Connector connector;
1:cb895f0:     protected SocketConnectorFactory socketConnectorFactory;
1:cb895f0:     protected String host;
1:473b328:     protected final HttpOptions httpOptions = new HttpOptions();
1:cb895f0: 
1:cb895f0:     public WebTransportServerSupport(URI location) {
1:cb895f0:         super(location);
3:cb895f0:     }
1:3f82625: 
1:3f82625:     private <T> void setConnectorProperty(String name, Class<T> type, T value) throws Exception {
1:3f82625:         connector.getClass().getMethod("set" + name, type).invoke(connector, value);
1:3f82625:     }
1:f44c3d2: 
1:3f82625:     protected void createServer() {
1:3f82625:         server = new Server();
1:3f82625:         try {
1:3f82625:             server.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(server, 500l);
1:3f82625:         } catch (Throwable t) {
1:f44c3d2:             //ignore, jetty 8.
1:3f82625:         }
1:3f82625:     }
1:473b328: 
1:46e67a1:     public URI bind() throws Exception {
1:cb895f0: 
1:cb895f0:         URI bind = getBindLocation();
1:cb895f0: 
1:cb895f0:         String bindHost = bind.getHost();
1:cb895f0:         bindHost = (bindHost == null || bindHost.length() == 0) ? "localhost" : bindHost;
1:cb895f0:         InetAddress addr = InetAddress.getByName(bindHost);
1:cb895f0:         host = addr.getCanonicalHostName();
1:cb895f0: 
1:3f82625:         setConnectorProperty("Host", String.class, host);
1:3f82625:         setConnectorProperty("Port", Integer.TYPE, bindAddress.getPort());
1:cb895f0:         server.addConnector(connector);
1:fa29678:         if (addr.isAnyLocalAddress()) {
1:fa29678:             host = InetAddressUtil.getLocalHostName();
1:3f82625:         }
1:46e67a1: 
1:46e67a1:         URI boundUri = new URI(bind.getScheme(), bind.getUserInfo(), host, bindAddress.getPort(), bind.getPath(), bind.getQuery(), bind.getFragment());
1:46e67a1:         setConnectURI(boundUri);
1:46e67a1:         return boundUri;
1:fa29678:     }
1:473b328: 
1:473b328:     protected void configureTraceMethod(ConstraintSecurityHandler securityHandler,
1:473b328:             boolean enableTrace) {
1:473b328:         Constraint constraint = new Constraint();
1:473b328:         constraint.setName("trace-security");
1:473b328:         //If enableTrace is true, then we want to set authenticate to false to allow it
1:473b328:         constraint.setAuthenticate(!enableTrace);
1:473b328:         ConstraintMapping mapping = new ConstraintMapping();
1:473b328:         mapping.setConstraint(constraint);
1:473b328:         mapping.setMethod("TRACE");
1:473b328:         mapping.setPathSpec("/");
1:473b328:         securityHandler.addConstraintMapping(mapping);
1:473b328:     }
1:473b328: 
1:473b328:     public void setHttpOptions(Map<String, Object> options) {
1:473b328:         if (options != null) {
1:473b328:             IntrospectionSupport.setProperties(this.httpOptions, options);
1:473b328:         }
1:473b328:     }
1:473b328: 
1:473b328:     protected static class HttpOptions {
1:473b328:         private boolean enableTrace = false;
1:473b328: 
1:473b328:         public boolean isEnableTrace() {
1:473b328:             return enableTrace;
1:473b328:         }
1:473b328: 
1:473b328:         public void setEnableTrace(boolean enableTrace) {
1:473b328:             this.enableTrace = enableTrace;
1:473b328:         }
1:473b328:     }
1:cb895f0: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:473b328
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.eclipse.jetty.security.ConstraintMapping;
1: import org.eclipse.jetty.security.ConstraintSecurityHandler;
1: import org.eclipse.jetty.util.security.Constraint;
/////////////////////////////////////////////////////////////////////////
1:     protected final HttpOptions httpOptions = new HttpOptions();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void configureTraceMethod(ConstraintSecurityHandler securityHandler,
1:             boolean enableTrace) {
1:         Constraint constraint = new Constraint();
1:         constraint.setName("trace-security");
1:         //If enableTrace is true, then we want to set authenticate to false to allow it
1:         constraint.setAuthenticate(!enableTrace);
1:         ConstraintMapping mapping = new ConstraintMapping();
1:         mapping.setConstraint(constraint);
1:         mapping.setMethod("TRACE");
1:         mapping.setPathSpec("/");
1:         securityHandler.addConstraintMapping(mapping);
1:     }
1: 
1:     public void setHttpOptions(Map<String, Object> options) {
1:         if (options != null) {
1:             IntrospectionSupport.setProperties(this.httpOptions, options);
1:         }
1:     }
1: 
1:     protected static class HttpOptions {
1:         private boolean enableTrace = false;
1: 
1:         public boolean isEnableTrace() {
1:             return enableTrace;
1:         }
1: 
1:         public void setEnableTrace(boolean enableTrace) {
1:             this.enableTrace = enableTrace;
1:         }
1:     }
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: 
1:             //ignore, jetty 8.
/////////////////////////////////////////////////////////////////////////
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1:     private <T> void setConnectorProperty(String name, Class<T> type, T value) throws Exception {
1:         connector.getClass().getMethod("set" + name, type).invoke(connector, value);
1:     }
1:     
1:     protected void createServer() {
1:         server = new Server();
1:         try {
1:             server.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(server, 500l);
1:         } catch (Throwable t) {
0:             //ignore, jetty 8.  
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         setConnectorProperty("Host", String.class, host);
1:         setConnectorProperty("Port", Integer.TYPE, bindAddress.getPort());
0:         if (Server.getVersion().startsWith("8")) {
0:             connector.setServer(server);
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:46e67a1
/////////////////////////////////////////////////////////////////////////
1:     public URI bind() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         URI boundUri = new URI(bind.getScheme(), bind.getUserInfo(), host, bindAddress.getPort(), bind.getPath(), bind.getQuery(), bind.getFragment());
1:         setConnectURI(boundUri);
1:         return boundUri;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fa29678
/////////////////////////////////////////////////////////////////////////
1:         if (addr.isAnyLocalAddress()) {
1:             host = InetAddressUtil.getLocalHostName();
1:         }
0:         setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), host, bindAddress.getPort(), bind.getPath(), bind.getQuery(), bind.getFragment()));
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import org.apache.activemq.util.InetAddressUtil;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
1: 
1: import java.net.InetAddress;
1: import java.net.URI;
1: 
1: abstract public class WebTransportServerSupport extends TransportServerSupport {
1: 
1:     protected URI bindAddress;
1:     protected Server server;
1:     protected Connector connector;
1:     protected SocketConnectorFactory socketConnectorFactory;
1:     protected String host;
1: 
1:     public WebTransportServerSupport(URI location) {
1:         super(location);
1:     }
1: 
0:     public void bind() throws Exception {
1: 
1:         URI bind = getBindLocation();
1: 
1:         String bindHost = bind.getHost();
1:         bindHost = (bindHost == null || bindHost.length() == 0) ? "localhost" : bindHost;
1:         InetAddress addr = InetAddress.getByName(bindHost);
1:         host = addr.getCanonicalHostName();
0:         if (addr.isAnyLocalAddress()) {
0:             host = InetAddressUtil.getLocalHostName();
1:         }
1: 
0:         connector.setHost(host);
0:         connector.setPort(bindAddress.getPort());
0:         connector.setServer(server);
1:         server.addConnector(connector);
1: 
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
0: import java.net.URI;
0: 
============================================================================