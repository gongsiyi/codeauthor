1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery;
1:f812e34: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:9ecc679: import org.apache.activemq.transport.CompositeTransport;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:9ecc679: import org.apache.activemq.transport.failover.FailoverTransport;
1:d29ca2a: import org.apache.activemq.transport.failover.FailoverTransportFactory;
1:d29ca2a: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: import org.apache.activemq.util.URISupport.CompositeData;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class DiscoveryTransportFactory extends FailoverTransportFactory {
1:d29ca2a:         
1:9ecc679:     public Transport createTransport(CompositeData compositeData) throws IOException {
2:9ecc679:         Map<String, String> parameters = new HashMap<String, String>(compositeData.getParameters());
1:9ecc679:         FailoverTransport failoverTransport = createTransport(parameters);
1:330c9a8:         return createTransport(failoverTransport, compositeData, parameters);
1:d29ca2a:     }
1:d29ca2a:     
1:9ecc679:     /**
1:9ecc679:      * Creates a transport that reports discovered brokers to a specific composite transport.
1:d29ca2a:      * 
1:9ecc679:      * @param compositeTransport transport to report discovered brokers to
1:9ecc679:      * @param compositeData used to apply parameters to this transport 
1:9ecc679:      * @return a transport that reports discovered brokers to a specific composite transport.
1:9ecc679:      * @throws IOException
1:9ecc679:      */
1:330c9a8:     public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData, Map<String, String> parameters) throws IOException {
1:9ecc679:         DiscoveryTransport transport = new DiscoveryTransport(compositeTransport);
1:d29ca2a: 
1:f812e34:         IntrospectionSupport.setProperties(transport, parameters);
1:bd1b10c:         transport.setParameters(parameters);
1:d29ca2a:         
1:9ecc679:         URI discoveryAgentURI = compositeData.getComponents()[0];
1:9ecc679:         DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(discoveryAgentURI);
1:d29ca2a:         transport.setDiscoveryAgent(discoveryAgent);
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:5d99c99:     public TransportServer doBind(URI location) throws IOException {
1:f812e34:         throw new IOException("Invalid server URI: " + location);
1:f812e34: // try{
1:d29ca2a: //            CompositeData compositData=URISupport.parseComposite(location);
1:d29ca2a: //            URI[] components=compositData.getComponents();
1:d29ca2a: //            if(components.length!=1){
1:d29ca2a: //                throw new IOException("Invalid location: "+location
1:d29ca2a: //                                +", the location must have 1 and only 1 composite URI in it - components = "
1:d29ca2a: //                                +components.length);
1:d29ca2a: //            }
1:d29ca2a: //            Map parameters=new HashMap(compositData.getParameters());
1:c59246d: //            DiscoveryTransportServer server=new DiscoveryTransportServer(TransportFactory.bind(value,components[0]));
1:d29ca2a: //            IntrospectionSupport.setProperties(server,parameters,"discovery");
1:d29ca2a: //            DiscoveryAgent discoveryAgent=DiscoveryAgentFactory.createDiscoveryAgent(server.getDiscovery());
1:d29ca2a: //            // Use the host name to configure the group of the discovery agent.
1:d29ca2a: //            if(!parameters.containsKey("discovery.group")){
1:d29ca2a: //                if(compositData.getHost()!=null){
1:d29ca2a: //                    parameters.put("discovery.group",compositData.getHost());
1:d29ca2a: //                }
1:d29ca2a: //            }
1:d29ca2a: //            if(!parameters.containsKey("discovery.brokerName")){
1:c59246d: //                parameters.put("discovery.brokerName",value);
1:d29ca2a: //            }
1:d29ca2a: //            IntrospectionSupport.setProperties(discoveryAgent,parameters,"discovery.");
1:d29ca2a: //            server.setDiscoveryAgent(discoveryAgent);
1:d29ca2a: //            return server;
1:d29ca2a: //        }catch(URISyntaxException e){
1:d29ca2a: //            throw new IOException("Invalid location: "+location);
1:d29ca2a: //        }
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(URI location) throws IOException {
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         Map<String, String> parameters = new HashMap<String, String>(compositData.getParameters());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:         IntrospectionSupport.setProperties(transport, parameters);
0:     public TransportServer doBind(String brokerId, URI location) throws IOException {
1:         throw new IOException("Invalid server URI: " + location);
1: // try{
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
1: //            DiscoveryTransportServer server=new DiscoveryTransportServer(TransportFactory.bind(value,components[0]));
/////////////////////////////////////////////////////////////////////////
1: //                parameters.put("discovery.brokerName",value);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.failover.FailoverTransportFactory;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport.CompositeData;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class DiscoveryTransportFactory extends FailoverTransportFactory {
1:         
0:     public Transport createTransport(CompositeData compositData) throws IOException {
0:         Map parameters = new HashMap(compositData.getParameters());
0:         DiscoveryTransport transport = new DiscoveryTransport(createTransport(parameters));
1:         
0:         DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(compositData.getComponents()[0]);
1:         transport.setDiscoveryAgent(discoveryAgent);
0:         IntrospectionSupport.setProperties(transport,parameters);
1: 
1:         return transport;
1:     }
1: 
0:     public TransportServer doBind(String brokerId,URI location) throws IOException{
0:         throw new IOException("Invalid server URI: "+location);
0: //        try{
1: //            CompositeData compositData=URISupport.parseComposite(location);
1: //            URI[] components=compositData.getComponents();
1: //            if(components.length!=1){
1: //                throw new IOException("Invalid location: "+location
1: //                                +", the location must have 1 and only 1 composite URI in it - components = "
1: //                                +components.length);
1: //            }
1: //            Map parameters=new HashMap(compositData.getParameters());
0: //            DiscoveryTransportServer server=new DiscoveryTransportServer(TransportFactory.bind(brokerId,components[0]));
1: //            IntrospectionSupport.setProperties(server,parameters,"discovery");
1: //            DiscoveryAgent discoveryAgent=DiscoveryAgentFactory.createDiscoveryAgent(server.getDiscovery());
1: //            // Use the host name to configure the group of the discovery agent.
1: //            if(!parameters.containsKey("discovery.group")){
1: //                if(compositData.getHost()!=null){
1: //                    parameters.put("discovery.group",compositData.getHost());
1: //                }
1: //            }
1: //            if(!parameters.containsKey("discovery.brokerName")){
0: //                parameters.put("discovery.brokerName",brokerId);
1: //            }
1: //            IntrospectionSupport.setProperties(discoveryAgent,parameters,"discovery.");
1: //            server.setDiscoveryAgent(discoveryAgent);
1: //            return server;
1: //        }catch(URISyntaxException e){
1: //            throw new IOException("Invalid location: "+location);
1: //        }
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:330c9a8
/////////////////////////////////////////////////////////////////////////
1:         return createTransport(failoverTransport, compositeData, parameters);
/////////////////////////////////////////////////////////////////////////
1:     public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData, Map<String, String> parameters) throws IOException {
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:9ecc679
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.CompositeTransport;
1: import org.apache.activemq.transport.failover.FailoverTransport;
/////////////////////////////////////////////////////////////////////////
1:     public Transport createTransport(CompositeData compositeData) throws IOException {
1:         Map<String, String> parameters = new HashMap<String, String>(compositeData.getParameters());
1:         FailoverTransport failoverTransport = createTransport(parameters);
0:         return createTransport(failoverTransport, compositeData);
0:     }
0:     
1:     /**
1:      * Creates a transport that reports discovered brokers to a specific composite transport.
0:      * 
1:      * @param compositeTransport transport to report discovered brokers to
1:      * @param compositeData used to apply parameters to this transport 
1:      * @return a transport that reports discovered brokers to a specific composite transport.
1:      * @throws IOException
1:      */
0:     public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData) throws IOException {                
1:         DiscoveryTransport transport = new DiscoveryTransport(compositeTransport);
0:         
1:         Map<String, String> parameters = new HashMap<String, String>(compositeData.getParameters());
0:         
1:         URI discoveryAgentURI = compositeData.getComponents()[0];
1:         DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(discoveryAgentURI);
0:         transport.setDiscoveryAgent(discoveryAgent);
commit:bd1b10c
/////////////////////////////////////////////////////////////////////////
1:         transport.setParameters(parameters);
============================================================================