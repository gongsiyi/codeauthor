1:4c51977: /**
1:4c51977:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c51977:  * contributor license agreements.  See the NOTICE file distributed with
1:4c51977:  * this work for additional information regarding copyright ownership.
1:4c51977:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c51977:  * (the "License"); you may not use this file except in compliance with
1:4c51977:  * the License.  You may obtain a copy of the License at
1:4c51977:  *
1:4c51977:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c51977:  *
1:4c51977:  * Unless required by applicable law or agreed to in writing, software
1:4c51977:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c51977:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c51977:  * See the License for the specific language governing permissions and
1:4c51977:  * limitations under the License.
1:4c51977:  */
1:4c51977: package org.apache.activemq.bugs;
4:4c51977: 
1:aae7aea: import static org.junit.Assert.assertTrue;
1:aae7aea: 
1:aae7aea: import java.util.concurrent.CountDownLatch;
1:aae7aea: import java.util.concurrent.TimeUnit;
1:aae7aea: import java.util.concurrent.atomic.AtomicBoolean;
1:aae7aea: import java.util.concurrent.atomic.AtomicLong;
1:aae7aea: 
1:aae7aea: import javax.jms.Connection;
1:aae7aea: import javax.jms.Destination;
1:aae7aea: import javax.jms.JMSException;
1:aae7aea: import javax.jms.Message;
1:aae7aea: import javax.jms.MessageConsumer;
1:aae7aea: import javax.jms.MessageProducer;
1:aae7aea: import javax.jms.Session;
1:aae7aea: 
1:4c51977: import org.apache.activemq.ActiveMQConnectionFactory;
1:4c51977: import org.apache.activemq.broker.BrokerService;
1:4c51977: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:4c51977: import org.apache.activemq.broker.region.policy.PolicyMap;
1:4c51977: import org.apache.activemq.command.ActiveMQQueue;
1:4c51977: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:858ab40: import org.apache.activemq.util.Wait;
1:4c51977: import org.junit.After;
1:4c51977: import org.junit.Before;
1:4c51977: import org.junit.Test;
1:4c51977: import org.slf4j.Logger;
1:4c51977: import org.slf4j.LoggerFactory;
1:4c51977: 
1:4c51977: public class AMQ4368Test {
1:4c51977: 
1:4c51977:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4368Test.class);
1:4c51977: 
1:4c51977:     private BrokerService broker;
1:4c51977:     private ActiveMQConnectionFactory connectionFactory;
1:4c51977:     private final Destination destination = new ActiveMQQueue("large_message_queue");
1:4c51977:     private String connectionUri;
1:4c51977: 
1:4c51977:     @Before
1:4c51977:     public void setUp() throws Exception {
1:4c51977:         broker = createBroker();
1:4c51977:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:4c51977:         broker.start();
1:4c51977:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:4c51977:     }
1:4c51977: 
1:4c51977:     @After
1:4c51977:     public void tearDown() throws Exception {
1:4c51977:         broker.stop();
1:4c51977:         broker.waitUntilStopped();
1:4c51977:     }
1:4c51977: 
1:4c51977:     protected BrokerService createBroker() throws Exception {
1:4c51977:         BrokerService broker = new BrokerService();
1:4c51977: 
1:4c51977:         PolicyEntry policy = new PolicyEntry();
1:4c51977:         policy.setUseCache(false);
1:4c51977:         broker.setDestinationPolicy(new PolicyMap());
1:4c51977:         broker.getDestinationPolicy().setDefaultEntry(policy);
1:4c51977: 
1:4c51977:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:4c51977:         kahadb.setCheckForCorruptJournalFiles(true);
1:4c51977:         kahadb.setCleanupInterval(1000);
1:4c51977: 
1:4c51977:         kahadb.deleteAllMessages();
1:4c51977:         broker.setPersistenceAdapter(kahadb);
1:4c51977:         broker.getSystemUsage().getMemoryUsage().setLimit(1024*1024*100);
1:aae7aea:         broker.setUseJmx(false);
1:aae7aea: 
1:4c51977:         return broker;
1:4c51977:     }
1:4c51977: 
1:4c51977:     abstract class Client implements Runnable   {
1:4c51977:         private final String name;
1:4c51977:         final AtomicBoolean done = new AtomicBoolean();
1:a80c711:         CountDownLatch startedLatch;
1:4c51977:         CountDownLatch doneLatch = new CountDownLatch(1);
1:4c51977:         Connection connection;
1:4c51977:         Session session;
1:4c51977:         final AtomicLong size = new AtomicLong();
1:4c51977: 
1:a80c711:         Client(String name, CountDownLatch startedLatch) {
1:4c51977:             this.name = name;
1:a80c711:             this.startedLatch = startedLatch;
1:4c51977:         }
1:4c51977: 
1:4c51977:         public void start() {
1:4c51977:             LOG.info("Starting: " + name);
1:4c51977:             new Thread(this, name).start();
1:4c51977:         }
1:4c51977: 
1:4c51977:         public void stopAsync() {
1:4c51977:             done.set(true);
1:4c51977:         }
1:4c51977: 
1:4c51977:         public void stop() throws InterruptedException {
1:4c51977:             stopAsync();
1:4c51977:             if (!doneLatch.await(20, TimeUnit.MILLISECONDS)) {
1:4c51977:                 try {
1:4c51977:                     connection.close();
1:4c51977:                     doneLatch.await();
1:4c51977:                 } catch (Exception e) {
1:4c51977:                 }
1:4c51977:             }
1:4c51977:         }
1:4c51977: 
1:4c51977:         @Override
1:4c51977:         public void run() {
1:4c51977:             try {
1:4c51977:                 connection = createConnection();
1:4c51977:                 connection.start();
1:4c51977:                 try {
1:4c51977:                     session = createSession();
1:4c51977:                     work();
1:4c51977:                 } finally {
1:4c51977:                     try {
1:4c51977:                         connection.close();
1:4c51977:                     } catch (JMSException ignore) {
1:4c51977:                     }
1:4c51977:                     LOG.info("Stopped: " + name);
1:4c51977:                 }
1:4c51977:             } catch (Exception e) {
1:4c51977:                 e.printStackTrace();
1:4c51977:                 done.set(true);
1:4c51977:             } finally {
1:4c51977:                 doneLatch.countDown();
1:4c51977:             }
1:4c51977:         }
1:4c51977: 
1:4c51977:         protected Session createSession() throws JMSException {
1:4c51977:             return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4c51977:         }
1:4c51977: 
1:4c51977:         protected Connection createConnection() throws JMSException {
1:4c51977:             return connectionFactory.createConnection();
1:4c51977:         }
1:4c51977: 
1:4c51977:         abstract protected void work() throws Exception;
1:4c51977:     }
1:4c51977: 
1:4c51977:     class ProducingClient extends Client {
1:4c51977: 
1:a80c711:         ProducingClient(String name, CountDownLatch startedLatch) {
1:a80c711:             super(name, startedLatch);
1:4c51977:         }
1:4c51977: 
1:4c51977:         private String createMessage() {
1:4c51977:             StringBuffer stringBuffer = new StringBuffer();
1:4c51977:             for (long i = 0; i < 1000000; i++) {
1:4c51977:                 stringBuffer.append("1234567890");
1:4c51977:             }
1:4c51977:             return stringBuffer.toString();
1:4c51977:         }
1:4c51977: 
1:4c51977:         @Override
1:4c51977:         protected void work() throws Exception {
1:4c51977:             String data = createMessage();
1:4c51977:             MessageProducer producer = session.createProducer(destination);
1:a80c711:             startedLatch.countDown();
1:4c51977:             while (!done.get()) {
1:4c51977:                 producer.send(session.createTextMessage(data));
1:4c51977:                 long i = size.incrementAndGet();
1:4c51977:                 if ((i % 1000) == 0) {
1:4c51977:                     LOG.info("produced " + i + ".");
1:4c51977:                 }
1:4c51977:             }
1:4c51977:         }
1:4c51977:     }
1:4c51977: 
1:4c51977:     class ConsumingClient extends Client {
1:a80c711:         public ConsumingClient(String name, CountDownLatch startedLatch) {
1:a80c711:             super(name, startedLatch);
1:4c51977:         }
1:4c51977: 
1:4c51977:         @Override
1:4c51977:         protected void work() throws Exception {
1:4c51977:             MessageConsumer consumer = session.createConsumer(destination);
1:a80c711:             startedLatch.countDown();
1:4c51977:             while (!done.get()) {
1:4c51977:                 Message msg = consumer.receive(100);
1:4c51977:                 if (msg != null) {
1:4c51977:                     size.incrementAndGet();
1:4c51977:                 }
1:4c51977:             }
1:4c51977:         }
1:4c51977:     }
1:4c51977: 
1:4c51977:     @Test
1:858ab40:     public void testENTMQ220() throws Exception {
1:4c51977:         LOG.info("Start test.");
1:a80c711:         CountDownLatch producer1Started = new CountDownLatch(1);
1:a80c711:         CountDownLatch producer2Started = new CountDownLatch(1);
1:a80c711:         CountDownLatch listener1Started = new CountDownLatch(1);
1:4c51977: 
1:858ab40:         final ProducingClient producer1 = new ProducingClient("1", producer1Started);
1:858ab40:         final ProducingClient producer2 = new ProducingClient("2", producer2Started);
1:858ab40:         final ConsumingClient listener1 = new ConsumingClient("subscriber-1", listener1Started);
1:858ab40:         final AtomicLong lastSize = new AtomicLong();
1:858ab40: 
1:4c51977:         try {
1:4c51977: 
1:4c51977:             producer1.start();
1:4c51977:             producer2.start();
1:4c51977:             listener1.start();
1:4c51977: 
1:a80c711:             producer1Started.await(15, TimeUnit.SECONDS);
1:a80c711:             producer2Started.await(15, TimeUnit.SECONDS);
1:a80c711:             listener1Started.await(15, TimeUnit.SECONDS);
1:a80c711: 
1:858ab40:             lastSize.set(listener1.size.get());
1:4c51977:             for (int i = 0; i < 10; i++) {
1:858ab40:                 Wait.waitFor(new Wait.Condition() {
1:858ab40: 
1:858ab40:                     @Override
1:858ab40:                     public boolean isSatisified() throws Exception {
1:858ab40:                         return listener1.size.get() > lastSize.get();
1:858ab40:                     }
1:858ab40:                 });
1:4c51977:                 long size = listener1.size.get();
1:858ab40:                 LOG.info("Listener 1: consumed: " + (size - lastSize.get()));
1:858ab40:                 assertTrue("No messages received on iteration: " + i, size > lastSize.get());
1:858ab40:                 lastSize.set(size);
1:4c51977:             }
1:4c51977:         } finally {
1:4c51977:             LOG.info("Stopping clients");
1:4c51977:             producer1.stop();
1:4c51977:             producer2.stop();
1:4c51977:             listener1.stop();
1:4c51977:         }
1:4c51977:     }
1:4c51977: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:858ab40
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     public void testENTMQ220() throws Exception {
1:         final ProducingClient producer1 = new ProducingClient("1", producer1Started);
1:         final ProducingClient producer2 = new ProducingClient("2", producer2Started);
1:         final ConsumingClient listener1 = new ConsumingClient("subscriber-1", listener1Started);
1:         final AtomicLong lastSize = new AtomicLong();
1: 
/////////////////////////////////////////////////////////////////////////
1:             lastSize.set(listener1.size.get());
1:                 Wait.waitFor(new Wait.Condition() {
1: 
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         return listener1.size.get() > lastSize.get();
1:                     }
1:                 });
1:                 LOG.info("Listener 1: consumed: " + (size - lastSize.get()));
1:                 assertTrue("No messages received on iteration: " + i, size > lastSize.get());
1:                 lastSize.set(size);
commit:aae7aea
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:5cadb04
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80c711
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch startedLatch;
1:         Client(String name, CountDownLatch startedLatch) {
1:             this.startedLatch = startedLatch;
/////////////////////////////////////////////////////////////////////////
1:         ProducingClient(String name, CountDownLatch startedLatch) {
1:             super(name, startedLatch);
/////////////////////////////////////////////////////////////////////////
1:             startedLatch.countDown();
/////////////////////////////////////////////////////////////////////////
1:         public ConsumingClient(String name, CountDownLatch startedLatch) {
1:             super(name, startedLatch);
1:             startedLatch.countDown();
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch producer1Started = new CountDownLatch(1);
1:         CountDownLatch producer2Started = new CountDownLatch(1);
1:         CountDownLatch listener1Started = new CountDownLatch(1);
0:         ProducingClient producer1 = new ProducingClient("1", producer1Started);
0:         ProducingClient producer2 = new ProducingClient("2", producer2Started);
0:         ConsumingClient listener1 = new ConsumingClient("subscriber-1", listener1Started);
1:             producer1Started.await(15, TimeUnit.SECONDS);
1:             producer2Started.await(15, TimeUnit.SECONDS);
1:             listener1Started.await(15, TimeUnit.SECONDS);
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4c51977
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicLong;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ4368Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4368Test.class);
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private final Destination destination = new ActiveMQQueue("large_message_queue");
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         broker.start();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setUseCache(false);
1:         broker.setDestinationPolicy(new PolicyMap());
1:         broker.getDestinationPolicy().setDefaultEntry(policy);
1: 
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
0:         kahadb.setChecksumJournalFiles(true);
1:         kahadb.setCheckForCorruptJournalFiles(true);
1:         kahadb.setCleanupInterval(1000);
1: 
1:         kahadb.deleteAllMessages();
1:         broker.setPersistenceAdapter(kahadb);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1024*1024*100);
1:         return broker;
1:     }
1: 
1:     abstract class Client implements Runnable   {
1:         private final String name;
1:         final AtomicBoolean done = new AtomicBoolean();
1:         CountDownLatch doneLatch = new CountDownLatch(1);
1:         Connection connection;
1:         Session session;
1:         final AtomicLong size = new AtomicLong();
1: 
0:         Client(String name) {
1:             this.name = name;
1:         }
1: 
1:         public void start() {
1:             LOG.info("Starting: " + name);
1:             new Thread(this, name).start();
1:         }
1: 
1:         public void stopAsync() {
1:             done.set(true);
1:         }
1: 
1:         public void stop() throws InterruptedException {
1:             stopAsync();
1:             if (!doneLatch.await(20, TimeUnit.MILLISECONDS)) {
1:                 try {
1:                     connection.close();
1:                     doneLatch.await();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 connection = createConnection();
1:                 connection.start();
1:                 try {
1:                     session = createSession();
1:                     work();
1:                 } finally {
1:                     try {
1:                         connection.close();
1:                     } catch (JMSException ignore) {
1:                     }
1:                     LOG.info("Stopped: " + name);
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 done.set(true);
1:             } finally {
1:                 doneLatch.countDown();
1:             }
1:         }
1: 
1:         protected Session createSession() throws JMSException {
1:             return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1: 
1:         protected Connection createConnection() throws JMSException {
1:             return connectionFactory.createConnection();
1:         }
1: 
1:         abstract protected void work() throws Exception;
1:     }
1: 
1:     class ProducingClient extends Client {
1: 
0:         ProducingClient(String name) {
0:             super(name);
1:         }
1: 
1:         private String createMessage() {
1:             StringBuffer stringBuffer = new StringBuffer();
1:             for (long i = 0; i < 1000000; i++) {
1:                 stringBuffer.append("1234567890");
1:             }
1:             return stringBuffer.toString();
1:         }
1: 
1:         @Override
1:         protected void work() throws Exception {
1:             String data = createMessage();
1:             MessageProducer producer = session.createProducer(destination);
1:             while (!done.get()) {
1:                 producer.send(session.createTextMessage(data));
1:                 long i = size.incrementAndGet();
1:                 if ((i % 1000) == 0) {
1:                     LOG.info("produced " + i + ".");
1:                 }
1:             }
1:         }
1:     }
1: 
1:     class ConsumingClient extends Client {
1: 
0:         public ConsumingClient(String name) {
0:             super(name);
1:         }
1: 
1:         @Override
1:         protected void work() throws Exception {
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             while (!done.get()) {
1:                 Message msg = consumer.receive(100);
1:                 if (msg != null) {
1:                     size.incrementAndGet();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test
0:     public void testENTMQ220() throws InterruptedException, JMSException {
1:         LOG.info("Start test.");
1: 
0:         ProducingClient producer1 = new ProducingClient("1");
0:         ProducingClient producer2 = new ProducingClient("2");
0:         ConsumingClient listener1 = new ConsumingClient("subscriber-1");
1:         try {
1: 
1:             producer1.start();
1:             producer2.start();
1:             listener1.start();
1: 
0:             long lastSize = listener1.size.get();
1:             for (int i = 0; i < 10; i++) {
0:                 Thread.sleep(2000);
1:                 long size = listener1.size.get();
0:                 LOG.info("Listener 1: consumed: " + (size - lastSize));
0:                 assertTrue("No messages received on iteration: " + i, size > lastSize);
0:                 lastSize = size;
1:             }
1:         } finally {
1:             LOG.info("Stopping clients");
1:             producer1.stop();
1:             producer2.stop();
1:             listener1.stop();
1:         }
1:     }
1: }
============================================================================