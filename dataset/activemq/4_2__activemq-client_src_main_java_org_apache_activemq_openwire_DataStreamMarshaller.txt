1:d7e80d5: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d7e80d5:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d7e80d5:  *
1:d7e80d5:  * Unless required by applicable law or agreed to in writing, software
1:d7e80d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d7e80d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7e80d5:  * See the License for the specific language governing permissions and
1:d7e80d5:  * limitations under the License.
1:d7e80d5:  */
1:d7e80d5: package org.apache.activemq.openwire;
1:d7e80d5: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:d7e80d5: import java.io.IOException;
1:d7e80d5: 
1:d7e80d5: import org.apache.activemq.command.DataStructure;
1:d7e80d5: 
1:d7e80d5: public interface DataStreamMarshaller {
1:d7e80d5: 
1:d7e80d5:     byte getDataStructureType();
1:d7e80d5:     DataStructure createObject();
1:d7e80d5: 
1:d7e80d5:     int tightMarshal1(OpenWireFormat format, Object c, BooleanStream bs) throws IOException;
1:4821b9d:     void tightMarshal2(OpenWireFormat format, Object c, DataOutput ds, BooleanStream bs) throws IOException;
1:4821b9d:     void tightUnmarshal(OpenWireFormat format, Object data, DataInput dis, BooleanStream bs) throws IOException;
1:d7e80d5: 
1:4821b9d:     void looseMarshal(OpenWireFormat format, Object c, DataOutput ds) throws IOException;
1:4821b9d:     void looseUnmarshal(OpenWireFormat format, Object data, DataInput dis) throws IOException;
1:d7e80d5:     
1:d7e80d5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d7e80d5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.DataStructure;
1: 
1: public interface DataStreamMarshaller {
1: 
1:     byte getDataStructureType();
1:     DataStructure createObject();
1: 
1:     int tightMarshal1(OpenWireFormat format, Object c, BooleanStream bs) throws IOException;
0:     void tightMarshal2(OpenWireFormat format, Object c, DataOutputStream ds, BooleanStream bs) throws IOException;
0:     void tightUnmarshal(OpenWireFormat format, Object data, DataInputStream dis, BooleanStream bs) throws IOException;
1: 
0:     void looseMarshal(OpenWireFormat format, Object c, DataOutputStream ds) throws IOException;
0:     void looseUnmarshal(OpenWireFormat format, Object data, DataInputStream dis) throws IOException;
1:     
1: }
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.openwire;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.lang.reflect.Constructor;
0: 
0: import org.activeio.command.ClassLoading;
0: import org.apache.activemq.command.DataStructure;
0: 
0: abstract public class DataStreamMarshaller {
0: 
0:     static final public Constructor STACK_TRACE_ELEMENT_CONSTRUCTOR;
0:     
0:     static {
0:         Constructor constructor=null;
0:         try {
0:             constructor = StackTraceElement.class.getConstructor(new Class[]{String.class, String.class, String.class, int.class});            
0:         } catch (Throwable e) {            
0:         }
0:         STACK_TRACE_ELEMENT_CONSTRUCTOR = constructor;
0:     }
0:     
0: 
0:     abstract public byte getDataStructureType();
0:     abstract public DataStructure createObject();
0:     
0:     public int marshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
0:         return 0;
0:     }
0:     public void marshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {        
0:     }
0:     public void unmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {        
0:     }
0:     
0:     public int marshal1Long(OpenWireFormat wireFormat, long o, BooleanStream bs) throws IOException {
0:         if( o == 0 ) {
0:             bs.writeBoolean(false);
0:             bs.writeBoolean(false);
0:             return 0;
0:         } else if ( (o & 0xFFFFFFFFFFFF0000l ) == 0 ) {
0:             bs.writeBoolean(false);
0:             bs.writeBoolean(true);            
0:             return 2;
0:         } else if ( (o & 0xFFFFFFFF00000000l ) == 0) {
0:             bs.writeBoolean(true);
0:             bs.writeBoolean(false);
0:             return 4;
0:         } else {
0:             bs.writeBoolean(true);
0:             bs.writeBoolean(true);
0:             return 8;
0:         }
0:     }
0:     public void marshal2Long(OpenWireFormat wireFormat, long o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
0:                 dataOut.writeLong(o);
0:             } else {
0:                 dataOut.writeInt((int) o);
0:             }
0:         } else {
0:             if( bs.readBoolean() ) {
0:                 dataOut.writeShort((int) o);
0:             }
0:         }
0:     }
0:     public long unmarshalLong(OpenWireFormat wireFormat, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
0:                 return dataIn.readLong();
0:             } else {
0:                 return dataIn.readInt();
0:             }
0:         } else {
0:             if( bs.readBoolean() ) {
0:                 return dataIn.readShort();
0:             } else {
0:                 return 0;
0:             }
0:         }
0:     }
0:     
0:     protected DataStructure unmarsalNestedObject(OpenWireFormat wireFormat, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         return wireFormat.unmarshalNestedObject(dataIn, bs);
0:     }    
0:     protected int marshal1NestedObject(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs) throws IOException {
0:         return wireFormat.marshal1NestedObject(o, bs);
0:     }
0:     
0:     protected void marshal2NestedObject(OpenWireFormat wireFormat, DataStructure o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         wireFormat.marshal2NestedObject(o, dataOut, bs);
0:     }
0: 
0:     protected DataStructure unmarsalCachedObject(OpenWireFormat wireFormat, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
0:             if( bs.readBoolean() ) {
0:                 short index = dataIn.readShort();
0:                 DataStructure object = wireFormat.unmarshalNestedObject(dataIn, bs);
0:                 wireFormat.setInUnmarshallCache(index, object);
0:                 return object;
0:             } else {
0:                 short index = dataIn.readShort();
0:                 return wireFormat.getFromUnmarshallCache(index);
0:             }
0:         } else {
0:             return wireFormat.unmarshalNestedObject(dataIn, bs);
0:         }
0:     }    
0:     protected int marshal1CachedObject(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
0:             Short index = wireFormat.getMarshallCacheIndex(o);
0:             bs.writeBoolean(index == null);
0:             if( index == null ) {
0:                 int rc = wireFormat.marshal1NestedObject(o, bs);
0:                 wireFormat.addToMarshallCache(o);
0:                 return 2+rc;
0:             } else {
0:                 return 2;
0:             }
0:         } else {
0:             return wireFormat.marshal1NestedObject(o, bs);
0:         }
0:     }    
0:     protected void marshal2CachedObject(OpenWireFormat wireFormat, DataStructure o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         if( wireFormat.isCacheEnabled() ) {
0:             Short index = wireFormat.getMarshallCacheIndex(o);
0:             if( bs.readBoolean() ) {
0:                 dataOut.writeShort(index.shortValue());
0:                 wireFormat.marshal2NestedObject(o, dataOut, bs);
0:             } else {
0:                 dataOut.writeShort(index.shortValue());
0:             }
0:         } else {
0:             wireFormat.marshal2NestedObject(o, dataOut, bs);
0:         }
0:     }
0:     
0:     protected Throwable unmarsalThrowable(OpenWireFormat wireFormat, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             String clazz =  readString(dataIn, bs);
0:             String message = readString(dataIn, bs);
0:             Throwable o = createThrowable(clazz, message);
0:             if( wireFormat.isStackTraceEnabled() ) {
0:                 if( STACK_TRACE_ELEMENT_CONSTRUCTOR!=null) {
0:                     StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];
0:                     for (int i = 0; i < ss.length; i++) {
0:                         try {
0:                             ss[i] = (StackTraceElement) STACK_TRACE_ELEMENT_CONSTRUCTOR.newInstance(new Object[]{
0:                                 readString(dataIn, bs),
0:                                 readString(dataIn, bs), 
0:                                 readString(dataIn, bs), 
0:                                 new Integer(dataIn.readInt())
0:                                 });
0:                         } catch (IOException e) {
0:                             throw e;
0:                         } catch (Throwable e) {
0:                         }
0:                     }
0:                     o.setStackTrace(ss);
0:                 } else {
0:                     int size = dataIn.readInt();
0:                     for (int i = 0; i < size; i++) {
0:                         readString(dataIn, bs);
0:                         readString(dataIn, bs); 
0:                         readString(dataIn, bs); 
0:                         dataIn.readInt();
0:                     }
0:                 }
0:                 o.initCause(unmarsalThrowable(wireFormat, dataIn, bs));
0:                 
0:             }
0:             return o;
0:         } else {
0:             return null;
0:         }
0:     }
0:     
0:     private Throwable createThrowable(String className, String message) {
0:         try {
0:             Class clazz = ClassLoading.loadClass(className, DataStreamMarshaller.class.getClassLoader());
0:             Constructor constructor = clazz.getConstructor(new Class[]{String.class});
0:             return (Throwable) constructor.newInstance(new Object[]{message});
0:         } catch (Throwable e) {
0:             return new Throwable(className+": "+message);
0:         }
0:     }
0:     
0:     protected int marshalThrowable(OpenWireFormat wireFormat, Throwable o, BooleanStream bs) throws IOException { 
0:         if( o==null ) {
0:             bs.writeBoolean(false);
0:             return 0;
0:         } else {
0:             int rc=0;
0:             bs.writeBoolean(true);
0:             rc += writeString(o.getClass().getName(), bs);
0:             rc += writeString(o.getMessage(), bs);
0:             if( wireFormat.isStackTraceEnabled() ) {
0:                 rc += 2;
0:                 StackTraceElement[] stackTrace = o.getStackTrace();
0:                 for (int i = 0; i < stackTrace.length; i++) {
0:                     StackTraceElement element = stackTrace[i];
0:                     rc += writeString(element.getClassName(), bs);
0:                     rc += writeString(element.getMethodName(), bs);
0:                     rc += writeString(element.getFileName(), bs);
0:                     rc += 4;
0:                 }
0:                 rc += marshalThrowable(wireFormat, o.getCause(), bs);
0:             }
0:             return rc;
0:         }
0:     }
0:     
0:     protected void marshalThrowable(OpenWireFormat wireFormat, Throwable o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             writeString(o.getClass().getName(), dataOut, bs);
0:             writeString(o.getMessage(), dataOut, bs);
0:             if( wireFormat.isStackTraceEnabled() ) {
0:                 StackTraceElement[] stackTrace = o.getStackTrace();
0:                 dataOut.writeShort(stackTrace.length);
0:                 for (int i = 0; i < stackTrace.length; i++) {
0:                     StackTraceElement element = stackTrace[i];
0:                     writeString(element.getClassName(), dataOut, bs);
0:                     writeString(element.getMethodName(), dataOut, bs);
0:                     writeString(element.getFileName(), dataOut, bs);
0:                     dataOut.writeInt(element.getLineNumber());
0:                 }
0:                 marshalThrowable(wireFormat, o.getCause(), dataOut, bs);
0:             }
0:         }
0:     }
0:     
0:     protected String readString(DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             if( bs.readBoolean() ) {
0:                 int size = dataIn.readShort();
0:                 byte data[] = new byte[size];
0:                 dataIn.readFully(data);
0:                 return new String(data,0); // Yes deprecated, but we know what we are doing.
0:             }  else {
0:                 return dataIn.readUTF();
0:             }
0:         } else {
0:             return null;
0:         }
0:     }
0:     
0:     protected int writeString(String value, BooleanStream bs) throws IOException { 
0:         bs.writeBoolean(value!=null);
0:         if( value!=null ) {
0:             
0:             int strlen = value.length();
0:             int utflen = 0;
0:             char[] charr = new char[strlen];
0:             int c, count = 0;
0:             boolean isOnlyAscii=true;
0: 
0:             value.getChars(0, strlen, charr, 0);
0: 
0:             for (int i = 0; i < strlen; i++) {
0:                 c = charr[i];
0:                 if ((c >= 0x0001) && (c <= 0x007F)) {
0:                     utflen++;
0:                 } else if (c > 0x07FF) {
0:                     utflen += 3;
0:                     isOnlyAscii=false;
0:                 } else {
0:                     isOnlyAscii=false;
0:                     utflen += 2;
0:                 }
0:             }
0:             
0:             if( utflen >= Short.MAX_VALUE )
0:                 throw new IOException("Encountered a String value that is too long to encode.");
0:             
0:             bs.writeBoolean(isOnlyAscii);            
0:             return utflen+2;
0:             
0:         } else {
0:             return 0;
0:         }
0:     }
0:     
0:     protected void writeString(String value, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             // If we verified it only holds ascii values
0:             if( bs.readBoolean() ) {
0:                 dataOut.writeShort(value.length());
0:                 dataOut.writeBytes(value);
0:             } else {
0:                 dataOut.writeUTF(value);                
0:             }
0:         }
0:     }  
0:     
0:     protected int marshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects, BooleanStream bs) throws IOException {
0:         if( objects != null ) {
0:             int rc=0;
0:             bs.writeBoolean(true);
0:             rc += 2;
0:             for( int i=0; i < objects.length; i++ ) {
0:                 rc += marshal1NestedObject(wireFormat,objects[i], bs);
0:             }
0:             return rc;
0:         } else {
0:             bs.writeBoolean(false);
0:             return 0;
0:         }
0:     }
0:     
0:     protected void marshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         if( bs.readBoolean() ) {
0:             dataOut.writeShort(objects.length);
0:             for( int i=0; i < objects.length; i++ ) {
0:                 marshal2NestedObject(wireFormat,objects[i], dataOut, bs);
0:             }
0:         }
0:     }
0: 
0: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     void tightMarshal2(OpenWireFormat format, Object c, DataOutput ds, BooleanStream bs) throws IOException;
1:     void tightUnmarshal(OpenWireFormat format, Object data, DataInput dis, BooleanStream bs) throws IOException;
1:     void looseMarshal(OpenWireFormat format, Object c, DataOutput ds) throws IOException;
1:     void looseUnmarshal(OpenWireFormat format, Object data, DataInput dis) throws IOException;
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:d265b31
/////////////////////////////////////////////////////////////////////////
0:                     short size = dataIn.readShort();
============================================================================