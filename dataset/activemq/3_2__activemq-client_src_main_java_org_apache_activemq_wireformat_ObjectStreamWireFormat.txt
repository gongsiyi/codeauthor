1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
3:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.wireformat;
1:88acb0e: 
1:4821b9d: import java.io.DataInput;
1:88acb0e: import java.io.DataInputStream;
1:4821b9d: import java.io.DataOutput;
1:88acb0e: import java.io.DataOutputStream;
1:88acb0e: import java.io.IOException;
1:4821b9d: import java.io.InputStream;
1:88acb0e: import java.io.ObjectOutputStream;
1:4821b9d: import java.io.OutputStream;
1:88acb0e: 
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1:88acb0e: 
1:88acb0e: /**
1:88acb0e:  * A simple implementation which uses Object Stream serialization.
1:b0c2a40:  * 
1:f812e34:  * 
1:88acb0e:  */
1:88acb0e: public class ObjectStreamWireFormat implements WireFormat {
1:88acb0e: 
1:88acb0e:     public ByteSequence marshal(Object command) throws IOException {
1:f812e34:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:88acb0e:         DataOutputStream ds = new DataOutputStream(baos);
1:88acb0e:         marshal(command, ds);
1:88acb0e:         ds.close();
1:88acb0e:         return baos.toByteSequence();
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public Object unmarshal(ByteSequence packet) throws IOException {
1:88acb0e:         return unmarshal(new DataInputStream(new ByteArrayInputStream(packet)));
1:88acb0e:     }
1:88acb0e: 
1:4821b9d:     public void marshal(Object command, DataOutput ds) throws IOException {
1:4821b9d:         ObjectOutputStream out = new ObjectOutputStream((OutputStream)ds);
1:88acb0e:         out.writeObject(command);
1:88acb0e:         out.flush();
1:88acb0e:         out.reset();
1:88acb0e:     }
1:88acb0e: 
1:4821b9d:     public Object unmarshal(DataInput ds) throws IOException {
1:88acb0e:         try {
1:4821b9d:             ClassLoadingAwareObjectInputStream in = new ClassLoadingAwareObjectInputStream((InputStream)ds);
1:88acb0e:             Object command;
1:88acb0e:             command = in.readObject();
1:88acb0e:             in.close();
1:88acb0e:             return command;
1:88acb0e:         } catch (ClassNotFoundException e) {
1:f812e34:             throw (IOException)new IOException("unmarshal failed: " + e).initCause(e);
1:88acb0e:         }
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public void setVersion(int version) {
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public int getVersion() {
1:88acb0e:         return 0;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
/////////////////////////////////////////////////////////////////////////
1:             throw (IOException)new IOException("unmarshal failed: " + e).initCause(e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.wireformat;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectOutputStream;
1: 
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1: 
1: /**
1:  * A simple implementation which uses Object Stream serialization.
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class ObjectStreamWireFormat implements WireFormat {
1: 
1:     public ByteSequence marshal(Object command) throws IOException {
0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();        
1:         DataOutputStream ds = new DataOutputStream(baos);
1:         marshal(command, ds);
1:         ds.close();
1:         return baos.toByteSequence();
1:     }
1: 
1:     public Object unmarshal(ByteSequence packet) throws IOException {
1:         return unmarshal(new DataInputStream(new ByteArrayInputStream(packet)));
1:     }
1: 
0:     public void marshal(Object command, DataOutputStream ds) throws IOException {
0:         ObjectOutputStream out = new ObjectOutputStream(ds);
1:         out.writeObject(command);
1:         out.flush();
1:         out.reset();
1:     }
1: 
0:     public Object unmarshal(DataInputStream ds) throws IOException {
1:         try {
0:             ClassLoadingAwareObjectInputStream in = new ClassLoadingAwareObjectInputStream(ds);
1:             Object command;
1:             command = in.readObject();
1:             in.close();
1:             return command;
1:         } catch (ClassNotFoundException e) {
0:             throw (IOException)new IOException("unmarshal failed: "+e).initCause(e);
1:         }
1:     }
1: 
1:     public void setVersion(int version) {
1:     }
1: 
1:     public int getVersion() {
1:         return 0;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:15065b7
/////////////////////////////////////////////////////////////////////////
0: 	public boolean inReceive() {
0: 		// TODO implement the inactivity monitor
0: 		return false;
0: 	}
0:     
0:     
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.InputStream;
1: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
1:     public void marshal(Object command, DataOutput ds) throws IOException {
1:         ObjectOutputStream out = new ObjectOutputStream((OutputStream)ds);
1:     public Object unmarshal(DataInput ds) throws IOException {
1:             ClassLoadingAwareObjectInputStream in = new ClassLoadingAwareObjectInputStream((InputStream)ds);
============================================================================