2:6fa0598: /**
1:6fa0598:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6fa0598:  * contributor license agreements.  See the NOTICE file distributed with
1:6fa0598:  * this work for additional information regarding copyright ownership.
1:6fa0598:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6fa0598:  * (the "License"); you may not use this file except in compliance with
1:6fa0598:  * the License.  You may obtain a copy of the License at
1:6fa0598:  *
1:6fa0598:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6fa0598:  *
1:6fa0598:  * Unless required by applicable law or agreed to in writing, software
1:6fa0598:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6fa0598:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6fa0598:  * See the License for the specific language governing permissions and
1:6fa0598:  * limitations under the License.
2:6fa0598:  */
1:6fa0598: package org.apache.activemq.transport.amqp;
8:6fa0598: 
1:6fa0598: import static org.junit.Assert.assertEquals;
1:6fa0598: import static org.junit.Assert.assertNotNull;
1:6fa0598: import static org.junit.Assert.assertTrue;
1:03a2c5e: 
1:6fa0598: import javax.jms.Connection;
1:03a2c5e: import javax.jms.ConnectionFactory;
1:03a2c5e: import javax.jms.Destination;
1:6fa0598: import javax.jms.ExceptionListener;
1:6fa0598: import javax.jms.JMSException;
1:6fa0598: import javax.jms.Message;
1:6fa0598: import javax.jms.MessageConsumer;
1:6fa0598: import javax.jms.MessageProducer;
1:359ec25: import javax.jms.Queue;
1:6fa0598: import javax.jms.Session;
1:6fa0598: import javax.jms.TextMessage;
1:6fa0598: 
1:03a2c5e: import org.apache.activemq.ActiveMQConnectionFactory;
1:94937e8: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:6fa0598: import org.apache.activemq.transport.amqp.joram.ActiveMQAdmin;
1:6fa0598: import org.junit.Test;
1:6fa0598: 
1:6fa0598: public class AMQ4563Test extends AmqpTestSupport {
1:6fa0598: 
1:833d308:     public static final String KAHADB_DIRECTORY = "./target/activemq-data/kahadb-amq4563";
1:6fa0598: 
1:6fa0598:     @Test(timeout = 60000)
1:03a2c5e:     public void testMessagesAreAckedAMQProducer() throws Exception {
1:6fa0598:         int messagesSent = 3;
1:6fa0598:         ActiveMQAdmin.enableJMSFrameTracing();
1:6fa0598:         assertTrue(brokerService.isPersistent());
1:6fa0598: 
1:03a2c5e:         Connection connection = createAMQConnection();
1:03a2c5e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94937e8:         Queue queue = session.createQueue(name.getMethodName());
1:94937e8:         MessageProducer producer = session.createProducer(queue);
1:03a2c5e:         TextMessage message = null;
1:94937e8:         for (int i = 0; i < messagesSent; i++) {
1:03a2c5e:             message = session.createTextMessage();
1:03a2c5e:             String messageText = "Hello " + i + " sent at " + new java.util.Date().toString();
1:03a2c5e:             message.setText(messageText);
1:e1bbde7:             LOG.debug(">>>> Sent [{}]", messageText);
1:94937e8:             producer.send(message);
1:03a2c5e:         }
1:eec7d74: 
1:03a2c5e:         // After the first restart we should get all messages sent above
1:03a2c5e:         restartBroker(connection, session);
1:94937e8:         int messagesReceived = readAllMessages(name.getMethodName());
1:03a2c5e:         assertEquals(messagesSent, messagesReceived);
1:03a2c5e: 
1:03a2c5e:         // This time there should be no messages on this queue
1:03a2c5e:         restartBroker(connection, session);
1:94937e8:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:94937e8:         assertEquals(0, queueView.getQueueSize());
1:eec7d74:     }
1:03a2c5e: 
1:03a2c5e:     @Test(timeout = 60000)
1:eec7d74:     public void testSelectingOnAMQPMessageID() throws Exception {
1:eec7d74:         ActiveMQAdmin.enableJMSFrameTracing();
1:eec7d74:         assertTrue(brokerService.isPersistent());
1:eec7d74: 
1:240278d:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
1:36bd069:         connection.start();
1:eec7d74:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94937e8:         Queue queue = session.createQueue(name.getMethodName());
1:359ec25:         MessageProducer p = session.createProducer(queue);
1:eec7d74:         TextMessage message = session.createTextMessage();
1:eec7d74:         String messageText = "Hello sent at " + new java.util.Date().toString();
1:eec7d74:         message.setText(messageText);
1:eec7d74:         p.send(message);
1:eec7d74: 
1:eec7d74:         // Restart broker.
1:eec7d74:         restartBroker(connection, session);
1:eec7d74:         String selector = "JMSMessageID = '" + message.getJMSMessageID() + "'";
1:e1bbde7:         LOG.info("Using selector: {}", selector);
1:94937e8:         int messagesReceived = readAllMessages(name.getMethodName(), selector);
1:eec7d74:         assertEquals(1, messagesReceived);
1:eec7d74:     }
1:eec7d74: 
1:eec7d74:     @Test(timeout = 60000)
1:eec7d74:     public void testSelectingOnActiveMQMessageID() throws Exception {
1:eec7d74:         ActiveMQAdmin.enableJMSFrameTracing();
1:eec7d74:         assertTrue(brokerService.isPersistent());
1:eec7d74: 
1:eec7d74:         Connection connection = createAMQConnection();
1:eec7d74:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94937e8:         Destination destination = session.createQueue(name.getMethodName());
2:eec7d74:         MessageProducer p = session.createProducer(destination);
1:eec7d74:         TextMessage message = session.createTextMessage();
1:eec7d74:         String messageText = "Hello sent at " + new java.util.Date().toString();
1:eec7d74:         message.setText(messageText);
1:eec7d74:         p.send(message);
1:eec7d74: 
1:eec7d74:         // Restart broker.
1:eec7d74:         restartBroker(connection, session);
1:eec7d74:         String selector = "JMSMessageID = '" + message.getJMSMessageID() + "'";
1:e1bbde7:         LOG.info("Using selector: {}", selector);
1:94937e8:         int messagesReceived = readAllMessages(name.getMethodName(), selector);
1:eec7d74:         assertEquals(1, messagesReceived);
1:eec7d74:     }
1:eec7d74: 
1:eec7d74:     @Test(timeout = 60000)
1:03a2c5e:     public void testMessagesAreAckedAMQPProducer() throws Exception {
1:03a2c5e:         int messagesSent = 3;
1:03a2c5e:         ActiveMQAdmin.enableJMSFrameTracing();
1:03a2c5e:         assertTrue(brokerService.isPersistent());
1:03a2c5e: 
1:240278d:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
1:36bd069:         connection.start();
1:6fa0598:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94937e8:         Queue queue = session.createQueue(name.getMethodName());
1:359ec25:         MessageProducer p = session.createProducer(queue);
1:6fa0598:         TextMessage message = null;
1:03a2c5e:         for (int i=0; i < messagesSent; i++) {
1:6fa0598:             message = session.createTextMessage();
1:6fa0598:             String messageText = "Hello " + i + " sent at " + new java.util.Date().toString();
1:6fa0598:             message.setText(messageText);
1:e1bbde7:             LOG.debug(">>>> Sent [{}]", messageText);
1:03a2c5e:             p.send(message);
1:03a2c5e:         }
1:03a2c5e: 
1:6fa0598:         // After the first restart we should get all messages sent above
1:6fa0598:         restartBroker(connection, session);
1:94937e8:         int messagesReceived = readAllMessages(name.getMethodName());
1:6fa0598:         assertEquals(messagesSent, messagesReceived);
1:6fa0598: 
1:6fa0598:         // This time there should be no messages on this queue
1:6fa0598:         restartBroker(connection, session);
1:94937e8:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:94937e8:         assertEquals(0, queueView.getQueueSize());
4:6fa0598:     }
1:6fa0598: 
1:94937e8:     private int readAllMessages(String queueName) throws JMSException {
1:94937e8:         return readAllMessages(queueName, null);
1:6fa0598:     }
1:6fa0598: 
1:94937e8:     private int readAllMessages(String queueName, String selector) throws JMSException {
1:240278d:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
1:36bd069:         connection.start();
1:36bd069: 
1:6fa0598:         try {
1:6fa0598:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94937e8:             Queue queue = session.createQueue(queueName);
1:6fa0598:             int messagesReceived = 0;
1:eec7d74:             MessageConsumer consumer;
1:eec7d74:             if( selector==null ) {
1:eec7d74:                 consumer = session.createConsumer(queue);
1:eec7d74:             } else {
1:eec7d74:                 consumer = session.createConsumer(queue, selector);
1:eec7d74:             }
1:94937e8: 
1:94937e8:             try {
1:94937e8:                 // Try to get out quickly if there are no messages on the broker side
1:94937e8:                 QueueViewMBean queueView = getProxyToQueue(queue.getQueueName());
1:94937e8:                 if (queueView.getQueueSize() == 0) {
1:94937e8:                     return 0;
1:94937e8:                 }
1:94937e8:             } catch (Exception e) {
1:94937e8:                 LOG.debug("Error during destination check: {}", e);
1:94937e8:             }
1:94937e8: 
1:94937e8:             Message msg = consumer.receive(1000);
1:6fa0598:             while(msg != null) {
1:6fa0598:                 assertNotNull(msg);
1:6fa0598:                 assertTrue(msg instanceof TextMessage);
1:6fa0598:                 TextMessage textMessage = (TextMessage) msg;
1:e1bbde7:                 LOG.debug(">>>> Received [{}]", textMessage.getText());
1:6fa0598:                 messagesReceived++;
1:94937e8:                 msg = consumer.receive(1000);
1:6fa0598:             }
1:6fa0598:             consumer.close();
1:6fa0598: 
1:6fa0598:             return messagesReceived;
1:6fa0598:         } finally {
1:6fa0598:             connection.close();
1:6fa0598:         }
1:6fa0598:     }
1:6fa0598: 
1:6fa0598:     private void restartBroker(Connection connection, Session session) throws Exception {
1:6fa0598:         session.close();
1:6fa0598:         connection.close();
1:36bd069:         restartBroker();
1:6fa0598:     }
1:6fa0598: 
1:03a2c5e:     private Connection createAMQConnection() throws JMSException {
1:36bd069:         LOG.debug(">>> In createConnection using port {}", openwirePort);
1:36bd069:         final ConnectionFactory factory = new ActiveMQConnectionFactory("admin", "password", openwireURI);
1:03a2c5e:         final Connection connection = factory.createConnection();
1:03a2c5e:         connection.setExceptionListener(new ExceptionListener() {
1:359ec25:             @Override
1:03a2c5e:             public void onException(JMSException exception) {
1:03a2c5e:                 exception.printStackTrace();
1:03a2c5e:             }
1:03a2c5e:         });
1:03a2c5e:         connection.start();
1:03a2c5e:         return connection;
1:03a2c5e:     }
1:03a2c5e: 
1:03a2c5e:     @Override
1:36bd069:     protected boolean isUseOpenWireConnector() {
1:36bd069:         return true;
1:36bd069:     }
1:6fa0598: 
1:36bd069:     @Override
1:36bd069:     protected boolean isPersistent() {
1:36bd069:         return true;
1:6fa0598:     }
1:6fa0598: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:13044de
/////////////////////////////////////////////////////////////////////////
commit:833d308
/////////////////////////////////////////////////////////////////////////
1:     public static final String KAHADB_DIRECTORY = "./target/activemq-data/kahadb-amq4563";
/////////////////////////////////////////////////////////////////////////
0:     protected int getStoreOpenWireVersion() {
commit:240278d
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
commit:36bd069
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpURI);
1:         connection.start();
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpURI);
1:         connection.start();
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpURI);
1:         connection.start();
1: 
/////////////////////////////////////////////////////////////////////////
1:         restartBroker();
1:         LOG.debug(">>> In createConnection using port {}", openwirePort);
1:         final ConnectionFactory factory = new ActiveMQConnectionFactory("admin", "password", openwireURI);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1:     @Override
0:     protected int getstoreOpenWireVersion() {
0:         return 10;
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < messagesSent; i++) {
1:             producer.send(message);
1:         int messagesReceived = readAllMessages(name.getMethodName());
1:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:         assertEquals(0, queueView.getQueueSize());
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(name.getMethodName());
/////////////////////////////////////////////////////////////////////////
1:         int messagesReceived = readAllMessages(name.getMethodName(), selector);
1:         Destination destination = session.createQueue(name.getMethodName());
/////////////////////////////////////////////////////////////////////////
1:         int messagesReceived = readAllMessages(name.getMethodName(), selector);
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(name.getMethodName());
/////////////////////////////////////////////////////////////////////////
1:         int messagesReceived = readAllMessages(name.getMethodName());
1:         QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:         assertEquals(0, queueView.getQueueSize());
1:     private int readAllMessages(String queueName) throws JMSException {
1:         return readAllMessages(queueName, null);
1:     private int readAllMessages(String queueName, String selector) throws JMSException {
1:             Queue queue = session.createQueue(queueName);
/////////////////////////////////////////////////////////////////////////
1: 
1:             try {
1:                 // Try to get out quickly if there are no messages on the broker side
1:                 QueueViewMBean queueView = getProxyToQueue(queue.getQueueName());
1:                 if (queueView.getQueueSize() == 0) {
1:                     return 0;
1:                 }
1:             } catch (Exception e) {
1:                 LOG.debug("Error during destination check: {}", e);
1:             }
1: 
1:             Message msg = consumer.receive(1000);
1:                 msg = consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
0:         brokerService.setUseJmx(true);
0:         brokerService.getManagementContext().setCreateMBeanServer(false);
0: //        final File classesDir = new File(AmqpProtocolConverter.class.getProtectionDomain().getCodeSource().getLocation().getFile());
0: //        File keystore = new File(classesDir, "../../src/test/resources/keystore");
0: //        final SpringSslContext sslContext = new SpringSslContext();
0: //        sslContext.setKeyStore(keystore.getCanonicalPath());
0: //        sslContext.setKeyStorePassword("password");
0: //        sslContext.setTrustStore(keystore.getCanonicalPath());
0: //        sslContext.setTrustStorePassword("password");
0: //        sslContext.afterPropertiesSet();
0: //        brokerService.setSslContext(sslContext);
0:         brokerService.waitUntilStarted();
commit:359ec25
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
/////////////////////////////////////////////////////////////////////////
0:         Queue queue = session.createQueue("txqueue");
1:         MessageProducer p = session.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
0:         QueueImpl qpidQueue = new QueueImpl("queue://txqueue");
0:         int messagesReceived = readAllMessages(qpidQueue);
0:         messagesReceived = readAllMessages(qpidQueue);
0:         Queue queue = session.createQueue("txqueue");
1:         MessageProducer p = session.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
0:         Queue queue = session.createQueue("txqueue");
/////////////////////////////////////////////////////////////////////////
0:     private int readAllMessages(Queue queue) throws JMSException {
0:     private int readAllMessages(Queue queue, String selector) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug(">>>> Sent [{}]", messageText);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Using selector: {}", selector);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Using selector: {}", selector);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug(">>>> Sent [{}]", messageText);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug(">>>> Received [{}]", textMessage.getText());
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(">>> In createConnection using port {}", port);
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(">>> In createConnection using port {}", port);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:eec7d74
/////////////////////////////////////////////////////////////////////////
1:     public void testSelectingOnAMQPMessageID() throws Exception {
1:         ActiveMQAdmin.enableJMSFrameTracing();
0:         QueueImpl queue = new QueueImpl("queue://txqueue");
1:         assertTrue(brokerService.isPersistent());
1: 
0:         Connection connection = createAMQPConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination destination = session.createQueue("txqueue");
1:         MessageProducer p = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage();
1:         String messageText = "Hello sent at " + new java.util.Date().toString();
1:         message.setText(messageText);
1:         p.send(message);
1: 
1:         // Restart broker.
1:         restartBroker(connection, session);
1:         String selector = "JMSMessageID = '" + message.getJMSMessageID() + "'";
0:         LOG.info("Using selector: "+selector);
0:         int messagesReceived = readAllMessages(queue, selector);
1:         assertEquals(1, messagesReceived);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSelectingOnActiveMQMessageID() throws Exception {
1:         ActiveMQAdmin.enableJMSFrameTracing();
0:         QueueImpl queue = new QueueImpl("queue://txqueue");
1:         assertTrue(brokerService.isPersistent());
1: 
1:         Connection connection = createAMQConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination destination = session.createQueue("txqueue");
1:         MessageProducer p = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage();
1:         String messageText = "Hello sent at " + new java.util.Date().toString();
1:         message.setText(messageText);
1:         p.send(message);
1: 
1:         // Restart broker.
1:         restartBroker(connection, session);
1:         String selector = "JMSMessageID = '" + message.getJMSMessageID() + "'";
0:         LOG.info("Using selector: "+selector);
0:         int messagesReceived = readAllMessages(queue, selector);
1:         assertEquals(1, messagesReceived);
1:     }
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
0:         return readAllMessages(queue, null);
1:     }
1: 
0:     private int readAllMessages(QueueImpl queue, String selector) throws JMSException {
1:             MessageConsumer consumer;
1:             if( selector==null ) {
1:                 consumer = session.createConsumer(queue);
1:             } else {
1:                 consumer = session.createConsumer(queue, selector);
1:             }
/////////////////////////////////////////////////////////////////////////
0:         brokerService.setStoreOpenWireVersion(10);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:03a2c5e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:     private String openwireUri;
1: 
1:     public void testMessagesAreAckedAMQProducer() throws Exception {
1:         Connection connection = createAMQConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination destination = session.createQueue("txqueue");
0:         MessageProducer p = session.createProducer(destination);
1:         TextMessage message = null;
1:         for (int i=0; i < messagesSent; i++) {
1:             message = session.createTextMessage();
1:             String messageText = "Hello " + i + " sent at " + new java.util.Date().toString();
1:             message.setText(messageText);
0:             LOG.debug(">>>> Sent [" + messageText + "]");
1:             p.send(message);
1:         }
1: 
1:         // After the first restart we should get all messages sent above
1:         restartBroker(connection, session);
0:         int messagesReceived = readAllMessages(queue);
1:         assertEquals(messagesSent, messagesReceived);
1: 
1:         // This time there should be no messages on this queue
1:         restartBroker(connection, session);
0:         messagesReceived = readAllMessages(queue);
0:         assertEquals(0, messagesReceived);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMessagesAreAckedAMQPProducer() throws Exception {
1:         int messagesSent = 3;
1:         ActiveMQAdmin.enableJMSFrameTracing();
0:         QueueImpl queue = new QueueImpl("queue://txqueue");
1:         assertTrue(brokerService.isPersistent());
1: 
0:         Connection connection = createAMQPConnection();
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = createAMQPConnection();
/////////////////////////////////////////////////////////////////////////
0:     private Connection createAMQPConnection() throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     private Connection createAMQConnection() throws JMSException {
0:         LOG.debug(">>> In createConnection using port " + port);
0:         final ConnectionFactory factory = new ActiveMQConnectionFactory("admin", "password", openwireUri);
1:         final Connection connection = factory.createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1:         connection.start();
1:         return connection;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         openwireUri = brokerService.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
commit:6fa0598
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.spring.SpringSslContext;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.transport.amqp.joram.ActiveMQAdmin;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
1: import org.junit.Test;
1: 
1: public class AMQ4563Test extends AmqpTestSupport {
1: 
0:     public static final String KAHADB_DIRECTORY = "target/activemq-data/kahadb-amq4563";
1: 
1:     @Test(timeout = 60000)
0:     public void testTransactions() throws Exception {
1:         int messagesSent = 3;
1:         ActiveMQAdmin.enableJMSFrameTracing();
0:         QueueImpl queue = new QueueImpl("queue://txqueue");
1:         assertTrue(brokerService.isPersistent());
1: 
0:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer p = session.createProducer(queue);
1:         TextMessage message = null;
0:         for (int i=0; i < messagesSent; i++) {
1:             message = session.createTextMessage();
1:             String messageText = "Hello " + i + " sent at " + new java.util.Date().toString();
1:             message.setText(messageText);
0:             LOG.debug(">>>> Sent [" + messageText + "]");
0:             p.send(message);
1:         }
1: 
1:         // After the first restart we should get all messages sent above
1:         restartBroker(connection, session);
0:         int messagesReceived = readAllMessages(queue);
1:         assertEquals(messagesSent, messagesReceived);
1: 
1:         // This time there should be no messages on this queue
1:         restartBroker(connection, session);
0:         messagesReceived = readAllMessages(queue);
0:         assertEquals(0, messagesReceived);
1:     }
1: 
0:     private int readAllMessages(QueueImpl queue) throws JMSException {
0:         Connection connection = createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             int messagesReceived = 0;
0:             MessageConsumer consumer = session.createConsumer(queue);
0:             Message msg = consumer.receive(5000);
1:             while(msg != null) {
1:                 assertNotNull(msg);
1:                 assertTrue(msg instanceof TextMessage);
1:                 TextMessage textMessage = (TextMessage) msg;
0:                 LOG.debug(">>>> Received [" + textMessage.getText() + "]");
1:                 messagesReceived++;
0:                 msg = consumer.receive(5000);
1:             }
1:             consumer.close();
1: 
1:             return messagesReceived;
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private void restartBroker(Connection connection, Session session) throws Exception {
1:         session.close();
1:         connection.close();
1: 
0:         stopBroker();
0:         createBroker(false);
1:     }
1: 
0:     private Connection createConnection() throws JMSException {
0:         LOG.debug(">>> In createConnection using port " + port);
0:         final ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "admin", "password");
0:         final Connection connection = factory.createConnection();
0:         connection.setExceptionListener(new ExceptionListener() {
0:             @Override
0:             public void onException(JMSException exception) {
0:                 exception.printStackTrace();
1:             }
0:         });
0:         connection.start();
0:         return connection;
1:     }
1: 
0:     @Override
0:     public void startBroker() throws Exception {
0:         createBroker(true);
1:     }
1: 
1:     /**
0:      * Copied from AmqpTestSupport, modified to use persistence
1:      */
0:     public void createBroker(boolean deleteAllMessages) throws Exception {
0:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(new File(KAHADB_DIRECTORY));
1: 
0:         brokerService = new BrokerService();
0:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
0:         brokerService.setPersistent(true);
0:         brokerService.setPersistenceAdapter(kaha);
0:         brokerService.setAdvisorySupport(false);
0:         brokerService.setUseJmx(false);
1: 
0:         // Setup SSL context...
0:         final File classesDir = new File(AmqpProtocolConverter.class.getProtectionDomain().getCodeSource().getLocation().getFile());
0:         File keystore = new File(classesDir, "../../src/test/resources/keystore");
0:         final SpringSslContext sslContext = new SpringSslContext();
0:         sslContext.setKeyStore(keystore.getCanonicalPath());
0:         sslContext.setKeyStorePassword("password");
0:         sslContext.setTrustStore(keystore.getCanonicalPath());
0:         sslContext.setTrustStorePassword("password");
0:         sslContext.afterPropertiesSet();
0:         brokerService.setSslContext(sslContext);
1: 
0:         addAMQPConnector();
0:         brokerService.start();
0:         this.numberOfMessages = 2000;
1:     }
1: }
============================================================================