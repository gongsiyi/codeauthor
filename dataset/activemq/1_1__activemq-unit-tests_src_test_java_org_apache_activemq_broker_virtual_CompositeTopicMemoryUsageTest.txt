1:7413ee0: /**
1:7413ee0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7413ee0:  * contributor license agreements.  See the NOTICE file distributed with
1:7413ee0:  * this work for additional information regarding copyright ownership.
1:7413ee0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7413ee0:  * (the "License"); you may not use this file except in compliance with
1:7413ee0:  * the License.  You may obtain a copy of the License at
1:7413ee0:  *
1:7413ee0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7413ee0:  *
1:7413ee0:  * Unless required by applicable law or agreed to in writing, software
1:7413ee0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7413ee0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7413ee0:  * See the License for the specific language governing permissions and
1:7413ee0:  * limitations under the License.
1:7413ee0:  */
1:7413ee0: package org.apache.activemq.broker.virtual;
1:7413ee0: 
1:7413ee0: 
1:7413ee0: import junit.framework.Assert;
1:7413ee0: import org.apache.activemq.ActiveMQConnectionFactory;
1:7413ee0: import org.apache.activemq.broker.BrokerService;
1:7413ee0: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:7413ee0: import org.apache.activemq.broker.region.DestinationInterceptor;
1:7413ee0: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7413ee0: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7413ee0: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1:7413ee0: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:7413ee0: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:7413ee0: import org.apache.activemq.command.ActiveMQBytesMessage;
1:7413ee0: import org.apache.activemq.command.ActiveMQDestination;
1:7413ee0: import org.apache.activemq.command.ActiveMQQueue;
1:7413ee0: import org.apache.activemq.command.ActiveMQTopic;
1:7413ee0: import org.apache.activemq.util.ByteSequence;
1:7413ee0: import org.junit.Test;
1:7413ee0: import org.slf4j.Logger;
1:7413ee0: import org.slf4j.LoggerFactory;
1:7413ee0: 
1:7413ee0: import javax.jms.Connection;
1:7413ee0: import javax.jms.DeliveryMode;
1:7413ee0: import javax.jms.MessageProducer;
1:7413ee0: import javax.jms.Session;
1:7413ee0: import javax.management.ObjectName;
1:7413ee0: import java.util.ArrayList;
1:7413ee0: import java.util.Collection;
1:7413ee0: 
1:7413ee0: /**
1:7413ee0:  * Test to ensure the CompositeTopic Memory Usage returns to zero after messages forwarded to underlying queues
1:7413ee0:  */
1:7413ee0: 
1:7413ee0: public class CompositeTopicMemoryUsageTest {
1:7413ee0: 
1:7413ee0:     private static final Logger LOG = LoggerFactory.getLogger(CompositeTopicMemoryUsageTest.class);
1:7413ee0:     public int messageSize = 5*1024;
1:7413ee0:     public int messageCount = 1000;
1:7413ee0:     ActiveMQTopic target = new ActiveMQTopic("target");
1:7413ee0:     BrokerService brokerService;
1:7413ee0:     ActiveMQConnectionFactory connectionFactory;
1:7413ee0: 
1:7413ee0:     @Test
1:7413ee0:     public void testMemoryUsage() throws Exception {
1:7413ee0:         startBroker(4, true);
1:7413ee0: 
1:7413ee0:         messageSize = 20*1024;
1:7413ee0: 
1:7413ee0:         produceMessages(20, target);
1:7413ee0: 
1:7413ee0:         long memoryUsage = getMemoryUsageForTopic(target.getPhysicalName());
1:7413ee0:         Assert.assertEquals("MemoryUsage should be zero",0l, memoryUsage);
1:7413ee0: 
1:7413ee0:         brokerService.stop();
1:7413ee0:         brokerService.waitUntilStopped();
1:7413ee0: 
1:7413ee0:     }
1:7413ee0: 
1:7413ee0:     private long getMemoryUsageForTopic(String topicName) throws Exception {
1:7413ee0:         ObjectName[] topics = brokerService.getAdminView().getTopics();
1:7413ee0: 
1:7413ee0:         for (ObjectName objectName: topics) {
1:7413ee0: 
1:7413ee0:             if (objectName.getCanonicalName().contains(topicName)) {
1:7413ee0:                 TopicViewMBean topicViewMBean = (TopicViewMBean)
1:7413ee0:                         brokerService.getManagementContext().newProxyInstance(objectName, TopicViewMBean.class, false);
1:7413ee0:                 return topicViewMBean.getMemoryUsageByteCount();
1:7413ee0:             }
1:7413ee0:         }
1:7413ee0:         throw new Exception("NO TOPIC FOUND");
1:7413ee0:     }
1:7413ee0: 
1:7413ee0: 
1:7413ee0: 
1:7413ee0: 
1:7413ee0:     protected void produceMessages(int messageCount, ActiveMQDestination destination) throws Exception {
1:7413ee0:         final ByteSequence payLoad = new ByteSequence(new byte[messageSize]);
1:7413ee0:         Connection connection = connectionFactory.createConnection();
1:7413ee0:         MessageProducer messageProducer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(destination);
1:7413ee0:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:7413ee0:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:7413ee0:         message.setContent(payLoad);
1:7413ee0:         for(int i =0; i< messageCount; i++){
1:7413ee0:             messageProducer.send(message);
1:7413ee0:         }
1:7413ee0:         connection.close();
1:7413ee0:     }
1:7413ee0: 
1:7413ee0:     private void startBroker(int fanoutCount, boolean concurrentSend) throws Exception {
1:7413ee0:         brokerService = new BrokerService();
1:7413ee0:         brokerService.setDeleteAllMessagesOnStartup(true);
1:7413ee0:         brokerService.setUseVirtualTopics(true);
1:7413ee0:         brokerService.addConnector("tcp://0.0.0.0:0");
1:7413ee0:         brokerService.setAdvisorySupport(false);
1:7413ee0:         PolicyMap destPolicyMap = new PolicyMap();
1:7413ee0:         PolicyEntry defaultEntry = new PolicyEntry();
1:7413ee0:         defaultEntry.setExpireMessagesPeriod(0);
1:7413ee0:         defaultEntry.setOptimizedDispatch(true);
1:7413ee0:         defaultEntry.setCursorMemoryHighWaterMark(110);
1:7413ee0:         destPolicyMap.setDefaultEntry(defaultEntry);
1:7413ee0:         brokerService.setDestinationPolicy(destPolicyMap);
1:7413ee0: 
1:7413ee0:         CompositeTopic route = new CompositeTopic();
1:7413ee0:         route.setName("target");
1:7413ee0:         route.setForwardOnly(false);
1:7413ee0:         route.setConcurrentSend(concurrentSend);
1:7413ee0:         Collection<ActiveMQQueue> routes = new ArrayList<ActiveMQQueue>();
1:7413ee0:         for (int i=0; i<fanoutCount; i++) {
1:7413ee0:             routes.add(new ActiveMQQueue("route." + i));
1:7413ee0:         }
1:7413ee0:         route.setForwardTo(routes);
1:7413ee0:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:7413ee0:         interceptor.setVirtualDestinations(new VirtualDestination[]{route});
1:7413ee0:         brokerService.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:7413ee0:         brokerService.start();
1:7413ee0: 
1:7413ee0:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:7413ee0:         connectionFactory.setWatchTopicAdvisories(false);
1:7413ee0: 
1:7413ee0:     }
1:7413ee0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:7413ee0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: 
1: import junit.framework.Assert;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: /**
1:  * Test to ensure the CompositeTopic Memory Usage returns to zero after messages forwarded to underlying queues
1:  */
1: 
1: public class CompositeTopicMemoryUsageTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(CompositeTopicMemoryUsageTest.class);
1:     public int messageSize = 5*1024;
1:     public int messageCount = 1000;
1:     ActiveMQTopic target = new ActiveMQTopic("target");
1:     BrokerService brokerService;
1:     ActiveMQConnectionFactory connectionFactory;
1: 
1:     @Test
1:     public void testMemoryUsage() throws Exception {
1:         startBroker(4, true);
1: 
1:         messageSize = 20*1024;
1: 
1:         produceMessages(20, target);
1: 
1:         long memoryUsage = getMemoryUsageForTopic(target.getPhysicalName());
1:         Assert.assertEquals("MemoryUsage should be zero",0l, memoryUsage);
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:     }
1: 
1:     private long getMemoryUsageForTopic(String topicName) throws Exception {
1:         ObjectName[] topics = brokerService.getAdminView().getTopics();
1: 
1:         for (ObjectName objectName: topics) {
1: 
1:             if (objectName.getCanonicalName().contains(topicName)) {
1:                 TopicViewMBean topicViewMBean = (TopicViewMBean)
1:                         brokerService.getManagementContext().newProxyInstance(objectName, TopicViewMBean.class, false);
1:                 return topicViewMBean.getMemoryUsageByteCount();
1:             }
1:         }
1:         throw new Exception("NO TOPIC FOUND");
1:     }
1: 
1: 
1: 
1: 
1:     protected void produceMessages(int messageCount, ActiveMQDestination destination) throws Exception {
1:         final ByteSequence payLoad = new ByteSequence(new byte[messageSize]);
1:         Connection connection = connectionFactory.createConnection();
1:         MessageProducer messageProducer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(destination);
1:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         message.setContent(payLoad);
1:         for(int i =0; i< messageCount; i++){
1:             messageProducer.send(message);
1:         }
1:         connection.close();
1:     }
1: 
1:     private void startBroker(int fanoutCount, boolean concurrentSend) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setUseVirtualTopics(true);
1:         brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.setAdvisorySupport(false);
1:         PolicyMap destPolicyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         defaultEntry.setOptimizedDispatch(true);
1:         defaultEntry.setCursorMemoryHighWaterMark(110);
1:         destPolicyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(destPolicyMap);
1: 
1:         CompositeTopic route = new CompositeTopic();
1:         route.setName("target");
1:         route.setForwardOnly(false);
1:         route.setConcurrentSend(concurrentSend);
1:         Collection<ActiveMQQueue> routes = new ArrayList<ActiveMQQueue>();
1:         for (int i=0; i<fanoutCount; i++) {
1:             routes.add(new ActiveMQQueue("route." + i));
1:         }
1:         route.setForwardTo(routes);
1:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:         interceptor.setVirtualDestinations(new VirtualDestination[]{route});
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:         brokerService.start();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:     }
1: }
============================================================================