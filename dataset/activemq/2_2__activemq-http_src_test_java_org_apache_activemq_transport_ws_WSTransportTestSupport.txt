1:f05f83b: /**
1:f05f83b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f05f83b:  * contributor license agreements.  See the NOTICE file distributed with
1:f05f83b:  * this work for additional information regarding copyright ownership.
1:f05f83b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f05f83b:  * (the "License"); you may not use this file except in compliance with
1:f05f83b:  * the License.  You may obtain a copy of the License at
1:f05f83b:  *
1:f05f83b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f05f83b:  *
1:f05f83b:  * Unless required by applicable law or agreed to in writing, software
1:f05f83b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f05f83b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f05f83b:  * See the License for the specific language governing permissions and
1:f05f83b:  * limitations under the License.
1:f05f83b:  */
1:f05f83b: package org.apache.activemq.transport.ws;
1:f05f83b: 
1:f05f83b: import java.io.IOException;
1:f05f83b: import java.net.ServerSocket;
1:f05f83b: import java.net.URI;
1:f05f83b: 
1:f05f83b: import javax.jms.JMSException;
1:f05f83b: import javax.management.MalformedObjectNameException;
1:f05f83b: import javax.management.ObjectName;
1:f05f83b: import javax.net.ServerSocketFactory;
1:f05f83b: 
1:f05f83b: import org.apache.activemq.broker.BrokerService;
1:f05f83b: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:f05f83b: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:f05f83b: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:f05f83b: import org.apache.activemq.spring.SpringSslContext;
1:f05f83b: import org.junit.After;
1:f05f83b: import org.junit.Before;
1:f05f83b: import org.junit.Rule;
1:f05f83b: import org.junit.rules.TestName;
1:f05f83b: import org.slf4j.Logger;
1:f05f83b: import org.slf4j.LoggerFactory;
1:f05f83b: 
1:f05f83b: /**
1:f05f83b:  * Basic infrastructure for test WebSocket connections.
1:f05f83b:  */
1:f05f83b: public class WSTransportTestSupport {
1:f05f83b: 
1:f05f83b:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTestSupport.class);
1:f05f83b: 
1:f05f83b:     @Rule
1:f05f83b:     public TestName name = new TestName();
1:f05f83b: 
1:f05f83b:     private int proxyPort = 0;
1:f05f83b: 
1:f05f83b:     protected BrokerService broker;
1:f05f83b:     protected URI wsConnectUri;
1:f05f83b: 
1:f05f83b:     @Before
1:f05f83b:     public void setUp() throws Exception {
1:3125cae:         LOG.info("========== Starting test: {} ==========", name.getMethodName());
1:bd442a3:         broker = createBroker(true, true);
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @After
1:f05f83b:     public void tearDown() throws Exception {
1:f05f83b:         try {
1:f05f83b:             stopBroker();
1:f05f83b:         } catch(Exception e) {
1:f05f83b:             LOG.warn("Error on Broker stop.");
1:f05f83b:         }
1:3125cae: 
1:3125cae:         LOG.info("========== Finished test: {} ==========", name.getMethodName());
1:f05f83b:     }
1:f44c3d2: 
1:31c55f7:     protected String getWSConnectionURI() {
1:31c55f7:         return "ws://127.0.0.1:" + getProxyPort();
1:31c55f7:     }
1:f05f83b: 
1:f05f83b:     protected String getWSConnectorURI() {
1:27edaff:         return "ws://127.0.0.1:" + getProxyPort() +
1:31c55f7:                "?allowLinkStealing=" + isAllowLinkStealing() +
1:31c55f7:                "&websocket.maxTextMessageSize=99999" +
1:31c55f7:                "&transport.idleTimeout=1001" +
1:31c55f7:                "&trace=true&transport.trace=true";
1:27edaff:     }
1:27edaff: 
1:27edaff:     protected boolean isAllowLinkStealing() {
1:27edaff:         return false;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected void addAdditionalConnectors(BrokerService service) throws Exception {
1:f05f83b: 
1:f05f83b:     }
1:f05f83b: 
1:bd442a3:     protected BrokerService createBroker(boolean deleteMessages, boolean advisorySupport) throws Exception {
1:f05f83b: 
1:f05f83b:         BrokerService broker = new BrokerService();
1:f05f83b: 
1:f05f83b:         SpringSslContext context = new SpringSslContext();
1:f05f83b:         context.setKeyStore("src/test/resources/server.keystore");
1:f05f83b:         context.setKeyStoreKeyPassword("password");
1:f05f83b:         context.setTrustStore("src/test/resources/client.keystore");
1:f05f83b:         context.setTrustStorePassword("password");
1:f05f83b:         context.afterPropertiesSet();
1:f05f83b:         broker.setSslContext(context);
1:f05f83b: 
1:f05f83b:         wsConnectUri = broker.addConnector(getWSConnectorURI()).getPublishableConnectURI();
1:f05f83b: 
1:bd442a3:         broker.setAdvisorySupport(advisorySupport);
1:f05f83b:         broker.setUseJmx(true);
1:f05f83b:         broker.getManagementContext().setCreateConnector(false);
1:f05f83b:         broker.setPersistent(isPersistent());
1:f05f83b:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:f05f83b:         broker.start();
1:f05f83b:         broker.waitUntilStarted();
1:f05f83b: 
1:f05f83b:         addAdditionalConnectors(broker);
1:f05f83b: 
1:f05f83b:         return broker;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected boolean isPersistent() {
1:f05f83b:         return false;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected String getTestName() {
1:f05f83b:         return name.getMethodName();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected int getProxyPort() {
1:f05f83b:         if (proxyPort == 0) {
1:f05f83b:             ServerSocket ss = null;
1:f05f83b:             try {
1:f05f83b:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:f05f83b:                 proxyPort = ss.getLocalPort();
1:f05f83b:             } catch (IOException e) { // ignore
1:f05f83b:             } finally {
1:f05f83b:                 try {
1:f05f83b:                     if (ss != null ) {
1:f05f83b:                         ss.close();
1:f05f83b:                     }
1:f05f83b:                 } catch (IOException e) { // ignore
1:f05f83b:                 }
1:f05f83b:             }
1:f05f83b:         }
1:f05f83b: 
1:f05f83b:         return proxyPort;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected void stopBroker() throws Exception {
1:f05f83b:         if (broker != null) {
1:f05f83b:             broker.stop();
1:f05f83b:             broker.waitUntilStopped();
1:f05f83b:             broker = null;
1:f05f83b:         }
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:f05f83b:         ObjectName brokerViewMBean = new ObjectName(
1:f05f83b:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:f05f83b:         BrokerViewMBean proxy = (BrokerViewMBean) broker.getManagementContext()
1:f05f83b:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:f05f83b:         return proxy;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:f05f83b:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:f05f83b:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:f05f83b:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:f05f83b:         return proxy;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:f05f83b:         ObjectName topicViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:f05f83b:         TopicViewMBean proxy = (TopicViewMBean) broker.getManagementContext()
1:f05f83b:                 .newProxyInstance(topicViewMBeanName, TopicViewMBean.class, true);
1:f05f83b:         return proxy;
1:f05f83b:     }
1:f05f83b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bd442a3
/////////////////////////////////////////////////////////////////////////
1:         broker = createBroker(true, true);
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService createBroker(boolean deleteMessages, boolean advisorySupport) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         broker.setAdvisorySupport(advisorySupport);
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
0: //    protected String getWSConnectorURI() {
0: //        return "ws://127.0.0.1:" + getProxyPort() +
0: //            "?allowLinkStealing=" + isAllowLinkStealing() +
0: //            "&websocket.maxTextMessageSize=99999&" +
0: //            "transport.maxIdleTime=1001";
0: //    }
1: 
0:             "transport.idleTimeout=1001";
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:     protected String getWSConnectionURI() {
1:         return "ws://127.0.0.1:" + getProxyPort();
1:     }
1:                "?allowLinkStealing=" + isAllowLinkStealing() +
1:                "&websocket.maxTextMessageSize=99999" +
1:                "&transport.idleTimeout=1001" +
1:                "&trace=true&transport.trace=true";
commit:27edaff
/////////////////////////////////////////////////////////////////////////
1:         return "ws://127.0.0.1:" + getProxyPort() +
0:             "?allowLinkStealing=" + isAllowLinkStealing() +
0:             "&websocket.maxTextMessageSize=99999&" +
0:             "transport.maxIdleTime=1001";
1:     }
1: 
1:     protected boolean isAllowLinkStealing() {
1:         return false;
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("========== Starting test: {} ==========", name.getMethodName());
/////////////////////////////////////////////////////////////////////////
1: 
1:         LOG.info("========== Finished test: {} ==========", name.getMethodName());
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.net.URI;
1: 
1: import javax.jms.JMSException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.net.ServerSocketFactory;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Basic infrastructure for test WebSocket connections.
1:  */
1: public class WSTransportTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTestSupport.class);
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     private int proxyPort = 0;
1: 
1:     protected BrokerService broker;
1:     protected URI wsConnectUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         broker = createBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             stopBroker();
1:         } catch(Exception e) {
1:             LOG.warn("Error on Broker stop.");
1:         }
1:     }
1: 
1:     protected String getWSConnectorURI() {
0:         return "ws://127.0.0.1:" + getProxyPort() + "?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:     }
1: 
1:     protected void addAdditionalConnectors(BrokerService service) throws Exception {
1: 
1:     }
1: 
0:     protected BrokerService createBroker(boolean deleteMessages) throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1: 
1:         SpringSslContext context = new SpringSslContext();
1:         context.setKeyStore("src/test/resources/server.keystore");
1:         context.setKeyStoreKeyPassword("password");
1:         context.setTrustStore("src/test/resources/client.keystore");
1:         context.setTrustStorePassword("password");
1:         context.afterPropertiesSet();
1:         broker.setSslContext(context);
1: 
1:         wsConnectUri = broker.addConnector(getWSConnectorURI()).getPublishableConnectURI();
1: 
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setPersistent(isPersistent());
1:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         addAdditionalConnectors(broker);
1: 
1:         return broker;
1:     }
1: 
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
1:     protected String getTestName() {
1:         return name.getMethodName();
1:     }
1: 
1:     protected int getProxyPort() {
1:         if (proxyPort == 0) {
1:             ServerSocket ss = null;
1:             try {
1:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:                 proxyPort = ss.getLocalPort();
1:             } catch (IOException e) { // ignore
1:             } finally {
1:                 try {
1:                     if (ss != null ) {
1:                         ss.close();
1:                     }
1:                 } catch (IOException e) { // ignore
1:                 }
1:             }
1:         }
1: 
1:         return proxyPort;
1:     }
1: 
1:     protected void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean proxy = (BrokerViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName topicViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:         TopicViewMBean proxy = (TopicViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(topicViewMBeanName, TopicViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================