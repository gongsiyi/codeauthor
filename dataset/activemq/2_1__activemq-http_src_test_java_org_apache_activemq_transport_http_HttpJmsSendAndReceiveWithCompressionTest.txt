1:ef85089: /**
1:ef85089:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ef85089:  * contributor license agreements.  See the NOTICE file distributed with
1:ef85089:  * this work for additional information regarding copyright ownership.
1:ef85089:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ef85089:  * (the "License"); you may not use this file except in compliance with
1:ef85089:  * the License.  You may obtain a copy of the License at
1:ef85089:  *
1:ef85089:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ef85089:  *
1:ef85089:  * Unless required by applicable law or agreed to in writing, software
1:ef85089:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef85089:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef85089:  * See the License for the specific language governing permissions and
1:ef85089:  * limitations under the License.
1:ef85089:  */
1:ef85089: package org.apache.activemq.transport.http;
1:ef85089: 
1:ef85089: import java.util.List;
1:ef85089: import javax.jms.Message;
1:ef85089: import javax.jms.TextMessage;
1:ef85089: 
1:ef85089: import org.apache.activemq.ActiveMQConnectionFactory;
1:ef85089: import org.apache.activemq.broker.BrokerService;
1:ef85089: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1:ef85089: import org.slf4j.Logger;
1:ef85089: import org.slf4j.LoggerFactory;
1:ef85089: 
1:ef85089: /**
1:ef85089:  * Tests the Wire Level Http GZip compression.
1:ef85089:  */
1:ef85089: public class HttpJmsSendAndReceiveWithCompressionTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:ef85089:     private static final Logger logger = LoggerFactory.getLogger(HttpJmsSendAndReceiveWithCompressionTest.class);
1:ef85089: 
1:ef85089:     protected BrokerService broker;
1:ef85089: 
1:ef85089:     protected void setUp() throws Exception {
1:ef85089:         if (broker == null) {
1:ef85089:             broker = createBroker();
1:ef85089:             broker.start();
1:ef85089:         }
1:ef85089:         super.setUp();
1:ef85089:         WaitForJettyListener.waitForJettySocketToAccept(getBrokerURL());
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected void tearDown() throws Exception {
1:ef85089:         super.tearDown();
1:ef85089:         if (broker != null) {
1:ef85089:             broker.stop();
1:ef85089:         }
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected ActiveMQConnectionFactory createConnectionFactory() {
1:ef85089:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURL());
1:ef85089:         return connectionFactory;
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected String getBrokerURL() {
1:ef85089:         return "http://localhost:8161?useCompression=true";
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected BrokerService createBroker() throws Exception {
1:ef85089:         BrokerService answer = new BrokerService();
1:ef85089:         answer.setPersistent(false);
1:ef85089:         answer.addConnector(getBrokerURL());
1:ef85089:         return answer;
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected void consumeMessage(Message message, List<Message> messageList) {
1:ef85089:         super.consumeMessage(message, messageList);
1:ef85089:         if (message instanceof TextMessage) {
1:ef85089:             TextMessage textMessage = TextMessage.class.cast(message);
1:ef85089:             try {
1:ef85089:                 logger.debug("Received text message with text: {}", textMessage.getText());
1:ef85089:             } catch( javax.jms.JMSException jmsE) {
1:ef85089:                 logger.debug("Received an exception while trying to retrieve the text message", jmsE);
1:ef85089:                 throw new RuntimeException(jmsE);
1:ef85089:             }
1:ef85089:         } else {
1:ef85089:             logger.debug("Received a non text message: {}", message);
1:ef85089:         }
1:ef85089:     }
1:ef85089: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef85089
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
1: import java.util.List;
1: import javax.jms.Message;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests the Wire Level Http GZip compression.
1:  */
1: public class HttpJmsSendAndReceiveWithCompressionTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:     private static final Logger logger = LoggerFactory.getLogger(HttpJmsSendAndReceiveWithCompressionTest.class);
1: 
1:     protected BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:             broker.start();
1:         }
1:         super.setUp();
1:         WaitForJettyListener.waitForJettySocketToAccept(getBrokerURL());
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURL());
1:         return connectionFactory;
1:     }
1: 
1:     protected String getBrokerURL() {
1:         return "http://localhost:8161?useCompression=true";
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.addConnector(getBrokerURL());
1:         return answer;
1:     }
1: 
1:     protected void consumeMessage(Message message, List<Message> messageList) {
1:         super.consumeMessage(message, messageList);
1:         if (message instanceof TextMessage) {
1:             TextMessage textMessage = TextMessage.class.cast(message);
1:             try {
1:                 logger.debug("Received text message with text: {}", textMessage.getText());
1:             } catch( javax.jms.JMSException jmsE) {
1:                 logger.debug("Received an exception while trying to retrieve the text message", jmsE);
1:                 throw new RuntimeException(jmsE);
1:             }
1:         } else {
1:             logger.debug("Received a non text message: {}", message);
1:         }
1:     }
1: }
============================================================================