1:102599e: /*
1:102599e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:102599e:  * contributor license agreements.  See the NOTICE file distributed with
1:102599e:  * this work for additional information regarding copyright ownership.
1:102599e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:102599e:  * (the "License"); you may not use this file except in compliance with
1:102599e:  * the License.  You may obtain a copy of the License at
1:102599e:  *
1:102599e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:102599e:  *
1:102599e:  * Unless required by applicable law or agreed to in writing, software
1:102599e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:102599e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:102599e:  * See the License for the specific language governing permissions and
1:102599e:  * limitations under the License.
1:102599e:  */
1:102599e: package org.apache.activemq.jms.pool;
4:102599e: 
1:102599e: import static org.junit.Assert.assertNotSame;
1:e3a6871: import static org.junit.Assert.assertTrue;
1:102599e: import static org.junit.Assert.fail;
1:102599e: 
1:102599e: import java.util.ArrayList;
1:102599e: import java.util.List;
1:102599e: 
1:102599e: import javax.jms.Connection;
1:102599e: import javax.jms.ExceptionListener;
1:102599e: import javax.jms.JMSException;
1:102599e: import javax.jms.JMSSecurityException;
1:102599e: import javax.jms.MessageProducer;
1:102599e: import javax.jms.Queue;
1:102599e: import javax.jms.Session;
1:102599e: 
1:102599e: import org.apache.activemq.ActiveMQConnectionFactory;
1:102599e: import org.apache.activemq.broker.BrokerPlugin;
1:102599e: import org.apache.activemq.broker.BrokerService;
1:102599e: import org.apache.activemq.filter.DestinationMapEntry;
1:102599e: import org.apache.activemq.security.AuthenticationUser;
1:102599e: import org.apache.activemq.security.AuthorizationEntry;
1:102599e: import org.apache.activemq.security.AuthorizationPlugin;
1:102599e: import org.apache.activemq.security.DefaultAuthorizationMap;
1:102599e: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:102599e: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1:e3a6871: import org.apache.activemq.util.Wait;
1:102599e: import org.junit.After;
1:102599e: import org.junit.Before;
1:102599e: import org.junit.Rule;
1:102599e: import org.junit.Test;
1:102599e: import org.junit.rules.TestName;
1:102599e: import org.slf4j.Logger;
1:102599e: import org.slf4j.LoggerFactory;
1:102599e: 
1:102599e: /**
1:102599e:  * Test Pooled connections ability to handle security exceptions
1:102599e:  */
1:102599e: public class PooledConnectionSecurityExceptionTest {
1:102599e: 
1:102599e:     protected static final Logger LOG = LoggerFactory.getLogger(PooledConnectionSecurityExceptionTest.class);
1:102599e: 
1:102599e:     @Rule public TestName name = new TestName();
1:102599e: 
1:102599e:     private BrokerService brokerService;
1:102599e:     private String connectionURI;
1:102599e: 
1:102599e:     protected PooledConnectionFactory pooledConnFact;
1:102599e: 
1:102599e:     @Test
1:102599e:     public void testFailedConnectThenSucceeds() throws JMSException {
1:102599e:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1:102599e: 
1:102599e:         try {
1:102599e:             connection.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:102599e:         connection = pooledConnFact.createConnection("system", "manager");
1:102599e:         connection.start();
1:102599e: 
1:102599e:         LOG.info("Successfully create new connection.");
1:27ce49f: 
1:27ce49f:         connection.close();
1:102599e:     }
1:27ce49f: 
1:102599e:     @Test
1:102599e:     public void testFailedConnectThenSucceedsWithListener() throws JMSException {
1:102599e:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1:102599e:         connection.setExceptionListener(new ExceptionListener() {
1:27ce49f: 
1:102599e:             @Override
1:102599e:             public void onException(JMSException exception) {
1:102599e:                 LOG.warn("Connection get error: {}", exception.getMessage());
1:102599e:             }
1:102599e:         });
1:102599e: 
1:102599e:         try {
1:102599e:             connection.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:102599e:         connection = pooledConnFact.createConnection("system", "manager");
1:102599e:         connection.start();
1:102599e: 
1:102599e:         LOG.info("Successfully create new connection.");
1:102599e: 
1:27ce49f:         connection.close();
1:102599e:     }
1:102599e: 
1:102599e:     @Test
1:2e64abc:     public void testFailureGetsNewConnectionOnRetryLooped() throws Exception {
1:2e64abc:         for (int i = 0; i < 10; ++i) {
1:2e64abc:             testFailureGetsNewConnectionOnRetry();
1:2e64abc:         }
1:2e64abc:     }
1:2e64abc: 
1:2e64abc:     @Test
1:100c5e0:     public void testFailureGetsNewConnectionOnRetry() throws Exception {
1:2e64abc:         pooledConnFact.setMaxConnections(1);
1:2e64abc: 
1:c81a934:         final PooledConnection connection1 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
1:102599e: 
1:102599e:         try {
1:102599e:             connection1.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:100c5e0:         // The pool should process the async error
1:100c5e0:         assertTrue("Should get new connection", Wait.waitFor(new Wait.Condition() {
1:100c5e0: 
1:100c5e0:             @Override
1:100c5e0:             public boolean isSatisified() throws Exception {
1:c81a934:                 return connection1.getConnection() !=
1:2e64abc:                     ((PooledConnection) pooledConnFact.createConnection("invalid", "credentials")).getConnection();
1:100c5e0:             }
1:100c5e0:         }));
1:100c5e0: 
1:2e64abc:         final PooledConnection connection2 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
1:2e64abc:         assertNotSame(connection1.getConnection(), connection2.getConnection());
1:2e64abc: 
1:102599e:         try {
1:102599e:             connection2.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:27ce49f:         } finally {
1:27ce49f:             connection2.close();
1:102599e:         }
1:27ce49f: 
1:27ce49f:         connection1.close();
1:102599e:     }
1:27ce49f: 
1:102599e:     @Test
1:102599e:     public void testFailureGetsNewConnectionOnRetryBigPool() throws JMSException {
1:102599e:         pooledConnFact.setMaxConnections(10);
1:102599e: 
3:102599e:         Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
1:102599e:         try {
1:102599e:             connection1.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
3:102599e:         Connection connection2 = pooledConnFact.createConnection("invalid", "credentials");
1:102599e:         try {
1:102599e:             connection2.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:e3a6871:         assertNotSame(connection1, connection2);
1:27ce49f: 
1:27ce49f:         connection1.close();
1:27ce49f:         connection2.close();
1:102599e:     }
1:102599e: 
1:102599e:     @Test
1:102599e:     public void testFailoverWithInvalidCredentialsCanConnect() throws JMSException {
1:102599e: 
1:102599e:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
2:102599e:             "failover:(" + connectionURI + ")");
1:102599e: 
1:102599e:         pooledConnFact = new PooledConnectionFactory();
1:102599e:         pooledConnFact.setConnectionFactory(cf);
1:102599e:         pooledConnFact.setMaxConnections(1);
1:102599e: 
1:102599e:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1:102599e: 
1:102599e:         try {
1:102599e:             connection.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:102599e:         connection = pooledConnFact.createConnection("system", "manager");
1:102599e:         connection.start();
1:102599e: 
1:102599e:         LOG.info("Successfully create new connection.");
1:102599e: 
1:27ce49f:         connection.close();
1:102599e:     }
1:102599e: 
1:102599e:     @Test
1:e3a6871:     public void testFailoverWithInvalidCredentials() throws Exception {
1:102599e: 
1:102599e:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:c81a934:             "failover:(" + connectionURI + "?trace=true)");
1:102599e: 
1:102599e:         pooledConnFact = new PooledConnectionFactory();
1:102599e:         pooledConnFact.setConnectionFactory(cf);
1:102599e:         pooledConnFact.setMaxConnections(1);
1:102599e: 
1:c81a934:         final PooledConnection connection1 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
1:102599e: 
1:102599e:         try {
1:102599e:             connection1.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:e3a6871:             // Intentionally don't close here to see that async pool reconnect takes place.
1:e3a6871:         }
1:e3a6871: 
1:e3a6871:         // The pool should process the async error
1:e3a6871:         assertTrue("Should get new connection", Wait.waitFor(new Wait.Condition() {
1:e3a6871: 
1:e3a6871:             @Override
1:e3a6871:             public boolean isSatisified() throws Exception {
1:c81a934:                 return connection1.getConnection() !=
1:c81a934:                           ((PooledConnection) pooledConnFact.createConnection("invalid", "credentials")).getConnection();
1:102599e:             }
1:e3a6871:         }));
1:e3a6871: 
1:c81a934:         final PooledConnection connection2 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
1:c81a934:         assertNotSame(connection1.getConnection(), connection2.getConnection());
1:102599e: 
1:102599e:         try {
1:102599e:             connection2.start();
1:102599e:             fail("Should fail to connect");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:27ce49f:             connection2.close();
1:27ce49f:         } finally {
1:e3a6871:             connection2.close();
1:102599e:         }
1:102599e: 
1:27ce49f:         connection1.close();
1:102599e:     }
1:102599e: 
1:102599e:     @Test
1:102599e:     public void testFailedCreateConsumerConnectionStillWorks() throws JMSException {
1:102599e:         Connection connection = pooledConnFact.createConnection("guest", "password");
1:102599e:         connection.start();
1:102599e: 
1:102599e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:102599e:         Queue queue = session.createQueue(name.getMethodName());
1:102599e: 
1:102599e:         try {
1:102599e:             session.createConsumer(queue);
1:102599e:             fail("Should fail to create consumer");
1:102599e:         } catch (JMSSecurityException ex) {
1:102599e:             LOG.info("Caught expected security error");
1:102599e:         }
1:102599e: 
1:102599e:         queue = session.createQueue("GUESTS." + name.getMethodName());
1:102599e: 
1:102599e:         MessageProducer producer = session.createProducer(queue);
1:102599e:         producer.close();
1:be032c9: 
1:be032c9:         connection.close();
1:102599e:     }
1:102599e: 
1:102599e:     public String getName() {
1:102599e:         return name.getMethodName();
1:102599e:     }
1:102599e: 
1:102599e:     @Before
1:102599e:     public void setUp() throws Exception {
1:102599e:         LOG.info("========== start " + getName() + " ==========");
1:102599e:         startBroker();
1:102599e: 
1:102599e:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:102599e:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:102599e:         pooledConnFact = new PooledConnectionFactory();
1:102599e:         pooledConnFact.setConnectionFactory(cf);
1:102599e:         pooledConnFact.setMaxConnections(1);
1:102599e:         pooledConnFact.setReconnectOnException(true);
1:102599e:     }
1:102599e: 
1:102599e:     @After
1:102599e:     public void tearDown() throws Exception {
1:102599e:         pooledConnFact.stop();
1:102599e:         stopBroker();
1:102599e:         LOG.info("========== finished " + getName() + " ==========");
1:102599e:     }
1:102599e: 
1:102599e:     public void startBroker() throws Exception {
1:102599e:         brokerService = new BrokerService();
1:102599e:         brokerService.setPersistent(false);
1:102599e:         brokerService.setDeleteAllMessagesOnStartup(true);
1:102599e:         brokerService.setAdvisorySupport(false);
1:102599e:         brokerService.getManagementContext().setCreateConnector(false);
1:102599e:         brokerService.getManagementContext().setCreateMBeanServer(false);
1:102599e:         brokerService.addConnector("tcp://0.0.0.0:0");
1:102599e: 
1:102599e:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1:102599e: 
1:102599e:         BrokerPlugin authenticationPlugin = configureAuthentication();
1:102599e:         if (authenticationPlugin != null) {
1:102599e:             plugins.add(configureAuthorization());
1:102599e:         }
1:102599e: 
1:102599e:         BrokerPlugin authorizationPlugin = configureAuthorization();
1:102599e:         if (authorizationPlugin != null) {
1:102599e:             plugins.add(configureAuthentication());
1:102599e:         }
1:102599e: 
1:102599e:         if (!plugins.isEmpty()) {
1:102599e:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:102599e:             brokerService.setPlugins(plugins.toArray(array));
1:102599e:         }
1:102599e: 
1:102599e:         brokerService.start();
1:102599e:         brokerService.waitUntilStarted();
1:102599e: 
1:102599e:         connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:102599e:     }
1:102599e: 
1:102599e:     public void stopBroker() throws Exception {
1:102599e:         if (brokerService != null) {
1:102599e:             brokerService.stop();
1:102599e:             brokerService.waitUntilStopped();
1:102599e:             brokerService = null;
1:102599e:         }
1:102599e:     }
1:102599e: 
1:102599e:     protected BrokerPlugin configureAuthentication() throws Exception {
1:102599e:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:102599e:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:102599e:         users.add(new AuthenticationUser("user", "password", "users"));
1:102599e:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:102599e:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:102599e: 
1:102599e:         return authenticationPlugin;
1:102599e:     }
1:102599e: 
1:102599e:     protected BrokerPlugin configureAuthorization() throws Exception {
1:102599e: 
1:102599e:         @SuppressWarnings("rawtypes")
1:102599e:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1:102599e: 
1:102599e:         AuthorizationEntry entry = new AuthorizationEntry();
1:102599e:         entry.setQueue(">");
1:102599e:         entry.setRead("admins");
1:102599e:         entry.setWrite("admins");
1:102599e:         entry.setAdmin("admins");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setQueue("USERS.>");
1:102599e:         entry.setRead("users");
1:102599e:         entry.setWrite("users");
1:102599e:         entry.setAdmin("users");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setQueue("GUEST.>");
1:102599e:         entry.setRead("guests");
1:102599e:         entry.setWrite("guests,users");
1:102599e:         entry.setAdmin("guests,users");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setTopic(">");
1:102599e:         entry.setRead("admins");
1:102599e:         entry.setWrite("admins");
1:102599e:         entry.setAdmin("admins");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setTopic("USERS.>");
1:102599e:         entry.setRead("users");
1:102599e:         entry.setWrite("users");
1:102599e:         entry.setAdmin("users");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setTopic("GUEST.>");
1:102599e:         entry.setRead("guests");
1:102599e:         entry.setWrite("guests,users");
1:102599e:         entry.setAdmin("guests,users");
1:102599e:         authorizationEntries.add(entry);
1:102599e:         entry = new AuthorizationEntry();
1:102599e:         entry.setTopic("ActiveMQ.Advisory.>");
1:102599e:         entry.setRead("guests,users");
1:102599e:         entry.setWrite("guests,users");
1:102599e:         entry.setAdmin("guests,users");
1:102599e:         authorizationEntries.add(entry);
1:102599e: 
1:102599e:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:102599e:         tempEntry.setRead("admins");
1:102599e:         tempEntry.setWrite("admins");
1:102599e:         tempEntry.setAdmin("admins");
1:102599e: 
1:102599e:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:102599e:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:102599e:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:102599e: 
1:102599e:         return authorizationPlugin;
1:102599e:     }
1:102599e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:be032c9
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             connection2.close();
1: 
1:         connection1.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection1.close();
1:         connection2.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             connection2.close();
1: 
1:         connection1.close();
commit:2e64abc
/////////////////////////////////////////////////////////////////////////
1:     public void testFailureGetsNewConnectionOnRetryLooped() throws Exception {
1:         for (int i = 0; i < 10; ++i) {
1:             testFailureGetsNewConnectionOnRetry();
1:         }
1:     }
1: 
1:     @Test
1:         pooledConnFact.setMaxConnections(1);
1: 
/////////////////////////////////////////////////////////////////////////
1:                     ((PooledConnection) pooledConnFact.createConnection("invalid", "credentials")).getConnection();
1:         final PooledConnection connection2 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
1:         assertNotSame(connection1.getConnection(), connection2.getConnection());
1: 
commit:c81a934
/////////////////////////////////////////////////////////////////////////
1:         final PooledConnection connection1 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
/////////////////////////////////////////////////////////////////////////
1:                 return connection1.getConnection() !=
1:                           ((PooledConnection) pooledConnFact.createConnection("invalid", "credentials")).getConnection();
0:         PooledConnection connection2 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
/////////////////////////////////////////////////////////////////////////
1:         assertNotSame(connection1.getConnection(), connection2.getConnection());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             "failover:(" + connectionURI + "?trace=true)");
1:         final PooledConnection connection1 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
/////////////////////////////////////////////////////////////////////////
1:                 return connection1.getConnection() !=
0:                           ((PooledConnection) pooledConnFact.createConnection("invalid", "credentials")).getConnection();
1:         final PooledConnection connection2 = (PooledConnection) pooledConnFact.createConnection("invalid", "credentials");
0:         assertNotSame(connection1.getConnection(), connection2.getConnection());
commit:100c5e0
/////////////////////////////////////////////////////////////////////////
1:     public void testFailureGetsNewConnectionOnRetry() throws Exception {
0:         final Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
/////////////////////////////////////////////////////////////////////////
1:         // The pool should process the async error
1:         assertTrue("Should get new connection", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return connection1 != pooledConnFact.createConnection("invalid", "credentials");
1:             }
1:         }));
1: 
commit:e3a6871
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     public void testFailoverWithInvalidCredentials() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         final Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
1:             // Intentionally don't close here to see that async pool reconnect takes place.
1:         // The pool should process the async error
1:         assertTrue("Should get new connection", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return connection1 != pooledConnFact.createConnection("invalid", "credentials");
1:             }
1:         }));
1: 
0:         final Connection connection2 = pooledConnFact.createConnection("invalid", "credentials");
1:         assertNotSame(connection1, connection2);
1: 
1:             connection2.close();
commit:102599e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.JMSSecurityException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test Pooled connections ability to handle security exceptions
1:  */
1: public class PooledConnectionSecurityExceptionTest {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(PooledConnectionSecurityExceptionTest.class);
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private BrokerService brokerService;
1:     private String connectionURI;
1: 
1:     protected PooledConnectionFactory pooledConnFact;
1: 
1:     @Test
1:     public void testFailedConnectThenSucceeds() throws JMSException {
1:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1: 
1:         try {
1:             connection.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         connection = pooledConnFact.createConnection("system", "manager");
1:         connection.start();
1: 
1:         LOG.info("Successfully create new connection.");
1:     }
1: 
1:     @Test
1:     public void testFailedConnectThenSucceedsWithListener() throws JMSException {
1:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1:         connection.setExceptionListener(new ExceptionListener() {
1: 
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.warn("Connection get error: {}", exception.getMessage());
1:             }
1:         });
1: 
1:         try {
1:             connection.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         connection = pooledConnFact.createConnection("system", "manager");
1:         connection.start();
1: 
1:         LOG.info("Successfully create new connection.");
1:     }
1: 
1:     @Test
0:     public void testFailureGetsNewConnectionOnRetry() throws JMSException {
1:         Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
1: 
1:         try {
1:             connection1.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         Connection connection2 = pooledConnFact.createConnection("invalid", "credentials");
1:         try {
1:             connection2.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
0:         assertNotSame(connection1, connection2);
1:     }
1: 
1:     @Test
1:     public void testFailureGetsNewConnectionOnRetryBigPool() throws JMSException {
1:         pooledConnFact.setMaxConnections(10);
1: 
1:         Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
1: 
1:         try {
1:             connection1.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         Connection connection2 = pooledConnFact.createConnection("invalid", "credentials");
1:         try {
1:             connection2.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
0:         assertNotSame(connection1, connection2);
1:     }
1: 
1:     @Test
1:     public void testFailoverWithInvalidCredentialsCanConnect() throws JMSException {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:             "failover:(" + connectionURI + ")");
1: 
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(cf);
1:         pooledConnFact.setMaxConnections(1);
1: 
1:         Connection connection = pooledConnFact.createConnection("invalid", "credentials");
1: 
1:         try {
1:             connection.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         connection = pooledConnFact.createConnection("system", "manager");
1:         connection.start();
1: 
1:         LOG.info("Successfully create new connection.");
1:     }
1: 
1:     @Test
0:     public void testFailoverWithInvalidCredentials() throws JMSException {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:             "failover:(" + connectionURI + ")");
1: 
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(cf);
1:         pooledConnFact.setMaxConnections(1);
1: 
1:         Connection connection1 = pooledConnFact.createConnection("invalid", "credentials");
1: 
1:         try {
1:             connection1.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         Connection connection2 = pooledConnFact.createConnection("invalid", "credentials");
1:         try {
1:             connection2.start();
1:             fail("Should fail to connect");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
0:         assertNotSame(connection1, connection2);
1:     }
1: 
1:     @Test
1:     public void testFailedCreateConsumerConnectionStillWorks() throws JMSException {
1:         Connection connection = pooledConnFact.createConnection("guest", "password");
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(name.getMethodName());
1: 
1:         try {
1:             session.createConsumer(queue);
1:             fail("Should fail to create consumer");
1:         } catch (JMSSecurityException ex) {
1:             LOG.info("Caught expected security error");
1:         }
1: 
1:         queue = session.createQueue("GUESTS." + name.getMethodName());
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.close();
1:     }
1: 
1:     public String getName() {
1:         return name.getMethodName();
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("========== start " + getName() + " ==========");
1:         startBroker();
1: 
1:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(cf);
1:         pooledConnFact.setMaxConnections(1);
1:         pooledConnFact.setReconnectOnException(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         pooledConnFact.stop();
1:         stopBroker();
1:         LOG.info("========== finished " + getName() + " ==========");
1:     }
1: 
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.getManagementContext().setCreateMBeanServer(false);
1:         brokerService.addConnector("tcp://0.0.0.0:0");
1: 
1:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1: 
1:         BrokerPlugin authenticationPlugin = configureAuthentication();
1:         if (authenticationPlugin != null) {
1:             plugins.add(configureAuthorization());
1:         }
1: 
1:         BrokerPlugin authorizationPlugin = configureAuthorization();
1:         if (authorizationPlugin != null) {
1:             plugins.add(configureAuthentication());
1:         }
1: 
1:         if (!plugins.isEmpty()) {
1:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:             brokerService.setPlugins(plugins.toArray(array));
1:         }
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     protected BrokerPlugin configureAuthentication() throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:         users.add(new AuthenticationUser("user", "password", "users"));
1:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         return authenticationPlugin;
1:     }
1: 
1:     protected BrokerPlugin configureAuthorization() throws Exception {
1: 
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("ActiveMQ.Advisory.>");
1:         entry.setRead("guests,users");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("admins");
1:         tempEntry.setWrite("admins");
1:         tempEntry.setAdmin("admins");
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         return authorizationPlugin;
1:     }
1: }
============================================================================