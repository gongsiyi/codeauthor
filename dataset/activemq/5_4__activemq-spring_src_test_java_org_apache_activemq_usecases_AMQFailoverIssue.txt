1:ef0b33e: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:ef0b33e:  */
1:ef0b33e: package org.apache.activemq.usecases;
2:ef0b33e: 
1:ef0b33e: import java.net.URI;
1:ef0b33e: import java.util.ArrayList;
1:933eb2f: import java.util.List;
1:ef0b33e: import java.util.Random;
1:ef0b33e: import java.util.concurrent.CountDownLatch;
1:ef0b33e: import java.util.concurrent.ExecutorService;
1:ef0b33e: import java.util.concurrent.Executors;
1:ef0b33e: import java.util.concurrent.TimeUnit;
1:ef0b33e: import java.util.concurrent.atomic.AtomicInteger;
1:1b38caa: 
1:ef0b33e: import javax.jms.BytesMessage;
1:ef0b33e: import javax.jms.ConnectionFactory;
1:ef0b33e: import javax.jms.DeliveryMode;
1:ef0b33e: import javax.jms.JMSException;
1:ef0b33e: import javax.jms.Message;
1:ef0b33e: import javax.jms.MessageListener;
1:ef0b33e: import javax.jms.Session;
1:1b38caa: 
1:ef0b33e: import org.apache.activemq.ActiveMQConnectionFactory;
1:ef0b33e: import org.apache.activemq.broker.BrokerService;
1:ef0b33e: import org.apache.activemq.broker.TransportConnector;
1:ef0b33e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ef0b33e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ef0b33e: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:ef0b33e: import org.apache.activemq.network.NetworkConnector;
1:ef0b33e: import org.apache.activemq.pool.PooledConnectionFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:ef0b33e: import org.springframework.jms.core.JmsTemplate;
1:ef0b33e: import org.springframework.jms.core.MessageCreator;
1:ef0b33e: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1:ef0b33e: 
1:2e57fb5: public class AMQFailoverIssue extends org.apache.activemq.test.TestSupport {
1:ef0b33e: 
1:230a86c:     private static final String URL1 = "tcp://localhost:61616";
1:230a86c:     private static final String QUEUE1_NAME = "test.queue.1";
1:230a86c:     private static final int MAX_CONSUMERS = 10;
1:230a86c:     private static final int MAX_PRODUCERS = 5;
1:230a86c:     private static final int NUM_MESSAGE_TO_SEND = 10000;
1:230a86c:     private static final int TOTAL_MESSAGES = MAX_PRODUCERS * NUM_MESSAGE_TO_SEND;
1:230a86c:     private static final boolean USE_FAILOVER = true;
1:1b38caa:     private final AtomicInteger messageCount = new AtomicInteger();
1:ef0b33e:     private CountDownLatch doneLatch;
1:ef0b33e: 
1:230a86c:     @Override
1:230a86c:     public void setUp() throws Exception {
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     @Override
1:230a86c:     public void tearDown() throws Exception {
1:ef0b33e:     }
1:ef0b33e: 
1:ef0b33e:     // This should fail with incubator-activemq-fuse-4.1.0.5
1:230a86c:     public void testFailoverIssue() throws Exception {
1:f812e34:         BrokerService brokerService1 = null;
1:230a86c:         ActiveMQConnectionFactory acf;
1:230a86c:         PooledConnectionFactory pcf;
1:230a86c:         DefaultMessageListenerContainer container1 = null;
1:230a86c:         try {
1:230a86c:             brokerService1 = createBrokerService("broker1", URL1, null);
1:ef0b33e:             brokerService1.start();
1:230a86c:             acf = createConnectionFactory(URL1, USE_FAILOVER);
1:230a86c:             pcf = new PooledConnectionFactory(acf);
1:ef0b33e:             // Only listen on the first queue.. let the 2nd queue fill up.
1:230a86c:             doneLatch = new CountDownLatch(TOTAL_MESSAGES);
1:230a86c:             container1 = createDefaultMessageListenerContainer(acf, new TestMessageListener1(0), QUEUE1_NAME);
1:ef0b33e:             container1.afterPropertiesSet();
1:ef0b33e:             Thread.sleep(5000);
1:230a86c:             final ExecutorService executor = Executors.newCachedThreadPool();
1:230a86c:             for (int i = 0; i < MAX_PRODUCERS; i++) {
1:230a86c:                 executor.submit(new PooledProducerTask(pcf, QUEUE1_NAME));
1:ef0b33e:             }
1:ef0b33e:             // Wait for all message to arrive.
1:230a86c:             assertTrue(doneLatch.await(45, TimeUnit.SECONDS));
1:ef0b33e:             executor.shutdown();
1:ef0b33e:             // Thread.sleep(30000);
1:1b38caa:             assertEquals(TOTAL_MESSAGES, messageCount.get());
1:230a86c:         } finally {
1:ef0b33e:             container1.stop();
1:ef0b33e:             container1.destroy();
1:230a86c:             container1 = null;
1:ef0b33e:             brokerService1.stop();
1:230a86c:             brokerService1 = null;
1:ef0b33e:         }
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     private BrokerService createBrokerService(final String brokerName, final String uri1, final String uri2) throws Exception {
1:230a86c:         final BrokerService brokerService = new BrokerService();
1:ef0b33e:         brokerService.setBrokerName(brokerName);
1:ef0b33e:         brokerService.setPersistent(false);
1:ef0b33e:         brokerService.setUseJmx(true);
1:6d8e2c5:         final SystemUsage memoryManager = new SystemUsage();
1:6d8e2c5:         memoryManager.getMemoryUsage().setLimit(5000000);
1:2b0024c:         brokerService.setSystemUsage(memoryManager);
1:933eb2f:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:230a86c:         final PolicyEntry entry = new PolicyEntry();
1:ef0b33e:         entry.setQueue(">");
1:ef0b33e:         // entry.setQueue(QUEUE1_NAME);
1:ef0b33e:         entry.setMemoryLimit(1);
1:ef0b33e:         policyEntries.add(entry);
1:230a86c:         final PolicyMap policyMap = new PolicyMap();
1:ef0b33e:         policyMap.setPolicyEntries(policyEntries);
1:ef0b33e:         brokerService.setDestinationPolicy(policyMap);
1:230a86c:         final TransportConnector tConnector = new TransportConnector();
1:ef0b33e:         tConnector.setUri(new URI(uri1));
1:230a86c:         tConnector.setName(brokerName + ".transportConnector");
1:ef0b33e:         brokerService.addConnector(tConnector);
1:230a86c:         if (uri2 != null) {
1:230a86c:             final NetworkConnector nc = new DiscoveryNetworkConnector(new URI("static:" + uri2));
1:ef0b33e:             nc.setBridgeTempDestinations(true);
1:ef0b33e:             nc.setBrokerName(brokerName);
1:ef0b33e:             nc.setPrefetchSize(1);
1:ef0b33e:             brokerService.addNetworkConnector(nc);
1:ef0b33e:         }
1:ef0b33e:         return brokerService;
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     public DefaultMessageListenerContainer createDefaultMessageListenerContainer(final ConnectionFactory acf, final MessageListener listener, final String queue) {
1:230a86c:         final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
1:ef0b33e:         container.setConnectionFactory(acf);
1:ef0b33e:         container.setDestinationName(queue);
1:ef0b33e:         container.setMessageListener(listener);
1:ef0b33e:         container.setSessionTransacted(false);
1:ef0b33e:         container.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
1:ef0b33e:         container.setConcurrentConsumers(MAX_CONSUMERS);
1:ef0b33e:         return container;
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     public ActiveMQConnectionFactory createConnectionFactory(final String url, final boolean useFailover) {
1:230a86c:         final String failoverUrl = "failover:(" + url + ")";
1:230a86c:         final ActiveMQConnectionFactory acf = new ActiveMQConnectionFactory(useFailover ? failoverUrl : url);
1:ef0b33e:         acf.setCopyMessageOnSend(false);
1:ef0b33e:         acf.setUseAsyncSend(false);
1:ef0b33e:         acf.setDispatchAsync(true);
1:ef0b33e:         acf.setUseCompression(false);
1:ef0b33e:         acf.setOptimizeAcknowledge(false);
1:ef0b33e:         acf.setOptimizedMessageDispatch(true);
1:ef0b33e:         acf.setUseAsyncSend(false);
1:ef0b33e:         return acf;
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     private class TestMessageListener1 implements MessageListener {
1:ef0b33e: 
1:ef0b33e:         private final long waitTime;
1:ef0b33e: 
1:230a86c:         public TestMessageListener1(long waitTime) {
1:230a86c:             this.waitTime = waitTime;
1:ef0b33e:         }
1:ef0b33e: 
1:1b38caa:         @Override
1:230a86c:         public void onMessage(Message msg) {
1:230a86c:             try {
1:ef0b33e:                 messageCount.incrementAndGet();
1:ef0b33e:                 doneLatch.countDown();
1:ef0b33e:                 Thread.sleep(waitTime);
1:230a86c:             } catch (InterruptedException e) {
1:ef0b33e:                 e.printStackTrace();
1:ef0b33e:             }
1:ef0b33e:         }
1:ef0b33e:     }
1:ef0b33e: 
1:230a86c:     private static class PooledProducerTask implements Runnable {
1:ef0b33e: 
1:ef0b33e:         private final String queueName;
1:ef0b33e:         private final PooledConnectionFactory pcf;
1:ef0b33e: 
1:230a86c:         public PooledProducerTask(final PooledConnectionFactory pcf, final String queueName) {
1:230a86c:             this.pcf = pcf;
1:230a86c:             this.queueName = queueName;
1:ef0b33e:         }
1:ef0b33e: 
1:1b38caa:         @Override
1:230a86c:         public void run() {
1:230a86c:             try {
1:230a86c:                 final JmsTemplate jmsTemplate = new JmsTemplate(pcf);
1:ef0b33e:                 jmsTemplate.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:ef0b33e:                 jmsTemplate.setExplicitQosEnabled(true);
1:ef0b33e:                 jmsTemplate.setMessageIdEnabled(false);
1:ef0b33e:                 jmsTemplate.setMessageTimestampEnabled(false);
1:ef0b33e:                 jmsTemplate.afterPropertiesSet();
1:230a86c:                 final byte[] bytes = new byte[2048];
1:230a86c:                 final Random r = new Random();
1:ef0b33e:                 r.nextBytes(bytes);
1:ef0b33e:                 Thread.sleep(2000);
1:230a86c:                 final AtomicInteger count = new AtomicInteger();
1:230a86c:                 for (int i = 0; i < NUM_MESSAGE_TO_SEND; i++) {
1:230a86c:                     jmsTemplate.send(queueName, new MessageCreator() {
1:ef0b33e: 
1:1b38caa:                         @Override
1:230a86c:                         public Message createMessage(Session session) throws JMSException {
1:230a86c:                             final BytesMessage message = session.createBytesMessage();
1:ef0b33e:                             message.writeBytes(bytes);
1:230a86c:                             message.setIntProperty("count", count.incrementAndGet());
1:230a86c:                             message.setStringProperty("producer", "pooled");
1:ef0b33e:                             return message;
1:ef0b33e:                         }
1:ef0b33e:                     });
1:ef0b33e:                 }
1:230a86c:             } catch (final Throwable e) {
1:ef0b33e:                 e.printStackTrace();
1:ef0b33e:             }
1:ef0b33e:         }
1:ef0b33e:     }
1:ef0b33e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger messageCount = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(TOTAL_MESSAGES, messageCount.get());
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:                         @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:76de7c0
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.test.*;
/////////////////////////////////////////////////////////////////////////
1: public class AMQFailoverIssue extends org.apache.activemq.test.TestSupport {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setSystemUsage(memoryManager);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         BrokerService brokerService1 = null;
commit:43ba1be
/////////////////////////////////////////////////////////////////////////
0:         BrokerService brokerService1=null;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: public class AMQFailoverIssue extends TestCase {
1:     private static final String URL1 = "tcp://localhost:61616";
1:     private static final String QUEUE1_NAME = "test.queue.1";
1:     private static final int MAX_CONSUMERS = 10;
1:     private static final int MAX_PRODUCERS = 5;
1:     private static final int NUM_MESSAGE_TO_SEND = 10000;
1:     private static final int TOTAL_MESSAGES = MAX_PRODUCERS * NUM_MESSAGE_TO_SEND;
1:     private static final boolean USE_FAILOVER = true;
0:     private AtomicInteger messageCount = new AtomicInteger();
1:     @Override
1:     public void setUp() throws Exception {
1:     @Override
1:     public void tearDown() throws Exception {
1:     public void testFailoverIssue() throws Exception {
0:         BrokerService brokerService1;
1:         ActiveMQConnectionFactory acf;
1:         PooledConnectionFactory pcf;
1:         DefaultMessageListenerContainer container1 = null;
1:         try {
1:             brokerService1 = createBrokerService("broker1", URL1, null);
1:             acf = createConnectionFactory(URL1, USE_FAILOVER);
1:             pcf = new PooledConnectionFactory(acf);
1:             doneLatch = new CountDownLatch(TOTAL_MESSAGES);
1:             container1 = createDefaultMessageListenerContainer(acf, new TestMessageListener1(0), QUEUE1_NAME);
1:             final ExecutorService executor = Executors.newCachedThreadPool();
1:             for (int i = 0; i < MAX_PRODUCERS; i++) {
1:                 executor.submit(new PooledProducerTask(pcf, QUEUE1_NAME));
1:             assertTrue(doneLatch.await(45, TimeUnit.SECONDS));
0:             Assert.assertEquals(TOTAL_MESSAGES, messageCount.get());
1:         } finally {
1:             container1 = null;
1:             brokerService1 = null;
1:     private BrokerService createBrokerService(final String brokerName, final String uri1, final String uri2) throws Exception {
1:         final BrokerService brokerService = new BrokerService();
0:         final UsageManager memoryManager = new UsageManager();
0:         final ArrayList<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         final PolicyMap policyMap = new PolicyMap();
1:         final TransportConnector tConnector = new TransportConnector();
1:         tConnector.setName(brokerName + ".transportConnector");
1:         if (uri2 != null) {
1:             final NetworkConnector nc = new DiscoveryNetworkConnector(new URI("static:" + uri2));
/////////////////////////////////////////////////////////////////////////
1:     public DefaultMessageListenerContainer createDefaultMessageListenerContainer(final ConnectionFactory acf, final MessageListener listener, final String queue) {
1:         final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQConnectionFactory createConnectionFactory(final String url, final boolean useFailover) {
1:         final String failoverUrl = "failover:(" + url + ")";
1:         final ActiveMQConnectionFactory acf = new ActiveMQConnectionFactory(useFailover ? failoverUrl : url);
/////////////////////////////////////////////////////////////////////////
1:     private class TestMessageListener1 implements MessageListener {
1:         public TestMessageListener1(long waitTime) {
1:             this.waitTime = waitTime;
1:         public void onMessage(Message msg) {
1:             try {
1:             } catch (InterruptedException e) {
1:     private static class PooledProducerTask implements Runnable {
1:         public PooledProducerTask(final PooledConnectionFactory pcf, final String queueName) {
1:             this.pcf = pcf;
1:             this.queueName = queueName;
1:         public void run() {
1:             try {
1:                 final JmsTemplate jmsTemplate = new JmsTemplate(pcf);
1:                 final byte[] bytes = new byte[2048];
1:                 final Random r = new Random();
1:                 final AtomicInteger count = new AtomicInteger();
1:                 for (int i = 0; i < NUM_MESSAGE_TO_SEND; i++) {
1:                     jmsTemplate.send(queueName, new MessageCreator() {
1:                         public Message createMessage(Session session) throws JMSException {
1:                             final BytesMessage message = session.createBytesMessage();
1:                             message.setIntProperty("count", count.incrementAndGet());
1:                             message.setStringProperty("producer", "pooled");
1:             } catch (final Throwable e) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:         final SystemUsage memoryManager = new SystemUsage();
1:         memoryManager.getMemoryUsage().setLimit(5000000);
0:         brokerService.setUsageManager(memoryManager);
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     private static class PooledProducerTask implements Runnable{
commit:54114cc
/////////////////////////////////////////////////////////////////////////
commit:ef0b33e
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Random;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.BytesMessage;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
0: import junit.framework.Assert;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.core.MessageCreator;
1: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1: 
0: public class AMQFailoverIssue extends TestCase{
1: 
0:     private static final String URL1="tcp://localhost:61616";
0:     private static final String QUEUE1_NAME="test.queue.1";
0:     private static final int MAX_CONSUMERS=10;
0:     private static final int MAX_PRODUCERS=5;
0:     private static final int NUM_MESSAGE_TO_SEND=10000;
0:     private static final int TOTAL_MESSAGES=MAX_PRODUCERS * NUM_MESSAGE_TO_SEND;
0:     private static final boolean USE_FAILOVER=true;
0:     private AtomicInteger messageCount=new AtomicInteger();
1:     private CountDownLatch doneLatch;
1: 
0:     @Override public void setUp() throws Exception{
1:     }
1: 
0:     @Override public void tearDown() throws Exception{
1:     }
1: 
1:     // This should fail with incubator-activemq-fuse-4.1.0.5
0:     public void testFailoverIssue() throws Exception{
0:         BrokerService brokerService1=null;
0:         ActiveMQConnectionFactory acf=null;
0:         PooledConnectionFactory pcf=null;
0:         DefaultMessageListenerContainer container1=null;
0:         try{
0:             brokerService1=createBrokerService("broker1",URL1,null);
1:             brokerService1.start();
0:             acf=createConnectionFactory(URL1,USE_FAILOVER);
0:             pcf=new PooledConnectionFactory(acf);
1:             // Only listen on the first queue.. let the 2nd queue fill up.
0:             doneLatch=new CountDownLatch(TOTAL_MESSAGES);
0:             container1=createDefaultMessageListenerContainer(acf,new TestMessageListener1(0),QUEUE1_NAME);
1:             container1.afterPropertiesSet();
1:             Thread.sleep(5000);
0:             final ExecutorService executor=Executors.newCachedThreadPool();
0:             for(int i=0;i<MAX_PRODUCERS;i++){
0:                 executor.submit(new PooledProducerTask(pcf,QUEUE1_NAME));
1:             }
1:             // Wait for all message to arrive.
0:             assertTrue(doneLatch.await(45,TimeUnit.SECONDS));
1:             executor.shutdown();
1:             // Thread.sleep(30000);
0:             Assert.assertEquals(TOTAL_MESSAGES,messageCount.get());
0:         }finally{
1:             container1.stop();
1:             container1.destroy();
0:             container1=null;
1:             brokerService1.stop();
0:             brokerService1=null;
1:         }
1:     }
1: 
0:     private BrokerService createBrokerService(final String brokerName,final String uri1,final String uri2)
0:             throws Exception{
0:         final BrokerService brokerService=new BrokerService();
1:         brokerService.setBrokerName(brokerName);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
0:         final UsageManager memoryManager=new UsageManager();
0:         memoryManager.setLimit(5000000);
0:         brokerService.setMemoryManager(memoryManager);
0:         final ArrayList<PolicyEntry> policyEntries=new ArrayList<PolicyEntry>();
0:         final PolicyEntry entry=new PolicyEntry();
1:         entry.setQueue(">");
1:         // entry.setQueue(QUEUE1_NAME);
1:         entry.setMemoryLimit(1);
1:         policyEntries.add(entry);
0:         final PolicyMap policyMap=new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         brokerService.setDestinationPolicy(policyMap);
0:         final TransportConnector tConnector=new TransportConnector();
1:         tConnector.setUri(new URI(uri1));
0:         tConnector.setBrokerName(brokerName);
0:         tConnector.setName(brokerName+".transportConnector");
1:         brokerService.addConnector(tConnector);
0:         if(uri2!=null){
0:             final NetworkConnector nc=new DiscoveryNetworkConnector(new URI("static:"+uri2));
1:             nc.setBridgeTempDestinations(true);
1:             nc.setBrokerName(brokerName);
0:             nc.setName(brokerName+".nc");
1:             nc.setPrefetchSize(1);
1:             brokerService.addNetworkConnector(nc);
1:         }
1:         return brokerService;
1:     }
1: 
0:     public DefaultMessageListenerContainer createDefaultMessageListenerContainer(final ConnectionFactory acf,
0:             final MessageListener listener,final String queue){
0:         final DefaultMessageListenerContainer container=new DefaultMessageListenerContainer();
1:         container.setConnectionFactory(acf);
1:         container.setDestinationName(queue);
1:         container.setMessageListener(listener);
1:         container.setSessionTransacted(false);
1:         container.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
1:         container.setConcurrentConsumers(MAX_CONSUMERS);
1:         return container;
1:     }
1: 
0:     public ActiveMQConnectionFactory createConnectionFactory(final String url,final boolean useFailover){
0:         final String failoverUrl="failover:("+url+")";
0:         final ActiveMQConnectionFactory acf=new ActiveMQConnectionFactory(useFailover?failoverUrl:url);
1:         acf.setCopyMessageOnSend(false);
1:         acf.setUseAsyncSend(false);
1:         acf.setDispatchAsync(true);
1:         acf.setUseCompression(false);
1:         acf.setOptimizeAcknowledge(false);
1:         acf.setOptimizedMessageDispatch(true);
1:         acf.setUseAsyncSend(false);
1:         return acf;
1:     }
1: 
0:     private class TestMessageListener1 implements MessageListener{
1: 
1:         private final long waitTime;
1: 
0:         public TestMessageListener1(long waitTime){
0:             this.waitTime=waitTime;
1:         }
1: 
0:         public void onMessage(Message msg){
0:             try{
1:                 messageCount.incrementAndGet();
1:                 doneLatch.countDown();
1:                 Thread.sleep(waitTime);
0:             }catch(InterruptedException e){
0:                 // TODO Auto-generated catch block
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
0:     private class PooledProducerTask implements Runnable{
1: 
1:         private final String queueName;
1:         private final PooledConnectionFactory pcf;
1: 
0:         public PooledProducerTask(final PooledConnectionFactory pcf,final String queueName){
0:             this.pcf=pcf;
0:             this.queueName=queueName;
1:         }
1: 
0:         public void run(){
0:             try{
0:                 final JmsTemplate jmsTemplate=new JmsTemplate(pcf);
1:                 jmsTemplate.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:                 jmsTemplate.setExplicitQosEnabled(true);
1:                 jmsTemplate.setMessageIdEnabled(false);
1:                 jmsTemplate.setMessageTimestampEnabled(false);
1:                 jmsTemplate.afterPropertiesSet();
0:                 final byte[] bytes=new byte[2048];
0:                 final Random r=new Random();
1:                 r.nextBytes(bytes);
1:                 Thread.sleep(2000);
0:                 final AtomicInteger count=new AtomicInteger();
0:                 for(int i=0;i<NUM_MESSAGE_TO_SEND;i++){
0:                     jmsTemplate.send(queueName,new MessageCreator(){
1: 
0:                         public Message createMessage(Session session) throws JMSException{
0:                             final BytesMessage message=session.createBytesMessage();
1:                             message.writeBytes(bytes);
0:                             message.setIntProperty("count",count.incrementAndGet());
0:                             message.setStringProperty("producer","pooled");
1:                             return message;
1:                         }
1:                     });
1:                 }
0:             }catch(final Throwable e){
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
============================================================================