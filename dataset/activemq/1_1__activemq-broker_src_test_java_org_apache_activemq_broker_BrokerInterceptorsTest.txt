1:5076808: /*
1:5076808:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5076808:  * contributor license agreements.  See the NOTICE file distributed with
1:5076808:  * this work for additional information regarding copyright ownership.
1:5076808:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5076808:  * (the "License"); you may not use this file except in compliance with
1:5076808:  * the License.  You may obtain a copy of the License at
1:5076808:  *
1:5076808:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5076808:  *
1:5076808:  * Unless required by applicable law or agreed to in writing, software
1:5076808:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5076808:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5076808:  * See the License for the specific language governing permissions and
1:5076808:  * limitations under the License.
1:5076808:  */
1:5076808: package org.apache.activemq.broker;
1:5076808: 
1:5076808: import org.junit.After;
1:5076808: import org.junit.Before;
1:5076808: import org.junit.Test;
1:5076808: import org.junit.Assert;
1:5076808: 
1:5076808: 
1:5076808: public class BrokerInterceptorsTest {
1:5076808: 
1:5076808:     private BrokerService brokerService;
1:5076808: 
1:5076808:     @Before
1:5076808:     public void setUp() throws Exception {
1:5076808:         brokerService = new BrokerService();
1:5076808:         brokerService.setAdvisorySupport(true);
1:5076808:         brokerService.setPersistent(false);
1:5076808:         brokerService.setUseJmx(false);
1:5076808:         brokerService.start();
1:5076808:     }
1:5076808: 
1:5076808:     @After
1:5076808:     public void tearDown() throws Exception {
1:5076808:         if (brokerService != null) {
1:5076808:             brokerService.stop();
1:5076808:         }
1:5076808:     }
1:5076808: 
1:5076808:     @Test
1:5076808:     public void testNavigateInterceptors() throws Exception {
1:5076808:         Broker b = brokerService.getBroker();
1:5076808:         Assert.assertTrue(b instanceof BrokerFilter);
1:5076808:         
1:5076808:         BrokerFilter bf = (BrokerFilter) b;
1:5076808:         int count = 0;
1:5076808:         while (bf != null) {
1:5076808:             Broker next = bf.getNext();
1:5076808:             bf = next instanceof BrokerFilter ? (BrokerFilter) next : null;
1:5076808:             count++;
1:5076808:         }
1:5076808:         // a few Broker interceptors are created because of the config (i.e. AdvisoryBroker)
1:5076808:         Assert.assertTrue(count > 1);
1:5076808:     }
1:5076808: 
1:5076808: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.Assert;
1: 
1: 
1: public class BrokerInterceptorsTest {
1: 
1:     private BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setAdvisorySupport(true);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testNavigateInterceptors() throws Exception {
1:         Broker b = brokerService.getBroker();
1:         Assert.assertTrue(b instanceof BrokerFilter);
1:         
1:         BrokerFilter bf = (BrokerFilter) b;
1:         int count = 0;
1:         while (bf != null) {
1:             Broker next = bf.getNext();
1:             bf = next instanceof BrokerFilter ? (BrokerFilter) next : null;
1:             count++;
1:         }
1:         // a few Broker interceptors are created because of the config (i.e. AdvisoryBroker)
1:         Assert.assertTrue(count > 1);
1:     }
1: 
1: }
============================================================================