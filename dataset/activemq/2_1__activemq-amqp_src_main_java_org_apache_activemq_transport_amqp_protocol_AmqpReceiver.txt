1:7cf7fba: /*
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
2:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
2:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
1:13b915a: 
1:3306467: import static org.apache.activemq.transport.amqp.AmqpSupport.toLong;
9:3306467: 
1:3306467: import java.io.IOException;
1:3306467: 
1:3306467: import javax.jms.Destination;
1:490436c: import javax.jms.ResourceAllocationException;
1:3306467: 
1:3306467: import org.apache.activemq.command.ActiveMQDestination;
1:3306467: import org.apache.activemq.command.ActiveMQMessage;
1:3306467: import org.apache.activemq.command.ExceptionResponse;
1:3306467: import org.apache.activemq.command.LocalTransactionId;
1:3306467: import org.apache.activemq.command.MessageId;
1:3306467: import org.apache.activemq.command.ProducerId;
1:3306467: import org.apache.activemq.command.ProducerInfo;
1:3306467: import org.apache.activemq.command.RemoveInfo;
1:3306467: import org.apache.activemq.command.Response;
1:ed26683: import org.apache.activemq.command.TransactionId;
1:3306467: import org.apache.activemq.transport.amqp.AmqpProtocolConverter;
1:3306467: import org.apache.activemq.transport.amqp.ResponseHandler;
1:3306467: import org.apache.activemq.transport.amqp.message.AMQPNativeInboundTransformer;
1:3306467: import org.apache.activemq.transport.amqp.message.AMQPRawInboundTransformer;
1:3306467: import org.apache.activemq.transport.amqp.message.EncodedMessage;
1:3306467: import org.apache.activemq.transport.amqp.message.InboundTransformer;
1:3306467: import org.apache.activemq.transport.amqp.message.JMSMappingInboundTransformer;
1:3306467: import org.apache.activemq.util.LongSequenceGenerator;
1:3306467: import org.apache.qpid.proton.amqp.Symbol;
1:3306467: import org.apache.qpid.proton.amqp.messaging.Accepted;
1:3306467: import org.apache.qpid.proton.amqp.messaging.Rejected;
1:3306467: import org.apache.qpid.proton.amqp.transaction.TransactionalState;
1:490436c: import org.apache.qpid.proton.amqp.transport.AmqpError;
1:3306467: import org.apache.qpid.proton.amqp.transport.DeliveryState;
1:3306467: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:3306467: import org.apache.qpid.proton.engine.Delivery;
1:3306467: import org.apache.qpid.proton.engine.Receiver;
1:3306467: import org.fusesource.hawtbuf.Buffer;
1:3306467: import org.slf4j.Logger;
1:3306467: import org.slf4j.LoggerFactory;
1:3306467: 
3:3306467: /**
1:3306467:  * An AmqpReceiver wraps the AMQP Receiver end of a link from the remote peer
1:3306467:  * which holds the corresponding Sender which transfers message accross the
1:3306467:  * link.  The AmqpReceiver handles all incoming deliveries by converting them
1:3306467:  * or wrapping them into an ActiveMQ message object and forwarding that message
1:3306467:  * on to the appropriate ActiveMQ Destination.
1:3306467:  */
1:3306467: public class AmqpReceiver extends AmqpAbstractReceiver {
1:3306467: 
1:3306467:     private static final Logger LOG = LoggerFactory.getLogger(AmqpReceiver.class);
1:3306467: 
1:3306467:     private final ProducerInfo producerInfo;
1:3306467:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1:3306467: 
1:3306467:     private InboundTransformer inboundTransformer;
1:3306467: 
1:7cf7fba:     private int sendsInFlight;
1:7cf7fba: 
1:3306467:     /**
1:3306467:      * Create a new instance of an AmqpReceiver
1:3306467:      *
1:3306467:      * @param session
1:3306467:      *        the Session that is the parent of this AmqpReceiver instance.
1:3306467:      * @param endpoint
1:3306467:      *        the AMQP receiver endpoint that the class manages.
1:3306467:      * @param producerInfo
1:3306467:      *        the ProducerInfo instance that contains this sender's configuration.
1:3306467:      */
1:3306467:     public AmqpReceiver(AmqpSession session, Receiver endpoint, ProducerInfo producerInfo) {
1:3306467:         super(session, endpoint);
1:3306467: 
1:3306467:         this.producerInfo = producerInfo;
10:3306467:     }
1:b3bf8e7: 
2:3306467:     @Override
1:3306467:     public void close() {
1:3306467:         if (!isClosed() && isOpened()) {
1:83827f2:             sendToActiveMQ(new RemoveInfo(getProducerId()), new ResponseHandler() {
1:3306467: 
1:83827f2:                 @Override
1:83827f2:                 public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:83827f2:                     AmqpReceiver.super.close();
1:83827f2:                 }
1:83827f2:             });
1:83827f2:         } else {
1:83827f2:             super.close();
1:83827f2:         }
1:3306467:     }
1:3306467: 
1:3306467:     //----- Configuration accessors ------------------------------------------//
1:3306467: 
1:3306467:     /**
1:3306467:      * @return the ActiveMQ ProducerId used to register this Receiver on the Broker.
1:3306467:      */
1:3306467:     public ProducerId getProducerId() {
1:3306467:         return producerInfo.getProducerId();
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public ActiveMQDestination getDestination() {
1:3306467:         return producerInfo.getDestination();
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void setDestination(ActiveMQDestination destination) {
1:3306467:         producerInfo.setDestination(destination);
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * If the Sender that initiated this Receiver endpoint did not define an address
1:3306467:      * then it is using anonymous mode and message are to be routed to the address
1:3306467:      * that is defined in the AMQP message 'To' field.
1:3306467:      *
1:3306467:      * @return true if this Receiver should operate in anonymous mode.
1:3306467:      */
1:3306467:     public boolean isAnonymous() {
1:3306467:         return producerInfo.getDestination() == null;
1:3306467:     }
1:3306467: 
1:3306467:     //----- Internal Implementation ------------------------------------------//
1:3306467: 
1:13b915a:     protected InboundTransformer getTransformer() {
1:3306467:         if (inboundTransformer == null) {
1:3306467:             String transformer = session.getConnection().getConfiguredTransformer();
1:ff1a1c4:             if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_JMS)) {
1:63d62a7:                 inboundTransformer = new JMSMappingInboundTransformer();
1:ff1a1c4:             } else if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_NATIVE)) {
1:63d62a7:                 inboundTransformer = new AMQPNativeInboundTransformer();
1:ff1a1c4:             } else if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_RAW)) {
1:63d62a7:                 inboundTransformer = new AMQPRawInboundTransformer();
4:3306467:             } else {
1:3306467:                 LOG.warn("Unknown transformer type {} using native one instead", transformer);
1:63d62a7:                 inboundTransformer = new AMQPNativeInboundTransformer();
1:3306467:             }
1:3306467:         }
1:3306467:         return inboundTransformer;
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     protected void processDelivery(final Delivery delivery, Buffer deliveryBytes) throws Exception {
1:3306467:         if (!isClosed()) {
1:3306467:             EncodedMessage em = new EncodedMessage(delivery.getMessageFormat(), deliveryBytes.data, deliveryBytes.offset, deliveryBytes.length);
1:13b915a: 
1:13b915a:             InboundTransformer transformer = getTransformer();
1:63d62a7:             ActiveMQMessage message = transformer.transform(em);
1:13b915a: 
1:3306467:             current = null;
1:13b915a: 
1:3306467:             if (isAnonymous()) {
1:3306467:                 Destination toDestination = message.getJMSDestination();
1:3306467:                 if (toDestination == null || !(toDestination instanceof ActiveMQDestination)) {
2:3306467:                     Rejected rejected = new Rejected();
2:3306467:                     ErrorCondition condition = new ErrorCondition();
1:490436c:                     condition.setCondition(Symbol.valueOf("failed"));
1:3306467:                     condition.setDescription("Missing to field for message sent to an anonymous producer");
2:3306467:                     rejected.setError(condition);
2:3306467:                     delivery.disposition(rejected);
1:3306467:                     return;
1:13b915a:                 }
1:3306467:             } else {
1:3306467:                 message.setJMSDestination(getDestination());
1:13b915a:             }
1:490436c: 
1:3306467:             message.setProducerId(getProducerId());
1:13b915a: 
1:3306467:             // Always override the AMQP client's MessageId with our own.  Preserve
1:3306467:             // the original in the TextView property for later Ack.
1:3306467:             MessageId messageId = new MessageId(getProducerId(), messageIdGenerator.getNextSequenceId());
1:3306467: 
1:3306467:             MessageId amqpMessageId = message.getMessageId();
1:3306467:             if (amqpMessageId != null) {
1:3306467:                 if (amqpMessageId.getTextView() != null) {
1:3306467:                     messageId.setTextView(amqpMessageId.getTextView());
1:3306467:                 } else {
1:3306467:                     messageId.setTextView(amqpMessageId.toString());
1:13b915a:                 }
1:3306467:             }
1:3306467: 
1:3306467:             message.setMessageId(messageId);
1:3306467: 
1:3306467:             LOG.trace("Inbound Message:{} from Producer:{}",
1:3306467:                       message.getMessageId(), getProducerId() + ":" + messageId.getProducerSequenceId());
1:3306467: 
1:3306467:             final DeliveryState remoteState = delivery.getRemoteState();
2:3306467:             if (remoteState != null && remoteState instanceof TransactionalState) {
1:ed26683:                 TransactionalState txState = (TransactionalState) remoteState;
1:ed26683:                 TransactionId txId = new LocalTransactionId(session.getConnection().getConnectionId(), toLong(txState.getTxnId()));
1:ed26683:                 session.enlist(txId);
1:ed26683:                 message.setTransactionId(txId);
1:3306467:             }
1:3306467: 
1:3306467:             message.onSend();
1:3306467: 
1:7cf7fba:             sendsInFlight++;
1:3306467: 
1:7cf7fba:             sendToActiveMQ(message, createResponseHandler(delivery));
1:7cf7fba:         }
1:7cf7fba:     }
1:3306467: 
1:7cf7fba:     private ResponseHandler createResponseHandler(final Delivery delivery) {
1:7cf7fba:         return new ResponseHandler() {
1:7cf7fba: 
1:7cf7fba:             @Override
1:7cf7fba:             public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:7cf7fba:                 if (!delivery.remotelySettled()) {
1:7cf7fba:                     if (response.isException()) {
1:7cf7fba:                         ExceptionResponse error = (ExceptionResponse) response;
1:7cf7fba:                         Rejected rejected = new Rejected();
1:7cf7fba:                         ErrorCondition condition = new ErrorCondition();
1:7cf7fba: 
1:7cf7fba:                         if (error.getException() instanceof SecurityException) {
1:7cf7fba:                             condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
1:7cf7fba:                         } else if (error.getException() instanceof ResourceAllocationException) {
1:7cf7fba:                             condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
1:490436c:                         } else {
1:7cf7fba:                             condition.setCondition(Symbol.valueOf("failed"));
1:490436c:                         }
1:490436c: 
1:7cf7fba:                         condition.setDescription(error.getException().getMessage());
1:7cf7fba:                         rejected.setError(condition);
1:7cf7fba:                         delivery.disposition(rejected);
1:7cf7fba:                     } else {
1:7cf7fba:                         final DeliveryState remoteState = delivery.getRemoteState();
1:7cf7fba:                         if (remoteState != null && remoteState instanceof TransactionalState) {
1:7cf7fba:                             TransactionalState txAccepted = new TransactionalState();
1:7cf7fba:                             txAccepted.setOutcome(Accepted.getInstance());
1:7cf7fba:                             txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());
1:7cf7fba: 
1:7cf7fba:                             delivery.disposition(txAccepted);
1:7cf7fba:                         } else {
1:7cf7fba:                             delivery.disposition(Accepted.getInstance());
1:7cf7fba:                         }
1:7cf7fba:                     }
1:3306467:                 }
1:7cf7fba: 
1:7cf7fba:                 if (getEndpoint().getCredit() + --sendsInFlight <= (getConfiguredReceiverCredit() * .3)) {
1:7cf7fba:                     LOG.trace("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() * .7, getProducerId());
1:7cf7fba:                     getEndpoint().flow((int) (getConfiguredReceiverCredit() * .7));
1:3306467:                 }
1:3306467: 
1:b3bf8e7:                 delivery.settle();
1:7cf7fba:                 session.pumpProtonToSocket();
1:3306467:             }
1:7cf7fba:         };
1:3306467:     }
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7cf7fba
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:     private int sendsInFlight;
1: 
/////////////////////////////////////////////////////////////////////////
1:             sendsInFlight++;
1:             sendToActiveMQ(message, createResponseHandler(delivery));
1:         }
1:     }
1:     private ResponseHandler createResponseHandler(final Delivery delivery) {
1:         return new ResponseHandler() {
1: 
1:             @Override
1:             public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:                 if (!delivery.remotelySettled()) {
1:                     if (response.isException()) {
1:                         ExceptionResponse error = (ExceptionResponse) response;
1:                         Rejected rejected = new Rejected();
1:                         ErrorCondition condition = new ErrorCondition();
1: 
1:                         if (error.getException() instanceof SecurityException) {
1:                             condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
1:                         } else if (error.getException() instanceof ResourceAllocationException) {
1:                             condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
1:                             condition.setCondition(Symbol.valueOf("failed"));
1:                         condition.setDescription(error.getException().getMessage());
1:                         rejected.setError(condition);
1:                         delivery.disposition(rejected);
1:                     } else {
1:                         final DeliveryState remoteState = delivery.getRemoteState();
1:                         if (remoteState != null && remoteState instanceof TransactionalState) {
1:                             TransactionalState txAccepted = new TransactionalState();
1:                             txAccepted.setOutcome(Accepted.getInstance());
1:                             txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());
1: 
1:                             delivery.disposition(txAccepted);
1:                         } else {
1:                             delivery.disposition(Accepted.getInstance());
1:                         }
1:                 }
1: 
1:                 if (getEndpoint().getCredit() + --sendsInFlight <= (getConfiguredReceiverCredit() * .3)) {
1:                     LOG.trace("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() * .7, getProducerId());
1:                     getEndpoint().flow((int) (getConfiguredReceiverCredit() * .7));
1:                 session.pumpProtonToSocket();
1:         };
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 inboundTransformer = new JMSMappingInboundTransformer();
1:                 inboundTransformer = new AMQPNativeInboundTransformer();
1:                 inboundTransformer = new AMQPRawInboundTransformer();
1:                 inboundTransformer = new AMQPNativeInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage message = transformer.transform(em);
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQMessage message = (ActiveMQMessage) transformer.transform(em);
commit:83827f2
/////////////////////////////////////////////////////////////////////////
1:             sendToActiveMQ(new RemoveInfo(getProducerId()), new ResponseHandler() {
1:                 @Override
1:                 public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
1:                     AmqpReceiver.super.close();
1:                 }
1:             });
1:         } else {
1:             super.close();
1:         }
commit:490436c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ResourceAllocationException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.transport.AmqpError;
/////////////////////////////////////////////////////////////////////////
0:                             ExceptionResponse error = (ExceptionResponse) response;
1: 
0:                             if (error.getException() instanceof SecurityException) {
0:                                 condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
0:                             } else if (error.getException() instanceof ResourceAllocationException) {
0:                                 condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
1:                             } else {
1:                                 condition.setCondition(Symbol.valueOf("failed"));
1:                             }
1: 
0:                             condition.setDescription(error.getException().getMessage());
commit:bbcd938
/////////////////////////////////////////////////////////////////////////
0:                             if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
/////////////////////////////////////////////////////////////////////////
0:                 if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
commit:ed26683
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.TransactionId;
/////////////////////////////////////////////////////////////////////////
1:                 TransactionalState txState = (TransactionalState) remoteState;
1:                 TransactionId txId = new LocalTransactionId(session.getConnection().getConnectionId(), toLong(txState.getTxnId()));
1:                 session.enlist(txId);
1:                 message.setTransactionId(txId);
commit:13b915a
/////////////////////////////////////////////////////////////////////////
1:     protected InboundTransformer getTransformer() {
/////////////////////////////////////////////////////////////////////////
1: 
1:             InboundTransformer transformer = getTransformer();
0:             ActiveMQMessage message = null;
1: 
0:             while (transformer != null) {
0:                 try {
0:                     message = (ActiveMQMessage) transformer.transform(em);
0:                     break;
0:                 } catch (Exception e) {
0:                     LOG.debug("Transform of message using [{}] transformer, failed", getTransformer().getTransformerName());
0:                     LOG.trace("Transformation error:", e);
1: 
0:                     transformer = transformer.getFallbackTransformer();
1:                 }
1:             }
1: 
0:             if (message == null) {
0:                 throw new IOException("Failed to transform incoming delivery, skipping.");
1:             }
1: 
commit:ff1a1c4
/////////////////////////////////////////////////////////////////////////
1:             if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_JMS)) {
1:             } else if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_NATIVE)) {
1:             } else if (transformer.equalsIgnoreCase(InboundTransformer.TRANSFORMER_RAW)) {
commit:2013c6a
/////////////////////////////////////////////////////////////////////////
0:                                 LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
commit:b3bf8e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         delivery.settle();
/////////////////////////////////////////////////////////////////////////
1: 
0:                 delivery.settle();
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.apache.activemq.transport.amqp.AmqpSupport.toLong;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.Destination;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.transport.amqp.AmqpProtocolConverter;
1: import org.apache.activemq.transport.amqp.ResponseHandler;
1: import org.apache.activemq.transport.amqp.message.AMQPNativeInboundTransformer;
1: import org.apache.activemq.transport.amqp.message.AMQPRawInboundTransformer;
0: import org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor;
1: import org.apache.activemq.transport.amqp.message.EncodedMessage;
1: import org.apache.activemq.transport.amqp.message.InboundTransformer;
1: import org.apache.activemq.transport.amqp.message.JMSMappingInboundTransformer;
1: import org.apache.activemq.util.LongSequenceGenerator;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.Accepted;
1: import org.apache.qpid.proton.amqp.messaging.Rejected;
1: import org.apache.qpid.proton.amqp.transaction.TransactionalState;
1: import org.apache.qpid.proton.amqp.transport.DeliveryState;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An AmqpReceiver wraps the AMQP Receiver end of a link from the remote peer
1:  * which holds the corresponding Sender which transfers message accross the
1:  * link.  The AmqpReceiver handles all incoming deliveries by converting them
1:  * or wrapping them into an ActiveMQ message object and forwarding that message
1:  * on to the appropriate ActiveMQ Destination.
1:  */
1: public class AmqpReceiver extends AmqpAbstractReceiver {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpReceiver.class);
1: 
1:     private final ProducerInfo producerInfo;
0:     private final int configuredCredit;
1:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1: 
1:     private InboundTransformer inboundTransformer;
1: 
1:     /**
1:      * Create a new instance of an AmqpReceiver
1:      *
1:      * @param session
1:      *        the Session that is the parent of this AmqpReceiver instance.
1:      * @param endpoint
1:      *        the AMQP receiver endpoint that the class manages.
1:      * @param producerInfo
1:      *        the ProducerInfo instance that contains this sender's configuration.
1:      */
1:     public AmqpReceiver(AmqpSession session, Receiver endpoint, ProducerInfo producerInfo) {
1:         super(session, endpoint);
1: 
1:         this.producerInfo = producerInfo;
0:         this.configuredCredit = session.getConnection().getConfiguredReceiverCredit();
1:     }
1: 
1:     @Override
1:     public void close() {
1:         if (!isClosed() && isOpened()) {
0:             sendToActiveMQ(new RemoveInfo(getProducerId()));
1:         }
1: 
0:         super.close();
1:     }
1: 
1:     //----- Configuration accessors ------------------------------------------//
1: 
1:     /**
1:      * @return the ActiveMQ ProducerId used to register this Receiver on the Broker.
1:      */
1:     public ProducerId getProducerId() {
1:         return producerInfo.getProducerId();
1:     }
1: 
1:     @Override
1:     public ActiveMQDestination getDestination() {
1:         return producerInfo.getDestination();
1:     }
1: 
1:     @Override
1:     public void setDestination(ActiveMQDestination destination) {
1:         producerInfo.setDestination(destination);
1:     }
1: 
1:     /**
1:      * If the Sender that initiated this Receiver endpoint did not define an address
1:      * then it is using anonymous mode and message are to be routed to the address
1:      * that is defined in the AMQP message 'To' field.
1:      *
1:      * @return true if this Receiver should operate in anonymous mode.
1:      */
1:     public boolean isAnonymous() {
1:         return producerInfo.getDestination() == null;
1:     }
1: 
1:     /**
0:      * Returns the amount of receiver credit that has been configured for this AMQP
0:      * transport.  If no value was configured on the TransportConnector URI then a
0:      * sensible default is used.
1:      *
0:      * @return the configured receiver credit to grant.
1:      */
0:     public int getConfiguredReceiverCredit() {
0:         return configuredCredit;
1:     }
1: 
1:     //----- Internal Implementation ------------------------------------------//
1: 
0:     protected InboundTransformer getInboundTransformer() {
1:         if (inboundTransformer == null) {
1:             String transformer = session.getConnection().getConfiguredTransformer();
0:             if (transformer.equals(InboundTransformer.TRANSFORMER_JMS)) {
0:                 inboundTransformer = new JMSMappingInboundTransformer(ActiveMQJMSVendor.INSTANCE);
0:             } else if (transformer.equals(InboundTransformer.TRANSFORMER_NATIVE)) {
0:                 inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
0:             } else if (transformer.equals(InboundTransformer.TRANSFORMER_RAW)) {
0:                 inboundTransformer = new AMQPRawInboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:             } else {
1:                 LOG.warn("Unknown transformer type {} using native one instead", transformer);
0:                 inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:             }
1:         }
1:         return inboundTransformer;
1:     }
1: 
1:     @Override
1:     protected void processDelivery(final Delivery delivery, Buffer deliveryBytes) throws Exception {
1:         if (!isClosed()) {
1:             EncodedMessage em = new EncodedMessage(delivery.getMessageFormat(), deliveryBytes.data, deliveryBytes.offset, deliveryBytes.length);
0:             final ActiveMQMessage message = (ActiveMQMessage) getInboundTransformer().transform(em);
1:             current = null;
1: 
1:             if (isAnonymous()) {
1:                 Destination toDestination = message.getJMSDestination();
1:                 if (toDestination == null || !(toDestination instanceof ActiveMQDestination)) {
1:                     Rejected rejected = new Rejected();
1:                     ErrorCondition condition = new ErrorCondition();
0:                     condition.setCondition(Symbol.valueOf("failed"));
1:                     condition.setDescription("Missing to field for message sent to an anonymous producer");
1:                     rejected.setError(condition);
1:                     delivery.disposition(rejected);
1:                     return;
1:                 }
1:             } else {
1:                 message.setJMSDestination(getDestination());
1:             }
1: 
1:             message.setProducerId(getProducerId());
1: 
1:             // Always override the AMQP client's MessageId with our own.  Preserve
1:             // the original in the TextView property for later Ack.
1:             MessageId messageId = new MessageId(getProducerId(), messageIdGenerator.getNextSequenceId());
1: 
1:             MessageId amqpMessageId = message.getMessageId();
1:             if (amqpMessageId != null) {
1:                 if (amqpMessageId.getTextView() != null) {
1:                     messageId.setTextView(amqpMessageId.getTextView());
1:                 } else {
1:                     messageId.setTextView(amqpMessageId.toString());
1:                 }
1:             }
1: 
1:             message.setMessageId(messageId);
1: 
1:             LOG.trace("Inbound Message:{} from Producer:{}",
1:                       message.getMessageId(), getProducerId() + ":" + messageId.getProducerSequenceId());
1: 
1:             final DeliveryState remoteState = delivery.getRemoteState();
1:             if (remoteState != null && remoteState instanceof TransactionalState) {
0:                 TransactionalState s = (TransactionalState) remoteState;
0:                 long txid = toLong(s.getTxnId());
0:                 message.setTransactionId(new LocalTransactionId(session.getConnection().getConnectionId(), txid));
1:             }
1: 
1:             message.onSend();
0:             if (!delivery.remotelySettled()) {
0:                 sendToActiveMQ(message, new ResponseHandler() {
1: 
1:                     @Override
0:                     public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
0:                         if (response.isException()) {
0:                             ExceptionResponse er = (ExceptionResponse) response;
1:                             Rejected rejected = new Rejected();
1:                             ErrorCondition condition = new ErrorCondition();
0:                             condition.setCondition(Symbol.valueOf("failed"));
0:                             condition.setDescription(er.getException().getMessage());
1:                             rejected.setError(condition);
1:                             delivery.disposition(rejected);
1:                         } else {
1: 
0:                             if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .2)) {
0:                                 LOG.trace("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
0:                                 getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
1:                             }
1: 
1:                             if (remoteState != null && remoteState instanceof TransactionalState) {
0:                                 TransactionalState txAccepted = new TransactionalState();
0:                                 txAccepted.setOutcome(Accepted.getInstance());
0:                                 txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());
1: 
0:                                 delivery.disposition(txAccepted);
1:                             } else {
0:                                 delivery.disposition(Accepted.getInstance());
1:                             }
1: 
0:                             delivery.settle();
1:                         }
1: 
0:                         session.pumpProtonToSocket();
1:                     }
0:                 });
1:             } else {
0:                 if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .2)) {
0:                     LOG.trace("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
0:                     getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
0:                     session.pumpProtonToSocket();
1:                 }
0:                 sendToActiveMQ(message);
1:             }
1:         }
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:fa81c1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================