1:10478c3: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
6:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:10478c3: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: 
1:d29ca2a: public class JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:d29ca2a: 
1:d29ca2a:     protected BrokerService broker;
1:10478c3:     protected String bindAddress = "tcp://localhost:0";
1:10478c3:     protected String connectionAddress;
1:d29ca2a: 
3:d29ca2a:     /**
1:d29ca2a:      * Sets up a test where the producer and consumer have their own connection.
1:10478c3:      *
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:10478c3:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         if (broker == null) {
1:d29ca2a:             broker = createBroker();
2:d29ca2a:         }
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:10478c3:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a: 
1:d29ca2a:         if (broker != null) {
1:d29ca2a:             broker.stop();
1:10478c3:             broker = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new broker
1:10478c3:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         BrokerService answer = new BrokerService();
1:10478c3:         TransportConnector connector = configureBroker(answer);
1:d29ca2a:         answer.start();
1:10478c3: 
1:10478c3:         connectionAddress = connector.getPublishableConnectString();
1:10478c3: 
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:10478c3:     protected TransportConnector configureBroker(BrokerService answer) throws Exception {
1:10478c3:         return answer.addConnector(bindAddress);
1:d29ca2a:     }
1:d29ca2a: 
1:10478c3:     @Override
1:d29ca2a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:10478c3:         return new ActiveMQConnectionFactory(connectionAddress);
1:86cbdfd:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:10478c3
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
1:     protected String bindAddress = "tcp://localhost:0";
1:     protected String connectionAddress;
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             broker = null;
1:      *
1:         TransportConnector connector = configureBroker(answer);
1: 
1:         connectionAddress = connector.getPublishableConnectString();
1: 
1:     protected TransportConnector configureBroker(BrokerService answer) throws Exception {
1:         return answer.addConnector(bindAddress);
1:     @Override
1:         return new ActiveMQConnectionFactory(connectionAddress);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1: 
1:     protected BrokerService broker;
0:     protected String bindAddress = "tcp://localhost:61616";
1: 
1:     /**
1:      * Sets up a test where the producer and consumer have their own connection.
1:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a new broker
1:      * 
1:      * @throws Exception
1:      */
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
0:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
0:     protected void configureBroker(BrokerService answer) throws Exception {
0:         answer.addConnector(bindAddress);
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory(bindAddress);
1:     }
1: }
============================================================================