1:a21dd40: /*
1:a21dd40:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a21dd40:  * contributor license agreements.  See the NOTICE file distributed with
1:a21dd40:  * this work for additional information regarding copyright ownership.
1:a21dd40:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a21dd40:  * (the "License"); you may not use this file except in compliance with
1:a21dd40:  * the License.  You may obtain a copy of the License at
1:a21dd40:  *
1:a21dd40:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a21dd40:  *
1:a21dd40:  * Unless required by applicable law or agreed to in writing, software
1:a21dd40:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a21dd40:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a21dd40:  * See the License for the specific language governing permissions and
1:a21dd40:  * limitations under the License.
1:a21dd40:  */
1:a21dd40: package org.apache.activemq.transport.http;
1:a21dd40: 
1:a21dd40: import static org.junit.Assert.assertEquals;
1:a21dd40: import static org.junit.Assert.assertNotNull;
1:a21dd40: import static org.junit.Assert.assertNull;
1:a21dd40: 
1:a21dd40: import java.io.IOException;
1:a21dd40: import java.net.ServerSocket;
1:a21dd40: import java.net.URI;
1:a21dd40: 
1:a21dd40: import javax.jms.BytesMessage;
1:a21dd40: import javax.jms.Destination;
1:a21dd40: import javax.jms.MessageConsumer;
1:a21dd40: import javax.jms.MessageProducer;
1:a21dd40: import javax.jms.Session;
1:a21dd40: import javax.jms.TextMessage;
1:a21dd40: import javax.net.ServerSocketFactory;
1:a21dd40: 
1:a21dd40: import org.apache.activemq.ActiveMQConnection;
1:a21dd40: import org.apache.activemq.ActiveMQConnectionFactory;
1:a21dd40: import org.apache.activemq.broker.BrokerService;
1:a21dd40: import org.apache.activemq.transport.ws.WSTransportTestSupport;
1:a21dd40: import org.junit.After;
1:a21dd40: import org.junit.Before;
1:a21dd40: import org.junit.Rule;
1:a21dd40: import org.junit.Test;
1:a21dd40: import org.junit.rules.TestName;
1:a21dd40: import org.slf4j.Logger;
1:a21dd40: import org.slf4j.LoggerFactory;
1:a21dd40: 
1:a21dd40: /**
1:a21dd40:  *
1:a21dd40:  */
1:a21dd40: public class HttpPullConsumerTest {
1:a21dd40: 
1:a21dd40:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTestSupport.class);
1:a21dd40: 
1:a21dd40:     @Rule
1:a21dd40:     public TestName name = new TestName();
1:a21dd40: 
1:a21dd40:     private int proxyPort = 0;
1:a21dd40: 
1:a21dd40:     protected ActiveMQConnectionFactory factory;
1:a21dd40:     protected ActiveMQConnection connection;
1:a21dd40:     protected BrokerService broker;
1:a21dd40:     protected URI httpConnectUri;
1:a21dd40: 
1:a21dd40:     @Before
1:a21dd40:     public void setUp() throws Exception {
1:a21dd40:         LOG.info("========== Starting test: {} ==========", name.getMethodName());
1:a21dd40:         broker = createBroker(true, true);
1:a21dd40: 
1:a21dd40:         factory = new ActiveMQConnectionFactory(getHttpConnectionURI());
1:a21dd40:         factory.getPrefetchPolicy().setAll(0);
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     @After
1:a21dd40:     public void tearDown() throws Exception {
1:a21dd40:         try {
1:a21dd40:             stopBroker();
1:a21dd40:         } catch(Exception e) {
1:a21dd40:             LOG.warn("Error on Broker stop.");
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         try {
1:a21dd40:             if (connection != null) {
1:a21dd40:                 connection.close();
1:a21dd40:             }
1:a21dd40:         } catch (Exception e) {
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         LOG.info("========== Finished test: {} ==========", name.getMethodName());
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     @Test(timeout = 30000)
1:a21dd40:     public void testTextMessage() throws Exception {
1:a21dd40:         connection = (ActiveMQConnection) factory.createConnection();
1:a21dd40: 
1:a21dd40:         // Receive a message with the JMS API
1:a21dd40:         connection.start();
1:a21dd40:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a21dd40:         Destination destination = session.createQueue(getTestName());
1:a21dd40:         MessageConsumer consumer = session.createConsumer(destination);
1:a21dd40:         MessageProducer producer = session.createProducer(destination);
1:a21dd40: 
1:a21dd40:         // Send the message.
1:a21dd40:         {
1:a21dd40:             TextMessage message = session.createTextMessage();
1:a21dd40:             message.setText("Hi");
1:a21dd40:             producer.send(message);
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         // Check the Message
1:a21dd40:         {
1:a21dd40:             TextMessage message = (TextMessage)consumer.receive(2000);
1:a21dd40:             assertNotNull(message);
1:a21dd40:             assertEquals("Hi", message.getText());
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         assertNull(consumer.receiveNoWait());
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     @Test(timeout = 30000)
1:a21dd40:     public void testBytesMessageLength() throws Exception {
1:a21dd40:         connection = (ActiveMQConnection) factory.createConnection();
1:a21dd40: 
1:a21dd40:         // Receive a message with the JMS API
1:a21dd40:         connection.start();
1:a21dd40:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a21dd40:         Destination destination = session.createQueue(getTestName());
1:a21dd40:         MessageConsumer consumer = session.createConsumer(destination);
1:a21dd40:         MessageProducer producer = session.createProducer(destination);
1:a21dd40: 
1:a21dd40:         // Send the message
1:a21dd40:         {
1:a21dd40:             BytesMessage message = session.createBytesMessage();
1:a21dd40:             message.writeInt(1);
1:a21dd40:             message.writeInt(2);
1:a21dd40:             message.writeInt(3);
1:a21dd40:             message.writeInt(4);
1:a21dd40:             producer.send(message);
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         // Check the message.
1:a21dd40:         {
1:a21dd40:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:a21dd40:             assertNotNull(message);
1:a21dd40:             assertEquals(16, message.getBodyLength());
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         assertNull(consumer.receiveNoWait());
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected String getHttpConnectionURI() {
1:a21dd40:         return "http://127.0.0.1:" + getProxyPort() + "?trace=true";
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected String getHttpConnectorURI() {
1:a21dd40:         return "http://127.0.0.1:" + getProxyPort() +
1:a21dd40:                "?trace=true&transport.trace=true";
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected BrokerService createBroker(boolean deleteMessages, boolean advisorySupport) throws Exception {
1:a21dd40: 
1:a21dd40:         BrokerService broker = new BrokerService();
1:a21dd40: 
1:a21dd40:         httpConnectUri = broker.addConnector(getHttpConnectorURI()).getPublishableConnectURI();
1:a21dd40: 
1:a21dd40:         broker.setAdvisorySupport(advisorySupport);
1:a21dd40:         broker.setUseJmx(true);
1:a21dd40:         broker.getManagementContext().setCreateConnector(false);
1:a21dd40:         broker.setPersistent(isPersistent());
1:a21dd40:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:a21dd40:         broker.start();
1:a21dd40:         broker.waitUntilStarted();
1:a21dd40: 
1:a21dd40:         return broker;
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected boolean isPersistent() {
1:a21dd40:         return false;
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected String getTestName() {
1:a21dd40:         return name.getMethodName();
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected int getProxyPort() {
1:a21dd40:         if (proxyPort == 0) {
1:a21dd40:             ServerSocket ss = null;
1:a21dd40:             try {
1:a21dd40:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:a21dd40:                 proxyPort = ss.getLocalPort();
1:a21dd40:             } catch (IOException e) { // ignore
1:a21dd40:             } finally {
1:a21dd40:                 try {
1:a21dd40:                     if (ss != null ) {
1:a21dd40:                         ss.close();
1:a21dd40:                     }
1:a21dd40:                 } catch (IOException e) { // ignore
1:a21dd40:                 }
1:a21dd40:             }
1:a21dd40:         }
1:a21dd40: 
1:a21dd40:         return proxyPort;
1:a21dd40:     }
1:a21dd40: 
1:a21dd40:     protected void stopBroker() throws Exception {
1:a21dd40:         if (broker != null) {
1:a21dd40:             broker.stop();
1:a21dd40:             broker.waitUntilStopped();
1:a21dd40:             broker = null;
1:a21dd40:         }
1:a21dd40:     }
1:a21dd40: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a21dd40
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.net.URI;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.net.ServerSocketFactory;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.ws.WSTransportTestSupport;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
1: public class HttpPullConsumerTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTestSupport.class);
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     private int proxyPort = 0;
1: 
1:     protected ActiveMQConnectionFactory factory;
1:     protected ActiveMQConnection connection;
1:     protected BrokerService broker;
1:     protected URI httpConnectUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("========== Starting test: {} ==========", name.getMethodName());
1:         broker = createBroker(true, true);
1: 
1:         factory = new ActiveMQConnectionFactory(getHttpConnectionURI());
1:         factory.getPrefetchPolicy().setAll(0);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             stopBroker();
1:         } catch(Exception e) {
1:             LOG.warn("Error on Broker stop.");
1:         }
1: 
1:         try {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         } catch (Exception e) {
1:         }
1: 
1:         LOG.info("========== Finished test: {} ==========", name.getMethodName());
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testTextMessage() throws Exception {
1:         connection = (ActiveMQConnection) factory.createConnection();
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(getTestName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the message.
1:         {
1:             TextMessage message = session.createTextMessage();
1:             message.setText("Hi");
1:             producer.send(message);
1:         }
1: 
1:         // Check the Message
1:         {
1:             TextMessage message = (TextMessage)consumer.receive(2000);
1:             assertNotNull(message);
1:             assertEquals("Hi", message.getText());
1:         }
1: 
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testBytesMessageLength() throws Exception {
1:         connection = (ActiveMQConnection) factory.createConnection();
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(getTestName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the message
1:         {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeInt(1);
1:             message.writeInt(2);
1:             message.writeInt(3);
1:             message.writeInt(4);
1:             producer.send(message);
1:         }
1: 
1:         // Check the message.
1:         {
1:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:             assertNotNull(message);
1:             assertEquals(16, message.getBodyLength());
1:         }
1: 
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     protected String getHttpConnectionURI() {
1:         return "http://127.0.0.1:" + getProxyPort() + "?trace=true";
1:     }
1: 
1:     protected String getHttpConnectorURI() {
1:         return "http://127.0.0.1:" + getProxyPort() +
1:                "?trace=true&transport.trace=true";
1:     }
1: 
1:     protected BrokerService createBroker(boolean deleteMessages, boolean advisorySupport) throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1: 
1:         httpConnectUri = broker.addConnector(getHttpConnectorURI()).getPublishableConnectURI();
1: 
1:         broker.setAdvisorySupport(advisorySupport);
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setPersistent(isPersistent());
1:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         return broker;
1:     }
1: 
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
1:     protected String getTestName() {
1:         return name.getMethodName();
1:     }
1: 
1:     protected int getProxyPort() {
1:         if (proxyPort == 0) {
1:             ServerSocket ss = null;
1:             try {
1:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:                 proxyPort = ss.getLocalPort();
1:             } catch (IOException e) { // ignore
1:             } finally {
1:                 try {
1:                     if (ss != null ) {
1:                         ss.close();
1:                     }
1:                 } catch (IOException e) { // ignore
1:                 }
1:             }
1:         }
1: 
1:         return proxyPort;
1:     }
1: 
1:     protected void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: }
============================================================================