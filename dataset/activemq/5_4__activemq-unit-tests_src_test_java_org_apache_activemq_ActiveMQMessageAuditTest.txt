2:4b7e5c9: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:933eb2f:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:4b7e5c9:  */
1:4b7e5c9: package org.apache.activemq;
8:4b7e5c9: 
1:14755a1: import java.io.ByteArrayInputStream;
1:14755a1: import java.io.ByteArrayOutputStream;
1:14755a1: import java.io.ObjectInputStream;
1:14755a1: import java.io.ObjectOutputStream;
1:4b7e5c9: import java.util.ArrayList;
1:4b7e5c9: import java.util.List;
1:4b7e5c9: import junit.framework.TestCase;
1:4b7e5c9: import org.apache.activemq.broker.region.MessageReference;
1:4b7e5c9: import org.apache.activemq.command.ActiveMQMessage;
1:4b7e5c9: import org.apache.activemq.command.MessageId;
1:4b7e5c9: import org.apache.activemq.command.ProducerId;
1:4b7e5c9: import org.apache.activemq.util.IdGenerator;
1:d97e8fe: import org.slf4j.Logger;
1:d97e8fe: import org.slf4j.LoggerFactory;
1:1ee0017: 
1:4b7e5c9: /**
1:4b7e5c9:  * ActiveMQMessageAuditTest
1:d97e8fe:  *
1:d97e8fe:  *
1:4b7e5c9:  */
1:f812e34: public class ActiveMQMessageAuditTest extends TestCase {
1:933eb2f: 
1:d97e8fe:     static final Logger LOG = LoggerFactory.getLogger(ActiveMQMessageAuditTest.class);
1:4b7e5c9: 
1:933eb2f:     /**
1:933eb2f:      * Constructor for ActiveMQMessageAuditTest.
1:d97e8fe:      *
1:933eb2f:      * @param name
1:933eb2f:      */
1:933eb2f:     public ActiveMQMessageAuditTest(String name) {
1:933eb2f:         super(name);
1:933eb2f:     }
1:14755a1: 
1:f812e34:     public static void main(String[] args) {
2:4b7e5c9:     }
1:14755a1: 
1:f812e34:     protected void setUp() throws Exception {
1:4b7e5c9:         super.setUp();
1:4b7e5c9:     }
1:933eb2f: 
1:f812e34:     protected void tearDown() throws Exception {
1:4b7e5c9:         super.tearDown();
1:4b7e5c9:     }
1:1ee0017: 
1:4b7e5c9:     /**
1:4b7e5c9:      * test case for isDuplicate
1:4b7e5c9:      */
1:f812e34:     public void testIsDuplicateString() {
1:f812e34:         int count = 10000;
1:f812e34:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:f812e34:         IdGenerator idGen = new IdGenerator();
1:4b7e5c9:         // add to a list
1:f812e34:         List<String> list = new ArrayList<String>();
1:f812e34:         for (int i = 0; i < count; i++) {
1:f812e34:             String id = idGen.generateId();
1:4b7e5c9:             list.add(id);
1:74a7a8b:             assertFalse(audit.isDuplicate(id));
1:4b7e5c9:         }
1:0446404:         List<String> windowList = list.subList(list.size() -1 -audit.getAuditDepth(), list.size() -1);
1:0446404:         for (String id : windowList) {
1:0446404:             assertTrue("duplicate, id:" + id, audit.isDuplicate(id));
1:4b7e5c9:         }
1:4b7e5c9:     }
1:14755a1: 
1:f812e34:     public void testIsDuplicateMessageReference() {
1:f812e34:         int count = 10000;
1:f812e34:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:4b7e5c9:         // add to a list
1:f812e34:         List<MessageReference> list = new ArrayList<MessageReference>();
1:f812e34:         for (int i = 0; i < count; i++) {
1:f812e34:             ProducerId pid = new ProducerId();
1:4b7e5c9:             pid.setConnectionId("test");
1:4b7e5c9:             pid.setSessionId(0);
1:4b7e5c9:             pid.setValue(1);
1:f812e34:             MessageId id = new MessageId();
1:4b7e5c9:             id.setProducerId(pid);
1:4b7e5c9:             id.setProducerSequenceId(i);
1:f812e34:             ActiveMQMessage msg = new ActiveMQMessage();
1:4b7e5c9:             msg.setMessageId(id);
1:4b7e5c9:             list.add(msg);
1:1ee0017:             assertFalse(audit.isDuplicate(msg.getMessageId()));
1:1ee0017:         }
1:0446404:         List<MessageReference> windowList = list.subList(list.size() -1 -audit.getAuditDepth(), list.size() -1);
1:0446404:         for (MessageReference msg : windowList) {
1:0446404:             assertTrue("duplicate msg:" + msg, audit.isDuplicate(msg));
1:1ee0017:         }
1:4b7e5c9:     }
1:d97e8fe: 
1:1ee0017:     public void testIsInOrderString() {
1:1ee0017:         int count = 10000;
1:1ee0017:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:1ee0017:         IdGenerator idGen = new IdGenerator();
1:1ee0017:         // add to a list
1:1ee0017:         List<String> list = new ArrayList<String>();
1:1ee0017:         for (int i = 0; i < count; i++) {
1:1ee0017:             String id = idGen.generateId();
1:1ee0017:             if (i==0) {
1:1ee0017:                 assertFalse(audit.isDuplicate(id));
1:9dd11cb:                 assertTrue(audit.isInOrder(id));
1:1ee0017:             }
1:1ee0017:             if (i > 1 && i%2 != 0) {
1:1ee0017:                 list.add(id);
1:1ee0017:             }
1:d97e8fe: 
1:1ee0017:         }
1:f812e34:         for (String id : list) {
1:1ee0017:             assertFalse(audit.isInOrder(id));
1:1ee0017:             assertFalse(audit.isDuplicate(id));
1:4b7e5c9:         }
1:4b7e5c9:     }
1:14755a1: 
1:14755a1:     public void testSerialization() throws Exception {
1:14755a1:         ActiveMQMessageAuditNoSync audit = new ActiveMQMessageAuditNoSync();
1:14755a1: 
1:14755a1:         byte[] bytes =  serialize(audit);
1:d97e8fe:         LOG.debug("Length: " + bytes.length);
1:14755a1:         audit = recover(bytes);
1:14755a1: 
1:14755a1:         List<MessageReference> list = new ArrayList<MessageReference>();
1:14755a1: 
1:14755a1:         for (int j = 0; j < 1000; j++) {
1:14755a1:             ProducerId pid = new ProducerId();
1:14755a1:             pid.setConnectionId("test");
1:14755a1:             pid.setSessionId(0);
1:14755a1:             pid.setValue(j);
1:d97e8fe:             LOG.debug("producer " + j);
1:14755a1: 
1:14755a1:             for (int i = 0; i < 1000; i++) {
1:14755a1:                 MessageId id = new MessageId();
1:14755a1:                 id.setProducerId(pid);
1:14755a1:                 id.setProducerSequenceId(i);
1:14755a1:                 ActiveMQMessage msg = new ActiveMQMessage();
1:14755a1:                 msg.setMessageId(id);
1:14755a1:                 list.add(msg);
1:14755a1:                 assertFalse(audit.isDuplicate(msg.getMessageId().toString()));
1:14755a1: 
1:14755a1:                 if (i % 100 == 0) {
1:14755a1:                     bytes = serialize(audit);
1:d97e8fe:                     LOG.debug("Length: " + bytes.length);
1:14755a1:                     audit = recover(bytes);
1:14755a1:                 }
1:14755a1: 
1:14755a1:                 if (i % 250 == 0) {
1:14755a1:                     for (MessageReference message : list) {
1:14755a1:                         audit.rollback(message.getMessageId().toString());
1:14755a1:                     }
1:14755a1:                     list.clear();
1:14755a1:                     bytes = serialize(audit);
1:d97e8fe:                     LOG.debug("Length: " + bytes.length);
1:14755a1:                     audit = recover(bytes);
1:14755a1:                 }
1:14755a1:             }
1:14755a1:         }
1:14755a1:     }
1:14755a1: 
1:14755a1:     protected byte[] serialize(ActiveMQMessageAuditNoSync audit) throws Exception {
1:14755a1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:14755a1:         ObjectOutputStream oout = new ObjectOutputStream(baos);
1:14755a1:         oout.writeObject(audit);
1:14755a1:         oout.flush();
1:14755a1:         return baos.toByteArray();
1:14755a1:     }
1:14755a1: 
1:14755a1:     protected ActiveMQMessageAuditNoSync recover(byte[] bytes) throws Exception {
1:14755a1:         ObjectInputStream objectIn = new ObjectInputStream(new ByteArrayInputStream(bytes));
1:14755a1:         return (ActiveMQMessageAuditNoSync)objectIn.readObject();
1:14755a1:     }
1:4b7e5c9: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:d97e8fe
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:  *
1:  *
1:     static final Logger LOG = LoggerFactory.getLogger(ActiveMQMessageAuditTest.class);
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Length: " + bytes.length);
1:             LOG.debug("producer " + j);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("Length: " + bytes.length);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("Length: " + bytes.length);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:14755a1
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSerialization() throws Exception {
1:         ActiveMQMessageAuditNoSync audit = new ActiveMQMessageAuditNoSync();
1: 
1:         byte[] bytes =  serialize(audit);
0:         System.out.println(bytes.length);
1:         audit = recover(bytes);
1: 
1:         List<MessageReference> list = new ArrayList<MessageReference>();
1: 
1: 
1:         for (int j = 0; j < 1000; j++) {
1:             ProducerId pid = new ProducerId();
1:             pid.setConnectionId("test");
1:             pid.setSessionId(0);
1:             pid.setValue(j);
0:             System.out.println("producer " + j);
1: 
1:             for (int i = 0; i < 1000; i++) {
1:                 MessageId id = new MessageId();
1:                 id.setProducerId(pid);
1:                 id.setProducerSequenceId(i);
1:                 ActiveMQMessage msg = new ActiveMQMessage();
1:                 msg.setMessageId(id);
1:                 list.add(msg);
1:                 assertFalse(audit.isDuplicate(msg.getMessageId().toString()));
1: 
1:                 if (i % 100 == 0) {
1:                     bytes = serialize(audit);
0:                     System.out.println(bytes.length);
1:                     audit = recover(bytes);
1:                 }
1: 
1:                 if (i % 250 == 0) {
1:                     for (MessageReference message : list) {
1:                         audit.rollback(message.getMessageId().toString());
1:                     }
1:                     list.clear();
1:                     bytes = serialize(audit);
0:                     System.out.println(bytes.length);
1:                     audit = recover(bytes);
1:                 }
1: 
1:             }
1:         }
1: 
1:     }
1: 
1:     protected byte[] serialize(ActiveMQMessageAuditNoSync audit) throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ObjectOutputStream oout = new ObjectOutputStream(baos);
1:         oout.writeObject(audit);
1:         oout.flush();
1:         return baos.toByteArray();
1:     }
1: 
1:     protected ActiveMQMessageAuditNoSync recover(byte[] bytes) throws Exception {
1:         ObjectInputStream objectIn = new ObjectInputStream(new ByteArrayInputStream(bytes));
1:         return (ActiveMQMessageAuditNoSync)objectIn.readObject();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Constructor for ActiveMQMessageAuditTest.
1:      * 
1:      * @param name
1:      */
1:     public ActiveMQMessageAuditTest(String name) {
1:         super(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:             assertFalse(audit.isDuplicate(id));
/////////////////////////////////////////////////////////////////////////
0:             assertFalse(audit.isDuplicateMessageReference(msg));
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQMessageAuditTest extends TestCase {
1:     public static void main(String[] args) {
1:     protected void setUp() throws Exception {
1:     protected void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public ActiveMQMessageAuditTest(String arg0) {
1:     public void testIsDuplicateString() {
1:         int count = 10000;
1:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:         IdGenerator idGen = new IdGenerator();
1:         List<String> list = new ArrayList<String>();
1:         for (int i = 0; i < count; i++) {
1:             String id = idGen.generateId();
0:             assertTrue(audit.isDuplicate(id) == false);
1:         for (String id : list) {
1:     public void testIsDuplicateMessageReference() {
1:         int count = 10000;
1:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:         List<MessageReference> list = new ArrayList<MessageReference>();
1:         for (int i = 0; i < count; i++) {
1:             ProducerId pid = new ProducerId();
1:             MessageId id = new MessageId();
1:             ActiveMQMessage msg = new ActiveMQMessage();
0:             assertTrue(audit.isDuplicateMessageReference(msg) == false);
0:         for (MessageReference msg : list) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:0446404
/////////////////////////////////////////////////////////////////////////
1:         List<String> windowList = list.subList(list.size() -1 -audit.getAuditDepth(), list.size() -1);
1:         for (String id : windowList) {
1:             assertTrue("duplicate, id:" + id, audit.isDuplicate(id));
/////////////////////////////////////////////////////////////////////////
1:         List<MessageReference> windowList = list.subList(list.size() -1 -audit.getAuditDepth(), list.size() -1);
1:         for (MessageReference msg : windowList) {
1:             assertTrue("duplicate msg:" + msg, audit.isDuplicate(msg));
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1:                 assertTrue(audit.isInOrder(id));
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
1:             assertFalse(audit.isDuplicate(msg.getMessageId()));
0:             assertTrue(audit.isDuplicate(msg));
1:         }
1:     }
1:     
1:     public void testIsInOrderString() {
1:         int count = 10000;
1:         ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
1:         IdGenerator idGen = new IdGenerator();
1:         // add to a list
1:         List<String> list = new ArrayList<String>();
1:         for (int i = 0; i < count; i++) {
1:             String id = idGen.generateId();
1:             if (i==0) {
1:                 assertFalse(audit.isDuplicate(id));
1:             }
1:             if (i > 1 && i%2 != 0) {
1:                 list.add(id);
1:             }
1:           
1:         }
0:         for (String id : list) {
1:             assertFalse(audit.isInOrder(id));
1:             assertFalse(audit.isDuplicate(id));
commit:4b7e5c9
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.util.IdGenerator;
1: 
1: /**
1:  * ActiveMQMessageAuditTest
0:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class ActiveMQMessageAuditTest extends TestCase{
1: 
0:     public static void main(String[] args){
1:     }
1: 
0:     protected void setUp() throws Exception{
1:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Constructor for ActiveMQMessageAuditTest.
0:      * 
0:      * @param arg0
1:      */
0:     public ActiveMQMessageAuditTest(String arg0){
0:         super(arg0);
1:     }
1: 
1:     /**
1:      * test case for isDuplicate
1:      */
0:     public void testIsDuplicateString(){
0:         int count=10000;
0:         ActiveMQMessageAudit audit=new ActiveMQMessageAudit();
0:         IdGenerator idGen=new IdGenerator();
1:         // add to a list
0:         List<String> list=new ArrayList<String>();
0:         for(int i=0;i<count;i++){
0:             String id=idGen.generateId();
1:             list.add(id);
0:             assertTrue(audit.isDuplicate(id)==false);
1:         }
0:         for(String id:list){
0:             assertTrue(audit.isDuplicate(id));
1:         }
1:     }
1: 
0:     public void testIsDuplicateMessageReference(){
0:         int count=10000;
0:         ActiveMQMessageAudit audit=new ActiveMQMessageAudit();
1:         // add to a list
0:         List<MessageReference> list=new ArrayList<MessageReference>();
0:         for(int i=0;i<count;i++){
0:             ProducerId pid=new ProducerId();
1:             pid.setConnectionId("test");
1:             pid.setSessionId(0);
1:             pid.setValue(1);
0:             MessageId id=new MessageId();
1:             id.setProducerId(pid);
1:             id.setProducerSequenceId(i);
0:             ActiveMQMessage msg=new ActiveMQMessage();
1:             msg.setMessageId(id);
1:             list.add(msg);
0:             assertTrue(audit.isDuplicateMessageReference(msg)==false);
1:         }
0:         for(MessageReference msg:list){
0:             assertTrue(audit.isDuplicateMessageReference(msg));
1:         }
1:     }
1: }
============================================================================