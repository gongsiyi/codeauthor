1:a0d2282: /**
1:a0d2282:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0d2282:  * contributor license agreements.  See the NOTICE file distributed with
1:a0d2282:  * this work for additional information regarding copyright ownership.
1:a0d2282:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0d2282:  * (the "License"); you may not use this file except in compliance with
1:a0d2282:  * the License.  You may obtain a copy of the License at
1:a0d2282:  *
1:a0d2282:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0d2282:  *
1:a0d2282:  * Unless required by applicable law or agreed to in writing, software
1:a0d2282:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0d2282:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0d2282:  * See the License for the specific language governing permissions and
1:a0d2282:  * limitations under the License.
1:a0d2282:  */
1:a0d2282: package org.apache.activemq;
1:a0d2282: 
1:a0d2282: import java.io.IOException;
1:a0d2282: import java.util.concurrent.CountDownLatch;
1:a0d2282: import java.util.concurrent.TimeUnit;
1:a0d2282: import java.util.concurrent.atomic.AtomicBoolean;
1:a0d2282: import java.util.concurrent.atomic.AtomicLong;
1:a0d2282: 
1:a0d2282: import javax.jms.ConnectionFactory;
1:a0d2282: import javax.jms.JMSException;
1:a0d2282: import javax.jms.MessageConsumer;
1:a0d2282: import javax.jms.MessageProducer;
1:a0d2282: import javax.jms.Session;
1:a0d2282: import javax.jms.TextMessage;
1:a0d2282: import javax.jms.Topic;
1:a0d2282: 
1:a0d2282: import org.apache.activemq.broker.BrokerService;
1:a0d2282: import org.apache.activemq.broker.TransportConnector;
1:a0d2282: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a0d2282: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a0d2282: import org.apache.activemq.command.ActiveMQDestination;
1:a0d2282: import org.apache.activemq.command.ActiveMQQueue;
1:a0d2282: import org.apache.activemq.command.ActiveMQTopic;
1:a0d2282: import org.apache.activemq.transport.tcp.TcpTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a0d2282: 
1:a0d2282: // see: https://issues.apache.org/activemq/browse/AMQ-2668
1:a0d2282: public class PerDestinationStoreLimitTest extends JmsTestSupport {
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(PerDestinationStoreLimitTest.class);
1:a0d2282:     final String oneKb = new String(new byte[1024]);
1:a0d2282:     
1:a0d2282:     ActiveMQDestination queueDest = new ActiveMQQueue("PerDestinationStoreLimitTest.Queue");
1:a0d2282:     ActiveMQDestination topicDest = new ActiveMQTopic("PerDestinationStoreLimitTest.Topic");
1:a0d2282: 
1:a0d2282:     protected TransportConnector connector;
1:a0d2282:     protected ActiveMQConnection connection;
1:a0d2282:     
1:a0d2282:     public void testDLQAfterBlockTopic() throws Exception {
1:a0d2282:         doTestDLQAfterBlock(topicDest);
1:a0d2282:     }
1:a0d2282:     
1:a0d2282:     public void testDLQAfterBlockQueue() throws Exception {
1:a0d2282:         doTestDLQAfterBlock(queueDest);
1:a0d2282:     }
1:a0d2282:     
1:a0d2282:     public void doTestDLQAfterBlock(ActiveMQDestination destination) throws Exception {
1:a0d2282:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:a0d2282:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:a0d2282:         // Immediately sent to the DLQ on rollback, no redelivery
1:a0d2282:         redeliveryPolicy.setMaximumRedeliveries(0);
1:a0d2282:         factory.setRedeliveryPolicy(redeliveryPolicy);
1:a0d2282:         
1:a0d2282:         // Separate connection for consumer so it will not be blocked by filler thread
1:a0d2282:         // sending when it blocks
1:a0d2282:         connection = (ActiveMQConnection)factory.createConnection();
1:a0d2282:         connections.add(connection);
1:a0d2282:         connection.setClientID("someId");
1:a0d2282:         connection.start();
1:a0d2282: 
1:a0d2282:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);      
1:a0d2282:         MessageConsumer consumer = destination.isQueue() ?
1:a0d2282:                     consumerSession.createConsumer(destination) :
1:a0d2282:                     consumerSession.createDurableSubscriber((Topic) destination, "Durable");
1:a0d2282:         
1:a0d2282:         connection = (ActiveMQConnection)factory.createConnection();
1:a0d2282:         connections.add(connection);
1:a0d2282:         connection.start();
1:a0d2282: 
1:a0d2282:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:a0d2282:         final MessageProducer producer = session.createProducer(destination);
1:a0d2282:         
1:a0d2282:         final AtomicBoolean done = new AtomicBoolean(true);
1:a0d2282:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:a0d2282:         final CountDownLatch fillerStarted = new CountDownLatch(1);
1:a0d2282: 
1:a0d2282:         final AtomicLong sent = new AtomicLong(0);
1:a0d2282:         Thread thread = new Thread("Filler") {
1:a0d2282:             int i;
1:a0d2282:             @Override
1:a0d2282:             public void run() {
1:a0d2282:                 while (keepGoing.get()) {
1:a0d2282:                     done.set(false);
1:a0d2282:                     fillerStarted.countDown();
1:a0d2282:                     try {
1:a0d2282:                         producer.send(session.createTextMessage(oneKb + ++i));
1:a0d2282:                         if (i%10 == 0) {
1:a0d2282:                             session.commit();
1:a0d2282:                             sent.getAndAdd(10);
1:a0d2282:                             LOG.info("committed/sent: " + sent.get());
1:a0d2282:                         }
1:a0d2282:                         LOG.info("sent: " + i);
1:a0d2282:                     } catch (JMSException e) {
1:a0d2282:                     }
1:a0d2282:                 }
1:a0d2282:             }
1:a0d2282:         };
1:a0d2282:         thread.start();
1:a0d2282: 		
1:a0d2282:         assertTrue("filler started..", fillerStarted.await(20, TimeUnit.SECONDS));
1:a0d2282:         waitForBlocked(done);
1:a0d2282: 
1:a0d2282:         // consume and rollback some so message gets to DLQ
1:a0d2282:         connection = (ActiveMQConnection)factory.createConnection();
1:a0d2282:         connections.add(connection);
1:a0d2282:         connection.start();
1:a0d2282:         TextMessage msg;
1:a0d2282:         int received = 0;
1:a0d2282:         for (;received < sent.get(); ++received) {
1:a0d2282:         	msg = (TextMessage) consumer.receive(4000);
1:a0d2282:         	if (msg == null) {
1:a0d2282:         	    LOG.info("received null on count: " + received);
1:a0d2282:         	    break;
1:a0d2282:         	}
1:a0d2282:         	LOG.info("received: " + received + ", msg: " + msg.getJMSMessageID());
1:a0d2282:         	if (received%5==0) {
1:a0d2282:         	    if (received%3==0) {
1:a0d2282:         	        // force the use of the DLQ which will use some more store
1:a0d2282:         	        LOG.info("rollback on : " + received);
1:a0d2282:         	        consumerSession.rollback();
1:a0d2282:         	    } else {
1:a0d2282:         	        LOG.info("commit on : " + received);
1:a0d2282:         	        consumerSession.commit();
1:a0d2282:         	    }
1:a0d2282:         	}
1:a0d2282:         }
1:a0d2282:         LOG.info("Done:: sent: " + sent.get() + ", received: " + received);
1:a0d2282:         keepGoing.set(false);
1:a0d2282:         assertTrue("some were sent:", sent.get() > 0);
1:a0d2282:         assertEquals("received what was committed", sent.get(), received);	
1:a0d2282:     }
1:a0d2282: 
1:a0d2282:     protected void waitForBlocked(final AtomicBoolean done)
1:a0d2282:             throws InterruptedException {
1:a0d2282:         while (true) {
1:a0d2282:             Thread.sleep(1000);
1:a0d2282:             // the producer is blocked once the done flag stays true
1:a0d2282:             if (done.get()) {
1:a6a6a70:                 LOG.info("Blocked....");
1:a0d2282:                 break;
1:a0d2282:             }
1:a0d2282:             done.set(true);
1:a0d2282:         }
1:a0d2282:     }
1:a0d2282: 
1:a0d2282:     protected BrokerService createBroker() throws Exception {
1:a0d2282:         BrokerService service = new BrokerService();
1:a0d2282:         service.setDeleteAllMessagesOnStartup(true);
1:a0d2282:         
1:a0d2282:         service.setUseJmx(false);
1:a0d2282: 
1:a0d2282:         service.getSystemUsage().getStoreUsage().setLimit(200*1024);
1:a0d2282:         
1:a0d2282:         // allow destination to use 50% of store, leaving 50% for DLQ.
1:a0d2282:         PolicyMap policyMap = new PolicyMap();
1:a0d2282:         PolicyEntry policy = new PolicyEntry();
1:a0d2282:         policy.setStoreUsageHighWaterMark(50);
1:a0d2282:         policyMap.put(queueDest, policy);
1:a0d2282:         policyMap.put(topicDest, policy);
1:a0d2282:         service.setDestinationPolicy(policyMap);
1:a0d2282: 
1:a0d2282:         connector = service.addConnector("tcp://localhost:0");
1:a0d2282:         return service;
1:a0d2282:     }
1:a0d2282: 
1:a0d2282:     public void setUp() throws Exception {
1:a0d2282:         setAutoFail(true);
1:a0d2282:         super.setUp();
1:a0d2282:     }
1:a0d2282:     
1:a0d2282:     protected void tearDown() throws Exception {
1:a0d2282:         if (connection != null) {
1:a0d2282:             TcpTransport t = (TcpTransport)connection.getTransport().narrow(TcpTransport.class);
1:a0d2282:             t.getTransportListener().onException(new IOException("Disposed."));
1:a0d2282:             connection.getTransport().stop();
1:a0d2282:             super.tearDown();
1:a0d2282:         }
1:a0d2282:     }
1:a0d2282: 
1:a0d2282:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:a0d2282:         return new ActiveMQConnectionFactory(connector.getConnectUri());
1:a0d2282:     }
1:a0d2282: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(PerDestinationStoreLimitTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Blocked....");
commit:a0d2282
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: // see: https://issues.apache.org/activemq/browse/AMQ-2668
1: public class PerDestinationStoreLimitTest extends JmsTestSupport {
0:     static final Log LOG = LogFactory.getLog(PerDestinationStoreLimitTest.class);
1:     final String oneKb = new String(new byte[1024]);
1:     
1:     ActiveMQDestination queueDest = new ActiveMQQueue("PerDestinationStoreLimitTest.Queue");
1:     ActiveMQDestination topicDest = new ActiveMQTopic("PerDestinationStoreLimitTest.Topic");
1: 
1:     protected TransportConnector connector;
1:     protected ActiveMQConnection connection;
1:     
1:     public void testDLQAfterBlockTopic() throws Exception {
1:         doTestDLQAfterBlock(topicDest);
1:     }
1:     
1:     public void testDLQAfterBlockQueue() throws Exception {
1:         doTestDLQAfterBlock(queueDest);
1:     }
1:     
1:     public void doTestDLQAfterBlock(ActiveMQDestination destination) throws Exception {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:         // Immediately sent to the DLQ on rollback, no redelivery
1:         redeliveryPolicy.setMaximumRedeliveries(0);
1:         factory.setRedeliveryPolicy(redeliveryPolicy);
1:         
1:         // Separate connection for consumer so it will not be blocked by filler thread
1:         // sending when it blocks
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.setClientID("someId");
1:         connection.start();
1: 
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);      
1:         MessageConsumer consumer = destination.isQueue() ?
1:                     consumerSession.createConsumer(destination) :
1:                     consumerSession.createDurableSubscriber((Topic) destination, "Durable");
1:         
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         final MessageProducer producer = session.createProducer(destination);
1:         
1:         final AtomicBoolean done = new AtomicBoolean(true);
1:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:         final CountDownLatch fillerStarted = new CountDownLatch(1);
1: 
1:         final AtomicLong sent = new AtomicLong(0);
1:         Thread thread = new Thread("Filler") {
1:             int i;
1:             @Override
1:             public void run() {
1:                 while (keepGoing.get()) {
1:                     done.set(false);
1:                     fillerStarted.countDown();
1:                     try {
1:                         producer.send(session.createTextMessage(oneKb + ++i));
1:                         if (i%10 == 0) {
1:                             session.commit();
1:                             sent.getAndAdd(10);
1:                             LOG.info("committed/sent: " + sent.get());
1:                         }
1:                         LOG.info("sent: " + i);
1:                     } catch (JMSException e) {
1:                     }
1:                 }
1:             }
1:         };
1:         thread.start();
1: 		
1:         assertTrue("filler started..", fillerStarted.await(20, TimeUnit.SECONDS));
1:         waitForBlocked(done);
1: 
1:         // consume and rollback some so message gets to DLQ
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1:         TextMessage msg;
1:         int received = 0;
1:         for (;received < sent.get(); ++received) {
1:         	msg = (TextMessage) consumer.receive(4000);
1:         	if (msg == null) {
1:         	    LOG.info("received null on count: " + received);
1:         	    break;
1:         	}
1:         	LOG.info("received: " + received + ", msg: " + msg.getJMSMessageID());
1:         	if (received%5==0) {
1:         	    if (received%3==0) {
1:         	        // force the use of the DLQ which will use some more store
1:         	        LOG.info("rollback on : " + received);
1:         	        consumerSession.rollback();
1:         	    } else {
1:         	        LOG.info("commit on : " + received);
1:         	        consumerSession.commit();
1:         	    }
1:         	}
1:         }
1:         LOG.info("Done:: sent: " + sent.get() + ", received: " + received);
1:         keepGoing.set(false);
1:         assertTrue("some were sent:", sent.get() > 0);
1:         assertEquals("received what was committed", sent.get(), received);	
1:     }
1: 
1:     protected void waitForBlocked(final AtomicBoolean done)
1:             throws InterruptedException {
1:         while (true) {
1:             Thread.sleep(1000);
1:             // the producer is blocked once the done flag stays true
1:             if (done.get()) {
1:                 break;
1:             }
1:             done.set(true);
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setDeleteAllMessagesOnStartup(true);
1:         
1:         service.setUseJmx(false);
1: 
1:         service.getSystemUsage().getStoreUsage().setLimit(200*1024);
1:         
1:         // allow destination to use 50% of store, leaving 50% for DLQ.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setStoreUsageHighWaterMark(50);
1:         policyMap.put(queueDest, policy);
1:         policyMap.put(topicDest, policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1:     }
1: 
1:     public void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             TcpTransport t = (TcpTransport)connection.getTransport().narrow(TcpTransport.class);
1:             t.getTransportListener().onException(new IOException("Disposed."));
1:             connection.getTransport().stop();
1:             super.tearDown();
1:         }
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connector.getConnectUri());
1:     }
1: }
============================================================================