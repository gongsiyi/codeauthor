1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:230a86c: 
1:d29ca2a: import java.util.List;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:230a86c: 
1:c14dc3a: public interface MessageDispatchChannel {
8:d29ca2a: 
1:c14dc3a:     public abstract void enqueue(MessageDispatch message);
1:d29ca2a: 
1:c14dc3a:     public abstract void enqueueFirst(MessageDispatch message);
1:d29ca2a: 
1:c14dc3a:     public abstract boolean isEmpty();
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Used to get an enqueued message. The amount of time this method blocks is
1:230a86c:      * based on the timeout value. - if timeout==-1 then it blocks until a
1:230a86c:      * message is received. - if timeout==0 then it it tries to not block at
1:230a86c:      * all, it returns a message if it is available - if timeout>0 then it
1:230a86c:      * blocks up to timeout amount of time. Expired messages will consumed by
1:230a86c:      * this method.
1:d29ca2a:      * 
1:230a86c:      * @throws JMSException
1:d29ca2a:      * @return null if we timeout or if the consumer is closed.
1:230a86c:      * @throws InterruptedException
1:d29ca2a:      */
1:c14dc3a:     public abstract MessageDispatch dequeue(long timeout) throws InterruptedException;
1:d29ca2a: 
1:c14dc3a:     public abstract MessageDispatch dequeueNoWait();
1:d29ca2a: 
1:c14dc3a:     public abstract MessageDispatch peek();
1:d29ca2a: 
1:c14dc3a:     public abstract void start();
1:d29ca2a: 
1:c14dc3a:     public abstract void stop();
1:d29ca2a: 
1:c14dc3a:     public abstract void close();
1:d29ca2a: 
1:c14dc3a:     public abstract void clear();
1:d29ca2a: 
1:c14dc3a:     public abstract boolean isClosed();
1:d29ca2a: 
1:c14dc3a:     public abstract int size();
1:d29ca2a: 
1:c14dc3a:     public abstract Object getMutex();
1:d29ca2a: 
1:c14dc3a:     public abstract boolean isRunning();
1:d29ca2a: 
1:c14dc3a:     public abstract List<MessageDispatch> removeAll();
1:d29ca2a: 
1:80f5e0c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:         synchronized (mutex) {
0:         synchronized (mutex) {
0:         synchronized (mutex) {
1:      * Used to get an enqueued message. The amount of time this method blocks is
1:      * based on the timeout value. - if timeout==-1 then it blocks until a
1:      * message is received. - if timeout==0 then it it tries to not block at
1:      * all, it returns a message if it is available - if timeout>0 then it
1:      * blocks up to timeout amount of time. Expired messages will consumed by
1:      * this method.
1:      * @throws JMSException
1:      * @throws InterruptedException
0:             while (timeout != 0 && !closed && (list.isEmpty() || !running)) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         synchronized (mutex) {
/////////////////////////////////////////////////////////////////////////
0:         synchronized (mutex) {
/////////////////////////////////////////////////////////////////////////
0:         synchronized (mutex) {
0:             ArrayList<MessageDispatch> rc = new ArrayList<MessageDispatch>(list);
0:         synchronized (mutex) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:80f5e0c
/////////////////////////////////////////////////////////////////////////
0:     public String toString() {
0:         return list.toString();
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.util.ArrayList;
0: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.MessageDispatch;
1: 
0: public class MessageDispatchChannel {
1: 
0:     private final Object mutex = new Object();
0:     private final LinkedList list;
0:     private boolean closed;
0:     private boolean running;
1: 
0:     public MessageDispatchChannel() {
0:         this.list = new LinkedList();
0:     }
1: 
0:     public void enqueue(MessageDispatch message) {
0:         synchronized(mutex) {
0:             list.addLast(message);
0:             mutex.notify();
0:         }
0:     }
1: 
0:     public void enqueueFirst(MessageDispatch message) {
0:         synchronized(mutex) {
0:             list.addFirst(message);
0:             mutex.notify();
0:         }
0:     }
1: 
0:     public boolean isEmpty() {
0:         synchronized(mutex) {
0:             return list.isEmpty();
0:         }
0:     }
1: 
1:     /**
0:      * Used to get an enqueued message. 
0:      * The amount of time this method blocks is based on the timeout value. 
0:      * - if timeout==-1 then it blocks until a message is received. 
0:      * - if timeout==0 then it it tries to not block at all, it returns a message if it is available 
0:      * - if timeout>0 then it blocks up to timeout amount of time.
1:      * 
0:      * Expired messages will consumed by this method.  
1:      * 
0:      * @throws JMSException 
1:      * 
1:      * @return null if we timeout or if the consumer is closed.
0:      * @throws InterruptedException 
1:      */
0:     public MessageDispatch dequeue(long timeout) throws InterruptedException {
0:         synchronized (mutex) {
0:             // Wait until the consumer is ready to deliver messages.
0:             while(timeout != 0 && !closed && (list.isEmpty() || !running)) {
0:                 if (timeout == -1) {
0:                     mutex.wait();
0:                 } else {
0:                     mutex.wait(timeout);
0:                     break;
0:                 }
0:             }
0:             if (closed || !running || list.isEmpty()) {
0:                 return null;
0:             }
0:             return (MessageDispatch) list.removeFirst();
0:         }
0:     }
1:     
0:     public MessageDispatch dequeueNoWait() {
0:         synchronized (mutex) {
0:             if (closed || !running || list.isEmpty()) {
0:                 return null;
0:             }
0:             return (MessageDispatch) list.removeFirst();
0:         }
0:     }
1:     
0:     public MessageDispatch peek() {
0:         synchronized (mutex) {
0:             if (closed || !running || list.isEmpty()) {
0:                 return null;
0:             }
0:             return (MessageDispatch) list.getFirst();
0:         }
0:     }
1: 
0:     public void start() {
0:         synchronized (mutex) {
0:             running = true;
0:             mutex.notifyAll();
0:         }
0:     }
1: 
0:     public void stop() {
0:         synchronized (mutex) {
0:             running = false;
0:             mutex.notifyAll();
0:         }
0:     }
1: 
0:     public void close() {
0:         synchronized (mutex) {
0:             if (!closed) {
0:                 running = false;
0:                 closed = true;
0:             }
0:             mutex.notifyAll();
0:         }
0:     }
1: 
0:     public void clear() {
0:         synchronized(mutex) {
0:             list.clear();
0:         }
0:     }
1: 
0:     public boolean isClosed() {
0:         return closed;
0:     }
1: 
0:     public int size() {
0:         synchronized(mutex) {
0:             return list.size();
0:         }
0:     }
1: 
0:     public Object getMutex() {
0:         return mutex;
0:     }
1: 
0:     public boolean isRunning() {
0:         return running;
0:     }
1: 
0:     public List removeAll() {
0:         synchronized(mutex) {
0:             ArrayList rc = new ArrayList(list);
0:             list.clear();
0:             return rc;
0:         }
0:     }
1: 
1: 
0: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:c14dc3a
/////////////////////////////////////////////////////////////////////////
1: public interface MessageDispatchChannel {
1:     public abstract void enqueue(MessageDispatch message);
1:     public abstract void enqueueFirst(MessageDispatch message);
1:     public abstract boolean isEmpty();
/////////////////////////////////////////////////////////////////////////
1:     public abstract MessageDispatch dequeue(long timeout) throws InterruptedException;
1:     public abstract MessageDispatch dequeueNoWait();
1:     public abstract MessageDispatch peek();
1:     public abstract void start();
1:     public abstract void stop();
1:     public abstract void close();
1:     public abstract void clear();
1:     public abstract boolean isClosed();
1:     public abstract int size();
1:     public abstract Object getMutex();
1:     public abstract boolean isRunning();
1:     public abstract List<MessageDispatch> removeAll();
0: }
commit:cbaa58b
/////////////////////////////////////////////////////////////////////////
0:     private final LinkedList<MessageDispatch> list;
0:         this.list = new LinkedList<MessageDispatch>();
/////////////////////////////////////////////////////////////////////////
0:             return list.removeFirst();
/////////////////////////////////////////////////////////////////////////
0:             return list.removeFirst();
/////////////////////////////////////////////////////////////////////////
0:             return list.getFirst();
/////////////////////////////////////////////////////////////////////////
0:     public List<MessageDispatch> removeAll() {
0:             ArrayList <MessageDispatch>rc = new ArrayList<MessageDispatch>(list);
author:James Strachan
-------------------------------------------------------------------------------
commit:6e3a634
/////////////////////////////////////////////////////////////////////////
0:         synchronized(mutex) {
0:             return list.toString();
0:         }
============================================================================