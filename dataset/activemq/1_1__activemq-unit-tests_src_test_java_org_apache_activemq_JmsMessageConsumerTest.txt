1:642cc43: /**
1:642cc43:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:642cc43:  * contributor license agreements.  See the NOTICE file distributed with
1:642cc43:  * this work for additional information regarding copyright ownership.
1:642cc43:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:642cc43:  * (the "License"); you may not use this file except in compliance with
1:642cc43:  * the License.  You may obtain a copy of the License at
1:642cc43:  *
1:642cc43:  *      http://www.apache.org/licenses/LICENSE-2.0
1:642cc43:  *
1:642cc43:  * Unless required by applicable law or agreed to in writing, software
1:642cc43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:642cc43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:642cc43:  * See the License for the specific language governing permissions and
1:642cc43:  * limitations under the License.
1:642cc43:  */
1:642cc43: package org.apache.activemq;
1:642cc43: 
1:642cc43: import static org.junit.Assert.assertFalse;
1:642cc43: import static org.junit.Assert.assertNotNull;
1:642cc43: import static org.junit.Assert.assertNull;
1:642cc43: import static org.junit.Assert.assertTrue;
1:642cc43: 
1:642cc43: import java.util.concurrent.CountDownLatch;
1:642cc43: import java.util.concurrent.TimeUnit;
1:642cc43: 
1:642cc43: import javax.jms.Connection;
1:642cc43: import javax.jms.Destination;
1:642cc43: import javax.jms.Message;
1:642cc43: import javax.jms.MessageConsumer;
1:642cc43: import javax.jms.MessageListener;
1:642cc43: import javax.jms.MessageProducer;
1:642cc43: import javax.jms.Session;
1:642cc43: 
1:642cc43: import org.apache.activemq.broker.BrokerService;
1:642cc43: import org.junit.After;
1:642cc43: import org.junit.Before;
1:642cc43: import org.junit.Rule;
1:642cc43: import org.junit.Test;
1:642cc43: import org.junit.rules.TestName;
1:642cc43: 
1:642cc43: public class JmsMessageConsumerTest {
1:642cc43: 
1:642cc43:     private BrokerService brokerService;
1:642cc43:     private String brokerURI;
1:642cc43: 
1:642cc43:     @Rule public TestName name = new TestName();
1:642cc43: 
1:642cc43:     @Before
1:642cc43:     public void startBroker() throws Exception {
1:642cc43:         brokerService = new BrokerService();
1:642cc43:         brokerService.setPersistent(false);
1:642cc43:         brokerService.setUseJmx(false);
1:642cc43:         brokerService.start();
1:642cc43:         brokerService.waitUntilStarted();
1:642cc43: 
1:642cc43:         brokerURI = "vm://localhost?create=false";
1:642cc43:     }
1:642cc43: 
1:642cc43:     @After
1:642cc43:     public void stopBroker() throws Exception {
1:642cc43:         if (brokerService != null) {
1:642cc43:             brokerService.stop();
1:642cc43:         }
1:642cc43:     }
1:642cc43: 
1:642cc43:     @Test
1:642cc43:     public void testSyncReceiveWithExpirationChecks() throws Exception {
1:642cc43:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:642cc43: 
1:642cc43:         Connection connection = factory.createConnection();
1:642cc43:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:642cc43:         Destination destination = session.createQueue(name.getMethodName());
1:642cc43:         MessageConsumer consumer = session.createConsumer(destination);
1:642cc43:         MessageProducer producer = session.createProducer(destination);
1:642cc43:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:642cc43:         connection.start();
1:642cc43: 
1:642cc43:         producer.send(session.createTextMessage("test"));
1:642cc43: 
1:642cc43:         // Allow message to expire in the prefetch buffer
1:642cc43:         TimeUnit.SECONDS.sleep(4);
1:642cc43: 
1:642cc43:         assertNull(consumer.receive(1000));
1:642cc43:         connection.close();
1:642cc43:     }
1:642cc43: 
1:642cc43:     @Test
1:642cc43:     public void testSyncReceiveWithIgnoreExpirationChecks() throws Exception {
1:642cc43:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:642cc43:         factory.setConsumerExpiryCheckEnabled(false);
1:642cc43: 
1:642cc43:         Connection connection = factory.createConnection();
1:642cc43:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:642cc43:         Destination destination = session.createQueue(name.getMethodName());
1:642cc43:         MessageConsumer consumer = session.createConsumer(destination);
1:642cc43:         MessageProducer producer = session.createProducer(destination);
1:642cc43:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:642cc43:         connection.start();
1:642cc43: 
1:642cc43:         producer.send(session.createTextMessage("test"));
1:642cc43: 
1:642cc43:         // Allow message to expire in the prefetch buffer
1:642cc43:         TimeUnit.SECONDS.sleep(4);
1:642cc43: 
1:642cc43:         assertNotNull(consumer.receive(1000));
1:642cc43:         connection.close();
1:642cc43:     }
1:642cc43: 
1:642cc43:     @Test
1:642cc43:     public void testAsyncReceiveWithExpirationChecks() throws Exception {
1:642cc43:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:642cc43: 
1:642cc43:         final CountDownLatch received = new CountDownLatch(1);
1:642cc43: 
1:642cc43:         Connection connection = factory.createConnection();
1:642cc43:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:642cc43:         Destination destination = session.createQueue(name.getMethodName());
1:642cc43:         MessageConsumer consumer = session.createConsumer(destination);
1:642cc43:         consumer.setMessageListener(new MessageListener() {
1:642cc43: 
1:642cc43:             @Override
1:642cc43:             public void onMessage(Message message) {
1:642cc43:                 received.countDown();
1:642cc43:             }
1:642cc43:         });
1:642cc43:         MessageProducer producer = session.createProducer(destination);
1:642cc43:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:642cc43: 
1:642cc43:         producer.send(session.createTextMessage("test"));
1:642cc43: 
1:642cc43:         // Allow message to expire in the prefetch buffer
1:642cc43:         TimeUnit.SECONDS.sleep(4);
1:642cc43:         connection.start();
1:642cc43: 
1:642cc43:         assertFalse(received.await(1, TimeUnit.SECONDS));
1:642cc43:         connection.close();
1:642cc43:     }
1:642cc43: 
1:642cc43:     @Test
1:642cc43:     public void testAsyncReceiveWithoutExpirationChecks() throws Exception {
1:642cc43:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:642cc43:         factory.setConsumerExpiryCheckEnabled(false);
1:642cc43: 
1:642cc43:         final CountDownLatch received = new CountDownLatch(1);
1:642cc43: 
1:642cc43:         Connection connection = factory.createConnection();
1:642cc43:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:642cc43:         Destination destination = session.createQueue(name.getMethodName());
1:642cc43:         MessageConsumer consumer = session.createConsumer(destination);
1:642cc43:         consumer.setMessageListener(new MessageListener() {
1:642cc43: 
1:642cc43:             @Override
1:642cc43:             public void onMessage(Message message) {
1:642cc43:                 received.countDown();
1:642cc43:             }
1:642cc43:         });
1:642cc43:         MessageProducer producer = session.createProducer(destination);
1:642cc43:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:642cc43: 
1:642cc43:         producer.send(session.createTextMessage("test"));
1:642cc43: 
1:642cc43:         // Allow message to expire in the prefetch buffer
1:642cc43:         TimeUnit.SECONDS.sleep(4);
1:642cc43:         connection.start();
1:642cc43: 
1:642cc43:         assertTrue(received.await(5, TimeUnit.SECONDS));
1:642cc43:         connection.close();
1:642cc43:     }
1:642cc43: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:642cc43
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class JmsMessageConsumerTest {
1: 
1:     private BrokerService brokerService;
1:     private String brokerURI;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         brokerURI = "vm://localhost?create=false";
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testSyncReceiveWithExpirationChecks() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1: 
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:         connection.start();
1: 
1:         producer.send(session.createTextMessage("test"));
1: 
1:         // Allow message to expire in the prefetch buffer
1:         TimeUnit.SECONDS.sleep(4);
1: 
1:         assertNull(consumer.receive(1000));
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testSyncReceiveWithIgnoreExpirationChecks() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:         factory.setConsumerExpiryCheckEnabled(false);
1: 
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1:         connection.start();
1: 
1:         producer.send(session.createTextMessage("test"));
1: 
1:         // Allow message to expire in the prefetch buffer
1:         TimeUnit.SECONDS.sleep(4);
1: 
1:         assertNotNull(consumer.receive(1000));
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testAsyncReceiveWithExpirationChecks() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1: 
1:         final CountDownLatch received = new CountDownLatch(1);
1: 
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 received.countDown();
1:             }
1:         });
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1: 
1:         producer.send(session.createTextMessage("test"));
1: 
1:         // Allow message to expire in the prefetch buffer
1:         TimeUnit.SECONDS.sleep(4);
1:         connection.start();
1: 
1:         assertFalse(received.await(1, TimeUnit.SECONDS));
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testAsyncReceiveWithoutExpirationChecks() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:         factory.setConsumerExpiryCheckEnabled(false);
1: 
1:         final CountDownLatch received = new CountDownLatch(1);
1: 
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 received.countDown();
1:             }
1:         });
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(2));
1: 
1:         producer.send(session.createTextMessage("test"));
1: 
1:         // Allow message to expire in the prefetch buffer
1:         TimeUnit.SECONDS.sleep(4);
1:         connection.start();
1: 
1:         assertTrue(received.await(5, TimeUnit.SECONDS));
1:         connection.close();
1:     }
1: }
============================================================================