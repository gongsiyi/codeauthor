1:5ab78c1: /**
1:5ab78c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ab78c1:  * contributor license agreements.  See the NOTICE file distributed with
1:5ab78c1:  * this work for additional information regarding copyright ownership.
1:5ab78c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ab78c1:  * (the "License"); you may not use this file except in compliance with
1:5ab78c1:  * the License.  You may obtain a copy of the License at
1:5ab78c1:  *
1:5ab78c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5ab78c1:  *
1:5ab78c1:  * Unless required by applicable law or agreed to in writing, software
1:5ab78c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ab78c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ab78c1:  * See the License for the specific language governing permissions and
1:5ab78c1:  * limitations under the License.
1:5ab78c1:  */
3:5ab78c1: 
1:5ab78c1: package org.apache.activemq.util.oxm;
1:5ab78c1: 
1:5ab78c1: import java.io.Serializable;
1:5ab78c1: import javax.jms.JMSException;
1:5ab78c1: import javax.jms.Message;
1:5ab78c1: import javax.jms.MessageConsumer;
1:5ab78c1: import javax.jms.MessageProducer;
1:5ab78c1: import javax.jms.ObjectMessage;
1:5ab78c1: import javax.jms.Session;
1:5ab78c1: import javax.jms.TextMessage;
1:5ab78c1: 
1:5ab78c1: import org.apache.activemq.MessageTransformerSupport;
1:5ab78c1: 
1:5ab78c1: /**
1:5ab78c1:  * Abstract class used as a base for implementing transformers from object to text messages (in XML/JSON format)
1:5ab78c1:  * and vice versa using.
1:5ab78c1:  * Supports plugging of custom marshallers
1:5ab78c1:  */
1:5ab78c1: public abstract class AbstractXMLMessageTransformer extends
1:5ab78c1: 		MessageTransformerSupport {
1:5ab78c1: 
1:5ab78c1:     protected MessageTransform transformType;
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Defines the type of transformation. If XML (default), - producer
1:5ab78c1:      * transformation transforms from Object to XML. - consumer transformation
1:5ab78c1:      * transforms from XML to Object. If OBJECT, - producer transformation
1:5ab78c1:      * transforms from XML to Object. - consumer transformation transforms from
1:5ab78c1:      * Object to XML. If ADAPTIVE, - producer transformation transforms from
1:5ab78c1:      * Object to XML, or XML to Object depending on the type of the original
1:5ab78c1:      * message - consumer transformation transforms from XML to Object, or
1:5ab78c1:      * Object to XML depending on the type of the original message
1:5ab78c1:      */
1:5ab78c1:     public enum MessageTransform {
1:5ab78c1:         XML, OBJECT, ADAPTIVE
1:5ab78c1:     };
1:5ab78c1: 
1:5ab78c1: 
1:5ab78c1:     public AbstractXMLMessageTransformer() {
1:5ab78c1:         this(MessageTransform.XML);
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public AbstractXMLMessageTransformer(MessageTransform transformType) {
1:5ab78c1:         this.transformType = transformType;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public Message consumerTransform(Session session, MessageConsumer consumer, Message message) throws JMSException {
1:5ab78c1:         switch (transformType) {
1:5ab78c1:         case XML:
1:5ab78c1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : message;
1:5ab78c1:         case OBJECT:
1:5ab78c1:             return (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:5ab78c1:         case ADAPTIVE:
1:5ab78c1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:5ab78c1:         default:
1:5ab78c1:         }
1:5ab78c1:         return message;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public Message producerTransform(Session session, MessageProducer producer, Message message) throws JMSException {
1:5ab78c1:         switch (transformType) {
1:5ab78c1:         case XML:
1:5ab78c1:             return (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:5ab78c1:         case OBJECT:
1:5ab78c1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : message;
1:5ab78c1:         case ADAPTIVE:
1:5ab78c1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:5ab78c1:         default:
1:5ab78c1:         }
1:5ab78c1:         return message;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public MessageTransform getTransformType() {
1:5ab78c1:         return transformType;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public void setTransformType(MessageTransform transformType) {
1:5ab78c1:         this.transformType = transformType;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Transforms an incoming XML encoded {@link TextMessage} to an
1:5ab78c1:      * {@link ObjectMessage}
1:5ab78c1:      * 
1:5ab78c1:      * @param session - JMS session currently being used
1:5ab78c1:      * @param textMessage - text message to transform to object message
1:5ab78c1:      * @return ObjectMessage
1:5ab78c1:      * @throws JMSException
1:5ab78c1:      */
1:5ab78c1:     protected ObjectMessage textToObject(Session session, TextMessage textMessage) throws JMSException {
1:5ab78c1:         Object object = unmarshall(session, textMessage);
1:5ab78c1:         if (object instanceof Serializable) {
1:5ab78c1:             ObjectMessage answer = session.createObjectMessage((Serializable)object);
1:5ab78c1:             copyProperties(textMessage, answer);
1:5ab78c1:             return answer;
1:5ab78c1:         } else {
1:5ab78c1:             throw new JMSException("Object is not serializable: " + object);
1:5ab78c1:         }
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Transforms an incoming {@link ObjectMessage} to an XML encoded
1:5ab78c1:      * {@link TextMessage}
1:5ab78c1:      * 
1:5ab78c1:      * @param session - JMS session currently being used
1:5ab78c1:      * @param objectMessage - object message to transform to text message
1:5ab78c1:      * @return XML encoded TextMessage
1:5ab78c1:      * @throws JMSException
1:5ab78c1:      */
1:5ab78c1:     protected TextMessage objectToText(Session session, ObjectMessage objectMessage) throws JMSException {
1:5ab78c1:         TextMessage answer = session.createTextMessage(marshall(session, objectMessage));
1:5ab78c1:         copyProperties(objectMessage, answer);
1:5ab78c1:         return answer;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:5ab78c1:      * encoding
1:5ab78c1:      */
1:5ab78c1:     protected abstract String marshall(Session session, ObjectMessage objectMessage) throws JMSException;
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:5ab78c1:      * Object
1:5ab78c1:      */
1:5ab78c1:     protected abstract Object unmarshall(Session session, TextMessage textMessage) throws JMSException;
1:5ab78c1: 
1:5ab78c1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5ab78c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util.oxm;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.MessageTransformerSupport;
1: 
0: import com.thoughtworks.xstream.XStream;
0: import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
1: 
1: /**
1:  * Abstract class used as a base for implementing transformers from object to text messages (in XML/JSON format)
1:  * and vice versa using.
1:  * Supports plugging of custom marshallers
1:  */
1: public abstract class AbstractXMLMessageTransformer extends
1: 		MessageTransformerSupport {
1: 
1:     protected MessageTransform transformType;
1: 
1:     /**
1:      * Defines the type of transformation. If XML (default), - producer
1:      * transformation transforms from Object to XML. - consumer transformation
1:      * transforms from XML to Object. If OBJECT, - producer transformation
1:      * transforms from XML to Object. - consumer transformation transforms from
1:      * Object to XML. If ADAPTIVE, - producer transformation transforms from
1:      * Object to XML, or XML to Object depending on the type of the original
1:      * message - consumer transformation transforms from XML to Object, or
1:      * Object to XML depending on the type of the original message
1:      */
1:     public enum MessageTransform {
1:         XML, OBJECT, ADAPTIVE
1:     };
1: 
1: 
1:     public AbstractXMLMessageTransformer() {
1:         this(MessageTransform.XML);
1:     }
1: 
1:     public AbstractXMLMessageTransformer(MessageTransform transformType) {
1:         this.transformType = transformType;
1:     }
1: 
1:     public Message consumerTransform(Session session, MessageConsumer consumer, Message message) throws JMSException {
1:         switch (transformType) {
1:         case XML:
1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : message;
1:         case OBJECT:
1:             return (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:         case ADAPTIVE:
1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:         default:
1:         }
1:         return message;
1:     }
1: 
1:     public Message producerTransform(Session session, MessageProducer producer, Message message) throws JMSException {
1:         switch (transformType) {
1:         case XML:
1:             return (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:         case OBJECT:
1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : message;
1:         case ADAPTIVE:
1:             return (message instanceof TextMessage) ? textToObject(session, (TextMessage)message) : (message instanceof ObjectMessage) ? objectToText(session, (ObjectMessage)message) : message;
1:         default:
1:         }
1:         return message;
1:     }
1: 
1:     public MessageTransform getTransformType() {
1:         return transformType;
1:     }
1: 
1:     public void setTransformType(MessageTransform transformType) {
1:         this.transformType = transformType;
1:     }
1: 
1:     /**
1:      * Transforms an incoming XML encoded {@link TextMessage} to an
1:      * {@link ObjectMessage}
1:      * 
1:      * @param session - JMS session currently being used
1:      * @param textMessage - text message to transform to object message
1:      * @return ObjectMessage
1:      * @throws JMSException
1:      */
1:     protected ObjectMessage textToObject(Session session, TextMessage textMessage) throws JMSException {
1:         Object object = unmarshall(session, textMessage);
1:         if (object instanceof Serializable) {
1:             ObjectMessage answer = session.createObjectMessage((Serializable)object);
1:             copyProperties(textMessage, answer);
1:             return answer;
1:         } else {
1:             throw new JMSException("Object is not serializable: " + object);
1:         }
1:     }
1: 
1:     /**
1:      * Transforms an incoming {@link ObjectMessage} to an XML encoded
1:      * {@link TextMessage}
1:      * 
1:      * @param session - JMS session currently being used
1:      * @param objectMessage - object message to transform to text message
1:      * @return XML encoded TextMessage
1:      * @throws JMSException
1:      */
1:     protected TextMessage objectToText(Session session, ObjectMessage objectMessage) throws JMSException {
1:         TextMessage answer = session.createTextMessage(marshall(session, objectMessage));
1:         copyProperties(objectMessage, answer);
1:         return answer;
1:     }
1: 
1:     /**
1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:      * encoding
1:      */
1:     protected abstract String marshall(Session session, ObjectMessage objectMessage) throws JMSException;
1: 
1:     /**
1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:      * Object
1:      */
1:     protected abstract Object unmarshall(Session session, TextMessage textMessage) throws JMSException;
1: 
1: }
============================================================================