1:13bbe52: /**
1:13bbe52:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:13bbe52:  * contributor license agreements.  See the NOTICE file distributed with
1:13bbe52:  * this work for additional information regarding copyright ownership.
1:13bbe52:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:13bbe52:  * (the "License"); you may not use this file except in compliance with
1:13bbe52:  * the License.  You may obtain a copy of the License at
1:13bbe52:  *
1:13bbe52:  *      http://www.apache.org/licenses/LICENSE-2.0
1:13bbe52:  *
1:13bbe52:  * Unless required by applicable law or agreed to in writing, software
1:13bbe52:  * distributed under the License is distributed on an "AS IS" BASIS,
1:13bbe52:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:13bbe52:  * See the License for the specific language governing permissions and
1:13bbe52:  * limitations under the License.
1:13bbe52:  */
1:13bbe52: package org.apache.activemq.bugs;
7:13bbe52: 
1:13bbe52: import java.io.IOException;
1:13bbe52: import java.sql.SQLException;
1:7a0168a: import java.util.concurrent.CountDownLatch;
1:13bbe52: import javax.jms.Connection;
1:13bbe52: import javax.jms.DeliveryMode;
1:13bbe52: import javax.jms.Destination;
1:13bbe52: import javax.jms.JMSException;
1:13bbe52: import javax.jms.Message;
1:13bbe52: import javax.jms.MessageProducer;
1:13bbe52: import javax.jms.Session;
1:13bbe52: import javax.jms.Topic;
1:13bbe52: import javax.jms.TopicSubscriber;
1:13bbe52: import org.apache.activemq.ActiveMQConnectionFactory;
1:13bbe52: import org.apache.activemq.broker.BrokerService;
1:7a0168a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7a0168a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:13bbe52: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:13bbe52: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:13bbe52: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1:13bbe52: import org.apache.activemq.store.jdbc.TransactionContext;
1:13bbe52: import org.apache.activemq.util.IOHelper;
1:e16815a: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1:13bbe52: import org.apache.derby.jdbc.EmbeddedDataSource;
1:7a0168a: import org.junit.After;
1:7a0168a: import org.junit.Before;
1:7a0168a: import org.junit.Test;
1:13bbe52: import org.slf4j.Logger;
1:13bbe52: import org.slf4j.LoggerFactory;
1:7a0168a: import static org.junit.Assert.fail;
1:13bbe52: 
1:13bbe52: /**
1:13bbe52:  * Testing how the broker reacts when a SQL Exception is thrown from
1:13bbe52:  * org.apache.activemq.store.jdbc.TransactionContext.executeBatch().
1:13bbe52:  * <p/>
1:13bbe52:  * see https://issues.apache.org/jira/browse/AMQ-4636
1:13bbe52:  */
1:7a0168a: public class AMQ4636Test {
1:13bbe52: 
1:13bbe52:     private static final String MY_TEST_TOPIC = "MY_TEST_TOPIC";
1:13bbe52:     private static final Logger LOG = LoggerFactory
1:13bbe52:             .getLogger(AMQ4636Test.class);
1:13bbe52:     private String transportUrl = "tcp://0.0.0.0:0";
1:13bbe52:     private BrokerService broker;
1:7a0168a:     EmbeddedDataSource embeddedDataSource;
1:7a0168a:     CountDownLatch throwSQLException = new CountDownLatch(0);
1:13bbe52: 
1:7a0168a:     @Before
1:7a0168a:     public void startBroker() throws Exception {
1:7a0168a:         broker = createBroker();
1:7a0168a:         broker.deleteAllMessages();
1:7a0168a:         broker.start();
1:7a0168a:         broker.waitUntilStarted();
1:7a0168a:         LOG.info("Broker started...");
1:7a0168a:     }
1:13bbe52: 
1:7a0168a:     @After
1:7a0168a:     public void stopBroker() throws Exception {
1:7a0168a:         if (broker != null) {
1:7a0168a:             LOG.info("Stopping broker...");
1:7a0168a:             broker.stop();
1:7a0168a:             broker.waitUntilStopped();
1:7a0168a:         }
1:165959e:         if (embeddedDataSource != null) {
1:165959e:             DataSourceServiceSupport.shutdownDefaultDataSource(embeddedDataSource);
1:7a0168a:         }
1:7a0168a:     }
1:13bbe52: 
1:7a0168a:     protected BrokerService createBroker() throws Exception {
1:7a0168a: 
1:7a0168a:         embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:13bbe52:         embeddedDataSource.setCreateDatabase("create");
1:7a0168a:         embeddedDataSource.getConnection().close();
1:13bbe52: 
1:13bbe52:         //wire in a TestTransactionContext (wrapper to TransactionContext) that has an executeBatch()
1:13bbe52:         // method that can be configured to throw a SQL exception on demand
1:13bbe52:         JDBCPersistenceAdapter jdbc = new TestJDBCPersistenceAdapter();
1:13bbe52:         jdbc.setDataSource(embeddedDataSource);
1:13bbe52: 
1:13bbe52:         jdbc.setLockKeepAlivePeriod(1000l);
1:13bbe52:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:13bbe52:         leaseDatabaseLocker.setLockAcquireSleepInterval(2000l);
1:13bbe52:         jdbc.setLocker(leaseDatabaseLocker);
1:13bbe52: 
1:7a0168a:         broker = new BrokerService();
1:7a0168a:         PolicyMap policyMap = new PolicyMap();
1:7a0168a:         PolicyEntry defaultEntry = new PolicyEntry();
1:7a0168a:         defaultEntry.setExpireMessagesPeriod(0);
1:7a0168a:         policyMap.setDefaultEntry(defaultEntry);
1:7a0168a:         broker.setDestinationPolicy(policyMap);
1:13bbe52:         broker.setPersistenceAdapter(jdbc);
1:13bbe52: 
1:e16815a:         broker.setIoExceptionHandler(new LeaseLockerIOExceptionHandler());
1:13bbe52: 
1:13bbe52:         transportUrl = broker.addConnector(transportUrl).getPublishableConnectString();
1:13bbe52:         return broker;
2:13bbe52:     }
1:13bbe52: 
1:13bbe52:     /**
1:13bbe52:      * adding a TestTransactionContext (wrapper to TransactionContext) so an SQLException is triggered
1:13bbe52:      * during TransactionContext.executeBatch() when called in the broker.
1:13bbe52:      * <p/>
1:13bbe52:      * Expectation: SQLException triggers a connection shutdown and failover should kick and try to redeliver the
1:13bbe52:      * message. SQLException should NOT be returned to client
1:13bbe52:      */
1:7a0168a:     @Test
1:13bbe52:     public void testProducerWithDBShutdown() throws Exception {
1:13bbe52: 
1:13bbe52:         // failover but timeout in 1 seconds so the test does not hang
1:13bbe52:         String failoverTransportURL = "failover:(" + transportUrl
1:13bbe52:                 + ")?timeout=1000";
1:13bbe52: 
1:13bbe52:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1:13bbe52: 
1:7a0168a:         this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, false, false);
1:13bbe52: 
1:13bbe52:     }
1:13bbe52: 
1:7a0168a:     @Test
1:7a0168a:     public void testTransactedProducerCommitWithDBShutdown() throws Exception {
1:7a0168a: 
1:7a0168a:         // failover but timeout in 1 seconds so the test does not hang
1:7a0168a:         String failoverTransportURL = "failover:(" + transportUrl
1:7a0168a:                 + ")?timeout=1000";
1:7a0168a: 
1:7a0168a:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1:7a0168a: 
1:7a0168a:         try {
1:7a0168a:             this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, true, true);
1:7a0168a:             fail("Expect rollback after failover - inddoubt commit");
1:7a0168a:         } catch (javax.jms.TransactionRolledBackException expectedInDoubt) {
1:7a0168a:             LOG.info("Got rollback after failover failed commit", expectedInDoubt);
1:7a0168a:         }
1:7a0168a:     }
1:7a0168a: 
1:7a0168a:     @Test
1:7a0168a:     public void testTransactedProducerRollbackWithDBShutdown() throws Exception {
1:7a0168a: 
1:7a0168a:         // failover but timeout in 1 seconds so the test does not hang
1:7a0168a:         String failoverTransportURL = "failover:(" + transportUrl
1:7a0168a:                 + ")?timeout=1000";
1:7a0168a: 
1:7a0168a:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1:7a0168a: 
1:7a0168a:         this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, true, false);
1:7a0168a:     }
1:7a0168a: 
1:13bbe52:     public void createDurableConsumer(String topic,
1:13bbe52:                                       String transportURL) throws JMSException {
1:13bbe52:         Connection connection = null;
1:13bbe52:         LOG.info("*** createDurableConsumer() called ...");
1:13bbe52: 
1:7a0168a:         try {
1:13bbe52: 
1:13bbe52:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:13bbe52:                     transportURL);
1:13bbe52: 
1:13bbe52:             connection = factory.createConnection();
1:13bbe52:             connection.setClientID("myconn1");
2:13bbe52:             Session session = connection.createSession(false,
2:13bbe52:                     Session.AUTO_ACKNOWLEDGE);
1:13bbe52:             Destination destination = session.createTopic(topic);
1:13bbe52: 
1:13bbe52:             TopicSubscriber topicSubscriber = session.createDurableSubscriber(
1:13bbe52:                     (Topic) destination, "MySub1");
1:7a0168a:         } finally {
1:13bbe52:             if (connection != null) {
1:13bbe52:                 connection.close();
1:7a0168a:             }
1:13bbe52:         }
1:13bbe52:     }
1:13bbe52: 
1:7a0168a:     public void sendMessage(String topic, String transportURL, boolean transacted, boolean commit)
1:13bbe52:             throws JMSException {
1:13bbe52:         Connection connection = null;
1:13bbe52: 
2:13bbe52:         try {
1:13bbe52: 
1:13bbe52:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:13bbe52:                     transportURL);
1:13bbe52: 
1:13bbe52:             connection = factory.createConnection();
1:7a0168a:             Session session = connection.createSession(transacted,
1:7a0168a:                     transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:13bbe52:             Destination destination = session.createTopic(topic);
1:13bbe52:             MessageProducer producer = session.createProducer(destination);
1:13bbe52:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:13bbe52: 
1:13bbe52:             Message m = session.createTextMessage("testMessage");
1:13bbe52:             LOG.info("*** send message to broker...");
1:13bbe52: 
1:13bbe52:             // trigger SQL exception in transactionContext
1:7a0168a:             throwSQLException = new CountDownLatch(1);
1:13bbe52:             producer.send(m);
1:13bbe52: 
1:7a0168a:             if (transacted) {
1:7a0168a:                 if (commit) {
1:7a0168a:                     session.commit();
1:7a0168a:                 } else {
1:7a0168a:                     session.rollback();
1:7a0168a:                 }
1:7a0168a:             }
1:7a0168a: 
1:13bbe52:             LOG.info("*** Finished send message to broker");
1:13bbe52: 
2:13bbe52:         } finally {
1:13bbe52:             if (connection != null) {
1:13bbe52:                 connection.close();
1:13bbe52:             }
1:13bbe52:         }
1:13bbe52:     }
1:13bbe52: 
1:13bbe52: 	/*
1:13bbe52:      * Mock classes used for testing
1:13bbe52: 	 */
1:13bbe52: 
1:13bbe52:     public class TestJDBCPersistenceAdapter extends JDBCPersistenceAdapter {
1:13bbe52: 
1:13bbe52:         public TransactionContext getTransactionContext() throws IOException {
1:7a0168a:             return new TestTransactionContext(this);
1:13bbe52:         }
1:13bbe52:     }
1:13bbe52: 
1:13bbe52:     public class TestTransactionContext extends TransactionContext {
1:13bbe52: 
1:13bbe52:         public TestTransactionContext(
1:13bbe52:                 JDBCPersistenceAdapter jdbcPersistenceAdapter)
1:13bbe52:                 throws IOException {
1:13bbe52:             super(jdbcPersistenceAdapter);
1:13bbe52:         }
1:13bbe52: 
1:7a0168a:         @Override
1:13bbe52:         public void executeBatch() throws SQLException {
1:7a0168a:             if (throwSQLException.getCount() > 0) {
1:13bbe52:                 // only throw exception once
1:7a0168a:                 throwSQLException.countDown();
1:13bbe52:                 throw new SQLException("TEST SQL EXCEPTION");
1:13bbe52:             }
1:13bbe52:             super.executeBatch();
1:13bbe52:         }
1:13bbe52:     }
1:13bbe52: 
1:13bbe52: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
1:         if (embeddedDataSource != null) {
1:             DataSourceServiceSupport.shutdownDefaultDataSource(embeddedDataSource);
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:         broker.setIoExceptionHandler(new LeaseLockerIOExceptionHandler());
commit:7a0168a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: public class AMQ4636Test {
1:     EmbeddedDataSource embeddedDataSource;
1:     CountDownLatch throwSQLException = new CountDownLatch(0);
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = createBroker();
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         LOG.info("Broker started...");
1:     }
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             LOG.info("Stopping broker...");
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         try {
0:             if (embeddedDataSource != null) {
0:                 // ref http://svn.apache.org/viewvc/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java?view=markup
0:                 embeddedDataSource.setShutdownDatabase("shutdown");
0:                 embeddedDataSource.getConnection();
1:             }
0:         } catch (Exception ignored) {
1:         } finally {
0:             embeddedDataSource.setShutdownDatabase(null);
1:         }
1:     }
1:     protected BrokerService createBroker() throws Exception {
1: 
1:         embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:         embeddedDataSource.getConnection().close();
1:         broker = new BrokerService();
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:         this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, false, false);
1:     @Test
1:     public void testTransactedProducerCommitWithDBShutdown() throws Exception {
1: 
1:         // failover but timeout in 1 seconds so the test does not hang
1:         String failoverTransportURL = "failover:(" + transportUrl
1:                 + ")?timeout=1000";
1: 
1:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1: 
1:         try {
1:             this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, true, true);
1:             fail("Expect rollback after failover - inddoubt commit");
1:         } catch (javax.jms.TransactionRolledBackException expectedInDoubt) {
1:             LOG.info("Got rollback after failover failed commit", expectedInDoubt);
1:         }
1:     }
1: 
1:     @Test
1:     public void testTransactedProducerRollbackWithDBShutdown() throws Exception {
1: 
1:         // failover but timeout in 1 seconds so the test does not hang
1:         String failoverTransportURL = "failover:(" + transportUrl
1:                 + ")?timeout=1000";
1: 
1:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1: 
1:         this.sendMessage(MY_TEST_TOPIC, failoverTransportURL, true, false);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void sendMessage(String topic, String transportURL, boolean transacted, boolean commit)
/////////////////////////////////////////////////////////////////////////
1:             Session session = connection.createSession(transacted,
1:                     transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:             throwSQLException = new CountDownLatch(1);
1:             if (transacted) {
1:                 if (commit) {
1:                     session.commit();
1:                 } else {
1:                     session.rollback();
1:                 }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new TestTransactionContext(this);
1:         @Override
1:             if (throwSQLException.getCount() > 0) {
1:                 throwSQLException.countDown();
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: import java.sql.SQLException;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
0: import org.apache.activemq.store.jdbc.JDBCIOExceptionHandler;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1: import org.apache.activemq.store.jdbc.TransactionContext;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Testing how the broker reacts when a SQL Exception is thrown from
1:  * org.apache.activemq.store.jdbc.TransactionContext.executeBatch().
1:  * <p/>
1:  * see https://issues.apache.org/jira/browse/AMQ-4636
1:  */
1: 
0: public class AMQ4636Test extends TestCase {
1: 
1:     private static final String MY_TEST_TOPIC = "MY_TEST_TOPIC";
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(AMQ4636Test.class);
1:     private String transportUrl = "tcp://0.0.0.0:0";
1:     private BrokerService broker;
0:     private TestTransactionContext testTransactionContext;
1: 
0:     protected BrokerService createBroker(boolean withJMX) throws Exception {
0:         BrokerService broker = new BrokerService();
1: 
0:         broker.setUseJmx(withJMX);
1: 
0:         EmbeddedDataSource embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:         embeddedDataSource.setCreateDatabase("create");
1: 
1:         //wire in a TestTransactionContext (wrapper to TransactionContext) that has an executeBatch()
1:         // method that can be configured to throw a SQL exception on demand
1:         JDBCPersistenceAdapter jdbc = new TestJDBCPersistenceAdapter();
1:         jdbc.setDataSource(embeddedDataSource);
0:         testTransactionContext = new TestTransactionContext(jdbc);
1: 
1:         jdbc.setLockKeepAlivePeriod(1000l);
1:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:         leaseDatabaseLocker.setLockAcquireSleepInterval(2000l);
1:         jdbc.setLocker(leaseDatabaseLocker);
1: 
1:         broker.setPersistenceAdapter(jdbc);
1: 
0:         broker.setIoExceptionHandler(new JDBCIOExceptionHandler());
1: 
1:         transportUrl = broker.addConnector(transportUrl).getPublishableConnectString();
1:         return broker;
1:     }
1: 
1:     /**
1:      * adding a TestTransactionContext (wrapper to TransactionContext) so an SQLException is triggered
1:      * during TransactionContext.executeBatch() when called in the broker.
1:      * <p/>
1:      * Expectation: SQLException triggers a connection shutdown and failover should kick and try to redeliver the
1:      * message. SQLException should NOT be returned to client
1:      */
1: 
1:     public void testProducerWithDBShutdown() throws Exception {
1: 
0:         broker = this.createBroker(false);
0:         broker.deleteAllMessages();
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
0:         LOG.info("***Broker started...");
1: 
1:         // failover but timeout in 1 seconds so the test does not hang
1:         String failoverTransportURL = "failover:(" + transportUrl
1:                 + ")?timeout=1000";
1: 
1:         this.createDurableConsumer(MY_TEST_TOPIC, failoverTransportURL);
1: 
0:         this.sendMessage(MY_TEST_TOPIC, failoverTransportURL);
1: 
1:     }
1: 
1:     public void createDurableConsumer(String topic,
1:                                       String transportURL) throws JMSException {
1:         Connection connection = null;
1:         LOG.info("*** createDurableConsumer() called ...");
1: 
1:         try {
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                     transportURL);
1: 
1:             connection = factory.createConnection();
1:             connection.setClientID("myconn1");
1:             Session session = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createTopic(topic);
1: 
1:             TopicSubscriber topicSubscriber = session.createDurableSubscriber(
1:                     (Topic) destination, "MySub1");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
0:     public void sendMessage(String topic, String transportURL)
1:             throws JMSException {
1:         Connection connection = null;
1: 
1:         try {
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                     transportURL);
1: 
1:             connection = factory.createConnection();
1:             Session session = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createTopic(topic);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:             Message m = session.createTextMessage("testMessage");
1:             LOG.info("*** send message to broker...");
1: 
1:             // trigger SQL exception in transactionContext
0:             testTransactionContext.throwSQLException = true;
1:             producer.send(m);
1: 
1:             LOG.info("*** Finished send message to broker");
1: 
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1: 	/*
1:      * Mock classes used for testing
1: 	 */
1: 
1:     public class TestJDBCPersistenceAdapter extends JDBCPersistenceAdapter {
1: 
1:         public TransactionContext getTransactionContext() throws IOException {
0:             return testTransactionContext;
1:         }
1:     }
1: 
1:     public class TestTransactionContext extends TransactionContext {
1: 
0:         public boolean throwSQLException;
1: 
1:         public TestTransactionContext(
1:                 JDBCPersistenceAdapter jdbcPersistenceAdapter)
1:                 throws IOException {
1:             super(jdbcPersistenceAdapter);
1:         }
1: 
1:         public void executeBatch() throws SQLException {
0:             if (throwSQLException) {
1:                 // only throw exception once
0:                 throwSQLException = false;
1:                 throw new SQLException("TEST SQL EXCEPTION");
1:             }
1:             super.executeBatch();
1:         }
1: 
1:     }
1: 
1: }
============================================================================