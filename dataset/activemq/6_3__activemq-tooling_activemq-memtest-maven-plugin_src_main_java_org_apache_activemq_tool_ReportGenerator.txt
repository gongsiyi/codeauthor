1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
10:a88906f: 
1:a88906f: package org.apache.activemq.tool;
1:a88906f: 
1:a88906f: import java.io.File;
1:a88906f: import java.io.FileOutputStream;
1:a88906f: import java.io.IOException;
1:a88906f: import java.io.PrintWriter;
1:a88906f: import java.util.Enumeration;
1:a88906f: import java.util.Properties;
1:540dd5c: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:540dd5c: 
1:a88906f: public class ReportGenerator {
1:8f55d40: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ReportGenerator.class);
1:540dd5c:     private String reportDirectory;
1:540dd5c:     private String reportName;
1:540dd5c:     private PrintWriter writer;
1:540dd5c:     private File reportFile;
1:a88906f:     private Properties testSettings;
1:a88906f: 
1:a88906f:     public ReportGenerator() {
1:a88906f:     }
1:a88906f: 
1:a88906f:     public ReportGenerator(String reportDirectory, String reportName) {
1:a88906f:         this.setReportDirectory(reportDirectory);
1:a88906f:         this.setReportName(reportName);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void startGenerateReport() {
1:a88906f: 
1:a88906f:         File reportDir = new File(getReportDirectory());
1:a88906f: 
1:a88906f:         // Create output directory if it doesn't exist.
1:a88906f:         if (!reportDir.exists()) {
1:a88906f:             reportDir.mkdirs();
1:a88906f:         }
1:a88906f: 
1:a88906f:         if (reportDir != null) {
1:a88906f:             reportFile = new File(this.getReportDirectory() + File.separator + this.getReportName() + ".xml");
1:a88906f:         }
1:a88906f: 
1:a88906f:         try {
1:a88906f:             this.writer = new PrintWriter(new FileOutputStream(reportFile));
1:a88906f:         } catch (IOException e1) {
1:540dd5c:             e1.printStackTrace(); // To change body of catch statement use
1:540dd5c:                                     // File | Settings | File Templates.
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void stopGenerateReport() {
1:a88906f:         writeWithIndent(0, "</test-report>");
1:a88906f:         this.getWriter().flush();
1:a88906f:         this.getWriter().close();
1:540dd5c:         LOG.info(" TEST REPORT OUTPUT : " + reportFile.getAbsolutePath());
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void addTestInformation() {
1:a88906f: 
1:a88906f:         writeWithIndent(0, "<test-report>");
1:a88906f:         writeWithIndent(2, "<test-information>");
1:a88906f: 
1:a88906f:         writeWithIndent(4, "<os-name>" + System.getProperty("os.name") + "</os-name>");
1:a88906f:         writeWithIndent(4, "<java-version>" + System.getProperty("java.version") + "</java-version>");
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void addClientSettings() {
1:a88906f:         if (this.getTestSettings() != null) {
1:a88906f:             Enumeration keys = getTestSettings().propertyNames();
1:a88906f: 
1:a88906f:             writeWithIndent(4, "<test-settings>");
1:a88906f: 
1:a88906f:             String key;
1:a88906f:             while (keys.hasMoreElements()) {
1:540dd5c:                 key = (String)keys.nextElement();
1:a88906f:                 writeWithIndent(6, "<" + key + ">" + getTestSettings().get(key) + "</" + key + ">");
1:a88906f:             }
1:a88906f: 
1:a88906f:             writeWithIndent(4, "</test-settings>");
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void endTestInformation() {
1:a88906f:         writeWithIndent(2, "</test-information>");
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void startTestResult(long checkpointInterval) {
1:a88906f:         long intervalInSec = checkpointInterval / 1000;
1:8f55d40:         writeWithIndent(2, "<test-result checkpoint_interval_in_sec='" + intervalInSec + "' >");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void endTestResult() {
1:a88906f:         writeWithIndent(2, "</test-result>");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeWithIndent(int indent, String result) {
1:a88906f:         StringBuffer buffer = new StringBuffer();
1:a88906f: 
1:a88906f:         for (int i = 0; i < indent; ++i) {
1:a88906f:             buffer.append(" ");
1:a88906f:         }
1:a88906f: 
1:a88906f:         buffer.append(result);
1:a88906f:         writer.println(buffer.toString());
1:a88906f:     }
1:a88906f: 
1:a88906f:     public PrintWriter getWriter() {
1:a88906f:         return this.writer;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getReportDirectory() {
1:a88906f:         return reportDirectory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setReportDirectory(String reportDirectory) {
1:a88906f:         this.reportDirectory = reportDirectory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getReportName() {
1:a88906f:         return reportName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setReportName(String reportName) {
1:a88906f:         this.reportName = reportName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public Properties getTestSettings() {
1:a88906f:         return testSettings;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setTestSettings(Properties testSettings) {
1:a88906f:         this.testSettings = testSettings;
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ReportGenerator.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f55d40
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         writeWithIndent(2, "<test-result checkpoint_interval_in_sec='" + intervalInSec + "' >");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1:     
0:     private static final Log LOG = LogFactory.getLog(ReportGenerator.class);
1:     private String reportDirectory;
1:     private String reportName;
1:     private PrintWriter writer;
1:     private File reportFile;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             e1.printStackTrace(); // To change body of catch statement use
1:                                     // File | Settings | File Templates.
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(" TEST REPORT OUTPUT : " + reportFile.getAbsolutePath());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 key = (String)keys.nextElement();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.tool;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: public class ReportGenerator {
0:     private static final Log log = LogFactory.getLog(ReportGenerator.class);
0:     private String reportDirectory = null;
0:     private String reportName = null;
0:     private PrintWriter writer = null;
0:     private File reportFile = null;
1:     private Properties testSettings;
1: 
1:     public ReportGenerator() {
1:     }
1: 
1:     public ReportGenerator(String reportDirectory, String reportName) {
1:         this.setReportDirectory(reportDirectory);
1:         this.setReportName(reportName);
1:     }
1: 
1:     public void startGenerateReport() {
1: 
1: 
1:         File reportDir = new File(getReportDirectory());
1: 
1:         // Create output directory if it doesn't exist.
1:         if (!reportDir.exists()) {
1:             reportDir.mkdirs();
1:         }
1: 
1: 
1:         if (reportDir != null) {
1:             reportFile = new File(this.getReportDirectory() + File.separator + this.getReportName() + ".xml");
1:         }
1: 
1:         try {
1:             this.writer = new PrintWriter(new FileOutputStream(reportFile));
1:         } catch (IOException e1) {
0:             e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:         }
1:     }
1: 
1:     public void stopGenerateReport() {
1:         writeWithIndent(0, "</test-report>");
1:         this.getWriter().flush();
1:         this.getWriter().close();
0:         log.info(" TEST REPORT OUTPUT : " + reportFile.getAbsolutePath());
1: 
1: 
1:     }
1: 
1:     protected void addTestInformation() {
1: 
1:         writeWithIndent(0, "<test-report>");
1:         writeWithIndent(2, "<test-information>");
1: 
1:         writeWithIndent(4, "<os-name>" + System.getProperty("os.name") + "</os-name>");
1:         writeWithIndent(4, "<java-version>" + System.getProperty("java.version") + "</java-version>");
1: 
1:     }
1: 
1: 
1:     protected void addClientSettings() {
1:         if (this.getTestSettings() != null) {
1:             Enumeration keys = getTestSettings().propertyNames();
1: 
1:             writeWithIndent(4, "<test-settings>");
1: 
1:             String key;
1:             while (keys.hasMoreElements()) {
0:                 key = (String) keys.nextElement();
1:                 writeWithIndent(6, "<" + key + ">" + getTestSettings().get(key) + "</" + key + ">");
1:             }
1: 
1:             writeWithIndent(4, "</test-settings>");
1:         }
1:     }
1: 
1:     protected void endTestInformation() {
1:         writeWithIndent(2, "</test-information>");
1: 
1:     }
1: 
1:     protected void startTestResult(long checkpointInterval) {
1:         long intervalInSec = checkpointInterval / 1000;
0:         writeWithIndent(2, "<test-result checkpoint_interval_in_sec=" + intervalInSec + " >");
1:     }
1: 
1:     protected void endTestResult() {
1:         writeWithIndent(2, "</test-result>");
1:     }
1: 
1: 
1:     protected void writeWithIndent(int indent, String result) {
1:         StringBuffer buffer = new StringBuffer();
1: 
1:         for (int i = 0; i < indent; ++i) {
1:             buffer.append(" ");
1:         }
1: 
1:         buffer.append(result);
1:         writer.println(buffer.toString());
1:     }
1: 
1:     public PrintWriter getWriter() {
1:         return this.writer;
1:     }
1: 
1: 
1:     public String getReportDirectory() {
1:         return reportDirectory;
1:     }
1: 
1:     public void setReportDirectory(String reportDirectory) {
1:         this.reportDirectory = reportDirectory;
1:     }
1: 
1:     public String getReportName() {
1:         return reportName;
1:     }
1: 
1: 
1:     public void setReportName(String reportName) {
1:         this.reportName = reportName;
1:     }
1: 
1:     public Properties getTestSettings() {
1:         return testSettings;
1:     }
1: 
1:     public void setTestSettings(Properties testSettings) {
1:         this.testSettings = testSettings;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:2054392
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.tool;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: 
0: public class ReportGenerator {
0:     private static final Log log = LogFactory.getLog(ReportGenerator.class);
0:     private String reportDirectory = null;
0:     private String reportName = null;
0:     private PrintWriter writer = null;
0:     private File reportFile = null;
0:     private Properties testSettings;
0: 
0:     public ReportGenerator() {
0:     }
0: 
0:     public ReportGenerator(String reportDirectory, String reportName) {
0:         this.setReportDirectory(reportDirectory);
0:         this.setReportName(reportName);
0:     }
0: 
0:     public void startGenerateReport() {
0: 
0: 
0:         File reportDir = new File(getReportDirectory());
0: 
0:         // Create output directory if it doesn't exist.
0:         if (!reportDir.exists()) {
0:             reportDir.mkdirs();
0:         }
0: 
0: 
0:         if (reportDir != null) {
0:             reportFile = new File(this.getReportDirectory() + File.separator + this.getReportName() + ".xml");
0:         }
0: 
0:         try {
0:             this.writer = new PrintWriter(new FileOutputStream(reportFile));
0:         } catch (IOException e1) {
0:             e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
0:         }
0:     }
0: 
0:     public void stopGenerateReport() {
0:         writeWithIndent(0, "</test-report>");
0:         this.getWriter().flush();
0:         this.getWriter().close();
0:         log.info(" TEST REPORT OUTPUT : " + reportFile.getAbsolutePath());
0: 
0: 
0:     }
0: 
0:     protected void addTestInformation() {
0: 
0:         writeWithIndent(0, "<test-report>");
0:         writeWithIndent(2, "<test-information>");
0: 
0:         writeWithIndent(4, "<os-name>" + System.getProperty("os.name") + "</os-name>");
0:         writeWithIndent(4, "<java-version>" + System.getProperty("java.version") + "</java-version>");
0: 
0:     }
0: 
0: 
0:     protected void addClientSettings() {
0:         if (this.getTestSettings() != null) {
0:             Enumeration keys = getTestSettings().propertyNames();
0: 
0:             writeWithIndent(4, "<test-settings>");
0: 
0:             String key;
0:             while (keys.hasMoreElements()) {
0:                 key = (String) keys.nextElement();
0:                 writeWithIndent(6, "<" + key + ">" + getTestSettings().get(key) + "</" + key + ">");
0:             }
0: 
0:             writeWithIndent(4, "</test-settings>");
0:         }
0:     }
0: 
0:     protected void endTestInformation() {
0:         writeWithIndent(2, "</test-information>");
0: 
0:     }
0: 
0:     protected void startTestResult(long checkpointInterval) {
0:         long intervalInSec = checkpointInterval / 1000;
0:         writeWithIndent(2, "<test-result checkpoint_interval_in_sec=" + intervalInSec + " >");
0:     }
0: 
0:     protected void endTestResult() {
0:         writeWithIndent(2, "</test-result>");
0:     }
0: 
0: 
0:     protected void writeWithIndent(int indent, String result) {
0:         StringBuffer buffer = new StringBuffer();
0: 
0:         for (int i = 0; i < indent; ++i) {
0:             buffer.append(" ");
0:         }
0: 
0:         buffer.append(result);
0:         writer.println(buffer.toString());
0:     }
0: 
0:     public PrintWriter getWriter() {
0:         return this.writer;
0:     }
0: 
0: 
0:     public String getReportDirectory() {
0:         return reportDirectory;
0:     }
0: 
0:     public void setReportDirectory(String reportDirectory) {
0:         this.reportDirectory = reportDirectory;
0:     }
0: 
0:     public String getReportName() {
0:         return reportName;
0:     }
0: 
0: 
0:     public void setReportName(String reportName) {
0:         this.reportName = reportName;
0:     }
0: 
0:     public Properties getTestSettings() {
0:         return testSettings;
0:     }
0: 
0:     public void setTestSettings(Properties testSettings) {
0:         this.testSettings = testSettings;
0:     }
0: }
============================================================================