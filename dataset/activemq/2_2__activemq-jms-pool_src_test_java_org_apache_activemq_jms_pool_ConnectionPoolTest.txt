1:525fd29: /**
1:525fd29:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:525fd29:  * contributor license agreements.  See the NOTICE file distributed with
1:525fd29:  * this work for additional information regarding copyright ownership.
1:525fd29:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:525fd29:  * (the "License"); you may not use this file except in compliance with
1:525fd29:  * the License.  You may obtain a copy of the License at
1:525fd29:  *
1:525fd29:  *      http://www.apache.org/licenses/LICENSE-2.0
1:525fd29:  *
1:525fd29:  * Unless required by applicable law or agreed to in writing, software
1:525fd29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:525fd29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:525fd29:  * See the License for the specific language governing permissions and
1:525fd29:  * limitations under the License.
1:525fd29:  */
1:5b1412d: package org.apache.activemq.jms.pool;
4:5b1412d: 
1:525fd29: import static org.junit.Assert.assertFalse;
1:525fd29: 
1:525fd29: import javax.jms.Connection;
1:525fd29: import javax.jms.JMSException;
1:525fd29: 
1:5b1412d: import org.apache.activemq.ActiveMQConnectionFactory;
1:5b1412d: import org.apache.activemq.broker.BrokerService;
1:5b1412d: import org.junit.Before;
1:5b1412d: import org.junit.Test;
1:5b1412d: 
1:5b1412d: public class ConnectionPoolTest extends JmsPoolTestSupport {
1:5b1412d: 
1:5b1412d:     private class PooledConnectionFactoryTest extends PooledConnectionFactory {
1:5b1412d:         ConnectionPool pool = null;
1:5b1412d:         @Override
1:5b1412d:         protected Connection newPooledConnection(ConnectionPool connection) {
1:5b1412d:             connection.setIdleTimeout(Integer.MAX_VALUE);
1:5b1412d:             this.pool = connection;
1:5b1412d:             Connection ret = super.newPooledConnection(connection);
1:5b1412d:             ConnectionPool cp = ((PooledConnection) ret).pool;
1:5b1412d:             cp.decrementReferenceCount();
1:5b1412d:             // will fail if timeout does overflow
1:5b1412d:             assertFalse(cp.expiredCheck());
1:5b1412d:             return ret;
1:5b1412d:         }
1:5b1412d: 
1:5b1412d:         public ConnectionPool getPool() {
1:5b1412d:             return pool;
1:5b1412d:         }
1:5b1412d: 
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     @Override
1:5b1412d:     @Before
1:5b1412d:     public void setUp() throws Exception {
1:5b1412d:         super.setUp();
1:5b1412d: 
1:5b1412d:         brokerService = new BrokerService();
1:5b1412d:         brokerService.setDeleteAllMessagesOnStartup(true);
1:5b1412d:         brokerService.setPersistent(false);
1:5b1412d:         brokerService.setUseJmx(false);
1:5b1412d:         brokerService.setAdvisorySupport(false);
1:5b1412d:         brokerService.setSchedulerSupport(false);
1:5b1412d:         brokerService.start();
1:5b1412d:         brokerService.waitUntilStarted();
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     @Test(timeout = 120000)
1:5b1412d:     public void demo() throws JMSException, InterruptedException {
1:5b1412d:         final PooledConnectionFactoryTest pooled = new PooledConnectionFactoryTest();
1:5b1412d:         pooled.setConnectionFactory(new ActiveMQConnectionFactory("vm://localhost?create=false"));
1:5b1412d:         pooled.setMaxConnections(2);
1:5b1412d:         pooled.setExpiryTimeout(Long.MAX_VALUE);
1:5b1412d:         pooled.start();
1:5b1412d:     }
1:5b1412d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:525fd29
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import static org.junit.Assert.assertFalse;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
author:giliva
-------------------------------------------------------------------------------
commit:5b1412d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
1: 
0: import static org.junit.Assert.assertFalse;
1: 
1: public class ConnectionPoolTest extends JmsPoolTestSupport {
0:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionPoolTest.class);
1: 
1: 
1:     private class PooledConnectionFactoryTest extends PooledConnectionFactory {
1:         ConnectionPool pool = null;
1:         @Override
1:         protected Connection newPooledConnection(ConnectionPool connection) {
1:             connection.setIdleTimeout(Integer.MAX_VALUE);
1:             this.pool = connection;
1:             Connection ret = super.newPooledConnection(connection);
1:             ConnectionPool cp = ((PooledConnection) ret).pool;
1:             cp.decrementReferenceCount();
1:             // will fail if timeout does overflow
1:             assertFalse(cp.expiredCheck());
1:             return ret;
1:         }
1: 
1:         public ConnectionPool getPool() {
1:             return pool;
1:         }
1: 
1:     }
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @Test(timeout = 120000)
1:     public void demo() throws JMSException, InterruptedException {
1:         final PooledConnectionFactoryTest pooled = new PooledConnectionFactoryTest();
1:         pooled.setConnectionFactory(new ActiveMQConnectionFactory("vm://localhost?create=false"));
1:         pooled.setMaxConnections(2);
1:         pooled.setExpiryTimeout(Long.MAX_VALUE);
1:         pooled.start();
1:     }
1: }
============================================================================