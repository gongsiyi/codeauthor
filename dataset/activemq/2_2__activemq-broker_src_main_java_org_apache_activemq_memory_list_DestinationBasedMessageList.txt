1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory.list;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:d29ca2a: import org.apache.activemq.broker.region.Subscription;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:2748ae1: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.filter.DestinationMap;
1:d29ca2a: import org.apache.activemq.memory.buffer.MessageBuffer;
1:d29ca2a: import org.apache.activemq.memory.buffer.MessageQueue;
1:d29ca2a: import org.apache.activemq.memory.buffer.OrderBasedMessageBuffer;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An implementation of {@link MessageList} which maintains a separate message
1:d29ca2a:  * list for each destination to reduce contention on the list and to speed up
1:d29ca2a:  * recovery times by only recovering the interested topics.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class DestinationBasedMessageList implements MessageList {
1:d29ca2a: 
1:d29ca2a:     private MessageBuffer messageBuffer;
1:ecf89a6:     private Map<ActiveMQDestination, MessageQueue> queueIndex = new HashMap<ActiveMQDestination, MessageQueue>();
1:d29ca2a:     private DestinationMap subscriptionIndex = new DestinationMap();
1:d29ca2a:     private Object lock = new Object();
1:d29ca2a: 
1:d29ca2a:     public DestinationBasedMessageList(int maximumSize) {
1:d29ca2a:         this(new OrderBasedMessageBuffer(maximumSize));
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     public DestinationBasedMessageList(MessageBuffer buffer) {
1:d29ca2a:         messageBuffer = buffer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void add(MessageReference node) {
1:d29ca2a:         ActiveMQMessage message = (ActiveMQMessage) node.getMessageHardRef();
1:d29ca2a:         ActiveMQDestination destination = message.getDestination();
1:d29ca2a:         MessageQueue queue = null;
1:d29ca2a:         synchronized (lock) {
1:ecf89a6:             queue = queueIndex.get(destination);
1:d29ca2a:             if (queue == null) {
1:d29ca2a:                 queue = messageBuffer.createMessageQueue();
1:d29ca2a:                 queueIndex.put(destination, queue);
1:d29ca2a:                 subscriptionIndex.put(destination, queue);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         queue.add(node);
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public List<MessageReference> getMessages(Subscription sub) {
1:2748ae1:         return getMessages(sub.getConsumerInfo().getDestination());
1:2748ae1:     }
1:d29ca2a:     
1:933eb2f:     public  List<MessageReference> getMessages(ActiveMQDestination destination) {
1:d29ca2a:         Set set = null;
1:d29ca2a:         synchronized (lock) {
1:2748ae1:             set = subscriptionIndex.get(destination);
1:d29ca2a:         }
1:933eb2f:         List<MessageReference> answer = new ArrayList<MessageReference>();
1:d29ca2a:         for (Iterator iter = set.iterator(); iter.hasNext();) {
1:d29ca2a:             MessageQueue queue = (MessageQueue) iter.next();
1:d29ca2a:             queue.appendMessages(answer);
1:d29ca2a:         }
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a:     
1:2748ae1:     public Message[] browse(ActiveMQDestination destination) {
1:933eb2f:         List<MessageReference> result = getMessages(destination);
1:933eb2f:         return result.toArray(new Message[result.size()]);
1:2748ae1:     }
1:2748ae1: 
2:2748ae1: 
1:d29ca2a:     public void clear() {
1:d29ca2a:         messageBuffer.clear();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public List<MessageReference> getMessages(Subscription sub) {
1:     public  List<MessageReference> getMessages(ActiveMQDestination destination) {
1:         List<MessageReference> answer = new ArrayList<MessageReference>();
/////////////////////////////////////////////////////////////////////////
1:         List<MessageReference> result = getMessages(destination);
1:         return result.toArray(new Message[result.size()]);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private Map<ActiveMQDestination, MessageQueue> queueIndex = new HashMap<ActiveMQDestination, MessageQueue>();
/////////////////////////////////////////////////////////////////////////
1:             queue = queueIndex.get(destination);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory.list;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.memory.buffer.MessageBuffer;
1: import org.apache.activemq.memory.buffer.MessageQueue;
1: import org.apache.activemq.memory.buffer.OrderBasedMessageBuffer;
1: 
1: /**
1:  * An implementation of {@link MessageList} which maintains a separate message
1:  * list for each destination to reduce contention on the list and to speed up
1:  * recovery times by only recovering the interested topics.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class DestinationBasedMessageList implements MessageList {
1: 
1:     private MessageBuffer messageBuffer;
0:     private Map queueIndex = new HashMap();
1:     private DestinationMap subscriptionIndex = new DestinationMap();
1:     private Object lock = new Object();
1: 
1:     public DestinationBasedMessageList(int maximumSize) {
1:         this(new OrderBasedMessageBuffer(maximumSize));
1:     }
1:     
1:     public DestinationBasedMessageList(MessageBuffer buffer) {
1:         messageBuffer = buffer;
1:     }
1: 
1:     public void add(MessageReference node) {
1:         ActiveMQMessage message = (ActiveMQMessage) node.getMessageHardRef();
1:         ActiveMQDestination destination = message.getDestination();
1:         MessageQueue queue = null;
1:         synchronized (lock) {
0:             queue = (MessageQueue) queueIndex.get(destination);
1:             if (queue == null) {
1:                 queue = messageBuffer.createMessageQueue();
1:                 queueIndex.put(destination, queue);
1:                 subscriptionIndex.put(destination, queue);
1:             }
1:         }
1:         queue.add(node);
1:     }
1: 
0:     public List getMessages(Subscription sub) {
1:         Set set = null;
1:         synchronized (lock) {
0:             set = subscriptionIndex.get(sub.getConsumerInfo().getDestination());
1:         }
0:         List answer = new ArrayList();
1:         for (Iterator iter = set.iterator(); iter.hasNext();) {
1:             MessageQueue queue = (MessageQueue) iter.next();
1:             queue.appendMessages(answer);
1:         }
1:         return answer;
1:     }
1: 
1:     public void clear() {
1:         messageBuffer.clear();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:a110604
/////////////////////////////////////////////////////////////////////////
0:     public  List getMessages(ActiveMQDestination destination) {
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:         return getMessages(sub.getConsumerInfo().getDestination());
1:     }
1:     
0:     protected  List getMessages(ActiveMQDestination destination) {
1:             set = subscriptionIndex.get(destination);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Message[] browse(ActiveMQDestination destination) {
0:         List result = getMessages(destination);
0:         return (Message[])result.toArray(new Message[result.size()]);
1:     }
1: 
============================================================================