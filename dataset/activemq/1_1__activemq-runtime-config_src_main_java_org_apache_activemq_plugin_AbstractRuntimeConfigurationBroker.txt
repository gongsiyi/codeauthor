1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.plugin;
1:43c3cae: 
1:43c3cae: import java.util.concurrent.ConcurrentLinkedQueue;
1:43c3cae: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:43c3cae: import java.util.regex.Pattern;
1:43c3cae: 
1:43c3cae: import javax.management.ObjectName;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.broker.Broker;
1:43c3cae: import org.apache.activemq.broker.BrokerFilter;
1:43c3cae: import org.apache.activemq.broker.ConnectionContext;
1:43c3cae: import org.apache.activemq.broker.region.Destination;
1:43c3cae: import org.apache.activemq.command.ActiveMQDestination;
1:43c3cae: import org.apache.activemq.command.ConnectionInfo;
1:43c3cae: import org.slf4j.Logger;
1:43c3cae: import org.slf4j.LoggerFactory;
1:43c3cae: 
1:43c3cae: public class AbstractRuntimeConfigurationBroker extends BrokerFilter {
1:43c3cae: 
1:43c3cae:     public static final Logger LOG = LoggerFactory.getLogger(AbstractRuntimeConfigurationBroker.class);
1:43c3cae:     protected final ReentrantReadWriteLock addDestinationBarrier = new ReentrantReadWriteLock();
1:43c3cae:     protected final ReentrantReadWriteLock addConnectionBarrier = new ReentrantReadWriteLock();
1:43c3cae:     protected Runnable monitorTask;
1:43c3cae:     protected ConcurrentLinkedQueue<Runnable> addDestinationWork = new ConcurrentLinkedQueue<Runnable>();
1:43c3cae:     protected ConcurrentLinkedQueue<Runnable> addConnectionWork = new ConcurrentLinkedQueue<Runnable>();
1:43c3cae:     protected ObjectName objectName;
1:43c3cae:     protected String infoString;
1:43c3cae: 
1:43c3cae:     public AbstractRuntimeConfigurationBroker(Broker next) {
1:43c3cae:         super(next);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Override
1:43c3cae:     public void start() throws Exception {
1:43c3cae:         super.start();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Override
1:43c3cae:     public void stop() throws Exception {
1:43c3cae:         if (monitorTask != null) {
1:43c3cae:             try {
1:43c3cae:                 this.getBrokerService().getScheduler().cancel(monitorTask);
1:43c3cae:             } catch (Exception letsNotStopStop) {
1:43c3cae:                 LOG.warn("Failed to cancel config monitor task", letsNotStopStop);
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:         unregisterMbean();
1:43c3cae:         super.stop();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void registerMbean() {
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void unregisterMbean() {
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     // modification to virtual destinations interceptor needs exclusive access to destination add
1:43c3cae:     @Override
1:43c3cae:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:43c3cae:         Runnable work = addDestinationWork.poll();
1:43c3cae:         if (work != null) {
1:43c3cae:             try {
1:43c3cae:                 addDestinationBarrier.writeLock().lockInterruptibly();
1:43c3cae:                 do {
1:43c3cae:                     work.run();
1:43c3cae:                     work = addDestinationWork.poll();
1:43c3cae:                 } while (work != null);
1:43c3cae:                 return super.addDestination(context, destination, createIfTemporary);
1:43c3cae:             } finally {
1:43c3cae:                 addDestinationBarrier.writeLock().unlock();
1:43c3cae:             }
1:43c3cae:         } else {
1:43c3cae:             try {
1:43c3cae:                 addDestinationBarrier.readLock().lockInterruptibly();
1:43c3cae:                 return super.addDestination(context, destination, createIfTemporary);
1:43c3cae:             } finally {
1:43c3cae:                 addDestinationBarrier.readLock().unlock();
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     // modification to authentication plugin needs exclusive access to connection add
1:43c3cae:     @Override
1:43c3cae:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:43c3cae:         Runnable work = addConnectionWork.poll();
1:43c3cae:         if (work != null) {
1:43c3cae:             try {
1:43c3cae:                 addConnectionBarrier.writeLock().lockInterruptibly();
1:43c3cae:                 do {
1:43c3cae:                     work.run();
1:43c3cae:                     work = addConnectionWork.poll();
1:43c3cae:                 } while (work != null);
1:43c3cae:                 super.addConnection(context, info);
1:43c3cae:             } finally {
1:43c3cae:                 addConnectionBarrier.writeLock().unlock();
1:43c3cae:             }
1:43c3cae:         } else {
1:43c3cae:             try {
1:43c3cae:                 addConnectionBarrier.readLock().lockInterruptibly();
1:43c3cae:                 super.addConnection(context, info);
1:43c3cae:             } finally {
1:43c3cae:                 addConnectionBarrier.readLock().unlock();
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:5db9af8:     /**
1:5db9af8:      * Apply the destination work immediately instead of waiting for
1:5db9af8:      * a connection add or destination add
1:5db9af8:      *
1:5db9af8:      * @throws Exception
1:5db9af8:      */
1:5db9af8:     protected void applyDestinationWork() throws Exception {
1:5db9af8:         Runnable work = addDestinationWork.poll();
1:5db9af8:         if (work != null) {
1:5db9af8:             try {
1:5db9af8:                 addDestinationBarrier.writeLock().lockInterruptibly();
1:5db9af8:                 do {
1:5db9af8:                     work.run();
1:5db9af8:                     work = addDestinationWork.poll();
1:5db9af8:                 } while (work != null);
1:5db9af8:             } finally {
1:5db9af8:                 addDestinationBarrier.writeLock().unlock();
1:5db9af8:             }
1:5db9af8:         }
1:5db9af8:     }
1:5db9af8: 
1:9e7fae0:     public void debug(String s) {
1:43c3cae:         LOG.debug(s);
1:43c3cae:     }
1:43c3cae: 
1:9e7fae0:     public void info(String s) {
1:43c3cae:         LOG.info(filterPasswords(s));
1:43c3cae:         if (infoString != null) {
1:43c3cae:             infoString += s;
1:43c3cae:             infoString += ";";
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:9e7fae0:     public void info(String s, Throwable t) {
1:43c3cae:         LOG.info(filterPasswords(s), t);
1:43c3cae:         if (infoString != null) {
1:43c3cae:             infoString += s;
1:43c3cae:             infoString += ", " + t;
1:43c3cae:             infoString += ";";
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     Pattern matchPassword = Pattern.compile("password=.*,");
1:43c3cae:     protected String filterPasswords(Object toEscape) {
1:43c3cae:         return matchPassword.matcher(toEscape.toString()).replaceAll("password=???,");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9e7fae0
/////////////////////////////////////////////////////////////////////////
1:     public void debug(String s) {
1:     public void info(String s) {
/////////////////////////////////////////////////////////////////////////
1:     public void info(String s, Throwable t) {
commit:5db9af8
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Apply the destination work immediately instead of waiting for
1:      * a connection add or destination add
1:      *
1:      * @throws Exception
1:      */
1:     protected void applyDestinationWork() throws Exception {
1:         Runnable work = addDestinationWork.poll();
1:         if (work != null) {
1:             try {
1:                 addDestinationBarrier.writeLock().lockInterruptibly();
1:                 do {
1:                     work.run();
1:                     work = addDestinationWork.poll();
1:                 } while (work != null);
1:             } finally {
1:                 addDestinationBarrier.writeLock().unlock();
1:             }
1:         }
1:     }
1: 
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: import java.util.regex.Pattern;
1: 
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AbstractRuntimeConfigurationBroker extends BrokerFilter {
1: 
1:     public static final Logger LOG = LoggerFactory.getLogger(AbstractRuntimeConfigurationBroker.class);
1:     protected final ReentrantReadWriteLock addDestinationBarrier = new ReentrantReadWriteLock();
1:     protected final ReentrantReadWriteLock addConnectionBarrier = new ReentrantReadWriteLock();
1:     protected Runnable monitorTask;
1:     protected ConcurrentLinkedQueue<Runnable> addDestinationWork = new ConcurrentLinkedQueue<Runnable>();
1:     protected ConcurrentLinkedQueue<Runnable> addConnectionWork = new ConcurrentLinkedQueue<Runnable>();
1:     protected ObjectName objectName;
1:     protected String infoString;
1: 
1:     public AbstractRuntimeConfigurationBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:     }
1: 
1:     @Override
1:     public void stop() throws Exception {
1:         if (monitorTask != null) {
1:             try {
1:                 this.getBrokerService().getScheduler().cancel(monitorTask);
1:             } catch (Exception letsNotStopStop) {
1:                 LOG.warn("Failed to cancel config monitor task", letsNotStopStop);
1:             }
1:         }
1:         unregisterMbean();
1:         super.stop();
1:     }
1: 
1:     protected void registerMbean() {
1: 
1:     }
1: 
1:     protected void unregisterMbean() {
1: 
1:     }
1: 
1:     // modification to virtual destinations interceptor needs exclusive access to destination add
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:         Runnable work = addDestinationWork.poll();
1:         if (work != null) {
1:             try {
1:                 addDestinationBarrier.writeLock().lockInterruptibly();
1:                 do {
1:                     work.run();
1:                     work = addDestinationWork.poll();
1:                 } while (work != null);
1:                 return super.addDestination(context, destination, createIfTemporary);
1:             } finally {
1:                 addDestinationBarrier.writeLock().unlock();
1:             }
1:         } else {
1:             try {
1:                 addDestinationBarrier.readLock().lockInterruptibly();
1:                 return super.addDestination(context, destination, createIfTemporary);
1:             } finally {
1:                 addDestinationBarrier.readLock().unlock();
1:             }
1:         }
1:     }
1: 
1:     // modification to authentication plugin needs exclusive access to connection add
1:     @Override
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         Runnable work = addConnectionWork.poll();
1:         if (work != null) {
1:             try {
1:                 addConnectionBarrier.writeLock().lockInterruptibly();
1:                 do {
1:                     work.run();
1:                     work = addConnectionWork.poll();
1:                 } while (work != null);
1:                 super.addConnection(context, info);
1:             } finally {
1:                 addConnectionBarrier.writeLock().unlock();
1:             }
1:         } else {
1:             try {
1:                 addConnectionBarrier.readLock().lockInterruptibly();
1:                 super.addConnection(context, info);
1:             } finally {
1:                 addConnectionBarrier.readLock().unlock();
1:             }
1:         }
1:     }
1: 
0:     protected void debug(String s) {
1:         LOG.debug(s);
1:     }
1: 
0:     protected void info(String s) {
1:         LOG.info(filterPasswords(s));
1:         if (infoString != null) {
1:             infoString += s;
1:             infoString += ";";
1:         }
1:     }
1: 
0:     protected void info(String s, Throwable t) {
1:         LOG.info(filterPasswords(s), t);
1:         if (infoString != null) {
1:             infoString += s;
1:             infoString += ", " + t;
1:             infoString += ";";
1:         }
1:     }
1: 
1:     Pattern matchPassword = Pattern.compile("password=.*,");
1:     protected String filterPasswords(Object toEscape) {
1:         return matchPassword.matcher(toEscape.toString()).replaceAll("password=???,");
1:     }
1: 
1: }
============================================================================