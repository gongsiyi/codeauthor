1:c1ebbc1: /**
1:c1ebbc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c1ebbc1:  * contributor license agreements.  See the NOTICE file distributed with
1:c1ebbc1:  * this work for additional information regarding copyright ownership.
1:c1ebbc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c1ebbc1:  * (the "License"); you may not use this file except in compliance with
1:c1ebbc1:  * the License.  You may obtain a copy of the License at
1:c1ebbc1:  *
1:c1ebbc1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c1ebbc1:  *
1:c1ebbc1:  * Unless required by applicable law or agreed to in writing, software
1:c1ebbc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1ebbc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1ebbc1:  * See the License for the specific language governing permissions and
1:c1ebbc1:  * limitations under the License.
1:c1ebbc1:  */
1:c1ebbc1: 
1:c1ebbc1: package org.apache.activemq.usecases;
1:c1ebbc1: 
1:c1ebbc1: import javax.jms.Connection;
1:c1ebbc1: import javax.jms.Message;
1:c1ebbc1: import javax.jms.MessageProducer;
1:c1ebbc1: import javax.jms.Session;
1:c1ebbc1: 
1:c1ebbc1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:c1ebbc1: import org.apache.activemq.broker.ConnectionContext;
1:06a4276: import org.apache.activemq.broker.region.Queue;
1:06a4276: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:06a4276: import org.junit.Assert;
1:c1ebbc1: import org.slf4j.Logger;
1:c1ebbc1: import org.slf4j.LoggerFactory;
1:c1ebbc1: 
1:c1ebbc1: /**
1:c1ebbc1:  * This unit test creates a fixed size queue and moves the last message in the
1:c1ebbc1:  * queue to another queue. The test is used to very the performance of
1:c1ebbc1:  * {@link org.apache.activemq.broker.region.Queue#moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext, String, org.apache.activemq.command.ActiveMQDestination)}.
1:c1ebbc1:  */
1:c1ebbc1: public class LargeQueueSparseDeleteTest extends EmbeddedBrokerTestSupport {
1:c1ebbc1:     private static final Logger LOG = LoggerFactory.getLogger(LargeQueueSparseDeleteTest.class);
1:c1ebbc1: 
1:c1ebbc1:     /**
1:c1ebbc1:      * {@inheritDoc}
1:c1ebbc1:      */
1:c1ebbc1:     @Override
1:c1ebbc1:     protected void setUp() throws Exception {
1:c1ebbc1:         super.useTopic = false;
1:c1ebbc1:         super.setUp();
1:c1ebbc1:     }
1:c1ebbc1: 
1:c1ebbc1:     /**
1:c1ebbc1:      * The test queue is filled with QUEUE_SIZE test messages, each with a
1:c1ebbc1:      * numeric id property beginning at 0. Once the queue is filled, the last
1:c1ebbc1:      * message (id = QUEUE_SIZE-1) is moved to another queue. The test succeeds
1:c1ebbc1:      * if the move completes within TEST_TIMEOUT milliseconds.
1:c1ebbc1:      *
1:c1ebbc1:      * @throws Exception
1:c1ebbc1:      */
1:c1ebbc1:     public void testMoveMessages() throws Exception {
1:c1ebbc1:         final int QUEUE_SIZE = 30000;
1:c1ebbc1:         final String MOVE_TO_DESTINATION_NAME = getDestinationString()
1:c1ebbc1:                 + ".dest";
1:6bf2222:         final long TEST_TIMEOUT = 20000;
1:c1ebbc1: 
1:c1ebbc1:         // Populate a test queue with uniquely-identifiable messages.
1:c1ebbc1:         Connection conn = createConnection();
1:c1ebbc1:         try {
1:c1ebbc1:             conn.start();
1:c1ebbc1:             Session session = conn.createSession(true,
1:c1ebbc1:                     Session.SESSION_TRANSACTED);
1:c1ebbc1:             MessageProducer producer = session.createProducer(destination);
1:c1ebbc1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:c1ebbc1:                 Message message = session.createMessage();
1:c1ebbc1:                 message.setIntProperty("id", i);
1:c1ebbc1:                 producer.send(message);
1:c1ebbc1:             }
1:c1ebbc1:             session.commit();
1:c1ebbc1:         } finally {
1:c1ebbc1:             conn.close();
1:c1ebbc1:         }
1:c1ebbc1: 
1:c1ebbc1:         // Access the implementation of the test queue and move the last message
1:c1ebbc1:         // to another queue. Verify that the move occurred within the limits of
1:c1ebbc1:         // the test.
1:c1ebbc1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:c1ebbc1:                 destination);
1:c1ebbc1: 
1:50d27e7:         ConnectionContext context = new ConnectionContext();
1:c1ebbc1:         context.setBroker(broker.getBroker());
1:c1ebbc1:         context.getMessageEvaluationContext().setDestination(destination);
1:c1ebbc1: 
1:c1ebbc1:         long startTimeMillis = System.currentTimeMillis();
1:c1ebbc1:         Assert.assertEquals(1, queue
1:c1ebbc1:                 .moveMatchingMessagesTo(context, "id=" + (QUEUE_SIZE - 1),
1:c1ebbc1:                         createDestination(MOVE_TO_DESTINATION_NAME)));
1:c1ebbc1: 
1:c1ebbc1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1:c1ebbc1: 
1:c1ebbc1:         LOG.info("It took " + durationMillis
1:c1ebbc1:                 + "ms to move the last message from a queue a " + QUEUE_SIZE
1:c1ebbc1:                 + " messages.");
1:c1ebbc1: 
1:c1ebbc1:         Assert.assertTrue("Moving the message took too long: " + durationMillis
1:c1ebbc1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:c1ebbc1:     }
1:c1ebbc1: 
1:c1ebbc1:     public void testCopyMessages() throws Exception {
1:c1ebbc1:         final int QUEUE_SIZE = 30000;
1:c1ebbc1:         final String MOVE_TO_DESTINATION_NAME = getDestinationString()
1:c1ebbc1:                 + ".dest";
1:da43029:         final long TEST_TIMEOUT = 10000;
1:c1ebbc1: 
1:c1ebbc1:         // Populate a test queue with uniquely-identifiable messages.
1:c1ebbc1:         Connection conn = createConnection();
1:c1ebbc1:         try {
1:c1ebbc1:             conn.start();
1:c1ebbc1:             Session session = conn.createSession(true,
1:c1ebbc1:                     Session.SESSION_TRANSACTED);
1:c1ebbc1:             MessageProducer producer = session.createProducer(destination);
1:c1ebbc1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:c1ebbc1:                 Message message = session.createMessage();
1:c1ebbc1:                 message.setIntProperty("id", i);
1:c1ebbc1:                 producer.send(message);
1:c1ebbc1:             }
1:c1ebbc1:             session.commit();
1:c1ebbc1:         } finally {
1:c1ebbc1:             conn.close();
1:c1ebbc1:         }
1:c1ebbc1: 
1:c1ebbc1:         // Access the implementation of the test queue and move the last message
1:c1ebbc1:         // to another queue. Verify that the move occurred within the limits of
1:c1ebbc1:         // the test.
1:c1ebbc1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:c1ebbc1:                 destination);
1:c1ebbc1: 
1:50d27e7:         ConnectionContext context = new ConnectionContext();
1:c1ebbc1:         context.setBroker(broker.getBroker());
1:c1ebbc1:         context.getMessageEvaluationContext().setDestination(destination);
1:c1ebbc1: 
1:c1ebbc1:         long startTimeMillis = System.currentTimeMillis();
1:c1ebbc1:         Assert.assertEquals(1,
1:c1ebbc1:             queue.copyMatchingMessagesTo(context, "id=" + (QUEUE_SIZE - 1), createDestination(MOVE_TO_DESTINATION_NAME)));
1:c1ebbc1: 
1:c1ebbc1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1:c1ebbc1: 
1:c1ebbc1:         LOG.info("It took " + durationMillis
1:c1ebbc1:                 + "ms to copy the last message from a queue a " + QUEUE_SIZE
1:c1ebbc1:                 + " messages.");
1:c1ebbc1: 
1:c1ebbc1:         Assert.assertTrue("Copying the message took too long: " + durationMillis
1:c1ebbc1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:c1ebbc1:     }
1:c1ebbc1: 
1:c1ebbc1:     public void testRemoveMessages() throws Exception {
1:c1ebbc1:         final int QUEUE_SIZE = 30000;
1:6bf2222:         final long TEST_TIMEOUT = 20000;
1:c1ebbc1: 
1:c1ebbc1:         // Populate a test queue with uniquely-identifiable messages.
1:c1ebbc1:         Connection conn = createConnection();
1:c1ebbc1:         try {
1:c1ebbc1:             conn.start();
1:c1ebbc1:             Session session = conn.createSession(true,
1:c1ebbc1:                     Session.SESSION_TRANSACTED);
1:c1ebbc1:             MessageProducer producer = session.createProducer(destination);
1:c1ebbc1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:c1ebbc1:                 Message message = session.createMessage();
1:c1ebbc1:                 message.setIntProperty("id", i);
1:c1ebbc1:                 producer.send(message);
1:c1ebbc1:             }
1:c1ebbc1:             session.commit();
1:c1ebbc1:         } finally {
1:c1ebbc1:             conn.close();
1:c1ebbc1:         }
1:c1ebbc1: 
1:c1ebbc1:         // Access the implementation of the test queue and move the last message
1:c1ebbc1:         // to another queue. Verify that the move occurred within the limits of
1:c1ebbc1:         // the test.
1:c1ebbc1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:c1ebbc1:                 destination);
1:c1ebbc1: 
1:50d27e7:         ConnectionContext context = new ConnectionContext();
1:c1ebbc1:         context.setBroker(broker.getBroker());
1:c1ebbc1:         context.getMessageEvaluationContext().setDestination(destination);
1:c1ebbc1: 
1:c1ebbc1:         long startTimeMillis = System.currentTimeMillis();
1:c1ebbc1:         Assert.assertEquals(1,
1:c1ebbc1:             queue.removeMatchingMessages("id=" + (QUEUE_SIZE - 1)));
1:c1ebbc1: 
1:c1ebbc1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1:c1ebbc1: 
1:c1ebbc1:         LOG.info("It took " + durationMillis
1:c1ebbc1:                 + "ms to remove the last message from a queue a " + QUEUE_SIZE
1:c1ebbc1:                 + " messages.");
1:c1ebbc1: 
1:c1ebbc1:         Assert.assertTrue("Removing the message took too long: " + durationMillis
1:c1ebbc1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:c1ebbc1:     }
1:c1ebbc1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = new ConnectionContext();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = new ConnectionContext();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = new ConnectionContext();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6bf2222
/////////////////////////////////////////////////////////////////////////
1:         final long TEST_TIMEOUT = 20000;
/////////////////////////////////////////////////////////////////////////
1:         final long TEST_TIMEOUT = 20000;
commit:ef24cc9
commit:da43029
/////////////////////////////////////////////////////////////////////////
1:         final long TEST_TIMEOUT = 10000;
/////////////////////////////////////////////////////////////////////////
0:         final long TEST_TIMEOUT = 10000;
/////////////////////////////////////////////////////////////////////////
0:         final long TEST_TIMEOUT = 10000;
commit:06a4276
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
0:         final long TEST_TIMEOUT = 8000;
/////////////////////////////////////////////////////////////////////////
0:         final long TEST_TIMEOUT = 8000;
/////////////////////////////////////////////////////////////////////////
0:         final long TEST_TIMEOUT = 8000;
commit:c1ebbc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
0: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: import org.junit.Assert;
1: 
1: /**
1:  * This unit test creates a fixed size queue and moves the last message in the
1:  * queue to another queue. The test is used to very the performance of
1:  * {@link org.apache.activemq.broker.region.Queue#moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext, String, org.apache.activemq.command.ActiveMQDestination)}.
1:  */
1: public class LargeQueueSparseDeleteTest extends EmbeddedBrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(LargeQueueSparseDeleteTest.class);
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.useTopic = false;
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * The test queue is filled with QUEUE_SIZE test messages, each with a
1:      * numeric id property beginning at 0. Once the queue is filled, the last
1:      * message (id = QUEUE_SIZE-1) is moved to another queue. The test succeeds
1:      * if the move completes within TEST_TIMEOUT milliseconds.
1:      *
1:      * @throws Exception
1:      */
1:     public void testMoveMessages() throws Exception {
1:         final int QUEUE_SIZE = 30000;
1:         final String MOVE_TO_DESTINATION_NAME = getDestinationString()
1:                 + ".dest";
0:         final long TEST_TIMEOUT = 6000;
1: 
1:         // Populate a test queue with uniquely-identifiable messages.
1:         Connection conn = createConnection();
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(true,
1:                     Session.SESSION_TRANSACTED);
1:             MessageProducer producer = session.createProducer(destination);
1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:                 Message message = session.createMessage();
1:                 message.setIntProperty("id", i);
1:                 producer.send(message);
1:             }
1:             session.commit();
1:         } finally {
1:             conn.close();
1:         }
1: 
1:         // Access the implementation of the test queue and move the last message
1:         // to another queue. Verify that the move occurred within the limits of
1:         // the test.
1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:                 destination);
1: 
0:         ConnectionContext context = new ConnectionContext(
0:                 new NonCachedMessageEvaluationContext());
1:         context.setBroker(broker.getBroker());
1:         context.getMessageEvaluationContext().setDestination(destination);
1: 
1:         long startTimeMillis = System.currentTimeMillis();
1:         Assert.assertEquals(1, queue
1:                 .moveMatchingMessagesTo(context, "id=" + (QUEUE_SIZE - 1),
1:                         createDestination(MOVE_TO_DESTINATION_NAME)));
1: 
1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1: 
1:         LOG.info("It took " + durationMillis
1:                 + "ms to move the last message from a queue a " + QUEUE_SIZE
1:                 + " messages.");
1: 
1:         Assert.assertTrue("Moving the message took too long: " + durationMillis
1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:     }
1: 
1:     public void testCopyMessages() throws Exception {
1:         final int QUEUE_SIZE = 30000;
1:         final String MOVE_TO_DESTINATION_NAME = getDestinationString()
1:                 + ".dest";
0:         final long TEST_TIMEOUT = 6000;
1: 
1:         // Populate a test queue with uniquely-identifiable messages.
1:         Connection conn = createConnection();
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(true,
1:                     Session.SESSION_TRANSACTED);
1:             MessageProducer producer = session.createProducer(destination);
1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:                 Message message = session.createMessage();
1:                 message.setIntProperty("id", i);
1:                 producer.send(message);
1:             }
1:             session.commit();
1:         } finally {
1:             conn.close();
1:         }
1: 
1:         // Access the implementation of the test queue and move the last message
1:         // to another queue. Verify that the move occurred within the limits of
1:         // the test.
1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:                 destination);
1: 
0:         ConnectionContext context = new ConnectionContext(
0:                 new NonCachedMessageEvaluationContext());
1:         context.setBroker(broker.getBroker());
1:         context.getMessageEvaluationContext().setDestination(destination);
1: 
1:         long startTimeMillis = System.currentTimeMillis();
1:         Assert.assertEquals(1,
1:             queue.copyMatchingMessagesTo(context, "id=" + (QUEUE_SIZE - 1), createDestination(MOVE_TO_DESTINATION_NAME)));
1: 
1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1: 
1:         LOG.info("It took " + durationMillis
1:                 + "ms to copy the last message from a queue a " + QUEUE_SIZE
1:                 + " messages.");
1: 
1:         Assert.assertTrue("Copying the message took too long: " + durationMillis
1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:     }
1: 
1:     public void testRemoveMessages() throws Exception {
1:         final int QUEUE_SIZE = 30000;
0:         final long TEST_TIMEOUT = 6000;
1: 
1:         // Populate a test queue with uniquely-identifiable messages.
1:         Connection conn = createConnection();
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(true,
1:                     Session.SESSION_TRANSACTED);
1:             MessageProducer producer = session.createProducer(destination);
1:             for (int i = 0; i < QUEUE_SIZE; i++) {
1:                 Message message = session.createMessage();
1:                 message.setIntProperty("id", i);
1:                 producer.send(message);
1:             }
1:             session.commit();
1:         } finally {
1:             conn.close();
1:         }
1: 
1:         // Access the implementation of the test queue and move the last message
1:         // to another queue. Verify that the move occurred within the limits of
1:         // the test.
1:         Queue queue = (Queue) broker.getRegionBroker().getDestinationMap().get(
1:                 destination);
1: 
0:         ConnectionContext context = new ConnectionContext(
0:                 new NonCachedMessageEvaluationContext());
1:         context.setBroker(broker.getBroker());
1:         context.getMessageEvaluationContext().setDestination(destination);
1: 
1:         long startTimeMillis = System.currentTimeMillis();
1:         Assert.assertEquals(1,
1:             queue.removeMatchingMessages("id=" + (QUEUE_SIZE - 1)));
1: 
1:         long durationMillis = System.currentTimeMillis() - startTimeMillis;
1: 
1:         LOG.info("It took " + durationMillis
1:                 + "ms to remove the last message from a queue a " + QUEUE_SIZE
1:                 + " messages.");
1: 
1:         Assert.assertTrue("Removing the message took too long: " + durationMillis
1:                 + "ms", durationMillis < TEST_TIMEOUT);
1:     }
1: }
============================================================================