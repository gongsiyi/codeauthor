1:13b915a: /**
1:13b915a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:13b915a:  * contributor license agreements.  See the NOTICE file distributed with
1:13b915a:  * this work for additional information regarding copyright ownership.
1:13b915a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:13b915a:  * (the "License"); you may not use this file except in compliance with
1:13b915a:  * the License.  You may obtain a copy of the License at
1:13b915a:  *
1:13b915a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:13b915a:  *
1:13b915a:  * Unless required by applicable law or agreed to in writing, software
1:13b915a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:13b915a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:13b915a:  * See the License for the specific language governing permissions and
1:13b915a:  * limitations under the License.
1:13b915a:  */
1:13b915a: package org.apache.activemq.transport.amqp.interop;
1:13b915a: 
1:13b915a: import static org.junit.Assert.assertEquals;
1:13b915a: import static org.junit.Assert.assertNotNull;
1:13b915a: import static org.junit.Assert.assertTrue;
1:13b915a: 
1:13b915a: import java.util.Arrays;
1:13b915a: import java.util.Collection;
1:13b915a: import java.util.concurrent.TimeUnit;
1:13b915a: 
1:13b915a: import javax.jms.BytesMessage;
1:13b915a: import javax.jms.Connection;
1:13b915a: import javax.jms.Destination;
1:13b915a: import javax.jms.Message;
1:13b915a: import javax.jms.MessageConsumer;
1:13b915a: import javax.jms.MessageProducer;
1:13b915a: import javax.jms.Session;
1:13b915a: 
1:13b915a: import org.apache.activemq.ActiveMQConnectionFactory;
1:13b915a: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpNoLocalFilter;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:13b915a: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:13b915a: import org.junit.Test;
1:13b915a: import org.junit.runner.RunWith;
1:13b915a: import org.junit.runners.Parameterized;
1:13b915a: import org.junit.runners.Parameterized.Parameters;
1:13b915a: 
1:13b915a: /**
1:13b915a:  * Test that the broker can pass through an AMQP message with a described type
1:13b915a:  * in the message body regardless of transformer in use.
1:13b915a:  */
1:13b915a: @RunWith(Parameterized.class)
1:13b915a: public class AmqpDescribedTypePayloadTest extends AmqpClientTestSupport {
1:13b915a: 
1:13b915a:     private final String transformer;
1:13b915a: 
1:13b915a:     @Parameters(name="{0}")
1:13b915a:     public static Collection<Object[]> data() {
1:13b915a:         return Arrays.asList(new Object[][] {
1:13b915a:             {"jms"},
1:13b915a:             {"native"},
1:13b915a:             {"raw"}
1:13b915a:         });
1:13b915a:     }
1:13b915a: 
1:13b915a:     public AmqpDescribedTypePayloadTest(String transformer) {
1:13b915a:         this.transformer = transformer;
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Override
1:13b915a:     protected String getAmqpTransformer() {
1:13b915a:         return transformer;
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Test(timeout = 60000)
1:13b915a:     public void testSendMessageWithDescribedTypeInBody() throws Exception {
1:13b915a:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:13b915a:         AmqpSession session = connection.createSession();
1:13b915a: 
1:13b915a:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:13b915a:         AmqpMessage message = new AmqpMessage();
1:13b915a:         message.setDescribedType(new AmqpNoLocalFilter());
1:13b915a:         sender.send(message);
1:13b915a:         sender.close();
1:13b915a: 
1:13b915a:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:13b915a:         assertEquals(1, queue.getQueueSize());
1:13b915a: 
1:13b915a:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:13b915a:         receiver.flow(1);
1:13b915a:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:13b915a:         assertNotNull(received);
1:13b915a:         assertNotNull(received.getDescribedType());
1:13b915a:         receiver.close();
1:13b915a: 
1:13b915a:         connection.close();
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Test(timeout = 60000)
1:13b915a:     public void testSendMessageWithDescribedTypeInBodyReceiveOverOpenWire() throws Exception {
1:13b915a: 
1:13b915a:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:13b915a:         AmqpSession session = connection.createSession();
1:13b915a: 
1:13b915a:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:13b915a:         AmqpMessage message = new AmqpMessage();
1:13b915a:         message.setDescribedType(new AmqpNoLocalFilter());
1:13b915a:         sender.send(message);
1:13b915a:         sender.close();
1:13b915a:         connection.close();
1:13b915a: 
1:13b915a:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:13b915a:         assertEquals(1, queue.getQueueSize());
1:13b915a: 
1:13b915a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:13b915a:         Connection jmsConnection = factory.createConnection();
1:13b915a:         Session jmsSession = jmsConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13b915a:         Destination destination = jmsSession.createQueue(getTestName());
1:13b915a:         MessageConsumer jmsConsumer = jmsSession.createConsumer(destination);
1:13b915a:         jmsConnection.start();
1:13b915a: 
1:13b915a:         Message received = jmsConsumer.receive(5000);
1:13b915a:         assertNotNull(received);
1:13b915a:         assertTrue(received instanceof BytesMessage);
1:13b915a:         jmsConnection.close();
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Test(timeout = 60000)
1:13b915a:     public void testDescribedTypeMessageRoundTrips() throws Exception {
1:13b915a: 
1:13b915a:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:13b915a:         AmqpSession session = connection.createSession();
1:13b915a: 
1:13b915a:         // Send with AMQP client.
1:13b915a:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:13b915a:         AmqpMessage message = new AmqpMessage();
1:13b915a:         message.setDescribedType(new AmqpNoLocalFilter());
1:13b915a:         sender.send(message);
1:13b915a:         sender.close();
1:13b915a: 
1:13b915a:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:13b915a:         assertEquals(1, queue.getQueueSize());
1:13b915a: 
1:13b915a:         // Receive and resend with OpenWire JMS client
1:13b915a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:13b915a:         Connection jmsConnection = factory.createConnection();
1:13b915a:         Session jmsSession = jmsConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13b915a:         Destination destination = jmsSession.createQueue(getTestName());
1:13b915a:         MessageConsumer jmsConsumer = jmsSession.createConsumer(destination);
1:13b915a:         jmsConnection.start();
1:13b915a: 
1:13b915a:         Message received = jmsConsumer.receive(5000);
1:13b915a:         assertNotNull(received);
1:13b915a:         assertTrue(received instanceof BytesMessage);
1:13b915a: 
1:13b915a:         MessageProducer jmsProducer = jmsSession.createProducer(destination);
1:13b915a:         jmsProducer.send(received);
1:13b915a:         jmsConnection.close();
1:13b915a: 
1:13b915a:         assertEquals(1, queue.getQueueSize());
1:13b915a: 
1:13b915a:         // Now lets receive it with AMQP and see that we get back what we expected.
1:13b915a:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:13b915a:         receiver.flow(1);
1:13b915a:         AmqpMessage returned = receiver.receive(5, TimeUnit.SECONDS);
1:13b915a:         assertNotNull(returned);
1:13b915a:         assertNotNull(returned.getDescribedType());
1:13b915a:         receiver.close();
1:13b915a:         connection.close();
1:13b915a:     }
1:13b915a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:13b915a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpNoLocalFilter;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test that the broker can pass through an AMQP message with a described type
1:  * in the message body regardless of transformer in use.
1:  */
1: @RunWith(Parameterized.class)
1: public class AmqpDescribedTypePayloadTest extends AmqpClientTestSupport {
1: 
1:     private final String transformer;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"jms"},
1:             {"native"},
1:             {"raw"}
1:         });
1:     }
1: 
1:     public AmqpDescribedTypePayloadTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return transformer;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageWithDescribedTypeInBody() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpMessage message = new AmqpMessage();
1:         message.setDescribedType(new AmqpNoLocalFilter());
1:         sender.send(message);
1:         sender.close();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         assertNotNull(received.getDescribedType());
1:         receiver.close();
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageWithDescribedTypeInBodyReceiveOverOpenWire() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpMessage message = new AmqpMessage();
1:         message.setDescribedType(new AmqpNoLocalFilter());
1:         sender.send(message);
1:         sender.close();
1:         connection.close();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:         Connection jmsConnection = factory.createConnection();
1:         Session jmsSession = jmsConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = jmsSession.createQueue(getTestName());
1:         MessageConsumer jmsConsumer = jmsSession.createConsumer(destination);
1:         jmsConnection.start();
1: 
1:         Message received = jmsConsumer.receive(5000);
1:         assertNotNull(received);
1:         assertTrue(received instanceof BytesMessage);
1:         jmsConnection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDescribedTypeMessageRoundTrips() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         // Send with AMQP client.
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpMessage message = new AmqpMessage();
1:         message.setDescribedType(new AmqpNoLocalFilter());
1:         sender.send(message);
1:         sender.close();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         // Receive and resend with OpenWire JMS client
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:         Connection jmsConnection = factory.createConnection();
1:         Session jmsSession = jmsConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = jmsSession.createQueue(getTestName());
1:         MessageConsumer jmsConsumer = jmsSession.createConsumer(destination);
1:         jmsConnection.start();
1: 
1:         Message received = jmsConsumer.receive(5000);
1:         assertNotNull(received);
1:         assertTrue(received instanceof BytesMessage);
1: 
1:         MessageProducer jmsProducer = jmsSession.createProducer(destination);
1:         jmsProducer.send(received);
1:         jmsConnection.close();
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         // Now lets receive it with AMQP and see that we get back what we expected.
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(1);
1:         AmqpMessage returned = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(returned);
1:         assertNotNull(returned.getDescribedType());
1:         receiver.close();
1:         connection.close();
1:     }
1: }
============================================================================