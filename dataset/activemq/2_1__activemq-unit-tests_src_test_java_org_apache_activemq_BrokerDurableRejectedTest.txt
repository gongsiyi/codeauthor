1:741e3aa: /**
1:741e3aa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:741e3aa:  * contributor license agreements.  See the NOTICE file distributed with
1:741e3aa:  * this work for additional information regarding copyright ownership.
1:741e3aa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:741e3aa:  * (the "License"); you may not use this file except in compliance with
1:741e3aa:  * the License.  You may obtain a copy of the License at
1:741e3aa:  *
1:741e3aa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:741e3aa:  *
1:741e3aa:  * Unless required by applicable law or agreed to in writing, software
1:741e3aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:741e3aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:741e3aa:  * See the License for the specific language governing permissions and
1:741e3aa:  * limitations under the License.
1:741e3aa:  */
1:741e3aa: package org.apache.activemq;
1:741e3aa: 
1:741e3aa: import javax.jms.Connection;
1:741e3aa: import javax.jms.Destination;
1:741e3aa: import javax.jms.JMSException;
1:741e3aa: import javax.jms.Session;
1:741e3aa: import javax.jms.Topic;
1:741e3aa: import org.apache.activemq.broker.BrokerRegistry;
1:741e3aa: import org.apache.activemq.transport.stomp.Stomp;
1:741e3aa: import org.apache.activemq.transport.stomp.StompConnection;
1:741e3aa: 
1:741e3aa: public class BrokerDurableRejectedTest extends TestSupport {
1:741e3aa: 
1:741e3aa:     protected Connection connection;
1:741e3aa:     protected Session consumeSession;
1:741e3aa:     protected Destination consumerDestination;
1:741e3aa: 
1:741e3aa:     @Override
1:741e3aa:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:741e3aa:         return new ActiveMQConnectionFactory("vm:(broker:(stomp://localhost:0)?persistent=false&rejectDurableConsumers=true)");
1:741e3aa:     }
1:741e3aa: 
1:741e3aa:     protected void setUp() throws Exception {
1:741e3aa:         super.setUp();
1:741e3aa: 
1:741e3aa:         connectionFactory = createConnectionFactory();
1:741e3aa:         connection = createConnection();
1:741e3aa: 
1:741e3aa:         connection.setClientID(getClass().getName());
1:741e3aa: 
1:741e3aa:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:741e3aa: 
1:741e3aa:         consumerDestination = consumeSession.createTopic("TestDurableRejected");
1:741e3aa:         connection.start();
1:741e3aa:     }
1:741e3aa: 
1:741e3aa:     public void testDurableTopicConsumerJms() throws Exception {
1:741e3aa: 
1:741e3aa:         consumeSession.createConsumer(consumerDestination);
1:741e3aa:         try {
1:741e3aa: 
1:741e3aa:             consumeSession.createDurableSubscriber((Topic)consumerDestination, getName());
1:741e3aa:             fail("Expect not allowed jms exception on durable creation");
1:741e3aa: 
1:741e3aa:         } catch (JMSException expected) {
1:741e3aa:             assertTrue("expected exception", expected.getMessage().contains("not allowed"));
1:741e3aa:         }
1:741e3aa:     }
1:741e3aa: 
1:741e3aa:     public void testDurableTopicConsumerStomp() throws Exception {
1:741e3aa: 
1:741e3aa:         // verify stomp ok in this case
1:741e3aa:         StompConnection stompConnection = new StompConnection();
1:741e3aa:         stompConnection.open("localhost", BrokerRegistry.getInstance().findFirst().getTransportConnectorByScheme("stomp").getPublishableConnectURI().getPort());
1:741e3aa: 
1:741e3aa:         // connect
1:741e3aa:         String frame = "CONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa:         frame = stompConnection.receiveFrame();
1:741e3aa:         assertTrue(frame.startsWith("CONNECTED"));
1:741e3aa: 
1:741e3aa:         // subscribe
1:741e3aa:         frame = "SUBSCRIBE\n" + "destination:/topic/" + ((Topic) consumerDestination).getTopicName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa: 
1:741e3aa:         frame = stompConnection.receiveFrame();
1:741e3aa:         assertTrue(frame.startsWith("ERROR"));
1:741e3aa:         assertTrue("contains expected message -" + frame, frame.contains("not allowed"));
1:741e3aa: 
1:741e3aa:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa:     }
1:741e3aa: 
1:741e3aa: 
1:741e3aa:     public void testDurableTopicConsumerStompWithReceipt() throws Exception {
1:741e3aa: 
1:741e3aa:         // verify stomp ok in this case
1:741e3aa:         StompConnection stompConnection = new StompConnection();
1:741e3aa:         stompConnection.open("localhost", BrokerRegistry.getInstance().findFirst().getTransportConnectorByScheme("stomp").getPublishableConnectURI().getPort());
1:741e3aa: 
1:741e3aa:         // connect
1:741e3aa:         String frame = "CONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa:         frame = stompConnection.receiveFrame();
1:741e3aa:         assertTrue(frame.startsWith("CONNECTED"));
1:741e3aa: 
1:741e3aa:         // subscribe
1:741e3aa:         frame = "SUBSCRIBE\n" + "destination:/topic/" + ((Topic) consumerDestination).getTopicName() + "\nreceipt:1\n"
1:741e3aa:                 + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa: 
1:741e3aa:         frame = stompConnection.receiveFrame();
1:741e3aa:         assertTrue(frame.startsWith("ERROR"));
1:741e3aa:         assertTrue("contains expected message -" + frame, frame.contains("not allowed"));
1:741e3aa: 
1:741e3aa:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:741e3aa:         stompConnection.sendFrame(frame);
1:741e3aa:     }
1:741e3aa: 
1:741e3aa: 
1:741e3aa:     protected void tearDown() throws Exception {
1:741e3aa:         if (connection != null) {
1:741e3aa:             connection.close();
1:741e3aa:         }
1:741e3aa:         super.tearDown();
1:741e3aa:     }
1:741e3aa: 
1:741e3aa: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:741e3aa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: 
1: public class BrokerDurableRejectedTest extends TestSupport {
1: 
1:     protected Connection connection;
1:     protected Session consumeSession;
1:     protected Destination consumerDestination;
1: 
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm:(broker:(stomp://localhost:0)?persistent=false&rejectDurableConsumers=true)");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connectionFactory = createConnectionFactory();
1:         connection = createConnection();
1: 
1:         connection.setClientID(getClass().getName());
1: 
1:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         consumerDestination = consumeSession.createTopic("TestDurableRejected");
1:         connection.start();
1:     }
1: 
1:     public void testDurableTopicConsumerJms() throws Exception {
1: 
1:         consumeSession.createConsumer(consumerDestination);
1:         try {
1: 
1:             consumeSession.createDurableSubscriber((Topic)consumerDestination, getName());
1:             fail("Expect not allowed jms exception on durable creation");
1: 
1:         } catch (JMSException expected) {
1:             assertTrue("expected exception", expected.getMessage().contains("not allowed"));
1:         }
1:     }
1: 
1:     public void testDurableTopicConsumerStomp() throws Exception {
1: 
1:         // verify stomp ok in this case
1:         StompConnection stompConnection = new StompConnection();
1:         stompConnection.open("localhost", BrokerRegistry.getInstance().findFirst().getTransportConnectorByScheme("stomp").getPublishableConnectURI().getPort());
1: 
1:         // connect
1:         String frame = "CONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         // subscribe
1:         frame = "SUBSCRIBE\n" + "destination:/topic/" + ((Topic) consumerDestination).getTopicName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1:         assertTrue("contains expected message -" + frame, frame.contains("not allowed"));
1: 
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1: 
1:     public void testDurableTopicConsumerStompWithReceipt() throws Exception {
1: 
1:         // verify stomp ok in this case
1:         StompConnection stompConnection = new StompConnection();
1:         stompConnection.open("localhost", BrokerRegistry.getInstance().findFirst().getTransportConnectorByScheme("stomp").getPublishableConnectURI().getPort());
1: 
1:         // connect
1:         String frame = "CONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         // subscribe
1:         frame = "SUBSCRIBE\n" + "destination:/topic/" + ((Topic) consumerDestination).getTopicName() + "\nreceipt:1\n"
1:                 + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1:         assertTrue("contains expected message -" + frame, frame.contains("not allowed"));
1: 
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1: }
============================================================================