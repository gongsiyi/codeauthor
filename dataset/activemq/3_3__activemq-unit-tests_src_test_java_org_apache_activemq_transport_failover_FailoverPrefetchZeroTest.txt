1:966de0c: /**
1:966de0c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:966de0c:  * contributor license agreements.  See the NOTICE file distributed with
1:966de0c:  * this work for additional information regarding copyright ownership.
1:966de0c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:966de0c:  * (the "License"); you may not use this file except in compliance with
1:966de0c:  * the License.  You may obtain a copy of the License at
1:966de0c:  *
1:966de0c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:966de0c:  *
1:966de0c:  * Unless required by applicable law or agreed to in writing, software
1:966de0c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:966de0c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:966de0c:  * See the License for the specific language governing permissions and
1:966de0c:  * limitations under the License.
1:966de0c:  */
1:966de0c: package org.apache.activemq.transport.failover;
2:966de0c: 
1:966de0c: import java.util.Vector;
1:966de0c: import java.util.concurrent.CountDownLatch;
1:966de0c: import java.util.concurrent.Executors;
1:966de0c: import java.util.concurrent.TimeUnit;
1:966de0c: import javax.jms.JMSException;
1:966de0c: import javax.jms.Message;
1:966de0c: import javax.jms.MessageConsumer;
1:966de0c: import javax.jms.MessageProducer;
1:966de0c: import javax.jms.Queue;
1:966de0c: import javax.jms.Session;
1:966de0c: import javax.jms.TextMessage;
1:966de0c: import org.apache.activemq.ActiveMQConnection;
1:966de0c: import org.apache.activemq.ActiveMQConnectionFactory;
1:966de0c: import org.apache.activemq.broker.BrokerPlugin;
1:966de0c: import org.apache.activemq.broker.BrokerPluginSupport;
1:966de0c: import org.apache.activemq.broker.BrokerService;
1:966de0c: import org.apache.activemq.broker.ConnectionContext;
1:966de0c: import org.apache.activemq.command.MessagePull;
1:966de0c: import org.apache.activemq.command.Response;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:966de0c: import org.junit.After;
1:966de0c: import org.junit.Test;
1:966de0c: 
1:966de0c: 
1:966de0c: import static org.junit.Assert.assertTrue;
1:966de0c: 
1:966de0c: // see: https://issues.apache.org/activemq/browse/AMQ-2877
1:966de0c: public class FailoverPrefetchZeroTest {
1:966de0c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FailoverPrefetchZeroTest.class);
1:966de0c:     private static final String QUEUE_NAME = "FailoverPrefetchZero";
1:883eed0:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:883eed0:     private String url;
1:966de0c:     final int prefetch = 0;
1:966de0c:     BrokerService broker;
1:966de0c: 
1:966de0c:     @After
1:966de0c:     public void stopBroker() throws Exception {
1:966de0c:         if (broker != null) {
1:966de0c:             broker.stop();
2:966de0c:         }
1:966de0c:     }
1:966de0c: 
1:966de0c:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:966de0c:         broker = createBroker(deleteAllMessagesOnStartup);
1:966de0c:         broker.start();
1:966de0c:     }
1:966de0c: 
1:966de0c:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:883eed0:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:883eed0:     }
1:883eed0: 
1:883eed0:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:966de0c:         broker = new BrokerService();
1:883eed0:         broker.addConnector(bindAddress);
1:966de0c:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:883eed0: 
1:883eed0:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:883eed0: 
1:966de0c:         return broker;
1:966de0c:     }
1:966de0c: 
1:7d8ce02:     @SuppressWarnings("unchecked")
1:966de0c:     @Test
1:966de0c:     public void testPrefetchZeroConsumerThroughRestart() throws Exception {
1:966de0c:         broker = createBroker(true);
1:966de0c: 
1:966de0c:         final CountDownLatch pullDone = new CountDownLatch(1);
1:966de0c:         broker.setPlugins(new BrokerPlugin[]{
1:966de0c:                 new BrokerPluginSupport() {
1:966de0c:                     @Override
1:966de0c:                     public Response messagePull(ConnectionContext context, final MessagePull pull) throws Exception {
1:966de0c:                         context.setDontSendReponse(true);
1:966de0c:                         pullDone.countDown();
1:966de0c:                         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:966de0c:                             public void run() {
1:966de0c:                                 LOG.info("Stopping broker on pull: " + pull);
1:966de0c:                                 try {
1:966de0c:                                     broker.stop();
1:966de0c:                                 } catch (Exception e) {
1:966de0c:                                     e.printStackTrace();
1:966de0c:                                 }
1:966de0c:                             }
1:966de0c:                         });
1:966de0c:                         return null;
1:966de0c:                     }
1:966de0c:                 }
1:966de0c:         });
1:966de0c:         broker.start();
1:966de0c: 
1:966de0c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:966de0c:         cf.setWatchTopicAdvisories(false);
1:966de0c: 
1:966de0c:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:966de0c:         connection.start();
1:966de0c: 
1:966de0c:         final Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:966de0c:         final Queue destination = consumerSession.createQueue(QUEUE_NAME + "?consumer.prefetchSize=" + prefetch);
1:966de0c: 
1:966de0c:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:966de0c:         produceMessage(consumerSession, destination, 1);
1:966de0c: 
1:966de0c:         final CountDownLatch receiveDone = new CountDownLatch(1);
1:966de0c:         final Vector<Message> received = new Vector<Message>();
1:966de0c:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:966de0c:             public void run() {
1:966de0c:                 try {
1:966de0c:                     LOG.info("receive one...");
1:966de0c:                     Message msg = consumer.receive(30000);
1:966de0c:                     if (msg != null) {
1:966de0c:                         received.add(msg);
1:966de0c:                     }
1:966de0c:                     receiveDone.countDown();
1:966de0c:                     LOG.info("done receive");
1:966de0c:                 } catch (Exception e) {
1:966de0c:                     e.printStackTrace();
1:966de0c:                 }
1:966de0c:             }
1:966de0c:         });
1:966de0c: 
1:966de0c:         // will be stopped by the plugin
1:966de0c:         assertTrue("pull completed on broker", pullDone.await(30, TimeUnit.SECONDS));
1:966de0c:         broker.waitUntilStopped();
1:883eed0:         broker = createBroker(false, url);
1:966de0c:         broker.start();
1:966de0c: 
1:966de0c:         assertTrue("receive completed through failover", receiveDone.await(30, TimeUnit.SECONDS));
1:966de0c: 
1:966de0c:         assertTrue("we got our message:", !received.isEmpty());
1:966de0c: 
1:966de0c:         connection.close();
1:966de0c:     }
1:966de0c: 
1:966de0c:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:966de0c:             throws JMSException {
1:966de0c:         MessageProducer producer = producerSession.createProducer(destination);
1:966de0c:         for (int i = 0; i < count; i++) {
1:966de0c:             TextMessage message = producerSession.createTextMessage("Test message " + i);
1:966de0c:             producer.send(message);
1:966de0c:         }
1:966de0c:         producer.close();
1:966de0c:     }
1:966de0c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7d8ce02
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
commit:883eed0
/////////////////////////////////////////////////////////////////////////
1:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:     private String url;
/////////////////////////////////////////////////////////////////////////
1:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker.addConnector(bindAddress);
1: 
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker = createBroker(false, url);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverPrefetchZeroTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:966de0c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: // see: https://issues.apache.org/activemq/browse/AMQ-2877
1: public class FailoverPrefetchZeroTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(FailoverPrefetchZeroTest.class);
1:     private static final String QUEUE_NAME = "FailoverPrefetchZero";
0:     private String url = "tcp://localhost:61616";
1:     final int prefetch = 0;
1:     BrokerService broker;
1: 
0:     public void startCleanBroker() throws Exception {
0:         startBroker(true);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup);
1:         broker.start();
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = new BrokerService();
0:         broker.addConnector(url);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testPrefetchZeroConsumerThroughRestart() throws Exception {
1:         broker = createBroker(true);
1: 
1:         final CountDownLatch pullDone = new CountDownLatch(1);
1:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public Response messagePull(ConnectionContext context, final MessagePull pull) throws Exception {
1:                         context.setDontSendReponse(true);
1:                         pullDone.countDown();
1:                         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                             public void run() {
1:                                 LOG.info("Stopping broker on pull: " + pull);
1:                                 try {
1:                                     broker.stop();
1:                                 } catch (Exception e) {
1:                                     e.printStackTrace();
1:                                 }
1:                             }
1:                         });
1:                         return null;
1:                     }
1:                 }
1:         });
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:         cf.setWatchTopicAdvisories(false);
1: 
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         final Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue destination = consumerSession.createQueue(QUEUE_NAME + "?consumer.prefetchSize=" + prefetch);
1: 
1:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         produceMessage(consumerSession, destination, 1);
1: 
1:         final CountDownLatch receiveDone = new CountDownLatch(1);
1:         final Vector<Message> received = new Vector<Message>();
1:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     LOG.info("receive one...");
1:                     Message msg = consumer.receive(30000);
1:                     if (msg != null) {
1:                         received.add(msg);
1:                     }
1:                     receiveDone.countDown();
1:                     LOG.info("done receive");
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         // will be stopped by the plugin
1:         assertTrue("pull completed on broker", pullDone.await(30, TimeUnit.SECONDS));
1:         broker.waitUntilStopped();
0:         broker = createBroker(false);
1:         broker.start();
1: 
1:         assertTrue("receive completed through failover", receiveDone.await(30, TimeUnit.SECONDS));
1: 
1:         assertTrue("we got our message:", !received.isEmpty());
1: 
1:         connection.close();
1:     }
1: 
1:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:             throws JMSException {
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         for (int i = 0; i < count; i++) {
1:             TextMessage message = producerSession.createTextMessage("Test message " + i);
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: }
============================================================================