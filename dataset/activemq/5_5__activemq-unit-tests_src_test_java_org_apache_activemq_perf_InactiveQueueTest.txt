1:7416155: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
2:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:7416155:  */
1:7416155: package org.apache.activemq.perf;
4:7416155: 
1:7416155: import javax.jms.Connection;
1:7416155: import javax.jms.Destination;
1:7416155: import javax.jms.MapMessage;
1:7416155: import javax.jms.Message;
1:7416155: import javax.jms.MessageProducer;
1:7416155: import javax.jms.Session;
1:230a86c: 
1:7416155: import junit.framework.TestCase;
1:4743a20: 
1:7416155: import org.apache.activemq.ActiveMQConnectionFactory;
1:7416155: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:aa1aa58: 
1:7416155: /**
1:4743a20:  *
1:7416155:  */
1:230a86c: public class InactiveQueueTest extends TestCase {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(InactiveQueueTest.class);
1:230a86c: 
1:7416155:     private static final int MESSAGE_COUNT = 0;
1:230a86c:     private static final String DEFAULT_PASSWORD = "";
1:230a86c:     private static final String USERNAME = "testuser";
1:230a86c:     private static final String QUEUE_NAME = "testevent";
1:fc00993:     private static final int DELIVERY_MODE = javax.jms.DeliveryMode.PERSISTENT;
1:fc00993:     private static final int DELIVERY_PRIORITY = javax.jms.Message.DEFAULT_PRIORITY;
1:4743a20: 
1:fc00993:     ActiveMQConnectionFactory connectionFactory;
1:fc00993:     BrokerService broker;
1:fc00993: 
1:230a86c:     private Connection connection;
1:230a86c:     private MessageProducer publisher;
1:230a86c:     private Destination destination;
1:230a86c:     private Session session;
1:aa1aa58: 
1:4743a20:     @Override
1:230a86c:     protected void setUp() throws Exception {
1:7416155:         super.setUp();
1:230a86c:         broker = new BrokerService();
1:230a86c: 
1:230a86c:         // broker.setPersistenceAdapter(new KahaPersistenceAdapter(new File
1:230a86c:         // ("TEST_STUFD")));
1:7416155:         /*
1:230a86c:          * JournalPersistenceAdapterFactory factory = new
1:230a86c:          * JournalPersistenceAdapterFactory();
1:230a86c:          * factory.setDataDirectoryFile(broker.getDataDirectory());
1:230a86c:          * factory.setTaskRunnerFactory(broker.getTaskRunnerFactory());
1:230a86c:          * factory.setUseJournal(false); broker.setPersistenceFactory(factory);
1:230a86c:          */
1:e16295c:         broker.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
1:7416155:         broker.start();
1:230a86c:         connectionFactory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_BROKER_URL);
1:7416155:         /*
1:230a86c:          * Doesn't matter if you enable or disable these, so just leaving them
1:230a86c:          * out for this test case connectionFactory.setAlwaysSessionAsync(true);
1:230a86c:          * connectionFactory.setAsyncDispatch(true);
1:7416155:          */
1:7416155:         connectionFactory.setUseAsyncSend(true);
1:7416155:     }
1:7416155: 
1:4743a20:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:7416155:         super.tearDown();
1:7416155:         broker.stop();
1:7416155:     }
1:7416155: 
1:230a86c:     public void testNoSubscribers() throws Exception {
1:230a86c:         connection = connectionFactory.createConnection(USERNAME, DEFAULT_PASSWORD);
1:7416155:         assertNotNull(connection);
1:7416155:         connection.start();
1:230a86c:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:7416155:         assertNotNull(session);
1:230a86c:         destination = session.createQueue(QUEUE_NAME);
1:7416155:         assertNotNull(destination);
1:230a86c:         publisher = session.createProducer(destination);
1:7416155:         assertNotNull(publisher);
1:230a86c:         MapMessage msg = session.createMapMessage();
1:7416155:         assertNotNull(msg);
1:230a86c:         msg.setString("key1", "value1");
1:7416155:         int loop;
1:230a86c:         for (loop = 0; loop < MESSAGE_COUNT; loop++) {
1:230a86c:             msg.setInt("key2", loop);
1:fc00993:             publisher.send(msg, DELIVERY_MODE, DELIVERY_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
1:230a86c:             if (loop % 500 == 0) {
1:230a86c:                 LOG.debug("Sent " + loop + " messages");
1:7416155:             }
1:7416155:         }
1:7416155:         Thread.sleep(1000000);
1:4743a20:         assertEquals(loop, MESSAGE_COUNT);
1:7416155:         publisher.close();
1:7416155:         session.close();
1:7416155:         connection.stop();
1:7416155:         connection.stop();
1:7416155:     }
1:7416155: 
1:7416155: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(loop, MESSAGE_COUNT);
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:e16295c
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1:     private static final int DELIVERY_MODE = javax.jms.DeliveryMode.PERSISTENT;
1:     private static final int DELIVERY_PRIORITY = javax.jms.Message.DEFAULT_PRIORITY;
1:     ActiveMQConnectionFactory connectionFactory;
1:     BrokerService broker;
1: 
/////////////////////////////////////////////////////////////////////////
1:             publisher.send(msg, DELIVERY_MODE, DELIVERY_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
1: public class InactiveQueueTest extends TestCase {
0:     private static final transient Log LOG = LogFactory.getLog(InactiveQueueTest.class);
1:     private static final String DEFAULT_PASSWORD = "";
1:     private static final String USERNAME = "testuser";
0:     private static final String CLIENTID = "mytestclient";
1:     private static final String QUEUE_NAME = "testevent";
0:     private static final int deliveryMode = javax.jms.DeliveryMode.PERSISTENT;
0:     private static final int deliveryPriority = javax.jms.Message.DEFAULT_PRIORITY;
1:     
1:     private Connection connection;
1:     private MessageProducer publisher;
0:     private TopicSubscriber subscriber;
1:     private Destination destination;
1:     private Session session;
0:     ActiveMQConnectionFactory connectionFactory;
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1: 
1:         // broker.setPersistenceAdapter(new KahaPersistenceAdapter(new File
1:         // ("TEST_STUFD")));
1:          * JournalPersistenceAdapterFactory factory = new
1:          * JournalPersistenceAdapterFactory();
1:          * factory.setDataDirectoryFile(broker.getDataDirectory());
1:          * factory.setTaskRunnerFactory(broker.getTaskRunnerFactory());
1:          * factory.setUseJournal(false); broker.setPersistenceFactory(factory);
1:          */
1:         connectionFactory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_BROKER_URL);
1:          * Doesn't matter if you enable or disable these, so just leaving them
1:          * out for this test case connectionFactory.setAlwaysSessionAsync(true);
1:          * connectionFactory.setAsyncDispatch(true);
1:     protected void tearDown() throws Exception {
1:     public void testNoSubscribers() throws Exception {
1:         connection = connectionFactory.createConnection(USERNAME, DEFAULT_PASSWORD);
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         destination = session.createQueue(QUEUE_NAME);
1:         publisher = session.createProducer(destination);
1:         MapMessage msg = session.createMapMessage();
1:         msg.setString("key1", "value1");
1:         for (loop = 0; loop < MESSAGE_COUNT; loop++) {
1:             msg.setInt("key2", loop);
0:             publisher.send(msg, deliveryMode, deliveryPriority, Message.DEFAULT_TIME_TO_LIVE);
1:             if (loop % 500 == 0) {
1:                 LOG.debug("Sent " + loop + " messages");
0:         this.assertEquals(loop, MESSAGE_COUNT);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(InactiveQueueTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final transient Log log = LogFactory.getLog(InactiveQueueTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:                 log.debug("Sent " + loop + " messages");
author:Robert Davies
-------------------------------------------------------------------------------
commit:985b4ce
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.journal.JournalPersistenceAdapterFactory;
/////////////////////////////////////////////////////////////////////////
0:         JournalPersistenceAdapterFactory factory = new JournalPersistenceAdapterFactory();
commit:7416155
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
0: import java.io.File;
0: import java.net.URI;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
0: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import javax.jms.Topic;
0: import javax.jms.TopicSubscriber;
0: import junit.framework.AssertionFailedError;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.DefaultPersistenceAdapterFactory;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
1: /**
0:  * @version $Revision: 454471 $
1:  */
0: public class InactiveQueueTest extends TestCase{
1:     private static final int MESSAGE_COUNT = 0;
0:     private static final String DEFAULT_PASSWORD="";
0:     private static final String USERNAME="testuser";
0:     private static final String CLIENTID="mytestclient";
0:     private static final String QUEUE_NAME="testevent";
0:     private static final int deliveryMode=javax.jms.DeliveryMode.PERSISTENT;
0:     private static final int deliveryPriority=javax.jms.Message.DEFAULT_PRIORITY;
0:     private Connection connection=null;
0:     private MessageProducer publisher=null;
0:     private TopicSubscriber subscriber=null;
0:     private Destination destination=null;
0:     private Session session=null;
0:     ActiveMQConnectionFactory connectionFactory=null;
0:     BrokerService broker;
1: 
0:     protected void setUp() throws Exception{
1:         super.setUp();
0:         broker=new BrokerService();
1:         
0:         //broker.setPersistenceAdapter(new KahaPersistenceAdapter(new File ("TEST_STUFD")));
1:         /*
0:         DefaultPersistenceAdapterFactory factory = new DefaultPersistenceAdapterFactory();
0:         factory.setDataDirectoryFile(broker.getDataDirectory());
0:         factory.setTaskRunnerFactory(broker.getTaskRunnerFactory());
0:         factory.setUseJournal(false);
0:         broker.setPersistenceFactory(factory);
1:         */
0:         broker.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_URL);
1:         broker.start();
0:         connectionFactory=new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_BROKER_URL);
1:         /*
0:          * Doesn't matter if you enable or disable these, so just leaving them out for this test case
0:          * connectionFactory.setAlwaysSessionAsync(true); connectionFactory.setAsyncDispatch(true);
1:          */
1:         connectionFactory.setUseAsyncSend(true);
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
1:         broker.stop();
1:     }
1: 
0:     public void testNoSubscribers() throws Exception{
0:         connection=connectionFactory.createConnection(USERNAME,DEFAULT_PASSWORD);
1:         assertNotNull(connection);
1:         connection.start();
0:         session=connection.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
0:         destination=session.createQueue(QUEUE_NAME);
1:         assertNotNull(destination);
0:         publisher=session.createProducer(destination);
1:         assertNotNull(publisher);
0:         MapMessage msg=session.createMapMessage();
1:         assertNotNull(msg);
0:         msg.setString("key1","value1");
1:         int loop;
0:         for(loop=0;loop<MESSAGE_COUNT;loop++){
0:             msg.setInt("key2",loop);
0:             publisher.send(msg,deliveryMode,deliveryPriority,Message.DEFAULT_TIME_TO_LIVE);
0:             if (loop%500==0){
0:                 System.out.println("Sent " + loop + " messages");
1:             }
1:         }
1:         Thread.sleep(1000000);
0:         this.assertEquals(loop,MESSAGE_COUNT);
1:         publisher.close();
1:         session.close();
1:         connection.stop();
1:         connection.stop();
1:     }
1: 
1:     
1: }
============================================================================