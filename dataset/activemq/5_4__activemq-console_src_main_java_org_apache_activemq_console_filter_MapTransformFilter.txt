1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
3:a107823: 
1:bef9984: import java.lang.reflect.Array;
1:5f1adbe: import java.lang.reflect.Method;
1:5f1adbe: import java.util.Enumeration;
1:5f1adbe: import java.util.HashMap;
1:5f1adbe: import java.util.Iterator;
1:a107823: import java.util.Map;
1:a107823: import java.util.Properties;
1:0dec0b6: import java.util.Arrays;
1:5f1adbe: 
1:5f1adbe: import javax.jms.DeliveryMode;
1:5f1adbe: import javax.jms.JMSException;
1:5f1adbe: import javax.management.Attribute;
1:5f1adbe: import javax.management.AttributeList;
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: import javax.management.ObjectName;
1:5f1adbe: import javax.management.openmbean.CompositeDataSupport;
1:5f1adbe: 
1:5f1adbe: import org.apache.activemq.command.ActiveMQBytesMessage;
1:5f1adbe: import org.apache.activemq.command.ActiveMQDestination;
1:5f1adbe: import org.apache.activemq.command.ActiveMQMapMessage;
1:5f1adbe: import org.apache.activemq.command.ActiveMQMessage;
1:5f1adbe: import org.apache.activemq.command.ActiveMQObjectMessage;
1:5f1adbe: import org.apache.activemq.command.ActiveMQStreamMessage;
1:5f1adbe: import org.apache.activemq.command.ActiveMQTextMessage;
1:5f1adbe: import org.apache.activemq.console.util.AmqMessagesUtil;
1:a107823: 
1:a107823: public class MapTransformFilter extends ResultTransformFilter {
1:a107823:     /**
1:5f1adbe:      * Creates a Map transform filter that is able to transform a variety of
1:5f1adbe:      * objects to a properties map object
1:5f1adbe:      * 
1:a107823:      * @param next - the next query filter
1:a107823:      */
1:a107823:     public MapTransformFilter(QueryFilter next) {
1:a107823:         super(next);
2:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform the given object to a Map object
1:5f1adbe:      * 
1:a107823:      * @param object - object to transform
1:a107823:      * @return map object
1:a107823:      */
1:a107823:     protected Object transformElement(Object object) throws Exception {
1:a107823:         // Use reflection to determine how the object should be transformed
1:a107823:         try {
1:5f1adbe:             Method method = this.getClass().getDeclaredMethod("transformToMap", new Class[] {
1:5f1adbe:                 object.getClass()
1:5f1adbe:             });
1:5f1adbe:             return (Map)method.invoke(this, new Object[] {
1:5f1adbe:                 object
1:5f1adbe:             });
1:a107823:         } catch (NoSuchMethodException e) {
1:54eb93e: //            CommandContext.print("Unable to transform mbean of type: " + object.getClass().getName() + ". No corresponding transformToMap method found.");
1:a107823:             return null;
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ObjectInstance mbean to a Map
1:5f1adbe:      * 
1:a107823:      * @param obj - ObjectInstance format of an mbean
1:a107823:      * @return map object
1:a107823:      */
1:a107823:     protected Map transformToMap(ObjectInstance obj) {
1:a107823:         return transformToMap(obj.getObjectName());
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ObjectName mbean to a Map
1:5f1adbe:      * 
1:a107823:      * @param objname - ObjectName format of an mbean
1:a107823:      * @return map object
1:a107823:      */
1:a107823:     protected Map transformToMap(ObjectName objname) {
2:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         // Parse object properties
1:a107823:         Map objProps = objname.getKeyPropertyList();
1:5f1adbe:         for (Iterator i = objProps.keySet().iterator(); i.hasNext();) {
1:a107823:             Object key = i.next();
1:a107823:             Object val = objProps.get(key);
1:a107823:             if (val != null) {
1:0dec0b6:                 props.setProperty(key.toString(), getDisplayString(val));
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:0dec0b6:     }
1:0dec0b6: 
1:a107823:     /**
1:a107823:      * Transform an Attribute List format of an mbean to a Map
1:5f1adbe:      * 
1:a107823:      * @param list - AttributeList format of an mbean
1:a107823:      * @return map object
1:a107823:      */
1:a107823:     protected Map transformToMap(AttributeList list) {
1:a107823:         Properties props = new Properties();
1:5f1adbe:         for (Iterator i = list.iterator(); i.hasNext();) {
1:a107823:             Attribute attrib = (Attribute)i.next();
1:a107823: 
1:a107823:             // If attribute is an ObjectName
1:a107823:             if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
1:a107823:                 props.putAll(transformToMap((ObjectName)attrib.getValue()));
1:a107823:             } else {
1:a107823:                 if (attrib.getValue() != null) {
1:0dec0b6:                     props.setProperty(attrib.getName(), getDisplayString(attrib.getValue()));
1:a107823:                 }
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQTextMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - text message to trasnform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Map transformToMap(ActiveMQTextMessage msg) throws JMSException {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:a107823:         if (msg.getText() != null) {
1:a107823:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSText", msg.getText());
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQBytesMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - bytes message to transform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Map transformToMap(ActiveMQBytesMessage msg) throws JMSException {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:a107823: 
1:a107823:         long bodyLength = msg.getBodyLength();
1:a107823:         byte[] msgBody;
1:5f1adbe:         int i = 0;
1:a107823:         // Create separate bytes messages
1:5f1adbe:         for (i = 0; i < (bodyLength / Integer.MAX_VALUE); i++) {
1:a107823:             msgBody = new byte[Integer.MAX_VALUE];
1:5f1adbe:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i + 1), new String(msgBody));
1:a107823:         }
1:a107823:         msgBody = new byte[(int)(bodyLength % Integer.MAX_VALUE)];
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i + 1), new String(msgBody));
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - object message to transform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Map transformToMap(ActiveMQObjectMessage msg) throws JMSException {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:a107823:         if (msg.getObject() != null) {
1:a107823:             // Just add the class name and toString value of the object
1:a107823:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectClass", msg.getObject().getClass().getName());
1:0dec0b6:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectString", getDisplayString(msg.getObject()));
1:a107823:         }
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQMapMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - map message to transform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Map transformToMap(ActiveMQMapMessage msg) throws JMSException {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:a107823: 
1:a107823:         // Get map properties
1:a107823:         Enumeration e = msg.getMapNames();
1:a107823:         while (e.hasMoreElements()) {
1:a107823:             String key = (String)e.nextElement();
1:a107823:             Object val = msg.getObject(key);
1:a107823:             if (val != null) {
1:0dec0b6:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, getDisplayString(val));
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQStreamMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - stream message to transform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:a107823:     protected Map transformToMap(ActiveMQStreamMessage msg) throws JMSException {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:5f1adbe:         // Just set the toString of the message as the body of the stream
1:5f1adbe:         // message
1:0dec0b6:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSStreamMessage", getDisplayString(msg));
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an ActiveMQMessage to a Map
1:5f1adbe:      * 
1:a107823:      * @param msg - message to transform
1:a107823:      * @return map object
1:a107823:      * @throws JMSException
1:a107823:      */
1:5f1adbe:     protected Map<String, String> transformToMap(ActiveMQMessage msg) throws JMSException {
1:5f1adbe:         Map<String, String> props = new HashMap<String, String>();
1:a107823: 
1:a107823:         // Get JMS properties
1:a107823:         if (msg.getJMSCorrelationID() != null) {
1:5f1adbe:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", msg.getJMSCorrelationID());
1:a107823:         }
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", (msg.getJMSDeliveryMode() == DeliveryMode.PERSISTENT) ? "persistent" : "non-persistent");
1:a107823:         if (msg.getJMSDestination() != null) {
1:5f1adbe:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", ((ActiveMQDestination)msg.getJMSDestination()).getPhysicalName());
1:a107823:         }
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", Long.toString(msg.getJMSExpiration()));
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", msg.getJMSMessageID());
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", Integer.toString(msg.getJMSPriority()));
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", Boolean.toString(msg.getJMSRedelivered()));
1:a107823:         if (msg.getJMSReplyTo() != null) {
1:5f1adbe:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", ((ActiveMQDestination)msg.getJMSReplyTo()).getPhysicalName());
1:a107823:         }
1:5f1adbe:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", Long.toString(msg.getJMSTimestamp()));
1:a107823:         if (msg.getJMSType() != null) {
1:5f1adbe:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", msg.getJMSType());
1:a107823:         }
1:4a3d117:         if (msg.getOriginalDestination() != null) {
1:4a3d117:             props.put(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "OriginalDestination", msg.getOriginalDestination().getPhysicalName());
1:4a3d117:         }
1:a107823:         // Get custom properties
1:a107823:         Enumeration e = msg.getPropertyNames();
1:a107823:         while (e.hasMoreElements()) {
1:a107823:             String name = (String)e.nextElement();
1:a107823:             if (msg.getObjectProperty(name) != null) {
1:0dec0b6:                 props.put(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + name, getDisplayString(msg.getObjectProperty(name)));
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform an openMBean composite data to a Map
1:5f1adbe:      * 
1:a107823:      * @param data - composite data to transform
1:a107823:      * @return map object
1:a107823:      */
1:a107823:     protected Map transformToMap(CompositeDataSupport data) {
1:a107823:         Properties props = new Properties();
1:a107823: 
1:a107823:         String typeName = data.getCompositeType().getTypeName();
1:a107823: 
1:a107823:         // Retrieve text message
1:a107823:         if (typeName.equals(ActiveMQTextMessage.class.getName())) {
1:a107823:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "Text", data.get("Text").toString());
1:a107823: 
1:5f1adbe:             // Retrieve byte preview
1:a107823:         } else if (typeName.equals(ActiveMQBytesMessage.class.getName())) {
1:a107823:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyLength", data.get("BodyLength").toString());
1:a107823:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyPreview", new String((byte[])data.get("BodyPreview")));
1:a107823: 
1:5f1adbe:             // Expand content map
1:a107823:         } else if (typeName.equals(ActiveMQMapMessage.class.getName())) {
1:a107823:             Map contentMap = (Map)data.get("ContentMap");
1:5f1adbe:             for (Iterator i = contentMap.keySet().iterator(); i.hasNext();) {
1:a107823:                 String key = (String)i.next();
1:a107823:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, contentMap.get(key).toString());
1:a107823:             }
1:a107823: 
1:5f1adbe:             // Do nothing
1:5f1adbe:         } else if (typeName.equals(ActiveMQObjectMessage.class.getName()) || typeName.equals(ActiveMQStreamMessage.class.getName()) || typeName.equals(ActiveMQMessage.class.getName())) {
1:a107823: 
1:5f1adbe:             // Unrecognized composite data. Throw exception.
1:a107823:         } else {
1:a107823:             throw new IllegalArgumentException("Unrecognized composite data to transform. composite type: " + typeName);
1:a107823:         }
1:a107823: 
1:a107823:         // Process the JMS message header values
1:a107823:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", "" + data.get("JMSCorrelationID"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", "" + data.get("JMSDestination"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", "" + data.get("JMSMessageID"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", "" + data.get("JMSReplyTo"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", "" + data.get("JMSType"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", "" + data.get("JMSDeliveryMode"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", "" + data.get("JMSExpiration"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", "" + data.get("JMSPriority"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", "" + data.get("JMSRedelivered"));
1:5f1adbe:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", "" + data.get("JMSTimestamp"));
1:a107823: 
1:a107823:         // Process the JMS custom message properties
1:a107823:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "Properties", "" + data.get("Properties"));
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:bef9984: 	@SuppressWarnings("unchecked")
1:bef9984: 	protected String getDisplayString(Object obj) {
1:bef9984: 		if (null == obj)
1:bef9984: 			return "null";
1:bef9984: 		
1:bef9984: 		if (obj != null && obj.getClass().isArray()) {
1:bef9984: 			Class type = obj.getClass().getComponentType();
1:bef9984: 			if (!type.isPrimitive()) {
1:bef9984: 				obj = Arrays.asList((Object[]) obj);
1:bef9984: 			} else {
1:bef9984: 				// for primitives, we can't use Arrays.toString(), so we have to roll something similar.
1:bef9984: 				int len = Array.getLength(obj);
1:bef9984: 				if (0 == len)
1:bef9984: 					return "[]";
1:bef9984: 				StringBuilder bldr = new StringBuilder();
1:bef9984: 				bldr.append("[");
1:bef9984: 				for (int i = 0; i <= len; i++) {
1:bef9984: 					bldr.append(Array.get(obj, i));
1:bef9984: 					if (i + 1 >= len)
1:bef9984: 						return bldr.append("]").toString();
1:bef9984: 					bldr.append(",");
1:bef9984: 				}
1:bef9984: 			}
1:bef9984: 
1:bef9984: 		}
1:bef9984:         
1:0dec0b6:         return obj.toString();
1:0dec0b6:     }
1:a107823: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4a3d117
/////////////////////////////////////////////////////////////////////////
1:         if (msg.getOriginalDestination() != null) {
1:             props.put(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "OriginalDestination", msg.getOriginalDestination().getPhysicalName());
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bef9984
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Array;
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("unchecked")
1: 	protected String getDisplayString(Object obj) {
1: 		if (null == obj)
1: 			return "null";
1: 		
1: 		if (obj != null && obj.getClass().isArray()) {
1: 			Class type = obj.getClass().getComponentType();
1: 			if (!type.isPrimitive()) {
1: 				obj = Arrays.asList((Object[]) obj);
1: 			} else {
1: 				// for primitives, we can't use Arrays.toString(), so we have to roll something similar.
1: 				int len = Array.getLength(obj);
1: 				if (0 == len)
1: 					return "[]";
1: 				StringBuilder bldr = new StringBuilder();
1: 				bldr.append("[");
1: 				for (int i = 0; i <= len; i++) {
1: 					bldr.append(Array.get(obj, i));
1: 					if (i + 1 >= len)
1: 						return bldr.append("]").toString();
1: 					bldr.append(",");
1: 				}
1: 			}
1: 
1: 		}
1:         
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:                 props.setProperty(key.toString(), getDisplayString(val));
/////////////////////////////////////////////////////////////////////////
1:                     props.setProperty(attrib.getName(), getDisplayString(attrib.getValue()));
/////////////////////////////////////////////////////////////////////////
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectString", getDisplayString(msg.getObject()));
/////////////////////////////////////////////////////////////////////////
1:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, getDisplayString(val));
/////////////////////////////////////////////////////////////////////////
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSStreamMessage", getDisplayString(msg));
/////////////////////////////////////////////////////////////////////////
1:                 props.put(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + name, getDisplayString(msg.getObjectProperty(name)));
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected String getDisplayString(Object obj) {
0:         if (obj != null && obj.getClass().isArray()) {
0:             obj = Arrays.asList((Object[]) obj);
1:         }
1:         return obj.toString();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: //            CommandContext.print("Unable to transform mbean of type: " + object.getClass().getName() + ". No corresponding transformToMap method found.");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeDataSupport;
1: 
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.AmqMessagesUtil;
1:      * Creates a Map transform filter that is able to transform a variety of
1:      * objects to a properties map object
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:             Method method = this.getClass().getDeclaredMethod("transformToMap", new Class[] {
1:                 object.getClass()
1:             });
1:             return (Map)method.invoke(this, new Object[] {
1:                 object
1:             });
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = objProps.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = list.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         int i = 0;
1:         for (i = 0; i < (bodyLength / Integer.MAX_VALUE); i++) {
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i + 1), new String(msgBody));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i + 1), new String(msgBody));
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         // Just set the toString of the message as the body of the stream
1:         // message
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected Map<String, String> transformToMap(ActiveMQMessage msg) throws JMSException {
1:         Map<String, String> props = new HashMap<String, String>();
1:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", msg.getJMSCorrelationID());
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", (msg.getJMSDeliveryMode() == DeliveryMode.PERSISTENT) ? "persistent" : "non-persistent");
1:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", ((ActiveMQDestination)msg.getJMSDestination()).getPhysicalName());
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", Long.toString(msg.getJMSExpiration()));
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", msg.getJMSMessageID());
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", Integer.toString(msg.getJMSPriority()));
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", Boolean.toString(msg.getJMSRedelivered()));
1:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", ((ActiveMQDestination)msg.getJMSReplyTo()).getPhysicalName());
1:         props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", Long.toString(msg.getJMSTimestamp()));
1:             props.put(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", msg.getJMSType());
/////////////////////////////////////////////////////////////////////////
0:                 props.put(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + name, msg.getObjectProperty(name).toString());
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             // Retrieve byte preview
1:             // Expand content map
1:             for (Iterator i = contentMap.keySet().iterator(); i.hasNext();) {
1:             // Do nothing
1:         } else if (typeName.equals(ActiveMQObjectMessage.class.getName()) || typeName.equals(ActiveMQStreamMessage.class.getName()) || typeName.equals(ActiveMQMessage.class.getName())) {
1:             // Unrecognized composite data. Throw exception.
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", "" + data.get("JMSDestination"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", "" + data.get("JMSMessageID"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", "" + data.get("JMSReplyTo"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", "" + data.get("JMSType"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", "" + data.get("JMSDeliveryMode"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", "" + data.get("JMSExpiration"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", "" + data.get("JMSPriority"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", "" + data.get("JMSRedelivered"));
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", "" + data.get("JMSTimestamp"));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.console.util.AmqMessagesUtil;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.ActiveMQMapMessage;
0: import org.apache.activemq.command.ActiveMQStreamMessage;
0: import org.apache.activemq.command.ActiveMQMessage;
1: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.management.openmbean.CompositeDataSupport;
0: import javax.jms.JMSException;
0: import javax.jms.DeliveryMode;
1: import java.util.Map;
1: import java.util.Properties;
0: import java.util.Iterator;
0: import java.util.Enumeration;
0: import java.lang.reflect.Method;
1: 
1: public class MapTransformFilter extends ResultTransformFilter {
1:     /**
0:      * Creates a Map transform filter that is able to transform a variety of objects to a properties map object
1:      * @param next - the next query filter
1:      */
1:     public MapTransformFilter(QueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
1:      * Transform the given object to a Map object
1:      * @param object - object to transform
1:      * @return map object
1:      */
1:     protected Object transformElement(Object object) throws Exception {
1:         // Use reflection to determine how the object should be transformed
1:         try {
0:             Method method = this.getClass().getDeclaredMethod("transformToMap", new Class[] {object.getClass()});
0:             return (Map)method.invoke(this, new Object[] {object});
1:         } catch (NoSuchMethodException e) {
0:             GlobalWriter.print("Unable to transform mbean of type: " + object.getClass().getName() + ". No corresponding transformToMap method found.");
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * Transform an ObjectInstance mbean to a Map
1:      * @param obj - ObjectInstance format of an mbean
1:      * @return map object
1:      */
1:     protected Map transformToMap(ObjectInstance obj) {
1:         return transformToMap(obj.getObjectName());
1:     }
1: 
1:     /**
1:      * Transform an ObjectName mbean to a Map
1:      * @param objname - ObjectName format of an mbean
1:      * @return map object
1:      */
1:     protected Map transformToMap(ObjectName objname) {
1:         Properties props = new Properties();
1: 
1:         // Parse object properties
1:         Map objProps = objname.getKeyPropertyList();
0:         for (Iterator i=objProps.keySet().iterator(); i.hasNext();) {
1:             Object key = i.next();
1:             Object val = objProps.get(key);
1:             if (val != null) {
0:                 props.setProperty(key.toString(), val.toString());
1:             }
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an Attribute List format of an mbean to a Map
1:      * @param list - AttributeList format of an mbean
1:      * @return map object
1:      */
1:     protected Map transformToMap(AttributeList list) {
1:         Properties props = new Properties();
0:         for (Iterator i=list.iterator(); i.hasNext();) {
1:             Attribute attrib = (Attribute)i.next();
1: 
1:             // If attribute is an ObjectName
1:             if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
1:                 props.putAll(transformToMap((ObjectName)attrib.getValue()));
1:             } else {
1:                 if (attrib.getValue() != null) {
0:                     props.setProperty(attrib.getName(), attrib.getValue().toString());
1:                 }
1:             }
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQTextMessage to a Map
1:      * @param msg - text message to trasnform
1:      * @return map object
1:      * @throws JMSException
1:      */
1:     protected Map transformToMap(ActiveMQTextMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:         if (msg.getText() != null) {
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSText", msg.getText());
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQBytesMessage to a Map
1:      * @param msg - bytes message to transform
1:      * @return map object
1:      * @throws JMSException
1:      */
1:     protected Map transformToMap(ActiveMQBytesMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         props.putAll(transformToMap((ActiveMQMessage)msg));
1: 
1:         long bodyLength = msg.getBodyLength();
1:         byte[] msgBody;
0:         int i=0;
1:         // Create separate bytes messages
0:         for (i=0; i<(bodyLength/Integer.MAX_VALUE); i++) {
1:             msgBody = new byte[Integer.MAX_VALUE];
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i+1), new String(msgBody));
1:         }
1:         msgBody = new byte[(int)(bodyLength % Integer.MAX_VALUE)];
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i+1), new String(msgBody));
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQMessage to a Map
1:      * @param msg - object message to transform
1:      * @return map object
1:      * @throws JMSException
1:      */
1:     protected Map transformToMap(ActiveMQObjectMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         props.putAll(transformToMap((ActiveMQMessage)msg));
1:         if (msg.getObject() != null) {
1:             // Just add the class name and toString value of the object
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectClass", msg.getObject().getClass().getName());
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectString", msg.getObject().toString());
1:         }
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQMapMessage to a Map
1:      * @param msg - map message to transform
1:      * @return map object
1:      * @throws JMSException
1:      */
1:     protected Map transformToMap(ActiveMQMapMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         props.putAll(transformToMap((ActiveMQMessage)msg));
1: 
1:         // Get map properties
1:         Enumeration e = msg.getMapNames();
1:         while (e.hasMoreElements()) {
1:             String key = (String)e.nextElement();
1:             Object val = msg.getObject(key);
1:             if (val != null) {
0:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, val.toString());
1:             }
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQStreamMessage to a Map
1:      * @param msg - stream message to transform
1:      * @return map object
1:      * @throws JMSException
1:      */
1:     protected Map transformToMap(ActiveMQStreamMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         props.putAll(transformToMap((ActiveMQMessage)msg));
0:         // Just set the toString of the message as the body of the stream message
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSStreamMessage", msg.toString());
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an ActiveMQMessage to a Map
1:      * @param msg - message to transform
1:      * @return map object
1:      * @throws JMSException
1:      */
0:     protected Map transformToMap(ActiveMQMessage msg) throws JMSException {
1:         Properties props = new Properties();
1: 
1:         // Get JMS properties
1:         if (msg.getJMSCorrelationID() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", msg.getJMSCorrelationID());
1:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", (msg.getJMSDeliveryMode()==DeliveryMode.PERSISTENT) ? "persistent" : "non-persistent");
1:         if (msg.getJMSDestination() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", ((ActiveMQDestination)msg.getJMSDestination()).getPhysicalName());
1:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", Long.toString(msg.getJMSExpiration()));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", msg.getJMSMessageID());
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", Integer.toString(msg.getJMSPriority()));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", Boolean.toString(msg.getJMSRedelivered()));
1:         if (msg.getJMSReplyTo() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", ((ActiveMQDestination)msg.getJMSReplyTo()).getPhysicalName());
1:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", Long.toString(msg.getJMSTimestamp()));
1:         if (msg.getJMSType() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", msg.getJMSType());
1:         }
1: 
1:         // Get custom properties
1:         Enumeration e = msg.getPropertyNames();
1:         while (e.hasMoreElements()) {
1:             String name = (String)e.nextElement();
1:             if (msg.getObjectProperty(name) != null) {
0:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + name, msg.getObjectProperty(name).toString());
1:             }
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform an openMBean composite data to a Map
1:      * @param data - composite data to transform
1:      * @return map object
1:      */
1:     protected Map transformToMap(CompositeDataSupport data) {
1:         Properties props = new Properties();
1: 
1:         String typeName = data.getCompositeType().getTypeName();
1: 
1:         // Retrieve text message
1:         if (typeName.equals(ActiveMQTextMessage.class.getName())) {
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "Text", data.get("Text").toString());
1: 
0:         // Retrieve byte preview
1:         } else if (typeName.equals(ActiveMQBytesMessage.class.getName())) {
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyLength", data.get("BodyLength").toString());
1:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyPreview", new String((byte[])data.get("BodyPreview")));
1: 
0:         // Expand content map
1:         } else if (typeName.equals(ActiveMQMapMessage.class.getName())) {
1:             Map contentMap = (Map)data.get("ContentMap");
0:             for (Iterator i=contentMap.keySet().iterator(); i.hasNext();) {
1:                 String key = (String)i.next();
1:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, contentMap.get(key).toString());
1:             }
1: 
0:         // Do nothing
0:         } else if (typeName.equals(ActiveMQObjectMessage.class.getName()) ||
0:                    typeName.equals(ActiveMQStreamMessage.class.getName()) ||
0:                    typeName.equals(ActiveMQMessage.class.getName())) {
1: 
0:         // Unrecognized composite data. Throw exception.
1:         } else {
1:             throw new IllegalArgumentException("Unrecognized composite data to transform. composite type: " + typeName);
1:         }
1: 
1:         // Process the JMS message header values
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", "" + data.get("JMSCorrelationID"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination",   "" + data.get("JMSDestination"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID",     "" + data.get("JMSMessageID"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo",       "" + data.get("JMSReplyTo"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType",          "" + data.get("JMSType"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode",  "" + data.get("JMSDeliveryMode"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration",    "" + data.get("JMSExpiration"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority",      "" + data.get("JMSPriority"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered",   "" + data.get("JMSRedelivered"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp",     "" + data.get("JMSTimestamp"));
1: 
1:         // Process the JMS custom message properties
1:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "Properties", "" + data.get("Properties"));
1: 
1:         return props;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: import javax.management.openmbean.CompositeDataSupport;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Transform an openMBean composite data to a Map
0:      * @param data - composite data to transform
0:      * @return map object
0:      */
0:     protected Map transformToMap(CompositeDataSupport data) {
0:         Properties props = new Properties();
0: 
0:         String typeName = data.getCompositeType().getTypeName();
0: 
0:         // Retrieve text message
0:         if (typeName.equals(ActiveMQTextMessage.class.getName())) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "Text", data.get("Text").toString());
0: 
0:         // Retrieve byte preview
0:         } else if (typeName.equals(ActiveMQBytesMessage.class.getName())) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyLength", data.get("BodyLength").toString());
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "BodyPreview", new String((byte[])data.get("BodyPreview")));
0: 
0:         // Expand content map
0:         } else if (typeName.equals(ActiveMQMapMessage.class.getName())) {
0:             Map contentMap = (Map)data.get("ContentMap");
0:             for (Iterator i=contentMap.keySet().iterator(); i.hasNext();) {
0:                 String key = (String)i.next();
0:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, contentMap.get(key).toString());
0:             }
0: 
0:         // Do nothing
0:         } else if (typeName.equals(ActiveMQObjectMessage.class.getName()) ||
0:                    typeName.equals(ActiveMQStreamMessage.class.getName()) ||
0:                    typeName.equals(ActiveMQMessage.class.getName())) {
0: 
0:         // Unrecognized composite data. Throw exception.
0:         } else {
0:             throw new IllegalArgumentException("Unrecognized composite data to transform. composite type: " + typeName);
0:         }
0: 
0:         // Process the JMS message header values
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", "" + data.get("JMSCorrelationID"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination",   "" + data.get("JMSDestination"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID",     "" + data.get("JMSMessageID"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo",       "" + data.get("JMSReplyTo"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType",          "" + data.get("JMSType"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode",  "" + data.get("JMSDeliveryMode"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration",    "" + data.get("JMSExpiration"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority",      "" + data.get("JMSPriority"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered",   "" + data.get("JMSRedelivered"));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp",     "" + data.get("JMSTimestamp"));
0: 
0:         // Process the JMS custom message properties
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "Properties", "" + data.get("Properties"));
0: 
0:         return props;
0:     }
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.console.util.AmqMessagesUtil;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: import org.apache.activemq.broker.console.AmqMessagesUtil;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.ActiveMQMapMessage;
0: import org.apache.activemq.command.ActiveMQStreamMessage;
0: import org.apache.activemq.command.ActiveMQMessage;
0: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.jms.JMSException;
0: import javax.jms.DeliveryMode;
0: import java.util.Map;
0: import java.util.Properties;
0: import java.util.Iterator;
0: import java.util.Enumeration;
0: import java.lang.reflect.Method;
0: 
0: public class MapTransformFilter extends ResultTransformFilter {
0:     /**
0:      * Creates a Map transform filter that is able to transform a variety of objects to a properties map object
0:      * @param next - the next query filter
0:      */
0:     public MapTransformFilter(QueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Transform the given object to a Map object
0:      * @param object - object to transform
0:      * @return map object
0:      */
0:     protected Object transformElement(Object object) throws Exception {
0:         // Use reflection to determine how the object should be transformed
0:         try {
0:             Method method = this.getClass().getDeclaredMethod("transformToMap", new Class[] {object.getClass()});
0:             return (Map)method.invoke(this, new Object[] {object});
0:         } catch (NoSuchMethodException e) {
0:             GlobalWriter.print("Unable to transform mbean of type: " + object.getClass().getName() + ". No corresponding transformToMap method found.");
0:             return null;
0:         }
0:     }
0: 
0:     /**
0:      * Transform an ObjectInstance mbean to a Map
0:      * @param obj - ObjectInstance format of an mbean
0:      * @return map object
0:      */
0:     protected Map transformToMap(ObjectInstance obj) {
0:         return transformToMap(obj.getObjectName());
0:     }
0: 
0:     /**
0:      * Transform an ObjectName mbean to a Map
0:      * @param objname - ObjectName format of an mbean
0:      * @return map object
0:      */
0:     protected Map transformToMap(ObjectName objname) {
0:         Properties props = new Properties();
0: 
0:         // Parse object properties
0:         Map objProps = objname.getKeyPropertyList();
0:         for (Iterator i=objProps.keySet().iterator(); i.hasNext();) {
0:             Object key = i.next();
0:             Object val = objProps.get(key);
0:             if (val != null) {
0:                 props.setProperty(key.toString(), val.toString());
0:             }
0:         }
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an Attribute List format of an mbean to a Map
0:      * @param list - AttributeList format of an mbean
0:      * @return map object
0:      */
0:     protected Map transformToMap(AttributeList list) {
0:         Properties props = new Properties();
0:         for (Iterator i=list.iterator(); i.hasNext();) {
0:             Attribute attrib = (Attribute)i.next();
0: 
0:             // If attribute is an ObjectName
0:             if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
0:                 props.putAll(transformToMap((ObjectName)attrib.getValue()));
0:             } else {
0:                 if (attrib.getValue() != null) {
0:                     props.setProperty(attrib.getName(), attrib.getValue().toString());
0:                 }
0:             }
0:         }
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQTextMessage to a Map
0:      * @param msg - text message to trasnform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQTextMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         props.putAll(transformToMap((ActiveMQMessage)msg));
0:         if (msg.getText() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSText", msg.getText());
0:         }
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQBytesMessage to a Map
0:      * @param msg - bytes message to transform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQBytesMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         props.putAll(transformToMap((ActiveMQMessage)msg));
0: 
0:         long bodyLength = msg.getBodyLength();
0:         byte[] msgBody;
0:         int i=0;
0:         // Create separate bytes messages
0:         for (i=0; i<(bodyLength/Integer.MAX_VALUE); i++) {
0:             msgBody = new byte[Integer.MAX_VALUE];
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i+1), new String(msgBody));
0:         }
0:         msgBody = new byte[(int)(bodyLength % Integer.MAX_VALUE)];
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSBytes:" + (i+1), new String(msgBody));
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQMessage to a Map
0:      * @param msg - object message to transform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQObjectMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         props.putAll(transformToMap((ActiveMQMessage)msg));
0:         if (msg.getObject() != null) {
0:             // Just add the class name and toString value of the object
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectClass", msg.getObject().getClass().getName());
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSObjectString", msg.getObject().toString());
0:         }
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQMapMessage to a Map
0:      * @param msg - map message to transform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQMapMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         props.putAll(transformToMap((ActiveMQMessage)msg));
0: 
0:         // Get map properties
0:         Enumeration e = msg.getMapNames();
0:         while (e.hasMoreElements()) {
0:             String key = (String)e.nextElement();
0:             Object val = msg.getObject(key);
0:             if (val != null) {
0:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + key, val.toString());
0:             }
0:         }
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQStreamMessage to a Map
0:      * @param msg - stream message to transform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQStreamMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         props.putAll(transformToMap((ActiveMQMessage)msg));
0:         // Just set the toString of the message as the body of the stream message
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + "JMSStreamMessage", msg.toString());
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform an ActiveMQMessage to a Map
0:      * @param msg - message to transform
0:      * @return map object
0:      * @throws JMSException
0:      */
0:     protected Map transformToMap(ActiveMQMessage msg) throws JMSException {
0:         Properties props = new Properties();
0: 
0:         // Get JMS properties
0:         if (msg.getJMSCorrelationID() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSCorrelationID", msg.getJMSCorrelationID());
0:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDeliveryMode", (msg.getJMSDeliveryMode()==DeliveryMode.PERSISTENT) ? "persistent" : "non-persistent");
0:         if (msg.getJMSDestination() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSDestination", ((ActiveMQDestination)msg.getJMSDestination()).getPhysicalName());
0:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSExpiration", Long.toString(msg.getJMSExpiration()));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSMessageID", msg.getJMSMessageID());
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSPriority", Integer.toString(msg.getJMSPriority()));
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSRedelivered", Boolean.toString(msg.getJMSRedelivered()));
0:         if (msg.getJMSReplyTo() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSReplyTo", ((ActiveMQDestination)msg.getJMSReplyTo()).getPhysicalName());
0:         }
0:         props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSTimestamp", Long.toString(msg.getJMSTimestamp()));
0:         if (msg.getJMSType() != null) {
0:             props.setProperty(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + "JMSType", msg.getJMSType());
0:         }
0: 
0:         // Get custom properties
0:         Enumeration e = msg.getPropertyNames();
0:         while (e.hasMoreElements()) {
0:             String name = (String)e.nextElement();
0:             if (msg.getObjectProperty(name) != null) {
0:                 props.setProperty(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + name, msg.getObjectProperty(name).toString());
0:             }
0:         }
0: 
0:         return props;
0:     }
0: }
============================================================================