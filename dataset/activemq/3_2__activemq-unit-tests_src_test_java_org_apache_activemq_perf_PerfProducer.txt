1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
3:e0fdce4: 
1:e0fdce4: import java.util.concurrent.CountDownLatch;
1:4c137cd: import java.util.concurrent.TimeUnit;
1:e0fdce4: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:230a86c: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:e0fdce4: public class PerfProducer implements Runnable {
1:d29ca2a:     protected Connection connection;
1:d29ca2a:     protected MessageProducer producer;
1:230a86c:     protected PerfRate rate = new PerfRate();
1:e2a3836:     private final byte[] payload;
1:230a86c:     private Session session;
1:230a86c:     private final CountDownLatch stopped = new CountDownLatch(1);
1:230a86c:     private boolean running;
1:e2a3836:     private final boolean transacted;
1:7f0583d:     private int sleep = 0;
1:230a86c: 
1:e2a3836:     public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload) throws JMSException {
1:e2a3836:         this(fac, dest, payload, false);
4:d29ca2a:     }
1:e2a3836:     public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload, boolean transacted)
1:e2a3836:             throws JMSException {
1:230a86c:         connection = fac.createConnection();
1:e2a3836:         this.transacted = transacted;
1:e2a3836:         if (transacted) {
1:e2a3836:             session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:e2a3836:         } else {
1:230a86c:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         }
1:230a86c:         producer = session.createProducer(dest);
1:e2a3836:         this.payload = payload;
1:230a86c:        
1:d29ca2a:     }
1:e0fdce4: 
1:230a86c:     public void setDeliveryMode(int mode) throws JMSException {
1:d29ca2a:         producer.setDeliveryMode(mode);
1:d29ca2a:     }
1:230a86c: 
1:c99f055:     public void setTimeToLive(int ttl) throws JMSException {
1:c99f055:         producer.setTimeToLive(ttl);
1:d29ca2a:     }
1:e0fdce4: 
1:230a86c:     public void shutDown() throws JMSException {
1:d29ca2a:         connection.close();
1:e0fdce4:     }
1:e0fdce4: 
1:230a86c:     public PerfRate getRate() {
1:d29ca2a:         return rate;
1:e0fdce4:     }
1:230a86c: 
1:fc00993:     public synchronized void start() throws JMSException {
1:230a86c:         if (!running) {
1:230a86c:             rate.reset();
1:230a86c:             running = true;
1:230a86c:             connection.start();
1:e2a3836:             Thread t = new Thread(this);
1:4c137cd:             t.setName("Producer");
1:4c137cd:             t.start();
1:230a86c:         }
1:e0fdce4:     }
1:230a86c: 
1:230a86c:     public void stop() throws JMSException, InterruptedException {
1:230a86c:         synchronized (this) {
1:230a86c:             running = false;
1:230a86c:         }
1:e2a3836:         stopped.await(1, TimeUnit.SECONDS);
1:e0fdce4:         connection.stop();
1:e0fdce4:     }
1:230a86c: 
1:fc00993:     public synchronized boolean isRunning() {
1:230a86c:         return running;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void run() {
1:e0fdce4:         try {
1:230a86c:             while (isRunning()) {
1:230a86c:                 BytesMessage msg;
1:230a86c:                 msg = session.createBytesMessage();
1:230a86c:                 msg.writeBytes(payload);
1:230a86c:                 producer.send(msg);
1:e2a3836:                 if(this.transacted) {
1:e2a3836:                     this.session.commit();
1:e0fdce4:                 }
1:230a86c:                 rate.increment();
1:7f0583d:                 if (sleep > 0) {
1:7f0583d:                     Thread.sleep(sleep);
1:230a86c:                 }
1:e0fdce4:             }
1:230a86c:         } catch (Throwable e) {
1:230a86c:             e.printStackTrace();
1:230a86c:         } finally {
1:230a86c:             stopped.countDown();
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:7f0583d:     public int getSleep() {
1:7f0583d:         return sleep;
1:e0fdce4:     }
1:e0fdce4: 
1:7f0583d:     public void setSleep(int sleep) {
1:7f0583d:         this.sleep = sleep;
1:e0fdce4:     }
1:e0fdce4: 
1:86cbdfd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void start() throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean isRunning() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected PerfRate rate = new PerfRate();
0:     private byte[] payload;
1:     private Session session;
1:     private final CountDownLatch stopped = new CountDownLatch(1);
1:     private boolean running;
1: 
0:     public PerfProducer(ConnectionFactory fac, Destination dest, byte[] palyload) throws JMSException {
1:         connection = fac.createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(dest);
1: 
1:     public void setDeliveryMode(int mode) throws JMSException {
1: 
1:     public void shutDown() throws JMSException {
1:     public PerfRate getRate() {
1: 
0:     synchronized public void start() throws JMSException {
1:         if (!running) {
1:             rate.reset();
1:             running = true;
1:             connection.start();
0:             new Thread(this).start();
1:         }
1: 
1:     public void stop() throws JMSException, InterruptedException {
1:         synchronized (this) {
1:             running = false;
1:         }
0:         stopped.await();
1: 
0:     synchronized public boolean isRunning() {
1:         return running;
1:     }
1: 
1:     public void run() {
1:             while (isRunning()) {
1:                 BytesMessage msg;
1:                 msg = session.createBytesMessage();
1:                 msg.writeBytes(payload);
1:                 producer.send(msg);
1:                 rate.increment();
1:             }
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:         } finally {
1:             stopped.countDown();
1:         }
1:     }
1: 
commit:51e6a0d
/////////////////////////////////////////////////////////////////////////
0: 	        rate.reset();
commit:e0fdce4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.BytesMessage;
1: public class PerfProducer implements Runnable {
0: 	private byte[] payload;
0: 	private Session session;
0: 	private final CountDownLatch stopped = new CountDownLatch(1);
0: 	private boolean running;
1: 	
0:     public PerfProducer(ConnectionFactory fac,Destination dest, byte[] palyload) throws JMSException{
0:         session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         producer=session.createProducer(dest);
0:         this.payload = palyload;
1:     
1:     
1: 
1:     	
0: 	synchronized public void start() throws JMSException{
0: 		if( !running ) {
0: 			running = true;
0: 	        connection.start();
0: 	        new Thread(this).start(); 
0: 	        rate.reset();
1: 		}
1:     }
0:     public void stop() throws JMSException, InterruptedException{
0:     	synchronized(this) {
0:     		running=false;
1:     	}
0:     	stopped.await();
1:         connection.stop();
1:     }
0: 	synchronized public boolean isRunning() {
0: 		return running;
1: 	}
1: 	
0: 	public void run() {
1:         try {
0: 			while(isRunning()){
0: 			    BytesMessage msg;
0: 			    msg=session.createBytesMessage();
0: 			    msg.writeBytes(payload);
0: 			    producer.send(msg);
0: 			    rate.increment();
1: 			}
0: 		} catch (Throwable e) {
0: 			e.printStackTrace();
0: 		} finally {
0: 			stopped.countDown();
1: 		}
1: 	}
1: 	
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
0: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
0: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class PerfProducer{
1:     protected Connection connection;
1:     protected MessageProducer producer;
0:     protected PerfRate rate=new PerfRate();
0:     public PerfProducer(ConnectionFactory fac,Destination dest) throws JMSException{
0:         connection=fac.createConnection();
0:         Session s=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         producer=s.createProducer(dest);
1:     }
0:     public void setDeliveryMode(int mode) throws JMSException{
1:         producer.setDeliveryMode(mode);
1:     }
0:     public void start() throws JMSException{
0:         connection.start();
0:         rate.getRate();
1:     }
0:     public void stop() throws JMSException{
0:         connection.stop();
1:     }
0:     public void shutDown() throws JMSException{
1:         connection.close();
1:     }
0:     public void sendMessage(Message msg) throws JMSException{
0:         producer.send(msg);
0:         rate.increment();
1:     }
0:     public PerfRate getRate(){
1:         return rate;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:e2a3836
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final byte[] payload;
1:     private final boolean transacted;
1:     public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload) throws JMSException {
1:         this(fac, dest, payload, false);
0:     }
1:     public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload, boolean transacted)
1:             throws JMSException {
1:         this.transacted = transacted;
1:         if (transacted) {
1:             session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         } else {
0:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         }
1:         this.payload = payload;
0:        
0: 
/////////////////////////////////////////////////////////////////////////
1:             Thread t = new Thread(this);
/////////////////////////////////////////////////////////////////////////
1:         stopped.await(1, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:                 if(this.transacted) {
1:                     this.session.commit();
0:                 }
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1:     private int sleep = 0;
/////////////////////////////////////////////////////////////////////////
1:                 if (sleep > 0) {
1:                     Thread.sleep(sleep);
0:                 }
/////////////////////////////////////////////////////////////////////////
1:     public int getSleep() {
1:         return sleep;
0:     }
0: 
1:     public void setSleep(int sleep) {
1:         this.sleep = sleep;
0:     }
0: 
commit:c99f055
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setTimeToLive(int ttl) throws JMSException {
1:         producer.setTimeToLive(ttl);
0:     }
commit:4c137cd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:             Thread t = new  Thread(this);
1:             t.setName("Producer");
1:             t.start();
/////////////////////////////////////////////////////////////////////////
0:         stopped.await(1,TimeUnit.SECONDS);
============================================================================