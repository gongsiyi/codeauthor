1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: package org.apache.activemq.util;
2:3f32507: 
1:ccbbecb: import org.slf4j.Logger;
1:ccbbecb: import org.slf4j.LoggerFactory;
1:ccbbecb: 
1:3f32507: import java.io.File;
1:3f32507: import java.io.IOException;
1:3f32507: import java.io.RandomAccessFile;
1:3f32507: import java.nio.channels.FileLock;
1:3f32507: import java.nio.channels.OverlappingFileLockException;
1:3f32507: import java.util.Date;
1:3f32507: 
1:3f32507: /**
1:3f32507:  * Used to lock a File.
1:3f32507:  *
1:3f32507:  * @author chirino
1:3f32507:  */
1:3f32507: public class LockFile {
1:3f32507: 
1:3f32507:     private static final boolean DISABLE_FILE_LOCK = Boolean.getBoolean("java.nio.channels.FileLock.broken");
1:3f32507:     final private File file;
1:ccbbecb:     private long lastModified;
1:3f32507: 
1:3f32507:     private FileLock lock;
1:5e36f65:     private RandomAccessFile randomAccessLockFile;
1:3f32507:     private int lockCounter;
1:3f32507:     private final boolean deleteOnUnlock;
1:8c66fba:     private volatile boolean locked;
1:b285d10:     private String lockSystemPropertyName = "";
1:3f32507: 
1:ccbbecb:     private static final Logger LOG = LoggerFactory.getLogger(LockFile.class);
1:ccbbecb: 
1:3f32507:     public LockFile(File file, boolean deleteOnUnlock) {
1:3f32507:         this.file = file;
1:3f32507:         this.deleteOnUnlock = deleteOnUnlock;
2:3f32507:     }
1:3f32507: 
1:ccbbecb:     /**
1:3f32507:      * @throws IOException
1:3f32507:      */
1:3f32507:     synchronized public void lock() throws IOException {
1:3f32507:         if (DISABLE_FILE_LOCK) {
1:3f32507:             return;
1:ccbbecb:         }
1:3f32507: 
1:3f32507:         if (lockCounter > 0) {
1:3f32507:             return;
1:3f32507:         }
1:3f32507: 
1:3f32507:         IOHelper.mkdirs(file.getParentFile());
1:3f32507:         synchronized (LockFile.class) {
1:b285d10:             lockSystemPropertyName = getVmLockKey();
1:b285d10:             if (System.getProperty(lockSystemPropertyName) != null) {
1:b285d10:                 throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm. Value: " + System.getProperty(lockSystemPropertyName));
1:3f32507:             }
1:b285d10:             System.setProperty(lockSystemPropertyName, new Date().toString());
1:3f32507:         }
1:3f32507:         try {
1:3f32507:             if (lock == null) {
1:5e36f65:                 randomAccessLockFile = new RandomAccessFile(file, "rw");
1:3f32507:                 IOException reason = null;
1:3f32507:                 try {
1:5e36f65:                     lock = randomAccessLockFile.getChannel().tryLock(0, Math.max(1, randomAccessLockFile.getChannel().size()), false);
1:3f32507:                 } catch (OverlappingFileLockException e) {
1:3f32507:                     reason = IOExceptionSupport.create("File '" + file + "' could not be locked.", e);
1:3f32507:                 } catch (IOException ioe) {
1:3f32507:                     reason = ioe;
1:3f32507:                 }
1:3f32507:                 if (lock != null) {
1:5e36f65:                     //track lastModified only if we are able to successfully obtain the lock.
1:5e36f65:                     randomAccessLockFile.writeLong(System.currentTimeMillis());
1:5e36f65:                     randomAccessLockFile.getChannel().force(true);
1:ccbbecb:                     lastModified = file.lastModified();
1:3f32507:                     lockCounter++;
1:b285d10:                     System.setProperty(lockSystemPropertyName, new Date().toString());
1:8c66fba:                     locked = true;
1:3f32507:                 } else {
1:3f32507:                     // new read file for next attempt
1:3f32507:                     closeReadFile();
1:3f32507:                     if (reason != null) {
1:3f32507:                         throw reason;
1:3f32507:                     }
1:3f32507:                     throw new IOException("File '" + file + "' could not be locked.");
1:3f32507:                 }
1:3f32507: 
1:3f32507:             }
1:3f32507:         } finally {
1:3f32507:             synchronized (LockFile.class) {
1:3f32507:                 if (lock == null) {
1:b285d10:                     System.getProperties().remove(lockSystemPropertyName);
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      */
1:da076f4:     synchronized public void unlock() {
1:3f32507:         if (DISABLE_FILE_LOCK) {
1:3f32507:             return;
1:3f32507:         }
1:3f32507: 
1:3f32507:         lockCounter--;
1:3f32507:         if (lockCounter != 0) {
1:3f32507:             return;
1:3f32507:         }
1:3f32507: 
1:3f32507:         // release the lock..
1:3f32507:         if (lock != null) {
1:3f32507:             try {
1:3f32507:                 lock.release();
1:3f32507:             } catch (Throwable ignore) {
1:b285d10:             } finally {
1:b285d10:                 if (lockSystemPropertyName != null) {
1:b285d10:                     System.getProperties().remove(lockSystemPropertyName);
1:b285d10:                 }
1:b285d10:                 lock = null;
1:3f32507:             }
1:3f32507:         }
1:3f32507:         closeReadFile();
1:3f32507: 
1:8c66fba:         if (locked && deleteOnUnlock) {
1:3f32507:             file.delete();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     private String getVmLockKey() throws IOException {
1:3f32507:         return getClass().getName() + ".lock." + file.getCanonicalPath();
1:3f32507:     }
1:3f32507: 
1:3f32507:     private void closeReadFile() {
1:3f32507:         // close the file.
1:5e36f65:         if (randomAccessLockFile != null) {
1:3f32507:             try {
1:5e36f65:                 randomAccessLockFile.close();
1:3f32507:             } catch (Throwable ignore) {
1:3f32507:             }
1:5e36f65:             randomAccessLockFile = null;
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:ccbbecb:      * @return true if the lock file's last modified does not match the locally cached lastModified, false otherwise
1:ccbbecb:      */
1:ccbbecb:     private boolean hasBeenModified() {
1:ccbbecb:         boolean modified = false;
1:ccbbecb: 
1:ccbbecb:         //Create a new instance of the File object so we can get the most up to date information on the file.
1:ccbbecb:         File localFile = new File(file.getAbsolutePath());
1:ccbbecb: 
1:ccbbecb:         if (localFile.exists()) {
1:ccbbecb:             if(localFile.lastModified() != lastModified) {
1:ccbbecb:                 LOG.info("Lock file " + file.getAbsolutePath() + ", locked at " + new Date(lastModified) + ", has been modified at " + new Date(localFile.lastModified()));
1:ccbbecb:                 modified = true;
1:ccbbecb:             }
1:ccbbecb:         }
1:ccbbecb:         else {
1:ccbbecb:             //The lock file is missing
1:ccbbecb:             LOG.info("Lock file " + file.getAbsolutePath() + ", does not exist");
1:ccbbecb:             modified = true;
1:ccbbecb:         }
1:ccbbecb: 
1:ccbbecb:         return modified;
1:3f32507:     }
1:3f32507: 
1:0525f88:     public boolean keepAlive() {
1:ccbbecb:         locked = locked && lock != null && lock.isValid() && !hasBeenModified();
1:8c66fba:         return locked;
1:0525f88:     }
1:0525f88: 
1:3f32507: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:da076f4
/////////////////////////////////////////////////////////////////////////
1:     synchronized public void unlock() {
commit:b285d10
/////////////////////////////////////////////////////////////////////////
1:     private String lockSystemPropertyName = "";
/////////////////////////////////////////////////////////////////////////
1:             lockSystemPropertyName = getVmLockKey();
1:             if (System.getProperty(lockSystemPropertyName) != null) {
1:                 throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm. Value: " + System.getProperty(lockSystemPropertyName));
1:             System.setProperty(lockSystemPropertyName, new Date().toString());
/////////////////////////////////////////////////////////////////////////
1:                     System.setProperty(lockSystemPropertyName, new Date().toString());
/////////////////////////////////////////////////////////////////////////
1:                     System.getProperties().remove(lockSystemPropertyName);
/////////////////////////////////////////////////////////////////////////
1:             } finally {
1:                 if (lockSystemPropertyName != null) {
1:                     System.getProperties().remove(lockSystemPropertyName);
1:                 }
1:                 lock = null;
commit:5e36f65
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private RandomAccessFile randomAccessLockFile;
/////////////////////////////////////////////////////////////////////////
1:                 randomAccessLockFile = new RandomAccessFile(file, "rw");
1:                     lock = randomAccessLockFile.getChannel().tryLock(0, Math.max(1, randomAccessLockFile.getChannel().size()), false);
1:                     //track lastModified only if we are able to successfully obtain the lock.
1:                     randomAccessLockFile.writeLong(System.currentTimeMillis());
1:                     randomAccessLockFile.getChannel().force(true);
/////////////////////////////////////////////////////////////////////////
1:         if (randomAccessLockFile != null) {
1:                 randomAccessLockFile.close();
1:             randomAccessLockFile = null;
commit:181e4d4
/////////////////////////////////////////////////////////////////////////
0:                     readFile.getChannel().force(true);
commit:ccbbecb
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.util.Calendar;
/////////////////////////////////////////////////////////////////////////
1:     private long lastModified;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(LockFile.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:                     //Set lastModified only if we are able to successfully obtain the lock.
1:                     lastModified = file.lastModified();
/////////////////////////////////////////////////////////////////////////
1:     }
1:     /**
1:      * @return true if the lock file's last modified does not match the locally cached lastModified, false otherwise
1:      */
1:     private boolean hasBeenModified() {
1:         boolean modified = false;
1: 
1:         //Create a new instance of the File object so we can get the most up to date information on the file.
1:         File localFile = new File(file.getAbsolutePath());
1: 
1:         if (localFile.exists()) {
1:             if(localFile.lastModified() != lastModified) {
1:                 LOG.info("Lock file " + file.getAbsolutePath() + ", locked at " + new Date(lastModified) + ", has been modified at " + new Date(localFile.lastModified()));
1:                 modified = true;
1:             }
1:         }
1:         else {
1:             //The lock file is missing
1:             LOG.info("Lock file " + file.getAbsolutePath() + ", does not exist");
1:             modified = true;
1:         }
1: 
1:         return modified;
1:         locked = locked && lock != null && lock.isValid() && !hasBeenModified();
commit:8c66fba
/////////////////////////////////////////////////////////////////////////
1:     private volatile boolean locked;
/////////////////////////////////////////////////////////////////////////
1:                     locked = true;
/////////////////////////////////////////////////////////////////////////
1:         if (locked && deleteOnUnlock) {
/////////////////////////////////////////////////////////////////////////
0:         locked = locked && lock != null && lock.isValid() && file.exists();
1:         return locked;
commit:74b35bc
/////////////////////////////////////////////////////////////////////////
0:         return lock != null && lock.isValid() && file.exists();
commit:0525f88
/////////////////////////////////////////////////////////////////////////
1:     public boolean keepAlive() {
0:         return lock != null && lock.isValid();
1:     }
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.channels.FileLock;
1: import java.nio.channels.OverlappingFileLockException;
1: import java.util.Date;
1: 
1: /**
1:  * Used to lock a File.
1:  *
1:  * @author chirino
1:  */
1: public class LockFile {
1: 
1:     private static final boolean DISABLE_FILE_LOCK = Boolean.getBoolean("java.nio.channels.FileLock.broken");
1:     final private File file;
1: 
1:     private FileLock lock;
0:     private RandomAccessFile readFile;
1:     private int lockCounter;
1:     private final boolean deleteOnUnlock;
1: 
1:     public LockFile(File file, boolean deleteOnUnlock) {
1:         this.file = file;
1:         this.deleteOnUnlock = deleteOnUnlock;
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      */
1:     synchronized public void lock() throws IOException {
1:         if (DISABLE_FILE_LOCK) {
1:             return;
1:         }
1: 
1:         if (lockCounter > 0) {
1:             return;
1:         }
1: 
1:         IOHelper.mkdirs(file.getParentFile());
1:         synchronized (LockFile.class) {
0:             if (System.getProperty(getVmLockKey()) != null) {
0:                 throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
1:             }
0:             System.setProperty(getVmLockKey(), new Date().toString());
1:         }
1:         try {
1:             if (lock == null) {
0:                 readFile = new RandomAccessFile(file, "rw");
1:                 IOException reason = null;
1:                 try {
0:                     lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);
1:                 } catch (OverlappingFileLockException e) {
1:                     reason = IOExceptionSupport.create("File '" + file + "' could not be locked.", e);
1:                 } catch (IOException ioe) {
1:                     reason = ioe;
1:                 }
1:                 if (lock != null) {
1:                     lockCounter++;
0:                     System.setProperty(getVmLockKey(), new Date().toString());
1:                 } else {
1:                     // new read file for next attempt
1:                     closeReadFile();
1:                     if (reason != null) {
1:                         throw reason;
1:                     }
1:                     throw new IOException("File '" + file + "' could not be locked.");
1:                 }
1: 
1:             }
1:         } finally {
1:             synchronized (LockFile.class) {
1:                 if (lock == null) {
0:                     System.getProperties().remove(getVmLockKey());
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      */
0:     public void unlock() {
1:         if (DISABLE_FILE_LOCK) {
1:             return;
1:         }
1: 
1:         lockCounter--;
1:         if (lockCounter != 0) {
1:             return;
1:         }
1: 
1:         // release the lock..
1:         if (lock != null) {
1:             try {
1:                 lock.release();
0:                 System.getProperties().remove(getVmLockKey());
1:             } catch (Throwable ignore) {
1:             }
0:             lock = null;
1:         }
1:         closeReadFile();
1: 
0:         if (deleteOnUnlock) {
1:             file.delete();
1:         }
1:     }
1: 
1:     private String getVmLockKey() throws IOException {
1:         return getClass().getName() + ".lock." + file.getCanonicalPath();
1:     }
1: 
1:     private void closeReadFile() {
1:         // close the file.
0:         if (readFile != null) {
1:             try {
0:                 readFile.close();
1:             } catch (Throwable ignore) {
1:             }
0:             readFile = null;
1:         }
1: 
1:     }
1: 
0:     public boolean keepAlive() {
0:         return lock != null && lock.isValid() && file.exists();
1:     }
1: 
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.util;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.kahadb.util;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.RandomAccessFile;
0: import java.nio.channels.FileLock;
0: import java.nio.channels.OverlappingFileLockException;
0: 
0: /**
0:  * Used to lock a File.
0:  * 
0:  * @author chirino
0:  */
0: public class LockFile {
0:     
0:     private static final boolean DISABLE_FILE_LOCK = "true".equals(System.getProperty("java.nio.channels.FileLock.broken", "false"));
0:     final private File file;
0:     
0:     private FileLock lock;
0:     private RandomAccessFile readFile;
0:     private int lockCounter;
0:     private final boolean deleteOnUnlock;
0:     
0:     public LockFile(File file, boolean deleteOnUnlock) {
0:         this.file = file;
0:         this.deleteOnUnlock = deleteOnUnlock;
0:     }
0: 
0:     /**
0:      * @throws IOException
0:      */
0:     synchronized public void lock() throws IOException {
0:         if (DISABLE_FILE_LOCK) {
0:             return;
0:         }
0: 
0:         lockCounter++;
0:         if( lockCounter!=1 ) {
0:             return;
0:         }
0:         
0:         IOHelper.mkdirs(file.getParentFile());
0:         readFile = new RandomAccessFile(file, "rw");        
0:         if (lock == null) {
0:             try {
0:                 lock = readFile.getChannel().tryLock();
0:             } catch (OverlappingFileLockException e) {
0:                 throw IOExceptionSupport.create("File '" + file + "' could not be locked.",e);
0:             }
0:             if (lock == null) {
0:                 throw new IOException("File '" + file + "' could not be locked.");
0:             }
0:         }
0:     }
0: 
0:     /**
0:      */
0:     public void unlock() {
0:         if (DISABLE_FILE_LOCK) {
0:             return;
0:         }
0:         
0:         lockCounter--;
0:         if( lockCounter!=0 ) {
0:             return;
0:         }
0:         
0:         // release the lock..
0:         if (lock != null) {
0:             try {
0:                 lock.release();
0:             } catch (Throwable ignore) {
0:             }
0:             lock = null;
0:         }
0:         // close the file.
0:         if (readFile != null) {
0:             try {
0:                 readFile.close();
0:             } catch (Throwable ignore) {
0:             }
0:             readFile = null;
0:         }
0:         
0:         if( deleteOnUnlock ) {
0:             file.delete();
0:         }
0:     }
0: 
0: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:50d3e8e
/////////////////////////////////////////////////////////////////////////
0:         if (lockCounter > 0) {
0:         synchronized (LockFile.class) {
0:             if (System.getProperty(getVmLockKey()) != null) {
0:                 throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
0:             }
0:             System.setProperty(getVmLockKey(), new Date().toString());
0:         try {
0:             if (lock == null) {
0:                 readFile = new RandomAccessFile(file, "rw");
0:                 IOException reason = null;
0:                 try {
0:                     lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);
0:                 } catch (OverlappingFileLockException e) {
0:                     reason = IOExceptionSupport.create("File '" + file + "' could not be locked.", e);
0:                 } catch (IOException ioe) {
0:                     reason = ioe;
0:                 if (lock != null) {
0:                     lockCounter++;
0:                     System.setProperty(getVmLockKey(), new Date().toString());
0:                 } else {
0:                     // new read file for next attempt
0:                     closeReadFile();
0:                     if (reason != null) {
0:                         throw reason;
0:                     }
0:                     throw new IOException("File '" + file + "' could not be locked.");
0:                 }
0:             }
0:         } finally {
0:             synchronized (LockFile.class) {
0:                 if (lock == null) {
0:                     System.getProperties().remove(getVmLockKey());
0:                 }
0:             }
/////////////////////////////////////////////////////////////////////////
0:         if (lockCounter != 0) {
/////////////////////////////////////////////////////////////////////////
0:         if (deleteOnUnlock) {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:cdba931
/////////////////////////////////////////////////////////////////////////
0:  *
0: 
0:     private static final boolean DISABLE_FILE_LOCK = Boolean.getBoolean("java.nio.channels.FileLock.broken");
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:47833b7
/////////////////////////////////////////////////////////////////////////
0:                 lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);
commit:68bcac1
/////////////////////////////////////////////////////////////////////////
0:                 lock = readFile.getChannel().tryLock(0, readFile.getChannel().size(), false);
author:Gary Tully
-------------------------------------------------------------------------------
commit:d650d0c
/////////////////////////////////////////////////////////////////////////
0:             } catch (IOException ioe) {
0:                 reason = ioe;
commit:e85dda9
/////////////////////////////////////////////////////////////////////////
0: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
0:         if (System.getProperty(getVmLockKey()) != null) {
0:             throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
0:         }
/////////////////////////////////////////////////////////////////////////
0:                 System.setProperty(getVmLockKey(), new Date().toString());
/////////////////////////////////////////////////////////////////////////
0:                 System.getProperties().remove(getVmLockKey());
/////////////////////////////////////////////////////////////////////////
0:     private String getVmLockKey() throws IOException {
0:         return getClass().getName() + ".lock." + file.getCanonicalPath();
0:     }
0: 
commit:8689659
/////////////////////////////////////////////////////////////////////////
0:         
0:             readFile = new RandomAccessFile(file, "rw");
0:             IOException reason = null;
0:                 reason = IOExceptionSupport.create("File '" + file + "' could not be locked.",e);
0:                 // new read file for next attempt
0:                 closeReadFile();
0:                 if (reason != null) {
0:                     throw reason;
0:                 }
/////////////////////////////////////////////////////////////////////////
0:         closeReadFile();
0:         
0:         if( deleteOnUnlock ) {
0:             file.delete();
0:         }
0:     }
0: 
0:     private void closeReadFile() {
/////////////////////////////////////////////////////////////////////////
commit:589f924
/////////////////////////////////////////////////////////////////////////
0:         if (readFile == null) {
0:             readFile = new RandomAccessFile(file, "rw");
0:         }
commit:a88a513
/////////////////////////////////////////////////////////////////////////
0:         if( lockCounter>0 ) {
/////////////////////////////////////////////////////////////////////////
0:             if (lock != null) {
0:                 lockCounter++;
0:             } else {
0:               
============================================================================