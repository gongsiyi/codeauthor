1:fc00993: /**
1:4102acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4102acc:  * contributor license agreements.  See the NOTICE file distributed with
1:4102acc:  * this work for additional information regarding copyright ownership.
1:4102acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4102acc:  * (the "License"); you may not use this file except in compliance with
1:4102acc:  * the License.  You may obtain a copy of the License at
1:4102acc:  *
1:4102acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4102acc:  *
1:4102acc:  * Unless required by applicable law or agreed to in writing, software
1:4102acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4102acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4102acc:  * See the License for the specific language governing permissions and
1:4102acc:  * limitations under the License.
1:4102acc:  */
1:4102acc: package org.apache.activemq.camel;
1:43ba1be: 
1:4102acc: import javax.jms.Connection;
1:4102acc: import javax.jms.ConnectionFactory;
1:4102acc: import javax.jms.Destination;
1:4102acc: import javax.jms.Message;
1:4102acc: import javax.jms.MessageConsumer;
1:4102acc: import javax.jms.MessageProducer;
1:4102acc: import javax.jms.ObjectMessage;
1:4102acc: import javax.jms.Session;
1:4102acc: import javax.jms.TextMessage;
1:ec80f28: 
1:74a7a8b: import org.apache.camel.component.mock.MockEndpoint;
1:e24a791: import org.apache.camel.ProducerTemplate;
1:d4da85f: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:5e6f8a1: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:74a7a8b: 
1:4102acc: /**
1:b0c2a40:  * 
1:4102acc:  */
1:5e6f8a1: public class CamelJmsTest extends CamelSpringTestSupport {
1:43ba1be:     
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CamelJmsTest.class);
4:4102acc:     
1:4102acc:     protected String expectedBody = "<hello>world!</hello>";
1:4102acc: 
1:5e6f8a1:     @Test
1:4102acc:     public void testSendingViaJmsIsReceivedByCamel() throws Exception {
1:4102acc:         MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);
1:4102acc:         result.expectedBodiesReceived(expectedBody);
1:4102acc:         result.message(0).header("foo").isEqualTo("bar");
1:4102acc: 
1:4102acc:         // lets create a message
1:4102acc:         Destination destination = getMandatoryBean(Destination.class, "sendTo");
1:4102acc:         ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory");
1:4102acc: 
1:4102acc:         Connection connection = factory.createConnection();
1:4102acc:         connection.start();
1:4102acc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4102acc:         MessageProducer producer = session.createProducer(destination);
1:4102acc: 
1:4102acc:         // now lets send a message
1:4102acc:         ObjectMessage message = session.createObjectMessage(expectedBody);
1:4102acc:         message.setStringProperty("foo", "bar");
1:4102acc:         producer.send(message);
1:4102acc: 
1:4102acc:         result.assertIsSatisfied();
1:4102acc: 
1:43ba1be:         LOG.info("Received message: " + result.getReceivedExchanges());
2:4102acc:     }
1:4102acc: 
1:5e6f8a1:     @Test
1:4102acc:     public void testConsumingViaJMSReceivesMessageFromCamel() throws Exception {
1:4102acc:         // lets create a message
1:4102acc:         Destination destination = getMandatoryBean(Destination.class, "consumeFrom");
1:4102acc:         ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory");
1:26eb49f:         ProducerTemplate template = getMandatoryBean(ProducerTemplate.class, "camelTemplate");
1:26eb49f:         assertNotNull("template is valid", template);
1:26eb49f:         
1:4102acc:         Connection connection = factory.createConnection();
1:4102acc:         connection.start();
1:4102acc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4102acc: 
1:43ba1be:         LOG.info("Consuming from: " + destination);
1:4102acc:         MessageConsumer consumer = session.createConsumer(destination);
1:4102acc: 
1:4102acc:         // now lets send a message
1:4102acc:         template.sendBody("seda:consumer", expectedBody);
1:4102acc: 
1:4102acc:         Message message = consumer.receive(5000);
1:5e6f8a1:         assertNotNull("Should have received a message from destination: " + destination, message);
1:4102acc: 
1:4102acc:         TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message);
1:5e6f8a1:         assertEquals("Message body", expectedBody, textMessage.getText());
1:4102acc: 
1:43ba1be:         LOG.info("Received message: " + message);
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected int getExpectedRouteCount() {
1:4102acc:         return 0;
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected ClassPathXmlApplicationContext createApplicationContext() {
1:4102acc:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/spring.xml");
1:8bf987b:     }
1:4102acc: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.test.junit4.CamelSpringTestSupport;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: public class CamelJmsTest extends CamelSpringTestSupport {
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have received a message from destination: " + destination, message);
1:         assertEquals("Message body", expectedBody, textMessage.getText());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:1dc4b25
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.CamelTemplate;
commit:ec80f28
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.camel.impl.CamelTemplate;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Assert;
0: import org.apache.camel.CamelTemplate;
1: import org.apache.camel.component.mock.MockEndpoint;
0: import org.apache.camel.spring.SpringTestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
commit:43ba1be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.demo.DefaultQueueSender;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final Log LOG = LogFactory.getLog(CamelJmsTest.class);
1:     
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Received message: " + result.getReceivedExchanges());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consuming from: " + destination);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Received message: " + message);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CamelJmsTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:26eb49f
/////////////////////////////////////////////////////////////////////////
1:         ProducerTemplate template = getMandatoryBean(ProducerTemplate.class, "camelTemplate");
1:         assertNotNull("template is valid", template);
1:         
author:James Strachan
-------------------------------------------------------------------------------
commit:e24a791
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.ProducerTemplate;
commit:4102acc
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
0: import junit.framework.Assert;
0: import org.apache.camel.CamelTemplate;
0: import org.apache.camel.component.mock.MockEndpoint;
0: import org.apache.camel.spring.SpringTestSupport;
0: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
0:  * @version $Revision: $
1:  */
0: public class CamelJmsTest extends SpringTestSupport {
1:     protected String expectedBody = "<hello>world!</hello>";
1: 
1:     public void testSendingViaJmsIsReceivedByCamel() throws Exception {
1:         MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);
1:         result.expectedBodiesReceived(expectedBody);
1:         result.message(0).header("foo").isEqualTo("bar");
1: 
1:         // lets create a message
1:         Destination destination = getMandatoryBean(Destination.class, "sendTo");
1:         ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory");
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // now lets send a message
1:         ObjectMessage message = session.createObjectMessage(expectedBody);
1:         message.setStringProperty("foo", "bar");
1:         producer.send(message);
1: 
1:         result.assertIsSatisfied();
1: 
0:         log.info("Received message: " + result.getReceivedExchanges());
1:     }
1: 
1:     public void testConsumingViaJMSReceivesMessageFromCamel() throws Exception {
1:         // lets create a message
1:         Destination destination = getMandatoryBean(Destination.class, "consumeFrom");
1:         ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory");
0:         CamelTemplate template = getMandatoryBean(CamelTemplate.class, "camelTemplate");
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         log.info("Consuming from: " + destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         // now lets send a message
1:         template.sendBody("seda:consumer", expectedBody);
1: 
1:         Message message = consumer.receive(5000);
0:         Assert.assertNotNull("Should have received a message from destination: " + destination, message);
1: 
1:         TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message);
0:         Assert.assertEquals("Message body", expectedBody, textMessage.getText());
1: 
0:         log.info("Received message: " + message);
1:     }
1: 
1:     protected int getExpectedRouteCount() {
1:         return 0;
1:     }
1: 
1:     protected ClassPathXmlApplicationContext createApplicationContext() {
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/spring.xml");
1:     }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.impl.DefaultProducerTemplate;
/////////////////////////////////////////////////////////////////////////
0:         DefaultProducerTemplate template = getMandatoryBean(DefaultProducerTemplate.class, "camelTemplate");
============================================================================