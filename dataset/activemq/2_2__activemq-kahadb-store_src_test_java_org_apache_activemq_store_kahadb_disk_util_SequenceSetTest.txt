1:82e3be3: /**
1:82e3be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82e3be3:  * contributor license agreements.  See the NOTICE file distributed with
1:82e3be3:  * this work for additional information regarding copyright ownership.
1:82e3be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82e3be3:  * (the "License"); you may not use this file except in compliance with
1:82e3be3:  * the License.  You may obtain a copy of the License at
1:82e3be3:  *
1:82e3be3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82e3be3:  *
1:82e3be3:  * Unless required by applicable law or agreed to in writing, software
1:82e3be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82e3be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82e3be3:  * See the License for the specific language governing permissions and
1:82e3be3:  * limitations under the License.
1:82e3be3:  */
1:82e3be3: 
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:82e3be3: 
1:82e3be3: import static org.junit.Assert.*;
1:82e3be3: 
1:82e3be3: import java.util.Iterator;
1:82e3be3: 
1:82e3be3: import org.junit.Test;
1:82e3be3: 
1:82e3be3: public class SequenceSetTest {
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testAddLong() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.add(1);
1:82e3be3:         assertEquals(1, set.rangeSize());
1:82e3be3:         set.add(10);
1:82e3be3:         set.add(20);
1:82e3be3:         assertEquals(3, set.rangeSize());
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testRangeSize() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.add(1);
1:82e3be3:         assertEquals(1, set.rangeSize());
1:82e3be3:         set.add(10);
1:82e3be3:         set.add(20);
1:82e3be3:         assertEquals(3, set.rangeSize());
1:82e3be3:         set.clear();
1:82e3be3:         assertEquals(0, set.rangeSize());
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testIsEmpty() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         assertTrue(set.isEmpty());
1:82e3be3:         set.add(1);
1:82e3be3:         assertFalse(set.isEmpty());
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testClear() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.clear();
1:82e3be3:         assertTrue(set.isEmpty());
1:82e3be3:         set.add(1);
1:82e3be3:         assertFalse(set.isEmpty());
1:82e3be3:         set.clear();
1:82e3be3:         assertTrue(set.isEmpty());
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testContains() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.add(new Sequence(0, 10));
1:82e3be3:         set.add(new Sequence(21, 42));
1:82e3be3:         set.add(new Sequence(47, 90));
1:82e3be3:         set.add(new Sequence(142, 512));
1:82e3be3: 
1:82e3be3:         assertTrue(set.contains(0));
1:82e3be3:         assertTrue(set.contains(42));
1:82e3be3:         assertTrue(set.contains(49));
1:82e3be3:         assertTrue(set.contains(153));
1:82e3be3: 
1:82e3be3:         assertFalse(set.contains(43));
1:82e3be3:         assertFalse(set.contains(99));
1:82e3be3:         assertFalse(set.contains(-1));
1:82e3be3:         assertFalse(set.contains(11));
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testRemove() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.add(new Sequence(0, 100));
1:82e3be3:         assertEquals(101, set.rangeSize());
1:82e3be3: 
1:82e3be3:         assertEquals(1, set.size());
1:82e3be3:         assertFalse(set.remove(101));
1:82e3be3:         assertTrue(set.remove(50));
1:82e3be3:         assertEquals(2, set.size());
1:82e3be3:         assertEquals(100, set.rangeSize());
1:82e3be3:         assertFalse(set.remove(101));
1:82e3be3: 
1:82e3be3:         set.remove(0);
1:82e3be3:         assertEquals(2, set.size());
1:82e3be3:         assertEquals(99, set.rangeSize());
1:82e3be3:         set.remove(100);
1:82e3be3:         assertEquals(2, set.size());
1:82e3be3:         assertEquals(98, set.rangeSize());
1:82e3be3: 
1:82e3be3:         set.remove(10);
1:82e3be3:         assertEquals(3, set.size());
1:82e3be3:         assertEquals(97, set.rangeSize());
1:82e3be3:     }
1:82e3be3: 
1:82e3be3:     @Test
1:82e3be3:     public void testIterator() {
1:82e3be3:         SequenceSet set = new SequenceSet();
1:82e3be3:         set.add(new Sequence(0, 2));
1:82e3be3:         set.add(new Sequence(4, 5));
1:82e3be3:         set.add(new Sequence(7));
1:82e3be3:         set.add(new Sequence(20, 21));
1:82e3be3: 
1:82e3be3:         long expected[] = new long[]{0, 1, 2, 4, 5, 7, 20, 21};
1:82e3be3:         int index = 0;
1:82e3be3: 
1:82e3be3:         Iterator<Long> iterator = set.iterator();
1:82e3be3:         while(iterator.hasNext()) {
1:82e3be3:             assertEquals(expected[index++], iterator.next().longValue());
1:82e3be3:         }
1:82e3be3:     }
1:6e6d860: 
1:6e6d860:     @Test
1:6e6d860:     public void testIteratorEmptySequenceSet() {
1:6e6d860:         SequenceSet set = new SequenceSet();
1:6e6d860: 
1:6e6d860:         Iterator<Long> iterator = set.iterator();
1:6e6d860:         while(iterator.hasNext()) {
1:6e6d860:             fail("Should not have any elements");
1:6e6d860:         }
1:6e6d860:     }
1:82e3be3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6010bd3
commit:6e6d860
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testIteratorEmptySequenceSet() {
1:         SequenceSet set = new SequenceSet();
1: 
1:         Iterator<Long> iterator = set.iterator();
1:         while(iterator.hasNext()) {
1:             fail("Should not have any elements");
1:         }
1:     }
commit:82e3be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.kahadb.util;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.util.Iterator;
1: 
1: import org.junit.Test;
1: 
1: public class SequenceSetTest {
1: 
1:     @Test
1:     public void testAddLong() {
1:         SequenceSet set = new SequenceSet();
1:         set.add(1);
1:         assertEquals(1, set.rangeSize());
1:         set.add(10);
1:         set.add(20);
1:         assertEquals(3, set.rangeSize());
1:     }
1: 
1:     @Test
1:     public void testRangeSize() {
1:         SequenceSet set = new SequenceSet();
1:         set.add(1);
1:         assertEquals(1, set.rangeSize());
1:         set.add(10);
1:         set.add(20);
1:         assertEquals(3, set.rangeSize());
1:         set.clear();
1:         assertEquals(0, set.rangeSize());
1:     }
1: 
1:     @Test
1:     public void testIsEmpty() {
1:         SequenceSet set = new SequenceSet();
1:         assertTrue(set.isEmpty());
1:         set.add(1);
1:         assertFalse(set.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testClear() {
1:         SequenceSet set = new SequenceSet();
1:         set.clear();
1:         assertTrue(set.isEmpty());
1:         set.add(1);
1:         assertFalse(set.isEmpty());
1:         set.clear();
1:         assertTrue(set.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testContains() {
1:         SequenceSet set = new SequenceSet();
1:         set.add(new Sequence(0, 10));
1:         set.add(new Sequence(21, 42));
1:         set.add(new Sequence(47, 90));
1:         set.add(new Sequence(142, 512));
1: 
1:         assertTrue(set.contains(0));
1:         assertTrue(set.contains(42));
1:         assertTrue(set.contains(49));
1:         assertTrue(set.contains(153));
1: 
1:         assertFalse(set.contains(43));
1:         assertFalse(set.contains(99));
1:         assertFalse(set.contains(-1));
1:         assertFalse(set.contains(11));
1:     }
1: 
1:     @Test
1:     public void testRemove() {
1:         SequenceSet set = new SequenceSet();
1:         set.add(new Sequence(0, 100));
1:         assertEquals(101, set.rangeSize());
1: 
1:         assertEquals(1, set.size());
1:         assertFalse(set.remove(101));
1:         assertTrue(set.remove(50));
1:         assertEquals(2, set.size());
1:         assertEquals(100, set.rangeSize());
1:         assertFalse(set.remove(101));
1: 
1:         set.remove(0);
1:         assertEquals(2, set.size());
1:         assertEquals(99, set.rangeSize());
1:         set.remove(100);
1:         assertEquals(2, set.size());
1:         assertEquals(98, set.rangeSize());
1: 
1:         set.remove(10);
1:         assertEquals(3, set.size());
1:         assertEquals(97, set.rangeSize());
1:     }
1: 
1:     @Test
1:     public void testIterator() {
1:         SequenceSet set = new SequenceSet();
1:         set.add(new Sequence(0, 2));
1:         set.add(new Sequence(4, 5));
1:         set.add(new Sequence(7));
1:         set.add(new Sequence(20, 21));
1: 
1:         long expected[] = new long[]{0, 1, 2, 4, 5, 7, 20, 21};
1:         int index = 0;
1: 
1:         Iterator<Long> iterator = set.iterator();
1:         while(iterator.hasNext()) {
1:             assertEquals(expected[index++], iterator.next().longValue());
1:         }
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
============================================================================