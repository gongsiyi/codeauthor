1:5eb274d: /**
1:5eb274d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5eb274d:  * contributor license agreements.  See the NOTICE file distributed with
1:5eb274d:  * this work for additional information regarding copyright ownership.
1:5eb274d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5eb274d:  * (the "License"); you may not use this file except in compliance with
1:5eb274d:  * the License.  You may obtain a copy of the License at
1:5eb274d:  *
1:5eb274d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5eb274d:  *
1:5eb274d:  * Unless required by applicable law or agreed to in writing, software
1:5eb274d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5eb274d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5eb274d:  * See the License for the specific language governing permissions and
1:5eb274d:  * limitations under the License.
1:5eb274d:  */
1:5eb274d: package org.apache.activemq.bugs;
23:5eb274d: 
1:5eb274d: import java.io.File;
1:5eb274d: import java.util.concurrent.CountDownLatch;
1:5eb274d: 
1:5eb274d: import javax.jms.Connection;
1:5eb274d: import javax.jms.DeliveryMode;
1:5eb274d: import javax.jms.Destination;
1:5eb274d: import javax.jms.Message;
1:5eb274d: import javax.jms.MessageConsumer;
1:5eb274d: import javax.jms.MessageProducer;
1:5eb274d: import javax.jms.Session;
1:5eb274d: 
1:5eb274d: import junit.framework.Test;
1:5eb274d: 
1:5eb274d: import org.apache.activemq.ActiveMQConnectionFactory;
1:5eb274d: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:5eb274d: import org.apache.activemq.CombinationTestSupport;
1:5eb274d: import org.apache.activemq.broker.BrokerService;
1:5eb274d: import org.apache.activemq.command.ActiveMQTopic;
1:5eb274d: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:5eb274d: 
1:5eb274d: public class AMQ2314Test extends CombinationTestSupport {
1:5eb274d: 
1:5eb274d:     public boolean consumeAll = false;
1:5eb274d:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:42e51a3: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2314Test.class);
1:5eb274d:     private static final int MESSAGES_COUNT = 30000;
1:5eb274d:     private static byte[]  buf = new byte[1024];
1:5eb274d:     private BrokerService broker;
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:42e51a3:     private static final long messageReceiveTimeout = 500L;
1:5eb274d: 
1:5eb274d:     Destination destination = new ActiveMQTopic("FooTwo");
1:42e51a3: 
1:5eb274d:     public void testRemoveSlowSubscriberWhacksTempStore() throws Exception {
1:5eb274d:         runProducerWithHungConsumer();
1:5eb274d:     }
1:42e51a3: 
1:5eb274d:     public void testMemoryUsageReleasedOnAllConsumed() throws Exception {
1:5eb274d:         consumeAll = true;
1:5eb274d:         runProducerWithHungConsumer();
1:5eb274d:         // do it again to ensure memory limits are decreased
1:5eb274d:         runProducerWithHungConsumer();
1:5eb274d:     }
1:42e51a3: 
1:5eb274d:     public void runProducerWithHungConsumer() throws Exception {
1:42e51a3: 
1:5eb274d:         final CountDownLatch consumerContinue = new CountDownLatch(1);
1:5eb274d:         final CountDownLatch consumerReady = new CountDownLatch(1);
1:42e51a3: 
1:5eb274d:         final long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();
1:42e51a3: 
1:42e51a3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:5eb274d:         factory.setAlwaysSyncSend(true);
1:42e51a3: 
1:5eb274d:         // ensure messages are spooled to disk for this consumer
1:5eb274d:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:5eb274d:         prefetch.setTopicPrefetch(500);
1:5eb274d:         factory.setPrefetchPolicy(prefetch);
1:5eb274d:         final Connection connection = factory.createConnection();
1:5eb274d:         connection.start();
1:5eb274d: 
1:5eb274d:         Thread producingThread = new Thread("Producing thread") {
1:5eb274d:             public void run() {
1:5eb274d:                 try {
1:5eb274d:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5eb274d:                     MessageProducer producer = session.createProducer(destination);
1:5eb274d:                     producer.setDeliveryMode(deliveryMode);
1:5eb274d:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:5eb274d:                         Message message = session.createTextMessage(new String(buf) + idx);
1:5eb274d:                         producer.send(message);
1:5eb274d:                     }
1:5eb274d:                     producer.close();
1:5eb274d:                     session.close();
1:5eb274d:                 } catch (Throwable ex) {
1:5eb274d:                     ex.printStackTrace();
1:5eb274d:                 }
1:5eb274d:             }
1:5eb274d:         };
1:42e51a3: 
1:5eb274d:         Thread consumingThread = new Thread("Consuming thread") {
1:5eb274d:             public void run() {
1:5eb274d:                 try {
1:5eb274d:                     int count = 0;
1:5eb274d:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5eb274d:                     MessageConsumer consumer = session.createConsumer(destination);
1:42e51a3: 
1:5eb274d:                     while (consumer.receive(messageReceiveTimeout) == null) {
1:5eb274d:                         consumerReady.countDown();
1:5eb274d:                     }
1:5eb274d:                     count++;
1:42e51a3:                     LOG.info("Received one... waiting");
1:5eb274d:                     consumerContinue.await();
1:5eb274d:                     if (consumeAll) {
1:5eb274d:                         LOG.info("Consuming the rest of the messages...");
1:5eb274d:                         while (consumer.receive(messageReceiveTimeout) != null) {
1:5eb274d:                             count++;
1:5eb274d:                         }
1:5eb274d:                     }
1:5eb274d:                     LOG.info("consumer session closing: consumed count: " + count);
1:5eb274d:                     session.close();
1:5eb274d:                 } catch (Throwable ex) {
1:5eb274d:                     ex.printStackTrace();
1:5eb274d:                 }
1:5eb274d:             }
1:5eb274d:         };
1:5eb274d:         consumingThread.start();
1:5eb274d:         consumerReady.await();
1:42e51a3: 
1:5eb274d:         producingThread.start();
1:5eb274d:         producingThread.join();
1:42e51a3: 
1:5eb274d:         final long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();
1:5eb274d:         LOG.info("Orig Usage: " + origTempUsage + ", currentUsage: " + tempUsageBySubscription);
1:5eb274d:         assertTrue("some temp store has been used", tempUsageBySubscription != origTempUsage);
1:5eb274d:         consumerContinue.countDown();
1:5eb274d:         consumingThread.join();
1:5eb274d:         connection.close();
1:42e51a3: 
1:ff3bad1:         LOG.info("Subscription Usage: " + tempUsageBySubscription + ", endUsage: "
1:5eb274d:                 + broker.getSystemUsage().getTempUsage().getUsage());
1:42e51a3: 
1:5eb274d:         assertTrue("temp usage decreased with removed sub", Wait.waitFor(new Wait.Condition(){
1:5eb274d:             public boolean isSatisified() throws Exception {
1:5eb274d:                 return broker.getSystemUsage().getTempUsage().getUsage()  < tempUsageBySubscription;
1:5eb274d:             }
1:5eb274d:         }));
1:5eb274d:     }
1:42e51a3: 
1:5eb274d:     public void setUp() throws Exception {
1:5eb274d:         super.setAutoFail(true);
1:5eb274d:         super.setUp();
1:5eb274d:         broker = new BrokerService();
1:5eb274d:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:5eb274d:         broker.setPersistent(true);
1:5eb274d:         broker.setUseJmx(true);
1:5eb274d:         broker.setAdvisorySupport(false);
1:5eb274d:         broker.setDeleteAllMessagesOnStartup(true);
1:ff3bad1:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l*1024*64);
1:5eb274d: 
1:42e51a3:         broker.addConnector("tcp://localhost:0").setName("Default");
1:5eb274d:         broker.start();
1:42e51a3: 
1:42e51a3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:5eb274d:     }
1:42e51a3: 
1:5eb274d:     public void tearDown() throws Exception {
1:5eb274d:         broker.stop();
1:5eb274d:     }
1:42e51a3: 
1:5eb274d:     public static Test suite() {
1:5eb274d:         return suite(AMQ2314Test.class);
1:5eb274d:     }
1:5eb274d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ff3bad1
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Subscription Usage: " + tempUsageBySubscription + ", endUsage: "
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l*1024*64);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1: 
1:     private String connectionUri;
1: 
1:     private static final long messageReceiveTimeout = 500L;
1: 
1: 
1: 
1: 
1: 
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:                     LOG.info("Received one... waiting");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2314Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:5eb274d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class AMQ2314Test extends CombinationTestSupport {
1: 
1:     public boolean consumeAll = false;
1:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     
0:     private static final Log LOG = LogFactory.getLog(AMQ2314Test.class);
1:     private static final int MESSAGES_COUNT = 30000;
1:     private static byte[]  buf = new byte[1024];
1:     private BrokerService broker;
1:     
0:     protected long messageReceiveTimeout = 500L;
1: 
1:     Destination destination = new ActiveMQTopic("FooTwo");
1:     
1:     public void testRemoveSlowSubscriberWhacksTempStore() throws Exception {
1:         runProducerWithHungConsumer();
1:     }
1:     
1:     public void testMemoryUsageReleasedOnAllConsumed() throws Exception {
1:         consumeAll = true;
1:         runProducerWithHungConsumer();
1:         // do it again to ensure memory limits are decreased
1:         runProducerWithHungConsumer();
1:     }
1:     
1:     
1:     public void runProducerWithHungConsumer() throws Exception {
1:     
1:         final CountDownLatch consumerContinue = new CountDownLatch(1);
1:         final CountDownLatch consumerReady = new CountDownLatch(1);
1:         
1:         final long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();
1:         
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         factory.setAlwaysSyncSend(true);
1:         
1:         // ensure messages are spooled to disk for this consumer
1:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:         prefetch.setTopicPrefetch(500);
1:         factory.setPrefetchPolicy(prefetch);
1:         final Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         Thread producingThread = new Thread("Producing thread") {
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:                         Message message = session.createTextMessage(new String(buf) + idx);
1:                         producer.send(message);
1:                     }
1:                     producer.close();
1:                     session.close();
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         
1:         Thread consumingThread = new Thread("Consuming thread") {
1:             public void run() {
1:                 try {
1:                     int count = 0;
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageConsumer consumer = session.createConsumer(destination);
1:                     
1:                     while (consumer.receive(messageReceiveTimeout) == null) {
1:                         consumerReady.countDown();
1:                     }
1:                     count++;
0:                     LOG.info("Received one... waiting");  
1:                     consumerContinue.await();
1:                     if (consumeAll) {
1:                         LOG.info("Consuming the rest of the messages...");
1:                         while (consumer.receive(messageReceiveTimeout) != null) {
1:                             count++;
1:                         }
1:                     }
1:                     LOG.info("consumer session closing: consumed count: " + count);
1:                     session.close();
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         consumingThread.start();
1:         consumerReady.await();
1:         
1:         producingThread.start();
1:         producingThread.join();
1:         
1:         final long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();
1:         LOG.info("Orig Usage: " + origTempUsage + ", currentUsage: " + tempUsageBySubscription);
1:         assertTrue("some temp store has been used", tempUsageBySubscription != origTempUsage);
1:         consumerContinue.countDown();
1:         consumingThread.join();
1:         connection.close();
1:        
0:         LOG.info("Subscrition Usage: " + tempUsageBySubscription + ", endUsage: "
1:                 + broker.getSystemUsage().getTempUsage().getUsage());
1:         
1:         assertTrue("temp usage decreased with removed sub", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getSystemUsage().getTempUsage().getUsage()  < tempUsageBySubscription;
1:             }
1:         }));
1:     }
1:     
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
0:         broker.addConnector("tcp://localhost:61616").setName("Default");
1:         broker.start();
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1:     
1:     
1:     public static Test suite() {
1:         return suite(AMQ2314Test.class);
1:     }
1: 
1: }
============================================================================