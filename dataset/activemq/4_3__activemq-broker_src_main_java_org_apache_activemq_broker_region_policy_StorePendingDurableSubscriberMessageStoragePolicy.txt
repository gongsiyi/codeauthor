1:19812e7: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:19812e7:  */
1:19812e7: package org.apache.activemq.broker.region.policy;
2:19812e7: 
1:23cda2d: import org.apache.activemq.broker.Broker;
1:93e2bd3: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:19812e7: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1:19812e7: import org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor;
1:19812e7: 
1:19812e7: /**
1:230a86c:  * Creates a PendingMessageCursor that access the persistent store to retrieve
1:230a86c:  * messages
1:e006780:  * 
1:230a86c:  * @org.apache.xbean.XBean element="storeDurableSubscriberCursor"
1:230a86c:  *                         description="Pending messages for a durable
1:230a86c:  *                         subscriber are referenced from the Store"
1:b0c2a40:  * 
1:19812e7:  */
1:230a86c: public class StorePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy {
1:7d54942:     boolean immediatePriorityDispatch = true;
1:fe31092:     boolean useCache = true;
1:7d54942: 
1:7d54942:     public boolean isImmediatePriorityDispatch() {
1:7d54942:         return immediatePriorityDispatch;
1:7d54942:     }
1:7d54942: 
1:7d54942:     /**
1:7d54942:      * Ensure that new higher priority messages will get an immediate dispatch
1:7d54942:      * rather than wait for the end of the current cursor batch.
1:fe31092:      * Useful when there is a large message backlog and intermittent high priority messages.
1:7d54942:      *
1:7d54942:      * @param immediatePriorityDispatch
1:7d54942:      */
1:7d54942:     public void setImmediatePriorityDispatch(boolean immediatePriorityDispatch) {
1:7d54942:         this.immediatePriorityDispatch = immediatePriorityDispatch;
1:7d54942:     }
1:19812e7: 
1:fe31092:     public boolean isUseCache() {
1:fe31092:         return useCache;
1:fe31092:     }
1:fe31092: 
1:fe31092:     public void setUseCache(boolean useCache) {
1:fe31092:         this.useCache = useCache;
1:fe31092:     }
1:fe31092: 
1:19812e7:     /**
1:19812e7:      * Retrieve the configured pending message storage cursor;
1:23cda2d:      * @param broker 
5:19812e7:      * 
1:19812e7:      * @param clientId
1:19812e7:      * @param name
1:19812e7:      * @param maxBatchSize
1:23cda2d:      * @param sub 
1:19812e7:      * @return the Pending Message cursor
1:19812e7:      */
1:93e2bd3:     public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, DurableTopicSubscription sub) {
1:7d54942:         StoreDurableSubscriberCursor cursor = new StoreDurableSubscriberCursor(broker,clientId, name, maxBatchSize, sub);
1:fe31092:         cursor.setUseCache(isUseCache());
1:7d54942:         cursor.setImmediatePriorityDispatch(isImmediatePriorityDispatch());
1:7d54942:         return cursor;
1:19812e7:     }
1:19812e7: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
/////////////////////////////////////////////////////////////////////////
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:53c4e12
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {
0:         return new StoreDurableSubscriberCursor(clientId, name, tmpStorage, maxBatchSize, sub);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1:  * Creates a PendingMessageCursor that access the persistent store to retrieve
1:  * messages
1:  * @org.apache.xbean.XBean element="storeDurableSubscriberCursor"
1:  *                         description="Pending messages for a durable
1:  *                         subscriber are referenced from the Store"
1: public class StorePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy {
/////////////////////////////////////////////////////////////////////////
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize) {
0:         return new StoreDurableSubscriberCursor(clientId, name, tmpStorage, maxBatchSize);
author:Gary Tully
-------------------------------------------------------------------------------
commit:fe31092
/////////////////////////////////////////////////////////////////////////
1:     boolean useCache = true;
/////////////////////////////////////////////////////////////////////////
1:      * Useful when there is a large message backlog and intermittent high priority messages.
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseCache() {
1:         return useCache;
1:     }
1: 
1:     public void setUseCache(boolean useCache) {
1:         this.useCache = useCache;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         cursor.setUseCache(isUseCache());
commit:93e2bd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:     public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, DurableTopicSubscription sub) {
commit:7d54942
/////////////////////////////////////////////////////////////////////////
1:     boolean immediatePriorityDispatch = true;
1: 
1:     public boolean isImmediatePriorityDispatch() {
1:         return immediatePriorityDispatch;
1:     }
1: 
1:     /**
1:      * Ensure that new higher priority messages will get an immediate dispatch
1:      * rather than wait for the end of the current cursor batch.
1:      *
1:      * @param immediatePriorityDispatch
1:      */
1:     public void setImmediatePriorityDispatch(boolean immediatePriorityDispatch) {
1:         this.immediatePriorityDispatch = immediatePriorityDispatch;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         StoreDurableSubscriberCursor cursor = new StoreDurableSubscriberCursor(broker,clientId, name, maxBatchSize, sub);
1:         cursor.setImmediatePriorityDispatch(isImmediatePriorityDispatch());
1:         return cursor;
author:Robert Davies
-------------------------------------------------------------------------------
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:      * @param broker 
1:      * @param sub 
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, Subscription sub) {
0:         return new StoreDurableSubscriberCursor(broker,clientId, name, maxBatchSize, sub);
commit:e006780
/////////////////////////////////////////////////////////////////////////
1:  *  
commit:19812e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1: import org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor;
0: import org.apache.activemq.kaha.Store;
1: 
1: /**
0:  * Creates a PendingMessageCursor that access the persistent store to retrieve messages
0:  *  *
0:  * @org.apache.xbean.XBean element="storeDurableSubscriberCursor" description="Pending messages for a durable subscriber
0:  *                         are referenced from the Store"
1:  * 
0:  * @version $Revision$
1:  */
0: public class StorePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy{
1: 
1:     /**
1:      * Retrieve the configured pending message storage cursor;
1:      * 
1:      * @param clientId
1:      * @param name
0:      * @param tmpStorage
1:      * @param maxBatchSize
1:      * @return the Pending Message cursor
1:      */
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId,String name,Store tmpStorage,
0:             int maxBatchSize){
0:         return new StoreDurableSubscriberCursor(clientId,name,tmpStorage,maxBatchSize);
1:     }
1: }
============================================================================