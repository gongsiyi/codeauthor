1:90b66ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
5:90b66ce:  *
1:90b66ce:  * Unless required by applicable law or agreed to in writing, software
1:90b66ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b66ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b66ce:  * See the License for the specific language governing permissions and
1:90b66ce:  * limitations under the License.
1:90b66ce:  */
1:90b66ce: package org.apache.activemq.web;
10:90b66ce: 
1:90b66ce: import javax.servlet.http.HttpServletRequest;
1:90b66ce: 
1:540dd5c: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:a3eb327: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:540dd5c: import org.apache.activemq.command.ActiveMQDestination;
1:540dd5c: import org.springframework.web.servlet.ModelAndView;
1:540dd5c: 
1:90b66ce: /**
1:33f9f29:  *
1:90b66ce:  */
1:540dd5c: public class DestinationFacade {
1:90b66ce: 
1:540dd5c:     private String jmsDestination;
1:540dd5c:     private String jmsDestinationType;
1:8a5e197:     private BrokerFacade brokerFacade;
1:90b66ce: 
1:8a5e197:     public DestinationFacade(BrokerFacade brokerFacade) {
1:8a5e197:         this.brokerFacade = brokerFacade;
6:90b66ce:     }
1:9dc43f3: 
1:90b66ce:     public String toString() {
1:540dd5c:         return super.toString() + "[destination:" + jmsDestination + "; type=" + jmsDestinationType + "]";
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     // Operations
1:90b66ce:     // -------------------------------------------------------------------------
1:90b66ce:     public void removeDestination() throws Exception {
1:90b66ce:         getValidDestination();
2:90b66ce:         if (isQueue()) {
1:90b66ce:             getBrokerAdmin().removeQueue(getJMSDestination());
1:540dd5c:         } else {
1:90b66ce:             getBrokerAdmin().removeTopic(getJMSDestination());
1:90b66ce:         }
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void addDestination() throws Exception {
1:90b66ce:         if (isQueue()) {
1:90b66ce:             getBrokerAdmin().addQueue(getValidDestination());
1:540dd5c:         } else {
1:90b66ce:             getBrokerAdmin().addTopic(getValidDestination());
1:90b66ce:         }
1:90b66ce:     }
1:540dd5c: 
1:90b66ce:     // Properties
1:90b66ce:     // -------------------------------------------------------------------------
1:8a5e197:     public BrokerViewMBean getBrokerAdmin() throws Exception {
1:508128e:         if (brokerFacade == null) {
1:508128e:             throw new IllegalArgumentException("No brokerFacade injected!");
1:508128e:         }
1:508128e:         BrokerViewMBean answer = brokerFacade.getBrokerAdmin();
1:508128e:         if (answer == null) {
1:508128e:             throw new IllegalArgumentException("No brokerAdmin on the injected brokerFacade: " + brokerFacade);
1:508128e:         }
1:508128e:         return answer;
1:8a5e197:     }
1:8a5e197: 
1:8a5e197:     public BrokerFacade getBrokerFacade() {
1:8a5e197:         return brokerFacade;
1:8a5e197:     }
1:8a5e197: 
1:90b66ce:     public boolean isQueue() {
1:540dd5c:         if (jmsDestinationType != null && jmsDestinationType.equalsIgnoreCase("topic")) {
1:90b66ce:             return false;
1:90b66ce:         }
1:90b66ce:         return true;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getJMSDestination() {
1:540dd5c:         return jmsDestination;
1:a3eb327:     }
1:a3eb327: 
1:90b66ce:     public void setJMSDestination(String destination) {
1:7557f0c:         if (destination != null) {
1:7557f0c:             destination = destination.trim();
1:7557f0c:         }
1:540dd5c:         this.jmsDestination = destination;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getJMSDestinationType() {
1:540dd5c:         return jmsDestinationType;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSDestinationType(String type) {
1:540dd5c:         this.jmsDestinationType = type;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     protected ActiveMQDestination createDestination() {
1:5869f75:         byte destinationType = isQueue() ? ActiveMQDestination.QUEUE_TYPE : ActiveMQDestination.TOPIC_TYPE;
1:5869f75:         return ActiveMQDestination.createDestination(getValidDestination(), destinationType);
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     protected String getValidDestination() {
1:33f9f29:         if (jmsDestination == null || jmsDestination.isEmpty()) {
1:90b66ce:             throw new IllegalArgumentException("No JMSDestination parameter specified");
1:90b66ce:         }
1:540dd5c:         return jmsDestination;
1:90b66ce:     }
1:33f9f29: 
1:a3eb327:     protected QueueViewMBean getQueueView() throws Exception {
1:a3eb327:         String name = getPhysicalDestinationName();
1:a3eb327:         return getBrokerFacade().getQueue(name);
1:33f9f29:     }
1:90b66ce: 
1:90b66ce:     protected ModelAndView redirectToRequest(HttpServletRequest request) {
1:90b66ce:         String view = "redirect:" + request.getRequestURI();
1:90b66ce:         return new ModelAndView(view);
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     protected ModelAndView redirectToBrowseView() {
1:90b66ce:         return new ModelAndView("redirect:" + (isQueue() ? "queues.jsp" : "topics.jsp"));
1:90b66ce:     }
1:90b66ce: 
1:3321f99:     protected ModelAndView redirectToDestinationView() {        
1:3321f99:         return new ModelAndView("redirect:browse.jsp?JMSDestination=" + jmsDestination);
1:3321f99:     }
1:3321f99: 
1:5869f75:     protected String getPhysicalDestinationName() {
1:5869f75:         return createDestination().getPhysicalName();
1:5869f75:     }
1:33f9f29: 
1:9dc43f3:     public String[] getSupportedHttpMethods() {
1:33f9f29:         return new String[]{"GET", "POST"};
1:9dc43f3:     }
1:90b66ce: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3321f99
/////////////////////////////////////////////////////////////////////////
1:     protected ModelAndView redirectToDestinationView() {        
1:         return new ModelAndView("redirect:browse.jsp?JMSDestination=" + jmsDestination);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:33f9f29
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         if (jmsDestination == null || jmsDestination.isEmpty()) {
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:         return new String[]{"GET", "POST"};
commit:7557f0c
/////////////////////////////////////////////////////////////////////////
1:         if (destination != null) {
1:             destination = destination.trim();
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.springframework.web.servlet.ModelAndView;
1: 
1: public class DestinationFacade {
1:     private String jmsDestination;
1:     private String jmsDestinationType;
/////////////////////////////////////////////////////////////////////////
1:         return super.toString() + "[destination:" + jmsDestination + "; type=" + jmsDestinationType + "]";
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (jmsDestinationType != null && jmsDestinationType.equalsIgnoreCase("topic")) {
1:         return jmsDestination;
1:         this.jmsDestination = destination;
1:         return jmsDestinationType;
1:         this.jmsDestinationType = type;
/////////////////////////////////////////////////////////////////////////
0:         if (jmsDestination == null) {
1:         return jmsDestination;
0:         // System.out.println("Redirecting to: " + view);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9dc43f3
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String[] getSupportedHttpMethods() {
0:     	return new String[]{"GET", "POST"};
1:     }
commit:a3eb327
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected QueueViewMBean getQueueView() throws Exception {
1:         String name = getPhysicalDestinationName();
1:         return getBrokerFacade().getQueue(name);
1:     }    
author:James Strachan
-------------------------------------------------------------------------------
commit:508128e
/////////////////////////////////////////////////////////////////////////
1:         if (brokerFacade == null) {
1:             throw new IllegalArgumentException("No brokerFacade injected!");
1:         }
1:         BrokerViewMBean answer = brokerFacade.getBrokerAdmin();
1:         if (answer == null) {
1:             throw new IllegalArgumentException("No brokerAdmin on the injected brokerFacade: " + brokerFacade);
1:         }
1:         return answer;
commit:5a5056e
commit:5869f75
/////////////////////////////////////////////////////////////////////////
1:         byte destinationType = isQueue() ? ActiveMQDestination.QUEUE_TYPE : ActiveMQDestination.TOPIC_TYPE;
1:         return ActiveMQDestination.createDestination(getValidDestination(), destinationType);
/////////////////////////////////////////////////////////////////////////
1:     protected String getPhysicalDestinationName() {
1:         return createDestination().getPhysicalName();
1:     }
commit:8a5e197
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
0: public class DestinationFacade  {
1:     private BrokerFacade brokerFacade;
1:     public DestinationFacade(BrokerFacade brokerFacade) {
1:         this.brokerFacade = brokerFacade;
/////////////////////////////////////////////////////////////////////////
1:     public BrokerViewMBean getBrokerAdmin() throws Exception {
0:         return brokerFacade.getBrokerAdmin();
1:     }
1: 
1:     public BrokerFacade getBrokerFacade() {
1:         return brokerFacade;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println("Redirecting to: " + view);
commit:90b66ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.springframework.web.servlet.ModelAndView;
1: 
1: import javax.servlet.http.HttpServletRequest;
1: 
1: /**
1:  *
0:  * @version $Revision$
1:  */
0: public class DestinationFacade extends BrokerFacade {
1: 
0:     private String JMSDestination;
0:     private String JMSDestinationType;
1: 
0:     public DestinationFacade(BrokerService brokerService) {
0:         super(brokerService);
1:     }
1: 
1:     
1:     public String toString() {
0:         return super.toString() + "[destination:" + JMSDestination + "; type=" + JMSDestinationType + "]";
1:     }
1: 
1: 
1:     // Operations
1:     // -------------------------------------------------------------------------
1:     public void removeDestination() throws Exception {
1:         getValidDestination();
1:         if (isQueue()) {
1:             getBrokerAdmin().removeQueue(getJMSDestination());
1:         }
0:         else {
1:             getBrokerAdmin().removeTopic(getJMSDestination());
1:         }
1:     }
1: 
1:     public void addDestination() throws Exception {
1:         if (isQueue()) {
1:             getBrokerAdmin().addQueue(getValidDestination());
1:         }
0:         else {
1:             getBrokerAdmin().addTopic(getValidDestination());
1:         }
1:     }
1:     
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public boolean isQueue() {
0:         if (JMSDestinationType != null && JMSDestinationType.equalsIgnoreCase("topic")) {
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1:     public String getJMSDestination() {
0:         return JMSDestination;
1:     }
1: 
1:     public void setJMSDestination(String destination) {
0:         this.JMSDestination = destination;
1:     }
1: 
1:     public String getJMSDestinationType() {
0:         return JMSDestinationType;
1:     }
1: 
1:     public void setJMSDestinationType(String type) {
0:         this.JMSDestinationType = type;
1:     }
1: 
1:     protected ActiveMQDestination createDestination() {
1:         if (isQueue()) {
0:             return new ActiveMQQueue(getValidDestination());
1:         }
0:         else {
0:             return new ActiveMQTopic(getValidDestination());
1:         }
1:     }
1: 
1:     protected String getValidDestination() {
0:         if (JMSDestination == null) {
1:             throw new IllegalArgumentException("No JMSDestination parameter specified");
1:         }
0:         return JMSDestination;
1:     }
1: 
1: 
1:     protected ModelAndView redirectToRequest(HttpServletRequest request) {
1:         String view = "redirect:" + request.getRequestURI();
0:         System.out.println("Redirecting to: " + view);
1:         return new ModelAndView(view);
1:     }
1: 
1: 
1:     protected ModelAndView redirectToBrowseView() {
1:         return new ModelAndView("redirect:" + (isQueue() ? "queues.jsp" : "topics.jsp"));
1:     }
1: 
1: 
1: }
============================================================================