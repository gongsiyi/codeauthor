1:0e1431e: /**
1:0e1431e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0e1431e:  * contributor license agreements.  See the NOTICE file distributed with
1:0e1431e:  * this work for additional information regarding copyright ownership.
1:0e1431e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0e1431e:  * (the "License"); you may not use this file except in compliance with
1:0e1431e:  * the License.  You may obtain a copy of the License at
1:0e1431e:  *
1:0e1431e:  * http://www.apache.org/licenses/LICENSE-2.0
1:0e1431e:  *
1:0e1431e:  * Unless required by applicable law or agreed to in writing, software
1:0e1431e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0e1431e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0e1431e:  * See the License for the specific language governing permissions and
1:0e1431e:  * limitations under the License.
1:0e1431e:  */
1:0e1431e: package org.apache.activemq.usecases;
1:0e1431e: 
1:0e1431e: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:0e1431e: import org.apache.activemq.broker.BrokerService;
1:0e1431e: import org.apache.activemq.broker.region.Destination;
1:0e1431e: import org.apache.activemq.command.ActiveMQDestination;
1:0e1431e: import org.apache.activemq.command.ActiveMQQueue;
1:0e1431e: import org.apache.activemq.command.ActiveMQTopic;
1:0e1431e: import org.apache.activemq.network.NetworkConnector;
1:0e1431e: import org.apache.activemq.store.kahadb.KahaDBStore;
1:0e1431e: import org.apache.activemq.util.MessageIdList;
1:0e1431e: 
1:0e1431e: import javax.jms.MessageConsumer;
1:0e1431e: import java.io.File;
1:0e1431e: import java.io.IOException;
1:0e1431e: import java.net.URI;
1:0e1431e: import java.util.LinkedList;
1:0e1431e: 
1:0e1431e: import static org.apache.activemq.TestSupport.*;
1:0e1431e: 
1:0e1431e: /**
1:0e1431e:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:0e1431e:  */
1:0e1431e: public class TwoBrokerVirtualTopicForwardingTest extends JmsMultipleBrokersTestSupport {
1:0e1431e: 
1:0e1431e:     public void testBridgeVirtualTopicQueues() throws Exception {
1:0e1431e: 
1:0e1431e:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:0e1431e:         startAllBrokers();
1:0e1431e:         waitForBridgeFormation();
1:0e1431e: 
1:0e1431e:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:0e1431e:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1:0e1431e: 
1:0e1431e: 
1:0e1431e:         // give a sec to let advisories propogate
1:0e1431e:         Thread.sleep(500);
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:0e1431e:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:0e1431e:         assertEquals(1, destination.getConsumers().size());
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:0e1431e:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:0e1431e:         assertEquals(1, destination.getConsumers().size());
1:0e1431e: 
1:0e1431e:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:0e1431e:         assertNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:0e1431e:         assertNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1:0e1431e: 
1:0e1431e:         // send some messages
1:0e1431e:         sendMessages("BrokerA", virtualTopic, 1);
1:0e1431e: 
1:0e1431e:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:0e1431e:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:0e1431e: 
1:0e1431e:         msgsA.waitForMessagesToArrive(1);
1:0e1431e:         msgsB.waitForMessagesToArrive(1);
1:0e1431e: 
1:0e1431e:         // ensure we don't get any more messages
1:0e1431e:         Thread.sleep(2000);
1:0e1431e: 
1:0e1431e:         assertEquals(1, msgsA.getMessageCount());
1:0e1431e:         assertEquals(1, msgsB.getMessageCount());
1:0e1431e: 
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     public void testDontBridgeQueuesWithOnlyQueueConsumers() throws Exception{
1:0e1431e:         dontBridgeVirtualTopicConsumerQueues("BrokerA", "BrokerB");
1:0e1431e: 
1:0e1431e:         startAllBrokers();
1:0e1431e:         waitForBridgeFormation();
1:0e1431e: 
1:0e1431e:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:0e1431e:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1:0e1431e: 
1:0e1431e: 
1:0e1431e:         // give a sec to let advisories propogate
1:0e1431e:         Thread.sleep(500);
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:0e1431e:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:0e1431e:         assertEquals(1, destination.getConsumers().size());
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:0e1431e:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:0e1431e:         assertNull(destination);
1:0e1431e: 
1:0e1431e:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:0e1431e:         assertNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:0e1431e:         assertNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1:0e1431e: 
1:0e1431e:         // send some messages
1:0e1431e:         sendMessages("BrokerA", virtualTopic, 1);
1:0e1431e: 
1:0e1431e:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:0e1431e:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:0e1431e: 
1:0e1431e:         msgsA.waitForMessagesToArrive(1);
1:0e1431e:         msgsB.waitForMessagesToArrive(0);
1:0e1431e: 
1:0e1431e:         // ensure we don't get any more messages
1:0e1431e:         Thread.sleep(2000);
1:0e1431e: 
1:0e1431e:         assertEquals(1, msgsA.getMessageCount());
1:0e1431e:         assertEquals(0, msgsB.getMessageCount());
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     public void testDontBridgeQueuesWithBothTypesConsumers() throws Exception{
1:0e1431e:         dontBridgeVirtualTopicConsumerQueues("BrokerA", "BrokerB");
1:0e1431e: 
1:0e1431e:         startAllBrokers();
1:0e1431e:         waitForBridgeFormation();
1:0e1431e: 
1:0e1431e:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:0e1431e:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1:0e1431e:         MessageConsumer clientC = createConsumer("BrokerB", createDestination("VirtualTopic.tempTopic", true));
1:0e1431e: 
1:0e1431e: 
1:0e1431e:         // give a sec to let advisories propogate
1:0e1431e:         Thread.sleep(500);
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:0e1431e:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:0e1431e:         assertEquals(1, destination.getConsumers().size());
1:0e1431e: 
1:0e1431e:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:0e1431e:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:0e1431e:         assertNull(destination);
1:0e1431e: 
1:0e1431e:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:0e1431e:         assertNotNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:0e1431e:         assertNotNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1:0e1431e: 
1:0e1431e:         // send some messages
1:0e1431e:         sendMessages("BrokerA", virtualTopic, 1);
1:0e1431e: 
1:0e1431e:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:0e1431e:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:0e1431e: 
1:0e1431e:         msgsA.waitForMessagesToArrive(1);
1:0e1431e:         msgsB.waitForMessagesToArrive(1);
1:0e1431e: 
1:0e1431e:         // ensure we don't get any more messages
1:0e1431e:         Thread.sleep(2000);
1:0e1431e: 
1:0e1431e:         assertEquals(1, msgsA.getMessageCount());
1:0e1431e:         assertEquals(1, msgsB.getMessageCount());
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     private void bridgeAndConfigureBrokers(String local, String remote) throws Exception {
1:0e1431e:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:0e1431e:         bridge.setDecreaseNetworkConsumerPriority(true);
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     private void dontBridgeVirtualTopicConsumerQueues(String local, String remote) throws Exception {
1:0e1431e:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:0e1431e:         bridge.setDecreaseNetworkConsumerPriority(true);
1:0e1431e: 
1:0e1431e:         LinkedList<ActiveMQDestination> excludedDestinations = new LinkedList<ActiveMQDestination>();
1:0e1431e:         excludedDestinations.add(new ActiveMQQueue("Consumer.*.VirtualTopic.>"));
1:0e1431e: 
1:0e1431e:         bridge.setExcludedDestinations(excludedDestinations);
1:0e1431e: 
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     public void setUp() throws Exception {
1:0e1431e:         super.setAutoFail(true);
1:0e1431e:         super.setUp();
1:0e1431e:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:0e1431e:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:0e1431e:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:0e1431e:         BrokerService broker = createBroker(uri);
1:0e1431e:         configurePersistenceAdapter(broker);
1:0e1431e:         return broker;
1:0e1431e:     }
1:0e1431e: 
1:0e1431e:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:0e1431e:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:0e1431e:         KahaDBStore kaha = new KahaDBStore();
1:0e1431e:         kaha.setDirectory(dataFileDir);
1:0e1431e:         broker.setPersistenceAdapter(kaha);
1:0e1431e:     }
1:0e1431e: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8f13847
/////////////////////////////////////////////////////////////////////////
author:Christian Posta
-------------------------------------------------------------------------------
commit:0e1431e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: import javax.jms.MessageConsumer;
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.LinkedList;
1: 
0: import static junit.framework.Assert.assertNotNull;
0: import static junit.framework.Assert.assertNull;
1: import static org.apache.activemq.TestSupport.*;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class TwoBrokerVirtualTopicForwardingTest extends JmsMultipleBrokersTestSupport {
1: 
1:     public void testBridgeVirtualTopicQueues() throws Exception {
1: 
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1: 
1: 
1:         // give a sec to let advisories propogate
1:         Thread.sleep(500);
1: 
1:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:         assertEquals(1, destination.getConsumers().size());
1: 
1:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:         assertEquals(1, destination.getConsumers().size());
1: 
1:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:         assertNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:         assertNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1: 
1:         // send some messages
1:         sendMessages("BrokerA", virtualTopic, 1);
1: 
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(1);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1: 
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(1, msgsB.getMessageCount());
1: 
1:     }
1: 
1:     public void testDontBridgeQueuesWithOnlyQueueConsumers() throws Exception{
1:         dontBridgeVirtualTopicConsumerQueues("BrokerA", "BrokerB");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1: 
1: 
1:         // give a sec to let advisories propogate
1:         Thread.sleep(500);
1: 
1:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:         assertEquals(1, destination.getConsumers().size());
1: 
1:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:         assertNull(destination);
1: 
1:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:         assertNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:         assertNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1: 
1:         // send some messages
1:         sendMessages("BrokerA", virtualTopic, 1);
1: 
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(0);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1: 
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(0, msgsB.getMessageCount());
1:     }
1: 
1:     public void testDontBridgeQueuesWithBothTypesConsumers() throws Exception{
1:         dontBridgeVirtualTopicConsumerQueues("BrokerA", "BrokerB");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.VirtualTopic.tempTopic", false));
1:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.VirtualTopic.tempTopic", false));
1:         MessageConsumer clientC = createConsumer("BrokerB", createDestination("VirtualTopic.tempTopic", true));
1: 
1: 
1:         // give a sec to let advisories propogate
1:         Thread.sleep(500);
1: 
1:         ActiveMQQueue queueA = new ActiveMQQueue("Consumer.A.VirtualTopic.tempTopic");
1:         Destination destination = getDestination(brokers.get("BrokerA").broker, queueA);
1:         assertEquals(1, destination.getConsumers().size());
1: 
1:         ActiveMQQueue queueB = new ActiveMQQueue("Consumer.B.VirtualTopic.tempTopic");
1:         destination = getDestination(brokers.get("BrokerA").broker, queueB);
1:         assertNull(destination);
1: 
1:         ActiveMQTopic virtualTopic = new ActiveMQTopic("VirtualTopic.tempTopic");
1:         assertNotNull(getDestination(brokers.get("BrokerA").broker, virtualTopic));
1:         assertNotNull(getDestination(brokers.get("BrokerB").broker, virtualTopic));
1: 
1:         // send some messages
1:         sendMessages("BrokerA", virtualTopic, 1);
1: 
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(1);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1: 
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(1, msgsB.getMessageCount());
1:     }
1: 
1:     private void bridgeAndConfigureBrokers(String local, String remote) throws Exception {
1:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:         bridge.setDecreaseNetworkConsumerPriority(true);
1:     }
1: 
1:     private void dontBridgeVirtualTopicConsumerQueues(String local, String remote) throws Exception {
1:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:         bridge.setDecreaseNetworkConsumerPriority(true);
1: 
1:         LinkedList<ActiveMQDestination> excludedDestinations = new LinkedList<ActiveMQDestination>();
1:         excludedDestinations.add(new ActiveMQQueue("Consumer.*.VirtualTopic.>"));
1: 
1:         bridge.setExcludedDestinations(excludedDestinations);
1: 
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:     }
1: 
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
1:         configurePersistenceAdapter(broker);
1:         return broker;
1:     }
1: 
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1: }
============================================================================