1:0a29533: /**
1:0a29533:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0a29533:  * contributor license agreements.  See the NOTICE file distributed with
1:0a29533:  * this work for additional information regarding copyright ownership.
1:0a29533:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0a29533:  * (the "License"); you may not use this file except in compliance with
1:0a29533:  * the License.  You may obtain a copy of the License at
1:0a29533:  *
1:0a29533:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0a29533:  *
1:0a29533:  * Unless required by applicable law or agreed to in writing, software
1:0a29533:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a29533:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a29533:  * See the License for the specific language governing permissions and
1:0a29533:  * limitations under the License.
1:0a29533:  */
1:0a29533: package org.apache.activemq.store.kahadb;
1:0a29533: 
1:0a29533: import org.apache.activemq.ActiveMQConnectionFactory;
1:0a29533: import org.apache.activemq.broker.BrokerService;
1:0a29533: import org.apache.activemq.command.ActiveMQQueue;
1:0a29533: import org.junit.After;
1:0a29533: import org.junit.Before;
1:0a29533: import org.junit.Test;
1:0a29533: import org.slf4j.Logger;
1:0a29533: import org.slf4j.LoggerFactory;
1:0a29533: 
1:0a29533: import javax.jms.Connection;
1:0a29533: import javax.jms.MessageConsumer;
1:0a29533: import javax.jms.MessageProducer;
1:0a29533: import javax.jms.Session;
1:0a29533: import java.io.File;
1:0a29533: import java.io.FilenameFilter;
1:0a29533: import java.util.ArrayList;
1:0a29533: import java.util.List;
1:0a29533: 
1:0a29533: import static org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter.nameFromDestinationFilter;
1:0a29533: import static org.junit.Assert.*;
1:0a29533: 
1:0a29533: public class MKahaDBIndexLocationTest {
1:0a29533: 
1:0a29533:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBIndexLocationTest.class);
1:0a29533: 
1:0a29533:     private BrokerService broker;
1:0a29533: 
1:0a29533:     private final File testDataDir = new File("target/activemq-data/ConfigIndexDir");
1:0a29533:     private final File kahaDataDir = new File(testDataDir, "log");
1:0a29533:     private final File kahaIndexDir = new File(testDataDir, "index");
1:0a29533:     private final ActiveMQQueue queue = new ActiveMQQueue("Qq");
1:0a29533: 
1:0a29533:     @Before
1:0a29533:     public void startBroker() throws Exception {
1:0a29533:         createBroker();
1:0a29533:         broker.setDeleteAllMessagesOnStartup(true);
1:0a29533:         broker.start();
1:0a29533:         broker.waitUntilStarted();
1:0a29533:     }
1:0a29533: 
1:0a29533:     @After
1:0a29533:     public void stopBroker() throws Exception {
1:0a29533:         if (broker != null) {
1:0a29533:             broker.stop();
1:0a29533:             broker.waitUntilStopped();
1:0a29533:         }
1:0a29533:     }
1:0a29533: 
1:0a29533:     private void createBroker() throws Exception {
1:0a29533:         broker = new BrokerService();
1:0a29533: 
1:0a29533:         // setup multi-kaha adapter
1:0a29533:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:0a29533:         persistenceAdapter.setDirectory(kahaDataDir);
1:0a29533: 
1:0a29533:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:0a29533:         kahaStore.setJournalMaxFileLength(1024 * 512);
1:0a29533:         kahaStore.setIndexDirectory(kahaIndexDir);
1:0a29533: 
1:0a29533:         // set up a store per destination
1:0a29533:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:0a29533:         filtered.setPersistenceAdapter(kahaStore);
1:0a29533:         filtered.setPerDestination(true);
1:0a29533:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:0a29533:         stores.add(filtered);
1:0a29533: 
1:0a29533:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:0a29533:         broker.setPersistenceAdapter(persistenceAdapter);
1:0a29533: 
1:0a29533:         broker.setUseJmx(false);
1:0a29533:         broker.setAdvisorySupport(false);
1:0a29533:         broker.setSchedulerSupport(false);
1:0a29533:         broker.setPersistenceAdapter(persistenceAdapter);
1:0a29533:     }
1:0a29533: 
1:0a29533:     @Test
1:0a29533:     public void testIndexDirExists() throws Exception {
1:0a29533: 
1:0a29533:         produceMessages();
1:0a29533: 
1:0a29533:         LOG.info("Index dir is configured as: {}", kahaIndexDir);
1:0a29533:         assertTrue(kahaDataDir.exists());
1:0a29533:         assertTrue(kahaIndexDir.exists());
1:0a29533: 
1:0a29533: 
1:0a29533:         String destName = nameFromDestinationFilter(queue);
1:0a29533:         String[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {
1:0a29533: 
1:0a29533:             @Override
1:0a29533:             public boolean accept(File dir, String name) {
1:0a29533:                 LOG.info("Testing index filename: {}", name);
1:0a29533:                 return name.endsWith("data") || name.endsWith("redo");
1:0a29533:             }
1:0a29533:         });
1:0a29533: 
1:0a29533:         String[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {
1:0a29533: 
1:0a29533:             @Override
1:0a29533:             public boolean accept(File dir, String name) {
1:0a29533:                 LOG.info("Testing log filename: {}", name);
1:0a29533:                 return name.endsWith("log") || name.equals("lock");
1:0a29533:             }
1:0a29533:         });
1:0a29533: 
1:0a29533: 
1:0a29533:         // Should be db.data and db.redo and nothing else.
1:0a29533:         assertNotNull(index);
1:0a29533:         assertEquals(2, index.length);
1:0a29533: 
1:0a29533:         // Should contain the initial log for the journal
1:0a29533:         assertNotNull(journal);
1:0a29533:         assertEquals(1, journal.length);
1:0a29533: 
1:0a29533:         stopBroker();
1:0a29533:         createBroker();
1:0a29533:         broker.start();
1:0a29533:         broker.waitUntilStarted();
1:0a29533: 
1:0a29533:         consume();
1:0a29533:     }
1:0a29533: 
1:0a29533:     private void consume() throws Exception {
1:0a29533:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0a29533:         Connection connection = cf.createConnection();
1:0a29533:         connection.start();
1:0a29533:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0a29533:         MessageConsumer consumer = session.createConsumer(queue);
1:0a29533:         for (int i = 0; i < 5; ++i) {
1:0a29533:             assertNotNull("message[" + i + "]", consumer.receive(4000));
1:0a29533:         }
1:0a29533:         connection.close();
1:0a29533:     }
1:0a29533: 
1:0a29533:     private void produceMessages() throws Exception {
1:0a29533:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0a29533:         Connection connection = cf.createConnection();
1:0a29533:         connection.start();
1:0a29533:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0a29533:         MessageProducer producer = session.createProducer(queue);
1:0a29533:         for (int i = 0; i < 5; ++i) {
1:0a29533:             producer.send(session.createTextMessage("test:" + i));
1:0a29533:         }
1:0a29533:         connection.close();
1:0a29533:     }
1:0a29533: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0a29533
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import static org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter.nameFromDestinationFilter;
1: import static org.junit.Assert.*;
1: 
1: public class MKahaDBIndexLocationTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBIndexLocationTest.class);
1: 
1:     private BrokerService broker;
1: 
1:     private final File testDataDir = new File("target/activemq-data/ConfigIndexDir");
1:     private final File kahaDataDir = new File(testDataDir, "log");
1:     private final File kahaIndexDir = new File(testDataDir, "index");
1:     private final ActiveMQQueue queue = new ActiveMQQueue("Qq");
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         createBroker();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1: 
1:         // setup multi-kaha adapter
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(kahaDataDir);
1: 
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024 * 512);
1:         kahaStore.setIndexDirectory(kahaIndexDir);
1: 
1:         // set up a store per destination
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         filtered.setPersistenceAdapter(kahaStore);
1:         filtered.setPerDestination(true);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1: 
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     @Test
1:     public void testIndexDirExists() throws Exception {
1: 
1:         produceMessages();
1: 
1:         LOG.info("Index dir is configured as: {}", kahaIndexDir);
1:         assertTrue(kahaDataDir.exists());
1:         assertTrue(kahaIndexDir.exists());
1: 
1: 
1:         String destName = nameFromDestinationFilter(queue);
1:         String[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {
1: 
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("Testing index filename: {}", name);
1:                 return name.endsWith("data") || name.endsWith("redo");
1:             }
1:         });
1: 
1:         String[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {
1: 
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("Testing log filename: {}", name);
1:                 return name.endsWith("log") || name.equals("lock");
1:             }
1:         });
1: 
1: 
1:         // Should be db.data and db.redo and nothing else.
1:         assertNotNull(index);
1:         assertEquals(2, index.length);
1: 
1:         // Should contain the initial log for the journal
1:         assertNotNull(journal);
1:         assertEquals(1, journal.length);
1: 
1:         stopBroker();
1:         createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         consume();
1:     }
1: 
1:     private void consume() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         for (int i = 0; i < 5; ++i) {
1:             assertNotNull("message[" + i + "]", consumer.receive(4000));
1:         }
1:         connection.close();
1:     }
1: 
1:     private void produceMessages() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 5; ++i) {
1:             producer.send(session.createTextMessage("test:" + i));
1:         }
1:         connection.close();
1:     }
1: }
============================================================================