1:4f108ce: /**
1:4f108ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f108ce:  * contributor license agreements.  See the NOTICE file distributed with
1:4f108ce:  * this work for additional information regarding copyright ownership.
1:4f108ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f108ce:  * (the "License"); you may not use this file except in compliance with
1:4f108ce:  * the License.  You may obtain a copy of the License at
1:4f108ce:  *
1:4f108ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f108ce:  *
1:4f108ce:  * Unless required by applicable law or agreed to in writing, software
1:4f108ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f108ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f108ce:  * See the License for the specific language governing permissions and
1:4f108ce:  * limitations under the License.
1:4f108ce:  */
1:846cf7d: package org.apache.activemq.broker;
4:846cf7d: 
1:846cf7d: import junit.framework.Test;
1:846cf7d: import org.apache.activemq.ActiveMQConnectionFactory;
1:846cf7d: import org.apache.activemq.command.ActiveMQTopic;
1:846cf7d: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:c6837ac: import org.apache.activemq.util.IOHelper;
1:846cf7d: import org.apache.derby.jdbc.EmbeddedDataSource;
1:846cf7d: import org.slf4j.Logger;
1:846cf7d: import org.slf4j.LoggerFactory;
1:846cf7d: 
1:846cf7d: import javax.jms.Connection;
1:846cf7d: import javax.jms.*;
1:c6837ac: import java.io.File;
1:846cf7d: import java.util.ArrayList;
1:846cf7d: import java.util.List;
1:846cf7d: import java.util.concurrent.CountDownLatch;
1:846cf7d: import java.util.concurrent.TimeUnit;
1:846cf7d: import java.util.concurrent.atomic.AtomicBoolean;
1:846cf7d: import java.util.concurrent.atomic.AtomicLong;
1:846cf7d: 
1:846cf7d: /**
1:846cf7d:  * Implements the test case attached to:
1:846cf7d:  * https://issues.apache.org/jira/browse/AMQ-4351
1:846cf7d:  *
1:846cf7d:  * This version avoids the spring deps.
1:846cf7d:  */
1:846cf7d: public class AMQ4351Test extends BrokerTestSupport {
1:846cf7d: 
1:846cf7d:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4351Test.class);
1:846cf7d: 
1:846cf7d:     public static Test suite() {
1:846cf7d:         return suite(AMQ4351Test.class);
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     public static void main(String[] args) {
1:846cf7d:         junit.textui.TestRunner.run(suite());
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     protected BrokerService createBroker() throws Exception {
1:846cf7d:         BrokerService broker = new BrokerService();
1:846cf7d: 
1:846cf7d:         // Lets clean up often.
1:846cf7d:         broker.setOfflineDurableSubscriberTaskSchedule(500);
1:846cf7d:         broker.setOfflineDurableSubscriberTimeout(2000); // lets delete durable subs much faster.
1:c6837ac: 
1:846cf7d:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:846cf7d:         broker.setPersistenceAdapter(jdbc);
1:17f4f34:         broker.setDeleteAllMessagesOnStartup(true);
1:846cf7d:         return broker;
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     ActiveMQConnectionFactory connectionFactory;
1:846cf7d:     ActiveMQTopic destination = new ActiveMQTopic("TEST");
1:846cf7d: 
1:846cf7d:     @Override
1:846cf7d:     protected void setUp() throws Exception {
1:846cf7d:         super.setUp();
1:846cf7d:         connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     class ProducingClient implements Runnable {
1:846cf7d:         final AtomicLong size = new AtomicLong();
1:846cf7d:         final AtomicBoolean done = new AtomicBoolean();
1:846cf7d:         CountDownLatch doneLatch = new CountDownLatch(1);
1:846cf7d: 
1:846cf7d:         Connection connection;
1:846cf7d:         Session session;
1:846cf7d:         MessageProducer producer;
1:846cf7d: 
1:846cf7d:         ProducingClient() throws JMSException {
1:846cf7d:             connection = connectionFactory.createConnection();
1:846cf7d:             connection.start();
1:846cf7d:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:846cf7d:             producer = session.createProducer(destination);
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         private void sendMessage() {
1:846cf7d:             try {
1:846cf7d:                 producer.send(session.createTextMessage("Test"));
1:846cf7d:                 long i = size.incrementAndGet();
1:846cf7d:                 if( (i % 1000) == 0 ) {
1:846cf7d:                     LOG.info("produced " + i + ".");
1:846cf7d:                 }
1:846cf7d:             } catch (JMSException e) {
1:846cf7d:                 e.printStackTrace();
1:846cf7d:             }
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         public void start() {
1:846cf7d:             new Thread(this, "ProducingClient").start();
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         public void stop() throws InterruptedException {
1:846cf7d:             done.set(true);
1:846cf7d:             if( !doneLatch.await(20, TimeUnit.MILLISECONDS) ) {
1:846cf7d:                 try {
1:846cf7d:                     connection.close();
1:846cf7d:                     doneLatch.await();
1:846cf7d:                 } catch (JMSException e) {
1:846cf7d:                 }
1:846cf7d:             }
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         @Override
1:846cf7d:         public void run() {
1:846cf7d:             try {
1:846cf7d:                 try {
1:846cf7d:                     while (!done.get()) {
1:846cf7d:                         sendMessage();
1:846cf7d:                         Thread.sleep(10);
1:846cf7d:                     }
1:846cf7d:                 } finally {
1:846cf7d:                     connection.close();
1:846cf7d:                 }
1:846cf7d:             } catch (Exception e) {
1:846cf7d:                 e.printStackTrace();
1:846cf7d:                 done.set(true);
1:846cf7d:             } finally {
1:846cf7d:                 doneLatch.countDown();
1:846cf7d:             }
1:846cf7d:         }
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     class ConsumingClient implements Runnable {
1:846cf7d:         final String name;
1:846cf7d:         final AtomicLong size = new AtomicLong();
1:846cf7d:         final AtomicBoolean done = new AtomicBoolean();
1:846cf7d:         CountDownLatch doneLatch = new CountDownLatch(1);
1:6cdf756:         CountDownLatch started;
1:6cdf756:         CountDownLatch finished;
1:6cdf756: 
1:846cf7d: 
1:6cdf756:         public ConsumingClient(String name, CountDownLatch started, CountDownLatch finished) {
1:846cf7d:             this.name = name;
1:6cdf756:             this.started = started;
1:6cdf756:             this.finished = finished;
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         public void start() {
1:846cf7d:             LOG.info("Starting JMS listener " + name);
1:846cf7d:             new Thread(this, "ConsumingClient: "+name).start();
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         public void stopAsync() {
1:6cdf756:             finished.countDown();
1:846cf7d:             done.set(true);
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         public void stop() throws InterruptedException {
1:846cf7d:             stopAsync();
1:846cf7d:             doneLatch.await();
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:         @Override
1:846cf7d:         public void run() {
1:846cf7d:             try {
1:846cf7d:                 Connection connection = connectionFactory.createConnection();
1:846cf7d:                 connection.setClientID(name);
1:846cf7d:                 connection.start();
1:846cf7d:                 try {
1:846cf7d:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:846cf7d:                     MessageConsumer consumer = session.createDurableSubscriber(destination, name, null, false);
1:6cdf756:                     started.countDown();
1:846cf7d:                     while( !done.get() ) {
1:846cf7d:                         Message msg = consumer.receive(100);
1:846cf7d:                         if(msg!=null ) {
1:846cf7d:                             size.incrementAndGet();
1:846cf7d:                             session.commit();
1:846cf7d:                         }
1:846cf7d:                     }
1:846cf7d:                 } finally {
1:846cf7d:                     connection.close();
1:846cf7d:                     LOG.info("Stopped JMS listener " + name);
1:846cf7d:                 }
1:846cf7d:             } catch (Exception e) {
1:846cf7d:                 e.printStackTrace();
1:846cf7d:                 done.set(true);
1:846cf7d:             } finally {
1:846cf7d:                 doneLatch.countDown();
1:846cf7d:             }
1:846cf7d:         }
1:846cf7d: 
1:846cf7d:     }
1:846cf7d: 
1:846cf7d:     public void testAMQ4351() throws InterruptedException, JMSException {
1:846cf7d:         LOG.info("Start test.");
1:6cdf756:         int subs = 100;
1:6cdf756:         CountDownLatch startedLatch = new CountDownLatch(subs - 1);
1:6cdf756:         CountDownLatch shutdownLatch = new CountDownLatch(subs - 4);
1:6cdf756: 
1:846cf7d: 
1:846cf7d:         ProducingClient producer = new ProducingClient();
1:6cdf756:         ConsumingClient listener1 = new ConsumingClient("subscriber-1", startedLatch, shutdownLatch);
1:6cdf756:         ConsumingClient listener2 = new ConsumingClient("subscriber-2", startedLatch, shutdownLatch);
1:6cdf756:         ConsumingClient listener3 = new ConsumingClient("subscriber-3", startedLatch, shutdownLatch);
1:846cf7d:         try {
1:846cf7d: 
1:846cf7d:             listener1.start();
1:846cf7d:             listener2.start();
1:846cf7d:             listener3.start();
1:846cf7d: 
1:846cf7d:             List<ConsumingClient> subscribers = new ArrayList<ConsumingClient>(subs);
1:846cf7d:             for (int i = 4; i < subs; i++) {
1:6cdf756:                 ConsumingClient client = new ConsumingClient("subscriber-" + i, startedLatch, shutdownLatch);
1:846cf7d:                 subscribers.add(client);
1:846cf7d:                 client.start();
1:846cf7d:             }
1:6cdf756:             startedLatch.await(10, TimeUnit.SECONDS);
1:846cf7d: 
1:846cf7d:             LOG.info("All subscribers started.");
1:846cf7d:             producer.sendMessage();
1:846cf7d: 
1:846cf7d:             LOG.info("Stopping 97 subscribers....");
1:846cf7d:             for (ConsumingClient client : subscribers) {
1:846cf7d:                 client.stopAsync();
1:846cf7d:             }
1:6cdf756:             shutdownLatch.await(10, TimeUnit.SECONDS);
1:846cf7d: 
1:846cf7d:             // Start producing messages for 10 minutes, at high rate
1:846cf7d:             LOG.info("Starting mass message producer...");
1:846cf7d:             producer.start();
1:846cf7d: 
1:846cf7d:             long lastSize = listener1.size.get();
1:846cf7d:             for( int i=0 ; i < 10; i++ ) {
1:846cf7d:                 Thread.sleep(1000);
1:846cf7d:                 long size = listener1.size.get();
1:846cf7d:                 LOG.info("Listener 1: consumed: "+(size - lastSize));
1:846cf7d:                 assertTrue( size > lastSize );
1:846cf7d:                 lastSize = size;
1:846cf7d:             }
1:846cf7d:         } finally {
1:846cf7d:             LOG.info("Stopping clients");
1:846cf7d:             listener1.stop();
1:846cf7d:             listener2.stop();
1:846cf7d:             listener3.stop();
1:846cf7d:             producer.stop();
1:846cf7d:         }
1:846cf7d:     }
1:846cf7d: 
1:846cf7d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:17f4f34
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
commit:165959e
/////////////////////////////////////////////////////////////////////////
commit:c6837ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOHelper;
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:         System.setProperty("derby.system.home", new File(IOHelper.getDefaultDataDirectory()).getCanonicalPath());
1: 
commit:4f108ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6cdf756
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch started;
1:         CountDownLatch finished;
1: 
1:         public ConsumingClient(String name, CountDownLatch started, CountDownLatch finished) {
1:             this.started = started;
1:             this.finished = finished;
/////////////////////////////////////////////////////////////////////////
1:             finished.countDown();
/////////////////////////////////////////////////////////////////////////
1:                     started.countDown();
/////////////////////////////////////////////////////////////////////////
1:         int subs = 100;
1:         CountDownLatch startedLatch = new CountDownLatch(subs - 1);
1:         CountDownLatch shutdownLatch = new CountDownLatch(subs - 4);
1: 
1:         ConsumingClient listener1 = new ConsumingClient("subscriber-1", startedLatch, shutdownLatch);
1:         ConsumingClient listener2 = new ConsumingClient("subscriber-2", startedLatch, shutdownLatch);
1:         ConsumingClient listener3 = new ConsumingClient("subscriber-3", startedLatch, shutdownLatch);
1:                 ConsumingClient client = new ConsumingClient("subscriber-" + i, startedLatch, shutdownLatch);
1:             startedLatch.await(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:             shutdownLatch.await(10, TimeUnit.SECONDS);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:846cf7d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker;
1: 
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.*;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: /**
1:  * Implements the test case attached to:
1:  * https://issues.apache.org/jira/browse/AMQ-4351
1:  *
1:  * This version avoids the spring deps.
1:  */
1: public class AMQ4351Test extends BrokerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4351Test.class);
1: 
1:     public static Test suite() {
1:         return suite(AMQ4351Test.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         // Lets clean up often.
1:         broker.setOfflineDurableSubscriberTaskSchedule(500);
1:         broker.setOfflineDurableSubscriberTimeout(2000); // lets delete durable subs much faster.
1: 
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
1: 
0:         jdbc.deleteAllMessages();
1:         broker.setPersistenceAdapter(jdbc);
1:         return broker;
1:     }
1: 
1:     ActiveMQConnectionFactory connectionFactory;
1:     ActiveMQTopic destination = new ActiveMQTopic("TEST");
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:     }
1: 
1:     class ProducingClient implements Runnable {
1:         final AtomicLong size = new AtomicLong();
1:         final AtomicBoolean done = new AtomicBoolean();
1:         CountDownLatch doneLatch = new CountDownLatch(1);
1: 
1:         Connection connection;
1:         Session session;
1:         MessageProducer producer;
1: 
1:         ProducingClient() throws JMSException {
1:             connection = connectionFactory.createConnection();
1:             connection.start();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = session.createProducer(destination);
1:         }
1: 
1:         private void sendMessage() {
1:             try {
1:                 producer.send(session.createTextMessage("Test"));
1:                 long i = size.incrementAndGet();
1:                 if( (i % 1000) == 0 ) {
1:                     LOG.info("produced " + i + ".");
1:                 }
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         public void start() {
1:             new Thread(this, "ProducingClient").start();
1:         }
1: 
1:         public void stop() throws InterruptedException {
1:             done.set(true);
1:             if( !doneLatch.await(20, TimeUnit.MILLISECONDS) ) {
1:                 try {
1:                     connection.close();
1:                     doneLatch.await();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 try {
1:                     while (!done.get()) {
1:                         sendMessage();
1:                         Thread.sleep(10);
1:                     }
1:                 } finally {
1:                     connection.close();
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 done.set(true);
1:             } finally {
1:                 doneLatch.countDown();
1:             }
1:         }
1:     }
1: 
1:     class ConsumingClient implements Runnable {
1:         final String name;
1:         final AtomicLong size = new AtomicLong();
1:         final AtomicBoolean done = new AtomicBoolean();
1:         CountDownLatch doneLatch = new CountDownLatch(1);
1: 
0:         public ConsumingClient(String name) {
1:             this.name = name;
1:         }
1: 
1:         public void start() {
1:             LOG.info("Starting JMS listener " + name);
1:             new Thread(this, "ConsumingClient: "+name).start();
1:         }
1: 
1:         public void stopAsync() {
1:             done.set(true);
1:         }
1: 
1:         public void stop() throws InterruptedException {
1:             stopAsync();
1:             doneLatch.await();
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 Connection connection = connectionFactory.createConnection();
1:                 connection.setClientID(name);
1:                 connection.start();
1:                 try {
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     MessageConsumer consumer = session.createDurableSubscriber(destination, name, null, false);
1:                     while( !done.get() ) {
1:                         Message msg = consumer.receive(100);
1:                         if(msg!=null ) {
1:                             size.incrementAndGet();
1:                             session.commit();
1:                         }
1:                     }
1:                 } finally {
1:                     connection.close();
1:                     LOG.info("Stopped JMS listener " + name);
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 done.set(true);
1:             } finally {
1:                 doneLatch.countDown();
1:             }
1:         }
1: 
1:     }
1: 
1:     public void testAMQ4351() throws InterruptedException, JMSException {
1:         LOG.info("Start test.");
1: 
1:         ProducingClient producer = new ProducingClient();
0:         ConsumingClient listener1 = new ConsumingClient("subscriber-1");
0:         ConsumingClient listener2 = new ConsumingClient("subscriber-2");
0:         ConsumingClient listener3 = new ConsumingClient("subscriber-3");
1:         try {
1: 
1:             listener1.start();
1:             listener2.start();
1:             listener3.start();
0:             int subs = 100;
1: 
1:             List<ConsumingClient> subscribers = new ArrayList<ConsumingClient>(subs);
1:             for (int i = 4; i < subs; i++) {
0:                 ConsumingClient client = new ConsumingClient("subscriber-" + i);
1:                 subscribers.add(client);
1:                 client.start();
1:             }
1: 
1:             LOG.info("All subscribers started.");
1:             producer.sendMessage();
1: 
1:             LOG.info("Stopping 97 subscribers....");
1:             for (ConsumingClient client : subscribers) {
1:                 client.stopAsync();
1:             }
1: 
1:             // Start producing messages for 10 minutes, at high rate
1:             LOG.info("Starting mass message producer...");
1:             producer.start();
1: 
1: 
1:             long lastSize = listener1.size.get();
1:             for( int i=0 ; i < 10; i++ ) {
1:                 Thread.sleep(1000);
1:                 long size = listener1.size.get();
1:                 LOG.info("Listener 1: consumed: "+(size - lastSize));
1:                 assertTrue( size > lastSize );
1:                 lastSize = size;
1:             }
1:         } finally {
1:             LOG.info("Stopping clients");
1:             listener1.stop();
1:             listener2.stop();
1:             listener3.stop();
1:             producer.stop();
1:         }
1:     }
1: 
1: }
============================================================================