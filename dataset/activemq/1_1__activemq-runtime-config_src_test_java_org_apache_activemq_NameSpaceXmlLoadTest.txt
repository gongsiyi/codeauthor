1:043a4ad: /**
1:043a4ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:043a4ad:  * contributor license agreements.  See the NOTICE file distributed with
1:043a4ad:  * this work for additional information regarding copyright ownership.
1:043a4ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:043a4ad:  * (the "License"); you may not use this file except in compliance with
1:043a4ad:  * the License.  You may obtain a copy of the License at
1:043a4ad:  *
1:043a4ad:  *      http://www.apache.org/licenses/LICENSE-2.0
1:043a4ad:  *
1:043a4ad:  * Unless required by applicable law or agreed to in writing, software
1:043a4ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:043a4ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:043a4ad:  * See the License for the specific language governing permissions and
1:043a4ad:  * limitations under the License.
1:043a4ad:  */
1:043a4ad: package org.apache.activemq;
1:043a4ad: 
1:043a4ad: import java.util.HashMap;
1:043a4ad: import javax.management.ObjectName;
1:043a4ad: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1:043a4ad: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1:043a4ad: import org.apache.activemq.util.IOHelper;
1:043a4ad: import org.apache.activemq.util.IntrospectionSupport;
1:043a4ad: import org.junit.Test;
1:043a4ad: 
1:043a4ad: 
1:043a4ad: import static org.junit.Assert.assertEquals;
1:043a4ad: import static org.junit.Assert.assertNotEquals;
1:043a4ad: import static org.junit.Assert.assertTrue;
1:043a4ad: 
1:043a4ad: public class NameSpaceXmlLoadTest extends RuntimeConfigTestSupport {
1:043a4ad: 
1:043a4ad:     @Test
1:043a4ad:     public void testCanLoad() throws Exception {
1:043a4ad:         final String brokerConfig =  "namespace-prefix";
1:043a4ad:         System.setProperty("data", IOHelper.getDefaultDataDirectory());
1:043a4ad:         System.setProperty("broker-name", brokerConfig);
1:043a4ad:         startBroker(brokerConfig);
1:043a4ad:         assertTrue("broker alive", brokerService.isStarted());
1:043a4ad:         assertEquals("nameMatch", brokerConfig, brokerService.getBrokerName());
1:043a4ad: 
1:043a4ad:         // verify runtimeConfig active
1:043a4ad:         ObjectName objectName =
1:043a4ad:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:043a4ad:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:043a4ad:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:043a4ad:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:043a4ad:                         RuntimeConfigurationViewMBean.class, false);
1:043a4ad: 
1:043a4ad:         HashMap<String, String> props = new HashMap<String, String>();
1:043a4ad:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:043a4ad:         LOG.info("mbean attributes before: " + props);
1:043a4ad:         String propOfInterest = "modified";
1:043a4ad:         assertNotEquals("modified is valid", "unknown", props.get(propOfInterest));
1:043a4ad: 
1:043a4ad:     }
1:043a4ad: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:043a4ad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.HashMap;
1: import javax.management.ObjectName;
1: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class NameSpaceXmlLoadTest extends RuntimeConfigTestSupport {
1: 
1:     @Test
1:     public void testCanLoad() throws Exception {
1:         final String brokerConfig =  "namespace-prefix";
1:         System.setProperty("data", IOHelper.getDefaultDataDirectory());
1:         System.setProperty("broker-name", brokerConfig);
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("nameMatch", brokerConfig, brokerService.getBrokerName());
1: 
1:         // verify runtimeConfig active
1:         ObjectName objectName =
1:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                         RuntimeConfigurationViewMBean.class, false);
1: 
1:         HashMap<String, String> props = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:         LOG.info("mbean attributes before: " + props);
1:         String propOfInterest = "modified";
1:         assertNotEquals("modified is valid", "unknown", props.get(propOfInterest));
1: 
1:     }
1: }
============================================================================