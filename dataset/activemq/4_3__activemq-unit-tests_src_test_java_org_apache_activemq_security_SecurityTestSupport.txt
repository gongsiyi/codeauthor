1:4686ec5: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:4686ec5:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4686ec5:  *
1:4686ec5:  * Unless required by applicable law or agreed to in writing, software
1:4686ec5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4686ec5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4686ec5:  * See the License for the specific language governing permissions and
1:4686ec5:  * limitations under the License.
1:4686ec5:  */
1:4686ec5: package org.apache.activemq.security;
3:4686ec5: 
1:f812e34: import javax.jms.Connection;
1:f812e34: import javax.jms.JMSException;
1:f812e34: import javax.jms.Message;
1:f812e34: import javax.jms.MessageConsumer;
1:f812e34: import javax.jms.Session;
1:f812e34: import javax.jms.TextMessage;
1:f812e34: 
1:094f007: import org.apache.activemq.CombinationTestSupport;
1:4686ec5: import org.apache.activemq.JmsTestSupport;
1:094f007: import org.apache.activemq.broker.BrokerService;
1:4686ec5: import org.apache.activemq.command.ActiveMQDestination;
1:094f007: import org.apache.activemq.command.ActiveMQMessage;
1:affd134: import org.apache.activemq.command.ActiveMQQueue;
1:affd134: import org.apache.activemq.command.ActiveMQTopic;
1:4686ec5: 
1:4686ec5: /**
1:0bbc0ac:  * 
1:4686ec5:  */
1:4686ec5: public class SecurityTestSupport extends JmsTestSupport {
1:4686ec5: 
1:4686ec5:     public ActiveMQDestination destination;
1:4686ec5: 
1:094f007:     /**
1:094f007:      * Overrides to set the JMSXUserID flag to true.
1:094f007:      */
1:094f007:     protected BrokerService createBroker() throws Exception {
1:094f007:         BrokerService broker = super.createBroker();
1:094f007:         broker.setPopulateJMSXUserID(true);
1:094f007:         return broker;
1:094f007:     }
1:094f007: 
1:4686ec5:     public void testUserReceiveFails() throws JMSException {
1:4686ec5:         doReceive(true);
7:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testInvalidAuthentication() throws JMSException {
1:4686ec5:         try {
1:4686ec5:             // No user id
1:4686ec5:             Connection c = factory.createConnection();
1:4686ec5:             connections.add(c);
1:4686ec5:             c.start();
1:4686ec5:             fail("Expected exception.");
1:f812e34:         } catch (JMSException e) {
1:4686ec5:         }
1:4686ec5: 
1:4686ec5:         try {
1:4686ec5:             // Bad password
1:4686ec5:             Connection c = factory.createConnection("user", "krap");
1:4686ec5:             connections.add(c);
1:4686ec5:             c.start();
1:4686ec5:             fail("Expected exception.");
1:f812e34:         } catch (JMSException e) {
1:4686ec5:         }
1:4686ec5: 
1:4686ec5:         try {
1:4686ec5:             // Bad userid
1:4686ec5:             Connection c = factory.createConnection("userkrap", null);
1:4686ec5:             connections.add(c);
1:4686ec5:             c.start();
1:4686ec5:             fail("Expected exception.");
1:f812e34:         } catch (JMSException e) {
1:4686ec5:         }
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testUserReceiveSucceeds() throws JMSException {
1:094f007:         Message m = doReceive(false);
1:094f007:         assertEquals("system", ((ActiveMQMessage)m).getUserID());
1:094f007:         assertEquals("system", m.getStringProperty("JMSXUserID"));
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testGuestReceiveSucceeds() throws JMSException {
2:4686ec5:         doReceive(false);
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testGuestReceiveFails() throws JMSException {
1:4686ec5:         doReceive(true);
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testUserSendSucceeds() throws JMSException {
1:094f007:         Message m = doSend(false);
1:094f007:         assertEquals("user", ((ActiveMQMessage)m).getUserID());
1:094f007:         assertEquals("user", m.getStringProperty("JMSXUserID"));
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testUserSendFails() throws JMSException {
1:4686ec5:         doSend(true);
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testGuestSendFails() throws JMSException {
1:4686ec5:         doSend(true);
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void testGuestSendSucceeds() throws JMSException {
2:4686ec5:         doSend(false);
1:4686ec5:     }
1:4686ec5: 
1:094f007:     /**
1:4686ec5:      * @throws JMSException
1:4686ec5:      */
1:094f007:     public Message doSend(boolean fail) throws JMSException {
1:4686ec5: 
1:4686ec5:         Connection adminConnection = factory.createConnection("system", "manager");
1:4686ec5:         connections.add(adminConnection);
1:4686ec5: 
1:4686ec5:         adminConnection.start();
1:4686ec5:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4686ec5:         MessageConsumer consumer = adminSession.createConsumer(destination);
1:4686ec5: 
1:4686ec5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4686ec5:         try {
1:4686ec5:             sendMessages(session, destination, 1);
1:f812e34:         } catch (JMSException e) {
1:4686ec5:             // If test is expected to fail, the cause must only be a
1:4686ec5:             // SecurityException
1:4686ec5:             // otherwise rethrow the exception
1:4686ec5:             if (!fail || !(e.getCause() instanceof SecurityException)) {
1:4686ec5:                 throw e;
1:4686ec5:             }
1:4686ec5:         }
1:4686ec5: 
1:4686ec5:         Message m = consumer.receive(1000);
1:fc00993:         if (fail) {
1:4686ec5:             assertNull(m);
1:ecf89a6:         } else {
1:4686ec5:             assertNotNull(m);
1:f812e34:             assertEquals("0", ((TextMessage)m).getText());
1:4686ec5:             assertNull(consumer.receiveNoWait());
1:fc00993:         }
1:094f007:         return m;
1:4686ec5:     }
1:4686ec5: 
1:094f007:     /**
1:4686ec5:      * @throws JMSException
1:4686ec5:      */
1:094f007:     public Message doReceive(boolean fail) throws JMSException {
1:4686ec5: 
1:4686ec5:         connection.start();
1:4686ec5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4686ec5:         MessageConsumer consumer = null;
1:4686ec5:         try {
1:4686ec5:             consumer = session.createConsumer(destination);
1:fc00993:             if (fail) {
1:4686ec5:                 fail("Expected failure due to security constraint.");
1:fc00993:             }
1:f812e34:         } catch (JMSException e) {
1:fc00993:             if (fail && e.getCause() instanceof SecurityException) {
1:094f007:                 return null;
1:fc00993:             }
1:4686ec5:             throw e;
1:4686ec5:         }
1:4686ec5: 
1:4686ec5:         Connection adminConnection = factory.createConnection("system", "manager");
1:4686ec5:         connections.add(adminConnection);
1:4686ec5:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4686ec5:         sendMessages(adminSession, destination, 1);
1:4686ec5: 
1:4686ec5:         Message m = consumer.receive(1000);
1:4686ec5:         assertNotNull(m);
1:f812e34:         assertEquals("0", ((TextMessage)m).getText());
1:4686ec5:         assertNull(consumer.receiveNoWait());
1:094f007:         return m;
1:4686ec5: 
1:4686ec5:     }
1:4686ec5: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestUserReceiveFails() {
1:f812e34:         addCombinationValues("userName", new Object[] {"user"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:9a7443a:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.BY_PASS, TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestInvalidAuthentication() {
1:f812e34:         addCombinationValues("userName", new Object[] {"user"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestUserReceiveSucceeds() {
1:f812e34:         addCombinationValues("userName", new Object[] {"user"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:933eb2f:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestGuestReceiveSucceeds() {
1:f812e34:         addCombinationValues("userName", new Object[] {"guest"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:933eb2f:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestGuestReceiveFails() {
1:f812e34:         addCombinationValues("userName", new Object[] {"guest"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:9a7443a:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUESTS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO") });
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestUserSendSucceeds() {
1:f812e34:         addCombinationValues("userName", new Object[] {"user"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:ecf89a6:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("USERS.FOO"),
1:933eb2f:                                                           new ActiveMQTopic("GUEST.BAR")});
1:affd134:     }
1:affd134: 
1:4686ec5:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestUserSendFails() {
1:f812e34:         addCombinationValues("userName", new Object[] {"user"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:9a7443a:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:affd134:     }
1:affd134: 
1:094f007:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestGuestSendFails() {
1:f812e34:         addCombinationValues("userName", new Object[] {"guest"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:9a7443a:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUESTS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
1:affd134:     }
1:affd134: 
1:4686ec5:     /**
1:094f007:      * @see {@link CombinationTestSupport}
1:094f007:      */
1:affd134:     public void initCombosForTestGuestSendSucceeds() {
1:f812e34:         addCombinationValues("userName", new Object[] {"guest"});
1:f812e34:         addCombinationValues("password", new Object[] {"password"});
1:933eb2f:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:affd134:     }
1:4686ec5: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:9a7443a
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.BY_PASS, TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUESTS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO") });
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUESTS.BY_PASS,TEST"), new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO") });
/////////////////////////////////////////////////////////////////////////
1:                                                           new ActiveMQTopic("GUEST.BAR")});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"),});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO"),});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"),});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO"),});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("USERS.FOO"),
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"),});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"),});
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (fail) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:             if (fail) {
1:             }
1:             if (fail && e.getCause() instanceof SecurityException) {
1:             }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("0", ((TextMessage)m).getText());
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("0", ((TextMessage)m).getText());
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("userName", new Object[] {"user"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
0:                                                           new ActiveMQTopic("TEST"),
0:                                                           new ActiveMQQueue("GUEST.BAR"),
0:                                                           new ActiveMQTopic("GUEST.BAR"),});
1:         addCombinationValues("userName", new Object[] {"user"});
1:         addCombinationValues("password", new Object[] {"password"});
1:         addCombinationValues("userName", new Object[] {"user"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"),
0:                                                           new ActiveMQTopic("USERS.FOO"),});
1:         addCombinationValues("userName", new Object[] {"guest"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"),
0:                                                           new ActiveMQTopic("GUEST.BAR"),});
1:         addCombinationValues("userName", new Object[] {"guest"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
0:                                                           new ActiveMQTopic("TEST"),
0:                                                           new ActiveMQQueue("USERS.FOO"),
0:                                                           new ActiveMQTopic("USERS.FOO"),});
1:         addCombinationValues("userName", new Object[] {"user"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("USERS.FOO"),
0:                                                           new ActiveMQQueue("GUEST.BAR"),
0:                                                           new ActiveMQTopic("USERS.FOO"),
0:                                                           new ActiveMQTopic("GUEST.BAR"),});
1:         addCombinationValues("userName", new Object[] {"user"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
0:                                                           new ActiveMQTopic("TEST"),});
1:         addCombinationValues("userName", new Object[] {"guest"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
0:                                                           new ActiveMQTopic("TEST"),
0:                                                           new ActiveMQQueue("USERS.FOO"),
0:                                                           new ActiveMQTopic("USERS.FOO")});
1:         addCombinationValues("userName", new Object[] {"guest"});
1:         addCombinationValues("password", new Object[] {"password"});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"),
0:                                                           new ActiveMQTopic("GUEST.BAR"),});
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:094f007
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Overrides to set the JMSXUserID flag to true.
1:      */
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         broker.setPopulateJMSXUserID(true);
1:         return broker;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Message m = doReceive(false);
1:         assertEquals("system", ((ActiveMQMessage)m).getUserID());
1:         assertEquals("system", m.getStringProperty("JMSXUserID"));
/////////////////////////////////////////////////////////////////////////
1:         Message m = doSend(false);
1:         assertEquals("user", ((ActiveMQMessage)m).getUserID());
1:         assertEquals("user", m.getStringProperty("JMSXUserID"));
/////////////////////////////////////////////////////////////////////////
1:     public Message doSend(boolean fail) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         return m;
1:     public Message doReceive(boolean fail) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:                 return null;
/////////////////////////////////////////////////////////////////////////
1:         return m;
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
commit:affd134
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestUserReceiveFails() {
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("GUEST.BAR"),
0:                 new ActiveMQTopic("GUEST.BAR"), });
1:     }
1: 
1:     public void initCombosForTestInvalidAuthentication() {
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
1:     }
1: 
1:     public void initCombosForTestUserReceiveSucceeds() {
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO"), });
1:     }
1: 
1:     public void initCombosForTestGuestReceiveSucceeds() {
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"), });
1:     }
1: 
1:     public void initCombosForTestGuestReceiveFails() {
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"), });
1:     }
1: 
1:     public void initCombosForTestUserSendSucceeds() {
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("USERS.FOO"), new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("USERS.FOO"),
0:                 new ActiveMQTopic("GUEST.BAR"), });
1:     }
1: 
1:     public void initCombosForTestUserSendFails() {
0:         addCombinationValues("userName", new Object[] { "user" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), });
1:     }
1: 
1:     public void initCombosForTestGuestSendFails() {
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"),
0:                 new ActiveMQTopic("USERS.FOO"), });
1:     }
1: 
1:     public void initCombosForTestGuestSendSucceeds() {
0:         addCombinationValues("userName", new Object[] { "guest" });
0:         addCombinationValues("password", new Object[] { "password" });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR"), });
1:     }
commit:4686ec5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class SecurityTestSupport extends JmsTestSupport {
1: 
1:     public ActiveMQDestination destination;
1: 
1:     public void testUserReceiveFails() throws JMSException {
1:         doReceive(true);
1:     }
1: 
1:     public void testInvalidAuthentication() throws JMSException {
1:         try {
1:             // No user id
1:             Connection c = factory.createConnection();
1:             connections.add(c);
1:             c.start();
1:             fail("Expected exception.");
1:         }
0:         catch (JMSException e) {
1:         }
1: 
1:         try {
1:             // Bad password
1:             Connection c = factory.createConnection("user", "krap");
1:             connections.add(c);
1:             c.start();
1:             fail("Expected exception.");
1:         }
0:         catch (JMSException e) {
1:         }
1: 
1:         try {
1:             // Bad userid
1:             Connection c = factory.createConnection("userkrap", null);
1:             connections.add(c);
1:             c.start();
1:             fail("Expected exception.");
1:         }
0:         catch (JMSException e) {
1:         }
1:     }
1: 
1:     public void testUserReceiveSucceeds() throws JMSException {
1:         doReceive(false);
1:     }
1: 
1:     public void testGuestReceiveSucceeds() throws JMSException {
1:         doReceive(false);
1:     }
1: 
1:     public void testGuestReceiveFails() throws JMSException {
1:         doReceive(true);
1:     }
1: 
1:     public void testUserSendSucceeds() throws JMSException {
1:         doSend(false);
1:     }
1: 
1:     public void testUserSendFails() throws JMSException {
1:         doSend(true);
1:     }
1: 
1:     public void testGuestSendFails() throws JMSException {
1:         doSend(true);
1:     }
1: 
1:     public void testGuestSendSucceeds() throws JMSException {
1:         doSend(false);
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
0:     public void doSend(boolean fail) throws JMSException {
1: 
1:         Connection adminConnection = factory.createConnection("system", "manager");
1:         connections.add(adminConnection);
1: 
1:         adminConnection.start();
1:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = adminSession.createConsumer(destination);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         try {
1:             sendMessages(session, destination, 1);
1:         }
0:         catch (JMSException e) {
1:             // If test is expected to fail, the cause must only be a
1:             // SecurityException
1:             // otherwise rethrow the exception
1:             if (!fail || !(e.getCause() instanceof SecurityException)) {
1:                 throw e;
1:             }
1:         }
1: 
1:         Message m = consumer.receive(1000);
0:         if (fail)
1:             assertNull(m);
0:         else {
1:             assertNotNull(m);
0:             assertEquals("0", ((TextMessage) m).getText());
1:             assertNull(consumer.receiveNoWait());
1:         }
1: 
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
0:     public void doReceive(boolean fail) throws JMSException {
1: 
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
1:         try {
1:             consumer = session.createConsumer(destination);
0:             if (fail)
1:                 fail("Expected failure due to security constraint.");
1:         }
0:         catch (JMSException e) {
0:             if (fail && e.getCause() instanceof SecurityException)
0:                 return;
1:             throw e;
1:         }
1: 
1:         Connection adminConnection = factory.createConnection("system", "manager");
1:         connections.add(adminConnection);
1:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         sendMessages(adminSession, destination, 1);
1: 
1:         Message m = consumer.receive(1000);
1:         assertNotNull(m);
0:         assertEquals("0", ((TextMessage) m).getText());
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
1: }
============================================================================