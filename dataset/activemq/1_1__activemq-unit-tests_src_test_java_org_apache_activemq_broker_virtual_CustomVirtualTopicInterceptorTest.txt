1:dca6e45: /**
1:dca6e45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dca6e45:  * contributor license agreements.  See the NOTICE file distributed with
1:dca6e45:  * this work for additional information regarding copyright ownership.
1:dca6e45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dca6e45:  * (the "License"); you may not use this file except in compliance with
1:dca6e45:  * the License.  You may obtain a copy of the License at
1:dca6e45:  *
1:dca6e45:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dca6e45:  *
1:dca6e45:  * Unless required by applicable law or agreed to in writing, software
1:dca6e45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dca6e45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dca6e45:  * See the License for the specific language governing permissions and
1:dca6e45:  * limitations under the License.
1:dca6e45:  */
1:dca6e45: package org.apache.activemq.broker.virtual;
1:dca6e45: 
1:dca6e45: import javax.jms.Connection;
1:dca6e45: import javax.jms.JMSException;
1:dca6e45: import javax.jms.MessageConsumer;
1:dca6e45: import javax.jms.MessageProducer;
1:dca6e45: import javax.jms.Session;
1:dca6e45: 
1:dca6e45: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:dca6e45: import org.apache.activemq.broker.BrokerService;
1:dca6e45: import org.apache.activemq.broker.region.DestinationInterceptor;
1:dca6e45: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:dca6e45: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:dca6e45: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:dca6e45: import org.apache.activemq.command.ActiveMQDestination;
1:dca6e45: import org.apache.activemq.command.ActiveMQQueue;
1:dca6e45: import org.apache.activemq.command.ActiveMQTopic;
1:dca6e45: import org.slf4j.Logger;
1:dca6e45: import org.slf4j.LoggerFactory;
1:dca6e45: /**
1:dca6e45:  * Test for ticket AMQ-6058, shouldDispatch prefix check
1:dca6e45:  */
1:dca6e45: public class CustomVirtualTopicInterceptorTest extends EmbeddedBrokerTestSupport{
1:dca6e45: 
1:dca6e45: 	private static final Logger LOG = LoggerFactory.getLogger(CustomVirtualTopicInterceptorTest.class);
1:dca6e45: 	protected int total = 10;
1:dca6e45: 	protected Connection connection;	
1:dca6e45: 	
1:dca6e45:     protected ActiveMQDestination getConsumer1Destination() {
1:dca6e45:         return new ActiveMQQueue("q.private.vt.testing.test.virtual.topic");
1:dca6e45:     }
1:dca6e45: 
1:dca6e45:     protected ActiveMQDestination getConsumer2Destination() {
1:dca6e45:         return new ActiveMQQueue("q.private.>");
1:dca6e45:     }     
1:dca6e45:     
1:dca6e45:     protected ActiveMQDestination getProducerDestination() {
1:dca6e45:         return new ActiveMQTopic("test.virtual.topic");
1:dca6e45:     }    
1:dca6e45:     
1:dca6e45:     public void testVirtualTopicRouting() throws Exception {
1:dca6e45:     	if (connection == null) {
1:dca6e45:             connection = createConnection();
1:dca6e45:         }
1:dca6e45:         connection.start();
1:dca6e45:         
1:dca6e45:         LOG.info("validate no other messages on queues");        
1:dca6e45:         try {
1:dca6e45:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:dca6e45: 
1:dca6e45:             ActiveMQDestination destination1 = getConsumer1Destination();
1:dca6e45:             ActiveMQDestination destination2 = getConsumer2Destination();
1:dca6e45: 
1:dca6e45:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:dca6e45:             MessageConsumer c2 = session.createConsumer(destination2, null);
1:dca6e45: 
1:dca6e45:             LOG.info("send one simple message that should go to both consumers");
1:dca6e45:             MessageProducer producer = session.createProducer(getProducerDestination());
1:dca6e45:             broker.getBroker().addDestination(broker.getAdminConnectionContext(), destination2, false);
1:dca6e45:             assertNotNull(producer);
1:dca6e45: 
1:dca6e45:             producer.send(session.createTextMessage("Last Message"));
1:dca6e45:             //check that c1 received the message as it should
1:dca6e45:             assertNotNull(c1.receive(3000));
1:dca6e45:             //check that c2 did not receive the message - this breaks pre-patch,
1:dca6e45:             //when VirtualTopicInterceptor.shouldDispatch always returned true
1:dca6e45:             assertNull(c2.receive(3000));
1:dca6e45:             
1:dca6e45:         } catch (JMSException e) {
1:dca6e45:             e.printStackTrace();
1:dca6e45:             fail("unexpeced ex while waiting for last messages: " + e);
1:dca6e45:         }
1:dca6e45:     }
1:dca6e45:     
1:dca6e45:     protected void tearDown() throws Exception {
1:dca6e45:         if (connection != null) {
1:dca6e45:             connection.close();
1:dca6e45:         }
1:dca6e45:         super.tearDown();
1:dca6e45:     }
1:dca6e45:     
1:dca6e45:     //setup the broker and virtual topic to test custom Virtual topic name 
1:dca6e45:     //and a multilevel prefix
1:dca6e45:     protected BrokerService createBroker() throws Exception {
1:dca6e45:         BrokerService broker = new BrokerService();
1:dca6e45:         broker.setPersistent(false);
1:dca6e45: 
1:dca6e45:         VirtualTopic virtualTopic = new VirtualTopic();
1:dca6e45:         virtualTopic.setName(">");
1:dca6e45:         virtualTopic.setPrefix("q.private.vt.*.");
1:dca6e45:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:dca6e45:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});        
1:dca6e45:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:dca6e45:         return broker;
1:dca6e45:     }
1:dca6e45: }
============================================================================
author:Chad Zobrisky
-------------------------------------------------------------------------------
commit:dca6e45
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: /**
1:  * Test for ticket AMQ-6058, shouldDispatch prefix check
1:  */
1: public class CustomVirtualTopicInterceptorTest extends EmbeddedBrokerTestSupport{
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(CustomVirtualTopicInterceptorTest.class);
1: 	protected int total = 10;
1: 	protected Connection connection;	
1: 	
1:     protected ActiveMQDestination getConsumer1Destination() {
1:         return new ActiveMQQueue("q.private.vt.testing.test.virtual.topic");
1:     }
1: 
1:     protected ActiveMQDestination getConsumer2Destination() {
1:         return new ActiveMQQueue("q.private.>");
1:     }     
1:     
1:     protected ActiveMQDestination getProducerDestination() {
1:         return new ActiveMQTopic("test.virtual.topic");
1:     }    
1:     
1:     public void testVirtualTopicRouting() throws Exception {
1:     	if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1:         
1:         LOG.info("validate no other messages on queues");        
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             ActiveMQDestination destination1 = getConsumer1Destination();
1:             ActiveMQDestination destination2 = getConsumer2Destination();
1: 
1:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:             MessageConsumer c2 = session.createConsumer(destination2, null);
1: 
1:             LOG.info("send one simple message that should go to both consumers");
1:             MessageProducer producer = session.createProducer(getProducerDestination());
1:             broker.getBroker().addDestination(broker.getAdminConnectionContext(), destination2, false);
1:             assertNotNull(producer);
1: 
1:             producer.send(session.createTextMessage("Last Message"));
1:             //check that c1 received the message as it should
1:             assertNotNull(c1.receive(3000));
1:             //check that c2 did not receive the message - this breaks pre-patch,
1:             //when VirtualTopicInterceptor.shouldDispatch always returned true
1:             assertNull(c2.receive(3000));
1:             
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:             fail("unexpeced ex while waiting for last messages: " + e);
1:         }
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1:     
1:     //setup the broker and virtual topic to test custom Virtual topic name 
1:     //and a multilevel prefix
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1: 
1:         VirtualTopic virtualTopic = new VirtualTopic();
1:         virtualTopic.setName(">");
1:         virtualTopic.setPrefix("q.private.vt.*.");
1:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});        
1:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:         return broker;
1:     }
1: }
============================================================================