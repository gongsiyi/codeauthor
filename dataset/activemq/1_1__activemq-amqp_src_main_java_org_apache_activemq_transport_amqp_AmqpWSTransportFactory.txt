1:31c55f7: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
1:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
1:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.amqp;
1:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.net.MalformedURLException;
1:31c55f7: import java.net.URI;
1:31c55f7: import java.net.UnknownHostException;
1:31c55f7: import java.util.Map;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.broker.BrokerService;
1:31c55f7: import org.apache.activemq.broker.BrokerServiceAware;
1:31c55f7: import org.apache.activemq.transport.Transport;
1:31c55f7: import org.apache.activemq.transport.TransportFactory;
1:31c55f7: import org.apache.activemq.transport.TransportServer;
1:31c55f7: import org.apache.activemq.util.IntrospectionSupport;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:31c55f7: 
1:31c55f7: /**
1:31c55f7:  * Factory for creating WebSocket aware AMQP Transports.
1:31c55f7:  */
1:31c55f7: public class AmqpWSTransportFactory extends TransportFactory implements BrokerServiceAware {
1:31c55f7: 
1:31c55f7:     private BrokerService brokerService = null;
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     protected String getDefaultWireFormatType() {
1:31c55f7:         return "amqp";
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public TransportServer doBind(URI location) throws IOException {
1:31c55f7:         throw new IOException("doBind() method not implemented! No Server over WS implemented.");
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     @SuppressWarnings("rawtypes")
1:31c55f7:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:31c55f7:         AmqpTransportFilter amqpTransport = new AmqpTransportFilter(transport, format, brokerService);
1:31c55f7: 
1:31c55f7:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1:31c55f7: 
1:31c55f7:         IntrospectionSupport.setProperties(amqpTransport, options);
1:31c55f7:         IntrospectionSupport.setProperties(amqpTransport.getWireFormat(), wireFormatOptions);
1:31c55f7: 
1:31c55f7:         // Now wrap the filter with the monitor
1:31c55f7:         transport = createInactivityMonitor(amqpTransport, format);
1:31c55f7:         IntrospectionSupport.setProperties(transport, options);
1:31c55f7: 
1:31c55f7:         return super.compositeConfigure(transport, format, options);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Factory method to create a new transport
1:31c55f7:      *
1:31c55f7:      * @throws IOException
1:31c55f7:      * @throws UnknownHostException
1:31c55f7:      */
1:31c55f7:     @Override
1:31c55f7:     protected Transport createTransport(URI location, WireFormat wireFormat) throws MalformedURLException, UnknownHostException, IOException {
1:31c55f7:         return new AmqpWSTransport(location, wireFormat);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setBrokerService(BrokerService brokerService) {
1:31c55f7:         this.brokerService = brokerService;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     protected Transport createInactivityMonitor(AmqpTransportFilter transport, WireFormat format) {
1:31c55f7:         AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);
1:31c55f7:         transport.setInactivityMonitor(monitor);
1:31c55f7:         return monitor;
1:31c55f7:     }
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  * Factory for creating WebSocket aware AMQP Transports.
1:  */
1: public class AmqpWSTransportFactory extends TransportFactory implements BrokerServiceAware {
1: 
1:     private BrokerService brokerService = null;
1: 
1:     @Override
1:     protected String getDefaultWireFormatType() {
1:         return "amqp";
1:     }
1: 
1:     @Override
1:     public TransportServer doBind(URI location) throws IOException {
1:         throw new IOException("doBind() method not implemented! No Server over WS implemented.");
1:     }
1: 
1:     @Override
1:     @SuppressWarnings("rawtypes")
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:         AmqpTransportFilter amqpTransport = new AmqpTransportFilter(transport, format, brokerService);
1: 
1:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1: 
1:         IntrospectionSupport.setProperties(amqpTransport, options);
1:         IntrospectionSupport.setProperties(amqpTransport.getWireFormat(), wireFormatOptions);
1: 
1:         // Now wrap the filter with the monitor
1:         transport = createInactivityMonitor(amqpTransport, format);
1:         IntrospectionSupport.setProperties(transport, options);
1: 
1:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
1:     /**
1:      * Factory method to create a new transport
1:      *
1:      * @throws IOException
1:      * @throws UnknownHostException
1:      */
1:     @Override
1:     protected Transport createTransport(URI location, WireFormat wireFormat) throws MalformedURLException, UnknownHostException, IOException {
1:         return new AmqpWSTransport(location, wireFormat);
1:     }
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: 
1:     protected Transport createInactivityMonitor(AmqpTransportFilter transport, WireFormat format) {
1:         AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);
1:         transport.setInactivityMonitor(monitor);
1:         return monitor;
1:     }
1: }
============================================================================