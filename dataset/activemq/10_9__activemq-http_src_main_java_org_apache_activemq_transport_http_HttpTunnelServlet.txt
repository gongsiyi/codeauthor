1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.http;
1:ef85089: 
1:ea94429: import java.io.BufferedReader;
1:ea94429: import java.io.DataOutputStream;
1:ea94429: import java.io.IOException;
1:ef85089: import java.io.InputStream;
1:568ab1e: import java.io.InputStreamReader;
1:ea94429: import java.util.HashMap;
1:37b8157: import java.util.concurrent.ConcurrentHashMap;
1:3b4aadc: import java.util.concurrent.ConcurrentMap;
1:7310949: import java.util.concurrent.LinkedBlockingQueue;
1:540dd5c: import java.util.concurrent.TimeUnit;
1:ef85089: import java.util.zip.GZIPInputStream;
1:40a7d3b: import javax.servlet.ServletException;
1:40a7d3b: import javax.servlet.http.HttpServlet;
1:40a7d3b: import javax.servlet.http.HttpServletRequest;
1:40a7d3b: import javax.servlet.http.HttpServletResponse;
1:ff30070: 
1:37b8157: import org.apache.activemq.Service;
1:ea94429: import org.apache.activemq.command.Command;
1:d7a3b94: import org.apache.activemq.command.ConnectionInfo;
1:ea94429: import org.apache.activemq.command.WireFormatInfo;
1:ee4c8ee: import org.apache.activemq.transport.Transport;
1:ea94429: import org.apache.activemq.transport.TransportAcceptListener;
1:ea94429: import org.apache.activemq.transport.util.TextWireFormat;
1:ea94429: import org.apache.activemq.transport.xstream.XStreamWireFormat;
1:ee4c8ee: import org.apache.activemq.util.IOExceptionSupport;
1:37b8157: import org.apache.activemq.util.ServiceListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ea94429: 
3:40a7d3b: /**
1:40a7d3b:  * A servlet which handles server side HTTP transport, delegating to the
1:40a7d3b:  * ActiveMQ broker. This servlet is designed for being embedded inside an
1:40a7d3b:  * ActiveMQ Broker using an embedded Jetty or Tomcat instance.
1:0684e20:  */
1:40a7d3b: public class HttpTunnelServlet extends HttpServlet {
1:40a7d3b:     private static final long serialVersionUID = -3826714430767484333L;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(HttpTunnelServlet.class);
1:3b4aadc: 
1:40a7d3b:     private TransportAcceptListener listener;
1:ee4c8ee:     private HttpTransportFactory transportFactory;
1:40a7d3b:     private TextWireFormat wireFormat;
1:37b8157:     private ConcurrentMap<String, BlockingQueueTransport> clients = new ConcurrentHashMap<String, BlockingQueueTransport>();
1:568ab1e:     private final long requestTimeout = 30000L;
1:8a3bdd9:     private HashMap<String, Object> transportOptions;
1:ef85089: 
1:8a3bdd9:     @SuppressWarnings("unchecked")
1:568ab1e:     @Override
1:40a7d3b:     public void init() throws ServletException {
1:40a7d3b:         super.init();
1:540dd5c:         listener = (TransportAcceptListener)getServletContext().getAttribute("acceptListener");
1:40a7d3b:         if (listener == null) {
1:40a7d3b:             throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
17:40a7d3b:         }
1:ee4c8ee:         transportFactory = (HttpTransportFactory)getServletContext().getAttribute("transportFactory");
1:ee4c8ee:         if (transportFactory == null) {
1:060f97d:             throw new ServletException("No such attribute 'transportFactory' available in the ServletContext");
1:ee4c8ee:         }
1:8a3bdd9:         transportOptions = (HashMap<String, Object>)getServletContext().getAttribute("transportOptions");
1:540dd5c:         wireFormat = (TextWireFormat)getServletContext().getAttribute("wireFormat");
1:40a7d3b:         if (wireFormat == null) {
1:40a7d3b:             wireFormat = createWireFormat();
1:7027fe6:         }
1:40a7d3b:     }
1:540dd5c: 
1:37b8157:     @Override
1:ef85089:     protected void doOptions(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:ef85089:         response.addHeader("Accepts-Encoding", "gzip");
1:ef85089:         super.doOptions(request, response);
1:ef85089:     }
1:ff30070: 
1:ef85089:     @Override
1:ff30070:     protected void doHead(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:ff30070:         createTransportChannel(request, response);
1:ff30070:     }
1:540dd5c: 
1:37b8157:     @Override
1:40a7d3b:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:40a7d3b:         // lets return the next response
1:40a7d3b:         Command packet = null;
1:540dd5c:         int count = 0;
1:09bae42:         try {
1:ff30070:             BlockingQueueTransport transportChannel = getTransportChannel(request, response);
1:540dd5c:             if (transportChannel == null) {
1:40a7d3b:                 return;
1:540dd5c:             }
1:540dd5c: 
1:540dd5c:             packet = (Command)transportChannel.getQueue().poll(requestTimeout, TimeUnit.MILLISECONDS);
1:540dd5c: 
1:ff30070:             DataOutputStream stream = new DataOutputStream(response.getOutputStream());
1:540dd5c:             wireFormat.marshal(packet, stream);
1:540dd5c:             count++;
1:ff30070:         } catch (InterruptedException ignore) {
1:09bae42:         }
1:ff30070: 
1:ff30070:         if (count == 0) {
1:40a7d3b:             response.setStatus(HttpServletResponse.SC_REQUEST_TIMEOUT);
1:09bae42:         }
1:40a7d3b:     }
1:ff30070: 
2:568ab1e:     @Override
1:ef85089:     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:ff30070: 
1:ef85089:         InputStream stream = request.getInputStream();
1:ef85089:         String contentType = request.getContentType();
1:ef85089:         if (contentType != null && contentType.equals("application/x-gzip")) {
1:ef85089:             stream = new GZIPInputStream(stream);
1:ef85089:         }
1:ef85089: 
1:568ab1e:         // Read the command directly from the reader, assuming UTF8 encoding
1:ef85089:         Command command = (Command) wireFormat.unmarshalText(new InputStreamReader(stream, "UTF-8"));
1:e778467: 
1:7027fe6:         if (command instanceof WireFormatInfo) {
1:568ab1e:             WireFormatInfo info = (WireFormatInfo) command;
1:40a7d3b:             if (!canProcessWireFormatVersion(info.getVersion())) {
1:568ab1e:                 response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cannot process wire format of version: "
1:568ab1e:                         + info.getVersion());
1:40a7d3b:             }
1:37b8157: 
1:ff30070:         } else {
1:ff30070: 
1:ff30070:             BlockingQueueTransport transport = getTransportChannel(request, response);
1:540dd5c:             if (transport == null) {
1:ff30070:                 return;
1:540dd5c:             }
1:540dd5c: 
1:d7a3b94:             if (command instanceof ConnectionInfo) {
1:d7a3b94:                 ((ConnectionInfo) command).setTransportContext(request.getAttribute("javax.servlet.request.X509Certificate"));
1:d7a3b94:             }
1:ff30070:             transport.doConsume(command);
1:40a7d3b:         }
1:40a7d3b:     }
1:37b8157: 
1:40a7d3b:     private boolean canProcessWireFormatVersion(int version) {
1:40a7d3b:         return true;
1:40a7d3b:     }
2:7027fe6: 
1:40a7d3b:     protected String readRequestBody(HttpServletRequest request) throws IOException {
1:40a7d3b:         StringBuffer buffer = new StringBuffer();
1:40a7d3b:         BufferedReader reader = request.getReader();
1:40a7d3b:         while (true) {
1:40a7d3b:             String line = reader.readLine();
1:40a7d3b:             if (line == null) {
1:40a7d3b:                 break;
1:540dd5c:             } else {
1:40a7d3b:                 buffer.append(line);
1:40a7d3b:                 buffer.append("\n");
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:         return buffer.toString();
1:40a7d3b:     }
1:7027fe6: 
1:ff30070:     protected BlockingQueueTransport getTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {
2:ff30070:         String clientID = request.getHeader("clientID");
2:40a7d3b:         if (clientID == null) {
1:ff30070:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No clientID header specified");
1:540dd5c:             LOG.warn("No clientID header specified");
1:37b8157:             return null;
1:40a7d3b:         }
2:540dd5c:         BlockingQueueTransport answer = clients.get(clientID);
1:37b8157:         if (answer == null) {
1:540dd5c:             LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
1:ff30070:             return null;
1:ff30070:         }
1:ff30070:         return answer;
1:ff30070:     }
1:540dd5c: 
1:ff30070:     protected BlockingQueueTransport createTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {
1:37b8157:         final String clientID = request.getHeader("clientID");
1:540dd5c: 
1:ff30070:         if (clientID == null) {
1:ff30070:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No clientID header specified");
1:540dd5c:             LOG.warn("No clientID header specified");
1:ff30070:             return null;
1:ff30070:         }
1:540dd5c: 
1:37b8157:         // Optimistically create the client's transport; this transport may be thrown away if the client has already registered.
1:37b8157:         BlockingQueueTransport answer = createTransportChannel();
1:540dd5c: 
1:060f97d:         // Record the client's transport and ensure that it has not already registered; this is thread-safe and only allows one
1:37b8157:         // thread to register the client
1:37b8157:         if (clients.putIfAbsent(clientID, answer) != null) {
1:37b8157:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has already been established");
1:37b8157:             LOG.warn("A session for clientID '" + clientID + "' has already been established");
1:ff30070:             return null;
1:37b8157:         }
1:ff30070: 
1:37b8157:         // Ensure that the client's transport is cleaned up when no longer
1:37b8157:         // needed.
1:37b8157:         answer.addServiceListener(new ServiceListener() {
1:37b8157:             public void started(Service service) {
1:37b8157:                 // Nothing to do.
1:40a7d3b:             }
1:ff30070: 
1:37b8157:             public void stopped(Service service) {
1:37b8157:                 clients.remove(clientID);
1:40a7d3b:             }
1:37b8157:         });
1:ff30070: 
1:37b8157:         // Configure the transport with any additional properties or filters.  Although the returned transport is not explicitly
1:37b8157:         // persisted, if it is a filter (e.g., InactivityMonitor) it will be linked to the client's transport as a TransportListener
1:37b8157:         // and not GC'd until the client's transport is disposed.
1:37b8157:         Transport transport = answer;
1:37b8157:         try {
1:37b8157:             // Preserve the transportOptions for future use by making a copy before applying (they are removed when applied).
1:8a3bdd9:             HashMap<String, Object> options = new HashMap<String, Object>(transportOptions);
1:37b8157:             transport = transportFactory.serverConfigure(answer, null, options);
1:37b8157:         } catch (Exception e) {
1:060f97d:             throw IOExceptionSupport.create(e);
1:ee4c8ee:         }
1:ff30070: 
1:37b8157:         // Wait for the transport to be connected or disposed.
1:37b8157:         listener.onAccept(transport);
1:37b8157:         while (!transport.isConnected() && !transport.isDisposed()) {
1:37b8157:             try {
1:37b8157:                 Thread.sleep(100);
1:37b8157:             } catch (InterruptedException ignore) {
1:37b8157:             }
1:37b8157:         }
1:37b8157: 
1:37b8157:         // Ensure that the transport was not prematurely disposed.
1:37b8157:         if (transport.isDisposed()) {
1:37b8157:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "The session for clientID '" + clientID + "' was prematurely disposed");
1:37b8157:             LOG.warn("The session for clientID '" + clientID + "' was prematurely disposed");
2:37b8157:             return null;
1:37b8157:         }
1:37b8157: 
1:37b8157:         return answer;
1:40a7d3b:     }
1:37b8157: 
1:40a7d3b:     protected BlockingQueueTransport createTransportChannel() {
1:7310949:        return new BlockingQueueTransport(new LinkedBlockingQueue<Object>());
1:40a7d3b:     }
1:37b8157: 
1:40a7d3b:     protected TextWireFormat createWireFormat() {
1:40a7d3b:         return new XStreamWireFormat();
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:d7a3b94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConnectionInfo;
/////////////////////////////////////////////////////////////////////////
1:             if (command instanceof ConnectionInfo) {
1:                 ((ConnectionInfo) command).setTransportContext(request.getAttribute("javax.servlet.request.X509Certificate"));
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(HttpTunnelServlet.class);
0:     private Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();
1:         listener = (TransportAcceptListener)getServletContext().getAttribute("acceptListener");
1:         wireFormat = (TextWireFormat)getServletContext().getAttribute("wireFormat");
1: 
1: 
1:         int count = 0;
1:             if (transportChannel == null) {
1:             }
1: 
1:             packet = (Command)transportChannel.getQueue().poll(requestTimeout, TimeUnit.MILLISECONDS);
1: 
0:             // while( packet !=null ) {
1:             wireFormat.marshal(packet, stream);
1:             count++;
0:             // packet = (Command) transportChannel.getQueue().poll(0,
0:             // TimeUnit.MILLISECONDS);
0:             // }
/////////////////////////////////////////////////////////////////////////
0:         Command command = (Command)wireFormat.unmarshalText(request.getReader());
0:             WireFormatInfo info = (WireFormatInfo)command;
/////////////////////////////////////////////////////////////////////////
1:             if (transport == null) {
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("No clientID header specified");
1:             BlockingQueueTransport answer = clients.get(clientID);
1:                 LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
1: 
1: 
1:             LOG.warn("No clientID header specified");
1: 
1:             BlockingQueueTransport answer = clients.get(clientID);
0:                 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has allready been established");
0:                 LOG.warn("A session for clientID '" + clientID + "' has allready been established");
1: 
0:             listener.onAccept(answer);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ArrayBlockingQueue;
0: import java.util.concurrent.TimeUnit;
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0:         Command command = (Command) wireFormat.unmarshalText(request.getReader());
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:ff30070
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void doHead(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:         createTransportChannel(request, response);
1:     }
1:     
0:         int count=0;
1:             BlockingQueueTransport transportChannel = getTransportChannel(request, response);
0:             if (transportChannel == null)
1:             
1:             
1:             DataOutputStream stream = new DataOutputStream(response.getOutputStream());
0: //            while( packet !=null ) {
0:             	wireFormat.marshal(packet, stream);
0:             	count++;
0: //            	packet = (Command) transportChannel.getQueue().poll(0, TimeUnit.MILLISECONDS);
0: //            }
1: 
1:         } catch (InterruptedException ignore) {
1:         if (count == 0) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             BlockingQueueTransport transport = getTransportChannel(request, response);
0:             if (transport == null)
1:                 return;
1:             
1:             transport.doConsume(command);
/////////////////////////////////////////////////////////////////////////
1:     protected BlockingQueueTransport getTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {
1:         String clientID = request.getHeader("clientID");
1:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No clientID header specified");
0:             log.warn("No clientID header specified");
0:                 log.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: "+clientID);
1:                 return null;
1:             return answer;
1:         }
1:     }
1:     
1:     protected BlockingQueueTransport createTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {
1:         String clientID = request.getHeader("clientID");
1:         
1:         if (clientID == null) {
1:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No clientID header specified");
0:             log.warn("No clientID header specified");
1:             return null;
1:         }
1:         
0:         synchronized (this) {
0:             BlockingQueueTransport answer = (BlockingQueueTransport) clients.get(clientID);
0:             if (answer != null) {
0:                 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '"+clientID+"' has allready been established");
0:                 log.warn("A session for clientID '"+clientID+"' has allready been established");
1:                 return null;
1:             
0:             answer = createTransportChannel();
0:             clients.put(clientID, answer);
0:             listener.onAccept(answer);            
commit:ea94429
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.transport.TransportAcceptListener;
1: import org.apache.activemq.transport.util.TextWireFormat;
1: import org.apache.activemq.transport.xstream.XStreamWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "clientID not specified.");
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.CommandTypes;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.KeepAliveInfo;
0: import org.apache.activemq.command.WireFormatInfo;
0: import org.apache.activemq.transport.TransportAcceptListener;
0: import org.apache.activemq.transport.util.TextWireFormat;
0: import org.apache.activemq.transport.xstream.XStreamWireFormat;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef85089
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.util.zip.GZIPInputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void doOptions(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:         response.addHeader("Accepts-Encoding", "gzip");
1:         super.doOptions(request, response);
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1: 
1:         InputStream stream = request.getInputStream();
1:         String contentType = request.getContentType();
1:         if (contentType != null && contentType.equals("application/x-gzip")) {
1:             stream = new GZIPInputStream(stream);
1:         }
1:         Command command = (Command) wireFormat.unmarshalText(new InputStreamReader(stream, "UTF-8"));
commit:e778467
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:8a3bdd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private HashMap<String, Object> transportOptions;
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         transportOptions = (HashMap<String, Object>)getServletContext().getAttribute("transportOptions");
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Object> options = new HashMap<String, Object>(transportOptions);
commit:060f97d
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:             throw new ServletException("No such attribute 'transportFactory' available in the ServletContext");
/////////////////////////////////////////////////////////////////////////
1:         // Record the client's transport and ensure that it has not already registered; this is thread-safe and only allows one
/////////////////////////////////////////////////////////////////////////
1:             throw IOExceptionSupport.create(e);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(HttpTunnelServlet.class);
commit:37b8157
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentMap;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
1: import org.apache.activemq.util.ServiceListener;
/////////////////////////////////////////////////////////////////////////
1:     private ConcurrentMap<String, BlockingQueueTransport> clients = new ConcurrentHashMap<String, BlockingQueueTransport>();
/////////////////////////////////////////////////////////////////////////
0:         BlockingQueueTransport answer = clients.get(clientID);
1:         if (answer == null) {
0:             LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
1:             return null;
1:         return answer;
1:         final String clientID = request.getHeader("clientID");
/////////////////////////////////////////////////////////////////////////
1:         // Optimistically create the client's transport; this transport may be thrown away if the client has already registered.
1:         BlockingQueueTransport answer = createTransportChannel();
1: 
0:         // Record the client's transport and ensure that it has not already registered; this is thread-safe and only allows one 
1:         // thread to register the client
1:         if (clients.putIfAbsent(clientID, answer) != null) {
1:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has already been established");
1:             LOG.warn("A session for clientID '" + clientID + "' has already been established");
1:             return null;
1:         }
1: 
1:         // Ensure that the client's transport is cleaned up when no longer
1:         // needed.
1:         answer.addServiceListener(new ServiceListener() {
1:             @Override
1:             public void started(Service service) {
1:                 // Nothing to do.
1:             @Override
1:             public void stopped(Service service) {
1:                 clients.remove(clientID);
1:         });
1: 
1:         // Configure the transport with any additional properties or filters.  Although the returned transport is not explicitly
1:         // persisted, if it is a filter (e.g., InactivityMonitor) it will be linked to the client's transport as a TransportListener
1:         // and not GC'd until the client's transport is disposed.
1:         Transport transport = answer;
1:         try {
1:             // Preserve the transportOptions for future use by making a copy before applying (they are removed when applied).
0:             HashMap options = new HashMap(transportOptions);
1:             transport = transportFactory.serverConfigure(answer, null, options);
1:         } catch (Exception e) {
0:             IOExceptionSupport.create(e);
1: 
1:         // Wait for the transport to be connected or disposed.
1:         listener.onAccept(transport);
1:         while (!transport.isConnected() && !transport.isDisposed()) {
1:             try {
1:                 Thread.sleep(100);
1:             } catch (InterruptedException ignore) {
1:             }
1:         }
1: 
1:         // Ensure that the transport was not prematurely disposed.
1:         if (transport.isDisposed()) {
1:             response.sendError(HttpServletResponse.SC_BAD_REQUEST, "The session for clientID '" + clientID + "' was prematurely disposed");
1:             LOG.warn("The session for clientID '" + clientID + "' was prematurely disposed");
1:             return null;
1:         }
1: 
0:         return answer;
commit:90c597e
/////////////////////////////////////////////////////////////////////////
0:                 HashMap options = new HashMap(transportOptions);
0:                 transport = transportFactory.serverConfigure(answer, null, options);
commit:7310949
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.LinkedBlockingQueue;
/////////////////////////////////////////////////////////////////////////
1:        return new BlockingQueueTransport(new LinkedBlockingQueue<Object>());
commit:09bae42
/////////////////////////////////////////////////////////////////////////
0:             //wait for the transport to connect
0:             while (!answer.isConnected()) {
1:             	try {
0:             		Thread.sleep(100);
0:             	} catch (InterruptedException ignore) {
1:             	}
1:             }
0:        // return new BlockingQueueTransport(new LinkedBlockingQueue<Object>());
0:     	 return new BlockingQueueTransport(new ArrayBlockingQueue<Object>(10));
author:Gary Tully
-------------------------------------------------------------------------------
commit:8ba8b61
/////////////////////////////////////////////////////////////////////////
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.InactivityMonitor;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.util.IOExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:     private HttpTransportFactory transportFactory;
0:     private HashMap transportOptions;
/////////////////////////////////////////////////////////////////////////
1:         transportFactory = (HttpTransportFactory)getServletContext().getAttribute("transportFactory");
1:         if (transportFactory == null) {
0:             throw new ServletException("No such attribute 'transportFactory' available in the ServletContext");    
1:         }
0:         transportOptions = (HashMap)getServletContext().getAttribute("transportOptions");
/////////////////////////////////////////////////////////////////////////
0:                 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has already been established");
0:                 LOG.warn("A session for clientID '" + clientID + "' has already been established");
0:             Transport transport = answer;
0:             try {
0:                 transport = transportFactory.serverConfigure(answer, null, transportOptions);
0:             } catch (Exception e) {
0:                 IOExceptionSupport.create(e);
1:             }
0:             listener.onAccept(transport);
author:Robert Davies
-------------------------------------------------------------------------------
commit:568ab1e
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStreamReader;
0: import javax.servlet.ServletInputStream;
/////////////////////////////////////////////////////////////////////////
0:     private final Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();
1:     private final long requestTimeout = 30000L;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,
0:             IOException {
1:         // Read the command directly from the reader, assuming UTF8 encoding
0:         ServletInputStream sis = request.getInputStream();
0:         Command command = (Command) wireFormat.unmarshalText(new InputStreamReader(sis, "UTF-8"));
1:             WireFormatInfo info = (WireFormatInfo) command;
1:                 response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cannot process wire format of version: "
1:                         + info.getVersion());
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:081b0e3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Command command = wireFormat.readCommand(request.getReader());
/////////////////////////////////////////////////////////////////////////
commit:7027fe6
/////////////////////////////////////////////////////////////////////////
0:         // Read the command directly from the reader
0:         //Command command = wireFormat.readCommand(request.getReader());
1: 
0:         // Build the command xml before passing it to the reader
0:         BufferedReader buffRead = request.getReader();
0:         String commandXml = "";
0:         String line;
0:         while ((line = buffRead.readLine()) != null) {
0:             commandXml += line;
1: 
0:         Command command = wireFormat.readCommand(commandXml);
1: 
1:         if (command instanceof WireFormatInfo) {
/////////////////////////////////////////////////////////////////////////
0:             if (command instanceof ConnectionInfo) {
0:                 ConnectionInfo info = (ConnectionInfo) command;
0:                 request.getSession(true).setAttribute("clientID", info.getClientId());
1:             }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:0684e20
/////////////////////////////////////////////////////////////////////////
0:         else if (command instanceof WireFormatInfo) {
/////////////////////////////////////////////////////////////////////////
0:                 /*
0:                     answer.oneway(ping);
1:                 */
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.http;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: 
0: import org.activemq.command.Command;
0: import org.activemq.command.CommandTypes;
0: import org.activemq.command.ConnectionInfo;
0: import org.activemq.command.KeepAliveInfo;
0: import org.activemq.command.WireFormatInfo;
0: import org.activemq.transport.TransportAcceptListener;
0: import org.activemq.transport.util.TextWireFormat;
0: import org.activemq.transport.xstream.XStreamWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
0: import javax.servlet.http.HttpSession;
0: 
0: import java.io.BufferedReader;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.HashMap;
0: import java.util.Map;
0: 
1: /**
1:  * A servlet which handles server side HTTP transport, delegating to the
1:  * ActiveMQ broker. This servlet is designed for being embedded inside an
1:  * ActiveMQ Broker using an embedded Jetty or Tomcat instance.
0:  * 
0:  * @version $Revision$
0:  */
1: public class HttpTunnelServlet extends HttpServlet {
1:     private static final long serialVersionUID = -3826714430767484333L;
0:     private static final Log log = LogFactory.getLog(HttpTunnelServlet.class);
0: 
1:     private TransportAcceptListener listener;
1:     private TextWireFormat wireFormat;
0:     private Map clients = new HashMap();
0:     private long requestTimeout = 30000L;
0:     private KeepAliveInfo ping = new KeepAliveInfo();
0: 
1:     public void init() throws ServletException {
1:         super.init();
0:         listener = (TransportAcceptListener) getServletContext().getAttribute("acceptListener");
1:         if (listener == null) {
1:             throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
1:         }
0:         wireFormat = (TextWireFormat) getServletContext().getAttribute("wireFormat");
1:         if (wireFormat == null) {
1:             wireFormat = createWireFormat();
1:         }
1:     }
0: 
1:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:         // lets return the next response
1:         Command packet = null;
0:         try {
0:             System.err.println("\nrequest="+request);
0:             BlockingQueueTransport transportChannel = getTransportChannel(request);
0:             if (transportChannel == null) {
0:                 log("No transport available! ");
1:                 return;
1:             }
0:             packet = (Command) transportChannel.getQueue().poll(requestTimeout, TimeUnit.MILLISECONDS);
0:             System.err.println("packet="+packet);
1:         }
0:         catch (InterruptedException e) {
0:             // ignore
1:         }
0:         if (packet == null) {
0:             // TODO temporary hack to prevent busy loop.  Replace with continuations
0:             try{ Thread.sleep(250);}catch (InterruptedException e) { e.printStackTrace(); }
1:             response.setStatus(HttpServletResponse.SC_REQUEST_TIMEOUT);
1:         }
0:         else {
0:             wireFormat.marshal(packet, new DataOutputStream(response.getOutputStream()));
1:         }
1:     }
0: 
0:     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
0: 
0:         // String body = readRequestBody(request);
0:         // Command command = wireFormat.readCommand(body);
0:         
0:         Command command = wireFormat.readCommand(request.getReader());
0: 
0:         if (command instanceof ConnectionInfo) {
0:             ConnectionInfo info = (ConnectionInfo) command;
0:             request.getSession(true).setAttribute("clientID", info.getClientId());
1:         }
0:         if (command instanceof WireFormatInfo) {
0:             WireFormatInfo info = (WireFormatInfo) command;
1:             if (!canProcessWireFormatVersion(info.getVersion())) {
0:                 response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cannot process wire format of version: " + info.getVersion());
1:             }
0: 
1:         }
0:         else {
0:             BlockingQueueTransport transport = getTransportChannel(request);
0:             if (transport == null) {
0:                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);
1:             }
0:             else {
0:                 transport.doConsume(command);
1:             }
1:         }
1:     }
0: 
1:     private boolean canProcessWireFormatVersion(int version) {
0:         // TODO:
1:         return true;
1:     }
0: 
1:     protected String readRequestBody(HttpServletRequest request) throws IOException {
1:         StringBuffer buffer = new StringBuffer();
1:         BufferedReader reader = request.getReader();
1:         while (true) {
1:             String line = reader.readLine();
1:             if (line == null) {
1:                 break;
1:             }
0:             else {
1:                 buffer.append(line);
1:                 buffer.append("\n");
1:             }
1:         }
1:         return buffer.toString();
1:     }
0: 
0:     protected BlockingQueueTransport getTransportChannel(HttpServletRequest request) {
0:         HttpSession session = request.getSession(true);
0:         String clientID = null;
0:         if (session != null) {
0:             clientID = (String) session.getAttribute("clientID");
1:         }
1:         if (clientID == null) {
0:             clientID = request.getHeader("clientID");
1:         }
0:         System.out.println("clientID="+clientID);
1:         /**
0:          * if (clientID == null) { clientID = request.getParameter("clientID"); }
0:          */
1:         if (clientID == null) {
0:             log.warn("No clientID header so ignoring request");
0:             return null;
1:         }
0:         synchronized (this) {
0:             BlockingQueueTransport answer = (BlockingQueueTransport) clients.get(clientID);
0:             if (answer == null) {
0:                 answer = createTransportChannel();
0:                 clients.put(clientID, answer);
0:                 listener.onAccept(answer);
1:             }
0:             else {
0:                 try {
0:                     answer.asyncRequest(ping);
1:                 }
0:                 catch (IOException e) {
0:                     log.warn("Failed to ping transport: " + e, e);
1:                 }
1:             }
0:             return answer;
1:         }
1:     }
0: 
1:     protected BlockingQueueTransport createTransportChannel() {
0:         return new BlockingQueueTransport(new ArrayBlockingQueue(10));
1:     }
0: 
1:     protected TextWireFormat createWireFormat() {
1:         return new XStreamWireFormat();
1:     }
1: }
============================================================================