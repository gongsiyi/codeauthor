1:ddfa960: /**
1:ddfa960:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ddfa960:  * contributor license agreements.  See the NOTICE file distributed with
1:ddfa960:  * this work for additional information regarding copyright ownership.
1:ddfa960:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ddfa960:  * (the "License"); you may not use this file except in compliance with
1:ddfa960:  * the License.  You may obtain a copy of the License at
1:ddfa960:  *
1:ddfa960:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ddfa960:  *
1:ddfa960:  * Unless required by applicable law or agreed to in writing, software
1:ddfa960:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ddfa960:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ddfa960:  * See the License for the specific language governing permissions and
1:ddfa960:  * limitations under the License.
1:ddfa960:  */
1:ddfa960: package org.apache.activemq.broker.advisory;
1:ddfa960: 
1:ddfa960: import org.apache.activemq.ActiveMQConnectionFactory;
1:ddfa960: import org.apache.activemq.broker.BrokerService;
1:ddfa960: import org.apache.activemq.command.ActiveMQMessage;
1:ddfa960: import org.apache.activemq.command.ActiveMQTopic;
1:ddfa960: import org.apache.activemq.command.ConsumerInfo;
1:ddfa960: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:ddfa960: import org.apache.activemq.util.ServiceStopper;
1:ddfa960: import org.junit.After;
1:ddfa960: import org.junit.Test;
1:ddfa960: 
1:ddfa960: import javax.jms.Connection;
1:ddfa960: import javax.jms.MessageConsumer;
1:ddfa960: import javax.jms.Session;
1:ddfa960: import java.util.concurrent.CountDownLatch;
1:ddfa960: import java.util.concurrent.Executors;
1:ddfa960: import java.util.concurrent.TimeUnit;
1:ddfa960: 
1:ddfa960: import static org.junit.Assert.*;
1:ddfa960: 
1:ddfa960: public class AdvisoryDuringStartTest {
1:ddfa960: 
1:ddfa960:     BrokerService brokerService;
1:ddfa960: 
1:ddfa960:     @After
1:ddfa960:     public void stopBroker() throws Exception {
1:ddfa960:         if (brokerService != null) {
1:ddfa960:             brokerService.stop();
1:ddfa960:         }
1:ddfa960:     }
1:ddfa960: 
1:ddfa960:     @Test
1:ddfa960:     public void testConsumerAdvisoryDuringSlowStart() throws Exception {
1:ddfa960: 
1:ddfa960:         brokerService = new BrokerService();
1:ddfa960:         brokerService.setPersistent(false);
1:ddfa960:         brokerService.setUseJmx(false);
1:ddfa960:         brokerService.addConnector("tcp://localhost:0");
1:ddfa960: 
1:ddfa960:         final CountDownLatch resumeStart = new CountDownLatch(1);
1:ddfa960:         brokerService.addNetworkConnector(new DiscoveryNetworkConnector() {
1:ddfa960:             @Override
1:ddfa960:             protected void handleStart() throws Exception {
1:ddfa960:                 // delay broker started flag
1:ddfa960:                 resumeStart.await(5, TimeUnit.SECONDS);
1:ddfa960:             }
1:ddfa960: 
1:ddfa960:             @Override
1:ddfa960:             protected void handleStop(ServiceStopper s) throws Exception {}
1:ddfa960:         });
1:ddfa960:         Executors.newCachedThreadPool().submit(new Runnable() {
1:ddfa960:             @Override
1:ddfa960:             public void run() {
1:ddfa960:                 try {
1:ddfa960:                     brokerService.start();
1:ddfa960:                 } catch (Exception e) {
1:ddfa960:                     e.printStackTrace();
1:ddfa960:                     fail("error on start: " + e.toString());
1:ddfa960:                 }
1:ddfa960:             }
1:ddfa960:         });
1:ddfa960:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")");
1:ddfa960:         Connection advisoryConnection = connectionFactory.createConnection();
1:ddfa960:         advisoryConnection.start();
1:ddfa960:         Session advisorySession = advisoryConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ddfa960:         MessageConsumer advisoryConsumer = advisorySession.createConsumer(advisorySession.createTopic("ActiveMQ.Advisory.Consumer.>"));
1:ddfa960: 
1:ddfa960:         Connection consumerConnection = connectionFactory.createConnection();
1:ddfa960:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ddfa960:         consumerConnection.start();
1:ddfa960:         ActiveMQTopic dest = new ActiveMQTopic("SomeTopic");
1:ddfa960: 
1:ddfa960:         // real consumer
1:ddfa960:         consumerSession.createConsumer(dest);
1:ddfa960: 
1:ddfa960:         resumeStart.countDown();
1:ddfa960:         
1:ddfa960: 
1:ddfa960:         ActiveMQMessage advisory = (ActiveMQMessage)advisoryConsumer.receive(4000);
1:ddfa960:         assertNotNull(advisory);
1:ddfa960:         assertTrue(advisory.getDataStructure() instanceof ConsumerInfo);
1:ddfa960:         assertTrue(((ConsumerInfo)advisory.getDataStructure()).getDestination().equals(dest));
1:ddfa960:         advisoryConnection.close();
1:ddfa960: 
1:ddfa960:         consumerConnection.close();
1:ddfa960:     }
1:ddfa960: 
1:ddfa960: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ddfa960
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.advisory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class AdvisoryDuringStartTest {
1: 
1:     BrokerService brokerService;
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testConsumerAdvisoryDuringSlowStart() throws Exception {
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.addConnector("tcp://localhost:0");
1: 
1:         final CountDownLatch resumeStart = new CountDownLatch(1);
1:         brokerService.addNetworkConnector(new DiscoveryNetworkConnector() {
1:             @Override
1:             protected void handleStart() throws Exception {
1:                 // delay broker started flag
1:                 resumeStart.await(5, TimeUnit.SECONDS);
1:             }
1: 
1:             @Override
1:             protected void handleStop(ServiceStopper s) throws Exception {}
1:         });
1:         Executors.newCachedThreadPool().submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     brokerService.start();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                     fail("error on start: " + e.toString());
1:                 }
1:             }
1:         });
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")");
1:         Connection advisoryConnection = connectionFactory.createConnection();
1:         advisoryConnection.start();
1:         Session advisorySession = advisoryConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = advisorySession.createConsumer(advisorySession.createTopic("ActiveMQ.Advisory.Consumer.>"));
1: 
1:         Connection consumerConnection = connectionFactory.createConnection();
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumerConnection.start();
1:         ActiveMQTopic dest = new ActiveMQTopic("SomeTopic");
1: 
1:         // real consumer
1:         consumerSession.createConsumer(dest);
1: 
1:         resumeStart.countDown();
1:         
1: 
1:         ActiveMQMessage advisory = (ActiveMQMessage)advisoryConsumer.receive(4000);
1:         assertNotNull(advisory);
1:         assertTrue(advisory.getDataStructure() instanceof ConsumerInfo);
1:         assertTrue(((ConsumerInfo)advisory.getDataStructure()).getDestination().equals(dest));
1:         advisoryConnection.close();
1: 
1:         consumerConnection.close();
1:     }
1: 
1: }
============================================================================