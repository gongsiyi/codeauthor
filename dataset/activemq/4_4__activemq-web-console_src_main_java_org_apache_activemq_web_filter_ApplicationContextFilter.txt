1:90b66ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:90b66ce:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:90b66ce:  *
1:90b66ce:  * Unless required by applicable law or agreed to in writing, software
1:90b66ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b66ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b66ce:  * See the License for the specific language governing permissions and
1:90b66ce:  * limitations under the License.
1:90b66ce:  */
1:90b66ce: package org.apache.activemq.web.filter;
2:90b66ce: 
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.util.AbstractMap;
1:540dd5c: import java.util.Collections;
1:540dd5c: import java.util.Map;
1:540dd5c: import java.util.Set;
1:90b66ce: 
1:90b66ce: import javax.servlet.Filter;
1:90b66ce: import javax.servlet.FilterChain;
1:90b66ce: import javax.servlet.FilterConfig;
1:90b66ce: import javax.servlet.ServletContext;
1:90b66ce: import javax.servlet.ServletException;
1:90b66ce: import javax.servlet.ServletRequest;
1:90b66ce: import javax.servlet.ServletResponse;
1:3c4848b: import javax.servlet.http.HttpServletRequest;
1:3c4848b: import javax.servlet.http.HttpServletResponse;
1:540dd5c: 
1:3c4848b: import org.apache.activemq.web.BrokerFacade;
1:02538ed: import org.slf4j.Logger;
1:02538ed: import org.slf4j.LoggerFactory;
1:540dd5c: import org.springframework.web.bind.ServletRequestDataBinder;
1:540dd5c: import org.springframework.web.context.WebApplicationContext;
1:540dd5c: import org.springframework.web.context.support.WebApplicationContextUtils;
1:90b66ce: 
1:90b66ce: /**
1:90b66ce:  * Exposes Spring ApplicationContexts to JSP EL and other view technologies.
1:90b66ce:  * Currently a variable is placed in application scope (by default called
1:90b66ce:  * 'applicationContext') so that POJOs can be pulled out of Spring in a JSP page
1:90b66ce:  * to render things using EL expressions. <br/>
1:90b66ce:  * 
1:90b66ce:  * e.g. ${applicationContext.cheese} would access the cheese POJO. Or
1:90b66ce:  * ${applicationContext.cheese.name} would access the name property of the
1:90b66ce:  * cheese POJO. <br/>
1:90b66ce:  * 
1:90b66ce:  * You can then use JSTL to work with these POJOs such as &lt;c.set var="myfoo"
1:90b66ce:  * value="${applicationContext.foo}"/&gt; <br/>
1:90b66ce:  * 
1:90b66ce:  * In addition to applicationContext a 'requestContext' variable is created
1:90b66ce:  * which will automatically bind any request parameters to the POJOs extracted
1:90b66ce:  * from the applicationContext - which is ideal for POJOs which implement
1:90b66ce:  * queries in view technologies.
1:0bbc0ac:  * 
1:90b66ce:  * 
1:90b66ce:  */
1:90b66ce: public class ApplicationContextFilter implements Filter {
1:02538ed:     private static final transient Logger LOG = LoggerFactory.getLogger(ApplicationContextFilter.class);
1:90b66ce: 
1:90b66ce:     private ServletContext servletContext;
1:90b66ce:     private String applicationContextName = "applicationContext";
1:90b66ce:     private String requestContextName = "requestContext";
1:90b66ce:     private String requestName = "request";
1:90b66ce: 
1:90b66ce:     public void init(FilterConfig config) throws ServletException {
1:90b66ce:         this.servletContext = config.getServletContext();
1:90b66ce:         this.applicationContextName = getInitParameter(config, "applicationContextName", applicationContextName);
1:90b66ce:         this.requestContextName = getInitParameter(config, "requestContextName", requestContextName);
1:90b66ce:         this.requestName = getInitParameter(config, "requestName", requestName);
1:90b66ce: 
1:90b66ce:         // register the application context in the applicationScope
1:90b66ce:         WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
1:90b66ce:         Map wrapper = createApplicationContextWrapper(context);
1:90b66ce:         servletContext.setAttribute(applicationContextName, wrapper);
4:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
1:90b66ce:         // lets register a requestContext in the requestScope
1:90b66ce:         Map requestContextWrapper = createRequestContextWrapper(request);
1:3c4848b:         String path = ((HttpServletRequest)request).getRequestURI();
1:3c4848b:         // handle slave brokers
1:30f531d: //        try {
1:30f531d: //            if ( !(path.endsWith("css") || path.endsWith("png") || path.endsWith("ico") || path.endsWith(slavePage))
1:30f531d: //                    && ((BrokerFacade)requestContextWrapper.get("brokerQuery")).isSlave()) {
1:30f531d: //                ((HttpServletResponse)response).sendRedirect(slavePage);
1:30f531d: //                return;
1:30f531d: //            }
1:30f531d: //        } catch (Exception e) {
1:30f531d: //            LOG.warn(path + ", failed to access BrokerFacade: reason: " + e.getLocalizedMessage());
1:30f531d: //            if (LOG.isDebugEnabled()) {
1:30f531d: //                LOG.debug(request.toString(), e);
1:30f531d: //            }
1:30f531d: //            throw new IOException(e);
1:30f531d: //        }
1:90b66ce:         request.setAttribute(requestContextName, requestContextWrapper);
1:90b66ce:         request.setAttribute(requestName, request);
1:90b66ce:         chain.doFilter(request, response);
1:02538ed:     }
1:90b66ce: 
1:90b66ce:     public void destroy() {
1:3c4848b:     }
1:90b66ce: 
1:90b66ce:     public ServletContext getServletContext() {
1:90b66ce:         return servletContext;
1:3c4848b:     }
1:90b66ce: 
1:90b66ce:     public String getApplicationContextName() {
1:90b66ce:         return applicationContextName;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setApplicationContextName(String variableName) {
1:90b66ce:         this.applicationContextName = variableName;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getRequestContextName() {
1:90b66ce:         return requestContextName;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setRequestContextName(String requestContextName) {
1:90b66ce:         this.requestContextName = requestContextName;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     protected String getInitParameter(FilterConfig config, String key, String defaultValue) {
1:90b66ce:         String parameter = config.getInitParameter(key);
1:90b66ce:         return (parameter != null) ? parameter : defaultValue;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     /**
1:90b66ce:      * Creates a wrapper around the web application context so that it can be
1:90b66ce:      * accessed easily from inside JSP EL (or other expression languages in
1:90b66ce:      * other view technologies).
1:90b66ce:      */
1:90b66ce:     protected Map createApplicationContextWrapper(final WebApplicationContext context) {
1:90b66ce:         Map wrapper = new AbstractMap() {
1:90b66ce: 
1:90b66ce:             public WebApplicationContext getContext() {
1:90b66ce:                 return context;
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:             public Object get(Object key) {
1:90b66ce:                 if (key == null) {
1:90b66ce:                     return null;
1:90b66ce:                 }
1:90b66ce:                 return context.getBean(key.toString());
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:             public Set entrySet() {
1:90b66ce:                 return Collections.EMPTY_SET;
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:         };
1:90b66ce:         return wrapper;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     /**
1:90b66ce:      * Creates a wrapper around the request context (e.g. to allow POJOs to be
1:90b66ce:      * auto-injected from request parameter values etc) so that it can be
1:90b66ce:      * accessed easily from inside JSP EL (or other expression languages in
1:90b66ce:      * other view technologies).
1:90b66ce:      */
1:90b66ce:     protected Map createRequestContextWrapper(final ServletRequest request) {
1:90b66ce:         final WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
1:90b66ce:         Map wrapper = new AbstractMap() {
1:90b66ce: 
1:90b66ce:             public WebApplicationContext getContext() {
1:90b66ce:                 return context;
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:             public Object get(Object key) {
1:90b66ce:                 if (key == null) {
1:90b66ce:                     return null;
1:90b66ce:                 }
1:90b66ce:                 return bindRequestBean(context.getBean(key.toString()), request);
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:             public Set entrySet() {
1:90b66ce:                 return Collections.EMPTY_SET;
1:90b66ce:             }
1:90b66ce: 
1:90b66ce:         };
1:90b66ce:         return wrapper;
1:90b66ce: 
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     /**
1:90b66ce:      * Binds properties from the request parameters to the given POJO which is
1:90b66ce:      * useful for POJOs which are configurable via request parameters such as
1:90b66ce:      * for query/view POJOs
1:90b66ce:      */
1:90b66ce:     protected Object bindRequestBean(Object bean, ServletRequest request) {
1:90b66ce:         ServletRequestDataBinder binder = new ServletRequestDataBinder(bean, null);
1:90b66ce:         binder.bind(request);
1:90b66ce:         return bean;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: //        try {
1: //            if ( !(path.endsWith("css") || path.endsWith("png") || path.endsWith("ico") || path.endsWith(slavePage))
1: //                    && ((BrokerFacade)requestContextWrapper.get("brokerQuery")).isSlave()) {
1: //                ((HttpServletResponse)response).sendRedirect(slavePage);
1: //                return;
1: //            }
1: //        } catch (Exception e) {
1: //            LOG.warn(path + ", failed to access BrokerFacade: reason: " + e.getLocalizedMessage());
1: //            if (LOG.isDebugEnabled()) {
1: //                LOG.debug(request.toString(), e);
1: //            }
1: //            throw new IOException(e);
1: //        }
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.AbstractMap;
1: import java.util.Collections;
1: import java.util.Map;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.springframework.web.bind.ServletRequestDataBinder;
1: import org.springframework.web.context.WebApplicationContext;
1: import org.springframework.web.context.support.WebApplicationContextUtils;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:02538ed
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(ApplicationContextFilter.class);
/////////////////////////////////////////////////////////////////////////
0:             if ( !(path.endsWith("css") || path.endsWith("png") || path.endsWith("ico") || path.endsWith(slavePage))
0:                     && ((BrokerFacade)requestContextWrapper.get("brokerQuery")).isSlave()) {
0:             LOG.warn(path + ", failed to access BrokerFacade: reason: " + e.getLocalizedMessage());
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug(request.toString(), e);
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c4848b
/////////////////////////////////////////////////////////////////////////
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: import org.apache.activemq.web.BrokerFacade;
/////////////////////////////////////////////////////////////////////////
0:     private final String slavePage = "slave.jsp";
/////////////////////////////////////////////////////////////////////////
1:         String path = ((HttpServletRequest)request).getRequestURI();
1:         // handle slave brokers
0:         try {
0:             if (((BrokerFacade)requestContextWrapper.get("brokerQuery")).isSlave()
0:                     && (!(path.endsWith("css") || path.endsWith("png")) && !path.endsWith(slavePage))) {
0:                 ((HttpServletResponse)response).sendRedirect(slavePage);
0:                 return;
1:             }
0:         } catch (Exception e) {
0:             throw new IOException(e);
1:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:8a5e197
/////////////////////////////////////////////////////////////////////////
commit:90b66ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.filter;
1: 
0: import org.springframework.web.bind.ServletRequestDataBinder;
0: import org.springframework.web.context.WebApplicationContext;
0: import org.springframework.web.context.support.WebApplicationContextUtils;
1: 
1: import javax.servlet.Filter;
1: import javax.servlet.FilterChain;
1: import javax.servlet.FilterConfig;
1: import javax.servlet.ServletContext;
1: import javax.servlet.ServletException;
1: import javax.servlet.ServletRequest;
1: import javax.servlet.ServletResponse;
1: 
0: import java.io.IOException;
0: import java.util.AbstractMap;
0: import java.util.Collections;
0: import java.util.Map;
0: import java.util.Set;
1: 
1: /**
1:  * Exposes Spring ApplicationContexts to JSP EL and other view technologies.
1:  * Currently a variable is placed in application scope (by default called
1:  * 'applicationContext') so that POJOs can be pulled out of Spring in a JSP page
1:  * to render things using EL expressions. <br/>
1:  * 
1:  * e.g. ${applicationContext.cheese} would access the cheese POJO. Or
1:  * ${applicationContext.cheese.name} would access the name property of the
1:  * cheese POJO. <br/>
1:  * 
1:  * You can then use JSTL to work with these POJOs such as &lt;c.set var="myfoo"
1:  * value="${applicationContext.foo}"/&gt; <br/>
1:  * 
1:  * In addition to applicationContext a 'requestContext' variable is created
1:  * which will automatically bind any request parameters to the POJOs extracted
1:  * from the applicationContext - which is ideal for POJOs which implement
1:  * queries in view technologies.
1:  * 
0:  * @version $Revision$
1:  */
1: public class ApplicationContextFilter implements Filter {
1: 
1:     private ServletContext servletContext;
1:     private String applicationContextName = "applicationContext";
1:     private String requestContextName = "requestContext";
1:     private String requestName = "request";
1: 
1:     public void init(FilterConfig config) throws ServletException {
1:         this.servletContext = config.getServletContext();
1:         this.applicationContextName = getInitParameter(config, "applicationContextName", applicationContextName);
1:         this.requestContextName = getInitParameter(config, "requestContextName", requestContextName);
1:         this.requestName = getInitParameter(config, "requestName", requestName);
1: 
1:         // register the application context in the applicationScope
1:         WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
1:         Map wrapper = createApplicationContextWrapper(context);
1:         servletContext.setAttribute(applicationContextName, wrapper);
1:     }
1: 
1:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
1:         // lets register a requestContext in the requestScope
1:         Map requestContextWrapper = createRequestContextWrapper(request);
1:         request.setAttribute(requestContextName, requestContextWrapper);
1:         request.setAttribute(requestName, request);
1:         chain.doFilter(request, response);
1:     }
1: 
1:     public void destroy() {
1:     }
1: 
1:     public ServletContext getServletContext() {
1:         return servletContext;
1:     }
1: 
1:     public String getApplicationContextName() {
1:         return applicationContextName;
1:     }
1: 
1:     public void setApplicationContextName(String variableName) {
1:         this.applicationContextName = variableName;
1:     }
1: 
1:     public String getRequestContextName() {
1:         return requestContextName;
1:     }
1: 
1:     public void setRequestContextName(String requestContextName) {
1:         this.requestContextName = requestContextName;
1:     }
1: 
1:     protected String getInitParameter(FilterConfig config, String key, String defaultValue) {
1:         String parameter = config.getInitParameter(key);
1:         return (parameter != null) ? parameter : defaultValue;
1:     }
1: 
1:     /**
1:      * Creates a wrapper around the web application context so that it can be
1:      * accessed easily from inside JSP EL (or other expression languages in
1:      * other view technologies).
1:      */
1:     protected Map createApplicationContextWrapper(final WebApplicationContext context) {
1:         Map wrapper = new AbstractMap() {
1: 
1:             public WebApplicationContext getContext() {
1:                 return context;
1:             }
1: 
1:             public Object get(Object key) {
1:                 if (key == null) {
1:                     return null;
1:                 }
1:                 return context.getBean(key.toString());
1:             }
1: 
1:             public Set entrySet() {
1:                 return Collections.EMPTY_SET;
1:             }
1: 
1:         };
1:         return wrapper;
1:     }
1: 
1:     /**
1:      * Creates a wrapper around the request context (e.g. to allow POJOs to be
1:      * auto-injected from request parameter values etc) so that it can be
1:      * accessed easily from inside JSP EL (or other expression languages in
1:      * other view technologies).
1:      */
1:     protected Map createRequestContextWrapper(final ServletRequest request) {
1:         final WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
1:         Map wrapper = new AbstractMap() {
1: 
1:             public WebApplicationContext getContext() {
1:                 return context;
1:             }
1: 
1:             public Object get(Object key) {
1:                 if (key == null) {
1:                     return null;
1:                 }
1:                 return bindRequestBean(context.getBean(key.toString()), request);
1:             }
1: 
1:             public Set entrySet() {
1:                 return Collections.EMPTY_SET;
1:             }
1: 
1:         };
1:         return wrapper;
1: 
1:     }
1: 
1:     /**
1:      * Binds properties from the request parameters to the given POJO which is
1:      * useful for POJOs which are configurable via request parameters such as
1:      * for query/view POJOs
1:      */
1:     protected Object bindRequestBean(Object bean, ServletRequest request) {
1:         ServletRequestDataBinder binder = new ServletRequestDataBinder(bean, null);
1:         binder.bind(request);
1:         return bean;
1:     }
1: 
1: }
============================================================================