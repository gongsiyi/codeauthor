1:9ba8d26: /**
1:9ba8d26:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9ba8d26:  * contributor license agreements.  See the NOTICE file distributed with
1:9ba8d26:  * this work for additional information regarding copyright ownership.
1:9ba8d26:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9ba8d26:  * (the "License"); you may not use this file except in compliance with
1:9ba8d26:  * the License.  You may obtain a copy of the License at
1:9ba8d26:  *
1:9ba8d26:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ba8d26:  *
1:9ba8d26:  * Unless required by applicable law or agreed to in writing, software
1:9ba8d26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ba8d26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ba8d26:  * See the License for the specific language governing permissions and
1:9ba8d26:  * limitations under the License.
1:9ba8d26:  */
1:9ba8d26: package org.apache.activemq.transport.discovery.masterslave;
1:9ba8d26: 
1:9ba8d26: import java.net.URI;
1:9ba8d26: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1:9ba8d26: import org.slf4j.Logger;
1:9ba8d26: import org.slf4j.LoggerFactory;
1:9ba8d26: 
1:9ba8d26: /**
1:9ba8d26:  * A static DiscoveryAgent that supports connecting to a Master / Slave tuple
1:9ba8d26:  * of brokers.
1:9ba8d26:  */
1:9ba8d26: public class MasterSlaveDiscoveryAgent extends SimpleDiscoveryAgent {
1:9ba8d26: 
1:9ba8d26:     private final static Logger LOG = LoggerFactory.getLogger(MasterSlaveDiscoveryAgent.class);
1:9ba8d26: 
1:9ba8d26:     private String[] msServices = new String[]{};
1:9ba8d26: 
1:9ba8d26:     @Override
1:9ba8d26:     public String[] getServices() {
1:9ba8d26:         return msServices;
1:9ba8d26:     }
1:9ba8d26: 
1:9ba8d26:     @Override
1:9ba8d26:     public void setServices(String services) {
1:9ba8d26:         this.msServices = services.split(",");
1:9ba8d26:         configureServices();
1:9ba8d26:     }
1:9ba8d26: 
1:9ba8d26:     @Override
1:9ba8d26:     public void setServices(String services[]) {
1:9ba8d26:         this.msServices = services;
1:9ba8d26:         configureServices();
1:9ba8d26:     }
1:9ba8d26: 
1:9ba8d26:     @Override
1:9ba8d26:     public void setServices(URI services[]) {
1:9ba8d26:         this.msServices = new String[services.length];
1:9ba8d26:         for (int i = 0; i < services.length; i++) {
1:9ba8d26:             this.msServices[i] = services[i].toString();
1:9ba8d26:         }
1:9ba8d26:         configureServices();
1:9ba8d26:     }
1:9ba8d26: 
1:9ba8d26:     protected void configureServices() {
1:9ba8d26:         if ((msServices == null) || (msServices.length < 2)) {
1:9ba8d26:             LOG.error("masterSlave requires at least 2 URIs");
1:9ba8d26:             msServices = new String[]{};
1:9ba8d26:             throw new IllegalArgumentException("Expecting at least 2 arguments");
1:9ba8d26:         }
1:9ba8d26: 
1:9ba8d26:         StringBuffer buf = new StringBuffer();
1:9ba8d26: 
1:9ba8d26:         buf.append("failover:(");
1:9ba8d26: 
1:9ba8d26:         for (int i = 0; i < (msServices.length - 1); i++) {
1:9ba8d26:             buf.append(msServices[i]);
1:9ba8d26:             buf.append(',');
1:9ba8d26:         }
1:9ba8d26:         buf.append(msServices[msServices.length - 1]);
1:9ba8d26: 
1:9ba8d26:         buf.append(")?randomize=false&maxReconnectAttempts=0");
1:9ba8d26: 
1:9ba8d26:         super.setServices(new String[]{buf.toString()});
1:9ba8d26:     }
1:9ba8d26: 
1:9ba8d26: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Gary Tully
-------------------------------------------------------------------------------
commit:9ba8d26
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery.masterslave;
1: 
1: import java.net.URI;
1: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A static DiscoveryAgent that supports connecting to a Master / Slave tuple
1:  * of brokers.
1:  */
1: public class MasterSlaveDiscoveryAgent extends SimpleDiscoveryAgent {
1: 
1:     private final static Logger LOG = LoggerFactory.getLogger(MasterSlaveDiscoveryAgent.class);
1: 
1:     private String[] msServices = new String[]{};
1: 
1:     @Override
1:     public String[] getServices() {
1:         return msServices;
1:     }
1: 
1:     @Override
1:     public void setServices(String services) {
1:         this.msServices = services.split(",");
1:         configureServices();
1:     }
1: 
1:     @Override
1:     public void setServices(String services[]) {
1:         this.msServices = services;
1:         configureServices();
1:     }
1: 
1:     @Override
1:     public void setServices(URI services[]) {
1:         this.msServices = new String[services.length];
1:         for (int i = 0; i < services.length; i++) {
1:             this.msServices[i] = services[i].toString();
1:         }
1:         configureServices();
1:     }
1: 
1:     protected void configureServices() {
1:         if ((msServices == null) || (msServices.length < 2)) {
1:             LOG.error("masterSlave requires at least 2 URIs");
1:             msServices = new String[]{};
1:             throw new IllegalArgumentException("Expecting at least 2 arguments");
1:         }
1: 
1:         StringBuffer buf = new StringBuffer();
1: 
1:         buf.append("failover:(");
1: 
1:         for (int i = 0; i < (msServices.length - 1); i++) {
1:             buf.append(msServices[i]);
1:             buf.append(',');
1:         }
1:         buf.append(msServices[msServices.length - 1]);
1: 
1:         buf.append(")?randomize=false&maxReconnectAttempts=0");
1: 
1:         super.setServices(new String[]{buf.toString()});
1:     }
1: 
1: }
============================================================================