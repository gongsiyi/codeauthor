1:2a558c8: /**
1:2a558c8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a558c8:  * contributor license agreements.  See the NOTICE file distributed with
1:2a558c8:  * this work for additional information regarding copyright ownership.
1:2a558c8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a558c8:  * (the "License"); you may not use this file except in compliance with
1:2a558c8:  * the License.  You may obtain a copy of the License at
1:2a558c8:  *
1:2a558c8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a558c8:  *
1:2a558c8:  * Unless required by applicable law or agreed to in writing, software
1:2a558c8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a558c8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a558c8:  * See the License for the specific language governing permissions and
1:2a558c8:  * limitations under the License.
1:2a558c8:  */
1:2a558c8: package org.apache.activemq.usecases;
24:2a558c8: 
1:2a558c8: import java.io.File;
1:2a558c8: import java.io.IOException;
1:2a558c8: import java.net.URI;
1:2a558c8: 
1:2a558c8: import javax.jms.MessageConsumer;
1:2a558c8: 
1:2a558c8: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:2a558c8: import org.apache.activemq.broker.BrokerService;
1:2a558c8: import org.apache.activemq.broker.region.DestinationInterceptor;
1:2a558c8: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:2a558c8: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:2a558c8: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:2a558c8: import org.apache.activemq.network.NetworkConnector;
1:2a558c8: import org.apache.activemq.store.kahadb.KahaDBStore;
1:2a558c8: import org.apache.activemq.util.MessageIdList;
1:2a558c8: 
1:2a558c8: public abstract class AbstractTwoBrokerNetworkConnectorWildcardIncludedDestinationTestSupport extends JmsMultipleBrokersTestSupport {
1:4743a20: 
1:2a558c8:     protected static final int MESSAGE_COUNT = 1;
1:2a558c8:     boolean dynamicOnly = true;
1:2a558c8:     int networkTTL = 1;
1:2a558c8:     boolean conduit = true;
1:2a558c8:     boolean suppressDuplicateQueueSubscriptions = true;
1:2a558c8:     boolean decreaseNetworkConsumerPriority = true;
1:4743a20: 
1:2a558c8:     /**
1:2a558c8:      * simple nwob
1:2a558c8:      */
1:2a558c8:     public void testSimpleNWOB() throws Exception {
1:4743a20: 
1:2a558c8:         sendReceive("BrokerA", "local.test",  false, "BrokerB", "local.test",  false, 1, 0);
1:2a558c8:         sendReceive("BrokerA", "local.test",  true,  "BrokerB", "local.test",  true,  1, 0);
1:2a558c8:         sendReceive("BrokerA", "global.test", false, "BrokerB", "global.test", false, 1, 1);
1:2a558c8:         sendReceive("BrokerA", "global.test", true,  "BrokerB", "global.test", true,  1, 1);
1:4743a20: 
1:2a558c8:     }
1:4743a20: 
1:2a558c8:     /**
1:2a558c8:      * nwob with wild-card subscriptions
1:2a558c8:      */
1:2a558c8:     public void testSimpleNWOBWithWildcardSubscriptions() throws Exception {
1:2a558c8: 
1:2a558c8:         sendReceive("BrokerA", "local.test.1", false, "BrokerB", "local.test.>", false, 1, 0);
1:2a558c8:         sendReceive("BrokerA", "local.test.2", true, "BrokerB", "local.test.>", true, 1, 0);
1:2a558c8:         sendReceive("BrokerA", "global.test.1", false, "BrokerB", "global.test.>", false, 1, 1);
1:2a558c8:         sendReceive("BrokerA", "global.test.2", true, "BrokerB", "global.test.>", true, 1, 1);
1:4743a20: 
1:2a558c8:     }
1:2a558c8: 
1:2a558c8:     /**
1:2a558c8:      * nwob with virtual destinations
1:2a558c8:      */
1:2a558c8:     public void testSimpleNWOBWithVirtualDestinations() throws Exception {
1:4743a20: 
1:2a558c8:         sendReceive("BrokerA", "local.test",  true, "BrokerB", "Consumer.a.local.test",  false, 1, 0);
1:2a558c8:         sendReceive("BrokerA", "global.test", true, "BrokerB", "Consumer.a.global.test", false, 1, 1);
1:4743a20: 
1:2a558c8:     }
1:4743a20: 
1:2a558c8:     /**
1:2a558c8:      * nwob with virtual destinations and wild-card subscriptions
1:2a558c8:      */
1:2a558c8:     public void testSimpleNWOBWithVirtualDestinationsAndWildcardSubscriptions() throws Exception {
1:4743a20: 
1:2a558c8:         sendReceive("BrokerA", "local.test.1",  true, "BrokerB", "Consumer.a.local.test.>",  false, 1, 0);
1:2a558c8:         sendReceive("BrokerA", "global.test.1", true, "BrokerB", "Consumer.a.global.test.>", false, 1, 1);
1:4743a20: 
1:2a558c8:     }
1:4743a20: 
1:2a558c8:     public void sendReceive(String broker1, String dest1, boolean topic1, String broker2, String dest2, boolean topic2, int send, int expected) throws Exception{
1:2a558c8:         MessageConsumer client = createConsumer(broker2, createDestination(dest2, topic2));
1:9927824:         Thread.sleep(2000);
1:2a558c8:         sendMessages(broker1, createDestination(dest1, topic1), send);
1:2a558c8:         MessageIdList msgs = getConsumerMessages(broker2, client);
1:9927824:         msgs.setMaximumDuration(10000);
1:2a558c8:         msgs.waitForMessagesToArrive(send);
1:2a558c8:         assertEquals(expected, msgs.getMessageCount());
1:2a558c8:         client.close();
1:9927824:         Thread.sleep(1000);
1:2a558c8:     }
1:2a558c8: 
1:2a558c8:     protected abstract void addIncludedDestination(NetworkConnector networkConnector);
1:2a558c8: 
1:4743a20:     @Override
1:2a558c8:     public void setUp() throws Exception {
1:2a558c8:         super.setAutoFail(true);
1:2a558c8:         super.setUp();
1:4743a20:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:2a558c8:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:2a558c8:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:4743a20: 
1:2a558c8:         // Setup broker networks
1:2a558c8:         NetworkConnector nc = bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:2a558c8:         nc.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:2a558c8:         nc.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:4743a20: 
1:2a558c8:         addIncludedDestination(nc);
1:4743a20: 
1:2a558c8:         nc = bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1:2a558c8:         nc.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:2a558c8:         nc.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:4743a20: 
1:2a558c8:         addIncludedDestination(nc);
1:4743a20: 
1:2a558c8:         startAllBrokers();
1:4743a20: 
1:2a558c8:     }
1:4743a20: 
1:2a558c8:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:2a558c8:         BrokerService broker = createBroker(uri);
1:4743a20: 
1:2a558c8:         configurePersistenceAdapter(broker);
1:4743a20: 
1:2a558c8:         // make all topics virtual and consumers use the default prefix
1:2a558c8:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:2a558c8:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:2a558c8:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:2a558c8:         broker.setDestinationInterceptors(destinationInterceptors);
1:2a558c8:         return broker;
1:2a558c8:     }
1:4743a20: 
1:2a558c8:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:2a558c8:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:2a558c8:         KahaDBStore kaha = new KahaDBStore();
1:2a558c8:         kaha.setDirectory(dataFileDir);
1:2a558c8:         broker.setPersistenceAdapter(kaha);
1:2a558c8:     }
1:4743a20: 
1:2a558c8: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9927824
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(2000);
1:         msgs.setMaximumDuration(10000);
1:         Thread.sleep(1000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2a558c8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: public abstract class AbstractTwoBrokerNetworkConnectorWildcardIncludedDestinationTestSupport extends JmsMultipleBrokersTestSupport {
1: 	
1:     protected static final int MESSAGE_COUNT = 1;
1:     boolean dynamicOnly = true;
1:     int networkTTL = 1;
1:     boolean conduit = true;
1:     boolean suppressDuplicateQueueSubscriptions = true;
1:     boolean decreaseNetworkConsumerPriority = true;
1:     
1:     /**
1:      * simple nwob
1:      */
1:     public void testSimpleNWOB() throws Exception {
1:        
1:         sendReceive("BrokerA", "local.test",  false, "BrokerB", "local.test",  false, 1, 0);
1:         sendReceive("BrokerA", "local.test",  true,  "BrokerB", "local.test",  true,  1, 0);
1:         sendReceive("BrokerA", "global.test", false, "BrokerB", "global.test", false, 1, 1);
1:         sendReceive("BrokerA", "global.test", true,  "BrokerB", "global.test", true,  1, 1);
1:         
1:     }
1:     
1:     /**
1:      * nwob with wild-card subscriptions
1:      */
1:     public void testSimpleNWOBWithWildcardSubscriptions() throws Exception {
1: 
1:         sendReceive("BrokerA", "local.test.1", false, "BrokerB", "local.test.>", false, 1, 0);
1:         sendReceive("BrokerA", "local.test.2", true, "BrokerB", "local.test.>", true, 1, 0);
1:         sendReceive("BrokerA", "global.test.1", false, "BrokerB", "global.test.>", false, 1, 1);
1:         sendReceive("BrokerA", "global.test.2", true, "BrokerB", "global.test.>", true, 1, 1);
1: 
1:     }
1:     
1:     /**
1:      * nwob with virtual destinations
1:      */
1:     public void testSimpleNWOBWithVirtualDestinations() throws Exception {
1:         
1:         sendReceive("BrokerA", "local.test",  true, "BrokerB", "Consumer.a.local.test",  false, 1, 0);
1:         sendReceive("BrokerA", "global.test", true, "BrokerB", "Consumer.a.global.test", false, 1, 1);
1:         
1:     }
1:     
1:     /**
1:      * nwob with virtual destinations and wild-card subscriptions
1:      */
1:     public void testSimpleNWOBWithVirtualDestinationsAndWildcardSubscriptions() throws Exception {
1:         
1:         sendReceive("BrokerA", "local.test.1",  true, "BrokerB", "Consumer.a.local.test.>",  false, 1, 0);
1:         sendReceive("BrokerA", "global.test.1", true, "BrokerB", "Consumer.a.global.test.>", false, 1, 1);
1:         
1:     }
1:     
1:     public void sendReceive(String broker1, String dest1, boolean topic1, String broker2, String dest2, boolean topic2, int send, int expected) throws Exception{
1:         MessageConsumer client = createConsumer(broker2, createDestination(dest2, topic2));
0:         Thread.sleep(1000);
1:         sendMessages(broker1, createDestination(dest1, topic1), send);
1:         MessageIdList msgs = getConsumerMessages(broker2, client);
0:         msgs.setMaximumDuration(1000);
1:         msgs.waitForMessagesToArrive(send);
1:         assertEquals(expected, msgs.getMessageCount());
1:         client.close();
0:         Thread.sleep(500);
1:     }
1: 
1:     protected abstract void addIncludedDestination(NetworkConnector networkConnector);
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true"); 
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:         
1:         // Setup broker networks
1:         NetworkConnector nc = bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:         nc.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:         nc.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:         
1:         addIncludedDestination(nc);
1:         
1:         nc = bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1:         nc.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:         nc.setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions);
1:         
1:         addIncludedDestination(nc);
1:         
1:         startAllBrokers();
1:         
1:     }
1:     
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
1:         
1:         configurePersistenceAdapter(broker);
1:         
1:         // make all topics virtual and consumers use the default prefix
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:         broker.setDestinationInterceptors(destinationInterceptors);
1:         return broker;
1:     }
1:     
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1:     
1: }
============================================================================