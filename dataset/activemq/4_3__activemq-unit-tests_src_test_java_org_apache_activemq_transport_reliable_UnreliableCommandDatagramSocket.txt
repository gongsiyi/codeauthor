1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:2a076d0:  *
1:2a076d0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a076d0:  *
1:2a076d0:  * Unless required by applicable law or agreed to in writing, software
1:2a076d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a076d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a076d0:  * See the License for the specific language governing permissions and
1:2a076d0:  * limitations under the License.
1:2a076d0:  */
1:2a076d0: package org.apache.activemq.transport.reliable;
2:2a076d0: 
1:f812e34: import java.io.IOException;
1:f812e34: import java.net.DatagramSocket;
1:f812e34: import java.net.SocketAddress;
1:f812e34: 
1:2a076d0: import org.apache.activemq.openwire.OpenWireFormat;
1:2a076d0: import org.apache.activemq.transport.udp.CommandDatagramSocket;
1:2a076d0: import org.apache.activemq.transport.udp.DatagramHeaderMarshaller;
1:2a076d0: import org.apache.activemq.transport.udp.UdpTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2a076d0: 
1:2a076d0: /**
1:b0c2a40:  * 
1:2a076d0:  */
1:2a076d0: public class UnreliableCommandDatagramSocket extends CommandDatagramSocket {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(UnreliableCommandDatagramSocket.class);
1:2a076d0: 
1:2a076d0:     private DropCommandStrategy dropCommandStrategy;
1:2a076d0: 
1:f812e34:     public UnreliableCommandDatagramSocket(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress,
1:f812e34:                                            DatagramHeaderMarshaller headerMarshaller, DatagramSocket channel, DropCommandStrategy strategy) {
1:2a076d0:         super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller, channel);
1:2a076d0:         this.dropCommandStrategy = strategy;
2:2a076d0:     }
1:2a076d0: 
1:f812e34:     protected void sendWriteBuffer(int commandId, SocketAddress address, byte[] data, boolean redelivery) throws IOException {
1:2a076d0:         if (dropCommandStrategy.shouldDropCommand(commandId, address, redelivery)) {
1:fc00993:             LOG.info("Dropping datagram with command: " + commandId);
1:2a076d0: 
1:2a076d0:             // lets still add it to the replay buffer though!
1:2a076d0:             ReplayBuffer bufferCache = getReplayBuffer();
1:2a076d0:             if (bufferCache != null && !redelivery) {
1:2a076d0:                 bufferCache.addBuffer(commandId, data);
1:2a076d0:             }
1:f812e34:         } else {
1:2a076d0:             super.sendWriteBuffer(commandId, address, data, redelivery);
1:2a076d0:         }
1:2a076d0:     }
1:2a076d0: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(UnreliableCommandDatagramSocket.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Dropping datagram with command: " + commandId);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.DatagramSocket;
1: import java.net.SocketAddress;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public UnreliableCommandDatagramSocket(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress,
1:                                            DatagramHeaderMarshaller headerMarshaller, DatagramSocket channel, DropCommandStrategy strategy) {
1:     protected void sendWriteBuffer(int commandId, SocketAddress address, byte[] data, boolean redelivery) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(UnreliableCommandDatagramSocket.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:2a076d0
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.transport.udp.CommandDatagramSocket;
1: import org.apache.activemq.transport.udp.DatagramHeaderMarshaller;
1: import org.apache.activemq.transport.udp.UdpTransport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.io.IOException;
0: import java.net.DatagramSocket;
0: import java.net.SocketAddress;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class UnreliableCommandDatagramSocket extends CommandDatagramSocket {
0:     private static final Log log = LogFactory.getLog(UnreliableCommandDatagramSocket.class);
1: 
1:     private DropCommandStrategy dropCommandStrategy;
1: 
0:     public UnreliableCommandDatagramSocket(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize,
0:             SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, DatagramSocket channel,
0:             DropCommandStrategy strategy) {
1:         super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller, channel);
1:         this.dropCommandStrategy = strategy;
1:     }
1: 
0:     protected void sendWriteBuffer(int commandId, SocketAddress address, byte[] data, boolean redelivery)
0:             throws IOException {
1:         if (dropCommandStrategy.shouldDropCommand(commandId, address, redelivery)) {
0:             log.info("Dropping datagram with command: " + commandId);
1: 
1:             // lets still add it to the replay buffer though!
1:             ReplayBuffer bufferCache = getReplayBuffer();
1:             if (bufferCache != null && !redelivery) {
1:                 bufferCache.addBuffer(commandId, data);
1:             }
1:         }
0:         else {
1:             super.sendWriteBuffer(commandId, address, data, redelivery);
1:         }
1:     }
1: }
============================================================================