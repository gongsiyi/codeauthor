1:ec6fa19: /**
1:ec6fa19:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec6fa19:  * contributor license agreements. See the NOTICE file distributed with
1:ec6fa19:  * this work for additional information regarding copyright ownership.
1:ec6fa19:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec6fa19:  * (the "License"); you may not use this file except in compliance with
1:ec6fa19:  * the License. You may obtain a copy of the License at
1:ec6fa19:  *
1:ec6fa19:  * http://www.apache.org/licenses/LICENSE-2.0
1:ec6fa19:  *
1:ec6fa19:  * Unless required by applicable law or agreed to in writing, software
1:ec6fa19:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec6fa19:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec6fa19:  * See the License for the specific language governing permissions and
1:ec6fa19:  * limitations under the License.
1:ec6fa19:  */
1:ec6fa19: 
1:ec6fa19: package org.apache.activemq.bugs;
1:ec6fa19: 
1:ec6fa19: import javax.jms.BytesMessage;
1:ec6fa19: import javax.jms.Connection;
1:ec6fa19: import javax.jms.JMSException;
1:ec6fa19: import javax.jms.MessageProducer;
1:ec6fa19: import javax.jms.Queue;
1:ec6fa19: import javax.jms.Session;
1:ec6fa19: 
1:ec6fa19: import org.apache.activemq.ActiveMQConnectionFactory;
1:ec6fa19: import org.apache.activemq.ActiveMQSession;
1:ec6fa19: import org.apache.activemq.broker.BrokerService;
1:ec6fa19: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ec6fa19: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ec6fa19: import org.junit.After;
1:ec6fa19: import org.junit.Before;
1:ec6fa19: import org.junit.Test;
1:ec6fa19: import org.slf4j.Logger;
1:ec6fa19: import org.slf4j.LoggerFactory;
1:ec6fa19: 
1:ec6fa19: import static org.junit.Assert.assertTrue;
1:ec6fa19: 
1:ec6fa19: public class AMQ6815Test {
1:ec6fa19:    static final Logger LOG = LoggerFactory.getLogger(AMQ6815Test.class);
1:ec6fa19:    private final static int MEM_LIMIT = 5*1024*1024;
1:ec6fa19:    private final static byte[] payload = new byte[5*1024];
1:ec6fa19: 
1:ec6fa19:       protected BrokerService brokerService;
1:ec6fa19:       protected Connection connection;
1:ec6fa19:       protected Session session;
1:ec6fa19:       protected Queue amqDestination;
1:ec6fa19: 
1:ec6fa19:       @Before
1:ec6fa19:       public void setUp() throws Exception {
1:ec6fa19:          brokerService = new BrokerService();
1:ec6fa19:          PolicyEntry policy = new PolicyEntry();
1:ec6fa19:          policy.setMemoryLimit(MEM_LIMIT);
1:ec6fa19:          PolicyMap pMap = new PolicyMap();
1:ec6fa19:          pMap.setDefaultEntry(policy);
1:ec6fa19:          brokerService.setDestinationPolicy(pMap);
1:ec6fa19: 
1:ec6fa19:          brokerService.start();
1:ec6fa19:          connection = new ActiveMQConnectionFactory("vm://localhost").createConnection();
1:ec6fa19:          connection.start();
1:ec6fa19:          session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:ec6fa19:          amqDestination = session.createQueue("QQ");
1:ec6fa19:       }
1:ec6fa19: 
1:ec6fa19:       @After
1:ec6fa19:       public void tearDown() throws Exception {
1:ec6fa19:          if (connection != null) {
1:ec6fa19:             connection.close();
1:ec6fa19:          }
1:ec6fa19:          brokerService.stop();
1:ec6fa19:       }
1:ec6fa19: 
1:b57f4f3:       @Test(timeout = 120000)
1:ec6fa19:       public void testHeapUsage() throws Exception {
1:ec6fa19:          Runtime.getRuntime().gc();
1:ec6fa19:          final long initUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
1:ec6fa19:          sendMessages(10000);
1:ec6fa19:          Runtime.getRuntime().gc();
1:ec6fa19:          long usedMem = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() - initUsedMemory;
1:ec6fa19:          LOG.info("Mem in use: " + usedMem/1024  + "K");
1:ec6fa19:          assertTrue("Used Mem reasonable " + usedMem, usedMem < 5*MEM_LIMIT);
1:ec6fa19:       }
1:ec6fa19: 
1:ec6fa19:       protected void sendMessages(int count) throws JMSException {
1:ec6fa19:          MessageProducer producer = session.createProducer(amqDestination);
1:ec6fa19:          for (int i = 0; i < count; i++) {
1:ec6fa19:             BytesMessage bytesMessage = session.createBytesMessage();
1:ec6fa19:             bytesMessage.writeBytes(payload);
1:ec6fa19:             producer.send(bytesMessage);
1:ec6fa19:          }
1:ec6fa19:          producer.close();
1:ec6fa19:       }
1:ec6fa19: 
1:ec6fa19: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b57f4f3
/////////////////////////////////////////////////////////////////////////
1:       @Test(timeout = 120000)
commit:ec6fa19
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ6815Test {
1:    static final Logger LOG = LoggerFactory.getLogger(AMQ6815Test.class);
1:    private final static int MEM_LIMIT = 5*1024*1024;
1:    private final static byte[] payload = new byte[5*1024];
1: 
1:       protected BrokerService brokerService;
1:       protected Connection connection;
1:       protected Session session;
1:       protected Queue amqDestination;
1: 
1:       @Before
1:       public void setUp() throws Exception {
1:          brokerService = new BrokerService();
1:          PolicyEntry policy = new PolicyEntry();
1:          policy.setMemoryLimit(MEM_LIMIT);
1:          PolicyMap pMap = new PolicyMap();
1:          pMap.setDefaultEntry(policy);
1:          brokerService.setDestinationPolicy(pMap);
1: 
1:          brokerService.start();
1:          connection = new ActiveMQConnectionFactory("vm://localhost").createConnection();
1:          connection.start();
1:          session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:          amqDestination = session.createQueue("QQ");
1:       }
1: 
1:       @After
1:       public void tearDown() throws Exception {
1:          if (connection != null) {
1:             connection.close();
1:          }
1:          brokerService.stop();
1:       }
1: 
0:       @Test(timeout = 60000)
1:       public void testHeapUsage() throws Exception {
1:          Runtime.getRuntime().gc();
1:          final long initUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
1:          sendMessages(10000);
1:          Runtime.getRuntime().gc();
1:          long usedMem = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() - initUsedMemory;
1:          LOG.info("Mem in use: " + usedMem/1024  + "K");
1:          assertTrue("Used Mem reasonable " + usedMem, usedMem < 5*MEM_LIMIT);
1:       }
1: 
1:       protected void sendMessages(int count) throws JMSException {
1:          MessageProducer producer = session.createProducer(amqDestination);
1:          for (int i = 0; i < count; i++) {
1:             BytesMessage bytesMessage = session.createBytesMessage();
1:             bytesMessage.writeBytes(payload);
1:             producer.send(bytesMessage);
1:          }
1:          producer.close();
1:       }
1: 
1: }
============================================================================