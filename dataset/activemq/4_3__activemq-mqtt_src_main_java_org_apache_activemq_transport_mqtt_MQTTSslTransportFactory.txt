1:0f5b406: /**
1:0f5b406:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0f5b406:  * contributor license agreements.  See the NOTICE file distributed with
1:0f5b406:  * this work for additional information regarding copyright ownership.
1:0f5b406:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0f5b406:  * (the "License"); you may not use this file except in compliance with
1:0f5b406:  * the License.  You may obtain a copy of the License at
1:0f5b406:  *
1:0f5b406:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0f5b406:  *
1:0f5b406:  * Unless required by applicable law or agreed to in writing, software
1:0f5b406:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0f5b406:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0f5b406:  * See the License for the specific language governing permissions and
1:0f5b406:  * limitations under the License.
1:0f5b406:  */
1:0f5b406: package org.apache.activemq.transport.mqtt;
2:0f5b406: 
1:e8c5a9f: import java.io.IOException;
1:e8c5a9f: import java.net.URI;
1:e8c5a9f: import java.net.URISyntaxException;
1:0f5b406: import java.util.HashMap;
1:0f5b406: import java.util.Map;
1:0f5b406: 
1:e8c5a9f: import javax.net.ssl.SSLServerSocketFactory;
1:e8c5a9f: 
1:0f5b406: import org.apache.activemq.broker.BrokerService;
1:0f5b406: import org.apache.activemq.broker.BrokerServiceAware;
1:0f5b406: import org.apache.activemq.transport.MutexTransport;
1:0f5b406: import org.apache.activemq.transport.Transport;
1:0f5b406: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:e8c5a9f: import org.apache.activemq.transport.tcp.SslTransportServer;
1:0f5b406: import org.apache.activemq.util.IntrospectionSupport;
1:0f5b406: import org.apache.activemq.wireformat.WireFormat;
1:0f5b406: 
1:0f5b406: /**
1:0f5b406:  * A <a href="http://mqtt.org/">MQTT</a> over SSL transport factory
1:0f5b406:  */
1:0f5b406: public class MQTTSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1:0f5b406: 
1:bc4f4e9:     private BrokerService brokerService = null;
1:0f5b406: 
1:0f5b406:     protected String getDefaultWireFormatType() {
1:0f5b406:         return "mqtt";
1:0f5b406:     }
1:0f5b406: 
1:0f5b406:     @SuppressWarnings("rawtypes")
1:0f5b406: 
1:0f5b406:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:bc4f4e9:         transport = new MQTTTransportFilter(transport, format, brokerService);
1:0f5b406:         IntrospectionSupport.setProperties(transport, options);
1:0f5b406:         return super.compositeConfigure(transport, format, options);
1:0f5b406:     }
1:0f5b406: 
1:e8c5a9f:     @Override
1:e8c5a9f:     protected SslTransportServer createSslTransportServer(URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:e8c5a9f:         final SslTransportServer server = super.createSslTransportServer(location, serverSocketFactory);
1:e8c5a9f:         server.setAllowLinkStealing(true);
1:e8c5a9f:         return server;
1:e8c5a9f:     }
1:e8c5a9f: 
1:0f5b406:     @SuppressWarnings("rawtypes")
1:0f5b406:     @Override
1:0f5b406:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:0f5b406:         transport = super.serverConfigure(transport, format, options);
1:0f5b406: 
1:0f5b406:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:0f5b406:         if (mutex != null) {
1:0f5b406:             mutex.setSyncOnCommand(true);
1:0f5b406:         }
1:0f5b406:         return transport;
1:0f5b406:     }
1:0f5b406: 
1:0f5b406:     public void setBrokerService(BrokerService brokerService) {
1:bc4f4e9:         this.brokerService = brokerService;
1:0f5b406:     }
1:0f5b406: 
1:0f5b406:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:0f5b406:         MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format);
1:0f5b406: 
1:0f5b406:         MQTTTransportFilter filter = transport.narrow(MQTTTransportFilter.class);
1:0f5b406:         filter.setInactivityMonitor(monitor);
1:0f5b406: 
1:0f5b406:         return monitor;
1:0f5b406:     }
1:0f5b406: 
1:0f5b406: }
============================================================================
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:e8c5a9f
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import javax.net.ssl.SSLServerSocketFactory;
1: 
1: import org.apache.activemq.transport.tcp.SslTransportServer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected SslTransportServer createSslTransportServer(URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         final SslTransportServer server = super.createSslTransportServer(location, serverSocketFactory);
1:         server.setAllowLinkStealing(true);
1:         return server;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bc4f4e9
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService brokerService = null;
/////////////////////////////////////////////////////////////////////////
1:         transport = new MQTTTransportFilter(transport, format, brokerService);
/////////////////////////////////////////////////////////////////////////
1:         this.brokerService = brokerService;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Robert Davies
-------------------------------------------------------------------------------
commit:0f5b406
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  * A <a href="http://mqtt.org/">MQTT</a> over SSL transport factory
1:  */
1: public class MQTTSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1: 
0:     private BrokerContext brokerContext = null;
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "mqtt";
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         transport = new MQTTTransportFilter(transport, format, brokerContext);
1:         IntrospectionSupport.setProperties(transport, options);
1:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     @Override
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = super.serverConfigure(transport, format, options);
1: 
1:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:         if (mutex != null) {
1:             mutex.setSyncOnCommand(true);
1:         }
1: 
1:         return transport;
1:     }
1: 
1:     public void setBrokerService(BrokerService brokerService) {
0:         this.brokerContext = brokerService.getBrokerContext();
1:     }
1: 
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format);
1: 
1:         MQTTTransportFilter filter = transport.narrow(MQTTTransportFilter.class);
1:         filter.setInactivityMonitor(monitor);
1: 
1:         return monitor;
1:     }
1: 
1: }
============================================================================