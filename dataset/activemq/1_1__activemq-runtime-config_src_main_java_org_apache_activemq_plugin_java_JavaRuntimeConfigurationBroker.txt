1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.plugin.java;
2:43c3cae: 
1:43c3cae: import java.util.Arrays;
1:a253ad3: import java.util.Set;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.broker.Broker;
1:43c3cae: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:43c3cae: import org.apache.activemq.broker.region.policy.PolicyMap;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:43c3cae: import org.apache.activemq.command.ActiveMQDestination;
1:43c3cae: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:43c3cae: import org.apache.activemq.plugin.AbstractRuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.UpdateVirtualDestinationsTask;
1:9e7fae0: import org.apache.activemq.plugin.util.PolicyEntryUtil;
1:43c3cae: import org.apache.activemq.security.AuthorizationBroker;
1:43c3cae: import org.apache.activemq.security.AuthorizationMap;
1:43c3cae: import org.apache.activemq.security.SimpleAuthenticationBroker;
1:43c3cae: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:43c3cae: import org.slf4j.Logger;
1:43c3cae: import org.slf4j.LoggerFactory;
1:43c3cae: 
1:43c3cae: public class JavaRuntimeConfigurationBroker extends AbstractRuntimeConfigurationBroker {
1:43c3cae: 
1:43c3cae:     /**
1:43c3cae:      * @param next
1:43c3cae:      */
1:43c3cae:     public JavaRuntimeConfigurationBroker(Broker next) {
1:43c3cae:         super(next);
5:43c3cae:     }
1:43c3cae: 
1:43c3cae:     public static final Logger LOG = LoggerFactory.getLogger(JavaRuntimeConfigurationBroker.class);
1:43c3cae: 
1:43c3cae: 
1:43c3cae:     //Virtual Destinations
1:43c3cae:     public void setVirtualDestinations(final VirtualDestination[] virtualDestinations) {
1:43c3cae:         this.addDestinationWork.add(new UpdateVirtualDestinationsTask(this) {
1:43c3cae:             @Override
1:43c3cae:             protected VirtualDestination[] getVirtualDestinations() {
1:43c3cae:                 return virtualDestinations;
1:43c3cae:             }
1:43c3cae:         });
1:43c3cae:     }
1:43c3cae: 
1:5db9af8:     /**
1:5db9af8:      * Set the virtual destinations and apply immediately, instead of waiting for a new
1:5db9af8:      * destination or connection to trigger the work.
1:5db9af8:      *
1:5db9af8:      * @param virtualDestinations
1:5db9af8:      * @param applyImmediately
1:5db9af8:      * @throws Exception
1:5db9af8:      */
1:5db9af8:     public void setVirtualDestinations(final VirtualDestination[] virtualDestinations, boolean applyImmediately) throws Exception {
1:5db9af8:         setVirtualDestinations(virtualDestinations);
1:5db9af8:         if (applyImmediately) {
1:5db9af8:             this.applyDestinationWork();
1:5db9af8:         }
1:5db9af8:     }
1:5db9af8: 
1:43c3cae:     //New Destinations
1:43c3cae:     public void setDestinations(final ActiveMQDestination[] destinations) {
1:43c3cae:         for (ActiveMQDestination destination : destinations) {
1:43c3cae:             try {
1:43c3cae:                 if (!containsDestination(destination)) {
1:43c3cae:                     this.addDestination(this.getBrokerService().getAdminConnectionContext(), destination, true);
1:43c3cae:                     this.info("Added destination " + destination);
1:43c3cae:                 }
1:43c3cae:             } catch (Exception e) {
1:43c3cae:                 this.info("Failed to add a new destination for: " + destination, e);
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:43c3cae:         return Arrays.asList(this.getBrokerService().getRegionBroker().getDestinations()).contains(destination);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     public void addNewDestination(ActiveMQDestination destination) {
1:43c3cae:         try {
1:43c3cae:             this.addDestination(this.getBrokerService().getAdminConnectionContext(), destination, true);
1:43c3cae:             this.info("Added destination " + destination);
1:43c3cae:         } catch (Exception e) {
1:43c3cae:             this.info("Failed to add a new destination for: " + destination, e);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     //Network Connectors
1:43c3cae:     public void addNetworkConnector(final DiscoveryNetworkConnector nc) {
1:43c3cae:         try {
1:43c3cae:             if (!getBrokerService().getNetworkConnectors().contains(nc)) {
1:43c3cae:                 getBrokerService().addNetworkConnector(nc);
1:bab0887:                 getBrokerService().startNetworkConnector(nc, null);
1:43c3cae:                 info("started new network connector: " + nc);
1:43c3cae:             } else {
1:43c3cae:                 info("skipping network connector add, already exists: " + nc);
1:43c3cae:             }
1:43c3cae:         } catch (Exception e) {
1:43c3cae:             info("Failed to add new networkConnector " + nc, e);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     public void updateNetworkConnector(final DiscoveryNetworkConnector nc) {
1:43c3cae:         removeNetworkConnector(nc);
1:43c3cae:         addNetworkConnector(nc);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     public void removeNetworkConnector(final DiscoveryNetworkConnector existingCandidate) {
1:43c3cae:         if (getBrokerService().removeNetworkConnector(existingCandidate)) {
1:43c3cae:             try {
1:43c3cae:                 existingCandidate.stop();
1:43c3cae:                 info("stopped and removed networkConnector: " + existingCandidate);
1:43c3cae:             } catch (Exception e) {
1:43c3cae:                 info("Failed to stop removed network connector: " + existingCandidate);
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     //Policy entries
1:43c3cae:     public void addNewPolicyEntry(PolicyEntry addition) {
1:43c3cae:         PolicyMap existingMap = getBrokerService().getDestinationPolicy();
1:43c3cae:         existingMap.put(addition.getDestination(), addition);
1:a253ad3:         PolicyEntryUtil.applyRetrospectively(this, addition, null);
1:43c3cae:         info("added policy for: " + addition.getDestination());
1:43c3cae:     }
1:9e7fae0: 
1:43c3cae: 
1:9e7fae0:     /**
1:9e7fae0:      * This method will modify an existing policy entry that matches the destination
1:9e7fae0:      * set on the PolicyEntry passed in.
1:9e7fae0:      *
1:9e7fae0:      * The PolicyEntry reference must already be in the PolicyMap or it won't be updated.
1:9e7fae0:      * To modify the entry the best way is to look up the existing PolicyEntry from the
1:9e7fae0:      * PolicyMap, make changes to it, and pass it to this method to apply.
1:9e7fae0:      *
1:9e7fae0:      * To create or replace an existing entry (if the destination matches), see
1:9e7fae0:      * {@link #modifyPolicyEntry(PolicyEntry, boolean)
1:9e7fae0:      *
1:9e7fae0:      *
1:9e7fae0:      * @param existing
1:9e7fae0:      */
1:43c3cae:     public void modifyPolicyEntry(PolicyEntry existing) {
1:9e7fae0:         modifyPolicyEntry(existing, false);
1:9e7fae0:     }
1:9e7fae0: 
1:a253ad3:     public void modifyPolicyEntry(PolicyEntry existing, boolean createOrReplace) {
1:a253ad3:         modifyPolicyEntry(existing, createOrReplace, null);
1:a253ad3:     }
1:a253ad3: 
1:9e7fae0:     /**
1:9e7fae0:      * This method will modify an existing policy entry that matches the destination
1:9e7fae0:      * set on the PolicyEntry passed in.  If createOrReplace is true, a new policy
1:9e7fae0:      * will be created if it doesn't exist and a policy will be replaced in the PolicyMap,
1:9e7fae0:      * versus modified, if it is a different reference but the destinations for the Policy match.
1:9e7fae0:      *
1:9e7fae0:      * If createOrReplace is false, the policy update will only be applied if
1:9e7fae0:      * the PolicyEntry reference already exists in the PolicyMap.
1:9e7fae0:      *
1:a253ad3:      * includedProperties is a list of properties that will be applied retrospectively. If
1:a253ad3:      * the list is null, then all properties on the policy will be reapplied to the destination.
1:a253ad3:      * This allows the ability to limit which properties are applied to existing destinations.
1:a253ad3:      *
1:9e7fae0:      * @param existing
1:9e7fae0:      * @param createIfAbsent
1:a253ad3:      * @param includedProperties - optional list of properties to apply retrospectively
1:9e7fae0:      */
1:a253ad3:     public void modifyPolicyEntry(PolicyEntry existing, boolean createOrReplace,
1:a253ad3:             Set<String> includedProperties) {
1:43c3cae:         PolicyMap existingMap = this.getBrokerService().getDestinationPolicy();
1:43c3cae: 
1:9e7fae0:         //First just look up by the destination type to see if anything matches
1:9e7fae0:         PolicyEntry existingEntry = PolicyEntryUtil.findEntryByDestination(this, existing);
1:9e7fae0: 
1:9e7fae0:         //handle createOrReplace
1:9e7fae0:         if (createOrReplace) {
1:9e7fae0:             //if not found at all, go ahead and insert the policy entry
1:9e7fae0:             if (existingEntry == null) {
1:9e7fae0:                 existingMap.put(existing.getDestination(), existing);
1:9e7fae0:                 existingEntry = existing;
1:9e7fae0:             //If found but the objects are different, remove the old policy entry
1:9e7fae0:             //and replace it with the new one
1:9e7fae0:             } else if (!existing.equals(existingEntry)) {
1:9e7fae0:                 synchronized(existingMap) {
1:9e7fae0:                     existingMap.remove(existingEntry.getDestination(), existingEntry);
1:9e7fae0:                     existingMap.put(existing.getDestination(), existing);
1:9e7fae0:                 }
1:9e7fae0:                 existingEntry = existing;
1:9e7fae0:             }
1:9e7fae0:         }
1:9e7fae0: 
1:9e7fae0:         //Make sure that at this point the passed in object and the entry in
1:9e7fae0:         //the map are the same
1:9e7fae0:         if (existingEntry != null && existingEntry.equals(existing)) {
1:a253ad3:             PolicyEntryUtil.applyRetrospectively(this, existingEntry, includedProperties);
1:9e7fae0:             this.info("updated policy for: " + existingEntry.getDestination());
1:43c3cae:         } else {
1:9e7fae0:             throw new IllegalArgumentException("The policy can not be updated because it either does not exist or the PolicyEntry"
1:9e7fae0:                     + " reference does not match an existing PolicyEntry in the PolicyMap.  To replace an"
1:9e7fae0:                     + " entry (versus modifying) or add, set createOrReplace to true. "
1:9e7fae0:                     + existing + ", destination:" + existing.getDestination());
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     //authentication plugin
1:43c3cae:     public void updateSimpleAuthenticationPlugin(final SimpleAuthenticationPlugin updatedPlugin) {
1:43c3cae:         try {
1:43c3cae:             final SimpleAuthenticationBroker authenticationBroker =
1:43c3cae:                 (SimpleAuthenticationBroker) getBrokerService().getBroker().getAdaptor(SimpleAuthenticationBroker.class);
1:43c3cae:             addConnectionWork.add(new Runnable() {
1:43c3cae:                 @Override
1:43c3cae:                 public void run() {
1:43c3cae:                     authenticationBroker.setUserGroups(updatedPlugin.getUserGroups());
1:43c3cae:                     authenticationBroker.setUserPasswords(updatedPlugin.getUserPasswords());
1:43c3cae:                     authenticationBroker.setAnonymousAccessAllowed(updatedPlugin.isAnonymousAccessAllowed());
1:43c3cae:                     authenticationBroker.setAnonymousUser(updatedPlugin.getAnonymousUser());
1:43c3cae:                     authenticationBroker.setAnonymousGroup(updatedPlugin.getAnonymousGroup());
1:43c3cae:                 }
1:43c3cae:             });
1:43c3cae:         } catch (Exception e) {
1:43c3cae:             info("failed to apply SimpleAuthenticationPlugin modifications to SimpleAuthenticationBroker", e);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     //authorization map
1:43c3cae:     public void updateAuthorizationMap(final AuthorizationMap authorizationMap) {
1:43c3cae:         try {
1:43c3cae:             // replace authorization map - need exclusive write lock to total broker
1:43c3cae:             AuthorizationBroker authorizationBroker =
1:43c3cae:                     (AuthorizationBroker) getBrokerService().getBroker().getAdaptor(AuthorizationBroker.class);
1:43c3cae: 
1:43c3cae:             authorizationBroker.setAuthorizationMap(authorizationMap);
1:43c3cae:         } catch (Exception e) {
1:43c3cae:             info("failed to apply modified AuthorizationMap to AuthorizationBroker", e);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bab0887
/////////////////////////////////////////////////////////////////////////
1:                 getBrokerService().startNetworkConnector(nc, null);
commit:fc4c697
/////////////////////////////////////////////////////////////////////////
commit:a253ad3
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:         PolicyEntryUtil.applyRetrospectively(this, addition, null);
/////////////////////////////////////////////////////////////////////////
1:     public void modifyPolicyEntry(PolicyEntry existing, boolean createOrReplace) {
1:         modifyPolicyEntry(existing, createOrReplace, null);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * includedProperties is a list of properties that will be applied retrospectively. If
1:      * the list is null, then all properties on the policy will be reapplied to the destination.
1:      * This allows the ability to limit which properties are applied to existing destinations.
1:      *
1:      * @param includedProperties - optional list of properties to apply retrospectively
1:     public void modifyPolicyEntry(PolicyEntry existing, boolean createOrReplace,
1:             Set<String> includedProperties) {
/////////////////////////////////////////////////////////////////////////
1:             PolicyEntryUtil.applyRetrospectively(this, existingEntry, includedProperties);
/////////////////////////////////////////////////////////////////////////
commit:9e7fae0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.plugin.util.PolicyEntryUtil;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * This method will modify an existing policy entry that matches the destination
1:      * set on the PolicyEntry passed in.
1:      *
1:      * The PolicyEntry reference must already be in the PolicyMap or it won't be updated.
1:      * To modify the entry the best way is to look up the existing PolicyEntry from the
1:      * PolicyMap, make changes to it, and pass it to this method to apply.
1:      *
1:      * To create or replace an existing entry (if the destination matches), see
1:      * {@link #modifyPolicyEntry(PolicyEntry, boolean)
1:      *
1:      *
1:      * @param existing
1:      */
1:         modifyPolicyEntry(existing, false);
1:     }
1: 
1:     /**
1:      * This method will modify an existing policy entry that matches the destination
1:      * set on the PolicyEntry passed in.  If createOrReplace is true, a new policy
1:      * will be created if it doesn't exist and a policy will be replaced in the PolicyMap,
1:      * versus modified, if it is a different reference but the destinations for the Policy match.
1:      *
1:      * If createOrReplace is false, the policy update will only be applied if
1:      * the PolicyEntry reference already exists in the PolicyMap.
1:      *
1:      * @param existing
1:      * @param createIfAbsent
1:      */
0:     public void modifyPolicyEntry(PolicyEntry existing, boolean createOrReplace) {
1:         //First just look up by the destination type to see if anything matches
1:         PolicyEntry existingEntry = PolicyEntryUtil.findEntryByDestination(this, existing);
1: 
1:         //handle createOrReplace
1:         if (createOrReplace) {
1:             //if not found at all, go ahead and insert the policy entry
1:             if (existingEntry == null) {
1:                 existingMap.put(existing.getDestination(), existing);
1:                 existingEntry = existing;
1:             //If found but the objects are different, remove the old policy entry
1:             //and replace it with the new one
1:             } else if (!existing.equals(existingEntry)) {
1:                 synchronized(existingMap) {
1:                     existingMap.remove(existingEntry.getDestination(), existingEntry);
1:                     existingMap.put(existing.getDestination(), existing);
1:                 }
1:                 existingEntry = existing;
1:             }
1:         }
1: 
1:         //Make sure that at this point the passed in object and the entry in
1:         //the map are the same
1:         if (existingEntry != null && existingEntry.equals(existing)) {
0:             applyRetrospectively(existingEntry);
1:             this.info("updated policy for: " + existingEntry.getDestination());
1:             throw new IllegalArgumentException("The policy can not be updated because it either does not exist or the PolicyEntry"
1:                     + " reference does not match an existing PolicyEntry in the PolicyMap.  To replace an"
1:                     + " entry (versus modifying) or add, set createOrReplace to true. "
1:                     + existing + ", destination:" + existing.getDestination());
0:         PolicyEntryUtil.applyRetrospectively(this, updatedEntry);
commit:5db9af8
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Set the virtual destinations and apply immediately, instead of waiting for a new
1:      * destination or connection to trigger the work.
1:      *
1:      * @param virtualDestinations
1:      * @param applyImmediately
1:      * @throws Exception
1:      */
1:     public void setVirtualDestinations(final VirtualDestination[] virtualDestinations, boolean applyImmediately) throws Exception {
1:         setVirtualDestinations(virtualDestinations);
1:         if (applyImmediately) {
1:             this.applyDestinationWork();
1:         }
1:     }
1: 
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin.java;
1: 
1: import java.util.Arrays;
0: import java.util.Set;
1: 
1: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.broker.region.DestinationFilter;
0: import org.apache.activemq.broker.region.Queue;
0: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.plugin.AbstractRuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.UpdateVirtualDestinationsTask;
1: import org.apache.activemq.security.AuthorizationBroker;
1: import org.apache.activemq.security.AuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationBroker;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JavaRuntimeConfigurationBroker extends AbstractRuntimeConfigurationBroker {
1: 
1:     /**
1:      * @param next
1:      */
1:     public JavaRuntimeConfigurationBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     public static final Logger LOG = LoggerFactory.getLogger(JavaRuntimeConfigurationBroker.class);
1: 
1: 
1:     //Virtual Destinations
1:     public void setVirtualDestinations(final VirtualDestination[] virtualDestinations) {
1:         this.addDestinationWork.add(new UpdateVirtualDestinationsTask(this) {
1:             @Override
1:             protected VirtualDestination[] getVirtualDestinations() {
1:                 return virtualDestinations;
1:             }
1:         });
1:     }
1: 
1:     //New Destinations
1:     public void setDestinations(final ActiveMQDestination[] destinations) {
1:         for (ActiveMQDestination destination : destinations) {
1:             try {
1:                 if (!containsDestination(destination)) {
1:                     this.addDestination(this.getBrokerService().getAdminConnectionContext(), destination, true);
1:                     this.info("Added destination " + destination);
1:                 }
1:             } catch (Exception e) {
1:                 this.info("Failed to add a new destination for: " + destination, e);
1:             }
1:         }
1:     }
1: 
1:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:         return Arrays.asList(this.getBrokerService().getRegionBroker().getDestinations()).contains(destination);
1:     }
1: 
1:     public void addNewDestination(ActiveMQDestination destination) {
1:         try {
1:             this.addDestination(this.getBrokerService().getAdminConnectionContext(), destination, true);
1:             this.info("Added destination " + destination);
1:         } catch (Exception e) {
1:             this.info("Failed to add a new destination for: " + destination, e);
1:         }
1:     }
1: 
1:     //Network Connectors
1:     public void addNetworkConnector(final DiscoveryNetworkConnector nc) {
1:         try {
1:             if (!getBrokerService().getNetworkConnectors().contains(nc)) {
1:                 getBrokerService().addNetworkConnector(nc);
0:                 nc.start();
1:                 info("started new network connector: " + nc);
1:             } else {
1:                 info("skipping network connector add, already exists: " + nc);
1:             }
1:         } catch (Exception e) {
1:             info("Failed to add new networkConnector " + nc, e);
1:         }
1:     }
1: 
1:     public void updateNetworkConnector(final DiscoveryNetworkConnector nc) {
1:         removeNetworkConnector(nc);
1:         addNetworkConnector(nc);
1:     }
1: 
1:     public void removeNetworkConnector(final DiscoveryNetworkConnector existingCandidate) {
1:         if (getBrokerService().removeNetworkConnector(existingCandidate)) {
1:             try {
1:                 existingCandidate.stop();
1:                 info("stopped and removed networkConnector: " + existingCandidate);
1:             } catch (Exception e) {
1:                 info("Failed to stop removed network connector: " + existingCandidate);
1:             }
1:         }
1:     }
1: 
1:     //Policy entries
1:     public void addNewPolicyEntry(PolicyEntry addition) {
1:         PolicyMap existingMap = getBrokerService().getDestinationPolicy();
1:         existingMap.put(addition.getDestination(), addition);
0:         applyRetrospectively(addition);
1:         info("added policy for: " + addition.getDestination());
1:     }
1: 
1:     public void modifyPolicyEntry(PolicyEntry existing) {
1:         PolicyMap existingMap = this.getBrokerService().getDestinationPolicy();
1: 
0:         Set<?> existingEntry = existingMap.get(existing.getDestination());
0:         if (existingEntry.size() == 1) {
0:             applyRetrospectively(existing);
0:             this.info("updated policy for: " + existing.getDestination());
1:         } else {
0:             this.info("cannot modify policy matching multiple destinations: " + existingEntry + ", destination:" + existing.getDestination());
1:         }
1:     }
1: 
0:     protected void applyRetrospectively(PolicyEntry updatedEntry) {
0:         RegionBroker regionBroker = (RegionBroker) this.getBrokerService().getRegionBroker();
0:         for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
0:             Destination target = destination;
0:             if (destination instanceof DestinationFilter) {
0:                 target = ((DestinationFilter)destination).getNext();
1:             }
0:             if (target.getActiveMQDestination().isQueue()) {
0:                 updatedEntry.update((Queue) target);
0:             } else if (target.getActiveMQDestination().isTopic()) {
0:                 updatedEntry.update((Topic) target);
1:             }
0:             this.debug("applied update to:" + target);
1:         }
1:     }
1: 
1:     //authentication plugin
1:     public void updateSimpleAuthenticationPlugin(final SimpleAuthenticationPlugin updatedPlugin) {
1:         try {
1:             final SimpleAuthenticationBroker authenticationBroker =
1:                 (SimpleAuthenticationBroker) getBrokerService().getBroker().getAdaptor(SimpleAuthenticationBroker.class);
1:             addConnectionWork.add(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     authenticationBroker.setUserGroups(updatedPlugin.getUserGroups());
1:                     authenticationBroker.setUserPasswords(updatedPlugin.getUserPasswords());
1:                     authenticationBroker.setAnonymousAccessAllowed(updatedPlugin.isAnonymousAccessAllowed());
1:                     authenticationBroker.setAnonymousUser(updatedPlugin.getAnonymousUser());
1:                     authenticationBroker.setAnonymousGroup(updatedPlugin.getAnonymousGroup());
1:                 }
1:             });
1:         } catch (Exception e) {
1:             info("failed to apply SimpleAuthenticationPlugin modifications to SimpleAuthenticationBroker", e);
1:         }
1:     }
1: 
1:     //authorization map
1:     public void updateAuthorizationMap(final AuthorizationMap authorizationMap) {
1:         try {
1:             // replace authorization map - need exclusive write lock to total broker
1:             AuthorizationBroker authorizationBroker =
1:                     (AuthorizationBroker) getBrokerService().getBroker().getAdaptor(AuthorizationBroker.class);
1: 
1:             authorizationBroker.setAuthorizationMap(authorizationMap);
1:         } catch (Exception e) {
1:             info("failed to apply modified AuthorizationMap to AuthorizationBroker", e);
1:         }
1:     }
1: }
============================================================================