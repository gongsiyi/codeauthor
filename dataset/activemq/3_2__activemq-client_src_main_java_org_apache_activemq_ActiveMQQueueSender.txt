1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
7:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueSender;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A client uses a <CODE>QueueSender</CODE> object to send messages to a
1:f812e34:  * queue. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Normally, the <CODE>Queue</CODE> is specified when a <CODE>QueueSender
1:f812e34:  * </CODE>
1:f812e34:  * is created. In this case, an attempt to use the <CODE>send</CODE> methods
1:f812e34:  * for an unidentified <CODE>QueueSender</CODE> will throw a <CODE>
1:d29ca2a:  * java.lang.UnsupportedOperationException</CODE>.
7:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * If the <CODE>QueueSender</CODE> is created with an unidentified <CODE>
1:f812e34:  * Queue</CODE>,
1:f812e34:  * an attempt to use the <CODE>send</CODE> methods that assume that the
1:f812e34:  * <CODE>Queue</CODE> has been identified will throw a <CODE>
1:d29ca2a:  * java.lang.UnsupportedOperationException</CODE>.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:f812e34:  * During the execution of its <CODE>send</CODE> method, a message must not be
1:f812e34:  * changed by other threads within the client. If the message is modified, the
1:f812e34:  * result of the <CODE>send</CODE> is undefined. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * After sending a message, a client may retain and modify it without affecting
1:d29ca2a:  * the message that has been sent. The same message object may be sent multiple
1:f812e34:  * times. <p/>
1:d29ca2a:  * <P>
1:f812e34:  * The following message headers are set as part of sending a message:
1:f812e34:  * <code>JMSDestination</code>, <code>JMSDeliveryMode</code>,<code>JMSExpiration</code>,<code>JMSPriority</code>,
1:d29ca2a:  * <code>JMSMessageID</code> and <code>JMSTimeStamp</code>. When the
1:d29ca2a:  * message is sent, the values of these headers are ignored. After the
1:f812e34:  * completion of the <CODE>send</CODE>, the headers hold the values specified
1:f812e34:  * by the method sending the message. It is possible for the <code>send</code>
1:d29ca2a:  * method not to set <code>JMSMessageID</code> and <code>JMSTimeStamp</code>
1:f812e34:  * if the setting of these headers is explicitly disabled by the
1:f812e34:  * <code>MessageProducer.setDisableMessageID</code> or
1:f812e34:  * <code>MessageProducer.setDisableMessageTimestamp</code> method. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Creating a <CODE>MessageProducer</CODE> provides the same features as
1:d29ca2a:  * creating a <CODE>QueueSender</CODE>. A <CODE>MessageProducer</CODE>
1:d29ca2a:  * object is recommended when creating new code. The <CODE>QueueSender</CODE>
1:d29ca2a:  * is provided to support existing code.
1:f812e34:  * 
1:d29ca2a:  * @see javax.jms.MessageProducer
1:d29ca2a:  * @see javax.jms.QueueSession#createSender(Queue)
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: public class ActiveMQQueueSender extends ActiveMQMessageProducer implements QueueSender {
1:d29ca2a: 
1:114a923:     protected ActiveMQQueueSender(ActiveMQSession session, ActiveMQDestination destination,int sendTimeout)
1:f812e34:         throws JMSException {
1:114a923:         super(session, session.getNextProducerId(), destination,sendTimeout);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the queue associated with this <CODE>QueueSender</CODE>.
1:f812e34:      * 
1:d29ca2a:      * @return this sender's queue
1:d29ca2a:      * @throws JMSException if the JMS provider fails to get the queue for this
1:f812e34:      *                 <CODE>QueueSender</CODE> due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public Queue getQueue() throws JMSException {
1:f812e34:         return (Queue)super.getDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Sends a message to a queue for an unidentified message producer. Uses the
1:f812e34:      * <CODE>QueueSender</CODE>'s default delivery mode, priority, and time
1:f812e34:      * to live. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Typically, a message producer is assigned a queue at creation time;
1:d29ca2a:      * however, the JMS API also supports unidentified message producers, which
1:d29ca2a:      * require that the queue be supplied every time a message is sent.
1:f812e34:      * 
1:f812e34:      * @param queue the queue to send this message to
1:d29ca2a:      * @param message the message to send
1:f812e34:      * @throws JMSException if the JMS provider fails to send the message due to
1:f812e34:      *                 some internal error.
1:d29ca2a:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:d29ca2a:      * @see javax.jms.MessageProducer#getTimeToLive()
1:d29ca2a:      * @see javax.jms.MessageProducer#getPriority()
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void send(Queue queue, Message message) throws JMSException {
1:d29ca2a:         super.send(queue, message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends a message to a queue for an unidentified message producer,
1:f812e34:      * specifying delivery mode, priority and time to live. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Typically, a message producer is assigned a queue at creation time;
1:d29ca2a:      * however, the JMS API also supports unidentified message producers, which
1:d29ca2a:      * require that the queue be supplied every time a message is sent.
1:f812e34:      * 
1:f812e34:      * @param queue the queue to send this message to
1:f812e34:      * @param message the message to send
1:d29ca2a:      * @param deliveryMode the delivery mode to use
1:f812e34:      * @param priority the priority for this message
1:f812e34:      * @param timeToLive the message's lifetime (in milliseconds)
1:f812e34:      * @throws JMSException if the JMS provider fails to send the message due to
1:f812e34:      *                 some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive)
1:f812e34:         throws JMSException {
1:f812e34:         super.send(queue, message, deliveryMode, priority, timeToLive);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * queue. <p/>
1:  * </CODE>
1:  * is created. In this case, an attempt to use the <CODE>send</CODE> methods
1:  * for an unidentified <CODE>QueueSender</CODE> will throw a <CODE>
1:  * Queue</CODE>,
1:  * an attempt to use the <CODE>send</CODE> methods that assume that the
1:  * <CODE>Queue</CODE> has been identified will throw a <CODE>
1:  * During the execution of its <CODE>send</CODE> method, a message must not be
1:  * changed by other threads within the client. If the message is modified, the
1:  * result of the <CODE>send</CODE> is undefined. <p/>
1:  * times. <p/>
1:  * The following message headers are set as part of sending a message:
1:  * <code>JMSDestination</code>, <code>JMSDeliveryMode</code>,<code>JMSExpiration</code>,<code>JMSPriority</code>,
1:  * completion of the <CODE>send</CODE>, the headers hold the values specified
1:  * by the method sending the message. It is possible for the <code>send</code>
1:  * if the setting of these headers is explicitly disabled by the
1:  * <code>MessageProducer.setDisableMessageID</code> or
1:  * <code>MessageProducer.setDisableMessageTimestamp</code> method. <p/>
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         throws JMSException {
0:         super(session, session.getNextProducerId(), destination);
1:      * 
1:      *                 <CODE>QueueSender</CODE> due to some internal error.
1:         return (Queue)super.getDestination();
1:      * Sends a message to a queue for an unidentified message producer. Uses the
1:      * <CODE>QueueSender</CODE>'s default delivery mode, priority, and time
1:      * to live. <p/>
1:      * 
1:      * @param queue the queue to send this message to
1:      * @throws JMSException if the JMS provider fails to send the message due to
1:      *                 some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * specifying delivery mode, priority and time to live. <p/>
1:      * 
1:      * @param queue the queue to send this message to
1:      * @param message the message to send
1:      * @param priority the priority for this message
1:      * @param timeToLive the message's lifetime (in milliseconds)
1:      * @throws JMSException if the JMS provider fails to send the message due to
1:      *                 some internal error.
1:         throws JMSException {
1:         super.send(queue, message, deliveryMode, priority, timeToLive);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import javax.jms.QueueSender;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * A client uses a <CODE>QueueSender</CODE> object to send messages to a
0:  * queue.
1:  * <p/>
1:  * <P>
1:  * Normally, the <CODE>Queue</CODE> is specified when a <CODE>QueueSender
0:  * </CODE> is created. In this case, an attempt to use the <CODE>send</CODE>
0:  * methods for an unidentified <CODE>QueueSender</CODE> will throw a <CODE>
1:  * java.lang.UnsupportedOperationException</CODE>.
1:  * <p/>
1:  * <P>
1:  * If the <CODE>QueueSender</CODE> is created with an unidentified <CODE>
0:  * Queue</CODE>, an attempt to use the <CODE>send</CODE> methods that
0:  * assume that the <CODE>Queue</CODE> has been identified will throw a <CODE>
1:  * java.lang.UnsupportedOperationException</CODE>.
1:  * <p/>
1:  * <P>
0:  * During the execution of its <CODE>send</CODE> method, a message must not
0:  * be changed by other threads within the client. If the message is modified,
0:  * the result of the <CODE>send</CODE> is undefined.
1:  * <p/>
1:  * <P>
1:  * After sending a message, a client may retain and modify it without affecting
1:  * the message that has been sent. The same message object may be sent multiple
0:  * times.
1:  * <p/>
1:  * <P>
0:  * The following message headers are set as part of sending a message: <code>JMSDestination</code>,
0:  * <code>JMSDeliveryMode</code>,<code>JMSExpiration</code>,<code>JMSPriority</code>,
1:  * <code>JMSMessageID</code> and <code>JMSTimeStamp</code>. When the
1:  * message is sent, the values of these headers are ignored. After the
0:  * completion of the <CODE>send</CODE>, the headers hold the values
0:  * specified by the method sending the message. It is possible for the <code>send</code>
1:  * method not to set <code>JMSMessageID</code> and <code>JMSTimeStamp</code>
0:  * if the setting of these headers is explicitly disabled by the <code>MessageProducer.setDisableMessageID</code>
0:  * or <code>MessageProducer.setDisableMessageTimestamp</code> method.
1:  * <p/>
1:  * <P>
1:  * Creating a <CODE>MessageProducer</CODE> provides the same features as
1:  * creating a <CODE>QueueSender</CODE>. A <CODE>MessageProducer</CODE>
1:  * object is recommended when creating new code. The <CODE>QueueSender</CODE>
1:  * is provided to support existing code.
1:  *
1:  * @see javax.jms.MessageProducer
1:  * @see javax.jms.QueueSession#createSender(Queue)
1:  */
1: 
1: public class ActiveMQQueueSender extends ActiveMQMessageProducer implements QueueSender {
1: 
0:     protected ActiveMQQueueSender(ActiveMQSession session, ActiveMQDestination destination)
0:             throws JMSException {
0:         super(session,
0:               session.getNextProducerId(),
0:               destination);
1:     }
1: 
1:     /**
1:      * Gets the queue associated with this <CODE>QueueSender</CODE>.
1:      *
1:      * @return this sender's queue
1:      * @throws JMSException if the JMS provider fails to get the queue for this
0:      *                      <CODE>QueueSender</CODE> due to some internal error.
1:      */
1: 
1:     public Queue getQueue() throws JMSException {
0:         return (Queue) super.getDestination();
1:     }
1: 
1:     /**
0:      * Sends a message to a queue for an unidentified message producer. Uses
0:      * the <CODE>QueueSender</CODE>'s default delivery mode, priority, and
0:      * time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a queue at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the queue be supplied every time a message is sent.
1:      *
0:      * @param queue   the queue to send this message to
1:      * @param message the message to send
0:      * @throws JMSException                if the JMS provider fails to send the message due to some
0:      *                                     internal error.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void send(Queue queue, Message message) throws JMSException {
1:         super.send(queue, message);
1:     }
1: 
1:     /**
1:      * Sends a message to a queue for an unidentified message producer,
0:      * specifying delivery mode, priority and time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a queue at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the queue be supplied every time a message is sent.
1:      *
0:      * @param queue        the queue to send this message to
0:      * @param message      the message to send
1:      * @param deliveryMode the delivery mode to use
0:      * @param priority     the priority for this message
0:      * @param timeToLive   the message's lifetime (in milliseconds)
0:      * @throws JMSException                if the JMS provider fails to send the message due to some
0:      *                                     internal error.
1:      */
1: 
1:     public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive)
0:             throws JMSException {
0:         super.send(queue,
0:                    message,
0:                    deliveryMode,
0:                    priority,
0:                    timeToLive);
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:114a923
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQQueueSender(ActiveMQSession session, ActiveMQDestination destination,int sendTimeout)
1:         super(session, session.getNextProducerId(), destination,sendTimeout);
============================================================================