1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
14:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.io.StringWriter;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CSharpClassesGenerator extends MultiSourceGenerator {
1:540dd5c: 
1:540dd5c:     protected String targetDir = "./src/main/csharp";
1:bd0ad68: 
1:bd0ad68:     public Object run() {
1:bd0ad68:         filePostFix = ".cs";
1:bd0ad68:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/ActiveMQ/Commands");
1:540dd5c:         }
1:bd0ad68:         return super.run();
12:bd0ad68:     }
1:540dd5c: 
1:bd0ad68:     public String makeHashCodeBody() throws Exception {
1:bd0ad68:         if (simpleName.endsWith("Id")) {
2:bd0ad68:             StringWriter buffer = new StringWriter();
2:bd0ad68:             PrintWriter out = new PrintWriter(buffer);
1:bd0ad68:             out.println("            int answer = 0;");
2:bd0ad68:             Iterator iter = getProperties().iterator();
2:bd0ad68:             while (iter.hasNext()) {
1:540dd5c:                 JProperty property = (JProperty)iter.next();
1:bd0ad68:                 out.println("            answer = (answer * 37) + HashCode(" + property.getSimpleName() + ");");
1:bd0ad68:             }
1:bd0ad68:             out.println("            return answer;");
2:bd0ad68:             return buffer.toString();
1:bd0ad68:         }
1:bd0ad68:         return null;
1:bd0ad68:     }
1:540dd5c: 
1:bd0ad68:     public String makeEqualsBody() throws Exception {
1:bd0ad68:         if (simpleName.endsWith("Id")) {
1:bd0ad68:             StringWriter buffer = new StringWriter();
1:bd0ad68:             PrintWriter out = new PrintWriter(buffer);
1:540dd5c: 
1:bd0ad68:             Iterator iter = getProperties().iterator();
1:bd0ad68:             while (iter.hasNext()) {
1:540dd5c:                 JProperty property = (JProperty)iter.next();
2:bd0ad68:                 String name = property.getSimpleName();
1:bd0ad68:                 out.println("            if (! Equals(this." + name + ", that." + name + ")) return false;");
1:bd0ad68:             }
1:bd0ad68:             out.println("            return true;");
1:bd0ad68:             return buffer.toString();
1:bd0ad68:         }
1:bd0ad68:         return null;
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     public String makeToStringBody() throws Exception {
1:540dd5c:         StringWriter buffer = new StringWriter();
1:540dd5c:         PrintWriter out = new PrintWriter(buffer);
1:540dd5c:         out.println("            return GetType().Name + \"[\"");
1:540dd5c:         Iterator iter = getProperties().iterator();
1:540dd5c:         while (iter.hasNext()) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String name = property.getSimpleName();
1:540dd5c:             out.println("                + \" " + name + "=\" + " + name);
1:540dd5c:         }
1:540dd5c:         out.println("                + \" ]\";");
1:540dd5c:         return buffer.toString();
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     private void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c:         generateLicence(out);
1:bd0ad68: 
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("//  NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println("//         if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println("//         activemq-core module");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using System;");
1:540dd5c:         out.println("using System.Collections;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using ActiveMQ.OpenWire;");
1:540dd5c:         out.println("using ActiveMQ.Commands;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace ActiveMQ.Commands");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    /// <summary>");
1:540dd5c:         out.println("    ///  The ActiveMQ " + jclass.getSimpleName() + " Command");
1:540dd5c:         out.println("    /// </summary>");
1:540dd5c:         out.print("    public class " + jclass.getSimpleName() + " : " + baseClass);
1:bd0ad68: 
1:540dd5c:         for (int i = 0; i < jclass.getInterfaces().length; i++) {
1:540dd5c:             JClass intf = jclass.getInterfaces()[i];
1:540dd5c:             out.print(", " + intf.getSimpleName());
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("        public const byte ID_" + jclass.getSimpleName() + " = " + getOpenWireOpCode(jclass) + ";");
1:540dd5c:         out.println("                ");
1:bd0ad68: 
1:540dd5c:         List properties = getProperties();
1:540dd5c:         String type;
1:540dd5c:         Object name;
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             type = toCSharpType(property.getType());
1:540dd5c:             name = decapitalize(property.getSimpleName());
1:540dd5c:             out.println("        " + type + " " + name + ";");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         String text = makeHashCodeBody();
1:540dd5c:         if (text != null) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        public override int GetHashCode() {");
1:540dd5c:             out.println("" + text + "");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         text = makeEqualsBody();
1:540dd5c:         if (text != null) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        public override bool Equals(object that) {");
1:540dd5c:             out.println("            if (that is " + className + ") {");
1:540dd5c:             out.println("                return Equals((" + className + ") that);");
1:540dd5c:             out.println("            }");
1:540dd5c:             out.println("            return false;");
1:540dd5c:             out.println("        }");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        public virtual bool Equals(" + className + " that) {");
1:540dd5c:             out.println("" + text + "");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         text = makeToStringBody();
1:540dd5c:         if (text != null) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        public override string ToString() {");
1:540dd5c:             out.println("" + text + "");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        public override byte GetDataStructureType() {");
1:540dd5c:         out.println("            return ID_" + jclass.getSimpleName() + ";");
1:540dd5c:         out.println("        }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        // Properties");
1:540dd5c: 
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             type = toCSharpType(property.getType());
1:540dd5c:             name = decapitalize(property.getSimpleName());
1:540dd5c:             String propertyName = property.getSimpleName();
1:540dd5c: 
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        public " + type + " " + propertyName + "");
1:540dd5c:             out.println("        {");
1:540dd5c:             out.println("            get { return " + name + "; }");
1:540dd5c:             out.println("            set { this." + name + " = value; }            ");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTargetDir(String targetDir) {
1:540dd5c:         this.targetDir = targetDir;
1:540dd5c:     }
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String targetDir = "./src/main/csharp";
1:             destDir = new File(targetDir + "/ActiveMQ/Commands");
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
1:                 JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
1:         StringWriter buffer = new StringWriter();
1:         PrintWriter out = new PrintWriter(buffer);
1:         out.println("            return GetType().Name + \"[\"");
1:         Iterator iter = getProperties().iterator();
1:         while (iter.hasNext()) {
1:             JProperty property = (JProperty)iter.next();
1:             String name = property.getSimpleName();
1:             out.println("                + \" " + name + "=\" + " + name);
1:         }
1:         out.println("                + \" ]\";");
1:         return buffer.toString();
1:     private void generateLicence(PrintWriter out) {
1:         out.println("/*");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("//");
1:         out.println("//  NOTE!: This file is autogenerated - do not modify!");
1:         out.println("//         if you need to make a change, please see the Groovy scripts in the");
1:         out.println("//         activemq-core module");
1:         out.println("//");
1:         out.println("");
1:         out.println("using System;");
1:         out.println("using System.Collections;");
1:         out.println("");
1:         out.println("using ActiveMQ.OpenWire;");
1:         out.println("using ActiveMQ.Commands;");
1:         out.println("");
1:         out.println("namespace ActiveMQ.Commands");
1:         out.println("{");
1:         out.println("    /// <summary>");
1:         out.println("    ///  The ActiveMQ " + jclass.getSimpleName() + " Command");
1:         out.println("    /// </summary>");
1:         out.print("    public class " + jclass.getSimpleName() + " : " + baseClass);
1:         for (int i = 0; i < jclass.getInterfaces().length; i++) {
1:             JClass intf = jclass.getInterfaces()[i];
1:             out.print(", " + intf.getSimpleName());
1:         }
1:         out.println("");
1:         out.println("    {");
1:         out.println("        public const byte ID_" + jclass.getSimpleName() + " = " + getOpenWireOpCode(jclass) + ";");
1:         out.println("                ");
1:         List properties = getProperties();
1:         String type;
1:         Object name;
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             type = toCSharpType(property.getType());
1:             name = decapitalize(property.getSimpleName());
1:             out.println("        " + type + " " + name + ";");
1:         }
1:         String text = makeHashCodeBody();
1:         if (text != null) {
1:             out.println("");
1:             out.println("        public override int GetHashCode() {");
1:             out.println("" + text + "");
1:             out.println("        }");
1:         }
1:         text = makeEqualsBody();
1:         if (text != null) {
1:             out.println("");
1:             out.println("        public override bool Equals(object that) {");
1:             out.println("            if (that is " + className + ") {");
1:             out.println("                return Equals((" + className + ") that);");
1:             out.println("            }");
1:             out.println("            return false;");
1:             out.println("        }");
1:             out.println("");
1:             out.println("        public virtual bool Equals(" + className + " that) {");
1:             out.println("" + text + "");
1:             out.println("        }");
1:         }
1: 
1:         text = makeToStringBody();
1:         if (text != null) {
1:             out.println("");
1:             out.println("        public override string ToString() {");
1:             out.println("" + text + "");
1:             out.println("        }");
1:         }
1: 
1:         out.println("");
1:         out.println("        public override byte GetDataStructureType() {");
1:         out.println("            return ID_" + jclass.getSimpleName() + ";");
1:         out.println("        }");
1:         out.println("");
1:         out.println("");
1:         out.println("        // Properties");
1: 
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             type = toCSharpType(property.getType());
1:             name = decapitalize(property.getSimpleName());
1:             String propertyName = property.getSimpleName();
1: 
1:             out.println("");
1:             out.println("        public " + type + " " + propertyName + "");
1:             out.println("        {");
1:             out.println("            get { return " + name + "; }");
1:             out.println("            set { this." + name + " = value; }            ");
1:             out.println("        }");
1:         }
1: 
1:         out.println("");
1:         out.println("    }");
1:         out.println("}");
1:     }
1: 
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1: 
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
1: /**
1:  *
0:  * @version $Revision: 383749 $
1:  */
1: public class CSharpClassesGenerator extends MultiSourceGenerator {
1: 	
0: 	protected String targetDir="./src/main/csharp";
1: 
1:     public Object run() {
1:         filePostFix = ".cs";
1:         if (destDir == null) {
0:             destDir = new File(targetDir+"/ActiveMQ/Commands");
1:         }        
1:         return super.run();
1:     }
1:     
1:     public String makeHashCodeBody() throws Exception {
1:         if (simpleName.endsWith("Id")) {
1:             StringWriter buffer = new StringWriter();
1:             PrintWriter out = new PrintWriter(buffer);
1:             out.println("            int answer = 0;");
1:             Iterator iter = getProperties().iterator();
1:             while (iter.hasNext()) {
0:                 JProperty property = (JProperty) iter.next();
1:                 out.println("            answer = (answer * 37) + HashCode(" + property.getSimpleName() + ");");
1:             }
1:             out.println("            return answer;");
1:             return buffer.toString();
1:         }
1:         return null;
1:     }
1: 
1:     public String makeEqualsBody() throws Exception {
1:         if (simpleName.endsWith("Id")) {
1:             StringWriter buffer = new StringWriter();
1:             PrintWriter out = new PrintWriter(buffer);
1:             
1:             Iterator iter = getProperties().iterator();
1:             while (iter.hasNext()) {
0:                 JProperty property = (JProperty) iter.next();
1:                 String name = property.getSimpleName();
1:                 out.println("            if (! Equals(this." + name + ", that." + name + ")) return false;");
1:             }
1:             out.println("            return true;");
1:             return buffer.toString();
1:         }
1:         return null;
1:     }
1:     
1:     public String makeToStringBody() throws Exception {
1:             StringWriter buffer = new StringWriter();
1:             PrintWriter out = new PrintWriter(buffer);
0:             out.println("            return GetType().Name + \"[\"");
1:             Iterator iter = getProperties().iterator();
1:             while (iter.hasNext()) {
0:                 JProperty property = (JProperty) iter.next();
1:                 String name = property.getSimpleName();
0:                 out.println("                + \" " + name + "=\" + " + name);
1:             }
0:             out.println("                + \" ]\";");
1:             return buffer.toString();
1:     }
1: 
0: 	private void generateLicence(PrintWriter out) {
0: out.println("/*");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
0: 		generateLicence(out);
1: 
0: out.println("//");
0: out.println("//  NOTE!: This file is autogenerated - do not modify!");
0: out.println("//         if you need to make a change, please see the Groovy scripts in the");
0: out.println("//         activemq-core module");
0: out.println("//");
0: out.println("");
0: out.println("using System;");
0: out.println("using System.Collections;");
0: out.println("");
0: out.println("using ActiveMQ.OpenWire;");
0: out.println("using ActiveMQ.Commands;");
0: out.println("");
0: out.println("namespace ActiveMQ.Commands");
0: out.println("{");
0: out.println("    /// <summary>");
0: out.println("    ///  The ActiveMQ "+jclass.getSimpleName()+" Command");
0: out.println("    /// </summary>");
0:   out.print("    public class "+jclass.getSimpleName()+" : "+baseClass);
1: 
1: 
0:   	for (int i = 0; i < jclass.getInterfaces().length; i++) {
0: 		JClass intf = jclass.getInterfaces()[i];
0: 		out.print(", "+intf.getSimpleName());
1: 	}
1:     
0: out.println("");
0: out.println("    {");
0: out.println("        public const byte ID_"+jclass.getSimpleName()+" = "+getOpenWireOpCode(jclass)+";");
0: out.println("    			");
1: 
0: 		List properties = getProperties();
0: 		String type;
0: 		Object name;
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        type = toCSharpType(property.getType());
0: 	        name = decapitalize(property.getSimpleName());
0: out.println("        "+type+" "+name+";");
1:     }
1: 
0: 	String text = makeHashCodeBody();
0: 	if (text != null) {
0: out.println("");
0: out.println("		public override int GetHashCode() {");
0: out.println(""+text+"");
0: out.println("		}");
1: 	}
1: 
0: 	text = makeEqualsBody();
0: 	if (text != null) {
0: out.println("");
0: out.println("		public override bool Equals(object that) {");
0: out.println("	    	if (that is "+className+") {");
0: out.println("	    	    return Equals(("+className+") that);");
0: out.println("			}");
0: out.println("			return false;");
0: out.println("    	}");
0: out.println("");    
0: out.println("		public virtual bool Equals("+className+" that) {");
0: out.println(""+text+"");
0: out.println("		}");
1: 	}
1: 	    
0: 	text = makeToStringBody();
0: 	if (text != null) {
0: out.println("");	
0: out.println("		public override string ToString() {");
0: out.println(""+text+"");
0: out.println("		}");
1: 	}
1: 	    
0: out.println("");
0: out.println("        public override byte GetDataStructureType() {");
0: out.println("            return ID_"+jclass.getSimpleName()+";");
0: out.println("        }");
0: out.println("");
0: out.println("");
0: out.println("        // Properties");
1: 
0: 				for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 					JProperty property = (JProperty) iter.next();
0:                     type = toCSharpType(property.getType());
0:                     name = decapitalize(property.getSimpleName());
0:                     String propertyName = property.getSimpleName();
0:                     String getter = capitalize(property.getGetter().getSimpleName());
0:                     String setter = capitalize(property.getSetter().getSimpleName());
1: 
0: out.println("");
0: out.println("        public "+type+" "+propertyName+"");
0: out.println("        {");
0: out.println("            get { return "+name+"; }");
0: out.println("            set { this."+name+" = value; }            ");
0: out.println("        }");
1:                 }
1: 
0: out.println("");
0: out.println("    }");
0: out.println("}");
1: 	}
1: 
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String targetDir) {
0: 		this.targetDir = targetDir;
1: 	}
1: }
============================================================================