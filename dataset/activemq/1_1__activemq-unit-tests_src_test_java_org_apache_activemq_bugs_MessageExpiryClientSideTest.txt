1:a3a5a1a: /*
1:a3a5a1a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a3a5a1a:  * contributor license agreements.  See the NOTICE file distributed with
1:a3a5a1a:  * this work for additional information regarding copyright ownership.
1:a3a5a1a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a3a5a1a:  * (the "License"); you may not use this file except in compliance with
1:a3a5a1a:  * the License.  You may obtain a copy of the License at
1:a3a5a1a:  *
1:a3a5a1a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a3a5a1a:  *
1:a3a5a1a:  * Unless required by applicable law or agreed to in writing, software
1:a3a5a1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3a5a1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a5a1a:  * See the License for the specific language governing permissions and
1:a3a5a1a:  * limitations under the License.
1:a3a5a1a:  */
1:a3a5a1a: package org.apache.activemq.bugs;
1:a3a5a1a: 
1:a3a5a1a: import static org.junit.Assert.assertNull;
1:a3a5a1a: 
1:a3a5a1a: import java.util.Enumeration;
1:a3a5a1a: import java.util.concurrent.atomic.AtomicInteger;
1:a3a5a1a: 
1:a3a5a1a: import javax.jms.ExceptionListener;
1:a3a5a1a: import javax.jms.JMSException;
1:a3a5a1a: import javax.jms.Message;
1:a3a5a1a: import javax.jms.MessageConsumer;
1:a3a5a1a: import javax.jms.MessageProducer;
1:a3a5a1a: import javax.jms.Queue;
1:a3a5a1a: import javax.jms.QueueBrowser;
1:a3a5a1a: import javax.jms.Session;
1:a3a5a1a: import javax.jms.TextMessage;
1:a3a5a1a: 
1:a3a5a1a: import org.apache.activemq.ActiveMQConnection;
1:a3a5a1a: import org.apache.activemq.ActiveMQConnectionFactory;
1:a3a5a1a: import org.apache.activemq.broker.Broker;
1:a3a5a1a: import org.apache.activemq.broker.BrokerFilter;
1:a3a5a1a: import org.apache.activemq.broker.BrokerPlugin;
1:a3a5a1a: import org.apache.activemq.broker.BrokerService;
1:a3a5a1a: import org.apache.activemq.command.MessageDispatch;
1:a3a5a1a: import org.junit.After;
1:a3a5a1a: import org.junit.Before;
1:a3a5a1a: import org.junit.Test;
1:a3a5a1a: 
1:a3a5a1a: public class MessageExpiryClientSideTest {
1:a3a5a1a: 
1:a3a5a1a:     private ActiveMQConnection connection;
1:a3a5a1a:     private BrokerService broker;
1:a3a5a1a:     private volatile Exception connectionError;
1:a3a5a1a: 
1:a3a5a1a:     @Before
1:a3a5a1a:     public void setUp() throws Exception {
1:a3a5a1a:         createBroker();
1:a3a5a1a: 
1:a3a5a1a:         connection = createConnection();
1:a3a5a1a:         connection.setExceptionListener(new ExceptionListener() {
1:a3a5a1a: 
1:a3a5a1a:             @Override
1:a3a5a1a:             public void onException(JMSException exception) {
1:a3a5a1a:                 try {
1:a3a5a1a:                     connectionError = exception;
1:a3a5a1a:                     connection.close();
1:a3a5a1a:                 } catch (JMSException e) {
1:a3a5a1a:                 }
1:a3a5a1a:             }
1:a3a5a1a:         });
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     @After
1:a3a5a1a:     public void tearDown() throws Exception {
1:a3a5a1a:         if (connection != null) {
1:a3a5a1a:             try {
1:a3a5a1a:                 connection.close();
1:a3a5a1a:             } catch (Exception e) {
1:a3a5a1a:             }
1:a3a5a1a:         }
1:a3a5a1a: 
1:a3a5a1a:         if (broker != null) {
1:a3a5a1a:             broker.stop();
1:a3a5a1a:             broker.waitUntilStopped();
1:a3a5a1a:         }
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     /**
1:a3a5a1a:      * check if the pull request (prefetch=1) times out when the expiry occurs
1:a3a5a1a:      * on the client side.
1:a3a5a1a:      */
1:a3a5a1a:     @Test(timeout = 30000)
1:a3a5a1a:     public void testConsumerReceivePrefetchOneRedeliveryZero() throws Exception {
1:a3a5a1a: 
1:a3a5a1a:         connection.getPrefetchPolicy().setQueuePrefetch(1);
1:a3a5a1a:         connection.start();
1:a3a5a1a: 
1:a3a5a1a:         // push message to queue
1:a3a5a1a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         Queue queue = session.createQueue("timeout.test");
1:a3a5a1a:         MessageProducer producer = session.createProducer(queue);
1:a3a5a1a:         TextMessage textMessage = session.createTextMessage("test Message");
1:a3a5a1a: 
1:a3a5a1a:         producer.send(textMessage);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         // try to consume message
1:a3a5a1a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         MessageConsumer consumer = session.createConsumer(queue);
1:a3a5a1a: 
1:a3a5a1a:         Message message = consumer.receive(1000);
1:a3a5a1a: 
1:a3a5a1a:         // message should be null as it should have expired and the
1:a3a5a1a:         // consumer.receive(timeout) should return null.
1:a3a5a1a:         assertNull(message);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         assertNull(connectionError);
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     /**
1:a3a5a1a:      * check if the pull request (prefetch=0) times out when the expiry occurs
1:a3a5a1a:      * on the client side.
1:a3a5a1a:      */
1:a3a5a1a:     @Test(timeout = 30000)
1:a3a5a1a:     public void testConsumerReceivePrefetchZeroRedeliveryZero() throws Exception {
1:a3a5a1a: 
1:a3a5a1a:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:a3a5a1a:         connection.start();
1:a3a5a1a: 
1:a3a5a1a:         // push message to queue
1:a3a5a1a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         Queue queue = session.createQueue("timeout.test");
1:a3a5a1a:         MessageProducer producer = session.createProducer(queue);
1:a3a5a1a:         TextMessage textMessage = session.createTextMessage("test Message");
1:a3a5a1a: 
1:a3a5a1a:         producer.send(textMessage);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         // try to consume message
1:a3a5a1a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         MessageConsumer consumer = session.createConsumer(queue);
1:a3a5a1a: 
1:a3a5a1a:         Message message = consumer.receive(1000);
1:a3a5a1a: 
1:a3a5a1a:         // message should be null as it should have expired and the
1:a3a5a1a:         // consumer.receive(timeout) should return null.
1:a3a5a1a:         assertNull(message);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         assertNull(connectionError);
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     /**
1:a3a5a1a:      * check if the pull request (prefetch=0) times out when the expiry occurs
1:a3a5a1a:      * on the client side.
1:a3a5a1a:      */
1:a3a5a1a:     @Test(timeout = 30000)
1:a3a5a1a:     public void testQueueBrowserPrefetchZeroRedeliveryZero() throws Exception {
1:a3a5a1a: 
1:a3a5a1a:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:a3a5a1a:         connection.start();
1:a3a5a1a: 
1:a3a5a1a:         // push message to queue
1:a3a5a1a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         Queue queue = session.createQueue("timeout.test");
1:a3a5a1a:         MessageProducer producer = session.createProducer(queue);
1:a3a5a1a:         TextMessage textMessage = session.createTextMessage("test Message");
1:a3a5a1a: 
1:a3a5a1a:         producer.send(textMessage);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         // try to consume message
1:a3a5a1a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         QueueBrowser browser = session.createBrowser(queue);
1:a3a5a1a: 
1:a3a5a1a:         Message message = null;
1:a3a5a1a:         Enumeration<?> enumeration = browser.getEnumeration();
1:a3a5a1a:         while (enumeration.hasMoreElements()) {
1:a3a5a1a:             message = (Message) enumeration.nextElement();
1:a3a5a1a:         }
1:a3a5a1a: 
1:a3a5a1a:         // message should be null as it should have expired and the
1:a3a5a1a:         // consumer.receive(timeout) should return null.
1:a3a5a1a:         assertNull(message);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         assertNull(connectionError);
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     /**
1:a3a5a1a:      * check if the browse with (prefetch=1) times out when the expiry occurs
1:a3a5a1a:      * on the client side.
1:a3a5a1a:      */
1:a3a5a1a:     @Test(timeout = 30000)
1:a3a5a1a:     public void testQueueBrowserPrefetchOneRedeliveryZero() throws Exception {
1:a3a5a1a: 
1:a3a5a1a:         connection.getPrefetchPolicy().setQueuePrefetch(1);
1:a3a5a1a:         connection.start();
1:a3a5a1a: 
1:a3a5a1a:         // push message to queue
1:a3a5a1a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         Queue queue = session.createQueue("timeout.test");
1:a3a5a1a:         MessageProducer producer = session.createProducer(queue);
1:a3a5a1a:         TextMessage textMessage = session.createTextMessage("test Message");
1:a3a5a1a: 
1:a3a5a1a:         producer.send(textMessage);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         // try to consume message
1:a3a5a1a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a5a1a:         QueueBrowser browser = session.createBrowser(queue);
1:a3a5a1a: 
1:a3a5a1a:         Message message = null;
1:a3a5a1a:         Enumeration<?> enumeration = browser.getEnumeration();
1:a3a5a1a:         while (enumeration.hasMoreElements()) {
1:a3a5a1a:             message = (Message) enumeration.nextElement();
1:a3a5a1a:         }
1:a3a5a1a: 
1:a3a5a1a:         // message should be null as it should have expired and the
1:a3a5a1a:         // consumer.receive(timeout) should return null.
1:a3a5a1a:         assertNull(message);
1:a3a5a1a:         session.close();
1:a3a5a1a: 
1:a3a5a1a:         assertNull(connectionError);
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     private void createBroker() throws Exception {
1:a3a5a1a:         broker = new BrokerService();
1:a3a5a1a:         broker.setUseJmx(false);
1:a3a5a1a:         broker.setPersistent(false);
1:a3a5a1a:         broker.setAdvisorySupport(false);
1:a3a5a1a: 
1:a3a5a1a:         // add a plugin to ensure the expiration happens on the client side rather
1:a3a5a1a:         // than broker side.
1:a3a5a1a:         broker.setPlugins(new BrokerPlugin[] { new BrokerPlugin() {
1:a3a5a1a: 
1:a3a5a1a:             @Override
1:a3a5a1a:             public Broker installPlugin(Broker broker) throws Exception {
1:a3a5a1a:                 return new BrokerFilter(broker) {
1:a3a5a1a: 
1:a3a5a1a:                     private AtomicInteger counter = new AtomicInteger();
1:a3a5a1a: 
1:a3a5a1a:                     @Override
1:a3a5a1a:                     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:a3a5a1a:                         if (counter.get() == 0 && messageDispatch.getDestination().getPhysicalName().contains("timeout.test")) {
1:a3a5a1a:                             // Set the expiration to now
1:a3a5a1a:                             messageDispatch.getMessage().setExpiration(System.currentTimeMillis() - 1000);
1:a3a5a1a:                             counter.incrementAndGet();
1:a3a5a1a:                         }
1:a3a5a1a: 
1:a3a5a1a:                         super.preProcessDispatch(messageDispatch);
1:a3a5a1a:                     }
1:a3a5a1a:                 };
1:a3a5a1a:             }
1:a3a5a1a:         } });
1:a3a5a1a: 
1:a3a5a1a:         broker.start();
1:a3a5a1a:         broker.waitUntilStarted();
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:a3a5a1a:         return new ActiveMQConnectionFactory("vm://localhost");
1:a3a5a1a:     }
1:a3a5a1a: 
1:a3a5a1a:     protected ActiveMQConnection createConnection() throws Exception {
1:a3a5a1a:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:a3a5a1a:     }
1:a3a5a1a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a3a5a1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.Enumeration;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MessageExpiryClientSideTest {
1: 
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private volatile Exception connectionError;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker();
1: 
1:         connection = createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1: 
1:             @Override
1:             public void onException(JMSException exception) {
1:                 try {
1:                     connectionError = exception;
1:                     connection.close();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         });
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {
1:             }
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * check if the pull request (prefetch=1) times out when the expiry occurs
1:      * on the client side.
1:      */
1:     @Test(timeout = 30000)
1:     public void testConsumerReceivePrefetchOneRedeliveryZero() throws Exception {
1: 
1:         connection.getPrefetchPolicy().setQueuePrefetch(1);
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("timeout.test");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage("test Message");
1: 
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // try to consume message
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         Message message = consumer.receive(1000);
1: 
1:         // message should be null as it should have expired and the
1:         // consumer.receive(timeout) should return null.
1:         assertNull(message);
1:         session.close();
1: 
1:         assertNull(connectionError);
1:     }
1: 
1:     /**
1:      * check if the pull request (prefetch=0) times out when the expiry occurs
1:      * on the client side.
1:      */
1:     @Test(timeout = 30000)
1:     public void testConsumerReceivePrefetchZeroRedeliveryZero() throws Exception {
1: 
1:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("timeout.test");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage("test Message");
1: 
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // try to consume message
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         Message message = consumer.receive(1000);
1: 
1:         // message should be null as it should have expired and the
1:         // consumer.receive(timeout) should return null.
1:         assertNull(message);
1:         session.close();
1: 
1:         assertNull(connectionError);
1:     }
1: 
1:     /**
1:      * check if the pull request (prefetch=0) times out when the expiry occurs
1:      * on the client side.
1:      */
1:     @Test(timeout = 30000)
1:     public void testQueueBrowserPrefetchZeroRedeliveryZero() throws Exception {
1: 
1:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("timeout.test");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage("test Message");
1: 
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // try to consume message
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueBrowser browser = session.createBrowser(queue);
1: 
1:         Message message = null;
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         while (enumeration.hasMoreElements()) {
1:             message = (Message) enumeration.nextElement();
1:         }
1: 
1:         // message should be null as it should have expired and the
1:         // consumer.receive(timeout) should return null.
1:         assertNull(message);
1:         session.close();
1: 
1:         assertNull(connectionError);
1:     }
1: 
1:     /**
1:      * check if the browse with (prefetch=1) times out when the expiry occurs
1:      * on the client side.
1:      */
1:     @Test(timeout = 30000)
1:     public void testQueueBrowserPrefetchOneRedeliveryZero() throws Exception {
1: 
1:         connection.getPrefetchPolicy().setQueuePrefetch(1);
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("timeout.test");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage("test Message");
1: 
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // try to consume message
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueBrowser browser = session.createBrowser(queue);
1: 
1:         Message message = null;
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         while (enumeration.hasMoreElements()) {
1:             message = (Message) enumeration.nextElement();
1:         }
1: 
1:         // message should be null as it should have expired and the
1:         // consumer.receive(timeout) should return null.
1:         assertNull(message);
1:         session.close();
1: 
1:         assertNull(connectionError);
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistent(false);
1:         broker.setAdvisorySupport(false);
1: 
1:         // add a plugin to ensure the expiration happens on the client side rather
1:         // than broker side.
1:         broker.setPlugins(new BrokerPlugin[] { new BrokerPlugin() {
1: 
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1: 
1:                     private AtomicInteger counter = new AtomicInteger();
1: 
1:                     @Override
1:                     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:                         if (counter.get() == 0 && messageDispatch.getDestination().getPhysicalName().contains("timeout.test")) {
1:                             // Set the expiration to now
1:                             messageDispatch.getMessage().setExpiration(System.currentTimeMillis() - 1000);
1:                             counter.incrementAndGet();
1:                         }
1: 
1:                         super.preProcessDispatch(messageDispatch);
1:                     }
1:                 };
1:             }
1:         } });
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
1: }
============================================================================