1:046130e: /**
1:046130e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:046130e:  * contributor license agreements.  See the NOTICE file distributed with
1:046130e:  * this work for additional information regarding copyright ownership.
1:046130e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:046130e:  * (the "License"); you may not use this file except in compliance with
1:046130e:  * the License.  You may obtain a copy of the License at
1:046130e:  *
1:046130e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:046130e:  *
1:046130e:  * Unless required by applicable law or agreed to in writing, software
1:046130e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:046130e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:046130e:  * See the License for the specific language governing permissions and
1:046130e:  * limitations under the License.
1:046130e:  */
1:046130e: package org.apache.activemq.security;
1:046130e: 
1:4743a20: import static org.junit.Assert.assertNotNull;
1:4743a20: import static org.junit.Assert.fail;
1:4743a20: 
1:4743a20: import javax.jms.Connection;
1:bf5305e: import javax.jms.Destination;
1:4743a20: import javax.jms.JMSException;
1:4743a20: import javax.jms.Message;
1:4743a20: import javax.jms.MessageConsumer;
1:4743a20: import javax.jms.MessageProducer;
1:4743a20: import javax.jms.Queue;
1:4743a20: import javax.jms.Session;
1:4743a20: 
1:046130e: import org.apache.activemq.ActiveMQConnectionFactory;
1:046130e: import org.apache.activemq.broker.BrokerFactory;
1:046130e: import org.apache.activemq.broker.BrokerService;
1:046130e: import org.apache.directory.server.annotations.CreateLdapServer;
1:046130e: import org.apache.directory.server.annotations.CreateTransport;
1:046130e: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:046130e: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:046130e: import org.apache.directory.server.core.integ.FrameworkRunner;
1:046130e: import org.apache.directory.server.ldap.LdapServer;
1:046130e: import org.junit.After;
1:046130e: import org.junit.Before;
1:046130e: import org.junit.Test;
1:046130e: import org.junit.runner.RunWith;
1:1f862ba: 
1:046130e: 
1:046130e: @RunWith( FrameworkRunner.class )
1:0b5231a: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
1:046130e: @ApplyLdifFiles(
1:046130e:    "org/apache/activemq/security/activemq.ldif"
1:046130e: )
1:046130e: public class LDAPSecurityTest extends AbstractLdapTestUnit {
1:046130e: 
1:046130e:     public BrokerService broker;
1:046130e: 
1:046130e:     public static LdapServer ldapServer;
1:046130e: 
1:046130e:     @Before
1:046130e:     public void setup() throws Exception {
1:1f862ba:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1:4743a20: 
1:1f862ba:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-ldap.xml");
1:1f862ba:         broker.start();
1:1f862ba:         broker.waitUntilStarted();
1:046130e:     }
1:046130e: 
1:046130e:     @After
1:046130e:     public void shutdown() throws Exception {
1:046130e:         broker.stop();
1:046130e:         broker.waitUntilStopped();
1:046130e:     }
1:046130e: 
1:046130e:     @Test
1:046130e:     public void testSendReceive() throws Exception {
1:046130e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:046130e:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:046130e:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:046130e:         conn.start();
1:bf5305e:         Destination queue = sess.createQueue("TEST.FOO");
1:046130e: 
1:046130e:         MessageProducer producer = sess.createProducer(queue);
1:046130e:         MessageConsumer consumer = sess.createConsumer(queue);
1:046130e: 
1:046130e:         producer.send(sess.createTextMessage("test"));
1:046130e:         Message msg = consumer.receive(1000);
1:046130e:         assertNotNull(msg);
1:046130e:     }
1:efcd57f: 
1:efcd57f:     @Test
1:bf5305e:     public void testSendTopic() throws Exception {
1:bf5305e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:bf5305e:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:bf5305e:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bf5305e:         conn.start();
1:bf5305e:         Destination topic = sess.createTopic("TEST.BAR");
1:bf5305e: 
1:bf5305e:         MessageProducer producer = sess.createProducer(topic);
1:bf5305e:         MessageConsumer consumer = sess.createConsumer(topic);
1:bf5305e: 
1:bf5305e:         producer.send(sess.createTextMessage("test"));
1:bf5305e:         Message msg = consumer.receive(1000);
1:bf5305e:         assertNotNull(msg);
1:bf5305e:     }
1:bf5305e: 
1:bf5305e:     @Test
1:9a7443a:     public void testSendDenied() throws Exception {
1:9a7443a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:9a7443a:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:9a7443a:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9a7443a:         conn.start();
1:9a7443a:         Queue queue = sess.createQueue("ADMIN.FOO");
1:046130e: 
1:9a7443a:         try {
1:9383e56:             MessageProducer producer = sess.createProducer(queue);
1:9a7443a:             producer.send(sess.createTextMessage("test"));
1:9a7443a:             fail("expect auth exception");
1:9a7443a:         } catch (JMSException expected) {
1:046130e:         }
1:9a7443a:     }
1:046130e: 
1:9a7443a:     @Test
1:9a7443a:     public void testCompositeSendDenied() throws Exception {
1:9a7443a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:9a7443a:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:9a7443a:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9a7443a:         conn.start();
1:9a7443a:         Queue queue = sess.createQueue("TEST.FOO,ADMIN.FOO");
1:046130e: 
1:9a7443a:         try {
1:9383e56:             MessageProducer producer = sess.createProducer(queue);
1:9a7443a:             producer.send(sess.createTextMessage("test"));
1:9a7443a:             fail("expect auth exception");
1:9a7443a:         } catch (JMSException expected) {
1:9a7443a:         }
1:9a7443a:     }
1:046130e: 
1:9a7443a:     @Test
1:efcd57f:     public void testTempDestinations() throws Exception {
1:efcd57f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:efcd57f:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:efcd57f:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:efcd57f:         conn.start();
1:efcd57f:         Queue queue = sess.createTemporaryQueue();
1:efcd57f: 
1:efcd57f:         MessageProducer producer = sess.createProducer(queue);
1:efcd57f:         MessageConsumer consumer = sess.createConsumer(queue);
1:efcd57f: 
1:efcd57f:         producer.send(sess.createTextMessage("test"));
1:efcd57f:         Message msg = consumer.receive(1000);
1:efcd57f:         assertNotNull(msg);
1:efcd57f:     }
4:9a7443a: 
1:9a7443a: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0b5231a
/////////////////////////////////////////////////////////////////////////
1: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:bf5305e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:         Destination queue = sess.createQueue("TEST.FOO");
/////////////////////////////////////////////////////////////////////////
1:     public void testSendTopic() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Destination topic = sess.createTopic("TEST.BAR");
1: 
1:         MessageProducer producer = sess.createProducer(topic);
1:         MessageConsumer consumer = sess.createConsumer(topic);
1: 
1:         producer.send(sess.createTextMessage("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:     @Test
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9383e56
/////////////////////////////////////////////////////////////////////////
1:             MessageProducer producer = sess.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
1:             MessageProducer producer = sess.createProducer(queue);
commit:1f862ba
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1:         
1:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-ldap.xml");
1:         broker.start();
1:         broker.waitUntilStarted();
commit:efcd57f
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testTempDestinations() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createTemporaryQueue();
1: 
1:         MessageProducer producer = sess.createProducer(queue);
1:         MessageConsumer consumer = sess.createConsumer(queue);
1: 
1:         producer.send(sess.createTextMessage("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
commit:046130e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
0: import javax.jms.*;
1: 
0: import static org.junit.Assert.assertNotNull;
1: 
1: 
1: @RunWith( FrameworkRunner.class )
0: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1: @ApplyLdifFiles(
1:    "org/apache/activemq/security/activemq.ldif"
1: )
1: public class LDAPSecurityTest extends AbstractLdapTestUnit {
1: 
1:     public BrokerService broker;
1: 
1:     public static LdapServer ldapServer;
1: 
1:     @Before
1:     public void setup() throws Exception {
0:        broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-ldap.xml");
0:        broker.start();
0:        broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testSendReceive() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
0:         Queue queue = sess.createQueue("TEST.FOO");
1: 
1:         MessageProducer producer = sess.createProducer(queue);
1:         MessageConsumer consumer = sess.createConsumer(queue);
1: 
1:         producer.send(sess.createTextMessage("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9a7443a
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:     public void testSendDenied() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createQueue("ADMIN.FOO");
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         try {
1:             producer.send(sess.createTextMessage("test"));
1:             fail("expect auth exception");
1:         } catch (JMSException expected) {
1:         }
1:     }
1: 
1:     @Test
1:     public void testCompositeSendDenied() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createQueue("TEST.FOO,ADMIN.FOO");
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         try {
1:             producer.send(sess.createTextMessage("test"));
1:             fail("expect auth exception");
1:         } catch (JMSException expected) {
1:         }
1:     }
1: 
1:     @Test
============================================================================