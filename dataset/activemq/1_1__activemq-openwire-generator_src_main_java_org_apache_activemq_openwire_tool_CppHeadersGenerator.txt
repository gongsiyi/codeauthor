1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
5:bd0ad68: 
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CppHeadersGenerator extends CppClassesGenerator {
1:bd0ad68: 
1:bd0ad68:     protected String getFilePostFix() {
1:bd0ad68:         return ".hpp";
8:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:bd0ad68: 
1:540dd5c:         out.println("#ifndef ActiveMQ_" + className + "_hpp_");
1:540dd5c:         out.println("#define ActiveMQ_" + className + "_hpp_");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("// Turn off warning message for ignored exception specification");
1:540dd5c:         out.println("#ifdef _MSC_VER");
1:540dd5c:         out.println("#pragma warning( disable : 4290 )");
1:540dd5c:         out.println("#endif");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include <string>");
1:540dd5c:         out.println("#include \"activemq/command/" + baseClass + ".hpp\"");
1:bd0ad68: 
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             if (!property.getType().isPrimitiveType() && !property.getType().getSimpleName().equals("String") && !property.getType().getSimpleName().equals("ByteSequence")) {
1:540dd5c:                 String includeName = toCppType(property.getType());
1:540dd5c:                 if (property.getType().isArrayType()) {
1:540dd5c:                     JClass arrayType = property.getType().getArrayComponentType();
1:540dd5c:                     if (arrayType.isPrimitiveType()) {
1:540dd5c:                         continue;
1:540dd5c:                     }
1:540dd5c:                 }
1:540dd5c:                 if (includeName.startsWith("array<")) {
1:540dd5c:                     includeName = includeName.substring(6, includeName.length() - 1);
1:540dd5c:                 } else if (includeName.startsWith("p<")) {
1:540dd5c:                     includeName = includeName.substring(2, includeName.length() - 1);
1:540dd5c:                 }
1:540dd5c:                 if (includeName.equals("IDataStructure")) {
1:540dd5c:                     out.println("#include \"activemq/" + includeName + ".hpp\"");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("#include \"activemq/command/" + includeName + ".hpp\"");
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"activemq/protocol/IMarshaller.hpp\"");
1:540dd5c:         out.println("#include \"ppr/io/IOutputStream.hpp\"");
1:540dd5c:         out.println("#include \"ppr/io/IInputStream.hpp\"");
1:540dd5c:         out.println("#include \"ppr/io/IOException.hpp\"");
1:540dd5c:         out.println("#include \"ppr/util/ifr/array\"");
1:540dd5c:         out.println("#include \"ppr/util/ifr/p\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace apache");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("  namespace activemq");
1:540dd5c:         out.println("  {");
1:540dd5c:         out.println("    namespace command");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("      using namespace ifr;");
1:540dd5c:         out.println("      using namespace std;");
1:540dd5c:         out.println("      using namespace apache::activemq;");
1:540dd5c:         out.println("      using namespace apache::activemq::protocol;");
1:540dd5c:         out.println("      using namespace apache::ppr::io;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *  Command and marshalling code for OpenWire format for " + className + "");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *  NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println(" *         if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println(" *         activemq-core module");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("class " + className + " : public " + baseClass + "");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("protected:");
1:540dd5c: 
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String type = toCppType(property.getType());
1:540dd5c:             String name = decapitalize(property.getSimpleName());
1:540dd5c:             out.println("    " + type + " " + name + " ;");
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("public:");
1:540dd5c:         out.println("    const static unsigned char TYPE = " + getOpenWireOpCode(jclass) + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("public:");
1:540dd5c:         out.println("    " + className + "() ;");
1:540dd5c:         out.println("    virtual ~" + className + "() ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    virtual unsigned char getDataStructureType() ;");
1:540dd5c: 
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String type = toCppType(property.getType());
1:540dd5c:             String propertyName = property.getSimpleName();
1:540dd5c:             String parameterName = decapitalize(propertyName);
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    virtual " + type + " get" + propertyName + "() ;");
1:540dd5c:             out.println("    virtual void set" + propertyName + "(" + type + " " + parameterName + ") ;");
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;");
1:540dd5c:         out.println("    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;");
1:540dd5c:         out.println("} ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/* namespace */");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("  }");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#endif /*ActiveMQ_" + className + "_hpp_*/");
1:540dd5c:     }
1:bd0ad68: 
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected void generateFile(PrintWriter out) {
1:         generateLicence(out);
1:         out.println("#ifndef ActiveMQ_" + className + "_hpp_");
1:         out.println("#define ActiveMQ_" + className + "_hpp_");
1:         out.println("");
1:         out.println("// Turn off warning message for ignored exception specification");
1:         out.println("#ifdef _MSC_VER");
1:         out.println("#pragma warning( disable : 4290 )");
1:         out.println("#endif");
1:         out.println("");
1:         out.println("#include <string>");
1:         out.println("#include \"activemq/command/" + baseClass + ".hpp\"");
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             if (!property.getType().isPrimitiveType() && !property.getType().getSimpleName().equals("String") && !property.getType().getSimpleName().equals("ByteSequence")) {
1:                 String includeName = toCppType(property.getType());
1:                 if (property.getType().isArrayType()) {
1:                     JClass arrayType = property.getType().getArrayComponentType();
1:                     if (arrayType.isPrimitiveType()) {
1:                         continue;
1:                     }
1:                 }
1:                 if (includeName.startsWith("array<")) {
1:                     includeName = includeName.substring(6, includeName.length() - 1);
1:                 } else if (includeName.startsWith("p<")) {
1:                     includeName = includeName.substring(2, includeName.length() - 1);
1:                 }
1:                 if (includeName.equals("IDataStructure")) {
1:                     out.println("#include \"activemq/" + includeName + ".hpp\"");
1:                 } else {
1:                     out.println("#include \"activemq/command/" + includeName + ".hpp\"");
1:                 }
1:             }
1:         }
1:         out.println("");
1:         out.println("#include \"activemq/protocol/IMarshaller.hpp\"");
1:         out.println("#include \"ppr/io/IOutputStream.hpp\"");
1:         out.println("#include \"ppr/io/IInputStream.hpp\"");
1:         out.println("#include \"ppr/io/IOException.hpp\"");
1:         out.println("#include \"ppr/util/ifr/array\"");
1:         out.println("#include \"ppr/util/ifr/p\"");
1:         out.println("");
1:         out.println("namespace apache");
1:         out.println("{");
1:         out.println("  namespace activemq");
1:         out.println("  {");
1:         out.println("    namespace command");
1:         out.println("    {");
1:         out.println("      using namespace ifr;");
1:         out.println("      using namespace std;");
1:         out.println("      using namespace apache::activemq;");
1:         out.println("      using namespace apache::activemq::protocol;");
1:         out.println("      using namespace apache::ppr::io;");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" *");
1:         out.println(" *  Command and marshalling code for OpenWire format for " + className + "");
1:         out.println(" *");
1:         out.println(" *");
1:         out.println(" *  NOTE!: This file is autogenerated - do not modify!");
1:         out.println(" *         if you need to make a change, please see the Groovy scripts in the");
1:         out.println(" *         activemq-core module");
1:         out.println(" *");
1:         out.println(" */");
1:         out.println("class " + className + " : public " + baseClass + "");
1:         out.println("{");
1:         out.println("protected:");
1: 
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String type = toCppType(property.getType());
1:             String name = decapitalize(property.getSimpleName());
1:             out.println("    " + type + " " + name + " ;");
1:         }
1:         out.println("");
1:         out.println("public:");
1:         out.println("    const static unsigned char TYPE = " + getOpenWireOpCode(jclass) + ";");
1:         out.println("");
1:         out.println("public:");
1:         out.println("    " + className + "() ;");
1:         out.println("    virtual ~" + className + "() ;");
1:         out.println("");
1:         out.println("    virtual unsigned char getDataStructureType() ;");
1: 
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String type = toCppType(property.getType());
1:             String propertyName = property.getSimpleName();
1:             String parameterName = decapitalize(propertyName);
1:             out.println("");
1:             out.println("    virtual " + type + " get" + propertyName + "() ;");
1:             out.println("    virtual void set" + propertyName + "(" + type + " " + parameterName + ") ;");
1:         }
1:         out.println("");
1:         out.println("    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;");
1:         out.println("    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;");
1:         out.println("} ;");
1:         out.println("");
1:         out.println("/* namespace */");
1:         out.println("    }");
1:         out.println("  }");
1:         out.println("}");
1:         out.println("");
1:         out.println("#endif /*ActiveMQ_" + className + "_hpp_*/");
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
1: 
1: /**
1:  *
0:  * @version $Revision: 379734 $
1:  */
1: public class CppHeadersGenerator extends CppClassesGenerator {
1: 
1:     protected String getFilePostFix() {
1:         return ".hpp";
1:     }
1:     
0: 	protected void generateFile(PrintWriter out) {
0: 		generateLicence(out);		
1: 		
0: out.println("#ifndef ActiveMQ_"+className+"_hpp_");
0: out.println("#define ActiveMQ_"+className+"_hpp_");
0: out.println("");
0: out.println("// Turn off warning message for ignored exception specification");
0: out.println("#ifdef _MSC_VER");
0: out.println("#pragma warning( disable : 4290 )");
0: out.println("#endif");
0: out.println("");
0: out.println("#include <string>");
0: out.println("#include \"activemq/command/"+baseClass+".hpp\"");
1: 
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 		    if( !property.getType().isPrimitiveType() &&
0: 		        !property.getType().getSimpleName().equals("String") &&
0: 		        !property.getType().getSimpleName().equals("ByteSequence") )
0: 		    {
0: 		        String includeName = toCppType(property.getType());
0: 		        if( property.getType().isArrayType() )
0: 		        {
0: 		            JClass arrayType = property.getType().getArrayComponentType();
0: 		            if( arrayType.isPrimitiveType() )
0: 		                continue ;
1: 		        }
0: 		        if( includeName.startsWith("array<") )
0: 		            includeName = includeName.substring(6, includeName.length()-1);
0: 		        else if( includeName.startsWith("p<") )
0: 		            includeName = includeName.substring(2, includeName.length()-1);
1: 		
0: 		        if( includeName.equals("IDataStructure") ) {
0: out.println("#include \"activemq/"+includeName+".hpp\"");
0: 				}  else {
0: out.println("#include \"activemq/command/"+includeName+".hpp\"");
1: 				}
1: 		    }
1: 		}
0: out.println("");
0: out.println("#include \"activemq/protocol/IMarshaller.hpp\"");
0: out.println("#include \"ppr/io/IOutputStream.hpp\"");
0: out.println("#include \"ppr/io/IInputStream.hpp\"");
0: out.println("#include \"ppr/io/IOException.hpp\"");
0: out.println("#include \"ppr/util/ifr/array\"");
0: out.println("#include \"ppr/util/ifr/p\"");
0: out.println("");
0: out.println("namespace apache");
0: out.println("{");
0: out.println("  namespace activemq");
0: out.println("  {");
0: out.println("    namespace command");
0: out.println("    {");
0: out.println("      using namespace ifr;");
0: out.println("      using namespace std;");
0: out.println("      using namespace apache::activemq;");
0: out.println("      using namespace apache::activemq::protocol;");
0: out.println("      using namespace apache::ppr::io;");
0: out.println("");
0: out.println("/*");
0: out.println(" *");
0: out.println(" *  Command and marshalling code for OpenWire format for "+className+"");
0: out.println(" *");
0: out.println(" *");
0: out.println(" *  NOTE!: This file is autogenerated - do not modify!");
0: out.println(" *         if you need to make a change, please see the Groovy scripts in the");
0: out.println(" *         activemq-core module");
0: out.println(" *");
0: out.println(" */");
0: out.println("class "+className+" : public "+baseClass+"");
0: out.println("{");
0: out.println("protected:");
1: 
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String type = toCppType(property.getType());
0: 	        String name = decapitalize(property.getSimpleName());
0: out.println("    "+type+" "+name+" ;");
1: 	    }
0: out.println("");
0: out.println("public:");
0: out.println("    const static unsigned char TYPE = "+getOpenWireOpCode(jclass)+";");
0: out.println("");
0: out.println("public:");
0: out.println("    "+className+"() ;");
0: out.println("    virtual ~"+className+"() ;");
0: out.println("");
0: out.println("    virtual unsigned char getDataStructureType() ;");
1: 
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String type = toCppType(property.getType());
0: 	        String propertyName = property.getSimpleName();
0: 	        String parameterName = decapitalize(propertyName);
0: out.println("");
0: out.println("    virtual "+type+" get"+propertyName+"() ;");
0: out.println("    virtual void set"+propertyName+"("+type+" "+parameterName+") ;");
1: 	    }
0: out.println("");
0: out.println("    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;");
0: out.println("    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;");
0: out.println("} ;");
0: out.println("");
0: out.println("/* namespace */");
0: out.println("    }");
0: out.println("  }");
0: out.println("}");
0: out.println("");
0: out.println("#endif /*ActiveMQ_"+className+"_hpp_*/");
1: }    
1: 
1: }
============================================================================