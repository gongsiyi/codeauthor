2:fb0e159: /**
1:09fab74:  *
1:fb0e159:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fb0e159:  * contributor license agreements.  See the NOTICE file distributed with
1:fb0e159:  * this work for additional information regarding copyright ownership.
1:fb0e159:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fb0e159:  * (the "License"); you may not use this file except in compliance with
1:fb0e159:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:fb0e159:  * http://www.apache.org/licenses/LICENSE-2.0
1:26eedea:  *
1:fb0e159:  * Unless required by applicable law or agreed to in writing, software
1:fb0e159:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb0e159:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb0e159:  * See the License for the specific language governing permissions and
1:fb0e159:  * limitations under the License.
2:fb0e159:  */
1:fb0e159: package org.apache.activemq.camel.component;
9:fb0e159: 
1:fb0e159: import java.util.Set;
1:fb0e159: 
1:09fab74: import javax.annotation.PostConstruct;
1:fb0e159: 
1:fb0e159: import org.apache.activemq.advisory.DestinationEvent;
1:fb0e159: import org.apache.activemq.advisory.DestinationListener;
1:fb0e159: import org.apache.activemq.advisory.DestinationSource;
1:fb0e159: import org.apache.activemq.command.ActiveMQDestination;
1:fb0e159: import org.apache.activemq.command.ActiveMQQueue;
1:e01a937: import org.apache.activemq.command.ActiveMQTopic;
1:fb0e159: import org.apache.camel.CamelContext;
1:fb0e159: import org.apache.camel.CamelContextAware;
1:fb0e159: import org.apache.camel.Endpoint;
1:e01a937: import org.apache.camel.component.jms.JmsEndpoint;
1:26eedea: import org.apache.camel.component.jms.JmsQueueEndpoint;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:fb0e159: 
1:09fab74: /**
1:fb0e159:  * A helper bean which populates a {@link CamelContext} with ActiveMQ Queue endpoints
1:3e895c6:  *
1:09fab74:  * @org.apache.xbean.XBean
1:09fab74:  */
1:09fab74: public class CamelEndpointLoader implements CamelContextAware {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(CamelEndpointLoader.class);
1:fb0e159:     private CamelContext camelContext;
1:fb0e159:     private ActiveMQComponent component;
1:b2a91b9:     DestinationSource source;
1:fb0e159: 
1:fb0e159:     public CamelEndpointLoader() {
1:26eedea:     }
1:09fab74: 
1:b2a91b9:     public CamelEndpointLoader(CamelContext camelContext, DestinationSource source) {
1:fb0e159:         this.camelContext = camelContext;
1:b2a91b9:         this.source = source;
1:26eedea:     }
1:fb0e159: 
1:09fab74:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change
1:174fe15:      *
1:174fe15:      * fix: AMQ-4676
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:09fab74:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.InitMethod
1:09fab74:      */
1:26eedea:     public void afterPropertiesSet() throws Exception {
1:edd8166:         if (source != null) {
1:edd8166:             source.setDestinationListener(new DestinationListener() {
1:174fe15:                 @Override
1:edd8166:                 public void onDestinationEvent(DestinationEvent event) {
1:edd8166:                     try {
1:edd8166:                         ActiveMQDestination destination = event.getDestination();
1:edd8166:                         if (destination instanceof ActiveMQQueue) {
1:edd8166:                             ActiveMQQueue queue = (ActiveMQQueue) destination;
1:edd8166:                             if (event.isAddOperation()) {
1:edd8166:                                 addQueue(queue);
1:edd8166:                             } else {
1:edd8166:                                 removeQueue(queue);
1:edd8166:                             }
1:edd8166:                         } else if (destination instanceof ActiveMQTopic) {
1:edd8166:                             ActiveMQTopic topic = (ActiveMQTopic) destination;
1:edd8166:                             if (event.isAddOperation()) {
1:edd8166:                                 addTopic(topic);
1:edd8166:                             } else {
1:edd8166:                                 removeTopic(topic);
1:edd8166:                             }
1:e01a937:                         }
1:edd8166:                     } catch (Exception e) {
1:edd8166:                         LOG.warn("Caught: " + e, e);
1:e01a937:                     }
1:e01a937:                 }
1:edd8166:             });
1:edd8166: 
1:edd8166:             Set<ActiveMQQueue> queues = source.getQueues();
1:edd8166:             for (ActiveMQQueue queue : queues) {
1:edd8166:                 addQueue(queue);
1:26eedea:             }
1:e01a937: 
1:edd8166:             Set<ActiveMQTopic> topics = source.getTopics();
1:edd8166:             for (ActiveMQTopic topic : topics) {
1:edd8166:                 addTopic(topic);
1:edd8166:             }
1:e01a937:         }
1:26eedea:     }
1:26eedea: 
1:26eedea:     // Properties
1:26eedea:     //-------------------------------------------------------------------------
1:174fe15:     @Override
1:fb0e159:     public CamelContext getCamelContext() {
1:fb0e159:         return camelContext;
1:26eedea:     }
1:26eedea: 
1:174fe15:     @Override
1:fb0e159:     public void setCamelContext(CamelContext camelContext) {
1:fb0e159:         this.camelContext = camelContext;
1:26eedea:     }
1:26eedea: 
1:fb0e159:     public ActiveMQComponent getComponent() {
1:fb0e159:         if (component == null) {
1:fb0e159:             component = camelContext.getComponent("activemq", ActiveMQComponent.class);
1:26eedea:         }
1:fb0e159:         return component;
1:26eedea:     }
1:fb0e159: 
1:fb0e159:     public void setComponent(ActiveMQComponent component) {
1:fb0e159:         this.component = component;
1:26eedea:     }
1:fb0e159: 
1:26eedea:     // Implementation methods
1:26eedea:     //-------------------------------------------------------------------------
1:fb0e159: 
1:fb0e159:     protected void addQueue(ActiveMQQueue queue) throws Exception {
1:fb0e159:         String queueUri = getQueueUri(queue);
1:fb0e159:         ActiveMQComponent jmsComponent = getComponent();
1:26eedea:         Endpoint endpoint = new JmsQueueEndpoint(queueUri, jmsComponent, queue.getPhysicalName(), jmsComponent.getConfiguration());
1:e24a791:         camelContext.addEndpoint(queueUri, endpoint);
1:26eedea:     }
1:e01a937: 
1:fb0e159:     protected String getQueueUri(ActiveMQQueue queue) {
1:fb0e159:         return "activemq:" + queue.getPhysicalName();
1:26eedea:     }
1:fb0e159: 
1:fb0e159:     protected void removeQueue(ActiveMQQueue queue) throws Exception {
1:fb0e159:         String queueUri = getQueueUri(queue);
1:623da6f:         // lur cache of endpoints so they will disappear in time
1:623da6f:         // this feature needs a new component api - list available endpoints
1:3e895c6:         camelContext.removeEndpoints(queueUri);
1:26eedea:     }
1:3e895c6: 
1:e01a937:     protected void addTopic(ActiveMQTopic topic) throws Exception {
1:e01a937:         String topicUri = getTopicUri(topic);
1:e01a937:         ActiveMQComponent jmsComponent = getComponent();
1:e01a937:         Endpoint endpoint = new JmsEndpoint(topicUri, jmsComponent, topic.getPhysicalName(), true, jmsComponent.getConfiguration());
1:e01a937:         camelContext.addEndpoint(topicUri, endpoint);
1:e01a937:     }
1:e01a937: 
1:e01a937:     protected String getTopicUri(ActiveMQTopic topic) {
1:e01a937:         return "activemq:topic:" + topic.getPhysicalName();
1:e01a937:     }
1:e01a937: 
1:e01a937:     protected void removeTopic(ActiveMQTopic topic) throws Exception {
1:e01a937:         String topicUri = getTopicUri(topic);
1:623da6f:         // lur cache of endpoints so they will disappear in time
1:623da6f:         // this feature needs a new component api - list available endpoints
1:3e895c6:         camelContext.removeEndpoints(topicUri);
1:e01a937:     }
1:26eedea: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change
1:      *
1:      * fix: AMQ-4676
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:3e895c6
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         camelContext.removeEndpoints(queueUri);
1: 
/////////////////////////////////////////////////////////////////////////
1:         camelContext.removeEndpoints(topicUri);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:edd8166
/////////////////////////////////////////////////////////////////////////
1:         if (source != null) {
1:             source.setDestinationListener(new DestinationListener() {
1:                 public void onDestinationEvent(DestinationEvent event) {
1:                     try {
1:                         ActiveMQDestination destination = event.getDestination();
1:                         if (destination instanceof ActiveMQQueue) {
1:                             ActiveMQQueue queue = (ActiveMQQueue) destination;
1:                             if (event.isAddOperation()) {
1:                                 addQueue(queue);
1:                             } else {
1:                                 removeQueue(queue);
1:                             }
1:                         } else if (destination instanceof ActiveMQTopic) {
1:                             ActiveMQTopic topic = (ActiveMQTopic) destination;
1:                             if (event.isAddOperation()) {
1:                                 addTopic(topic);
1:                             } else {
1:                                 removeTopic(topic);
1:                             }
1:                     } catch (Exception e) {
1:                         LOG.warn("Caught: " + e, e);
1:             });
1: 
1:             Set<ActiveMQQueue> queues = source.getQueues();
1:             for (ActiveMQQueue queue : queues) {
1:                 addQueue(queue);
1:             Set<ActiveMQTopic> topics = source.getTopics();
1:             for (ActiveMQTopic topic : topics) {
1:                 addTopic(topic);
1:             }
commit:b2a91b9
/////////////////////////////////////////////////////////////////////////
1:     DestinationSource source;
1:     public CamelEndpointLoader(CamelContext camelContext, DestinationSource source) {
1:         this.source = source;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(CamelEndpointLoader.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:623da6f
/////////////////////////////////////////////////////////////////////////
1:         // lur cache of endpoints so they will disappear in time
1:         // this feature needs a new component api - list available endpoints
0:         //camelContext.removeEndpoints(queueUri);
/////////////////////////////////////////////////////////////////////////
1:         // lur cache of endpoints so they will disappear in time
1:         // this feature needs a new component api - list available endpoints
0:         //camelContext.removeEndpoints(topicUri);
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
0: import javax.annotation.PreDestroy;
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
1: public class CamelEndpointLoader implements CamelContextAware {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      *
0:      * @throws Exception
0:      * @org.apache.xbean.DestroyMethod
1:      */
0:     @PreDestroy
author:James Strachan
-------------------------------------------------------------------------------
commit:e01a937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.camel.component.jms.JmsEndpoint;
/////////////////////////////////////////////////////////////////////////
0:                     else if (destination instanceof ActiveMQTopic) {
0:                       ActiveMQTopic topic = (ActiveMQTopic) destination;
0:                       if (event.isAddOperation()) {
0:                           addTopic(topic);
1:                       }
0:                       else {
0:                           removeTopic(topic);
1:                       }
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
0:         Set<ActiveMQTopic> topics = source.getTopics();
0:         for (ActiveMQTopic topic : topics) {
0:             addTopic(topic);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void addTopic(ActiveMQTopic topic) throws Exception {
1:         String topicUri = getTopicUri(topic);
1:         ActiveMQComponent jmsComponent = getComponent();
1:         Endpoint endpoint = new JmsEndpoint(topicUri, jmsComponent, topic.getPhysicalName(), true, jmsComponent.getConfiguration());
1:         camelContext.addEndpoint(topicUri, endpoint);
1:     }
1: 
1:     protected String getTopicUri(ActiveMQTopic topic) {
1:         return "activemq:topic:" + topic.getPhysicalName();
1:     }
1: 
1:     protected void removeTopic(ActiveMQTopic topic) throws Exception {
1:         String topicUri = getTopicUri(topic);
0:         camelContext.removeEndpoints(topicUri);
1:     }
commit:e24a791
/////////////////////////////////////////////////////////////////////////
1:         camelContext.addEndpoint(queueUri, endpoint);
/////////////////////////////////////////////////////////////////////////
0:         camelContext.removeEndpoints(queueUri);
commit:d35f83b
/////////////////////////////////////////////////////////////////////////
commit:53756f3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.EnhancedConnection;
/////////////////////////////////////////////////////////////////////////
0:     private EnhancedConnection connection;
/////////////////////////////////////////////////////////////////////////
0:             if (value instanceof EnhancedConnection) {
0:                 connection = (EnhancedConnection) value;
0:                 throw new IllegalArgumentException("Created JMS Connection is not an EnhancedConnection: " + value);
/////////////////////////////////////////////////////////////////////////
0:     public EnhancedConnection getConnection() {
commit:26eedea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.component.jms.JmsQueueEndpoint;
0: import org.springframework.beans.factory.DisposableBean;
1:  *
0: public class CamelEndpointLoader implements InitializingBean, DisposableBean, CamelContextAware {
/////////////////////////////////////////////////////////////////////////
1:     public void afterPropertiesSet() throws Exception {
0:         ObjectHelper.notNull(camelContext, "camelContext");
0:         if (connection == null) {
0:             Connection value = getConnectionFactory().createConnection();
0:             if (value instanceof ActiveMQConnection) {
0:                 connection = (ActiveMQConnection) value;
1:             }
0:             else {
0:                 throw new IllegalArgumentException("Created JMS Connection is not an ActiveMQConnection: " + value);
1:             }
1:         }
0:         connection.start();
0:         DestinationSource source = connection.getDestinationSource();
0:         source.setDestinationListener(new DestinationListener() {
0:             public void onDestinationEvent(DestinationEvent event) {
0:                 try {
0:                     ActiveMQDestination destination = event.getDestination();
0:                     if (destination instanceof ActiveMQQueue) {
0:                         ActiveMQQueue queue = (ActiveMQQueue) destination;
0:                         if (event.isAddOperation()) {
0:                             addQueue(queue);
1:                         }
0:                         else {
0:                             removeQueue(queue);
1:                         }
1:                     }
1:                 }
0:                 catch (Exception e) {
0:                     LOG.warn("Caught: " + e, e);
1:                 }
1:             }
0:         });
1: 
0:         Set<ActiveMQQueue> queues = source.getQueues();
0:         for (ActiveMQQueue queue : queues) {
0:             addQueue(queue);
1:         }
1:     }
1: 
0:     public void destroy() throws Exception {
0:         if (connection != null) {
0:             connection.close();
0:             connection = null;
1:         }
1:     }
1: 
1:     // Properties
1:     //-------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:     // Implementation methods
1:     //-------------------------------------------------------------------------
1:         Endpoint endpoint = new JmsQueueEndpoint(queueUri, jmsComponent, queue.getPhysicalName(), jmsComponent.getConfiguration());
commit:fb0e159
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import java.util.Set;
1: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: 
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.advisory.DestinationEvent;
1: import org.apache.activemq.advisory.DestinationListener;
1: import org.apache.activemq.advisory.DestinationSource;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.CamelContextAware;
1: import org.apache.camel.Endpoint;
0: import org.apache.camel.component.jms.JmsEndpoint;
0: import org.apache.camel.util.ObjectHelper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: /**
1:  * A helper bean which populates a {@link CamelContext} with ActiveMQ Queue endpoints
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class CamelEndpointLoader implements InitializingBean, CamelContextAware {
0:     private static final transient Log LOG = LogFactory.getLog(CamelEndpointLoader.class);
1:     private CamelContext camelContext;
0:     private ActiveMQConnection connection;
0:     private ConnectionFactory connectionFactory;
1:     private ActiveMQComponent component;
1: 
1:     public CamelEndpointLoader() {
0:     }
1: 
0:     public CamelEndpointLoader(CamelContext camelContext) {
1:         this.camelContext = camelContext;
0:     }
1: 
1:     public CamelContext getCamelContext() {
1:         return camelContext;
0:     }
1: 
1:     public void setCamelContext(CamelContext camelContext) {
1:         this.camelContext = camelContext;
0:     }
1: 
0:     public ActiveMQConnection getConnection() {
0:         return connection;
0:     }
1: 
0:     public ConnectionFactory getConnectionFactory() {
0:         if (connectionFactory == null) {
0:             connectionFactory = getComponent().getConfiguration().createConnectionFactory();
0:         }
0:         return connectionFactory;
0:     }
1: 
0:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
0:         this.connectionFactory = connectionFactory;
0:     }
1: 
1:     public ActiveMQComponent getComponent() {
1:         if (component == null) {
1:             component = camelContext.getComponent("activemq", ActiveMQComponent.class);
0:         }
1:         return component;
0:     }
1: 
1:     public void setComponent(ActiveMQComponent component) {
1:         this.component = component;
0:     }
1: 
0:     public void afterPropertiesSet() throws Exception {
0:         ObjectHelper.notNull(camelContext, "camelContext");
0:         if (connection == null) {
0:             Connection value = getConnectionFactory().createConnection();
0:             if (value instanceof ActiveMQConnection) {
0:                 connection = (ActiveMQConnection) value;
0:             }
0:             else {
0:                 throw new IllegalArgumentException("Created JMS Connection is not an ActiveMQConnection: " + value);
0:             }
0:         }
0:         DestinationSource source = connection.getDestinationSource();
0:         source.setDestinationListener(new DestinationListener() {
0:             public void onDestinationEvent(DestinationEvent event) {
0:                 try {
0:                     ActiveMQDestination destination = event.getDestination();
0:                     if (destination instanceof ActiveMQQueue) {
0:                         ActiveMQQueue queue = (ActiveMQQueue) destination;
0:                         if (event.isAddOperation()) {
0:                             addQueue(queue);
0:                         }
0:                         else {
0:                             removeQueue(queue);
0:                         }
0:                     }
0:                 }
0:                 catch (Exception e) {
0:                     LOG.warn("Caught: " + e, e);
0:                 }
0:             }
0:         });
1: 
0:         Set<ActiveMQQueue> queues = source.getQueues();
0:         for (ActiveMQQueue queue : queues) {
0:             addQueue(queue);
0:         }
0:     }
1: 
1:     protected void addQueue(ActiveMQQueue queue) throws Exception {
1:         String queueUri = getQueueUri(queue);
1:         ActiveMQComponent jmsComponent = getComponent();
0:         Endpoint endpoint = new JmsEndpoint(queueUri, jmsComponent, queue.getPhysicalName(), false, jmsComponent.getConfiguration());
0:         camelContext.addSingletonEndpoint(queueUri, endpoint);
0:     }
1: 
1:     protected String getQueueUri(ActiveMQQueue queue) {
1:         return "activemq:" + queue.getPhysicalName();
0:     }
1: 
1:     protected void removeQueue(ActiveMQQueue queue) throws Exception {
1:         String queueUri = getQueueUri(queue);
0:         camelContext.removeSingletonEndpoint(queueUri);
0:     }
0: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:Robert Davies
-------------------------------------------------------------------------------
commit:e40e2ac
/////////////////////////////////////////////////////////////////////////
0:         if (connectionFactory == null
0:                 && getComponent().getConfiguration() instanceof ActiveMQConfiguration) {
0:             connectionFactory = ((ActiveMQConfiguration) getComponent()
0:                     .getConfiguration()).createConnectionFactory();
============================================================================