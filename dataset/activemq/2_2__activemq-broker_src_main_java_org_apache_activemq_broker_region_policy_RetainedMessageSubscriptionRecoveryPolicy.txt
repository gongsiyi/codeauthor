1:bcb60a4: /**
1:bcb60a4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bcb60a4:  * contributor license agreements.  See the NOTICE file distributed with
1:bcb60a4:  * this work for additional information regarding copyright ownership.
1:bcb60a4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bcb60a4:  * (the "License"); you may not use this file except in compliance with
1:bcb60a4:  * the License.  You may obtain a copy of the License at
1:bcb60a4:  *
1:bcb60a4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bcb60a4:  *
1:bcb60a4:  * Unless required by applicable law or agreed to in writing, software
1:bcb60a4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bcb60a4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bcb60a4:  * See the License for the specific language governing permissions and
1:bcb60a4:  * limitations under the License.
1:bcb60a4:  */
1:bcb60a4: package org.apache.activemq.broker.region.policy;
1:bcb60a4: 
1:bcb60a4: import java.util.ArrayList;
1:5576dc5: import java.util.Arrays;
1:bcb60a4: import java.util.List;
1:bcb60a4: 
1:bcb60a4: import org.apache.activemq.broker.Broker;
1:bcb60a4: import org.apache.activemq.broker.ConnectionContext;
1:42ad103: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:bcb60a4: import org.apache.activemq.broker.region.MessageReference;
1:bcb60a4: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:bcb60a4: import org.apache.activemq.broker.region.Topic;
1:bcb60a4: import org.apache.activemq.command.ActiveMQDestination;
1:bcb60a4: import org.apache.activemq.command.Message;
1:bcb60a4: import org.apache.activemq.filter.DestinationFilter;
1:bcb60a4: 
1:bcb60a4: /**
1:bcb60a4:  * This implementation of {@link org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy} will only keep the
1:bcb60a4:  * last non-zero length message with the {@link org.apache.activemq.command.ActiveMQMessage}.RETAIN_PROPERTY.
1:bcb60a4:  *
1:bcb60a4:  * @org.apache.xbean.XBean
1:bcb60a4:  *
1:bcb60a4:  */
1:bcb60a4: public class RetainedMessageSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:bcb60a4: 
1:a581d01:     public static final String RETAIN_PROPERTY = "ActiveMQ.Retain";
1:a581d01:     public static final String RETAINED_PROPERTY = "ActiveMQ.Retained";
1:bcb60a4:     private volatile MessageReference retainedMessage;
1:bcb60a4:     private SubscriptionRecoveryPolicy wrapped;
1:bcb60a4: 
1:bcb60a4:     public RetainedMessageSubscriptionRecoveryPolicy(SubscriptionRecoveryPolicy wrapped) {
1:bcb60a4:         this.wrapped = wrapped;
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:bcb60a4:         final Message message = node.getMessage();
1:bcb60a4:         final Object retainValue = message.getProperty(RETAIN_PROPERTY);
1:bcb60a4:         // retain property set to true
1:bcb60a4:         final boolean retain = retainValue != null && Boolean.parseBoolean(retainValue.toString());
1:bcb60a4:         if (retain) {
1:bcb60a4:             if (message.getContent().getLength() > 0) {
1:bcb60a4:                 // non zero length message content
1:bcb60a4:                 retainedMessage = message.copy();
1:c915b19:                 retainedMessage.getMessage().removeProperty(RETAIN_PROPERTY);
1:bcb60a4:                 retainedMessage.getMessage().setProperty(RETAINED_PROPERTY, true);
1:bcb60a4:             } else {
1:bcb60a4:                 // clear retained message
1:bcb60a4:                 retainedMessage = null;
1:bcb60a4:             }
1:bcb60a4:             // TODO should we remove the publisher's retain property??
1:bcb60a4:             node.getMessage().removeProperty(RETAIN_PROPERTY);
1:bcb60a4:         }
1:bcb60a4:         return wrapped == null ? true : wrapped.add(context, node);
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:bcb60a4:         // Re-dispatch the last retained message seen.
1:bcb60a4:         if (retainedMessage != null) {
1:bcb60a4:             sub.addRecoveredMessage(context, retainedMessage);
1:bcb60a4:         }
1:bcb60a4:         if (wrapped != null) {
1:42ad103:             // retain default ActiveMQ behaviour of recovering messages only for empty durable subscriptions
1:42ad103:             boolean recover = true;
1:42ad103:             if (sub instanceof DurableTopicSubscription && !((DurableTopicSubscription)sub).isEmpty(topic)) {
1:42ad103:                 recover = false;
1:42ad103:             }
1:42ad103:             if (recover) {
1:42ad103:                 wrapped.recover(context, topic, sub);
1:42ad103:             }
1:bcb60a4:         }
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public void start() throws Exception {
1:3ba1295:         if (wrapped != null) {
1:3ba1295:             wrapped.start();
1:3ba1295:         }
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public void stop() throws Exception {
1:3ba1295:         if (wrapped != null) {
1:3ba1295:             wrapped.stop();
1:3ba1295:         }
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:5576dc5:         final List<Message> result = new ArrayList<Message>();
1:bcb60a4:         if (retainedMessage != null) {
1:bcb60a4:             DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:bcb60a4:             if (filter.matches(retainedMessage.getMessage().getDestination())) {
1:bcb60a4:                 result.add(retainedMessage.getMessage());
1:bcb60a4:             }
1:bcb60a4:         }
1:5576dc5:         Message[] messages = result.toArray(new Message[result.size()]);
1:5576dc5:         if (wrapped != null) {
1:5576dc5:             final Message[] wrappedMessages = wrapped.browse(destination);
1:5576dc5:             if (wrappedMessages != null && wrappedMessages.length > 0) {
1:5576dc5:                 final int origLen = messages.length;
1:5576dc5:                 messages = Arrays.copyOf(messages, origLen + wrappedMessages.length);
1:5576dc5:                 System.arraycopy(wrappedMessages, 0, messages, origLen, wrappedMessages.length);
1:5576dc5:             }
1:5576dc5:         }
1:5576dc5:         return messages;
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public SubscriptionRecoveryPolicy copy() {
1:bcb60a4:         return new RetainedMessageSubscriptionRecoveryPolicy(wrapped);
1:bcb60a4:     }
1:bcb60a4:     
1:bcb60a4:     public void setBroker(Broker broker) {        
1:bcb60a4:     }
1:bcb60a4: 
1:bcb60a4:     public void setWrapped(SubscriptionRecoveryPolicy wrapped) {
1:bcb60a4:         this.wrapped = wrapped;
1:bcb60a4:     }
1:bcb60a4: 
1:aa2dfb6:     public SubscriptionRecoveryPolicy getWrapped() {
1:aa2dfb6:         return wrapped;
1:aa2dfb6:     }
1:bcb60a4: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:aa2dfb6
/////////////////////////////////////////////////////////////////////////
1:     public SubscriptionRecoveryPolicy getWrapped() {
1:         return wrapped;
1:     }
commit:3ba1295
/////////////////////////////////////////////////////////////////////////
1:         if (wrapped != null) {
1:             wrapped.start();
1:         }
1:         if (wrapped != null) {
1:             wrapped.stop();
1:         }
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:42ad103
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:             // retain default ActiveMQ behaviour of recovering messages only for empty durable subscriptions
1:             boolean recover = true;
1:             if (sub instanceof DurableTopicSubscription && !((DurableTopicSubscription)sub).isEmpty(topic)) {
1:                 recover = false;
1:             }
1:             if (recover) {
1:                 wrapped.recover(context, topic, sub);
1:             }
commit:c915b19
/////////////////////////////////////////////////////////////////////////
1:                 retainedMessage.getMessage().removeProperty(RETAIN_PROPERTY);
commit:5576dc5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:         final List<Message> result = new ArrayList<Message>();
1:         Message[] messages = result.toArray(new Message[result.size()]);
1:         if (wrapped != null) {
1:             final Message[] wrappedMessages = wrapped.browse(destination);
1:             if (wrappedMessages != null && wrappedMessages.length > 0) {
1:                 final int origLen = messages.length;
1:                 messages = Arrays.copyOf(messages, origLen + wrappedMessages.length);
1:                 System.arraycopy(wrappedMessages, 0, messages, origLen, wrappedMessages.length);
1:             }
1:         }
1:         return messages;
commit:a581d01
/////////////////////////////////////////////////////////////////////////
1:     public static final String RETAIN_PROPERTY = "ActiveMQ.Retain";
1:     public static final String RETAINED_PROPERTY = "ActiveMQ.Retained";
commit:bcb60a4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationFilter;
1: 
1: /**
1:  * This implementation of {@link org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy} will only keep the
1:  * last non-zero length message with the {@link org.apache.activemq.command.ActiveMQMessage}.RETAIN_PROPERTY.
1:  *
1:  * @org.apache.xbean.XBean
1:  *
1:  */
1: public class RetainedMessageSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
0:     public static final String RETAIN_PROPERTY = "ActiveMQRetain";
0:     public static final String RETAINED_PROPERTY = "ActiveMQRetained";
1:     private volatile MessageReference retainedMessage;
1:     private SubscriptionRecoveryPolicy wrapped;
1: 
1:     public RetainedMessageSubscriptionRecoveryPolicy(SubscriptionRecoveryPolicy wrapped) {
1:         this.wrapped = wrapped;
1:     }
1: 
1:     public boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:         final Message message = node.getMessage();
1:         final Object retainValue = message.getProperty(RETAIN_PROPERTY);
1:         // retain property set to true
1:         final boolean retain = retainValue != null && Boolean.parseBoolean(retainValue.toString());
1:         if (retain) {
1:             if (message.getContent().getLength() > 0) {
1:                 // non zero length message content
1:                 retainedMessage = message.copy();
1:                 retainedMessage.getMessage().setProperty(RETAINED_PROPERTY, true);
1:             } else {
1:                 // clear retained message
1:                 retainedMessage = null;
1:             }
1:             // TODO should we remove the publisher's retain property??
1:             node.getMessage().removeProperty(RETAIN_PROPERTY);
1:         }
1:         return wrapped == null ? true : wrapped.add(context, node);
1:     }
1: 
1:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:         // Re-dispatch the last retained message seen.
1:         if (retainedMessage != null) {
1:             sub.addRecoveredMessage(context, retainedMessage);
1:         }
1:         if (wrapped != null) {
0:             wrapped.recover(context, topic, sub);
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1:     public Message[] browse(ActiveMQDestination destination) throws Exception {
0:         List<Message> result = new ArrayList<Message>();
1:         if (retainedMessage != null) {
1:             DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:             if (filter.matches(retainedMessage.getMessage().getDestination())) {
1:                 result.add(retainedMessage.getMessage());
1:             }
1:         }
0:         return result.toArray(new Message[result.size()]);
1:     }
1: 
1:     public SubscriptionRecoveryPolicy copy() {
1:         return new RetainedMessageSubscriptionRecoveryPolicy(wrapped);
1:     }
1:     
1:     public void setBroker(Broker broker) {        
1:     }
1: 
1:     public void setWrapped(SubscriptionRecoveryPolicy wrapped) {
1:         this.wrapped = wrapped;
1:     }
1: 
1: }
============================================================================