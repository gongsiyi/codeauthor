1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
1:d29ca2a: 
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:7308396: 
1:49e8a80: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: 
1:74a7a8b: import org.apache.activemq.Service;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A Destination bridge is used to bridge between to different JMS systems
1:d29ca2a:  */
1:fbad105: public abstract class DestinationBridge implements Service, MessageListener {
1:7308396: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DestinationBridge.class);
1:bc78238: 
1:d29ca2a:     protected MessageConsumer consumer;
1:fbad105:     protected AtomicBoolean started = new AtomicBoolean(false);
1:d29ca2a:     protected JmsMesageConvertor jmsMessageConvertor;
1:d29ca2a:     protected boolean doHandleReplyTo = true;
1:49e8a80:     protected JmsConnector jmsConnector;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the consumer.
1:d29ca2a:      */
1:fbad105:     public MessageConsumer getConsumer() {
1:d29ca2a:         return consumer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:74a7a8b:      * @param consumer The consumer to set.
1:d29ca2a:      */
1:fbad105:     public void setConsumer(MessageConsumer consumer) {
1:fbad105:         this.consumer = consumer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:49e8a80:      * @param connector
1:d29ca2a:      */
1:fbad105:     public void setJmsConnector(JmsConnector connector) {
1:49e8a80:         this.jmsConnector = connector;
5:28647f1:     }
1:bc78238: 
1:49e8a80:     /**
1:6ea186c:      * @return Returns the inboundMessageConvertor.
1:49e8a80:      */
1:fbad105:     public JmsMesageConvertor getJmsMessageConvertor() {
1:d29ca2a:         return jmsMessageConvertor;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param jmsMessageConvertor
1:d29ca2a:      */
1:fbad105:     public void setJmsMessageConvertor(JmsMesageConvertor jmsMessageConvertor) {
1:fbad105:         this.jmsMessageConvertor = jmsMessageConvertor;
1:d29ca2a:     }
1:d29ca2a: 
1:fbad105:     protected Destination processReplyToDestination(Destination destination) {
1:ef0127d:         return jmsConnector.createReplyToBridge(destination, getConnnectionForConsumer(), getConnectionForProducer());
1:d29ca2a:     }
1:1c26c9a: 
1:505916b:     @Override
1:fbad105:     public void start() throws Exception {
1:fbad105:         if (started.compareAndSet(false, true)) {
1:bc78238:             createConsumer();
1:d29ca2a:             createProducer();
1:86cbdfd:         }
1:d29ca2a:     }
1:d29ca2a: 
1:505916b:     @Override
1:fbad105:     public void stop() throws Exception {
1:d29ca2a:         started.set(false);
1:d29ca2a:     }
1:d29ca2a: 
1:505916b:     @Override
1:fbad105:     public void onMessage(Message message) {
1:bc78238: 
1:1c26c9a:         int attempt = 0;
1:bc78238:         final int maxRetries = jmsConnector.getReconnectionPolicy().getMaxSendRetries();
1:bc78238: 
1:505916b:         while (started.get() && message != null && (maxRetries == ReconnectionPolicy.INFINITE || attempt <= maxRetries)) {
1:bc78238: 
2:fbad105:             try {
1:bc78238: 
1:7308396:                 if (attempt++ > 0) {
1:bc78238:                     try {
1:bc78238:                         Thread.sleep(jmsConnector.getReconnectionPolicy().getNextDelay(attempt));
1:bc78238:                     } catch(InterruptedException e) {
1:bc78238:                         break;
1:d29ca2a:                     }
1:bc78238:                 }
1:bc78238: 
1:28647f1:                 Message converted;
1:bc78238:                 if (jmsMessageConvertor != null) {
1:bc78238:                     if (doHandleReplyTo) {
1:bc78238:                         Destination replyTo = message.getJMSReplyTo();
1:bc78238:                         if (replyTo != null) {
1:bc78238:                             converted = jmsMessageConvertor.convert(message, processReplyToDestination(replyTo));
1:74a7a8b:                         } else {
1:bc78238:                             converted = jmsMessageConvertor.convert(message);
1:bc78238:                         }
1:74a7a8b:                     } else {
1:d29ca2a:                         message.setJMSReplyTo(null);
2:28647f1:                         converted = jmsMessageConvertor.convert(message);
1:d29ca2a:                     }
1:bc78238:                 } else {
1:bc78238:                     // The Producer side is not up or not yet configured, retry.
1:bc78238:                     continue;
1:bc78238:                 }
1:bc78238: 
1:bc78238:                 try {
1:d29ca2a:                     sendMessage(converted);
1:bc78238:                 } catch(Exception e) {
1:bc78238:                     jmsConnector.handleConnectionFailure(getConnectionForProducer());
1:bc78238:                     continue;
1:bc78238:                 }
1:bc78238: 
1:bc78238:                 try {
1:d29ca2a:                     message.acknowledge();
1:bc78238:                 } catch(Exception e) {
1:bc78238:                     jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:bc78238:                     continue;
1:d29ca2a:                 }
1:d29ca2a: 
1:bc78238:                 // if we got here then it made it out and was ack'd
1:1c26c9a:                 return;
1:bc78238: 
1:74a7a8b:             } catch (Exception e) {
1:e1bbde7:                 LOG.info("failed to forward message on attempt: {} reason: {} message: {}", new Object[]{ attempt, e, message }, e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:bc78238: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the doHandleReplyTo.
1:d29ca2a:      */
1:dcc7b11:     public boolean isDoHandleReplyTo() {
1:d29ca2a:         return doHandleReplyTo;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:74a7a8b:      * @param doHandleReplyTo The doHandleReplyTo to set.
1:d29ca2a:      */
1:dcc7b11:     public void setDoHandleReplyTo(boolean doHandleReplyTo) {
1:fbad105:         this.doHandleReplyTo = doHandleReplyTo;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected abstract MessageConsumer createConsumer() throws JMSException;
1:d29ca2a: 
1:d29ca2a:     protected abstract MessageProducer createProducer() throws JMSException;
1:d29ca2a: 
1:d29ca2a:     protected abstract void sendMessage(Message message) throws JMSException;
1:d29ca2a: 
1:ef0127d:     protected abstract Connection getConnnectionForConsumer();
1:d29ca2a: 
1:ef0127d:     protected abstract Connection getConnectionForProducer();
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:505916b
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         while (started.get() && message != null && (maxRetries == ReconnectionPolicy.INFINITE || attempt <= maxRetries)) {
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("failed to forward message on attempt: {} reason: {} message: {}", new Object[]{ attempt, e, message }, e);
author:mfrazier
-------------------------------------------------------------------------------
commit:dcc7b11
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDoHandleReplyTo() {
1:     public void setDoHandleReplyTo(boolean doHandleReplyTo) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DestinationBridge.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("failed to forward message on attempt: " + (++attempt) + " reason: " + e + " message: " + message, e);
0:                         LOG.warn("Failed to stop cleanly", e1);
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("Ignoring failure to close producer connection: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param consumer The consumer to set.
/////////////////////////////////////////////////////////////////////////
1:                     } else {
1:                 } else {
1:             } catch (Exception e) {
0:                     } catch (Exception e1) {
/////////////////////////////////////////////////////////////////////////
1:      * @param doHandleReplyTo The doHandleReplyTo to set.
/////////////////////////////////////////////////////////////////////////
0:         } catch (Exception e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: 
0: import org.apache.activemq.Service;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: /**
1:  * A Destination bridge is used to bridge between to different JMS systems
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: abstract class DestinationBridge implements Service,MessageListener{
0:     private static final Log log=LogFactory.getLog(DestinationBridge.class);
1:     protected MessageConsumer consumer;
0:     protected AtomicBoolean started=new AtomicBoolean(false);
1:     protected JmsMesageConvertor jmsMessageConvertor;
1:     protected boolean doHandleReplyTo = true;
1: 
1:     /**
1:      * @return Returns the consumer.
1:      */
0:     public MessageConsumer getConsumer(){
1:         return consumer;
1:     }
1: 
1:     /**
0:      * @param consumer
0:      *            The consumer to set.
1:      */
0:     public void setConsumer(MessageConsumer consumer){
0:         this.consumer=consumer;
1:     }
1: 
1:     /**
0:      * @return Returns the jmsMessageConvertor.
1:      */
0:     public JmsMesageConvertor getJmsMessageConvertor(){
1:         return jmsMessageConvertor;
1:     }
1: 
1:     /**
1:      * @param jmsMessageConvertor
0:      *            The jmsMessageConvertor to set.
1:      */
0:     public void setJmsMessageConvertor(JmsMesageConvertor jmsMessageConvertor){
0:         this.jmsMessageConvertor=jmsMessageConvertor;
1:     }
1: 
0:     public void start() throws Exception{
0:         if(started.compareAndSet(false,true)){
0:             MessageConsumer consumer=createConsumer();
0:             consumer.setMessageListener(this);
1:             createProducer();
1:         }
1:     }
1: 
0:     public void stop() throws Exception{
1:         started.set(false);
1:     }
1: 
0:     public void onMessage(Message message){
0:         if(started.get()&&message!=null){
0:             try{
0:                 if(doHandleReplyTo){
0:                     Destination replyTo=message.getJMSReplyTo();
0:                     if(replyTo!=null){
0:                         replyTo=processReplyToDestination(replyTo);
0:                         message.setJMSReplyTo(replyTo);
1:                     }
0:                 }else {
1:                     message.setJMSReplyTo(null);
1:                 }
0:                 Message converted=jmsMessageConvertor.convert(message);
1:                 sendMessage(converted);
1:                 message.acknowledge();
0:             }catch(JMSException e){
0:                 log.error("failed to forward message: "+message,e);
0:                 try{
0:                     stop();
0:                 }catch(Exception e1){
0:                     log.warn("Failed to stop cleanly",e1);
1:                 }
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * @return Returns the doHandleReplyTo.
1:      */
0:     protected boolean isDoHandleReplyTo(){
1:         return doHandleReplyTo;
1:     }
1: 
1:     /**
0:      * @param doHandleReplyTo The doHandleReplyTo to set.
1:      */
0:     protected void setDoHandleReplyTo(boolean doHandleReplyTo){
0:         this.doHandleReplyTo=doHandleReplyTo;
1:     }
1: 
1:     protected abstract MessageConsumer createConsumer() throws JMSException;
1: 
1:     protected abstract MessageProducer createProducer() throws JMSException;
1: 
1:     protected abstract void sendMessage(Message message) throws JMSException;
1: 
0:     protected abstract Destination processReplyToDestination(Destination destination);
1: 
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7308396
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         while (started.get() && message != null && attempt <= maxRetries) {
1:                 if (attempt++ > 0) {
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             createConsumer();
/////////////////////////////////////////////////////////////////////////
1: 
1:         final int maxRetries = jmsConnector.getReconnectionPolicy().getMaxSendRetries();
1: 
0:         while (started.get() && message != null && ++attempt <= maxRetries) {
1: 
1: 
1:                     try {
1:                         Thread.sleep(jmsConnector.getReconnectionPolicy().getNextDelay(attempt));
1:                     } catch(InterruptedException e) {
1:                         break;
1:                     }
1: 
1:                 if (jmsMessageConvertor != null) {
1:                     if (doHandleReplyTo) {
1:                         Destination replyTo = message.getJMSReplyTo();
1:                         if (replyTo != null) {
1:                             converted = jmsMessageConvertor.convert(message, processReplyToDestination(replyTo));
1:                         } else {
1:                             converted = jmsMessageConvertor.convert(message);
1:                         }
0:                         message.setJMSReplyTo(null);
1:                     // The Producer side is not up or not yet configured, retry.
1:                     continue;
1: 
1:                 try {
0:                     sendMessage(converted);
1:                 } catch(Exception e) {
1:                     jmsConnector.handleConnectionFailure(getConnectionForProducer());
1:                     continue;
1:                 }
1: 
1:                 try {
0:                     message.acknowledge();
1:                 } catch(Exception e) {
1:                     jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:                     continue;
1:                 }
1: 
1:                 // if we got here then it made it out and was ack'd
1: 
0:                 LOG.info("failed to forward message on attempt: " + attempt +
0:                          " reason: " + e + " message: " + message, e);
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DestinationBridge.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1c26c9a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int attempt = 0;
0:         while (started.get() && message != null) {
1:            
/////////////////////////////////////////////////////////////////////////
1:                 return;
/////////////////////////////////////////////////////////////////////////
0:             //don't reconnect immediately
0:             Thread.sleep(1000);
commit:28647f1
/////////////////////////////////////////////////////////////////////////
0: public abstract class DestinationBridge implements Service,MessageListener{
/////////////////////////////////////////////////////////////////////////
0:     
0:     	if(started.get()&&message!=null){
0:     		try{
1:     			Message converted;
0:     			if(doHandleReplyTo){
0:     				Destination replyTo = message.getJMSReplyTo();
0:     				if(replyTo != null){
0:     					converted = jmsMessageConvertor.convert(message, processReplyToDestination(replyTo));
0:     				} else {
1:     					converted = jmsMessageConvertor.convert(message);
1:     				}
0:     			} else {
0:     				message.setJMSReplyTo(null);
1:     				converted = jmsMessageConvertor.convert(message);
1:     			}				
0:     			sendMessage(converted);
0:     			message.acknowledge();
0:     		}catch(JMSException e){
0:     			log.error("failed to forward message: "+message,e);
0:     			try{
0:     				stop();
0:     			}catch(Exception e1){
0:     				log.warn("Failed to stop cleanly",e1);
1:     			}
1:     		}
1:     	}
0: 
commit:ef0127d
/////////////////////////////////////////////////////////////////////////
1:         return jmsConnector.createReplyToBridge(destination, getConnnectionForConsumer(), getConnectionForProducer());
/////////////////////////////////////////////////////////////////////////
1:     protected abstract Connection getConnnectionForConsumer();
1:     protected abstract Connection getConnectionForProducer();
commit:49e8a80
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
1:     protected JmsConnector jmsConnector;
/////////////////////////////////////////////////////////////////////////
1:      * @param connector
1:      */
0:     public void setJmsConnector(JmsConnector connector){
1:         this.jmsConnector = connector;
0:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
0:      * @param jmsMessageConvertor 
0:    
0:     protected Destination processReplyToDestination (Destination destination){
0:         return jmsConnector.createReplyToBridge(destination, getConsumerConnection(), getProducerConnection());
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:     protected abstract Connection getConsumerConnection();
0:     
0:     protected abstract Connection getProducerConnection();
commit:6ea186c
/////////////////////////////////////////////////////////////////////////
1:      * @return Returns the inboundMessageConvertor.
0:      * @param inboundMessageConvertor
0:      *            The inboundMessageConvertor to set.
/////////////////////////////////////////////////////////////////////////
commit:e1bc55d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
0:                 if (converted == message && converted instanceof ActiveMQMessage){
0:                     converted = (Message) ((ActiveMQMessage)converted).copy();
0:                 }
author:James Strachan
-------------------------------------------------------------------------------
commit:fbad105
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: 
0: import org.apache.activemq.Service;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
/////////////////////////////////////////////////////////////////////////
0: import javax.naming.NamingException;
1: public abstract class DestinationBridge implements Service, MessageListener {
0:     private static final Log log = LogFactory.getLog(DestinationBridge.class);
1:     protected AtomicBoolean started = new AtomicBoolean(false);
0:     private int maximumRetries = 10;
1:     public MessageConsumer getConsumer() {
/////////////////////////////////////////////////////////////////////////
1:     public void setConsumer(MessageConsumer consumer) {
1:         this.consumer = consumer;
1:     public void setJmsConnector(JmsConnector connector) {
0: 
1:     public JmsMesageConvertor getJmsMessageConvertor() {
0:      * @param jmsMessageConvertor
1:     public void setJmsMessageConvertor(JmsMesageConvertor jmsMessageConvertor) {
1:         this.jmsMessageConvertor = jmsMessageConvertor;
0:     public int getMaximumRetries() {
0:         return maximumRetries;
0:     }
0: 
0:     /**
0:      * Sets the maximum number of retries if a send fails before closing the
0:      * bridge
0:      */
0:     public void setMaximumRetries(int maximumRetries) {
0:         this.maximumRetries = maximumRetries;
0:     }
0: 
1:     protected Destination processReplyToDestination(Destination destination) {
0: 
1:     public void start() throws Exception {
1:         if (started.compareAndSet(false, true)) {
0:             MessageConsumer consumer = createConsumer();
1:     public void stop() throws Exception {
0: 
1:     public void onMessage(Message message) {
0:         if (started.get() && message != null) {
0:             int attempt = 0;
1:             try {
0:                 if (attempt > 0) {
0:                     restartProducer();
0:                 }
0:                 Message converted;
0:                 if (doHandleReplyTo) {
0:                     Destination replyTo = message.getJMSReplyTo();
0:                     if (replyTo != null) {
0:                         converted = jmsMessageConvertor.convert(message, processReplyToDestination(replyTo));
0:                     }
0:                     else {
0:                         converted = jmsMessageConvertor.convert(message);
0:                     }
0:                 }
0:                 else {
0:                     message.setJMSReplyTo(null);
0:                     converted = jmsMessageConvertor.convert(message);
0:                 }
0:                 sendMessage(converted);
0:                 message.acknowledge();
0:             }
0:             catch (Exception e) {
0:                 log.error("failed to forward message on attempt: " + (++attempt) + " reason: " + e + " message: " + message, e);
0:                 if (maximumRetries > 0 && attempt >= maximumRetries) {
1:                     try {
0:                         stop();
0:                     }
0:                     catch (Exception e1) {
0:                         log.warn("Failed to stop cleanly", e1);
0:                     }
0:                 }
0:             }
0:         }
0:     protected boolean isDoHandleReplyTo() {
0:      * @param doHandleReplyTo
0:      *            The doHandleReplyTo to set.
0:     protected void setDoHandleReplyTo(boolean doHandleReplyTo) {
1:         this.doHandleReplyTo = doHandleReplyTo;
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected void restartProducer() throws JMSException, NamingException {
0:         try {
0:             getConnectionForProducer().close();
0:         }
0:         catch (Exception e) {
0:             log.debug("Ignoring failure to close producer connection: " + e, e);
0:         }
0:         jmsConnector.restartProducerConnection();
0:         createProducer();
0:     }
============================================================================