1:7631ca9: /**
1:7631ca9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7631ca9:  * contributor license agreements.  See the NOTICE file distributed with
1:7631ca9:  * this work for additional information regarding copyright ownership.
1:7631ca9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7631ca9:  * (the "License"); you may not use this file except in compliance with
1:7631ca9:  * the License.  You may obtain a copy of the License at
1:7631ca9:  *
1:7631ca9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7631ca9:  *
1:7631ca9:  * Unless required by applicable law or agreed to in writing, software
1:7631ca9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7631ca9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7631ca9:  * See the License for the specific language governing permissions and
1:7631ca9:  * limitations under the License.
1:7631ca9:  */
1:7631ca9: package org.apache.activemq.broker.store;
1:7631ca9: 
1:7631ca9: import junit.framework.Test;
1:20ec044: import org.apache.activemq.TestSupport;
1:7631ca9: import org.apache.activemq.broker.BrokerRestartTestSupport;
1:7631ca9: import org.apache.activemq.broker.BrokerService;
1:7631ca9: import org.apache.activemq.broker.StubConnection;
1:7631ca9: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:7631ca9: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1:7631ca9: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7631ca9: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:7631ca9: import org.apache.activemq.command.ActiveMQDestination;
1:7631ca9: import org.apache.activemq.command.ActiveMQQueue;
1:7631ca9: import org.apache.activemq.command.ConnectionInfo;
1:7631ca9: import org.apache.activemq.command.ConsumerInfo;
1:7631ca9: import org.apache.activemq.command.Message;
1:7631ca9: import org.apache.activemq.command.MessageAck;
1:7631ca9: import org.apache.activemq.command.ProducerInfo;
1:7631ca9: import org.apache.activemq.command.SessionInfo;
1:20ec044: 
1:20ec044: import java.util.ArrayList;
1:20ec044: import java.util.concurrent.TimeUnit;
1:7631ca9: 
1:7631ca9: public class RecoverExpiredMessagesTest extends BrokerRestartTestSupport {
1:7631ca9:     final ArrayList<String> expected = new ArrayList<String>();
1:7631ca9:     final ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:7631ca9:     public PendingQueueMessageStoragePolicy queuePendingPolicy;
1:20ec044:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1:7631ca9: 
1:7631ca9:     @Override
1:7631ca9:     protected void setUp() throws Exception {
1:7631ca9:         setAutoFail(true);
1:7631ca9:         super.setUp();
3:7631ca9:     }
1:7631ca9: 
1:7631ca9:     public void initCombosForTestRecovery() throws Exception {
1:7631ca9:         addCombinationValues("queuePendingPolicy", new PendingQueueMessageStoragePolicy[] {new FilePendingQueueMessageStoragePolicy(), new VMPendingQueueMessageStoragePolicy()});
1:20ec044:         TestSupport.PersistenceAdapterChoice[] persistenceAdapters = new TestSupport.PersistenceAdapterChoice[] {
1:20ec044:                 TestSupport.PersistenceAdapterChoice.JDBC, TestSupport.PersistenceAdapterChoice.KahaDB
1:3155c62:         };
1:20ec044:         addCombinationValues("persistenceAdapterChoice", persistenceAdapters);
1:3155c62:     }
1:7631ca9: 
1:7631ca9:     public void testRecovery() throws Exception {
1:7631ca9:         sendSomeMessagesThatWillExpireIn5AndThenOne();
1:7631ca9: 
1:7631ca9:         broker.stop();
1:bc3587c:         broker.waitUntilStopped();
1:7631ca9:         TimeUnit.SECONDS.sleep(6);
1:7631ca9:         broker = createRestartedBroker();
1:7631ca9:         broker.start();
1:7631ca9: 
1:7631ca9:         consumeExpected();
1:7631ca9:     }
1:7631ca9: 
1:7631ca9:     private void consumeExpected() throws Exception {
1:7631ca9:         // Setup the consumer and receive the message.
1:7631ca9:          StubConnection connection = createConnection();
1:7631ca9:         ConnectionInfo connectionInfo = createConnectionInfo();
1:7631ca9:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:7631ca9:         connection.send(connectionInfo);
1:7631ca9:         connection.send(sessionInfo);
1:7631ca9:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:7631ca9:         connection.send(consumerInfo);
1:7631ca9: 
1:7631ca9:         Message m = receiveMessage(connection);
1:7631ca9:         assertNotNull("Should have received message " + expected.get(0) + " by now!", m);
1:7631ca9:         assertEquals(expected.get(0), m.getMessageId().toString());
1:7631ca9:         MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:7631ca9:         connection.send(ack);
1:7631ca9: 
1:7631ca9:         assertNoMessagesLeft(connection);
1:7631ca9:         connection.request(closeConnectionInfo(connectionInfo));
1:7631ca9:     }
1:7631ca9: 
1:7631ca9:     private void sendSomeMessagesThatWillExpireIn5AndThenOne() throws Exception {
1:7631ca9: 
1:7631ca9:         // Setup the producer and send the message.
1:7631ca9:         StubConnection connection = createConnection();
1:7631ca9:         ConnectionInfo connectionInfo = createConnectionInfo();
1:7631ca9:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:7631ca9:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:7631ca9:         connection.send(connectionInfo);
1:7631ca9:         connection.send(sessionInfo);
1:7631ca9:         connection.send(producerInfo);
1:7631ca9: 
1:7631ca9: 
1:7631ca9:         int MESSAGE_COUNT = 10;
1:7631ca9:         for(int i=0; i < MESSAGE_COUNT; i++) {
1:7631ca9:             Message message = createMessage(producerInfo, destination);
1:7631ca9:             message.setExpiration(System.currentTimeMillis()+5000);
1:7631ca9:             message.setPersistent(true);
1:7631ca9:             connection.send(message);
1:7631ca9:         }
1:7631ca9:         Message message = createMessage(producerInfo, destination);
1:7631ca9:         message.setPersistent(true);
1:7631ca9:         connection.send(message);
1:7631ca9:         expected.add(message.getMessageId().toString());
1:7631ca9: 
1:7631ca9:         connection.request(closeConnectionInfo(connectionInfo));
1:7631ca9:     }
1:7631ca9: 
1:7631ca9:     @Override
1:7631ca9:     protected PolicyEntry getDefaultPolicy() {
1:7631ca9:         PolicyEntry policy = super.getDefaultPolicy();
1:7631ca9:         policy.setPendingQueuePolicy(queuePendingPolicy);
1:7631ca9:         policy.setExpireMessagesPeriod(0);
1:7631ca9:         return policy;
1:7631ca9:     }
1:7631ca9: 
1:7631ca9:     @Override
1:7631ca9:     protected void configureBroker(BrokerService broker) throws Exception {
1:7631ca9:         super.configureBroker(broker);
1:20ec044:         TestSupport.setPersistenceAdapter(broker, persistenceAdapterChoice);
1:17f4f34:     }
1:7631ca9: 
1:7631ca9:     public static Test suite() {
1:7631ca9:         return suite(RecoverExpiredMessagesTest.class);
1:7631ca9:     }
1:7631ca9: 
1:7631ca9: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:20ec044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.util.ArrayList;
1: import java.util.concurrent.TimeUnit;
1:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
/////////////////////////////////////////////////////////////////////////
1:         TestSupport.PersistenceAdapterChoice[] persistenceAdapters = new TestSupport.PersistenceAdapterChoice[] {
1:                 TestSupport.PersistenceAdapterChoice.JDBC, TestSupport.PersistenceAdapterChoice.KahaDB
1:         addCombinationValues("persistenceAdapterChoice", persistenceAdapters);
/////////////////////////////////////////////////////////////////////////
1:         TestSupport.setPersistenceAdapter(broker, persistenceAdapterChoice);
commit:17f4f34
/////////////////////////////////////////////////////////////////////////
0:                 new JDBCPersistenceAdapter()
/////////////////////////////////////////////////////////////////////////
0:         if (persistenceAdapter instanceof JDBCPersistenceAdapter) {
0:            ((JDBCPersistenceAdapter) persistenceAdapter).setLockDataSource(null);
1:         }
commit:3155c62
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:         PersistenceAdapter[] persistenceAdapters = new PersistenceAdapter[] {
0:                 new KahaDBPersistenceAdapter(),
0:                 new JDBCPersistenceAdapter(JDBCPersistenceAdapter.createDataSource(IOHelper.getDefaultDataDirectory()), new OpenWireFormat())
1:         };
0:         for (PersistenceAdapter adapter : persistenceAdapters) {
0:             adapter.setDirectory(new File(IOHelper.getDefaultDataDirectory()));
1:         }
0:         addCombinationValues("persistenceAdapter", persistenceAdapters);
commit:bc3587c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("persistenceAdapter", new PersistenceAdapter[] {new KahaDBPersistenceAdapter(),
0:                 // need to supply the dataSource as it is used in parameter matching via the toString
0:                 new JDBCPersistenceAdapter(JDBCPersistenceAdapter.createDataSource(IOHelper.getDefaultDataDirectory()), new OpenWireFormat())});
1:         broker.waitUntilStopped();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:7631ca9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.store;
1: 
0: import java.util.ArrayList;
0: import java.util.concurrent.TimeUnit;
1: import junit.framework.Test;
1: import org.apache.activemq.broker.BrokerRestartTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
0: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: 
1: public class RecoverExpiredMessagesTest extends BrokerRestartTestSupport {
1:     final ArrayList<String> expected = new ArrayList<String>();
1:     final ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:     public PendingQueueMessageStoragePolicy queuePendingPolicy;
0:     public PersistenceAdapter persistenceAdapter;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1:     public void initCombosForTestRecovery() throws Exception {
1:         addCombinationValues("queuePendingPolicy", new PendingQueueMessageStoragePolicy[] {new FilePendingQueueMessageStoragePolicy(), new VMPendingQueueMessageStoragePolicy()});
0:         addCombinationValues("persistenceAdapter", new PersistenceAdapter[] {new KahaDBPersistenceAdapter(), new JDBCPersistenceAdapter()});
1:     }
1: 
1:     public void testRecovery() throws Exception {
1:         sendSomeMessagesThatWillExpireIn5AndThenOne();
1: 
1:         broker.stop();
1:         TimeUnit.SECONDS.sleep(6);
1:         broker = createRestartedBroker();
1:         broker.start();
1: 
1:         consumeExpected();
1:     }
1: 
1:     private void consumeExpected() throws Exception {
1:         // Setup the consumer and receive the message.
1:          StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         Message m = receiveMessage(connection);
1:         assertNotNull("Should have received message " + expected.get(0) + " by now!", m);
1:         assertEquals(expected.get(0), m.getMessageId().toString());
1:         MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:         connection.send(ack);
1: 
1:         assertNoMessagesLeft(connection);
1:         connection.request(closeConnectionInfo(connectionInfo));
1:     }
1: 
1:     private void sendSomeMessagesThatWillExpireIn5AndThenOne() throws Exception {
1: 
1:         // Setup the producer and send the message.
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);
1: 
1: 
1:         int MESSAGE_COUNT = 10;
1:         for(int i=0; i < MESSAGE_COUNT; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setExpiration(System.currentTimeMillis()+5000);
1:             message.setPersistent(true);
1:             connection.send(message);
1:         }
1:         Message message = createMessage(producerInfo, destination);
1:         message.setPersistent(true);
1:         connection.send(message);
1:         expected.add(message.getMessageId().toString());
1: 
1:         connection.request(closeConnectionInfo(connectionInfo));
1:     }
1: 
1:     @Override
1:     protected PolicyEntry getDefaultPolicy() {
1:         PolicyEntry policy = super.getDefaultPolicy();
1:         policy.setPendingQueuePolicy(queuePendingPolicy);
1:         policy.setExpireMessagesPeriod(0);
1:         return policy;
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         super.configureBroker(broker);
0:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(RecoverExpiredMessagesTest.class);
1:     }
1: 
1: }
============================================================================