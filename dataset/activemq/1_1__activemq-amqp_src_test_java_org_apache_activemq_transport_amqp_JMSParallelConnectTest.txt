1:12202c9: /**
1:12202c9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:12202c9:  * contributor license agreements.  See the NOTICE file distributed with
1:12202c9:  * this work for additional information regarding copyright ownership.
1:12202c9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:12202c9:  * (the "License"); you may not use this file except in compliance with
1:12202c9:  * the License.  You may obtain a copy of the License at
1:12202c9:  *
1:12202c9:  * http://www.apache.org/licenses/LICENSE-2.0
1:12202c9:  *
1:12202c9:  * Unless required by applicable law or agreed to in writing, software
1:12202c9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:12202c9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:12202c9:  * See the License for the specific language governing permissions and
1:12202c9:  * limitations under the License.
1:12202c9:  */
1:12202c9: package org.apache.activemq.transport.amqp;
1:12202c9: 
1:12202c9: import static org.junit.Assert.assertTrue;
1:12202c9: 
1:12202c9: import java.util.concurrent.ExecutorService;
1:12202c9: import java.util.concurrent.Executors;
1:12202c9: import java.util.concurrent.TimeUnit;
1:12202c9: 
1:12202c9: import javax.jms.Connection;
1:12202c9: import javax.jms.JMSException;
1:12202c9: 
1:12202c9: import org.junit.Test;
1:12202c9: 
1:12202c9: public class JMSParallelConnectTest extends AmqpTestSupport {
1:12202c9: 
1:12202c9:     @Override
1:12202c9:     protected boolean isUseTcpConnector() {
1:12202c9:         return true;
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Override
1:12202c9:     protected boolean isUseSslConnector() {
1:12202c9:         return true;
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Override
1:12202c9:     protected boolean isUseNioConnector() {
1:12202c9:         return true;
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Override
1:12202c9:     protected boolean isUseNioPlusSslConnector() {
1:12202c9:         return true;
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60000)
1:12202c9:     public void testParallelConnectPlain() throws Exception {
1:12202c9:         final int numThreads = 40;
1:12202c9:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:12202c9:         for (int i = 0; i < numThreads; i++) {
1:12202c9:             executorService.execute(new Runnable() {
1:12202c9:                 @Override
1:12202c9:                 public void run() {
1:12202c9: 
1:12202c9:                     try {
1:240278d:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "password");
1:12202c9:                         connection.start();
1:12202c9:                         connection.close();
1:12202c9:                     } catch (JMSException e) {
1:12202c9:                         e.printStackTrace();
1:12202c9:                     }
1:12202c9:                 }
1:12202c9:             });
1:12202c9:         }
1:12202c9: 
1:12202c9:         executorService.shutdown();
1:12202c9:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60000)
1:12202c9:     public void testParallelConnectNio() throws Exception {
1:12202c9:         final int numThreads = 40;
1:12202c9:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:12202c9:         for (int i = 0; i < numThreads; i++) {
1:12202c9:             executorService.execute(new Runnable() {
1:12202c9:                 @Override
1:12202c9:                 public void run() {
1:12202c9: 
1:12202c9:                     try {
1:240278d:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpNioURI, "admin", "password");
1:12202c9:                         connection.start();
1:12202c9:                         connection.close();
1:12202c9:                     } catch (JMSException e) {
1:12202c9:                         e.printStackTrace();
1:12202c9:                     }
1:12202c9:                 }
1:12202c9:             });
1:12202c9:         }
1:12202c9: 
1:12202c9:         executorService.shutdown();
1:12202c9:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60000)
1:12202c9:     public void testParallelConnectSsl() throws Exception {
1:12202c9:         final int numThreads = 40;
1:12202c9:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:12202c9:         for (int i = 0; i < numThreads; i++) {
1:12202c9:             executorService.execute(new Runnable() {
1:12202c9:                 @Override
1:12202c9:                 public void run() {
1:12202c9: 
1:12202c9:                     try {
1:240278d:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpSslURI, "admin", "password");
1:12202c9:                         connection.start();
1:12202c9:                         connection.close();
1:12202c9:                     } catch (JMSException e) {
1:12202c9:                         e.printStackTrace();
1:12202c9:                     }
1:12202c9:                 }
1:12202c9:             });
1:12202c9:         }
1:12202c9: 
1:12202c9:         executorService.shutdown();
1:12202c9:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60000)
1:12202c9:     public void testParallelConnectNioPlusSsl() throws Exception {
1:12202c9:         final int numThreads = 40;
1:12202c9:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:12202c9:         for (int i = 0; i < numThreads; i++) {
1:12202c9:             executorService.execute(new Runnable() {
1:12202c9:                 @Override
1:12202c9:                 public void run() {
1:12202c9: 
1:12202c9:                     try {
1:240278d:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpNioPlusSslURI, "admin", "password");
1:12202c9:                         connection.start();
1:12202c9:                         connection.close();
1:12202c9:                     } catch (JMSException e) {
1:12202c9:                         e.printStackTrace();
1:12202c9:                     }
1:12202c9:                 }
1:12202c9:             });
1:12202c9:         }
1:12202c9: 
1:12202c9:         executorService.shutdown();
1:12202c9:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:12202c9:     }
1:12202c9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:240278d
/////////////////////////////////////////////////////////////////////////
1:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "password");
/////////////////////////////////////////////////////////////////////////
1:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpNioURI, "admin", "password");
/////////////////////////////////////////////////////////////////////////
1:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpSslURI, "admin", "password");
/////////////////////////////////////////////////////////////////////////
1:                         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpNioPlusSslURI, "admin", "password");
commit:12202c9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
1: import org.junit.Test;
1: 
1: public class JMSParallelConnectTest extends AmqpTestSupport {
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testParallelConnectPlain() throws Exception {
1:         final int numThreads = 40;
1:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:         for (int i = 0; i < numThreads; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1: 
1:                     try {
0:                         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpURI, "admin", "password");
1:                         connection.start();
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testParallelConnectNio() throws Exception {
1:         final int numThreads = 40;
1:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:         for (int i = 0; i < numThreads; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1: 
1:                     try {
0:                         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpNioURI, "admin", "password");
1:                         connection.start();
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testParallelConnectSsl() throws Exception {
1:         final int numThreads = 40;
1:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:         for (int i = 0; i < numThreads; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1: 
1:                     try {
0:                         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpSslURI, "admin", "password");
1:                         connection.start();
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testParallelConnectNioPlusSsl() throws Exception {
1:         final int numThreads = 40;
1:         ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
1:         for (int i = 0; i < numThreads; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1: 
1:                     try {
0:                         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpNioPlusSslURI, "admin", "password");
1:                         connection.start();
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("executor done on time", executorService.awaitTermination(30, TimeUnit.SECONDS));
1:     }
1: }
============================================================================