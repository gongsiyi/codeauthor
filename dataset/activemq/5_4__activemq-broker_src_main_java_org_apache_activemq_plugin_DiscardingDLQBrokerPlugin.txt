1:dad506d: /**
1:dad506d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dad506d:  * contributor license agreements.  See the NOTICE file distributed with
1:dad506d:  * this work for additional information regarding copyright ownership.
1:dad506d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dad506d:  * (the "License"); you may not use this file except in compliance with
1:dad506d:  * the License.  You may obtain a copy of the License at
1:dad506d:  *
1:dad506d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dad506d:  *
1:dad506d:  * Unless required by applicable law or agreed to in writing, software
1:dad506d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dad506d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dad506d:  * See the License for the specific language governing permissions and
1:dad506d:  * limitations under the License.
1:dad506d:  */
1:dad506d: package org.apache.activemq.plugin;
1:dad506d: 
1:dad506d: import java.util.ArrayList;
1:dad506d: import java.util.StringTokenizer;
1:dad506d: import java.util.regex.Pattern;
1:dad506d: 
1:dad506d: import org.apache.activemq.broker.Broker;
1:dad506d: import org.apache.activemq.broker.BrokerPlugin;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:dad506d: 
1:dad506d: /**
1:356c39d:  * @org.apache.xbean.XBean element="discardingDLQBrokerPlugin"
1:dad506d:  * @version 1.0
1:dad506d:  */
1:dad506d: public class DiscardingDLQBrokerPlugin implements BrokerPlugin {
1:5e05df1: 
1:dad506d:     public DiscardingDLQBrokerPlugin() {
1:dad506d:     }
1:dad506d: 
1:8bf987b:     public static Logger log = LoggerFactory.getLogger(DiscardingDLQBrokerPlugin.class);
1:dad506d:     private boolean dropTemporaryTopics = true;
1:dad506d:     private boolean dropTemporaryQueues = true;
1:dad506d:     private boolean dropAll = true;
1:dad506d:     private String dropOnly;
1:dad506d:     private int reportInterval = 1000;
1:dad506d: 
1:dad506d:     /**
1:5e05df1:      * Installs the plugin into the intercepter chain of the broker, returning the new
1:5e05df1:      * intercepted broker to use.
1:5e05df1:      *
1:dad506d:      * @param broker Broker
1:5e05df1:      *
1:dad506d:      * @return Broker
1:5e05df1:      *
1:5e05df1:      * @throws Exception
1:dad506d:      */
1:5e05df1:     @Override
1:dad506d:     public Broker installPlugin(Broker broker) throws Exception {
1:e1bbde7:         log.info("Installing Discarding Dead Letter Queue broker plugin[dropAll={}; dropTemporaryTopics={}; dropTemporaryQueues={}; dropOnly={}; reportInterval={}]", new Object[]{
1:e1bbde7:                 isDropAll(), isDropTemporaryTopics(), isDropTemporaryQueues(), getDropOnly(), reportInterval
1:e1bbde7:         });
1:dad506d:         DiscardingDLQBroker cb = new DiscardingDLQBroker(broker);
1:dad506d:         cb.setDropAll(isDropAll());
1:dad506d:         cb.setDropTemporaryQueues(isDropTemporaryQueues());
1:dad506d:         cb.setDropTemporaryTopics(isDropTemporaryTopics());
1:dad506d:         cb.setDestFilter(getDestFilter());
1:6c721fc:         cb.setReportInterval(getReportInterval());
1:dad506d:         return cb;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropAll() {
1:dad506d:         return dropAll;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropTemporaryQueues() {
1:dad506d:         return dropTemporaryQueues;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropTemporaryTopics() {
1:dad506d:         return dropTemporaryTopics;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public String getDropOnly() {
1:dad506d:         return dropOnly;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public int getReportInterval() {
1:dad506d:         return reportInterval;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropTemporaryTopics(boolean dropTemporaryTopics) {
1:dad506d:         this.dropTemporaryTopics = dropTemporaryTopics;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropTemporaryQueues(boolean dropTemporaryQueues) {
1:dad506d:         this.dropTemporaryQueues = dropTemporaryQueues;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropAll(boolean dropAll) {
1:dad506d:         this.dropAll = dropAll;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropOnly(String dropOnly) {
1:dad506d:         this.dropOnly = dropOnly;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setReportInterval(int reportInterval) {
1:dad506d:         this.reportInterval = reportInterval;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public Pattern[] getDestFilter() {
1:dad506d:         if (getDropOnly()==null) return null;
1:dad506d:         ArrayList<Pattern> list = new ArrayList<Pattern>();
1:dad506d:         StringTokenizer t = new StringTokenizer(getDropOnly()," ");
1:dad506d:         while (t.hasMoreTokens()) {
1:dad506d:             String s = t.nextToken();
1:dad506d:             if (s!=null && s.trim().length()>0) list.add(Pattern.compile(s));
1:dad506d:         }
1:dad506d:         if (list.size()==0) return null;
1:dad506d:         return list.toArray(new Pattern[0]);
1:dad506d:     }
1:dad506d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Installs the plugin into the intercepter chain of the broker, returning the new
1:      * intercepted broker to use.
1:      *
1:      *
1:      *
1:      * @throws Exception
1:     @Override
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         log.info("Installing Discarding Dead Letter Queue broker plugin[dropAll={}; dropTemporaryTopics={}; dropTemporaryQueues={}; dropOnly={}; reportInterval={}]", new Object[]{
1:                 isDropAll(), isDropTemporaryTopics(), isDropTemporaryQueues(), getDropOnly(), reportInterval
1:         });
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     public static Logger log = LoggerFactory.getLogger(DiscardingDLQBrokerPlugin.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6c721fc
/////////////////////////////////////////////////////////////////////////
1:         cb.setReportInterval(getReportInterval());
commit:356c39d
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="discardingDLQBrokerPlugin"
author:Robert Davies
-------------------------------------------------------------------------------
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
0:  *  @org.apache.xbean.XBean element="discardingDLQBrokerPlugin"
commit:dad506d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import java.util.ArrayList;
1: import java.util.StringTokenizer;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @author Filip Hanik
1:  * @version 1.0
1:  */
1: public class DiscardingDLQBrokerPlugin implements BrokerPlugin {
1:     public DiscardingDLQBrokerPlugin() {
1:     }
1: 
0:     public static Log log = LogFactory.getLog(DiscardingDLQBrokerPlugin.class);
1:     private boolean dropTemporaryTopics = true;
1:     private boolean dropTemporaryQueues = true;
1:     private boolean dropAll = true;
1:     private String dropOnly;
1:     private int reportInterval = 1000;
1: 
1:     /**
0:      * Installs the plugin into the interceptor chain of the broker, returning the new intercepted broker to use.
1:      * @param broker Broker
0:      * @throws Exception
1:      * @return Broker
0:      * @todo Implement this org.apache.activemq.broker.BrokerPlugin method
1:      */
1:     public Broker installPlugin(Broker broker) throws Exception {
0:         log.info("Installing Discarding Dead Letter Queue broker plugin[dropAll="+isDropAll()+
0:                  "; dropTemporaryTopics="+isDropTemporaryTopics()+"; dropTemporaryQueues="+
0:                  isDropTemporaryQueues()+"; dropOnly="+getDropOnly()+"; reportInterval="+
0:                  getReportInterval()+"]");
1:         DiscardingDLQBroker cb = new DiscardingDLQBroker(broker);
1:         cb.setDropAll(isDropAll());
1:         cb.setDropTemporaryQueues(isDropTemporaryQueues());
1:         cb.setDropTemporaryTopics(isDropTemporaryTopics());
1:         cb.setDestFilter(getDestFilter());
1:         return cb;
1:     }
1: 
1:     public boolean isDropAll() {
1:         return dropAll;
1:     }
1: 
1:     public boolean isDropTemporaryQueues() {
1:         return dropTemporaryQueues;
1:     }
1: 
1:     public boolean isDropTemporaryTopics() {
1:         return dropTemporaryTopics;
1:     }
1: 
1:     public String getDropOnly() {
1:         return dropOnly;
1:     }
1: 
1:     public int getReportInterval() {
1:         return reportInterval;
1:     }
1: 
1:     public void setDropTemporaryTopics(boolean dropTemporaryTopics) {
1:         this.dropTemporaryTopics = dropTemporaryTopics;
1:     }
1: 
1:     public void setDropTemporaryQueues(boolean dropTemporaryQueues) {
1:         this.dropTemporaryQueues = dropTemporaryQueues;
1:     }
1: 
1:     public void setDropAll(boolean dropAll) {
1:         this.dropAll = dropAll;
1:     }
1: 
1:     public void setDropOnly(String dropOnly) {
1:         this.dropOnly = dropOnly;
1:     }
1: 
1:     public void setReportInterval(int reportInterval) {
1:         this.reportInterval = reportInterval;
1:     }
1: 
1:     public Pattern[] getDestFilter() {
1:         if (getDropOnly()==null) return null;
1:         ArrayList<Pattern> list = new ArrayList<Pattern>();
1:         StringTokenizer t = new StringTokenizer(getDropOnly()," ");
1:         while (t.hasMoreTokens()) {
1:             String s = t.nextToken();
1:             if (s!=null && s.trim().length()>0) list.add(Pattern.compile(s));
1:         }
1:         if (list.size()==0) return null;
1:         return list.toArray(new Pattern[0]);
1:     }
1: }
============================================================================