1:2f469c1: /**
1:2f469c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2f469c1:  * contributor license agreements.  See the NOTICE file distributed with
1:2f469c1:  * this work for additional information regarding copyright ownership.
1:2f469c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2f469c1:  * (the "License"); you may not use this file except in compliance with
1:2f469c1:  * the License.  You may obtain a copy of the License at
1:2f469c1:  *
1:2f469c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2f469c1:  *
1:2f469c1:  * Unless required by applicable law or agreed to in writing, software
1:2f469c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f469c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f469c1:  * See the License for the specific language governing permissions and
1:2f469c1:  * limitations under the License.
1:2f469c1:  */
1:2f469c1: package org.apache.activemq.security;
2:2f469c1: 
1:2f469c1: import javax.annotation.PostConstruct;
1:2f469c1: 
1:174fe15: import org.springframework.beans.factory.InitializingBean;
1:174fe15: 
1:2f469c1: /**
1:2f469c1:  * Represents an entry in a {@link DefaultAuthorizationMap} for assigning
1:2f469c1:  * different operations (read, write, admin) of user roles to a specific
1:2f469c1:  * destination or a hierarchical wildcard area of destinations.
1:2f469c1:  *
1:2f469c1:  * @org.apache.xbean.XBean element="authorizationEntry"
1:2f469c1:  *
1:2f469c1:  */
1:2f469c1: public class XBeanAuthorizationEntry extends AuthorizationEntry implements InitializingBean {
1:2f469c1: 
1:2f469c1:     @Override
1:2f469c1:     public void setAdmin(String roles) throws Exception {
1:2f469c1:         adminRoles = roles;
1:2f469c1:     }
1:2f469c1: 
1:8d480b4:     @Override
1:2f469c1:     public void setRead(String roles) throws Exception {
1:2f469c1:         readRoles = roles;
1:2f469c1:     }
1:2f469c1: 
1:2f469c1:     @Override
1:2f469c1:     public void setWrite(String roles) throws Exception {
1:2f469c1:         writeRoles = roles;
1:2f469c1:     }
1:2f469c1: 
1:2f469c1:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:2f469c1:      *
1:2f469c1:      * @org.apache.xbean.InitMethod
1:2f469c1:      */
1:174fe15:     @Override
1:2f469c1:     public void afterPropertiesSet() throws Exception {
1:2f469c1: 
1:2f469c1:         if (adminRoles != null) {
1:2f469c1:             setAdminACLs(parseACLs(adminRoles));
1:2f469c1:         }
1:2f469c1: 
1:2f469c1:         if (writeRoles != null) {
1:2f469c1:             setWriteACLs(parseACLs(writeRoles));
1:2f469c1:         }
1:2f469c1: 
1:2f469c1:         if (readRoles != null) {
1:2f469c1:             setReadACLs(parseACLs(readRoles));
1:2f469c1:         }
1:2f469c1:     }
1:2f469c1: 
1:2f469c1:     @Override
1:8d480b4:     public String toString() {
1:8d480b4:         return "XBeanAuthEntry:" + adminRoles + "," + writeRoles + "," + readRoles;
1:8d480b4:     }
1:2f469c1: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d480b4
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return "XBeanAuthEntry:" + adminRoles + "," + writeRoles + "," + readRoles;
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.beans.factory.InitializingBean;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2f469c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: import javax.annotation.PostConstruct;
1: 
1: /**
1:  * Represents an entry in a {@link DefaultAuthorizationMap} for assigning
1:  * different operations (read, write, admin) of user roles to a specific
1:  * destination or a hierarchical wildcard area of destinations.
1:  *
1:  * @org.apache.xbean.XBean element="authorizationEntry"
1:  *
1:  */
1: public class XBeanAuthorizationEntry extends AuthorizationEntry implements InitializingBean {
1: 
1:     @Override
1:     public void setAdmin(String roles) throws Exception {
1:         adminRoles = roles;
1:     }
1: 
1:     @Override
1:     public void setRead(String roles) throws Exception {
1:         readRoles = roles;
1:     }
1: 
1:     @Override
1:     public void setWrite(String roles) throws Exception {
1:         writeRoles = roles;
1:     }
1: 
1:     /**
1:      *
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
1:     public void afterPropertiesSet() throws Exception {
1: 
1:         if (adminRoles != null) {
1:             setAdminACLs(parseACLs(adminRoles));
1:         }
1: 
1:         if (writeRoles != null) {
1:             setWriteACLs(parseACLs(writeRoles));
1:         }
1: 
1:         if (readRoles != null) {
1:             setReadACLs(parseACLs(readRoles));
1:         }
1:     }
1: 
1: }
============================================================================