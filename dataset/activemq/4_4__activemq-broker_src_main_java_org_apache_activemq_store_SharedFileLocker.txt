1:6ce702d: /**
1:6ce702d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ce702d:  * contributor license agreements.  See the NOTICE file distributed with
1:6ce702d:  * this work for additional information regarding copyright ownership.
1:6ce702d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ce702d:  * (the "License"); you may not use this file except in compliance with
1:6ce702d:  * the License.  You may obtain a copy of the License at
1:6ce702d:  *
1:6ce702d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ce702d:  *
1:6ce702d:  * Unless required by applicable law or agreed to in writing, software
1:6ce702d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ce702d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ce702d:  * See the License for the specific language governing permissions and
1:6ce702d:  * limitations under the License.
1:6ce702d:  */
1:f5178cc: package org.apache.activemq.store;
2:6ce702d: 
1:89c75ca: import java.io.File;
1:89c75ca: import java.io.IOException;
1:9bc602b: import java.util.concurrent.TimeUnit;
1:89c75ca: 
1:6ce702d: import org.apache.activemq.broker.AbstractLocker;
1:1aab71b: import org.apache.activemq.util.LockFile;
1:c5cf038: import org.apache.activemq.util.ServiceStopper;
1:6ce702d: import org.slf4j.Logger;
1:6ce702d: import org.slf4j.LoggerFactory;
1:6ce702d: 
1:6ce702d: /**
1:6ce702d:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:6ce702d:  * against the same logical database.
1:6ce702d:  *
1:6ce702d:  * @org.apache.xbean.XBean element="shared-file-locker"
1:6ce702d:  *
1:6ce702d:  */
1:6ce702d: public class SharedFileLocker extends AbstractLocker {
1:6ce702d: 
1:c5cf038:     public static final File DEFAULT_DIRECTORY = new File("KahaDB");
1:6ce702d:     private static final Logger LOG = LoggerFactory.getLogger(SharedFileLocker.class);
1:6ce702d: 
1:6ce702d:     private LockFile lockFile;
1:c5cf038:     protected File directory = DEFAULT_DIRECTORY;
1:6ce702d: 
1:6ce702d:     @Override
1:6ce702d:     public void doStart() throws Exception {
1:6ce702d:         if (lockFile == null) {
1:6ce702d:             File lockFileName = new File(directory, "lock");
1:ab8f54b:             lockFile = new LockFile(lockFileName, false);
1:6ce702d:             if (failIfLocked) {
1:6ce702d:                 lockFile.lock();
1:6ce702d:             } else {
1:89c75ca:                 // Print a warning only once
1:89c75ca:                 boolean warned = false;
1:6ce702d:                 boolean locked = false;
1:6ce702d:                 while ((!isStopped()) && (!isStopping())) {
1:6ce702d:                     try {
1:6ce702d:                         lockFile.lock();
1:9bc602b:                         if (warned) {
1:9bc602b:                             // ensure lockHolder has released; wait for one keepAlive iteration
1:9bc602b:                             try {
1:9bc602b:                                 TimeUnit.MILLISECONDS.sleep(lockable != null ? lockable.getLockKeepAlivePeriod() : 0l);
1:9bc602b:                             } catch (InterruptedException e1) {
1:9bc602b:                             }
1:9bc602b:                         }
1:357d491:                         locked = keepAlive();
1:6ce702d:                         break;
1:6ce702d:                     } catch (IOException e) {
1:89c75ca:                         if (!warned)
1:89c75ca:                         {
1:89c75ca:                             LOG.info("Database "
1:89c75ca:                                          + lockFileName
1:89c75ca:                                          + " is locked by another server. This broker is now in slave mode waiting a lock to be acquired");
1:89c75ca:                             warned = true;
1:89c75ca:                         }
1:89c75ca: 
1:89c75ca:                         LOG.debug("Database "
1:89c75ca:                                     + lockFileName
1:89c75ca:                                     + " is locked... waiting "
1:89c75ca:                                     + (lockAcquireSleepInterval / 1000)
1:89c75ca:                                     + " seconds for the database to be unlocked. Reason: "
1:89c75ca:                                     + e);
1:6ce702d:                         try {
1:9bc602b:                             TimeUnit.MILLISECONDS.sleep(lockAcquireSleepInterval);
1:6ce702d:                         } catch (InterruptedException e1) {
1:6ce702d:                         }
1:6ce702d:                     }
1:6ce702d:                 }
1:6ce702d:                 if (!locked) {
1:6ce702d:                     throw new IOException("attempt to obtain lock aborted due to shutdown");
1:6ce702d:                 }
1:6ce702d:             }
1:6ce702d:         }
1:6ce702d:     }
1:6ce702d: 
1:6ce702d:     @Override
1:0525f88:     public boolean keepAlive() {
1:c17b7fd:         boolean result = lockFile != null && lockFile.keepAlive();
1:c17b7fd:         LOG.trace("keepAlive result: " + result + (name != null ? ", name: " + name : ""));
1:c17b7fd:         return result;
1:0525f88:     }
1:0525f88: 
1:0525f88:     @Override
1:6ce702d:     public void doStop(ServiceStopper stopper) throws Exception {
1:a01578a:         if (lockFile != null) {
1:a01578a:             lockFile.unlock();
1:a01578a:             lockFile = null;
1:a01578a:         }
1:6ce702d:     }
1:6ce702d: 
1:6ce702d:     public File getDirectory() {
1:6ce702d:         return directory;
1:6ce702d:     }
1:6ce702d: 
1:6ce702d:     public void setDirectory(File directory) {
1:6ce702d:         this.directory = directory;
1:6ce702d:     }
1:6ce702d: 
1:6ce702d:     @Override
1:6ce702d:     public void configure(PersistenceAdapter persistenceAdapter) throws IOException {
1:6ce702d:         this.setDirectory(persistenceAdapter.getDirectory());
1:c17b7fd:         if (name == null) {
1:c17b7fd:             name = getDirectory().toString();
1:c17b7fd:         }
1:6ce702d:     }
1:6ce702d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c17b7fd
/////////////////////////////////////////////////////////////////////////
1:         boolean result = lockFile != null && lockFile.keepAlive();
1:         LOG.trace("keepAlive result: " + result + (name != null ? ", name: " + name : ""));
1:         return result;
/////////////////////////////////////////////////////////////////////////
1:         if (name == null) {
1:             name = getDirectory().toString();
1:         }
commit:a01578a
/////////////////////////////////////////////////////////////////////////
1:         if (lockFile != null) {
1:             lockFile.unlock();
1:             lockFile = null;
1:         }
commit:9bc602b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:                         if (warned) {
1:                             // ensure lockHolder has released; wait for one keepAlive iteration
1:                             try {
1:                                 TimeUnit.MILLISECONDS.sleep(lockable != null ? lockable.getLockKeepAlivePeriod() : 0l);
1:                             } catch (InterruptedException e1) {
1:                             }
1:                         }
/////////////////////////////////////////////////////////////////////////
1:                             TimeUnit.MILLISECONDS.sleep(lockAcquireSleepInterval);
commit:357d491
/////////////////////////////////////////////////////////////////////////
1:                         locked = keepAlive();
commit:0525f88
/////////////////////////////////////////////////////////////////////////
1:     public boolean keepAlive() {
0:         return lockFile != null && lockFile.keepAlive();
1:     }
1: 
1:     @Override
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:ab8f54b
/////////////////////////////////////////////////////////////////////////
1:             lockFile = new LockFile(lockFileName, false);
commit:0a16138
/////////////////////////////////////////////////////////////////////////
commit:89c75ca
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 // Print a warning only once
1:                 boolean warned = false;
0:                         LOG.info("locked " + locked);
1:                         if (!warned)
1:                         {
1:                             LOG.info("Database "
1:                                          + lockFileName
1:                                          + " is locked by another server. This broker is now in slave mode waiting a lock to be acquired");
1:                             warned = true;
1:                         }
1: 
1:                         LOG.debug("Database "
1:                                     + lockFileName
1:                                     + " is locked... waiting "
1:                                     + (lockAcquireSleepInterval / 1000)
1:                                     + " seconds for the database to be unlocked. Reason: "
1:                                     + e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
1:     public static final File DEFAULT_DIRECTORY = new File("KahaDB");
1:     protected File directory = DEFAULT_DIRECTORY;
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LockFile;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f5178cc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store;
0: import org.apache.activemq.store.kahadb.MessageDatabase;
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.broker.AbstractLocker;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.kahadb.util.LockFile;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.File;
0: import java.io.IOException;
1: 
1: /**
1:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:  * against the same logical database.
1:  *
1:  * @org.apache.xbean.XBean element="shared-file-locker"
1:  *
1:  */
1: public class SharedFileLocker extends AbstractLocker {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(SharedFileLocker.class);
1: 
1:     private LockFile lockFile;
0:     protected File directory = MessageDatabase.DEFAULT_DIRECTORY;
1: 
1:     @Override
1:     public void doStart() throws Exception {
1:         if (lockFile == null) {
1:             File lockFileName = new File(directory, "lock");
0:             lockFile = new LockFile(lockFileName, true);
1:             if (failIfLocked) {
1:                 lockFile.lock();
1:             } else {
1:                 boolean locked = false;
1:                 while ((!isStopped()) && (!isStopping())) {
1:                     try {
1:                         lockFile.lock();
0:                         locked = true;
1:                         break;
1:                     } catch (IOException e) {
0:                         LOG.info("Database "
0:                                 + lockFileName
0:                                 + " is locked... waiting "
0:                                 + (lockAcquireSleepInterval / 1000)
0:                                 + " seconds for the database to be unlocked. Reason: "
0:                                 + e);
1:                         try {
0:                             Thread.sleep(lockAcquireSleepInterval);
1:                         } catch (InterruptedException e1) {
1:                         }
1:                     }
1:                 }
1:                 if (!locked) {
1:                     throw new IOException("attempt to obtain lock aborted due to shutdown");
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void doStop(ServiceStopper stopper) throws Exception {
0:         lockFile.unlock();
0:         lockFile=null;
1:     }
1: 
1:     public File getDirectory() {
1:         return directory;
1:     }
1: 
1:     public void setDirectory(File directory) {
1:         this.directory = directory;
1:     }
1: 
1:     @Override
1:     public void configure(PersistenceAdapter persistenceAdapter) throws IOException {
1:         this.setDirectory(persistenceAdapter.getDirectory());
1:     }
1: }
============================================================================