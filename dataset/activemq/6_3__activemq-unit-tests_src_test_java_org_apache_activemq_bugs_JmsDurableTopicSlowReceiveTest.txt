3:40f5aad: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
3:40f5aad:  */
1:40f5aad: package org.apache.activemq.bugs;
1:b5a4259: 
1:b0b6021: import java.util.Properties;
1:74a7a8b: 
1:40f5aad: import javax.jms.BytesMessage;
1:40f5aad: import javax.jms.Connection;
1:40f5aad: import javax.jms.Destination;
1:40f5aad: import javax.jms.Message;
1:40f5aad: import javax.jms.MessageConsumer;
1:40f5aad: import javax.jms.MessageProducer;
1:40f5aad: import javax.jms.Session;
1:40f5aad: import javax.jms.Topic;
1:40f5aad: import javax.jms.TopicSubscriber;
1:74a7a8b: 
1:40f5aad: import org.apache.activemq.ActiveMQConnectionFactory;
1:40f5aad: import org.apache.activemq.broker.BrokerService;
1:40f5aad: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
31:40f5aad: 
1:40f5aad: /**
1:b0c2a40:  * 
1:40f5aad:  */
1:230a86c: public class JmsDurableTopicSlowReceiveTest extends JmsTopicSendReceiveTest {
1:fc00993:     
1:55810b3:     static final int NMSG = 200;
1:fc00993:     static final int MSIZE = 256000;
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(JmsDurableTopicSlowReceiveTest.class);
1:fc00993:     private static final String COUNT_PROPERY_NAME = "count";
1:40f5aad: 
1:b0b6021:     protected Connection connection2;
1:b0b6021:     protected Session session2;
1:b0b6021:     protected Session consumeSession2;
1:b0b6021:     protected MessageConsumer consumer2;
1:b0b6021:     protected MessageProducer producer2;
1:b0b6021:     protected Destination consumerDestination2;
1:b0b6021:     BrokerService broker;
1:b0b6021:     private Connection connection3;
1:b0b6021:     private Session consumeSession3;
1:b0b6021:     private TopicSubscriber consumer3;
1:40f5aad: 
1:b0b6021:     /**
1:b0b6021:      * Set up a durable suscriber test.
2:b0b6021:      * 
1:b0b6021:      * @see junit.framework.TestCase#setUp()
1:b0b6021:      */
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         this.durable = true;
1:230a86c:         broker = createBroker();
1:b0b6021:         super.setUp();
1:b0b6021:     }
1:40f5aad: 
1:230a86c:     protected void tearDown() throws Exception {
1:b0b6021:         super.tearDown();
1:b0b6021:         broker.stop();
1:b0b6021:     }
1:40f5aad: 
1:230a86c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:230a86c:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:230a86c:         Properties props = new Properties();
1:230a86c:         props.put("prefetchPolicy.durableTopicPrefetch", "5");
1:230a86c:         props.put("prefetchPolicy.optimizeDurableTopicPrefetch", "5");
1:b0b6021:         result.setProperties(props);
1:40f5aad:         return result;
7:40f5aad:     }
1:b0b6021: 
1:230a86c:     protected BrokerService createBroker() throws Exception {
1:230a86c:         BrokerService answer = new BrokerService();
1:40f5aad:         configureBroker(answer);
1:40f5aad:         answer.start();
1:40f5aad:         return answer;
1:40f5aad:     }
1:b0b6021: 
1:230a86c:     protected void configureBroker(BrokerService answer) throws Exception {
1:40f5aad:         answer.setDeleteAllMessagesOnStartup(true);
1:40f5aad:     }
1:40f5aad: 
1:b0b6021:     /**
1:b0b6021:      * Test if all the messages sent are being received.
1:b0b6021:      * 
1:b0b6021:      * @throws Exception
1:b0b6021:      */
1:230a86c:     public void testSlowReceiver() throws Exception {
1:230a86c:         connection2 = createConnection();
1:b0b6021:         connection2.setClientID("test");
1:b0b6021:         connection2.start();
1:230a86c:         consumeSession2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         consumerDestination2 = session2.createTopic(getConsumerSubject() + "2");
1:230a86c:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1:230a86c: 
1:b0b6021:         consumer2.close();
1:b0b6021:         connection2.close();
1:230a86c:         new Thread(new Runnable() {
1:40f5aad: 
1:230a86c:             public void run() {
1:230a86c:                 try {
1:60a526c:                     int count = 0;
1:230a86c:                     for (int loop = 0; loop < 4; loop++) {
1:230a86c:                         connection2 = createConnection();
1:b0b6021:                         connection2.start();
1:230a86c:                         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:                         producer2 = session2.createProducer(null);
1:b0b6021:                         producer2.setDeliveryMode(deliveryMode);
2:b0b6021:                         Thread.sleep(1000);
1:230a86c:                         for (int i = 0; i < NMSG / 4; i++) {
1:230a86c:                             BytesMessage message = session2.createBytesMessage();
1:b0b6021:                             message.writeBytes(new byte[MSIZE]);
1:230a86c:                             message.setStringProperty("test", "test");
1:fc00993:                             message.setIntProperty(COUNT_PROPERY_NAME, count);
1:b0b6021:                             message.setJMSType("test");
1:230a86c:                             producer2.send(consumerDestination2, message);
1:b0b6021:                             Thread.sleep(50);
1:230a86c:                             if (verbose) {
1:fc00993:                                 LOG.debug("Sent(" + loop + "): " + i);
1:b0b6021:                             }
1:60a526c:                             count++;
1:40f5aad:                         }
1:b0b6021:                         producer2.close();
1:b0b6021:                         connection2.stop();
1:b0b6021:                         connection2.close();
1:b0b6021:                     }
1:230a86c:                 } catch (Throwable e) {
1:40f5aad:                     e.printStackTrace();
1:b0b6021:                 }
1:b0b6021:             }
1:230a86c:         }, "SENDER Thread").start();
1:230a86c:         connection3 = createConnection();
2:40f5aad:         connection3.setClientID("test");
2:40f5aad:         connection3.start();
1:230a86c:         consumeSession3 = connection3.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c:         consumer3 = consumeSession3.createDurableSubscriber((Topic)consumerDestination2, getName());
2:40f5aad:         connection3.close();
1:230a86c:         int count = 0;
1:230a86c:         for (int loop = 0; loop < 4; ++loop) {
1:230a86c:             connection3 = createConnection();
1:b0b6021:             connection3.setClientID("test");
1:b0b6021:             connection3.start();
1:230a86c:             consumeSession3 = connection3.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c:             consumer3 = consumeSession3.createDurableSubscriber((Topic)consumerDestination2, getName());
1:230a86c:             Message msg = null;
1:b0b6021:             int i;
1:230a86c:             for (i = 0; i < NMSG / 4; i++) {
1:230a86c:                 msg = consumer3.receive(10000);
1:fc00993:                 if (msg == null) {
1:b0b6021:                     break;
1:fc00993:                 }
1:230a86c:                 if (verbose) {
1:fc00993:                     LOG.debug("Received(" + loop + "): " + i + " count = " + msg.getIntProperty(COUNT_PROPERY_NAME));
1:40f5aad:                 }
1:60a526c:                 assertNotNull(msg);
1:230a86c:                 assertEquals(msg.getJMSType(), "test");
1:230a86c:                 assertEquals(msg.getStringProperty("test"), "test");
1:fc00993:                 assertEquals("Messages received out of order", count, msg.getIntProperty(COUNT_PROPERY_NAME));
1:b0b6021:                 Thread.sleep(500);
1:b0b6021:                 msg.acknowledge();
1:60a526c:                 count++;
1:b0b6021:             }
1:b0b6021:             consumer3.close();
1:230a86c:             assertEquals("Receiver " + loop, NMSG / 4, i);
1:b0b6021:             connection3.close();
1:b0b6021:         }
1:b0b6021:     }
1:40f5aad: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1:     
0:     static final int NMSG = 100;
1:     static final int MSIZE = 256000;
0:     private static final transient Log LOG = LogFactory.getLog(JmsDurableTopicSlowReceiveTest.class);
1:     private static final String COUNT_PROPERY_NAME = "count";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                             message.setIntProperty(COUNT_PROPERY_NAME, count);
1:                                 LOG.debug("Sent(" + loop + "): " + i);
/////////////////////////////////////////////////////////////////////////
1:                 if (msg == null) {
1:                 }
1:                     LOG.debug("Received(" + loop + "): " + i + " count = " + msg.getIntProperty(COUNT_PROPERY_NAME));
1:                 assertEquals("Messages received out of order", count, msg.getIntProperty(COUNT_PROPERY_NAME));
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class JmsDurableTopicSlowReceiveTest extends JmsTopicSendReceiveTest {
/////////////////////////////////////////////////////////////////////////
0:     static final int NMSG = 100;
0:     static final int MSIZE = 256000;
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws Exception {
1:         this.durable = true;
1:         broker = createBroker();
1:     protected void tearDown() throws Exception {
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:         Properties props = new Properties();
1:         props.put("prefetchPolicy.durableTopicPrefetch", "5");
1:         props.put("prefetchPolicy.optimizeDurableTopicPrefetch", "5");
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:     protected void configureBroker(BrokerService answer) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testSlowReceiver() throws Exception {
1:         connection2 = createConnection();
1:         consumeSession2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumerDestination2 = session2.createTopic(getConsumerSubject() + "2");
1:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1: 
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     for (int loop = 0; loop < 4; loop++) {
1:                         connection2 = createConnection();
1:                         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         producer2 = session2.createProducer(null);
1:                         for (int i = 0; i < NMSG / 4; i++) {
1:                             BytesMessage message = session2.createBytesMessage();
1:                             message.setStringProperty("test", "test");
0:                             message.setIntProperty(countProperyName, count);
1:                             producer2.send(consumerDestination2, message);
1:                             if (verbose) {
0:                                 log.debug("Sent(" + loop + "): " + i);
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Throwable e) {
1:         }, "SENDER Thread").start();
1:         connection3 = createConnection();
1:         consumeSession3 = connection3.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer3 = consumeSession3.createDurableSubscriber((Topic)consumerDestination2, getName());
1:         int count = 0;
1:         for (int loop = 0; loop < 4; ++loop) {
1:             connection3 = createConnection();
1:             consumeSession3 = connection3.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:             consumer3 = consumeSession3.createDurableSubscriber((Topic)consumerDestination2, getName());
1:             Message msg = null;
1:             for (i = 0; i < NMSG / 4; i++) {
1:                 msg = consumer3.receive(10000);
0:                 if (msg == null)
1:                 if (verbose) {
0:                     log.debug("Received(" + loop + "): " + i + " count = " + msg.getIntProperty(countProperyName));
1:                 assertEquals(msg.getJMSType(), "test");
1:                 assertEquals(msg.getStringProperty("test"), "test");
0:                 assertEquals("Messages received out of order", count, msg.getIntProperty(countProperyName));
1:             assertEquals("Receiver " + loop, NMSG / 4, i);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(JmsDurableTopicSlowReceiveTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:55810b3
/////////////////////////////////////////////////////////////////////////
1:     static final int NMSG = 200;
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     static final int NMSG=100;
0:     static final int MSIZE=256000;
0:     private static final String countProperyName = "count";
commit:b5a4259
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory result=new ActiveMQConnectionFactory("vm://localhost?async=false");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       
commit:60a526c
/////////////////////////////////////////////////////////////////////////
0:     private final String countProperyName = "count";
/////////////////////////////////////////////////////////////////////////
0:         // KahaPersistenceAdapter adapter=new KahaPersistenceAdapter(new File("activemq-data/durableTest"));
0:         // JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
0:         // answer.setPersistenceAdapter(adapter);
/////////////////////////////////////////////////////////////////////////
1:                     int count = 0;
/////////////////////////////////////////////////////////////////////////
0:                             message.setIntProperty(countProperyName,count);
0:                             if(verbose){
0:                                 System.out.println("Sent("+loop+"): "+i);
1:                             count++;
/////////////////////////////////////////////////////////////////////////
0:         int count =0;
/////////////////////////////////////////////////////////////////////////
0:                 if(verbose) {
0:                     System.out.println("Received("+loop+"): "+i + " count = " + msg.getIntProperty(countProperyName));
1:                 assertNotNull(msg);
0:                 assertEquals(msg.getJMSType(),"test");
0:                 assertEquals(msg.getStringProperty("test"),"test");
0:                 assertEquals("Messages received out of order",count,msg.getIntProperty(countProperyName));
1:                 count++;
commit:b0b6021
/////////////////////////////////////////////////////////////////////////
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0: public class JmsDurableTopicSlowReceiveTest extends JmsTopicSendReceiveTest{
0:     private static final org.apache.commons.logging.Log log=org.apache.commons.logging.LogFactory
0:             .getLog(JmsDurableTopicSlowReceiveTest.class);
1:     protected Connection connection2;
1:     protected Session session2;
1:     protected Session consumeSession2;
1:     protected MessageConsumer consumer2;
1:     protected MessageProducer producer2;
1:     protected Destination consumerDestination2;
1:     BrokerService broker;
0:     final int NMSG=100;
0:     final int MSIZE=256000;
1:     private Connection connection3;
1:     private Session consumeSession3;
1:     private TopicSubscriber consumer3;
1:     /**
1:      * Set up a durable suscriber test.
0:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception{
0:         this.durable=true;
0:         broker=createBroker();
1:         super.setUp();
1:     }
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
1:         broker.stop();
1:     }
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory result=new ActiveMQConnectionFactory("vm://localhost");
0:         Properties props=new Properties();
0:         props.put("prefetchPolicy.durableTopicPrefetch","5");
0:         props.put("prefetchPolicy.optimizeDurableTopicPrefetch","5");
1:         result.setProperties(props);
1: 
1: 
0:         //KahaPersistenceAdapter adapter=new KahaPersistenceAdapter(new File("activemq-data/durableTest"));
0:        // answer.setPersistenceAdapter(adapter);
1:     /**
1:      * Test if all the messages sent are being received.
0:      * 
1:      * @throws Exception
1:      */
0:     public void testSlowReceiver() throws Exception{
0:         connection2=createConnection();
1:         connection2.setClientID("test");
1:         connection2.start();
0:         consumeSession2=connection2.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         session2=connection2.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         consumerDestination2=session2.createTopic(getConsumerSubject()+"2");
0:         consumer2=consumeSession2.createDurableSubscriber((Topic)consumerDestination2,getName());
1:         Thread.sleep(1000);
1:         consumer2.close();
1:         connection2.close();
0:         new Thread(new Runnable(){
0:             public void run(){
0:                 try{
0:                     for(int loop=0;loop<4;loop++){
0:                         connection2=createConnection();
1:                         connection2.start();
0:                         session2=connection2.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:                         producer2=session2.createProducer(null);
1:                         producer2.setDeliveryMode(deliveryMode);
1:                         Thread.sleep(1000);
0:                         for(int i=0;i<NMSG/4;i++){
0:                             BytesMessage message=session2.createBytesMessage();
1:                             message.writeBytes(new byte[MSIZE]);
0:                             message.setStringProperty("test","test");
1:                             message.setJMSType("test");
0:                             producer2.send(consumerDestination2,message);
1:                             Thread.sleep(50);
0:                             System.err.println("Sent("+loop+"): "+i);
1:                         }
1:                         producer2.close();
1:                         connection2.stop();
1:                         connection2.close();
1:                     }
0:                 }catch(Throwable e){
1:                 }
1:             }
0:         },"SENDER Thread").start();
0:         connection3=createConnection();
0:         consumeSession3=connection3.createSession(false,Session.CLIENT_ACKNOWLEDGE);
0:         consumer3=consumeSession3.createDurableSubscriber((Topic)consumerDestination2,getName());
0:         for(int loop=0;loop<4;++loop){
0:             connection3=createConnection();
1:             connection3.setClientID("test");
1:             connection3.start();
0:             consumeSession3=connection3.createSession(false,Session.CLIENT_ACKNOWLEDGE);
0:             consumer3=consumeSession3.createDurableSubscriber((Topic)consumerDestination2,getName());
0:             Message msg=null;
1:             int i;
0:             for(i=0;i<NMSG/4;i++){
0:                 // System.err.println("Receive...");
0:                 msg=consumer3.receive(10000);
0:                 if(msg==null)
1:                     break;
0:                 System.err.println("Received("+loop+"): "+i);
1:                 Thread.sleep(500);
1:                 msg.acknowledge();
1:             }
1:             consumer3.close();
0:             assertEquals("Receiver "+loop,NMSG/4,i);
0:             assertNotNull(msg);
0:             // assertEquals(((BytesMessage) msg).getText(), "test");
0:             assertEquals(msg.getJMSType(),"test");
0:             assertEquals(msg.getStringProperty("test"),"test");
0:             // connection3.stop();
1:             connection3.close();
1:         }
1:     }
commit:40f5aad
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
0: import java.io.File;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
1: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public class JmsDurableTopicSlowReceiveTest extends JmsTopicSendReceiveTest {
0: 	private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0: 			.getLog(JmsDurableTopicSlowReceiveTest.class);
1: 
0: 	protected Connection connection2;
1: 
0: 	protected Session session2;
1: 
0: 	protected Session consumeSession2;
1: 
0: 	protected MessageConsumer consumer2;
1: 
0: 	protected MessageProducer producer2;
1: 
0: 	protected Destination consumerDestination2;
1: 
1: 
0: 	final int NMSG = 100;
1: 
0: 	final int MSIZE = 256000;
1:     
1: 
0: 	private Connection connection3;
1: 
0: 	private Session consumeSession3;
1: 
0: 	private TopicSubscriber consumer3;
1: 
1: 	/**
0: 	 * Set up a durable suscriber test.
0: 	 * 
0: 	 * @see junit.framework.TestCase#setUp()
1: 	 */
0: 	protected void setUp() throws Exception {
0: 		this.durable = true;
0:         createBroker();
0: 		super.setUp();
1: 	}
1:     
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         ActiveMQConnectionFactory result =  new ActiveMQConnectionFactory("vm://localhost");
1:         
1:         return result;
1:     }
1:     
0:     protected BrokerService createBroker() throws Exception{
0:         BrokerService answer=new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1:     
0:     protected void configureBroker(BrokerService answer) throws Exception{
0:         //KahaPersistenceAdapter adapter = new KahaPersistenceAdapter(new File("activemq-data/durableTest"));
0:         //answer.setPersistenceAdapter(adapter);
0:         //JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
0:         //answer.setPersistenceAdapter(adapter);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1:     
1:    
1: 	/**
0: 	 * Test if all the messages sent are being received.
0: 	 * 
0: 	 * @throws Exception
1: 	 */
0: 	public void testSlowReceiver() throws Exception {
0: 		connection2 = createConnection();
0: 		connection2.setClientID("test");
0: 		connection2.start();
1: 
0: 		consumeSession2 = connection2.createSession(false,
0: 				Session.AUTO_ACKNOWLEDGE);
0: 		session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		consumerDestination2 = session2.createTopic(getConsumerSubject() + "2");
0: 		consumer2 = consumeSession2.createDurableSubscriber(
0: 				(Topic) consumerDestination2, getName());
0: 		Thread.sleep(1000);
0: 		consumer2.close();
0: 		connection2.close();
1: 
0: 		new Thread(new Runnable() {
0: 			public void run() {
0: 				try {
0: 					for (int loop = 0; loop < 4; loop++) {
0: 						connection2 = createConnection();
0: 						connection2.start();
0: 						session2 = connection2.createSession(false,
0: 								Session.AUTO_ACKNOWLEDGE);
0: 						producer2 = session2.createProducer(null);
0: 						producer2.setDeliveryMode(deliveryMode);
1: 						
0: 						Thread.sleep(1000);
1: 
0: 						for (int i = 0; i < NMSG / 4; i++) {
0: 							BytesMessage message = session2
0: 									.createBytesMessage();
0: 							message.writeBytes(new byte[MSIZE]);
0: 							message.setStringProperty("test", "test");
0: 							message.setJMSType("test");
0: 							producer2.send(consumerDestination2, message);
0: 							Thread.sleep(50);
0: 							System.err.println("Sent(" + loop +"): " + i);
1:                             
1: 						}
0: 						producer2.close();
0: 						connection2.stop();
0: 						connection2.close();
1:                         
1: 
1: 					}
0: 				} catch (Throwable e) {
1:                     e.printStackTrace();
1: 				}
1: 			}
0: 		},"SENDER Thread").start();
0:         connection3 = createConnection();
1:         connection3.setClientID("test");
1:         connection3.start();
0:         consumeSession3 = connection3.createSession(false,
0:                 Session.CLIENT_ACKNOWLEDGE);
0:         consumer3 = consumeSession3.createDurableSubscriber(
0:                 (Topic) consumerDestination2, getName());
1:         connection3.close();
1: 
1:        
0: 		for (int loop= 0; loop < 4; ++loop) {
1: 			
0: 			connection3 = createConnection();
1: 			connection3.setClientID("test");
1: 			connection3.start();
0: 			consumeSession3 = connection3.createSession(false,
0: 					Session.CLIENT_ACKNOWLEDGE);
0: 			consumer3 = consumeSession3.createDurableSubscriber(
0: 					(Topic) consumerDestination2, getName());
0: 			Message msg = null;
1:            
0: 			int i;
0: 			for (i = 0; i < NMSG / 4; i++) {
0: 				// System.err.println("Receive...");
0: 				msg = consumer3.receive(Integer.MAX_VALUE);
0: 				if (msg == null)
0: 					break;
0: 				System.err.println("Received(" + loop + "): " + i );
0: 				Thread.sleep(500);
0: 				msg.acknowledge();
1: 			}
0: 			consumer3.close();
0: 			assertEquals("Receiver " + loop , NMSG/4,i);
0: 			assertNotNull(msg);
0: 			// assertEquals(((BytesMessage) msg).getText(), "test");
0: 			assertEquals(msg.getJMSType(), "test");
0: 			assertEquals(msg.getStringProperty("test"), "test");
1: 
0: 			//connection3.stop();
1: 			connection3.close();
1: 
1: 		}
1: 	}
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final transient Log log = LogFactory.getLog(JmsDurableTopicSlowReceiveTest.class);
/////////////////////////////////////////////////////////////////////////
0:                                 log.debug("Sent("+loop+"): "+i);
/////////////////////////////////////////////////////////////////////////
0:                     log.debug("Received("+loop+"): "+i + " count = " + msg.getIntProperty(countProperyName));
commit:9583b5f
/////////////////////////////////////////////////////////////////////////
0:         //KahaPersistenceAdapter adapter=new KahaPersistenceAdapter(new File("target/test-amq-data/durableTest"));
commit:12a5355
/////////////////////////////////////////////////////////////////////////
0:                             if (verbose) {
0:                                 System.err.println("Sent("+loop+"): "+i);
0:                             }
/////////////////////////////////////////////////////////////////////////
0:                 if (verbose) {
0:                     System.err.println("Received("+loop+"): "+i);
0:                 }
============================================================================