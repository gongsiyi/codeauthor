1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory.buffer;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A {@link MessageBuffer} which evicts from the largest buffers first.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class SizeBasedMessageBuffer implements MessageBuffer {
1:d29ca2a: 
1:d29ca2a:     private int limit = 100 * 64 * 1024;
1:933eb2f:     private List<MessageQueue> bubbleList = new ArrayList<MessageQueue>();
1:d29ca2a:     private int size;
1:d29ca2a:     private Object lock = new Object();
1:d29ca2a: 
1:d29ca2a:     public SizeBasedMessageBuffer() {
3:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public SizeBasedMessageBuffer(int limit) {
1:d29ca2a:         this.limit = limit;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getSize() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             return size;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a new message queue instance
1:d29ca2a:      */
1:d29ca2a:     public MessageQueue createMessageQueue() {
1:d29ca2a:         MessageQueue queue = new MessageQueue(this);
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             queue.setPosition(bubbleList.size());
1:d29ca2a:             bubbleList.add(queue);
1:d29ca2a:         }
1:d29ca2a:         return queue;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * After a message queue has changed we may need to perform some evictions
1:d29ca2a:      * 
1:d29ca2a:      * @param delta
1:d29ca2a:      * @param queueSize
1:d29ca2a:      */
1:d29ca2a:     public void onSizeChanged(MessageQueue queue, int delta, int queueSize) {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             bubbleUp(queue, queueSize);
1:d29ca2a: 
1:d29ca2a:             size += delta;
1:d29ca2a:             while (size > limit) {
1:933eb2f:                 MessageQueue biggest = bubbleList.get(0);
1:d29ca2a:                 size -= biggest.evictMessage();
1:d29ca2a: 
1:d29ca2a:                 bubbleDown(biggest, 0);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void clear() {
1:d29ca2a:         synchronized (lock) {
1:933eb2f:             for (Iterator<MessageQueue> iter = bubbleList.iterator(); iter.hasNext();) {
1:933eb2f:                 MessageQueue queue = iter.next();
1:d29ca2a:                 queue.clear();
1:d29ca2a:             }
1:d29ca2a:             size = 0;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void bubbleUp(MessageQueue queue, int queueSize) {
1:d29ca2a:         // lets bubble up to head of queueif we need to
1:d29ca2a:         int position = queue.getPosition();
1:d29ca2a:         while (--position >= 0) {
1:933eb2f:             MessageQueue pivot = bubbleList.get(position);
1:d29ca2a:             if (pivot.getSize() < queueSize) {
1:d29ca2a:                 swap(position, pivot, position + 1, queue);
1:74a7a8b:             } else {
1:d29ca2a:                 break;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void bubbleDown(MessageQueue biggest, int position) {
1:d29ca2a:         int queueSize = biggest.getSize();
1:933eb2f:         int end = bubbleList.size();
1:933eb2f:         for (int second = position + 1; second < end; second++) {
1:933eb2f:             MessageQueue pivot = bubbleList.get(second);
1:d29ca2a:             if (pivot.getSize() > queueSize) {
1:d29ca2a:                 swap(position, biggest, second, pivot);
1:74a7a8b:             } else {
1:d29ca2a:                 break;
1:d29ca2a:             }
1:d29ca2a:             position = second;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void swap(int firstPosition, MessageQueue first, int secondPosition, MessageQueue second) {
1:d29ca2a:         bubbleList.set(firstPosition, second);
1:d29ca2a:         bubbleList.set(secondPosition, first);
1:d29ca2a:         first.setPosition(secondPosition);
1:d29ca2a:         second.setPosition(firstPosition);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private List<MessageQueue> bubbleList = new ArrayList<MessageQueue>();
/////////////////////////////////////////////////////////////////////////
1:                 MessageQueue biggest = bubbleList.get(0);
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator<MessageQueue> iter = bubbleList.iterator(); iter.hasNext();) {
1:                 MessageQueue queue = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             MessageQueue pivot = bubbleList.get(position);
/////////////////////////////////////////////////////////////////////////
1:         int end = bubbleList.size();
1:         for (int second = position + 1; second < end; second++) {
1:             MessageQueue pivot = bubbleList.get(second);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0:                 MessageQueue biggest = (MessageQueue)bubbleList.get(0);
/////////////////////////////////////////////////////////////////////////
0:                 MessageQueue queue = (MessageQueue)iter.next();
/////////////////////////////////////////////////////////////////////////
0:             MessageQueue pivot = (MessageQueue)bubbleList.get(position);
1:             } else {
/////////////////////////////////////////////////////////////////////////
0:             MessageQueue pivot = (MessageQueue)bubbleList.get(second);
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory.buffer;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * A {@link MessageBuffer} which evicts from the largest buffers first.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class SizeBasedMessageBuffer implements MessageBuffer {
1: 
1:     private int limit = 100 * 64 * 1024;
0:     private List bubbleList = new ArrayList();
1:     private int size;
1:     private Object lock = new Object();
1: 
1:     public SizeBasedMessageBuffer() {
1:     }
1: 
1:     public SizeBasedMessageBuffer(int limit) {
1:         this.limit = limit;
1:     }
1: 
1:     public int getSize() {
1:         synchronized (lock) {
1:             return size;
1:         }
1:     }
1: 
1:     /**
1:      * Creates a new message queue instance
1:      */
1:     public MessageQueue createMessageQueue() {
1:         MessageQueue queue = new MessageQueue(this);
1:         synchronized (lock) {
1:             queue.setPosition(bubbleList.size());
1:             bubbleList.add(queue);
1:         }
1:         return queue;
1:     }
1: 
1:     /**
1:      * After a message queue has changed we may need to perform some evictions
1:      * 
1:      * @param delta
1:      * @param queueSize
1:      */
1:     public void onSizeChanged(MessageQueue queue, int delta, int queueSize) {
1:         synchronized (lock) {
1:             bubbleUp(queue, queueSize);
1: 
1:             size += delta;
1:             while (size > limit) {
0:                 MessageQueue biggest = (MessageQueue) bubbleList.get(0);
1:                 size -= biggest.evictMessage();
1: 
1:                 bubbleDown(biggest, 0);
1:             }
1:         }
1:     }
1: 
1:     public void clear() {
1:         synchronized (lock) {
0:             for (Iterator iter = bubbleList.iterator(); iter.hasNext();) {
0:                 MessageQueue queue = (MessageQueue) iter.next();
1:                 queue.clear();
1:             }
1:             size = 0;
1:         }
1:     }
1: 
1:     protected void bubbleUp(MessageQueue queue, int queueSize) {
1:         // lets bubble up to head of queueif we need to
1:         int position = queue.getPosition();
1:         while (--position >= 0) {
0:             MessageQueue pivot = (MessageQueue) bubbleList.get(position);
1:             if (pivot.getSize() < queueSize) {
1:                 swap(position, pivot, position + 1, queue);
1:             }
0:             else {
1:                 break;
1:             }
1:         }
1:     }
1: 
1:     protected void bubbleDown(MessageQueue biggest, int position) {
1:         int queueSize = biggest.getSize();
0:         for (int second = position + 1, end = bubbleList.size(); second < end; second++) {
0:             MessageQueue pivot = (MessageQueue) bubbleList.get(second);
1:             if (pivot.getSize() > queueSize) {
1:                 swap(position, biggest, second, pivot);
1:             }
0:             else {
1:                 break;
1:             }
1:             position = second;
1:         }
1:     }
1: 
1:     protected void swap(int firstPosition, MessageQueue first, int secondPosition, MessageQueue second) {
1:         bubbleList.set(firstPosition, second);
1:         bubbleList.set(secondPosition, first);
1:         first.setPosition(secondPosition);
1:         second.setPosition(firstPosition);
1:     }
1: }
============================================================================