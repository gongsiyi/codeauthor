1:f30b0d8: /**
1:f30b0d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f30b0d8:  * contributor license agreements.  See the NOTICE file distributed with
1:f30b0d8:  * this work for additional information regarding copyright ownership.
1:f30b0d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f30b0d8:  * (the "License"); you may not use this file except in compliance with
1:f30b0d8:  * the License.  You may obtain a copy of the License at
2:f30b0d8:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f30b0d8:  *
1:f30b0d8:  * Unless required by applicable law or agreed to in writing, software
1:f30b0d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f30b0d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f30b0d8:  * See the License for the specific language governing permissions and
1:f30b0d8:  * limitations under the License.
1:f30b0d8:  */
1:f30b0d8: package org.apache.activemq.console.command;
2:f30b0d8: 
1:f30b0d8: import java.util.ArrayList;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:f30b0d8: 
1:f30b0d8: public class BstatCommand extends QueryCommand {
1:5f1adbe: 
1:5f1adbe:     protected String[] helpFile = new String[] {
1:5f1adbe:         "Task Usage: activemq-admin bstat [bstat-options] [broker-name]",
1:5f1adbe:         "Description: Performs a predefined query that displays useful statistics regarding the specified broker.",
1:5f1adbe:         "             If no broker name is specified, it will try and select from all registered brokers.",
1:5f1adbe:         "",
1:5f1adbe:         "Bstat Options:",
1:5f1adbe:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:2b5d9b1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
1:0dec0b6:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:0dec0b6:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:0dec0b6:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:5f1adbe:         "    --version                     Display the version information.",
1:5f1adbe:         "    -h,-?,--help                  Display the query broker help information.",
1:5f1adbe:         "",
1:5f1adbe:         "Examples:",
1:5f1adbe:         "    activemq-admin bstat localhost",
1:5f1adbe:         "        - Display a summary of statistics for the broker 'localhost'"
1:5f1adbe:     };
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "bstat";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Performs a predefined query that displays useful statistics regarding the specified broker";
1:60646c9:     }
1:60646c9: 
1:f30b0d8:     /**
1:f30b0d8:      * Performs a predefiend query option
1:f30b0d8:      * @param tokens - command arguments
1:f30b0d8:      * @throws Exception
1:f30b0d8:      */
1:2b5d9b1:     @Override
1:5f1adbe:     protected void runTask(List<String> tokens) throws Exception {
1:5f1adbe:         List<String> queryTokens = new ArrayList<String>();
1:f30b0d8:         // Find the first non-option token
1:f30b0d8:         String brokerName = "*";
1:2b5d9b1:         for (Iterator<String> i = tokens.iterator(); i.hasNext();) {
1:2b5d9b1:             String token = i.next();
1:f30b0d8:             if (!token.startsWith("-")) {
1:f30b0d8:                 brokerName = token;
1:f30b0d8:                 break;
1:f30b0d8:             } else {
1:f30b0d8:                 // Re-insert options
1:f30b0d8:                 queryTokens.add(token);
1:f30b0d8:             }
1:f30b0d8:         }
1:5f1adbe: 
1:f30b0d8:         // Build the predefined option
1:f30b0d8:         queryTokens.add("--objname");
1:1a1ebd9:         queryTokens.add("type=*,brokerName=" + brokerName + ",*");
1:f30b0d8:         queryTokens.add("-xQTopic=ActiveMQ.Advisory.*");
1:2a8427d:         queryTokens.add("--view");
1:1a1ebd9:         queryTokens.add("BrokerName,Name,connectorName,networkConnectorName,destinationName,destinationType,EnqueueCount,"
1:5f1adbe:                         + "DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages,"
1:2b5d9b1:                         + "TotalMessageCount,ConsumerCount,TotalConsumerCount,DispatchCount,Duplex,NetworkTTL,Uptime");
1:f30b0d8: 
1:f30b0d8:         // Call the query command
1:2a8427d:         super.parseOptions(queryTokens);
1:f30b0d8:         super.runTask(queryTokens);
1:f30b0d8:     }
1:f30b0d8: 
1:a015154:     /**
1:a015154:      * Print the help messages for the browse command
1:a015154:      */
1:2b5d9b1:     @Override
1:a015154:     protected void printHelp() {
1:a015154:         context.printHelp(helpFile);
1:a015154:     }
1:a015154: 
1:f30b0d8: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2b5d9b1
/////////////////////////////////////////////////////////////////////////
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         for (Iterator<String> i = tokens.iterator(); i.hasNext();) {
1:             String token = i.next();
/////////////////////////////////////////////////////////////////////////
1:                         + "TotalMessageCount,ConsumerCount,TotalConsumerCount,DispatchCount,Duplex,NetworkTTL,Uptime");
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1a1ebd9
/////////////////////////////////////////////////////////////////////////
1:         queryTokens.add("type=*,brokerName=" + brokerName + ",*");
1:         queryTokens.add("BrokerName,Name,connectorName,networkConnectorName,destinationName,destinationType,EnqueueCount,"
0:                         + "TotalMessageCount,ConsumerCount,TotalConsumerCount,DispatchCount,Duplex,NetworkTTL");
commit:87eba29
/////////////////////////////////////////////////////////////////////////
0:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
author:Christian Posta
-------------------------------------------------------------------------------
commit:2a8427d
/////////////////////////////////////////////////////////////////////////
1:         queryTokens.add("--view");
1:         super.parseOptions(queryTokens);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String getName() {
1:         return "bstat";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Performs a predefined query that displays useful statistics regarding the specified broker";
1:     }
1: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.List;
1: 
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: activemq-admin bstat [bstat-options] [broker-name]",
1:         "Description: Performs a predefined query that displays useful statistics regarding the specified broker.",
1:         "             If no broker name is specified, it will try and select from all registered brokers.",
1:         "",
1:         "Bstat Options:",
1:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:         "    --version                     Display the version information.",
1:         "    -h,-?,--help                  Display the query broker help information.",
1:         "",
1:         "Examples:",
1:         "    activemq-admin bstat localhost",
1:         "        - Display a summary of statistics for the broker 'localhost'"
1:     };
1:     
1:     protected void runTask(List<String> tokens) throws Exception {
1:         List<String> queryTokens = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
0:         queryTokens.add("Type,BrokerName,Destination,ConnectorName,EnqueueCount,"
1:                         + "DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages,"
0:                         + "TotalMessages,ConsumerCount,TotalConsumerCount,DispatchQueueSize");
author:Robert Davies
-------------------------------------------------------------------------------
commit:a015154
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
1:         context.printHelp(helpFile);
1:     }
1: 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:f30b0d8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import java.util.List;
0: import java.util.Iterator;
1: import java.util.ArrayList;
1: 
1: public class BstatCommand extends QueryCommand {
1:     /**
1:      * Performs a predefiend query option
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
0:         List queryTokens = new ArrayList();
1:         // Find the first non-option token
1:         String brokerName = "*";
0:         for (Iterator i = tokens.iterator(); i.hasNext();) {
0:             String token = (String)i.next();
1:             if (!token.startsWith("-")) {
1:                 brokerName = token;
1:                 break;
1:             } else {
1:                 // Re-insert options
1:                 queryTokens.add(token);
1:             }
1:         }
1: 
1:         // Build the predefined option
1:         queryTokens.add("--objname");
0:         queryTokens.add("Type=*,BrokerName=" + brokerName);
1:         queryTokens.add("-xQTopic=ActiveMQ.Advisory.*");
0:         queryTokens.add("--vuew");
0:         queryTokens.add("Type,BrokerName,Destination,ConnectorName,EnqueueCount," +
0:                         "DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages," +
0:                         "TotalMessages,ConsumerCount,TotalConsumerCount,DispatchQueueSize");
1: 
1:         // Call the query command
1:         super.runTask(queryTokens);
1:     }
1: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: activemq-admin bstat [bstat-options] [broker-name]",
0:         "Description: Performs a predefined query that displays useful statistics regarding the specified broker.",
0:         "             If no broker name is specified, it will try and select from all registered brokers.",
0:         "",
0:         "Bstat Options:",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the query broker help information.",
0:         "",
0:         "Examples:",
0:         "    activemq-admin bstat localhost",
0:         "        - Display a summary of statistics for the broker 'localhost'"
0:     };
1: }
============================================================================