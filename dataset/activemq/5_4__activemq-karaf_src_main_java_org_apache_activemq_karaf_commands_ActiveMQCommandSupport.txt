1:d1fa2ba: /*
1:d1fa2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d1fa2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:d1fa2ba:  * this work for additional information regarding copyright ownership.
1:d1fa2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d1fa2ba:  * (the "License"); you may not use this file except in compliance with
1:d1fa2ba:  * the License.  You may obtain a copy of the License at
1:d1fa2ba:  *
1:d1fa2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d1fa2ba:  *
1:d1fa2ba:  * Unless required by applicable law or agreed to in writing, software
1:d1fa2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d1fa2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d1fa2ba:  * See the License for the specific language governing permissions and
1:d1fa2ba:  * limitations under the License.
1:d1fa2ba:  */
1:d1fa2ba: package org.apache.activemq.karaf.commands;
3:d1fa2ba: 
1:55fa377: import org.apache.activemq.console.CommandContext;
1:fb684db: import org.apache.activemq.console.command.AbstractJmxCommand;
1:d1fa2ba: import org.apache.activemq.console.command.Command;
1:d1fa2ba: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:d1fa2ba: import org.apache.felix.gogo.commands.Argument;
1:55fa377: import org.apache.karaf.shell.console.OsgiCommandSupport;
1:55fa377: 
1:55fa377: import java.util.ArrayList;
1:d1fa2ba: 
1:d1fa2ba: /**
1:d1fa2ba:  * @version $Rev: 960482 $ $Date: 2010-07-05 10:28:33 +0200 (Mon, 05 Jul 2010) $
1:d1fa2ba:  */
1:d1fa2ba: public class ActiveMQCommandSupport extends OsgiCommandSupport {
1:d1fa2ba: 
1:d1fa2ba:     private Command command;
1:d1fa2ba: 
1:d1fa2ba:     @Argument(index=0, multiValued=true, required=true)
1:55fa377:     private ArrayList<String> arguments = new ArrayList<String>();
1:d1fa2ba: 
1:d1fa2ba:     protected Object doExecute() throws Exception {
1:d1fa2ba:         CommandContext context2 = new CommandContext();
1:d1fa2ba:         context2.setFormatter(new CommandShellOutputFormatter(System.out));
1:d1fa2ba:         Command currentCommand = command.getClass().newInstance();
1:d1fa2ba: 
1:d1fa2ba:         try {
1:d1fa2ba:             currentCommand.setCommandContext(context2);
1:a503172:             // must be added first
1:fb684db:             if (command instanceof AbstractJmxCommand) {
1:fb684db:                 arguments.add(0, "--jmxlocal");
1:fb684db:             }
1:55fa377:             currentCommand.execute(arguments);
1:d1fa2ba:             return null;
1:d1fa2ba:         } catch (Throwable e) {
1:d1fa2ba:             Throwable cur = e;
1:d1fa2ba:             while (cur.getCause() != null) {
1:d1fa2ba:                 cur = cur.getCause();
1:d1fa2ba:             }
1:d1fa2ba:             if (cur instanceof java.net.ConnectException) {
1:d1fa2ba:                 context2
1:d1fa2ba:                     .print("\n"
1:d1fa2ba:                         + "Could not connect to JMX server.  This command requires that the remote JMX server be enabled.\n"
1:d1fa2ba:                         + "This is typically done by adding the following JVM arguments: \n"
1:d1fa2ba:                         + "   -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.authenticate=false \n"
1:d1fa2ba:                         + "   -Dcom.sun.management.jmxremote.ssl=false \n" + "\n"
1:d1fa2ba:                         + "The connection error was: " + cur + "\n");
1:d1fa2ba:             } else {
1:d1fa2ba:                 if (e instanceof Exception) {
1:d1fa2ba:                     throw (Exception)e;
1:d1fa2ba:                 } else {
1:d1fa2ba:                     throw new RuntimeException(e);
1:d1fa2ba:                 }
1:d1fa2ba: 
1:d1fa2ba:             }
1:d1fa2ba:         }
1:d1fa2ba:         return null;
1:d1fa2ba: 
1:d1fa2ba:     }
1:d1fa2ba: 
1:7fd5fa9:     /**
1:7fd5fa9:      * @return the description of the command.
1:7fd5fa9:      */
1:7fd5fa9:     public String description() {
1:7fd5fa9:         return command.getOneLineDescription();
1:7fd5fa9:     }
1:7fd5fa9: 
1:d1fa2ba:     public Command getCommand() {
1:d1fa2ba:         return command;
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     public void setCommand(Command command) {
1:d1fa2ba:         this.command = command;
1:d1fa2ba:     }
1:d1fa2ba: 
1:d1fa2ba:     public static String[] toStringArray(Object args[]) {
1:d1fa2ba:         String strings[] = new String[args.length];
1:d1fa2ba:         for(int i = 0; i < args.length; i++) {
1:d1fa2ba:             strings[i] = String.valueOf(args[i]);
1:d1fa2ba:         }
1:d1fa2ba:         return strings;
1:d1fa2ba:     }
1:d1fa2ba: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:7fd5fa9
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the description of the command.
1:      */
1:     public String description() {
1:         return command.getOneLineDescription();
1:     }
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:fb684db
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.command.AbstractJmxCommand;
/////////////////////////////////////////////////////////////////////////
1:             if (command instanceof AbstractJmxCommand) {
1:                 arguments.add(0, "--jmxlocal");
1:             }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:a503172
/////////////////////////////////////////////////////////////////////////
1:             // must be added first
0:             arguments.add(0, "--jmxlocal");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:55fa377
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.CommandContext;
1: import org.apache.karaf.shell.console.OsgiCommandSupport;
1: 
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     private ArrayList<String> arguments = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
0:             arguments.add("--jmxlocal");
1:             currentCommand.execute(arguments);
commit:d1fa2ba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.commands;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.Collection;
1: 
1: import org.apache.activemq.console.command.Command;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
0: import org.apache.activemq.console.CommandContext;
0: import org.apache.karaf.shell.console.OsgiCommandSupport;
1: import org.apache.felix.gogo.commands.Argument;
1: 
1: /**
1:  * @version $Rev: 960482 $ $Date: 2010-07-05 10:28:33 +0200 (Mon, 05 Jul 2010) $
1:  */
1: public class ActiveMQCommandSupport extends OsgiCommandSupport {
1: 
1:     private Command command;
1: 
1:     @Argument(index=0, multiValued=true, required=true)
0:     private Collection<String> arguments = null;
1: 
1:     protected Object doExecute() throws Exception {
0:         final String[] args = toStringArray(arguments.toArray());
1: 
1:         CommandContext context2 = new CommandContext();
1:         context2.setFormatter(new CommandShellOutputFormatter(System.out));
1:         Command currentCommand = command.getClass().newInstance();
1: 
1:         try {
1:             currentCommand.setCommandContext(context2);
0:             currentCommand.execute(new ArrayList<String>(Arrays.asList(args)));
1:             return null;
1:         } catch (Throwable e) {
1:             Throwable cur = e;
1:             while (cur.getCause() != null) {
1:                 cur = cur.getCause();
1:             }
1:             if (cur instanceof java.net.ConnectException) {
1:                 context2
1:                     .print("\n"
1:                         + "Could not connect to JMX server.  This command requires that the remote JMX server be enabled.\n"
1:                         + "This is typically done by adding the following JVM arguments: \n"
1:                         + "   -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.authenticate=false \n"
1:                         + "   -Dcom.sun.management.jmxremote.ssl=false \n" + "\n"
1:                         + "The connection error was: " + cur + "\n");
1:             } else {
1:                 if (e instanceof Exception) {
1:                     throw (Exception)e;
1:                 } else {
1:                     throw new RuntimeException(e);
1:                 }
1: 
1:             }
1:         }
1:         return null;
1: 
1:     }
1: 
1:     public Command getCommand() {
1:         return command;
1:     }
1: 
1:     public void setCommand(Command command) {
1:         this.command = command;
1:     }
1: 
1:     public static String[] toStringArray(Object args[]) {
1:         String strings[] = new String[args.length];
1:         for(int i = 0; i < args.length; i++) {
1:             strings[i] = String.valueOf(args[i]);
1:         }
1:         return strings;
1:     }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:67699f2
/////////////////////////////////////////////////////////////////////////
0:     private Collection<String> arguments;
0:             currentCommand.execute(arguments != null ? new ArrayList<String>(arguments) : new ArrayList<String>());
============================================================================