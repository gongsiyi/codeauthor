1:7d136de: /**
1:7d136de:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d136de:  * contributor license agreements.  See the NOTICE file distributed with
1:7d136de:  * this work for additional information regarding copyright ownership.
1:7d136de:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d136de:  * (the "License"); you may not use this file except in compliance with
1:7d136de:  * the License.  You may obtain a copy of the License at
1:7d136de:  *
1:7d136de:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d136de:  *
1:7d136de:  * Unless required by applicable law or agreed to in writing, software
1:7d136de:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d136de:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d136de:  * See the License for the specific language governing permissions and
1:7d136de:  * limitations under the License.
1:7d136de:  */
1:7d136de: package org.apache.activemq.bugs;
1:7d136de: 
1:7d136de: import java.net.URI;
1:7d136de: 
1:7d136de: import javax.jms.Connection;
1:7d136de: import javax.jms.ConnectionFactory;
1:7d136de: import javax.jms.Destination;
1:7d136de: import javax.jms.Message;
1:7d136de: import javax.jms.MessageConsumer;
1:7d136de: import javax.jms.MessageProducer;
1:7d136de: import javax.jms.Session;
1:7d136de: import javax.jms.TextMessage;
1:7d136de: 
1:7d136de: import org.apache.activemq.ActiveMQConnectionFactory;
1:7d136de: import org.apache.activemq.broker.BrokerFactory;
1:7d136de: import org.apache.activemq.broker.BrokerService;
1:7d136de: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
1:7d136de: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7d136de: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7d136de: import org.junit.After;
1:7d136de: import org.junit.Assert;
1:7d136de: import org.junit.Before;
1:7d136de: import org.junit.Test;
1:7d136de: import org.slf4j.Logger;
1:7d136de: import org.slf4j.LoggerFactory;
1:7d136de: 
1:7d136de: public class AMQ5421Test {
1:7d136de: 
1:7d136de:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5421Test.class);
1:7d136de: 
1:7d136de:     private static final int DEST_COUNT = 1000;
1:7d136de:     private final Destination[] destination = new Destination[DEST_COUNT];
1:7d136de:     private final MessageProducer[] producer = new MessageProducer[DEST_COUNT];
1:7d136de:     private BrokerService brokerService;
1:7d136de:     private String connectionUri;
1:7d136de: 
1:7d136de:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:7d136de:         ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(connectionUri);
1:7d136de:         conFactory.setWatchTopicAdvisories(false);
1:7d136de:         return conFactory;
1:7d136de:     }
1:7d136de: 
1:7d136de:     protected AbortSlowAckConsumerStrategy createSlowConsumerStrategy() {
1:7d136de:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:7d136de:         strategy.setCheckPeriod(2000);
1:7d136de:         strategy.setMaxTimeSinceLastAck(5000);
1:7d136de:         strategy.setIgnoreIdleConsumers(false);
1:7d136de: 
1:7d136de:         return strategy;
1:7d136de:     }
1:7d136de: 
1:7d136de:     @Before
1:7d136de:     public void setUp() throws Exception {
1:7d136de:         brokerService = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false&useJmx=true"));
1:7d136de:         PolicyEntry policy = new PolicyEntry();
1:7d136de: 
1:7d136de:         policy.setSlowConsumerStrategy(createSlowConsumerStrategy());
1:7d136de:         policy.setQueuePrefetch(10);
1:7d136de:         policy.setTopicPrefetch(10);
1:7d136de:         PolicyMap pMap = new PolicyMap();
1:7d136de:         pMap.setDefaultEntry(policy);
1:5667e4d:         brokerService.setUseJmx(false);
1:7d136de:         brokerService.setDestinationPolicy(pMap);
1:7d136de:         brokerService.addConnector("tcp://0.0.0.0:0");
1:7d136de:         brokerService.start();
1:7d136de: 
1:7d136de:         connectionUri = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:7d136de:     }
1:7d136de: 
1:7d136de:     @Test
1:7d136de:     public void testManyTempDestinations() throws Exception {
1:7d136de:         Connection connection = createConnectionFactory().createConnection();
1:7d136de:         connection.start();
1:7d136de:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7d136de: 
1:7d136de:         for (int i = 0; i < DEST_COUNT; i++) {
1:7d136de:             destination[i] = session.createTemporaryQueue();
1:7d136de:             LOG.debug("Created temp queue: [}", i);
1:7d136de:         }
1:7d136de: 
1:7d136de:         for (int i = 0; i < DEST_COUNT; i++) {
1:7d136de:             producer[i] = session.createProducer(destination[i]);
1:7d136de:             LOG.debug("Created producer: {}", i);
1:7d136de:             TextMessage msg = session.createTextMessage(" testMessage " + i);
1:7d136de:             producer[i].send(msg);
1:7d136de:             LOG.debug("message sent: {}", i);
1:7d136de:             MessageConsumer consumer = session.createConsumer(destination[i]);
1:7d136de:             Message message = consumer.receive(1000);
1:7d136de:             Assert.assertTrue(message.equals(msg));
1:7d136de:         }
1:7d136de: 
1:7d136de:         for (int i = 0; i < DEST_COUNT; i++) {
1:7d136de:             producer[i].close();
1:7d136de:         }
1:7d136de: 
1:7d136de:         connection.close();
1:7d136de:     }
1:7d136de: 
1:7d136de:     @After
1:7d136de:     public void tearDown() throws Exception {
1:7d136de:         brokerService.stop();
1:7d136de:         brokerService.waitUntilStopped();
1:7d136de:     }
1:7d136de: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5667e4d
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
commit:7d136de
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ5421Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5421Test.class);
1: 
1:     private static final int DEST_COUNT = 1000;
1:     private final Destination[] destination = new Destination[DEST_COUNT];
1:     private final MessageProducer[] producer = new MessageProducer[DEST_COUNT];
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(connectionUri);
1:         conFactory.setWatchTopicAdvisories(false);
1:         return conFactory;
1:     }
1: 
1:     protected AbortSlowAckConsumerStrategy createSlowConsumerStrategy() {
1:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:         strategy.setCheckPeriod(2000);
1:         strategy.setMaxTimeSinceLastAck(5000);
1:         strategy.setIgnoreIdleConsumers(false);
1: 
1:         return strategy;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false&useJmx=true"));
1:         PolicyEntry policy = new PolicyEntry();
1: 
1:         policy.setSlowConsumerStrategy(createSlowConsumerStrategy());
1:         policy.setQueuePrefetch(10);
1:         policy.setTopicPrefetch(10);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         brokerService.setDestinationPolicy(pMap);
1:         brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.start();
1: 
1:         connectionUri = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:     }
1: 
1:     @Test
1:     public void testManyTempDestinations() throws Exception {
1:         Connection connection = createConnectionFactory().createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         for (int i = 0; i < DEST_COUNT; i++) {
1:             destination[i] = session.createTemporaryQueue();
1:             LOG.debug("Created temp queue: [}", i);
1:         }
1: 
1:         for (int i = 0; i < DEST_COUNT; i++) {
1:             producer[i] = session.createProducer(destination[i]);
1:             LOG.debug("Created producer: {}", i);
1:             TextMessage msg = session.createTextMessage(" testMessage " + i);
1:             producer[i].send(msg);
1:             LOG.debug("message sent: {}", i);
1:             MessageConsumer consumer = session.createConsumer(destination[i]);
1:             Message message = consumer.receive(1000);
1:             Assert.assertTrue(message.equals(msg));
1:         }
1: 
1:         for (int i = 0; i < DEST_COUNT; i++) {
1:             producer[i].close();
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: }
============================================================================