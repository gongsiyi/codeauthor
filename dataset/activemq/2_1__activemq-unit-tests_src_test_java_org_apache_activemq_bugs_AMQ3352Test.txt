1:0817f5d: /**
1:0817f5d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0817f5d:  * contributor license agreements.  See the NOTICE file distributed with
1:0817f5d:  * this work for additional information regarding copyright ownership.
1:0817f5d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0817f5d:  * (the "License"); you may not use this file except in compliance with
1:0817f5d:  * the License.  You may obtain a copy of the License at
1:0817f5d:  *
1:0817f5d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0817f5d:  *
1:0817f5d:  * Unless required by applicable law or agreed to in writing, software
1:0817f5d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0817f5d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0817f5d:  * See the License for the specific language governing permissions and
1:0817f5d:  * limitations under the License.
1:0817f5d:  */
1:0817f5d: package org.apache.activemq.bugs;
1:0817f5d: 
1:0817f5d: import javax.jms.DeliveryMode;
1:0817f5d: import javax.jms.MessageProducer;
1:0817f5d: import javax.jms.Session;
1:0817f5d: 
1:0817f5d: import org.apache.activemq.ActiveMQConnection;
1:0817f5d: import org.apache.activemq.ActiveMQConnectionFactory;
1:0817f5d: import org.apache.activemq.broker.BrokerService;
1:0817f5d: import org.apache.activemq.broker.TransportConnector;
1:0817f5d: import org.junit.After;
1:0817f5d: import org.junit.Before;
1:0817f5d: import org.junit.Test;
1:0817f5d: 
1:0817f5d: public class AMQ3352Test
1:0817f5d: {
1:0817f5d:     TransportConnector connector;
1:0817f5d:      BrokerService brokerService;
1:0817f5d: 
1:0817f5d:     @Before
1:0817f5d:     public void startBroker() throws Exception {
1:0817f5d:         brokerService = new BrokerService();
1:0817f5d:         brokerService.setDeleteAllMessagesOnStartup(true);
1:0817f5d:         connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:0817f5d:         brokerService.start();
1:0817f5d:     }
1:0817f5d: 
1:0817f5d:     @After
1:0817f5d:     public void stopBroker() throws Exception {
1:0817f5d:         brokerService.stop();
1:0817f5d:     }
1:0817f5d: 
1:0817f5d:    @Test
1:0817f5d:    public void verifyEnqueueLargeNumWithStateTracker() throws Exception {
1:0817f5d:         String url = "failover:(" + connector.getPublishableConnectString() + ")?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=131072";
1:0817f5d: 
1:0817f5d:         ActiveMQConnection conn = (ActiveMQConnection)new ActiveMQConnectionFactory(url).createConnection(null, null);
1:0817f5d: 
1:0817f5d:         Session session = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:0817f5d: 
1:0817f5d:         MessageProducer producer = session.createProducer(session.createQueue("EVENTQ"));
1:0817f5d:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:0817f5d:         producer.setDisableMessageID(true);
1:0817f5d:         producer.setDisableMessageTimestamp(true);
1:0817f5d: 
1:0817f5d:         StringBuffer buffer = new StringBuffer();
1:0817f5d:         for (int i=0;i<1024;i++)
1:0817f5d:         {
1:0817f5d:             buffer.append(String.valueOf(Math.random()));
1:0817f5d:         }
1:0817f5d:         String payload = buffer.toString();
1:0817f5d: 
1:0817f5d:        for (int i=0; i<10000; i++) {
1:0817f5d:             StringBuffer buff = new StringBuffer("x");
1:0817f5d:             buff.append(payload);
1:0817f5d:             producer.send(session.createTextMessage(buff.toString()));
1:0817f5d:         }
1:0817f5d:     }
1:0817f5d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:0817f5d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3352Test
1: {
1:     TransportConnector connector;
1:      BrokerService brokerService;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:    @Test
1:    public void verifyEnqueueLargeNumWithStateTracker() throws Exception {
1:         String url = "failover:(" + connector.getPublishableConnectString() + ")?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=131072";
1: 
1:         ActiveMQConnection conn = (ActiveMQConnection)new ActiveMQConnectionFactory(url).createConnection(null, null);
1: 
1:         Session session = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(session.createQueue("EVENTQ"));
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.setDisableMessageID(true);
1:         producer.setDisableMessageTimestamp(true);
1: 
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i=0;i<1024;i++)
1:         {
1:             buffer.append(String.valueOf(Math.random()));
1:         }
1:         String payload = buffer.toString();
1: 
1:        for (int i=0; i<10000; i++) {
1:             StringBuffer buff = new StringBuffer("x");
1:             buff.append(payload);
1:             producer.send(session.createTextMessage(buff.toString()));
1:         }
1:     }
1: }
============================================================================