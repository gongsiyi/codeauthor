4:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
4:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:f812e34: 
1:0efaaec: import java.io.IOException;
1:0efaaec: import java.util.Set;
1:0efaaec: 
1:0efaaec: import javax.management.ObjectName;
1:0efaaec: 
1:d29ca2a: import org.apache.activemq.broker.Connection;
1:0efaaec: import org.apache.activemq.util.IOExceptionSupport;
11:d29ca2a: 
1:d29ca2a: public class ConnectionView implements ConnectionViewMBean {
1:d29ca2a: 
1:d29ca2a:     private final Connection connection;
1:0efaaec:     private final ManagementContext managementContext;
1:f5dcc9d:     private String userName;
1:d29ca2a: 
1:d29ca2a:     public ConnectionView(Connection connection) {
1:0efaaec:         this(connection, null);
4:d29ca2a:     }
1:f812e34: 
1:0efaaec:     public ConnectionView(Connection connection, ManagementContext managementContext) {
1:0efaaec:         this.connection = connection;
1:0efaaec:         this.managementContext = managementContext;
1:0efaaec:     }
1:0efaaec: 
1:0efaaec:     @Override
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         connection.start();
1:d29ca2a:     }
1:d29ca2a: 
1:0efaaec:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:         connection.stop();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is slow
1:d29ca2a:      */
1:0efaaec:     @Override
1:d29ca2a:     public boolean isSlow() {
1:d29ca2a:         return connection.isSlow();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return if after being marked, the Connection is still writing
1:d29ca2a:      */
1:0efaaec:     @Override
1:d29ca2a:     public boolean isBlocked() {
1:d29ca2a:         return connection.isBlocked();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is connected
1:d29ca2a:      */
1:0efaaec:     @Override
1:d29ca2a:     public boolean isConnected() {
1:d29ca2a:         return connection.isConnected();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is active
1:d29ca2a:      */
1:0efaaec:     @Override
1:d29ca2a:     public boolean isActive() {
1:d29ca2a:         return connection.isActive();
1:d29ca2a:     }
1:d29ca2a: 
1:0efaaec:     @Override
1:c255d1d:     public int getDispatchQueueSize() {
1:c255d1d:         return connection.getDispatchQueueSize();
1:c255d1d:     }
1:c255d1d: 
1:d29ca2a:     /**
1:d29ca2a:      * Resets the statistics
1:d29ca2a:      */
1:0efaaec:     @Override
1:d29ca2a:     public void resetStatistics() {
1:d29ca2a:         connection.getStatistics().reset();
1:d29ca2a:     }
1:d29ca2a: 
1:0efaaec:     @Override
1:f812e34:     public String getRemoteAddress() {
1:f812e34:         return connection.getRemoteAddress();
1:f812e34:     }
1:d29ca2a: 
1:aaa81de:     @Override
1:aaa81de:     public String getClientId() {
1:aaa81de:         return connection.getConnectionId();
1:aaa81de:     }
1:aaa81de: 
1:f812e34:     public String getConnectionId() {
1:f812e34:         return connection.getConnectionId();
1:f812e34:     }
1:d29ca2a: 
1:f5dcc9d:     @Override
1:f5dcc9d:     public String getUserName() {
1:f5dcc9d:         return userName;
1:f5dcc9d:     }
1:f5dcc9d: 
1:f5dcc9d:     public void setUserName(String userName) {
1:f5dcc9d:         this.userName = userName;
1:f5dcc9d:     }
1:0efaaec: 
1:0efaaec:     @Override
1:0efaaec:     public ObjectName[] getConsumers() {
1:0efaaec:         ObjectName[] result = null;
1:0efaaec: 
1:0efaaec:         if (connection != null && managementContext != null) {
1:0efaaec: 
1:0efaaec:             try {
1:0efaaec:                 ObjectName query = createConsumerQueury(connection.getConnectionId());
1:0efaaec:                 Set<ObjectName> names = managementContext.queryNames(query, null);
1:0efaaec:                 result = names.toArray(new ObjectName[0]);
1:0efaaec:             } catch (Exception e) {
1:0efaaec:             }
1:0efaaec:         }
1:0efaaec: 
1:0efaaec:         return result;
1:0efaaec:     }
1:0efaaec: 
1:0efaaec:     @Override
1:0efaaec:     public ObjectName[] getProducers() {
1:0efaaec:         ObjectName[] result = null;
1:0efaaec: 
1:0efaaec:         if (connection != null && managementContext != null) {
1:0efaaec: 
1:0efaaec:             try {
1:0efaaec:                 ObjectName query = createProducerQueury(connection.getConnectionId());
1:0efaaec:                 Set<ObjectName> names = managementContext.queryNames(query, null);
1:0efaaec:                 result = names.toArray(new ObjectName[0]);
1:0efaaec:             } catch (Exception e) {
1:0efaaec:             }
1:0efaaec:         }
1:0efaaec: 
1:0efaaec:         return result;
1:0efaaec:     }
1:0efaaec: 
1:0efaaec:     private ObjectName createConsumerQueury(String clientId) throws IOException {
1:0efaaec:         try {
1:7d7d6fa:             return BrokerMBeanSupport.createConsumerQueury(managementContext.getJmxDomainName(), clientId);
1:0efaaec:         } catch (Throwable e) {
1:0efaaec:             throw IOExceptionSupport.create(e);
1:0efaaec:         }
1:0efaaec:     }
1:93ca044: 
1:0efaaec:     private ObjectName createProducerQueury(String clientId) throws IOException {
1:0efaaec:         try {
1:7d7d6fa:             return BrokerMBeanSupport.createProducerQueury(managementContext.getJmxDomainName(), clientId);
1:0efaaec:         } catch (Throwable e) {
1:0efaaec:             throw IOExceptionSupport.create(e);
1:0efaaec:         }
1:0efaaec:     }
1:0efaaec: 
1:93ca044:     @Override
1:93ca044:     public int getActiveTransactionCount() {
1:93ca044:         return connection.getActiveTransactionCount();
1:93ca044:     }
1:93ca044: 
1:93ca044:     @Override
1:93ca044:     public Long getOldestActiveTransactionDuration() {
1:93ca044:         return connection.getOldestActiveTransactionDuration();
1:93ca044:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:93ca044
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int getActiveTransactionCount() {
1:         return connection.getActiveTransactionCount();
1:     }
1: 
1:     @Override
1:     public Long getOldestActiveTransactionDuration() {
1:         return connection.getOldestActiveTransactionDuration();
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1:             return BrokerMBeanSupport.createConsumerQueury(managementContext.getJmxDomainName(), clientId);
/////////////////////////////////////////////////////////////////////////
1:             return BrokerMBeanSupport.createProducerQueury(managementContext.getJmxDomainName(), clientId);
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getClientId() {
1:         return connection.getConnectionId();
1:     }
1: 
commit:c255d1d
/////////////////////////////////////////////////////////////////////////
1:     public int getDispatchQueueSize() {
1:         return connection.getDispatchQueueSize();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:63a660a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return BrokerMBeanSuppurt.createConsumerQueury(managementContext.getJmxDomainName(), clientId);
/////////////////////////////////////////////////////////////////////////
0:             return BrokerMBeanSuppurt.createProducerQueury(managementContext.getJmxDomainName(), clientId);
commit:0efaaec
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Set;
1: 
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.JMXSupport;
1:     private final ManagementContext managementContext;
1:         this(connection, null);
1:     public ConnectionView(Connection connection, ManagementContext managementContext) {
1:         this.connection = connection;
1:         this.managementContext = managementContext;
1:     }
1: 
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public ObjectName[] getConsumers() {
1:         ObjectName[] result = null;
1: 
1:         if (connection != null && managementContext != null) {
1: 
1:             try {
1:                 ObjectName query = createConsumerQueury(connection.getConnectionId());
1:                 Set<ObjectName> names = managementContext.queryNames(query, null);
1:                 result = names.toArray(new ObjectName[0]);
1:             } catch (Exception e) {
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     @Override
1:     public ObjectName[] getProducers() {
1:         ObjectName[] result = null;
1: 
1:         if (connection != null && managementContext != null) {
1: 
1:             try {
1:                 ObjectName query = createProducerQueury(connection.getConnectionId());
1:                 Set<ObjectName> names = managementContext.queryNames(query, null);
1:                 result = names.toArray(new ObjectName[0]);
1:             } catch (Exception e) {
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     private ObjectName createConsumerQueury(String clientId) throws IOException {
1:         try {
0:             return new ObjectName(managementContext.getJmxDomainName() + ":" + "BrokerName=*,"
0:                                   + "Type=Subscription,persistentMode=*,"
0:                                   + "destinationType=*,destinationName=*,"
0:                                   + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
0:                                   + "consumerId=*");
1:         } catch (Throwable e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     private ObjectName createProducerQueury(String clientId) throws IOException {
1:         try {
0:             return new ObjectName(managementContext.getJmxDomainName() + ":" + "BrokerName=*,"
0:                                   + "Type=Producer,"
0:                                   + "destinationType=*,destinationName=*,"
0:                                   + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
0:                                   + "producerId=*");
1:         } catch (Throwable e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1:     private String userName;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:c37859a
/////////////////////////////////////////////////////////////////////////
0:             return new ObjectName(managementContext.getJmxDomainName() + ":type=Broker,brokerName=*,"
0:                                   + "endpoint=Consumer,"
/////////////////////////////////////////////////////////////////////////
0:             return new ObjectName(managementContext.getJmxDomainName() + ":type=Broker,brokerName=*,"
0:                     + "destinationType=*,destinationName=*,"
0:                     + "endpoint=Producer,"
0:                     + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
0:                     + "producerId=*");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getRemoteAddress() {
1:         return connection.getRemoteAddress();
1:     }
1:     public String getConnectionId() {
1:         return connection.getConnectionId();
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.broker.Connection;
1: 
1: public class ConnectionView implements ConnectionViewMBean {
1: 
1:     private final Connection connection;
1: 
1:     public ConnectionView(Connection connection) {
0:         this.connection = connection;
1:     }
1: 
1:     public void start() throws Exception {
1:         connection.start();
1:     }
1: 
1:     public void stop() throws Exception {
1:         connection.stop();
1:     }
1:     
1:     /**
1:      * @return true if the Connection is slow
1:      */
1:     public boolean isSlow() {
1:         return connection.isSlow();
1:     }
1:     
1:     /**
1:      * @return if after being marked, the Connection is still writing
1:      */
1:     public boolean isBlocked() {
1:         return connection.isBlocked();
1:     }
1:     
1:     
1:     /**
1:      * @return true if the Connection is connected
1:      */
1:     public boolean isConnected() {
1:         return connection.isConnected();
1:     }
1:     
1:     /**
1:      * @return true if the Connection is active
1:      */
1:     public boolean isActive() {
1:         return connection.isActive();
1:     }
1:     
1: 
1:     /**
0:      * Returns the number of messages to be dispatched to this connection
1:      */
0:     public int getDispatchQueueSize() {
0:         return connection.getDispatchQueueSize();
1:     }
1:     
1:     /**
1:      * Resets the statistics
1:      */
1:     public void resetStatistics() {
1:         connection.getStatistics().reset();
1:     }
1: 
1:     /**
0:      * Returns the number of messages enqueued on this connection
1:      * 
0:      * @return the number of messages enqueued on this connection
1:      */
0:     public long getEnqueueCount() {
0:         return connection.getStatistics().getEnqueues().getCount();
1:     
1:     }
1: 
1:     /**
0:      * Returns the number of messages dequeued on this connection
1:      * 
0:      * @return the number of messages dequeued on this connection
1:      */
0:     public long getDequeueCount() {
0:         return connection.getStatistics().getDequeues().getCount();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0a95b7e
/////////////////////////////////////////////////////////////////////////
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:015cd8a
/////////////////////////////////////////////////////////////////////////
0: 	public String getConnectionId() {
0: 		return connection.getConnectionId();
0: 	}	
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
0: 	public String getRemoteAddress() {
0: 		return connection.getRemoteAddress();
0: 	}
0: 
============================================================================