1:dee584b: /**
1:dee584b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dee584b:  * contributor license agreements.  See the NOTICE file distributed with
1:dee584b:  * this work for additional information regarding copyright ownership.
1:dee584b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dee584b:  * (the "License"); you may not use this file except in compliance with
1:dee584b:  * the License.  You may obtain a copy of the License at
1:dee584b:  *
1:dee584b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dee584b:  *
1:dee584b:  * Unless required by applicable law or agreed to in writing, software
1:dee584b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dee584b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dee584b:  * See the License for the specific language governing permissions and
1:dee584b:  * limitations under the License.
1:dee584b:  */
1:dee584b: package org.apache.activemq.usecases;
1:dee584b: 
1:dee584b: import java.io.IOException;
1:dee584b: import java.net.InetAddress;
1:dee584b: import java.net.Socket;
1:dee584b: import java.net.UnknownHostException;
1:dee584b: import java.util.concurrent.CountDownLatch;
1:dee584b: import java.util.concurrent.TimeUnit;
1:dee584b: 
1:dee584b: import javax.jms.ExceptionListener;
1:dee584b: import javax.jms.JMSException;
1:dee584b: import javax.net.SocketFactory;
1:dee584b: 
1:dee584b: import org.apache.activemq.ActiveMQConnection;
1:dee584b: import org.apache.activemq.ActiveMQConnectionFactory;
1:dee584b: import org.apache.activemq.broker.BrokerService;
1:dee584b: import org.apache.activemq.broker.TransportConnector;
1:dee584b: import org.apache.activemq.transport.TransportFactory;
1:dee584b: import org.apache.activemq.transport.TransportListener;
1:dee584b: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:dee584b: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:dee584b: 
1:dee584b: public class DurableConsumerCloseAndReconnectTcpTest extends DurableConsumerCloseAndReconnectTest
1:dee584b: implements ExceptionListener, TransportListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DurableConsumerCloseAndReconnectTcpTest.class);
1:dee584b:     
1:dee584b:     private BrokerService broker;
1:dee584b:     private TransportConnector connector;
1:dee584b: 
1:dee584b:     private CountDownLatch gotException = new CountDownLatch(1);
1:dee584b: 
1:dee584b:     private Exception reconnectException;
1:dee584b: 
1:dee584b:     private boolean reconnectInExceptionListener;
1:dee584b: 
1:dee584b:     private boolean reconnectInTransportListener;
1:dee584b:     
1:dee584b:     public void setUp() throws Exception {
1:dee584b:         broker = new BrokerService();
1:dee584b:         // let the client initiate the inactivity timeout
1:dee584b:         connector = broker.addConnector("tcp://localhost:0?transport.useInactivityMonitor=false");
1:dee584b:         broker.setPersistent(false);
1:dee584b:         broker.start();
1:a8b0d39:         broker.waitUntilStarted();
1:dee584b:         
1:dee584b:         class SlowCloseSocketTcpTransportFactory extends TcpTransportFactory {
1:dee584b: 
1:dee584b:             class SlowCloseSocketFactory extends SocketFactory {
1:dee584b:                 
1:dee584b:                 class SlowCloseSocket extends Socket {
1:dee584b:                     public SlowCloseSocket(String host, int port) throws IOException {
1:dee584b:                         super(host, port);
1:dee584b:                     }
1:dee584b: 
1:dee584b:                     public SlowCloseSocket(InetAddress host, int port) throws IOException {
1:dee584b:                         super(host, port);
1:dee584b:                     }
1:dee584b: 
1:dee584b:                     public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {
1:dee584b:                         super(host, port, localHost, localPort);
1:dee584b:                     }
1:dee584b: 
1:dee584b:                     public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
1:dee584b:                         super(address, port, localAddress, localPort);
1:dee584b:                     }
1:dee584b: 
1:dee584b:                     @Override
1:dee584b:                     public synchronized void close() throws IOException {
1:dee584b:                         LOG.info("delaying close");
1:dee584b:                         try {
1:dee584b:                             TimeUnit.MILLISECONDS.sleep(500);
1:dee584b:                         } catch (InterruptedException e) {
1:dee584b:                             // TODO Auto-generated catch block
1:dee584b:                             e.printStackTrace();
1:dee584b:                         }
1:dee584b:                         super.close();
1:dee584b:                     }
1:dee584b:                     
1:dee584b:                     
1:dee584b:                 }
1:dee584b:                 @Override
1:dee584b:                 public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
1:dee584b:                     return new SlowCloseSocket(host, port);
1:dee584b:                 }
1:dee584b: 
1:dee584b:                 @Override
1:dee584b:                 public Socket createSocket(InetAddress host, int port) throws IOException {
1:dee584b:                     return new SlowCloseSocket(host, port);
1:dee584b:                 }
1:dee584b: 
1:dee584b:                 @Override
1:dee584b:                 public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException,
1:dee584b:                         UnknownHostException {
1:dee584b:                     return new SlowCloseSocket(host, port, localHost, localPort);
1:dee584b:                 }
1:dee584b: 
1:dee584b:                 @Override
1:dee584b:                 public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
1:dee584b:                     return new SlowCloseSocket(address, port, localAddress, localPort);
1:dee584b:                 }
1:dee584b:                 
1:dee584b:             }
1:dee584b:             @Override
1:dee584b:             protected SocketFactory createSocketFactory() throws IOException {
1:dee584b:                 return new SlowCloseSocketFactory();
1:dee584b:             }
1:dee584b:             
1:dee584b:         }
1:dee584b:         
1:dee584b:         TransportFactory.registerTransportFactory("tcp", new SlowCloseSocketTcpTransportFactory());
1:dee584b:         
1:dee584b:     }
1:dee584b:     
1:dee584b:     public void tearDown() throws Exception {
1:dee584b:         broker.stop();
1:a8b0d39:         broker.waitUntilStopped();
1:dee584b:     }
1:dee584b: 
1:dee584b:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:dee584b:         return new ActiveMQConnectionFactory(URISupport.removeQuery(connector.getConnectUri()) + "?useKeepAlive=false&wireFormat.maxInactivityDuration=2000");
1:dee584b:     }
1:dee584b: 
1:dee584b:     @Override
1:dee584b:     public void testCreateDurableConsumerCloseThenReconnect() throws Exception {
1:dee584b:         reconnectInExceptionListener = true;
1:dee584b:         makeConsumer();
1:dee584b:         connection.setExceptionListener(this);
1:dee584b:         ((ActiveMQConnection)connection).addTransportListener(this);
1:dee584b:         assertTrue("inactive connection timedout", gotException.await(30, TimeUnit.SECONDS));
1:dee584b:         assertNotNull("Got expected exception on close reconnect overlap: " + reconnectException, reconnectException);
1:dee584b:     }
1:dee584b: 
1:dee584b:     
1:dee584b:     public void testCreateDurableConsumerSlowCloseThenReconnectTransportListener() throws Exception {
1:dee584b:         reconnectInTransportListener = true;
1:dee584b:         makeConsumer();
1:dee584b:         connection.setExceptionListener(this);
1:dee584b:         ((ActiveMQConnection)connection).addTransportListener(this);
1:dee584b:         assertTrue("inactive connection timedout", gotException.await(30, TimeUnit.SECONDS));
1:dee584b:         assertNull("No exception: " + reconnectException, reconnectException);
1:dee584b:     }
1:dee584b:     
1:dee584b:     public void onException(JMSException exception) {
1:dee584b:         LOG.info("Exception listener exception:" + exception);
1:dee584b:         if (reconnectInExceptionListener) {
1:dee584b:             try {
1:dee584b:                 makeConsumer();
1:dee584b:             } catch (Exception e) {
1:dee584b:                 reconnectException = e;
1:dee584b:             }
1:dee584b:         
1:dee584b:             gotException.countDown();
1:dee584b:         }
1:dee584b:     }
1:dee584b: 
1:dee584b:     public void onCommand(Object command) {}
1:dee584b: 
1:dee584b:     public void onException(IOException error) {
1:dee584b:        LOG.info("Transport listener exception:" + error);
1:dee584b:        if (reconnectInTransportListener) {
1:dee584b:            try {
1:a8b0d39:                TimeUnit.MILLISECONDS.sleep(500);
1:dee584b:                makeConsumer();
1:dee584b:            } catch (Exception e) {
1:dee584b:                reconnectException = e;
1:dee584b:            }
1:dee584b:        
1:dee584b:            gotException.countDown();
1:dee584b:        }
1:dee584b:     }
1:dee584b: 
1:dee584b:     public void transportInterupted() {}
1:dee584b: 
1:dee584b:     public void transportResumed() {}
1:dee584b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableConsumerCloseAndReconnectTcpTest.class);
commit:a8b0d39
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:                TimeUnit.MILLISECONDS.sleep(500);
author:Gary Tully
-------------------------------------------------------------------------------
commit:dee584b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.Socket;
1: import java.net.UnknownHostException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.util.URISupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class DurableConsumerCloseAndReconnectTcpTest extends DurableConsumerCloseAndReconnectTest
1: implements ExceptionListener, TransportListener {
0:     private static final Log LOG = LogFactory.getLog(DurableConsumerCloseAndReconnectTcpTest.class);
1:     
1:     private BrokerService broker;
1:     private TransportConnector connector;
1: 
1:     private CountDownLatch gotException = new CountDownLatch(1);
1: 
1:     private Exception reconnectException;
1: 
1:     private boolean reconnectInExceptionListener;
1: 
1:     private boolean reconnectInTransportListener;
1:     
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         // let the client initiate the inactivity timeout
1:         connector = broker.addConnector("tcp://localhost:0?transport.useInactivityMonitor=false");
1:         broker.setPersistent(false);
1:         broker.start();
1:         
1:         class SlowCloseSocketTcpTransportFactory extends TcpTransportFactory {
1: 
1:             class SlowCloseSocketFactory extends SocketFactory {
1:                 
1:                 class SlowCloseSocket extends Socket {
1:                     public SlowCloseSocket(String host, int port) throws IOException {
1:                         super(host, port);
1:                     }
1: 
1:                     public SlowCloseSocket(InetAddress host, int port) throws IOException {
1:                         super(host, port);
1:                     }
1: 
1:                     public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {
1:                         super(host, port, localHost, localPort);
1:                     }
1: 
1:                     public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
1:                         super(address, port, localAddress, localPort);
1:                     }
1: 
1:                     @Override
1:                     public synchronized void close() throws IOException {
1:                         LOG.info("delaying close");
1:                         try {
1:                             TimeUnit.MILLISECONDS.sleep(500);
1:                         } catch (InterruptedException e) {
1:                             // TODO Auto-generated catch block
1:                             e.printStackTrace();
1:                         }
1:                         super.close();
1:                     }
1:                     
1:                     
1:                 }
1:                 @Override
1:                 public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
1:                     return new SlowCloseSocket(host, port);
1:                 }
1: 
1:                 @Override
1:                 public Socket createSocket(InetAddress host, int port) throws IOException {
1:                     return new SlowCloseSocket(host, port);
1:                 }
1: 
1:                 @Override
1:                 public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException,
1:                         UnknownHostException {
1:                     return new SlowCloseSocket(host, port, localHost, localPort);
1:                 }
1: 
1:                 @Override
1:                 public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
1:                     return new SlowCloseSocket(address, port, localAddress, localPort);
1:                 }
1:                 
1:             }
1:             @Override
1:             protected SocketFactory createSocketFactory() throws IOException {
1:                 return new SlowCloseSocketFactory();
1:             }
1:             
1:         }
1:         
1:         TransportFactory.registerTransportFactory("tcp", new SlowCloseSocketTcpTransportFactory());
1:         
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(URISupport.removeQuery(connector.getConnectUri()) + "?useKeepAlive=false&wireFormat.maxInactivityDuration=2000");
1:     }
1: 
1:     @Override
1:     public void testCreateDurableConsumerCloseThenReconnect() throws Exception {
1:         reconnectInExceptionListener = true;
1:         makeConsumer();
1:         connection.setExceptionListener(this);
1:         ((ActiveMQConnection)connection).addTransportListener(this);
1:         assertTrue("inactive connection timedout", gotException.await(30, TimeUnit.SECONDS));
1:         assertNotNull("Got expected exception on close reconnect overlap: " + reconnectException, reconnectException);
1:     }
1: 
1:     
1:     public void testCreateDurableConsumerSlowCloseThenReconnectTransportListener() throws Exception {
1:         reconnectInTransportListener = true;
1:         makeConsumer();
1:         connection.setExceptionListener(this);
1:         ((ActiveMQConnection)connection).addTransportListener(this);
1:         assertTrue("inactive connection timedout", gotException.await(30, TimeUnit.SECONDS));
1:         assertNull("No exception: " + reconnectException, reconnectException);
1:     }
1:     
1:     public void onException(JMSException exception) {
1:         LOG.info("Exception listener exception:" + exception);
1:         if (reconnectInExceptionListener) {
1:             try {
1:                 makeConsumer();
1:             } catch (Exception e) {
1:                 reconnectException = e;
1:             }
1:         
1:             gotException.countDown();
1:         }
1:     }
1: 
1:     public void onCommand(Object command) {}
1: 
1:     public void onException(IOException error) {
1:        LOG.info("Transport listener exception:" + error);
1:        if (reconnectInTransportListener) {
1:            try {
1:                makeConsumer();
1:            } catch (Exception e) {
1:                reconnectException = e;
1:            }
1:        
1:            gotException.countDown();
1:        }
1:     }
1: 
1:     public void transportInterupted() {}
1: 
1:     public void transportResumed() {}
1: }
============================================================================