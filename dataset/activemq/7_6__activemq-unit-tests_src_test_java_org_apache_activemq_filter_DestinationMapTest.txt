1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
6:d29ca2a: 
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Arrays;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Set;
1:c7d559f: 
1:230a86c: import org.apache.activemq.command.ActiveMQDestination;
1:230a86c: import org.apache.activemq.command.ActiveMQQueue;
1:230a86c: import org.apache.activemq.command.ActiveMQTopic;
1:e7e317d: import junit.framework.TestCase;
1:230a86c: 
1:d29ca2a: public class DestinationMapTest extends TestCase {
1:d29ca2a:     protected DestinationMap map = new DestinationMap();
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQDestination d1 = createDestination("TEST.D1");
1:d29ca2a:     protected ActiveMQDestination d2 = createDestination("TEST.BAR.D2");
1:d29ca2a:     protected ActiveMQDestination d3 = createDestination("TEST.BAR.D3");
1:d29ca2a:     protected ActiveMQDestination compositeDestination1 = createDestination("TEST.D1,TEST.BAR.D2");
1:d29ca2a:     protected ActiveMQDestination compositeDestination2 = createDestination("TEST.D1,TEST.BAR.D3");
1:d29ca2a: 
1:d29ca2a:     protected Object v1 = "value1";
1:d29ca2a:     protected Object v2 = "value2";
1:d29ca2a:     protected Object v3 = "value3";
1:d29ca2a:     protected Object v4 = "value4";
1:d29ca2a:     protected Object v5 = "value5";
1:d29ca2a:     protected Object v6 = "value6";
1:d29ca2a: 
1:d29ca2a:     public void testCompositeDestinations() throws Exception {
1:d29ca2a:         ActiveMQDestination d1 = createDestination("TEST.BAR.D2");
1:d29ca2a:         ActiveMQDestination d2 = createDestination("TEST.BAR.D3");
1:8b28367:         map.put(d1, d1);
1:8b28367:         map.put(d2, d2);
1:d29ca2a:         map.get(createDestination("TEST.BAR.D2,TEST.BAR.D3"));
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     public void testSimpleDestinations() throws Exception {
1:d29ca2a:         map.put(d1, v1);
1:d29ca2a:         map.put(d2, v2);
1:d29ca2a:         map.put(d3, v3);
1:cf5ee40: 
1:d29ca2a:         assertMapValue(d1, v1);
1:d29ca2a:         assertMapValue(d2, v2);
1:d29ca2a:         assertMapValue(d3, v3);
1:d29ca2a:     }
1:d29ca2a: 
1:8b28367:     public void testQueueAndTopicWithSameName() throws Exception {
1:8b28367:         ActiveMQQueue q1 = new ActiveMQQueue("foo");
1:8b28367:         ActiveMQTopic t1 = new ActiveMQTopic("foo");
1:d29ca2a: 
1:8b28367:         map.put(q1, v1);
1:8b28367:         map.put(t1, v2);
1:d29ca2a: 
1:8b28367:         assertMapValue(q1, v1);
1:8b28367:         assertMapValue(t1, v2);
1:eb827e2:     }
1:d29ca2a: 
1:d29ca2a:     public void testSimpleDestinationsWithMultipleValues() throws Exception {
1:d29ca2a:         map.put(d1, v1);
1:d29ca2a:         map.put(d2, v2);
1:d29ca2a:         map.put(d2, v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue(d1, v1);
1:d29ca2a:         assertMapValue("TEST.BAR.D2", v2, v3);
1:d29ca2a:         assertMapValue(d3, null);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSimpleAndCompositeDestinations() throws Exception {
1:d29ca2a:         map.put(d1, v1);
1:d29ca2a:         map.put(compositeDestination1, v2);
1:d29ca2a:         map.put(compositeDestination2, v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.D1", v1, v2, v3);
1:d29ca2a:         assertMapValue(d2, v2);
1:d29ca2a:         assertMapValue(d3, v3);
1:d29ca2a:         assertMapValue(compositeDestination1.toString(), v1, v2, v3);
1:d29ca2a:         assertMapValue(compositeDestination2.toString(), v1, v2, v3);
1:d29ca2a: 
1:d29ca2a:         map.remove(compositeDestination1, v2);
1:d29ca2a:         map.remove(compositeDestination2, v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.D1", v1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLookupOneStepWildcardDestinations() throws Exception {
1:d29ca2a:         map.put(d1, v1);
1:d29ca2a:         map.put(d2, v2);
1:d29ca2a:         map.put(d3, v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.D1", v1);
1:d29ca2a:         assertMapValue("TEST.*", v1);
1:d29ca2a:         assertMapValue("*.D1", v1);
1:d29ca2a:         assertMapValue("*.*", v1);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.BAR.D2", v2);
1:d29ca2a:         assertMapValue("TEST.*.D2", v2);
1:d29ca2a:         assertMapValue("*.BAR.D2", v2);
1:d29ca2a:         assertMapValue("*.*.D2", v2);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.BAR.D3", v3);
1:d29ca2a:         assertMapValue("TEST.*.D3", v3);
1:d29ca2a:         assertMapValue("*.BAR.D3", v3);
1:d29ca2a:         assertMapValue("*.*.D3", v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.BAR.D4", null);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.BAR.*", v2, v3);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLookupMultiStepWildcardDestinations() throws Exception {
1:d29ca2a:         map.put(d1, v1);
1:d29ca2a:         map.put(d2, v2);
1:d29ca2a:         map.put(d3, v3);
1:d29ca2a: 
1:c7d559f:         List<Object> allValues = Arrays.asList(new Object[] {v1, v2, v3});
1:d29ca2a: 
1:d29ca2a:         assertMapValue(">", allValues);
1:d29ca2a:         assertMapValue("TEST.>", allValues);
1:d29ca2a:         assertMapValue("*.>", allValues);
1:2a6aab4:         assertMapValue("TEST.*.>", allValues);
1:2a6aab4:         assertMapValue("TEST.*.*.>", v2,v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("FOO.>", null);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testStoreWildcardWithOneStepPath() throws Exception {
1:d29ca2a:         put("TEST.*", v1);
1:d29ca2a:         put("TEST.D1", v2);
1:d29ca2a:         put("TEST.BAR.*", v2);
1:d29ca2a:         put("TEST.BAR.D3", v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("FOO", null);
1:d29ca2a:         assertMapValue("TEST.FOO", v1);
1:d29ca2a:         assertMapValue("TEST.D1", v1, v2);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.FOO.FOO", null);
1:d29ca2a:         assertMapValue("TEST.BAR.FOO", v2);
1:d29ca2a:         assertMapValue("TEST.BAR.D3", v2, v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v1, v2);
1:d29ca2a:         assertMapValue("*.D1", v1, v2);
1:d29ca2a:         assertMapValue("*.*", v1, v2);
1:d29ca2a:         assertMapValue("TEST.*.*", v2, v3);
1:d29ca2a:         assertMapValue("TEST.BAR.*", v2, v3);
1:d29ca2a:         assertMapValue("*.*.*", v2, v3);
1:d29ca2a:         assertMapValue("*.BAR.*", v2, v3);
1:d29ca2a:         assertMapValue("*.BAR.D3", v2, v3);
1:d29ca2a:         assertMapValue("*.*.D3", v2, v3);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testStoreWildcardInMiddleOfPath() throws Exception {
1:d29ca2a:         put("TEST.*", v1);
1:d29ca2a:         put("TEST.D1", v2);
1:d29ca2a:         put("TEST.BAR.*", v2);
1:d29ca2a:         put("TEST.XYZ.D3", v3);
1:d29ca2a:         put("TEST.XYZ.D4", v4);
1:d29ca2a:         put("TEST.BAR.D3", v5);
1:d29ca2a:         put("TEST.*.D2", v6);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*.D3", v2, v3, v5);
1:d29ca2a:         assertMapValue("TEST.*.D4", v2, v4);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v1, v2);
1:d29ca2a:         assertMapValue("TEST.*.*", v2, v3, v4, v5, v6);
1:c62a775:         assertMapValue("TEST.*.>", v1, v2, v3, v4, v5, v6);
1:c62a775:         assertMapValue("TEST.>", v1, v2, v3, v4, v5, v6);
1:c62a775:         assertMapValue("TEST.>.>", v1, v2, v3, v4, v5, v6);
1:d29ca2a:         assertMapValue("*.*.D3", v2, v3, v5);
1:d29ca2a:         assertMapValue("TEST.BAR.*", v2, v5, v6);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.BAR.D2", v2, v6);
1:d29ca2a:         assertMapValue("TEST.*.D2", v2, v6);
1:d29ca2a:         assertMapValue("TEST.BAR.*", v2, v5, v6);
1:d29ca2a:     }
1:d29ca2a: 
1:eb827e2:     public void testDoubleWildcardDoesNotMatchLongerPattern() throws Exception {
1:eb827e2:         put("TEST.*", v1);
1:eb827e2:         put("TEST.BAR.D3", v2);
1:d29ca2a: 
1:eb827e2:         assertMapValue("*.*.D3", v2);
1:d29ca2a:     }
1:d29ca2a: 
1:eb827e2:     public void testWildcardAtEndOfPathAndAtBeginningOfSearch() throws Exception {
1:eb827e2:         put("TEST.*", v1);
1:d29ca2a: 
1:eb827e2:         assertMapValue("*.D1", v1);
1:d29ca2a:     }
1:d29ca2a: 
1:664b534:     public void testAnyPathWildcardInMap() throws Exception {
1:664b534:         put("TEST.FOO.>", v1);
1:d29ca2a: 
1:664b534:         assertMapValue("TEST.FOO.BAR.WHANOT.A.B.C", v1);
1:664b534:         assertMapValue("TEST.FOO.BAR.WHANOT", v1);
1:664b534:         assertMapValue("TEST.FOO.BAR", v1);
1:d29ca2a: 
1:664b534:         assertMapValue("TEST.*.*", v1);
1:664b534:         assertMapValue("TEST.BAR", null);
1:d29ca2a: 
1:664b534:         assertMapValue("TEST.FOO", v1);
1:eb827e2:     }
1:d29ca2a: 
1:d29ca2a:     public void testSimpleAddRemove() throws Exception {
1:d29ca2a:         put("TEST.D1", v2);
1:d29ca2a: 
1:8b28367:         assertEquals("Root child count", 1, map.getTopicRootChildCount());
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.D1", v2);
1:d29ca2a: 
1:d29ca2a:         remove("TEST.D1", v2);
1:d29ca2a: 
1:8b28367:         assertEquals("Root child count", 0, map.getTopicRootChildCount());
1:d29ca2a:         assertMapValue("TEST.D1", null);
1:d29ca2a:     }
1:d29ca2a: 
1:e7e317d:     public void testMQTTMappedWildcards() throws Exception {
1:e7e317d:         put("TopicA", v1);
1:e7e317d:         put(".TopicA", v2);
1:e7e317d:         put("TopicA.", v3);
1:e7e317d:         put(".", v4);
1:e7e317d:         put("..TopicA", v5);
1:e7e317d:         put("..", v6);
1:e7e317d: 
1:e7e317d:         // test wildcard patterns "#", "+", "+/#", "/+", "+/", "+/+", "+/+/", "+/+/+"
1:e7e317d:         assertMapValue(">", v1, v2, v3, v4, v5, v6);
1:e7e317d:         assertMapValue("*", v1);
1:e7e317d:         assertMapValue("*.>", v1, v2, v3, v4, v5, v6);
1:e7e317d:         assertMapValue(".*", v2, v4);
1:e7e317d:         assertMapValue("*.", v3, v4);
1:e7e317d:         assertMapValue("*.*", v2, v3, v4);
1:e7e317d:         assertMapValue("*.*.", v6);
1:e7e317d:         assertMapValue("*.*.*", v5, v6);
1:e7e317d:     }
1:e7e317d: 
1:d29ca2a:     public void testStoreAndLookupAllWildcards() throws Exception {
1:d29ca2a:         loadSample2();
1:d29ca2a: 
1:d29ca2a:         assertSample2();
1:d29ca2a: 
1:d29ca2a:         // lets remove everything and add it back
1:d29ca2a:         remove("TEST.FOO", v1);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.FOO", v2, v3, v4);
1:d29ca2a:         assertMapValue("TEST.*", v2, v3, v4, v6);
1:d29ca2a:         assertMapValue("*.*", v2, v3, v4, v6);
1:d29ca2a: 
1:d29ca2a:         remove("TEST.XYZ", v6);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v2, v3, v4);
1:d29ca2a:         assertMapValue("*.*", v2, v3, v4);
1:d29ca2a: 
1:d29ca2a:         remove("TEST.*", v2);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v3, v4);
1:d29ca2a:         assertMapValue("*.*", v3, v4);
1:d29ca2a: 
1:d29ca2a:         remove(">", v4);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v3);
1:d29ca2a:         assertMapValue("*.*", v3);
1:d29ca2a: 
1:d29ca2a:         remove("TEST.>", v3);
1:d29ca2a:         remove("TEST.FOO.BAR", v5);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("FOO", null);
1:d29ca2a:         assertMapValue("TEST.FOO", null);
1:d29ca2a:         assertMapValue("TEST.D1", null);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.FOO.FOO", null);
1:d29ca2a:         assertMapValue("TEST.BAR.FOO", null);
1:d29ca2a:         assertMapValue("TEST.FOO.BAR", null);
1:d29ca2a:         assertMapValue("TEST.BAR.D3", null);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", null);
1:d29ca2a:         assertMapValue("*.*", null);
1:d29ca2a:         assertMapValue("*.D1", null);
1:d29ca2a:         assertMapValue("TEST.*.*", null);
1:d29ca2a:         assertMapValue("TEST.BAR.*", null);
1:d29ca2a: 
1:d29ca2a:         loadSample2();
1:d29ca2a: 
1:d29ca2a:         assertSample2();
1:d29ca2a: 
1:d29ca2a:         remove(">", v4);
1:d29ca2a:         remove("TEST.*", v2);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("FOO", null);
1:d29ca2a:         assertMapValue("TEST.FOO", v1, v3);
1:d29ca2a:         assertMapValue("TEST.D1", v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.FOO.FOO", v3);
1:d29ca2a:         assertMapValue("TEST.BAR.FOO", v3);
1:d29ca2a:         assertMapValue("TEST.FOO.BAR", v3, v5);
1:d29ca2a:         assertMapValue("TEST.BAR.D3", v3);
1:d29ca2a: 
1:d29ca2a:         assertMapValue("TEST.*", v1, v3, v6);
1:d29ca2a:         assertMapValue("*.*", v1, v3, v6);
1:d29ca2a:         assertMapValue("*.D1", v3);
1:d29ca2a:         assertMapValue("TEST.*.*", v3, v5);
1:d29ca2a:         assertMapValue("TEST.BAR.*", v3);
1:d29ca2a:     }
1:74a7a8b: 
1:cf5ee40:     public void testAddAndRemove() throws Exception {
1:74a7a8b: 
1:cf5ee40:         put("FOO.A", v1);
1:cf5ee40:         assertMapValue("FOO.>", v1);
1:cf5ee40: 
1:74a7a8b:         put("FOO.B", v2);
1:74a7a8b:         assertMapValue("FOO.>", v1, v2);
1:74a7a8b: 
1:c7d559f:         map.removeAll(createDestination("FOO.A"));
1:74a7a8b: 
1:74a7a8b:         assertMapValue("FOO.>", v2);
1:74a7a8b:     }
1:05c3112: 
1:05c3112:     public void testRemoveWildcard() throws Exception {
1:05c3112:         put("FOO.A", v1);
1:05c3112:         put("FOO.>", v2);
1:05c3112: 
1:05c3112:         map.removeAll(createDestination("FOO.>"));
1:4f57744: 
1:05c3112:         assertMapValue("FOO.A", null);
1:4f57744: 
1:4f57744:         put("FOO.A", v1);
1:4f57744:         put("FOO.>", v2);
1:05c3112: 
1:4f57744:         map.remove(createDestination("FOO.>"), v2);
1:4f57744: 
1:4f57744:         assertMapValue("FOO.A", v1);
1:05c3112:     }
1:74a7a8b: 
1:d29ca2a:     protected void loadSample2() {
1:d29ca2a:         put("TEST.FOO", v1);
1:d29ca2a:         put("TEST.*", v2);
1:d29ca2a:         put("TEST.>", v3);
1:d29ca2a:         put(">", v4);
1:d29ca2a:         put("TEST.FOO.BAR", v5);
1:d29ca2a:         put("TEST.XYZ", v6);
1:cf5ee40:     }
1:cf5ee40: 
1:d29ca2a:     protected void assertSample2() {
1:d29ca2a:         assertMapValue("FOO", v4);
1:d29ca2a:         assertMapValue("TEST.FOO", v1, v2, v3, v4);
1:d29ca2a:         assertMapValue("TEST.D1", v2, v3, v4);
1:cf5ee40: 
1:d29ca2a:         assertMapValue("TEST.FOO.FOO", v3, v4);
1:d29ca2a:         assertMapValue("TEST.BAR.FOO", v3, v4);
1:d29ca2a:         assertMapValue("TEST.FOO.BAR", v3, v4, v5);
1:d29ca2a:         assertMapValue("TEST.BAR.D3", v3, v4);
1:cf5ee40: 
1:d29ca2a:         assertMapValue("TEST.*", v1, v2, v3, v4, v6);
1:d29ca2a:         assertMapValue("*.*", v1, v2, v3, v4, v6);
1:d29ca2a:         assertMapValue("*.D1", v2, v3, v4);
1:d29ca2a:         assertMapValue("TEST.*.*", v3, v4, v5);
1:d29ca2a:         assertMapValue("TEST.BAR.*", v3, v4);
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     protected void put(String name, Object value) {
1:d29ca2a:         map.put(createDestination(name), value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void remove(String name, Object value) {
1:d29ca2a:         ActiveMQDestination destination = createDestination(name);
1:d29ca2a:         map.remove(destination, value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertMapValue(String destinationName, Object expected) {
1:d29ca2a:         ActiveMQDestination destination = createDestination(destinationName);
1:d29ca2a:         assertMapValue(destination, expected);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertMapValue(String destinationName, Object expected1, Object expected2) {
1:74a7a8b:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2}));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3) {
1:74a7a8b:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3}));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4) {
1:74a7a8b:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4}));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4, Object expected5) {
1:74a7a8b:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4, expected5}));
1:d29ca2a:     }
1:74a7a8b: 
1:c62a775:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4, Object expected5, Object expected6) {
1:74a7a8b:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4, expected5, expected6}));
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:d29ca2a:     protected void assertMapValue(ActiveMQDestination destination, Object expected) {
1:d29ca2a:         List expectedList = null;
1:d29ca2a:         if (expected == null) {
1:d29ca2a:             expectedList = Collections.EMPTY_LIST;
1:74a7a8b:         } else if (expected instanceof List) {
1:74a7a8b:             expectedList = (List)expected;
1:74a7a8b:         } else {
1:d29ca2a:             expectedList = new ArrayList();
1:d29ca2a:             expectedList.add(expected);
1:d29ca2a:         }
1:d29ca2a:         Collections.sort(expectedList);
1:d29ca2a:         Set actualSet = map.get(destination);
1:d29ca2a:         List actual = new ArrayList(actualSet);
1:d29ca2a:         Collections.sort(actual);
1:d29ca2a:         assertEquals("map value for destinationName:  " + destination, expectedList, actual);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQDestination createDestination(String name) {
1:d29ca2a:         return new ActiveMQTopic(name);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4f57744
/////////////////////////////////////////////////////////////////////////
1: 
1:         put("FOO.A", v1);
1:         put("FOO.>", v2);
1: 
1:         map.remove(createDestination("FOO.>"), v2);
1: 
1:         assertMapValue("FOO.A", v1);
commit:05c3112
/////////////////////////////////////////////////////////////////////////
1:     public void testRemoveWildcard() throws Exception {
1:         put("FOO.A", v1);
1:         put("FOO.>", v2);
1: 
1:         map.removeAll(createDestination("FOO.>"));
1: 
1:         assertMapValue("FOO.A", null);
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e7e317d
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:     public void testMQTTMappedWildcards() throws Exception {
1:         put("TopicA", v1);
1:         put(".TopicA", v2);
1:         put("TopicA.", v3);
1:         put(".", v4);
1:         put("..TopicA", v5);
1:         put("..", v6);
1: 
1:         // test wildcard patterns "#", "+", "+/#", "/+", "+/", "+/+", "+/+/", "+/+/+"
1:         assertMapValue(">", v1, v2, v3, v4, v5, v6);
1:         assertMapValue("*", v1);
1:         assertMapValue("*.>", v1, v2, v3, v4, v5, v6);
1:         assertMapValue(".*", v2, v4);
1:         assertMapValue("*.", v3, v4);
1:         assertMapValue("*.*", v2, v3, v4);
1:         assertMapValue("*.*.", v6);
1:         assertMapValue("*.*.*", v5, v6);
1:     }
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:2a6aab4
/////////////////////////////////////////////////////////////////////////
1:         assertMapValue("TEST.*.>", allValues);
1:         assertMapValue("TEST.*.*.>", v2,v3);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List<Object> allValues = Arrays.asList(new Object[] {v1, v2, v3});
/////////////////////////////////////////////////////////////////////////
1:         map.removeAll(createDestination("FOO.A"));
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "unchecked", "rawtypes" })
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0:         List allValues = Arrays.asList(new Object[] {v1, v2, v3});
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         put("FOO.B", v2);
1:         assertMapValue("FOO.>", v1, v2);
1: 
0:         Set set = map.removeAll(createDestination("FOO.A"));
1: 
1:         assertMapValue("FOO.>", v2);
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2}));
1:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3}));
1:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4}));
1:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4, expected5}));
1: 
1:         assertMapValue(destinationName, Arrays.asList(new Object[] {expected1, expected2, expected3, expected4, expected5, expected6}));
1:         } else if (expected instanceof List) {
1:             expectedList = (List)expected;
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cf5ee40
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testAddAndRemove() throws Exception {
1:     	
1:         put("FOO.A", v1);
1:         assertMapValue("FOO.>", v1);
1:         
0:         put("FOO.B", v2);        
0:         assertMapValue("FOO.>", v1, v2);
1:         
0:         Set set = map.removeAll(createDestination("FOO.A"));
1:         
0:         assertMapValue("FOO.>", v2);
1:         
1:     }
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.filter;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.filter.DestinationMap;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: public class DestinationMapTest extends TestCase {
1:     protected DestinationMap map = new DestinationMap();
1: 
1:     protected ActiveMQDestination d1 = createDestination("TEST.D1");
1:     protected ActiveMQDestination d2 = createDestination("TEST.BAR.D2");
1:     protected ActiveMQDestination d3 = createDestination("TEST.BAR.D3");
1:     protected ActiveMQDestination compositeDestination1 = createDestination("TEST.D1,TEST.BAR.D2");
1:     protected ActiveMQDestination compositeDestination2 = createDestination("TEST.D1,TEST.BAR.D3");
1: 
1:     protected Object v1 = "value1";
1:     protected Object v2 = "value2";
1:     protected Object v3 = "value3";
1:     protected Object v4 = "value4";
1:     protected Object v5 = "value5";
1:     protected Object v6 = "value6";
1: 
1: 
1:     public void testCompositeDestinations() throws Exception {
1:         
1:         ActiveMQDestination d1 = createDestination("TEST.BAR.D2");
1:         ActiveMQDestination d2 = createDestination("TEST.BAR.D3");
0:         map.put(d1,d1);
0:         map.put(d2,d2);
1:         map.get(createDestination("TEST.BAR.D2,TEST.BAR.D3"));
1:         
1:     }
1:     public void testSimpleDestinations() throws Exception {
1:         map.put(d1, v1);
1:         map.put(d2, v2);
1:         map.put(d3, v3);
1: 
1:         assertMapValue(d1, v1);
1:         assertMapValue(d2, v2);
1:         assertMapValue(d3, v3);
1:     }
1: 
1:     public void testSimpleDestinationsWithMultipleValues() throws Exception {
1:         map.put(d1, v1);
1:         map.put(d2, v2);
1:         map.put(d2, v3);
1: 
1:         assertMapValue(d1, v1);
1:         assertMapValue("TEST.BAR.D2", v2, v3);
1:         assertMapValue(d3, null);
1:     }
1: 
1:     public void testSimpleAndCompositeDestinations() throws Exception {
1:         map.put(d1, v1);
1:         map.put(compositeDestination1, v2);
1:         map.put(compositeDestination2, v3);
1: 
1:         assertMapValue("TEST.D1", v1, v2, v3);
1:         assertMapValue(d2, v2);
1:         assertMapValue(d3, v3);
1:         assertMapValue(compositeDestination1.toString(), v1, v2, v3);
1:         assertMapValue(compositeDestination2.toString(), v1, v2, v3);
1: 
1:         map.remove(compositeDestination1, v2);
1:         map.remove(compositeDestination2, v3);
1: 
1:         assertMapValue("TEST.D1", v1);
1:     }
1: 
1:     public void testLookupOneStepWildcardDestinations() throws Exception {
1:         map.put(d1, v1);
1:         map.put(d2, v2);
1:         map.put(d3, v3);
1: 
1:         assertMapValue("TEST.D1", v1);
1:         assertMapValue("TEST.*", v1);
1:         assertMapValue("*.D1", v1);
1:         assertMapValue("*.*", v1);
1: 
1:         assertMapValue("TEST.BAR.D2", v2);
1:         assertMapValue("TEST.*.D2", v2);
1:         assertMapValue("*.BAR.D2", v2);
1:         assertMapValue("*.*.D2", v2);
1: 
1:         assertMapValue("TEST.BAR.D3", v3);
1:         assertMapValue("TEST.*.D3", v3);
1:         assertMapValue("*.BAR.D3", v3);
1:         assertMapValue("*.*.D3", v3);
1: 
1:         assertMapValue("TEST.BAR.D4", null);
1: 
1:         assertMapValue("TEST.BAR.*", v2, v3);
1:     }
1: 
1:     public void testLookupMultiStepWildcardDestinations() throws Exception {
1:         map.put(d1, v1);
1:         map.put(d2, v2);
1:         map.put(d3, v3);
1: 
0:         List allValues = Arrays.asList(new Object[]{v1, v2, v3});
1: 
1:         assertMapValue(">", allValues);
1:         assertMapValue("TEST.>", allValues);
1:         assertMapValue("*.>", allValues);
1: 
1:         assertMapValue("FOO.>", null);
1:     }
1: 
1: 
1:     public void testStoreWildcardWithOneStepPath() throws Exception {
1:         put("TEST.*", v1);
1:         put("TEST.D1", v2);
1:         put("TEST.BAR.*", v2);
1:         put("TEST.BAR.D3", v3);
1: 
1:         assertMapValue("FOO", null);
1:         assertMapValue("TEST.FOO", v1);
1:         assertMapValue("TEST.D1", v1, v2);
1: 
1:         assertMapValue("TEST.FOO.FOO", null);
1:         assertMapValue("TEST.BAR.FOO", v2);
1:         assertMapValue("TEST.BAR.D3", v2, v3);
1: 
1:         assertMapValue("TEST.*", v1, v2);
1:         assertMapValue("*.D1", v1, v2);
1:         assertMapValue("*.*", v1, v2);
1:         assertMapValue("TEST.*.*", v2, v3);
1:         assertMapValue("TEST.BAR.*", v2, v3);
1:         assertMapValue("*.*.*", v2, v3);
1:         assertMapValue("*.BAR.*", v2, v3);
1:         assertMapValue("*.BAR.D3", v2, v3);
1:         assertMapValue("*.*.D3", v2, v3);
1:     }
1: 
1:     public void testStoreWildcardInMiddleOfPath() throws Exception {
1:         put("TEST.*", v1);
1:         put("TEST.D1", v2);
1:         put("TEST.BAR.*", v2);
1:         put("TEST.XYZ.D3", v3);
1:         put("TEST.XYZ.D4", v4);
1:         put("TEST.BAR.D3", v5);
1:         put("TEST.*.D2", v6);
1: 
1: 
1:         assertMapValue("TEST.*.D3", v2, v3, v5);
1:         assertMapValue("TEST.*.D4", v2, v4);
1: 
1:         assertMapValue("TEST.*", v1, v2);
1:         assertMapValue("TEST.*.*", v2, v3, v4, v5, v6);
1:         assertMapValue("*.*.D3", v2, v3, v5);
1:         assertMapValue("TEST.BAR.*", v2, v5, v6);
1: 
1:         assertMapValue("TEST.BAR.D2", v2, v6);
1:         assertMapValue("TEST.*.D2", v2, v6);
1:         assertMapValue("TEST.BAR.*", v2, v5, v6);
1:     }
1: 
1:     public void testSimpleAddRemove() throws Exception {
1:         put("TEST.D1", v2);
1:         
0:         assertEquals("Root child count", 1, map.getRootChildCount());
1:         
1:         assertMapValue("TEST.D1", v2);
1:         
1:         remove("TEST.D1", v2);
1:         
0:         assertEquals("Root child count", 0, map.getRootChildCount());
1:         assertMapValue("TEST.D1", null);
1:     }
1:     
1:     public void testStoreAndLookupAllWildcards() throws Exception {
1:         loadSample2();
1: 
1:         assertSample2();
1: 
1:         // lets remove everything and add it back
1:         remove("TEST.FOO", v1);
1: 
1:         assertMapValue("TEST.FOO", v2, v3, v4);
1:         assertMapValue("TEST.*", v2, v3, v4, v6);
1:         assertMapValue("*.*", v2, v3, v4, v6);
1: 
1:         remove("TEST.XYZ", v6);
1: 
1:         assertMapValue("TEST.*", v2, v3, v4);
1:         assertMapValue("*.*", v2, v3, v4);
1: 
1:         remove("TEST.*", v2);
1: 
1:         assertMapValue("TEST.*", v3, v4);
1:         assertMapValue("*.*", v3, v4);
1: 
1:         remove(">", v4);
1: 
1:         assertMapValue("TEST.*", v3);
1:         assertMapValue("*.*", v3);
1: 
1:         remove("TEST.>", v3);
1:         remove("TEST.FOO.BAR", v5);
1: 
1:         assertMapValue("FOO", null);
1:         assertMapValue("TEST.FOO", null);
1:         assertMapValue("TEST.D1", null);
1: 
1:         assertMapValue("TEST.FOO.FOO", null);
1:         assertMapValue("TEST.BAR.FOO", null);
1:         assertMapValue("TEST.FOO.BAR", null);
1:         assertMapValue("TEST.BAR.D3", null);
1: 
1:         assertMapValue("TEST.*", null);
1:         assertMapValue("*.*", null);
1:         assertMapValue("*.D1", null);
1:         assertMapValue("TEST.*.*", null);
1:         assertMapValue("TEST.BAR.*", null);
1: 
1:         loadSample2();
1: 
1:         assertSample2();
1: 
1:         remove(">", v4);
1:         remove("TEST.*", v2);
1: 
1:         assertMapValue("FOO", null);
1:         assertMapValue("TEST.FOO", v1, v3);
1:         assertMapValue("TEST.D1", v3);
1: 
1:         assertMapValue("TEST.FOO.FOO", v3);
1:         assertMapValue("TEST.BAR.FOO", v3);
1:         assertMapValue("TEST.FOO.BAR", v3, v5);
1:         assertMapValue("TEST.BAR.D3", v3);
1: 
1:         assertMapValue("TEST.*", v1, v3, v6);
1:         assertMapValue("*.*", v1, v3, v6);
1:         assertMapValue("*.D1", v3);
1:         assertMapValue("TEST.*.*", v3, v5);
1:         assertMapValue("TEST.BAR.*", v3);
1:     }
1: 
1:     protected void loadSample2() {
1:         put("TEST.FOO", v1);
1:         put("TEST.*", v2);
1:         put("TEST.>", v3);
1:         put(">", v4);
1:         put("TEST.FOO.BAR", v5);
1:         put("TEST.XYZ", v6);
1:     }
1: 
1:     protected void assertSample2() {
1:         assertMapValue("FOO", v4);
1:         assertMapValue("TEST.FOO", v1, v2, v3, v4);
1:         assertMapValue("TEST.D1", v2, v3, v4);
1: 
1:         assertMapValue("TEST.FOO.FOO", v3, v4);
1:         assertMapValue("TEST.BAR.FOO", v3, v4);
1:         assertMapValue("TEST.FOO.BAR", v3, v4, v5);
1:         assertMapValue("TEST.BAR.D3", v3, v4);
1: 
1:         assertMapValue("TEST.*", v1, v2, v3, v4, v6);
1:         assertMapValue("*.*", v1, v2, v3, v4, v6);
1:         assertMapValue("*.D1", v2, v3, v4);
1:         assertMapValue("TEST.*.*", v3, v4, v5);
1:         assertMapValue("TEST.BAR.*", v3, v4);
1:     }
1: 
1: 
1:     protected void put(String name, Object value) {
1:         map.put(createDestination(name), value);
1:     }
1: 
1:     protected void remove(String name, Object value) {
1:         ActiveMQDestination destination = createDestination(name);
1:         map.remove(destination, value);
1:     }
1: 
1: 
1:     protected void assertMapValue(String destinationName, Object expected) {
1:         ActiveMQDestination destination = createDestination(destinationName);
1:         assertMapValue(destination, expected);
1:     }
1: 
1:     protected void assertMapValue(String destinationName, Object expected1, Object expected2) {
0:         assertMapValue(destinationName, Arrays.asList(new Object[]{expected1, expected2}));
1:     }
1: 
1:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3) {
0:         assertMapValue(destinationName, Arrays.asList(new Object[]{expected1, expected2, expected3}));
1:     }
1: 
1:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4) {
0:         assertMapValue(destinationName, Arrays.asList(new Object[]{expected1, expected2, expected3, expected4}));
1:     }
1: 
1:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4, Object expected5) {
0:         assertMapValue(destinationName, Arrays.asList(new Object[]{expected1, expected2, expected3, expected4, expected5}));
1:     }
1: 
1:     protected void assertMapValue(ActiveMQDestination destination, Object expected) {
1:         List expectedList = null;
1:         if (expected == null) {
1:             expectedList = Collections.EMPTY_LIST;
1:         }
0:         else if (expected instanceof List) {
0:             expectedList = (List) expected;
1:         }
0:         else {
1:             expectedList = new ArrayList();
1:             expectedList.add(expected);
1:         }
1:         Collections.sort(expectedList);
1:         Set actualSet = map.get(destination);
1:         List actual = new ArrayList(actualSet);
1:         Collections.sort(actual);
1:         assertEquals("map value for destinationName:  " + destination, expectedList, actual);
1:     }
1: 
1:     protected ActiveMQDestination createDestination(String name) {
1:         return new ActiveMQTopic(name);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:eb827e2
/////////////////////////////////////////////////////////////////////////
1:     public void testDoubleWildcardDoesNotMatchLongerPattern() throws Exception {
1:         put("TEST.*", v1);
1:         put("TEST.BAR.D3", v2);
0: 
1:         assertMapValue("*.*.D3", v2);
1:     }
0: 
1:     public void testWildcardAtEndOfPathAndAtBeginningOfSearch() throws Exception {
1:         put("TEST.*", v1);
0: 
1:         assertMapValue("*.D1", v1);
1:     }
0: 
commit:c62a775
/////////////////////////////////////////////////////////////////////////
1:         assertMapValue("TEST.*.>", v1, v2, v3, v4, v5, v6);
1:         assertMapValue("TEST.>", v1, v2, v3, v4, v5, v6);
1:         assertMapValue("TEST.>.>", v1, v2, v3, v4, v5, v6);
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void assertMapValue(String destinationName, Object expected1, Object expected2, Object expected3, Object expected4, Object expected5, Object expected6) {
0:         assertMapValue(destinationName, Arrays.asList(new Object[] { expected1, expected2, expected3, expected4, expected5, expected6 }));
0:     }
commit:8b28367
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:         map.put(d1, d1);
1:         map.put(d2, d2);
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void testQueueAndTopicWithSameName() throws Exception {
1:         ActiveMQQueue q1 = new ActiveMQQueue("foo");
1:         ActiveMQTopic t1 = new ActiveMQTopic("foo");
0: 
1:         map.put(q1, v1);
1:         map.put(t1, v2);
0: 
1:         assertMapValue(q1, v1);
1:         assertMapValue(t1, v2);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         List allValues = Arrays.asList(new Object[] { v1, v2, v3 });
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
0:     }
0: 
1:         assertEquals("Root child count", 1, map.getTopicRootChildCount());
0: 
0: 
0: 
1:         assertEquals("Root child count", 0, map.getTopicRootChildCount());
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         assertMapValue(destinationName, Arrays.asList(new Object[] { expected1, expected2 }));
0:         assertMapValue(destinationName, Arrays.asList(new Object[] { expected1, expected2, expected3 }));
0:         assertMapValue(destinationName, Arrays.asList(new Object[] { expected1, expected2, expected3, expected4 }));
0:         assertMapValue(destinationName, Arrays.asList(new Object[] { expected1, expected2, expected3, expected4, expected5 }));
commit:664b534
/////////////////////////////////////////////////////////////////////////
0:         
0:         
0:         
0:         
0:     
1:     public void testAnyPathWildcardInMap() throws Exception {
1:         put("TEST.FOO.>", v1);
0: 
0: 
1:         assertMapValue("TEST.FOO.BAR.WHANOT.A.B.C", v1);
1:         assertMapValue("TEST.FOO.BAR.WHANOT", v1);
1:         assertMapValue("TEST.FOO.BAR", v1);
0:         
1:         assertMapValue("TEST.*.*", v1);
1:         assertMapValue("TEST.BAR", null);
0:         
1:         assertMapValue("TEST.FOO", v1);
0:      }
============================================================================