1:1802116: /**
1:1802116:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1802116:  * contributor license agreements.  See the NOTICE file distributed with
1:1802116:  * this work for additional information regarding copyright ownership.
1:1802116:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1802116:  * (the "License"); you may not use this file except in compliance with
1:1802116:  * the License.  You may obtain a copy of the License at
1:1802116:  *
1:1802116:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1802116:  *
1:1802116:  * Unless required by applicable law or agreed to in writing, software
1:1802116:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1802116:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1802116:  * See the License for the specific language governing permissions and
1:1802116:  * limitations under the License.
1:1802116:  */
1:1802116: package org.apache.activemq.util;
1:1802116: 
1:e73ab34: import java.net.URI;
1:e73ab34: import java.net.URISyntaxException;
1:1802116: import java.util.ArrayList;
1:1802116: import java.util.List;
1:1802116: 
1:1802116: import org.apache.activemq.command.ActiveMQDestination;
1:1802116: 
1:1802116: /**
1:1802116:  * Special converter for String -> List<ActiveMQDestination> to be used instead of a
1:1802116:  * {@link java.beans.PropertyEditor} which otherwise causes
1:1802116:  * memory leaks as the JDK {@link java.beans.PropertyEditorManager}
1:1802116:  * is a static class and has strong references to classes, causing
1:1802116:  * problems in hot-deployment environments.
1:1802116:  */
1:1802116: public class StringToListOfActiveMQDestinationConverter {
1:1802116: 
1:1802116:     public static List<ActiveMQDestination> convertToActiveMQDestination(Object value) {
1:1802116:         if (value == null) {
1:1802116:             return null;
1:1802116:         }
1:1802116: 
1:1802116:         // text must be enclosed with []
1:1802116: 
1:1802116:         String text = value.toString();
1:1802116:         if (text.startsWith("[") && text.endsWith("]")) {
1:ce67624:             text = text.substring(1, text.length() - 1).trim();
1:ce67624: 
1:ce67624:             if (text.isEmpty()) {
1:ce67624:                 return null;
1:ce67624:             }
1:ce67624: 
1:2c82258:             String[] array = text.split(",");
1:1802116: 
1:1802116:             List<ActiveMQDestination> list = new ArrayList<ActiveMQDestination>();
1:1802116:             for (String item : array) {
1:1802116:                 list.add(ActiveMQDestination.createDestination(item.trim(), ActiveMQDestination.QUEUE_TYPE));
1:1802116:             }
1:ce67624: 
1:1802116:             return list;
1:1802116:         } else {
1:1802116:             return null;
1:1802116:         }
1:1802116:     }
1:1802116: 
1:1802116:     public static String convertFromActiveMQDestination(Object value) {
1:e73ab34:         return convertFromActiveMQDestination(value, false);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     public static String convertFromActiveMQDestination(Object value, boolean includeOptions) {
1:1802116:         if (value == null) {
1:1802116:             return null;
1:1802116:         }
1:1802116: 
1:1802116:         StringBuilder sb = new StringBuilder("[");
1:1802116:         if (value instanceof List) {
1:1802116:             List list = (List) value;
1:1802116:             for (int i = 0; i < list.size(); i++) {
1:1802116:                 Object e = list.get(i);
1:1802116:                 if (e instanceof ActiveMQDestination) {
1:1802116:                     ActiveMQDestination destination = (ActiveMQDestination) e;
1:e73ab34:                     if (includeOptions && destination.getOptions() != null) {
1:e73ab34:                         try {
1:e73ab34:                             //Reapply the options as URI parameters
1:e73ab34:                             sb.append(destination.toString() + URISupport.applyParameters(
1:e73ab34:                                 new URI(""), destination.getOptions()));
1:e73ab34:                         } catch (URISyntaxException e1) {
1:e73ab34:                             sb.append(destination);
1:e73ab34:                         }
1:e73ab34:                     } else {
1:e73ab34:                         sb.append(destination);
1:e73ab34:                     }
1:1802116:                     if (i < list.size() - 1) {
1:1802116:                         sb.append(", ");
1:1802116:                     }
1:1802116:                 }
1:1802116:             }
1:1802116:         }
1:1802116:         sb.append("]");
1:1802116: 
1:1802116:         if (sb.length() > 2) {
1:1802116:             return sb.toString();
1:1802116:         } else {
1:1802116:             return null;
1:1802116:         }
1:1802116:     }
1:1802116: 
1:1802116: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.net.URISyntaxException;
/////////////////////////////////////////////////////////////////////////
1:         return convertFromActiveMQDestination(value, false);
1:     }
1: 
1:     public static String convertFromActiveMQDestination(Object value, boolean includeOptions) {
/////////////////////////////////////////////////////////////////////////
1:                     if (includeOptions && destination.getOptions() != null) {
1:                         try {
1:                             //Reapply the options as URI parameters
1:                             sb.append(destination.toString() + URISupport.applyParameters(
1:                                 new URI(""), destination.getOptions()));
1:                         } catch (URISyntaxException e1) {
1:                             sb.append(destination);
1:                         }
1:                     } else {
1:                         sb.append(destination);
1:                     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ce67624
/////////////////////////////////////////////////////////////////////////
1:             text = text.substring(1, text.length() - 1).trim();
1: 
1:             if (text.isEmpty()) {
1:                 return null;
1:             }
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2c82258
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             String[] array = text.split(",");
commit:9a8f6e4
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:1802116
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.springframework.util.StringUtils;
1: 
1: /**
1:  * Special converter for String -> List<ActiveMQDestination> to be used instead of a
1:  * {@link java.beans.PropertyEditor} which otherwise causes
1:  * memory leaks as the JDK {@link java.beans.PropertyEditorManager}
1:  * is a static class and has strong references to classes, causing
1:  * problems in hot-deployment environments.
1:  */
1: public class StringToListOfActiveMQDestinationConverter {
1: 
1:     public static List<ActiveMQDestination> convertToActiveMQDestination(Object value) {
1:         if (value == null) {
1:             return null;
1:         }
1: 
1:         // text must be enclosed with []
1: 
1:         String text = value.toString();
1:         if (text.startsWith("[") && text.endsWith("]")) {
0:             text = text.substring(1, text.length() - 1);
0:             String[] array = StringUtils.delimitedListToStringArray(text, ",", null);
1: 
1:             List<ActiveMQDestination> list = new ArrayList<ActiveMQDestination>();
1:             for (String item : array) {
1:                 list.add(ActiveMQDestination.createDestination(item.trim(), ActiveMQDestination.QUEUE_TYPE));
1:             }
1:             return list;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     public static String convertFromActiveMQDestination(Object value) {
1:         if (value == null) {
1:             return null;
1:         }
1: 
1:         StringBuilder sb = new StringBuilder("[");
1:         if (value instanceof List) {
1:             List list = (List) value;
1:             for (int i = 0; i < list.size(); i++) {
1:                 Object e = list.get(i);
1:                 if (e instanceof ActiveMQDestination) {
1:                     ActiveMQDestination destination = (ActiveMQDestination) e;
0:                     sb.append(destination);
1:                     if (i < list.size() - 1) {
1:                         sb.append(", ");
1:                     }
1:                 }
1:             }
1:         }
1:         sb.append("]");
1: 
1:         if (sb.length() > 2) {
1:             return sb.toString();
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1: }
============================================================================