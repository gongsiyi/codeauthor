1:10fc397: /*
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:adafdfe:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
2:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
3:cdd5150: 
1:cdd5150: import java.nio.ByteBuffer;
1:ca456c4: import java.util.AbstractMap;
1:72839b7: import java.util.Map;
1:cdd5150: 
1:3306467: import org.apache.activemq.command.ActiveMQDestination;
1:72839b7: import org.apache.qpid.proton.amqp.Binary;
1:72839b7: import org.apache.qpid.proton.amqp.DescribedType;
1:72839b7: import org.apache.qpid.proton.amqp.Symbol;
1:72839b7: import org.apache.qpid.proton.amqp.UnsignedLong;
1:3306467: import org.apache.qpid.proton.amqp.transaction.Coordinator;
1:f2653e6: import org.fusesource.hawtbuf.Buffer;
1:f2653e6: 
2:cdd5150: /**
1:72839b7:  * Set of useful methods and definitions used in the AMQP protocol handling
1:cdd5150:  */
1:cdd5150: public class AmqpSupport {
1:cdd5150: 
1:72839b7:     // Identification values used to locating JMS selector types.
1:72839b7:     public static final UnsignedLong JMS_SELECTOR_CODE = UnsignedLong.valueOf(0x0000468C00000004L);
1:72839b7:     public static final Symbol JMS_SELECTOR_NAME = Symbol.valueOf("apache.org:selector-filter:string");
1:72839b7:     public static final Object[] JMS_SELECTOR_FILTER_IDS = new Object[] { JMS_SELECTOR_CODE, JMS_SELECTOR_NAME };
1:72839b7:     public static final UnsignedLong NO_LOCAL_CODE = UnsignedLong.valueOf(0x0000468C00000003L);
1:4945c83:     public static final Symbol NO_LOCAL_NAME = Symbol.valueOf("apache.org:no-local-filter:list");
1:72839b7:     public static final Object[] NO_LOCAL_FILTER_IDS = new Object[] { NO_LOCAL_CODE, NO_LOCAL_NAME };
1:72839b7: 
1:72839b7:     // Capabilities used to identify destination type in some requests.
1:72839b7:     public static final Symbol TEMP_QUEUE_CAPABILITY = Symbol.valueOf("temporary-queue");
1:72839b7:     public static final Symbol TEMP_TOPIC_CAPABILITY = Symbol.valueOf("temporary-topic");
1:10fc397:     public static final Symbol QUEUE_CAPABILITY = Symbol.valueOf("queue");
1:10fc397:     public static final Symbol TOPIC_CAPABILITY = Symbol.valueOf("topic");
1:72839b7: 
1:72839b7:     // Symbols used to announce connection information to remote peer.
1:138e52b:     public static final Symbol INVALID_FIELD = Symbol.valueOf("invalid-field");
1:138e52b:     public static final Symbol CONTAINER_ID = Symbol.valueOf("container-id");
1:138e52b: 
1:138e52b:     // Symbols used to announce connection information to remote peer.
1:72839b7:     public static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1:4a1f2f7:     public static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
1:72839b7:     public static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:72839b7:     public static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1:72839b7:     public static final Symbol CONNECTION_OPEN_FAILED = Symbol.valueOf("amqp:connection-establishment-failed");
1:c231039:     public static final Symbol PRODUCT = Symbol.valueOf("product");
1:c231039:     public static final Symbol VERSION = Symbol.valueOf("version");
1:c231039:     public static final Symbol PLATFORM = Symbol.valueOf("platform");
1:72839b7: 
1:72839b7:     // Symbols used in configuration of newly opened links.
1:72839b7:     public static final Symbol COPY = Symbol.getSymbol("copy");
1:72839b7: 
1:8e6a404:     // Lifetime policy symbols
1:3306467:     public static final Symbol LIFETIME_POLICY = Symbol.valueOf("lifetime-policy");
1:8e6a404: 
1:72839b7:     /**
1:72839b7:      * Search for a given Symbol in a given array of Symbol object.
1:72839b7:      *
1:72839b7:      * @param symbols
1:72839b7:      *        the set of Symbols to search.
1:72839b7:      * @param key
1:72839b7:      *        the value to try and find in the Symbol array.
1:72839b7:      *
1:72839b7:      * @return true if the key is found in the given Symbol array.
1:72839b7:      */
1:72839b7:     public static boolean contains(Symbol[] symbols, Symbol key) {
1:72839b7:         if (symbols == null || symbols.length == 0) {
1:72839b7:             return false;
1:72839b7:         }
1:72839b7: 
1:72839b7:         for (Symbol symbol : symbols) {
1:72839b7:             if (symbol.equals(key)) {
1:72839b7:                 return true;
1:72839b7:             }
1:72839b7:         }
1:72839b7: 
1:72839b7:         return false;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Search for a particular filter using a set of known indentification values
1:72839b7:      * in the Map of filters.
1:72839b7:      *
1:72839b7:      * @param filters
1:72839b7:      *        The filters map that should be searched.
1:72839b7:      * @param filterIds
1:72839b7:      *        The aliases for the target filter to be located.
1:72839b7:      *
1:72839b7:      * @return the filter if found in the mapping or null if not found.
1:72839b7:      */
1:ca456c4:     public static Map.Entry<Symbol, DescribedType> findFilter(Map<Symbol, Object> filters, Object[] filterIds) {
1:72839b7: 
1:72839b7:         if (filterIds == null || filterIds.length == 0) {
1:28e7cb0:             throw new IllegalArgumentException("Invalid empty Filter Ids array passed: ");
1:72839b7:         }
1:72839b7: 
1:72839b7:         if (filters == null || filters.isEmpty()) {
1:72839b7:             return null;
1:72839b7:         }
1:72839b7: 
1:ca456c4:         for (Map.Entry<Symbol, Object> filter : filters.entrySet()) {
1:ca456c4:             if (filter.getValue() instanceof DescribedType) {
1:ca456c4:                 DescribedType describedType = ((DescribedType) filter.getValue());
1:72839b7:                 Object descriptor = describedType.getDescriptor();
1:72839b7: 
1:72839b7:                 for (Object filterId : filterIds) {
1:72839b7:                     if (descriptor.equals(filterId)) {
1:ca456c4:                         return new AbstractMap.SimpleImmutableEntry<Symbol, DescribedType>(filter.getKey(), describedType);
1:72839b7:                     }
1:72839b7:                 }
1:72839b7:             }
1:72839b7:         }
1:72839b7: 
1:72839b7:         return null;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Conversion from Java ByteBuffer to a HawtBuf buffer.
1:72839b7:      *
1:72839b7:      * @param data
1:72839b7:      *        the ByteBuffer instance to convert.
1:72839b7:      *
1:72839b7:      * @return a new HawtBuf buffer converted from the given ByteBuffer.
1:72839b7:      */
1:72839b7:     public static Buffer toBuffer(ByteBuffer data) {
1:f2653e6:         if (data == null) {
1:cdd5150:             return null;
1:cdd5150:         }
1:72839b7: 
1:cdd5150:         Buffer rc;
1:72839b7: 
1:f2653e6:         if (data.isDirect()) {
1:cdd5150:             rc = new Buffer(data.remaining());
1:cdd5150:             data.get(rc.data);
1:cdd5150:         } else {
1:cdd5150:             rc = new Buffer(data);
1:f2653e6:             data.position(data.position() + data.remaining());
1:cdd5150:         }
1:72839b7: 
1:cdd5150:         return rc;
1:cdd5150:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Given a long value, convert it to a byte array for marshalling.
1:72839b7:      *
1:72839b7:      * @param value
1:72839b7:      *        the value to convert.
1:72839b7:      *
1:72839b7:      * @return a new byte array that holds the big endian value of the long.
1:72839b7:      */
1:72839b7:     public static byte[] toBytes(long value) {
1:72839b7:         Buffer buffer = new Buffer(8);
1:72839b7:         buffer.bigEndianEditor().writeLong(value);
1:72839b7:         return buffer.data;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Converts a Binary value to a long assuming that the contained value is
1:72839b7:      * stored in Big Endian encoding.
1:72839b7:      *
1:72839b7:      * @param value
1:72839b7:      *        the Binary object whose payload is converted to a long.
1:72839b7:      *
1:72839b7:      * @return a long value constructed from the bytes of the Binary instance.
1:72839b7:      */
1:72839b7:     public static long toLong(Binary value) {
1:72839b7:         Buffer buffer = new Buffer(value.getArray(), value.getArrayOffset(), value.getLength());
1:72839b7:         return buffer.bigEndianEditor().readLong();
1:72839b7:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * Given an AMQP endpoint, deduce the appropriate ActiveMQDestination type and create
1:3306467:      * a new instance.  By default if the endpoint address does not carry the standard prefix
1:3306467:      * value then we default to a Queue type destination.  If the endpoint is null or is an
1:3306467:      * AMQP Coordinator type endpoint this method returns null to indicate no destination
1:3306467:      * can be mapped.
1:3306467:      *
1:3306467:      * @param endpoint
1:3306467:      *        the AMQP endpoint to construct an ActiveMQDestination from.
1:3306467:      *
1:3306467:      * @return a new ActiveMQDestination that best matches the address of the given endpoint
1:3306467:      *
1:3306467:      * @throws AmqpProtocolException if an error occurs while deducing the destination type.
1:3306467:      */
1:3306467:     public static ActiveMQDestination createDestination(Object endpoint) throws AmqpProtocolException {
1:3306467:         if (endpoint == null) {
1:3306467:             return null;
1:3306467:         } else if (endpoint instanceof Coordinator) {
1:3306467:             return null;
1:3306467:         } else if (endpoint instanceof org.apache.qpid.proton.amqp.messaging.Terminus) {
1:3306467:             org.apache.qpid.proton.amqp.messaging.Terminus terminus = (org.apache.qpid.proton.amqp.messaging.Terminus) endpoint;
1:3306467:             if (terminus.getAddress() == null || terminus.getAddress().length() == 0) {
1:3306467:                 if (terminus instanceof org.apache.qpid.proton.amqp.messaging.Source) {
1:3306467:                     throw new AmqpProtocolException("amqp:invalid-field", "source address not set");
1:3306467:                 } else {
1:3306467:                     throw new AmqpProtocolException("amqp:invalid-field", "target address not set");
1:3306467:                 }
1:3306467:             }
1:3306467: 
1:3306467:             return ActiveMQDestination.createDestination(terminus.getAddress(), ActiveMQDestination.QUEUE_TYPE);
1:3306467:         } else {
1:3306467:             throw new RuntimeException("Unexpected terminus type: " + endpoint);
1:3306467:         }
1:3306467:     }
1:10fc397: 
1:10fc397:     /**
1:10fc397:      * Given an ActiveMQDestination return the proper Capability value for the concrete destination type.
1:10fc397:      *
1:10fc397:      * @param destination
1:10fc397:      *      The ActiveMQDestination whose capability is being requested.
1:10fc397:      *
1:10fc397:      * @return a Symbol that matches the defined Capability value for the ActiveMQDestiantion.
1:10fc397:      */
1:10fc397:     public static Symbol getDestinationTypeSymbol(ActiveMQDestination destination) {
1:10fc397:         if (destination.isQueue()) {
1:10fc397:             if (destination.isTemporary()) {
1:10fc397:                 return TEMP_QUEUE_CAPABILITY;
1:10fc397:             } else {
1:10fc397:                 return QUEUE_CAPABILITY;
1:10fc397:             }
1:10fc397:         } else {
1:10fc397:             if (destination.isTemporary()) {
1:10fc397:                 return TEMP_TOPIC_CAPABILITY;
1:10fc397:             } else {
1:10fc397:                 return TOPIC_CAPABILITY;
1:10fc397:             }
1:10fc397:         }
1:10fc397:     }
1:cdd5150: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:10fc397
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol QUEUE_CAPABILITY = Symbol.valueOf("queue");
1:     public static final Symbol TOPIC_CAPABILITY = Symbol.valueOf("topic");
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Given an ActiveMQDestination return the proper Capability value for the concrete destination type.
1:      *
1:      * @param destination
1:      *      The ActiveMQDestination whose capability is being requested.
1:      *
1:      * @return a Symbol that matches the defined Capability value for the ActiveMQDestiantion.
1:      */
1:     public static Symbol getDestinationTypeSymbol(ActiveMQDestination destination) {
1:         if (destination.isQueue()) {
1:             if (destination.isTemporary()) {
1:                 return TEMP_QUEUE_CAPABILITY;
1:             } else {
1:                 return QUEUE_CAPABILITY;
1:             }
1:         } else {
1:             if (destination.isTemporary()) {
1:                 return TEMP_TOPIC_CAPABILITY;
1:             } else {
1:                 return TOPIC_CAPABILITY;
1:             }
1:         }
1:     }
commit:4a1f2f7
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("Invalid empty Filter Ids array passed: ");
commit:c231039
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol PRODUCT = Symbol.valueOf("product");
1:     public static final Symbol VERSION = Symbol.valueOf("version");
1:     public static final Symbol PLATFORM = Symbol.valueOf("platform");
commit:4945c83
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol NO_LOCAL_NAME = Symbol.valueOf("apache.org:no-local-filter:list");
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.qpid.proton.amqp.transaction.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol LIFETIME_POLICY = Symbol.valueOf("lifetime-policy");
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Given an AMQP endpoint, deduce the appropriate ActiveMQDestination type and create
1:      * a new instance.  By default if the endpoint address does not carry the standard prefix
1:      * value then we default to a Queue type destination.  If the endpoint is null or is an
1:      * AMQP Coordinator type endpoint this method returns null to indicate no destination
1:      * can be mapped.
1:      *
1:      * @param endpoint
1:      *        the AMQP endpoint to construct an ActiveMQDestination from.
1:      *
1:      * @return a new ActiveMQDestination that best matches the address of the given endpoint
1:      *
1:      * @throws AmqpProtocolException if an error occurs while deducing the destination type.
1:      */
1:     public static ActiveMQDestination createDestination(Object endpoint) throws AmqpProtocolException {
1:         if (endpoint == null) {
1:             return null;
1:         } else if (endpoint instanceof Coordinator) {
1:             return null;
1:         } else if (endpoint instanceof org.apache.qpid.proton.amqp.messaging.Terminus) {
1:             org.apache.qpid.proton.amqp.messaging.Terminus terminus = (org.apache.qpid.proton.amqp.messaging.Terminus) endpoint;
1:             if (terminus.getAddress() == null || terminus.getAddress().length() == 0) {
1:                 if (terminus instanceof org.apache.qpid.proton.amqp.messaging.Source) {
1:                     throw new AmqpProtocolException("amqp:invalid-field", "source address not set");
1:                 } else {
1:                     throw new AmqpProtocolException("amqp:invalid-field", "target address not set");
1:                 }
1:             }
1: 
1:             return ActiveMQDestination.createDestination(terminus.getAddress(), ActiveMQDestination.QUEUE_TYPE);
1:         } else {
1:             throw new RuntimeException("Unexpected terminus type: " + endpoint);
1:         }
1:     }
commit:8e6a404
/////////////////////////////////////////////////////////////////////////
1:     // Lifetime policy symbols
0:     public static final Symbol DYNAMIC_NODE_LIFETIME_POLICY = Symbol.valueOf("lifetime-policy");
1: 
commit:ca456c4
/////////////////////////////////////////////////////////////////////////
1: import java.util.AbstractMap;
/////////////////////////////////////////////////////////////////////////
1:     public static Map.Entry<Symbol, DescribedType> findFilter(Map<Symbol, Object> filters, Object[] filterIds) {
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<Symbol, Object> filter : filters.entrySet()) {
1:             if (filter.getValue() instanceof DescribedType) {
1:                 DescribedType describedType = ((DescribedType) filter.getValue());
1:                         return new AbstractMap.SimpleImmutableEntry<Symbol, DescribedType>(filter.getKey(), describedType);
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.DescribedType;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.UnsignedLong;
1:  * Set of useful methods and definitions used in the AMQP protocol handling
1:     // Identification values used to locating JMS selector types.
1:     public static final UnsignedLong JMS_SELECTOR_CODE = UnsignedLong.valueOf(0x0000468C00000004L);
1:     public static final Symbol JMS_SELECTOR_NAME = Symbol.valueOf("apache.org:selector-filter:string");
1:     public static final Object[] JMS_SELECTOR_FILTER_IDS = new Object[] { JMS_SELECTOR_CODE, JMS_SELECTOR_NAME };
1:     public static final UnsignedLong NO_LOCAL_CODE = UnsignedLong.valueOf(0x0000468C00000003L);
0:     public static final Symbol NO_LOCAL_NAME = Symbol.valueOf("apache.org:selector-filter:string");
1:     public static final Object[] NO_LOCAL_FILTER_IDS = new Object[] { NO_LOCAL_CODE, NO_LOCAL_NAME };
1: 
1:     // Capabilities used to identify destination type in some requests.
1:     public static final Symbol TEMP_QUEUE_CAPABILITY = Symbol.valueOf("temporary-queue");
1:     public static final Symbol TEMP_TOPIC_CAPABILITY = Symbol.valueOf("temporary-topic");
1: 
1:     // Symbols used to announce connection information to remote peer.
1:     public static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1:     public static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:     public static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1:     public static final Symbol CONNECTION_OPEN_FAILED = Symbol.valueOf("amqp:connection-establishment-failed");
1: 
1:     // Symbols used in configuration of newly opened links.
1:     public static final Symbol COPY = Symbol.getSymbol("copy");
1: 
1:     /**
1:      * Search for a given Symbol in a given array of Symbol object.
1:      *
1:      * @param symbols
1:      *        the set of Symbols to search.
1:      * @param key
1:      *        the value to try and find in the Symbol array.
1:      *
1:      * @return true if the key is found in the given Symbol array.
1:      */
1:     public static boolean contains(Symbol[] symbols, Symbol key) {
1:         if (symbols == null || symbols.length == 0) {
1:             return false;
1:         }
1: 
1:         for (Symbol symbol : symbols) {
1:             if (symbol.equals(key)) {
1:                 return true;
1:             }
1:         }
1: 
1:         return false;
1:     }
1: 
1:     /**
1:      * Search for a particular filter using a set of known indentification values
1:      * in the Map of filters.
1:      *
1:      * @param filters
1:      *        The filters map that should be searched.
1:      * @param filterIds
1:      *        The aliases for the target filter to be located.
1:      *
1:      * @return the filter if found in the mapping or null if not found.
1:      */
0:     public static DescribedType findFilter(Map<Symbol, Object> filters, Object[] filterIds) {
1: 
1:         if (filterIds == null || filterIds.length == 0) {
0:             throw new IllegalArgumentException("Invalid Filter Ids array passed: " + filterIds);
1:         }
1: 
1:         if (filters == null || filters.isEmpty()) {
1:             return null;
1:         }
1: 
0:         for (Object value : filters.values()) {
0:             if (value instanceof DescribedType) {
0:                 DescribedType describedType = ((DescribedType) value);
1:                 Object descriptor = describedType.getDescriptor();
1: 
1:                 for (Object filterId : filterIds) {
1:                     if (descriptor.equals(filterId)) {
0:                         return describedType;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         return null;
1:     }
1: 
1:     /**
1:      * Conversion from Java ByteBuffer to a HawtBuf buffer.
1:      *
1:      * @param data
1:      *        the ByteBuffer instance to convert.
1:      *
1:      * @return a new HawtBuf buffer converted from the given ByteBuffer.
1:      */
1:     public static Buffer toBuffer(ByteBuffer data) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Given a long value, convert it to a byte array for marshalling.
1:      *
1:      * @param value
1:      *        the value to convert.
1:      *
1:      * @return a new byte array that holds the big endian value of the long.
1:      */
1:     public static byte[] toBytes(long value) {
1:         Buffer buffer = new Buffer(8);
1:         buffer.bigEndianEditor().writeLong(value);
1:         return buffer.data;
1:     }
1: 
1:     /**
1:      * Converts a Binary value to a long assuming that the contained value is
1:      * stored in Big Endian encoding.
1:      *
1:      * @param value
1:      *        the Binary object whose payload is converted to a long.
1:      *
1:      * @return a long value constructed from the bytes of the Binary instance.
1:      */
1:     public static long toLong(Binary value) {
1:         Buffer buffer = new Buffer(value.getArray(), value.getArrayOffset(), value.getLength());
1:         return buffer.bigEndianEditor().readLong();
1:     }
commit:adafdfe
/////////////////////////////////////////////////////////////////////////
1:  *
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.Buffer;
1: 
1:         if (data == null) {
1:         if (data.isDirect()) {
1:             data.position(data.position() + data.remaining());
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:138e52b
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol INVALID_FIELD = Symbol.valueOf("invalid-field");
1:     public static final Symbol CONTAINER_ID = Symbol.valueOf("container-id");
1: 
1:     // Symbols used to announce connection information to remote peer.
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
0: import org.fusesource.hawtbuf.Buffer;
1: 
1: import java.nio.ByteBuffer;
1: 
1: /**
0:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class AmqpSupport {
1: 
0:     static public Buffer toBuffer(ByteBuffer data) {
0:         if( data == null ) {
1:             return null;
1:         }
1:         Buffer rc;
0:         if( data.isDirect() ) {
1:             rc = new Buffer(data.remaining());
1:             data.get(rc.data);
1:         } else {
1:             rc = new Buffer(data);
0:             data.position(data.position()+data.remaining());
1:         }
1:         return rc;
1:     }
1: 
1: }
============================================================================