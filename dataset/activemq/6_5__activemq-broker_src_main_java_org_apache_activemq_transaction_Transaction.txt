1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transaction;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:e1389a6: import java.io.InterruptedIOException;
1:d29ca2a: import java.util.ArrayList;
1:d453b8d: import java.util.Collections;
1:d29ca2a: import java.util.Iterator;
1:e1389a6: import java.util.concurrent.Callable;
1:e1389a6: import java.util.concurrent.ExecutionException;
1:e1389a6: import java.util.concurrent.FutureTask;
1:fe9d99e: import javax.jms.TransactionRolledBackException;
1:d29ca2a: import javax.transaction.xa.XAException;
1:fe9d99e: 
1:fe9d99e: import org.apache.activemq.TransactionContext;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:8bf987b: import org.slf4j.Logger;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * Keeps track of all the actions the need to be done when a transaction does a
1:f812e34:  * commit or rollback.
1:b0c2a40:  * 
1:f812e34:  * 
1:d29ca2a:  */
1:d29ca2a: public abstract class Transaction {
1:d29ca2a: 
1:fc00993:     public static final byte START_STATE = 0; // can go to: 1,2,3
1:fc00993:     public static final byte IN_USE_STATE = 1; // can go to: 2,3
1:fc00993:     public static final byte PREPARED_STATE = 2; // can go to: 3
1:fc00993:     public static final byte FINISHED_STATE = 3;
1:8461158:     boolean committed = false;
1:7077d2b:     Throwable rollackOnlyCause = null;
1:d29ca2a: 
1:27262c8:     private final ArrayList<Synchronization> synchronizations = new ArrayList<Synchronization>();
1:d29ca2a:     private byte state = START_STATE;
1:27262c8:     protected FutureTask<?> preCommitTask = new FutureTask<Object>(new Callable<Object>() {
2:27262c8:         public Object call() throws Exception {
1:27262c8:             doPreCommit();
2:27262c8:             return null;
1:27262c8:         }   
1:27262c8:     });
1:27262c8:     protected FutureTask<?> postCommitTask = new FutureTask<Object>(new Callable<Object>() {
1:e1389a6:         public Object call() throws Exception {
1:e1389a6:             doPostCommit();
1:e1389a6:             return null;
1:27262c8:         }   
1:27262c8:     });
1:d29ca2a:     
1:d29ca2a:     public byte getState() {
1:d29ca2a:         return state;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setState(byte state) {
1:d29ca2a:         this.state = state;
1:d29ca2a:     }
1:d29ca2a: 
1:8461158:     public boolean isCommitted() {
1:8461158:         return committed;
1:8461158:     }
1:8461158: 
1:8461158:     public void setCommitted(boolean committed) {
1:8461158:         this.committed = committed;
1:8461158:     }
1:8461158: 
1:d29ca2a:     public void addSynchronization(Synchronization r) {
1:340728f:         synchronized (synchronizations) {
1:340728f:             synchronizations.add(r);
1:340728f:         }
1:d29ca2a:         if (state == START_STATE) {
1:d29ca2a:             state = IN_USE_STATE;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:60624c4:     public Synchronization findMatching(Synchronization r) {
1:60624c4:         int existing = synchronizations.indexOf(r);
1:60624c4:         if (existing != -1) {
1:60624c4:             return synchronizations.get(existing);
1:60624c4:         }
1:60624c4:         return null;
1:60624c4:     }
1:d29ca2a: 
1:25a252f:     public void removeSynchronization(Synchronization r) {
1:25a252f:         synchronizations.remove(r);
1:d4d9ba8:     }
1:d29ca2a: 
1:7f5213b:     public void prePrepare() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Is it ok to call prepare now given the state of the
1:d29ca2a:         // transaction?
1:d29ca2a:         switch (state) {
1:f812e34:         case START_STATE:
1:f812e34:         case IN_USE_STATE:
1:f812e34:             break;
1:f812e34:         default:
1:fe9d99e:             XAException xae = newXAException("Prepare cannot be called now", XAException.XAER_PROTO);
1:f812e34:             throw xae;
1:d29ca2a:         }
1:d29ca2a: 
1:7077d2b:         if (isRollbackOnly()) {
1:fe9d99e:             XAException xae = newXAException("COMMIT FAILED: Transaction marked rollback only", XAException.XA_RBROLLBACK);
1:fe9d99e:             TransactionRolledBackException transactionRolledBackException = new TransactionRolledBackException(xae.getLocalizedMessage());
1:7077d2b:             transactionRolledBackException.initCause(rollackOnlyCause);
1:fe9d99e:             xae.initCause(transactionRolledBackException);
1:fe9d99e:             throw xae;
1:fe9d99e:         }
1:d29ca2a:     }
1:d29ca2a:     
1:27262c8:     protected void fireBeforeCommit() throws Exception {
1:27262c8:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:27262c8:             Synchronization s = iter.next();
1:27262c8:             s.beforeCommit();
1:27262c8:         }
1:27262c8:     }
1:d29ca2a: 
1:7f5213b:     protected void fireAfterCommit() throws Exception {
1:933eb2f:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:933eb2f:             Synchronization s = iter.next();
1:d29ca2a:             s.afterCommit();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void fireAfterRollback() throws Exception {
1:d453b8d:     	Collections.reverse(synchronizations);
1:933eb2f:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:933eb2f:             Synchronization s = iter.next();
1:d29ca2a:             s.afterRollback();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public String toString() {
1:66e8011:         return "Local-" + getTransactionId() + "[synchronizations=" + synchronizations + "]";
1:d29ca2a:     }
1:f812e34: 
1:fc00993:     public abstract void commit(boolean onePhase) throws XAException, IOException;
1:f812e34: 
1:fc00993:     public abstract void rollback() throws XAException, IOException;
1:f812e34: 
1:fc00993:     public abstract int prepare() throws XAException, IOException;
1:d29ca2a: 
1:fc00993:     public abstract TransactionId getTransactionId();
1:d29ca2a: 
1:8bf987b:     public abstract Logger getLog();
1:d29ca2a:     
1:d29ca2a:     public boolean isPrepared() {
1:f812e34:         return getState() == PREPARED_STATE;
1:d29ca2a:     }
1:60624c4:     
1:d4d9ba8:     public int size() {
1:d4d9ba8:         return synchronizations.size();
1:d29ca2a:     }
1:e1389a6:     
1:e1389a6:     protected void waitPostCommitDone(FutureTask<?> postCommitTask) throws XAException, IOException {
1:e1389a6:         try {
1:e1389a6:             postCommitTask.get();
1:e1389a6:         } catch (InterruptedException e) {
1:e1389a6:             throw new InterruptedIOException(e.toString());
1:e1389a6:         } catch (ExecutionException e) {
1:e1389a6:             Throwable t = e.getCause();
1:e1389a6:             if (t instanceof XAException) {
1:e1389a6:                 throw (XAException) t;
1:e1389a6:             } else if (t instanceof IOException) {
1:e1389a6:                 throw (IOException) t;
1:e1389a6:             } else {
1:e1389a6:                 throw new XAException(e.toString());
1:e1389a6:             }
1:e1389a6:         }    
1:e1389a6:     }
1:e1389a6:     
1:27262c8:     protected void doPreCommit() throws XAException {
1:27262c8:         try {
1:27262c8:             fireBeforeCommit();
1:27262c8:         } catch (Throwable e) {
1:27262c8:             // I guess this could happen. Post commit task failed
1:27262c8:             // to execute properly.
1:27262c8:             getLog().warn("PRE COMMIT FAILED: ", e);
1:fe9d99e:             XAException xae = newXAException("PRE COMMIT FAILED", XAException.XAER_RMERR);
1:27262c8:             xae.initCause(e);
1:d29ca2a:             throw xae;
1:e1389a6:         }
1:27262c8:     }
4:e1389a6: 
1:e1389a6:     protected void doPostCommit() throws XAException {
1:e1389a6:         try {
1:8461158:             setCommitted(true);
1:e1389a6:             fireAfterCommit();
1:e1389a6:         } catch (Throwable e) {
1:e1389a6:             // I guess this could happen. Post commit task failed
1:e1389a6:             // to execute properly.
1:e1389a6:             getLog().warn("POST COMMIT FAILED: ", e);
1:fe9d99e:             XAException xae = newXAException("POST COMMIT FAILED",  XAException.XAER_RMERR);
1:e1389a6:             xae.initCause(e);
1:e1389a6:             throw xae;
1:e1389a6:         }
1:e1389a6:     }
1:fe9d99e: 
1:fe9d99e:     public static XAException newXAException(String s, int errorCode) {
1:fe9d99e:         XAException xaException = new XAException(s + " " + TransactionContext.xaErrorCodeMarker + errorCode);
1:fe9d99e:         xaException.errorCode = errorCode;
1:fe9d99e:         return xaException;
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     public void setRollbackOnly(Throwable cause) {
1:7077d2b:         if (!isRollbackOnly()) {
1:fe9d99e:             getLog().trace("setting rollback only, cause:", cause);
1:7077d2b:             rollackOnlyCause = cause;
1:fe9d99e:         }
1:fe9d99e:     }
1:fe9d99e: 
1:fe9d99e:     public boolean isRollbackOnly() {
1:7077d2b:         return rollackOnlyCause != null;
1:fe9d99e:     }
1:fe9d99e: 
1:27262c8: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:7077d2b
/////////////////////////////////////////////////////////////////////////
1:     Throwable rollackOnlyCause = null;
/////////////////////////////////////////////////////////////////////////
1:         if (isRollbackOnly()) {
1:             transactionRolledBackException.initCause(rollackOnlyCause);
/////////////////////////////////////////////////////////////////////////
1:         if (!isRollbackOnly()) {
1:             rollackOnlyCause = cause;
1:         return rollackOnlyCause != null;
commit:fe9d99e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TransactionRolledBackException;
1: 
1: import org.apache.activemq.TransactionContext;
/////////////////////////////////////////////////////////////////////////
0:     boolean rollbackOnly = false;
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = newXAException("Prepare cannot be called now", XAException.XAER_PROTO);
0:         if (rollbackOnly) {
1:             XAException xae = newXAException("COMMIT FAILED: Transaction marked rollback only", XAException.XA_RBROLLBACK);
1:             TransactionRolledBackException transactionRolledBackException = new TransactionRolledBackException(xae.getLocalizedMessage());
1:             xae.initCause(transactionRolledBackException);
1:             throw xae;
1:         }
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = newXAException("PRE COMMIT FAILED", XAException.XAER_RMERR);
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = newXAException("POST COMMIT FAILED",  XAException.XAER_RMERR);
1: 
1:     public static XAException newXAException(String s, int errorCode) {
1:         XAException xaException = new XAException(s + " " + TransactionContext.xaErrorCodeMarker + errorCode);
1:         xaException.errorCode = errorCode;
1:         return xaException;
1:     }
1: 
1:     public void setRollbackOnly(Throwable cause) {
0:         if (!rollbackOnly) {
1:             getLog().trace("setting rollback only, cause:", cause);
0:             rollbackOnly = true;
1:         }
1:     }
1: 
1:     public boolean isRollbackOnly() {
0:         return rollbackOnly;
1:     }
1: 
commit:340728f
/////////////////////////////////////////////////////////////////////////
1:         synchronized (synchronizations) {
1:             synchronizations.add(r);
1:         }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:8461158
/////////////////////////////////////////////////////////////////////////
1:     boolean committed = false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCommitted() {
1:         return committed;
1:     }
1: 
1:     public void setCommitted(boolean committed) {
1:         this.committed = committed;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             setCommitted(true);
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:d453b8d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     	Collections.reverse(synchronizations);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private ArrayList<Synchronization> synchronizations = new ArrayList<Synchronization>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:             Synchronization s = iter.next();
1:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:             Synchronization s = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public static final byte START_STATE = 0; // can go to: 1,2,3
1:     public static final byte IN_USE_STATE = 1; // can go to: 2,3
1:     public static final byte PREPARED_STATE = 2; // can go to: 3
1:     public static final byte FINISHED_STATE = 3;
/////////////////////////////////////////////////////////////////////////
1:     public abstract void commit(boolean onePhase) throws XAException, IOException;
1:     public abstract void rollback() throws XAException, IOException;
1:     public abstract int prepare() throws XAException, IOException;
1:     public abstract TransactionId getTransactionId();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Keeps track of all the actions the need to be done when a transaction does a
1:  * commit or rollback.
1:  * 
0:     static final public byte START_STATE = 0; // can go to: 1,2,3
0:     static final public byte IN_USE_STATE = 1; // can go to: 2,3
0:     static final public byte PREPARED_STATE = 2; // can go to: 3
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         case START_STATE:
1:         case IN_USE_STATE:
1:             break;
1:         default:
0:             XAException xae = new XAException("Prepare cannot be called now.");
0:             xae.errorCode = XAException.XAER_PROTO;
1:             throw xae;
0:         // // Run the prePrepareTasks
0:         // for (Iterator iter = prePrepareTasks.iterator(); iter.hasNext();) {
0:         // Callback r = (Callback) iter.next();
0:         // r.execute();
0:         // }
0:             Synchronization s = (Synchronization)iter.next();
0:             Synchronization s = (Synchronization)iter.next();
0:         return super.toString() + "[synchronizations=" + synchronizations + "]";
1: 
1: 
1: 
1:         return getState() == PREPARED_STATE;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void prePrepare() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected void fireAfterCommit() throws Exception {
1:     public void fireAfterRollback() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transaction;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import javax.transaction.xa.XAException;
1: 
1: import org.apache.activemq.command.TransactionId;
1: 
1: /**
0:  * Keeps track of all the actions the need to be done when
0:  * a transaction does a commit or rollback.
1:  *
0:  * @version $Revision: 1.5 $
1:  */
1: public abstract class Transaction {
1: 
0:     static final public byte START_STATE = 0;      // can go to: 1,2,3
0:     static final public byte IN_USE_STATE = 1;     // can go to: 2,3
0:     static final public byte PREPARED_STATE = 2;   // can go to: 3
0:     static final public byte FINISHED_STATE = 3;
1: 
0:     private ArrayList synchronizations = new ArrayList();
1:     private byte state = START_STATE;
1: 
1:     public byte getState() {
1:         return state;
1:     }
1: 
1:     public void setState(byte state) {
1:         this.state = state;
1:     }
1: 
1:     public void addSynchronization(Synchronization r) {
0:         synchronizations.add(r);
1:         if (state == START_STATE) {
1:             state = IN_USE_STATE;
1:         }
1:     }
1: 
0:     public void prePrepare() throws Throwable {
1: 
1:         // Is it ok to call prepare now given the state of the
1:         // transaction?
1:         switch (state) {
0:             case START_STATE:
0:             case IN_USE_STATE:
0:                 break;
0:             default:
0:                 XAException xae = new XAException("Prepare cannot be called now.");
0:                 xae.errorCode = XAException.XAER_PROTO;
1:                 throw xae;
1:         }
1: 
0: //        // Run the prePrepareTasks
0: //        for (Iterator iter = prePrepareTasks.iterator(); iter.hasNext();) {
0: //            Callback r = (Callback) iter.next();
0: //            r.execute();
0: //        }
1:     }
1: 
0:     protected void fireAfterCommit() throws Throwable {
0:         for (Iterator iter = synchronizations.iterator(); iter.hasNext();) {
0:             Synchronization s = (Synchronization) iter.next();
1:             s.afterCommit();
1:         }
1:     }
1: 
0:     public void fireAfterRollback() throws Throwable {
0:         for (Iterator iter = synchronizations.iterator(); iter.hasNext();) {
0:             Synchronization s = (Synchronization) iter.next();
1:             s.afterRollback();
1:         }
1:     }
1: 
1:     public String toString() {
0:         return super.toString() + "[synchronizations=" + synchronizations +"]";
1:     }
1: 
0:     abstract public void commit(boolean onePhase) throws XAException, IOException;
0:     abstract public void rollback() throws XAException, IOException;
0:     abstract public int prepare() throws XAException, IOException;
1:     
0:     abstract public TransactionId getTransactionId();
1: 
1:     public boolean isPrepared() {
0:         return getState()==PREPARED_STATE;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:66e8011
/////////////////////////////////////////////////////////////////////////
1:         return "Local-" + getTransactionId() + "[synchronizations=" + synchronizations + "]";
commit:60624c4
/////////////////////////////////////////////////////////////////////////
1:     public Synchronization findMatching(Synchronization r) {
1:         int existing = synchronizations.indexOf(r);
1:         if (existing != -1) {
1:             return synchronizations.get(existing);
1:         }
1:         return null;
1:     }
1: 
commit:e1389a6
/////////////////////////////////////////////////////////////////////////
1: import java.io.InterruptedIOException;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.FutureTask;
0: import org.apache.commons.logging.Log;
/////////////////////////////////////////////////////////////////////////
0: public abstract class Transaction implements Callable {
/////////////////////////////////////////////////////////////////////////
0:     protected FutureTask<?> postCommitTask = new FutureTask(this);
1:     
/////////////////////////////////////////////////////////////////////////
0:     public abstract Log getLog();
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void waitPostCommitDone(FutureTask<?> postCommitTask) throws XAException, IOException {
1:         try {
1:             postCommitTask.get();
1:         } catch (InterruptedException e) {
1:             throw new InterruptedIOException(e.toString());
1:         } catch (ExecutionException e) {
1:             Throwable t = e.getCause();
1:             if (t instanceof XAException) {
1:                 throw (XAException) t;
1:             } else if (t instanceof IOException) {
1:                 throw (IOException) t;
1:             } else {
1:                 throw new XAException(e.toString());
1:             }
1:         }    
1:     }
1: 
1:     protected void doPostCommit() throws XAException {
1:         try {
1:             fireAfterCommit();
1:         } catch (Throwable e) {
1:             // I guess this could happen. Post commit task failed
1:             // to execute properly.
1:             getLog().warn("POST COMMIT FAILED: ", e);
0:             XAException xae = new XAException("POST COMMIT FAILED");
0:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1:     
1:     public Object call() throws Exception {
1:         doPostCommit();
1:         return null;
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
/////////////////////////////////////////////////////////////////////////
1:     public abstract Logger getLog();
author:Robert Davies
-------------------------------------------------------------------------------
commit:27262c8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public abstract class Transaction {
1:     private final ArrayList<Synchronization> synchronizations = new ArrayList<Synchronization>();
1:     protected FutureTask<?> preCommitTask = new FutureTask<Object>(new Callable<Object>() {
1:         public Object call() throws Exception {
1:             doPreCommit();
1:             return null;
1:         }   
1:     });
1:     protected FutureTask<?> postCommitTask = new FutureTask<Object>(new Callable<Object>() {
1:         public Object call() throws Exception {
0:             doPostCommit();
1:             return null;
1:         }   
1:     });
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void fireBeforeCommit() throws Exception {
1:         for (Iterator<Synchronization> iter = synchronizations.iterator(); iter.hasNext();) {
1:             Synchronization s = iter.next();
1:             s.beforeCommit();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void doPreCommit() throws XAException {
1:         try {
1:             fireBeforeCommit();
1:         } catch (Throwable e) {
1:             // I guess this could happen. Post commit task failed
1:             // to execute properly.
1:             getLog().warn("PRE COMMIT FAILED: ", e);
0:             XAException xae = new XAException("PRE COMMIT FAILED");
0:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
0:             throw xae;
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
commit:d4d9ba8
/////////////////////////////////////////////////////////////////////////
0:     
1:     public int size() {
1:         return synchronizations.size();
1:     }
commit:25a252f
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void removeSynchronization(Synchronization r) {
1:         synchronizations.remove(r);
0:     }
============================================================================