1:5739c6c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5739c6c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5739c6c:  *
1:5739c6c:  * Unless required by applicable law or agreed to in writing, software
1:5739c6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5739c6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5739c6c:  * See the License for the specific language governing permissions and
1:5739c6c:  * limitations under the License.
9:5739c6c:  */
1:5739c6c: package org.apache.activemq.transport.udp;
1:72b382d: 
1:f451ad0: import java.io.DataInputStream;
1:f451ad0: import java.io.DataOutputStream;
1:f451ad0: import java.io.IOException;
1:f451ad0: import java.net.SocketAddress;
1:f451ad0: import java.nio.ByteBuffer;
1:f451ad0: import java.nio.channels.DatagramChannel;
1:f451ad0: 
1:5739c6c: import org.apache.activemq.command.Command;
1:5739c6c: import org.apache.activemq.command.Endpoint;
1:5739c6c: import org.apache.activemq.command.LastPartialCommand;
1:5739c6c: import org.apache.activemq.command.PartialCommand;
1:5739c6c: import org.apache.activemq.openwire.BooleanStream;
1:5739c6c: import org.apache.activemq.openwire.OpenWireFormat;
1:f3ef1a9: import org.apache.activemq.transport.reliable.ReplayBuffer;
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:72b382d: 
1:5739c6c: /**
1:5739c6c:  * A strategy for reading datagrams and de-fragmenting them together.
1:0bbc0ac:  * 
1:5739c6c:  * 
1:5739c6c:  */
1:8d589ec: public class CommandDatagramChannel extends CommandChannelSupport {
30:5739c6c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CommandDatagramChannel.class);
1:5739c6c: 
1:5739c6c:     private DatagramChannel channel;
1:5739c6c:     private ByteBufferPool bufferPool;
1:f3ef1a9: 
1:5739c6c:     // reading
1:5739c6c:     private Object readLock = new Object();
1:5739c6c:     private ByteBuffer readBuffer;
1:5739c6c: 
1:5739c6c:     // writing
1:5739c6c:     private Object writeLock = new Object();
1:5739c6c:     private int defaultMarshalBufferSize = 64 * 1024;
1:8978ac0:     private volatile int receiveCounter;
1:364337b: 
1:74a7a8b:     public CommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller,
1:f812e34:                                   DatagramChannel channel, ByteBufferPool bufferPool) {
1:8d589ec:         super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller);
1:5739c6c:         this.channel = channel;
1:5739c6c:         this.bufferPool = bufferPool;
1:364337b:     }
1:72b382d: 
1:5739c6c:     public void start() throws Exception {
1:5739c6c:         bufferPool.setDefaultSize(datagramSize);
1:5739c6c:         bufferPool.start();
1:5739c6c:         readBuffer = bufferPool.borrowBuffer();
1:72b382d:     }
1:72b382d: 
1:5739c6c:     public void stop() throws Exception {
1:5739c6c:         bufferPool.stop();
1:72b382d:     }
1:72b382d: 
1:5739c6c:     public Command read() throws IOException {
1:5739c6c:         Command answer = null;
1:72b382d:         Endpoint from = null;
1:5739c6c:         synchronized (readLock) {
1:5739c6c:             while (true) {
1:5739c6c:                 readBuffer.clear();
1:5739c6c:                 SocketAddress address = channel.receive(readBuffer);
1:72b382d: 
1:5739c6c:                 readBuffer.flip();
1:72b382d: 
1:5739c6c:                 if (readBuffer.limit() == 0) {
1:5739c6c:                     continue;
18:5739c6c:                 }
1:8978ac0:                 
1:8978ac0:                 receiveCounter++;
1:72b382d:                 from = headerMarshaller.createEndpoint(readBuffer, address);
1:f3ef1a9: 
1:5739c6c:                 int remaining = readBuffer.remaining();
1:5739c6c:                 byte[] data = new byte[remaining];
1:5739c6c:                 readBuffer.get(data);
1:5739c6c: 
1:5739c6c:                 // TODO could use a DataInput implementation that talks direct
1:5739c6c:                 // to
1:5739c6c:                 // the ByteBuffer to avoid object allocation and unnecessary
1:5739c6c:                 // buffering?
1:5739c6c:                 DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(data));
1:f812e34:                 answer = (Command)wireFormat.unmarshal(dataIn);
1:5739c6c:                 break;
1:5739c6c:             }
1:5739c6c:         }
2:5739c6c:         if (answer != null) {
1:72b382d:             answer.setFrom(from);
1:f3ef1a9: 
1:fc00993:             if (LOG.isDebugEnabled()) {
1:fc00993:                 LOG.debug("Channel: " + name + " received from: " + from + " about to process: " + answer);
1:5739c6c:             }
1:5739c6c:         }
1:5739c6c:         return answer;
1:72b382d:     }
1:8d589ec: 
1:364337b:     public void write(Command command, SocketAddress address) throws IOException {
1:5739c6c:         synchronized (writeLock) {
1:72b382d: 
1:5739c6c:             ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(defaultMarshalBufferSize);
2:5739c6c:             wireFormat.marshal(command, new DataOutputStream(largeBuffer));
1:5739c6c:             byte[] data = largeBuffer.toByteArray();
1:5739c6c:             int size = data.length;
1:5739c6c: 
1:8d589ec:             ByteBuffer writeBuffer = bufferPool.borrowBuffer();
2:5739c6c:             writeBuffer.clear();
2:5739c6c:             headerMarshaller.writeHeader(command, writeBuffer);
1:5739c6c: 
1:72b382d:             if (size > writeBuffer.remaining()) {
1:5739c6c:                 // lets split the command up into chunks
1:5739c6c:                 int offset = 0;
1:5739c6c:                 boolean lastFragment = false;
1:933eb2f:                 int length = data.length;
1:933eb2f:                 for (int fragment = 0; !lastFragment; fragment++) {
1:5739c6c:                     // write the header
1:5739c6c:                     if (fragment > 0) {
1:f3ef1a9:                         writeBuffer = bufferPool.borrowBuffer();
1:5739c6c:                         writeBuffer.clear();
1:5739c6c:                         headerMarshaller.writeHeader(command, writeBuffer);
1:5739c6c:                     }
1:5739c6c: 
1:5739c6c:                     int chunkSize = writeBuffer.remaining();
1:5739c6c: 
1:5739c6c:                     // we need to remove the amount of overhead to write the
1:5739c6c:                     // partial command
1:5739c6c: 
1:5739c6c:                     // lets write the flags in there
1:5739c6c:                     BooleanStream bs = null;
1:5739c6c:                     if (wireFormat.isTightEncodingEnabled()) {
1:5739c6c:                         bs = new BooleanStream();
1:5739c6c:                         bs.writeBoolean(true); // the partial data byte[] is
1:5739c6c:                         // never null
1:5739c6c:                     }
1:5739c6c: 
1:5739c6c:                     // lets remove the header of the partial command
1:5739c6c:                     // which is the byte for the type and an int for the size of
1:5739c6c:                     // the byte[]
1:f812e34: 
1:f812e34:                     // data type + the command ID + size of the partial data
1:f812e34:                     chunkSize -= 1 + 4 + 4;
1:5739c6c: 
1:5739c6c:                     // the boolean flags
1:5739c6c:                     if (bs != null) {
1:5739c6c:                         chunkSize -= bs.marshalledSize();
1:f812e34:                     } else {
1:5739c6c:                         chunkSize -= 1;
1:5739c6c:                     }
1:5739c6c: 
1:5739c6c:                     if (!wireFormat.isSizePrefixDisabled()) {
1:5739c6c:                         // lets write the size of the command buffer
1:5739c6c:                         writeBuffer.putInt(chunkSize);
1:5739c6c:                         chunkSize -= 4;
1:5739c6c:                     }
1:5739c6c: 
1:5739c6c:                     lastFragment = offset + chunkSize >= length;
1:5739c6c:                     if (chunkSize + offset > length) {
1:5739c6c:                         chunkSize = length - offset;
1:5739c6c:                     }
1:5739c6c: 
1:f3ef1a9:                     if (lastFragment) {
1:f3ef1a9:                         writeBuffer.put(LastPartialCommand.DATA_STRUCTURE_TYPE);
1:f812e34:                     } else {
1:f3ef1a9:                         writeBuffer.put(PartialCommand.DATA_STRUCTURE_TYPE);
1:f3ef1a9:                     }
1:5739c6c: 
1:5739c6c:                     if (bs != null) {
1:5739c6c:                         bs.marshal(writeBuffer);
1:f3ef1a9:                     }
1:5739c6c: 
1:72b382d:                     int commandId = command.getCommandId();
1:72b382d:                     if (fragment > 0) {
1:364337b:                         commandId = sequenceGenerator.getNextSequenceId();
1:72b382d:                     }
1:72b382d:                     writeBuffer.putInt(commandId);
1:5739c6c:                     if (bs == null) {
1:f812e34:                         writeBuffer.put((byte)1);
1:5739c6c:                     }
1:5739c6c: 
1:5739c6c:                     // size of byte array
1:5739c6c:                     writeBuffer.putInt(chunkSize);
1:5739c6c: 
1:5739c6c:                     // now the data
1:5739c6c:                     writeBuffer.put(data, offset, chunkSize);
1:5739c6c: 
1:5739c6c:                     offset += chunkSize;
1:f3ef1a9:                     sendWriteBuffer(commandId, address, writeBuffer, false);
1:5739c6c:                 }
1:f812e34:             } else {
1:f3ef1a9:                 writeBuffer.put(data);
1:f3ef1a9:                 sendWriteBuffer(command.getCommandId(), address, writeBuffer, false);
1:f3ef1a9:             }
1:72b382d:         }
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     // Properties
1:5739c6c:     // -------------------------------------------------------------------------
1:8d589ec: 
1:5739c6c:     public ByteBufferPool getBufferPool() {
1:5739c6c:         return bufferPool;
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     /**
1:5739c6c:      * Sets the implementation of the byte buffer pool to use
1:5739c6c:      */
1:5739c6c:     public void setBufferPool(ByteBufferPool bufferPool) {
1:5739c6c:         this.bufferPool = bufferPool;
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     // Implementation methods
1:5739c6c:     // -------------------------------------------------------------------------
1:74a7a8b:     protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer, boolean redelivery) throws IOException {
1:f3ef1a9:         // lets put the datagram into the replay buffer first to prevent timing
1:f3ef1a9:         // issues
1:f3ef1a9:         ReplayBuffer bufferCache = getReplayBuffer();
1:f3ef1a9:         if (bufferCache != null && !redelivery) {
1:f3ef1a9:             bufferCache.addBuffer(commandId, writeBuffer);
1:f3ef1a9:         }
1:f812e34: 
1:5739c6c:         writeBuffer.flip();
1:f3ef1a9: 
1:fc00993:         if (LOG.isDebugEnabled()) {
1:74a7a8b:             String text = redelivery ? "REDELIVERING" : "sending";
1:fc00993:             LOG.debug("Channel: " + name + " " + text + " datagram: " + commandId + " to: " + address);
1:5739c6c:         }
1:5739c6c:         channel.send(writeBuffer, address);
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void sendBuffer(int commandId, Object buffer) throws IOException {
1:f3ef1a9:         if (buffer != null) {
1:f812e34:             ByteBuffer writeBuffer = (ByteBuffer)buffer;
1:f3ef1a9:             sendWriteBuffer(commandId, getReplayAddress(), writeBuffer, true);
1:f812e34:         } else {
1:fc00993:             if (LOG.isWarnEnabled()) {
1:fc00993:                 LOG.warn("Request for buffer: " + commandId + " is no longer present");
1:f3ef1a9:             }
1:f3ef1a9:         }
1:f3ef1a9:     }
1:8d589ec: 
1:8978ac0:     public int getReceiveCounter() {
1:8978ac0:         return receiveCounter;
1:8978ac0:     }
1:8978ac0: 
1:5739c6c: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1:     private volatile int receiveCounter;
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 receiveCounter++;
/////////////////////////////////////////////////////////////////////////
1:     public int getReceiveCounter() {
1:         return receiveCounter;
1:     }
1: 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:                 int length = data.length;
1:                 for (int fragment = 0; !lastFragment; fragment++) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CommandDatagramChannel.class);
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Channel: " + name + " received from: " + from + " about to process: " + answer);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Channel: " + name + " " + text + " datagram: " + commandId + " to: " + address);
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isWarnEnabled()) {
1:                 LOG.warn("Request for buffer: " + commandId + " is no longer present");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:     public CommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller,
/////////////////////////////////////////////////////////////////////////
1:     protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer, boolean redelivery) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:             String text = redelivery ? "REDELIVERING" : "sending";
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:                                   SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller,
1:                                   DatagramChannel channel, ByteBufferPool bufferPool) {
/////////////////////////////////////////////////////////////////////////
1:                 answer = (Command)wireFormat.unmarshal(dataIn);
/////////////////////////////////////////////////////////////////////////
1: 
1:                     // data type + the command ID + size of the partial data
1:                     chunkSize -= 1 + 4 + 4;
1:                     } else {
/////////////////////////////////////////////////////////////////////////
1:                     } else {
/////////////////////////////////////////////////////////////////////////
1:                         writeBuffer.put((byte)1);
/////////////////////////////////////////////////////////////////////////
1:             } else {
/////////////////////////////////////////////////////////////////////////
0:     protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer,
0:                                    boolean redelivery) throws IOException {
1: 
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer writeBuffer = (ByteBuffer)buffer;
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.SocketAddress;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.DatagramChannel;
1: 
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CommandDatagramChannel.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.reliable.ReplayBuffer;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     public CommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize,
0:             SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, DatagramChannel channel,
0:             ByteBufferPool bufferPool) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         writeBuffer = bufferPool.borrowBuffer();
/////////////////////////////////////////////////////////////////////////
1:                     if (lastFragment) {
1:                         writeBuffer.put(LastPartialCommand.DATA_STRUCTURE_TYPE);
1:                     }
0:                     else {
1:                         writeBuffer.put(PartialCommand.DATA_STRUCTURE_TYPE);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                     sendWriteBuffer(commandId, address, writeBuffer, false);
0:             else {
1:                 writeBuffer.put(data);
1:                 sendWriteBuffer(command.getCommandId(), address, writeBuffer, false);
1:             }
/////////////////////////////////////////////////////////////////////////
0:     protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer, boolean redelivery)
0:             throws IOException {
1:         // lets put the datagram into the replay buffer first to prevent timing
1:         // issues
1:         ReplayBuffer bufferCache = getReplayBuffer();
1:         if (bufferCache != null && !redelivery) {
1:             bufferCache.addBuffer(commandId, writeBuffer);
1:         }
1:         
0:             String text = (redelivery) ? "REDELIVERING" : "sending";
0:             log.debug("Channel: " + name + " " + text + " datagram: " + commandId + " to: " + address);
1:         if (buffer != null) {
0:             ByteBuffer writeBuffer = (ByteBuffer) buffer;
1:             sendWriteBuffer(commandId, getReplayAddress(), writeBuffer, true);
1:         }
0:         else {
0:             if (log.isWarnEnabled()) {
0:                 log.warn("Request for buffer: " + commandId + " is no longer present");
1:             }
1:         }
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class CommandDatagramChannel extends CommandChannelSupport {
0:     public CommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, DatagramChannel channel, ByteBufferPool bufferPool) {
1:         super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller);
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer writeBuffer = bufferPool.borrowBuffer();
/////////////////////////////////////////////////////////////////////////
0:                     sendWriteBuffer(address, writeBuffer, commandId);
/////////////////////////////////////////////////////////////////////////
0:             sendWriteBuffer(address, writeBuffer, command.getCommandId());
/////////////////////////////////////////////////////////////////////////
0:     protected void sendWriteBuffer(SocketAddress address, ByteBuffer writeBuffer, int commandId) throws IOException {
1:         
0:         // now lets put the buffer back into the replay buffer
1:     public void sendBuffer(int commandId, Object buffer) throws IOException {
0:         ByteBuffer writeBuffer = (ByteBuffer) buffer;
0:         sendWriteBuffer(getReplayAddress(), writeBuffer, commandId);
1:     }
1: 
1:     
commit:364337b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IntSequenceGenerator;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final IntSequenceGenerator sequenceGenerator;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         this.sequenceGenerator = transport.getSequenceGenerator();
0:         if (sequenceGenerator == null) {
0:             throw new IllegalArgumentException("No sequenceGenerator on the given transport: " + transport);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void write(Command command, SocketAddress address) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:                         commandId = sequenceGenerator.getNextSequenceId();
/////////////////////////////////////////////////////////////////////////
0:                     sendWriteBuffer(address, commandId);
0:                 command.setCommandId(sequenceGenerator.getNextSequenceId());
/////////////////////////////////////////////////////////////////////////
0:             sendWriteBuffer(address, command.getCommandId());
/////////////////////////////////////////////////////////////////////////
0:     protected void sendWriteBuffer(SocketAddress address, int commandId) throws IOException {
0:             log.debug("Channel: " + name + " sending datagram: " + commandId + " to: " + address);
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.Future;
1: 
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     private final UdpTransport transport;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public CommandDatagramChannel(UdpTransport transport, DatagramChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize,
0:         this.transport = transport;
0:         this.name = transport.toString();
/////////////////////////////////////////////////////////////////////////
1:         Endpoint from = null;
1:                 from = headerMarshaller.createEndpoint(readBuffer, address);
1:  
/////////////////////////////////////////////////////////////////////////
1:             answer.setFrom(from);
1:             
0:                 log.debug("Channel: " + name + " received from: " + from + " about to process: " + answer);
0:     public void write(Command command, SocketAddress address, Map requestMap, Future future) throws IOException {
0:             if (!command.isWireFormatInfo() && command.getCommandId() == 0) {
0:                 command.setCommandId(transport.getNextCommandId());
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (size > writeBuffer.remaining()) {
/////////////////////////////////////////////////////////////////////////
1:                     int commandId = command.getCommandId();
1:                     if (fragment > 0) {
0:                         commandId = transport.getNextCommandId();
1:                     }
1:                     writeBuffer.putInt(commandId);
/////////////////////////////////////////////////////////////////////////
0:                 command = new LastPartialCommand(command.isResponseRequired());
0:                 command.setCommandId(transport.getNextCommandId());
1:                 
/////////////////////////////////////////////////////////////////////////
0:             if (command.isResponseRequired()) {
0:                 requestMap.put(new Integer(command.getCommandId()), future);
1:             }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
0:     public SocketAddress getTargetAddress() {
0:         return targetAddress;
1:     }
1: 
0:     public void setTargetAddress(SocketAddress targetAddress) {
0:         this.targetAddress = targetAddress;
1:     }
1: 
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.apache.activemq.Service;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.Endpoint;
1: import org.apache.activemq.command.LastPartialCommand;
1: import org.apache.activemq.command.PartialCommand;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.net.SocketAddress;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.DatagramChannel;
1: 
1: /**
1:  * A strategy for reading datagrams and de-fragmenting them together.
1:  * 
0:  * @version $Revision$
1:  */
0: public class CommandDatagramChannel implements CommandChannel {
1: 
0:     private static final Log log = LogFactory.getLog(CommandDatagramChannel.class);
1: 
0:     private final String name;
1:     private DatagramChannel channel;
0:     private OpenWireFormat wireFormat;
1:     private ByteBufferPool bufferPool;
0:     private int datagramSize = 4 * 1024;
0:     private SocketAddress targetAddress;
0:     private DatagramHeaderMarshaller headerMarshaller;
1: 
1:     // reading
1:     private Object readLock = new Object();
1:     private ByteBuffer readBuffer;
1: 
1:     // writing
1:     private Object writeLock = new Object();
0:     private ByteBuffer writeBuffer;
1:     private int defaultMarshalBufferSize = 64 * 1024;
1: 
0:     public CommandDatagramChannel(String name, DatagramChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize,
0:             SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller) {
0:         this.name = name;
1:         this.channel = channel;
0:         this.wireFormat = wireFormat;
1:         this.bufferPool = bufferPool;
0:         this.datagramSize = datagramSize;
0:         this.targetAddress = targetAddress;
0:         this.headerMarshaller = headerMarshaller;
1:     }
1: 
0:     public String toString() {
0:         return "CommandChannel#" + name;
1:     }
1: 
1:     public void start() throws Exception {
1:         bufferPool.setDefaultSize(datagramSize);
1:         bufferPool.start();
1:         readBuffer = bufferPool.borrowBuffer();
0:         writeBuffer = bufferPool.borrowBuffer();
1:     }
1: 
1:     public void stop() throws Exception {
1:         bufferPool.stop();
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#read()
1:      */
1:     public Command read() throws IOException {
1:         Command answer = null;
1:         synchronized (readLock) {
1:             while (true) {
1:                 readBuffer.clear();
1:                 SocketAddress address = channel.receive(readBuffer);
1: 
0:                 /*
0:                 if (address == null) {
0:                     System.out.println("No address on packet: " + readBuffer);
0:                     // continue;
1:                 }
1:                 */
1: 
1:                 readBuffer.flip();
1: 
1:                 if (readBuffer.limit() == 0) {
0:                     //System.out.println("Empty packet!");
1:                     continue;
1:                 }
1: 
0:                 //log.debug("buffer: " + readBuffer + " has remaining: " + readBuffer.remaining());
1: 
0:                 Endpoint from = headerMarshaller.createEndpoint(readBuffer, address);
1: 
1:                 int remaining = readBuffer.remaining();
1:                 byte[] data = new byte[remaining];
1:                 readBuffer.get(data);
1: 
1:                 // TODO could use a DataInput implementation that talks direct
1:                 // to
1:                 // the ByteBuffer to avoid object allocation and unnecessary
1:                 // buffering?
1:                 DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(data));
0:                 answer = (Command) wireFormat.unmarshal(dataIn);
1:                 if (answer != null) {
0:                     answer.setFrom(from);
1:                 }
1:                 break;
1:             }
1:         }
1:         if (answer != null) {
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Channel: " + name + " about to process: " + answer);
1:             }
1:         }
1:         return answer;
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#write(org.apache.activemq.command.Command)
1:      */
0:     public void write(Command command) throws IOException {
0:         write(command, targetAddress);
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#write(org.apache.activemq.command.Command, java.net.SocketAddress)
1:      */
0:     public void write(Command command, SocketAddress address) throws IOException {
1:         synchronized (writeLock) {
1: 
1:             ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(defaultMarshalBufferSize);
1:             wireFormat.marshal(command, new DataOutputStream(largeBuffer));
1:             byte[] data = largeBuffer.toByteArray();
1:             int size = data.length;
1: 
1:             writeBuffer.clear();
1:             headerMarshaller.writeHeader(command, writeBuffer);
1: 
0:             if (size >= writeBuffer.remaining()) {
1:                 // lets split the command up into chunks
1:                 int offset = 0;
1:                 boolean lastFragment = false;
0:                 for (int fragment = 0, length = data.length; !lastFragment; fragment++) {
1:                     // write the header
1:                     if (fragment > 0) {
1:                         writeBuffer.clear();
1:                         headerMarshaller.writeHeader(command, writeBuffer);
1:                     }
1: 
1:                     int chunkSize = writeBuffer.remaining();
1: 
1:                     // we need to remove the amount of overhead to write the
1:                     // partial command
1: 
1:                     // lets write the flags in there
1:                     BooleanStream bs = null;
1:                     if (wireFormat.isTightEncodingEnabled()) {
1:                         bs = new BooleanStream();
1:                         bs.writeBoolean(true); // the partial data byte[] is
1:                         // never null
1:                     }
1: 
1:                     // lets remove the header of the partial command
1:                     // which is the byte for the type and an int for the size of
1:                     // the byte[]
0:                     chunkSize -= 1 // the data type
0:                     + 4 // the command ID
0:                     + 4; // the size of the partial data
1: 
1:                     // the boolean flags
1:                     if (bs != null) {
1:                         chunkSize -= bs.marshalledSize();
1:                     }
0:                     else {
1:                         chunkSize -= 1;
1:                     }
1: 
1:                     if (!wireFormat.isSizePrefixDisabled()) {
1:                         // lets write the size of the command buffer
1:                         writeBuffer.putInt(chunkSize);
1:                         chunkSize -= 4;
1:                     }
1: 
1:                     lastFragment = offset + chunkSize >= length;
1:                     if (chunkSize + offset > length) {
1:                         chunkSize = length - offset;
1:                     }
1: 
0:                     writeBuffer.put(PartialCommand.DATA_STRUCTURE_TYPE);
1: 
1:                     if (bs != null) {
1:                         bs.marshal(writeBuffer);
1:                     }
1: 
0:                     writeBuffer.putInt(command.getCommandId());
1:                     if (bs == null) {
0:                         writeBuffer.put((byte) 1);
1:                     }
1: 
1:                     // size of byte array
1:                     writeBuffer.putInt(chunkSize);
1: 
1:                     // now the data
1:                     writeBuffer.put(data, offset, chunkSize);
1: 
1:                     offset += chunkSize;
0:                     sendWriteBuffer(address);
1:                 }
1: 
0:                 // now lets write the last partial command
0:                 command = new LastPartialCommand(command);
0:                 largeBuffer = new ByteArrayOutputStream(defaultMarshalBufferSize);
1:                 wireFormat.marshal(command, new DataOutputStream(largeBuffer));
0:                 data = largeBuffer.toByteArray();
1: 
1:                 writeBuffer.clear();
1:                 headerMarshaller.writeHeader(command, writeBuffer);
1:             }
1: 
0:             writeBuffer.put(data);
1: 
0:             sendWriteBuffer(address);
1:         }
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#getDatagramSize()
1:      */
0:     public int getDatagramSize() {
0:         return datagramSize;
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#setDatagramSize(int)
1:      */
0:     public void setDatagramSize(int datagramSize) {
0:         this.datagramSize = datagramSize;
1:     }
1: 
1:     public ByteBufferPool getBufferPool() {
1:         return bufferPool;
1:     }
1: 
1:     /**
1:      * Sets the implementation of the byte buffer pool to use
1:      */
1:     public void setBufferPool(ByteBufferPool bufferPool) {
1:         this.bufferPool = bufferPool;
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#getHeaderMarshaller()
1:      */
0:     public DatagramHeaderMarshaller getHeaderMarshaller() {
0:         return headerMarshaller;
1:     }
1: 
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.udp.CommandChannel#setHeaderMarshaller(org.apache.activemq.transport.udp.DatagramHeaderMarshaller)
1:      */
0:     public void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller) {
0:         this.headerMarshaller = headerMarshaller;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected void sendWriteBuffer(SocketAddress address) throws IOException {
1:         writeBuffer.flip();
1: 
0:         if (log.isDebugEnabled()) {
0:             log.debug("Channel: " + name + " sending datagram to: " + address);
1:         }
1:         channel.send(writeBuffer, address);
1:     }
1: 
1: }
============================================================================