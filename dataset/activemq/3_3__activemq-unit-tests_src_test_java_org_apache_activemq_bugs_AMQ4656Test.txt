1:ccde93a: /**
1:ccde93a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ccde93a:  * contributor license agreements.  See the NOTICE file distributed with
1:ccde93a:  * this work for additional information regarding copyright ownership.
1:ccde93a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ccde93a:  * (the "License"); you may not use this file except in compliance with
1:ccde93a:  * the License.  You may obtain a copy of the License at
1:ccde93a:  *
1:ccde93a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ccde93a:  *
1:ccde93a:  * Unless required by applicable law or agreed to in writing, software
1:ccde93a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ccde93a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ccde93a:  * See the License for the specific language governing permissions and
1:ccde93a:  * limitations under the License.
1:ccde93a:  */
1:ccde93a: package org.apache.activemq.bugs;
3:ccde93a: 
1:ccde93a: import static org.junit.Assert.assertEquals;
1:ccde93a: import static org.junit.Assert.assertNotNull;
1:709b64b: import static org.junit.Assert.assertTrue;
1:709b64b: 
1:709b64b: import java.util.Arrays;
1:709b64b: import java.util.concurrent.TimeUnit;
1:ccde93a: 
1:ccde93a: import javax.jms.Connection;
1:ccde93a: import javax.jms.Destination;
1:ccde93a: import javax.jms.MessageConsumer;
1:ccde93a: import javax.jms.MessageProducer;
1:ccde93a: import javax.jms.Session;
1:ccde93a: import javax.jms.Topic;
1:ccde93a: import javax.management.ObjectName;
1:ccde93a: 
1:ccde93a: import org.apache.activemq.ActiveMQConnectionFactory;
1:ccde93a: import org.apache.activemq.broker.BrokerService;
1:709b64b: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:ccde93a: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:6aaf859: import org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy;
1:6aaf859: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
1:6aaf859: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6aaf859: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6aaf859: import org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy;
1:709b64b: import org.apache.activemq.util.Wait;
1:ccde93a: import org.junit.After;
1:ccde93a: import org.junit.Before;
1:ccde93a: import org.junit.Test;
1:6aaf859: import org.junit.runner.RunWith;
1:6aaf859: import org.junit.runners.Parameterized;
1:ccde93a: import org.slf4j.Logger;
1:ccde93a: import org.slf4j.LoggerFactory;
1:ccde93a: 
1:6aaf859: @RunWith(value = Parameterized.class)
1:ccde93a: public class AMQ4656Test {
1:ccde93a: 
1:ccde93a:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4656Test.class);
1:ccde93a:     private static BrokerService brokerService;
1:ccde93a:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:ccde93a: 
1:ccde93a:     private String connectionUri;
1:ccde93a: 
1:6aaf859:     @Parameterized.Parameter
1:6aaf859:     public PendingDurableSubscriberMessageStoragePolicy pendingDurableSubPolicy;
1:6aaf859: 
1:6aaf859:     @Parameterized.Parameters(name="{0}")
1:6aaf859:     public static Iterable<Object[]> getTestParameters() {
1:6aaf859:         return Arrays.asList(new Object[][]{{new FilePendingDurableSubscriberMessageStoragePolicy()},{new StorePendingDurableSubscriberMessageStoragePolicy()}});
1:6aaf859:     }
1:6aaf859: 
1:ccde93a:     @Before
1:ccde93a:     public void setUp() throws Exception {
1:ccde93a:         brokerService = new BrokerService();
1:6aaf859:         PolicyMap policyMap = new PolicyMap();
1:6aaf859:         PolicyEntry defaultEntry = new PolicyEntry();
1:6aaf859:         defaultEntry.setPendingDurableSubscriberPolicy(pendingDurableSubPolicy);
1:6aaf859:         policyMap.setDefaultEntry(defaultEntry);
1:6aaf859:         brokerService.setDestinationPolicy(policyMap);
1:ccde93a:         brokerService.setPersistent(false);
1:ccde93a:         brokerService.setUseJmx(true);
1:ccde93a:         brokerService.setDeleteAllMessagesOnStartup(true);
1:ccde93a:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:ccde93a:         brokerService.start();
1:ccde93a:         brokerService.waitUntilStarted();
1:ccde93a:     }
1:ccde93a: 
1:ccde93a:     @After
1:ccde93a:     public void tearDown() throws Exception {
1:ccde93a:         brokerService.stop();
1:ccde93a:         brokerService.waitUntilStopped();
1:ccde93a:     }
1:ccde93a: 
1:709b64b:     @Test(timeout = 90000)
1:ccde93a:     public void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {
1:ccde93a: 
1:ccde93a:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:ccde93a: 
1:ccde93a:         Connection connection = connectionFactory.createConnection();
1:ccde93a:         connection.setClientID(getClass().getName());
1:ccde93a:         connection.start();
1:ccde93a: 
1:ccde93a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccde93a:         Destination destination = session.createTopic("DurableTopic");
1:ccde93a: 
1:ccde93a:         MessageConsumer consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1:ccde93a: 
1:709b64b:         final BrokerViewMBean brokerView = brokerService.getAdminView();
1:709b64b:         ObjectName subName = brokerView.getDurableTopicSubscribers()[0];
1:ccde93a: 
1:709b64b:         final DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:ccde93a:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:ccde93a: 
1:ccde93a:         assertEquals(0, sub.getEnqueueCounter());
1:ccde93a:         assertEquals(0, sub.getDequeueCounter());
1:ccde93a:         assertEquals(0, sub.getPendingQueueSize());
1:ccde93a:         assertEquals(0, sub.getDispatchedCounter());
2:ccde93a:         assertEquals(0, sub.getDispatchedQueueSize());
1:ccde93a: 
1:ccde93a:         consumer.close();
1:ccde93a: 
1:ccde93a:         MessageProducer producer = session.createProducer(destination);
1:ccde93a:         for (int i = 0; i < 20; i++) {
1:ccde93a:             producer.send(session.createMessage());
1:ccde93a:         }
1:ccde93a:         producer.close();
1:ccde93a: 
1:ccde93a:         consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1:ccde93a: 
1:709b64b:         assertTrue("Should be an Active Subscription", Wait.waitFor(new Wait.Condition() {
1:709b64b: 
1:709b64b:             @Override
1:709b64b:             public boolean isSatisified() throws Exception {
1:709b64b:                 return brokerView.getDurableTopicSubscribers().length == 1;
1:709b64b:             }
1:709b64b:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1:709b64b: 
1:709b64b:         assertTrue("Should all be dispatched", Wait.waitFor(new Wait.Condition() {
1:709b64b: 
1:709b64b:             @Override
1:709b64b:             public boolean isSatisified() throws Exception {
1:709b64b:                 return sub.getDispatchedCounter() == 20;
1:709b64b:             }
1:709b64b:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1:ccde93a: 
2:ccde93a:         assertEquals(20, sub.getEnqueueCounter());
1:ccde93a:         assertEquals(0, sub.getDequeueCounter());
1:ccde93a:         assertEquals(0, sub.getPendingQueueSize());
2:ccde93a:         assertEquals(20, sub.getDispatchedCounter());
1:ccde93a:         assertEquals(20, sub.getDispatchedQueueSize());
1:ccde93a: 
1:ccde93a:         LOG.info("Pending Queue Size with no receives: {}", sub.getPendingQueueSize());
1:ccde93a: 
1:ccde93a:         assertNotNull(consumer.receive(1000));
1:ccde93a:         assertNotNull(consumer.receive(1000));
1:ccde93a: 
1:ccde93a:         consumer.close();
1:ccde93a: 
1:ccde93a:         LOG.info("Pending Queue Size with two receives: {}", sub.getPendingQueueSize());
1:709b64b: 
1:709b64b:         assertTrue("Should be an Active Subscription", Wait.waitFor(new Wait.Condition() {
1:ccde93a: 
1:709b64b:             @Override
1:709b64b:             public boolean isSatisified() throws Exception {
1:709b64b:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:709b64b:             }
1:709b64b:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1:709b64b: 
1:709b64b:         final DurableSubscriptionViewMBean inactive = (DurableSubscriptionViewMBean)
1:709b64b:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:709b64b: 
1:709b64b:         assertTrue("Should all be dispatched", Wait.waitFor(new Wait.Condition() {
1:709b64b: 
1:709b64b:             @Override
1:709b64b:             public boolean isSatisified() throws Exception {
1:709b64b:                 return inactive.getDequeueCounter() == 2;
1:709b64b:             }
1:709b64b:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1:709b64b: 
1:709b64b:         assertEquals(20, inactive.getEnqueueCounter());
1:709b64b:         assertEquals(2, inactive.getDequeueCounter());
1:709b64b:         assertEquals(18, inactive.getPendingQueueSize());
1:709b64b:         assertEquals(20, inactive.getDispatchedCounter());
1:709b64b:         assertEquals(0, inactive.getDispatchedQueueSize());
1:ccde93a: 
1:ccde93a:         session.close();
1:ccde93a:         connection.close();
1:ccde93a:     }
1:ccde93a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:709b64b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:         final BrokerViewMBean brokerView = brokerService.getAdminView();
1:         ObjectName subName = brokerView.getDurableTopicSubscribers()[0];
1:         final DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should be an Active Subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getDurableTopicSubscribers().length == 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1: 
1:         assertTrue("Should all be dispatched", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return sub.getDispatchedCounter() == 20;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should be an Active Subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1: 
1:         final DurableSubscriptionViewMBean inactive = (DurableSubscriptionViewMBean)
1:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertTrue("Should all be dispatched", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return inactive.getDequeueCounter() == 2;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));
1: 
1:         assertEquals(20, inactive.getEnqueueCounter());
1:         assertEquals(2, inactive.getDequeueCounter());
1:         assertEquals(18, inactive.getPendingQueueSize());
1:         assertEquals(20, inactive.getDispatchedCounter());
1:         assertEquals(0, inactive.getDispatchedQueueSize());
author:gtully
-------------------------------------------------------------------------------
commit:6aaf859
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:     @Parameterized.Parameter
1:     public PendingDurableSubscriberMessageStoragePolicy pendingDurableSubPolicy;
1: 
1:     @Parameterized.Parameters(name="{0}")
1:     public static Iterable<Object[]> getTestParameters() {
1:         return Arrays.asList(new Object[][]{{new FilePendingDurableSubscriberMessageStoragePolicy()},{new StorePendingDurableSubscriberMessageStoragePolicy()}});
1:     }
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setPendingDurableSubscriberPolicy(pendingDurableSubPolicy);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(policyMap);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ccde93a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4656Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4656Test.class);
1:     private static BrokerService brokerService;
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
0:     @Test
1:     public void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(getClass().getName());
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createTopic("DurableTopic");
1: 
1:         MessageConsumer consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1: 
0:         BrokerView view = brokerService.getAdminView();
0:         view.getDurableTopicSubscribers();
1: 
0:         ObjectName subName = view.getDurableTopicSubscribers()[0];
1: 
0:         DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertEquals(0, sub.getEnqueueCounter());
1:         assertEquals(0, sub.getDequeueCounter());
1:         assertEquals(0, sub.getPendingQueueSize());
1:         assertEquals(0, sub.getDispatchedCounter());
1:         assertEquals(0, sub.getDispatchedQueueSize());
1: 
1:         consumer.close();
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < 20; i++) {
1:             producer.send(session.createMessage());
1:         }
1:         producer.close();
1: 
1:         consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1: 
0:         Thread.sleep(1000);
1: 
1:         assertEquals(20, sub.getEnqueueCounter());
1:         assertEquals(0, sub.getDequeueCounter());
1:         assertEquals(0, sub.getPendingQueueSize());
1:         assertEquals(20, sub.getDispatchedCounter());
1:         assertEquals(20, sub.getDispatchedQueueSize());
1: 
1:         LOG.info("Pending Queue Size with no receives: {}", sub.getPendingQueueSize());
1: 
1:         assertNotNull(consumer.receive(1000));
1:         assertNotNull(consumer.receive(1000));
1: 
1:         consumer.close();
1: 
0:         Thread.sleep(2000);
1: 
1:         LOG.info("Pending Queue Size with two receives: {}", sub.getPendingQueueSize());
1: 
1:         assertEquals(20, sub.getEnqueueCounter());
0:         assertEquals(2, sub.getDequeueCounter());
0:         assertEquals(18, sub.getPendingQueueSize());
1:         assertEquals(20, sub.getDispatchedCounter());
1:         assertEquals(0, sub.getDispatchedQueueSize());
1: 
1:         session.close();
1:         connection.close();
1:     }
1: }
============================================================================