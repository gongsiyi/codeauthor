1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
13:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: 
1:bd0ad68: import org.apache.tools.ant.BuildException;
1:bd0ad68: import org.apache.tools.ant.Project;
1:bd0ad68: import org.apache.tools.ant.Task;
1:bd0ad68: import org.codehaus.jam.JamService;
1:bd0ad68: import org.codehaus.jam.JamServiceFactory;
1:bd0ad68: import org.codehaus.jam.JamServiceParams;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CGeneratorTask extends Task {
1:540dd5c: 
1:540dd5c:     int version = 2;
1:540dd5c:     File source = new File(".");
1:540dd5c:     File target = new File(".");
1:540dd5c: 
1:bd0ad68:     public static void main(String[] args) {
1:540dd5c: 
1:bd0ad68:         Project project = new Project();
1:bd0ad68:         project.init();
1:540dd5c:         CGeneratorTask generator = new CGeneratorTask();
1:540dd5c:         generator.setProject(project);
1:bd0ad68: 
1:540dd5c:         if (args.length > 0) {
1:540dd5c:             generator.version = Integer.parseInt(args[0]);
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         if (args.length > 1) {
1:540dd5c:             generator.source = new File(args[1]);
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         if (args.length > 2) {
1:540dd5c:             generator.target = new File(args[2]);
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         generator.execute();
1:540dd5c:     }
1:540dd5c: 
1:bd0ad68:     public void execute() throws BuildException {
1:bd0ad68:         try {
1:540dd5c: 
1:540dd5c:             String sourceDir = source + "/src/main/java";
1:540dd5c: 
1:bd0ad68:             System.out.println("Parsing source files in: " + sourceDir);
1:bd0ad68: 
1:bd0ad68:             JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();
1:540dd5c:             JamServiceParams params = jamServiceFactory.createServiceParams();
1:540dd5c:             File[] dirs = new File[] {
1:540dd5c:                 new File(sourceDir)
1:540dd5c:             };
1:bd0ad68:             params.includeSourcePattern(dirs, "**/*.java");
1:bd0ad68:             JamService jam = jamServiceFactory.createService(params);
1:bd0ad68: 
1:bd0ad68:             {
1:540dd5c:                 CHeadersGenerator script = new CHeadersGenerator();
1:540dd5c:                 script.setJam(jam);
1:540dd5c:                 script.setTargetDir(target + "/src/libopenwire");
1:540dd5c:                 script.setOpenwireVersion(version);
1:540dd5c:                 script.run();
11:bd0ad68:             }
1:bd0ad68:             {
1:540dd5c:                 CSourcesGenerator script = new CSourcesGenerator();
1:540dd5c:                 script.setJam(jam);
1:540dd5c:                 script.setTargetDir(target + "/src/libopenwire");
1:540dd5c:                 script.setOpenwireVersion(version);
1:540dd5c:                 script.run();
1:bd0ad68:             }
1:540dd5c: 
1:bd0ad68:         } catch (Exception e) {
1:540dd5c:             throw new BuildException(e);
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     public int getVersion() {
1:540dd5c:         return version;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setVersion(int version) {
1:540dd5c:         this.version = version;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public File getSource() {
1:540dd5c:         return source;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setSource(File basedir) {
1:540dd5c:         this.source = basedir;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public File getTarget() {
1:540dd5c:         return target;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setTarget(File target) {
1:540dd5c:         this.target = target;
1:540dd5c:     }
1:bd0ad68: 
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1:     int version = 2;
1:     File source = new File(".");
1:     File target = new File(".");
1: 
1: 
1:         CGeneratorTask generator = new CGeneratorTask();
1:         generator.setProject(project);
1:         if (args.length > 0) {
1:             generator.version = Integer.parseInt(args[0]);
1:         }
1: 
1:         if (args.length > 1) {
1:             generator.source = new File(args[1]);
1:         }
1: 
1:         if (args.length > 2) {
1:             generator.target = new File(args[2]);
1:         }
1: 
1:         generator.execute();
1:     }
1: 
1: 
1:             String sourceDir = source + "/src/main/java";
1: 
1:             JamServiceParams params = jamServiceFactory.createServiceParams();
1:             File[] dirs = new File[] {
1:                 new File(sourceDir)
1:             };
1:                 CHeadersGenerator script = new CHeadersGenerator();
1:                 script.setJam(jam);
1:                 script.setTargetDir(target + "/src/libopenwire");
1:                 script.setOpenwireVersion(version);
1:                 script.run();
1:                 CSourcesGenerator script = new CSourcesGenerator();
1:                 script.setJam(jam);
1:                 script.setTargetDir(target + "/src/libopenwire");
1:                 script.setOpenwireVersion(version);
1:                 script.run();
1: 
1:             throw new BuildException(e);
1:     public int getVersion() {
1:         return version;
1:     }
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1:     public File getSource() {
1:         return source;
1:     }
1:     public void setSource(File basedir) {
1:         this.source = basedir;
1:     }
1:     public File getTarget() {
1:         return target;
1:     }
1:     public void setTarget(File target) {
1:         this.target = target;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.Task;
1: import org.codehaus.jam.JamService;
1: import org.codehaus.jam.JamServiceFactory;
1: import org.codehaus.jam.JamServiceParams;
1: 
1: /**
1:  * 
0:  * @version $Revision: 384826 $
1:  */
1: public class CGeneratorTask extends Task {
1: 	
0: 	int version = 2;
0: 	File source = new File(".");
0: 	File target = new File(".");
1: 	
1:     public static void main(String[] args) {
1:     	
1:         Project project = new Project();
1:         project.init();
0:     	CGeneratorTask generator = new CGeneratorTask();
0:     	generator.setProject(project);
1:     	
0:     	if( args.length > 0 ) {
0:     		generator.version = Integer.parseInt(args[0]);
1:     	}
1: 
0:     	if( args.length > 1 ) {
0:     		generator.source = new File(args[1]);
1:     	}  
1:     	
0:     	if( args.length > 2 ) {
0:     		generator.target = new File(args[2]);
1:     	}    	
1:     	
0:     	generator.execute();
1: 	}
1:     
1:     public void execute() throws BuildException {
1:         try {
1:         	
0:         	String sourceDir = source+"/src/main/java";
1:         	
1:             System.out.println("Parsing source files in: " + sourceDir);
1: 
1:             JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();
0:             JamServiceParams params = jamServiceFactory.createServiceParams();            
0:             File[] dirs = new File[]{new File(sourceDir)};            
1:             params.includeSourcePattern(dirs, "**/*.java");
1:             JamService jam = jamServiceFactory.createService(params);
1: 
1:             {
0:             	CHeadersGenerator script = new CHeadersGenerator();
0: 	        	script.setJam(jam);
0: 	        	script.setTargetDir(target+"/src/libopenwire");
0: 	        	script.setOpenwireVersion(version);
0: 	        	script.run();
1:             }
1:             {
0:             	CSourcesGenerator script = new CSourcesGenerator();
0: 	        	script.setJam(jam);
0: 	        	script.setTargetDir(target+"/src/libopenwire");
0: 	        	script.setOpenwireVersion(version);
0: 	        	script.run();
1:             }
1:             
1:             
1:             
1:         } catch (Exception e) {
0:         	throw new BuildException(e);
1:         }
1:     }
1: 
0: 	public int getVersion() {
0: 		return version;
1: 	}
1: 
0: 	public void setVersion(int version) {
0: 		this.version = version;
1: 	}
1: 
0: 	public File getSource() {
0: 		return source;
1: 	}
1: 
0: 	public void setSource(File basedir) {
0: 		this.source = basedir;
1: 	}
1: 
0: 	public File getTarget() {
0: 		return target;
1: 	}
1: 
0: 	public void setTarget(File target) {
0: 		this.target = target;
1: 	}
1: 
1: }
============================================================================