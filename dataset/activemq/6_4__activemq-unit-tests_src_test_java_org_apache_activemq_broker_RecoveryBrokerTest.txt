2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:2728ccb: 
1:2728ccb: import java.util.ArrayList;
1:2728ccb: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:2728ccb: 
1:d29ca2a: import junit.framework.Test;
1:2728ccb: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.LocalTransactionId;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:2728ccb: import org.apache.activemq.command.MessageId;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:f4012c5: import org.apache.activemq.command.XATransactionId;
1:2728ccb: 
1:2728ccb: /**
1:d29ca2a:  * Used to simulate the recovery that occurs when a broker shuts down.
1:b0c2a40:  * 
1:2728ccb:  * 
1:2728ccb:  */
1:d29ca2a: public class RecoveryBrokerTest extends BrokerRestartTestSupport {
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Used to verify that after a broker restart durable subscriptions that use
1:230a86c:      * wild cards are still wild card subscription after broker restart.
1:230a86c:      * 
1:230a86c:      * @throws Exception
1:230a86c:      */
1:2a153b0:     //need to revist!!!
1:2a153b0:     public void XtestWildCardSubscriptionPreservedOnRestart() throws Exception {
1:2728ccb:         ActiveMQDestination dest1 = new ActiveMQTopic("TEST.A");
1:2728ccb:         ActiveMQDestination dest2 = new ActiveMQTopic("TEST.B");
1:2728ccb:         ActiveMQDestination dest3 = new ActiveMQTopic("TEST.C");
1:2728ccb:         ActiveMQDestination wildDest = new ActiveMQTopic("TEST.>");
1:230a86c: 
1:230a86c:         ArrayList<MessageId> sentBeforeRestart = new ArrayList<MessageId>();
1:230a86c:         ArrayList<MessageId> sentBeforeCreateConsumer = new ArrayList<MessageId>();
1:230a86c:         ArrayList<MessageId> sentAfterCreateConsumer = new ArrayList<MessageId>();
1:230a86c: 
1:2728ccb:         // Setup a first connection
1:2728ccb:         {
1:230a86c:             StubConnection connection1 = createConnection();
1:230a86c:             ConnectionInfo connectionInfo1 = createConnectionInfo();
1:230a86c:             connectionInfo1.setClientId("A");
1:230a86c:             SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:230a86c:             ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
1:230a86c:             connection1.send(connectionInfo1);
1:230a86c:             connection1.send(sessionInfo1);
1:230a86c:             connection1.send(producerInfo1);
1:230a86c: 
1:230a86c:             // Create the durable subscription.
1:230a86c:             ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, wildDest);
1:230a86c:             consumerInfo1.setSubscriptionName("test");
1:230a86c:             consumerInfo1.setPrefetchSize(100);
1:230a86c:             connection1.send(consumerInfo1);
1:230a86c: 
1:230a86c:             // Close the subscription.
1:230a86c:             connection1.send(closeConsumerInfo(consumerInfo1));
1:230a86c: 
1:230a86c:             // Send the messages
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m = createMessage(producerInfo1, dest1, DeliveryMode.PERSISTENT);
1:230a86c:                 connection1.send(m);
1:230a86c:                 sentBeforeRestart.add(m.getMessageId());
1:230a86c:             }
1:230a86c:             connection1.request(closeConnectionInfo(connectionInfo1));
1:230a86c:             connection1.stop();
1:2728ccb:         }
1:230a86c: 
1:2728ccb:         // Restart the broker.
1:2728ccb:         restartBroker();
1:230a86c: 
1:2728ccb:         // Get a connection to the new broker.
1:2728ccb:         {
1:230a86c:             StubConnection connection2 = createConnection();
1:230a86c:             ConnectionInfo connectionInfo2 = createConnectionInfo();
1:230a86c:             connectionInfo2.setClientId("A");
1:230a86c:             SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:230a86c:             connection2.send(connectionInfo2);
1:230a86c:             connection2.send(sessionInfo2);
1:230a86c: 
1:230a86c:             ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:230a86c:             connection2.send(producerInfo2);
1:230a86c: 
1:230a86c:             // Send messages before the durable subscription is re-activated.
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m = createMessage(producerInfo2, dest2, DeliveryMode.PERSISTENT);
1:230a86c:                 connection2.send(m);
1:230a86c:                 sentBeforeCreateConsumer.add(m.getMessageId());
1:230a86c:             }
1:230a86c: 
1:230a86c:             // Re-open the subscription.
1:230a86c:             ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, wildDest);
1:230a86c:             consumerInfo2.setSubscriptionName("test");
1:230a86c:             consumerInfo2.setPrefetchSize(100);
1:230a86c:             connection2.send(consumerInfo2);
1:230a86c: 
1:230a86c:             // Send messages after the subscription is activated.
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m = createMessage(producerInfo2, dest3, DeliveryMode.PERSISTENT);
1:230a86c:                 connection2.send(m);
1:230a86c:                 sentAfterCreateConsumer.add(m.getMessageId());
1:230a86c:             }
1:230a86c: 
1:230a86c:             // We should get the recovered messages...
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m2 = receiveMessage(connection2);
1:230a86c:                 assertNotNull("Recovered message missing: " + i, m2);
1:230a86c:                 assertEquals(sentBeforeRestart.get(i), m2.getMessageId());
1:230a86c:             }
1:230a86c: 
1:230a86c:             // We should get get the messages that were sent before the sub was
1:230a86c:             // reactivated.
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m2 = receiveMessage(connection2);
1:230a86c:                 assertNotNull("Before activated message missing: " + i, m2);
1:230a86c:                 assertEquals(sentBeforeCreateConsumer.get(i), m2.getMessageId());
1:230a86c:             }
1:230a86c: 
1:230a86c:             // We should get get the messages that were sent after the sub was
1:230a86c:             // reactivated.
1:230a86c:             for (int i = 0; i < 4; i++) {
1:230a86c:                 Message m2 = receiveMessage(connection2);
1:230a86c:                 assertNotNull("After activated message missing: " + i, m2);
1:230a86c:                 assertEquals("" + i, sentAfterCreateConsumer.get(i), m2.getMessageId());
1:230a86c:             }
1:230a86c: 
1:230a86c:             assertNoMessagesLeft(connection2);
1:2728ccb:         }
1:230a86c: 
1:2728ccb:     }
1:230a86c: 
1:7f5213b:     public void testConsumedQueuePersistentMessagesLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:230a86c: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message message = createMessage(producerInfo, destination);
1:d29ca2a:             message.setPersistent(true);
1:d29ca2a:             connection.send(message);
1:2728ccb:         }
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:230a86c: 
1:d29ca2a:         // The we should get the messages.
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message m2 = receiveMessage(connection);
2:d29ca2a:             assertNotNull(m2);
1:230a86c:         }
1:230a86c: 
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:230a86c: 
1:d29ca2a:         // No messages should be delivered.
1:d29ca2a:         Message m = receiveMessage(connection);
1:230a86c:         assertNull(m);
1:230a86c:     }
1:230a86c: 
1:7f5213b:     public void testQueuePersistentUncommitedMessagesLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:230a86c: 
1:d29ca2a:         // Begin the transaction.
1:d29ca2a:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:d29ca2a:         connection.send(createBeginTransaction(connectionInfo, txid));
1:230a86c: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message message = createMessage(producerInfo, destination);
1:d29ca2a:             message.setPersistent(true);
1:d29ca2a:             message.setTransactionId(txid);
1:d29ca2a:             connection.send(message);
1:2728ccb:         }
1:230a86c: 
1:d29ca2a:         // Don't commit
1:230a86c: 
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:2728ccb: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:2728ccb: 
1:d29ca2a:         // No messages should be delivered.
1:d29ca2a:         Message m = receiveMessage(connection);
1:230a86c:         assertNull(m);
1:2728ccb:     }
1:2728ccb:     
1:7f5213b:     public void testTopicDurableConsumerHoldsPersistentMessageAfterRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQTopic("TEST");
1:230a86c: 
1:d29ca2a:         // Setup a first connection
1:2728ccb:         StubConnection connection1 = createConnection();
1:2728ccb:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:2728ccb:         connectionInfo1.setClientId("A");
1:2728ccb:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:2728ccb:         ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
1:2728ccb:         connection1.send(connectionInfo1);
1:2728ccb:         connection1.send(sessionInfo1);
1:2728ccb:         connection1.send(producerInfo1);
1:2728ccb: 
1:2728ccb:         // Create the durable subscription.
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:2728ccb:         consumerInfo1.setSubscriptionName("test");
1:2728ccb:         consumerInfo1.setPrefetchSize(100);
1:2728ccb:         connection1.send(consumerInfo1);
1:2728ccb: 
1:2728ccb:         // Close the subscription.
1:2728ccb:         connection1.send(closeConsumerInfo(consumerInfo1));
1:2728ccb: 
1:2728ccb:         // Send the messages
1:d29ca2a:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:d29ca2a:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:d29ca2a:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:d29ca2a:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:2728ccb:         connection1.request(closeConnectionInfo(connectionInfo1));
1:d29ca2a:         // Restart the broker.
1:d29ca2a:         restartBroker();
1:2728ccb: 
1:d29ca2a:         // Get a connection to the new broker.
1:2728ccb:         StubConnection connection2 = createConnection();
1:2728ccb:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:2728ccb:         connectionInfo2.setClientId("A");
1:2728ccb:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:2728ccb:         connection2.send(connectionInfo2);
1:2728ccb:         connection2.send(sessionInfo2);
1:2728ccb: 
1:2728ccb:         // Re-open the subscription.
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:2728ccb:         consumerInfo2.setSubscriptionName("test");
1:2728ccb:         consumerInfo2.setPrefetchSize(100);
1:2728ccb:         connection2.send(consumerInfo2);
1:2728ccb: 
1:d29ca2a:         // The we should get the messages.
1:230a86c:         for (int i = 0; i < 4; i++) {
3:2728ccb:             Message m2 = receiveMessage(connection2);
1:53c4e12:             assertNotNull("Did not get message "+i, m2);
1:2728ccb:         }
1:2728ccb:         assertNoMessagesLeft(connection2);
1:2728ccb:     }
1:2728ccb: 
1:7f5213b:     public void testQueuePersistentMessagesNotLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:d29ca2a:         Message message = createMessage(producerInfo, destination);
1:d29ca2a:         message.setPersistent(true);
1:d29ca2a:         connection.send(message);
1:825447a:         connection.request(closeConnectionInfo(connectionInfo));
1:230a86c: 
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:2728ccb: 
1:d29ca2a:         // Message should have been dropped due to broker restart.
1:d29ca2a:         Message m = receiveMessage(connection);
1:8704338:         assertNotNull("Should have received a message by now!", m);
1:230a86c:         assertEquals(m.getMessageId(), message.getMessageId());
1:2728ccb:     }
1:230a86c: 
1:7f5213b:     public void testQueueNonPersistentMessagesLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:d29ca2a:         Message message = createMessage(producerInfo, destination);
1:d29ca2a:         message.setPersistent(false);
1:d29ca2a:         connection.send(message);
1:230a86c: 
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:2728ccb: 
1:d29ca2a:         // Message should have been dropped due to broker restart.
1:d29ca2a:         assertNoMessagesLeft(connection);
7:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testQueuePersistentCommitedMessagesNotLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:230a86c: 
1:d29ca2a:         // Begin the transaction.
1:d29ca2a:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:d29ca2a:         connection.send(createBeginTransaction(connectionInfo, txid));
1:230a86c: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message message = createMessage(producerInfo, destination);
1:d29ca2a:             message.setPersistent(true);
1:d29ca2a:             message.setTransactionId(txid);
1:d29ca2a:             connection.send(message);
1:d29ca2a:         }
1:2728ccb: 
1:d29ca2a:         // Commit
1:d29ca2a:         connection.send(createCommitTransaction1Phase(connectionInfo, txid));
1:825447a:         connection.request(closeConnectionInfo(connectionInfo));
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
56:d29ca2a: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message m = receiveMessage(connection);
1:d29ca2a:             assertNotNull(m);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNoMessagesLeft(connection);
1:d29ca2a:     }
1:230a86c:     
1:d29ca2a: 
1:7f5213b:     public void testQueuePersistentCommitedAcksNotLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:230a86c: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message message = createMessage(producerInfo, destination);
1:d29ca2a:             message.setPersistent(true);
1:d29ca2a:             connection.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:d29ca2a: 
1:d29ca2a:         // Begin the transaction.
1:d29ca2a:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:d29ca2a:         connection.send(createBeginTransaction(connectionInfo, txid));
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message m = receiveMessage(connection);
1:d29ca2a:             assertNotNull(m);
1:d29ca2a:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:d29ca2a:             ack.setTransactionId(txid);
1:d29ca2a:             connection.send(ack);
1:230a86c:         }
1:d29ca2a:         // Commit
1:d29ca2a:         connection.send(createCommitTransaction1Phase(connectionInfo, txid));
1:825447a:         connection.request(closeConnectionInfo(connectionInfo));
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:230a86c: 
1:d29ca2a:         // No messages should be delivered.
1:d29ca2a:         Message m = receiveMessage(connection);
1:230a86c:         assertNull(m);
1:230a86c:     }
1:230a86c:     
1:d29ca2a:     
1:d29ca2a: 
1:7f5213b:     public void testQueuePersistentUncommitedAcksLostOnRestart() throws Exception {
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:230a86c:         // Setup the producer and send the message.
1:d29ca2a:         StubConnection connection = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:230a86c:         connection.send(producerInfo);
1:230a86c: 
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message message = createMessage(producerInfo, destination);
1:d29ca2a:             message.setPersistent(true);
1:d29ca2a:             connection.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:d29ca2a: 
1:d29ca2a:         // Begin the transaction.
1:d29ca2a:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:d29ca2a:         connection.send(createBeginTransaction(connectionInfo, txid));
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message m = receiveMessage(connection);
1:d29ca2a:             assertNotNull(m);
1:d29ca2a:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:d29ca2a:             ack.setTransactionId(txid);
1:d29ca2a:             connection.send(ack);
1:d29ca2a:         }
1:d29ca2a:         // Don't commit
1:d29ca2a: 
1:d29ca2a:         // restart the broker.
1:d29ca2a:         restartBroker();
1:d29ca2a: 
1:d29ca2a:         // Setup the consumer and receive the message.
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         connectionInfo = createConnectionInfo();
1:d29ca2a:         sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:         connection.send(connectionInfo);
1:d29ca2a:         connection.send(sessionInfo);
1:d29ca2a:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:         connection.send(consumerInfo);
1:d29ca2a: 
1:d29ca2a:         // All messages should be re-delivered.
1:230a86c:         for (int i = 0; i < 4; i++) {
1:d29ca2a:             Message m = receiveMessage(connection);
1:d29ca2a:             assertNotNull(m);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNoMessagesLeft(connection);
1:d29ca2a:     }
1:d29ca2a:     
1:f4012c5:     public void testQueuePersistentXAUncommitedAcksLostOnRestart() throws Exception {
1:f4012c5:         int NUMBER = 100;
1:f4012c5:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:d29ca2a: 
7:d29ca2a:         // Setup the producer and send the message.
1:f4012c5:         StubConnection connection = createConnection();
1:f4012c5:         ConnectionInfo connectionInfo = createConnectionInfo();
1:f4012c5:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:f4012c5:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:f4012c5:         connection.send(connectionInfo);
1:f4012c5:         connection.send(sessionInfo);
7:d29ca2a:         connection.send(producerInfo);
1:d29ca2a: 
1:f4012c5:         for (int i = 0; i < NUMBER; i++) {
1:f4012c5:             Message message = createMessage(producerInfo, destination);
1:f4012c5:             message.setPersistent(true);
1:f4012c5:             connection.send(message);
1:d29ca2a:         }
1:d29ca2a: 
1:f4012c5:         // Setup the consumer and receive the message.
1:f4012c5:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:f4012c5:         connection.send(consumerInfo);
1:d29ca2a: 
1:f4012c5:         // Begin the transaction.
1:f4012c5:         XATransactionId txid = createXATransaction(sessionInfo);
1:f4012c5:         connection.send(createBeginTransaction(connectionInfo, txid));
1:101e711:         Message m = null;
1:f4012c5:         for (int i = 0; i < NUMBER; i++) {
1:101e711:             m = receiveMessage(connection);
1:d29ca2a:             assertNotNull(m);
1:d29ca2a:         }
1:101e711:         MessageAck ack = createAck(consumerInfo, m, NUMBER, MessageAck.STANDARD_ACK_TYPE);
1:101e711:         ack.setTransactionId(txid);
1:101e711:         connection.send(ack);
1:101e711: 
1:f4012c5:         // Don't commit
1:d29ca2a: 
1:f4012c5:         // restart the broker.
1:f4012c5:         restartBroker();
1:d29ca2a: 
1:f4012c5:         // Setup the consumer and receive the message.
1:f4012c5:         connection = createConnection();
1:f4012c5:         connectionInfo = createConnectionInfo();
1:f4012c5:         sessionInfo = createSessionInfo(connectionInfo);
1:f4012c5:         connection.send(connectionInfo);
1:f4012c5:         connection.send(sessionInfo);
1:f4012c5:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:f4012c5:         connection.send(consumerInfo);
1:d29ca2a: 
1:f4012c5:         // All messages should be re-delivered.
1:f4012c5:         for (int i = 0; i < NUMBER; i++) {
1:101e711:             m = receiveMessage(connection);
2:f4012c5:             assertNotNull(m);
1:d29ca2a:         }
1:d29ca2a: 
1:f4012c5:         assertNoMessagesLeft(connection);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(RecoveryBrokerTest.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:101e711
/////////////////////////////////////////////////////////////////////////
1:         Message m = null;
1:             m = receiveMessage(connection);
1:         MessageAck ack = createAck(consumerInfo, m, NUMBER, MessageAck.STANDARD_ACK_TYPE);
1:         ack.setTransactionId(txid);
1:         connection.send(ack);
1: 
/////////////////////////////////////////////////////////////////////////
1:             m = receiveMessage(connection);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:53c4e12
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("Did not get message "+i, m2);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Used to verify that after a broker restart durable subscriptions that use
1:      * wild cards are still wild card subscription after broker restart.
1:      * 
1:      * @throws Exception
1:      */
1: 
1:         ArrayList<MessageId> sentBeforeRestart = new ArrayList<MessageId>();
1:         ArrayList<MessageId> sentBeforeCreateConsumer = new ArrayList<MessageId>();
1:         ArrayList<MessageId> sentAfterCreateConsumer = new ArrayList<MessageId>();
1: 
1:             StubConnection connection1 = createConnection();
1:             ConnectionInfo connectionInfo1 = createConnectionInfo();
1:             connectionInfo1.setClientId("A");
1:             SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:             ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
1:             connection1.send(connectionInfo1);
1:             connection1.send(sessionInfo1);
1:             connection1.send(producerInfo1);
1: 
1:             // Create the durable subscription.
1:             ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, wildDest);
1:             consumerInfo1.setSubscriptionName("test");
1:             consumerInfo1.setPrefetchSize(100);
1:             connection1.send(consumerInfo1);
1: 
1:             // Close the subscription.
1:             connection1.send(closeConsumerInfo(consumerInfo1));
1: 
1:             // Send the messages
1:             for (int i = 0; i < 4; i++) {
1:                 Message m = createMessage(producerInfo1, dest1, DeliveryMode.PERSISTENT);
1:                 connection1.send(m);
1:                 sentBeforeRestart.add(m.getMessageId());
1:             }
1:             connection1.request(closeConnectionInfo(connectionInfo1));
1:             connection1.stop();
1: 
1: 
1:             StubConnection connection2 = createConnection();
1:             ConnectionInfo connectionInfo2 = createConnectionInfo();
1:             connectionInfo2.setClientId("A");
1:             SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:             connection2.send(connectionInfo2);
1:             connection2.send(sessionInfo2);
1:             ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:             connection2.send(producerInfo2);
1:             // Send messages before the durable subscription is re-activated.
1:             for (int i = 0; i < 4; i++) {
1:                 Message m = createMessage(producerInfo2, dest2, DeliveryMode.PERSISTENT);
1:                 connection2.send(m);
1:                 sentBeforeCreateConsumer.add(m.getMessageId());
1:             }
1: 
1:             // Re-open the subscription.
1:             ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, wildDest);
1:             consumerInfo2.setSubscriptionName("test");
1:             consumerInfo2.setPrefetchSize(100);
1:             connection2.send(consumerInfo2);
1: 
1:             // Send messages after the subscription is activated.
1:             for (int i = 0; i < 4; i++) {
1:                 Message m = createMessage(producerInfo2, dest3, DeliveryMode.PERSISTENT);
1:                 connection2.send(m);
1:                 sentAfterCreateConsumer.add(m.getMessageId());
1:             }
1: 
1:             // We should get the recovered messages...
1:             for (int i = 0; i < 4; i++) {
1:                 Message m2 = receiveMessage(connection2);
1:                 assertNotNull("Recovered message missing: " + i, m2);
1:                 assertEquals(sentBeforeRestart.get(i), m2.getMessageId());
1:             }
1: 
1:             // We should get get the messages that were sent before the sub was
1:             // reactivated.
1:             for (int i = 0; i < 4; i++) {
1:                 Message m2 = receiveMessage(connection2);
1:                 assertNotNull("Before activated message missing: " + i, m2);
1:                 assertEquals(sentBeforeCreateConsumer.get(i), m2.getMessageId());
1:             }
1: 
1:             // We should get get the messages that were sent after the sub was
1:             // reactivated.
1:             for (int i = 0; i < 4; i++) {
1:                 Message m2 = receiveMessage(connection2);
1:                 assertNotNull("After activated message missing: " + i, m2);
1:                 assertEquals("" + i, sentAfterCreateConsumer.get(i), m2.getMessageId());
1:             }
1: 
1:             assertNoMessagesLeft(connection2);
1: 
1: 
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1:         for (int i = 0; i < 4; i++) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 4; i++) {
1:         }
1: 
1:         assertNull(m);
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1:         for (int i = 0; i < 4; i++) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertNull(m);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (int i = 0; i < 4; i++) {
1:         }
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertEquals(m.getMessageId(), message.getMessageId());
1: 
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1:         for (int i = 0; i < 4; i++) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 4; i++) {
1: 
1: 
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1:         for (int i = 0; i < 4; i++) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 4; i++) {
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertNull(m);
1: 
1: 
1: 
1:         // Setup the producer and send the message.
1:         connection.send(producerInfo);
1: 
1:         for (int i = 0; i < 4; i++) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 4; i++) {
1:         }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 4; i++) {
1: 
1: 
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Used to verify that after a broker restart durable subscriptions that 
0: 	 * use wild cards are still wild card subscription after broker restart.
1: 	 * 
0: 	 * @throws Exception
1: 	 */
0:     public void testWildCardSubscriptionPreservedOnRestart() throws Exception {
1:         ActiveMQDestination dest1 = new ActiveMQTopic("TEST.A");
1:         ActiveMQDestination dest2 = new ActiveMQTopic("TEST.B");
1:         ActiveMQDestination dest3 = new ActiveMQTopic("TEST.C");
1:         ActiveMQDestination wildDest = new ActiveMQTopic("TEST.>");
1:         
0:         ArrayList<MessageId> sentBeforeRestart = new ArrayList<MessageId>(); 
0:         ArrayList<MessageId> sentBeforeCreateConsumer = new ArrayList<MessageId>(); 
0:         ArrayList<MessageId> sentAfterCreateConsumer = new ArrayList<MessageId>(); 
1:         
1:         // Setup a first connection
1:         {
1: 	        StubConnection connection1 = createConnection();
1: 	        ConnectionInfo connectionInfo1 = createConnectionInfo();
1: 	        connectionInfo1.setClientId("A");
1: 	        SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1: 	        ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
1: 	        connection1.send(connectionInfo1);
1: 	        connection1.send(sessionInfo1);
1: 	        connection1.send(producerInfo1);
1: 	        
1: 	        // Create the durable subscription.
0: 	        ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, wildDest);
1: 	        consumerInfo1.setSubscriptionName("test");
1: 	        consumerInfo1.setPrefetchSize(100);
1: 	        connection1.send(consumerInfo1);
1: 	        
1: 	        // Close the subscription.
1: 	        connection1.send(closeConsumerInfo(consumerInfo1));
1: 	
1: 	        // Send the messages
0: 	        for( int i=0; i < 4; i++) {
0: 	        	Message m = createMessage(producerInfo1, dest1, DeliveryMode.PERSISTENT);
0: 		        connection1.send(m);
0: 		        sentBeforeRestart.add(m.getMessageId());
1: 	        }
1: 	        connection1.request(closeConnectionInfo(connectionInfo1));
0: 	        connection1.stop();
1:         }
1:         
1:         // Restart the broker.
1:         restartBroker();
1:         
1:         // Get a connection to the new broker.
1:         {
1: 	        StubConnection connection2 = createConnection();
1: 	        ConnectionInfo connectionInfo2 = createConnectionInfo();
1: 	        connectionInfo2.setClientId("A");
1: 	        SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1: 	        connection2.send(connectionInfo2);
1: 	        connection2.send(sessionInfo2);
1: 	        
0: 	        ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
0: 	        connection2.send(producerInfo2);        
1: 
0: 	        // Send messages before the durable subscription is re-activated.	        
0: 	        for( int i=0; i < 4; i++) {
0: 	        	Message m = createMessage(producerInfo2, dest2, DeliveryMode.PERSISTENT);
0: 		        connection2.send(m);
0: 		        sentBeforeCreateConsumer.add(m.getMessageId());
1: 	        }
1: 	        
1: 	        // Re-open the subscription.
0: 	        ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, wildDest);
1: 	        consumerInfo2.setSubscriptionName("test");
1: 	        consumerInfo2.setPrefetchSize(100);
1: 	        connection2.send(consumerInfo2);
1: 
0: 	        // Send messages after the subscription is activated.
0: 	        for( int i=0; i < 4; i++) {
0: 	        	Message m = createMessage(producerInfo2, dest3, DeliveryMode.PERSISTENT);
0: 		        connection2.send(m);
0: 		        sentAfterCreateConsumer.add(m.getMessageId());
1: 	        }
1: 	        	        
0: 	        // We should get the recovered messages...
0: 	        for( int i=0; i < 4 ; i++ ) {
1: 	            Message m2 = receiveMessage(connection2);
0: 	            assertNotNull("Recovered message missing: "+i, m2);
0: 	            assertEquals(sentBeforeRestart.get(i), m2.getMessageId());
1: 	        }
1: 	        
0: 	        // We should get get the messages that were sent before the sub was reactivated.
0: 	        for( int i=0; i < 4 ; i++ ) {
1: 	            Message m2 = receiveMessage(connection2);
0: 	            assertNotNull("Before activated message missing: "+i, m2);
0: 	            assertEquals(sentBeforeCreateConsumer.get(i), m2.getMessageId());
1: 	        }
1: 	        
0: 	        // We should get get the messages that were sent after the sub was reactivated.
0: 	        for( int i=0; i < 4 ; i++ ) {
1: 	            Message m2 = receiveMessage(connection2);
0: 	            assertNotNull("After activated message missing: "+i, m2);
0: 	            assertEquals(""+i, sentAfterCreateConsumer.get(i), m2.getMessageId());
1: 	        }
1: 	        
1: 	        assertNoMessagesLeft(connection2);
1:         }
1:         
1:     }
1:     
commit:333158a
/////////////////////////////////////////////////////////////////////////
0:         consumerInfo1.setSubscriptionName("test");
/////////////////////////////////////////////////////////////////////////
0:         consumerInfo2.setSubscriptionName("test");
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumedQueuePersistentMessagesLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentUncommitedMessagesLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testTopicDurableConsumerHoldsPersistentMessageAfterRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentMessagesNotLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueueNonPersistentMessagesLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentCommitedMessagesNotLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentCommitedAcksNotLostOnRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentUncommitedAcksLostOnRestart() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
1: /**
1:  * Used to simulate the recovery that occurs when a broker shuts down.
1:  * 
0:  * @version $Revision$
1:  */
1: public class RecoveryBrokerTest extends BrokerRestartTestSupport {
1:         
0:     public void testConsumedQueuePersistentMessagesLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         
0:         for( int i=0; i < 4; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             connection.send(message);
1:         }
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // The we should get the messages.
0:         for( int i=0; i < 4 ; i++ ) {
1:             Message m2 = receiveMessage(connection);
1:             assertNotNull(m2);
1:         }        
1: 
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // No messages should be delivered.
1:         Message m = receiveMessage(connection);
0:         assertNull(m);        
1:     }
1: 
0:     public void testQueuePersistentUncommitedMessagesLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         
1:         // Begin the transaction.
1:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
1: 
0:         for( int i=0; i < 4; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             message.setTransactionId(txid);
1:             connection.send(message);
1:         }
1:         
1:         // Don't commit
1: 
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // No messages should be delivered.
1:         Message m = receiveMessage(connection);
0:         assertNull(m);        
1:     }
1: 
0:     public void testTopicDurableConsumerHoldsPersistentMessageAfterRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQTopic("TEST");
1:         
1:         // Setup a first connection
0:         StubConnection connection1 = createConnection();
0:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         connectionInfo1.setClientId("A");
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
0:         ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
0:         connection1.send(connectionInfo1);
0:         connection1.send(sessionInfo1);
0:         connection1.send(producerInfo1);
1: 
0:         // Create the durable subscription.
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
0:         consumerInfo1.setSubcriptionName("test");
0:         consumerInfo1.setPrefetchSize(100);
0:         connection1.send(consumerInfo1);
1:         
0:         // Close the subscription.
0:         connection1.send(closeConsumerInfo(consumerInfo1));
1: 
0:         // Send the messages
1:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:         connection1.send(createMessage(producerInfo1, destination, DeliveryMode.PERSISTENT));
1:         
1:         // Restart the broker.
1:         restartBroker();
1:         
1:         // Get a connection to the new broker.
0:         StubConnection connection2 = createConnection();
0:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         connectionInfo2.setClientId("A");
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
0:         connection2.send(connectionInfo2);
0:         connection2.send(sessionInfo2);
1: 
0:         // Re-open the subscription.
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
0:         consumerInfo2.setSubcriptionName("test");
0:         consumerInfo2.setPrefetchSize(100);
0:         connection2.send(consumerInfo2);
1:         
1:         // The we should get the messages.
0:         for( int i=0; i < 4 ; i++ ) {
0:             Message m2 = receiveMessage(connection2);
1:             assertNotNull(m2);
1:         }        
0:         assertNoMessagesLeft(connection2);
1:     }
1: 
0:     public void testQueuePersistentMessagesNotLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         Message message = createMessage(producerInfo, destination);
1:         message.setPersistent(true);
1:         connection.send(message);
1:         
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1:         
1:         // Message should have been dropped due to broker restart.
1:         Message m = receiveMessage(connection);
1:         assertNotNull(m);
0:         assertEquals( m.getMessageId(), message.getMessageId() );
1:     }
1:     
0:     public void testQueueNonPersistentMessagesLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         Message message = createMessage(producerInfo, destination);
1:         message.setPersistent(false);
1:         connection.send(message);
1:         
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1:         
1:         // Message should have been dropped due to broker restart.
1:         assertNoMessagesLeft(connection);
1:     }
1:     
0:     public void testQueuePersistentCommitedMessagesNotLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         
1:         // Begin the transaction.
1:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
1: 
0:         for( int i=0; i < 4; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             message.setTransactionId(txid);
1:             connection.send(message);
1:         }
1:         
1:         // Commit
1:         connection.send(createCommitTransaction1Phase(connectionInfo, txid));
1: 
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
0:         for( int i=0; i < 4 ;i ++ ) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
1:         }
1:         
1:         assertNoMessagesLeft(connection);
1:     }
1:     
0:     public void testQueuePersistentCommitedAcksNotLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         
0:         for( int i=0; i < 4; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             connection.send(message);
1:         }
1:         
1:         // Setup the consumer and receive the message.
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // Begin the transaction.
1:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
0:         for( int i=0; i < 4 ;i ++ ) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
1:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:             ack.setTransactionId(txid);
1:             connection.send(ack);
1:         }        
1:         // Commit
1:         connection.send(createCommitTransaction1Phase(connectionInfo, txid));
1:         
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // No messages should be delivered.
1:         Message m = receiveMessage(connection);
0:         assertNull(m);        
1:     }
1:     
0:     public void testQueuePersistentUncommitedAcksLostOnRestart() throws Throwable {
1:         
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         // Setup the producer and send the message.  
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);        
1:         
0:         for( int i=0; i < 4; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             connection.send(message);
1:         }
1:         
1:         // Setup the consumer and receive the message.
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // Begin the transaction.
1:         LocalTransactionId txid = createLocalTransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
0:         for( int i=0; i < 4 ;i ++ ) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
1:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:             ack.setTransactionId(txid);
1:             connection.send(ack);
1:         }        
1:         // Don't commit
1:         
1:         // restart the broker.
1:         restartBroker();
1:         
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         // All messages should be re-delivered.
0:         for( int i=0; i < 4 ;i ++ ) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
1:         }
1:         
1:         assertNoMessagesLeft(connection);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(RecoveryBrokerTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4012c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.XATransactionId;
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testQueuePersistentXAUncommitedAcksLostOnRestart() throws Exception {
1:         int NUMBER = 100;
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
0: 
0:         // Setup the producer and send the message.
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
0:         connection.send(producerInfo);
0: 
1:         for (int i = 0; i < NUMBER; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             connection.send(message);
0:         }
0: 
1:         // Setup the consumer and receive the message.
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
0: 
1:         // Begin the transaction.
1:         XATransactionId txid = createXATransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
1:         for (int i = 0; i < NUMBER; i++) {
0:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
0:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
0:             ack.setTransactionId(txid);
0:             connection.send(ack);
0:         }
1:         // Don't commit
0: 
1:         // restart the broker.
1:         restartBroker();
0: 
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
0: 
1:         // All messages should be re-delivered.
1:         for (int i = 0; i < NUMBER; i++) {
0:             Message m = receiveMessage(connection);
1:             assertNotNull(m);
0:         }
0: 
1:         assertNoMessagesLeft(connection);
0:     }
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1:     //need to revist!!!
1:     public void XtestWildCardSubscriptionPreservedOnRestart() throws Exception {
commit:825447a
/////////////////////////////////////////////////////////////////////////
0:         connection1.request(closeConnectionInfo(connectionInfo1));
/////////////////////////////////////////////////////////////////////////
1:         connection.request(closeConnectionInfo(connectionInfo));
/////////////////////////////////////////////////////////////////////////
1:         connection.request(closeConnectionInfo(connectionInfo));
/////////////////////////////////////////////////////////////////////////
1:         connection.request(closeConnectionInfo(connectionInfo));
author:James Strachan
-------------------------------------------------------------------------------
commit:8704338
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have received a message by now!", m);
============================================================================