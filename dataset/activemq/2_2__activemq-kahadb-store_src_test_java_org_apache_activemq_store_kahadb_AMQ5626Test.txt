1:ecebd24: /**
1:ecebd24:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ecebd24:  * contributor license agreements.  See the NOTICE file distributed with
1:ecebd24:  * this work for additional information regarding copyright ownership.
1:ecebd24:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ecebd24:  * (the "License"); you may not use this file except in compliance with
1:ecebd24:  * the License.  You may obtain a copy of the License at
1:ecebd24:  *
1:ecebd24:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ecebd24:  *
1:ecebd24:  * Unless required by applicable law or agreed to in writing, software
1:ecebd24:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ecebd24:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ecebd24:  * See the License for the specific language governing permissions and
1:ecebd24:  * limitations under the License.
1:ecebd24:  */
19:ecebd24: 
1:ecebd24: package org.apache.activemq.store.kahadb;
1:ecebd24: 
1:13044de: import static org.junit.Assert.assertNotNull;
1:13044de: import static org.junit.Assert.fail;
1:13044de: 
1:ecebd24: import java.net.URI;
1:ecebd24: import java.util.ArrayList;
1:ecebd24: import java.util.List;
1:ecebd24: import java.util.Map;
1:13044de: 
1:ecebd24: import javax.jms.ConnectionFactory;
1:ecebd24: import javax.jms.Message;
1:ecebd24: import javax.jms.MessageConsumer;
1:ecebd24: import javax.jms.MessageProducer;
1:ecebd24: import javax.jms.Session;
1:ecebd24: import javax.management.ObjectName;
1:13044de: 
1:ecebd24: import org.apache.activemq.ActiveMQConnection;
1:ecebd24: import org.apache.activemq.ActiveMQConnectionFactory;
1:ecebd24: import org.apache.activemq.broker.BrokerService;
1:ecebd24: import org.apache.activemq.broker.TransportConnector;
1:ecebd24: import org.apache.activemq.broker.jmx.DestinationView;
1:ecebd24: import org.apache.activemq.broker.jmx.QueueView;
1:ecebd24: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ecebd24: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ecebd24: import org.junit.After;
1:ecebd24: import org.junit.Before;
1:ecebd24: import org.junit.Test;
1:ecebd24: import org.slf4j.Logger;
1:ecebd24: import org.slf4j.LoggerFactory;
1:ecebd24: 
1:ecebd24: 
1:ecebd24: public class AMQ5626Test {
1:ecebd24: 
1:ecebd24:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5626Test.class);
1:13044de: 
1:13044de:     private final String QUEUE_NAME = "TesQ";
1:13044de:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
1:13044de: 
1:ecebd24:     private BrokerService brokerService;
1:ecebd24:     private URI brokerUri;
1:ecebd24: 
1:ecebd24:     @Before
1:ecebd24:     public void setup() throws Exception {
1:ecebd24:         createBroker(true);
7:ecebd24:     }
1:ecebd24: 
1:13044de:     @After
1:13044de:     public void teardown() throws Exception {
1:13044de:         try {
1:13044de:             brokerService.stop();
1:13044de:         } catch (Exception ex) {
1:13044de:             LOG.error("FAILED TO STOP/START BROKER EXCEPTION", ex);
1:13044de:         }
1:13044de:     }
1:13044de: 
1:ecebd24:     private void createBroker(boolean deleteMessagesOnStart) throws Exception {
1:ecebd24: 
1:ecebd24:         brokerService = new BrokerService();
1:ecebd24: 
1:ecebd24:         PolicyMap policyMap = new PolicyMap();
1:ecebd24:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:ecebd24:         PolicyEntry pe = new PolicyEntry();
1:ecebd24:         pe.setPrioritizedMessages(true);
1:ecebd24:         pe.setExpireMessagesPeriod(0);
1:ecebd24: 
1:ecebd24:         pe.setQueue(QUEUE_NAME);
1:ecebd24:         entries.add(pe);
1:ecebd24: 
1:ecebd24:         policyMap.setPolicyEntries(entries);
1:ecebd24: 
1:ecebd24:         brokerService.setDestinationPolicy(policyMap);
1:ecebd24: 
1:ecebd24:         TransportConnector transportConnector = new TransportConnector();
1:ecebd24:         transportConnector.setName("openwire");
1:ecebd24:         transportConnector.setUri(new URI("tcp://0.0.0.0:0"));
1:ecebd24:         brokerService.addConnector(transportConnector);
1:13044de:         brokerService.setDataDirectory(KAHADB_DIRECTORY);
1:ecebd24:         brokerService.setDeleteAllMessagesOnStartup(deleteMessagesOnStart);
1:ecebd24:         brokerService.getManagementContext().setCreateConnector(false);
1:ecebd24:         brokerService.start();
1:ecebd24:         brokerService.waitUntilStarted();
1:ecebd24: 
1:ecebd24:         brokerUri = transportConnector.getPublishableConnectURI();
1:ecebd24:     }
1:ecebd24: 
1:13044de:     @Test(timeout = 30000)
1:ecebd24:     public void testPriorityMessages() throws Exception {
1:ecebd24: 
1:ecebd24:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:ecebd24:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:ecebd24:         connection.start();
1:ecebd24:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ecebd24: 
1:ecebd24:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:ecebd24:         Message message = session.createMessage();
1:ecebd24: 
1:ecebd24:         // 0,1
1:ecebd24:         producer.setPriority(9);
1:ecebd24:         producer.send(message);
1:ecebd24:         producer.send(message);
1:ecebd24: 
1:ecebd24:         // 2,3
1:ecebd24:         producer.setPriority(4);
1:ecebd24:         producer.send(message);
1:ecebd24:         producer.send(message);
1:ecebd24: 
1:ecebd24:         connection.close();
1:ecebd24: 
1:ecebd24:         stopRestartBroker();
1:ecebd24: 
1:ecebd24:         connectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:ecebd24:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:ecebd24:         connection.start();
1:ecebd24:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ecebd24:         producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:ecebd24: 
1:ecebd24:         // 4
1:ecebd24:         producer.setPriority(4);
1:ecebd24:         producer.send(message);
1:ecebd24: 
1:ecebd24:         displayQueueViews(brokerService);
1:ecebd24: 
1:ecebd24:         // consume 5
1:ecebd24:         MessageConsumer jmsConsumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:ecebd24:         for (int i = 0; i < 5; i++) {
1:ecebd24:             message = jmsConsumer.receive(4000);
1:ecebd24:             assertNotNull("Got message i=" + i, message);
1:ecebd24:             LOG.info("received: " + message.getJMSMessageID() + ", priority:" + message.getJMSPriority());
1:ecebd24:         }
1:ecebd24: 
1:ecebd24:         connection.close();
1:ecebd24:     }
1:ecebd24: 
1:ecebd24:     private void displayQueueViews(BrokerService broker) throws Exception {
2:ecebd24:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1:ecebd24: 
2:ecebd24:         for (ObjectName key : queueViews.keySet()) {
2:ecebd24:             DestinationView destinationView = queueViews.get(key);
1:ecebd24: 
2:ecebd24:             if (destinationView instanceof QueueView) {
2:ecebd24:                 QueueView queueView = (QueueView) destinationView;
1:ecebd24:                 LOG.info("ObjectName " + key);
1:ecebd24:                 LOG.info("QueueView name : " + queueView.getName());
1:ecebd24:                 LOG.info("QueueView cursorSize : " + queueView.cursorSize());
1:ecebd24:                 LOG.info("QueueView queueSize : " + queueView.getQueueSize());
1:ecebd24:                 LOG.info("QueueView enqueue count : " + queueView.getEnqueueCount());
1:ecebd24:                 LOG.info("QueueView dequeue count : " + queueView.getDequeueCount());
1:ecebd24:                 LOG.info("QueueView inflight count : " + queueView.getInFlightCount());
1:ecebd24:             }
1:ecebd24:         }
1:ecebd24:     }
1:ecebd24: 
1:ecebd24:     private synchronized void stopRestartBroker() {
2:ecebd24:         try {
1:ecebd24:             LOG.info(">>>SHUTTING BROKER DOWN");
2:ecebd24:             brokerService.stop();
1:ecebd24:             brokerService.waitUntilStopped();
1:ecebd24: 
1:ecebd24:             //restart it
1:ecebd24:             createBroker(false);
1:ecebd24:             brokerService.start();
1:ecebd24:             brokerService.waitUntilStarted();
1:ecebd24: 
1:ecebd24:             LOG.info(">>>BROKER RESTARTED..");
1:ecebd24:         } catch (Exception e) {
1:ecebd24:             LOG.error("FAILED TO STOP/START BROKER EXCEPTION", e);
1:ecebd24:             fail("FAILED TO STOP/START BROKER" + e);
1:ecebd24:         }
1:ecebd24:     }
1:ecebd24: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:13044de
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final String QUEUE_NAME = "TesQ";
1:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
1: 
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void teardown() throws Exception {
1:         try {
1:             brokerService.stop();
1:         } catch (Exception ex) {
1:             LOG.error("FAILED TO STOP/START BROKER EXCEPTION", ex);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setDataDirectory(KAHADB_DIRECTORY);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:ecebd24
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.DestinationView;
1: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.fail;
1: 
1: 
1: public class AMQ5626Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5626Test.class);
0:     private static final String QUEUE_NAME = "TesQ";
1:     private BrokerService brokerService;
1:     private URI brokerUri;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteMessagesOnStart) throws Exception {
1: 
1:         brokerService = new BrokerService();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setPrioritizedMessages(true);
1:         pe.setExpireMessagesPeriod(0);
1: 
1:         pe.setQueue(QUEUE_NAME);
1:         entries.add(pe);
1: 
1:         policyMap.setPolicyEntries(entries);
1: 
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         TransportConnector transportConnector = new TransportConnector();
1:         transportConnector.setName("openwire");
1:         transportConnector.setUri(new URI("tcp://0.0.0.0:0"));
1:         brokerService.addConnector(transportConnector);
1: 
1:         brokerService.setDeleteAllMessagesOnStartup(deleteMessagesOnStart);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         brokerUri = transportConnector.getPublishableConnectURI();
1:     }
1: 
0:     @Test
1:     public void testPriorityMessages() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1: 
1:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1: 
1:         Message message = session.createMessage();
1: 
1:         // 0,1
1:         producer.setPriority(9);
1:         producer.send(message);
1:         producer.send(message);
1: 
1:         // 2,3
1:         producer.setPriority(4);
1:         producer.send(message);
1:         producer.send(message);
1: 
1:         connection.close();
1: 
1:         stopRestartBroker();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(session.createQueue(QUEUE_NAME));
1: 
1:         // 4
1:         producer.setPriority(4);
1:         producer.send(message);
1: 
1:         displayQueueViews(brokerService);
1: 
1:         // consume 5
1:         MessageConsumer jmsConsumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:         for (int i = 0; i < 5; i++) {
1:             message = jmsConsumer.receive(4000);
1:             assertNotNull("Got message i=" + i, message);
1:             LOG.info("received: " + message.getJMSMessageID() + ", priority:" + message.getJMSPriority());
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private void displayQueueViews(BrokerService broker) throws Exception {
1:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1: 
1:         for (ObjectName key : queueViews.keySet()) {
1:             DestinationView destinationView = queueViews.get(key);
1: 
1:             if (destinationView instanceof QueueView) {
1:                 QueueView queueView = (QueueView) destinationView;
1:                 LOG.info("ObjectName " + key);
1:                 LOG.info("QueueView name : " + queueView.getName());
1:                 LOG.info("QueueView cursorSize : " + queueView.cursorSize());
1:                 LOG.info("QueueView queueSize : " + queueView.getQueueSize());
1:                 LOG.info("QueueView enqueue count : " + queueView.getEnqueueCount());
1:                 LOG.info("QueueView dequeue count : " + queueView.getDequeueCount());
1:                 LOG.info("QueueView inflight count : " + queueView.getInFlightCount());
1: 
1:             }
1:         }
1:     }
1: 
0:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1: 
1:         for (ObjectName key : queueViews.keySet()) {
1:             DestinationView destinationView = queueViews.get(key);
1: 
1:             if (destinationView instanceof QueueView) {
1:                 QueueView queueView = (QueueView) destinationView;
1: 
0:                 if (queueView.getName().equals(queueName)) {
0:                     return queueView;
1:                 }
1: 
1:             }
1:         }
0:         return null;
1:     }
1: 
1:     private synchronized void stopRestartBroker() {
1: 
1:         try {
1: 
1:             LOG.info(">>>SHUTTING BROKER DOWN");
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1: 
1:             //restart it
1:             createBroker(false);
1:             brokerService.start();
1:             brokerService.waitUntilStarted();
1: 
1:             LOG.info(">>>BROKER RESTARTED..");
1: 
1:         } catch (Exception e) {
1:             LOG.error("FAILED TO STOP/START BROKER EXCEPTION", e);
1:             fail("FAILED TO STOP/START BROKER" + e);
1:         }
1:     }
1: 
0:     @After
0:     public void teardown() throws Exception {
1: 
1:         try {
1:             brokerService.stop();
0:         } catch (Exception ex) {
0:             LOG.error("FAILED TO STOP/START BROKER EXCEPTION", ex);
1:         }
1: 
1:     }
1: 
1: }
============================================================================