1:459be2d: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:459be2d:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
7:a88906f: 
1:6dd47bb: import java.util.ArrayList;
1:6dd47bb: import java.util.List;
1:6dd47bb: 
1:46bc26c: import javax.jms.*;
1:540dd5c: 
1:6dd47bb: import org.apache.activemq.command.ActiveMQDestination;
1:a88906f: import org.apache.activemq.tool.properties.JmsClientProperties;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: public abstract class AbstractJmsClient {
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJmsClient.class);
1:a88906f: 
1:6dd47bb:     private static final String QUEUE_SCHEME = "queue://";
1:6dd47bb:     private static final String TOPIC_SCHEME = "topic://";
1:46bc26c:     private static final String TEMP_QUEUE_SCHEME = "temp-queue://";
1:46bc26c:     private static final String TEMP_TOPIC_SCHEME = "temp-topic://";
1:6dd47bb:     public static final String DESTINATION_SEPARATOR = ",";
1:6dd47bb: 
1:a88906f:     protected ConnectionFactory factory;
1:a88906f:     protected Connection jmsConnection;
1:a88906f:     protected Session jmsSession;
1:a88906f: 
1:540dd5c:     protected int destCount = 1;
1:540dd5c:     protected int destIndex;
1:a88906f:     protected String clientName = "";
1:47ebd80: 
1:459be2d:     private int internalTxCounter = 0;
1:459be2d: 
1:a88906f:     public AbstractJmsClient(ConnectionFactory factory) {
1:a88906f:         this.factory = factory;
3:a88906f:     }
1:47ebd80: 
1:540dd5c:     public abstract JmsClientProperties getClient();
1:459be2d: 
1:540dd5c:     public abstract void setClient(JmsClientProperties client);
1:540dd5c: 
1:a88906f:     public ConnectionFactory getFactory() {
1:a88906f:         return factory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setFactory(ConnectionFactory factory) {
1:a88906f:         this.factory = factory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public int getDestCount() {
1:a88906f:         return destCount;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setDestCount(int destCount) {
1:a88906f:         this.destCount = destCount;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public int getDestIndex() {
1:a88906f:         return destIndex;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setDestIndex(int destIndex) {
1:a88906f:         this.destIndex = destIndex;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getClientName() {
1:a88906f:         return clientName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setClientName(String clientName) {
1:a88906f:         this.clientName = clientName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public Connection getConnection() throws JMSException {
1:a88906f:         if (jmsConnection == null) {
1:a88906f:             jmsConnection = factory.createConnection();
1:a88906f:             jmsConnection.setClientID(getClientName());
1:540dd5c:             LOG.info("Creating JMS Connection: Provider=" + getClient().getJmsProvider() + ", JMS Spec=" + getClient().getJmsVersion());
1:a88906f:         }
1:a88906f:         return jmsConnection;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public Session getSession() throws JMSException {
1:a88906f:         if (jmsSession == null) {
1:a88906f:             int ackMode;
1:a88906f:             if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_AUTO_ACKNOWLEDGE)) {
1:a88906f:                 ackMode = Session.AUTO_ACKNOWLEDGE;
1:a88906f:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_CLIENT_ACKNOWLEDGE)) {
1:a88906f:                 ackMode = Session.CLIENT_ACKNOWLEDGE;
1:a88906f:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_DUPS_OK_ACKNOWLEDGE)) {
1:a88906f:                 ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:a88906f:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_TRANSACTED)) {
1:a88906f:                 ackMode = Session.SESSION_TRANSACTED;
4:a88906f:             } else {
1:a88906f:                 ackMode = Session.AUTO_ACKNOWLEDGE;
1:a88906f:             }
1:a88906f:             jmsSession = getConnection().createSession(getClient().isSessTransacted(), ackMode);
1:a88906f:         }
1:a88906f:         return jmsSession;
1:a88906f:     }
1:a88906f: 
1:6dd47bb:     public Destination[] createDestinations(int destCount) throws JMSException {
1:6dd47bb:         final String destName = getClient().getDestName();
1:6dd47bb:         ArrayList<Destination> destinations = new ArrayList<>();
1:6dd47bb:         if (destName.contains(DESTINATION_SEPARATOR)) {
1:6dd47bb:             if (getClient().isDestComposite() && (destCount == 1)) {
1:6dd47bb:                 // user was explicit about which destinations to make composite
1:6dd47bb:                 String[] simpleNames = mapToSimpleNames(destName.split(DESTINATION_SEPARATOR));
1:6dd47bb:                 String joinedSimpleNames = join(simpleNames, DESTINATION_SEPARATOR);
1:a88906f: 
1:6dd47bb:                 // use the type of the 1st destination for the Destination instance
1:6dd47bb:                 byte destinationType = getDestinationType(destName);
1:6dd47bb:                 destinations.add(createCompositeDestination(destinationType, joinedSimpleNames, 1));
1:6dd47bb:             } else {
1:6dd47bb:                 LOG.info("User requested multiple destinations, splitting: {}", destName);
1:6dd47bb:                 // either composite with multiple destinations to be suffixed
1:6dd47bb:                 // or multiple non-composite destinations
1:6dd47bb:                 String[] destinationNames = destName.split(DESTINATION_SEPARATOR);
1:6dd47bb:                 for (String splitDestName : destinationNames) {
1:6dd47bb:                     addDestinations(destinations, splitDestName, destCount);
1:6dd47bb:                 }
1:a88906f:             }
1:6dd47bb:         } else {
1:6dd47bb:             addDestinations(destinations, destName, destCount);
1:6dd47bb:         }
1:6dd47bb:         return destinations.toArray(new Destination[] {});
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     private String join(String[] stings, String separator) {
1:6dd47bb:         StringBuffer sb = new StringBuffer();
1:6dd47bb:         for (int i = 0; i < stings.length; i++) {
1:6dd47bb:             if (i > 0) {
1:6dd47bb:                 sb.append(separator);
1:6dd47bb:             }
1:6dd47bb:             sb.append(stings[i]);
1:6dd47bb:         }
1:6dd47bb:         return sb.toString();
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     private void addDestinations(List<Destination> destinations, String destName, int destCount) throws JMSException {
1:6dd47bb:         boolean destComposite = getClient().isDestComposite();
1:6dd47bb:         if ((destComposite) && (destCount > 1)) {
1:6dd47bb:             destinations.add(createCompositeDestination(destName, destCount));
1:6dd47bb:         } else {
1:6dd47bb:             for (int i = 0; i < destCount; i++) {
1:6dd47bb:                 destinations.add(createDestination(withDestinationSuffix(destName, i, destCount)));
1:6dd47bb:             }
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:47ebd80:     private String withDestinationSuffix(String name, int destIndex, int destCount) {
1:47ebd80:         return (destCount == 1) ? name : name + "." + destIndex;
1:47ebd80:     }
1:47ebd80: 
1:6dd47bb:     protected Destination createCompositeDestination(String destName, int destCount) throws JMSException {
1:6dd47bb:         return createCompositeDestination(getDestinationType(destName), destName, destCount);
1:a88906f:     }
1:a88906f: 
1:6dd47bb:     protected Destination createCompositeDestination(byte destinationType, String destName, int destCount) throws JMSException {
1:6dd47bb:         String simpleName = getSimpleName(destName);
1:a88906f: 
1:47ebd80:         String compDestName = "";
1:47ebd80:         for (int i = 0; i < destCount; i++) {
1:47ebd80:             if (i > 0) {
1:47ebd80:                 compDestName += ",";
1:47ebd80:             }
1:47ebd80:             compDestName += withDestinationSuffix(simpleName, i, destCount);
1:a88906f:         }
1:a88906f: 
1:6dd47bb:         LOG.info("Creating composite destination: {}", compDestName);
1:46bc26c:         Destination destination;
1:46bc26c:         Session session = getSession();
1:46bc26c:         if (destinationType == ActiveMQDestination.TOPIC_TYPE) {
1:46bc26c:             destination = session.createTopic(compDestName);
1:46bc26c:         } else if (destinationType == ActiveMQDestination.QUEUE_TYPE) {
1:46bc26c:             destination = session.createQueue(compDestName);
1:46bc26c:         } else {
1:46bc26c:             throw new UnsupportedOperationException(
1:46bc26c:                     "Cannot create composite destinations using temporary queues or topics.");
1:46bc26c:         }
1:46bc26c:         assert (destination != null);
1:46bc26c:         return destination;
1:a88906f:     }
1:a88906f: 
1:6dd47bb:     private String[] mapToSimpleNames(String[] destNames) {
1:6dd47bb:         assert (destNames != null);
1:6dd47bb:         String[] simpleNames = new String[destNames.length];
1:6dd47bb:         for (int i = 0; i < destNames.length; i++) {
1:6dd47bb:             simpleNames[i] = getSimpleName(destNames[i]);
1:6dd47bb:         }
1:6dd47bb:         return simpleNames;
1:6dd47bb:     }
1:6dd47bb: 
1:46bc26c:     protected String getSimpleName(String destName) {
1:6dd47bb:         String simpleName;
1:6dd47bb:         if (destName.startsWith(QUEUE_SCHEME)) {
1:6dd47bb:             simpleName = destName.substring(QUEUE_SCHEME.length());
1:6dd47bb:         } else if (destName.startsWith(TOPIC_SCHEME)) {
1:6dd47bb:             simpleName = destName.substring(TOPIC_SCHEME.length());
1:46bc26c:         } else if (destName.startsWith(TEMP_QUEUE_SCHEME)) {
1:46bc26c:             simpleName = destName.substring(TEMP_QUEUE_SCHEME.length());
1:46bc26c:         } else if (destName.startsWith(TEMP_TOPIC_SCHEME)) {
1:46bc26c:             simpleName = destName.substring(TEMP_TOPIC_SCHEME.length());
1:6dd47bb:         } else {
1:6dd47bb:             simpleName = destName;
1:6dd47bb:         }
1:6dd47bb:         return simpleName;
1:6dd47bb:     }
1:6dd47bb: 
1:46bc26c:     protected byte getDestinationType(String destName) {
1:6dd47bb:         assert (destName != null);
1:6dd47bb:         if (destName.startsWith(QUEUE_SCHEME)) {
1:6dd47bb:             return ActiveMQDestination.QUEUE_TYPE;
1:46bc26c:         } else if (destName.startsWith(TEMP_QUEUE_SCHEME)) {
1:46bc26c:             return ActiveMQDestination.TEMP_QUEUE_TYPE;
1:46bc26c:         } else if (destName.startsWith(TEMP_TOPIC_SCHEME)) {
1:46bc26c:             return ActiveMQDestination.TEMP_TOPIC_TYPE;
1:6dd47bb:         } else {
1:6dd47bb:             return ActiveMQDestination.TOPIC_TYPE;
1:6dd47bb:         }
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     protected Destination createDestination(String destName) throws JMSException {
1:6dd47bb:         String simpleName = getSimpleName(destName);
1:46bc26c:         byte destinationType = getDestinationType(destName);
1:46bc26c: 
1:46bc26c:         if (destinationType == ActiveMQDestination.QUEUE_TYPE) {
1:46bc26c:             LOG.info("Creating queue: {}", destName);
1:6dd47bb:             return getSession().createQueue(simpleName);
1:46bc26c:         } else if (destinationType == ActiveMQDestination.TOPIC_TYPE) {
1:46bc26c:             LOG.info("Creating topic: {}", destName);
1:6dd47bb:             return getSession().createTopic(simpleName);
1:46bc26c:         } else {
1:46bc26c:             return createTemporaryDestination(destName);
1:46bc26c:         }
1:46bc26c:     }
1:46bc26c: 
1:46bc26c:     protected Destination createTemporaryDestination(String destName) throws JMSException {
1:46bc26c:         byte destinationType = getDestinationType(destName);
1:46bc26c: 
1:46bc26c:         if (destinationType == ActiveMQDestination.TEMP_QUEUE_TYPE) {
1:46bc26c:             LOG.warn("Creating temporary queue. Requested name ({}) ignored.", destName);
1:46bc26c:             TemporaryQueue temporaryQueue = getSession().createTemporaryQueue();
1:46bc26c:             LOG.info("Temporary queue created: {}", temporaryQueue.getQueueName());
1:46bc26c:             return temporaryQueue;
1:46bc26c:         } else if (destinationType == ActiveMQDestination.TEMP_TOPIC_TYPE) {
1:46bc26c:             LOG.warn("Creating temporary topic. Requested name ({}) ignored.", destName);
1:46bc26c:             TemporaryTopic temporaryTopic = getSession().createTemporaryTopic();
1:46bc26c:             LOG.info("Temporary topic created: {}", temporaryTopic.getTopicName());
1:46bc26c:             return temporaryTopic;
1:46bc26c:         } else {
1:46bc26c:             throw new IllegalArgumentException("Unrecognized destination type: " + destinationType);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:47ebd80:     /**
1:47ebd80:      * Helper method that checks if session is
1:47ebd80:      * transacted and whether to commit the tx based on commitAfterXMsgs
1:47ebd80:      * property.
1:47ebd80:      *
1:47ebd80:      * @return true if transaction was committed.
1:459be2d:      * @throws JMSException in case the call to JMS Session.commit() fails.
1:459be2d:      */
1:459be2d:     public boolean commitTxIfNecessary() throws JMSException {
1:47ebd80:         internalTxCounter++;
1:459be2d:         if (getClient().isSessTransacted()) {
1:47ebd80:             if ((internalTxCounter % getClient().getCommitAfterXMsgs()) == 0) {
1:47ebd80:                 LOG.debug("Committing transaction.");
1:47ebd80:                 internalTxCounter = 0;
1:47ebd80:                 getSession().commit();
1:47ebd80:                 return true;
1:47ebd80:             }
1:459be2d:         }
1:459be2d:         return false;
1:459be2d:     }
1:459be2d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:46bc26c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1:     private static final String TEMP_QUEUE_SCHEME = "temp-queue://";
1:     private static final String TEMP_TOPIC_SCHEME = "temp-topic://";
/////////////////////////////////////////////////////////////////////////
1:         Destination destination;
1:         Session session = getSession();
1:         if (destinationType == ActiveMQDestination.TOPIC_TYPE) {
1:             destination = session.createTopic(compDestName);
1:         } else if (destinationType == ActiveMQDestination.QUEUE_TYPE) {
1:             destination = session.createQueue(compDestName);
1:         } else {
1:             throw new UnsupportedOperationException(
1:                     "Cannot create composite destinations using temporary queues or topics.");
1:         }
1:         assert (destination != null);
1:         return destination;
/////////////////////////////////////////////////////////////////////////
1:     protected String getSimpleName(String destName) {
1:         } else if (destName.startsWith(TEMP_QUEUE_SCHEME)) {
1:             simpleName = destName.substring(TEMP_QUEUE_SCHEME.length());
1:         } else if (destName.startsWith(TEMP_TOPIC_SCHEME)) {
1:             simpleName = destName.substring(TEMP_TOPIC_SCHEME.length());
1:     protected byte getDestinationType(String destName) {
1:         } else if (destName.startsWith(TEMP_QUEUE_SCHEME)) {
1:             return ActiveMQDestination.TEMP_QUEUE_TYPE;
1:         } else if (destName.startsWith(TEMP_TOPIC_SCHEME)) {
1:             return ActiveMQDestination.TEMP_TOPIC_TYPE;
/////////////////////////////////////////////////////////////////////////
1:         byte destinationType = getDestinationType(destName);
1: 
1:         if (destinationType == ActiveMQDestination.QUEUE_TYPE) {
1:             LOG.info("Creating queue: {}", destName);
1:         } else if (destinationType == ActiveMQDestination.TOPIC_TYPE) {
1:             LOG.info("Creating topic: {}", destName);
1:         } else {
1:             return createTemporaryDestination(destName);
1:         }
1:     }
1: 
1:     protected Destination createTemporaryDestination(String destName) throws JMSException {
1:         byte destinationType = getDestinationType(destName);
1: 
1:         if (destinationType == ActiveMQDestination.TEMP_QUEUE_TYPE) {
1:             LOG.warn("Creating temporary queue. Requested name ({}) ignored.", destName);
1:             TemporaryQueue temporaryQueue = getSession().createTemporaryQueue();
1:             LOG.info("Temporary queue created: {}", temporaryQueue.getQueueName());
1:             return temporaryQueue;
1:         } else if (destinationType == ActiveMQDestination.TEMP_TOPIC_TYPE) {
1:             LOG.warn("Creating temporary topic. Requested name ({}) ignored.", destName);
1:             TemporaryTopic temporaryTopic = getSession().createTemporaryTopic();
1:             LOG.info("Temporary topic created: {}", temporaryTopic.getTopicName());
1:             return temporaryTopic;
1:         } else {
1:             throw new IllegalArgumentException("Unrecognized destination type: " + destinationType);
/////////////////////////////////////////////////////////////////////////
commit:6dd47bb
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     private static final String QUEUE_SCHEME = "queue://";
1:     private static final String TOPIC_SCHEME = "topic://";
1:     public static final String DESTINATION_SEPARATOR = ",";
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Destination[] createDestinations(int destCount) throws JMSException {
1:         final String destName = getClient().getDestName();
1:         ArrayList<Destination> destinations = new ArrayList<>();
1:         if (destName.contains(DESTINATION_SEPARATOR)) {
1:             if (getClient().isDestComposite() && (destCount == 1)) {
1:                 // user was explicit about which destinations to make composite
1:                 String[] simpleNames = mapToSimpleNames(destName.split(DESTINATION_SEPARATOR));
1:                 String joinedSimpleNames = join(simpleNames, DESTINATION_SEPARATOR);
1:                 // use the type of the 1st destination for the Destination instance
1:                 byte destinationType = getDestinationType(destName);
1:                 destinations.add(createCompositeDestination(destinationType, joinedSimpleNames, 1));
1:             } else {
1:                 LOG.info("User requested multiple destinations, splitting: {}", destName);
1:                 // either composite with multiple destinations to be suffixed
1:                 // or multiple non-composite destinations
1:                 String[] destinationNames = destName.split(DESTINATION_SEPARATOR);
1:                 for (String splitDestName : destinationNames) {
1:                     addDestinations(destinations, splitDestName, destCount);
1:                 }
1:         } else {
1:             addDestinations(destinations, destName, destCount);
1:         }
1:         return destinations.toArray(new Destination[] {});
1:     }
1: 
1:     private String join(String[] stings, String separator) {
1:         StringBuffer sb = new StringBuffer();
1:         for (int i = 0; i < stings.length; i++) {
1:             if (i > 0) {
1:                 sb.append(separator);
1:             }
1:             sb.append(stings[i]);
1:         }
1:         return sb.toString();
1:     }
1: 
1:     private void addDestinations(List<Destination> destinations, String destName, int destCount) throws JMSException {
1:         boolean destComposite = getClient().isDestComposite();
1:         if ((destComposite) && (destCount > 1)) {
1:             destinations.add(createCompositeDestination(destName, destCount));
1:         } else {
1:             for (int i = 0; i < destCount; i++) {
1:                 destinations.add(createDestination(withDestinationSuffix(destName, i, destCount)));
1:             }
/////////////////////////////////////////////////////////////////////////
1:     protected Destination createCompositeDestination(String destName, int destCount) throws JMSException {
1:         return createCompositeDestination(getDestinationType(destName), destName, destCount);
1:     protected Destination createCompositeDestination(byte destinationType, String destName, int destCount) throws JMSException {
1:         String simpleName = getSimpleName(destName);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Creating composite destination: {}", compDestName);
0:         return (destinationType == ActiveMQDestination.TOPIC_TYPE) ?
0:             getSession().createTopic(compDestName) : getSession().createQueue(compDestName);
1:     private String[] mapToSimpleNames(String[] destNames) {
1:         assert (destNames != null);
1:         String[] simpleNames = new String[destNames.length];
1:         for (int i = 0; i < destNames.length; i++) {
1:             simpleNames[i] = getSimpleName(destNames[i]);
1:         }
1:         return simpleNames;
1:     }
1: 
0:     private String getSimpleName(String destName) {
1:         String simpleName;
1:         if (destName.startsWith(QUEUE_SCHEME)) {
1:             simpleName = destName.substring(QUEUE_SCHEME.length());
1:         } else if (destName.startsWith(TOPIC_SCHEME)) {
1:             simpleName = destName.substring(TOPIC_SCHEME.length());
1:             simpleName = destName;
1:         }
1:         return simpleName;
1:     }
1: 
0:     private byte getDestinationType(String destName) {
1:         assert (destName != null);
1:         if (destName.startsWith(QUEUE_SCHEME)) {
1:             return ActiveMQDestination.QUEUE_TYPE;
1:         } else {
1:             return ActiveMQDestination.TOPIC_TYPE;
1:         }
1:     }
1: 
1:     protected Destination createDestination(String destName) throws JMSException {
1:         String simpleName = getSimpleName(destName);
0:         if (getDestinationType(destName) == ActiveMQDestination.QUEUE_TYPE) {
1:             return getSession().createQueue(simpleName);
1:         } else {
1:             return getSession().createTopic(simpleName);
commit:47ebd80
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 dest[i] = createDestination(withDestinationSuffix(getClient().getDestName(), i, destCount));
1:     private String withDestinationSuffix(String name, int destIndex, int destCount) {
1:         return (destCount == 1) ? name : name + "." + destIndex;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         String compDestName = "";
1:         for (int i = 0; i < destCount; i++) {
1:             if (i > 0) {
1:                 compDestName += ",";
1:             }
1:             compDestName += withDestinationSuffix(simpleName, i, destCount);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Helper method that checks if session is
1:      * transacted and whether to commit the tx based on commitAfterXMsgs
1:      * property.
1:      *
1:      * @return true if transaction was committed.
1: 
1:         internalTxCounter++;
1:             if ((internalTxCounter % getClient().getCommitAfterXMsgs()) == 0) {
1:                 LOG.debug("Committing transaction.");
1:                 internalTxCounter = 0;
1:                 getSession().commit();
1:                 return true;
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:459be2d
/////////////////////////////////////////////////////////////////////////
1:     
1:     private int internalTxCounter = 0;
/////////////////////////////////////////////////////////////////////////
1:     /** 
0:      * Helper method that checks if session is 
0:      * transacted and whether to commit the tx based on commitAfterXMsgs 
0:      * property. 
1:      * 
0:      * @return true if transaction was committed. 
1:      * @throws JMSException in case the call to JMS Session.commit() fails.
1:      */
1:     public boolean commitTxIfNecessary() throws JMSException {
1:     	
0:     	internalTxCounter++;
1:         if (getClient().isSessTransacted()) {
0:         	if ((internalTxCounter % getClient().getCommitAfterXMsgs()) == 0) {
0:         		LOG.debug("Committing transaction.");
0:         		internalTxCounter = 0;
0:         		getSession().commit();
0:         		return true;
1:         	}
1:         }
1:         return false;
1:     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJmsClient.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
1: 
1: 
0:     private static final Log LOG = LogFactory.getLog(AbstractJmsClient.class);
1:     protected int destCount = 1;
1:     protected int destIndex;
1:     public abstract JmsClientProperties getClient();
1: 
1:     public abstract void setClient(JmsClientProperties client);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Creating JMS Connection: Provider=" + getClient().getJmsProvider() + ", JMS Spec=" + getClient().getJmsVersion());
/////////////////////////////////////////////////////////////////////////
0:             return new Destination[] {
0:                 createCompositeDestination(getClient().getDestName(), destIndex, destCount)
0:             };
0:             for (int i = 0; i < destCount; i++) {
/////////////////////////////////////////////////////////////////////////
0:         for (i = 1; i < destCount - 1; i++) {
0:             compDestName += simpleName + "." + (destIndex + i) + ",";
0:         // Last destination (minus the comma)
0:         compDestName += simpleName + "." + (destIndex + i);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
1: import org.apache.activemq.tool.properties.JmsClientProperties;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Connection;
0: import javax.jms.Session;
0: import javax.jms.JMSException;
0: import javax.jms.Destination;
0: import java.util.Enumeration;
1: 
1: public abstract class AbstractJmsClient {
0:     private static final Log log = LogFactory.getLog(AbstractJmsClient.class);
1: 
1:     protected ConnectionFactory factory;
1:     protected Connection jmsConnection;
1:     protected Session jmsSession;
1: 
0:     protected int destCount = 1, destIndex = 0;
1:     protected String clientName = "";
1: 
1:     public AbstractJmsClient(ConnectionFactory factory) {
1:         this.factory = factory;
1:     }
1: 
0:     abstract public JmsClientProperties getClient();
0:     abstract public void setClient(JmsClientProperties client);
1: 
1:     public ConnectionFactory getFactory() {
1:         return factory;
1:     }
1: 
1:     public void setFactory(ConnectionFactory factory) {
1:         this.factory = factory;
1:     }
1: 
1:     public int getDestCount() {
1:         return destCount;
1:     }
1: 
1:     public void setDestCount(int destCount) {
1:         this.destCount = destCount;
1:     }
1: 
1:     public int getDestIndex() {
1:         return destIndex;
1:     }
1: 
1:     public void setDestIndex(int destIndex) {
1:         this.destIndex = destIndex;
1:     }
1: 
1:     public String getClientName() {
1:         return clientName;
1:     }
1: 
1:     public void setClientName(String clientName) {
1:         this.clientName = clientName;
1:     }
1: 
1:     public Connection getConnection() throws JMSException {
1:         if (jmsConnection == null) {
1:             jmsConnection = factory.createConnection();
1:             jmsConnection.setClientID(getClientName());
0:             log.info("Creating JMS Connection: Provider=" + getClient().getJmsProvider() + ", JMS Spec=" + getClient().getJmsVersion());
1:         }
1:         return jmsConnection;
1:     }
1: 
1:     public Session getSession() throws JMSException {
1:         if (jmsSession == null) {
1:             int ackMode;
1:             if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_AUTO_ACKNOWLEDGE)) {
1:                 ackMode = Session.AUTO_ACKNOWLEDGE;
1:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_CLIENT_ACKNOWLEDGE)) {
1:                 ackMode = Session.CLIENT_ACKNOWLEDGE;
1:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_DUPS_OK_ACKNOWLEDGE)) {
1:                 ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_TRANSACTED)) {
1:                 ackMode = Session.SESSION_TRANSACTED;
1:             } else {
1:                 ackMode = Session.AUTO_ACKNOWLEDGE;
1:             }
1:             jmsSession = getConnection().createSession(getClient().isSessTransacted(), ackMode);
1:         }
1:         return jmsSession;
1:     }
1: 
0:     public Destination[] createDestination(int destIndex, int destCount) throws JMSException {
1: 
0:         if (getClient().isDestComposite()) {
0:             return new Destination[] {createCompositeDestination(getClient().getDestName(), destIndex, destCount)};
1:         } else {
0:             Destination[] dest = new Destination[destCount];
0:             for (int i=0; i<destCount; i++) {
0:                 dest[i] = createDestination(getClient().getDestName() + "." + (destIndex + i));
1:             }
1: 
0:             return dest;
1:         }
1:     }
1: 
0:     public Destination createCompositeDestination(int destIndex, int destCount) throws JMSException {
0:         return createCompositeDestination(getClient().getDestName(), destIndex, destCount);
1:     }
1: 
0:     protected Destination createCompositeDestination(String name, int destIndex, int destCount) throws JMSException {
0:         String compDestName;
0:         String simpleName;
1: 
0:         if (name.startsWith("queue://")) {
0:             simpleName = name.substring("queue://".length());
0:         } else if (name.startsWith("topic://")) {
0:             simpleName = name.substring("topic://".length());
1:         } else {
0:             simpleName = name;
1:         }
1: 
0:         int i;
0:         compDestName = name + "." + destIndex + ","; // First destination
0:         for (i=1; i<destCount-1; i++) {
0:             compDestName += (simpleName + "." + (destIndex + i) +",");
1:         }
0:         compDestName += (simpleName + "." + (destIndex + i)); // Last destination (minus the comma)
1: 
0:         return createDestination(compDestName);
1:     }
1: 
0:     protected Destination createDestination(String name) throws JMSException {
0:         if (name.startsWith("queue://")) {
0:             return getSession().createQueue(name.substring("queue://".length()));
0:         } else if (name.startsWith("topic://")) {
0:             return getSession().createTopic(name.substring("topic://".length()));
1:         } else {
0:             return getSession().createTopic(name);
1:         }
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:cf7ee97
/////////////////////////////////////////////////////////////////////////
0:             jmsConnection.setClientID(getClientName());
commit:ffcbd0c
/////////////////////////////////////////////////////////////////////////
0:             log.info("Creating JMS Connection: Provider=" + getClient().getJmsProvider() + ", JMS Spec=" + getClient().getJmsVersion());
commit:ac86d4d
/////////////////////////////////////////////////////////////////////////
0: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
0:             // Get Connection Metadata
0:             getClient().setJmsProvider(jmsConnection.getMetaData().getJMSProviderName() + " " + jmsConnection.getMetaData().getProviderVersion());
0: 
0:             String jmsProperties = "";
0:             Enumeration props = jmsConnection.getMetaData().getJMSXPropertyNames();
0:             while (props.hasMoreElements()) {
0:                 jmsProperties += (props.nextElement().toString() + ",");
0:             }
0:             if (jmsProperties.length() > 0) {
0:                 // Remove the last comma
0:                 jmsProperties = jmsProperties.substring(0, jmsProperties.length()-1);
0:             }
0:             getClient().setJmsProperties(jmsProperties);
0:                 ", JMS Spec=" + getClient().getJmsVersion() +
0:                 ", JMS Properties=" + getClient().getJmsProperties());
commit:127a36a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(AbstractJmsClient.class);
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:             getClient().setJmsProvider(jmsConnection.getMetaData().getJMSProviderName() + jmsConnection.getMetaData().getProviderVersion());
0:             getClient().setJmsVersion("JMS " + jmsConnection.getMetaData().getJMSVersion());
0:             getClient().setJmsProperties(jmsConnection.getMetaData().getJMSXPropertyNames().toString());
0: 
0:         log.info("Using JMS Connection:" +
0:                 " Provider=" + getClient().getJmsProvider() +
0:                 " JMS Spec=" + getClient().getJmsVersion() +
0:                 " JMS Properties=" + getClient().getJmsProperties());
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import org.apache.activemq.tool.properties.JmsClientProperties;
0: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Connection;
0: import javax.jms.Session;
0: import javax.jms.JMSException;
0: import javax.jms.Destination;
0: 
0: public abstract class AbstractJmsClient {
0:     protected ConnectionFactory factory;
0:     protected Connection jmsConnection;
0:     protected Session jmsSession;
0: 
0:     protected int destCount = 1, destIndex = 0;
0:     protected String clientName = "";
0: 
0:     public AbstractJmsClient(ConnectionFactory factory) {
0:         this.factory = factory;
0:     }
0: 
0:     abstract public JmsClientProperties getClient();
0:     abstract public void setClient(JmsClientProperties client);
0: 
0:     public ConnectionFactory getFactory() {
0:         return factory;
0:     }
0: 
0:     public void setFactory(ConnectionFactory factory) {
0:         this.factory = factory;
0:     }
0: 
0:     public int getDestCount() {
0:         return destCount;
0:     }
0: 
0:     public void setDestCount(int destCount) {
0:         this.destCount = destCount;
0:     }
0: 
0:     public int getDestIndex() {
0:         return destIndex;
0:     }
0: 
0:     public void setDestIndex(int destIndex) {
0:         this.destIndex = destIndex;
0:     }
0: 
0:     public String getClientName() {
0:         return clientName;
0:     }
0: 
0:     public void setClientName(String clientName) {
0:         this.clientName = clientName;
0:     }
0: 
0:     public Connection getConnection() throws JMSException {
0:         if (jmsConnection == null) {
0:             jmsConnection = factory.createConnection();
0:         }
0:         return jmsConnection;
0:     }
0: 
0:     public Session getSession() throws JMSException {
0:         if (jmsSession == null) {
0:             int ackMode;
0:             if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_AUTO_ACKNOWLEDGE)) {
0:                 ackMode = Session.AUTO_ACKNOWLEDGE;
0:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_CLIENT_ACKNOWLEDGE)) {
0:                 ackMode = Session.CLIENT_ACKNOWLEDGE;
0:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_DUPS_OK_ACKNOWLEDGE)) {
0:                 ackMode = Session.DUPS_OK_ACKNOWLEDGE;
0:             } else if (getClient().getSessAckMode().equalsIgnoreCase(JmsClientProperties.SESSION_TRANSACTED)) {
0:                 ackMode = Session.SESSION_TRANSACTED;
0:             } else {
0:                 ackMode = Session.AUTO_ACKNOWLEDGE;
0:             }
0:             jmsSession = getConnection().createSession(getClient().isSessTransacted(), ackMode);
0:         }
0:         return jmsSession;
0:     }
0: 
0:     public Destination[] createDestination(int destIndex, int destCount) throws JMSException {
0: 
0:         if (getClient().isDestComposite()) {
0:             return new Destination[] {createCompositeDestination(getClient().getDestName(), destIndex, destCount)};
0:         } else {
0:             Destination[] dest = new Destination[destCount];
0:             for (int i=0; i<destCount; i++) {
0:                 dest[i] = createDestination(getClient().getDestName() + "." + (destIndex + i));
0:             }
0: 
0:             return dest;
0:         }
0:     }
0: 
0:     public Destination createCompositeDestination(int destIndex, int destCount) throws JMSException {
0:         return createCompositeDestination(getClient().getDestName(), destIndex, destCount);
0:     }
0: 
0:     protected Destination createCompositeDestination(String name, int destIndex, int destCount) throws JMSException {
0:         String compDestName;
0:         String simpleName;
0: 
0:         if (name.startsWith("queue://")) {
0:             simpleName = name.substring("queue://".length());
0:         } else if (name.startsWith("topic://")) {
0:             simpleName = name.substring("topic://".length());
0:         } else {
0:             simpleName = name;
0:         }
0: 
0:         int i;
0:         compDestName = name + "." + destIndex + ","; // First destination
0:         for (i=1; i<destCount-1; i++) {
0:             compDestName += (simpleName + "." + (destIndex + i) +",");
0:         }
0:         compDestName += (simpleName + "." + (destIndex + i)); // Last destination (minus the comma)
0: 
0:         return createDestination(compDestName);
0:     }
0: 
0:     protected Destination createDestination(String name) throws JMSException {
0:         if (name.startsWith("queue://")) {
0:             return getSession().createQueue(name.substring("queue://".length()));
0:         } else if (name.startsWith("topic://")) {
0:             return getSession().createTopic(name.substring("topic://".length()));
0:         } else {
0:             return getSession().createTopic(name);
0:         }
0:     }
0: 
0: }
============================================================================