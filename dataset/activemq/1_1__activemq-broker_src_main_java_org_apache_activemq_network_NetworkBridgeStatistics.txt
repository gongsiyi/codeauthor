1:10c998b: /**
1:10c998b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:10c998b:  * contributor license agreements.  See the NOTICE file distributed with
1:10c998b:  * this work for additional information regarding copyright ownership.
1:10c998b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:10c998b:  * (the "License"); you may not use this file except in compliance with
1:10c998b:  * the License.  You may obtain a copy of the License at
1:10c998b:  *
1:10c998b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:10c998b:  *
1:10c998b:  * Unless required by applicable law or agreed to in writing, software
1:10c998b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:10c998b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10c998b:  * See the License for the specific language governing permissions and
1:10c998b:  * limitations under the License.
1:10c998b:  */
1:10c998b: 
1:10c998b: package org.apache.activemq.network;
1:10c998b: 
1:10c998b: import org.apache.activemq.management.CountStatisticImpl;
1:10c998b: import org.apache.activemq.management.StatsImpl;
1:10c998b: 
1:10c998b: /**
1:7b7e362:  * The Statistics for a NetworkBridge.
1:10c998b:  */
1:10c998b: public class NetworkBridgeStatistics extends StatsImpl {
1:10c998b: 
1:10c998b:     protected CountStatisticImpl enqueues;
1:10c998b:     protected CountStatisticImpl dequeues;
1:10c998b:     protected CountStatisticImpl receivedCount;
1:10c998b: 
1:10c998b:     public NetworkBridgeStatistics() {
1:10c998b:         enqueues = new CountStatisticImpl("enqueues", "The current number of enqueues this bridge has, which is the number of potential messages to be forwarded.");
1:10c998b:         dequeues = new CountStatisticImpl("dequeues", "The current number of dequeues this bridge has, which is the number of messages received by the remote broker.");
1:10c998b:         receivedCount = new CountStatisticImpl("receivedCount", "The number of messages that have been received by the NetworkBridge from the remote broker.  Only applies for Duplex bridges.");
1:10c998b: 
1:10c998b:         addStatistic("enqueues", enqueues);
1:10c998b:         addStatistic("dequeues", dequeues);
1:10c998b:         addStatistic("receivedCount", receivedCount);
1:10c998b:     }
1:10c998b: 
1:10c998b:     /**
1:10c998b:      * The current number of enqueues this bridge has, which is the number of potential messages to be forwarded
1:10c998b:      * Messages may not be forwarded if there is no subscription
1:10c998b:      *
1:10c998b:      * @return
1:10c998b:      */
1:10c998b:     public CountStatisticImpl getEnqueues() {
1:10c998b:         return enqueues;
1:10c998b:     }
1:10c998b: 
1:10c998b:     /**
1:10c998b:      * The current number of dequeues this bridge has, which is the number of
1:10c998b:      * messages actually sent to and received by the remote broker.
1:10c998b:      *
1:10c998b:      * @return
1:10c998b:      */
1:10c998b:     public CountStatisticImpl getDequeues() {
1:10c998b:         return dequeues;
1:10c998b:     }
1:10c998b: 
1:10c998b:     /**
1:10c998b:      * The number of messages that have been received by the NetworkBridge from the remote broker.
1:10c998b:      * Only applies for Duplex bridges.
1:10c998b:      *
1:10c998b:      * @return
1:10c998b:      */
1:10c998b:     public CountStatisticImpl getReceivedCount() {
1:10c998b:         return receivedCount;
1:10c998b:     }
1:10c998b: 
1:10c998b:     @Override
1:10c998b:     public void reset() {
1:10c998b:         if (this.isDoReset()) {
1:10c998b:             super.reset();
1:10c998b:             enqueues.reset();
1:10c998b:             dequeues.reset();
1:10c998b:             receivedCount.reset();
1:10c998b:         }
1:10c998b:     }
1:10c998b: 
1:10c998b:     @Override
1:10c998b:     public void setEnabled(boolean enabled) {
1:10c998b:         super.setEnabled(enabled);
1:10c998b:         enqueues.setEnabled(enabled);
1:10c998b:         dequeues.setEnabled(enabled);
1:10c998b:         receivedCount.setEnabled(enabled);
1:10c998b:     }
1:10c998b: 
1:10c998b:     public void setParent(NetworkBridgeStatistics parent) {
1:10c998b:         if (parent != null) {
1:10c998b:             enqueues.setParent(parent.enqueues);
1:10c998b:             dequeues.setParent(parent.dequeues);
1:10c998b:             receivedCount.setParent(parent.receivedCount);
1:10c998b:         } else {
1:10c998b:             enqueues.setParent(null);
1:10c998b:             dequeues.setParent(null);
1:10c998b:             receivedCount.setParent(null);
1:10c998b:         }
1:10c998b:     }
1:10c998b: 
1:10c998b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:7b7e362
/////////////////////////////////////////////////////////////////////////
1:  * The Statistics for a NetworkBridge.
commit:10c998b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.management.CountStatisticImpl;
1: import org.apache.activemq.management.StatsImpl;
1: 
1: /**
0:  * The Statistics for a NewtorkBridge.
1:  */
1: public class NetworkBridgeStatistics extends StatsImpl {
1: 
1:     protected CountStatisticImpl enqueues;
1:     protected CountStatisticImpl dequeues;
1:     protected CountStatisticImpl receivedCount;
1: 
1:     public NetworkBridgeStatistics() {
1:         enqueues = new CountStatisticImpl("enqueues", "The current number of enqueues this bridge has, which is the number of potential messages to be forwarded.");
1:         dequeues = new CountStatisticImpl("dequeues", "The current number of dequeues this bridge has, which is the number of messages received by the remote broker.");
1:         receivedCount = new CountStatisticImpl("receivedCount", "The number of messages that have been received by the NetworkBridge from the remote broker.  Only applies for Duplex bridges.");
1: 
1:         addStatistic("enqueues", enqueues);
1:         addStatistic("dequeues", dequeues);
1:         addStatistic("receivedCount", receivedCount);
1:     }
1: 
1:     /**
1:      * The current number of enqueues this bridge has, which is the number of potential messages to be forwarded
1:      * Messages may not be forwarded if there is no subscription
1:      *
1:      * @return
1:      */
1:     public CountStatisticImpl getEnqueues() {
1:         return enqueues;
1:     }
1: 
1:     /**
1:      * The current number of dequeues this bridge has, which is the number of
1:      * messages actually sent to and received by the remote broker.
1:      *
1:      * @return
1:      */
1:     public CountStatisticImpl getDequeues() {
1:         return dequeues;
1:     }
1: 
1:     /**
1:      * The number of messages that have been received by the NetworkBridge from the remote broker.
1:      * Only applies for Duplex bridges.
1:      *
1:      * @return
1:      */
1:     public CountStatisticImpl getReceivedCount() {
1:         return receivedCount;
1:     }
1: 
1:     @Override
1:     public void reset() {
1:         if (this.isDoReset()) {
1:             super.reset();
1:             enqueues.reset();
1:             dequeues.reset();
1:             receivedCount.reset();
1:         }
1:     }
1: 
1:     @Override
1:     public void setEnabled(boolean enabled) {
1:         super.setEnabled(enabled);
1:         enqueues.setEnabled(enabled);
1:         dequeues.setEnabled(enabled);
1:         receivedCount.setEnabled(enabled);
1:     }
1: 
1:     public void setParent(NetworkBridgeStatistics parent) {
1:         if (parent != null) {
1:             enqueues.setParent(parent.enqueues);
1:             dequeues.setParent(parent.dequeues);
1:             receivedCount.setParent(parent.receivedCount);
1:         } else {
1:             enqueues.setParent(null);
1:             dequeues.setParent(null);
1:             receivedCount.setParent(null);
1:         }
1:     }
1: 
1: }
============================================================================