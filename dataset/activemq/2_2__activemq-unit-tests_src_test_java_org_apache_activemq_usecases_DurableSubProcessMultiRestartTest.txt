1:13e5777: /**
1:13e5777:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:13e5777:  * contributor license agreements.  See the NOTICE file distributed with
1:13e5777:  * this work for additional information regarding copyright ownership.
1:13e5777:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:13e5777:  * (the "License"); you may not use this file except in compliance with
1:13e5777:  * the License.  You may obtain a copy of the License at
1:13e5777:  *
1:13e5777:  *      http://www.apache.org/licenses/LICENSE-2.0
1:13e5777:  *
1:13e5777:  * Unless required by applicable law or agreed to in writing, software
1:13e5777:  * distributed under the License is distributed on an "AS IS" BASIS,
1:13e5777:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:13e5777:  * See the License for the specific language governing permissions and
1:13e5777:  * limitations under the License.
1:13e5777:  */
1:13e5777: 
1:13e5777: package org.apache.activemq.usecases;
1:13e5777: 
1:13e5777: import static org.junit.Assert.assertTrue;
1:13e5777: import static org.junit.Assert.fail;
1:13e5777: 
1:13e5777: import java.io.File;
1:89446c7: import java.io.IOException;
1:13e5777: import java.util.Vector;
1:13e5777: import java.util.concurrent.TimeUnit;
1:13e5777: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:13e5777: 
1:13e5777: import javax.jms.Connection;
1:13e5777: import javax.jms.ConnectionFactory;
1:13e5777: import javax.jms.JMSException;
1:13e5777: import javax.jms.Message;
1:13e5777: import javax.jms.MessageConsumer;
1:13e5777: import javax.jms.MessageProducer;
1:13e5777: import javax.jms.Session;
1:13e5777: 
1:13e5777: import org.apache.activemq.ActiveMQConnectionFactory;
1:13e5777: import org.apache.activemq.broker.BrokerFactory;
1:13e5777: import org.apache.activemq.broker.BrokerService;
1:13e5777: import org.apache.activemq.command.ActiveMQTopic;
1:13e5777: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:89446c7: import org.apache.activemq.transport.InactivityIOException;
1:13e5777: import org.apache.activemq.util.Wait;
1:13e5777: import org.junit.After;
1:13e5777: import org.junit.Before;
1:13e5777: import org.junit.Test;
1:13e5777: import org.slf4j.Logger;
1:13e5777: import org.slf4j.LoggerFactory;
1:13e5777: 
1:13e5777: public class DurableSubProcessMultiRestartTest {
1:13e5777:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubProcessMultiRestartTest.class);
1:13e5777: 
1:13e5777:     public static final long RUNTIME = 1 * 60 * 1000;
1:13e5777: 
1:13e5777:     private BrokerService broker;
1:13e5777:     private ActiveMQTopic topic;
1:13e5777: 
1:13e5777:     private final ReentrantReadWriteLock processLock = new ReentrantReadWriteLock(true);
1:13e5777: 
1:13e5777:     private int restartCount = 0;
1:13e5777:     private final int SUBSCRIPTION_ID = 1;
1:13e5777: 
1:13e5777:     static final Vector<Throwable> exceptions = new Vector<Throwable>();
1:13e5777: 
1:13e5777:     /**
1:13e5777:      * The test creates a durable subscriber and producer with a broker that is
1:13e5777:      * continually restarted.
1:13e5777:      *
1:13e5777:      * Producer creates a message every .5 seconds -creates a new connection for
1:13e5777:      * each message
1:13e5777:      *
1:13e5777:      * durable subscriber - comes online for 10 seconds, - then goes offline for
1:13e5777:      * a "moment" - repeats the cycle
1:13e5777:      *
1:13e5777:      * approx every 10 seconds the broker restarts. Subscriber and Producer
1:13e5777:      * connections will be closed BEFORE the restart.
1:13e5777:      *
1:13e5777:      * The Durable subscriber is "unsubscribed" before the the end of the test.
1:13e5777:      *
1:13e5777:      * checks for number of kahaDB files left on filesystem.
1:13e5777:      *
1:13e5777:      * @throws Exception
1:13e5777:      */
1:13e5777:     @Test
1:13e5777:     public void testProcess() throws Exception {
1:13e5777: 
1:13e5777:         DurableSubscriber durableSubscriber = new DurableSubscriber(SUBSCRIPTION_ID);
1:13e5777:         MsgProducer msgProducer = new MsgProducer();
1:13e5777: 
1:13e5777:         try {
1:13e5777:             // register the subscription & start messages
1:13e5777:             durableSubscriber.start();
1:13e5777:             msgProducer.start();
1:13e5777: 
1:13e5777:             long endTime = System.currentTimeMillis() + RUNTIME;
1:13e5777: 
1:13e5777:             while (endTime > System.currentTimeMillis()) {
1:13e5777:                 Thread.sleep(10000);
1:13e5777:                 restartBroker();
1:13e5777:             }
1:13e5777:         } catch (Throwable e) {
1:13e5777:             exit("ProcessTest.testProcess failed.", e);
1:13e5777:         }
1:13e5777: 
1:13e5777:         // wait for threads to finish
1:13e5777:         try {
1:13e5777:             msgProducer.join();
1:13e5777:             durableSubscriber.join();
1:13e5777:         } catch (InterruptedException e) {
1:13e5777:             e.printStackTrace(System.out);
1:13e5777:         }
1:13e5777: 
1:13e5777:         // restart broker one last time
1:13e5777:         restartBroker();
1:13e5777: 
1:13e5777:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:13e5777: 
1:13e5777:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:9079095:         assertTrue("only less than two journal files should be left: " + pa.getStore().getJournal().getFileMap().size(),
1:13e5777:             Wait.waitFor(new Wait.Condition() {
1:13e5777: 
1:13e5777:                 @Override
1:13e5777:                 public boolean isSatisified() throws Exception {
1:9079095:                     return pa.getStore().getJournal().getFileMap().size() <= 2;
1:13e5777:                 }
1:13e5777:             }, TimeUnit.MINUTES.toMillis(3))
1:13e5777:         );
1:13e5777: 
1:13e5777:         LOG.info("DONE.");
1:13e5777:     }
1:13e5777: 
1:13e5777:     private void restartBroker() throws Exception {
1:13e5777:         LOG.info("Broker restart: waiting for components.");
1:13e5777: 
1:13e5777:         processLock.writeLock().lock();
1:13e5777:         try {
1:13e5777:             destroyBroker();
1:13e5777:             startBroker(false);
1:13e5777: 
1:13e5777:             restartCount++;
1:13e5777:             LOG.info("Broker restarted. count: " + restartCount);
1:13e5777:         } finally {
1:13e5777:             processLock.writeLock().unlock();
1:13e5777:         }
1:13e5777:     }
1:13e5777: 
1:13e5777:     /**
1:13e5777:      * Producers messages
1:13e5777:      *
1:13e5777:      */
1:13e5777:     final class MsgProducer extends Thread {
1:13e5777: 
1:13e5777:         String url = "vm://" + DurableSubProcessMultiRestartTest.getName();
1:13e5777: 
1:13e5777:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1:13e5777: 
1:13e5777:         private long msgCount;
1:13e5777:         int messageRover = 0;
1:13e5777: 
1:13e5777:         public MsgProducer() {
1:13e5777:             super("MsgProducer");
1:13e5777:             setDaemon(true);
1:13e5777:         }
1:13e5777: 
1:13e5777:         @Override
1:13e5777:         public void run() {
1:13e5777: 
1:13e5777:             long endTime = RUNTIME + System.currentTimeMillis();
1:13e5777: 
1:13e5777:             try {
1:13e5777:                 while (endTime > System.currentTimeMillis()) {
1:13e5777: 
1:13e5777:                     Thread.sleep(500);
1:13e5777: 
1:13e5777:                     processLock.readLock().lock();
1:13e5777:                     try {
1:13e5777:                         send();
1:13e5777:                     } finally {
1:13e5777:                         processLock.readLock().unlock();
1:13e5777:                     }
1:13e5777:                     LOG.info("MsgProducer msgCount=" + msgCount);
1:13e5777:                 }
1:13e5777:             } catch (Throwable e) {
1:13e5777:                 exit("Server.run failed", e);
1:13e5777:             }
1:13e5777:         }
1:13e5777: 
1:13e5777:         public void send() throws JMSException {
1:13e5777: 
1:13e5777:             LOG.info("Sending ... ");
1:13e5777: 
1:13e5777:             Connection con = cf.createConnection();
1:13e5777: 
1:13e5777:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13e5777: 
1:13e5777:             MessageProducer prod = sess.createProducer(null);
1:13e5777:             Message message = sess.createMessage();
1:13e5777:             message.setIntProperty("ID", ++messageRover);
1:13e5777:             message.setBooleanProperty("COMMIT", true);
1:13e5777:             prod.send(topic, message);
1:13e5777: 
1:13e5777:             msgCount++;
1:13e5777:             LOG.info("Message Sent.");
1:13e5777: 
1:13e5777:             sess.close();
1:13e5777:             con.close();
1:13e5777:         }
1:13e5777:     }
1:13e5777: 
1:13e5777:     /**
1:13e5777:      * Consumes massages from a durable subscription. Goes online/offline
1:13e5777:      * periodically.
1:13e5777:      */
1:13e5777:     private final class DurableSubscriber extends Thread {
1:13e5777: 
1:13e5777:         String url = "tcp://localhost:61656";
1:13e5777: 
1:13e5777:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1:13e5777: 
1:13e5777:         public static final String SUBSCRIPTION_NAME = "subscription";
1:13e5777: 
1:13e5777:         private final int id;
1:13e5777:         private final String conClientId;
1:13e5777:         private long msgCount;
1:13e5777: 
1:13e5777:         public DurableSubscriber(int id) throws JMSException {
1:13e5777:             super("DurableSubscriber" + id);
1:13e5777:             setDaemon(true);
1:13e5777: 
1:13e5777:             this.id = id;
1:13e5777:             conClientId = "cli" + id;
1:13e5777: 
1:13e5777:             subscribe();
1:13e5777:         }
1:13e5777: 
1:13e5777:         @Override
1:13e5777:         public void run() {
1:13e5777: 
1:13e5777:             long end = System.currentTimeMillis() + RUNTIME;
1:13e5777: 
1:13e5777:             try {
1:13e5777: 
1:13e5777:                 // while (true) {
1:13e5777:                 while (end > System.currentTimeMillis()) {
1:13e5777: 
1:13e5777:                     processLock.readLock().lock();
1:13e5777:                     try {
1:13e5777:                         process(5000);
1:13e5777:                     } finally {
1:13e5777:                         processLock.readLock().unlock();
1:13e5777:                     }
1:13e5777:                 }
1:13e5777: 
1:13e5777:                 unsubscribe();
1:13e5777: 
1:89446c7:             } catch (JMSException maybe) {
1:89446c7:                 if (maybe.getCause() instanceof IOException) {
1:89446c7:                     // ok on broker shutdown;
1:89446c7:                 } else {
1:89446c7:                     exit(toString() + " failed with JMSException", maybe);
1:89446c7:                 }
1:13e5777:             } catch (Throwable e) {
1:13e5777:                 exit(toString() + " failed.", e);
1:13e5777:             }
1:13e5777: 
1:13e5777:             LOG.info(toString() + " DONE. MsgCout=" + msgCount);
1:13e5777:         }
1:13e5777: 
1:13e5777:         private void process(long duration) throws JMSException {
1:13e5777:             LOG.info(toString() + " ONLINE.");
1:13e5777: 
1:13e5777:             Connection con = openConnection();
1:13e5777:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13e5777: 
1:13e5777:             MessageConsumer consumer = sess.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1:13e5777: 
1:13e5777:             long end = System.currentTimeMillis() + duration;
1:13e5777: 
1:13e5777:             try {
1:13e5777:                 while (end > System.currentTimeMillis()) {
1:13e5777:                     Message message = consumer.receive(100);
1:13e5777:                     if (message != null) {
1:13e5777:                         LOG.info(toString() + "received message...");
1:13e5777:                         msgCount++;
1:13e5777:                     }
1:13e5777:                 }
1:13e5777:             } finally {
1:13e5777:                 sess.close();
1:13e5777:                 con.close();
1:13e5777:                 LOG.info(toString() + " OFFLINE.");
1:13e5777:             }
1:13e5777:         }
1:13e5777: 
1:13e5777:         private Connection openConnection() throws JMSException {
1:13e5777:             Connection con = cf.createConnection();
1:13e5777:             con.setClientID(conClientId);
1:13e5777:             con.start();
1:13e5777:             return con;
1:13e5777:         }
1:13e5777: 
1:13e5777:         private void subscribe() throws JMSException {
1:13e5777:             Connection con = openConnection();
1:13e5777:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13e5777: 
1:13e5777:             session.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1:13e5777:             LOG.info(toString() + " SUBSCRIBED");
1:13e5777: 
1:13e5777:             session.close();
1:13e5777:             con.close();
1:13e5777:         }
1:13e5777: 
1:13e5777:         private void unsubscribe() throws JMSException {
1:13e5777:             Connection con = openConnection();
1:13e5777:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13e5777:             session.unsubscribe(SUBSCRIPTION_NAME);
1:13e5777:             LOG.info(toString() + " UNSUBSCRIBED");
1:13e5777: 
1:13e5777:             session.close();
1:13e5777:             con.close();
1:13e5777:         }
1:13e5777: 
1:13e5777:         @Override
1:13e5777:         public String toString() {
1:13e5777:             return "DurableSubscriber[id=" + id + "]";
1:13e5777:         }
1:13e5777:     }
1:13e5777: 
1:13e5777:     // -------- helper methods -----------
1:13e5777: 
1:13e5777:     public static void exit(String message) {
1:13e5777:         exit(message, null);
1:13e5777:     }
1:13e5777: 
1:13e5777:     public static void exit(String message, Throwable e) {
1:13e5777:         Throwable cause = new RuntimeException(message, e);
1:13e5777:         LOG.error(message, cause);
1:13e5777:         exceptions.add(cause);
1:13e5777:         fail(cause.toString());
1:13e5777:     }
1:13e5777: 
1:13e5777:     @Before
1:13e5777:     public void setUp() throws Exception {
1:13e5777:         topic = new ActiveMQTopic("TopicT");
1:13e5777:         startBroker();
1:13e5777:     }
1:13e5777: 
1:13e5777:     @After
1:13e5777:     public void tearDown() throws Exception {
1:13e5777:         destroyBroker();
1:13e5777:     }
1:13e5777: 
1:13e5777:     private void startBroker() throws Exception {
1:13e5777:         startBroker(true);
1:13e5777:     }
1:13e5777: 
1:13e5777:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:13e5777:         if (broker != null)
1:13e5777:             return;
1:13e5777: 
1:13e5777:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:13e5777:         broker.setBrokerName(getName());
1:13e5777:         broker.setAdvisorySupport(false);
1:13e5777:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:13e5777: 
1:13e5777:         broker.setKeepDurableSubsActive(true);
1:13e5777: 
1:13e5777:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
1:13e5777:         if (deleteAllMessages)
1:13e5777:             delete(kahadbData);
1:13e5777: 
1:13e5777:         broker.setPersistent(true);
1:13e5777:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:13e5777:         kahadb.setDirectory(kahadbData);
1:13e5777:         kahadb.setJournalMaxFileLength(20 * 1024);
1:13e5777:         broker.setPersistenceAdapter(kahadb);
1:13e5777: 
1:13e5777:         broker.addConnector("tcp://localhost:61656");
1:13e5777: 
1:13e5777:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:13e5777:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:13e5777:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1:13e5777: 
1:13e5777:         broker.start();
1:13e5777:     }
1:13e5777: 
1:13e5777:     protected static String getName() {
1:13e5777:         return "DurableSubProcessMultiRestartTest";
1:13e5777:     }
1:13e5777: 
1:13e5777:     private static boolean delete(File path) {
1:13e5777:         if (path == null)
1:13e5777:             return true;
1:13e5777: 
1:13e5777:         if (path.isDirectory()) {
1:13e5777:             for (File file : path.listFiles()) {
1:13e5777:                 delete(file);
1:13e5777:             }
1:13e5777:         }
1:13e5777:         return path.delete();
1:13e5777:     }
1:13e5777: 
1:13e5777:     private void destroyBroker() throws Exception {
1:13e5777:         if (broker == null)
1:13e5777:             return;
1:13e5777: 
1:13e5777:         broker.stop();
1:13e5777:         broker = null;
1:13e5777:     }
1:13e5777: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:89446c7
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.InactivityIOException;
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException maybe) {
1:                 if (maybe.getCause() instanceof IOException) {
1:                     // ok on broker shutdown;
1:                 } else {
1:                     exit(toString() + " failed with JMSException", maybe);
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9079095
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("only less than two journal files should be left: " + pa.getStore().getJournal().getFileMap().size(),
1:                     return pa.getStore().getJournal().getFileMap().size() <= 2;
commit:f551570
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("only two journal files should be left: " + pa.getStore().getJournal().getFileMap().size(),
0:                     return pa.getStore().getJournal().getFileMap().size() == 2;
commit:13e5777
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.util.Vector;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubProcessMultiRestartTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubProcessMultiRestartTest.class);
1: 
1:     public static final long RUNTIME = 1 * 60 * 1000;
1: 
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
1: 
1:     private final ReentrantReadWriteLock processLock = new ReentrantReadWriteLock(true);
1: 
1:     private int restartCount = 0;
1:     private final int SUBSCRIPTION_ID = 1;
1: 
1:     static final Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     /**
1:      * The test creates a durable subscriber and producer with a broker that is
1:      * continually restarted.
1:      *
1:      * Producer creates a message every .5 seconds -creates a new connection for
1:      * each message
1:      *
1:      * durable subscriber - comes online for 10 seconds, - then goes offline for
1:      * a "moment" - repeats the cycle
1:      *
1:      * approx every 10 seconds the broker restarts. Subscriber and Producer
1:      * connections will be closed BEFORE the restart.
1:      *
1:      * The Durable subscriber is "unsubscribed" before the the end of the test.
1:      *
1:      * checks for number of kahaDB files left on filesystem.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testProcess() throws Exception {
1: 
1:         DurableSubscriber durableSubscriber = new DurableSubscriber(SUBSCRIPTION_ID);
1:         MsgProducer msgProducer = new MsgProducer();
1: 
1:         try {
1:             // register the subscription & start messages
1:             durableSubscriber.start();
1:             msgProducer.start();
1: 
1:             long endTime = System.currentTimeMillis() + RUNTIME;
1: 
1:             while (endTime > System.currentTimeMillis()) {
1:                 Thread.sleep(10000);
1:                 restartBroker();
1:             }
1:         } catch (Throwable e) {
1:             exit("ProcessTest.testProcess failed.", e);
1:         }
1: 
1:         // wait for threads to finish
1:         try {
1:             msgProducer.join();
1:             durableSubscriber.join();
1:         } catch (InterruptedException e) {
1:             e.printStackTrace(System.out);
1:         }
1: 
1:         // restart broker one last time
1:         restartBroker();
1: 
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1: 
1:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         assertTrue("only one journal file should be left: " + pa.getStore().getJournal().getFileMap().size(),
1:             Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
0:                     return pa.getStore().getJournal().getFileMap().size() == 1;
1:                 }
1:             }, TimeUnit.MINUTES.toMillis(3))
1:         );
1: 
1:         LOG.info("DONE.");
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         LOG.info("Broker restart: waiting for components.");
1: 
1:         processLock.writeLock().lock();
1:         try {
1:             destroyBroker();
1:             startBroker(false);
1: 
1:             restartCount++;
1:             LOG.info("Broker restarted. count: " + restartCount);
1:         } finally {
1:             processLock.writeLock().unlock();
1:         }
1:     }
1: 
1:     /**
1:      * Producers messages
1:      *
1:      */
1:     final class MsgProducer extends Thread {
1: 
1:         String url = "vm://" + DurableSubProcessMultiRestartTest.getName();
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
1:         private long msgCount;
1:         int messageRover = 0;
1: 
1:         public MsgProducer() {
1:             super("MsgProducer");
1:             setDaemon(true);
1:         }
1: 
1:         @Override
1:         public void run() {
1: 
1:             long endTime = RUNTIME + System.currentTimeMillis();
1: 
1:             try {
1:                 while (endTime > System.currentTimeMillis()) {
1: 
1:                     Thread.sleep(500);
1: 
1:                     processLock.readLock().lock();
1:                     try {
1:                         send();
1:                     } finally {
1:                         processLock.readLock().unlock();
1:                     }
1:                     LOG.info("MsgProducer msgCount=" + msgCount);
1:                 }
1:             } catch (Throwable e) {
1:                 exit("Server.run failed", e);
1:             }
1:         }
1: 
1:         public void send() throws JMSException {
1: 
1:             LOG.info("Sending ... ");
1: 
1:             Connection con = cf.createConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             MessageProducer prod = sess.createProducer(null);
1:             Message message = sess.createMessage();
1:             message.setIntProperty("ID", ++messageRover);
1:             message.setBooleanProperty("COMMIT", true);
1:             prod.send(topic, message);
1: 
1:             msgCount++;
1:             LOG.info("Message Sent.");
1: 
1:             sess.close();
1:             con.close();
1:         }
1:     }
1: 
1:     /**
1:      * Consumes massages from a durable subscription. Goes online/offline
1:      * periodically.
1:      */
1:     private final class DurableSubscriber extends Thread {
1: 
1:         String url = "tcp://localhost:61656";
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
1:         public static final String SUBSCRIPTION_NAME = "subscription";
1: 
1:         private final int id;
1:         private final String conClientId;
1:         private long msgCount;
1: 
1:         public DurableSubscriber(int id) throws JMSException {
1:             super("DurableSubscriber" + id);
1:             setDaemon(true);
1: 
1:             this.id = id;
1:             conClientId = "cli" + id;
1: 
1:             subscribe();
1:         }
1: 
1:         @Override
1:         public void run() {
1: 
1:             long end = System.currentTimeMillis() + RUNTIME;
1: 
1:             try {
1: 
1:                 // while (true) {
1:                 while (end > System.currentTimeMillis()) {
1: 
1:                     processLock.readLock().lock();
1:                     try {
1:                         process(5000);
1:                     } finally {
1:                         processLock.readLock().unlock();
1:                     }
1:                 }
1: 
1:                 unsubscribe();
1: 
1:             } catch (Throwable e) {
1:                 exit(toString() + " failed.", e);
1:             }
1: 
1:             LOG.info(toString() + " DONE. MsgCout=" + msgCount);
1:         }
1: 
1:         private void process(long duration) throws JMSException {
1:             LOG.info(toString() + " ONLINE.");
1: 
1:             Connection con = openConnection();
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             MessageConsumer consumer = sess.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1: 
1:             long end = System.currentTimeMillis() + duration;
1: 
1:             try {
1:                 while (end > System.currentTimeMillis()) {
1:                     Message message = consumer.receive(100);
1:                     if (message != null) {
1:                         LOG.info(toString() + "received message...");
1:                         msgCount++;
1:                     }
1:                 }
1:             } finally {
1:                 sess.close();
1:                 con.close();
1:                 LOG.info(toString() + " OFFLINE.");
1:             }
1:         }
1: 
1:         private Connection openConnection() throws JMSException {
1:             Connection con = cf.createConnection();
1:             con.setClientID(conClientId);
1:             con.start();
1:             return con;
1:         }
1: 
1:         private void subscribe() throws JMSException {
1:             Connection con = openConnection();
1:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             session.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1:             LOG.info(toString() + " SUBSCRIBED");
1: 
1:             session.close();
1:             con.close();
1:         }
1: 
1:         private void unsubscribe() throws JMSException {
1:             Connection con = openConnection();
1:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.unsubscribe(SUBSCRIPTION_NAME);
1:             LOG.info(toString() + " UNSUBSCRIBED");
1: 
1:             session.close();
1:             con.close();
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             return "DurableSubscriber[id=" + id + "]";
1:         }
1:     }
1: 
1:     // -------- helper methods -----------
1: 
1:     public static void exit(String message) {
1:         exit(message, null);
1:     }
1: 
1:     public static void exit(String message, Throwable e) {
1:         Throwable cause = new RuntimeException(message, e);
1:         LOG.error(message, cause);
1:         exceptions.add(cause);
1:         fail(cause.toString());
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         topic = new ActiveMQTopic("TopicT");
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         destroyBroker();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         startBroker(true);
1:     }
1: 
1:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:         if (broker != null)
1:             return;
1: 
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:         broker.setBrokerName(getName());
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1: 
1:         broker.setKeepDurableSubsActive(true);
1: 
1:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
1:         if (deleteAllMessages)
1:             delete(kahadbData);
1: 
1:         broker.setPersistent(true);
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:         kahadb.setDirectory(kahadbData);
1:         kahadb.setJournalMaxFileLength(20 * 1024);
1:         broker.setPersistenceAdapter(kahadb);
1: 
1:         broker.addConnector("tcp://localhost:61656");
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1: 
1:         broker.start();
1:     }
1: 
1:     protected static String getName() {
1:         return "DurableSubProcessMultiRestartTest";
1:     }
1: 
1:     private static boolean delete(File path) {
1:         if (path == null)
1:             return true;
1: 
1:         if (path.isDirectory()) {
1:             for (File file : path.listFiles()) {
1:                 delete(file);
1:             }
1:         }
1:         return path.delete();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker == null)
1:             return;
1: 
1:         broker.stop();
1:         broker = null;
1:     }
1: }
============================================================================