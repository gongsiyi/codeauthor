1:d717a49: /**
1:d717a49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d717a49:  * contributor license agreements.  See the NOTICE file distributed with
1:d717a49:  * this work for additional information regarding copyright ownership.
1:d717a49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d717a49:  * (the "License"); you may not use this file except in compliance with
1:d717a49:  * the License.  You may obtain a copy of the License at
1:d717a49:  *
1:d717a49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d717a49:  *
1:d717a49:  * Unless required by applicable law or agreed to in writing, software
1:d717a49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d717a49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d717a49:  * See the License for the specific language governing permissions and
1:d717a49:  * limitations under the License.
1:d717a49:  */
1:d717a49: package org.apache.activemq.bugs;
1:d717a49: 
1:d717a49: import static org.junit.Assert.*;
1:d717a49: 
1:d717a49: import java.io.ByteArrayOutputStream;
1:d717a49: import java.io.DataOutputStream;
1:d717a49: import java.io.IOException;
1:d717a49: 
1:d717a49: import javax.jms.Connection;
1:d717a49: import javax.jms.ConnectionFactory;
1:d717a49: import javax.jms.Destination;
1:d717a49: import javax.jms.MessageConsumer;
1:d717a49: import javax.jms.MessageProducer;
1:d717a49: import javax.jms.Session;
1:d717a49: import javax.jms.TextMessage;
1:d717a49: import javax.jms.XAConnection;
1:d717a49: import javax.jms.XAConnectionFactory;
1:d717a49: import javax.jms.XASession;
1:d717a49: import javax.transaction.xa.XAResource;
1:d717a49: import javax.transaction.xa.Xid;
1:d717a49: 
1:d717a49: import org.apache.activemq.ActiveMQConnectionFactory;
1:d717a49: import org.apache.activemq.ActiveMQMessageProducer;
1:d717a49: import org.apache.activemq.ActiveMQSession;
1:d717a49: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:d717a49: import org.apache.activemq.broker.BrokerService;
1:d717a49: import org.apache.activemq.command.ActiveMQQueue;
1:d717a49: import org.apache.activemq.command.ActiveMQTextMessage;
1:d717a49: import org.junit.After;
1:d717a49: import org.junit.Before;
1:d717a49: import org.junit.Test;
1:d717a49: 
1:d717a49: public class AMQ3465Test
1:d717a49: {
1:d717a49:     private final String xaDestinationName = "DestinationXA";
1:d717a49:     private final String destinationName = "Destination";
1:d717a49:     private BrokerService broker;
1:d717a49:     private String connectionUri;
1:d717a49:     private long txGenerator = System.currentTimeMillis();
1:d717a49: 
1:d717a49:     private XAConnectionFactory xaConnectionFactory;
1:d717a49:     private ConnectionFactory connectionFactory;
1:d717a49: 
1:d717a49:     @Before
1:d717a49:     public void startBroker() throws Exception {
1:d717a49:         broker = new BrokerService();
1:d717a49:         broker.setDeleteAllMessagesOnStartup(true);
1:d717a49:         broker.setPersistent(false);
1:d717a49:         broker.setUseJmx(false);
1:d717a49:         broker.addConnector("tcp://0.0.0.0:0");
1:d717a49:         broker.start();
1:d717a49:         broker.waitUntilStarted();
1:d717a49: 
1:d717a49:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:d717a49: 
1:d717a49:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:d717a49:         xaConnectionFactory = new ActiveMQXAConnectionFactory(connectionUri);
1:d717a49:     }
1:d717a49: 
1:d717a49:     @After
1:d717a49:     public void stopBroker() throws Exception {
1:d717a49:         broker.stop();
1:d717a49:         broker.waitUntilStopped();
1:d717a49:     }
1:d717a49: 
1:d717a49:    @Test
1:d717a49:    public void testMixedXAandNonXAorTXSessions() throws Exception {
1:d717a49: 
1:d717a49:        XAConnection xaConnection = xaConnectionFactory.createXAConnection();
1:d717a49:        xaConnection.start();
1:d717a49:        XASession session = xaConnection.createXASession();
1:d717a49:        XAResource resource = session.getXAResource();
1:d717a49:        Destination dest = new ActiveMQQueue(xaDestinationName);
1:d717a49: 
1:d717a49:        // publish a message
1:d717a49:        Xid tid = createXid();
1:d717a49:        resource.start(tid, XAResource.TMNOFLAGS);
1:d717a49:        MessageProducer producer = session.createProducer(dest);
1:d717a49:        ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:d717a49:        message.setText("Some Text");
1:d717a49:        producer.send(message);
1:d717a49:        resource.end(tid, XAResource.TMSUCCESS);
1:d717a49:        resource.commit(tid, true);
1:d717a49:        session.close();
1:d717a49: 
1:d717a49:        session = xaConnection.createXASession();
1:d717a49:        MessageConsumer consumer = session.createConsumer(dest);
1:d717a49:        tid = createXid();
1:d717a49:        resource = session.getXAResource();
1:d717a49:        resource.start(tid, XAResource.TMNOFLAGS);
1:d717a49:        TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:d717a49:        assertNotNull(receivedMessage);
1:d717a49:        assertEquals("Some Text", receivedMessage.getText());
1:d717a49:        resource.end(tid, XAResource.TMSUCCESS);
1:d717a49: 
1:d717a49:        // Test that a normal session doesn't operate on XASession state.
1:d717a49:        Connection connection2 = connectionFactory.createConnection();
1:d717a49:        connection2.start();
1:d717a49:        ActiveMQSession session2 = (ActiveMQSession) connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d717a49: 
1:d717a49:        if (session2.isTransacted()) {
1:d717a49:            session2.rollback();
1:d717a49:        }
1:d717a49: 
1:d717a49:        session2.close();
1:d717a49: 
1:d717a49:        resource.commit(tid, true);
1:d717a49:    }
1:d717a49: 
1:d717a49:    @Test
1:d717a49:    public void testMixedXAandNonXALocalTXSessions() throws Exception {
1:d717a49: 
1:d717a49:        XAConnection xaConnection = xaConnectionFactory.createXAConnection();
1:d717a49:        xaConnection.start();
1:d717a49:        XASession session = xaConnection.createXASession();
1:d717a49:        XAResource resource = session.getXAResource();
1:d717a49:        Destination dest = new ActiveMQQueue(xaDestinationName);
1:d717a49: 
1:d717a49:        // publish a message
1:d717a49:        Xid tid = createXid();
1:d717a49:        resource.start(tid, XAResource.TMNOFLAGS);
1:d717a49:        MessageProducer producer = session.createProducer(dest);
1:d717a49:        ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:d717a49:        message.setText("Some Text");
1:d717a49:        producer.send(message);
1:d717a49:        resource.end(tid, XAResource.TMSUCCESS);
1:d717a49:        resource.commit(tid, true);
1:d717a49:        session.close();
1:d717a49: 
1:d717a49:        session = xaConnection.createXASession();
1:d717a49:        MessageConsumer consumer = session.createConsumer(dest);
1:d717a49:        tid = createXid();
1:d717a49:        resource = session.getXAResource();
1:d717a49:        resource.start(tid, XAResource.TMNOFLAGS);
1:d717a49:        TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:d717a49:        assertNotNull(receivedMessage);
1:d717a49:        assertEquals("Some Text", receivedMessage.getText());
1:d717a49:        resource.end(tid, XAResource.TMSUCCESS);
1:d717a49: 
1:d717a49:        // Test that a normal session doesn't operate on XASession state.
1:d717a49:        Connection connection2 = connectionFactory.createConnection();
1:d717a49:        connection2.start();
1:d717a49:        ActiveMQSession session2 = (ActiveMQSession) connection2.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:d717a49:        Destination destination = new ActiveMQQueue(destinationName);
1:d717a49:        ActiveMQMessageProducer producer2 = (ActiveMQMessageProducer) session2.createProducer(destination);
1:d717a49:        producer2.send(session2.createTextMessage("Local-TX"));
1:d717a49: 
1:d717a49:        if (session2.isTransacted()) {
1:d717a49:            session2.rollback();
1:d717a49:        }
1:d717a49: 
1:d717a49:        session2.close();
1:d717a49: 
1:d717a49:        resource.commit(tid, true);
1:d717a49:    }
1:d717a49: 
1:d717a49:    public Xid createXid() throws IOException {
1:d717a49: 
1:d717a49:        ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:d717a49:        DataOutputStream os = new DataOutputStream(baos);
1:d717a49:        os.writeLong(++txGenerator);
1:d717a49:        os.close();
1:d717a49:        final byte[] bs = baos.toByteArray();
1:d717a49: 
1:d717a49:        return new Xid() {
1:d717a49:            public int getFormatId() {
1:d717a49:                return 86;
1:d717a49:            }
1:d717a49: 
1:d717a49:            public byte[] getGlobalTransactionId() {
1:d717a49:                return bs;
1:d717a49:            }
1:d717a49: 
1:d717a49:            public byte[] getBranchQualifier() {
1:d717a49:                return bs;
1:d717a49:            }
1:d717a49:        };
1:d717a49:    }
1:d717a49: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:d717a49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.XAConnection;
1: import javax.jms.XAConnectionFactory;
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3465Test
1: {
1:     private final String xaDestinationName = "DestinationXA";
1:     private final String destinationName = "Destination";
1:     private BrokerService broker;
1:     private String connectionUri;
1:     private long txGenerator = System.currentTimeMillis();
1: 
1:     private XAConnectionFactory xaConnectionFactory;
1:     private ConnectionFactory connectionFactory;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         xaConnectionFactory = new ActiveMQXAConnectionFactory(connectionUri);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:    @Test
1:    public void testMixedXAandNonXAorTXSessions() throws Exception {
1: 
1:        XAConnection xaConnection = xaConnectionFactory.createXAConnection();
1:        xaConnection.start();
1:        XASession session = xaConnection.createXASession();
1:        XAResource resource = session.getXAResource();
1:        Destination dest = new ActiveMQQueue(xaDestinationName);
1: 
1:        // publish a message
1:        Xid tid = createXid();
1:        resource.start(tid, XAResource.TMNOFLAGS);
1:        MessageProducer producer = session.createProducer(dest);
1:        ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:        message.setText("Some Text");
1:        producer.send(message);
1:        resource.end(tid, XAResource.TMSUCCESS);
1:        resource.commit(tid, true);
1:        session.close();
1: 
1:        session = xaConnection.createXASession();
1:        MessageConsumer consumer = session.createConsumer(dest);
1:        tid = createXid();
1:        resource = session.getXAResource();
1:        resource.start(tid, XAResource.TMNOFLAGS);
1:        TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:        assertNotNull(receivedMessage);
1:        assertEquals("Some Text", receivedMessage.getText());
1:        resource.end(tid, XAResource.TMSUCCESS);
1: 
1:        // Test that a normal session doesn't operate on XASession state.
1:        Connection connection2 = connectionFactory.createConnection();
1:        connection2.start();
1:        ActiveMQSession session2 = (ActiveMQSession) connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:        if (session2.isTransacted()) {
1:            session2.rollback();
1:        }
1: 
1:        session2.close();
1: 
1:        resource.commit(tid, true);
1:    }
1: 
1:    @Test
1:    public void testMixedXAandNonXALocalTXSessions() throws Exception {
1: 
1:        XAConnection xaConnection = xaConnectionFactory.createXAConnection();
1:        xaConnection.start();
1:        XASession session = xaConnection.createXASession();
1:        XAResource resource = session.getXAResource();
1:        Destination dest = new ActiveMQQueue(xaDestinationName);
1: 
1:        // publish a message
1:        Xid tid = createXid();
1:        resource.start(tid, XAResource.TMNOFLAGS);
1:        MessageProducer producer = session.createProducer(dest);
1:        ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:        message.setText("Some Text");
1:        producer.send(message);
1:        resource.end(tid, XAResource.TMSUCCESS);
1:        resource.commit(tid, true);
1:        session.close();
1: 
1:        session = xaConnection.createXASession();
1:        MessageConsumer consumer = session.createConsumer(dest);
1:        tid = createXid();
1:        resource = session.getXAResource();
1:        resource.start(tid, XAResource.TMNOFLAGS);
1:        TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:        assertNotNull(receivedMessage);
1:        assertEquals("Some Text", receivedMessage.getText());
1:        resource.end(tid, XAResource.TMSUCCESS);
1: 
1:        // Test that a normal session doesn't operate on XASession state.
1:        Connection connection2 = connectionFactory.createConnection();
1:        connection2.start();
1:        ActiveMQSession session2 = (ActiveMQSession) connection2.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:        Destination destination = new ActiveMQQueue(destinationName);
1:        ActiveMQMessageProducer producer2 = (ActiveMQMessageProducer) session2.createProducer(destination);
1:        producer2.send(session2.createTextMessage("Local-TX"));
1: 
1:        if (session2.isTransacted()) {
1:            session2.rollback();
1:        }
1: 
1:        session2.close();
1: 
1:        resource.commit(tid, true);
1:    }
1: 
1:    public Xid createXid() throws IOException {
1: 
1:        ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:        DataOutputStream os = new DataOutputStream(baos);
1:        os.writeLong(++txGenerator);
1:        os.close();
1:        final byte[] bs = baos.toByteArray();
1: 
1:        return new Xid() {
1:            public int getFormatId() {
1:                return 86;
1:            }
1: 
1:            public byte[] getGlobalTransactionId() {
1:                return bs;
1:            }
1: 
1:            public byte[] getBranchQualifier() {
1:                return bs;
1:            }
1:        };
1:    }
1: }
============================================================================