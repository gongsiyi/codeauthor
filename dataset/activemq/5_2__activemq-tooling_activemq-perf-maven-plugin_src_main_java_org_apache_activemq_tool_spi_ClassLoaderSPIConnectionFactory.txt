1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.spi;
2:a88906f: 
1:a88906f: import java.io.File;
1:a88906f: import java.net.URL;
1:a88906f: import java.net.URLClassLoader;
1:540dd5c: import java.util.ArrayList;
1:540dd5c: import java.util.List;
1:540dd5c: import java.util.Properties;
1:540dd5c: import java.util.StringTokenizer;
1:540dd5c: 
1:540dd5c: import javax.jms.ConnectionFactory;
1:540dd5c: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: public abstract class ClassLoaderSPIConnectionFactory implements SPIConnectionFactory {
1:a88906f: 
1:a88906f:     public static final String KEY_EXT_DIR = "extDir";
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ClassLoaderSPIConnectionFactory.class);
1:a88906f: 
1:a88906f:     public final ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
1:a88906f: 
1:a88906f:         // Load new context class loader
1:a88906f:         ClassLoader newClassLoader = getContextClassLoader(settings);
1:a88906f:         Thread.currentThread().setContextClassLoader(newClassLoader);
1:a88906f: 
1:a88906f:         return instantiateConnectionFactory(settings);
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected ClassLoader getContextClassLoader(Properties settings) {
1:a88906f:         String extDir = (String)settings.remove(KEY_EXT_DIR);
1:a88906f:         if (extDir != null) {
1:a88906f:             StringTokenizer tokens = new StringTokenizer(extDir, ";,");
1:540dd5c:             List<URL> urls = new ArrayList<URL>();
1:a88906f:             while (tokens.hasMoreTokens()) {
1:a88906f:                 String dir = tokens.nextToken();
1:a88906f:                 try {
1:a88906f:                     File f = new File(dir);
1:a88906f:                     if (!f.exists()) {
1:540dd5c:                         LOG.warn("Cannot find extension dir: " + f.getAbsolutePath());
1:a88906f:                     } else {
1:540dd5c:                         LOG.info("Adding extension dir: " + f.getAbsolutePath());
1:a88906f: 
1:a88906f:                         urls.add(f.toURL());
1:a88906f: 
1:a88906f:                         File[] files = f.listFiles();
1:540dd5c:                         if (files != null) {
1:a88906f:                             for (int j = 0; j < files.length; j++) {
1:540dd5c:                                 if (files[j].getName().endsWith(".zip") || files[j].getName().endsWith(".jar")) {
1:540dd5c:                                     LOG.info("Adding extension dir: " + files[j].getAbsolutePath());
1:a88906f:                                     urls.add(files[j].toURL());
1:a88906f:                                 }
1:a88906f:                             }
1:a88906f:                         }
1:a88906f:                     }
1:a88906f:                 } catch (Exception e) {
1:540dd5c:                     LOG.warn("Failed to load ext dir: " + dir + ". Reason: " + e);
1:a88906f:                 }
1:a88906f:             }
1:a88906f: 
1:a88906f:             URL u[] = new URL[urls.size()];
1:a88906f:             urls.toArray(u);
1:a88906f:             return new URLClassLoader(u, Thread.currentThread().getContextClassLoader());
1:a88906f:         }
1:a88906f:         return ClassLoaderSPIConnectionFactory.class.getClassLoader();
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected abstract ConnectionFactory instantiateConnectionFactory(Properties settings) throws Exception;
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ClassLoaderSPIConnectionFactory.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
1: import javax.jms.ConnectionFactory;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ClassLoaderSPIConnectionFactory.class);
/////////////////////////////////////////////////////////////////////////
1:             List<URL> urls = new ArrayList<URL>();
1:                         LOG.warn("Cannot find extension dir: " + f.getAbsolutePath());
1:                         LOG.info("Adding extension dir: " + f.getAbsolutePath());
1:                         if (files != null) {
1:                                 if (files[j].getName().endsWith(".zip") || files[j].getName().endsWith(".jar")) {
1:                                     LOG.info("Adding extension dir: " + files[j].getAbsolutePath());
1:                     LOG.warn("Failed to load ext dir: " + dir + ". Reason: " + e);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.spi;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.ConnectionFactory;
0: import java.util.Properties;
0: import java.util.StringTokenizer;
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.io.File;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: 
1: public abstract class ClassLoaderSPIConnectionFactory implements SPIConnectionFactory {
0:     private static final Log log = LogFactory.getLog(ClassLoaderSPIConnectionFactory.class);
1: 
1:     public static final String KEY_EXT_DIR = "extDir";
1: 
1:     public final ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
1: 
1:         // Load new context class loader
1:         ClassLoader newClassLoader = getContextClassLoader(settings);
1:         Thread.currentThread().setContextClassLoader(newClassLoader);
1: 
1:         return instantiateConnectionFactory(settings);
1:     }
1: 
1:     protected ClassLoader getContextClassLoader(Properties settings) {
1:         String extDir = (String)settings.remove(KEY_EXT_DIR);
1:         if (extDir != null) {
1:             StringTokenizer tokens = new StringTokenizer(extDir, ";,");
0:             List urls = new ArrayList();
1:             while (tokens.hasMoreTokens()) {
1:                 String dir = tokens.nextToken();
1:                 try {
1:                     File f = new File(dir);
1:                     if (!f.exists()) {
0:                         log.warn("Cannot find extension dir: " + f.getAbsolutePath());
1:                     } else {
0:                         log.info("Adding extension dir: " + f.getAbsolutePath());
1: 
1:                         urls.add(f.toURL());
1: 
1:                         File[] files = f.listFiles();
0:                         if( files!=null ) {
1:                             for (int j = 0; j < files.length; j++) {
0:                                 if( files[j].getName().endsWith(".zip") || files[j].getName().endsWith(".jar") ) {
0:                                     log.info("Adding extension dir: " + files[j].getAbsolutePath());
1:                                     urls.add(files[j].toURL());
1:                                 }
1:                             }
1:                         }
1:                     }
1:                 } catch (Exception e) {
0:                     log.warn("Failed to load ext dir: " + dir + ". Reason: " + e);
1:                 }
1:             }
1: 
1:             URL u[] = new URL[urls.size()];
1:             urls.toArray(u);
1:             return new URLClassLoader(u, Thread.currentThread().getContextClassLoader());
1:         }
1:         return ClassLoaderSPIConnectionFactory.class.getClassLoader();
1:     }
1: 
1:     protected abstract ConnectionFactory instantiateConnectionFactory(Properties settings) throws Exception;
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:20f08f4
/////////////////////////////////////////////////////////////////////////
0:                     if (!f.exists()) {
0:                         log.warn("Cannot find extension dir: " + f.getAbsolutePath());
0:                     } else {
0:                         log.info("Adding extension dir: " + f.getAbsolutePath());
0:                         urls.add(f.toURL());
0: 
0:                         File[] files = f.listFiles();
0:                         if( files!=null ) {
0:                             for (int j = 0; j < files.length; j++) {
0:                                 if( files[j].getName().endsWith(".zip") || files[j].getName().endsWith(".jar") ) {
0:                                     log.info("Adding extension dir: " + files[j].getAbsolutePath());
0:                                     urls.add(files[j].toURL());
0:                                 }
commit:6d9e5b5
/////////////////////////////////////////////////////////////////////////
0:                     log.info("Adding extension dir: " + f.getAbsolutePath());
0:                                 log.info("Adding extension dir: " + files[j].getAbsolutePath());
commit:0dbcc1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return new URLClassLoader(u, Thread.currentThread().getContextClassLoader());
commit:faff499
/////////////////////////////////////////////////////////////////////////
0:         return instantiateConnectionFactory(settings);
/////////////////////////////////////////////////////////////////////////
0:     protected abstract ConnectionFactory instantiateConnectionFactory(Properties settings) throws Exception;
commit:6086520
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import java.util.StringTokenizer;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.io.File;
0: import java.net.URL;
0: import java.net.URLClassLoader;
0:     private static final Log log = LogFactory.getLog(ClassLoaderSPIConnectionFactory.class);
0: 
0:     public static final String KEY_EXT_DIR = "extDir";
0: 
0:     public final ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
0: 
0:         // Load new context class loader
0:         ClassLoader newClassLoader = getContextClassLoader(settings);
0:         Thread.currentThread().setContextClassLoader(newClassLoader);
0: 
0:         return instantiateConnectionFactory(newClassLoader, settings);
0:     protected ClassLoader getContextClassLoader(Properties settings) {
0:         String extDir = (String)settings.remove(KEY_EXT_DIR);
0:         if (extDir != null) {
0:             StringTokenizer tokens = new StringTokenizer(extDir, ";,");
0:             List urls = new ArrayList();
0:             while (tokens.hasMoreTokens()) {
0:                 String dir = tokens.nextToken();
0:                 try {
0:                     File f = new File(dir);
0:                     dir = f.getAbsolutePath();
0:                     System.out.println(dir);
0:                     urls.add(f.toURL());
0: 
0:                     File[] files = f.listFiles();
0:                     if( files!=null ) {
0:                         for (int j = 0; j < files.length; j++) {
0:                             if( files[j].getName().endsWith(".zip") || files[j].getName().endsWith(".jar") ) {
0:                                 dir = files[j].getAbsolutePath();
0:                                 urls.add(files[j].toURL());
0:                             }
0:                         }
0:                     }
0:                 } catch (Exception e) {
0:                     log.warn("Failed to load ext dir: " + dir + ". Reason: " + e);
0:                 }
0:             }
0: 
0:             URL u[] = new URL[urls.size()];
0:             urls.toArray(u);
0:             return new URLClassLoader(u, ClassLoaderSPIConnectionFactory.class.getClassLoader());
0:         }
0:         return ClassLoaderSPIConnectionFactory.class.getClassLoader();
0:     protected abstract ConnectionFactory instantiateConnectionFactory(ClassLoader cl, Properties settings) throws Exception;
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.properties.ReflectionUtil;
commit:5f5bff6
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.spi;
0: 
0: import org.apache.activemq.tool.ReflectionUtil;
0: 
0: import javax.jms.ConnectionFactory;
0: import java.util.Properties;
0: 
0: public abstract class ClassLoaderSPIConnectionFactory implements SPIConnectionFactory {
0:     public ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
0:         Class factoryClass = Class.forName(getClassName());
0:         ConnectionFactory factory = (ConnectionFactory)factoryClass.newInstance();
0:         configureConnectionFactory(factory, settings);
0:         return factory;
0:     }
0: 
0:     public void configureConnectionFactory(ConnectionFactory jmsFactory, Properties settings) throws Exception {
0:         ReflectionUtil.configureClass(jmsFactory, settings);
0:     }
0: 
0:     public abstract String getClassName();
0: }
============================================================================