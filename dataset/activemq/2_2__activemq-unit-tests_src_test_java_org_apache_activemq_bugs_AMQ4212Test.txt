1:3bf9d0c: /**
1:3bf9d0c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3bf9d0c:  * contributor license agreements.  See the NOTICE file distributed with
1:3bf9d0c:  * this work for additional information regarding copyright ownership.
1:3bf9d0c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3bf9d0c:  * (the "License"); you may not use this file except in compliance with
1:3bf9d0c:  * the License.  You may obtain a copy of the License at
1:3bf9d0c:  *
1:3bf9d0c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3bf9d0c:  *
1:3bf9d0c:  * Unless required by applicable law or agreed to in writing, software
1:3bf9d0c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bf9d0c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bf9d0c:  * See the License for the specific language governing permissions and
1:3bf9d0c:  * limitations under the License.
1:3bf9d0c:  */
1:3bf9d0c: package org.apache.activemq.bugs;
1:3bf9d0c: 
1:3bf9d0c: import static org.junit.Assert.assertEquals;
1:3bf9d0c: import static org.junit.Assert.assertTrue;
1:3bf9d0c: import static org.junit.Assert.fail;
1:3bf9d0c: 
1:3bf9d0c: import java.io.File;
1:3bf9d0c: import java.io.IOException;
1:3bf9d0c: import java.util.Collection;
1:3bf9d0c: import java.util.concurrent.TimeUnit;
1:3bf9d0c: 
1:3bf9d0c: import javax.jms.Connection;
1:3bf9d0c: import javax.jms.DeliveryMode;
1:3bf9d0c: import javax.jms.Destination;
1:3bf9d0c: import javax.jms.MessageConsumer;
1:3bf9d0c: import javax.jms.MessageProducer;
1:3bf9d0c: import javax.jms.Session;
1:3bf9d0c: import javax.jms.TextMessage;
1:3bf9d0c: import javax.jms.Topic;
1:3bf9d0c: import javax.management.ObjectName;
1:3bf9d0c: 
1:3bf9d0c: import org.apache.activemq.ActiveMQConnectionFactory;
1:3bf9d0c: import org.apache.activemq.broker.BrokerService;
1:3bf9d0c: import org.apache.activemq.command.ActiveMQQueue;
1:3bf9d0c: import org.apache.activemq.command.ActiveMQTopic;
1:3bf9d0c: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:3bf9d0c: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1:231679d: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:3bf9d0c: import org.apache.activemq.util.Wait;
1:3bf9d0c: import org.junit.After;
1:3bf9d0c: import org.junit.Before;
1:3bf9d0c: import org.junit.Test;
1:3bf9d0c: import org.slf4j.Logger;
1:3bf9d0c: import org.slf4j.LoggerFactory;
1:3bf9d0c: 
1:3bf9d0c: public class AMQ4212Test {
1:3bf9d0c: 
1:3bf9d0c:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4212Test.class);
1:3bf9d0c: 
1:3bf9d0c:     private BrokerService service;
1:3bf9d0c:     private String connectionUri;
1:3bf9d0c:     private ActiveMQConnectionFactory cf;
1:3bf9d0c: 
1:3bf9d0c:     private final int MSG_COUNT = 256;
1:3bf9d0c: 
1:3bf9d0c:     @Before
1:3bf9d0c:     public void setUp() throws IOException, Exception {
1:3bf9d0c:         createBroker(true, false);
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     public void createBroker(boolean deleteAllMessages, boolean recover) throws Exception {
1:3bf9d0c:         service = new BrokerService();
1:3bf9d0c:         service.setBrokerName("InactiveSubTest");
1:3bf9d0c:         service.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:3bf9d0c:         service.setAdvisorySupport(false);
1:3bf9d0c:         service.setPersistent(true);
1:3bf9d0c:         service.setUseJmx(true);
1:3bf9d0c:         service.setKeepDurableSubsActive(false);
1:3bf9d0c: 
1:3bf9d0c:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:3bf9d0c:         File dataFile=new File("KahaDB");
1:3bf9d0c:         pa.setDirectory(dataFile);
1:3bf9d0c:         pa.setJournalMaxFileLength(10*1024);
1:3bf9d0c:         pa.setCheckpointInterval(TimeUnit.SECONDS.toMillis(5));
1:3bf9d0c:         pa.setCleanupInterval(TimeUnit.SECONDS.toMillis(5));
1:3bf9d0c:         pa.setForceRecoverIndex(recover);
1:231679d:         pa.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
1:3bf9d0c: 
1:3bf9d0c:         service.setPersistenceAdapter(pa);
1:3bf9d0c:         service.start();
1:3bf9d0c:         service.waitUntilStarted();
1:3bf9d0c: 
1:3bf9d0c:         connectionUri = "vm://InactiveSubTest?create=false";
1:3bf9d0c:         cf = new ActiveMQConnectionFactory(connectionUri);
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void restartBroker() throws Exception {
1:3bf9d0c:         stopBroker();
1:3bf9d0c:         createBroker(false, false);
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void recoverBroker() throws Exception {
1:3bf9d0c:         stopBroker();
1:3bf9d0c:         createBroker(false, true);
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     @After
1:3bf9d0c:     public void stopBroker() throws Exception {
1:3bf9d0c:         if (service != null) {
1:3bf9d0c:             service.stop();
1:3bf9d0c:             service.waitUntilStopped();
1:3bf9d0c:             service = null;
1:3bf9d0c:         }
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     @Test
1:5db5f3e:     public void testDurableSubPrefetchRecovered() throws Exception {
1:3bf9d0c: 
1:3bf9d0c:         ActiveMQQueue queue = new ActiveMQQueue("MyQueue");
1:3bf9d0c:         ActiveMQTopic topic = new ActiveMQTopic("MyDurableTopic");
1:3bf9d0c: 
1:3bf9d0c:         // Send to a Queue to create some journal files
1:3bf9d0c:         sendMessages(queue);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c: 
1:3bf9d0c:         createInactiveDurableSub(topic);
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c: 
1:3bf9d0c:         // Now send some more to the queue to create even more files.
1:3bf9d0c:         sendMessages(queue);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c:         assertTrue(getNumberOfJournalFiles() > 1);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Restarting the broker.");
1:3bf9d0c:         restartBroker();
1:3bf9d0c:         LOG.info("Restarted the broker.");
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c:         assertTrue(getNumberOfJournalFiles() > 1);
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c: 
1:3bf9d0c:         // Clear out all queue data
1:3bf9d0c:         service.getAdminView().removeQueue(queue.getQueueName());
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Less than two journal files expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 return getNumberOfJournalFiles() <= 2;
1:3bf9d0c:             }
1:3bf9d0c:         }, TimeUnit.MINUTES.toMillis(2)));
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Sending {} Messages to the Topic.", MSG_COUNT);
1:3bf9d0c:         // Send some messages to the inactive destination
1:3bf9d0c:         sendMessages(topic);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Attempt to consume {} messages from the Topic.", MSG_COUNT);
1:3bf9d0c:         assertEquals(MSG_COUNT, consumeFromInactiveDurableSub(topic));
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Recovering the broker.");
1:3bf9d0c:         recoverBroker();
1:3bf9d0c:         LOG.info("Recovering the broker.");
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     @Test
1:3bf9d0c:     public void testDurableAcksNotDropped() throws Exception {
1:3bf9d0c: 
1:3bf9d0c:         ActiveMQQueue queue = new ActiveMQQueue("MyQueue");
1:3bf9d0c:         ActiveMQTopic topic = new ActiveMQTopic("MyDurableTopic");
1:3bf9d0c: 
1:3bf9d0c:         // Create durable sub in first data file.
1:3bf9d0c:         createInactiveDurableSub(topic);
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c: 
1:3bf9d0c:         // Send to a Topic
1:3bf9d0c:         sendMessages(topic, 1);
1:3bf9d0c: 
1:3bf9d0c:         // Send to a Queue to create some journal files
1:3bf9d0c:         sendMessages(queue);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Before consume there are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c: 
1:3bf9d0c:         // Consume all the Messages leaving acks behind.
1:3bf9d0c:         consumeDurableMessages(topic, 1);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("After consume there are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c: 
1:3bf9d0c:         // Now send some more to the queue to create even more files.
1:3bf9d0c:         sendMessages(queue);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("More Queued. There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c:         assertTrue(getNumberOfJournalFiles() > 1);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Restarting the broker.");
1:3bf9d0c:         restartBroker();
1:3bf9d0c:         LOG.info("Restarted the broker.");
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c:         assertTrue(getNumberOfJournalFiles() > 1);
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c: 
1:3bf9d0c:         // Clear out all queue data
1:3bf9d0c:         service.getAdminView().removeQueue(queue.getQueueName());
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Less than three journal file expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 return getNumberOfJournalFiles() <= 3;
1:3bf9d0c:             }
1:3bf9d0c:         }, TimeUnit.MINUTES.toMillis(3)));
1:3bf9d0c: 
1:3bf9d0c:         // See if we receive any message they should all be acked.
1:3bf9d0c:         tryConsumeExpectNone(topic);
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("Recovering the broker.");
1:3bf9d0c:         recoverBroker();
1:3bf9d0c:         LOG.info("Recovering the broker.");
1:3bf9d0c: 
1:3bf9d0c:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:3bf9d0c:                 return subs != null && subs.length == 1 ? true : false;
1:3bf9d0c:             }
1:3bf9d0c:         }));
1:3bf9d0c: 
1:3bf9d0c:         // See if we receive any message they should all be acked.
1:3bf9d0c:         tryConsumeExpectNone(topic);
1:3bf9d0c: 
1:3bf9d0c:         assertTrue("Less than three journal file expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:3bf9d0c:             @Override
1:3bf9d0c:             public boolean isSatisified() throws Exception {
1:3bf9d0c:                 return getNumberOfJournalFiles() == 1;
1:3bf9d0c:             }
1:3bf9d0c:         }, TimeUnit.MINUTES.toMillis(1)));
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private int getNumberOfJournalFiles() throws IOException {
1:3bf9d0c:         Collection<DataFile> files =
1:3bf9d0c:             ((KahaDBPersistenceAdapter) service.getPersistenceAdapter()).getStore().getJournal().getFileMap().values();
1:3bf9d0c:         int reality = 0;
1:3bf9d0c:         for (DataFile file : files) {
1:3bf9d0c:             if (file != null) {
1:3bf9d0c:                 reality++;
1:3bf9d0c:             }
1:3bf9d0c:         }
1:3bf9d0c: 
1:3bf9d0c:         return reality;
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void createInactiveDurableSub(Topic topic) throws Exception {
1:3bf9d0c:         Connection connection = cf.createConnection();
1:3bf9d0c:         connection.setClientID("Inactive");
1:3bf9d0c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf9d0c:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:3bf9d0c:         consumer.close();
1:3bf9d0c:         connection.close();
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void consumeDurableMessages(Topic topic, int count) throws Exception {
1:3bf9d0c:         Connection connection = cf.createConnection();
1:3bf9d0c:         connection.setClientID("Inactive");
1:3bf9d0c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf9d0c:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:3bf9d0c:         connection.start();
1:3bf9d0c:         for (int i = 0; i < count; ++i) {
1:3bf9d0c:            if (consumer.receive(TimeUnit.SECONDS.toMillis(10)) == null) {
1:3bf9d0c:                fail("should have received a message");
1:3bf9d0c:            }
1:3bf9d0c:         }
1:3bf9d0c:         consumer.close();
1:3bf9d0c:         connection.close();
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void tryConsumeExpectNone(Topic topic) throws Exception {
1:3bf9d0c:         Connection connection = cf.createConnection();
1:3bf9d0c:         connection.setClientID("Inactive");
1:3bf9d0c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf9d0c:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:3bf9d0c:         connection.start();
1:3bf9d0c:         if (consumer.receive(TimeUnit.SECONDS.toMillis(10)) != null) {
1:3bf9d0c:             fail("Should be no messages for this durable.");
1:3bf9d0c:         }
1:3bf9d0c:         consumer.close();
1:3bf9d0c:         connection.close();
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private int consumeFromInactiveDurableSub(Topic topic) throws Exception {
1:3bf9d0c:         Connection connection = cf.createConnection();
1:3bf9d0c:         connection.setClientID("Inactive");
1:3bf9d0c:         connection.start();
1:3bf9d0c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf9d0c:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:3bf9d0c: 
1:3bf9d0c:         int count = 0;
1:3bf9d0c: 
1:3bf9d0c:         while (consumer.receive(10000) != null) {
1:3bf9d0c:             count++;
1:3bf9d0c:         }
1:3bf9d0c: 
1:3bf9d0c:         consumer.close();
1:3bf9d0c:         connection.close();
1:3bf9d0c: 
1:3bf9d0c:         return count;
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void sendMessages(Destination destination) throws Exception {
1:3bf9d0c:         sendMessages(destination, MSG_COUNT);
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c:     private void sendMessages(Destination destination, int count) throws Exception {
1:3bf9d0c:         Connection connection = cf.createConnection();
1:3bf9d0c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf9d0c:         MessageProducer producer = session.createProducer(destination);
1:3bf9d0c:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:3bf9d0c:         for (int i = 0; i < count; ++i) {
1:3bf9d0c:             TextMessage message = session.createTextMessage("Message #" + i + " for destination: " + destination);
1:3bf9d0c:             producer.send(message);
1:3bf9d0c:         }
1:3bf9d0c:         connection.close();
1:3bf9d0c:     }
1:3bf9d0c: 
1:3bf9d0c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:231679d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
/////////////////////////////////////////////////////////////////////////
1:         pa.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
commit:5db5f3e
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubPrefetchRecovered() throws Exception {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3bf9d0c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4212Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4212Test.class);
1: 
1:     private BrokerService service;
1:     private String connectionUri;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     private final int MSG_COUNT = 256;
1: 
1:     @Before
1:     public void setUp() throws IOException, Exception {
1:         createBroker(true, false);
1:     }
1: 
1:     public void createBroker(boolean deleteAllMessages, boolean recover) throws Exception {
1:         service = new BrokerService();
1:         service.setBrokerName("InactiveSubTest");
1:         service.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         service.setAdvisorySupport(false);
1:         service.setPersistent(true);
1:         service.setUseJmx(true);
1:         service.setKeepDurableSubsActive(false);
1: 
1:         KahaDBPersistenceAdapter pa=new KahaDBPersistenceAdapter();
1:         File dataFile=new File("KahaDB");
1:         pa.setDirectory(dataFile);
1:         pa.setJournalMaxFileLength(10*1024);
1:         pa.setCheckpointInterval(TimeUnit.SECONDS.toMillis(5));
1:         pa.setCleanupInterval(TimeUnit.SECONDS.toMillis(5));
1:         pa.setForceRecoverIndex(recover);
1: 
1:         service.setPersistenceAdapter(pa);
1:         service.start();
1:         service.waitUntilStarted();
1: 
1:         connectionUri = "vm://InactiveSubTest?create=false";
1:         cf = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         stopBroker();
1:         createBroker(false, false);
1:     }
1: 
1:     private void recoverBroker() throws Exception {
1:         stopBroker();
1:         createBroker(false, true);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (service != null) {
1:             service.stop();
1:             service.waitUntilStopped();
1:             service = null;
1:         }
1:     }
1: 
1:     @Test
0:     public void testDirableSubPrefetchRecovered() throws Exception {
1: 
1:         ActiveMQQueue queue = new ActiveMQQueue("MyQueue");
1:         ActiveMQTopic topic = new ActiveMQTopic("MyDurableTopic");
1: 
1:         // Send to a Queue to create some journal files
1:         sendMessages(queue);
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1: 
1:         createInactiveDurableSub(topic);
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1: 
1:         // Now send some more to the queue to create even more files.
1:         sendMessages(queue);
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:         assertTrue(getNumberOfJournalFiles() > 1);
1: 
1:         LOG.info("Restarting the broker.");
1:         restartBroker();
1:         LOG.info("Restarted the broker.");
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:         assertTrue(getNumberOfJournalFiles() > 1);
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1: 
1:         // Clear out all queue data
1:         service.getAdminView().removeQueue(queue.getQueueName());
1: 
1:         assertTrue("Less than two journal files expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumberOfJournalFiles() <= 2;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(2)));
1: 
1:         LOG.info("Sending {} Messages to the Topic.", MSG_COUNT);
1:         // Send some messages to the inactive destination
1:         sendMessages(topic);
1: 
1:         LOG.info("Attempt to consume {} messages from the Topic.", MSG_COUNT);
1:         assertEquals(MSG_COUNT, consumeFromInactiveDurableSub(topic));
1: 
1:         LOG.info("Recovering the broker.");
1:         recoverBroker();
1:         LOG.info("Recovering the broker.");
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1:     }
1: 
1:     @Test
1:     public void testDurableAcksNotDropped() throws Exception {
1: 
1:         ActiveMQQueue queue = new ActiveMQQueue("MyQueue");
1:         ActiveMQTopic topic = new ActiveMQTopic("MyDurableTopic");
1: 
1:         // Create durable sub in first data file.
1:         createInactiveDurableSub(topic);
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1: 
1:         // Send to a Topic
1:         sendMessages(topic, 1);
1: 
1:         // Send to a Queue to create some journal files
1:         sendMessages(queue);
1: 
1:         LOG.info("Before consume there are currently [{}] journal log files.", getNumberOfJournalFiles());
1: 
1:         // Consume all the Messages leaving acks behind.
1:         consumeDurableMessages(topic, 1);
1: 
1:         LOG.info("After consume there are currently [{}] journal log files.", getNumberOfJournalFiles());
1: 
1:         // Now send some more to the queue to create even more files.
1:         sendMessages(queue);
1: 
1:         LOG.info("More Queued. There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:         assertTrue(getNumberOfJournalFiles() > 1);
1: 
1:         LOG.info("Restarting the broker.");
1:         restartBroker();
1:         LOG.info("Restarted the broker.");
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1:         assertTrue(getNumberOfJournalFiles() > 1);
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1: 
1:         // Clear out all queue data
1:         service.getAdminView().removeQueue(queue.getQueueName());
1: 
1:         assertTrue("Less than three journal file expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumberOfJournalFiles() <= 3;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(3)));
1: 
1:         // See if we receive any message they should all be acked.
1:         tryConsumeExpectNone(topic);
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1: 
1:         LOG.info("Recovering the broker.");
1:         recoverBroker();
1:         LOG.info("Recovering the broker.");
1: 
1:         LOG.info("There are currently [{}] journal log files.", getNumberOfJournalFiles());
1: 
1:         assertTrue("Should have an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 ObjectName[] subs = service.getAdminView().getInactiveDurableTopicSubscribers();
1:                 return subs != null && subs.length == 1 ? true : false;
1:             }
1:         }));
1: 
1:         // See if we receive any message they should all be acked.
1:         tryConsumeExpectNone(topic);
1: 
1:         assertTrue("Less than three journal file expected, was " + getNumberOfJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumberOfJournalFiles() == 1;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(1)));
1:     }
1: 
1:     private int getNumberOfJournalFiles() throws IOException {
1:         Collection<DataFile> files =
1:             ((KahaDBPersistenceAdapter) service.getPersistenceAdapter()).getStore().getJournal().getFileMap().values();
1:         int reality = 0;
1:         for (DataFile file : files) {
1:             if (file != null) {
1:                 reality++;
1:             }
1:         }
1: 
1:         return reality;
1:     }
1: 
1:     private void createInactiveDurableSub(Topic topic) throws Exception {
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("Inactive");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:         consumer.close();
1:         connection.close();
1:     }
1: 
1:     private void consumeDurableMessages(Topic topic, int count) throws Exception {
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("Inactive");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:         connection.start();
1:         for (int i = 0; i < count; ++i) {
1:            if (consumer.receive(TimeUnit.SECONDS.toMillis(10)) == null) {
1:                fail("should have received a message");
1:            }
1:         }
1:         consumer.close();
1:         connection.close();
1:     }
1: 
1:     private void tryConsumeExpectNone(Topic topic) throws Exception {
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("Inactive");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1:         connection.start();
1:         if (consumer.receive(TimeUnit.SECONDS.toMillis(10)) != null) {
1:             fail("Should be no messages for this durable.");
1:         }
1:         consumer.close();
1:         connection.close();
1:     }
1: 
1:     private int consumeFromInactiveDurableSub(Topic topic) throws Exception {
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("Inactive");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "Inactive");
1: 
1:         int count = 0;
1: 
1:         while (consumer.receive(10000) != null) {
1:             count++;
1:         }
1: 
1:         consumer.close();
1:         connection.close();
1: 
1:         return count;
1:     }
1: 
1:     private void sendMessages(Destination destination) throws Exception {
1:         sendMessages(destination, MSG_COUNT);
1:     }
1: 
1:     private void sendMessages(Destination destination, int count) throws Exception {
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         for (int i = 0; i < count; ++i) {
1:             TextMessage message = session.createTextMessage("Message #" + i + " for destination: " + destination);
1:             producer.send(message);
1:         }
1:         connection.close();
1:     }
1: 
1: }
============================================================================