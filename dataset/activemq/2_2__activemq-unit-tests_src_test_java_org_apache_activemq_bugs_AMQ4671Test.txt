1:45c399d: /**
1:45c399d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:45c399d:  * contributor license agreements.  See the NOTICE file distributed with
1:45c399d:  * this work for additional information regarding copyright ownership.
1:45c399d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:45c399d:  * (the "License"); you may not use this file except in compliance with
1:45c399d:  * the License.  You may obtain a copy of the License at
1:45c399d:  *
1:45c399d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:45c399d:  *
1:45c399d:  * Unless required by applicable law or agreed to in writing, software
1:45c399d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:45c399d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:45c399d:  * See the License for the specific language governing permissions and
1:45c399d:  * limitations under the License.
1:45c399d:  */
1:45c399d: package org.apache.activemq.bugs;
1:45c399d: 
1:45c399d: import static org.junit.Assert.fail;
1:45c399d: 
1:45c399d: import javax.jms.Connection;
1:45c399d: import javax.jms.Session;
1:45c399d: 
1:45c399d: import org.apache.activemq.ActiveMQConnectionFactory;
1:45c399d: import org.apache.activemq.broker.BrokerService;
1:45c399d: import org.junit.After;
1:45c399d: import org.junit.Before;
1:45c399d: import org.junit.Test;
1:45c399d: import org.slf4j.Logger;
1:45c399d: import org.slf4j.LoggerFactory;
1:45c399d: 
1:45c399d: public class AMQ4671Test {
1:45c399d: 
1:45c399d:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4671Test.class);
1:45c399d:     private static BrokerService brokerService;
1:45c399d: 
1:45c399d:     private String connectionUri;
1:45c399d: 
1:45c399d:     @Before
1:45c399d:     public void setUp() throws Exception {
1:45c399d:         brokerService = new BrokerService();
1:45c399d:         brokerService.setPersistent(false);
1:6380bf3:         brokerService.setUseJmx(false);
1:6380bf3:         brokerService.setAdvisorySupport(false);
1:45c399d:         brokerService.start();
1:45c399d:         brokerService.waitUntilStarted();
1:6380bf3: 
1:6380bf3:         connectionUri = brokerService.getVmConnectorURI().toString();
1:45c399d:     }
1:45c399d: 
1:45c399d:     @After
1:45c399d:     public void tearDown() throws Exception {
1:45c399d:         brokerService.stop();
1:45c399d:         brokerService.waitUntilStopped();
1:45c399d:     }
1:45c399d: 
1:6380bf3:     @Test(timeout = 30000)
1:45c399d:     public void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {
1:45c399d:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:45c399d: 
1:45c399d:         Connection connection = connectionFactory.createConnection();
1:45c399d:         connection.setClientID(getClass().getName());
1:45c399d:         connection.start();
1:45c399d: 
1:45c399d:         try {
1:45c399d:             Session ts = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:45c399d: 
1:45c399d:             try {
1:45c399d:                 ts.unsubscribe("invalid-subscription-name");
1:45c399d:                 fail("this should fail");
1:45c399d:             } catch (javax.jms.InvalidDestinationException e) {
1:45c399d:                 LOG.info("Test caught correct invalid destination exception");
1:45c399d:             }
1:45c399d:         } finally {
1:45c399d:             if (connection != null) {
1:45c399d:                 connection.close();
1:45c399d:             }
1:45c399d:         }
1:45c399d:     }
1:45c399d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6380bf3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1: 
1:         connectionUri = brokerService.getVmConnectorURI().toString();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:45c399d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4671Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4671Test.class);
1:     private static BrokerService brokerService;
0:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
0:         brokerService.setUseJmx(true);
0:         brokerService.setDeleteAllMessagesOnStartup(true);
0:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
0:         connectionUri = connectionUri + "?trace=true";
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
0:     @Test
1:     public void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(getClass().getName());
1:         connection.start();
1: 
1:         try {
1:             Session ts = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             try {
1:                 ts.unsubscribe("invalid-subscription-name");
1:                 fail("this should fail");
1:             } catch (javax.jms.InvalidDestinationException e) {
1:                 LOG.info("Test caught correct invalid destination exception");
1:             }
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: }
============================================================================