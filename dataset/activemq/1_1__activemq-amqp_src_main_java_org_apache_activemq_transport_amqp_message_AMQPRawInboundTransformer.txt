1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
1:6e69319: 
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_NATIVE;
1:63d62a7: 
1:6e69319: import javax.jms.Message;
1:6e69319: 
1:63d62a7: import org.apache.activemq.command.ActiveMQBytesMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQMessage;
1:63d62a7: import org.apache.activemq.util.ByteSequence;
1:6e69319: 
1:63d62a7: public class AMQPRawInboundTransformer extends InboundTransformer {
1:6e69319: 
1:6e69319:     @Override
1:13b915a:     public String getTransformerName() {
1:13b915a:         return TRANSFORMER_RAW;
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Override
1:13b915a:     public InboundTransformer getFallbackTransformer() {
1:d54e21b:         return null;  // No fallback from full raw transform, message likely dropped.
1:13b915a:     }
1:13b915a: 
1:13b915a:     @Override
1:63d62a7:     protected ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception {
1:63d62a7:         ActiveMQBytesMessage result = new ActiveMQBytesMessage();
1:63d62a7:         result.setContent(new ByteSequence(amqpMessage.getArray(), amqpMessage.getArrayOffset(), amqpMessage.getLength()));
1:6e69319: 
1:11da37b:         // We cannot decode the message headers to check so err on the side of caution
1:11da37b:         // and mark all messages as persistent.
1:63d62a7:         result.setPersistent(true);
1:63d62a7:         result.setPriority((byte) Message.DEFAULT_PRIORITY);
1:6e69319: 
1:6e69319:         final long now = System.currentTimeMillis();
1:63d62a7:         result.setTimestamp(now);
1:63d62a7: 
1:63d62a7:         if (amqpMessage.getMessageFormat() != 0) {
1:63d62a7:             result.setLongProperty(JMS_AMQP_MESSAGE_FORMAT, amqpMessage.getMessageFormat());
2:6e69319:         }
1:6e69319: 
1:63d62a7:         result.setBooleanProperty(JMS_AMQP_NATIVE, true);
1:6e69319: 
1:d54e21b:         return result;
1:6e69319:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_NATIVE;
1: 
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.util.ByteSequence;
1: public class AMQPRawInboundTransformer extends InboundTransformer {
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception {
1:         ActiveMQBytesMessage result = new ActiveMQBytesMessage();
1:         result.setContent(new ByteSequence(amqpMessage.getArray(), amqpMessage.getArrayOffset(), amqpMessage.getLength()));
1:         result.setPersistent(true);
1:         result.setPriority((byte) Message.DEFAULT_PRIORITY);
1:         result.setTimestamp(now);
1: 
1:         if (amqpMessage.getMessageFormat() != 0) {
1:             result.setLongProperty(JMS_AMQP_MESSAGE_FORMAT, amqpMessage.getMessageFormat());
1:         result.setBooleanProperty(JMS_AMQP_NATIVE, true);
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:     public AMQPRawInboundTransformer(ActiveMQJMSVendor vendor) {
/////////////////////////////////////////////////////////////////////////
1:         return null;  // No fallback from full raw transform, message likely dropped.
0:     protected Message doTransform(EncodedMessage amqpMessage) throws Exception {
0:         BytesMessage result = vendor.createBytesMessage(amqpMessage.getArray(), amqpMessage.getArrayOffset(), amqpMessage.getLength());
0:         result.setJMSDeliveryMode(DeliveryMode.PERSISTENT);
0:         result.setJMSPriority(defaultPriority);
0:         result.setJMSTimestamp(now);
0:             result.setJMSExpiration(now + defaultTtl);
0:         result.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
0:         result.setBooleanProperty(prefixVendor + "NATIVE", true);
1:         return result;
commit:11da37b
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1:         // We cannot decode the message headers to check so err on the side of caution
1:         // and mark all messages as persistent.
0:         rc.setJMSDeliveryMode(DeliveryMode.PERSISTENT);
commit:13b915a
/////////////////////////////////////////////////////////////////////////
1:     public String getTransformerName() {
1:         return TRANSFORMER_RAW;
1:     }
1: 
1:     @Override
1:     public InboundTransformer getFallbackTransformer() {
0:         return null;  // No fallback from full raw transform
1:     }
1: 
1:     @Override
commit:2ec586f
/////////////////////////////////////////////////////////////////////////
0:         if (defaultTtl > 0) {
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import javax.jms.BytesMessage;
1: import javax.jms.Message;
1: 
0: public class AMQPRawInboundTransformer extends InboundTransformer {
1: 
0:     public AMQPRawInboundTransformer(JMSVendor vendor) {
0:         super(vendor);
1:     }
1: 
1:     @Override
0:     public Message transform(EncodedMessage amqpMessage) throws Exception {
0:         BytesMessage rc = vendor.createBytesMessage();
0:         rc.writeBytes(amqpMessage.getArray(), amqpMessage.getArrayOffset(), amqpMessage.getLength());
1: 
0:         rc.setJMSDeliveryMode(defaultDeliveryMode);
0:         rc.setJMSPriority(defaultPriority);
1: 
1:         final long now = System.currentTimeMillis();
0:         rc.setJMSTimestamp(now);
0:         if( defaultTtl > 0 ) {
0:             rc.setJMSExpiration(now + defaultTtl);
1:         }
1: 
0:         rc.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
0:         rc.setBooleanProperty(prefixVendor + "NATIVE", true);
1: 
0:         return rc;
1:     }
1: }
============================================================================