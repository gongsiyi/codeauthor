1:9a8f6e4: /**
1:9a8f6e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9a8f6e4:  * contributor license agreements.  See the NOTICE file distributed with
1:9a8f6e4:  * this work for additional information regarding copyright ownership.
1:9a8f6e4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9a8f6e4:  * (the "License"); you may not use this file except in compliance with
1:9a8f6e4:  * the License.  You may obtain a copy of the License at
1:9a8f6e4:  *
1:9a8f6e4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9a8f6e4:  *
1:9a8f6e4:  * Unless required by applicable law or agreed to in writing, software
1:9a8f6e4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a8f6e4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a8f6e4:  * See the License for the specific language governing permissions and
1:9a8f6e4:  * limitations under the License.
1:9a8f6e4:  */
1:9a8f6e4: package org.apache.activemq;
1:9a8f6e4: 
1:9a8f6e4: import org.apache.activemq.transport.Transport;
1:9a8f6e4: 
1:9a8f6e4: import java.io.IOException;
1:9a8f6e4: 
1:9a8f6e4: /**
1:9a8f6e4:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:9a8f6e4:  */
1:9a8f6e4: public class TransportLoggerSupport {
1:9a8f6e4: 
1:9a8f6e4:     public static String defaultLogWriterName = "default";
1:9a8f6e4: 
1:5385fd1:     /**
1:5385fd1:      * Default port to control the transport loggers through JMX
1:5385fd1:      */
1:5385fd1:     public static int defaultJmxPort = 1099;
1:5385fd1: 
1:5385fd1: 
1:9a8f6e4:     public static interface SPI {
1:9a8f6e4:         public Transport createTransportLogger(Transport transport) throws IOException;
1:9a8f6e4:         public Transport createTransportLogger(Transport transport, String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxPort) throws IOException;
1:9a8f6e4:     }
1:9a8f6e4: 
1:9a8f6e4:     final static public SPI spi;
1:9a8f6e4:     static {
1:9a8f6e4:         SPI temp;
1:9a8f6e4:         try {
1:9a8f6e4:             temp = (SPI) TransportLoggerSupport.class.getClassLoader().loadClass("org.apache.activemq.transport.TransportLoggerFactorySPI").newInstance();
1:9a8f6e4:         } catch (Throwable e) {
1:9a8f6e4:             temp = null;
1:9a8f6e4:         }
1:9a8f6e4:         spi = temp;
1:9a8f6e4:     }
1:9a8f6e4: 
1:9a8f6e4:     public static Transport createTransportLogger(Transport transport) throws IOException {
1:9a8f6e4:         if( spi!=null ) {
1:9a8f6e4:             return spi.createTransportLogger(transport);
1:9a8f6e4:         } else {
1:9a8f6e4:             return transport;
1:9a8f6e4:         }
1:9a8f6e4:     }
1:9a8f6e4: 
1:9a8f6e4:     public static Transport createTransportLogger(Transport transport, String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxPort) throws IOException {
1:9a8f6e4:         if( spi!=null ) {
1:9a8f6e4:             return spi.createTransportLogger(transport, logWriterName, dynamicManagement, startLogging, jmxPort);
1:9a8f6e4:         } else {
1:9a8f6e4:             return transport;
1:9a8f6e4:         }
1:9a8f6e4:     }
1:9a8f6e4: 
1:9a8f6e4: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Default port to control the transport loggers through JMX
1:      */
1:     public static int defaultJmxPort = 1099;
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:81a2c83
/////////////////////////////////////////////////////////////////////////
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import org.apache.activemq.transport.Transport;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class TransportLoggerSupport {
1: 
1:     public static String defaultLogWriterName = "default";
1: 
1:     public static interface SPI {
1:         public Transport createTransportLogger(Transport transport) throws IOException;
1:         public Transport createTransportLogger(Transport transport, String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxPort) throws IOException;
1:     }
1: 
1:     final static public SPI spi;
1:     static {
1:         SPI temp;
1:         try {
1:             temp = (SPI) TransportLoggerSupport.class.getClassLoader().loadClass("org.apache.activemq.transport.TransportLoggerFactorySPI").newInstance();
1:         } catch (Throwable e) {
1:             temp = null;
0:             e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:         }
1:         spi = temp;
1:     }
1: 
1:     public static Transport createTransportLogger(Transport transport) throws IOException {
1:         if( spi!=null ) {
1:             return spi.createTransportLogger(transport);
1:         } else {
1:             return transport;
1:         }
1:     }
1: 
1:     public static Transport createTransportLogger(Transport transport, String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxPort) throws IOException {
1:         if( spi!=null ) {
1:             return spi.createTransportLogger(transport, logWriterName, dynamicManagement, startLogging, jmxPort);
1:         } else {
1:             return transport;
1:         }
1:     }
1: 
1: }
============================================================================