1:a0af351: /**
1:a0af351:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0af351:  * contributor license agreements.  See the NOTICE file distributed with
1:a0af351:  * this work for additional information regarding copyright ownership.
1:a0af351:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0af351:  * (the "License"); you may not use this file except in compliance with
1:a0af351:  * the License.  You may obtain a copy of the License at
1:a0af351:  *
1:a0af351:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0af351:  *
1:a0af351:  * Unless required by applicable law or agreed to in writing, software
1:a0af351:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0af351:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0af351:  * See the License for the specific language governing permissions and
1:a0af351:  * limitations under the License.
1:a0af351:  */
1:a0af351: package org.apache.activemq.transport.discovery.http;
3:a0af351: 
1:a0af351: import java.net.URI;
1:a0af351: 
1:e8a06c4: import org.eclipse.jetty.server.Server;
1:e8a06c4: import org.eclipse.jetty.servlet.ServletContextHandler;
1:3b4aadc: import org.eclipse.jetty.servlet.ServletHolder;
1:a0af351: 
1:a0af351: public class EmbeddedJettyServer implements org.apache.activemq.Service {
1:a0af351: 
1:a0af351:     private HTTPDiscoveryAgent agent;
1:a0af351:     private Server server;
1:a0af351:     private DiscoveryRegistryServlet camelServlet = new DiscoveryRegistryServlet();
1:a0af351:     
1:a0af351:     public void start() throws Exception {
1:a0af351:         URI uri = new URI(agent.getRegistryURL());
1:a0af351: 
1:3f82625:         int port = 80;
1:3f82625:         if( uri.getPort() >=0 ) {
1:3f82625:             port = uri.getPort();
1:3f82625:         }
1:3f82625:         server = new Server(port);
1:e8a06c4:         ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS);
1:a0af351:         
1:a0af351:         context.setContextPath("/");
1:a0af351:         ServletHolder holder = new ServletHolder();
1:a0af351:         holder.setServlet(camelServlet);
1:a0af351:         context.addServlet(holder, "/*");
1:a0af351:         server.setHandler(context);
1:a0af351:         server.start();
3:a0af351:     }
1:a0af351: 
1:a0af351:     public void stop() throws Exception {
1:a0af351:         if( server!=null ) {
1:a0af351:             server.stop();
1:a0af351:             server = null;
1:a0af351:         }
1:a0af351:     }
1:a0af351: 
1:a0af351:     public HTTPDiscoveryAgent getAgent() {
1:a0af351:         return agent;
1:a0af351:     }
1:a0af351: 
1:a0af351:     public void setAgent(HTTPDiscoveryAgent agent) {
1:a0af351:         this.agent = agent;
1:a0af351:     }
1:a0af351:     
1:a0af351: 
1:a0af351: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int port = 80;
1:         if( uri.getPort() >=0 ) {
1:             port = uri.getPort();
1:         }
1:         server = new Server(port);
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:a0af351
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery.http;
1: 
1: import java.net.URI;
1: 
0: import org.mortbay.jetty.Server;
0: import org.mortbay.jetty.nio.SelectChannelConnector;
0: import org.mortbay.jetty.servlet.Context;
0: import org.mortbay.jetty.servlet.ServletHolder;
1: 
1: public class EmbeddedJettyServer implements org.apache.activemq.Service {
1: 
1:     private HTTPDiscoveryAgent agent;
1:     private Server server;
0:     private SelectChannelConnector connector;
1:     private DiscoveryRegistryServlet camelServlet = new DiscoveryRegistryServlet();
1:     
1:     public void start() throws Exception {
1:         URI uri = new URI(agent.getRegistryURL());
1: 
0:         server = new Server();
0:         Context context = new Context(Context.NO_SECURITY | Context.NO_SESSIONS);
1:         
1:         context.setContextPath("/");
1:         ServletHolder holder = new ServletHolder();
1:         holder.setServlet(camelServlet);
1:         context.addServlet(holder, "/*");
1:         server.setHandler(context);
1:         server.start();
1:         
0:         int port = 80;
0:         if( uri.getPort() >=0 ) {
0:             port = uri.getPort();
1:         }
1:         
0:         connector = new SelectChannelConnector();
0:         connector.setPort(port);
0:         server.addConnector(connector);
0:         connector.start();
1:     }
1: 
1:     public void stop() throws Exception {
0:         if( connector!=null ) {
0:             connector.stop();
0:             connector = null;
1:         }
1:         if( server!=null ) {
1:             server.stop();
1:             server = null;
1:         }
1:     }
1: 
1:     public HTTPDiscoveryAgent getAgent() {
1:         return agent;
1:     }
1: 
1:     public void setAgent(HTTPDiscoveryAgent agent) {
1:         this.agent = agent;
1:     }
1:     
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.servlet.ServletHolder;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e8a06c4
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
0: import org.eclipse.jetty.servlet.ServletHolder;
1: import org.eclipse.jetty.servlet.ServletContextHandler;
/////////////////////////////////////////////////////////////////////////
1:         ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS);
============================================================================