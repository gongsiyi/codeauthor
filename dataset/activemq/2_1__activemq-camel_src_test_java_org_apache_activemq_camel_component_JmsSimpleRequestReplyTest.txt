1:2f4d11f: /**
1:2f4d11f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2f4d11f:  * contributor license agreements.  See the NOTICE file distributed with
1:2f4d11f:  * this work for additional information regarding copyright ownership.
1:2f4d11f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2f4d11f:  * (the "License"); you may not use this file except in compliance with
1:2f4d11f:  * the License.  You may obtain a copy of the License at
1:2f4d11f:  *
1:2f4d11f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2f4d11f:  *
1:2f4d11f:  * Unless required by applicable law or agreed to in writing, software
1:2f4d11f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f4d11f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f4d11f:  * See the License for the specific language governing permissions and
1:2f4d11f:  * limitations under the License.
1:2f4d11f:  */
1:2f4d11f: package org.apache.activemq.camel.component;
1:2f4d11f: 
1:2f4d11f: import javax.jms.ConnectionFactory;
1:2f4d11f: 
1:2f4d11f: import org.apache.activemq.ActiveMQConnectionFactory;
1:2f4d11f: import org.apache.activemq.pool.PooledConnectionFactory;
1:2f4d11f: import org.apache.camel.CamelContext;
1:2f4d11f: import org.apache.camel.Exchange;
1:2f4d11f: import org.apache.camel.Processor;
1:2f4d11f: import org.apache.camel.builder.RouteBuilder;
1:2f4d11f: import org.apache.camel.component.mock.MockEndpoint;
1:2f4d11f: import org.apache.camel.test.junit4.CamelTestSupport;
1:2f4d11f: import org.junit.Test;
1:2f4d11f: import static org.apache.camel.component.jms.JmsComponent.jmsComponentAutoAcknowledge;
1:2f4d11f: 
1:2f4d11f: /**
1:2f4d11f:  * A simple request / reply test
1:2f4d11f:  */
1:2f4d11f: public class JmsSimpleRequestReplyTest extends CamelTestSupport {
1:2f4d11f: 
1:2f4d11f:     protected String componentName = "activemq";
1:2f4d11f: 
1:2f4d11f:     @Test
1:c4222aa:     public void testRequestReply() throws Exception {
1:2f4d11f:         MockEndpoint result = getMockEndpoint("mock:result");
1:2f4d11f:         result.expectedMessageCount(1);
1:2f4d11f: 
1:2f4d11f:         template.requestBody("activemq:queue:hello", "Hello World");
1:2f4d11f:         
1:2f4d11f:         result.assertIsSatisfied();
2:2f4d11f:     }
1:2f4d11f: 
1:2f4d11f:     protected CamelContext createCamelContext() throws Exception {
1:2f4d11f:         CamelContext camelContext = super.createCamelContext();
1:2f4d11f: 
1:2f4d11f:         ConnectionFactory connectionFactory = createConnectionFactory(null);
1:2f4d11f:         camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory));
1:2f4d11f: 
1:2f4d11f:         return camelContext;
1:2f4d11f:     }
1:2f4d11f: 
1:2f4d11f:     public static ConnectionFactory createConnectionFactory(String options) {
1:2f4d11f:         String url = "vm://test-broker?broker.persistent=false&broker.useJmx=false";
1:2f4d11f:         if (options != null) {
1:2f4d11f:             url = url + "&" + options;
1:2f4d11f:         }
1:2f4d11f:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:2f4d11f:         // use a pooled connection factory
1:2f4d11f:         PooledConnectionFactory pooled = new PooledConnectionFactory(connectionFactory);
1:2f4d11f:         pooled.setMaxConnections(8);
1:2f4d11f:         return pooled;
1:2f4d11f:     }
1:2f4d11f:     
1:2f4d11f:     protected RouteBuilder createRouteBuilder() throws Exception {
1:2f4d11f:         return new RouteBuilder() {
1:2f4d11f:             public void configure() throws Exception {
1:2f4d11f:                 from("activemq:queue:hello").process(new Processor() {
1:2f4d11f:                     public void process(Exchange exchange) throws Exception {
1:2f4d11f:                         exchange.getIn().setBody("Bye World");
1:2f4d11f:                         assertNotNull(exchange.getIn().getHeader("JMSReplyTo"));
1:2f4d11f:                     }
1:2f4d11f:                 }).to("mock:result");
1:2f4d11f:             }
1:2f4d11f:         };
1:c4222aa:     }
1:2f4d11f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
author:Jonathan Anstey
-------------------------------------------------------------------------------
commit:c4222aa
/////////////////////////////////////////////////////////////////////////
1:     public void testRequestReply() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: }
commit:2f4d11f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import javax.jms.ConnectionFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.Exchange;
0: import org.apache.camel.ExchangePattern;
1: import org.apache.camel.Processor;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.component.mock.MockEndpoint;
1: import org.apache.camel.test.junit4.CamelTestSupport;
1: import org.junit.Test;
1: import static org.apache.camel.component.jms.JmsComponent.jmsComponentAutoAcknowledge;
1: 
1: /**
1:  * A simple request / reply test
1:  */
1: public class JmsSimpleRequestReplyTest extends CamelTestSupport {
1: 
1:     protected String componentName = "activemq";
1: 
1:     @Test
0:     public void testRequestReply2Messages() throws Exception {
1:         MockEndpoint result = getMockEndpoint("mock:result");
1:         result.expectedMessageCount(1);
1: 
1:         template.requestBody("activemq:queue:hello", "Hello World");
1:         
1:         result.assertIsSatisfied();
1:     }
1: 
1:     protected CamelContext createCamelContext() throws Exception {
1:         CamelContext camelContext = super.createCamelContext();
1: 
1:         ConnectionFactory connectionFactory = createConnectionFactory(null);
1:         camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory));
1: 
1:         return camelContext;
1:     }
1: 
1:     public static ConnectionFactory createConnectionFactory(String options) {
1:         String url = "vm://test-broker?broker.persistent=false&broker.useJmx=false";
1:         if (options != null) {
1:             url = url + "&" + options;
1:         }
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:         // use a pooled connection factory
1:         PooledConnectionFactory pooled = new PooledConnectionFactory(connectionFactory);
1:         pooled.setMaxConnections(8);
1:         return pooled;
1:     }
1:     
1:     protected RouteBuilder createRouteBuilder() throws Exception {
1:         return new RouteBuilder() {
1:             public void configure() throws Exception {
1:                 from("activemq:queue:hello").process(new Processor() {
1:                     public void process(Exchange exchange) throws Exception {
1:                         exchange.getIn().setBody("Bye World");
1:                         assertNotNull(exchange.getIn().getHeader("JMSReplyTo"));
1:                     }
1:                 }).to("mock:result");
1:             }
1:         };
1:     }
1: }
============================================================================