1:4f7aeec: /**
1:4f7aeec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f7aeec:  * contributor license agreements.  See the NOTICE file distributed with
1:4f7aeec:  * this work for additional information regarding copyright ownership.
1:4f7aeec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f7aeec:  * (the "License"); you may not use this file except in compliance with
1:4f7aeec:  * the License.  You may obtain a copy of the License at
3:4f7aeec:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f7aeec:  *
1:4f7aeec:  * Unless required by applicable law or agreed to in writing, software
1:4f7aeec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f7aeec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f7aeec:  * See the License for the specific language governing permissions and
1:4f7aeec:  * limitations under the License.
1:4f7aeec:  */
1:4f7aeec: package org.apache.activemq.broker.region.virtual;
3:4f7aeec: 
1:74a7a8b: import javax.jms.InvalidSelectorException;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: 
1:4f7aeec: import org.apache.activemq.command.ActiveMQDestination;
1:4f7aeec: import org.apache.activemq.filter.BooleanExpression;
1:4f7aeec: import org.apache.activemq.filter.MessageEvaluationContext;
1:4f7aeec: import org.apache.activemq.selector.SelectorParser;
1:4f7aeec: 
1:4f7aeec: /**
1:4f7aeec:  * Represents a destination which is filtered using some predicate such as a selector
1:4f7aeec:  * so that messages are only dispatched to the destination if they match the filter.
1:4f7aeec:  *
1:4f7aeec:  * @org.apache.xbean.XBean
1:a2781e3:  *
1:0bbc0ac:  *
1:4f7aeec:  */
1:4f7aeec: public class FilteredDestination {
1:a2781e3: 
1:4f7aeec:     private ActiveMQDestination destination;
1:4f7aeec:     private String selector;
1:4f7aeec:     private BooleanExpression filter;
1:4f7aeec: 
1:4f7aeec:     public boolean matches(MessageEvaluationContext context) throws JMSException {
1:4f7aeec:         BooleanExpression booleanExpression = getFilter();
1:4f7aeec:         if (booleanExpression == null) {
1:4f7aeec:             return false;
1:4f7aeec:         }
1:4f7aeec:         return booleanExpression.matches(context);
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     public ActiveMQDestination getDestination() {
1:4f7aeec:         return destination;
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     /**
1:4f7aeec:      * The destination to send messages to if they match the filter
1:4f7aeec:      */
1:4f7aeec:     public void setDestination(ActiveMQDestination destination) {
1:4f7aeec:         this.destination = destination;
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     public String getSelector() {
1:4f7aeec:         return selector;
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     /**
1:4f7aeec:      * Sets the JMS selector used to filter messages before forwarding them to this destination
1:4f7aeec:      */
1:4f7aeec:     public void setSelector(String selector) throws InvalidSelectorException {
1:4f7aeec:         this.selector = selector;
1:1ab76f7:         setFilter(SelectorParser.parse(selector));
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     public BooleanExpression getFilter() {
1:4f7aeec:         return filter;
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     public void setFilter(BooleanExpression filter) {
1:4f7aeec:         this.filter = filter;
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec: 
1:4f7aeec:     /**
1:4f7aeec:      * Sets the destination property to the given queue name
1:4f7aeec:      */
1:4f7aeec:     public void setQueue(String queue) {
1:4f7aeec:         setDestination(ActiveMQDestination.createDestination(queue, ActiveMQDestination.QUEUE_TYPE));
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     /**
1:4f7aeec:      * Sets the destination property to the given topic name
1:4f7aeec:      */
1:4f7aeec:     public void setTopic(String topic) {
1:4f7aeec:         setDestination(ActiveMQDestination.createDestination(topic, ActiveMQDestination.TOPIC_TYPE));
1:4f7aeec:     }
1:a2781e3: 
1:a2781e3:     @Override
1:a2781e3:     public int hashCode() {
1:a2781e3:         final int prime = 31;
1:a2781e3:         int result = 1;
1:a2781e3:         result = prime * result + ((destination == null) ? 0 : destination.hashCode());
1:a2781e3:         result = prime * result + ((selector == null) ? 0 : selector.hashCode());
1:a2781e3:         return result;
1:a2781e3:     }
1:a2781e3: 
1:a2781e3:     @Override
1:a2781e3:     public boolean equals(Object obj) {
1:a2781e3:         if (this == obj)
1:a2781e3:             return true;
1:a2781e3:         if (obj == null)
1:a2781e3:             return false;
1:a2781e3:         if (getClass() != obj.getClass())
1:a2781e3:             return false;
1:a2781e3:         FilteredDestination other = (FilteredDestination) obj;
1:a2781e3:         if (destination == null) {
1:a2781e3:             if (other.destination != null)
1:a2781e3:                 return false;
1:a2781e3:         } else if (!destination.equals(other.destination))
1:a2781e3:             return false;
1:a2781e3:         if (selector == null) {
1:a2781e3:             if (other.selector != null)
1:a2781e3:                 return false;
1:a2781e3:         } else if (!selector.equals(other.selector))
1:a2781e3:             return false;
1:a2781e3:         return true;
1:a2781e3:     }
1:4f7aeec: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a2781e3
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + ((destination == null) ? 0 : destination.hashCode());
1:         result = prime * result + ((selector == null) ? 0 : selector.hashCode());
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj)
1:             return true;
1:         if (obj == null)
1:             return false;
1:         if (getClass() != obj.getClass())
1:             return false;
1:         FilteredDestination other = (FilteredDestination) obj;
1:         if (destination == null) {
1:             if (other.destination != null)
1:                 return false;
1:         } else if (!destination.equals(other.destination))
1:             return false;
1:         if (selector == null) {
1:             if (other.selector != null)
1:                 return false;
1:         } else if (!selector.equals(other.selector))
1:             return false;
1:         return true;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidSelectorException;
1: import javax.jms.JMSException;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1ab76f7
/////////////////////////////////////////////////////////////////////////
1:         setFilter(SelectorParser.parse(selector));
author:James Strachan
-------------------------------------------------------------------------------
commit:4f7aeec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.filter.BooleanExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.selector.SelectorParser;
1: 
0: import javax.jms.InvalidSelectorException;
0: import javax.jms.JMSException;
1: 
1: /**
1:  * Represents a destination which is filtered using some predicate such as a selector
1:  * so that messages are only dispatched to the destination if they match the filter.
1:  *
1:  * @org.apache.xbean.XBean
1:  *
0:  * @version $Revision$
1:  */
1: public class FilteredDestination {
1:     
1:     private ActiveMQDestination destination;
1:     private String selector;
1:     private BooleanExpression filter;
1: 
1:     public boolean matches(MessageEvaluationContext context) throws JMSException {
1:         BooleanExpression booleanExpression = getFilter();
1:         if (booleanExpression == null) {
1:             return false;
1:         }
1:         return booleanExpression.matches(context);
1:     }
1: 
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     /**
1:      * The destination to send messages to if they match the filter
1:      */
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     public String getSelector() {
1:         return selector;
1:     }
1: 
1:     /**
1:      * Sets the JMS selector used to filter messages before forwarding them to this destination
1:      */
1:     public void setSelector(String selector) throws InvalidSelectorException {
1:         this.selector = selector;
0:         setFilter(new SelectorParser().parse(selector));
1:     }
1: 
1:     public BooleanExpression getFilter() {
1:         return filter;
1:     }
1: 
1:     public void setFilter(BooleanExpression filter) {
1:         this.filter = filter;
1:     }
1: 
1: 
1:     /**
1:      * Sets the destination property to the given queue name
1:      */
1:     public void setQueue(String queue) {
1:         setDestination(ActiveMQDestination.createDestination(queue, ActiveMQDestination.QUEUE_TYPE));
1:     }
1: 
1:     /**
1:      * Sets the destination property to the given topic name
1:      */
1:     public void setTopic(String topic) {
1:         setDestination(ActiveMQDestination.createDestination(topic, ActiveMQDestination.TOPIC_TYPE));
1:     }
1: }
============================================================================