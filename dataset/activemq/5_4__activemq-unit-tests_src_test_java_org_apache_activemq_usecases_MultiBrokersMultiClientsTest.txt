1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
11:a677c21: 
1:e48ff70: import java.lang.Thread.UncaughtExceptionHandler;
1:3070d33: import java.net.URI;
1:3070d33: import java.util.HashMap;
1:3070d33: import java.util.Map;
1:e48ff70: import java.util.Map.Entry;
1:3070d33: import java.util.concurrent.CountDownLatch;
1:3070d33: import java.util.concurrent.TimeUnit;
1:230a86c: 
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.MessageConsumer;
1:3070d33: 
1:3070d33: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:3070d33: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e48ff70: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:e48ff70: public class MultiBrokersMultiClientsTest extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:e48ff70:     public static final int BROKER_COUNT = 6; // number of brokers to network
1:e48ff70:     public static final int CONSUMER_COUNT = 25; // consumers per broker
1:230a86c:     public static final int PRODUCER_COUNT = 3; // producers per broker
1:6f851c8:     public static final int MESSAGE_COUNT = 20; // messages per producer
1:e48ff70: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MultiBrokersMultiClientsTest.class);
1:a677c21: 
1:4213e42:     protected Map<String, MessageConsumer> consumerMap;
1:e48ff70:     Map<Thread, Throwable> unhandeledExceptions = new HashMap<Thread, Throwable>();
1:a677c21: 
1:a677c21:     public void testTopicAllConnected() throws Exception {
1:a677c21:         bridgeAllBrokers();
1:a677c21:         startAllBrokers();
1:4213e42:         waitForBridgeFormation();
1:a677c21: 
1:a677c21:         // Setup topic destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:3070d33: 
1:230a86c:         CountDownLatch latch = new CountDownLatch(BROKER_COUNT * PRODUCER_COUNT * BROKER_COUNT * CONSUMER_COUNT * MESSAGE_COUNT);
1:230a86c: 
1:a677c21:         // Setup consumers
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1:3070d33:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest, latch));
1:a677c21:             }
1:a677c21:         }
1:3070d33: 
1:230a86c:         // wait for consumers to get propagated
1:6f851c8:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:6f851c8:         	// all consumers on the remote brokers look like 1 consumer to the local broker.
1:e80bf00:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 65000);
1:6f851c8:         }
1:3070d33: 
1:a677c21:         // Send messages
1:a818270:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < PRODUCER_COUNT; j++) {
1:a677c21:                 sendMessages("Broker" + i, dest, MESSAGE_COUNT);
1:a818270:             }
1:a677c21:         }
1:230a86c: 
1:6f851c8:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
1:3070d33: 
1:a677c21:         // Get message count
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < CONSUMER_COUNT; j++) {
2:a677c21:                 MessageIdList msgs = getConsumerMessages("Broker" + i, (MessageConsumer)consumerMap.get("Consumer:" + i + ":" + j));
1:a677c21:                 assertEquals(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT, msgs.getMessageCount());
1:a677c21:             }
1:a677c21:         }
1:230a86c: 
1:e48ff70:         assertNoUnhandeledExceptions();
1:e48ff70:     }
1:3070d33: 
1:e48ff70:     private void assertNoUnhandeledExceptions() {
1:e48ff70:         for( Entry<Thread, Throwable> e: unhandeledExceptions.entrySet()) {
1:e48ff70:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:e48ff70:         }
1:e48ff70:         assertTrue("There are no unhandelled exceptions, see: log for detail on: " + unhandeledExceptions,
1:e48ff70:                 unhandeledExceptions.isEmpty());
1:a677c21:     }
1:e48ff70: 
1:a677c21:     public void testQueueAllConnected() throws Exception {
1:a677c21:         bridgeAllBrokers();
1:a677c21:         startAllBrokers();
1:4213e42:         this.waitForBridgeFormation();
1:a677c21: 
1:a677c21:         // Setup topic destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", false);
1:3070d33: 
1:3070d33:         CountDownLatch latch = new CountDownLatch(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT);
1:230a86c: 
1:a677c21:         // Setup consumers
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1:3070d33:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest, latch));
1:a677c21:             }
1:a677c21:         }
1:3070d33: 
1:230a86c:         // wait for consumers to get propagated
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:a818270:         	// all consumers on the remote brokers look like 1 consumer to the local broker.
1:e80bf00:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 65000);
1:a677c21:         }
1:a677c21: 
1:a677c21:         // Send messages
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < PRODUCER_COUNT; j++) {
1:a677c21:                 sendMessages("Broker" + i, dest, MESSAGE_COUNT);
1:a677c21:             }
1:a677c21:         }
1:a677c21: 
1:a677c21:         // Wait for messages to be delivered
1:6f851c8:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
1:230a86c: 
1:a677c21:         // Get message count
1:a677c21:         int totalMsg = 0;
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:230a86c:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1:4213e42:                 MessageIdList msgs = getConsumerMessages("Broker" + i, consumerMap.get("Consumer:" + i + ":" + j));
1:a677c21:                 totalMsg += msgs.getMessageCount();
1:a677c21:             }
1:a677c21:         }
1:a677c21:         assertEquals(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT, totalMsg);
1:e48ff70:         
1:e48ff70:         assertNoUnhandeledExceptions();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void setUp() throws Exception {
1:a677c21:         super.setAutoFail(true);
1:a677c21:         super.setUp();
1:a677c21: 
1:e48ff70:         unhandeledExceptions.clear();
1:e48ff70:         Thread.setDefaultUncaughtExceptionHandler(this);
1:e48ff70:         
1:a677c21:         // Setup n brokers
1:230a86c:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:a677c21:             createBroker(new URI("broker:()/Broker" + i + "?persistent=false&useJmx=false"));
1:a677c21:         }
1:a677c21: 
1:4213e42:         consumerMap = new HashMap<String, MessageConsumer>();
1:a677c21:     }
1:a677c21: 
1:e48ff70:     public void uncaughtException(Thread t, Throwable e) {
1:e48ff70:         synchronized(unhandeledExceptions) {
1:e48ff70:             unhandeledExceptions.put(t,e);
1:e48ff70:         }
1:e48ff70:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:6f851c8
/////////////////////////////////////////////////////////////////////////
1:     public static final int MESSAGE_COUNT = 20; // messages per producer
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:         	// all consumers on the remote brokers look like 1 consumer to the local broker.
0:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
commit:a818270
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:         	// all consumers on the remote brokers look like 1 consumer to the local broker.
0:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     public static final int BROKER_COUNT = 2; // number of brokers to network
0:     public static final int CONSUMER_COUNT = 3; // consumers per broker
1:     public static final int PRODUCER_COUNT = 3; // producers per broker
0:     public static final int MESSAGE_COUNT = 10; // messages per producer
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch latch = new CountDownLatch(BROKER_COUNT * PRODUCER_COUNT * BROKER_COUNT * CONSUMER_COUNT * MESSAGE_COUNT);
1: 
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1:         // wait for consumers to get propagated
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < PRODUCER_COUNT; j++) {
1: 
0:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(30, TimeUnit.SECONDS));
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < CONSUMER_COUNT; j++) {
1: 
1:         // wait for consumers to get propagated
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < PRODUCER_COUNT; j++) {
0:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(30, TimeUnit.SECONDS));
1: 
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             for (int j = 0; j < CONSUMER_COUNT; j++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
commit:3070d33
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
0:         CountDownLatch latch = new CountDownLatch(
0:         		BROKER_COUNT * PRODUCER_COUNT * 
0:         		BROKER_COUNT * CONSUMER_COUNT *
0:         		MESSAGE_COUNT);
1:         
1:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest, latch));
1: 
0:         Thread.sleep(5000);
/////////////////////////////////////////////////////////////////////////
1:         
0:         assertTrue("Missing "+latch.getCount()+ " messages", latch.await(30, TimeUnit.SECONDS));
1:         
1:         CountDownLatch latch = new CountDownLatch(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT);
1:         
1:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest, latch));
1:         
0:         //wait for consumers to get propagated
0:         Thread.sleep(5000);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("Missing "+latch.getCount()+ " messages", latch.await(30, TimeUnit.SECONDS));
1:         
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MultiBrokersMultiClientsTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:e80bf00
/////////////////////////////////////////////////////////////////////////
1:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 65000);
/////////////////////////////////////////////////////////////////////////
1:         	assertConsumersConnect("Broker" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 65000);
commit:4213e42
/////////////////////////////////////////////////////////////////////////
1:     protected Map<String, MessageConsumer> consumerMap;
1:         waitForBridgeFormation();
/////////////////////////////////////////////////////////////////////////
1:         this.waitForBridgeFormation();
/////////////////////////////////////////////////////////////////////////
1:                 MessageIdList msgs = getConsumerMessages("Broker" + i, consumerMap.get("Consumer:" + i + ":" + j));
/////////////////////////////////////////////////////////////////////////
1:         consumerMap = new HashMap<String, MessageConsumer>();
commit:e48ff70
/////////////////////////////////////////////////////////////////////////
1: import java.lang.Thread.UncaughtExceptionHandler;
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public class MultiBrokersMultiClientsTest extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:     public static final int BROKER_COUNT = 6; // number of brokers to network
1:     public static final int CONSUMER_COUNT = 25; // consumers per broker
0:     private static final Log LOG = LogFactory.getLog(MultiBrokersMultiClientsTest.class);
1: 
1:     Map<Thread, Throwable> unhandeledExceptions = new HashMap<Thread, Throwable>();
/////////////////////////////////////////////////////////////////////////
1:         assertNoUnhandeledExceptions();
1:     }
1: 
1:     private void assertNoUnhandeledExceptions() {
1:         for( Entry<Thread, Throwable> e: unhandeledExceptions.entrySet()) {
1:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:         }
1:         assertTrue("There are no unhandelled exceptions, see: log for detail on: " + unhandeledExceptions,
1:                 unhandeledExceptions.isEmpty());
/////////////////////////////////////////////////////////////////////////
1:         
1:         assertNoUnhandeledExceptions();
1:         unhandeledExceptions.clear();
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:         
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void uncaughtException(Thread t, Throwable e) {
1:         synchronized(unhandeledExceptions) {
1:             unhandeledExceptions.put(t,e);
1:         }
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.util.MessageIdList;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.net.URI;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class MultiBrokersMultiClientsTest extends JmsMultipleBrokersTestSupport {
0:     public static final int BROKER_COUNT   = 2;  // number of brokers to network
0:     public static final int CONSUMER_COUNT = 3;  // consumers per broker
0:     public static final int PRODUCER_COUNT = 3;  // producers per broker
0:     public static final int MESSAGE_COUNT  = 10; // messages per producer
1: 
0:     protected Map consumerMap;
1: 
1:     public void testTopicAllConnected() throws Exception {
1:         bridgeAllBrokers();
1:         startAllBrokers();
1: 
1: 
1:         // Setup topic destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<CONSUMER_COUNT; j++) {
0:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest));
1:             }
1:         }
0:         //wait for consumers to get propagated
0:         Thread.sleep(2000);
1: 
1:         // Send messages
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<PRODUCER_COUNT; j++) {
1:                 sendMessages("Broker" + i, dest, MESSAGE_COUNT);
1:             }
1:         }
1: 
1:         // Get message count
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<CONSUMER_COUNT; j++) {
1:                 MessageIdList msgs = getConsumerMessages("Broker" + i, (MessageConsumer)consumerMap.get("Consumer:" + i + ":" + j));
0:                 msgs.waitForMessagesToArrive(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT);
1:                 assertEquals(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT, msgs.getMessageCount());
1:             }
1:         }
1:     }
1: 
1:     public void testQueueAllConnected() throws Exception {
1:         bridgeAllBrokers();
1: 
1:         startAllBrokers();
1: 
1:         // Setup topic destination
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<CONSUMER_COUNT; j++) {
0:                 consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest));
1:             }
1:         }
0:         Thread.sleep(2000);
1: 
1:         // Send messages
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<PRODUCER_COUNT; j++) {
1:                 sendMessages("Broker" + i, dest, MESSAGE_COUNT);
1:             }
1:         }
1: 
1:         // Wait for messages to be delivered
0:         Thread.sleep(2000);
1: 
1:         // Get message count
1:         int totalMsg = 0;
0:         for (int i=1; i<=BROKER_COUNT; i++) {
0:             for (int j=0; j<CONSUMER_COUNT; j++) {
1:                 MessageIdList msgs = getConsumerMessages("Broker" + i, (MessageConsumer)consumerMap.get("Consumer:" + i + ":" + j));
1:                 totalMsg += msgs.getMessageCount();
1:             }
1:         }
1: 
1:         assertEquals(BROKER_COUNT * PRODUCER_COUNT * MESSAGE_COUNT, totalMsg);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1: 
1:         // Setup n brokers
0:         for (int i=1; i<=BROKER_COUNT; i++) {
1:             createBroker(new URI("broker:()/Broker" + i + "?persistent=false&useJmx=false"));
1:         }
1: 
0:         consumerMap = new HashMap();
1:     }
1: }
============================================================================