1:540dd5c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
2:40a7d3b: 
1:540dd5c: import java.io.Serializable;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.ConnectionFactory;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.QueueConnection;
1:540dd5c: import javax.jms.QueueConnectionFactory;
1:40a7d3b: import javax.jms.TopicConnection;
1:540dd5c: import javax.jms.TopicConnectionFactory;
1:40a7d3b: import javax.naming.Reference;
1:40a7d3b: import javax.resource.Referenceable;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.ConnectionManager;
1:40a7d3b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:40a7d3b: 
1:3850704: /**
1:b0c2a40:  * 
1:40a7d3b:  */
1:40a7d3b: public class ActiveMQConnectionFactory implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, Referenceable, Serializable {
1:40a7d3b: 
1:40a7d3b:     private static final long serialVersionUID = -5754338187296859149L;
1:40a7d3b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactory.class);
1:dcaf1df:     private ConnectionManager manager;
1:8733d17:     private ActiveMQManagedConnectionFactory factory;
1:40a7d3b:     private Reference reference;
1:40a7d3b:     private final ActiveMQConnectionRequestInfo info;
1:40a7d3b: 
3:40a7d3b:     /**
1:40a7d3b:      * @param factory
1:40a7d3b:      * @param manager
1:8733d17:      * @param connectionRequestInfo
1:40a7d3b:      */
1:8733d17:     public ActiveMQConnectionFactory(
1:8733d17:             ActiveMQManagedConnectionFactory factory, 
1:8733d17:             ConnectionManager manager, 
1:8733d17:             ActiveMQConnectionRequestInfo connectionRequestInfo) {
1:40a7d3b:         this.factory = factory;
1:40a7d3b:         this.manager = manager;
1:8733d17:         this.info = connectionRequestInfo;
2:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.jms.ConnectionFactory#createConnection()
1:40a7d3b:      */
1:40a7d3b:     public Connection createConnection() throws JMSException {
1:40a7d3b:         return createConnection(info.copy());
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @see javax.jms.ConnectionFactory#createConnection(java.lang.String,
1:540dd5c:      *      java.lang.String)
1:40a7d3b:      */
1:40a7d3b:     public Connection createConnection(String userName, String password) throws JMSException {
1:40a7d3b:         ActiveMQConnectionRequestInfo i = info.copy();
1:40a7d3b:         i.setUserName(userName);
1:40a7d3b:         i.setPassword(password);
1:40a7d3b:         return createConnection(i);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:8733d17:      * @param connectionRequestInfo
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:8733d17:     private Connection createConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException {
1:40a7d3b:         try {
1:8733d17:             if (connectionRequestInfo.isUseInboundSessionEnabled()) {
1:40a7d3b:                 return new InboundConnectionProxy();
1:40a7d3b:             }
1:3850704:             if (manager == null) {
1:3850704:                 throw new JMSException("No JCA ConnectionManager configured! Either enable UseInboundSessionEnabled or get your JCA container to configure one.");
1:3850704:             }
1:e39db56: 
1:8733d17:             return (Connection)manager.allocateConnection(factory, connectionRequestInfo);
1:540dd5c:         } catch (ResourceException e) {
1:40a7d3b:             // Throw the root cause if it was a JMSException..
1:40a7d3b:             if (e.getCause() instanceof JMSException) {
1:540dd5c:                 throw (JMSException)e.getCause();
1:40a7d3b:             }
1:540dd5c:             LOG.debug("Connection could not be created:", e);
1:e8818fa:             JMSException jmsException = new JMSException(e.getMessage());
1:e8818fa:             jmsException.setLinkedException(e);
1:e8818fa:             throw jmsException;
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.naming.Referenceable#getReference()
1:40a7d3b:      */
1:40a7d3b:     public Reference getReference() {
1:40a7d3b:         return reference;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.Referenceable#setReference(javax.naming.Reference)
1:40a7d3b:      */
1:40a7d3b:     public void setReference(Reference reference) {
1:40a7d3b:         this.reference = reference;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueConnection createQueueConnection() throws JMSException {
1:540dd5c:         return (QueueConnection)createConnection();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
1:540dd5c:         return (QueueConnection)createConnection(userName, password);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicConnection createTopicConnection() throws JMSException {
1:540dd5c:         return (TopicConnection)createConnection();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
1:540dd5c:         return (TopicConnection)createConnection(userName, password);
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e39db56
/////////////////////////////////////////////////////////////////////////
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1:             JMSException jmsException = new JMSException(e.getMessage());
1:             jmsException.setLinkedException(e);
1:             throw jmsException;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.TopicConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ActiveMQConnectionFactory.class);
0:     private transient ActiveMQManagedConnectionFactory factory;
/////////////////////////////////////////////////////////////////////////
1:      * @see javax.jms.ConnectionFactory#createConnection(java.lang.String,
1:      *      java.lang.String)
/////////////////////////////////////////////////////////////////////////
0:             if (info.isUseInboundSessionEnabled()) {
0:             return (Connection)manager.allocateConnection(factory, info);
1:         } catch (ResourceException e) {
1:                 throw (JMSException)e.getCause();
1:             LOG.debug("Connection could not be created:", e);
/////////////////////////////////////////////////////////////////////////
1:         return (QueueConnection)createConnection();
1:         return (QueueConnection)createConnection(userName, password);
1:         return (TopicConnection)createConnection();
1:         return (TopicConnection)createConnection(userName, password);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactory.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:8733d17
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQManagedConnectionFactory factory;
1:      * @param connectionRequestInfo
1:     public ActiveMQConnectionFactory(
1:             ActiveMQManagedConnectionFactory factory, 
1:             ConnectionManager manager, 
1:             ActiveMQConnectionRequestInfo connectionRequestInfo) {
1:         this.info = connectionRequestInfo;
/////////////////////////////////////////////////////////////////////////
1:      * @param connectionRequestInfo
1:     private Connection createConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException {
1:             if (connectionRequestInfo.isUseInboundSessionEnabled()) {
1:             return (Connection)manager.allocateConnection(factory, connectionRequestInfo);
author:James Strachan
-------------------------------------------------------------------------------
commit:dcaf1df
/////////////////////////////////////////////////////////////////////////
1:     private ConnectionManager manager;
commit:3850704
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:             if (manager == null) {
1:                 throw new JMSException("No JCA ConnectionManager configured! Either enable UseInboundSessionEnabled or get your JCA container to configure one.");
1:             }
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
1:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
1:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, 
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
1:  * See the License for the specific language governing permissions and 
1:  * limitations under the License. 
1:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
0: import javax.jms.QueueConnectionFactory;
1: import javax.jms.QueueConnection;
0: import javax.jms.TopicConnectionFactory;
1: import javax.jms.TopicConnection;
1: import javax.naming.Reference;
1: import javax.resource.Referenceable;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ConnectionManager;
0: import java.io.Serializable;
1: 
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQConnectionFactory implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, Referenceable, Serializable {
1: 
1:     private static final long serialVersionUID = -5754338187296859149L;
1: 
0:     private static final Log log = LogFactory.getLog(ActiveMQConnectionFactory.class);
0:     transient private ConnectionManager manager;
0:     transient private ActiveMQManagedConnectionFactory factory;
1:     private Reference reference;
1:     private final ActiveMQConnectionRequestInfo info;
1: 
1: 
1:     /**
1:      * @param factory
1:      * @param manager
0:      * @param info
1:      */
0:     public ActiveMQConnectionFactory(ActiveMQManagedConnectionFactory factory, ConnectionManager manager, ActiveMQConnectionRequestInfo info) {
1:         this.factory = factory;
1:         this.manager = manager;
0:         this.info = info;
1:     }
1: 
1:     /**
1:      * @see javax.jms.ConnectionFactory#createConnection()
1:      */
1:     public Connection createConnection() throws JMSException {
1:         return createConnection(info.copy());
1:     }
1: 
1:     /**
0:      * @see javax.jms.ConnectionFactory#createConnection(java.lang.String, java.lang.String)
1:      */
1:     public Connection createConnection(String userName, String password) throws JMSException {
1:         ActiveMQConnectionRequestInfo i = info.copy();
1:         i.setUserName(userName);
1:         i.setPassword(password);
1:         return createConnection(i);
1:     }
1: 
1:     /**
0:      * @param info
1:      * @return
1:      * @throws JMSException
1:      */
0:     private Connection createConnection(ActiveMQConnectionRequestInfo info) throws JMSException {
1:         try {
0:             if( info.isUseInboundSessionEnabled() ) {
1:                 return new InboundConnectionProxy();
1:             }
0:             return (Connection) manager.allocateConnection(factory, info);
1:         }
0:         catch (ResourceException e) {
1:             // Throw the root cause if it was a JMSException..
1:             if (e.getCause() instanceof JMSException) {
0:                 throw (JMSException) e.getCause();
1:             }
0:             log.debug("Connection could not be created:", e);
0:             throw new JMSException(e.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.naming.Referenceable#getReference()
1:      */
1:     public Reference getReference() {
1:         return reference;
1:     }
1: 
1:     /**
1:      * @see javax.resource.Referenceable#setReference(javax.naming.Reference)
1:      */
1:     public void setReference(Reference reference) {
1:         this.reference = reference;
1:     }
1: 
1:     public QueueConnection createQueueConnection() throws JMSException {
0:         return (QueueConnection) createConnection();
1:     }
1: 
1:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
0:         return (QueueConnection) createConnection(userName, password);
1:     }
1: 
1:     public TopicConnection createTopicConnection() throws JMSException {
0:         return (TopicConnection) createConnection();
1:     }
1: 
1:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
0:         return (TopicConnection) createConnection(userName, password);
1:     }
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
============================================================================