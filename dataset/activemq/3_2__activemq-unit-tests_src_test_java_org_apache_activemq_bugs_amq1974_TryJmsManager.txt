1:ac0462a: /**
1:ac0462a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ac0462a:  * contributor license agreements.  See the NOTICE file distributed with
1:ac0462a:  * this work for additional information regarding copyright ownership.
1:ac0462a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ac0462a:  * (the "License"); you may not use this file except in compliance with
1:ac0462a:  * the License.  You may obtain a copy of the License at
1:ac0462a:  *
1:ac0462a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ac0462a:  *
1:ac0462a:  * Unless required by applicable law or agreed to in writing, software
1:ac0462a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ac0462a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ac0462a:  * See the License for the specific language governing permissions and
1:ac0462a:  * limitations under the License.
1:ac0462a:  */
1:ac0462a: package org.apache.activemq.bugs.amq1974;
1:b2fca26: 
1:ac0462a: import org.apache.activemq.ActiveMQConnection;
1:ac0462a: import org.apache.activemq.broker.BrokerService;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:ac0462a: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:ac0462a: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1:ac0462a: 
1:b2fca26: import javax.jms.*;
1:b2fca26: import java.io.File;
1:b2fca26: import java.net.URISyntaxException;
1:b2fca26: 
1:ac0462a: public class TryJmsManager {
1:ac0462a: 
1:ac0462a:     private final BrokerService broker = new BrokerService();
1:ac0462a: 
1:ac0462a:     public static void main(String[] args) throws Exception {
1:ac0462a:         new TryJmsManager().start();
1:ac0462a:     }
1:ac0462a: 
1:ac0462a:     private void start() throws Exception {
1:ac0462a: 
1:ac0462a:         broker.setUseJmx(false);
1:ac0462a:         broker.setPersistent(true);
1:ac0462a:         broker.setBrokerName("TestBroker");
1:ac0462a:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:ac0462a: 
1:ac0462a:         broker.getSystemUsage().getMemoryUsage().setLimit(10 * 1024 * 1024);
1:ac0462a: 
1:b2fca26:         LevelDBStore persist = new LevelDBStore();
1:ac0462a:         persist.setDirectory(new File("/tmp/broker1"));
1:b2fca26:         persist.setLogSize(20 * 1024 * 1024);
1:ac0462a:         broker.setPersistenceAdapter(persist);
1:ac0462a: 
1:ac0462a:         String brokerUrl = "tcp://localhost:4500";
1:ac0462a:         broker.addConnector(brokerUrl);
1:ac0462a: 
1:ac0462a:         broker.start();
1:ac0462a: 
1:ac0462a:         addNetworkBroker();
1:ac0462a: 
1:ac0462a:         startUsageMonitor(broker);
1:ac0462a: 
1:ac0462a:         startMessageConsumer();
1:ac0462a: 
1:ac0462a:         synchronized(this) {
1:ac0462a:             this.wait();
1:ac0462a:         }
1:ac0462a:     }
1:ac0462a: 
1:ac0462a:     private void startUsageMonitor(final BrokerService brokerService) {
1:ac0462a:         new Thread(new Runnable() {
1:ac0462a:             public void run() {
1:ac0462a:                 while (true) {
1:ac0462a:                     try {
1:ac0462a:                         Thread.sleep(10000);
1:ac0462a:                     } catch (InterruptedException e) {
1:ac0462a:                         e.printStackTrace();
1:ac0462a:                     }
1:ac0462a: 
1:ac0462a:                     System.out.println("ActiveMQ memeory " + brokerService.getSystemUsage().getMemoryUsage().getPercentUsage()
1:ac0462a:                             + " " + brokerService.getSystemUsage().getMemoryUsage().getUsage());
1:ac0462a:                     System.out.println("ActiveMQ message store " + brokerService.getSystemUsage().getStoreUsage().getPercentUsage());
1:ac0462a:                     System.out.println("ActiveMQ temp space " + brokerService.getSystemUsage().getTempUsage().getPercentUsage());
1:ac0462a:                 }
1:ac0462a:             }
1:ac0462a:         }).start();
1:ac0462a:     }
1:ac0462a: 
1:ac0462a:     private void addNetworkBroker() throws Exception {
1:ac0462a:         DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector();
1:ac0462a:         dnc.setNetworkTTL(1);
1:ac0462a:         dnc.setBrokerName("TestBroker");
1:ac0462a:         dnc.setName("Broker1Connector");
1:ac0462a:         dnc.setDynamicOnly(true);
1:ac0462a: 
1:ac0462a:         SimpleDiscoveryAgent discoveryAgent = new SimpleDiscoveryAgent();
1:ac0462a:         String remoteUrl = "tcp://localhost:4501";
1:ac0462a:         discoveryAgent.setServices(remoteUrl);
1:ac0462a: 
1:ac0462a:         dnc.setDiscoveryAgent(discoveryAgent);
1:ac0462a: 
1:ac0462a:         broker.addNetworkConnector(dnc);
1:ac0462a:         dnc.start();
1:ac0462a:     }
1:ac0462a: 
1:ac0462a:     private void startMessageConsumer() throws JMSException, URISyntaxException {
1:ac0462a:         String url = "vm://TestBroker";
1:ac0462a:         ActiveMQConnection connection = ActiveMQConnection.makeConnection(url);
1:ac0462a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ac0462a:         Destination dest = session.createTopic("TestDestination");
1:ac0462a: 
1:ac0462a:         MessageConsumer consumer = session.createConsumer(dest);
1:ac0462a:         consumer.setMessageListener(new MessageListener() {
1:ac0462a: 
1:ac0462a:             public void onMessage(Message message) {
1:ac0462a:                 try {
1:ac0462a:                     System.out.println("got message " + message.getJMSMessageID());
1:ac0462a:                 } catch (JMSException e) {
1:ac0462a:                     e.printStackTrace();
1:ac0462a:                 }
1:ac0462a:             }
1:ac0462a:         }
1:ac0462a:         );
1:ac0462a: 
1:ac0462a:         connection.start();
1:ac0462a:     }
1:ac0462a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import javax.jms.*;
1: import java.io.File;
1: import java.net.URISyntaxException;
1: 
/////////////////////////////////////////////////////////////////////////
1:         LevelDBStore persist = new LevelDBStore();
1:         persist.setLogSize(20 * 1024 * 1024);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:ac0462a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs.amq1974;
0: import java.io.File;
0: import java.net.URISyntaxException;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
1: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1: 
1: public class TryJmsManager {
1: 
1:     private final BrokerService broker = new BrokerService();
1: 
1:     public static void main(String[] args) throws Exception {
1:         new TryJmsManager().start();
1:     }
1: 
1:     private void start() throws Exception {
1: 
1:         broker.setUseJmx(false);
1:         broker.setPersistent(true);
1:         broker.setBrokerName("TestBroker");
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(10 * 1024 * 1024);
1: 
0:         KahaPersistenceAdapter persist = new KahaPersistenceAdapter();
1:         persist.setDirectory(new File("/tmp/broker1"));
0:         persist.setMaxDataFileLength(20 * 1024 * 1024);
1:         broker.setPersistenceAdapter(persist);
1: 
1:         String brokerUrl = "tcp://localhost:4500";
1:         broker.addConnector(brokerUrl);
1: 
1:         broker.start();
1: 
1:         addNetworkBroker();
1: 
1:         startUsageMonitor(broker);
1: 
1:         startMessageConsumer();
1: 
1:         synchronized(this) {
1:             this.wait();
1:         }
1:     }
1: 
1:     private void startUsageMonitor(final BrokerService brokerService) {
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 while (true) {
1:                     try {
1:                         Thread.sleep(10000);
1:                     } catch (InterruptedException e) {
1:                         e.printStackTrace();
1:                     }
1: 
1:                     System.out.println("ActiveMQ memeory " + brokerService.getSystemUsage().getMemoryUsage().getPercentUsage()
1:                             + " " + brokerService.getSystemUsage().getMemoryUsage().getUsage());
1:                     System.out.println("ActiveMQ message store " + brokerService.getSystemUsage().getStoreUsage().getPercentUsage());
1:                     System.out.println("ActiveMQ temp space " + brokerService.getSystemUsage().getTempUsage().getPercentUsage());
1:                 }
1:             }
1:         }).start();
1:     }
1: 
1:     private void addNetworkBroker() throws Exception {
1:         DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector();
1:         dnc.setNetworkTTL(1);
1:         dnc.setBrokerName("TestBroker");
1:         dnc.setName("Broker1Connector");
1:         dnc.setDynamicOnly(true);
1: 
1:         SimpleDiscoveryAgent discoveryAgent = new SimpleDiscoveryAgent();
1:         String remoteUrl = "tcp://localhost:4501";
1:         discoveryAgent.setServices(remoteUrl);
1: 
1:         dnc.setDiscoveryAgent(discoveryAgent);
1: 
1:         broker.addNetworkConnector(dnc);
1:         dnc.start();
1:     }
1: 
1:     private void startMessageConsumer() throws JMSException, URISyntaxException {
1:         String url = "vm://TestBroker";
1:         ActiveMQConnection connection = ActiveMQConnection.makeConnection(url);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = session.createTopic("TestDestination");
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 try {
1:                     System.out.println("got message " + message.getJMSMessageID());
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         }
1:         );
1: 
1:         connection.start();
1:     }
1: }
============================================================================