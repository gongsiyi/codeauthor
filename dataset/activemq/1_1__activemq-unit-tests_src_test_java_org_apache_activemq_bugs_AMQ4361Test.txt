1:8e388b8: /**
1:8e388b8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e388b8:  * contributor license agreements.  See the NOTICE file distributed with
1:8e388b8:  * this work for additional information regarding copyright ownership.
1:8e388b8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e388b8:  * (the "License"); you may not use this file except in compliance with
1:8e388b8:  * the License.  You may obtain a copy of the License at
1:8e388b8:  *
1:8e388b8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e388b8:  *
1:8e388b8:  * Unless required by applicable law or agreed to in writing, software
1:8e388b8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e388b8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e388b8:  * See the License for the specific language governing permissions and
1:8e388b8:  * limitations under the License.
1:8e388b8:  */
1:8e388b8: package org.apache.activemq.bugs;
1:8e388b8: 
1:8e388b8: import static org.junit.Assert.assertFalse;
1:8e388b8: import static org.junit.Assert.assertNotNull;
1:8e388b8: import static org.junit.Assert.assertNull;
1:8e388b8: 
1:8e388b8: import java.util.Random;
1:8e388b8: import java.util.concurrent.atomic.AtomicLong;
1:8e388b8: import java.util.concurrent.atomic.AtomicReference;
1:8e388b8: 
1:8e388b8: import javax.jms.Connection;
1:8e388b8: import javax.jms.DeliveryMode;
1:8e388b8: import javax.jms.MessageProducer;
1:8e388b8: import javax.jms.ObjectMessage;
1:8e388b8: import javax.jms.Session;
1:8e388b8: 
1:8e388b8: import org.apache.activemq.ActiveMQConnectionFactory;
1:8e388b8: import org.apache.activemq.broker.BrokerService;
1:8e388b8: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8e388b8: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8e388b8: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:8e388b8: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:8e388b8: import org.apache.activemq.command.ActiveMQDestination;
1:8e388b8: import org.junit.After;
1:8e388b8: import org.junit.Before;
1:8e388b8: import org.junit.Test;
1:8e388b8: import org.slf4j.Logger;
1:8e388b8: import org.slf4j.LoggerFactory;
1:8e388b8: 
1:8e388b8: public class AMQ4361Test {
1:8e388b8: 
1:8e388b8:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4361Test.class);
1:8e388b8: 
1:8e388b8:     private BrokerService service;
1:8e388b8:     private String brokerUrlString;
1:8e388b8: 
1:8e388b8:     @Before
1:8e388b8:     public void setUp() throws Exception {
1:8e388b8:         service = new BrokerService();
1:8e388b8:         service.setDeleteAllMessagesOnStartup(true);
1:8e388b8:         service.setUseJmx(false);
1:8e388b8: 
1:8e388b8:         PolicyMap policyMap = new PolicyMap();
1:8e388b8:         PolicyEntry policy = new PolicyEntry();
1:8e388b8:         policy.setMemoryLimit(1);
1:8e388b8:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:8e388b8:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:8e388b8:         policy.setProducerFlowControl(true);
1:8e388b8:         policyMap.setDefaultEntry(policy);
1:8e388b8:         service.setDestinationPolicy(policyMap);
1:8e388b8: 
1:8e388b8:         service.setAdvisorySupport(false);
1:8e388b8:         brokerUrlString = service.addConnector("tcp://localhost:0").getPublishableConnectString();
1:8e388b8:         service.start();
1:8e388b8:         service.waitUntilStarted();
1:8e388b8:     }
1:8e388b8: 
1:8e388b8:     @After
1:8e388b8:     public void tearDown() throws Exception {
1:8e388b8:         if (service != null) {
1:8e388b8:             service.stop();
1:8e388b8:             service.waitUntilStopped();
1:8e388b8:         }
1:8e388b8:     }
1:8e388b8: 
1:8e388b8:     @Test
1:8e388b8:     public void testCloseWhenHunk() throws Exception {
1:8e388b8: 
1:8e388b8:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrlString);
1:8e388b8:         connectionFactory.setProducerWindowSize(1024);
1:8e388b8: 
1:8e388b8:         // TINY QUEUE is flow controlled after 1024 bytes
1:8e388b8:         final ActiveMQDestination destination =
1:8e388b8:             ActiveMQDestination.createDestination("queue://TINY_QUEUE", (byte) 0xff);
1:8e388b8: 
1:8e388b8:         Connection connection = connectionFactory.createConnection();
1:8e388b8:         connection.start();
1:8e388b8:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e388b8:         final MessageProducer producer = session.createProducer(destination);
1:8e388b8:         producer.setTimeToLive(0);
1:8e388b8:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:8e388b8: 
1:8e388b8:         final AtomicReference<Exception> publishException = new AtomicReference<Exception>(null);
1:8e388b8:         final AtomicReference<Exception> closeException = new AtomicReference<Exception>(null);
1:8e388b8:         final AtomicLong lastLoop = new AtomicLong(System.currentTimeMillis() + 100);
1:8e388b8: 
1:8e388b8:         Thread pubThread = new Thread(new Runnable() {
1:8e388b8:             @Override
1:8e388b8:             public void run() {
1:8e388b8:                 try {
1:8e388b8:                     byte[] data = new byte[1000];
1:8e388b8:                     new Random(0xdeadbeef).nextBytes(data);
1:8e388b8:                     for (int i = 0; i < 10000; i++) {
1:8e388b8:                         lastLoop.set(System.currentTimeMillis());
1:8e388b8:                         ObjectMessage objMsg = session.createObjectMessage();
1:8e388b8:                         objMsg.setObject(data);
1:8e388b8:                         producer.send(destination, objMsg);
1:8e388b8:                     }
1:8e388b8:                 } catch (Exception e) {
1:8e388b8:                     publishException.set(e);
1:8e388b8:                 }
1:8e388b8:             }
1:8e388b8:         }, "PublishingThread");
1:8e388b8:         pubThread.start();
1:8e388b8: 
1:8e388b8:         // wait for publisher to deadlock
1:8e388b8:         while (System.currentTimeMillis() - lastLoop.get() < 2000) {
1:8e388b8:             Thread.sleep(100);
1:8e388b8:         }
1:8e388b8:         LOG.info("Publisher deadlock detected.");
1:8e388b8: 
1:8e388b8:         Thread closeThread = new Thread(new Runnable() {
1:8e388b8:             @Override
1:8e388b8:             public void run() {
1:8e388b8:                 try {
1:8e388b8:                     LOG.info("Attempting close..");
1:8e388b8:                     producer.close();
1:8e388b8:                 } catch (Exception e) {
1:8e388b8:                     closeException.set(e);
1:8e388b8:                 }
1:8e388b8:             }
1:8e388b8:         }, "ClosingThread");
1:8e388b8:         closeThread.start();
1:8e388b8: 
1:8e388b8:         try {
1:8e388b8:             closeThread.join(30000);
1:8e388b8:         } catch (InterruptedException ie) {
1:8e388b8:             assertFalse("Closing thread didn't complete in 10 seconds", true);
1:8e388b8:         }
1:8e388b8: 
1:8e388b8:         try {
1:8e388b8:             pubThread.join(30000);
1:8e388b8:         } catch (InterruptedException ie) {
1:8e388b8:             assertFalse("Publishing thread didn't complete in 10 seconds", true);
1:8e388b8:         }
1:8e388b8: 
1:8e388b8:         assertNull(closeException.get());
1:8e388b8:         assertNotNull(publishException.get());
1:8e388b8:     }
1:8e388b8: }
1:8e388b8: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8e388b8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.Random;
1: import java.util.concurrent.atomic.AtomicLong;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4361Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4361Test.class);
1: 
1:     private BrokerService service;
1:     private String brokerUrlString;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         service = new BrokerService();
1:         service.setDeleteAllMessagesOnStartup(true);
1:         service.setUseJmx(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policy.setProducerFlowControl(true);
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         service.setAdvisorySupport(false);
1:         brokerUrlString = service.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (service != null) {
1:             service.stop();
1:             service.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testCloseWhenHunk() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrlString);
1:         connectionFactory.setProducerWindowSize(1024);
1: 
1:         // TINY QUEUE is flow controlled after 1024 bytes
1:         final ActiveMQDestination destination =
1:             ActiveMQDestination.createDestination("queue://TINY_QUEUE", (byte) 0xff);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(0);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         final AtomicReference<Exception> publishException = new AtomicReference<Exception>(null);
1:         final AtomicReference<Exception> closeException = new AtomicReference<Exception>(null);
1:         final AtomicLong lastLoop = new AtomicLong(System.currentTimeMillis() + 100);
1: 
1:         Thread pubThread = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     byte[] data = new byte[1000];
1:                     new Random(0xdeadbeef).nextBytes(data);
1:                     for (int i = 0; i < 10000; i++) {
1:                         lastLoop.set(System.currentTimeMillis());
1:                         ObjectMessage objMsg = session.createObjectMessage();
1:                         objMsg.setObject(data);
1:                         producer.send(destination, objMsg);
1:                     }
1:                 } catch (Exception e) {
1:                     publishException.set(e);
1:                 }
1:             }
1:         }, "PublishingThread");
1:         pubThread.start();
1: 
1:         // wait for publisher to deadlock
1:         while (System.currentTimeMillis() - lastLoop.get() < 2000) {
1:             Thread.sleep(100);
1:         }
1:         LOG.info("Publisher deadlock detected.");
1: 
1:         Thread closeThread = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Attempting close..");
1:                     producer.close();
1:                 } catch (Exception e) {
1:                     closeException.set(e);
1:                 }
1:             }
1:         }, "ClosingThread");
1:         closeThread.start();
1: 
1:         try {
1:             closeThread.join(30000);
1:         } catch (InterruptedException ie) {
1:             assertFalse("Closing thread didn't complete in 10 seconds", true);
1:         }
1: 
1:         try {
1:             pubThread.join(30000);
1:         } catch (InterruptedException ie) {
1:             assertFalse("Publishing thread didn't complete in 10 seconds", true);
1:         }
1: 
1:         assertNull(closeException.get());
1:         assertNotNull(publishException.get());
1:     }
1: }
1: 
============================================================================