1:e8ea6cd: /**
1:e8ea6cd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e8ea6cd:  * contributor license agreements.  See the NOTICE file distributed with
1:e8ea6cd:  * this work for additional information regarding copyright ownership.
1:e8ea6cd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e8ea6cd:  * (the "License"); you may not use this file except in compliance with
1:e8ea6cd:  * the License.  You may obtain a copy of the License at
1:e8ea6cd:  *
1:e8ea6cd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e8ea6cd:  *
1:e8ea6cd:  * Unless required by applicable law or agreed to in writing, software
1:e8ea6cd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e8ea6cd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e8ea6cd:  * See the License for the specific language governing permissions and
1:e8ea6cd:  * limitations under the License.
1:e8ea6cd:  */
1:e8ea6cd: package org.apache.activemq;
1:e8ea6cd: 
1:e8ea6cd: import javax.jms.Session;
1:9e7fae0: 
1:e8ea6cd: import org.apache.activemq.command.ActiveMQQueue;
1:e8ea6cd: import org.apache.activemq.command.ActiveMQTopic;
1:e8ea6cd: import org.junit.Test;
1:e8ea6cd: 
1:e8ea6cd: import static org.junit.Assert.assertEquals;
1:e8ea6cd: import static org.junit.Assert.assertTrue;
1:e8ea6cd: 
1:e8ea6cd: public class PolicyEntryTest extends RuntimeConfigTestSupport {
1:e8ea6cd: 
1:e8ea6cd:     String configurationSeed = "policyEntryTest";
1:e8ea6cd: 
1:e8ea6cd:     @Test
1:e8ea6cd:     public void testMod() throws Exception {
1:e8ea6cd:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:e8ea6cd:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml");
1:e8ea6cd:         startBroker(brokerConfig);
1:e8ea6cd:         assertTrue("broker alive", brokerService.isStarted());
1:e8ea6cd: 
1:e8ea6cd:         verifyQueueLimit("Before", 1024);
1:e8ea6cd:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-mod", SLEEP);
1:77a9ade:         verifyQueueLimit("After", 4194304);
1:e8ea6cd: 
1:e8ea6cd:         // change to existing dest
1:77a9ade:         verifyQueueLimit("Before", 4194304);
1:e8ea6cd:     }
1:e8ea6cd: 
1:e8ea6cd:     @Test
1:e8ea6cd:     public void testAddNdMod() throws Exception {
1:e8ea6cd:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:e8ea6cd:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml");
1:e8ea6cd:         startBroker(brokerConfig);
1:e8ea6cd:         assertTrue("broker alive", brokerService.isStarted());
1:e8ea6cd: 
1:e8ea6cd:         verifyQueueLimit("Before", 1024);
1:e8ea6cd:         verifyTopicLimit("Before", brokerService.getSystemUsage().getMemoryUsage().getLimit());
1:e8ea6cd: 
1:e8ea6cd:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-add", SLEEP);
1:e8ea6cd: 
1:e8ea6cd:         verifyTopicLimit("After", 2048l);
2:e8ea6cd:         verifyQueueLimit("After", 2048);
1:e8ea6cd: 
1:e8ea6cd:         // change to existing dest
1:e8ea6cd:         verifyTopicLimit("Before", 2048l);
1:e8ea6cd:     }
1:e8ea6cd: 
1:9e7fae0:     @Test
1:9e7fae0:     public void testModParentPolicy() throws Exception {
1:9e7fae0:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:9e7fae0:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent");
1:9e7fae0:         startBroker(brokerConfig);
1:9e7fae0:         assertTrue("broker alive", brokerService.isStarted());
1:9e7fae0: 
1:9e7fae0:         verifyQueueLimit("queue.test", 1024);
1:9e7fae0:         verifyQueueLimit("queue.child.test", 2048);
1:9e7fae0:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent-mod", SLEEP);
1:9e7fae0:         verifyQueueLimit("queue.test2", 4194304);
1:9e7fae0: 
1:9e7fae0:         // change to existing dest
1:9e7fae0:         verifyQueueLimit("queue.test", 4194304);
1:9e7fae0:         //verify no change
1:9e7fae0:         verifyQueueLimit("queue.child.test", 2048);
1:9e7fae0:     }
1:9e7fae0: 
1:9e7fae0:     @Test
1:9e7fae0:     public void testModChildPolicy() throws Exception {
1:9e7fae0:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:9e7fae0:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent");
1:9e7fae0:         startBroker(brokerConfig);
1:9e7fae0:         assertTrue("broker alive", brokerService.isStarted());
1:9e7fae0: 
1:9e7fae0:         verifyQueueLimit("queue.test", 1024);
1:9e7fae0:         verifyQueueLimit("queue.child.test", 2048);
1:9e7fae0:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-child-mod", SLEEP);
1:9e7fae0:         //verify no change
1:9e7fae0:         verifyQueueLimit("queue.test", 1024);
1:9e7fae0: 
1:9e7fae0:         // change to existing dest
1:9e7fae0:         verifyQueueLimit("queue.child.test", 4194304);
1:9e7fae0:         //new dest change
1:9e7fae0:         verifyQueueLimit("queue.child.test2", 4194304);
1:9e7fae0:     }
1:9e7fae0: 
1:e8ea6cd:     private void verifyQueueLimit(String dest, int memoryLimit) throws Exception {
1:e8ea6cd:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:e8ea6cd:         try {
1:e8ea6cd:             connection.start();
1:e8ea6cd:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e8ea6cd:             session.createConsumer(session.createQueue(dest));
1:e8ea6cd: 
1:e8ea6cd:             assertEquals(memoryLimit, brokerService.getRegionBroker().getDestinationMap().get(new ActiveMQQueue(dest)).getMemoryUsage().getLimit());
1:e8ea6cd:         } finally {
1:e8ea6cd:             connection.close();
1:e8ea6cd:         }
1:e8ea6cd:     }
1:e8ea6cd: 
1:e8ea6cd:     private void verifyTopicLimit(String dest, long memoryLimit) throws Exception {
1:e8ea6cd:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:e8ea6cd:         try {
1:e8ea6cd:             connection.start();
1:e8ea6cd:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e8ea6cd:             session.createConsumer(session.createTopic(dest));
1:e8ea6cd: 
1:e8ea6cd:             assertEquals(memoryLimit, brokerService.getRegionBroker().getDestinationMap().get(new ActiveMQTopic(dest)).getMemoryUsage().getLimit());
1:e8ea6cd:         } finally {
1:e8ea6cd:             connection.close();
1:e8ea6cd:         }
1:e8ea6cd:     }
1:e8ea6cd: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9e7fae0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testModParentPolicy() throws Exception {
1:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         verifyQueueLimit("queue.test", 1024);
1:         verifyQueueLimit("queue.child.test", 2048);
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent-mod", SLEEP);
1:         verifyQueueLimit("queue.test2", 4194304);
1: 
1:         // change to existing dest
1:         verifyQueueLimit("queue.test", 4194304);
1:         //verify no change
1:         verifyQueueLimit("queue.child.test", 2048);
1:     }
1: 
1:     @Test
1:     public void testModChildPolicy() throws Exception {
1:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-parent");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         verifyQueueLimit("queue.test", 1024);
1:         verifyQueueLimit("queue.child.test", 2048);
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-child-mod", SLEEP);
1:         //verify no change
1:         verifyQueueLimit("queue.test", 1024);
1: 
1:         // change to existing dest
1:         verifyQueueLimit("queue.child.test", 4194304);
1:         //new dest change
1:         verifyQueueLimit("queue.child.test2", 4194304);
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:77a9ade
/////////////////////////////////////////////////////////////////////////
1:         verifyQueueLimit("After", 4194304);
1:         verifyQueueLimit("Before", 4194304);
author:Gary Tully
-------------------------------------------------------------------------------
commit:e8ea6cd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Session;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class PolicyEntryTest extends RuntimeConfigTestSupport {
1: 
1:     String configurationSeed = "policyEntryTest";
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         verifyQueueLimit("Before", 1024);
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-mod", SLEEP);
1:         verifyQueueLimit("After", 2048);
1: 
1:         // change to existing dest
0:         verifyQueueLimit("Before", 2048);
1:     }
1: 
1:     @Test
1:     public void testAddNdMod() throws Exception {
1:         final String brokerConfig = configurationSeed + "-policy-ml-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         verifyQueueLimit("Before", 1024);
1:         verifyTopicLimit("Before", brokerService.getSystemUsage().getMemoryUsage().getLimit());
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-policy-ml-add", SLEEP);
1: 
1:         verifyTopicLimit("After", 2048l);
1:         verifyQueueLimit("After", 2048);
1: 
1:         // change to existing dest
1:         verifyTopicLimit("Before", 2048l);
1:     }
1: 
1:     private void verifyQueueLimit(String dest, int memoryLimit) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createConsumer(session.createQueue(dest));
1: 
1:             assertEquals(memoryLimit, brokerService.getRegionBroker().getDestinationMap().get(new ActiveMQQueue(dest)).getMemoryUsage().getLimit());
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private void verifyTopicLimit(String dest, long memoryLimit) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createConsumer(session.createTopic(dest));
1: 
1:             assertEquals(memoryLimit, brokerService.getRegionBroker().getDestinationMap().get(new ActiveMQTopic(dest)).getMemoryUsage().getLimit());
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: }
============================================================================