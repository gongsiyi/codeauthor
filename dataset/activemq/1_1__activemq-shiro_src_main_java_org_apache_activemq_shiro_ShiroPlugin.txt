1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.ConfigurationException;
1:f9451e5: import org.apache.activemq.broker.Broker;
1:f9451e5: import org.apache.activemq.broker.BrokerPluginSupport;
1:f9451e5: import org.apache.activemq.shiro.authc.AuthenticationFilter;
1:f9451e5: import org.apache.activemq.shiro.authc.AuthenticationPolicy;
1:f9451e5: import org.apache.activemq.shiro.authc.DefaultAuthenticationPolicy;
1:f9451e5: import org.apache.activemq.shiro.authz.AuthorizationFilter;
1:f9451e5: import org.apache.activemq.shiro.env.IniEnvironment;
1:f9451e5: import org.apache.activemq.shiro.subject.ConnectionSubjectFactory;
1:f9451e5: import org.apache.activemq.shiro.subject.DefaultConnectionSubjectFactory;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectFilter;
1:f9451e5: import org.apache.shiro.config.Ini;
1:f9451e5: import org.apache.shiro.env.Environment;
1:f9451e5: import org.apache.shiro.mgt.SecurityManager;
1:f9451e5: import org.slf4j.Logger;
1:f9451e5: import org.slf4j.LoggerFactory;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ShiroPlugin extends BrokerPluginSupport {
1:f9451e5: 
1:f9451e5:     private static final Logger LOG = LoggerFactory.getLogger(ShiroPlugin.class);
1:f9451e5: 
1:f9451e5:     private volatile boolean enabled = true;
1:f9451e5: 
1:f9451e5:     private Broker broker; //the downstream broker after any/all Shiro-specific broker filters
1:f9451e5: 
1:f9451e5:     private SecurityManager securityManager;
1:f9451e5:     private Environment environment;
1:f9451e5:     private IniEnvironment iniEnvironment; //only used if the above environment instance is not explicitly configured
1:f9451e5: 
1:f9451e5:     private SubjectFilter subjectFilter;
1:f9451e5: 
1:f9451e5:     private AuthenticationFilter authenticationFilter;
1:f9451e5: 
1:f9451e5:     private AuthorizationFilter authorizationFilter;
1:f9451e5: 
1:f9451e5:     public ShiroPlugin() {
1:f9451e5: 
1:f9451e5:         //Default if this.environment is not configured. See the ensureEnvironment() method below.
1:f9451e5:         iniEnvironment = new IniEnvironment();
1:f9451e5: 
1:f9451e5:         authorizationFilter = new AuthorizationFilter();
1:f9451e5: 
1:f9451e5:         // we want to share one AuthenticationPolicy instance across both the AuthenticationFilter and the
1:f9451e5:         // ConnectionSubjectFactory:
1:f9451e5:         AuthenticationPolicy authcPolicy = new DefaultAuthenticationPolicy();
1:f9451e5: 
1:f9451e5:         authenticationFilter = new AuthenticationFilter();
1:f9451e5:         authenticationFilter.setAuthenticationPolicy(authcPolicy);
1:f9451e5:         authenticationFilter.setNext(authorizationFilter);
1:f9451e5: 
1:f9451e5:         subjectFilter = new SubjectFilter();
1:f9451e5:         DefaultConnectionSubjectFactory subjectFactory = new DefaultConnectionSubjectFactory();
1:f9451e5:         subjectFactory.setAuthenticationPolicy(authcPolicy);
1:f9451e5:         subjectFilter.setConnectionSubjectFactory(subjectFactory);
1:f9451e5:         subjectFilter.setNext(authenticationFilter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public SubjectFilter getSubjectFilter() {
1:f9451e5:         return subjectFilter;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setSubjectFilter(SubjectFilter subjectFilter) {
1:f9451e5:         this.subjectFilter = subjectFilter;
1:f9451e5:         this.subjectFilter.setNext(this.authenticationFilter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public AuthenticationFilter getAuthenticationFilter() {
1:f9451e5:         return authenticationFilter;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAuthenticationFilter(AuthenticationFilter authenticationFilter) {
1:f9451e5:         this.authenticationFilter = authenticationFilter;
1:f9451e5:         this.authenticationFilter.setNext(this.authorizationFilter);
1:f9451e5:         this.subjectFilter.setNext(authenticationFilter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public AuthorizationFilter getAuthorizationFilter() {
1:f9451e5:         return authorizationFilter;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAuthorizationFilter(AuthorizationFilter authorizationFilter) {
1:f9451e5:         this.authorizationFilter = authorizationFilter;
1:f9451e5:         this.authorizationFilter.setNext(this.broker);
1:f9451e5:         this.authenticationFilter.setNext(authorizationFilter);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setEnabled(boolean enabled) {
1:f9451e5:         this.enabled = enabled;
1:f9451e5:         if (isInstalled()) {
1:f9451e5:             //we're running, so apply the changes now:
1:f9451e5:             applyEnabled(enabled);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public boolean isEnabled() {
1:f9451e5:         if (isInstalled()) {
1:f9451e5:             return getNext() == this.subjectFilter;
1:f9451e5:         }
1:f9451e5:         return enabled;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private void applyEnabled(boolean enabled) {
1:f9451e5:         if (enabled) {
1:f9451e5:             //ensure the SubjectFilter and downstream filters are used:
1:f9451e5:             super.setNext(this.subjectFilter);
1:f9451e5:         } else {
1:f9451e5:             //Shiro is not enabled, restore the original downstream broker:
1:f9451e5:             super.setNext(this.broker);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public Environment getEnvironment() {
1:f9451e5:         return environment;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setEnvironment(Environment environment) {
1:f9451e5:         this.environment = environment;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public SecurityManager getSecurityManager() {
1:f9451e5:         return securityManager;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setSecurityManager(SecurityManager securityManager) {
1:f9451e5:         this.securityManager = securityManager;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIni(Ini ini) {
1:f9451e5:         this.iniEnvironment.setIni(ini);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIniConfig(String iniConfig) {
1:f9451e5:         this.iniEnvironment.setIniConfig(iniConfig);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIniResourcePath(String resourcePath) {
1:f9451e5:         this.iniEnvironment.setIniResourcePath(resourcePath);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     // ===============================================================
1:f9451e5:     // Authentication Configuration
1:f9451e5:     // ===============================================================
1:f9451e5:     public void setAuthenticationEnabled(boolean authenticationEnabled) {
1:f9451e5:         this.authenticationFilter.setEnabled(authenticationEnabled);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public boolean isAuthenticationEnabled() {
1:f9451e5:         return this.authenticationFilter.isEnabled();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public AuthenticationPolicy getAuthenticationPolicy() {
1:f9451e5:         return authenticationFilter.getAuthenticationPolicy();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAuthenticationPolicy(AuthenticationPolicy authenticationPolicy) {
1:f9451e5:         authenticationFilter.setAuthenticationPolicy(authenticationPolicy);
1:f9451e5:         //also set it on the ConnectionSubjectFactory:
1:f9451e5:         ConnectionSubjectFactory factory = subjectFilter.getConnectionSubjectFactory();
1:f9451e5:         if (factory instanceof DefaultConnectionSubjectFactory) {
1:f9451e5:             ((DefaultConnectionSubjectFactory) factory).setAuthenticationPolicy(authenticationPolicy);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     // ===============================================================
1:f9451e5:     // Authorization Configuration
1:f9451e5:     // ===============================================================
1:f9451e5:     public void setAuthorizationEnabled(boolean authorizationEnabled) {
1:f9451e5:         this.authorizationFilter.setEnabled(authorizationEnabled);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public boolean isAuthorizationEnabled() {
1:f9451e5:         return this.authorizationFilter.isEnabled();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private Environment ensureEnvironment() throws ConfigurationException {
1:f9451e5:         if (this.environment != null) {
1:f9451e5:             return this.environment;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         //this.environment is null - set it:
1:f9451e5:         if (this.securityManager != null) {
1:f9451e5:             this.environment = new Environment() {
1:f9451e5:                 @Override
1:f9451e5:                 public SecurityManager getSecurityManager() {
1:f9451e5:                     return ShiroPlugin.this.securityManager;
1:f9451e5:                 }
1:f9451e5:             };
1:f9451e5:             return this.environment;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         this.iniEnvironment.init(); //will automatically catch any config errors and throw.
1:f9451e5: 
1:f9451e5:         this.environment = iniEnvironment;
1:f9451e5: 
1:f9451e5:         return this.iniEnvironment;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Broker installPlugin(Broker broker) throws Exception {
1:f9451e5: 
1:f9451e5:         Environment environment = ensureEnvironment();
1:f9451e5: 
1:f9451e5:         this.authorizationFilter.setEnvironment(environment);
1:f9451e5:         this.authenticationFilter.setEnvironment(environment);
1:f9451e5:         this.subjectFilter.setEnvironment(environment);
1:f9451e5: 
1:f9451e5:         this.broker = broker;
1:f9451e5:         this.authorizationFilter.setNext(broker);
1:f9451e5:         this.authenticationFilter.setNext(this.authorizationFilter);
1:f9451e5:         this.subjectFilter.setNext(this.authenticationFilter);
1:f9451e5: 
1:f9451e5:         Broker next = this.subjectFilter;
1:f9451e5:         if (!this.enabled) {
1:f9451e5:             //not enabled at startup - default to the original broker:
1:f9451e5:             next = broker;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         setNext(next);
1:f9451e5:         return this;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private boolean isInstalled() {
1:f9451e5:         return getNext() != null;
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro;
1: 
1: import org.apache.activemq.ConfigurationException;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.shiro.authc.AuthenticationFilter;
1: import org.apache.activemq.shiro.authc.AuthenticationPolicy;
1: import org.apache.activemq.shiro.authc.DefaultAuthenticationPolicy;
1: import org.apache.activemq.shiro.authz.AuthorizationFilter;
1: import org.apache.activemq.shiro.env.IniEnvironment;
1: import org.apache.activemq.shiro.subject.ConnectionSubjectFactory;
1: import org.apache.activemq.shiro.subject.DefaultConnectionSubjectFactory;
1: import org.apache.activemq.shiro.subject.SubjectFilter;
1: import org.apache.shiro.config.Ini;
1: import org.apache.shiro.env.Environment;
1: import org.apache.shiro.mgt.SecurityManager;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class ShiroPlugin extends BrokerPluginSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ShiroPlugin.class);
1: 
1:     private volatile boolean enabled = true;
1: 
1:     private Broker broker; //the downstream broker after any/all Shiro-specific broker filters
1: 
1:     private SecurityManager securityManager;
1:     private Environment environment;
1:     private IniEnvironment iniEnvironment; //only used if the above environment instance is not explicitly configured
1: 
1:     private SubjectFilter subjectFilter;
1: 
1:     private AuthenticationFilter authenticationFilter;
1: 
1:     private AuthorizationFilter authorizationFilter;
1: 
1:     public ShiroPlugin() {
1: 
1:         //Default if this.environment is not configured. See the ensureEnvironment() method below.
1:         iniEnvironment = new IniEnvironment();
1: 
1:         authorizationFilter = new AuthorizationFilter();
1: 
1:         // we want to share one AuthenticationPolicy instance across both the AuthenticationFilter and the
1:         // ConnectionSubjectFactory:
1:         AuthenticationPolicy authcPolicy = new DefaultAuthenticationPolicy();
1: 
1:         authenticationFilter = new AuthenticationFilter();
1:         authenticationFilter.setAuthenticationPolicy(authcPolicy);
1:         authenticationFilter.setNext(authorizationFilter);
1: 
1:         subjectFilter = new SubjectFilter();
1:         DefaultConnectionSubjectFactory subjectFactory = new DefaultConnectionSubjectFactory();
1:         subjectFactory.setAuthenticationPolicy(authcPolicy);
1:         subjectFilter.setConnectionSubjectFactory(subjectFactory);
1:         subjectFilter.setNext(authenticationFilter);
1:     }
1: 
1:     public SubjectFilter getSubjectFilter() {
1:         return subjectFilter;
1:     }
1: 
1:     public void setSubjectFilter(SubjectFilter subjectFilter) {
1:         this.subjectFilter = subjectFilter;
1:         this.subjectFilter.setNext(this.authenticationFilter);
1:     }
1: 
1:     public AuthenticationFilter getAuthenticationFilter() {
1:         return authenticationFilter;
1:     }
1: 
1:     public void setAuthenticationFilter(AuthenticationFilter authenticationFilter) {
1:         this.authenticationFilter = authenticationFilter;
1:         this.authenticationFilter.setNext(this.authorizationFilter);
1:         this.subjectFilter.setNext(authenticationFilter);
1:     }
1: 
1:     public AuthorizationFilter getAuthorizationFilter() {
1:         return authorizationFilter;
1:     }
1: 
1:     public void setAuthorizationFilter(AuthorizationFilter authorizationFilter) {
1:         this.authorizationFilter = authorizationFilter;
1:         this.authorizationFilter.setNext(this.broker);
1:         this.authenticationFilter.setNext(authorizationFilter);
1:     }
1: 
1:     public void setEnabled(boolean enabled) {
1:         this.enabled = enabled;
1:         if (isInstalled()) {
1:             //we're running, so apply the changes now:
1:             applyEnabled(enabled);
1:         }
1:     }
1: 
1:     public boolean isEnabled() {
1:         if (isInstalled()) {
1:             return getNext() == this.subjectFilter;
1:         }
1:         return enabled;
1:     }
1: 
1:     private void applyEnabled(boolean enabled) {
1:         if (enabled) {
1:             //ensure the SubjectFilter and downstream filters are used:
1:             super.setNext(this.subjectFilter);
1:         } else {
1:             //Shiro is not enabled, restore the original downstream broker:
1:             super.setNext(this.broker);
1:         }
1:     }
1: 
1:     public Environment getEnvironment() {
1:         return environment;
1:     }
1: 
1:     public void setEnvironment(Environment environment) {
1:         this.environment = environment;
1:     }
1: 
1:     public SecurityManager getSecurityManager() {
1:         return securityManager;
1:     }
1: 
1:     public void setSecurityManager(SecurityManager securityManager) {
1:         this.securityManager = securityManager;
1:     }
1: 
1:     public void setIni(Ini ini) {
1:         this.iniEnvironment.setIni(ini);
1:     }
1: 
1:     public void setIniConfig(String iniConfig) {
1:         this.iniEnvironment.setIniConfig(iniConfig);
1:     }
1: 
1:     public void setIniResourcePath(String resourcePath) {
1:         this.iniEnvironment.setIniResourcePath(resourcePath);
1:     }
1: 
1:     // ===============================================================
1:     // Authentication Configuration
1:     // ===============================================================
1:     public void setAuthenticationEnabled(boolean authenticationEnabled) {
1:         this.authenticationFilter.setEnabled(authenticationEnabled);
1:     }
1: 
1:     public boolean isAuthenticationEnabled() {
1:         return this.authenticationFilter.isEnabled();
1:     }
1: 
1:     public AuthenticationPolicy getAuthenticationPolicy() {
1:         return authenticationFilter.getAuthenticationPolicy();
1:     }
1: 
1:     public void setAuthenticationPolicy(AuthenticationPolicy authenticationPolicy) {
1:         authenticationFilter.setAuthenticationPolicy(authenticationPolicy);
1:         //also set it on the ConnectionSubjectFactory:
1:         ConnectionSubjectFactory factory = subjectFilter.getConnectionSubjectFactory();
1:         if (factory instanceof DefaultConnectionSubjectFactory) {
1:             ((DefaultConnectionSubjectFactory) factory).setAuthenticationPolicy(authenticationPolicy);
1:         }
1:     }
1: 
1:     // ===============================================================
1:     // Authorization Configuration
1:     // ===============================================================
1:     public void setAuthorizationEnabled(boolean authorizationEnabled) {
1:         this.authorizationFilter.setEnabled(authorizationEnabled);
1:     }
1: 
1:     public boolean isAuthorizationEnabled() {
1:         return this.authorizationFilter.isEnabled();
1:     }
1: 
1:     private Environment ensureEnvironment() throws ConfigurationException {
1:         if (this.environment != null) {
1:             return this.environment;
1:         }
1: 
1:         //this.environment is null - set it:
1:         if (this.securityManager != null) {
1:             this.environment = new Environment() {
1:                 @Override
1:                 public SecurityManager getSecurityManager() {
1:                     return ShiroPlugin.this.securityManager;
1:                 }
1:             };
1:             return this.environment;
1:         }
1: 
1:         this.iniEnvironment.init(); //will automatically catch any config errors and throw.
1: 
1:         this.environment = iniEnvironment;
1: 
1:         return this.iniEnvironment;
1:     }
1: 
1:     @Override
1:     public Broker installPlugin(Broker broker) throws Exception {
1: 
1:         Environment environment = ensureEnvironment();
1: 
1:         this.authorizationFilter.setEnvironment(environment);
1:         this.authenticationFilter.setEnvironment(environment);
1:         this.subjectFilter.setEnvironment(environment);
1: 
1:         this.broker = broker;
1:         this.authorizationFilter.setNext(broker);
1:         this.authenticationFilter.setNext(this.authorizationFilter);
1:         this.subjectFilter.setNext(this.authenticationFilter);
1: 
1:         Broker next = this.subjectFilter;
1:         if (!this.enabled) {
1:             //not enabled at startup - default to the original broker:
1:             next = broker;
1:         }
1: 
1:         setNext(next);
1:         return this;
1:     }
1: 
1:     private boolean isInstalled() {
1:         return getNext() != null;
1:     }
1: }
============================================================================