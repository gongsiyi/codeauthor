1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
1:e14aca8: package org.apache.activemq.transport.auto;
2:04ee70a: 
1:04ee70a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:04ee70a: import java.net.URI;
1:04ee70a: import java.net.URISyntaxException;
1:04ee70a: import java.util.HashMap;
1:04ee70a: import java.util.Map;
1:04ee70a: import java.util.Set;
1:04ee70a: 
1:04ee70a: import javax.net.ServerSocketFactory;
1:04ee70a: import javax.net.ssl.SSLServerSocketFactory;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.broker.BrokerService;
1:04ee70a: import org.apache.activemq.broker.BrokerServiceAware;
1:04ee70a: import org.apache.activemq.transport.TransportServer;
1:04ee70a: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport;
1:7e648d5: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:88af1c7: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:88af1c7: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:04ee70a: import org.apache.activemq.util.IOExceptionSupport;
1:04ee70a: import org.apache.activemq.util.IntrospectionSupport;
1:04ee70a: import org.apache.activemq.util.URISupport;
1:04ee70a: import org.apache.activemq.wireformat.WireFormat;
1:04ee70a: 
1:04ee70a: 
1:04ee70a: public class AutoSslTransportFactory extends SslTransportFactory implements BrokerServiceAware  {
1:04ee70a: 
1:04ee70a:     protected BrokerService brokerService;
1:04ee70a:     /* (non-Javadoc)
1:04ee70a:      * @see org.apache.activemq.broker.BrokerServiceAware#setBrokerService(org.apache.activemq.broker.BrokerService)
1:04ee70a:      */
2:04ee70a:     @Override
1:04ee70a:     public void setBrokerService(BrokerService brokerService) {
1:04ee70a:         this.brokerService = brokerService;
3:04ee70a:     }
1:88af1c7: 
1:04ee70a:     private Set<String> enabledProtocols;
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Overriding to use SslTransportServer and allow for proper reflection.
1:04ee70a:      */
1:88af1c7:     @Override
1:04ee70a:     public TransportServer doBind(final URI location) throws IOException {
1:04ee70a:         try {
1:04ee70a:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:04ee70a: 
1:04ee70a:             Map<String, Object> autoProperties = IntrospectionSupport.extractProperties(options, "auto.");
1:04ee70a:             this.enabledProtocols = AutoTransportUtils.parseProtocols((String) autoProperties.get("protocols"));
1:04ee70a: 
1:04ee70a:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:04ee70a:             AutoSslTransportServer server = createAutoSslTransportServer(location, (SSLServerSocketFactory)serverSocketFactory);
1:04ee70a:             if (options.get("allowLinkStealing") != null){
1:04ee70a:                 allowLinkStealingSet = true;
1:04ee70a:             }
1:04ee70a:             IntrospectionSupport.setProperties(server, options);
1:04ee70a:             server.setAutoTransportOptions(IntrospectionSupport.extractProperties(options, "auto."));
1:04ee70a:             server.setTransportOption(IntrospectionSupport.extractProperties(options, "transport."));
1:04ee70a:             server.setWireFormatOptions(AutoTransportUtils.extractWireFormatOptions(options));
1:04ee70a:             server.bind();
1:04ee70a: 
1:04ee70a:             return server;
1:04ee70a:         } catch (URISyntaxException e) {
1:04ee70a:             throw IOExceptionSupport.create(e);
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     boolean allowLinkStealingSet = false;
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Allows subclasses of SslTransportFactory to create custom instances of
1:04ee70a:      * SslTransportServer.
1:04ee70a:      *
1:04ee70a:      * @param location
1:04ee70a:      * @param serverSocketFactory
1:04ee70a:      * @return
1:04ee70a:      * @throws IOException
1:04ee70a:      * @throws URISyntaxException
1:04ee70a:      */
1:04ee70a:     protected AutoSslTransportServer createAutoSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:04ee70a:         AutoSslTransportServer server = new AutoSslTransportServer(this, location, serverSocketFactory,
1:04ee70a:                 this.brokerService, enabledProtocols) {
1:04ee70a: 
1:04ee70a:             @Override
1:88af1c7:             protected TcpTransport createTransport(Socket socket, WireFormat format,
1:7e648d5:                     TcpTransportFactory detectedTransportFactory, InitBuffer initBuffer) throws IOException {
2:88af1c7:                 setDefaultLinkStealing(format, this);
1:7e648d5:                 return super.createTransport(socket, format, detectedTransportFactory, initBuffer);
1:88af1c7:             }
1:04ee70a:         };
1:04ee70a:         return server;
1:04ee70a:     }
1:04ee70a: 
1:88af1c7:     private void setDefaultLinkStealing(WireFormat format, TcpTransportServer server) {
1:88af1c7:         if (format.getClass().toString().contains("MQTT") && !allowLinkStealingSet) {
1:88af1c7:             server.setAllowLinkStealing(true);
1:88af1c7:         }
1:88af1c7:     }
1:04ee70a: 
1:04ee70a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:7e648d5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:                     TcpTransportFactory detectedTransportFactory, InitBuffer initBuffer) throws IOException {
1:                 return super.createTransport(socket, format, detectedTransportFactory, initBuffer);
commit:88af1c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
/////////////////////////////////////////////////////////////////////////
1:                 setDefaultLinkStealing(format, this);
1: 
1:             @Override
1:             protected TcpTransport createTransport(Socket socket, WireFormat format,
0:                     TcpTransportFactory detectedTransportFactory) throws IOException {
1:                 setDefaultLinkStealing(format, this);
0:                 return super.createTransport(socket, format, detectedTransportFactory);
1:             }
1:     private void setDefaultLinkStealing(WireFormat format, TcpTransportServer server) {
1:         if (format.getClass().toString().contains("MQTT") && !allowLinkStealingSet) {
1:             server.setAllowLinkStealing(true);
1:         }
1:     }
commit:9ab9488
/////////////////////////////////////////////////////////////////////////
commit:98c5866
/////////////////////////////////////////////////////////////////////////
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.auto;
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.broker.transport.auto;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.ssl.SSLServerSocketFactory;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
0: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
0: import org.apache.activemq.transport.tcp.SslTransportServer;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class AutoSslTransportFactory extends SslTransportFactory implements BrokerServiceAware  {
0:     private static final Logger LOG = LoggerFactory.getLogger(AutoSslTransportFactory.class);
1: 
1: 
1:     protected BrokerService brokerService;
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.broker.BrokerServiceAware#setBrokerService(org.apache.activemq.broker.BrokerService)
1:      */
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: 
1:     private Set<String> enabledProtocols;
1: 
1:     /**
1:      * Overriding to use SslTransportServer and allow for proper reflection.
1:      */
1:     @Override
1:     public TransportServer doBind(final URI location) throws IOException {
1:         try {
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1: 
1:             Map<String, Object> autoProperties = IntrospectionSupport.extractProperties(options, "auto.");
1:             this.enabledProtocols = AutoTransportUtils.parseProtocols((String) autoProperties.get("protocols"));
1: 
1:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:             AutoSslTransportServer server = createAutoSslTransportServer(location, (SSLServerSocketFactory)serverSocketFactory);
1:             if (options.get("allowLinkStealing") != null){
1:                 allowLinkStealingSet = true;
1:             }
1:             IntrospectionSupport.setProperties(server, options);
1:             server.setAutoTransportOptions(IntrospectionSupport.extractProperties(options, "auto."));
1:             server.setTransportOption(IntrospectionSupport.extractProperties(options, "transport."));
1:             server.setWireFormatOptions(AutoTransportUtils.extractWireFormatOptions(options));
1:             server.bind();
1: 
1:             return server;
1:         } catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     boolean allowLinkStealingSet = false;
1: 
1:     /**
1:      * Allows subclasses of SslTransportFactory to create custom instances of
1:      * SslTransportServer.
1:      *
1:      * @param location
1:      * @param serverSocketFactory
1:      * @return
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      */
0:    // @Override
1:     protected AutoSslTransportServer createAutoSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         AutoSslTransportServer server = new AutoSslTransportServer(this, location, serverSocketFactory,
1:                 this.brokerService, enabledProtocols) {
1:             @Override
0:             protected TcpTransport createTransport(Socket socket, WireFormat format)
0:                     throws IOException {
0:                 if (format.getClass().toString().contains("MQTT") && !allowLinkStealingSet) {
0:                     this.setAllowLinkStealing(true);
1:                 }
0:                 return super.createTransport(socket, format);
1:             }
1:         };
1:         return server;
1:     }
1: 
1: 
1: }
============================================================================