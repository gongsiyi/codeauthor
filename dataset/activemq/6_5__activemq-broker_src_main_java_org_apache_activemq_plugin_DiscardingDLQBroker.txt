1:dad506d: /**
1:dad506d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dad506d:  * contributor license agreements.  See the NOTICE file distributed with
1:dad506d:  * this work for additional information regarding copyright ownership.
1:dad506d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dad506d:  * (the "License"); you may not use this file except in compliance with
1:dad506d:  * the License.  You may obtain a copy of the License at
1:dad506d:  *
1:dad506d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dad506d:  *
1:dad506d:  * Unless required by applicable law or agreed to in writing, software
1:dad506d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dad506d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dad506d:  * See the License for the specific language governing permissions and
1:dad506d:  * limitations under the License.
1:dad506d:  */
1:0bb9013: package org.apache.activemq.plugin;
3:dad506d: 
1:dad506d: import java.util.regex.Pattern;
1:0bb9013: 
1:dad506d: import org.apache.activemq.broker.Broker;
1:dad506d: import org.apache.activemq.broker.BrokerFilter;
1:dad506d: import org.apache.activemq.broker.ConnectionContext;
1:dad506d: import org.apache.activemq.broker.region.MessageReference;
1:27c1719: import org.apache.activemq.broker.region.Subscription;
1:dad506d: import org.apache.activemq.command.ActiveMQDestination;
1:dad506d: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:dad506d: 
1:dad506d: /**
1:dad506d:  */
1:dad506d: public class DiscardingDLQBroker extends BrokerFilter {
1:8bf987b:     public static Logger log = LoggerFactory.getLogger(DiscardingDLQBroker.class);
1:dad506d:     private boolean dropTemporaryTopics = true;
1:dad506d:     private boolean dropTemporaryQueues = true;
1:dad506d:     private boolean dropAll = true;
1:dad506d:     private Pattern[] destFilter;
1:dad506d:     private int reportInterval = 1000;
1:dad506d:     private long dropCount = 0;
1:dad506d: 
1:dad506d:     public DiscardingDLQBroker(Broker next) {
1:dad506d:         super(next);
7:dad506d:     }
1:dad506d: 
1:dad506d:     @Override
1:708be6d:     public boolean sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef, Subscription subscription, Throwable poisonCause) {
1:e1bbde7:         log.trace("Discarding DLQ BrokerFilter[pass through] - skipping message: {}", (msgRef != null ? msgRef.getMessage() : null));
1:dad506d:         boolean dropped = true;
1:dad506d:         Message msg = null;
1:dad506d:         ActiveMQDestination dest = null;
1:dad506d:         String destName = null;
1:00879cf:         msg = msgRef.getMessage();
1:00879cf:         dest = msg.getDestination();
1:00879cf:         destName = dest.getPhysicalName();
1:dad506d: 
1:0bb9013:         if (dest == null || destName == null) {
1:0bb9013:             // do nothing, no need to forward it
1:0bb9013:             skipMessage("NULL DESTINATION", msgRef);
1:dad506d:         } else if (dropAll) {
1:0bb9013:             // do nothing
1:0bb9013:             skipMessage("dropAll", msgRef);
1:dad506d:         } else if (dropTemporaryTopics && dest.isTemporary() && dest.isTopic()) {
1:0bb9013:             // do nothing
1:0bb9013:             skipMessage("dropTemporaryTopics", msgRef);
1:dad506d:         } else if (dropTemporaryQueues && dest.isTemporary() && dest.isQueue()) {
1:0bb9013:             // do nothing
1:0bb9013:             skipMessage("dropTemporaryQueues", msgRef);
1:0bb9013:         } else if (destFilter != null && matches(destName)) {
1:0bb9013:             // do nothing
1:0bb9013:             skipMessage("dropOnly", msgRef);
1:dad506d:         } else {
1:dad506d:             dropped = false;
1:708be6d:             return next.sendToDeadLetterQueue(ctx, msgRef, subscription, poisonCause);
1:dad506d:         }
1:0bb9013: 
1:0bb9013:         if (dropped && getReportInterval() > 0) {
1:0bb9013:             if ((++dropCount) % getReportInterval() == 0) {
1:e1bbde7:                 log.info("Total of {} messages were discarded, since their destination was the dead letter queue", dropCount);
1:dad506d:             }
1:dad506d:         }
1:0bb9013: 
1:0bb9013:         return false;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean matches(String destName) {
1:0bb9013:         for (int i = 0; destFilter != null && i < destFilter.length; i++) {
1:0bb9013:             if (destFilter[i] != null && destFilter[i].matcher(destName).matches()) {
1:dad506d:                 return true;
1:dad506d:             }
1:dad506d:         }
1:dad506d:         return false;
1:dad506d:     }
1:dad506d: 
1:dad506d:     private void skipMessage(String prefix, MessageReference msgRef) {
1:e1bbde7:         log.debug("Discarding DLQ BrokerFilter[{}] - skipping message: {}", prefix, (msgRef != null ? msgRef.getMessage() : null));
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropTemporaryTopics(boolean dropTemporaryTopics) {
1:dad506d:         this.dropTemporaryTopics = dropTemporaryTopics;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropTemporaryQueues(boolean dropTemporaryQueues) {
1:dad506d:         this.dropTemporaryQueues = dropTemporaryQueues;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDropAll(boolean dropAll) {
1:dad506d:         this.dropAll = dropAll;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setDestFilter(Pattern[] destFilter) {
1:dad506d:         this.destFilter = destFilter;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public void setReportInterval(int reportInterval) {
1:dad506d:         this.reportInterval = reportInterval;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropTemporaryTopics() {
1:dad506d:         return dropTemporaryTopics;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropTemporaryQueues() {
1:dad506d:         return dropTemporaryQueues;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public boolean isDropAll() {
1:dad506d:         return dropAll;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public Pattern[] getDestFilter() {
1:dad506d:         return destFilter;
1:dad506d:     }
1:dad506d: 
1:dad506d:     public int getReportInterval() {
1:dad506d:         return reportInterval;
1:dad506d:     }
1:dad506d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         log.trace("Discarding DLQ BrokerFilter[pass through] - skipping message: {}", (msgRef != null ? msgRef.getMessage() : null));
/////////////////////////////////////////////////////////////////////////
1:                 log.info("Total of {} messages were discarded, since their destination was the dead letter queue", dropCount);
/////////////////////////////////////////////////////////////////////////
1:         log.debug("Discarding DLQ BrokerFilter[{}] - skipping message: {}", prefix, (msgRef != null ? msgRef.getMessage() : null));
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:     public boolean sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef, Subscription subscription, Throwable poisonCause) {
/////////////////////////////////////////////////////////////////////////
1:             return next.sendToDeadLetterQueue(ctx, msgRef, subscription, poisonCause);
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public void sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef,
0:                                       Subscription subscription) {
/////////////////////////////////////////////////////////////////////////
0:             next.sendToDeadLetterQueue(ctx, msgRef, subscription);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.plugin;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public boolean sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef, Subscription subscription) {
/////////////////////////////////////////////////////////////////////////
1:         if (dest == null || destName == null) {
1:             // do nothing, no need to forward it
1:             skipMessage("NULL DESTINATION", msgRef);
1:             // do nothing
1:             skipMessage("dropAll", msgRef);
1:             // do nothing
1:             skipMessage("dropTemporaryTopics", msgRef);
1:             // do nothing
1:             skipMessage("dropTemporaryQueues", msgRef);
1:         } else if (destFilter != null && matches(destName)) {
1:             // do nothing
1:             skipMessage("dropOnly", msgRef);
0:             return next.sendToDeadLetterQueue(ctx, msgRef, subscription);
1: 
1:         if (dropped && getReportInterval() > 0) {
1:             if ((++dropCount) % getReportInterval() == 0) {
0:                 log.info("Total of " + dropCount + " messages were discarded, since their destination was the dead letter queue");
1: 
1:         return false;
1:         for (int i = 0; destFilter != null && i < destFilter.length; i++) {
1:             if (destFilter[i] != null && destFilter[i].matcher(destName).matches()) {
/////////////////////////////////////////////////////////////////////////
0:             String lmsg = "Discarding DLQ BrokerFilter[" + prefix + "] - skipping message:" + (msgRef != null ? msgRef.getMessage() : null);
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     public static Logger log = LoggerFactory.getLogger(DiscardingDLQBroker.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             log.trace("Discarding DLQ BrokerFilter[pass through] - skipping message:" + (msgRef != null ? msgRef.getMessage() : null));
1:         msg = msgRef.getMessage();
1:         dest = msg.getDestination();
1:         destName = dest.getPhysicalName();
/////////////////////////////////////////////////////////////////////////
0:             String lmsg = "Discarding DLQ BrokerFilter["+prefix+"] - skipping message:" + (msgRef!=null?msgRef.getMessage():null);
0:             log.debug(lmsg);
commit:dad506d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0:  package org.apache.activemq.plugin;
1: 
0: import java.io.IOException;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @author Filip Hanik
0:  * @version 1.0
1:  */
1: public class DiscardingDLQBroker extends BrokerFilter {
0:     public static Log log = LogFactory.getLog(DiscardingDLQBroker.class);
1:     private boolean dropTemporaryTopics = true;
1:     private boolean dropTemporaryQueues = true;
1:     private boolean dropAll = true;
1:     private Pattern[] destFilter;
1:     private int reportInterval = 1000;
1:     private long dropCount = 0;
1: 
1:     public DiscardingDLQBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     @Override
0:     public void sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef) {
0:         if (log.isTraceEnabled()) {
0:             try {
0:                 log.trace("Discarding DLQ BrokerFilter[pass through] - skipping message:" + (msgRef != null ? msgRef.getMessage() : null));
0:             } catch (IOException x) {
0:                 log.trace("Discarding DLQ BrokerFilter[pass through] - skipping message:" + msgRef != null ? msgRef : null, x);
1:             }
1:         }
1:         boolean dropped = true;
1:         Message msg = null;
1:         ActiveMQDestination dest = null;
1:         String destName = null;
0:         try {
0:             msg = msgRef.getMessage();
0:             dest = msg.getDestination();
0:             destName = dest.getPhysicalName();
0:         }catch (IOException x) {
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Unable to retrieve message or destination for message going to Dead Letter Queue. message skipped.", x);
1:             }
1:         }
1: 
0:         if (dest == null || destName == null ) {
0:             //do nothing, no need to forward it
0:             skipMessage("NULL DESTINATION",msgRef);
1:         } else if (dropAll) {
0:             //do nothing
0:             skipMessage("dropAll",msgRef);
1:         } else if (dropTemporaryTopics && dest.isTemporary() && dest.isTopic()) {
0:             //do nothing
0:             skipMessage("dropTemporaryTopics",msgRef);
1:         } else if (dropTemporaryQueues && dest.isTemporary() && dest.isQueue()) {
0:             //do nothing
0:             skipMessage("dropTemporaryQueues",msgRef);
0:         } else if (destFilter!=null && matches(destName)) {
0:             //do nothing
0:             skipMessage("dropOnly",msgRef);
1:         } else {
1:             dropped = false;
0:             next.sendToDeadLetterQueue(ctx, msgRef);
1:         }
0:         if (dropped && getReportInterval()>0) {
0:             if ((++dropCount)%getReportInterval() == 0 ) {
0:                 log.info("Total of "+dropCount+" messages were discarded, since their destination was the dead letter queue");
1:             }
1:         }
1:     }
1: 
1:     public boolean matches(String destName) {
0:         for (int i=0; destFilter!=null && i<destFilter.length; i++) {
0:             if (destFilter[i]!=null && destFilter[i].matcher(destName).matches()) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     private void skipMessage(String prefix, MessageReference msgRef) {
0:         if (log.isDebugEnabled()) {
0:             try {
0:                 String lmsg = "Discarding DLQ BrokerFilter["+prefix+"] - skipping message:" + (msgRef!=null?msgRef.getMessage():null);
0:                 log.debug(lmsg);
0:             }catch (IOException x) {
0:                 log.debug("Discarding DLQ BrokerFilter["+prefix+"] - skipping message:" + (msgRef!=null?msgRef:null),x);
1:             }
1:         }
1:     }
1: 
1:     public void setDropTemporaryTopics(boolean dropTemporaryTopics) {
1:         this.dropTemporaryTopics = dropTemporaryTopics;
1:     }
1: 
1:     public void setDropTemporaryQueues(boolean dropTemporaryQueues) {
1:         this.dropTemporaryQueues = dropTemporaryQueues;
1:     }
1: 
1:     public void setDropAll(boolean dropAll) {
1:         this.dropAll = dropAll;
1:     }
1: 
1:     public void setDestFilter(Pattern[] destFilter) {
1:         this.destFilter = destFilter;
1:     }
1: 
1:     public void setReportInterval(int reportInterval) {
1:         this.reportInterval = reportInterval;
1:     }
1: 
1:     public boolean isDropTemporaryTopics() {
1:         return dropTemporaryTopics;
1:     }
1: 
1:     public boolean isDropTemporaryQueues() {
1:         return dropTemporaryQueues;
1:     }
1: 
1:     public boolean isDropAll() {
1:         return dropAll;
1:     }
1: 
1:     public Pattern[] getDestFilter() {
1:         return destFilter;
1:     }
1: 
1:     public int getReportInterval() {
1:         return reportInterval;
1:     }
1: 
1: }
============================================================================