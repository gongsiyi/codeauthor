1:0a8e505: /*
1:0a8e505:  * Copyright 2012 The Apache Software Foundation.
1:0a8e505:  *
1:0a8e505:  * Licensed under the Apache License, Version 2.0 (the "License");
1:0a8e505:  * you may not use this file except in compliance with the License.
1:0a8e505:  * You may obtain a copy of the License at
1:0a8e505:  *
1:0a8e505:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0a8e505:  *
1:0a8e505:  * Unless required by applicable law or agreed to in writing, software
1:0a8e505:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a8e505:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a8e505:  * See the License for the specific language governing permissions and
1:0a8e505:  * limitations under the License.
1:0a8e505:  */
1:0a8e505: package org.apache.activemq.jaas;
1:0a8e505: 
1:0a8e505: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:0a8e505: import org.apache.directory.server.core.integ.FrameworkRunner;
1:0a8e505: import org.apache.directory.server.integ.ServerIntegrationUtils;
1:0a8e505: import org.apache.directory.server.ldap.LdapServer;
1:0a8e505: import org.apache.directory.server.annotations.CreateLdapServer;
1:0a8e505: import org.apache.directory.server.annotations.CreateTransport;
1:0a8e505: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:0a8e505: import org.junit.After;
1:0a8e505: import org.junit.Before;
1:0a8e505: import org.junit.Test;
1:0a8e505: import org.junit.runner.RunWith;
1:0a8e505: 
1:0a8e505: import javax.naming.Context;
1:0a8e505: import javax.naming.NameClassPair;
1:0a8e505: import javax.naming.NamingEnumeration;
1:0a8e505: import javax.naming.directory.DirContext;
1:0a8e505: import javax.naming.directory.InitialDirContext;
1:0a8e505: import javax.security.auth.callback.*;
1:0a8e505: import javax.security.auth.login.LoginContext;
1:0a8e505: import javax.security.auth.login.LoginException;
1:0a8e505: import java.io.IOException;
1:0a8e505: import java.net.URL;
1:0a8e505: import java.security.Principal;
1:0a8e505: import java.util.HashSet;
1:0a8e505: import java.util.Hashtable;
1:0a8e505: import javax.security.auth.Subject;
1:0a8e505: 
1:0a8e505: import static org.junit.Assert.assertTrue;
1:0a8e505: 
1:0a8e505: @RunWith(FrameworkRunner.class)
1:0a8e505: @CreateLdapServer(transports = {
1:0a8e505:    @CreateTransport(protocol = "LDAP", port = 1024)})
1:0a8e505: @ApplyLdifFiles("test.ldif")
1:0a8e505: public class LDAPModuleRoleExpansionTest extends AbstractLdapTestUnit {
1:0a8e505: 
1:0a8e505:    public static LdapServer ldapServer;
1:0a8e505:    private static final String PRINCIPAL = "uid=admin,ou=system";
1:0a8e505:    private static final String CREDENTIALS = "secret";
1:0a8e505:    private final String loginConfigSysPropName = "java.security.auth.login.config";
1:0a8e505:    private String oldLoginConfig;
1:0a8e505: 
1:0a8e505:    @Before
1:0a8e505:    public void setLoginConfigSysProperty() {
1:0a8e505:        oldLoginConfig = System.getProperty(loginConfigSysPropName, null);
1:0a8e505:        System.setProperty(loginConfigSysPropName, "src/test/resources/login.config");
1:0a8e505:    }
1:0a8e505: 
1:0a8e505:    @After
1:0a8e505:    public void resetLoginConfigSysProperty() {
1:0a8e505:        if (oldLoginConfig != null) {
1:0a8e505:            System.setProperty(loginConfigSysPropName, oldLoginConfig);
1:0a8e505:        }
1:0a8e505:    }
1:0a8e505: 
1:0a8e505:    @SuppressWarnings("unchecked")
1:0a8e505:    @Test
1:0a8e505:    public void testRunning() throws Exception {
1:0a8e505: 
1:0a8e505:        Hashtable env = new Hashtable();
1:0a8e505:        env.put(Context.PROVIDER_URL, "ldap://localhost:1024");
1:0a8e505:        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
1:0a8e505:        env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:0a8e505:        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
1:0a8e505:        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1:0a8e505:        DirContext ctx = new InitialDirContext(env);
1:0a8e505: 
1:0a8e505:        HashSet set = new HashSet();
1:0a8e505: 
1:0a8e505:        NamingEnumeration list = ctx.list("ou=system");
1:0a8e505: 
1:0a8e505:        while (list.hasMore()) {
1:0a8e505:            NameClassPair ncp = (NameClassPair) list.next();
1:0a8e505:            set.add(ncp.getName());
1:0a8e505:        }
1:0a8e505: 
1:0a8e505:        assertTrue(set.contains("uid=admin"));
1:0a8e505:        assertTrue(set.contains("ou=users"));
1:0a8e505:        assertTrue(set.contains("ou=groups"));
1:0a8e505:        assertTrue(set.contains("ou=configuration"));
1:0a8e505:        assertTrue(set.contains("prefNodeName=sysPrefRoot"));
1:0a8e505: 
1:0a8e505:    }
1:0a8e505: 
1:0a8e505:    @Test
1:0a8e505:    public void testRoleExpansion() throws LoginException {
1:0a8e505:        LoginContext context = new LoginContext("ExpandedLDAPLogin", new CallbackHandler() {
1:0a8e505:            public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:0a8e505:                for (int i = 0; i < callbacks.length; i++) {
1:0a8e505:                    if (callbacks[i] instanceof NameCallback) {
1:0a8e505:                        ((NameCallback) callbacks[i]).setName("first");
1:0a8e505:                    } else if (callbacks[i] instanceof PasswordCallback) {
1:0a8e505:                        ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:0a8e505:                    } else {
1:0a8e505:                        throw new UnsupportedCallbackException(callbacks[i]);
1:0a8e505:                    }
1:0a8e505:                }
1:0a8e505:            }
1:0a8e505:        });
1:0a8e505:        context.login();
1:0a8e505:        Subject subject = context.getSubject();
1:0a8e505:        boolean isAdmin = false;
1:0a8e505:        boolean isUser = false;
1:0a8e505:        for(Principal principal : subject.getPrincipals())
1:0a8e505:        {
1:0a8e505:            if (principal instanceof GroupPrincipal)
1:0a8e505:            {
1:0a8e505:                GroupPrincipal groupPrincipal = (GroupPrincipal)principal;
1:0a8e505:                if (groupPrincipal.getName().equalsIgnoreCase("admins"))
1:0a8e505:                    isAdmin = true;
1:0a8e505:                if (groupPrincipal.getName().equalsIgnoreCase("users"))
1:0a8e505:                    isUser = true;
1:0a8e505:            }
1:0a8e505:        }
1:0a8e505:        // Should be in users by virtue of being in admins
1:0a8e505:        assertTrue(isAdmin && isUser);
1:0a8e505:        context.logout();
1:0a8e505:    }
1:0a8e505: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0a8e505
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2012 The Apache Software Foundation.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.integ.ServerIntegrationUtils;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: import javax.naming.Context;
1: import javax.naming.NameClassPair;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.directory.DirContext;
1: import javax.naming.directory.InitialDirContext;
1: import javax.security.auth.callback.*;
1: import javax.security.auth.login.LoginContext;
1: import javax.security.auth.login.LoginException;
1: import java.io.IOException;
1: import java.net.URL;
1: import java.security.Principal;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import javax.security.auth.Subject;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: @RunWith(FrameworkRunner.class)
1: @CreateLdapServer(transports = {
1:    @CreateTransport(protocol = "LDAP", port = 1024)})
1: @ApplyLdifFiles("test.ldif")
1: public class LDAPModuleRoleExpansionTest extends AbstractLdapTestUnit {
1: 
1:    public static LdapServer ldapServer;
1:    private static final String PRINCIPAL = "uid=admin,ou=system";
1:    private static final String CREDENTIALS = "secret";
1:    private final String loginConfigSysPropName = "java.security.auth.login.config";
1:    private String oldLoginConfig;
1: 
1:    @Before
1:    public void setLoginConfigSysProperty() {
1:        oldLoginConfig = System.getProperty(loginConfigSysPropName, null);
1:        System.setProperty(loginConfigSysPropName, "src/test/resources/login.config");
1:    }
1: 
1:    @After
1:    public void resetLoginConfigSysProperty() {
1:        if (oldLoginConfig != null) {
1:            System.setProperty(loginConfigSysPropName, oldLoginConfig);
1:        }
1:    }
1: 
1:    @SuppressWarnings("unchecked")
1:    @Test
1:    public void testRunning() throws Exception {
1: 
1:        Hashtable env = new Hashtable();
1:        env.put(Context.PROVIDER_URL, "ldap://localhost:1024");
1:        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
1:        env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
1:        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1:        DirContext ctx = new InitialDirContext(env);
1: 
1:        HashSet set = new HashSet();
1: 
1:        NamingEnumeration list = ctx.list("ou=system");
1: 
1:        while (list.hasMore()) {
1:            NameClassPair ncp = (NameClassPair) list.next();
1:            set.add(ncp.getName());
1:        }
1: 
1:        assertTrue(set.contains("uid=admin"));
1:        assertTrue(set.contains("ou=users"));
1:        assertTrue(set.contains("ou=groups"));
1:        assertTrue(set.contains("ou=configuration"));
1:        assertTrue(set.contains("prefNodeName=sysPrefRoot"));
1: 
1:    }
1: 
1:    @Test
1:    public void testRoleExpansion() throws LoginException {
1:        LoginContext context = new LoginContext("ExpandedLDAPLogin", new CallbackHandler() {
1:            public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                for (int i = 0; i < callbacks.length; i++) {
1:                    if (callbacks[i] instanceof NameCallback) {
1:                        ((NameCallback) callbacks[i]).setName("first");
1:                    } else if (callbacks[i] instanceof PasswordCallback) {
1:                        ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:                    } else {
1:                        throw new UnsupportedCallbackException(callbacks[i]);
1:                    }
1:                }
1:            }
1:        });
1:        context.login();
1:        Subject subject = context.getSubject();
1:        boolean isAdmin = false;
1:        boolean isUser = false;
1:        for(Principal principal : subject.getPrincipals())
1:        {
1:            if (principal instanceof GroupPrincipal)
1:            {
1:                GroupPrincipal groupPrincipal = (GroupPrincipal)principal;
1:                if (groupPrincipal.getName().equalsIgnoreCase("admins"))
1:                    isAdmin = true;
1:                if (groupPrincipal.getName().equalsIgnoreCase("users"))
1:                    isUser = true;
1:            }
1:        }
1:        // Should be in users by virtue of being in admins
1:        assertTrue(isAdmin && isUser);
1:        context.logout();
1:    }
1: }
============================================================================