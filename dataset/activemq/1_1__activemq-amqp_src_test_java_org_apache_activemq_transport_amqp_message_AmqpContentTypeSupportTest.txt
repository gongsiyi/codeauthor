1:d54e21b: /*
1:d54e21b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d54e21b:  * contributor license agreements.  See the NOTICE file distributed with
1:d54e21b:  * this work for additional information regarding copyright ownership.
1:d54e21b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d54e21b:  * (the "License"); you may not use this file except in compliance with
1:d54e21b:  * the License.  You may obtain a copy of the License at
1:d54e21b:  *
1:d54e21b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d54e21b:  *
1:d54e21b:  * Unless required by applicable law or agreed to in writing, software
1:d54e21b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d54e21b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d54e21b:  * See the License for the specific language governing permissions and
1:d54e21b:  * limitations under the License.
1:d54e21b:  */
1:d54e21b: package org.apache.activemq.transport.amqp.message;
1:d54e21b: 
1:d54e21b: import static org.junit.Assert.assertEquals;
1:d54e21b: import static org.junit.Assert.assertNull;
1:d54e21b: 
1:d54e21b: import java.nio.charset.Charset;
1:d54e21b: import java.nio.charset.StandardCharsets;
1:d54e21b: 
1:d54e21b: import org.junit.Test;
1:d54e21b: 
1:d54e21b: public class AmqpContentTypeSupportTest {
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeWithOnlyType() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("type", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeEndsWithSlash() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("type/", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeMissingSubtype() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("type/;", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeEmptyString() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeNullString() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl(null, null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeNoParamsAfterSeparatorNonTextual() throws Exception {
1:d54e21b:         // Expect null as this is not a textual type
1:d54e21b:         doParseContentTypeTestImpl("type/subtype;", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeNoParamsAfterSeparatorTextualType() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeEmptyParamsAfterSeparator() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;;", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeNoParams() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithCharsetUtf8() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithCharsetAscii() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithMultipleParams() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain; param=value; charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithCharsetQuoted() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=\"us-ascii\"", StandardCharsets.US_ASCII);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeWithCharsetQuotedEmpty() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=\"\"", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeWithCharsetQuoteNotClosed() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=\"unclosed", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeWithCharsetQuoteNotClosedEmpty() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=\"", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test (expected = InvalidContentTypeException.class)
1:d54e21b:     public void testParseContentTypeWithNoCharsetValue() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithTextPlain() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithTextJson() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("text/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("text/json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("text/json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithTextHtml() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/html;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("text/html;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("text/html;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("text/html", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithTextFoo() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("text/foo;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("text/foo;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("text/foo;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("text/foo", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationJson() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationJsonVariant() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/something+json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/something+json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/something+json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/something+json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationJavascript() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/javascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/javascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/javascript;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/javascript", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationEcmascript() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/ecmascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/ecmascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/ecmascript;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/ecmascript", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationXml() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/xml;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/xml", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationXmlVariant() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/something+xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/something+xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/something+xml;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/something+xml", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationXmlDtd() throws Exception {
1:d54e21b:         doParseContentTypeTestImpl("application/xml-dtd;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doParseContentTypeTestImpl("application/xml-dtd;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doParseContentTypeTestImpl("application/xml-dtd;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doParseContentTypeTestImpl("application/xml-dtd", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationOtherNotTextual() throws Exception {
1:d54e21b:         // Expect null as this is not a textual type
1:d54e21b:         doParseContentTypeTestImpl("application/other", null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationOctetStream() throws Exception {
1:d54e21b:         // Expect null as this is not a textual type
1:d54e21b:         doParseContentTypeTestImpl(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE, null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testParseContentTypeWithApplicationJavaSerialized() throws Exception {
1:d54e21b:         // Expect null as this is not a textual type
1:d54e21b:         doParseContentTypeTestImpl(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private void doParseContentTypeTestImpl(String contentType, Charset expected) throws InvalidContentTypeException {
1:d54e21b:         Charset charset = AmqpContentTypeSupport.parseContentTypeForTextualCharset(contentType);
1:d54e21b:         if (expected == null) {
1:d54e21b:             assertNull("Expected no charset, but got:" + charset, charset);
1:d54e21b:         } else {
1:d54e21b:             assertEquals("Charset not as expected", expected, charset);
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.nio.charset.Charset;
1: import java.nio.charset.StandardCharsets;
1: 
1: import org.junit.Test;
1: 
1: public class AmqpContentTypeSupportTest {
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeWithOnlyType() throws Exception {
1:         doParseContentTypeTestImpl("type", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeEndsWithSlash() throws Exception {
1:         doParseContentTypeTestImpl("type/", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeMissingSubtype() throws Exception {
1:         doParseContentTypeTestImpl("type/;", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeEmptyString() throws Exception {
1:         doParseContentTypeTestImpl("", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeNullString() throws Exception {
1:         doParseContentTypeTestImpl(null, null);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeNoParamsAfterSeparatorNonTextual() throws Exception {
1:         // Expect null as this is not a textual type
1:         doParseContentTypeTestImpl("type/subtype;", null);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeNoParamsAfterSeparatorTextualType() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeEmptyParamsAfterSeparator() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;;", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeNoParams() throws Exception {
1:         doParseContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithCharsetUtf8() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithCharsetAscii() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithMultipleParams() throws Exception {
1:         doParseContentTypeTestImpl("text/plain; param=value; charset=us-ascii", StandardCharsets.US_ASCII);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithCharsetQuoted() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=\"us-ascii\"", StandardCharsets.US_ASCII);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeWithCharsetQuotedEmpty() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=\"\"", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeWithCharsetQuoteNotClosed() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=\"unclosed", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeWithCharsetQuoteNotClosedEmpty() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=\"", null);
1:     }
1: 
1:     @Test (expected = InvalidContentTypeException.class)
1:     public void testParseContentTypeWithNoCharsetValue() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=", null);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithTextPlain() throws Exception {
1:         doParseContentTypeTestImpl("text/plain;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithTextJson() throws Exception {
1:         doParseContentTypeTestImpl("text/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("text/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("text/json;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("text/json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithTextHtml() throws Exception {
1:         doParseContentTypeTestImpl("text/html;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("text/html;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("text/html;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("text/html", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithTextFoo() throws Exception {
1:         doParseContentTypeTestImpl("text/foo;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("text/foo;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("text/foo;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("text/foo", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationJson() throws Exception {
1:         doParseContentTypeTestImpl("application/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/json;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationJsonVariant() throws Exception {
1:         doParseContentTypeTestImpl("application/something+json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/something+json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/something+json;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/something+json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationJavascript() throws Exception {
1:         doParseContentTypeTestImpl("application/javascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/javascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/javascript;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/javascript", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationEcmascript() throws Exception {
1:         doParseContentTypeTestImpl("application/ecmascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/ecmascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/ecmascript;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/ecmascript", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationXml() throws Exception {
1:         doParseContentTypeTestImpl("application/xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/xml;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/xml", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationXmlVariant() throws Exception {
1:         doParseContentTypeTestImpl("application/something+xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/something+xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/something+xml;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/something+xml", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationXmlDtd() throws Exception {
1:         doParseContentTypeTestImpl("application/xml-dtd;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doParseContentTypeTestImpl("application/xml-dtd;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doParseContentTypeTestImpl("application/xml-dtd;charset=utf-8", StandardCharsets.UTF_8);
1:         doParseContentTypeTestImpl("application/xml-dtd", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationOtherNotTextual() throws Exception {
1:         // Expect null as this is not a textual type
1:         doParseContentTypeTestImpl("application/other", null);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationOctetStream() throws Exception {
1:         // Expect null as this is not a textual type
1:         doParseContentTypeTestImpl(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE, null);
1:     }
1: 
1:     @Test
1:     public void testParseContentTypeWithApplicationJavaSerialized() throws Exception {
1:         // Expect null as this is not a textual type
1:         doParseContentTypeTestImpl(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE, null);
1:     }
1: 
1:     private void doParseContentTypeTestImpl(String contentType, Charset expected) throws InvalidContentTypeException {
1:         Charset charset = AmqpContentTypeSupport.parseContentTypeForTextualCharset(contentType);
1:         if (expected == null) {
1:             assertNull("Expected no charset, but got:" + charset, charset);
1:         } else {
1:             assertEquals("Charset not as expected", expected, charset);
1:         }
1:     }
1: }
============================================================================