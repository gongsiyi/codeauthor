1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: public class RangeStatisticTest extends StatisticTestSupport {
1:d29ca2a:     
1:fc00993:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
1:d29ca2a:             .getLog(RangeStatisticTest.class);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Use case for RangeStatisticImpl class.
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testStatistic() throws Exception {
1:d29ca2a:         RangeStatisticImpl stat = new RangeStatisticImpl("myRange", "millis", "myDescription");
1:d29ca2a:         assertStatistic(stat, "myRange", "millis", "myDescription");
1:d29ca2a: 
1:d29ca2a:         assertRangeStatistic(stat);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertRangeStatistic(RangeStatisticImpl stat) throws InterruptedException {
1:d29ca2a:         assertEquals(0, stat.getCurrent());
1:d29ca2a:         assertEquals(0, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(0, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         stat.setCurrent(100);
1:d29ca2a:         assertEquals(100, stat.getCurrent());
1:d29ca2a:         assertEquals(100, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(100, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         stat.setCurrent(50);
1:d29ca2a:         assertEquals(50, stat.getCurrent());
1:d29ca2a:         assertEquals(50, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(100, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         stat.setCurrent(200);
1:d29ca2a:         assertEquals(200, stat.getCurrent());
1:d29ca2a:         assertEquals(50, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(200, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         Thread.sleep(500);
1:d29ca2a: 
1:d29ca2a:         stat.setCurrent(10);
1:d29ca2a:         assertEquals(10, stat.getCurrent());
1:d29ca2a:         assertEquals(10, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(200, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         assertLastTimeNotStartTime(stat);
1:d29ca2a: 
1:fc00993:         LOG.info("Stat is: " + stat);
1:d29ca2a: 
1:d29ca2a:         stat.reset();
1:d29ca2a: 
1:d29ca2a:         assertEquals(0, stat.getCurrent());
1:d29ca2a:         assertEquals(0, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(0, stat.getHighWaterMark());
1:d29ca2a: 
1:d29ca2a:         stat.setCurrent(100);
1:d29ca2a:         assertEquals(100, stat.getCurrent());
1:d29ca2a:         assertEquals(100, stat.getLowWaterMark());
1:d29ca2a:         assertEquals(100, stat.getHighWaterMark());
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Stat is: " + stat);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
0: import org.apache.activemq.management.RangeStatisticImpl;
1: 
1: public class RangeStatisticTest extends StatisticTestSupport {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
1:             .getLog(RangeStatisticTest.class);
1: 
1:     /**
1:      * Use case for RangeStatisticImpl class.
1:      * @throws Exception
1:      */
1:     public void testStatistic() throws Exception {
1:         RangeStatisticImpl stat = new RangeStatisticImpl("myRange", "millis", "myDescription");
1:         assertStatistic(stat, "myRange", "millis", "myDescription");
1: 
1:         assertRangeStatistic(stat);
1:     }
1: 
1:     protected void assertRangeStatistic(RangeStatisticImpl stat) throws InterruptedException {
1:         assertEquals(0, stat.getCurrent());
1:         assertEquals(0, stat.getLowWaterMark());
1:         assertEquals(0, stat.getHighWaterMark());
1: 
1:         stat.setCurrent(100);
1:         assertEquals(100, stat.getCurrent());
1:         assertEquals(100, stat.getLowWaterMark());
1:         assertEquals(100, stat.getHighWaterMark());
1: 
1:         stat.setCurrent(50);
1:         assertEquals(50, stat.getCurrent());
1:         assertEquals(50, stat.getLowWaterMark());
1:         assertEquals(100, stat.getHighWaterMark());
1: 
1:         stat.setCurrent(200);
1:         assertEquals(200, stat.getCurrent());
1:         assertEquals(50, stat.getLowWaterMark());
1:         assertEquals(200, stat.getHighWaterMark());
1: 
1:         Thread.sleep(500);
1: 
1:         stat.setCurrent(10);
1:         assertEquals(10, stat.getCurrent());
1:         assertEquals(10, stat.getLowWaterMark());
1:         assertEquals(200, stat.getHighWaterMark());
1: 
1:         assertLastTimeNotStartTime(stat);
1: 
0:         log.info("Stat is: " + stat);
1: 
1:         stat.reset();
1: 
1:         assertEquals(0, stat.getCurrent());
1:         assertEquals(0, stat.getLowWaterMark());
1:         assertEquals(0, stat.getHighWaterMark());
1: 
1:         stat.setCurrent(100);
1:         assertEquals(100, stat.getCurrent());
1:         assertEquals(100, stat.getLowWaterMark());
1:         assertEquals(100, stat.getHighWaterMark());
1:     }
1: }
============================================================================