1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
2:a88906f: 
1:a88906f: import javax.jms.JMSException;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.properties.JmsClientProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsProducerProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsProducerSystemProperties;
1:540dd5c: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
1:a88906f: 
1:a88906f: public class JmsProducerSystem extends AbstractJmsClientSystem {
1:a88906f:     protected JmsProducerSystemProperties sysTest = new JmsProducerSystemProperties();
1:a88906f:     protected JmsProducerProperties producer = new JmsProducerProperties();
1:a88906f: 
1:e47e0e0:     @Override
1:a88906f:     public JmsClientSystemProperties getSysTest() {
1:a88906f:         return sysTest;
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:a88906f:     public void setSysTest(JmsClientSystemProperties sysTestProps) {
1:a88906f:         sysTest = (JmsProducerSystemProperties)sysTestProps;
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:a88906f:     public JmsClientProperties getJmsClientProperties() {
1:a88906f:         return getProducer();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public JmsProducerProperties getProducer() {
1:a88906f:         return producer;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setProducer(JmsProducerProperties producer) {
1:a88906f:         this.producer = producer;
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     protected ClientRunBasis getClientRunBasis() {
1:e47e0e0:         assert (producer != null);
1:e47e0e0:         return ClientRunBasis.valueOf(producer.getSendType().toLowerCase());
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:e47e0e0:     protected long getClientRunDuration() {
1:e47e0e0:         return producer.getSendDuration();
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0: 
1:e47e0e0:     @Override
1:a88906f:     protected void runJmsClient(String clientName, int clientDestIndex, int clientDestCount) {
1:a88906f:         ThroughputSamplerTask sampler = getTpSampler();
1:a88906f: 
1:a88906f:         JmsProducerClient producerClient = new JmsProducerClient(producer, jmsConnFactory);
1:a88906f:         producerClient.setClientName(clientName);
1:a88906f: 
1:a88906f:         if (sampler != null) {
1:a88906f:             sampler.registerClient(producerClient);
1:a88906f:         }
1:a88906f: 
1:a88906f:         try {
1:a88906f:             producerClient.sendMessages(clientDestIndex, clientDestCount);
1:a88906f:         } catch (JMSException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public static void main(String[] args) {
1:a88906f:         JmsProducerSystem sys = new JmsProducerSystem();
1:a88906f:         sys.configureProperties(AbstractJmsClientSystem.parseStringArgs(args));
1:a88906f: 
1:a88906f:         try {
1:a88906f:             sys.runSystemTest();
1:a88906f:         } catch (JMSException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected ClientRunBasis getClientRunBasis() {
1:         assert (producer != null);
1:         return ClientRunBasis.valueOf(producer.getSendType().toLowerCase());
1:     }
1: 
1:     @Override
1:     protected long getClientRunDuration() {
1:         return producer.getSendDuration();
1:     }
1: 
1: 
1:     @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.tool.properties.JmsClientProperties;
1: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
1: import org.apache.activemq.tool.properties.JmsProducerProperties;
1: import org.apache.activemq.tool.properties.JmsProducerSystemProperties;
1: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
0: import org.apache.activemq.tool.properties.JmsProducerSystemProperties;
0: import org.apache.activemq.tool.properties.JmsProducerProperties;
0: import org.apache.activemq.tool.properties.JmsClientProperties;
0: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
1: 
1: import javax.jms.JMSException;
0: import java.util.Properties;
1: 
1: public class JmsProducerSystem extends AbstractJmsClientSystem {
1:     protected JmsProducerSystemProperties sysTest = new JmsProducerSystemProperties();
1:     protected JmsProducerProperties producer = new JmsProducerProperties();
1: 
1:     public JmsClientSystemProperties getSysTest() {
1:         return sysTest;
1:     }
1: 
1:     public void setSysTest(JmsClientSystemProperties sysTestProps) {
1:         sysTest = (JmsProducerSystemProperties)sysTestProps;
1:     }
1: 
1:     public JmsClientProperties getJmsClientProperties() {
1:         return getProducer();
1:     }
1: 
1:     public JmsProducerProperties getProducer() {
1:         return producer;
1:     }
1: 
1:     public void setProducer(JmsProducerProperties producer) {
1:         this.producer = producer;
1:     }
1: 
1:     protected void runJmsClient(String clientName, int clientDestIndex, int clientDestCount) {
1:         ThroughputSamplerTask sampler = getTpSampler();
1: 
1:         JmsProducerClient producerClient = new JmsProducerClient(producer, jmsConnFactory);
1:         producerClient.setClientName(clientName);
1: 
1:         if (sampler != null) {
1:             sampler.registerClient(producerClient);
1:         }
1: 
1:         try {
1:             producerClient.sendMessages(clientDestIndex, clientDestCount);
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public static void main(String[] args) {
1:         JmsProducerSystem sys = new JmsProducerSystem();
1:         sys.configureProperties(AbstractJmsClientSystem.parseStringArgs(args));
1: 
1:         try {
1:             sys.runSystemTest();
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:52105b6
/////////////////////////////////////////////////////////////////////////
0:         sys.configureProperties(AbstractJmsClientSystem.parseStringArgs(args));
commit:a783a42
/////////////////////////////////////////////////////////////////////////
0:             String arg = args[i];
0:             if (arg.startsWith("-D") || arg.startsWith("-d")) {
0:                 arg = arg.substring(2);
0:             }
0:             int index  = arg.indexOf("=");
0:             String key = arg.substring(0, index);
0:             String val = arg.substring(index + 1);
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
0: import org.apache.activemq.tool.properties.JmsProducerSystemProperties;
0: import org.apache.activemq.tool.properties.JmsProducerProperties;
0: import org.apache.activemq.tool.properties.JmsClientProperties;
0: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
0: 
0: public class JmsProducerSystem extends AbstractJmsClientSystem {
0:     protected JmsProducerSystemProperties sysTest = new JmsProducerSystemProperties();
0:     protected JmsProducerProperties producer = new JmsProducerProperties();
0:     public JmsClientSystemProperties getSysTest() {
0:         return sysTest;
0:     public void setSysTest(JmsClientSystemProperties sysTestProps) {
0:         sysTest = (JmsProducerSystemProperties)sysTestProps;
0:     public JmsClientProperties getJmsClientProperties() {
0:         return getProducer();
0:     }
0:     public JmsProducerProperties getProducer() {
0:         return producer;
0:     }
0: 
0:     public void setProducer(JmsProducerProperties producer) {
0:         this.producer = producer;
0:     }
0: 
0:     protected void runJmsClient(String clientName, int clientDestIndex, int clientDestCount) {
0:         ThroughputSamplerTask sampler = getTpSampler();
0: 
0:         JmsProducerClient producerClient = new JmsProducerClient(producer, jmsConnFactory);
0:         producerClient.setClientName(clientName);
0:             sampler.registerClient(producerClient);
0:             producerClient.sendMessages(clientDestIndex, clientDestCount);
0:         Properties props = new Properties();
0:         for (int i=0; i<args.length; i++) {
0:             props.setProperty(key, val);
0:         JmsProducerSystem sys = new JmsProducerSystem();
0:         sys.configureProperties(props);
0: 
0:         try {
0:             sys.runSystemTest();
0:         } catch (JMSException e) {
0:             e.printStackTrace();
0:         }
commit:e0efebe
/////////////////////////////////////////////////////////////////////////
0:             return "JmsProducer_Client" + getNumClients() + "_Dest" + getTotalDests() + "_" + getDestDistro() + ".xml";
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0: 
0:     public String getReportName() {
0:         if (reportName == null) {
0:             return "JmsProducer_ClientCount" + getNumClients() + "_DestCount" + getTotalDests() + "_" + getDestDistro() + ".xml";
0:         } else {
0:             return reportName;
0:         }
0:     }
0: 
0:     public String getClientName() {
0:         if (clientName == null) {
0:             return "JmsProducer";
0:         } else {
0:             return clientName;
0:         }
0:     }
0: 
0:     protected void runJmsClient(String clientName, Properties clientSettings) {
0:         producer.setClientName(clientName);
/////////////////////////////////////////////////////////////////////////
0:     protected String getThreadName() {
0:     protected String getThreadGroupName() {
0:     protected String getDestCountKey() {
0:         return "producer.destCount";
0:     }
0: 
0:     protected String getDestIndexKey() {
0:         return "producer.destIndex";
0:     }
0: 
commit:61fcd4c
/////////////////////////////////////////////////////////////////////////
0:     public static void main(String[] args) {
0:         String[] options = new String[19];
/////////////////////////////////////////////////////////////////////////
0:         options[17] = "-DsysTest.totalDests=5";
0:         options[18] = "-DsysTest.destDistro=all";
commit:a38f71d
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import javax.jms.JMSException;
0: import java.util.Properties;
0: 
0: public class JmsProducerSystem extends JmsClientSystemSupport {
0:     public void runJmsClient(String clientName, Properties clientSettings) {
0:         PerfMeasurementTool sampler = getPerformanceSampler();
0: 
0:         JmsProducerClient producer = new JmsProducerClient();
0:         producer.setSettings(clientSettings);
0: 
0:         if (sampler != null) {
0:             sampler.registerClient(producer);
0:             producer.setPerfEventListener(sampler);
0:         }
0: 
0:         try {
0:             producer.createJmsTextMessage();
0:             producer.sendMessages();
0:         } catch (JMSException e) {
0:             e.printStackTrace();
0:         }
0:     }
0: 
0:     public String getClientName() {
0:         return "JMS Producer: ";
0:     }
0: 
0:     public String getThreadName() {
0:         return "JMS Producer Thread: ";
0:     }
0: 
0:     public String getThreadGroupName() {
0:         return "JMS Producer Thread Group";
0:     }
0: 
0:     public static void main(String[] args) throws JMSException {
0:         String[] options = new String[17];
0:         options[0] = "-Dsampler.duration=60000";     // 1 min
0:         options[1] = "-Dsampler.interval=5000";      // 5 secs
0:         options[2] = "-Dsampler.rampUpTime=10000";   // 10 secs
0:         options[3] = "-Dsampler.rampDownTime=10000"; // 10 secs
0: 
0:         options[4] = "-Dclient.spiClass=org.apache.activemq.tool.spi.ActiveMQPojoSPI";
0:         options[5] = "-Dclient.sessTransacted=false";
0:         options[6] = "-Dclient.sessAckMode=autoAck";
0:         options[7] = "-Dclient.destName=topic://FOO.BAR.TEST";
0:         options[8] = "-Dclient.destCount=1";
0:         options[9] = "-Dclient.destComposite=false";
0: 
0:         options[10] = "-Dproducer.messageSize=1024";
0:         options[11] = "-Dproducer.sendCount=1000";     // 1000 messages
0:         options[12] = "-Dproducer.sendDuration=60000"; // 1 min
0:         options[13] = "-Dproducer.sendType=time";
0: 
0:         options[14] = "-Dfactory.brokerUrl=tcp://localhost:61616";
0:         options[15] = "-Dfactory.asyncSend=true";
0: 
0:         options[16] = "-DsysTest.numClients=5";
0: 
0:         args = options;
0: 
0:         Properties sysSettings  = new Properties();
0: 
0:         for (int i=0; i<args.length; i++) {
0:             // Get property define options only
0:             if (args[i].startsWith("-D")) {
0:                 String propDefine = args[i].substring("-D".length());
0:                 int  index = propDefine.indexOf("=");
0:                 String key = propDefine.substring(0, index);
0:                 String val = propDefine.substring(index+1);
0:                 sysSettings.setProperty(key, val);
0:             }
0:         }
0: 
0:         JmsProducerSystem sysTest = new JmsProducerSystem();
0:         sysTest.setSettings(sysSettings);
0:         sysTest.runSystemTest();
0:     }
0: }
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:4fb36fe
/////////////////////////////////////////////////////////////////////////
0:         Properties sysSettings = new Properties();
0:         for (int i = 0; i < args.length; i++) {
0:             int index = args[i].indexOf("=");
0:             String key = args[i].substring(0, index);
0:             String val = args[i].substring(index + 1);
0:             sysSettings.setProperty(key, val);
commit:52602f0
/////////////////////////////////////////////////////////////////////////
0:         /*String[] options = new String[20];
/////////////////////////////////////////////////////////////////////////
0:         options[19] = "-DsysTest.reportDirectory=./target/test-perf";
0:         args = options; */
/////////////////////////////////////////////////////////////////////////
commit:264f0a3
/////////////////////////////////////////////////////////////////////////
0:         /*String[] options = new String[19];
/////////////////////////////////////////////////////////////////////////
0:         args = options;*/
/////////////////////////////////////////////////////////////////////////
0:         sysTest.setReportDirectory("./target/Test-perf");
============================================================================