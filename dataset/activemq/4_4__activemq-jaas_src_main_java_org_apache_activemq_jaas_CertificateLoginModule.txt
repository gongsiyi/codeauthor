1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
9:1a88ac6:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
17:1a88ac6: 
1:1a88ac6: package org.apache.activemq.jaas;
1:a8b1810: 
1:1a88ac6: import java.io.IOException;
1:540dd5c: import java.security.Principal;
1:a8b1810: import java.security.cert.X509Certificate;
1:1a88ac6: import java.util.HashSet;
1:1a88ac6: import java.util.Map;
1:1a88ac6: import java.util.Set;
1:1a88ac6: 
1:1a88ac6: import javax.security.auth.Subject;
1:1a88ac6: import javax.security.auth.callback.Callback;
1:1a88ac6: import javax.security.auth.callback.CallbackHandler;
1:1a88ac6: import javax.security.auth.callback.UnsupportedCallbackException;
1:1a88ac6: import javax.security.auth.login.FailedLoginException;
1:1a88ac6: import javax.security.auth.login.LoginException;
1:1a88ac6: import javax.security.auth.spi.LoginModule;
1:540dd5c: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:1a88ac6: 
1:1a88ac6: /**
1:1a88ac6:  * A LoginModule that allows for authentication based on SSL certificates.
1:540dd5c:  * Allows for subclasses to define methods used to verify user certificates and
1:540dd5c:  * find user groups. Uses CertificateCallbacks to retrieve certificates.
1:1a88ac6:  * 
1:1a88ac6:  * @author sepandm@gmail.com (Sepand)
1:1a88ac6:  */
1:59cd018: public abstract class CertificateLoginModule extends PropertiesLoader implements LoginModule {
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CertificateLoginModule.class);
1:540dd5c: 
1:1a88ac6:     private CallbackHandler callbackHandler;
1:1a88ac6:     private Subject subject;
1:540dd5c: 
1:1a88ac6:     private X509Certificate certificates[];
1:540dd5c:     private String username;
1:540dd5c:     private Set<Principal> principals = new HashSet<Principal>();
1:1a88ac6: 
1:1a88ac6:     /**
1:540dd5c:      * Overriding to allow for proper initialization. Standard JAAS.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:1a88ac6:         this.subject = subject;
1:1a88ac6:         this.callbackHandler = callbackHandler;
1:59cd018:         init(options);
2:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     /**
1:540dd5c:      * Overriding to allow for certificate-based login. Standard JAAS.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public boolean login() throws LoginException {
1:1a88ac6:         Callback[] callbacks = new Callback[1];
1:540dd5c: 
1:1a88ac6:         callbacks[0] = new CertificateCallback();
1:1a88ac6:         try {
1:1a88ac6:             callbackHandler.handle(callbacks);
1:1a88ac6:         } catch (IOException ioe) {
1:1a88ac6:             throw new LoginException(ioe.getMessage());
1:1a88ac6:         } catch (UnsupportedCallbackException uce) {
1:1a88ac6:             throw new LoginException(uce.getMessage() + " Unable to obtain client certificates.");
1:1a88ac6:         }
1:540dd5c:         certificates = ((CertificateCallback)callbacks[0]).getCertificates();
1:540dd5c: 
1:1a88ac6:         username = getUserNameForCertificates(certificates);
1:540dd5c:         if (username == null) {
1:540dd5c:             throw new FailedLoginException("No user for client certificate: " + getDistinguishedName(certificates));
1:540dd5c:         }
1:540dd5c: 
2:1a88ac6:         if (debug) {
1:540dd5c:             LOG.debug("Certificate for user: " + username);
1:1a88ac6:         }
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:540dd5c:      * Overriding to complete login process. Standard JAAS.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public boolean commit() throws LoginException {
1:1a88ac6:         principals.add(new UserPrincipal(username));
1:1a88ac6: 
1:8d63083:         for (String group : getUserGroups(username)) {
1:1667d80:              principals.add(new GroupPrincipal(group));
1:1a88ac6:         }
1:1a88ac6: 
1:1a88ac6:         subject.getPrincipals().addAll(principals);
1:1a88ac6: 
1:1a88ac6:         clear();
1:1a88ac6: 
1:1a88ac6:         if (debug) {
1:540dd5c:             LOG.debug("commit");
1:1a88ac6:         }
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:1a88ac6:      * Standard JAAS override.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public boolean abort() throws LoginException {
1:1a88ac6:         clear();
1:1a88ac6: 
1:1a88ac6:         if (debug) {
1:540dd5c:             LOG.debug("abort");
1:1a88ac6:         }
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:1a88ac6:      * Standard JAAS override.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public boolean logout() {
1:1a88ac6:         subject.getPrincipals().removeAll(principals);
1:1a88ac6:         principals.clear();
1:1a88ac6: 
1:1a88ac6:         if (debug) {
1:540dd5c:             LOG.debug("logout");
1:1a88ac6:         }
1:1a88ac6:         return true;
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     /**
1:1a88ac6:      * Helper method.
1:1a88ac6:      */
1:1a88ac6:     private void clear() {
1:1a88ac6:         certificates = null;
1:8d63083:         username = null;
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     /**
1:540dd5c:      * Should return a unique name corresponding to the certificates given. The
1:540dd5c:      * name returned will be used to look up access levels as well as group
1:540dd5c:      * associations.
1:1a88ac6:      * 
1:72cd4ec:      * @param certs The distinguished name.
1:1a88ac6:      * @return The unique name if the certificate is recognized, null otherwise.
1:1a88ac6:      */
1:1a88ac6:     protected abstract String getUserNameForCertificates(final X509Certificate[] certs) throws LoginException;
1:540dd5c: 
1:1a88ac6:     /**
1:540dd5c:      * Should return a set of the groups this user belongs to. The groups
1:540dd5c:      * returned will be added to the user's credentials.
1:1a88ac6:      * 
1:1a88ac6:      * @param username The username of the client. This is the same name that
1:540dd5c:      *                getUserNameForDn returned for the user's DN.
1:1a88ac6:      * @return A Set of the names of the groups this user belongs to.
1:1a88ac6:      */
1:1667d80:     protected abstract Set<String> getUserGroups(final String username) throws LoginException;
1:1a88ac6: 
1:a8b1810:     protected String getDistinguishedName(final X509Certificate[] certs) {
1:a8b1810:         if (certs != null && certs.length > 0 && certs[0] != null) {
1:a8b1810:             return certs[0].getSubjectDN().getName();
1:a8b1810:         } else {
1:a8b1810:             return null;
1:a8b1810:         }
1:a8b1810:     }
1:a8b1810: 
1:1a88ac6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8d63083
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (String group : getUserGroups(username)) {
/////////////////////////////////////////////////////////////////////////
1:         username = null;
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1: public abstract class CertificateLoginModule extends PropertiesLoader implements LoginModule {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         init(options);
author:Gary Tully
-------------------------------------------------------------------------------
commit:1667d80
/////////////////////////////////////////////////////////////////////////
0:     private Set<String> groups;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         for (String group : groups) {
1:              principals.add(new GroupPrincipal(group));
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     protected abstract Set<String> getUserGroups(final String username) throws LoginException;
commit:72cd4ec
/////////////////////////////////////////////////////////////////////////
1:      * @param certs The distinguished name.
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CertificateLoginModule.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1:  * Allows for subclasses to define methods used to verify user certificates and
1:  * find user groups. Uses CertificateCallbacks to retrieve certificates.
1: 
0:     private static final Log LOG = LogFactory.getLog(CertificateLoginModule.class);
1: 
1: 
1:     private String username;
0:     private Set groups;
1:     private Set<Principal> principals = new HashSet<Principal>();
1:      * Overriding to allow for proper initialization. Standard JAAS.
1: 
0:         debug = "true".equalsIgnoreCase((String)options.get("debug"));
1: 
0:             LOG.debug("Initialized debug");
1:      * Overriding to allow for certificate-based login. Standard JAAS.
/////////////////////////////////////////////////////////////////////////
1:         certificates = ((CertificateCallback)callbacks[0]).getCertificates();
1: 
1:         if (username == null) {
1:             throw new FailedLoginException("No user for client certificate: " + getDistinguishedName(certificates));
1:         }
1: 
1:             LOG.debug("Certificate for user: " + username);
1:      * Overriding to complete login process. Standard JAAS.
0:         for (Iterator iter = groups.iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("commit");
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("abort");
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("logout");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Should return a unique name corresponding to the certificates given. The
1:      * name returned will be used to look up access levels as well as group
1:      * associations.
1: 
1:      * Should return a set of the groups this user belongs to. The groups
1:      * returned will be added to the user's credentials.
1:      *                getUserNameForDn returned for the user's DN.
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:a8b1810
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import java.security.cert.X509Certificate;
/////////////////////////////////////////////////////////////////////////
0:             throw new FailedLoginException("No user for client certificate: "
0:                 + getDistinguishedName(certificates));
/////////////////////////////////////////////////////////////////////////
1:     protected String getDistinguishedName(final X509Certificate[] certs) {
1:         if (certs != null && certs.length > 0 && certs[0] != null) {
1:             return certs[0].getSubjectDN().getName();
1:         } else {
1:             return null;
1:         }
1:     }
1: 
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.jaas;
1: 
0: import java.io.File;
1: import java.io.IOException;
0: import java.util.Enumeration;
1: import java.util.HashSet;
0: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Set;
0: import java.security.cert.X509Certificate;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.Callback;
1: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.callback.NameCallback;
0: import javax.security.auth.callback.PasswordCallback;
1: import javax.security.auth.callback.UnsupportedCallbackException;
1: import javax.security.auth.login.FailedLoginException;
1: import javax.security.auth.login.LoginException;
1: import javax.security.auth.spi.LoginModule;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * A LoginModule that allows for authentication based on SSL certificates.
1:  * 
0:  * Allows for subclasses to define methods used to verify user certificates and find user groups. 
0:  * Uses CertificateCallbacks to retrieve certificates.
1:  *  
1:  * @author sepandm@gmail.com (Sepand)
1:  *
1:  */
0: public abstract class CertificateLoginModule implements LoginModule {
1:     
1:     private CallbackHandler callbackHandler;
1:     private Subject subject;
1:     
1:     private X509Certificate certificates[];
0:     private String username = null;
0:     private Set groups = null;
1:     
0:     private Set principals = new HashSet();
1:     
0:     private static final Log log = LogFactory.getLog(CertificateLoginModule.class);
0:     private boolean debug;
1: 
1:     /**
0:      * Overriding to allow for proper initialization.
1:      * 
0:      * Standard JAAS.
1:      */
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:         this.subject = subject;
1:         this.callbackHandler = callbackHandler;
1:         
0:         debug = "true".equalsIgnoreCase((String) options.get("debug"));
1:         
1:         if (debug) {
0:             log.debug("Initialized debug");
1:         }
1:     }
1: 
1:     /**
0:      * Overriding to allow for certificate-based login.
1:      * 
0:      * Standard JAAS.
1:      */
1:     public boolean login() throws LoginException {
1:         Callback[] callbacks = new Callback[1];
1: 
1:         callbacks[0] = new CertificateCallback();
1:         try {
1:             callbackHandler.handle(callbacks);
1:         } catch (IOException ioe) {
1:             throw new LoginException(ioe.getMessage());
1:         } catch (UnsupportedCallbackException uce) {
1:             throw new LoginException(uce.getMessage() + " Unable to obtain client certificates.");
1:         }
0:         certificates = ((CertificateCallback) callbacks[0]).getCertificates();
1:         
1:         username = getUserNameForCertificates(certificates);
0:         if ( username == null )
0:             throw new FailedLoginException("Unable to verify client certificates.");
1: 
0:         groups = getUserGroups(username);
1:         
1:         if (debug) {
0:             log.debug("Certificate for user: " + username);
1:         }
1:         return true;
1:     }
1: 
1:     /**
0:      * Overriding to complete login process.
1:      * 
0:      * Standard JAAS.
1:      */
1:     public boolean commit() throws LoginException {
1:         principals.add(new UserPrincipal(username));
1: 
0:         String currentGroup = null;
0:         for (Iterator iter = groups.iterator(); iter.hasNext(); ) {
0:             currentGroup = (String)iter.next();
0:             principals.add(new GroupPrincipal(currentGroup));
1:         }
1: 
1:         subject.getPrincipals().addAll(principals);
1: 
1:         clear();
1: 
1:         if (debug) {
0:             log.debug("commit");
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Standard JAAS override.
1:      */
1:     public boolean abort() throws LoginException {
1:         clear();
1: 
1:         if (debug) {
0:             log.debug("abort");
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Standard JAAS override.
1:      */
1:     public boolean logout() {
1:         subject.getPrincipals().removeAll(principals);
1:         principals.clear();
1: 
1:         if (debug) {
0:             log.debug("logout");
1:         }
1:         return true;
1:     }
1:     
1:     /**
1:      * Helper method.
1:      */
1:     private void clear() {
0:         groups.clear();
1:         certificates = null;
1:     }
1:     
1:     /**
0:      * Should return a unique name corresponding to the certificates given.
1:      * 
0:      * The name returned will be used to look up access levels as well as
0:      *      group associations.
1:      *      
0:      * @param dn The distinguished name.
1:      * @return The unique name if the certificate is recognized, null otherwise.
1:      */
1:     protected abstract String getUserNameForCertificates(final X509Certificate[] certs) throws LoginException;
1:     
1:     /**
0:      * Should return a set of the groups this user belongs to.
1:      * 
0:      * The groups returned will be added to the user's credentials.
1:      * 
1:      * @param username The username of the client. This is the same name that
0:      *      getUserNameForDn returned for the user's DN.
1:      * @return A Set of the names of the groups this user belongs to.
1:      */
0:     protected abstract Set getUserGroups(final String username) throws LoginException;
1: 
1: }
============================================================================