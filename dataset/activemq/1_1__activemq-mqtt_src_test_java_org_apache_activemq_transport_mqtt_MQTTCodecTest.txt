1:7c04ead: /**
1:7c04ead:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c04ead:  * contributor license agreements.  See the NOTICE file distributed with
1:7c04ead:  * this work for additional information regarding copyright ownership.
1:7c04ead:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c04ead:  * (the "License"); you may not use this file except in compliance with
1:7c04ead:  * the License.  You may obtain a copy of the License at
1:7c04ead:  *
1:7c04ead:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c04ead:  *
1:7c04ead:  * Unless required by applicable law or agreed to in writing, software
1:7c04ead:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c04ead:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c04ead:  * See the License for the specific language governing permissions and
1:7c04ead:  * limitations under the License.
1:7c04ead:  */
1:7c04ead: package org.apache.activemq.transport.mqtt;
1:7c04ead: 
1:7c04ead: import static org.junit.Assert.assertEquals;
1:7c04ead: import static org.junit.Assert.assertFalse;
1:7c04ead: import static org.junit.Assert.assertTrue;
1:7c04ead: 
1:7c04ead: import java.util.ArrayList;
1:7c04ead: import java.util.List;
1:052d293: import java.util.concurrent.TimeUnit;
1:7c04ead: 
1:7c04ead: import org.fusesource.hawtbuf.Buffer;
1:7c04ead: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1:7c04ead: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1:7c04ead: import org.fusesource.hawtbuf.UTF8Buffer;
1:052d293: import org.fusesource.mqtt.client.QoS;
1:052d293: import org.fusesource.mqtt.client.Topic;
1:7c04ead: import org.fusesource.mqtt.codec.CONNECT;
1:7c04ead: import org.fusesource.mqtt.codec.MQTTFrame;
1:052d293: import org.fusesource.mqtt.codec.PUBLISH;
1:052d293: import org.fusesource.mqtt.codec.SUBSCRIBE;
1:7c04ead: import org.junit.Before;
1:7c04ead: import org.junit.Test;
1:7c04ead: import org.slf4j.Logger;
1:7c04ead: import org.slf4j.LoggerFactory;
1:7c04ead: 
1:7c04ead: /**
1:7c04ead:  * Tests the functionality of the MQTTCodec class.
1:7c04ead:  */
1:7c04ead: public class MQTTCodecTest {
1:7c04ead: 
1:7c04ead:     private static final Logger LOG = LoggerFactory.getLogger(MQTTCodecTest.class);
1:7c04ead: 
1:7c04ead:     private final MQTTWireFormat wireFormat = new MQTTWireFormat();
1:7c04ead: 
1:7c04ead:     private List<MQTTFrame> frames;
1:7c04ead:     private MQTTCodec codec;
1:7c04ead: 
1:052d293:     private final int MESSAGE_SIZE = 5 * 1024 * 1024;
1:101b712:     private final int ITERATIONS = 500;
1:052d293: 
1:7c04ead:     @Before
1:7c04ead:     public void setUp() throws Exception {
1:7c04ead:         frames = new ArrayList<MQTTFrame>();
1:7c04ead:         codec = new MQTTCodec(new MQTTCodec.MQTTFrameSink() {
1:7c04ead: 
1:7c04ead:             @Override
1:7c04ead:             public void onFrame(MQTTFrame mqttFrame) {
1:7c04ead:                 frames.add(mqttFrame);
1:7c04ead:             }
1:7c04ead:         });
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     @Test
1:7c04ead:     public void testEmptyConnectBytes() throws Exception {
1:052d293: 
1:7c04ead:         CONNECT connect = new CONNECT();
1:7c04ead:         connect.cleanSession(true);
1:7c04ead:         connect.clientId(new UTF8Buffer(""));
1:7c04ead: 
1:7c04ead:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:7c04ead:         wireFormat.marshal(connect.encode(), output);
1:7c04ead:         Buffer marshalled = output.toBuffer();
1:7c04ead: 
1:7c04ead:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:7c04ead:         codec.parse(input, marshalled.length());
1:7c04ead: 
1:7c04ead:         assertTrue(!frames.isEmpty());
1:7c04ead:         assertEquals(1, frames.size());
1:7c04ead: 
1:7c04ead:         connect = new CONNECT().decode(frames.get(0));
1:7c04ead:         LOG.info("Unmarshalled: {}", connect);
1:7c04ead:         assertTrue(connect.cleanSession());
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     @Test
1:052d293:     public void testConnectThenSubscribe() throws Exception {
1:052d293: 
1:052d293:         CONNECT connect = new CONNECT();
1:052d293:         connect.cleanSession(true);
1:052d293:         connect.clientId(new UTF8Buffer(""));
1:052d293: 
1:052d293:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:052d293:         wireFormat.marshal(connect.encode(), output);
1:052d293:         Buffer marshalled = output.toBuffer();
1:052d293: 
1:052d293:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:052d293:         codec.parse(input, marshalled.length());
1:052d293: 
1:052d293:         assertTrue(!frames.isEmpty());
1:052d293:         assertEquals(1, frames.size());
1:052d293: 
1:052d293:         connect = new CONNECT().decode(frames.get(0));
1:052d293:         LOG.info("Unmarshalled: {}", connect);
1:052d293:         assertTrue(connect.cleanSession());
1:7c04ead: 
1:052d293:         frames.clear();
1:052d293: 
1:052d293:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:052d293:         subscribe.topics(new Topic[] {new Topic("TEST", QoS.EXACTLY_ONCE) });
1:052d293: 
1:052d293:         output = new DataByteArrayOutputStream();
1:052d293:         wireFormat.marshal(subscribe.encode(), output);
1:052d293:         marshalled = output.toBuffer();
1:052d293: 
1:052d293:         input = new DataByteArrayInputStream(marshalled);
1:052d293:         codec.parse(input, marshalled.length());
1:052d293: 
1:052d293:         assertTrue(!frames.isEmpty());
1:052d293:         assertEquals(1, frames.size());
1:052d293: 
1:052d293:         subscribe = new SUBSCRIBE().decode(frames.get(0));
1:052d293:     }
1:052d293: 
1:052d293:     @Test
1:7c04ead:     public void testConnectWithCredentialsBackToBack() throws Exception {
1:7c04ead: 
1:7c04ead:         CONNECT connect = new CONNECT();
1:7c04ead:         connect.cleanSession(false);
1:7c04ead:         connect.clientId(new UTF8Buffer("test"));
1:7c04ead:         connect.userName(new UTF8Buffer("user"));
1:7c04ead:         connect.password(new UTF8Buffer("pass"));
1:7c04ead: 
1:7c04ead:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:7c04ead:         wireFormat.marshal(connect.encode(), output);
1:7c04ead:         wireFormat.marshal(connect.encode(), output);
1:7c04ead:         Buffer marshalled = output.toBuffer();
1:7c04ead: 
1:7c04ead:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:7c04ead:         codec.parse(input, marshalled.length());
1:7c04ead: 
1:7c04ead:         assertTrue(!frames.isEmpty());
1:7c04ead:         assertEquals(2, frames.size());
1:7c04ead: 
1:7c04ead:         for (MQTTFrame frame : frames) {
1:7c04ead:             connect = new CONNECT().decode(frame);
1:7c04ead:             LOG.info("Unmarshalled: {}", connect);
1:7c04ead:             assertFalse(connect.cleanSession());
1:7c04ead:             assertEquals("user", connect.userName().toString());
1:7c04ead:             assertEquals("pass", connect.password().toString());
1:7c04ead:             assertEquals("test", connect.clientId().toString());
1:7c04ead:         }
1:7c04ead:     }
1:052d293: 
1:052d293:     @Test
1:7c04ead:     public void testProcessInChunks() throws Exception {
1:7c04ead: 
1:7c04ead:         CONNECT connect = new CONNECT();
1:7c04ead:         connect.cleanSession(false);
1:7c04ead:         connect.clientId(new UTF8Buffer("test"));
1:7c04ead:         connect.userName(new UTF8Buffer("user"));
1:7c04ead:         connect.password(new UTF8Buffer("pass"));
1:7c04ead: 
1:7c04ead:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:7c04ead:         wireFormat.marshal(connect.encode(), output);
1:7c04ead:         Buffer marshalled = output.toBuffer();
1:7c04ead: 
1:7c04ead:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:7c04ead: 
1:7c04ead:         int first = marshalled.length() / 2;
1:7c04ead:         int second = marshalled.length() - first;
1:7c04ead: 
1:7c04ead:         codec.parse(input, first);
1:7c04ead:         codec.parse(input, second);
1:7c04ead: 
1:7c04ead:         assertTrue(!frames.isEmpty());
1:7c04ead:         assertEquals(1, frames.size());
1:7c04ead: 
1:7c04ead:         connect = new CONNECT().decode(frames.get(0));
1:7c04ead:         LOG.info("Unmarshalled: {}", connect);
1:7c04ead:         assertFalse(connect.cleanSession());
1:7c04ead: 
1:7c04ead:         assertEquals("user", connect.userName().toString());
1:7c04ead:         assertEquals("pass", connect.password().toString());
1:7c04ead:         assertEquals("test", connect.clientId().toString());
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     @Test
1:7c04ead:     public void testProcessInBytes() throws Exception {
1:7c04ead: 
1:7c04ead:         CONNECT connect = new CONNECT();
1:7c04ead:         connect.cleanSession(false);
1:7c04ead:         connect.clientId(new UTF8Buffer("test"));
1:7c04ead:         connect.userName(new UTF8Buffer("user"));
1:7c04ead:         connect.password(new UTF8Buffer("pass"));
1:7c04ead: 
1:7c04ead:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:7c04ead:         wireFormat.marshal(connect.encode(), output);
1:7c04ead:         Buffer marshalled = output.toBuffer();
1:7c04ead: 
1:7c04ead:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:7c04ead: 
1:7c04ead:         int size = marshalled.length();
1:7c04ead: 
1:7c04ead:         for (int i = 0; i < size; ++i) {
1:7c04ead:             codec.parse(input, 1);
1:7c04ead:         }
1:7c04ead: 
1:7c04ead:         assertTrue(!frames.isEmpty());
1:7c04ead:         assertEquals(1, frames.size());
1:7c04ead: 
1:7c04ead:         connect = new CONNECT().decode(frames.get(0));
1:7c04ead:         LOG.info("Unmarshalled: {}", connect);
1:7c04ead:         assertFalse(connect.cleanSession());
1:7c04ead: 
1:7c04ead:         assertEquals("user", connect.userName().toString());
1:7c04ead:         assertEquals("pass", connect.password().toString());
1:7c04ead:         assertEquals("test", connect.clientId().toString());
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     @Test
1:052d293:     public void testMessageDecoding() throws Exception {
1:052d293: 
1:052d293:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:052d293:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:052d293:             CONTENTS[i] = 'a';
1:052d293:         }
1:052d293: 
1:052d293:         PUBLISH publish = new PUBLISH();
1:052d293: 
1:052d293:         publish.dup(false);
1:052d293:         publish.messageId((short) 127);
1:052d293:         publish.qos(QoS.AT_LEAST_ONCE);
1:052d293:         publish.payload(new Buffer(CONTENTS));
1:052d293:         publish.topicName(new UTF8Buffer("TOPIC"));
1:052d293: 
1:052d293:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:052d293:         wireFormat.marshal(publish.encode(), output);
1:052d293:         Buffer marshalled = output.toBuffer();
1:052d293: 
1:052d293:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:052d293:         codec.parse(input, marshalled.length());
1:052d293: 
1:052d293:         assertTrue(!frames.isEmpty());
1:052d293:         assertEquals(1, frames.size());
1:052d293: 
1:052d293:         publish = new PUBLISH().decode(frames.get(0));
1:052d293:         assertFalse(publish.dup());
1:052d293:         assertEquals(MESSAGE_SIZE, publish.payload().length());
1:052d293:     }
1:052d293: 
1:052d293:     @Test
1:052d293:     public void testMessageDecodingPerformance() throws Exception {
1:052d293: 
1:052d293:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:052d293:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:052d293:             CONTENTS[i] = 'a';
1:052d293:         }
1:052d293: 
1:052d293:         PUBLISH publish = new PUBLISH();
1:052d293: 
1:052d293:         publish.dup(false);
1:052d293:         publish.messageId((short) 127);
1:052d293:         publish.qos(QoS.AT_LEAST_ONCE);
1:052d293:         publish.payload(new Buffer(CONTENTS));
1:052d293:         publish.topicName(new UTF8Buffer("TOPIC"));
1:052d293: 
1:052d293:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:052d293:         wireFormat.marshal(publish.encode(), output);
1:052d293:         Buffer marshalled = output.toBuffer();
1:052d293: 
1:052d293:         long startTime = System.currentTimeMillis();
1:052d293: 
1:052d293:         for (int i = 0; i < ITERATIONS; ++i) {
1:052d293:             DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:052d293:             codec.parse(input, marshalled.length());
1:052d293: 
1:052d293:             assertTrue(!frames.isEmpty());
1:052d293:             publish = new PUBLISH().decode(frames.get(0));
1:052d293:             frames.clear();
1:052d293:         }
1:052d293: 
1:052d293:         long duration = System.currentTimeMillis() - startTime;
1:052d293: 
1:052d293:         LOG.info("Total time to process: {}", TimeUnit.MILLISECONDS.toSeconds(duration));
1:052d293:     }
1:7c04ead: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:101b712
/////////////////////////////////////////////////////////////////////////
1:     private final int ITERATIONS = 500;
commit:052d293
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.fusesource.mqtt.codec.SUBSCRIBE;
/////////////////////////////////////////////////////////////////////////
1:     private final int MESSAGE_SIZE = 5 * 1024 * 1024;
0:     private final int ITERATIONS = 1000;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectThenSubscribe() throws Exception {
1: 
1:         CONNECT connect = new CONNECT();
1:         connect.cleanSession(true);
1:         connect.clientId(new UTF8Buffer(""));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(connect.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:         codec.parse(input, marshalled.length());
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         connect = new CONNECT().decode(frames.get(0));
1:         LOG.info("Unmarshalled: {}", connect);
1:         assertTrue(connect.cleanSession());
1: 
1:         frames.clear();
1: 
1:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:         subscribe.topics(new Topic[] {new Topic("TEST", QoS.EXACTLY_ONCE) });
1: 
1:         output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(subscribe.encode(), output);
1:         marshalled = output.toBuffer();
1: 
1:         input = new DataByteArrayInputStream(marshalled);
1:         codec.parse(input, marshalled.length());
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         subscribe = new SUBSCRIBE().decode(frames.get(0));
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testMessageDecoding() throws Exception {
1: 
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         PUBLISH publish = new PUBLISH();
1: 
1:         publish.dup(false);
1:         publish.messageId((short) 127);
1:         publish.qos(QoS.AT_LEAST_ONCE);
1:         publish.payload(new Buffer(CONTENTS));
1:         publish.topicName(new UTF8Buffer("TOPIC"));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(publish.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:         codec.parse(input, marshalled.length());
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         publish = new PUBLISH().decode(frames.get(0));
1:         assertFalse(publish.dup());
1:         assertEquals(MESSAGE_SIZE, publish.payload().length());
1:     }
1: 
1:     @Test
1:     public void testMessageDecodingPerformance() throws Exception {
1: 
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         PUBLISH publish = new PUBLISH();
1: 
1:         publish.dup(false);
1:         publish.messageId((short) 127);
1:         publish.qos(QoS.AT_LEAST_ONCE);
1:         publish.payload(new Buffer(CONTENTS));
1:         publish.topicName(new UTF8Buffer("TOPIC"));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(publish.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         for (int i = 0; i < ITERATIONS; ++i) {
1:             DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:             codec.parse(input, marshalled.length());
1: 
1:             assertTrue(!frames.isEmpty());
1:             publish = new PUBLISH().decode(frames.get(0));
1:             frames.clear();
1:         }
1: 
1:         long duration = System.currentTimeMillis() - startTime;
1: 
1:         LOG.info("Total time to process: {}", TimeUnit.MILLISECONDS.toSeconds(duration));
1:     }
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests the functionality of the MQTTCodec class.
1:  */
1: public class MQTTCodecTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTCodecTest.class);
1: 
1:     private final MQTTWireFormat wireFormat = new MQTTWireFormat();
1: 
1:     private List<MQTTFrame> frames;
1:     private MQTTCodec codec;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         frames = new ArrayList<MQTTFrame>();
1:         codec = new MQTTCodec(new MQTTCodec.MQTTFrameSink() {
1: 
1:             @Override
1:             public void onFrame(MQTTFrame mqttFrame) {
1:                 frames.add(mqttFrame);
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void testEmptyConnectBytes() throws Exception {
1: 
1:         CONNECT connect = new CONNECT();
1:         connect.cleanSession(true);
1:         connect.clientId(new UTF8Buffer(""));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(connect.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:         codec.parse(input, marshalled.length());
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         connect = new CONNECT().decode(frames.get(0));
1:         LOG.info("Unmarshalled: {}", connect);
1:         assertTrue(connect.cleanSession());
1:     }
1: 
1:     @Test
1:     public void testConnectWithCredentialsBackToBack() throws Exception {
1: 
1:         CONNECT connect = new CONNECT();
1:         connect.cleanSession(false);
1:         connect.clientId(new UTF8Buffer("test"));
1:         connect.userName(new UTF8Buffer("user"));
1:         connect.password(new UTF8Buffer("pass"));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(connect.encode(), output);
1:         wireFormat.marshal(connect.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1:         codec.parse(input, marshalled.length());
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(2, frames.size());
1: 
1:         for (MQTTFrame frame : frames) {
1:             connect = new CONNECT().decode(frame);
1:             LOG.info("Unmarshalled: {}", connect);
1:             assertFalse(connect.cleanSession());
1:             assertEquals("user", connect.userName().toString());
1:             assertEquals("pass", connect.password().toString());
1:             assertEquals("test", connect.clientId().toString());
1:         }
1:     }
1: 
1:     @Test
1:     public void testProcessInChunks() throws Exception {
1: 
1:         CONNECT connect = new CONNECT();
1:         connect.cleanSession(false);
1:         connect.clientId(new UTF8Buffer("test"));
1:         connect.userName(new UTF8Buffer("user"));
1:         connect.password(new UTF8Buffer("pass"));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(connect.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1: 
1:         int first = marshalled.length() / 2;
1:         int second = marshalled.length() - first;
1: 
1:         codec.parse(input, first);
1:         codec.parse(input, second);
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         connect = new CONNECT().decode(frames.get(0));
1:         LOG.info("Unmarshalled: {}", connect);
1:         assertFalse(connect.cleanSession());
1: 
1:         assertEquals("user", connect.userName().toString());
1:         assertEquals("pass", connect.password().toString());
1:         assertEquals("test", connect.clientId().toString());
1:     }
1: 
1:     @Test
1:     public void testProcessInBytes() throws Exception {
1: 
1:         CONNECT connect = new CONNECT();
1:         connect.cleanSession(false);
1:         connect.clientId(new UTF8Buffer("test"));
1:         connect.userName(new UTF8Buffer("user"));
1:         connect.password(new UTF8Buffer("pass"));
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         wireFormat.marshal(connect.encode(), output);
1:         Buffer marshalled = output.toBuffer();
1: 
1:         DataByteArrayInputStream input = new DataByteArrayInputStream(marshalled);
1: 
1:         int size = marshalled.length();
1: 
1:         for (int i = 0; i < size; ++i) {
1:             codec.parse(input, 1);
1:         }
1: 
1:         assertTrue(!frames.isEmpty());
1:         assertEquals(1, frames.size());
1: 
1:         connect = new CONNECT().decode(frames.get(0));
1:         LOG.info("Unmarshalled: {}", connect);
1:         assertFalse(connect.cleanSession());
1: 
1:         assertEquals("user", connect.userName().toString());
1:         assertEquals("pass", connect.password().toString());
1:         assertEquals("test", connect.clientId().toString());
1:     }
1: }
============================================================================