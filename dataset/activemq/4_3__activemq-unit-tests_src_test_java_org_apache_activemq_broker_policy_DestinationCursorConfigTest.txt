1:b54ff7a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
4:b54ff7a:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b54ff7a:  *
1:b54ff7a:  * Unless required by applicable law or agreed to in writing, software
1:b54ff7a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b54ff7a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b54ff7a:  * See the License for the specific language governing permissions and
1:b54ff7a:  * limitations under the License.
1:b54ff7a:  */
1:b54ff7a: package org.apache.activemq.broker.policy;
2:b54ff7a: 
1:b54ff7a: import org.apache.activemq.TestSupport;
1:b54ff7a: import org.apache.activemq.broker.BrokerService;
1:b54ff7a: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1:f8d86bc: import org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy;
1:b54ff7a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b54ff7a: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:b54ff7a: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:b54ff7a: import org.apache.activemq.command.ActiveMQDestination;
1:b54ff7a: import org.apache.activemq.xbean.BrokerFactoryBean;
1:b54ff7a: import org.springframework.core.io.ClassPathResource;
1:b54ff7a: 
1:b54ff7a: /**
1:0bbc0ac:  * 
1:b54ff7a:  */
1:b54ff7a: public class DestinationCursorConfigTest extends TestSupport {
1:f8d86bc:     protected BrokerService broker;
1:b54ff7a: 
1:f8d86bc:     @Override
1:f8d86bc:     protected void setUp() throws Exception {
1:f8d86bc:         broker = createBroker();
1:f8d86bc:         super.setUp();  
1:f8d86bc:     }
1:b54ff7a: 
1:f8d86bc:     @Override
1:f8d86bc:     protected void tearDown() throws Exception {
1:f8d86bc:         broker.stop();
1:f8d86bc:         super.tearDown();    
1:f8d86bc:     }
1:b54ff7a: 
1:b54ff7a:     protected BrokerService createBroker() throws Exception {
1:b54ff7a:         BrokerFactoryBean factory = new BrokerFactoryBean(new ClassPathResource("org/apache/activemq/broker/policy/cursor.xml"));
1:b54ff7a:         factory.afterPropertiesSet();
1:b54ff7a:         BrokerService answer = factory.getBroker();
1:b54ff7a:         return answer;
1:b54ff7a:     }
1:b54ff7a: 
1:f8d86bc:     public void testQueueConfiguration() throws Exception {
1:f8d86bc:         super.topic = false;
1:f8d86bc:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:f8d86bc:         PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:b54ff7a:         PendingQueueMessageStoragePolicy policy = entry.getPendingQueuePolicy();
1:b54ff7a:         assertNotNull(policy);
1:f8d86bc:         assertTrue("Policy is: " + policy, policy instanceof VMPendingQueueMessageStoragePolicy);
1:b54ff7a:     }
1:b54ff7a: 
1:f8d86bc:     public void testTopicConfiguration() throws Exception {
1:f8d86bc:         super.topic = true;
1:f8d86bc:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:f8d86bc:         PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:f8d86bc:         PendingSubscriberMessageStoragePolicy policy = entry.getPendingSubscriberPolicy();
1:b54ff7a:         assertNotNull(policy);
1:0da68b4:         assertFalse(entry.isProducerFlowControl());
1:0da68b4:         assertTrue(entry.getMemoryLimit()==(1024*1024));
1:f8d86bc:         assertTrue("subscriberPolicy is: " + policy, policy instanceof VMPendingSubscriberMessageStoragePolicy);
1:b54ff7a:     }
1:f8d86bc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Robert Davies
-------------------------------------------------------------------------------
commit:0da68b4
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(entry.isProducerFlowControl());
1:         assertTrue(entry.getMemoryLimit()==(1024*1024));
commit:b54ff7a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import javax.jms.Destination;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: /**
1:  *
0:  * @version $Revision: 2765 $
1:  */
1: public class DestinationCursorConfigTest extends TestSupport {
1: 
1: 
1:    
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(new ClassPathResource("org/apache/activemq/broker/policy/cursor.xml"));
1:         factory.afterPropertiesSet();
1:         BrokerService answer = factory.getBroker();
1:         return answer;
1:     }
1: 
0:     public void testConfiguration() throws Exception{
0:         BrokerService broker = createBroker();
0:         super.topic=false;
0:         ActiveMQDestination destination = (ActiveMQDestination)createDestination("org.apache.foo");
0:         PolicyEntry entry=broker.getDestinationPolicy().getEntryFor(destination);
1:         PendingQueueMessageStoragePolicy policy = entry.getPendingQueuePolicy();
1:         assertNotNull(policy);
0:         assert(policy instanceof VMPendingQueueMessageStoragePolicy);
1:         
0:         super.topic=true;
0:         destination = (ActiveMQDestination)createDestination("org.apache.foo");
0:         entry=broker.getDestinationPolicy().getEntryFor(destination);
1:         assertNotNull(policy);
0:         assert(policy instanceof VMPendingSubscriberMessageStoragePolicy);
1:         
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:f8d86bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PendingSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService broker;
1:     @Override
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         super.setUp();  
1:     }
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         super.tearDown();    
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void testQueueConfiguration() throws Exception {
1:         super.topic = false;
1:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:         PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:         assertTrue("Policy is: " + policy, policy instanceof VMPendingQueueMessageStoragePolicy);
1:     }
0: 
1:     public void testTopicConfiguration() throws Exception {
1:         super.topic = true;
1:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:         PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:         PendingSubscriberMessageStoragePolicy policy = entry.getPendingSubscriberPolicy();
1:         assertTrue("subscriberPolicy is: " + policy, policy instanceof VMPendingSubscriberMessageStoragePolicy);
============================================================================