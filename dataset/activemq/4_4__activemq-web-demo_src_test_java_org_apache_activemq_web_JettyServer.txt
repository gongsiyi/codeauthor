1:ce9f83c: /**
1:ce9f83c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ce9f83c:  * contributor license agreements.  See the NOTICE file distributed with
1:ce9f83c:  * this work for additional information regarding copyright ownership.
1:ce9f83c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ce9f83c:  * (the "License"); you may not use this file except in compliance with
1:ce9f83c:  * the License.  You may obtain a copy of the License at
3:ce9f83c:  *
1:ce9f83c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:ce9f83c:  * Unless required by applicable law or agreed to in writing, software
1:ce9f83c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce9f83c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce9f83c:  * See the License for the specific language governing permissions and
1:ce9f83c:  * limitations under the License.
1:ce9f83c:  */
1:ce9f83c: 
1:ce9f83c: package org.apache.activemq.web;
1:ce9f83c: 
1:ce9f83c: import org.apache.activemq.broker.BrokerService;
1:ce9f83c: import org.apache.activemq.demo.DefaultQueueSender;
1:ce9f83c: import org.eclipse.jetty.server.Connector;
1:ce9f83c: import org.eclipse.jetty.server.Server;
1:f44c3d2: import org.eclipse.jetty.server.ServerConnector;
1:ce9f83c: import org.eclipse.jetty.webapp.WebAppContext;
1:ce9f83c: 
1:ce9f83c: /**
1:ce9f83c:  * A simple bootstrap class for starting Jetty in your IDE using the local web
1:ce9f83c:  * application.
1:f3e9ec0:  *
1:f3e9ec0:  *
1:ce9f83c:  */
1:ce9f83c: public final class JettyServer {
1:ce9f83c: 
1:ce9f83c:     public static final int PORT = 8080;
1:ce9f83c: 
1:ce9f83c:     public static final String WEBAPP_DIR = "src/main/webapp";
1:ce9f83c: 
1:ce9f83c:     public static final String WEBAPP_CTX = "/";
1:ce9f83c: 
1:ce9f83c:     private JettyServer() {
1:ce9f83c:     }
1:ce9f83c: 
1:ce9f83c:     public static void main(String[] args) throws Exception {
1:ce9f83c:         // lets create a broker
1:ce9f83c:         BrokerService broker = new BrokerService();
1:ce9f83c:         broker.setPersistent(false);
1:ce9f83c:         broker.setUseJmx(true);
1:f44c3d2:         broker.addConnector("tcp://localhost:61616");
1:f3e9ec0:         broker.addConnector("stomp://localhost:0");
1:ce9f83c:         broker.start();
1:ce9f83c: 
1:ce9f83c:         // lets publish some messages so that there is some stuff to browse
1:ce9f83c:         DefaultQueueSender.main(new String[] {
1:ce9f83c:             "FOO.BAR"
1:ce9f83c:         });
1:ce9f83c: 
1:ce9f83c:         // now lets start the web server
1:ce9f83c:         int port = PORT;
1:ce9f83c:         if (args.length > 0) {
1:ce9f83c:             String text = args[0];
1:ce9f83c:             port = Integer.parseInt(text);
1:ce9f83c:         }
1:ce9f83c:         System.out.println("Starting Web Server on port: " + port);
1:ce9f83c:         Server server = new Server();
1:f44c3d2:         ServerConnector connector = new ServerConnector(server);
1:ce9f83c:         connector.setPort(port);
1:ce9f83c:         WebAppContext context = new WebAppContext();
1:ce9f83c: 
1:ce9f83c:         context.setResourceBase(WEBAPP_DIR);
1:ce9f83c:         context.setContextPath(WEBAPP_CTX);
1:ce9f83c:         context.setServer(server);
1:ce9f83c:         server.setHandler(context);
1:ce9f83c:         server.setConnectors(new Connector[] {
1:ce9f83c:             connector
1:ce9f83c:         });
1:ce9f83c:         server.start();
1:ce9f83c:     }
1:ce9f83c: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.ServerConnector;
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:61616");
/////////////////////////////////////////////////////////////////////////
1:         ServerConnector connector = new ServerConnector(server);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f3e9ec0
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:         broker.addConnector("tcp://localhost:0");
1:         broker.addConnector("stomp://localhost:0");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ce9f83c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.web;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.demo.DefaultQueueSender;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
1: import org.eclipse.jetty.webapp.WebAppContext;
1: 
1: /**
1:  * A simple bootstrap class for starting Jetty in your IDE using the local web
1:  * application.
1:  * 
0:  * @version $Revision$
1:  */
1: public final class JettyServer {
1: 
1:     public static final int PORT = 8080;
1: 
1:     public static final String WEBAPP_DIR = "src/main/webapp";
1: 
1:     public static final String WEBAPP_CTX = "/";
1: 
1:     private JettyServer() {
1:     }
1: 
1:     public static void main(String[] args) throws Exception {
1:         // lets create a broker
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
0:         broker.addConnector("tcp://localhost:61616");
0:         broker.addConnector("stomp://localhost:61613");
1:         broker.start();
1: 
1:         // lets publish some messages so that there is some stuff to browse
1:         DefaultQueueSender.main(new String[] {
1:             "FOO.BAR"
1:         });
1: 
1:         // now lets start the web server
1:         int port = PORT;
1:         if (args.length > 0) {
1:             String text = args[0];
1:             port = Integer.parseInt(text);
1:         }
1:         System.out.println("Starting Web Server on port: " + port);
1:         Server server = new Server();
0:         SelectChannelConnector connector = new SelectChannelConnector();
1:         connector.setPort(port);
0:         connector.setServer(server);
1:         WebAppContext context = new WebAppContext();
1: 
1:         context.setResourceBase(WEBAPP_DIR);
1:         context.setContextPath(WEBAPP_CTX);
1:         context.setServer(server);
1:         server.setHandler(context);
1:         server.setConnectors(new Connector[] {
1:             connector
1:         });
1:         server.start();
1:     }
1: }
============================================================================