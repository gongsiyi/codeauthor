2:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e34ec0b:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
2:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
6:a107823: 
1:a107823: import java.net.URI;
1:a107823: import java.util.Collections;
1:5f1adbe: import java.util.List;
1:5f1adbe: 
1:5f1adbe: import javax.jms.Connection;
1:e34ec0b: import javax.jms.ConnectionFactory;
1:5f1adbe: import javax.jms.Destination;
1:5f1adbe: import javax.jms.JMSException;
1:5f1adbe: import javax.jms.QueueBrowser;
1:5f1adbe: import javax.jms.Session;
1:5f1adbe: 
1:5f1adbe: import org.apache.activemq.ActiveMQConnectionFactory;
1:5f1adbe: import org.apache.activemq.command.ActiveMQQueue;
1:5f1adbe: import org.apache.activemq.command.ActiveMQTopic;
1:a107823: 
1:a107823: public class AmqMessagesQueryFilter extends AbstractQueryFilter {
1:a107823: 
1:a107823:     private URI brokerUrl;
1:a107823:     private Destination destination;
1:a107823: 
1:e34ec0b:     private ConnectionFactory connectionFactory;
1:e34ec0b: 
1:a107823:     /**
1:e34ec0b:      * Create a JMS message query filter
1:e34ec0b:      *
1:e34ec0b:      * @param brokerUrl   - broker url to connect to
1:a107823:      * @param destination - JMS destination to query
1:a107823:      */
1:a107823:     public AmqMessagesQueryFilter(URI brokerUrl, Destination destination) {
1:a107823:         super(null);
1:5f1adbe:         this.brokerUrl = brokerUrl;
1:a107823:         this.destination = destination;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:a107823:      * Create a JMS message query filter
1:e34ec0b:      *
1:ae1da74:      * @param connectionFactory - to connect with
1:e34ec0b:      * @param destination - JMS destination to query
1:e34ec0b:      */
1:e34ec0b:     public AmqMessagesQueryFilter(ConnectionFactory connectionFactory, Destination destination) {
1:e34ec0b:         super(null);
1:e34ec0b:         this.destination = destination;
1:e34ec0b:         this.connectionFactory = connectionFactory;
1:e34ec0b:     }
1:e34ec0b: 
1:e34ec0b:     /**
1:a107823:      * Queries the specified destination using the message selector format query
1:e34ec0b:      *
1:a107823:      * @param queries - message selector queries
1:a107823:      * @return list messages that matches the selector
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public List query(List queries) throws Exception {
1:a107823:         String selector = "";
1:a107823: 
1:a107823:         // Convert to message selector
1:6f2ac63:         for (Object query : queries) {
1:6f2ac63:             selector = selector + "(" + query.toString() + ") AND ";
2:a107823:         }
1:a107823: 
1:a107823:         // Remove last AND
1:5f1adbe:         if (!selector.equals("")) {
1:a107823:             selector = selector.substring(0, selector.length() - 5);
1:a107823:         }
1:a107823: 
1:a107823:         if (destination instanceof ActiveMQQueue) {
1:e34ec0b:             return queryMessages((ActiveMQQueue) destination, selector);
1:a107823:         } else {
1:e34ec0b:             return queryMessages((ActiveMQTopic) destination, selector);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Query the messages of a queue destination using a queue browser
1:e34ec0b:      *
1:e34ec0b:      * @param queue    - queue destination
1:a107823:      * @param selector - message selector
1:a107823:      * @return list of messages that matches the selector
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     protected List queryMessages(ActiveMQQueue queue, String selector) throws Exception {
1:e34ec0b:         Connection conn = createConnection();
1:a107823: 
1:a107823:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a107823:         QueueBrowser browser = sess.createBrowser(queue, selector);
1:a107823: 
1:a107823:         List messages = Collections.list(browser.getEnumeration());
1:a107823: 
1:a107823:         conn.close();
1:a107823: 
1:a107823:         return messages;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Query the messages of a topic destination using a message consumer
1:e34ec0b:      *
1:e34ec0b:      * @param topic    - topic destination
1:a107823:      * @param selector - message selector
1:a107823:      * @return list of messages that matches the selector
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     protected List queryMessages(ActiveMQTopic topic, String selector) throws Exception {
1:5f1adbe:         // TODO: should we use a durable subscriber or a retroactive non-durable
1:5f1adbe:         // subscriber?
1:5f1adbe:         // TODO: if a durable subscriber is used, how do we manage it?
1:5f1adbe:         // subscribe/unsubscribe tasks?
1:a107823:         return null;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:e34ec0b:      * Create and start a JMS connection
1:e34ec0b:      *
1:e34ec0b:      * @return JMS connection
1:e34ec0b:      * @throws JMSException
1:e34ec0b:      */
1:e34ec0b:     protected Connection createConnection() throws JMSException {
1:e34ec0b:         // maintain old behaviour, when called either way.
1:6f2ac63:         if (null == connectionFactory) {
1:e34ec0b:             connectionFactory = (new ActiveMQConnectionFactory(getBrokerUrl()));
1:6f2ac63:         }
1:e34ec0b:         Connection conn = connectionFactory.createConnection();
1:a107823:         conn.start();
1:a107823:         return conn;
1:a107823:     }
1:e34ec0b: 
1:a107823:     /**
1:a107823:      * Get the broker url being used.
1:e34ec0b:      *
1:a107823:      * @return broker url
1:a107823:      */
1:a107823:     public URI getBrokerUrl() {
1:a107823:         return brokerUrl;
1:a107823:     }
1:e34ec0b: 
1:a107823:     /**
1:a107823:      * Set the broker url to use.
1:e34ec0b:      *
1:a107823:      * @param brokerUrl - broker url
1:a107823:      */
1:a107823:     public void setBrokerUrl(URI brokerUrl) {
1:a107823:         this.brokerUrl = brokerUrl;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Get the destination being used.
1:e34ec0b:      *
1:a107823:      * @return - JMS destination
1:a107823:      */
1:a107823:     public Destination getDestination() {
1:a107823:         return destination;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Set the destination to use.
1:e34ec0b:      *
1:a107823:      * @param destination - JMS destination
1:a107823:      */
1:a107823:     public void setDestination(Destination destination) {
1:a107823:         this.destination = destination;
1:a107823:     }
1:a107823: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ae1da74
/////////////////////////////////////////////////////////////////////////
1:      * @param connectionFactory - to connect with
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6f2ac63
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (Object query : queries) {
1:             selector = selector + "(" + query.toString() + ") AND ";
/////////////////////////////////////////////////////////////////////////
1:         if (null == connectionFactory) {
1:         }
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e34ec0b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     private ConnectionFactory connectionFactory;
1: 
1:      *
1:      * @param brokerUrl   - broker url to connect to
/////////////////////////////////////////////////////////////////////////
1:      * Create a JMS message query filter
1:      *
0:      * @param brokerUrl   - broker url to connect to
1:      * @param destination - JMS destination to query
1:      */
1:     public AmqMessagesQueryFilter(ConnectionFactory connectionFactory, Destination destination) {
1:         super(null);
1:         this.destination = destination;
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     /**
1:      *
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = queries.iterator(); i.hasNext(); ) {
/////////////////////////////////////////////////////////////////////////
1:             return queryMessages((ActiveMQQueue) destination, selector);
1:             return queryMessages((ActiveMQTopic) destination, selector);
1:      *
1:      * @param queue    - queue destination
1:         Connection conn = createConnection();
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param topic    - topic destination
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @deprecated Use createConnection() instead, and pass the url to the ConnectionFactory when it's created.
0:     @Deprecated
0:         // maintain old behaviour, when called this way.
0:         connectionFactory = (new ActiveMQConnectionFactory(brokerUrl));
0:         return createConnection();
1:     }
1: 
1:     /**
1:      * Create and start a JMS connection
1:      *
1:      * @return JMS connection
1:      * @throws JMSException
1:      */
1:     protected Connection createConnection() throws JMSException {
1:         // maintain old behaviour, when called either way.
0:         if (null == connectionFactory)
1:             connectionFactory = (new ActiveMQConnectionFactory(getBrokerUrl()));
1: 
1:         Connection conn = connectionFactory.createConnection();
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         this.brokerUrl = brokerUrl;
1:      * 
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:         if (!selector.equals("")) {
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:         // TODO: should we use a durable subscriber or a retroactive non-durable
1:         // subscriber?
1:         // TODO: if a durable subscriber is used, how do we manage it?
1:         // subscribe/unsubscribe tasks?
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
0: import javax.jms.Destination;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
0: import javax.jms.QueueBrowser;
1: import java.net.URI;
1: import java.util.Collections;
0: import java.util.List;
0: import java.util.Iterator;
1: 
1: public class AmqMessagesQueryFilter extends AbstractQueryFilter {
1: 
1:     private URI brokerUrl;
1:     private Destination destination;
1: 
1:     /**
1:      * Create a JMS message query filter
0:      * @param brokerUrl - broker url to connect to
1:      * @param destination - JMS destination to query
1:      */
1:     public AmqMessagesQueryFilter(URI brokerUrl, Destination destination) {
1:         super(null);
0:         this.brokerUrl   = brokerUrl;
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * Queries the specified destination using the message selector format query
1:      * @param queries - message selector queries
1:      * @return list messages that matches the selector
1:      * @throws Exception
1:      */
1:     public List query(List queries) throws Exception {
1:         String selector = "";
1: 
1:         // Convert to message selector
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             selector = selector + "(" + i.next().toString() + ") AND ";
1:         }
1: 
1:         // Remove last AND
0:         if (selector != "") {
1:             selector = selector.substring(0, selector.length() - 5);
1:         }
1: 
1:         if (destination instanceof ActiveMQQueue) {
0:             return queryMessages((ActiveMQQueue)destination, selector);
1:         } else {
0:             return queryMessages((ActiveMQTopic)destination, selector);
1:         }
1:     }
1: 
1:     /**
1:      * Query the messages of a queue destination using a queue browser
0:      * @param queue - queue destination
1:      * @param selector - message selector
1:      * @return list of messages that matches the selector
1:      * @throws Exception
1:      */
1:     protected List queryMessages(ActiveMQQueue queue, String selector) throws Exception {
0:         Connection conn = createConnection(getBrokerUrl());
1: 
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueBrowser browser = sess.createBrowser(queue, selector);
1: 
1:         List messages = Collections.list(browser.getEnumeration());
1: 
1:         conn.close();
1: 
1:         return messages;
1:     }
1: 
1:     /**
1:      * Query the messages of a topic destination using a message consumer
0:      * @param topic - topic destination
1:      * @param selector - message selector
1:      * @return list of messages that matches the selector
1:      * @throws Exception
1:      */
1:     protected List queryMessages(ActiveMQTopic topic, String selector) throws Exception {
0:         // TODO: should we use a durable subscriber or a retroactive non-durable subscriber?
0:         // TODO: if a durable subscriber is used, how do we manage it? subscribe/unsubscribe tasks?
1:         return null;
1:     }
1: 
1:     /**
0:      * Create and start a JMS connection
0:      * @param brokerUrl - broker url to connect to.
0:      * @return JMS connection
0:      * @throws JMSException
1:      */
0:     protected Connection createConnection(URI brokerUrl) throws JMSException {
0:         Connection conn = (new ActiveMQConnectionFactory(brokerUrl)).createConnection();
1:         conn.start();
1:         return conn;
1:     }
1: 
1:     /**
1:      * Get the broker url being used.
1:      * @return broker url
1:      */
1:     public URI getBrokerUrl() {
1:         return brokerUrl;
1:     }
1: 
1:     /**
1:      * Set the broker url to use.
1:      * @param brokerUrl - broker url
1:      */
1:     public void setBrokerUrl(URI brokerUrl) {
1:         this.brokerUrl = brokerUrl;
1:     }
1: 
1:     /**
1:      * Get the destination being used.
1:      * @return - JMS destination
1:      */
1:     public Destination getDestination() {
1:         return destination;
1:     }
1: 
1:     /**
1:      * Set the destination to use.
1:      * @param destination - JMS destination
1:      */
1:     public void setDestination(Destination destination) {
1:         this.destination = destination;
1:     }
1: 
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.console.filter;
0: 
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: 
0: import javax.jms.Destination;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
0: import javax.jms.QueueBrowser;
0: import java.net.URI;
0: import java.util.Collections;
0: import java.util.List;
0: import java.util.Iterator;
0: 
0: public class AmqMessagesQueryFilter extends AbstractQueryFilter {
0: 
0:     private URI brokerUrl;
0:     private Destination destination;
0: 
0:     /**
0:      * Create a JMS message query filter
0:      * @param brokerUrl - broker url to connect to
0:      * @param destination - JMS destination to query
0:      */
0:     public AmqMessagesQueryFilter(URI brokerUrl, Destination destination) {
0:         super(null);
0:         this.brokerUrl   = brokerUrl;
0:         this.destination = destination;
0:     }
0: 
0:     /**
0:      * Queries the specified destination using the message selector format query
0:      * @param queries - message selector queries
0:      * @return list messages that matches the selector
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         String selector = "";
0: 
0:         // Convert to message selector
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             selector = selector + "(" + i.next().toString() + ") AND ";
0:         }
0: 
0:         // Remove last AND
0:         if (selector != "") {
0:             selector = selector.substring(0, selector.length() - 5);
0:         }
0: 
0:         if (destination instanceof ActiveMQQueue) {
0:             return queryMessages((ActiveMQQueue)destination, selector);
0:         } else {
0:             return queryMessages((ActiveMQTopic)destination, selector);
0:         }
0:     }
0: 
0:     /**
0:      * Query the messages of a queue destination using a queue browser
0:      * @param queue - queue destination
0:      * @param selector - message selector
0:      * @return list of messages that matches the selector
0:      * @throws Exception
0:      */
0:     protected List queryMessages(ActiveMQQueue queue, String selector) throws Exception {
0:         Connection conn = createConnection(getBrokerUrl());
0: 
0:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         QueueBrowser browser = sess.createBrowser(queue, selector);
0: 
0:         List messages = Collections.list(browser.getEnumeration());
0: 
0:         conn.close();
0: 
0:         return messages;
0:     }
0: 
0:     /**
0:      * Query the messages of a topic destination using a message consumer
0:      * @param topic - topic destination
0:      * @param selector - message selector
0:      * @return list of messages that matches the selector
0:      * @throws Exception
0:      */
0:     protected List queryMessages(ActiveMQTopic topic, String selector) throws Exception {
0:         // TODO: should we use a durable subscriber or a retroactive non-durable subscriber?
0:         // TODO: if a durable subscriber is used, how do we manage it? subscribe/unsubscribe tasks?
0:         return null;
0:     }
0: 
0:     /**
0:      * Create and start a JMS connection
0:      * @param brokerUrl - broker url to connect to.
0:      * @return JMS connection
0:      * @throws JMSException
0:      */
0:     protected Connection createConnection(URI brokerUrl) throws JMSException {
0:         Connection conn = (new ActiveMQConnectionFactory(brokerUrl)).createConnection();
0:         conn.start();
0:         return conn;
0:     }
0: 
0:     /**
0:      * Get the broker url being used.
0:      * @return broker url
0:      */
0:     public URI getBrokerUrl() {
0:         return brokerUrl;
0:     }
0: 
0:     /**
0:      * Set the broker url to use.
0:      * @param brokerUrl - broker url
0:      */
0:     public void setBrokerUrl(URI brokerUrl) {
0:         this.brokerUrl = brokerUrl;
0:     }
0: 
0:     /**
0:      * Get the destination being used.
0:      * @return - JMS destination
0:      */
0:     public Destination getDestination() {
0:         return destination;
0:     }
0: 
0:     /**
0:      * Set the destination to use.
0:      * @param destination - JMS destination
0:      */
0:     public void setDestination(Destination destination) {
0:         this.destination = destination;
0:     }
0: 
0: }
============================================================================