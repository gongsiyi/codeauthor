1:08bb172: /**
1:08bb172:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:08bb172:  * contributor license agreements.  See the NOTICE file distributed with
1:08bb172:  * this work for additional information regarding copyright ownership.
1:08bb172:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:08bb172:  * (the "License"); you may not use this file except in compliance with
1:08bb172:  * the License.  You may obtain a copy of the License at
1:08bb172:  *
1:08bb172:  *      http://www.apache.org/licenses/LICENSE-2.0
1:08bb172:  *
1:08bb172:  * Unless required by applicable law or agreed to in writing, software
1:08bb172:  * distributed under the License is distributed on an "AS IS" BASIS,
1:08bb172:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:08bb172:  * See the License for the specific language governing permissions and
1:08bb172:  * limitations under the License.
1:08bb172:  */
1:08bb172: package org.apache.activemq.broker.virtual;
2:08bb172: 
1:08bb172: 
1:08bb172: import java.util.ArrayList;
1:08bb172: import java.util.Collection;
1:08bb172: import java.util.LinkedHashMap;
1:ad1f751: import java.util.concurrent.ExecutorService;
1:ad1f751: import java.util.concurrent.Executors;
1:ad1f751: import java.util.concurrent.TimeUnit;
1:ad1f751: import java.util.concurrent.atomic.AtomicLong;
1:08bb172: import javax.jms.Connection;
1:08bb172: import javax.jms.DeliveryMode;
1:08bb172: import javax.jms.MessageProducer;
1:08bb172: import javax.jms.Session;
1:ad1f751: import javax.management.ObjectName;
1:08bb172: import org.apache.activemq.ActiveMQConnectionFactory;
1:08bb172: import org.apache.activemq.broker.BrokerService;
1:ad1f751: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:08bb172: import org.apache.activemq.broker.region.DestinationInterceptor;
1:08bb172: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:08bb172: import org.apache.activemq.broker.region.policy.PolicyMap;
1:08bb172: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1:08bb172: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:08bb172: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:08bb172: import org.apache.activemq.command.ActiveMQBytesMessage;
1:ad1f751: import org.apache.activemq.command.ActiveMQDestination;
1:08bb172: import org.apache.activemq.command.ActiveMQQueue;
1:08bb172: import org.apache.activemq.command.ActiveMQTopic;
1:08bb172: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:08bb172: import org.apache.activemq.util.ByteSequence;
1:08bb172: import org.junit.Ignore;
1:08bb172: import org.junit.Test;
1:08bb172: import org.slf4j.Logger;
1:08bb172: import org.slf4j.LoggerFactory;
1:08bb172: 
1:08bb172: 
1:ad1f751: import static org.junit.Assert.assertEquals;
1:ad1f751: import static org.junit.Assert.assertTrue;
1:ad1f751: 
1:ad1f751: 
1:08bb172: public class VirtualDestPerfTest {
1:08bb172: 
1:08bb172:     private static final Logger LOG = LoggerFactory.getLogger(VirtualDestPerfTest.class);
1:ad1f751:     public int messageSize = 5*1024;
1:ad1f751:     public int messageCount = 10000;
1:08bb172:     ActiveMQTopic target = new ActiveMQTopic("target");
1:08bb172:     BrokerService brokerService;
1:08bb172:     ActiveMQConnectionFactory connectionFactory;
1:08bb172: 
1:08bb172:     @Test
1:ad1f751:     @Ignore("comparison test - 'new' no wait on future with async send broker side is always on")
1:ad1f751:     public void testAsyncSendBurstToFillCache() throws Exception {
1:ad1f751:         startBroker(4, true, true);
1:ad1f751:         connectionFactory.setUseAsyncSend(true);
1:ad1f751: 
1:ad1f751:         // a burst of messages to fill the cache
1:ad1f751:         messageCount = 22000;
1:ad1f751:         messageSize = 10*1024;
1:ad1f751: 
1:ad1f751:         LinkedHashMap<Integer, Long> results = new LinkedHashMap<Integer, Long>();
1:ad1f751: 
1:ad1f751:         final ActiveMQQueue queue = new ActiveMQQueue("targetQ");
1:ad1f751:         for (Integer numThreads : new Integer[]{1, 2}) {
1:ad1f751:             ExecutorService executor = Executors.newFixedThreadPool(numThreads);
1:ad1f751:             final AtomicLong numMessagesToSend = new AtomicLong(messageCount);
1:ad1f751:             purge();
1:ad1f751:             long startTime = System.currentTimeMillis();
1:ad1f751:             for (int i=0;i<numThreads;i++) {
1:ad1f751:                 executor.execute(new Runnable(){
1:ad1f751:                     @Override
1:ad1f751:                     public void run() {
1:ad1f751:                         try {
1:ad1f751:                             produceMessages(numMessagesToSend, queue);
1:ad1f751:                         } catch (Exception e) {
1:ad1f751:                             e.printStackTrace();
1:ad1f751:                         }
1:ad1f751:                     }
1:ad1f751:                 });
1:ad1f751:             }
1:ad1f751:             executor.shutdown();
1:ad1f751:             executor.awaitTermination(5, TimeUnit.MINUTES);
1:ad1f751:             long endTime = System.currentTimeMillis();
1:ad1f751:             long seconds = (endTime - startTime) / 1000;
1:ad1f751:             LOG.info("For numThreads {} duration {}", numThreads.intValue(), seconds);
1:ad1f751:             results.put(numThreads, seconds);
1:ad1f751:             LOG.info("Broker got {} messages", brokerService.getAdminView().getTotalEnqueueCount());
1:ad1f751:         }
1:ad1f751: 
1:ad1f751:         brokerService.stop();
1:ad1f751:         brokerService.waitUntilStopped();
1:ad1f751:         LOG.info("Results: {}", results);
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     private void purge() throws Exception {
1:ad1f751:         ObjectName[] queues = brokerService.getAdminView().getQueues();
1:ad1f751:         if (queues.length == 1) {
1:ad1f751:             QueueViewMBean queueViewMBean = (QueueViewMBean)
1:ad1f751:                 brokerService.getManagementContext().newProxyInstance(queues[0], QueueViewMBean.class, false);
1:ad1f751:             queueViewMBean.purge();
1:ad1f751:         }
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Test
1:08bb172:     @Ignore("comparison test - takes too long and really needs a peek at the graph")
1:08bb172:     public void testPerf() throws Exception {
1:08bb172:         LinkedHashMap<Integer, Long> resultsT = new LinkedHashMap<Integer, Long>();
1:08bb172:         LinkedHashMap<Integer, Long> resultsF = new LinkedHashMap<Integer, Long>();
1:08bb172: 
1:08bb172:         for (int i=2;i<11;i++) {
1:08bb172:             for (Boolean concurrent : new Boolean[]{true, false}) {
1:ad1f751:                 startBroker(i, concurrent, false);
1:08bb172: 
1:08bb172:                 long startTime = System.currentTimeMillis();
1:ad1f751:                 produceMessages(new AtomicLong(messageCount), target);
1:08bb172:                 long endTime = System.currentTimeMillis();
1:08bb172:                 long seconds = (endTime - startTime) / 1000;
1:08bb172:                 LOG.info("For routes {} duration {}", i, seconds);
1:08bb172:                 if (concurrent) {
1:08bb172:                     resultsT.put(i, seconds);
1:08bb172:                 } else {
1:08bb172:                     resultsF.put(i, seconds);
1:08bb172:                 }
1:08bb172:                 brokerService.stop();
1:08bb172:                 brokerService.waitUntilStopped();
1:08bb172:             }
1:08bb172:         }
1:08bb172:         LOG.info("results T{} F{}", resultsT, resultsF);
1:08bb172:         LOG.info("http://www.chartgo.com/samples.do?chart=line&border=1&show3d=0&width=600&height=500&roundedge=1&transparency=1&legend=1&title=Send:10k::Concurrent-v-Serial&xtitle=routes&ytitle=Duration(seconds)&chrtbkgndcolor=white&threshold=0.0&lang=en"
1:08bb172:                 + "&xaxis1=" + toStr(resultsT.keySet())
1:08bb172:                 + "&yaxis1=" + toStr(resultsT.values())
1:08bb172:                 + "&group1=concurrent"
1:08bb172:                 + "&xaxis2=" + toStr(resultsF.keySet())
1:08bb172:                 + "&yaxis2=" + toStr(resultsF.values())
1:08bb172:                 + "&group2=serial"
1:08bb172:                 + "&from=linejsp");
1:08bb172:     }
1:08bb172: 
1:08bb172:     private String toStr(Collection set) {
1:08bb172:         return set.toString().replace(",","%0D%0A").replace("[","").replace("]","").replace(" ", "");
1:08bb172:     }
1:08bb172: 
1:ad1f751:     protected void produceMessages(AtomicLong messageCount, ActiveMQDestination destination) throws Exception {
1:ad1f751:         final ByteSequence payLoad = new ByteSequence(new byte[messageSize]);
1:08bb172:         Connection connection = connectionFactory.createConnection();
1:ad1f751:         MessageProducer messageProducer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(destination);
1:08bb172:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:08bb172:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:ad1f751:         message.setContent(payLoad);
1:ad1f751:         while (messageCount.decrementAndGet() >= 0) {
1:08bb172:             messageProducer.send(message);
1:08bb172:         }
1:08bb172:         connection.close();
1:08bb172:     }
1:08bb172: 
1:ad1f751:     private void startBroker(int fanoutCount, boolean concurrentSend, boolean concurrentStoreAndDispatchQueues) throws Exception {
1:08bb172:         brokerService = new BrokerService();
1:08bb172:         brokerService.setDeleteAllMessagesOnStartup(true);
1:08bb172:         brokerService.setUseVirtualTopics(true);
1:08bb172:         brokerService.addConnector("tcp://0.0.0.0:0");
1:08bb172:         brokerService.setAdvisorySupport(false);
1:08bb172:         PolicyMap destPolicyMap = new PolicyMap();
1:08bb172:         PolicyEntry defaultEntry = new PolicyEntry();
1:08bb172:         defaultEntry.setExpireMessagesPeriod(0);
1:ad1f751:         defaultEntry.setOptimizedDispatch(true);
1:ad1f751:         defaultEntry.setCursorMemoryHighWaterMark(110);
1:08bb172:         destPolicyMap.setDefaultEntry(defaultEntry);
1:08bb172:         brokerService.setDestinationPolicy(destPolicyMap);
1:08bb172: 
1:08bb172:         CompositeTopic route = new CompositeTopic();
1:08bb172:         route.setName("target");
1:08bb172:         route.setForwardOnly(true);
1:08bb172:         route.setConcurrentSend(concurrentSend);
1:08bb172:         Collection<ActiveMQQueue> routes = new ArrayList<ActiveMQQueue>();
1:08bb172:         for (int i=0; i<fanoutCount; i++) {
1:08bb172:             routes.add(new ActiveMQQueue("route." + i));
1:08bb172:         }
1:08bb172:         route.setForwardTo(routes);
1:08bb172:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:08bb172:         interceptor.setVirtualDestinations(new VirtualDestination[]{route});
1:08bb172:         brokerService.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:08bb172:         brokerService.start();
1:08bb172: 
1:08bb172:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:ad1f751:         connectionFactory.setWatchTopicAdvisories(false);
1:08bb172:         if (brokerService.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1:08bb172: 
1:08bb172:             //with parallel sends and no consumers, concurrentStoreAnd dispatch, which uses a single thread by default
1:08bb172:             // will stop/impeed write batching. The num threads will need tweaking when consumers are in the mix but may introduce
1:08bb172:             // order issues
1:ad1f751:             ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatchQueues);
1:08bb172:         }
1:08bb172:     }
1:08bb172: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1:     public int messageSize = 5*1024;
1:     public int messageCount = 10000;
1:     @Ignore("comparison test - 'new' no wait on future with async send broker side is always on")
1:     public void testAsyncSendBurstToFillCache() throws Exception {
1:         startBroker(4, true, true);
1:         connectionFactory.setUseAsyncSend(true);
1: 
1:         // a burst of messages to fill the cache
1:         messageCount = 22000;
1:         messageSize = 10*1024;
1: 
1:         LinkedHashMap<Integer, Long> results = new LinkedHashMap<Integer, Long>();
1: 
1:         final ActiveMQQueue queue = new ActiveMQQueue("targetQ");
1:         for (Integer numThreads : new Integer[]{1, 2}) {
1:             ExecutorService executor = Executors.newFixedThreadPool(numThreads);
1:             final AtomicLong numMessagesToSend = new AtomicLong(messageCount);
1:             purge();
1:             long startTime = System.currentTimeMillis();
1:             for (int i=0;i<numThreads;i++) {
1:                 executor.execute(new Runnable(){
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             produceMessages(numMessagesToSend, queue);
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 });
1:             }
1:             executor.shutdown();
1:             executor.awaitTermination(5, TimeUnit.MINUTES);
1:             long endTime = System.currentTimeMillis();
1:             long seconds = (endTime - startTime) / 1000;
1:             LOG.info("For numThreads {} duration {}", numThreads.intValue(), seconds);
1:             results.put(numThreads, seconds);
1:             LOG.info("Broker got {} messages", brokerService.getAdminView().getTotalEnqueueCount());
1:         }
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:         LOG.info("Results: {}", results);
1:     }
1: 
1:     private void purge() throws Exception {
1:         ObjectName[] queues = brokerService.getAdminView().getQueues();
1:         if (queues.length == 1) {
1:             QueueViewMBean queueViewMBean = (QueueViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(queues[0], QueueViewMBean.class, false);
1:             queueViewMBean.purge();
1:         }
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:                 startBroker(i, concurrent, false);
1:                 produceMessages(new AtomicLong(messageCount), target);
/////////////////////////////////////////////////////////////////////////
1:     protected void produceMessages(AtomicLong messageCount, ActiveMQDestination destination) throws Exception {
1:         final ByteSequence payLoad = new ByteSequence(new byte[messageSize]);
1:         MessageProducer messageProducer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(destination);
1:         message.setContent(payLoad);
1:         while (messageCount.decrementAndGet() >= 0) {
1:     private void startBroker(int fanoutCount, boolean concurrentSend, boolean concurrentStoreAndDispatchQueues) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         defaultEntry.setOptimizedDispatch(true);
1:         defaultEntry.setCursorMemoryHighWaterMark(110);
/////////////////////////////////////////////////////////////////////////
1:         connectionFactory.setWatchTopicAdvisories(false);
1:             ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatchQueues);
commit:08bb172
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.LinkedHashMap;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class VirtualDestPerfTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualDestPerfTest.class);
1:     ActiveMQTopic target = new ActiveMQTopic("target");
1:     BrokerService brokerService;
1:     ActiveMQConnectionFactory connectionFactory;
1: 
1:     @Test
1:     @Ignore("comparison test - takes too long and really needs a peek at the graph")
1:     public void testPerf() throws Exception {
1:         LinkedHashMap<Integer, Long> resultsT = new LinkedHashMap<Integer, Long>();
1:         LinkedHashMap<Integer, Long> resultsF = new LinkedHashMap<Integer, Long>();
1: 
1:         for (int i=2;i<11;i++) {
1:             for (Boolean concurrent : new Boolean[]{true, false}) {
0:                 startBroker(i, concurrent);
1: 
1:                 long startTime = System.currentTimeMillis();
0:                 produceMessages();
1:                 long endTime = System.currentTimeMillis();
1:                 long seconds = (endTime - startTime) / 1000;
1:                 LOG.info("For routes {} duration {}", i, seconds);
1:                 if (concurrent) {
1:                     resultsT.put(i, seconds);
1:                 } else {
1:                     resultsF.put(i, seconds);
1:                 }
1:                 brokerService.stop();
1:                 brokerService.waitUntilStopped();
1:             }
1:         }
1:         LOG.info("results T{} F{}", resultsT, resultsF);
1:         LOG.info("http://www.chartgo.com/samples.do?chart=line&border=1&show3d=0&width=600&height=500&roundedge=1&transparency=1&legend=1&title=Send:10k::Concurrent-v-Serial&xtitle=routes&ytitle=Duration(seconds)&chrtbkgndcolor=white&threshold=0.0&lang=en"
1:                 + "&xaxis1=" + toStr(resultsT.keySet())
1:                 + "&yaxis1=" + toStr(resultsT.values())
1:                 + "&group1=concurrent"
1:                 + "&xaxis2=" + toStr(resultsF.keySet())
1:                 + "&yaxis2=" + toStr(resultsF.values())
1:                 + "&group2=serial"
1:                 + "&from=linejsp");
1:     }
1: 
1:     private String toStr(Collection set) {
1:         return set.toString().replace(",","%0D%0A").replace("[","").replace("]","").replace(" ", "");
1:     }
1: 
1: 
0:     protected void produceMessages() throws Exception {
1:         Connection connection = connectionFactory.createConnection();
0:         MessageProducer messageProducer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(target);
1:         messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
0:         message.setContent(new ByteSequence(new byte[5*1024]));
0:         for (int i=0; i<10000; i++) {
1:             messageProducer.send(message);
1:         }
1:         connection.close();
1:     }
1: 
0:     private void startBroker(int fanoutCount, boolean concurrentSend) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setUseVirtualTopics(true);
1:         brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.setAdvisorySupport(false);
1:         PolicyMap destPolicyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         destPolicyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(destPolicyMap);
1: 
1:         CompositeTopic route = new CompositeTopic();
1:         route.setName("target");
1:         route.setForwardOnly(true);
1:         route.setConcurrentSend(concurrentSend);
1:         Collection<ActiveMQQueue> routes = new ArrayList<ActiveMQQueue>();
1:         for (int i=0; i<fanoutCount; i++) {
1:             routes.add(new ActiveMQQueue("route." + i));
1:         }
1:         route.setForwardTo(routes);
1:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:         interceptor.setVirtualDestinations(new VirtualDestination[]{route});
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:         brokerService.start();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
0:         connectionFactory.setUseAsyncSend(false);
1:         if (brokerService.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1: 
1:             //with parallel sends and no consumers, concurrentStoreAnd dispatch, which uses a single thread by default
1:             // will stop/impeed write batching. The num threads will need tweaking when consumers are in the mix but may introduce
1:             // order issues
0:             ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:         }
1:     }
1: }
============================================================================