1:e050519: /*
1:fc519e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc519e1:  * contributor license agreements.  See the NOTICE file distributed with
1:fc519e1:  * this work for additional information regarding copyright ownership.
1:fc519e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc519e1:  * (the "License"); you may not use this file except in compliance with
1:fc519e1:  * the License.  You may obtain a copy of the License at
1:fc519e1:  *
1:fc519e1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc519e1:  *
1:fc519e1:  * Unless required by applicable law or agreed to in writing, software
1:fc519e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc519e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc519e1:  * See the License for the specific language governing permissions and
1:fc519e1:  * limitations under the License.
1:fc519e1:  */
1:afe73c1: package org.apache.activemq.usecases;
1:afe73c1: 
1:e050519: import static org.junit.Assert.assertFalse;
1:e050519: import static org.junit.Assert.assertTrue;
1:e050519: 
1:e050519: import java.util.concurrent.CountDownLatch;
1:e050519: import java.util.concurrent.ExecutorService;
1:e050519: import java.util.concurrent.Executors;
1:e050519: import java.util.concurrent.TimeUnit;
1:e050519: import java.util.concurrent.atomic.AtomicBoolean;
1:e050519: 
1:afe73c1: import javax.jms.Connection;
1:cdb38b3: import javax.jms.DeliveryMode;
1:e050519: import javax.jms.JMSException;
1:afe73c1: import javax.jms.Message;
1:afe73c1: import javax.jms.MessageConsumer;
1:afe73c1: import javax.jms.MessageProducer;
1:afe73c1: import javax.jms.Session;
1:afe73c1: 
1:afe73c1: import org.apache.activemq.ActiveMQConnectionFactory;
1:e050519: import org.apache.activemq.ActiveMQSession;
1:afe73c1: import org.apache.activemq.broker.BrokerService;
1:cdb38b3: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:cdb38b3: import org.apache.activemq.broker.region.policy.PolicyMap;
1:afe73c1: import org.apache.activemq.command.ActiveMQTopic;
1:afe73c1: import org.junit.After;
1:afe73c1: import org.junit.Assert;
1:afe73c1: import org.junit.Before;
1:e050519: import org.junit.Rule;
1:afe73c1: import org.junit.Test;
1:e050519: import org.junit.rules.TestName;
1:e050519: import org.slf4j.Logger;
1:e050519: import org.slf4j.LoggerFactory;
1:afe73c1: 
1:afe73c1: public class TopicSubscriptionZeroPrefetchTest {
1:afe73c1: 
1:e050519:     private static final Logger LOG = LoggerFactory.getLogger(TopicSubscriptionZeroPrefetchTest.class);
1:e050519: 
1:e050519:     @Rule
1:e050519:     public TestName name = new TestName();
1:e050519: 
1:afe73c1:     private Connection connection;
1:afe73c1:     private Session session;
1:afe73c1:     private ActiveMQTopic destination;
1:afe73c1:     private MessageProducer producer;
1:afe73c1:     private MessageConsumer consumer;
1:afe73c1:     private BrokerService brokerService;
1:afe73c1: 
1:e050519:     public String getTopicName() {
1:e050519:         return name.getMethodName();
1:e050519:     }
1:e050519: 
1:afe73c1:     @Before
1:afe73c1:     public void setUp() throws Exception {
1:afe73c1: 
1:afe73c1:         brokerService = createBroker();
1:afe73c1: 
1:afe73c1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:afe73c1: 
1:afe73c1:         activeMQConnectionFactory.setWatchTopicAdvisories(true);
1:afe73c1:         connection = activeMQConnectionFactory.createConnection();
1:afe73c1:         connection.setClientID("ClientID-1");
1:afe73c1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e050519:         destination = new ActiveMQTopic(getTopicName());
1:afe73c1:         producer = session.createProducer(destination);
1:afe73c1: 
1:afe73c1:         connection.start();
1:afe73c1:     }
1:afe73c1: 
1:afe73c1:     /*
1:afe73c1:      * test non durable topic subscription with prefetch set to zero
1:afe73c1:      */
1:e050519:     @Test(timeout = 60000)
1:afe73c1:     public void testTopicConsumerPrefetchZero() throws Exception {
1:afe73c1: 
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:afe73c1:         consumer = session.createConsumer(consumerDestination);
1:afe73c1: 
1:afe73c1:         // publish messages
1:afe73c1:         Message txtMessage = session.createTextMessage("M");
1:afe73c1:         producer.send(txtMessage);
1:afe73c1: 
1:afe73c1:         Message consumedMessage = consumer.receiveNoWait();
1:afe73c1: 
1:afe73c1:         Assert.assertNotNull("should have received a message the published message", consumedMessage);
1:afe73c1:     }
1:afe73c1: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroClientAckLoopReceive() throws Exception {
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:ffee8b4:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:ffee8b4:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1:ffee8b4: 
1:ffee8b4:         final int count = 10;
1:e050519:         for (int i = 0; i < count; i++) {
1:e050519:             Message txtMessage = session.createTextMessage("M:" + i);
1:ffee8b4:             producer.send(txtMessage);
1:ffee8b4:         }
1:ffee8b4: 
1:e050519:         for (int i = 0; i < count; i++) {
1:e050519:             Message consumedMessage = consumer.receive();
1:e050519:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:e050519:         }
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroClientAckLoopTimedReceive() throws Exception {
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:e050519:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:e050519:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1:e050519: 
1:e050519:         final int count = 10;
1:e050519:         for (int i = 0; i < count; i++) {
1:e050519:             Message txtMessage = session.createTextMessage("M:" + i);
1:e050519:             producer.send(txtMessage);
1:e050519:         }
1:e050519: 
1:e050519:         for (int i = 0; i < count; i++) {
1:ffee8b4:             Message consumedMessage = consumer.receive(2000);
1:e050519:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:ffee8b4:         }
1:ffee8b4:     }
1:ffee8b4: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroClientAckLoopReceiveNoWait() throws Exception {
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:e050519:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:e050519:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1:e050519: 
1:e050519:         final int count = 10;
1:e050519:         for (int i = 0; i < count; i++) {
1:e050519:             Message txtMessage = session.createTextMessage("M:" + i);
1:e050519:             producer.send(txtMessage);
1:e050519:         }
1:e050519: 
1:e050519:         for (int i = 0; i < count; i++) {
1:e050519:             Message consumedMessage = consumer.receiveNoWait();
1:e050519:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:e050519:         }
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeAutoAck() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.AUTO_ACKNOWLEDGE);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeClientAck() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.CLIENT_ACKNOWLEDGE);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeDupsOk() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.DUPS_OK_ACKNOWLEDGE);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransacted() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.SESSION_TRANSACTED);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransactedComitInBatches() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.SESSION_TRANSACTED);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeIndividual() throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(int ackMode) throws Exception {
1:e050519:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(ackMode, false);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(int ackMode, boolean commitBatch) throws Exception {
1:e050519: 
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:e050519:         Session consumerSession = connection.createSession(ackMode == Session.SESSION_TRANSACTED, ackMode);
1:e050519:         consumer = consumerSession.createConsumer(consumerDestination);
1:e050519: 
1:e050519:         final int MSG_COUNT = 2000;
1:e050519: 
1:e050519:         final AtomicBoolean error = new AtomicBoolean();
1:e050519:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1:e050519: 
1:e050519:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:e050519:         executor.execute(new Runnable() {
1:e050519: 
1:e050519:             @Override
1:e050519:             public void run() {
1:e050519:                 try {
1:e050519:                     for (int i = 0; i < MSG_COUNT; i++) {
1:e050519:                         Message consumedMessage = consumer.receive();
1:e050519:                         if (consumedMessage != null) {
1:e050519:                             done.countDown();
1:e050519:                             consumedMessage.acknowledge();
1:e050519:                             if (ackMode == Session.SESSION_TRANSACTED && commitBatch && ((i + 1) % 50) == 0) {
1:e050519:                                 consumerSession.commit();
1:e050519:                             }
1:e050519:                         }
1:e050519:                     }
1:e050519:                 } catch (Exception ex) {
1:e050519:                     LOG.error("Caught exception during receive: {}", ex);
1:e050519:                     error.set(true);
1:e050519:                 } finally {
1:e050519:                     if (ackMode == Session.SESSION_TRANSACTED) {
1:e050519:                         try {
1:e050519:                             consumerSession.commit();
1:e050519:                         } catch (JMSException e) {
1:e050519:                             LOG.error("Caught exception on commit: {}", e);
1:e050519:                             error.set(true);
1:e050519:                         }
1:e050519:                     }
1:e050519:                 }
1:e050519:             }
1:e050519:         });
1:e050519: 
1:e050519:         for (int i = 0; i < MSG_COUNT; i++) {
1:e050519:             Message txtMessage = session.createTextMessage("M:" + i);
1:e050519:             producer.send(txtMessage);
1:e050519:         }
1:e050519: 
1:e050519:         assertFalse("Should not have gotten any errors", error.get());
1:e050519:         assertTrue("Should have read all messages", done.await(10, TimeUnit.SECONDS));
1:e050519:     }
1:e050519: 
1:afe73c1:     /*
1:afe73c1:      * test durable topic subscription with prefetch zero
1:afe73c1:      */
1:e050519:     @Test(timeout = 60000)
1:afe73c1:     public void testDurableTopicConsumerPrefetchZero() throws Exception {
1:afe73c1: 
1:e050519:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.prefetchSize=0");
1:afe73c1:         consumer = session.createDurableSubscriber(consumerDestination, "mysub1");
1:afe73c1: 
1:afe73c1:         // publish messages
1:afe73c1:         Message txtMessage = session.createTextMessage("M");
1:afe73c1:         producer.send(txtMessage);
1:afe73c1: 
1:afe73c1:         Message consumedMessage = consumer.receive(100);
1:afe73c1: 
1:afe73c1:         Assert.assertNotNull("should have received a message the published message", consumedMessage);
1:afe73c1:     }
1:afe73c1: 
1:cdb38b3:     @Test(timeout = 420000)
1:cdb38b3:     public void testReceiveTimeoutRespectedWithExpiryProcessing() throws Exception {
1:cdb38b3: 
1:cdb38b3:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.prefetchSize=0");
1:cdb38b3: 
1:cdb38b3:         for (int i=0; i<500; i++) {
1:cdb38b3:             consumer = session.createDurableSubscriber(consumerDestination, "mysub-" + i);
1:cdb38b3:             consumer.close();
1:cdb38b3:         }
1:cdb38b3: 
1:cdb38b3:         for (int i=0;i<1000; i++) {
1:cdb38b3:             producer.send(session.createTextMessage("RTR"), DeliveryMode.PERSISTENT, 0, 5000);
1:cdb38b3:         }
1:cdb38b3: 
1:cdb38b3:         consumer = session.createDurableSubscriber(consumerDestination, "mysub3");
1:cdb38b3:         for (int i=0; i<10; i++) {
1:cdb38b3:             long timeStamp = System.currentTimeMillis();
1:cdb38b3:             consumer.receive(1000);
1:cdb38b3:             long duration = System.currentTimeMillis() - timeStamp;
1:cdb38b3:             LOG.info("Duration: " + i + " : " + duration);
1:cdb38b3:             assertTrue("Delay about 500: " + i, duration < 1500);
1:cdb38b3:         }
1:cdb38b3:     }
1:cdb38b3: 
1:afe73c1:     @After
1:afe73c1:     public void tearDown() throws Exception {
1:afe73c1:         consumer.close();
1:afe73c1:         producer.close();
1:afe73c1:         session.close();
1:afe73c1:         connection.close();
1:afe73c1:         brokerService.stop();
1:afe73c1:     }
1:afe73c1: 
1:afe73c1:     // helper method to create a broker with slow consumer advisory turned on
1:afe73c1:     private BrokerService createBroker() throws Exception {
1:afe73c1:         BrokerService broker = new BrokerService();
1:afe73c1:         broker.setBrokerName("localhost");
1:afe73c1:         broker.setUseJmx(false);
1:afe73c1:         broker.setDeleteAllMessagesOnStartup(true);
1:afe73c1:         broker.addConnector("vm://localhost");
1:cdb38b3:         PolicyEntry policyEntry = new PolicyEntry();
1:cdb38b3:         policyEntry.setExpireMessagesPeriod(5000);
1:cdb38b3:         policyEntry.setMaxExpirePageSize(2000);
1:cdb38b3:         policyEntry.setUseCache(false);
1:cdb38b3:         PolicyMap policyMap = new PolicyMap();
1:cdb38b3:         policyMap.setDefaultEntry(policyEntry);
1:cdb38b3:         broker.setDestinationPolicy(policyMap);
1:afe73c1:         broker.start();
1:afe73c1:         broker.waitUntilStarted();
1:afe73c1:         return broker;
1:afe73c1:     }
1:afe73c1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cdb38b3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 420000)
1:     public void testReceiveTimeoutRespectedWithExpiryProcessing() throws Exception {
1: 
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.prefetchSize=0");
1: 
1:         for (int i=0; i<500; i++) {
1:             consumer = session.createDurableSubscriber(consumerDestination, "mysub-" + i);
1:             consumer.close();
1:         }
1: 
1:         for (int i=0;i<1000; i++) {
1:             producer.send(session.createTextMessage("RTR"), DeliveryMode.PERSISTENT, 0, 5000);
1:         }
1: 
1:         consumer = session.createDurableSubscriber(consumerDestination, "mysub3");
1:         for (int i=0; i<10; i++) {
1:             long timeStamp = System.currentTimeMillis();
1:             consumer.receive(1000);
1:             long duration = System.currentTimeMillis() - timeStamp;
1:             LOG.info("Duration: " + i + " : " + duration);
1:             assertTrue("Delay about 500: " + i, duration < 1500);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(5000);
1:         policyEntry.setMaxExpirePageSize(2000);
1:         policyEntry.setUseCache(false);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policyEntry);
1:         broker.setDestinationPolicy(policyMap);
commit:ffee8b4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60000)
0:     public void testTopicConsumerPrefetchZeroClientAckLoop() throws Exception {
0:         ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC_NAME + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1: 
1:         final int count = 10;
0:         for (int i=0;i<count;i++) {
0:             Message txtMessage = session.createTextMessage("M:"+ i);
1:             producer.send(txtMessage);
1:         }
1: 
0:         for (int i=0;i<count;i++) {
1:             Message consumedMessage = consumer.receive(2000);
0:             Assert.assertNotNull("should have received message[" + i +"]", consumedMessage);
1:         }
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e050519
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.JMSException;
1: import org.apache.activemq.ActiveMQSession;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicSubscriptionZeroPrefetchTest.class);
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getTopicName() {
1:         return name.getMethodName();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         destination = new ActiveMQTopic(getTopicName());
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroClientAckLoopReceive() throws Exception {
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         for (int i = 0; i < count; i++) {
1:             Message txtMessage = session.createTextMessage("M:" + i);
1:         for (int i = 0; i < count; i++) {
1:             Message consumedMessage = consumer.receive();
1:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroClientAckLoopTimedReceive() throws Exception {
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1: 
1:         final int count = 10;
1:         for (int i = 0; i < count; i++) {
1:             Message txtMessage = session.createTextMessage("M:" + i);
1:             producer.send(txtMessage);
1:         }
1: 
1:         for (int i = 0; i < count; i++) {
0:             Message consumedMessage = consumer.receive(2000);
1:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroClientAckLoopReceiveNoWait() throws Exception {
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         Session consumerClientAckSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = consumerClientAckSession.createConsumer(consumerDestination);
1: 
1:         final int count = 10;
1:         for (int i = 0; i < count; i++) {
1:             Message txtMessage = session.createTextMessage("M:" + i);
1:             producer.send(txtMessage);
1:         }
1: 
1:         for (int i = 0; i < count; i++) {
1:             Message consumedMessage = consumer.receiveNoWait();
1:             Assert.assertNotNull("should have received message[" + i + "]", consumedMessage);
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeAutoAck() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeClientAck() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeDupsOk() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.DUPS_OK_ACKNOWLEDGE);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransacted() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.SESSION_TRANSACTED);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransactedComitInBatches() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(Session.SESSION_TRANSACTED);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTopicConsumerPrefetchZeroConcurrentProduceConsumeIndividual() throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:     }
1: 
1:     private void doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(int ackMode) throws Exception {
1:         doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(ackMode, false);
1:     }
1: 
1:     private void doTestTopicConsumerPrefetchZeroConcurrentProduceConsume(int ackMode, boolean commitBatch) throws Exception {
1: 
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         Session consumerSession = connection.createSession(ackMode == Session.SESSION_TRANSACTED, ackMode);
1:         consumer = consumerSession.createConsumer(consumerDestination);
1: 
1:         final int MSG_COUNT = 2000;
1: 
1:         final AtomicBoolean error = new AtomicBoolean();
1:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1: 
1:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:         executor.execute(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     for (int i = 0; i < MSG_COUNT; i++) {
1:                         Message consumedMessage = consumer.receive();
1:                         if (consumedMessage != null) {
1:                             done.countDown();
1:                             consumedMessage.acknowledge();
1:                             if (ackMode == Session.SESSION_TRANSACTED && commitBatch && ((i + 1) % 50) == 0) {
1:                                 consumerSession.commit();
1:                             }
1:                         }
1:                     }
1:                 } catch (Exception ex) {
1:                     LOG.error("Caught exception during receive: {}", ex);
1:                     error.set(true);
1:                 } finally {
1:                     if (ackMode == Session.SESSION_TRANSACTED) {
1:                         try {
1:                             consumerSession.commit();
1:                         } catch (JMSException e) {
1:                             LOG.error("Caught exception on commit: {}", e);
1:                             error.set(true);
1:                         }
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             Message txtMessage = session.createTextMessage("M:" + i);
1:             producer.send(txtMessage);
1:         }
1: 
1:         assertFalse("Should not have gotten any errors", error.get());
1:         assertTrue("Should have read all messages", done.await(10, TimeUnit.SECONDS));
1:     }
1: 
1:     @Test(timeout = 60000)
1:         ActiveMQTopic consumerDestination = new ActiveMQTopic(getTopicName() + "?consumer.prefetchSize=0");
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc519e1
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:afe73c1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class TopicSubscriptionZeroPrefetchTest {
1: 
0:     private static final String TOPIC_NAME = "slow.consumer";
1:     private Connection connection;
1:     private Session session;
1:     private ActiveMQTopic destination;
1:     private MessageProducer producer;
1:     private MessageConsumer consumer;
1:     private BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         brokerService = createBroker();
1: 
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1: 
1:         activeMQConnectionFactory.setWatchTopicAdvisories(true);
1:         connection = activeMQConnectionFactory.createConnection();
1:         connection.setClientID("ClientID-1");
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         destination = new ActiveMQTopic(TOPIC_NAME);
1:         producer = session.createProducer(destination);
1: 
1:         connection.start();
1:     }
1: 
1:     /*
1:      * test non durable topic subscription with prefetch set to zero
1:      */
0:     @Test(timeout=60000)
1:     public void testTopicConsumerPrefetchZero() throws Exception {
1: 
0:         ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC_NAME + "?consumer.retroactive=true&consumer.prefetchSize=0");
1:         consumer = session.createConsumer(consumerDestination);
1: 
1:         // publish messages
1:         Message txtMessage = session.createTextMessage("M");
1:         producer.send(txtMessage);
1: 
1:         Message consumedMessage = consumer.receiveNoWait();
1: 
1:         Assert.assertNotNull("should have received a message the published message", consumedMessage);
1:     }
1: 
1:     /*
1:      * test durable topic subscription with prefetch zero
1:      */
0:     @Test(timeout=60000)
1:     public void testDurableTopicConsumerPrefetchZero() throws Exception {
1: 
0:         ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC_NAME + "?consumer.prefetchSize=0");
1:         consumer = session.createDurableSubscriber(consumerDestination, "mysub1");
1: 
1:         // publish messages
1:         Message txtMessage = session.createTextMessage("M");
1:         producer.send(txtMessage);
1: 
1:         Message consumedMessage = consumer.receive(100);
1: 
1:         Assert.assertNotNull("should have received a message the published message", consumedMessage);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         consumer.close();
1:         producer.close();
1:         session.close();
1:         connection.close();
1:         brokerService.stop();
1:     }
1: 
1:     // helper method to create a broker with slow consumer advisory turned on
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("localhost");
1:         broker.setUseJmx(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("vm://localhost");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1:     }
1: }
============================================================================