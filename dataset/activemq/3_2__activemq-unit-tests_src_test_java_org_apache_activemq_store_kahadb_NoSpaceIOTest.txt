1:9e40b91: /**
1:9e40b91:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e40b91:  * contributor license agreements.  See the NOTICE file distributed with
1:9e40b91:  * this work for additional information regarding copyright ownership.
1:9e40b91:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e40b91:  * (the "License"); you may not use this file except in compliance with
1:9e40b91:  * the License.  You may obtain a copy of the License at
1:9e40b91:  *
1:9e40b91:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e40b91:  *
1:9e40b91:  * Unless required by applicable law or agreed to in writing, software
1:9e40b91:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e40b91:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e40b91:  * See the License for the specific language governing permissions and
1:9e40b91:  * limitations under the License.
1:9e40b91:  */
1:9e40b91: package org.apache.activemq.store.kahadb;
1:9e40b91: 
1:9e40b91: import java.io.File;
1:9e40b91: import java.io.RandomAccessFile;
1:9e40b91: import java.util.concurrent.atomic.AtomicLong;
1:9e40b91: import javax.jms.Connection;
1:9e40b91: import javax.jms.JMSException;
1:9e40b91: import javax.jms.MessageConsumer;
1:9e40b91: import javax.jms.MessageProducer;
1:9e40b91: import javax.jms.Session;
1:9e40b91: import javax.jms.TextMessage;
1:9e40b91: import org.apache.activemq.ActiveMQConnectionFactory;
1:9e40b91: import org.apache.activemq.broker.BrokerService;
1:9e40b91: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9e40b91: import org.junit.Ignore;
1:9e40b91: import org.junit.Test;
1:9e40b91: 
1:9e40b91: public class NoSpaceIOTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NoSpaceIOTest.class);
1:9e40b91: 
1:dce325b:     // need an app to input to console in intellij idea
1:dce325b:     public static void main(String[] args) throws Exception {
1:dce325b:        new NoSpaceIOTest().testRunOutOfSpace();
1:dce325b:     }
1:dce325b: 
1:9e40b91:     // handy way to validate some out of space related errors with a usb key
1:9e40b91:     // allow it to run out of space, delete toDelete and see it recover
1:dce325b:     @Ignore("needs small volume, like usb key")
1:dce325b:     @Test
1:9e40b91:     public void testRunOutOfSpace() throws Exception {
1:9e40b91:         BrokerService broker = new BrokerService();
1:9e40b91:         File dataDir = new File("/Volumes/NO NAME/");
1:9e40b91:         File useUpSpace = new File(dataDir, "bigFile");
1:9e40b91:         if (!useUpSpace.exists()) {
1:dce325b:             LOG.info("using up some space...");
1:9e40b91:             RandomAccessFile filler = new RandomAccessFile(useUpSpace, "rw");
1:dce325b:             filler.setLength(1024*1024*1212); // use ~1.xG of 2G (usb) volume
1:dce325b:             filler.close();
1:9e40b91:             File toDelete = new File(dataDir, "toDelete");
1:9e40b91:             filler = new RandomAccessFile(toDelete, "rw");
1:9e40b91:             filler.setLength(1024*1024*32*10); // 10 data files
1:dce325b:             filler.close();
1:9e40b91:         }
1:9e40b91:         broker.setDataDirectoryFile(dataDir);
1:9e40b91:         broker.start();
1:9e40b91:         AtomicLong consumed = new AtomicLong(0);
1:9e40b91:         consume(consumed);
1:9e40b91:         LOG.info("consumed: " + consumed);
1:9e40b91: 
1:9e40b91:         broker.getPersistenceAdapter().checkpoint(true);
1:9e40b91: 
1:9e40b91:         AtomicLong sent = new AtomicLong(0);
1:9e40b91:         try {
1:dce325b:             produce(sent, 200);
1:dce325b:         } catch (Exception expected) {
1:dce325b:             LOG.info("got ex, sent: " + sent);
1:dce325b:         }
1:dce325b:         LOG.info("sent: " + sent);
1:dce325b:         System.out.println("Remove toDelete file and press any key to continue");
1:dce325b:         int read = System.in.read();
1:dce325b:         System.err.println("read:" + read);
1:dce325b: 
1:dce325b:         LOG.info("Trying to send again: " + sent);
1:dce325b:         try {
1:dce325b:             produce(sent, 200);
1:9e40b91:         } catch (Exception expected) {
1:9e40b91:             LOG.info("got ex, sent: " + sent);
1:9e40b91:         }
1:9e40b91:         LOG.info("sent: " + sent);
1:9e40b91:     }
1:9e40b91: 
1:9e40b91:     private void consume(AtomicLong consumed) throws JMSException {
1:9e40b91:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection();
1:dce325b:         try {
1:dce325b:             c.start();
1:dce325b:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:dce325b:             MessageConsumer consumer = s.createConsumer(new ActiveMQQueue("t"));
1:dce325b:             while (consumer.receive(2000) != null) {
1:dce325b:                 consumed.incrementAndGet();
1:dce325b:             }
1:dce325b:         } finally {
1:dce325b:             c.close();
1:9e40b91:         }
1:9e40b91:     }
1:9e40b91: 
1:9e40b91:     private void produce(AtomicLong sent, long toSend) throws JMSException {
1:9e40b91:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection();
1:dce325b:         try {
1:dce325b:             c.start();
1:dce325b:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:dce325b:             MessageProducer producer = s.createProducer(new ActiveMQQueue("t"));
1:dce325b:             TextMessage m = s.createTextMessage();
1:dce325b:             m.setText(String.valueOf(new char[1024*1024]));
1:dce325b:             for (int i=0; i<toSend; i++) {
1:dce325b:                 producer.send(m);
1:dce325b:                 sent.incrementAndGet();
1:dce325b:             }
1:dce325b:         } finally {
1:dce325b:             c.close();
1:9e40b91:         }
1:9e40b91:     }
1:9e40b91: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NoSpaceIOTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:dce325b
/////////////////////////////////////////////////////////////////////////
1:     // need an app to input to console in intellij idea
1:     public static void main(String[] args) throws Exception {
1:        new NoSpaceIOTest().testRunOutOfSpace();
1:     }
1: 
1:     @Ignore("needs small volume, like usb key")
1:     @Test
1:             LOG.info("using up some space...");
1:             filler.setLength(1024*1024*1212); // use ~1.xG of 2G (usb) volume
1:             filler.close();
1:             filler.close();
/////////////////////////////////////////////////////////////////////////
1:             produce(sent, 200);
1:         } catch (Exception expected) {
1:             LOG.info("got ex, sent: " + sent);
1:         }
1:         LOG.info("sent: " + sent);
1:         System.out.println("Remove toDelete file and press any key to continue");
1:         int read = System.in.read();
1:         System.err.println("read:" + read);
1: 
1:         LOG.info("Trying to send again: " + sent);
1:         try {
1:             produce(sent, 200);
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             c.start();
1:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = s.createConsumer(new ActiveMQQueue("t"));
1:             while (consumer.receive(2000) != null) {
1:                 consumed.incrementAndGet();
1:             }
1:         } finally {
1:             c.close();
1:         try {
1:             c.start();
1:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = s.createProducer(new ActiveMQQueue("t"));
1:             TextMessage m = s.createTextMessage();
1:             m.setText(String.valueOf(new char[1024*1024]));
1:             for (int i=0; i<toSend; i++) {
1:                 producer.send(m);
1:                 sent.incrementAndGet();
1:             }
1:         } finally {
1:             c.close();
commit:9e40b91
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.io.File;
1: import java.io.RandomAccessFile;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: public class NoSpaceIOTest {
0:     private static final Log LOG = LogFactory.getLog(NoSpaceIOTest.class);
1: 
1:     // handy way to validate some out of space related errors with a usb key
1:     // allow it to run out of space, delete toDelete and see it recover
0:     @Ignore("needs small volume, like usb key") @Test
1:     public void testRunOutOfSpace() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         File dataDir = new File("/Volumes/NO NAME/");
1:         File useUpSpace = new File(dataDir, "bigFile");
1:         if (!useUpSpace.exists()) {
1:             RandomAccessFile filler = new RandomAccessFile(useUpSpace, "rw");
0:             filler.setLength(1024*1024*1412); // use ~1.5G of 2G (usb) volume
1:             File toDelete = new File(dataDir, "toDelete");
1:             filler = new RandomAccessFile(toDelete, "rw");
1:             filler.setLength(1024*1024*32*10); // 10 data files
1:         }
1:         broker.setDataDirectoryFile(dataDir);
1:         broker.start();
1:         AtomicLong consumed = new AtomicLong(0);
1:         consume(consumed);
1:         LOG.info("consumed: " + consumed);
1: 
1:         broker.getPersistenceAdapter().checkpoint(true);
1: 
1:         AtomicLong sent = new AtomicLong(0);
1:         try {
0:             produce(sent, 100);
1:         } catch (Exception expected) {
1:             LOG.info("got ex, sent: " + sent);
1:         }
1:         LOG.info("sent: " + sent);
1:     }
1: 
1:     private void consume(AtomicLong consumed) throws JMSException {
1:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection();
0:         c.start();
0:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = s.createConsumer(new ActiveMQQueue("t"));
0:         while (consumer.receive(2000) != null) {
0:             consumed.incrementAndGet();
1:         }
1:     }
1: 
1:     private void produce(AtomicLong sent, long toSend) throws JMSException {
1:         Connection c = new ActiveMQConnectionFactory("vm://localhost").createConnection();
0:         c.start();
0:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = s.createProducer(new ActiveMQQueue("t"));
0:         TextMessage m = s.createTextMessage();
0:         m.setText(String.valueOf(new char[1024*1024]));
0:         for (int i=0; i<toSend; i++) {
0:             producer.send(m);
0:             sent.incrementAndGet();
1:         }
1:     }
1: }
============================================================================