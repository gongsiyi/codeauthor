1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.subject;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.activemq.shiro.ConnectionReference;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * A {@code SubjectResolver} that acquires the current Subject from a {@link org.apache.activemq.shiro.ConnectionReference}.
1:f9451e5:  *
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ConnectionSubjectResolver implements SubjectResolver {
1:f9451e5: 
1:f9451e5:     private final SubjectSecurityContext securityContext;
1:f9451e5: 
1:f9451e5:     public ConnectionSubjectResolver(ConnectionContext connCtx) {
1:f9451e5:         if (connCtx == null) {
1:f9451e5:             throw new IllegalArgumentException("ConnectionContext argument cannot be null.");
1:f9451e5:         }
1:f9451e5:         SecurityContext secCtx = connCtx.getSecurityContext();
1:f9451e5:         if (secCtx == null) {
1:f9451e5:             String msg = "There is no SecurityContext available on the ConnectionContext.  It " +
1:f9451e5:                     "is expected that a previous broker in the chain will create the SecurityContext prior to this " +
1:f9451e5:                     "resolver being invoked.  Ensure you have configured the SubjectPlugin and that it is " +
1:f9451e5:                     "configured before all other Shiro-dependent broker filters.";
1:f9451e5:             throw new IllegalArgumentException(msg);
1:f9451e5:         }
1:f9451e5:         if (!(secCtx instanceof SubjectSecurityContext)) {
1:f9451e5:             String msg = "The specified SecurityContext is expected to be a " + SubjectSecurityContext.class.getName() +
1:f9451e5:                     " instance.  The current instance's class: " + secCtx.getClass().getName();
1:f9451e5:             throw new IllegalArgumentException(msg);
1:f9451e5:         }
1:f9451e5:         this.securityContext = (SubjectSecurityContext) secCtx;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public ConnectionSubjectResolver(ConnectionReference conn) {
1:f9451e5:         this(conn.getConnectionContext());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Subject getSubject() {
1:f9451e5:         Subject subject = securityContext.getSubject();
1:f9451e5:         if (subject != null) {
1:f9451e5:             return subject;
1:f9451e5:         }
1:f9451e5:         String msg = "There is no Subject available in the SecurityContext.  Ensure " +
1:f9451e5:                 "that the SubjectPlugin is configured before all other Shiro-dependent broker filters.";
1:f9451e5:         throw new IllegalStateException(msg);
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.subject;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.shiro.ConnectionReference;
1: import org.apache.shiro.subject.Subject;
1: 
1: /**
1:  * A {@code SubjectResolver} that acquires the current Subject from a {@link org.apache.activemq.shiro.ConnectionReference}.
1:  *
1:  * @since 5.10.0
1:  */
1: public class ConnectionSubjectResolver implements SubjectResolver {
1: 
1:     private final SubjectSecurityContext securityContext;
1: 
1:     public ConnectionSubjectResolver(ConnectionContext connCtx) {
1:         if (connCtx == null) {
1:             throw new IllegalArgumentException("ConnectionContext argument cannot be null.");
1:         }
1:         SecurityContext secCtx = connCtx.getSecurityContext();
1:         if (secCtx == null) {
1:             String msg = "There is no SecurityContext available on the ConnectionContext.  It " +
1:                     "is expected that a previous broker in the chain will create the SecurityContext prior to this " +
1:                     "resolver being invoked.  Ensure you have configured the SubjectPlugin and that it is " +
1:                     "configured before all other Shiro-dependent broker filters.";
1:             throw new IllegalArgumentException(msg);
1:         }
1:         if (!(secCtx instanceof SubjectSecurityContext)) {
1:             String msg = "The specified SecurityContext is expected to be a " + SubjectSecurityContext.class.getName() +
1:                     " instance.  The current instance's class: " + secCtx.getClass().getName();
1:             throw new IllegalArgumentException(msg);
1:         }
1:         this.securityContext = (SubjectSecurityContext) secCtx;
1:     }
1: 
1:     public ConnectionSubjectResolver(ConnectionReference conn) {
1:         this(conn.getConnectionContext());
1:     }
1: 
1:     @Override
1:     public Subject getSubject() {
1:         Subject subject = securityContext.getSubject();
1:         if (subject != null) {
1:             return subject;
1:         }
1:         String msg = "There is no Subject available in the SecurityContext.  Ensure " +
1:                 "that the SubjectPlugin is configured before all other Shiro-dependent broker filters.";
1:         throw new IllegalStateException(msg);
1:     }
1: }
============================================================================