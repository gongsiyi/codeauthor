1:5f96839: /**
1:5f96839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f96839:  * contributor license agreements.  See the NOTICE file distributed with
1:5f96839:  * this work for additional information regarding copyright ownership.
1:5f96839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f96839:  * (the "License"); you may not use this file except in compliance with
1:5f96839:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:5f96839:  *      http://www.apache.org/licenses/LICENSE-2.0
2:5f96839:  *
1:5f96839:  * Unless required by applicable law or agreed to in writing, software
1:5f96839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f96839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f96839:  * See the License for the specific language governing permissions and
1:5f96839:  * limitations under the License.
1:5f96839:  */
1:5f96839: package org.apache.activemq.camel.component;
1:88f6058: 
1:5f96839: import org.apache.camel.CamelContext;
1:5f96839: import org.apache.camel.builder.RouteBuilder;
1:5e6f8a1: 
1:5f96839: import org.apache.camel.component.jms.JmsEndpoint;
1:5f96839: import org.apache.camel.component.mock.MockEndpoint;
1:5e6f8a1: import org.apache.camel.test.junit4.CamelTestSupport;
1:5e6f8a1: import org.junit.Before;
1:5e6f8a1: import org.junit.Test;
1:5e6f8a1: import org.springframework.jms.connection.JmsTransactionManager;
1:5e6f8a1: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
5:5f96839: 
1:5f96839: /**
1:88f6058:  *
1:5f96839:  */
1:5e6f8a1: public class ActiveMQRouteTest extends CamelTestSupport {
1:548403a:     private static final String EXPECTED_BODY = "Hello there!"; 
1:5f96839:     protected MockEndpoint resultEndpoint;
1:5f96839:     protected String startEndpointUri = "activemq:queue:test.a";
1:5f96839: 
2:88f6058:     @Test
1:5f96839:     public void testJmsRouteWithTextMessage() throws Exception {
1:548403a:         resultEndpoint.expectedBodiesReceived(EXPECTED_BODY);
1:5f96839:         resultEndpoint.message(0).header("cheese").isEqualTo(123);
1:5f96839: 
1:548403a:         sendExchange(EXPECTED_BODY);
1:5f96839: 
1:5f96839:         resultEndpoint.assertIsSatisfied();
1:88f6058:     }
1:88f6058: 
1:5f96839:     protected void sendExchange(final Object expectedBody) {
1:5f96839:         template.sendBodyAndHeader(startEndpointUri, expectedBody, "cheese", 123);
1:88f6058:     }
1:5f96839: 
1:5e6f8a1:     @Before
1:5e6f8a1:     public void setUp() throws Exception {
1:5f96839:         super.setUp();
1:5f96839: 
1:5f96839:         resultEndpoint = (MockEndpoint) context.getEndpoint("mock:result");
1:88f6058:     }
1:5f96839: 
1:5f96839:     protected CamelContext createCamelContext() throws Exception {
1:5f96839:         CamelContext camelContext = super.createCamelContext();
1:5f96839: 
1:5f96839:         // START SNIPPET: example
1:5f96839:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:5f96839:         // END SNIPPET: example
1:5f96839: 
1:5f96839:         return camelContext;
1:88f6058:     }
1:88f6058: 
1:5f96839:     protected RouteBuilder createRouteBuilder() throws Exception {
1:5f96839:         return new RouteBuilder() {
2:88f6058:             public void configure() throws Exception {
1:5f96839:                 from(startEndpointUri).to("activemq:queue:test.b");
1:5f96839:                 from("activemq:queue:test.b").to("mock:result");
1:5f96839: 
1:5f96839:                 JmsEndpoint endpoint1 = (JmsEndpoint) endpoint("activemq:topic:quote.IONA");
1:54d24ad:                 endpoint1.getConfiguration().setTransactionManager(new JmsTransactionManager());
2:5f96839:                 endpoint1.getConfiguration().setTransacted(true);
1:5f96839:                 from(endpoint1).to("mock:transactedClient");
1:5f96839: 
1:5f96839:                 JmsEndpoint endpoint2 = (JmsEndpoint) endpoint("activemq:topic:quote.IONA");
1:54d24ad:                 endpoint2.getConfiguration().setTransacted(false);
1:5f96839:                 from(endpoint2).to("mock:nonTrasnactedClient");
1:88f6058:             }
2:88f6058:         };
1:88f6058:     }
7:5f96839: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:548403a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String EXPECTED_BODY = "Hello there!"; 
1:         resultEndpoint.expectedBodiesReceived(EXPECTED_BODY);
1:         sendExchange(EXPECTED_BODY);
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:88f6058
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void testInvalidDestinationOptionOnConsumer() throws Exception {
0:         getMockEndpoint("mock:result").expectedMessageCount(0);
0:         assertMockEndpointsSatisfied(1, TimeUnit.SECONDS);
0:         try {
0:             new RouteBuilder() {
1:                 public void configure() throws Exception {
0:                     from("activemq:queue:foo?destination.consumer.exclusive=true&destination.consumer.unknown=foo")
0:                         .to("mock:result");
1:                 }
1:             };
0:         } catch (Exception e) {
0:             fail("Should not have accepted bad destination options.");
1:         }
1:     }
1: 
1:     @Test
0:     public void testInvalidDestinationOptionOnProducer() throws Exception {
0:         try {
0:             new RouteBuilder() {
1:                 public void configure() throws Exception {
0:                     from("activemq:queue:foo")
0:                         .to("activemq:queue:bar?destination.producer.exclusive=true");
1:                 }
1:             };
0:         } catch (Exception e) {
0:             fail("Should not have accepted bad destination options.");
1:         }
1:     }
1: 
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.camel.test.junit4.CamelTestSupport;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.springframework.jms.connection.JmsTransactionManager;
1: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1: public class ActiveMQRouteTest extends CamelTestSupport {
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:54d24ad
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.jms.connection.JmsTransactionManager;
/////////////////////////////////////////////////////////////////////////
1:                 endpoint1.getConfiguration().setTransactionManager(new JmsTransactionManager());
1:                 endpoint2.getConfiguration().setTransacted(false);
commit:5f96839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import org.apache.camel.CamelContext;
0: import org.apache.camel.ContextTestSupport;
1: import org.apache.camel.builder.RouteBuilder;
0: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1: import org.apache.camel.component.jms.JmsEndpoint;
1: import org.apache.camel.component.mock.MockEndpoint;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class ActiveMQRouteTest extends ContextTestSupport {
1:     protected MockEndpoint resultEndpoint;
1:     protected String startEndpointUri = "activemq:queue:test.a";
1: 
1:     public void testJmsRouteWithTextMessage() throws Exception {
0:         String expectedBody = "Hello there!";
1: 
0:         resultEndpoint.expectedBodiesReceived(expectedBody);
1:         resultEndpoint.message(0).header("cheese").isEqualTo(123);
1: 
0:         sendExchange(expectedBody);
1: 
1:         resultEndpoint.assertIsSatisfied();
1:     }
1: 
1:     protected void sendExchange(final Object expectedBody) {
1:         template.sendBodyAndHeader(startEndpointUri, expectedBody, "cheese", 123);
1:     }
1: 
0:     @Override
0:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         resultEndpoint = (MockEndpoint) context.getEndpoint("mock:result");
1:     }
1: 
1:     protected CamelContext createCamelContext() throws Exception {
1:         CamelContext camelContext = super.createCamelContext();
1: 
1:         // START SNIPPET: example
1:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:         // END SNIPPET: example
1: 
1:         return camelContext;
1:     }
1: 
1:     protected RouteBuilder createRouteBuilder() throws Exception {
1:         return new RouteBuilder() {
0:             public void configure() throws Exception {
1:                 from(startEndpointUri).to("activemq:queue:test.b");
1:                 from("activemq:queue:test.b").to("mock:result");
1: 
1:                 JmsEndpoint endpoint1 = (JmsEndpoint) endpoint("activemq:topic:quote.IONA");
1:                 endpoint1.getConfiguration().setTransacted(true);
1:                 from(endpoint1).to("mock:transactedClient");
1: 
1:                 JmsEndpoint endpoint2 = (JmsEndpoint) endpoint("activemq:topic:quote.IONA");
1:                 endpoint1.getConfiguration().setTransacted(true);
1:                 from(endpoint2).to("mock:nonTrasnactedClient");
1:             }
0:         };
1:     }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
============================================================================