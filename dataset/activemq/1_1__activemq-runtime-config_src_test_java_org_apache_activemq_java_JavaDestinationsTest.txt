1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.java;
1:43c3cae: 
1:43c3cae: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:43c3cae: import java.util.Arrays;
1:43c3cae: import java.util.concurrent.TimeUnit;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.RuntimeConfigTestSupport;
1:43c3cae: import org.apache.activemq.broker.BrokerPlugin;
1:43c3cae: import org.apache.activemq.broker.BrokerService;
1:43c3cae: import org.apache.activemq.command.ActiveMQDestination;
1:43c3cae: import org.apache.activemq.command.ActiveMQQueue;
1:43c3cae: import org.apache.activemq.command.ActiveMQTopic;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1:43c3cae: import org.apache.activemq.util.Wait;
1:43c3cae: import org.junit.Test;
1:43c3cae: import org.slf4j.Logger;
1:43c3cae: import org.slf4j.LoggerFactory;
1:43c3cae: 
1:43c3cae: public class JavaDestinationsTest extends RuntimeConfigTestSupport {
1:43c3cae:     public static final Logger LOG = LoggerFactory.getLogger(JavaDestinationsTest.class);
1:43c3cae: 
1:43c3cae:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1:43c3cae: 
1:43c3cae:     public void startBroker(BrokerService brokerService) throws Exception {
1:43c3cae:         this.brokerService = brokerService;
1:43c3cae:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:43c3cae:         brokerService.setPersistent(false);
1:43c3cae:         brokerService.start();
1:43c3cae:         brokerService.waitUntilStarted();
1:43c3cae: 
1:43c3cae:         javaConfigBroker =
1:43c3cae:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testMod() throws Exception {
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setDestinations(new ActiveMQDestination[] {new ActiveMQQueue("ORIGINAL")});
1:43c3cae:         startBroker(brokerService);
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae:         printDestinations();
1:43c3cae:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:43c3cae: 
1:43c3cae:         LOG.info("Adding destinations");
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setDestinations(new ActiveMQDestination[] {
1:43c3cae:                 new ActiveMQTopic("BEFORE"), new ActiveMQQueue("ORIGINAL"), new ActiveMQQueue("AFTER")});
1:43c3cae: 
1:43c3cae:         printDestinations();
1:43c3cae: 
1:43c3cae:         assertTrue("contains destinations", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:43c3cae:             public boolean isSatisified() throws Exception {
1:43c3cae:                 return containsDestination(new ActiveMQQueue("ORIGINAL"))
1:43c3cae:                         && containsDestination(new ActiveMQTopic("BEFORE"))
1:43c3cae:                         && containsDestination(new ActiveMQQueue("AFTER"));
1:43c3cae:             }
1:43c3cae:         }, TimeUnit.MILLISECONDS.convert(SLEEP, TimeUnit.SECONDS)));
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         LOG.info("Removing destinations");
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setDestinations(new ActiveMQDestination[] {
1:43c3cae:                 new ActiveMQTopic("BEFORE"), new ActiveMQQueue("AFTER")});
1:43c3cae:         printDestinations();
1:43c3cae:         assertTrue("contains destinations", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:43c3cae:             public boolean isSatisified() throws Exception {
1:43c3cae:                 return containsDestination(new ActiveMQQueue("ORIGINAL"))
1:43c3cae:                         && containsDestination(new ActiveMQTopic("BEFORE"))
1:43c3cae:                         && containsDestination(new ActiveMQQueue("AFTER"));
1:43c3cae:             }
1:43c3cae:         }, TimeUnit.MILLISECONDS.convert(SLEEP, TimeUnit.SECONDS)));
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:43c3cae:         return Arrays.asList(brokerService.getRegionBroker().getDestinations()).contains(destination);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void printDestinations() throws Exception {
1:43c3cae:         ActiveMQDestination[] destinations = brokerService.getRegionBroker().getDestinations();
1:43c3cae:         for (ActiveMQDestination destination : destinations) {
1:43c3cae:             LOG.info("Broker destination: " + destination.toString());
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.java;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.RuntimeConfigTestSupport;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JavaDestinationsTest extends RuntimeConfigTestSupport {
1:     public static final Logger LOG = LoggerFactory.getLogger(JavaDestinationsTest.class);
1: 
1:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1: 
1:     public void startBroker(BrokerService brokerService) throws Exception {
1:         this.brokerService = brokerService;
1:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         javaConfigBroker =
1:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:     }
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDestinations(new ActiveMQDestination[] {new ActiveMQQueue("ORIGINAL")});
1:         startBroker(brokerService);
1: 
1: 
1:         assertTrue("broker alive", brokerService.isStarted());
1:         printDestinations();
1:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1: 
1:         LOG.info("Adding destinations");
1: 
1:         //apply new config
1:         javaConfigBroker.setDestinations(new ActiveMQDestination[] {
1:                 new ActiveMQTopic("BEFORE"), new ActiveMQQueue("ORIGINAL"), new ActiveMQQueue("AFTER")});
1: 
1:         printDestinations();
1: 
1:         assertTrue("contains destinations", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return containsDestination(new ActiveMQQueue("ORIGINAL"))
1:                         && containsDestination(new ActiveMQTopic("BEFORE"))
1:                         && containsDestination(new ActiveMQQueue("AFTER"));
1:             }
1:         }, TimeUnit.MILLISECONDS.convert(SLEEP, TimeUnit.SECONDS)));
1: 
1: 
1:         LOG.info("Removing destinations");
1:         //apply new config
1:         javaConfigBroker.setDestinations(new ActiveMQDestination[] {
1:                 new ActiveMQTopic("BEFORE"), new ActiveMQQueue("AFTER")});
1:         printDestinations();
1:         assertTrue("contains destinations", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return containsDestination(new ActiveMQQueue("ORIGINAL"))
1:                         && containsDestination(new ActiveMQTopic("BEFORE"))
1:                         && containsDestination(new ActiveMQQueue("AFTER"));
1:             }
1:         }, TimeUnit.MILLISECONDS.convert(SLEEP, TimeUnit.SECONDS)));
1:     }
1: 
1:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:         return Arrays.asList(brokerService.getRegionBroker().getDestinations()).contains(destination);
1:     }
1: 
1:     protected void printDestinations() throws Exception {
1:         ActiveMQDestination[] destinations = brokerService.getRegionBroker().getDestinations();
1:         for (ActiveMQDestination destination : destinations) {
1:             LOG.info("Broker destination: " + destination.toString());
1:         }
1:     }
1: }
============================================================================