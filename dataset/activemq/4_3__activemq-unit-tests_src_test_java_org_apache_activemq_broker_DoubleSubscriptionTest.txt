1:e8c8abc: /**
1:e8c8abc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e8c8abc:  * contributor license agreements.  See the NOTICE file distributed with
1:e8c8abc:  * this work for additional information regarding copyright ownership.
1:e8c8abc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e8c8abc:  * (the "License"); you may not use this file except in compliance with
1:e8c8abc:  * the License.  You may obtain a copy of the License at
2:e8c8abc:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e8c8abc:  *
1:e8c8abc:  * Unless required by applicable law or agreed to in writing, software
1:e8c8abc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e8c8abc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e8c8abc:  * See the License for the specific language governing permissions and
1:e8c8abc:  * limitations under the License.
1:e8c8abc:  */
1:e8c8abc: package org.apache.activemq.broker;
2:e8c8abc: 
1:e8c8abc: import javax.jms.DeliveryMode;
1:36689be: import javax.jms.InvalidClientIDException;
1:230a86c: 
1:e8c8abc: import junit.framework.Test;
1:e8c8abc: import org.apache.activemq.command.ActiveMQDestination;
1:e8c8abc: import org.apache.activemq.command.ActiveMQQueue;
1:e8c8abc: import org.apache.activemq.command.ConnectionInfo;
1:e8c8abc: import org.apache.activemq.command.ConsumerInfo;
1:e8c8abc: import org.apache.activemq.command.Message;
1:e8c8abc: import org.apache.activemq.command.MessageAck;
1:e8c8abc: import org.apache.activemq.command.ProducerInfo;
1:e8c8abc: import org.apache.activemq.command.SessionInfo;
1:e8c8abc: import org.apache.activemq.network.NetworkTestSupport;
1:e8c8abc: 
1:e8c8abc: /**
1:230a86c:  * Pretend to be an abusive client that sends multiple identical ConsumerInfo
1:230a86c:  * commands and make sure the broker doesn't stall because of it.
1:e8c8abc:  */
1:e8c8abc: 
1:e8c8abc: public class DoubleSubscriptionTest extends NetworkTestSupport {
1:e8c8abc: 
1:e8c8abc:     public ActiveMQDestination destination;
1:e8c8abc:     public int deliveryMode;
1:e8c8abc: 
1:e8c8abc:     private String remoteURI = "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:e8c8abc: 
1:e8c8abc:     public static Test suite() {
1:e8c8abc:         return suite(DoubleSubscriptionTest.class);
1:e8c8abc:     }
1:e8c8abc: 
1:e8c8abc:     public static void main(String[] args) {
1:e8c8abc:         junit.textui.TestRunner.run(suite());
1:e8c8abc:     }
1:e8c8abc: 
1:e8c8abc:     public void initCombosForTestDoubleSubscription() {
1:f812e34:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQQueue("TEST")});
1:e8c8abc:     }
1:230a86c: 
1:e8c8abc:     public void testDoubleSubscription() throws Exception {
1:e8c8abc: 
1:e8c8abc:         // Start a normal consumer on the remote broker
1:e8c8abc:         StubConnection connection1 = createRemoteConnection();
1:e8c8abc:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:e8c8abc:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:e8c8abc:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
2:e8c8abc:         connection1.send(connectionInfo1);
2:e8c8abc:         connection1.send(sessionInfo1);
2:e8c8abc:         connection1.request(consumerInfo1);
1:e8c8abc: 
1:e8c8abc:         // Start a normal producer on a remote broker
1:e8c8abc:         StubConnection connection2 = createRemoteConnection();
1:e8c8abc:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:e8c8abc:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:e8c8abc:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:e8c8abc:         connection2.send(connectionInfo2);
1:e8c8abc:         connection2.send(sessionInfo2);
1:e8c8abc:         connection2.request(producerInfo2);
1:e8c8abc: 
1:e8c8abc:         // Send a message to make sure the basics are working
1:e8c8abc:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1:e8c8abc: 
1:e8c8abc:         Message m1 = receiveMessage(connection1);
1:e8c8abc:         assertNotNull(m1);
1:e8c8abc:         assertNoMessagesLeft(connection1);
1:e8c8abc: 
1:e8c8abc:         connection1.send(createAck(consumerInfo1, m1, 1, MessageAck.STANDARD_ACK_TYPE));
1:e8c8abc: 
1:e8c8abc:         // Send a message to sit on the broker while we mess with it
1:e8c8abc:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1:e8c8abc: 
1:230a86c:         // Now we're going to resend the same consumer commands again and see if
1:230a86c:         // the broker
1:e8c8abc:         // can handle it.
1:36689be:         try {
1:36689be:             connection1.send(connectionInfo1);
1:36689be:             connection1.send(sessionInfo1);
1:36689be:             connection1.request(consumerInfo1);
1:36689be:         } catch (InvalidClientIDException expected) {
1:36689be:             // //AMQ-6561 - delayed stop for all exceptions on addConnection
1:36689be:         }
1:e8c8abc:         // After this there should be 2 messages on the broker...
1:e8c8abc:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1:e8c8abc: 
1:e8c8abc:         // ... let's start a fresh consumer...
1:e8c8abc:         connection1.stop();
1:e8c8abc:         StubConnection connection3 = createRemoteConnection();
1:e8c8abc:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:e8c8abc:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:e8c8abc:         ConsumerInfo consumerInfo3 = createConsumerInfo(sessionInfo3, destination);
1:e8c8abc:         connection3.send(connectionInfo3);
1:e8c8abc:         connection3.send(sessionInfo3);
1:e8c8abc:         connection3.request(consumerInfo3);
1:e8c8abc: 
1:e8c8abc:         // ... and then grab the 2 that should be there.
1:e8c8abc:         assertNotNull(receiveMessage(connection3));
1:e8c8abc:         assertNotNull(receiveMessage(connection3));
1:e8c8abc:         assertNoMessagesLeft(connection3);
1:e8c8abc:     }
1:e8c8abc: 
1:e8c8abc:     protected String getRemoteURI() {
1:e8c8abc:         return remoteURI;
1:e8c8abc:     }
1:e8c8abc: 
1:e8c8abc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:36689be
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidClientIDException;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             connection1.send(connectionInfo1);
1:             connection1.send(sessionInfo1);
1:             connection1.request(consumerInfo1);
1:         } catch (InvalidClientIDException expected) {
1:             // //AMQ-6561 - delayed stop for all exceptions on addConnection
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQQueue("TEST")});
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * Pretend to be an abusive client that sends multiple identical ConsumerInfo
1:  * commands and make sure the broker doesn't stall because of it.
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQQueue("TEST"),});
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Now we're going to resend the same consumer commands again and see if
1:         // the broker
author:James Strachan
-------------------------------------------------------------------------------
commit:e8c8abc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.DeliveryMode;
1: import junit.framework.Test;
0: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.network.NetworkTestSupport;
1: 
1: /**
0:  * Pretend to be an abusive client that sends multiple
0:  * identical ConsumerInfo commands and make sure the
0:  * broker doesn't stall because of it.
1:  */
1: 
1: public class DoubleSubscriptionTest extends NetworkTestSupport {
1: 
1:     public ActiveMQDestination destination;
1:     public int deliveryMode;
1: 
1:     private String remoteURI = "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1: 
1:     public static Test suite() {
1:         return suite(DoubleSubscriptionTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     public void initCombosForTestDoubleSubscription() {
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQQueue("TEST"), });
1:     }
1:     public void testDoubleSubscription() throws Exception {
1: 
1:         // Start a normal consumer on the remote broker
1:         StubConnection connection1 = createRemoteConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // Start a normal producer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.request(producerInfo2);
1: 
1:         // Send a message to make sure the basics are working
1:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1: 
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNoMessagesLeft(connection1);
1: 
1:         connection1.send(createAck(consumerInfo1, m1, 1, MessageAck.STANDARD_ACK_TYPE));
1: 
1:         // Send a message to sit on the broker while we mess with it
1:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1: 
0:         // Now we're going to resend the same consumer commands again and see if the broker
1:         // can handle it.
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // After this there should be 2 messages on the broker...
1:         connection2.request(createMessage(producerInfo2, destination, DeliveryMode.PERSISTENT));
1: 
1:         // ... let's start a fresh consumer...
1:         connection1.stop();
1:         StubConnection connection3 = createRemoteConnection();
1:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:         ConsumerInfo consumerInfo3 = createConsumerInfo(sessionInfo3, destination);
1:         connection3.send(connectionInfo3);
1:         connection3.send(sessionInfo3);
1:         connection3.request(consumerInfo3);
1: 
1:         // ... and then grab the 2 that should be there.
1:         assertNotNull(receiveMessage(connection3));
1:         assertNotNull(receiveMessage(connection3));
1:         assertNoMessagesLeft(connection3);
1:     }
1: 
1:     protected String getRemoteURI() {
1:         return remoteURI;
1:     }
1: 
1: }
============================================================================