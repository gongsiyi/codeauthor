1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
3:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * The SimpleQueueSender class consists only of a main method,
1:d29ca2a:  * which sends several messages to a queue.
1:d29ca2a:  *
1:d29ca2a:  * Run this program in conjunction with SimpleQueueReceiver.
1:d29ca2a:  * Specify a queue name on the command line when you run the
1:d29ca2a:  * program.  By default, the program sends one message.  Specify
1:d29ca2a:  * a number after the queue name to send that number of messages.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.demo;
1:d29ca2a: 
1:d29ca2a: // START SNIPPET: demo
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueConnection;
1:d29ca2a: import javax.jms.QueueConnectionFactory;
1:d29ca2a: import javax.jms.QueueSender;
1:d29ca2a: import javax.jms.QueueSession;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.naming.Context;
1:d29ca2a: import javax.naming.InitialContext;
1:d29ca2a: import javax.naming.NamingException;
1:74a7a8b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:933eb2f: public final class SimpleQueueSender {
1:933eb2f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleQueueSender.class);
1:933eb2f: 
1:933eb2f:     private SimpleQueueSender() {
1:933eb2f:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Main method.
1:74a7a8b:      * 
1:74a7a8b:      * @param args the queue used by the example and, optionally, the number of
1:74a7a8b:      *                messages to send
1:d29ca2a:      */
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         String queueName = null;
1:d29ca2a:         Context jndiContext = null;
1:d29ca2a:         QueueConnectionFactory queueConnectionFactory = null;
1:d29ca2a:         QueueConnection queueConnection = null;
1:d29ca2a:         QueueSession queueSession = null;
1:d29ca2a:         Queue queue = null;
1:d29ca2a:         QueueSender queueSender = null;
1:d29ca2a:         TextMessage message = null;
1:fc00993:         final int numMsgs;
1:d29ca2a: 
1:d29ca2a:         if ((args.length < 1) || (args.length > 2)) {
1:fc00993:             LOG.info("Usage: java SimpleQueueSender " + "<queue-name> [<number-of-messages>]");
1:d29ca2a:             System.exit(1);
7:d29ca2a:         }
1:d29ca2a:         queueName = args[0];
1:fc00993:         LOG.info("Queue name is " + queueName);
1:d29ca2a:         if (args.length == 2) {
1:fc00993:             numMsgs = (new Integer(args[1])).intValue();
1:74a7a8b:         } else {
1:fc00993:             numMsgs = 1;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:74a7a8b:          * Create a JNDI API InitialContext object if none exists yet.
1:d29ca2a:          */
1:d29ca2a:         try {
1:d29ca2a:             jndiContext = new InitialContext();
1:74a7a8b:         } catch (NamingException e) {
1:fc00993:             LOG.info("Could not create JNDI API context: " + e.toString());
1:d29ca2a:             System.exit(1);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:74a7a8b:          * Look up connection factory and queue. If either does not exist, exit.
1:d29ca2a:          */
1:d29ca2a:         try {
1:74a7a8b:             queueConnectionFactory = (QueueConnectionFactory)jndiContext.lookup("QueueConnectionFactory");
1:74a7a8b:             queue = (Queue)jndiContext.lookup(queueName);
1:74a7a8b:         } catch (NamingException e) {
1:fc00993:             LOG.info("JNDI API lookup failed: " + e);
1:d29ca2a:             System.exit(1);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:74a7a8b:          * Create connection. Create session from connection; false means
1:74a7a8b:          * session is not transacted. Create sender and text message. Send
1:74a7a8b:          * messages, varying text slightly. Send end-of-messages message.
1:d29ca2a:          * Finally, close connection.
1:d29ca2a:          */
1:d29ca2a:         try {
1:d29ca2a:             queueConnection = queueConnectionFactory.createQueueConnection();
1:d29ca2a:             queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:             queueSender = queueSession.createSender(queue);
1:d29ca2a:             message = queueSession.createTextMessage();
1:fc00993:             for (int i = 0; i < numMsgs; i++) {
1:d29ca2a:                 message.setText("This is message " + (i + 1));
1:fc00993:                 LOG.info("Sending message: " + message.getText());
1:d29ca2a:                 queueSender.send(message);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             /*
1:74a7a8b:              * Send a non-text control message indicating end of messages.
1:d29ca2a:              */
1:d29ca2a:             queueSender.send(queueSession.createMessage());
1:74a7a8b:         } catch (JMSException e) {
1:fc00993:             LOG.info("Exception occurred: " + e.toString());
1:74a7a8b:         } finally {
1:d29ca2a:             if (queueConnection != null) {
1:d29ca2a:                 try {
1:d29ca2a:                     queueConnection.close();
1:74a7a8b:                 } catch (JMSException e) {
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
1:d29ca2a: 
1:d29ca2a: // END SNIPPET: demo
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleQueueSender.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public final class SimpleQueueSender {
1: 
0:     private static final Log LOG = LogFactory.getLog(SimpleQueueSender.class);
1: 
1:     private SimpleQueueSender() {
1:     }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(SimpleQueueSender.class);
/////////////////////////////////////////////////////////////////////////
1:         final int numMsgs;
1:             LOG.info("Usage: java SimpleQueueSender " + "<queue-name> [<number-of-messages>]");
1:         LOG.info("Queue name is " + queueName);
1:             numMsgs = (new Integer(args[1])).intValue();
1:             numMsgs = 1;
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Could not create JNDI API context: " + e.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("JNDI API lookup failed: " + e);
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < numMsgs; i++) {
1:                 LOG.info("Sending message: " + message.getText());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Exception occurred: " + e.toString());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(SimpleQueueSender.class);
1:      * 
1:      * @param args the queue used by the example and, optionally, the number of
1:      *                messages to send
/////////////////////////////////////////////////////////////////////////
0:             log.info("Usage: java SimpleQueueSender " + "<queue-name> [<number-of-messages>]");
1:         } else {
1:          * Create a JNDI API InitialContext object if none exists yet.
1:         } catch (NamingException e) {
1:          * Look up connection factory and queue. If either does not exist, exit.
1:             queueConnectionFactory = (QueueConnectionFactory)jndiContext.lookup("QueueConnectionFactory");
1:             queue = (Queue)jndiContext.lookup(queueName);
1:         } catch (NamingException e) {
1:          * Create connection. Create session from connection; false means
1:          * session is not transacted. Create sender and text message. Send
1:          * messages, varying text slightly. Send end-of-messages message.
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Sending message: " + message.getText());
1:              * Send a non-text control message indicating end of messages.
1:         } catch (JMSException e) {
0:             log.info("Exception occurred: " + e.toString());
1:         } finally {
1:                 } catch (JMSException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: /**
1:  * The SimpleQueueSender class consists only of a main method,
1:  * which sends several messages to a queue.
1:  *
1:  * Run this program in conjunction with SimpleQueueReceiver.
1:  * Specify a queue name on the command line when you run the
1:  * program.  By default, the program sends one message.  Specify
1:  * a number after the queue name to send that number of messages.
1:  */
1: package org.apache.activemq.demo;
1: 
1: // START SNIPPET: demo
1: 
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
0: public class SimpleQueueSender {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(SimpleQueueSender.class);
1: 
1:     /**
1:      * Main method.
1:      *
0:      * @param args the queue used by the example and,
0:      *             optionally, the number of messages to send
1:      */
1:     public static void main(String[] args) {
1:         String queueName = null;
1:         Context jndiContext = null;
1:         QueueConnectionFactory queueConnectionFactory = null;
1:         QueueConnection queueConnection = null;
1:         QueueSession queueSession = null;
1:         Queue queue = null;
1:         QueueSender queueSender = null;
1:         TextMessage message = null;
0:         final int NUM_MSGS;
1: 
1:         if ((args.length < 1) || (args.length > 2)) {
0:             log.info("Usage: java SimpleQueueSender " +
0:                     "<queue-name> [<number-of-messages>]");
1:             System.exit(1);
1:         }
1:         queueName = args[0];
0:         log.info("Queue name is " + queueName);
1:         if (args.length == 2) {
0:             NUM_MSGS = (new Integer(args[1])).intValue();
1:         }
0:         else {
0:             NUM_MSGS = 1;
1:         }
1: 
1:         /*
0:          * Create a JNDI API InitialContext object if none exists
0:          * yet.
1:          */
1:         try {
1:             jndiContext = new InitialContext();
1:         }
0:         catch (NamingException e) {
0:             log.info("Could not create JNDI API context: " + e.toString());
1:             System.exit(1);
1:         }
1: 
1:         /*
0:          * Look up connection factory and queue.  If either does
0:          * not exist, exit.
1:          */
1:         try {
0:             queueConnectionFactory = (QueueConnectionFactory) jndiContext.lookup("QueueConnectionFactory");
0:             queue = (Queue) jndiContext.lookup(queueName);
1:         }
0:         catch (NamingException e) {
0:             log.info("JNDI API lookup failed: " + e);
1:             System.exit(1);
1:         }
1: 
1:         /*
0:          * Create connection.
0:          * Create session from connection; false means session is
0:          * not transacted.
0:          * Create sender and text message.
0:          * Send messages, varying text slightly.
0:          * Send end-of-messages message.
1:          * Finally, close connection.
1:          */
1:         try {
1:             queueConnection = queueConnectionFactory.createQueueConnection();
1:             queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:             queueSender = queueSession.createSender(queue);
1:             message = queueSession.createTextMessage();
0:             for (int i = 0; i < NUM_MSGS; i++) {
1:                 message.setText("This is message " + (i + 1));
0:                 log.info("Sending message: " +
0:                         message.getText());
1:                 queueSender.send(message);
1:             }
1: 
1:             /*
0:              * Send a non-text control message indicating end of
0:              * messages.
1:              */
1:             queueSender.send(queueSession.createMessage());
1:         }
0:         catch (JMSException e) {
0:             log.info("Exception occurred: " +
0:                     e.toString());
1:         }
0:         finally {
1:             if (queueConnection != null) {
1:                 try {
1:                     queueConnection.close();
1:                 }
0:                 catch (JMSException e) {
1:                 }
1:             }
1:         }
1:     }
1: }
1: 
1: // END SNIPPET: demo
============================================================================