1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:fd4bb60: package org.apache.activemq.ra;
4:40a7d3b: 
1:40a7d3b: import java.io.Serializable;
1:b58da3b: 
1:540dd5c: import javax.jms.BytesMessage;
1:540dd5c: import javax.jms.Destination;
1:540dd5c: import javax.jms.JMSException;
1:540dd5c: import javax.jms.MapMessage;
1:540dd5c: import javax.jms.Message;
1:540dd5c: import javax.jms.MessageConsumer;
1:540dd5c: import javax.jms.MessageListener;
1:540dd5c: import javax.jms.MessageProducer;
1:540dd5c: import javax.jms.ObjectMessage;
1:540dd5c: import javax.jms.Queue;
1:540dd5c: import javax.jms.QueueBrowser;
1:540dd5c: import javax.jms.QueueReceiver;
1:540dd5c: import javax.jms.QueueSender;
1:540dd5c: import javax.jms.QueueSession;
1:540dd5c: import javax.jms.Session;
1:540dd5c: import javax.jms.StreamMessage;
1:540dd5c: import javax.jms.TemporaryQueue;
1:540dd5c: import javax.jms.TemporaryTopic;
1:540dd5c: import javax.jms.TextMessage;
1:540dd5c: import javax.jms.Topic;
1:540dd5c: import javax.jms.TopicPublisher;
1:540dd5c: import javax.jms.TopicSession;
1:540dd5c: import javax.jms.TopicSubscriber;
1:540dd5c: 
2:40a7d3b: /**
1:40a7d3b:  * A {@link Session} implementation which can be used with the ActiveMQ JCA
1:540dd5c:  * Resource Adapter to publish messages using the same JMS session that is used
1:540dd5c:  * to dispatch messages.
1:b0c2a40:  * 
1:540dd5c:  * 
1:40a7d3b:  */
1:40a7d3b: public class InboundSessionProxy implements Session, QueueSession, TopicSession {
1:40a7d3b: 
1:40a7d3b:     private InboundContext sessionAndProducer;
1:40a7d3b: 
1:40a7d3b:     public Session getSession() throws JMSException {
1:40a7d3b:         return getSessionAndProducer().getSession();
4:40a7d3b:     }
1:b58da3b: 
1:40a7d3b:     public QueueSession getQueueSession() throws JMSException {
1:40a7d3b:         Session session = getSession();
1:40a7d3b:         if (session instanceof QueueSession) {
1:540dd5c:             return (QueueSession)session;
1:540dd5c:         } else {
1:40a7d3b:             throw new JMSException("The underlying JMS Session does not support QueueSession semantics: " + session);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicSession getTopicSession() throws JMSException {
1:40a7d3b:         Session session = getSession();
1:40a7d3b:         if (session instanceof TopicSession) {
1:540dd5c:             return (TopicSession)session;
1:540dd5c:         } else {
1:40a7d3b:             throw new JMSException("The underlying JMS Session does not support TopicSession semantics: " + session);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public InboundContext getSessionAndProducer() throws JMSException {
1:540dd5c:         if (sessionAndProducer == null) {
1:40a7d3b:             sessionAndProducer = InboundContextSupport.getActiveSessionAndProducer();
1:40a7d3b:             if (sessionAndProducer == null) {
1:40a7d3b:                 throw new JMSException("No currently active Session. This JMS provider cannot be used outside a MessageListener.onMessage() invocation");
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:         return sessionAndProducer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MessageProducer createProducer(Destination destination) throws JMSException {
1:40a7d3b:         return new InboundMessageProducerProxy(getSessionAndProducer().getMessageProducer(), destination);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void close() throws JMSException {
1:40a7d3b:         // we don't allow users to close this session
1:40a7d3b:         // as its used by the JCA container
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void commit() throws JMSException {
1:40a7d3b:         // the JCA container will handle transactions
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void rollback() throws JMSException {
1:40a7d3b:         // the JCA container will handle transactions
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void recover() throws JMSException {
1:40a7d3b:         // the JCA container will handle recovery
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void run() {
1:40a7d3b:         try {
1:40a7d3b:             getSession().run();
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:             throw new RuntimeException("Failed to run() on session due to: " + e, e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     // Straightforward delegation methods
1:540dd5c:     // -------------------------------------------------------------------------
1:40a7d3b: 
1:40a7d3b:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:40a7d3b:         return getSession().createBrowser(queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueBrowser createBrowser(Queue queue, String s) throws JMSException {
1:40a7d3b:         return getSession().createBrowser(queue, s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public BytesMessage createBytesMessage() throws JMSException {
1:40a7d3b:         return getSession().createBytesMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
1:40a7d3b:         return getSession().createConsumer(destination);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MessageConsumer createConsumer(Destination destination, String s) throws JMSException {
1:40a7d3b:         return getSession().createConsumer(destination, s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MessageConsumer createConsumer(Destination destination, String s, boolean b) throws JMSException {
1:40a7d3b:         return getSession().createConsumer(destination, s, b);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicSubscriber createDurableSubscriber(Topic topic, String s) throws JMSException {
1:40a7d3b:         return getSession().createDurableSubscriber(topic, s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicSubscriber createDurableSubscriber(Topic topic, String s, String s1, boolean b) throws JMSException {
1:40a7d3b:         return getSession().createDurableSubscriber(topic, s, s1, b);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MapMessage createMapMessage() throws JMSException {
1:40a7d3b:         return getSession().createMapMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Message createMessage() throws JMSException {
1:40a7d3b:         return getSession().createMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public ObjectMessage createObjectMessage() throws JMSException {
1:40a7d3b:         return getSession().createObjectMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public ObjectMessage createObjectMessage(Serializable serializable) throws JMSException {
1:40a7d3b:         return getSession().createObjectMessage(serializable);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Queue createQueue(String s) throws JMSException {
1:40a7d3b:         return getSession().createQueue(s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public StreamMessage createStreamMessage() throws JMSException {
1:40a7d3b:         return getSession().createStreamMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:40a7d3b:         return getSession().createTemporaryQueue();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:40a7d3b:         return getSession().createTemporaryTopic();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TextMessage createTextMessage() throws JMSException {
1:40a7d3b:         return getSession().createTextMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TextMessage createTextMessage(String s) throws JMSException {
1:40a7d3b:         return getSession().createTextMessage(s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Topic createTopic(String s) throws JMSException {
1:40a7d3b:         return getSession().createTopic(s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getAcknowledgeMode() throws JMSException {
1:40a7d3b:         return getSession().getAcknowledgeMode();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public MessageListener getMessageListener() throws JMSException {
1:40a7d3b:         return getSession().getMessageListener();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean getTransacted() throws JMSException {
1:40a7d3b:         return getSession().getTransacted();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setMessageListener(MessageListener messageListener) throws JMSException {
1:40a7d3b:         getSession().setMessageListener(messageListener);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void unsubscribe(String s) throws JMSException {
1:40a7d3b:         getSession().unsubscribe(s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
1:40a7d3b:         return getQueueSession().createReceiver(queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueReceiver createReceiver(Queue queue, String s) throws JMSException {
1:40a7d3b:         return getQueueSession().createReceiver(queue, s);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public QueueSender createSender(Queue queue) throws JMSException {
1:40a7d3b:         return new InboundMessageProducerProxy(getSessionAndProducer().getMessageProducer(), queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
1:40a7d3b:         return getTopicSession().createSubscriber(topic);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicSubscriber createSubscriber(Topic topic, String s, boolean b) throws JMSException {
1:40a7d3b:         return getTopicSession().createSubscriber(topic, s, b);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TopicPublisher createPublisher(Topic topic) throws JMSException {
1:40a7d3b:         return getTopicSession().createPublisher(topic);
1:40a7d3b:     }
1:540dd5c: 
1:b58da3b:     public String toString() {
1:b58da3b:         try {
1:540dd5c:             return "InboundSessionProxy { " + getSession() + " }";
1:b58da3b:         } catch (JMSException e) {
1:b58da3b:             return "InboundSessionProxy { null }";
1:b58da3b:         }
1:b58da3b:     }
1:b58da3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.QueueReceiver;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: 
1:  * Resource Adapter to publish messages using the same JMS session that is used
1:  * to dispatch messages.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:             return (QueueSession)session;
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             return (TopicSession)session;
1:         } else {
1:         if (sessionAndProducer == null) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1: 
1:             return "InboundSessionProxy { " + getSession() + " }";
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
commit:b58da3b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String toString() {
1:         try {
0:             return "InboundSessionProxy { "+getSession()+" }";
1:         } catch (JMSException e) {
1:             return "InboundSessionProxy { null }";
1:         }
1:     }
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: 
0: import javax.jms.*;
1: import java.io.Serializable;
1: 
1: /**
1:  * A {@link Session} implementation which can be used with the ActiveMQ JCA
0:  * Resource Adapter to publish messages using the same JMS session that is used to dispatch
0:  * messages.
0:  *
0:  * @version $Revision$
1:  */
1: public class InboundSessionProxy implements Session, QueueSession, TopicSession {
1: 
1:     private InboundContext sessionAndProducer;
1: 
1:     public Session getSession() throws JMSException {
1:         return getSessionAndProducer().getSession();
1:     }
1: 
1:     public QueueSession getQueueSession() throws JMSException {
1:         Session session = getSession();
1:         if (session instanceof QueueSession) {
0:             return (QueueSession) session;
1:         }
0:         else {
1:             throw new JMSException("The underlying JMS Session does not support QueueSession semantics: " + session);
1:         }
1:     }
1: 
1:     public TopicSession getTopicSession() throws JMSException {
1:         Session session = getSession();
1:         if (session instanceof TopicSession) {
0:             return (TopicSession) session;
1:         }
0:         else {
1:             throw new JMSException("The underlying JMS Session does not support TopicSession semantics: " + session);
1:         }
1:     }
1: 
1:     public InboundContext getSessionAndProducer() throws JMSException {
0:         if( sessionAndProducer==null ) {
1:             sessionAndProducer = InboundContextSupport.getActiveSessionAndProducer();
1:             if (sessionAndProducer == null) {
1:                 throw new JMSException("No currently active Session. This JMS provider cannot be used outside a MessageListener.onMessage() invocation");
1:             }
1:         }
1:         return sessionAndProducer;
1:     }
1: 
1:     public MessageProducer createProducer(Destination destination) throws JMSException {
1:         return new InboundMessageProducerProxy(getSessionAndProducer().getMessageProducer(), destination);
1:     }
1: 
1:     public void close() throws JMSException {
1:         // we don't allow users to close this session
1:         // as its used by the JCA container
1:     }
1: 
1:     public void commit() throws JMSException {
1:         // the JCA container will handle transactions
1:     }
1: 
1:     public void rollback() throws JMSException {
1:         // the JCA container will handle transactions
1:     }
1: 
1:     public void recover() throws JMSException {
1:         // the JCA container will handle recovery
1:     }
1: 
1:     public void run() {
1:         try {
1:             getSession().run();
1:         }
0:         catch (JMSException e) {
1:             throw new RuntimeException("Failed to run() on session due to: " + e, e);
1:         }
1:     }
1: 
1:     // Straightforward delegation methods
0:     //-------------------------------------------------------------------------
1: 
1:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:         return getSession().createBrowser(queue);
1:     }
1: 
1:     public QueueBrowser createBrowser(Queue queue, String s) throws JMSException {
1:         return getSession().createBrowser(queue, s);
1:     }
1: 
1:     public BytesMessage createBytesMessage() throws JMSException {
1:         return getSession().createBytesMessage();
1:     }
1: 
1:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
1:         return getSession().createConsumer(destination);
1:     }
1: 
1:     public MessageConsumer createConsumer(Destination destination, String s) throws JMSException {
1:         return getSession().createConsumer(destination, s);
1:     }
1: 
1:     public MessageConsumer createConsumer(Destination destination, String s, boolean b) throws JMSException {
1:         return getSession().createConsumer(destination, s, b);
1:     }
1: 
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String s) throws JMSException {
1:         return getSession().createDurableSubscriber(topic, s);
1:     }
1: 
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String s, String s1, boolean b) throws JMSException {
1:         return getSession().createDurableSubscriber(topic, s, s1, b);
1:     }
1: 
1:     public MapMessage createMapMessage() throws JMSException {
1:         return getSession().createMapMessage();
1:     }
1: 
1:     public Message createMessage() throws JMSException {
1:         return getSession().createMessage();
1:     }
1: 
1:     public ObjectMessage createObjectMessage() throws JMSException {
1:         return getSession().createObjectMessage();
1:     }
1: 
1:     public ObjectMessage createObjectMessage(Serializable serializable) throws JMSException {
1:         return getSession().createObjectMessage(serializable);
1:     }
1: 
1:     public Queue createQueue(String s) throws JMSException {
1:         return getSession().createQueue(s);
1:     }
1: 
1:     public StreamMessage createStreamMessage() throws JMSException {
1:         return getSession().createStreamMessage();
1:     }
1: 
1:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:         return getSession().createTemporaryQueue();
1:     }
1: 
1:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:         return getSession().createTemporaryTopic();
1:     }
1: 
1:     public TextMessage createTextMessage() throws JMSException {
1:         return getSession().createTextMessage();
1:     }
1: 
1:     public TextMessage createTextMessage(String s) throws JMSException {
1:         return getSession().createTextMessage(s);
1:     }
1: 
1:     public Topic createTopic(String s) throws JMSException {
1:         return getSession().createTopic(s);
1:     }
1: 
1:     public int getAcknowledgeMode() throws JMSException {
1:         return getSession().getAcknowledgeMode();
1:     }
1: 
1:     public MessageListener getMessageListener() throws JMSException {
1:         return getSession().getMessageListener();
1:     }
1: 
1:     public boolean getTransacted() throws JMSException {
1:         return getSession().getTransacted();
1:     }
1: 
1:     public void setMessageListener(MessageListener messageListener) throws JMSException {
1:         getSession().setMessageListener(messageListener);
1:     }
1: 
1:     public void unsubscribe(String s) throws JMSException {
1:         getSession().unsubscribe(s);
1:     }
1: 
1:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
1:         return getQueueSession().createReceiver(queue);
1:     }
1: 
1:     public QueueReceiver createReceiver(Queue queue, String s) throws JMSException {
1:         return getQueueSession().createReceiver(queue, s);
1:     }
1: 
1:     public QueueSender createSender(Queue queue) throws JMSException {
1:         return new InboundMessageProducerProxy(getSessionAndProducer().getMessageProducer(), queue);
1:     }
1: 
1:     public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
1:         return getTopicSession().createSubscriber(topic);
1:     }
1: 
1:     public TopicSubscriber createSubscriber(Topic topic, String s, boolean b) throws JMSException {
1:         return getTopicSession().createSubscriber(topic, s, b);
1:     }
1: 
1:     public TopicPublisher createPublisher(Topic topic) throws JMSException {
1:         return getTopicSession().createPublisher(topic);
1:     }
1: }
============================================================================