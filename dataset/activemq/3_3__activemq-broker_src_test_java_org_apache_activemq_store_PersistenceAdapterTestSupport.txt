1:1d5bcaf: /**
1:1d5bcaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d5bcaf:  * contributor license agreements.  See the NOTICE file distributed with
1:1d5bcaf:  * this work for additional information regarding copyright ownership.
1:1d5bcaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d5bcaf:  * (the "License"); you may not use this file except in compliance with
1:1d5bcaf:  * the License.  You may obtain a copy of the License at
1:1d5bcaf:  *
1:1d5bcaf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1d5bcaf:  *
1:1d5bcaf:  * Unless required by applicable law or agreed to in writing, software
1:1d5bcaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d5bcaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d5bcaf:  * See the License for the specific language governing permissions and
1:1d5bcaf:  * limitations under the License.
1:1d5bcaf:  */
1:1d5bcaf: package org.apache.activemq.store;
3:1d5bcaf: 
1:1d5bcaf: import java.util.concurrent.atomic.AtomicInteger;
1:1d5bcaf: 
1:1d5bcaf: import junit.framework.TestCase;
1:1d5bcaf: 
1:24a7626: import org.apache.activemq.broker.BrokerService;
1:1d5bcaf: import org.apache.activemq.broker.ConnectionContext;
1:1d5bcaf: import org.apache.activemq.command.ActiveMQQueue;
1:1d5bcaf: import org.apache.activemq.command.ActiveMQTextMessage;
1:1d5bcaf: import org.apache.activemq.command.Message;
1:1d5bcaf: import org.apache.activemq.command.MessageId;
1:1d5bcaf: 
1:1d5bcaf: /**
1:1d5bcaf:  * 
1:1d5bcaf:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:1d5bcaf:  */
1:1d5bcaf: abstract public class PersistenceAdapterTestSupport extends TestCase {
1:1d5bcaf: 
1:c3801c4:     protected PersistenceAdapter pa;
1:0f3ce45:     protected BrokerService brokerService;
1:1d5bcaf: 
1:1d5bcaf:     abstract protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws Exception;
1:1d5bcaf: 
1:1d5bcaf:     @Override
1:1d5bcaf:     protected void setUp() throws Exception {
1:0f3ce45:         brokerService = new BrokerService();
1:1d5bcaf:         pa = createPersistenceAdapter(true);
1:0f3ce45:         brokerService.setPersistenceAdapter(pa);
1:0f3ce45:         brokerService.start();
1:1d5bcaf:     }
1:1d5bcaf:     
1:1d5bcaf:     @Override
1:1d5bcaf:     protected void tearDown() throws Exception {
1:0f3ce45:         if (brokerService != null) {
1:0f3ce45:             brokerService.stop();
1:1d5bcaf:         }
1:1d5bcaf:     }
1:1d5bcaf:     
1:1d5bcaf:     public void testStoreCanHandleDupMessages() throws Exception {
1:1d5bcaf: 
1:1d5bcaf:         
1:1d5bcaf:         MessageStore ms = pa.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:bfed2c0:         ConnectionContext context = new ConnectionContext();
1:1d5bcaf: 
1:1d5bcaf:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:1d5bcaf:         message.setText("test");
1:bfed2c0:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:1");
1:bfed2c0:         messageId.setBrokerSequenceId(1);
1:bfed2c0:         message.setMessageId(messageId);
1:1d5bcaf:         ms.addMessage(context, message);
1:1d5bcaf: 
1:1d5bcaf:         // here comes the dup...
1:bfed2c0:         message = new ActiveMQTextMessage();
1:bfed2c0:         message.setText("test");
1:bfed2c0:         messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:1");
1:bfed2c0:         messageId.setBrokerSequenceId(2);
1:bfed2c0:         message.setMessageId(messageId);
1:1d5bcaf:         ms.addMessage(context, message);
1:1d5bcaf: 
1:1d5bcaf:         final AtomicInteger recovered = new AtomicInteger();
1:1d5bcaf:         ms.recover(new MessageRecoveryListener() {
1:1d5bcaf:             public boolean hasSpace() {
1:1d5bcaf:                 return true;
1:1d5bcaf:             }
1:1d5bcaf: 
1:1d5bcaf:             public boolean isDuplicate(MessageId ref) {
1:1d5bcaf:                 return false;
1:1d5bcaf:             }
1:1d5bcaf: 
1:1d5bcaf:             public boolean recoverMessage(Message message) throws Exception {
1:1d5bcaf:                 recovered.incrementAndGet();
1:1d5bcaf:                 return true;
1:1d5bcaf:             }
1:1d5bcaf: 
1:1d5bcaf:             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:1d5bcaf:                 recovered.incrementAndGet();
1:1d5bcaf:                 return true;
1:1d5bcaf:             }
1:1d5bcaf:         });
1:1d5bcaf:         assertEquals(1, recovered.get());
1:1d5bcaf: 
1:1d5bcaf:     }
1:1d5bcaf: 
1:e73230b:     public void testAddRemoveConsumerDest() throws Exception {
1:e73230b:         ActiveMQQueue consumerQ = new ActiveMQQueue("Consumer.A.VirtualTopicTest");
1:e73230b:         MessageStore ms = pa.createQueueMessageStore(consumerQ);
1:e73230b:         pa.removeQueueMessageStore(consumerQ);
1:e73230b:         assertFalse(pa.getDestinations().contains(consumerQ));
1:e73230b:     }
1:e73230b: 
1:1d5bcaf: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:0f3ce45
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService brokerService;
1:         brokerService = new BrokerService();
1:         brokerService.setPersistenceAdapter(pa);
1:         brokerService.start();
1:         if (brokerService != null) {
1:             brokerService.stop();
commit:e73230b
/////////////////////////////////////////////////////////////////////////
1:     public void testAddRemoveConsumerDest() throws Exception {
1:         ActiveMQQueue consumerQ = new ActiveMQQueue("Consumer.A.VirtualTopicTest");
1:         MessageStore ms = pa.createQueueMessageStore(consumerQ);
1:         pa.removeQueueMessageStore(consumerQ);
1:         assertFalse(pa.getDestinations().contains(consumerQ));
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
commit:bfed2c0
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = new ConnectionContext();
1:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:1");
1:         messageId.setBrokerSequenceId(1);
1:         message.setMessageId(messageId);
1:         message = new ActiveMQTextMessage();
1:         message.setText("test");
1:         messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:1");
1:         messageId.setBrokerSequenceId(2);
1:         message.setMessageId(messageId);
/////////////////////////////////////////////////////////////////////////
commit:1d5bcaf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
1:  * 
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: abstract public class PersistenceAdapterTestSupport extends TestCase {
1: 
0:     private PersistenceAdapter pa;
1: 
1:     abstract protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws Exception;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         pa = createPersistenceAdapter(true);
0:         pa.start();
1:     }
1:     
1:     @Override
1:     protected void tearDown() throws Exception {
0:         if( pa!=null ) {
0:             pa.stop();
0:             pa=null;
1:         }
1:     }
1:     
1:     public void testStoreCanHandleDupMessages() throws Exception {
1: 
1:         
1:         MessageStore ms = pa.createQueueMessageStore(new ActiveMQQueue("TEST"));
1: 
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setText("test");
0:         message.setMessageId(new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:1"));
0:         ConnectionContext context = new ConnectionContext();
1: 
1:         ms.addMessage(context, message);
1: 
1:         // here comes the dup...
1:         ms.addMessage(context, message);
1: 
1:         final AtomicInteger recovered = new AtomicInteger();
1:         ms.recover(new MessageRecoveryListener() {
1:             public boolean hasSpace() {
1:                 return true;
1:             }
1: 
1:             public boolean isDuplicate(MessageId ref) {
1:                 return false;
1:             }
1: 
1:             public boolean recoverMessage(Message message) throws Exception {
1:                 recovered.incrementAndGet();
1:                 return true;
1:             }
1: 
1:             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:                 recovered.incrementAndGet();
1:                 return true;
1:             }
1:         });
1:         
1:         assertEquals(1, recovered.get());
1: 
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:24a7626
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0:     protected BrokerService brokerService = new BrokerService();
commit:c3801c4
/////////////////////////////////////////////////////////////////////////
1:     protected PersistenceAdapter pa;
============================================================================