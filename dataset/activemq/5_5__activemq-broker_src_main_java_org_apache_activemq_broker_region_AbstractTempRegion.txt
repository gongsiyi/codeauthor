1:cd24f80: /**
1:cd24f80:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd24f80:  * contributor license agreements.  See the NOTICE file distributed with
1:cd24f80:  * this work for additional information regarding copyright ownership.
1:cd24f80:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd24f80:  * (the "License"); you may not use this file except in compliance with
1:cd24f80:  * the License.  You may obtain a copy of the License at
2:cd24f80:  *
1:cd24f80:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cd24f80:  *
1:cd24f80:  * Unless required by applicable law or agreed to in writing, software
1:cd24f80:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd24f80:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd24f80:  * See the License for the specific language governing permissions and
1:cd24f80:  * limitations under the License.
1:cd24f80:  */
1:cd24f80: package org.apache.activemq.broker.region;
13:cd24f80: 
1:044c07d: import java.util.HashMap;
1:cd24f80: import java.util.HashSet;
1:cd24f80: import java.util.Map;
1:cd24f80: import java.util.Set;
1:cd24f80: import java.util.Timer;
1:cd24f80: import java.util.TimerTask;
1:cd24f80: 
1:cd24f80: import org.apache.activemq.broker.ConnectionContext;
1:cd24f80: import org.apache.activemq.command.ActiveMQDestination;
1:cd24f80: import org.apache.activemq.thread.TaskRunnerFactory;
1:cd24f80: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:cd24f80: 
1:cd24f80: /**
1:c451951:  * 
1:cd24f80:  */
1:cd24f80: public abstract class AbstractTempRegion extends AbstractRegion {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TempQueueRegion.class);
1:c451951: 
1:c451951:     private Map<CachedDestination, Destination> cachedDestinations = new HashMap<CachedDestination, Destination>();
1:c451951:     private final boolean doCacheTempDestinations;
1:c451951:     private final int purgeTime;
1:c451951:     private Timer purgeTimer;
1:c451951:     private TimerTask purgeTask;
1:c451951:    
1:c451951: 
1:cd24f80:     /**
1:cd24f80:      * @param broker
1:cd24f80:      * @param destinationStatistics
1:cd24f80:      * @param memoryManager
1:cd24f80:      * @param taskRunnerFactory
1:cd24f80:      * @param destinationFactory
1:cd24f80:      */
1:cd24f80:     public AbstractTempRegion(RegionBroker broker,
1:cd24f80:             DestinationStatistics destinationStatistics,
1:cd24f80:             SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
1:cd24f80:             DestinationFactory destinationFactory) {
1:cd24f80:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory,
1:cd24f80:                 destinationFactory);
1:c451951:         this.doCacheTempDestinations=broker.getBrokerService().isCacheTempDestinations();
1:c451951:         this.purgeTime = broker.getBrokerService().getTimeBeforePurgeTempDestinations();
1:c451951:         if (this.doCacheTempDestinations) {
1:4441fa7:             this.purgeTimer = new Timer("ActiveMQ Temp destination purge timer", true);
1:c451951:             this.purgeTask = new TimerTask() {
1:c451951:                 public void run() {
1:c451951:                     doPurge();
1:c451951:                 }
1:c451951:     
1:c451951:             };
1:38d433a:             this.purgeTimer.schedule(purgeTask, purgeTime, purgeTime);
1:c451951:         }
1:c451951:        
1:c451951:     }
1:cd24f80: 
1:cd24f80:     public void stop() throws Exception {
1:cd24f80:         super.stop();
1:cd24f80:         if (purgeTimer != null) {
1:cd24f80:             purgeTimer.cancel();
3:cd24f80:         }
1:cd24f80:     }
1:c451951: 
1:c451951:     protected synchronized Destination createDestination(
2:c451951:             ConnectionContext context, ActiveMQDestination destination)
1:c451951:             throws Exception {
1:c451951:         Destination result = cachedDestinations.remove(new CachedDestination(
1:c451951:                 destination));
1:c451951:         if (result == null) {
1:1005fc5:             result =  destinationFactory.createDestination(context, destination, destinationStatistics);
1:cd24f80:         }
1:cd24f80:         return result;
1:cd24f80:     }
1:c451951: 
1:c451951:     protected final synchronized void dispose(ConnectionContext context,
1:c451951:             Destination dest) throws Exception {
1:c451951:         // add to cache
1:c451951:         if (this.doCacheTempDestinations) {
1:c451951:             cachedDestinations.put(new CachedDestination(dest
1:c451951:                     .getActiveMQDestination()), dest);
1:e38da22:         }else {
1:e38da22:             try {
1:e38da22:                 dest.dispose(context);
1:e38da22:                 dest.stop();
1:e38da22:             } catch (Exception e) {
1:e1bbde7:                 LOG.warn("Failed to dispose of {}", dest, e);
1:e38da22:             }
1:c451951:         }
1:cd24f80:     }
1:c451951: 
1:cd24f80:     private void doDispose(Destination dest) {
1:cd24f80:         ConnectionContext context = new ConnectionContext();
1:cd24f80:         try {
1:cd24f80:             dest.dispose(context);
1:cd24f80:             dest.stop();
1:cd24f80:         } catch (Exception e) {
1:e1bbde7:             LOG.warn("Failed to dispose of {}", dest, e);
1:cd24f80:         }
1:c451951: 
1:cd24f80:     }
1:c451951: 
1:044c07d:     private synchronized void doPurge() {
1:cd24f80:         long currentTime = System.currentTimeMillis();
1:cd24f80:         if (cachedDestinations.size() > 0) {
1:c451951:             Set<CachedDestination> tmp = new HashSet<CachedDestination>(
1:c451951:                     cachedDestinations.keySet());
1:c451951:             for (CachedDestination key : tmp) {
1:c451951:                 if ((key.timeStamp + purgeTime) < currentTime) {
1:cd24f80:                     Destination dest = cachedDestinations.remove(key);
1:cd24f80:                     if (dest != null) {
1:cd24f80:                         doDispose(dest);
1:cd24f80:                     }
1:cd24f80:                 }
1:cd24f80:             }
1:cd24f80:         }
1:cd24f80:     }
1:cd24f80: 
1:c451951:     static class CachedDestination {
1:cd24f80:         long timeStamp;
1:c451951: 
1:cd24f80:         ActiveMQDestination destination;
1:c451951: 
1:c451951:         CachedDestination(ActiveMQDestination destination) {
1:c451951:             this.destination = destination;
1:c451951:             this.timeStamp = System.currentTimeMillis();
1:cd24f80:         }
1:c451951: 
1:cd24f80:         public int hashCode() {
1:cd24f80:             return destination.hashCode();
1:cd24f80:         }
1:c451951: 
1:cd24f80:         public boolean equals(Object o) {
1:044c07d:             if (o instanceof CachedDestination) {
1:cd24f80:                 CachedDestination other = (CachedDestination) o;
1:cd24f80:                 return other.destination.equals(this.destination);
1:cd24f80:             }
1:cd24f80:             return false;
1:cd24f80:         }
1:c451951: 
1:cd24f80:     }
1:cd24f80: 
1:cd24f80: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Failed to dispose of {}", dest, e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Failed to dispose of {}", dest, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:38d433a
/////////////////////////////////////////////////////////////////////////
1:             this.purgeTimer.schedule(purgeTask, purgeTime, purgeTime);
author:Gary Tully
-------------------------------------------------------------------------------
commit:1005fc5
/////////////////////////////////////////////////////////////////////////
1:             result =  destinationFactory.createDestination(context, destination, destinationStatistics);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TempQueueRegion.class);
commit:4441fa7
/////////////////////////////////////////////////////////////////////////
1:             this.purgeTimer = new Timer("ActiveMQ Temp destination purge timer", true);
author:Robert Davies
-------------------------------------------------------------------------------
commit:e38da22
/////////////////////////////////////////////////////////////////////////
1:         }else {
1:             try {
1:                 dest.dispose(context);
1:                 dest.stop();
1:             } catch (Exception e) {
0:                 LOG.warn("Failed to dispose of " + dest, e);
1:             }
commit:c451951
/////////////////////////////////////////////////////////////////////////
1:  * 
1: 
1:     private Map<CachedDestination, Destination> cachedDestinations = new HashMap<CachedDestination, Destination>();
1:     private final boolean doCacheTempDestinations;
1:     private final int purgeTime;
1:     private Timer purgeTimer;
1:     private TimerTask purgeTask;
1:    
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.doCacheTempDestinations=broker.getBrokerService().isCacheTempDestinations();
1:         this.purgeTime = broker.getBrokerService().getTimeBeforePurgeTempDestinations();
1:         if (this.doCacheTempDestinations) {
0:             this.purgeTimer = new Timer(true);
1:             this.purgeTask = new TimerTask() {
1:                 public void run() {
1:                     doPurge();
1:                 }
1:             };
1:         }
0:         this.purgeTimer.schedule(purgeTask, purgeTime, purgeTime);
1:     }
1: 
0:     protected abstract Destination doCreateDestination(
1:             ConnectionContext context, ActiveMQDestination destination)
0:             throws Exception;
1: 
1:     protected synchronized Destination createDestination(
1:             ConnectionContext context, ActiveMQDestination destination)
1:             throws Exception {
1:         Destination result = cachedDestinations.remove(new CachedDestination(
1:                 destination));
1:         if (result == null) {
1: 
1:     protected final synchronized void dispose(ConnectionContext context,
1:             Destination dest) throws Exception {
1:         // add to cache
1:         if (this.doCacheTempDestinations) {
1:             cachedDestinations.put(new CachedDestination(dest
1:                     .getActiveMQDestination()), dest);
1:         }
1: 
0:             LOG.warn("Failed to dispose of " + dest, e);
1: 
1: 
1:             Set<CachedDestination> tmp = new HashSet<CachedDestination>(
1:                     cachedDestinations.keySet());
1:             for (CachedDestination key : tmp) {
1:                 if ((key.timeStamp + purgeTime) < currentTime) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     static class CachedDestination {
1: 
1: 
1:         CachedDestination(ActiveMQDestination destination) {
1:             this.destination = destination;
1:             this.timeStamp = System.currentTimeMillis();
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:044c07d
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:     private Map<CachedDestination,Destination> cachedDestinations = new HashMap<CachedDestination,Destination>();
/////////////////////////////////////////////////////////////////////////
0:     protected synchronized Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     protected final synchronized void dispose(ConnectionContext context,Destination dest) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     private synchronized void doPurge() {
/////////////////////////////////////////////////////////////////////////
1:             if (o instanceof CachedDestination) {
commit:cd24f80
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.Timer;
1: import java.util.TimerTask;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: import org.apache.activemq.usage.SystemUsage;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  *
1:  */
1: public abstract class AbstractTempRegion extends AbstractRegion {
0:     private static int TIME_BEFORE_PURGE = 60000;
0:     private static final Log LOG = LogFactory.getLog(TempQueueRegion.class);
0:     private Map<CachedDestination,Destination> cachedDestinations = new ConcurrentHashMap<CachedDestination,Destination>();
0:     private final Timer purgeTimer;
0:     private final TimerTask purgeTask;
1:     /**
1:      * @param broker
1:      * @param destinationStatistics
1:      * @param memoryManager
1:      * @param taskRunnerFactory
1:      * @param destinationFactory
1:      */
1:     public AbstractTempRegion(RegionBroker broker,
1:             DestinationStatistics destinationStatistics,
1:             SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
1:             DestinationFactory destinationFactory) {
1:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory,
1:                 destinationFactory);
0:         this.purgeTimer = new Timer(true);
0:         this.purgeTask = new TimerTask() {
0:             public void run() {
0:                 doPurge();
1:             }
1:             
0:         };
0:         this.purgeTimer.schedule(purgeTask, TIME_BEFORE_PURGE,TIME_BEFORE_PURGE);
1:     }
1:     
1:        
1:     public void stop() throws Exception {
1:         super.stop();
1:         if (purgeTimer != null) {
1:             purgeTimer.cancel();
1:         }
1:     }
1:     
0:     protected abstract Destination doCreateDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
1: 
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         Destination result = cachedDestinations.remove(new CachedDestination(destination));
0:         if (result==null) {
0:             result = doCreateDestination(context, destination);
1:         }
1:         return result;
1:     }
1:     
0:     protected final void dispose(ConnectionContext context,Destination dest) throws Exception {
0:         //add to cache
0:         cachedDestinations.put(new CachedDestination(dest.getActiveMQDestination()), dest);
1:     }
1:     
1:     private void doDispose(Destination dest) {
1:         ConnectionContext context = new ConnectionContext();
1:         try {
1:             dest.dispose(context);
1:             dest.stop();
1:         } catch (Exception e) {
0:            LOG.warn("Failed to dispose of " + dest,e);
1:         }
1:       
1:     }
1:     
0:     private void doPurge() {
1:         long currentTime = System.currentTimeMillis();
1:         if (cachedDestinations.size() > 0) {
0:             Set<CachedDestination> tmp = new HashSet<CachedDestination>(cachedDestinations.keySet());
0:             for(CachedDestination key: tmp) {
0:                 if ((key.timeStamp + TIME_BEFORE_PURGE) < currentTime) {
1:                     Destination dest = cachedDestinations.remove(key);
1:                     if (dest != null) {
1:                         doDispose(dest);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1:     
0:     static class CachedDestination{
1:         long timeStamp;
1:         ActiveMQDestination destination;
1:         
0:         CachedDestination(ActiveMQDestination destination){
0:             this.destination=destination;
0:             this.timeStamp=System.currentTimeMillis();
1:         }
1:         
1:         public int hashCode() {
1:             return destination.hashCode();
1:         }
1:         
1:         public boolean equals(Object o) {
0:             if (o instanceof ActiveMQDestination) {
1:                 CachedDestination other = (CachedDestination) o;
1:                 return other.destination.equals(this.destination);
1:             }
1:             return false;
1:         }
1:         
1:     }
1: 
1: }
============================================================================