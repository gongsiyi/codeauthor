1:15affd0: /**
1:15affd0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15affd0:  * contributor license agreements.  See the NOTICE file distributed with
1:15affd0:  * this work for additional information regarding copyright ownership.
1:15affd0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15affd0:  * (the "License"); you may not use this file except in compliance with
1:15affd0:  * the License.  You may obtain a copy of the License at
1:15affd0:  *
1:15affd0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:15affd0:  *
1:15affd0:  * Unless required by applicable law or agreed to in writing, software
1:15affd0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:15affd0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:15affd0:  * See the License for the specific language governing permissions and
1:15affd0:  * limitations under the License.
1:15affd0:  */
1:15affd0: package org.apache.activemq.transport.failover;
1:15affd0: 
1:15affd0: public class TwoBrokerFailoverClusterTest extends FailoverClusterTestSupport {
1:15affd0: 
1:15affd0:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:15affd0:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
1:15affd0:     private static final String BROKER_A_NOB_TC_ADDRESS = "tcp://127.0.0.1:61626";
1:15affd0:     private static final String BROKER_B_NOB_TC_ADDRESS = "tcp://127.0.0.1:61627";
1:15affd0:     private static final String BROKER_A_NAME = "BROKERA";
1:15affd0:     private static final String BROKER_B_NAME = "BROKERB";
1:15affd0: 
1:15affd0:     public void testTwoBrokersRestart() throws Exception {
1:15affd0:         createBrokerA(false, "", null, null);
1:15affd0:         createBrokerB(false, "", null, null);
1:15affd0:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:15affd0: 
1:15affd0:         Thread.sleep(2000);
1:15affd0:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:15affd0:         createClients();
1:15affd0: 
1:15affd0:         Thread.sleep(5000);
1:15affd0: 
1:15affd0:         assertClientsConnectedToTwoBrokers();
1:15affd0:         assertClientsConnectionsEvenlyDistributed(.35);
1:15affd0: 
1:15affd0: 
1:15affd0:         getBroker(BROKER_A_NAME).stop();
1:15affd0:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:15affd0:         removeBroker(BROKER_A_NAME);
1:15affd0: 
1:a6edc41:         Thread.sleep(1000);
1:a6edc41: 
1:15affd0:         assertAllConnectedTo(BROKER_B_CLIENT_TC_ADDRESS);
1:15affd0: 
1:15affd0:         Thread.sleep(5000);
1:15affd0: 
1:15affd0:         createBrokerA(false, "", null, null);
1:15affd0:         getBroker(BROKER_A_NAME).waitUntilStarted();
1:15affd0:         Thread.sleep(5000);
1:15affd0: 
1:15affd0:         assertClientsConnectedToTwoBrokers();
1:15affd0:         assertClientsConnectionsEvenlyDistributed(.35);
1:15affd0:     }
1:15affd0: 
1:15affd0: 
1:15affd0:     private void createBrokerA(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:15affd0:     	final String tcParams = (params == null)?"":params;
1:15affd0:         if (getBroker(BROKER_A_NAME) == null) {
1:15affd0:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:15affd0:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS + tcParams, true);
1:15affd0:             if (multi) {
1:15affd0:                 addTransportConnector(getBroker(BROKER_A_NAME), "network", BROKER_A_NOB_TC_ADDRESS + tcParams, false);
1:15affd0:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:15affd0:             } else {
1:15affd0:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:15affd0:             }
1:15affd0:             getBroker(BROKER_A_NAME).start();
1:15affd0:         }
1:15affd0:     }
1:15affd0: 
1:15affd0:     private void createBrokerB(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:15affd0:     	final String tcParams = (params == null)?"":params;
1:15affd0:         if (getBroker(BROKER_B_NAME) == null) {
1:15affd0:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:15affd0:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS + tcParams, true);
1:15affd0:             if (multi) {
1:15affd0:                 addTransportConnector(getBroker(BROKER_B_NAME), "network", BROKER_B_NOB_TC_ADDRESS + tcParams, false);
1:15affd0:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:15affd0:             } else {
1:15affd0:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:15affd0:             }
1:15affd0:             getBroker(BROKER_B_NAME).start();
1:15affd0:         }
1:15affd0:     }
1:15affd0: 
1:15affd0: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:a6edc41
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1000);
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:15affd0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: public class TwoBrokerFailoverClusterTest extends FailoverClusterTestSupport {
1: 
1:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
1:     private static final String BROKER_A_NOB_TC_ADDRESS = "tcp://127.0.0.1:61626";
1:     private static final String BROKER_B_NOB_TC_ADDRESS = "tcp://127.0.0.1:61627";
1:     private static final String BROKER_A_NAME = "BROKERA";
1:     private static final String BROKER_B_NAME = "BROKERB";
1: 
1:     public void testTwoBrokersRestart() throws Exception {
1:         createBrokerA(false, "", null, null);
1:         createBrokerB(false, "", null, null);
1:         getBroker(BROKER_B_NAME).waitUntilStarted();
1: 
1:         Thread.sleep(2000);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1: 
1:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToTwoBrokers();
1:         assertClientsConnectionsEvenlyDistributed(.35);
1: 
1: 
1:         getBroker(BROKER_A_NAME).stop();
1:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:         removeBroker(BROKER_A_NAME);
1: 
1:         assertAllConnectedTo(BROKER_B_CLIENT_TC_ADDRESS);
1: 
1:         Thread.sleep(5000);
1: 
1:         createBrokerA(false, "", null, null);
1:         getBroker(BROKER_A_NAME).waitUntilStarted();
1:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToTwoBrokers();
1:         assertClientsConnectionsEvenlyDistributed(.35);
1:     }
1: 
1: 
1:     private void createBrokerA(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:     	final String tcParams = (params == null)?"":params;
1:         if (getBroker(BROKER_A_NAME) == null) {
1:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS + tcParams, true);
1:             if (multi) {
1:                 addTransportConnector(getBroker(BROKER_A_NAME), "network", BROKER_A_NOB_TC_ADDRESS + tcParams, false);
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:             } else {
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:             }
1:             getBroker(BROKER_A_NAME).start();
1:         }
1:     }
1: 
1:     private void createBrokerB(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:     	final String tcParams = (params == null)?"":params;
1:         if (getBroker(BROKER_B_NAME) == null) {
1:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS + tcParams, true);
1:             if (multi) {
1:                 addTransportConnector(getBroker(BROKER_B_NAME), "network", BROKER_B_NOB_TC_ADDRESS + tcParams, false);
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:             } else {
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:             }
1:             getBroker(BROKER_B_NAME).start();
1:         }
1:     }
1: 
1: }
============================================================================