1:9e32de2: /**
1:9e32de2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e32de2:  * contributor license agreements.  See the NOTICE file distributed with
1:9e32de2:  * this work for additional information regarding copyright ownership.
1:9e32de2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e32de2:  * (the "License"); you may not use this file except in compliance with
1:9e32de2:  * the License.  You may obtain a copy of the License at
1:9e32de2:  *
1:9e32de2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e32de2:  *
1:9e32de2:  * Unless required by applicable law or agreed to in writing, software
1:9e32de2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e32de2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e32de2:  * See the License for the specific language governing permissions and
1:9e32de2:  * limitations under the License.
1:9e32de2:  */
1:e0d7906: package org.apache.activemq.spring;
1:e0d7906: 
1:e0d7906: import org.apache.activemq.broker.BrokerService;
1:e0d7906: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:e0d7906: 
1:e0d7906: import junit.framework.TestCase;
1:e0d7906: 
1:e0d7906: public class SpringTest extends TestCase {
1:e0d7906:     
1:e0d7906: 	/**
1:e0d7906:      * Make sure that brokers are being pooled properly.
1:e0d7906:      *
1:e0d7906:      * @throws Exception
1:e0d7906:      */
1:e0d7906:     public void testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml() throws Exception {
1:e0d7906:         String config = "spring-embedded-pooled.xml";
1:e0d7906: 
1:e0d7906:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:e0d7906:         ClassPathXmlApplicationContext context1 = new ClassPathXmlApplicationContext(config);
1:e0d7906: 
1:e0d7906:         BrokerService bs1 = (BrokerService) context1.getBean("broker1");
1:e0d7906:         assertNotNull(bs1);
1:e0d7906:         BrokerService bs2 = (BrokerService) context1.getBean("broker2");
1:e0d7906:         assertNotNull(bs1);
1:e0d7906: 
1:e0d7906:         // It should be the same broker;
1:e0d7906:         assertEquals(bs1, bs2);
1:e0d7906: 
1:e0d7906:         // Even if we load up another context, it should still be the same broker.
1:e0d7906:         ClassPathXmlApplicationContext context2 = new ClassPathXmlApplicationContext(config);
1:e0d7906: 
1:e0d7906:         BrokerService bs3 = (BrokerService) context2.getBean("broker1");
1:e0d7906:         assertNotNull(bs3);
1:e0d7906:         BrokerService bs4 = (BrokerService) context2.getBean("broker2");
1:e0d7906:         assertNotNull(bs4);
1:e0d7906: 
1:e0d7906:         // It should be the same broker;
1:e0d7906:         assertEquals(bs1, bs3);
1:e0d7906:         assertEquals(bs1, bs4);
1:e0d7906: 
1:e0d7906:         // And it should be started.
1:e0d7906:         assertTrue(bs1.isStarted());
1:e0d7906: 
1:e0d7906:         // should still be started asfter the 2nd context closes.
1:e0d7906:         context2.close();
1:e0d7906:         assertTrue(bs1.isStarted());
1:e0d7906: 
1:e0d7906:         // Should stop once all contexts close.
1:e0d7906:         context1.close();
1:e0d7906:         assertFalse(bs1.isStarted());
1:e0d7906:     }
1:e0d7906:     
1:e0d7906: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9e32de2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e0d7906
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.spring;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: import junit.framework.TestCase;
1: 
1: public class SpringTest extends TestCase {
1:     
1: 	/**
1:      * Make sure that brokers are being pooled properly.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml() throws Exception {
1:         String config = "spring-embedded-pooled.xml";
1: 
1:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:         ClassPathXmlApplicationContext context1 = new ClassPathXmlApplicationContext(config);
1: 
1:         BrokerService bs1 = (BrokerService) context1.getBean("broker1");
1:         assertNotNull(bs1);
1:         BrokerService bs2 = (BrokerService) context1.getBean("broker2");
1:         assertNotNull(bs1);
1: 
1:         // It should be the same broker;
1:         assertEquals(bs1, bs2);
1: 
1:         // Even if we load up another context, it should still be the same broker.
1:         ClassPathXmlApplicationContext context2 = new ClassPathXmlApplicationContext(config);
1: 
1:         BrokerService bs3 = (BrokerService) context2.getBean("broker1");
1:         assertNotNull(bs3);
1:         BrokerService bs4 = (BrokerService) context2.getBean("broker2");
1:         assertNotNull(bs4);
1: 
1:         // It should be the same broker;
1:         assertEquals(bs1, bs3);
1:         assertEquals(bs1, bs4);
1: 
1:         // And it should be started.
1:         assertTrue(bs1.isStarted());
1: 
1:         // should still be started asfter the 2nd context closes.
1:         context2.close();
1:         assertTrue(bs1.isStarted());
1: 
1:         // Should stop once all contexts close.
1:         context1.close();
1:         assertFalse(bs1.isStarted());
1:     }
1:     
1: }
============================================================================