1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
10:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: 
1:bd0ad68: import org.apache.tools.ant.BuildException;
1:bd0ad68: import org.apache.tools.ant.Project;
1:bd0ad68: import org.apache.tools.ant.Task;
1:bd0ad68: import org.codehaus.jam.JamService;
1:bd0ad68: import org.codehaus.jam.JamServiceFactory;
1:bd0ad68: import org.codehaus.jam.JamServiceParams;
1:bd0ad68: 
1:bd0ad68: /**
1:b928ccb:  *
1:bd0ad68:  */
1:bd0ad68: public class JavaGeneratorTask extends Task {
1:540dd5c: 
1:540dd5c:     int version = 2;
1:540dd5c:     File basedir = new File(".");
1:b928ccb:     File outputdir = null;
1:b928ccb:     boolean generateMarshalers = true;
1:b928ccb:     boolean generateTests = true;
1:540dd5c: 
1:bd0ad68:     public static void main(String[] args) {
1:540dd5c: 
1:bd0ad68:         Project project = new Project();
1:bd0ad68:         project.init();
1:540dd5c:         JavaGeneratorTask generator = new JavaGeneratorTask();
1:540dd5c:         generator.setProject(project);
1:bd0ad68: 
1:540dd5c:         if (args.length > 0) {
1:540dd5c:             generator.version = Integer.parseInt(args[0]);
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         if (args.length > 1) {
1:540dd5c:             generator.basedir = new File(args[1]);
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         generator.execute();
1:540dd5c:     }
1:540dd5c: 
1:b928ccb:     @Override
1:bd0ad68:     public void execute() throws BuildException {
1:bd0ad68:         try {
1:540dd5c: 
1:540dd5c:             String sourceDir = basedir + "/src/main/java";
1:540dd5c: 
1:bd0ad68:             System.out.println("Parsing source files in: " + sourceDir);
1:bd0ad68: 
1:bd0ad68:             JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();
1:540dd5c:             JamServiceParams params = jamServiceFactory.createServiceParams();
1:540dd5c:             File[] dirs = new File[] {
1:540dd5c:                 new File(sourceDir)
1:540dd5c:             };
1:bd0ad68:             params.includeSourcePattern(dirs, "**/*.java");
1:bd0ad68:             JamService jam = jamServiceFactory.createService(params);
1:bd0ad68: 
1:b928ccb:             File outputBase = outputdir != null ? outputdir : basedir;
1:b928ccb: 
1:b928ccb:             if (generateMarshalers) {
1:540dd5c:                 JavaMarshallingGenerator script = new JavaMarshallingGenerator();
1:540dd5c:                 script.setJam(jam);
1:b928ccb:                 script.setTargetDir(outputBase + "/src/main/java");
1:540dd5c:                 script.setOpenwireVersion(version);
1:540dd5c:                 script.run();
8:bd0ad68:             }
1:b928ccb: 
1:b928ccb:             if (generateTests) {
1:540dd5c:                 JavaTestsGenerator script = new JavaTestsGenerator();
1:540dd5c:                 script.setJam(jam);
1:b928ccb:                 script.setTargetDir(outputBase + "/src/test/java");
1:540dd5c:                 script.setOpenwireVersion(version);
1:540dd5c:                 script.run();
1:bd0ad68:             }
1:540dd5c: 
1:bd0ad68:         } catch (Exception e) {
1:540dd5c:             throw new BuildException(e);
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     public int getVersion() {
1:540dd5c:         return version;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setVersion(int version) {
1:540dd5c:         this.version = version;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public File getBasedir() {
1:540dd5c:         return basedir;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setBasedir(File basedir) {
1:540dd5c:         this.basedir = basedir;
1:540dd5c:     }
1:bd0ad68: 
1:b928ccb:     public File getOutputdir() {
1:b928ccb:         return outputdir;
1:b928ccb:     }
1:b928ccb: 
1:b928ccb:     public void setOutputdir(File outputdir) {
1:b928ccb:         this.outputdir = outputdir;
1:b928ccb:     }
1:b928ccb: 
1:b928ccb:     public boolean isGenerateMarshalers() {
1:b928ccb:         return generateMarshalers;
1:b928ccb:     }
1:b928ccb: 
1:b928ccb:     public void setGenerateMarshalers(boolean generateMarshalers) {
1:b928ccb:         this.generateMarshalers = generateMarshalers;
1:b928ccb:     }
1:b928ccb: 
1:b928ccb:     public boolean isGenerateTests() {
1:b928ccb:         return generateTests;
1:b928ccb:     }
1:b928ccb: 
1:b928ccb:     public void setGenerateTests(boolean generateTests) {
1:b928ccb:         this.generateTests = generateTests;
1:b928ccb:     }
1:bd0ad68: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b928ccb
/////////////////////////////////////////////////////////////////////////
1:  *
1:     File outputdir = null;
1:     boolean generateMarshalers = true;
1:     boolean generateTests = true;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             File outputBase = outputdir != null ? outputdir : basedir;
1: 
1:             if (generateMarshalers) {
1:                 script.setTargetDir(outputBase + "/src/main/java");
1: 
1:             if (generateTests) {
1:                 script.setTargetDir(outputBase + "/src/test/java");
/////////////////////////////////////////////////////////////////////////
1:     public File getOutputdir() {
1:         return outputdir;
1:     }
1: 
1:     public void setOutputdir(File outputdir) {
1:         this.outputdir = outputdir;
1:     }
1: 
1:     public boolean isGenerateMarshalers() {
1:         return generateMarshalers;
1:     }
1: 
1:     public void setGenerateMarshalers(boolean generateMarshalers) {
1:         this.generateMarshalers = generateMarshalers;
1:     }
1: 
1:     public boolean isGenerateTests() {
1:         return generateTests;
1:     }
1: 
1:     public void setGenerateTests(boolean generateTests) {
1:         this.generateTests = generateTests;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1:     int version = 2;
1:     File basedir = new File(".");
1: 
1: 
1:         JavaGeneratorTask generator = new JavaGeneratorTask();
1:         generator.setProject(project);
1:         if (args.length > 0) {
1:             generator.version = Integer.parseInt(args[0]);
1:         }
1: 
1:         if (args.length > 1) {
1:             generator.basedir = new File(args[1]);
1:         }
1: 
1:         generator.execute();
1:     }
1: 
1: 
1:             String sourceDir = basedir + "/src/main/java";
1: 
1:             JamServiceParams params = jamServiceFactory.createServiceParams();
1:             File[] dirs = new File[] {
1:                 new File(sourceDir)
1:             };
1:                 JavaMarshallingGenerator script = new JavaMarshallingGenerator();
1:                 script.setJam(jam);
0:                 script.setTargetDir(basedir + "/src/main/java");
1:                 script.setOpenwireVersion(version);
1:                 script.run();
1:                 JavaTestsGenerator script = new JavaTestsGenerator();
1:                 script.setJam(jam);
0:                 script.setTargetDir(basedir + "/src/test/java");
1:                 script.setOpenwireVersion(version);
1:                 script.run();
1: 
1:             throw new BuildException(e);
1:     public int getVersion() {
1:         return version;
1:     }
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1:     public File getBasedir() {
1:         return basedir;
1:     }
1:     public void setBasedir(File basedir) {
1:         this.basedir = basedir;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.Task;
1: import org.codehaus.jam.JamService;
1: import org.codehaus.jam.JamServiceFactory;
1: import org.codehaus.jam.JamServiceParams;
1: 
1: /**
1:  * 
0:  * @version $Revision: 384826 $
1:  */
1: public class JavaGeneratorTask extends Task {
1: 	
0: 	int version = 2;
0: 	File basedir = new File(".");
1: 	
1:     public static void main(String[] args) {
1:     	
1:         Project project = new Project();
1:         project.init();
0:     	JavaGeneratorTask generator = new JavaGeneratorTask();
0:     	generator.setProject(project);
1:     	
0:     	if( args.length > 0 ) {
0:     		generator.version = Integer.parseInt(args[0]);
1:     	}
1: 
0:     	if( args.length > 1 ) {
0:     		generator.basedir = new File(args[1]);
1:     	}    	
1:     	
0:     	generator.execute();
1: 	}
1:     
1:     public void execute() throws BuildException {
1:         try {
1:         	
0:         	String sourceDir = basedir+"/src/main/java";
1:         	
1:             System.out.println("Parsing source files in: " + sourceDir);
1: 
1:             JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();
0:             JamServiceParams params = jamServiceFactory.createServiceParams();            
0:             File[] dirs = new File[]{new File(sourceDir)};            
1:             params.includeSourcePattern(dirs, "**/*.java");
1:             JamService jam = jamServiceFactory.createService(params);
1: 
0:             {
0: 	            JavaMarshallingGenerator script = new JavaMarshallingGenerator();
0: 	        	script.setJam(jam);
0: 	        	script.setTargetDir(basedir+"/src/main/java");
0: 	        	script.setOpenwireVersion(version);
0: 	        	script.run();
1:             }
0:             {
0: 	            JavaTestsGenerator script = new JavaTestsGenerator();
0: 	        	script.setJam(jam);
0: 	        	script.setTargetDir(basedir+"/src/test/java");
0: 	        	script.setOpenwireVersion(version);
0: 	        	script.run();
1:             }
1:             
1:         } catch (Exception e) {
0:         	throw new BuildException(e);
1:         }
1:     }
1: 
0: 	public int getVersion() {
0: 		return version;
1: 	}
1: 
0: 	public void setVersion(int version) {
0: 		this.version = version;
1: 	}
1: 
0: 	public File getBasedir() {
0: 		return basedir;
1: 	}
1: 
0: 	public void setBasedir(File basedir) {
0: 		this.basedir = basedir;
1: 	}
1: 
1: }
============================================================================