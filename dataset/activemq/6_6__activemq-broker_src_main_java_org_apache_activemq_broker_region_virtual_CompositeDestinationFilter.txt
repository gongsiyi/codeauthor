1:5096463: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:74a7a8b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
1:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region.virtual;
3:da67a38: 
1:4569d7d: import java.util.Collection;
1:4569d7d: import java.util.Iterator;
1:08bb172: import java.util.LinkedList;
1:08bb172: import java.util.concurrent.CountDownLatch;
1:08bb172: import java.util.concurrent.atomic.AtomicReference;
1:4569d7d: 
1:ecd5c2f: import org.apache.activemq.broker.Broker;
1:08bb172: import org.apache.activemq.broker.BrokerService;
1:4569d7d: import org.apache.activemq.broker.ProducerBrokerExchange;
1:da67a38: import org.apache.activemq.broker.region.Destination;
1:da67a38: import org.apache.activemq.broker.region.DestinationFilter;
1:da67a38: import org.apache.activemq.command.ActiveMQDestination;
1:da67a38: import org.apache.activemq.command.Message;
1:4f7aeec: import org.apache.activemq.filter.MessageEvaluationContext;
1:3b0afd6: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:da67a38: 
2:da67a38: /**
1:da67a38:  * Represents a composite {@link Destination} where send()s are replicated to
1:da67a38:  * each Destination instance.
1:da67a38:  */
1:42b768a: public class CompositeDestinationFilter extends DestinationFilter {
1:da67a38: 
1:da67a38:     private Collection forwardDestinations;
1:da67a38:     private boolean forwardOnly;
1:08bb172:     private boolean concurrentSend = false;
1:da67a38: 
1:5096463:     public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean concurrentSend) {
1:da67a38:         super(next);
1:da67a38:         this.forwardDestinations = forwardDestinations;
1:da67a38:         this.forwardOnly = forwardOnly;
1:08bb172:         this.concurrentSend = concurrentSend;
1:4ae7e1c:     }
1:4ae7e1c: 
1:5096463:     @Override
1:08bb172:     public void send(final ProducerBrokerExchange context, final Message message) throws Exception {
1:4f7aeec:         MessageEvaluationContext messageContext = null;
1:4f7aeec: 
1:08bb172:         Collection<ActiveMQDestination> matchingDestinations = new LinkedList<ActiveMQDestination>();
1:da67a38:         for (Iterator iter = forwardDestinations.iterator(); iter.hasNext();) {
1:4f7aeec:             ActiveMQDestination destination = null;
1:4f7aeec:             Object value = iter.next();
1:4f7aeec: 
1:4f7aeec:             if (value instanceof FilteredDestination) {
1:74a7a8b:                 FilteredDestination filteredDestination = (FilteredDestination)value;
1:4f7aeec:                 if (messageContext == null) {
1:3b0afd6:                     messageContext = new NonCachedMessageEvaluationContext();
1:4f7aeec:                     messageContext.setMessageReference(message);
1:4f7aeec:                 }
1:4f7aeec:                 messageContext.setDestination(filteredDestination.getDestination());
1:4f7aeec:                 if (filteredDestination.matches(messageContext)) {
1:4f7aeec:                     destination = filteredDestination.getDestination();
1:4f7aeec:                 }
1:74a7a8b:             } else if (value instanceof ActiveMQDestination) {
1:74a7a8b:                 destination = (ActiveMQDestination)value;
1:4f7aeec:             }
1:4f7aeec:             if (destination == null) {
1:4f7aeec:                 continue;
1:d77d82e:             }
1:08bb172:             matchingDestinations.add(destination);
1:08bb172:         }
1:4ae7e1c: 
1:08bb172:         final CountDownLatch concurrent = new CountDownLatch(concurrentSend ? matchingDestinations.size() : 0);
1:08bb172:         final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference<Exception>();
1:08bb172:         final BrokerService brokerService = context.getConnectionContext().getBroker().getBrokerService();
1:08bb172:         for (final ActiveMQDestination destination : matchingDestinations) {
1:08bb172:             if (concurrent.getCount() > 0) {
1:08bb172:                 brokerService.getTaskRunnerFactory().execute(new Runnable() {
1:08bb172:                     @Override
1:08bb172:                     public void run() {
1:08bb172:                         try {
1:08bb172:                             if (exceptionAtomicReference.get() == null) {
1:08bb172:                                 doForward(context.copy(), message, brokerService.getRegionBroker(), destination);
1:08bb172:                             }
1:08bb172:                         } catch (Exception e) {
1:08bb172:                             exceptionAtomicReference.set(e);
1:08bb172:                         } finally {
1:08bb172:                             concurrent.countDown();
1:08bb172:                         }
1:08bb172:                     }
1:08bb172:                 });
1:08bb172:             } else {
1:08bb172:                 doForward(context, message, brokerService.getRegionBroker(), destination);
1:08bb172:             }
1:4f7aeec:         }
1:da67a38:         if (!forwardOnly) {
1:da67a38:             super.send(context, message);
1:08bb172:         }
1:08bb172:         concurrent.await();
1:08bb172:         if (exceptionAtomicReference.get() != null) {
1:08bb172:             throw exceptionAtomicReference.get();
1:08bb172:         }
1:08bb172:     }
1:08bb172: 
1:08bb172:     private void doForward(ProducerBrokerExchange context, Message message, Broker regionBroker, ActiveMQDestination destination) throws Exception {
1:5096463:         Message forwardedMessage = message.copy();
1:7413ee0:         forwardedMessage.setMemoryUsage(null);
1:08bb172: 
1:5096463:         forwardedMessage.setOriginalDestination( message.getDestination() );
1:5096463:         forwardedMessage.setDestination(destination);
1:1ccd177: 
1:08bb172:         // Send it back through the region broker for routing.
1:08bb172:         context.setMutable(true);
1:5096463:         regionBroker.send(context, forwardedMessage);
1:4f7aeec:     }
5:da67a38: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:7413ee0
/////////////////////////////////////////////////////////////////////////
1:         forwardedMessage.setMemoryUsage(null);
commit:08bb172
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicReference;
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     private boolean concurrentSend = false;
0:     public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage, boolean concurrentSend) {
1:         this.concurrentSend = concurrentSend;
1:     public void send(final ProducerBrokerExchange context, final Message message) throws Exception {
1:         Collection<ActiveMQDestination> matchingDestinations = new LinkedList<ActiveMQDestination>();
/////////////////////////////////////////////////////////////////////////
1:             matchingDestinations.add(destination);
1:         }
1:         final CountDownLatch concurrent = new CountDownLatch(concurrentSend ? matchingDestinations.size() : 0);
1:         final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference<Exception>();
1:         final BrokerService brokerService = context.getConnectionContext().getBroker().getBrokerService();
1:         for (final ActiveMQDestination destination : matchingDestinations) {
1:             if (concurrent.getCount() > 0) {
1:                 brokerService.getTaskRunnerFactory().execute(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             if (exceptionAtomicReference.get() == null) {
1:                                 doForward(context.copy(), message, brokerService.getRegionBroker(), destination);
1:                             }
1:                         } catch (Exception e) {
1:                             exceptionAtomicReference.set(e);
1:                         } finally {
1:                             concurrent.countDown();
1:                         }
1:                     }
1:                 });
1:             } else {
1:                 doForward(context, message, brokerService.getRegionBroker(), destination);
1:         concurrent.await();
1:         if (exceptionAtomicReference.get() != null) {
1:             throw exceptionAtomicReference.get();
1:         }
1:     }
1: 
1:     private void doForward(ProducerBrokerExchange context, Message message, Broker regionBroker, ActiveMQDestination destination) throws Exception {
0:         Message forwarded_message;
0:         if (copyMessage) {
0:             forwarded_message = message.copy();
0:             forwarded_message.setDestination(destination);
1:         }
0:         else {
0:             forwarded_message = message;
1:         }
1: 
1:         // Send it back through the region broker for routing.
1:         context.setMutable(true);
0:         regionBroker.send(context, forwarded_message);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5096463
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:     public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean concurrentSend) {
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         Message forwardedMessage = message.copy();
1:         forwardedMessage.setOriginalDestination( message.getDestination() );
1:         forwardedMessage.setDestination(destination);
1:         regionBroker.send(context, forwardedMessage);
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:1ccd177
/////////////////////////////////////////////////////////////////////////
1: 
0:             forwarded_message.setOriginalDestination( message.getDestination() );
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecd5c2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0:             // Send it back through the region broker for routing.
0:             context.setMutable(true);
0:             Broker regionBroker = context.getConnectionContext().getBroker().getBrokerService().getRegionBroker();
0:             regionBroker.send(context, forwarded_message);
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:                 FilteredDestination filteredDestination = (FilteredDestination)value;
/////////////////////////////////////////////////////////////////////////
1:             } else if (value instanceof ActiveMQDestination) {
1:                 destination = (ActiveMQDestination)value;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange context, Message message) throws Exception {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:d77d82e
/////////////////////////////////////////////////////////////////////////
0:             Message forwarded_message;
0:                 forwarded_message = message.copy();
0:                 forwarded_message.setDestination(destination);
1:             }
0:             else {
0:                 forwarded_message = message;
0:             send(context, forwarded_message, destination);
commit:3b0afd6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
/////////////////////////////////////////////////////////////////////////
1:                     messageContext = new NonCachedMessageEvaluationContext();
author:James Strachan
-------------------------------------------------------------------------------
commit:42b768a
/////////////////////////////////////////////////////////////////////////
1: public class CompositeDestinationFilter extends DestinationFilter {
0:     public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage) {
commit:4f7aeec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.MessageEvaluationContext;
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:         MessageEvaluationContext messageContext = null;
1: 
1:             ActiveMQDestination destination = null;
1:             Object value = iter.next();
1: 
1:             if (value instanceof FilteredDestination) {
0:                 FilteredDestination filteredDestination = (FilteredDestination) value;
1:                 if (messageContext == null) {
0:                     messageContext = new MessageEvaluationContext();
1:                     messageContext.setMessageReference(message);
1:                 }
1:                 messageContext.setDestination(filteredDestination.getDestination());
1:                 if (filteredDestination.matches(messageContext)) {
1:                     destination = filteredDestination.getDestination();
1:                 }
1:             }
0:             else if (value instanceof ActiveMQDestination) {
0:                 destination = (ActiveMQDestination) value;
1:             }
1:             if (destination == null) {
1:                 continue;
1:             }
commit:4ae7e1c
/////////////////////////////////////////////////////////////////////////
0:     private boolean copyMessage;
0:     public CompositeDestinationInterceptor(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage) {
0:         this.copyMessage = copyMessage;
1: 
0:             if (copyMessage) {
0:                 message = message.copy();
0:                 message.setDestination(destination);
1:             }
1: 
commit:da67a38
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: 
0: import java.util.Collection;
0: import java.util.Iterator;
1: 
1: /**
1:  * Represents a composite {@link Destination} where send()s are replicated to
1:  * each Destination instance.
0:  * 
0:  * @version $Revision$
1:  */
0: public class CompositeDestinationInterceptor extends DestinationFilter {
1: 
1:     private Collection forwardDestinations;
1:     private boolean forwardOnly;
1: 
0:     public CompositeDestinationInterceptor(Destination next, Collection forwardDestinations, boolean forwardOnly) {
1:         super(next);
1:         this.forwardDestinations = forwardDestinations;
1:         this.forwardOnly = forwardOnly;
1:     }
1: 
0:     public void send(ConnectionContext context, Message message) throws Exception {
1:         for (Iterator iter = forwardDestinations.iterator(); iter.hasNext();) {
0:             ActiveMQDestination destination = (ActiveMQDestination) iter.next();
0:             send(context, message, destination);
1:         }
1:         if (!forwardOnly) {
1:             super.send(context, message);
1:         }
1:     }
1: }
============================================================================