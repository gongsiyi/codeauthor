1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.http;
5:40a7d3b: 
1:f451ad0: import java.io.IOException;
1:f451ad0: import java.net.MalformedURLException;
1:f451ad0: import java.net.URI;
1:ee4c8ee: import java.net.URISyntaxException;
1:ee4c8ee: import java.util.HashMap;
1:ff30070: import java.util.Map;
1:f451ad0: 
1:8abcfd1: import org.apache.activemq.transport.Transport;
1:8abcfd1: import org.apache.activemq.transport.TransportFactory;
1:c4d8d86: import org.apache.activemq.transport.TransportLoggerFactory;
1:8abcfd1: import org.apache.activemq.transport.TransportServer;
1:8abcfd1: import org.apache.activemq.transport.util.TextWireFormat;
1:8abcfd1: import org.apache.activemq.transport.xstream.XStreamWireFormat;
1:ee4c8ee: import org.apache.activemq.util.IOExceptionSupport;
1:ee4c8ee: import org.apache.activemq.util.IntrospectionSupport;
1:ee4c8ee: import org.apache.activemq.util.URISupport;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8a3bdd9: 
1:40a7d3b: public class HttpTransportFactory extends TransportFactory {
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(HttpTransportFactory.class);
1:40a7d3b: 
1:473b328:     @Override
1:622df54:     public TransportServer doBind(URI location) throws IOException {
1:ee4c8ee:         try {
1:ee4c8ee:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:ee4c8ee:             HttpTransportServer result = new HttpTransportServer(location, this);
1:473b328:             Map<String, Object> httpOptions = IntrospectionSupport.extractProperties(options, "http.");
1:ee4c8ee:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:ee4c8ee:             result.setTransportOption(transportOptions);
1:473b328:             result.setHttpOptions(httpOptions);
1:ee4c8ee:             return result;
1:ee4c8ee:         } catch (URISyntaxException e) {
1:ee4c8ee:             throw IOExceptionSupport.create(e);
1:ee4c8ee:         }
3:40a7d3b:     }
1:ee4c8ee: 
1:40a7d3b:     protected TextWireFormat asTextWireFormat(WireFormat wireFormat) {
1:40a7d3b:         if (wireFormat instanceof TextWireFormat) {
1:540dd5c:             return (TextWireFormat)wireFormat;
1:40a7d3b:         }
1:e47edd7:         LOG.trace("Not created with a TextWireFormat: {}", wireFormat);
1:40a7d3b:         return new XStreamWireFormat();
1:40a7d3b:     }
1:40a7d3b: 
1:473b328:     @Override
1:40a7d3b:     protected String getDefaultWireFormatType() {
1:40a7d3b:         return "xstream";
1:40a7d3b:     }
1:40a7d3b: 
1:473b328:     @Override
1:ff30070:     protected Transport createTransport(URI location, WireFormat wf) throws IOException {
1:540dd5c:         TextWireFormat textWireFormat = asTextWireFormat(wf);
1:6cc5f40:         // need to remove options from uri
1:6cc5f40:         URI uri;
1:6cc5f40:         try {
1:6cc5f40:             uri = URISupport.removeQuery(location);
1:6cc5f40:         } catch (URISyntaxException e) {
1:6cc5f40:             MalformedURLException cause = new MalformedURLException("Error removing query on " + location);
1:6cc5f40:             cause.initCause(e);
1:6cc5f40:             throw cause;
1:ff30070:         }
1:6cc5f40:         return new HttpClientTransport(textWireFormat, uri);
1:6cc5f40:     }
1:540dd5c: 
1:473b328:     @Override
1:8a3bdd9:     @SuppressWarnings("rawtypes")
1:ee4c8ee:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:ee4c8ee:         return compositeConfigure(transport, format, options);
1:ee4c8ee:     }
1:ff30070: 
1:473b328:     @Override
1:8a3bdd9:     @SuppressWarnings("rawtypes")
1:ff30070:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:ee4c8ee:         transport = super.compositeConfigure(transport, format, options);
1:e47edd7:         HttpClientTransport httpTransport = transport.narrow(HttpClientTransport.class);
1:e47edd7:         if (httpTransport != null && httpTransport.isTrace()) {
1:c4d8d86:             try {
1:c4d8d86:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport);
1:c4d8d86:             } catch (Throwable e) {
1:c4d8d86:                 LOG.error("Could not create TransportLogger object for: " + TransportLoggerFactory.defaultLogWriterName + ", reason: " + e, e);
1:c4d8d86:             }
1:540dd5c:         }
1:ee4c8ee:         boolean useInactivityMonitor = "true".equals(getOption(options, "useInactivityMonitor", "true"));
1:ee4c8ee:         if (useInactivityMonitor) {
1:e47edd7:             transport = new HttpInactivityMonitor(transport);
1:ee4c8ee:             IntrospectionSupport.setProperties(transport, options);
1:ff30070:         }
1:ee4c8ee: 
1:540dd5c:         return transport;
1:ee4c8ee:     }
1:13a9200: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47edd7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.trace("Not created with a TextWireFormat: {}", wireFormat);
/////////////////////////////////////////////////////////////////////////
1:         HttpClientTransport httpTransport = transport.narrow(HttpClientTransport.class);
1:         if (httpTransport != null && httpTransport.isTrace()) {
/////////////////////////////////////////////////////////////////////////
1:             transport = new HttpInactivityMonitor(transport);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:473b328
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             Map<String, Object> httpOptions = IntrospectionSupport.extractProperties(options, "http.");
1:             result.setHttpOptions(httpOptions);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:622df54
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(URI location) throws IOException {
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com (logging improvement modifications)
/////////////////////////////////////////////////////////////////////////
0:         HttpClientTransport httpTransport = (HttpClientTransport) super.compositeConfigure(transport, format, options);
0:         if( httpTransport.isTrace() ) {
1:             try {
1:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport);
1:             } catch (Throwable e) {
1:                 LOG.error("Could not create TransportLogger object for: " + TransportLoggerFactory.defaultLogWriterName + ", reason: " + e, e);
1:             }
commit:19f9722
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLogger;
/////////////////////////////////////////////////////////////////////////
0:         HttpClientTransport httpTransport = (HttpClientTransport)super.compositeConfigure(transport, format, options);
0:         if (httpTransport.isTrace()) {
0:             transport = new TransportLogger(httpTransport);
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final Log LOG = LogFactory.getLog(HttpTransportFactory.class);
/////////////////////////////////////////////////////////////////////////
1:             return (TextWireFormat)wireFormat;
0:         LOG.trace("Not created with a TextWireFormat: " + wireFormat);
/////////////////////////////////////////////////////////////////////////
1:         TextWireFormat textWireFormat = asTextWireFormat(wf);
0:         return new HttpClientTransport(textWireFormat, location);
1: 
0:         HttpClientTransport httpTransport = (HttpClientTransport)super.compositeConfigure(transport, format, options);
0:         transport = httpTransport;
0:         if (httpTransport.isTrace()) {
0:             transport = new TransportLogger(httpTransport);
1:         }
1:         return transport;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:ff30070
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0: import org.apache.activemq.transport.TransportLogger;
/////////////////////////////////////////////////////////////////////////
1:     protected Transport createTransport(URI location, WireFormat wf) throws IOException {
0: 		TextWireFormat textWireFormat = asTextWireFormat(wf);
0: 		return new HttpClientTransport(textWireFormat, location);
1:     }
1:     
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:     	HttpClientTransport httpTransport = (HttpClientTransport) super.compositeConfigure(transport, format, options);
0: 		transport = httpTransport;
0:     	if( httpTransport.isTrace() ) {
0: 			transport = new TransportLogger(httpTransport);
1:     	}
0: 		return transport;
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: 
0: import org.apache.activeio.command.WireFormat;
/////////////////////////////////////////////////////////////////////////
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
0: import org.apache.activemq.transport.MutexTransport;
0: import org.apache.activemq.transport.ResponseCorrelator;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.util.TextWireFormat;
1: import org.apache.activemq.transport.xstream.XStreamWireFormat;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:6cc5f40
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1:         // need to remove options from uri
1:         URI uri;
1:         try {
1:             uri = URISupport.removeQuery(location);
1:         } catch (URISyntaxException e) {
1:             MalformedURLException cause = new MalformedURLException("Error removing query on " + location);
1:             cause.initCause(e);
1:             throw cause;
1:         }
1:         return new HttpClientTransport(textWireFormat, uri);
commit:d4ee73f
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e778467
/////////////////////////////////////////////////////////////////////////
commit:8a3bdd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     @SuppressWarnings("rawtypes")
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(HttpTransportFactory.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
0: import org.apache.activemq.transport.InactivityMonitor;
0: import org.apache.activemq.transport.MutexTransport;
0: import org.apache.activemq.transport.ThreadNameFilter;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:             HttpTransportServer result = new HttpTransportServer(location, this);
1:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:             result.setTransportOption(transportOptions);
1:             return result;
1:         } catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         return compositeConfigure(transport, format, options);
1:     }
1: 
1:         transport = super.compositeConfigure(transport, format, options);
0:         HttpClientTransport httpTransport = (HttpClientTransport)transport.narrow(HttpClientTransport.class);
0:         if(httpTransport != null && httpTransport.isTrace() ) {
1:         boolean useInactivityMonitor = "true".equals(getOption(options, "useInactivityMonitor", "true"));
1:         if (useInactivityMonitor) {
0:             transport = new InactivityMonitor(transport, null /* ignore wire format as no negotiation over http */);
1:             IntrospectionSupport.setProperties(transport, options);
1:         }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:13a9200
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportLoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:         HttpClientTransport httpTransport = (HttpClientTransport) super.compositeConfigure(transport, format, options);
0:         if( httpTransport.isTrace() ) {
0:             try {
0:                 transport = TransportLoggerFactory.getInstance().createTransportLogger(transport);
0:             } catch (Throwable e) {
0:                 LOG.error("Could not create TransportLogger object for: " + TransportLoggerFactory.defaultLogWriterName + ", reason: " + e, e);
1:             }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:081b0e3
/////////////////////////////////////////////////////////////////////////
commit:7027fe6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         log.trace("Not created with a TextWireFormat: " + wireFormat);
/////////////////////////////////////////////////////////////////////////
0:         //transport = new MutexTransport(transport);
0:         //transport = new ResponseCorrelator(transport);
author:James Strachan
-------------------------------------------------------------------------------
commit:0684e20
/////////////////////////////////////////////////////////////////////////
0:         TextWireFormat textWireFormat = asTextWireFormat(wf);
0:         Transport transport = new HttpClientTransport(textWireFormat, location);
0:         //Transport transport = new HttpTransport(textWireFormat, location);
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.http;
1: 
0: import org.activeio.command.WireFormat;
0: import org.activemq.transport.MutexTransport;
0: import org.activemq.transport.ResponseCorrelator;
0: import org.activemq.transport.Transport;
0: import org.activemq.transport.TransportFactory;
0: import org.activemq.transport.TransportServer;
0: import org.activemq.transport.util.TextWireFormat;
0: import org.activemq.transport.xstream.XStreamWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.io.IOException;
0: import java.net.MalformedURLException;
0: import java.net.URI;
1: 
0: /**
0:  * @version $Revision$
0:  */
1: public class HttpTransportFactory extends TransportFactory {
0:     private static final Log log = LogFactory.getLog(HttpTransportFactory.class);
1: 
0:     public TransportServer doBind(String brokerId, URI location) throws IOException {
0:         return new HttpTransportServer(location);
1:     }
1: 
1:     protected TextWireFormat asTextWireFormat(WireFormat wireFormat) {
1:         if (wireFormat instanceof TextWireFormat) {
0:             return (TextWireFormat) wireFormat;
1:         }
0:         log.trace("Not created with a TextWireFromat: " + wireFormat);
1:         return new XStreamWireFormat();
1:     }
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "xstream";
1:     }
1: 
0:     protected Transport createTransport(URI location, WireFormat wf) throws MalformedURLException {
0:         Transport transport = new HttpTransport(asTextWireFormat(wf), location);
0:         transport = new MutexTransport(transport);
0:         transport = new ResponseCorrelator(transport);
0:         return transport;
1:     }
1: 
1: }
============================================================================