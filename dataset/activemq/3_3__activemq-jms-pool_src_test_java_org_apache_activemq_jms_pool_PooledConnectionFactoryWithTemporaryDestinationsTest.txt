2:d226f50: /**
1:d226f50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d226f50:  * contributor license agreements.  See the NOTICE file distributed with
1:d226f50:  * this work for additional information regarding copyright ownership.
1:d226f50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d226f50:  * (the "License"); you may not use this file except in compliance with
1:d226f50:  * the License.  You may obtain a copy of the License at
1:d226f50:  *
1:d226f50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d226f50:  *
1:d226f50:  * Unless required by applicable law or agreed to in writing, software
1:d226f50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d226f50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d226f50:  * See the License for the specific language governing permissions and
1:d226f50:  * limitations under the License.
2:d226f50:  */
1:b66559e: package org.apache.activemq.jms.pool;
7:d226f50: 
1:e6597c4: import static org.junit.Assert.assertEquals;
1:e6597c4: 
1:e6597c4: import javax.jms.Connection;
1:d226f50: import javax.jms.Queue;
1:d226f50: import javax.jms.Session;
1:d226f50: import javax.jms.Topic;
1:320d87c: 
1:e6597c4: import org.apache.activemq.ActiveMQConnectionFactory;
1:d226f50: import org.apache.activemq.broker.BrokerService;
1:d226f50: import org.apache.activemq.broker.TransportConnector;
1:d226f50: import org.apache.activemq.broker.region.RegionBroker;
1:e6597c4: import org.junit.Before;
1:e6597c4: import org.junit.Test;
1:d226f50: import org.slf4j.Logger;
1:d226f50: import org.slf4j.LoggerFactory;
1:d226f50: 
1:e6597c4: public class PooledConnectionFactoryWithTemporaryDestinationsTest extends JmsPoolTestSupport {
1:d226f50: 
1:d226f50:     private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionFactoryWithTemporaryDestinationsTest.class);
1:d226f50: 
1:d226f50:     private ActiveMQConnectionFactory factory;
1:d226f50:     private PooledConnectionFactory pooledFactory;
1:d226f50: 
1:e6597c4:     @Override
1:e6597c4:     @Before
1:e6597c4:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.start();
1:d226f50:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false");
1:b66559e:         pooledFactory = new PooledConnectionFactory();
1:b66559e:         pooledFactory.setConnectionFactory(factory);
2:d226f50:     }
1:320d87c: 
1:e6597c4:     @Test(timeout = 60000)
1:320d87c:     public void testTemporaryQueueWithMultipleConnectionUsers() throws Exception {
1:320d87c:         Connection pooledConnection = null;
1:320d87c:         Connection pooledConnection2 = null;
1:320d87c:         Session session = null;
1:320d87c:         Session session2 = null;
1:320d87c:         Queue tempQueue = null;
1:320d87c:         Queue normalQueue = null;
1:26b69e4: 
1:320d87c:         pooledConnection = pooledFactory.createConnection();
1:320d87c:         session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:320d87c:         tempQueue = session.createTemporaryQueue();
1:320d87c:         LOG.info("Created queue named: " + tempQueue.getQueueName());
1:26b69e4: 
1:320d87c:         assertEquals(1, countBrokerTemporaryQueues());
1:26b69e4: 
1:320d87c:         pooledConnection2 = pooledFactory.createConnection();
1:320d87c:         session2 = pooledConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:320d87c:         normalQueue = session2.createQueue("queue:FOO.TEST");
1:26b69e4:         LOG.info("Created queue named: " + normalQueue.getQueueName());
1:320d87c: 
1:320d87c:         // didn't create a temp queue on pooledConnection2 so we should still have a temp queue
1:26b69e4:         pooledConnection2.close();
1:320d87c:         assertEquals(1, countBrokerTemporaryQueues());
1:26b69e4: 
1:26b69e4:         // after closing pooledConnection, where we created the temp queue, there should
1:320d87c:         // be no temp queues left
1:26b69e4:         pooledConnection.close();
1:320d87c:         assertEquals(0, countBrokerTemporaryQueues());
1:320d87c:     }
1:26b69e4: 
1:e6597c4:     @Test(timeout = 60000)
1:d226f50:     public void testTemporaryQueueLeakAfterConnectionClose() throws Exception {
1:d226f50:         Connection pooledConnection = null;
1:d226f50:         Session session = null;
1:d226f50:         Queue tempQueue = null;
1:d226f50:         for (int i = 0; i < 2; i++) {
1:d226f50:             pooledConnection = pooledFactory.createConnection();
1:d226f50:             session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d226f50:             tempQueue = session.createTemporaryQueue();
1:d226f50:             LOG.info("Created queue named: " + tempQueue.getQueueName());
1:320d87c:             pooledConnection.close();
1:d226f50:         }
1:320d87c: 
1:d226f50:         assertEquals(0, countBrokerTemporaryQueues());
1:d226f50:     }
1:320d87c: 
1:e6597c4:     @Test(timeout = 60000)
1:d226f50:     public void testTemporaryTopicLeakAfterConnectionClose() throws Exception {
1:d226f50:         Connection pooledConnection = null;
1:d226f50:         Session session = null;
1:d226f50:         Topic tempTopic = null;
1:d226f50:         for (int i = 0; i < 2; i++) {
1:d226f50:             pooledConnection = pooledFactory.createConnection();
1:d226f50:             session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d226f50:             tempTopic = session.createTemporaryTopic();
1:d226f50:             LOG.info("Created topic named: " + tempTopic.getTopicName());
2:d226f50:             pooledConnection.close();
1:d226f50:         }
1:320d87c: 
1:d226f50:         assertEquals(0, countBrokerTemporaryTopics());
1:d226f50:     }
1:d226f50: 
1:d226f50:     private int countBrokerTemporaryQueues() throws Exception {
1:e6597c4:         return ((RegionBroker) brokerService.getRegionBroker()).getTempQueueRegion().getDestinationMap().size();
1:d226f50:     }
1:d226f50: 
1:d226f50:     private int countBrokerTemporaryTopics() throws Exception {
1:e6597c4:         return ((RegionBroker) brokerService.getRegionBroker()).getTempTopicRegion().getDestinationMap().size();
1:d226f50:     }
1:d226f50: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.Connection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class PooledConnectionFactoryWithTemporaryDestinationsTest extends JmsPoolTestSupport {
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setAdvisorySupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         return ((RegionBroker) brokerService.getRegionBroker()).getTempQueueRegion().getDestinationMap().size();
1:         return ((RegionBroker) brokerService.getRegionBroker()).getTempTopicRegion().getDestinationMap().size();
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledFactory = new PooledConnectionFactory();
1:         pooledFactory.setConnectionFactory(factory);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:26b69e4
/////////////////////////////////////////////////////////////////////////
0:         broker.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         LOG.info("Created queue named: " + normalQueue.getQueueName());
1:         pooledConnection2.close();
1: 
1:         // after closing pooledConnection, where we created the temp queue, there should
1:         pooledConnection.close();
1: 
commit:320d87c
/////////////////////////////////////////////////////////////////////////
1:     public void testTemporaryQueueWithMultipleConnectionUsers() throws Exception {
1:         Connection pooledConnection = null;
1:         Connection pooledConnection2 = null;
1:         Session session = null;
1:         Session session2 = null;
1:         Queue tempQueue = null;
1:         Queue normalQueue = null;
1:         
1:         pooledConnection = pooledFactory.createConnection();
1:         session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         tempQueue = session.createTemporaryQueue();
1:         LOG.info("Created queue named: " + tempQueue.getQueueName());
1:         
1:         assertEquals(1, countBrokerTemporaryQueues());
1:         
1:         pooledConnection2 = pooledFactory.createConnection();
1:         session2 = pooledConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         normalQueue = session2.createQueue("queue:FOO.TEST");
0:         LOG.info("Created queue named: " + normalQueue.getQueueName());        
1: 
1:         // didn't create a temp queue on pooledConnection2 so we should still have a temp queue
0:         pooledConnection2.close();        
1:         assertEquals(1, countBrokerTemporaryQueues());
1:         
0:         // after closing pooledConnection, where we created the temp queue, there should 
1:         // be no temp queues left
1:         pooledConnection.close();        
1:         assertEquals(0, countBrokerTemporaryQueues());
1:     }
1:     
commit:d226f50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
1: 
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
0: import javax.jms.Connection;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.test.TestSupport;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
0: public class PooledConnectionFactoryWithTemporaryDestinationsTest extends TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionFactoryWithTemporaryDestinationsTest.class);
1: 
0:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private PooledConnectionFactory pooledFactory;
1: 
0:     protected void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
0:         broker.start();
1:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri() + "?closeAsync=false");
0:         pooledFactory = new PooledConnectionFactory(factory);
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         broker.stop();
1:     }
1: 
1:     public void testTemporaryQueueLeakAfterConnectionClose() throws Exception {
1:         Connection pooledConnection = null;
1:         Session session = null;
1:         Queue tempQueue = null;
1:         for (int i = 0; i < 2; i++) {
1:             pooledConnection = pooledFactory.createConnection();
1:             session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             tempQueue = session.createTemporaryQueue();
1:             LOG.info("Created queue named: " + tempQueue.getQueueName());
1:             pooledConnection.close();
1:         }
1: 
1:         assertEquals(0, countBrokerTemporaryQueues());
1:     }
1: 
1:     public void testTemporaryTopicLeakAfterConnectionClose() throws Exception {
1:         Connection pooledConnection = null;
1:         Session session = null;
1:         Topic tempTopic = null;
1:         for (int i = 0; i < 2; i++) {
1:             pooledConnection = pooledFactory.createConnection();
1:             session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             tempTopic = session.createTemporaryTopic();
1:             LOG.info("Created topic named: " + tempTopic.getTopicName());
1:             pooledConnection.close();
1:         }
1: 
1:         assertEquals(0, countBrokerTemporaryTopics());
1:     }
1: 
1:     private int countBrokerTemporaryQueues() throws Exception {
0:         return ((RegionBroker) broker.getRegionBroker()).getTempQueueRegion().getDestinationMap().size();
1:     }
1: 
1:     private int countBrokerTemporaryTopics() throws Exception {
0:         return ((RegionBroker) broker.getRegionBroker()).getTempTopicRegion().getDestinationMap().size();
1:     }
1: }
============================================================================