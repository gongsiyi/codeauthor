1:3c776cf: /**
1:3c776cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c776cf:  * contributor license agreements.  See the NOTICE file distributed with
1:3c776cf:  * this work for additional information regarding copyright ownership.
1:3c776cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c776cf:  * (the "License"); you may not use this file except in compliance with
1:3c776cf:  * the License.  You may obtain a copy of the License at
1:3c776cf:  *
1:3c776cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3c776cf:  *
1:3c776cf:  * Unless required by applicable law or agreed to in writing, software
1:3c776cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c776cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c776cf:  * See the License for the specific language governing permissions and
1:3c776cf:  * limitations under the License.
1:3c776cf:  */
1:3c776cf: package org.apache.activemq.console.command;
4:3c776cf: 
1:dc290ec: import java.util.Collections;
1:dc290ec: import java.util.Comparator;
1:3c776cf: import java.util.List;
1:3c776cf: import java.util.Locale;
1:3c776cf: import javax.management.MBeanServerInvocationHandler;
1:3c776cf: import javax.management.ObjectInstance;
1:3c776cf: import javax.management.ObjectName;
1:3c776cf: 
1:dc290ec: import org.apache.activemq.broker.jmx.QueueView;
1:3c776cf: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:dc290ec: import org.apache.activemq.broker.jmx.TopicView;
1:3c776cf: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:3c776cf: import org.apache.activemq.console.util.JmxMBeansUtil;
1:3c776cf: 
1:3c776cf: public class DstatCommand extends AbstractJmxCommand {
1:3c776cf: 
1:3c776cf:     private static final String queryString =
1:3c776cf:         "type=Broker,brokerName=*,destinationType=%1,destinationName=*,*";
1:3c776cf: 
1:3c776cf:     protected String[] helpFile = new String[] {
1:3c776cf:         "Task Usage: activemq-admin dstat [dstat-options] [destination-type]",
1:3c776cf:         "Description: Performs a predefined query that displays useful statistics regarding the specified .",
1:3c776cf:         "             destination type (Queues or Topics) and displays those results in a tabular format.",
1:3c776cf:         "             If no broker name is specified, it will try and select from all registered brokers.",
1:3c776cf:         "",
1:3c776cf:         "dstat Options:",
1:3c776cf:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:3c776cf:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
1:3c776cf:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:3c776cf:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:3c776cf:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:3c776cf:         "    --version                     Display the version information.",
1:3c776cf:         "    -h,-?,--help                  Display the query broker help information.",
1:3c776cf:         "",
1:3c776cf:         "Examples:",
1:3c776cf:         "    activemq-admin dstat queues",
1:3c776cf:         "        - Display a tabular summary of statistics for the queues on the broker.",
1:3c776cf:         "    activemq-admin dstat topics",
1:3c776cf:         "        - Display a tabular summary of statistics for the queues on the broker."
1:3c776cf:     };
1:3c776cf: 
1:3c776cf:     /**
1:3c776cf:      * Execute the dstat command, which allows you to display information for topics or queue in
1:3c776cf:      * a tabular format.
1:3c776cf:      *
1:3c776cf:      * @param tokens - command arguments
1:3c776cf:      * @throws Exception
1:3c776cf:      */
1:3c776cf:     @Override
1:3c776cf:     protected void runTask(List<String> tokens) throws Exception {
1:73f9131:         if (tokens.contains("topics")) {
1:73f9131:             displayTopicStats();
1:73f9131:         } else if (tokens.contains("queues")) {
1:73f9131:             displayQueueStats();
1:73f9131:         } else {
1:73f9131:             displayAllDestinations();
2:3c776cf:         }
1:3c776cf:     }
1:3c776cf: 
1:dc290ec:     @SuppressWarnings("unchecked")
1:ee8b51b:     private void displayAllDestinations() throws Exception {
1:3c776cf: 
1:3c776cf:         String query = JmxMBeansUtil.createQueryString(queryString, "*");
1:dc290ec:         List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:3c776cf: 
1:0f4a9b7:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:0f4a9b7:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
1:3c776cf: 
1:dc290ec:         // sort list so the names is A..Z
1:dc290ec:         Collections.sort(queueList, new ObjectInstanceComparator());
1:dc290ec: 
1:25e3c1b:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %"));
1:3c776cf: 
1:3c776cf:         // Iterate through the queue result
1:3c776cf:         for (Object view : queueList) {
1:dc290ec:             ObjectInstance obj = (ObjectInstance) view;
1:dc290ec:             if (!filterMBeans(obj)) {
1:dc290ec:                 continue;
1:dc290ec:             }
1:dc290ec:             ObjectName queueName = obj.getObjectName();
1:dc290ec: 
1:3c776cf:             QueueViewMBean queueView = MBeanServerInvocationHandler.
1:3c776cf:                 newProxyInstance(createJmxConnection(), queueName, QueueViewMBean.class, true);
1:3c776cf: 
1:3c776cf:             context.print(String.format(Locale.US, tableRow,
1:8089e0d:                     queueView.getName(),
1:8089e0d:                     queueView.getQueueSize(),
1:8089e0d:                     queueView.getProducerCount(),
1:8089e0d:                     queueView.getConsumerCount(),
1:8089e0d:                     queueView.getEnqueueCount(),
1:8089e0d:                     queueView.getDequeueCount(),
1:25e3c1b:                     queueView.getForwardCount(),
1:8089e0d:                     queueView.getMemoryPercentUsage()));
1:3c776cf:         }
1:3c776cf:     }
1:3c776cf: 
1:dc290ec:     @SuppressWarnings("unchecked")
1:ee8b51b:     private void displayQueueStats() throws Exception {
1:3c776cf: 
1:3c776cf:         String query = JmxMBeansUtil.createQueryString(queryString, "Queue");
1:dc290ec:         List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:dc290ec: 
1:044699c:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:044699c:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
1:dc290ec: 
1:044699c:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %", "Inflight #"));
1:3c776cf: 
1:dc290ec:         Collections.sort(queueList, new ObjectInstanceComparator());
1:3c776cf: 
1:3c776cf:         // Iterate through the queue result
1:3c776cf:         for (Object view : queueList) {
1:dc290ec:             ObjectInstance obj = (ObjectInstance) view;
1:dc290ec:             if (!filterMBeans(obj)) {
1:dc290ec:                 continue;
1:dc290ec:             }
1:dc290ec:             ObjectName queueName = obj.getObjectName();
1:3c776cf: 
1:3c776cf:             QueueViewMBean queueView = MBeanServerInvocationHandler.
1:3c776cf:                 newProxyInstance(createJmxConnection(), queueName, QueueViewMBean.class, true);
1:3c776cf: 
1:3c776cf:             context.print(String.format(Locale.US, tableRow,
1:8089e0d:                     queueView.getName(),
1:8089e0d:                     queueView.getQueueSize(),
1:8089e0d:                     queueView.getProducerCount(),
1:8089e0d:                     queueView.getConsumerCount(),
1:8089e0d:                     queueView.getEnqueueCount(),
1:8089e0d:                     queueView.getDequeueCount(),
1:25e3c1b:                     queueView.getForwardCount(),
1:044699c:                     queueView.getMemoryPercentUsage(),
1:044699c:                     queueView.getInFlightCount()));
1:3c776cf:         }
1:3c776cf:     }
1:3c776cf: 
1:dc290ec:     @SuppressWarnings("unchecked")
1:ee8b51b:     private void displayTopicStats() throws Exception {
1:3c776cf: 
1:3c776cf:         String query = JmxMBeansUtil.createQueryString(queryString, "Topic");
1:dc290ec:         List topicsList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:3c776cf: 
1:0f4a9b7:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:0f4a9b7:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
1:3c776cf: 
1:dc290ec:         // sort list so the names is A..Z
1:dc290ec:         Collections.sort(topicsList, new ObjectInstanceComparator());
1:dc290ec: 
1:25e3c1b:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %"));
1:3c776cf: 
1:3c776cf:         // Iterate through the topics result
1:3c776cf:         for (Object view : topicsList) {
1:dc290ec:             ObjectInstance obj = (ObjectInstance) view;
1:dc290ec:             if (!filterMBeans(obj)) {
1:dc290ec:                 continue;
1:dc290ec:             }
1:dc290ec:             ObjectName topicName = obj.getObjectName();
1:dc290ec: 
1:3c776cf:             TopicViewMBean topicView = MBeanServerInvocationHandler.
1:3c776cf:                 newProxyInstance(createJmxConnection(), topicName, TopicViewMBean.class, true);
1:3c776cf: 
1:3c776cf:             context.print(String.format(Locale.US, tableRow,
1:8089e0d:                     topicView.getName(),
1:8089e0d:                     topicView.getQueueSize(),
1:8089e0d:                     topicView.getProducerCount(),
1:8089e0d:                     topicView.getConsumerCount(),
1:8089e0d:                     topicView.getEnqueueCount(),
1:8089e0d:                     topicView.getDequeueCount(),
1:25e3c1b:                     topicView.getForwardCount(),
1:8089e0d:                     topicView.getMemoryPercentUsage()));
1:3c776cf:         }
1:3c776cf:     }
1:3c776cf: 
1:3c776cf:     @Override
1:3c776cf:     public String getName() {
1:3c776cf:         return "dstat";
1:3c776cf:     }
1:3c776cf: 
1:3c776cf:     @Override
1:3c776cf:     public String getOneLineDescription() {
1:3c776cf:         return "Performs a predefined query that displays useful tabular statistics regarding the specified destination type";
1:3c776cf:     }
1:3c776cf: 
1:3c776cf:     /**
1:3c776cf:      * Print the help messages for this command
1:3c776cf:      */
1:3c776cf:     @Override
1:3c776cf:     protected void printHelp() {
1:3c776cf:         context.printHelp(helpFile);
1:3c776cf:     }
1:3c776cf: 
1:dc290ec:     protected boolean filterMBeans(ObjectInstance obj) {
1:dc290ec:         String className = obj.getClassName();
1:dc290ec:         return className.equals(QueueView.class.getName()) || className.equals(TopicView.class.getName());
1:dc290ec:     }
1:dc290ec: 
1:dc290ec:     private static class ObjectInstanceComparator implements Comparator<ObjectInstance> {
1:dc290ec: 
1:dc290ec:         @Override
1:dc290ec:         public int compare(ObjectInstance o1, ObjectInstance o2) {
1:dc290ec:             return o1.getObjectName().compareTo(o2.getObjectName());
1:dc290ec:         }
1:dc290ec:     }
1:dc290ec: 
1:3c776cf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:044699c
/////////////////////////////////////////////////////////////////////////
1:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
1:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %", "Inflight #"));
/////////////////////////////////////////////////////////////////////////
1:                     queueView.getMemoryPercentUsage(),
1:                     queueView.getInFlightCount()));
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     queueView.getForwardCount(),
/////////////////////////////////////////////////////////////////////////
1:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     queueView.getForwardCount(),
/////////////////////////////////////////////////////////////////////////
0:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Forward #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     topicView.getForwardCount(),
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0f4a9b7
/////////////////////////////////////////////////////////////////////////
1:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
/////////////////////////////////////////////////////////////////////////
1:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
1:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
/////////////////////////////////////////////////////////////////////////
0:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d  %10d";
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1:         if (tokens.contains("topics")) {
1:             displayTopicStats();
1:         } else if (tokens.contains("queues")) {
1:             displayQueueStats();
1:         } else {
1:             displayAllDestinations();
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:dc290ec
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Comparator;
1: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.broker.jmx.TopicView;
/////////////////////////////////////////////////////////////////////////
0:             context.printException(new RuntimeException("Failed to execute dstat task. Reason: " + e.getMessage(), e));
1:     @SuppressWarnings("unchecked")
1:         List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:         // sort list so the names is A..Z
1:         Collections.sort(queueList, new ObjectInstanceComparator());
1: 
1:             ObjectInstance obj = (ObjectInstance) view;
1:             if (!filterMBeans(obj)) {
1:                 continue;
1:             }
1:             ObjectName queueName = obj.getObjectName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:         List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:         Collections.sort(queueList, new ObjectInstanceComparator());
1: 
1:             ObjectInstance obj = (ObjectInstance) view;
1:             if (!filterMBeans(obj)) {
1:                 continue;
1:             }
1:             ObjectName queueName = obj.getObjectName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:         List topicsList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1:         // sort list so the names is A..Z
1:         Collections.sort(topicsList, new ObjectInstanceComparator());
1: 
1:             ObjectInstance obj = (ObjectInstance) view;
1:             if (!filterMBeans(obj)) {
1:                 continue;
1:             }
1:             ObjectName topicName = obj.getObjectName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean filterMBeans(ObjectInstance obj) {
1:         String className = obj.getClassName();
1:         return className.equals(QueueView.class.getName()) || className.equals(TopicView.class.getName());
1:     }
1: 
1:     private static class ObjectInstanceComparator implements Comparator<ObjectInstance> {
1: 
1:         @Override
1:         public int compare(ObjectInstance o1, ObjectInstance o2) {
1:             return o1.getObjectName().compareTo(o2.getObjectName());
1:         }
1:     }
1: 
commit:8089e0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d";
0:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     queueView.getName(),
1:                     queueView.getQueueSize(),
1:                     queueView.getProducerCount(),
1:                     queueView.getConsumerCount(),
1:                     queueView.getEnqueueCount(),
1:                     queueView.getDequeueCount(),
1:                     queueView.getMemoryPercentUsage()));
/////////////////////////////////////////////////////////////////////////
0:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d";
0:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     queueView.getName(),
1:                     queueView.getQueueSize(),
1:                     queueView.getProducerCount(),
1:                     queueView.getConsumerCount(),
1:                     queueView.getEnqueueCount(),
1:                     queueView.getDequeueCount(),
0:                     queueView.getMemoryPercentUsage()));
/////////////////////////////////////////////////////////////////////////
0:         final String header = "%-50s  %10s  %10s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-50s  %10d  %10d  %10d  %10d  %10d  %10d";
0:         context.print(String.format(Locale.US, header, "Name", "Queue Size", "Producer #", "Consumer #", "Enqueue #", "Dequeue #", "Memory %"));
/////////////////////////////////////////////////////////////////////////
1:                     topicView.getName(),
1:                     topicView.getQueueSize(),
1:                     topicView.getProducerCount(),
1:                     topicView.getConsumerCount(),
1:                     topicView.getEnqueueCount(),
1:                     topicView.getDequeueCount(),
1:                     topicView.getMemoryPercentUsage()));
commit:ee8b51b
/////////////////////////////////////////////////////////////////////////
1:     private void displayAllDestinations() throws Exception {
0:         final String header = "%-60s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-60s  %10d  %10d  %10d  %10d";
/////////////////////////////////////////////////////////////////////////
1:     private void displayQueueStats() throws Exception {
0:         final String header = "%-60s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%-60s  %10d  %10d  %10d  %10d";
/////////////////////////////////////////////////////////////////////////
1:     private void displayTopicStats() throws Exception {
0:         final String header = "%-60s  %10s  %10s  %10s";
0:         final String tableRow = "%-60s  %10d  %10d  %10d";
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3c776cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import java.io.IOException;
1: import java.util.List;
1: import java.util.Locale;
1: 
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
1: 
1: public class DstatCommand extends AbstractJmxCommand {
1: 
1:     private static final String queryString =
1:         "type=Broker,brokerName=*,destinationType=%1,destinationName=*,*";
1: 
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: activemq-admin dstat [dstat-options] [destination-type]",
1:         "Description: Performs a predefined query that displays useful statistics regarding the specified .",
1:         "             destination type (Queues or Topics) and displays those results in a tabular format.",
1:         "             If no broker name is specified, it will try and select from all registered brokers.",
1:         "",
1:         "dstat Options:",
1:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
1:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:         "    --version                     Display the version information.",
1:         "    -h,-?,--help                  Display the query broker help information.",
1:         "",
1:         "Examples:",
1:         "    activemq-admin dstat queues",
1:         "        - Display a tabular summary of statistics for the queues on the broker.",
1:         "    activemq-admin dstat topics",
1:         "        - Display a tabular summary of statistics for the queues on the broker."
1:     };
1: 
1:     /**
1:      * Execute the dstat command, which allows you to display information for topics or queue in
1:      * a tabular format.
1:      *
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
1:     @Override
1:     protected void runTask(List<String> tokens) throws Exception {
0:         try {
1: 
0:             if (tokens.contains("topics")) {
0:                 displayTopicStats();
0:             } else if (tokens.contains("queues")) {
0:                 displayQueueStats();
0:             } else {
0:                 displayAllDestinations();
1:             }
1: 
0:             // Iterate through the queue names
0:         } catch (Exception e) {
0:             context.printException(new RuntimeException("Failed to execute dstat task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
0:     private void displayAllDestinations() throws IOException, Exception {
1: 
1:         String query = JmxMBeansUtil.createQueryString(queryString, "*");
0:         List<?> queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1: 
0:         final String header = "%20s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%20s  %10d  %10d  %10d  %10d";
1: 
0:         context.print(String.format(Locale.US, header, "Name", "Pending", "Consumers", "Enqueued", "Dequeued"));
1: 
1:         // Iterate through the queue result
1:         for (Object view : queueList) {
0:             ObjectName queueName = ((ObjectInstance)view).getObjectName();
1:             QueueViewMBean queueView = MBeanServerInvocationHandler.
1:                 newProxyInstance(createJmxConnection(), queueName, QueueViewMBean.class, true);
1: 
1:             context.print(String.format(Locale.US, tableRow,
0:                                         queueView.getName(),
0:                                         queueView.getQueueSize(),
0:                                         queueView.getConsumerCount(),
0:                                         queueView.getEnqueueCount(),
0:                                         queueView.getDequeueCount()));
1:         }
1:     }
1: 
0:     private void displayQueueStats() throws IOException, Exception {
1: 
1:         String query = JmxMBeansUtil.createQueryString(queryString, "Queue");
0:         List<?> queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1: 
0:         final String header = "%20s  %10s  %10s  %10s  %10s";
0:         final String tableRow = "%20s  %10d  %10d  %10d  %10d";
1: 
0:         context.print(String.format(Locale.US, header, "Name", "Pending", "Consumers", "Enqueued", "Dequeued"));
1: 
1:         // Iterate through the queue result
1:         for (Object view : queueList) {
0:             ObjectName queueName = ((ObjectInstance)view).getObjectName();
1:             QueueViewMBean queueView = MBeanServerInvocationHandler.
1:                 newProxyInstance(createJmxConnection(), queueName, QueueViewMBean.class, true);
1: 
1:             context.print(String.format(Locale.US, tableRow,
0:                                         queueView.getName(),
0:                                         queueView.getQueueSize(),
0:                                         queueView.getConsumerCount(),
0:                                         queueView.getEnqueueCount(),
0:                                         queueView.getDequeueCount()));
1:         }
1:     }
1: 
0:     private void displayTopicStats() throws IOException, Exception {
1: 
1:         String query = JmxMBeansUtil.createQueryString(queryString, "Topic");
0:         List<?> topicsList = JmxMBeansUtil.queryMBeans(createJmxConnection(), query);
1: 
0:         final String header = "%20s  %10s  %10s  %10s";
0:         final String tableRow = "%20s  %10d  %10d  %10d";
1: 
0:         context.print(String.format(Locale.US, header, "Name", "Consumers", "Enqueued", "Dequeued"));
1: 
1:         // Iterate through the topics result
1:         for (Object view : topicsList) {
0:             ObjectName topicName = ((ObjectInstance)view).getObjectName();
1:             TopicViewMBean topicView = MBeanServerInvocationHandler.
1:                 newProxyInstance(createJmxConnection(), topicName, TopicViewMBean.class, true);
1: 
1:             context.print(String.format(Locale.US, tableRow,
0:                                         topicView.getName(),
0:                                         topicView.getConsumerCount(),
0:                                         topicView.getEnqueueCount(),
0:                                         topicView.getDequeueCount()));
1:         }
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return "dstat";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Performs a predefined query that displays useful tabular statistics regarding the specified destination type";
1:     }
1: 
1:     /**
1:      * Print the help messages for this command
1:      */
1:     @Override
1:     protected void printHelp() {
1:         context.printHelp(helpFile);
1:     }
1: 
1: }
============================================================================