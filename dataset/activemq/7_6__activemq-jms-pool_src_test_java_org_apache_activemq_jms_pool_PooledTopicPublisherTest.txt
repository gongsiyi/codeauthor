2:a3b3a49: /**
1:a3b3a49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a3b3a49:  * contributor license agreements.  See the NOTICE file distributed with
1:a3b3a49:  * this work for additional information regarding copyright ownership.
1:a3b3a49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a3b3a49:  * (the "License"); you may not use this file except in compliance with
1:a3b3a49:  * the License.  You may obtain a copy of the License at
1:a59c9ba:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:a3b3a49:  * Unless required by applicable law or agreed to in writing, software
1:a3b3a49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3b3a49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3b3a49:  * See the License for the specific language governing permissions and
1:a3b3a49:  * limitations under the License.
2:a3b3a49:  */
1:b66559e: package org.apache.activemq.jms.pool;
3:bcbb1ec: 
1:e6597c4: import static org.junit.Assert.assertEquals;
1:e6597c4: import static org.junit.Assert.assertNotNull;
1:e6597c4: import static org.junit.Assert.assertTrue;
1:e6597c4: 
1:d6bd98f: import java.util.concurrent.CountDownLatch;
1:d6bd98f: import java.util.concurrent.TimeUnit;
1:d6bd98f: 
1:b66559e: import javax.jms.Connection;
1:bcbb1ec: import javax.jms.ExceptionListener;
1:bcbb1ec: import javax.jms.JMSException;
1:a3b3a49: import javax.jms.Session;
1:a3b3a49: import javax.jms.TopicConnection;
1:a3b3a49: import javax.jms.TopicPublisher;
1:a3b3a49: import javax.jms.TopicSession;
1:d6bd98f: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:d6bd98f: import org.apache.activemq.broker.BrokerService;
1:d6bd98f: import org.apache.activemq.broker.TransportConnector;
1:74a7a8b: import org.apache.activemq.command.ActiveMQTopic;
1:d6bd98f: import org.apache.activemq.util.SocketProxy;
1:e6597c4: import org.apache.activemq.util.Wait;
1:e6597c4: import org.junit.After;
1:e6597c4: import org.junit.Test;
1:74a7a8b: 
1:e6597c4: public class PooledTopicPublisherTest extends JmsPoolTestSupport {
1:d6bd98f: 
1:a3b3a49:     private TopicConnection connection;
1:27ce49f:     private PooledConnectionFactory pcf;
1:d6bd98f: 
1:e6597c4:     @Override
1:e6597c4:     @After
1:e6597c4:     public void tearDown() throws Exception {
1:e6597c4:         if (connection != null) {
1:27ce49f:             try {
1:27ce49f:                 connection.close();
1:27ce49f:             } catch (Exception ex) {}
1:e6597c4:             connection = null;
1:e6597c4:         }
1:e6597c4: 
1:27ce49f:         if (pcf != null) {
1:27ce49f:             try {
1:27ce49f:                 pcf.stop();
1:27ce49f:             } catch (Exception ex) {}
1:27ce49f:         }
1:27ce49f: 
1:e6597c4:         super.tearDown();
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     @Test(timeout = 60000)
1:a3b3a49:     public void testPooledConnectionFactory() throws Exception {
1:a3b3a49:         ActiveMQTopic topic = new ActiveMQTopic("test");
1:27ce49f:         pcf = new PooledConnectionFactory();
1:e6597c4:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(
1:e6597c4:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1:d6bd98f: 
1:a3b3a49:         connection = (TopicConnection) pcf.createConnection();
1:a3b3a49:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3b3a49:         TopicPublisher publisher = session.createPublisher(topic);
1:a3b3a49:         publisher.publish(session.createMessage());
3:a3b3a49:     }
1:a59c9ba: 
1:e6597c4:     @Test(timeout = 60000)
1:bcbb1ec:     public void testSetGetExceptionListener() throws Exception {
1:27ce49f:         pcf = new PooledConnectionFactory();
1:e6597c4:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(
1:e6597c4:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1:d6bd98f: 
1:bcbb1ec:         connection = (TopicConnection) pcf.createConnection();
1:bcbb1ec:         ExceptionListener listener = new ExceptionListener() {
1:e6597c4:             @Override
1:bcbb1ec:             public void onException(JMSException exception) {
1:bcbb1ec:             }
1:bcbb1ec:         };
1:bcbb1ec:         connection.setExceptionListener(listener);
1:bcbb1ec:         assertEquals(listener, connection.getExceptionListener());
1:bcbb1ec:     }
1:a59c9ba: 
1:e6597c4:     @Test(timeout = 60000)
1:d6bd98f:     public void testPooledConnectionAfterInactivity() throws Exception {
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         TransportConnector networkConnector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setUseJmx(true);
1:e6597c4:         brokerService.getManagementContext().setCreateConnector(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         brokerService.start();
1:a59c9ba: 
1:d6bd98f:         SocketProxy proxy = new SocketProxy(networkConnector.getConnectUri());
1:a59c9ba: 
1:27ce49f:         pcf = new PooledConnectionFactory();
1:d6bd98f:         String uri = proxy.getUrl().toString() + "?trace=true&wireFormat.maxInactivityDuration=500&wireFormat.maxInactivityDurationInitalDelay=500";
1:d6bd98f:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(uri));
1:a59c9ba: 
1:d6bd98f:         PooledConnection conn =  (PooledConnection) pcf.createConnection();
1:b66559e:         Connection amq = conn.getConnection();
1:a59c9ba:         assertNotNull(amq);
1:d6bd98f:         final CountDownLatch gotException = new CountDownLatch(1);
1:d6bd98f:         conn.setExceptionListener(new ExceptionListener() {
1:e6597c4:             @Override
1:d6bd98f:             public void onException(JMSException exception) {
1:d6bd98f:                 gotException.countDown();
1:d6bd98f:             }});
1:e6597c4:         conn.setClientID(getTestName());
1:a59c9ba: 
1:d6bd98f:         // let it hang, simulate a server hang so inactivity timeout kicks in
1:d6bd98f:         proxy.pause();
1:a59c9ba: 
1:e6597c4:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:e6597c4: 
1:e6597c4:             @Override
1:e6597c4:             public boolean isSatisified() throws Exception {
1:e6597c4:                 return brokerService.getAdminView().getCurrentConnectionsCount() == 0;
1:e6597c4:             }
1:e6597c4:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100)));
1:e6597c4: 
1:e6597c4:         conn.close();
1:d6bd98f:     }
1:a3b3a49: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1:     private PooledConnectionFactory pcf;
1:             try {
1:                 connection.close();
1:             } catch (Exception ex) {}
1:         if (pcf != null) {
1:             try {
1:                 pcf.stop();
1:             } catch (Exception ex) {}
1:         }
1: 
1:         pcf = new PooledConnectionFactory();
/////////////////////////////////////////////////////////////////////////
1:         pcf = new PooledConnectionFactory();
/////////////////////////////////////////////////////////////////////////
1:         pcf = new PooledConnectionFactory();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: public class PooledTopicPublisherTest extends JmsPoolTestSupport {
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
0:             connection.close();
1:             connection = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(
1:             "vm://test?broker.persistent=false&broker.useJmx=false"));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(
1:             "vm://test?broker.persistent=false&broker.useJmx=false"));
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         brokerService = new BrokerService();
1:         TransportConnector networkConnector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.start();
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:         conn.setClientID(getTestName());
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getCurrentConnectionsCount() == 0;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         conn.close();
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Connection amq = conn.getConnection();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         assertNotNull(amq);
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Gary Tully
-------------------------------------------------------------------------------
commit:d6bd98f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.SocketProxy;
/////////////////////////////////////////////////////////////////////////
1:     public void testPooledConnectionAfterInactivity() throws Exception {
0:         BrokerService broker = new BrokerService();
0:         TransportConnector networkConnector = broker.addConnector("tcp://localhost:0");
0:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
0:         broker.start();
1:         
1:         SocketProxy proxy = new SocketProxy(networkConnector.getConnectUri());
1:         
0:         PooledConnectionFactory pcf = new PooledConnectionFactory();
1:         String uri = proxy.getUrl().toString() + "?trace=true&wireFormat.maxInactivityDuration=500&wireFormat.maxInactivityDurationInitalDelay=500";
1:         pcf.setConnectionFactory(new ActiveMQConnectionFactory(uri));
1:         
1:         PooledConnection conn =  (PooledConnection) pcf.createConnection();
0:         ActiveMQConnection amq = conn.getConnection();
1:         final CountDownLatch gotException = new CountDownLatch(1);
0:         //amq.set
1:         conn.setExceptionListener(new ExceptionListener() {
1:             public void onException(JMSException exception) {
1:                 gotException.countDown();
1:             }});
0:         conn.setClientID(getName());
1:         
1:         // let it hang, simulate a server hang so inactivity timeout kicks in
1:         proxy.pause();
0:         //assertTrue("got an exception", gotException.await(5, TimeUnit.SECONDS));
0:         TimeUnit.SECONDS.sleep(2);
0:         conn.close();
1:     }
1:     
commit:bcbb1ec
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
0: import org.apache.activemq.test.TestSupport;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSetGetExceptionListener() throws Exception {
0:         PooledConnectionFactory pcf = new PooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test"));
1: 
1:         connection = (TopicConnection) pcf.createConnection();
1:         ExceptionListener listener = new ExceptionListener() {
1:             public void onException(JMSException exception) {
1:             }
1:         };
1:         connection.setExceptionListener(listener);
1:         assertEquals(listener, connection.getExceptionListener());
1:     }
1:     
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.test.TestSupport;
0: public class PooledTopicPublisherTest extends TestSupport {
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:a3b3a49
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
0: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQTopic;
0: 
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
0: 
1: /**
0:  * @version $Revision$
1:  */
0: public class PooledTopicPublisherTest extends TestCase {
1:     private TopicConnection connection;
0: 
1:     public void testPooledConnectionFactory() throws Exception {
1:         ActiveMQTopic topic = new ActiveMQTopic("test");
0:         PooledConnectionFactory pcf = new PooledConnectionFactory();
0:         pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test"));
0: 
1:         connection = (TopicConnection) pcf.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicPublisher publisher = session.createPublisher(topic);
1:         publisher.publish(session.createMessage());
1:     }
0: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         if (connection != null) {
0:             connection.close();
0:             connection = null;
1:         }
1:     }
1: }
============================================================================