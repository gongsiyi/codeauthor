1:e1d4780: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:e1d4780:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:e1d4780: package org.apache.activemq.broker.region.group;
1:e1d4780: 
1:468e697: import java.util.Map;
1:468e697: 
1:d25c52c: import org.apache.activemq.broker.region.Destination;
1:e1d4780: import org.apache.activemq.command.ConsumerId;
1:468e697: import org.apache.activemq.memory.LRUMap;
1:e1d4780: 
1:e1d4780: /**
1:e1d4780:  * Uses hash-code buckets to associate consumers with sets of message group IDs.
1:0bbc0ac:  * 
1:7f883f6:  * 
1:e1d4780:  */
1:e1d4780: public class MessageGroupHashBucket implements MessageGroupMap {
1:e1d4780: 
1:e1d4780:     private final int bucketCount;
1:e1d4780:     private final ConsumerId[] consumers;
1:db2121b:     private final LRUMap<String,String>cache;
1:e1d4780: 
1:db2121b:     public MessageGroupHashBucket(int bucketCount, int cachedSize) {
1:e1d4780:         this.bucketCount = bucketCount;
1:e1d4780:         this.consumers = new ConsumerId[bucketCount];
1:db2121b:         this.cache=new LRUMap<String,String>(cachedSize);
2:e1d4780:     }
1:e1d4780: 
1:468e697:     public synchronized void put(String groupId, ConsumerId consumerId) {
1:e1d4780:         int bucket = getBucketNumber(groupId);
1:e1d4780:         consumers[bucket] = consumerId;
1:468e697:         if (consumerId != null){
1:468e697:           cache.put(groupId,consumerId.toString());
1:468e697:         }
1:e1d4780:     }
1:e1d4780: 
1:468e697:     public synchronized ConsumerId get(String groupId) {
1:e1d4780:         int bucket = getBucketNumber(groupId);
1:468e697:         //excersise cache
1:468e697:         cache.get(groupId);
1:e1d4780:         return consumers[bucket];
1:e1d4780:     }
1:e1d4780: 
1:468e697:     public synchronized ConsumerId removeGroup(String groupId) {
1:e1d4780:         int bucket = getBucketNumber(groupId);
1:e1d4780:         ConsumerId answer = consumers[bucket];
1:e1d4780:         consumers[bucket] = null;
1:468e697:         cache.remove(groupId);
1:e1d4780:         return answer;
1:e1d4780:     }
1:e1d4780: 
1:468e697:     public synchronized MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:e1d4780:         MessageGroupSet answer = null;
1:e1d4780:         for (int i = 0; i < consumers.length; i++) {
1:e1d4780:             ConsumerId owner = consumers[i];
1:e1d4780:             if (owner != null && owner.equals(consumerId)) {
1:e1d4780:                 answer = createMessageGroupSet(i, answer);
1:e1d4780:                 consumers[i] = null;
1:e1d4780:             }
1:e1d4780:         }
1:e1d4780:         if (answer == null) {
1:e1d4780:             // make an empty set
1:e1d4780:             answer = EmptyMessageGroupSet.INSTANCE;
1:e1d4780:         }
1:e1d4780:         return answer;
1:e1d4780:     }
1:e1d4780: 
1:468e697:     public synchronized void removeAll(){
1:468e697:         for (int i =0; i < consumers.length; i++){
1:468e697:             consumers[i] = null;
1:468e697:         }
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public Map<String, String> getGroups() {
1:468e697:         return cache;
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public String getType() {
1:468e697:         return "bucket";
1:468e697:     }
1:468e697: 
1:d25c52c:     public void setDestination(Destination destination) {}
1:d25c52c: 
1:cd4b229:     public int getBucketCount(){
1:cd4b229:         return bucketCount;
1:cd4b229:     }
1:cd4b229: 
1:468e697: 
1:e1d4780:     public String toString() {
1:e1d4780:         int count = 0;
1:e1d4780:         for (int i = 0; i < consumers.length; i++) {
1:e1d4780:             if (consumers[i] != null) {
1:e1d4780:                 count++;
1:e1d4780:             }
1:e1d4780:         }
1:e1d4780:         return "active message group buckets: " + count;
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected MessageGroupSet createMessageGroupSet(int bucketNumber, final MessageGroupSet parent) {
1:e1d4780:         final MessageGroupSet answer = createMessageGroupSet(bucketNumber);
1:e1d4780:         if (parent == null) {
1:e1d4780:             return answer;
1:74a7a8b:         } else {
1:e1d4780:             // union the two sets together
1:e1d4780:             return new MessageGroupSet() {
1:e1d4780:                 public boolean contains(String groupID) {
1:e1d4780:                     return parent.contains(groupID) || answer.contains(groupID);
1:e1d4780:                 }
1:e1d4780:             };
1:e1d4780:         }
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected MessageGroupSet createMessageGroupSet(final int bucketNumber) {
1:e1d4780:         return new MessageGroupSet() {
1:e1d4780:             public boolean contains(String groupID) {
1:e1d4780:                 int bucket = getBucketNumber(groupID);
1:e1d4780:                 return bucket == bucketNumber;
1:e1d4780:             }
1:e1d4780:         };
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     protected int getBucketNumber(String groupId) {
1:a7785c6:         int bucket = groupId.hashCode() % bucketCount;
1:a7785c6:         // bucket could be negative
1:ecf89a6:         if (bucket < 0) {
1:a7785c6:             bucket *= -1;
1:ecf89a6:         }
1:a7785c6:         return bucket;
1:e1d4780:     }
1:e1d4780: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d25c52c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:     public void setDestination(Destination destination) {}
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:db2121b
/////////////////////////////////////////////////////////////////////////
1:     private final LRUMap<String,String>cache;
1:     public MessageGroupHashBucket(int bucketCount, int cachedSize) {
1:         this.cache=new LRUMap<String,String>(cachedSize);
commit:cd4b229
/////////////////////////////////////////////////////////////////////////
1:     public int getBucketCount(){
1:         return bucketCount;
1:     }
1: 
commit:468e697
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
1: import org.apache.activemq.memory.LRUMap;
/////////////////////////////////////////////////////////////////////////
0:     private LRUMap<String,String>cache=new LRUMap<String,String>(64);
1:     public synchronized void put(String groupId, ConsumerId consumerId) {
1:         if (consumerId != null){
1:           cache.put(groupId,consumerId.toString());
1:         }
1:     public synchronized ConsumerId get(String groupId) {
1:         //excersise cache
1:         cache.get(groupId);
1:     public synchronized ConsumerId removeGroup(String groupId) {
1:         cache.remove(groupId);
1:     public synchronized MessageGroupSet removeConsumer(ConsumerId consumerId) {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void removeAll(){
1:         for (int i =0; i < consumers.length; i++){
1:             consumers[i] = null;
1:         }
1:     }
1: 
1:     @Override
1:     public Map<String, String> getGroups() {
1:         return cache;
1:     }
1: 
1:     @Override
1:     public String getType() {
1:         return "bucket";
1:     }
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (bucket < 0) {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         if (bucket < 0)
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a7785c6
/////////////////////////////////////////////////////////////////////////
1:         int bucket = groupId.hashCode() % bucketCount;
1:         // bucket could be negative
0:         if( bucket < 0 )
1:             bucket *= -1;
1:         return bucket;
author:James Strachan
-------------------------------------------------------------------------------
commit:e1d4780
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.region.group;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: 
1: /**
1:  * Uses hash-code buckets to associate consumers with sets of message group IDs.
0:  * 
0:  * @version $Revision$
1:  */
1: public class MessageGroupHashBucket implements MessageGroupMap {
1: 
1:     private final int bucketCount;
1:     private final ConsumerId[] consumers;
1: 
0:     public MessageGroupHashBucket(int bucketCount) {
1:         this.bucketCount = bucketCount;
1:         this.consumers = new ConsumerId[bucketCount];
1:     }
1: 
0:     public void put(String groupId, ConsumerId consumerId) {
1:         int bucket = getBucketNumber(groupId);
1:         consumers[bucket] = consumerId;
1:     }
1: 
0:     public ConsumerId get(String groupId) {
1:         int bucket = getBucketNumber(groupId);
1:         return consumers[bucket];
1:     }
1: 
0:     public ConsumerId removeGroup(String groupId) {
1:         int bucket = getBucketNumber(groupId);
1:         ConsumerId answer = consumers[bucket];
1:         consumers[bucket] = null;
1:         return answer;
1:     }
1: 
0:     public MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:         MessageGroupSet answer = null;
1:         for (int i = 0; i < consumers.length; i++) {
1:             ConsumerId owner = consumers[i];
1:             if (owner != null && owner.equals(consumerId)) {
1:                 answer = createMessageGroupSet(i, answer);
1:                 consumers[i] = null;
1:             }
1:         }
1:         if (answer == null) {
1:             // make an empty set
1:             answer = EmptyMessageGroupSet.INSTANCE;
1:         }
1:         return answer;
1:     }
1: 
1:     public String toString() {
1:         int count = 0;
1:         for (int i = 0; i < consumers.length; i++) {
1:             if (consumers[i] != null) {
1:                 count++;
1:             }
1:         }
1:         return "active message group buckets: " + count;
1:     }
1: 
1:     protected MessageGroupSet createMessageGroupSet(int bucketNumber, final MessageGroupSet parent) {
1:         final MessageGroupSet answer = createMessageGroupSet(bucketNumber);
1:         if (parent == null) {
1:             return answer;
1:         }
0:         else {
1:             // union the two sets together
1:             return new MessageGroupSet() {
1:                 public boolean contains(String groupID) {
1:                     return parent.contains(groupID) || answer.contains(groupID);
1:                 }
1:             };
1:         }
1:     }
1: 
1:     protected MessageGroupSet createMessageGroupSet(final int bucketNumber) {
1:         return new MessageGroupSet() {
1:             public boolean contains(String groupID) {
1:                 int bucket = getBucketNumber(groupID);
1:                 return bucket == bucketNumber;
1:             }
1:         };
1:     }
1: 
1:     protected int getBucketNumber(String groupId) {
0:         return groupId.hashCode() % bucketCount;
1:     }
1: }
============================================================================