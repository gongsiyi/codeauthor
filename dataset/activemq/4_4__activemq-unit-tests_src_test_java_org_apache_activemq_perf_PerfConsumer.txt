1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:49325b6: import org.apache.activemq.ActiveMQMessageAudit;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:d29ca2a: /**
1:9529b24:  *
1:d29ca2a:  */
1:230a86c: public class PerfConsumer implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PerfConsumer.class);
1:d29ca2a:     protected Connection connection;
1:d29ca2a:     protected MessageConsumer consumer;
1:d47855a:     protected long sleepDuration;
1:f12c100:     protected long initialDelay;
1:7f0583d:     protected boolean enableAudit = false;
1:49325b6:     protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit(16 * 1024,20);
1:f12c100:     protected boolean firstMessage =true;
1:ee55abb:     protected String lastMsgId;
1:230a86c: 
1:230a86c:     protected PerfRate rate = new PerfRate();
1:230a86c: 
1:230a86c:     public PerfConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException {
1:230a86c:         connection = fac.createConnection();
1:a38a906:         connection.setClientID(consumerName);
1:230a86c:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         if (dest instanceof Topic && consumerName != null && consumerName.length() > 0) {
1:230a86c:             consumer = s.createDurableSubscriber((Topic)dest, consumerName);
1:230a86c:         } else {
1:230a86c:             consumer = s.createConsumer(dest);
1:d29ca2a:         }
1:d29ca2a:         consumer.setMessageListener(this);
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public PerfConsumer(ConnectionFactory fac, Destination dest) throws JMSException {
1:230a86c:         this(fac, dest, null);
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void start() throws JMSException {
1:d29ca2a:         connection.start();
1:51e6a0d:         rate.reset();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void stop() throws JMSException {
1:d29ca2a:         connection.stop();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void shutDown() throws JMSException {
1:d29ca2a:         connection.close();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public PerfRate getRate() {
1:d29ca2a:         return rate;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void onMessage(Message msg) {
1:f12c100:         if (firstMessage) {
1:f12c100:             firstMessage=false;
1:f12c100:             if (getInitialDelay() > 0) {
1:f12c100:                 try {
1:f12c100:                     Thread.sleep(getInitialDelay());
1:d47855a:                 } catch (InterruptedException e) {
1:f12c100:                 }
1:f12c100:             }
1:f12c100:         }
1:d29ca2a:         rate.increment();
1:d47855a:         try {
1:c99f055:             if (enableAudit && !this.audit.isInOrder(msg.getJMSMessageID())) {
1:ee55abb:                 LOG.error("Message out of order!!" + msg.getJMSMessageID() + " LAST = " + lastMsgId);
1:d47855a:             }
1:7f0583d:             if (enableAudit && this.audit.isDuplicate(msg)){
1:49325b6:                 LOG.error("Duplicate Message!" + msg);
1:86cbdfd:             }
1:ee55abb:             lastMsgId=msg.getJMSMessageID();
1:49325b6:         } catch (JMSException e1) {
1:49325b6:             e1.printStackTrace();
1:d29ca2a:         }
1:49325b6:         try {
1:230a86c:             if (sleepDuration != 0) {
1:230a86c:                 Thread.sleep(sleepDuration);
1:230a86c:             }
1:230a86c:         } catch (InterruptedException e) {
1:230a86c:         }
1:d47855a:     }
1:230a86c: 
1:230a86c:     public synchronized long getSleepDuration() {
1:230a86c:         return sleepDuration;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public synchronized void setSleepDuration(long sleepDuration) {
1:230a86c:         this.sleepDuration = sleepDuration;
1:230a86c:     }
1:d47855a: 
1:c99f055:     public boolean isEnableAudit() {
1:c99f055:         return enableAudit;
1:d47855a:     }
1:d47855a: 
1:c99f055:     public void setEnableAudit(boolean doAudit) {
1:c99f055:         this.enableAudit = doAudit;
1:d47855a:     }
1:f12c100: 
1:f12c100:     /**
1:f12c100:      * @return the initialDelay
1:f12c100:      */
1:f12c100:     public long getInitialDelay() {
1:f12c100:         return initialDelay;
1:d29ca2a:     }
1:f12c100: 
1:f12c100:     /**
1:f12c100:      * @param initialDelay the initialDelay to set
1:f12c100:      */
1:f12c100:     public void setInitialDelay(long initialDelay) {
1:f12c100:         this.initialDelay = initialDelay;
1:f12c100:     }
1:f12c100: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9529b24
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class PerfConsumer implements MessageListener {
1: 
1:     protected PerfRate rate = new PerfRate();
1: 
1:     public PerfConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException {
1:         connection = fac.createConnection();
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         if (dest instanceof Topic && consumerName != null && consumerName.length() > 0) {
1:             consumer = s.createDurableSubscriber((Topic)dest, consumerName);
1:         } else {
1:             consumer = s.createConsumer(dest);
1: 
1:     public PerfConsumer(ConnectionFactory fac, Destination dest) throws JMSException {
1:         this(fac, dest, null);
1: 
1:     public void start() throws JMSException {
1: 
1:     public void stop() throws JMSException {
1: 
1:     public void shutDown() throws JMSException {
1: 
1:     public PerfRate getRate() {
1: 
1:     public void onMessage(Message msg) {
1:             if (sleepDuration != 0) {
1:                 Thread.sleep(sleepDuration);
1:             }
1:         } catch (InterruptedException e) {
1:         }
1: 
1:     public synchronized long getSleepDuration() {
1:         return sleepDuration;
1:     }
1: 
1:     public synchronized void setSleepDuration(long sleepDuration) {
1:         this.sleepDuration = sleepDuration;
1:     }
commit:51e6a0d
/////////////////////////////////////////////////////////////////////////
1:         rate.reset();
commit:d47855a
/////////////////////////////////////////////////////////////////////////
1:     protected long sleepDuration;
1:     
/////////////////////////////////////////////////////////////////////////
1:         try {
0:         	if( sleepDuration!=0 ) {
0:         		Thread.sleep(sleepDuration);
1:         	}
1: 		} catch (InterruptedException e) {
1: 		}        
1:     
0: 	public synchronized long getSleepDuration() {
0: 		return sleepDuration;
1: 	}
0: 	public synchronized void setSleepDuration(long sleepDuration) {
0: 		this.sleepDuration = sleepDuration;
1: 	}
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class PerfConsumer implements MessageListener{
1:     protected Connection connection;
1:     protected MessageConsumer consumer;
0:     protected PerfRate rate=new PerfRate();
0:     public PerfConsumer(ConnectionFactory fac,Destination dest,String consumerName) throws JMSException{
0:         connection=fac.createConnection();
0:         Session s=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         if(dest instanceof Topic&&consumerName!=null&&consumerName.length()>0){
0:             consumer=s.createDurableSubscriber((Topic) dest,consumerName);
0:         }else{
0:             consumer=s.createConsumer(dest);
1:         }
1:         consumer.setMessageListener(this);
1:     }
0:     public PerfConsumer(ConnectionFactory fac,Destination dest) throws JMSException{
0:         this(fac,dest,null);
1:     }
0:     public void start() throws JMSException{
1:         connection.start();
0:         rate.getRate();
1:     }
0:     public void stop() throws JMSException{
1:         connection.stop();
1:     }
0:     public void shutDown() throws JMSException{
1:         connection.close();
1:     }
0:     public PerfRate getRate(){
1:         return rate;
1:     }
0:     public void onMessage(Message msg){
1:         rate.increment();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(PerfConsumer.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected String lastMsgId;
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("Message out of order!!" + msg.getJMSMessageID() + " LAST = " + lastMsgId);
1:             lastMsgId=msg.getJMSMessageID();
commit:15709c5
/////////////////////////////////////////////////////////////////////////
0:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
commit:f12c100
/////////////////////////////////////////////////////////////////////////
1:     protected long initialDelay;
1:     protected boolean firstMessage =true;
0:         Session s = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         if (firstMessage) {
1:             firstMessage=false;
1:             if (getInitialDelay() > 0) {
1:                 try {
1:                     Thread.sleep(getInitialDelay());
0:                 } catch (InterruptedException e) {
1:                 }
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the initialDelay
1:      */
1:     public long getInitialDelay() {
1:         return initialDelay;
1:     }
1: 
1:     /**
1:      * @param initialDelay the initialDelay to set
1:      */
1:     public void setInitialDelay(long initialDelay) {
1:         this.initialDelay = initialDelay;
1:     }
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1:     protected boolean enableAudit = false;
/////////////////////////////////////////////////////////////////////////
1:             if (enableAudit && this.audit.isDuplicate(msg)){
commit:c99f055
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected boolean enableAudit = true;
/////////////////////////////////////////////////////////////////////////
1:             if (enableAudit && !this.audit.isInOrder(msg.getJMSMessageID())) {
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isEnableAudit() {
1:         return enableAudit;
0:     }
0: 
1:     public void setEnableAudit(boolean doAudit) {
1:         this.enableAudit = doAudit;
0:     }
commit:2db7df7
/////////////////////////////////////////////////////////////////////////
0:             if (msg.getJMSDestination() instanceof Topic && !this.audit.isInOrder(msg.getJMSMessageID())) {
commit:565588c
/////////////////////////////////////////////////////////////////////////
0:             if (!this.audit.isInOrder(msg.getJMSMessageID())) {
0:                 LOG.error("Message out of order!!" + msg);
0:             }
0:             if (this.audit.isDuplicate(msg)){
commit:49325b6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQMessageAudit;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0:     private static final Log LOG = LogFactory.getLog(PerfConsumer.class);
1:     protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit(16 * 1024,20);
/////////////////////////////////////////////////////////////////////////
0:             if (this.audit.isDuplicateMessage(msg)){
1:                 LOG.error("Duplicate Message!" + msg);
0:             }
1:         } catch (JMSException e1) {
0:             // TODO Auto-generated catch block
1:             e1.printStackTrace();
0:         }
1:         try {
commit:a38a906
/////////////////////////////////////////////////////////////////////////
1:         connection.setClientID(consumerName);
============================================================================