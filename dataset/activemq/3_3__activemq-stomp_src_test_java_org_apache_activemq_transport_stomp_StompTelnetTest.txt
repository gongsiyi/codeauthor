1:e32ff5c: /**
1:e32ff5c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e32ff5c:  * contributor license agreements.  See the NOTICE file distributed with
1:e32ff5c:  * this work for additional information regarding copyright ownership.
1:e32ff5c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e32ff5c:  * (the "License"); you may not use this file except in compliance with
1:e32ff5c:  * the License.  You may obtain a copy of the License at
1:e32ff5c:  *
1:e32ff5c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e32ff5c:  *
1:e32ff5c:  * Unless required by applicable law or agreed to in writing, software
1:e32ff5c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e32ff5c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e32ff5c:  * See the License for the specific language governing permissions and
1:e32ff5c:  * limitations under the License.
1:e32ff5c:  */
1:e32ff5c: package org.apache.activemq.transport.stomp;
7:e32ff5c: 
1:1236bbf: import static org.junit.Assert.assertTrue;
1:1236bbf: 
1:e32ff5c: import java.io.IOException;
1:e32ff5c: import java.net.Socket;
1:1236bbf: 
1:1236bbf: import org.apache.activemq.broker.BrokerPlugin;
1:e32ff5c: import org.apache.activemq.broker.TransportConnector;
1:1236bbf: import org.junit.Test;
1:e32ff5c: import org.slf4j.Logger;
1:e32ff5c: import org.slf4j.LoggerFactory;
1:e32ff5c: 
1:1236bbf: public class StompTelnetTest extends StompTestSupport {
1:e32ff5c: 
1:e32ff5c:     private static final Logger LOG = LoggerFactory.getLogger(StompTelnetTest.class);
1:e32ff5c: 
1:540a66b:     @Test(timeout = 60000)
1:e32ff5c:     public void testCRLF() throws Exception {
1:e32ff5c: 
1:1236bbf:         for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:e32ff5c:             LOG.info("try: " + connector.getConnectUri());
1:1236bbf:             int port = connector.getConnectUri().getPort();
1:e32ff5c: 
1:e32ff5c:             StompConnection stompConnection = new StompConnection();
1:1236bbf:             stompConnection.open(createSocket(port));
1:e32ff5c:             String frame = "CONNECT\r\n\r\n" + Stomp.NULL;
1:e32ff5c:             stompConnection.sendFrame(frame);
1:e32ff5c: 
1:e32ff5c:             frame = stompConnection.receiveFrame();
1:e32ff5c:             LOG.info("response from: " + connector.getConnectUri() + ", " + frame);
1:e32ff5c:             assertTrue(frame.startsWith("CONNECTED"));
1:e32ff5c:             stompConnection.close();
4:e32ff5c:         }
1:e32ff5c:     }
1:0f11d8c: 
1:540a66b:     @Test(timeout = 60000)
1:0f11d8c:     public void testCRLF11() throws Exception {
1:0f11d8c: 
1:1236bbf:         for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:0f11d8c:             LOG.info("try: " + connector.getConnectUri());
1:1236bbf:             int port = connector.getConnectUri().getPort();
1:e32ff5c: 
1:0f11d8c:             StompConnection stompConnection = new StompConnection();
1:1236bbf:             stompConnection.open(createSocket(port));
1:0f11d8c:             String frame = "CONNECT\r\naccept-version:1.1\r\n\r\n" + Stomp.NULL;
1:0f11d8c:             stompConnection.sendFrame(frame);
1:0f11d8c: 
1:0f11d8c:             frame = stompConnection.receiveFrame();
1:0f11d8c:             LOG.info("response from: " + connector.getConnectUri() + ", " + frame);
1:0f11d8c:             assertTrue(frame.startsWith("CONNECTED"));
1:0f11d8c:             stompConnection.close();
1:0f11d8c:         }
1:0f11d8c:     }
1:0f11d8c: 
1:1236bbf:     @Override
1:1236bbf:     protected BrokerPlugin configureAuthentication() throws Exception {
1:1236bbf:         return null;
1:e32ff5c:     }
1:e32ff5c: 
1:1236bbf:     @Override
1:1236bbf:     protected BrokerPlugin configureAuthorization() throws Exception {
1:1236bbf:         return null;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     protected Socket createSocket(int port) throws IOException {
1:1236bbf:         return new Socket("127.0.0.1", port);
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     @Override
1:540a66b:     protected String getQueueName() {
1:1236bbf:         return getClass().getName() + "." + getName();
1:1236bbf:     }
1:e32ff5c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     protected String getQueueName() {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.junit.Test;
1: public class StompTelnetTest extends StompTestSupport {
0:     @Test
1:         for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:             int port = connector.getConnectUri().getPort();
1:             stompConnection.open(createSocket(port));
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:         for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:             int port = connector.getConnectUri().getPort();
1:             stompConnection.open(createSocket(port));
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected BrokerPlugin configureAuthentication() throws Exception {
1:         return null;
1:     protected BrokerPlugin configureAuthorization() throws Exception {
1:         return null;
1:     @Override
0:     protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio://0.0.0.0:"+nioPort);
0:         nioPort = connector.getConnectUri().getPort();
1:     }
1: 
1:     protected Socket createSocket(int port) throws IOException {
1:         return new Socket("127.0.0.1", port);
1:     }
1: 
1:     @Override
0: 	protected String getQueueName() {
1:         return getClass().getName() + "." + getName();
1:     }
commit:0f11d8c
/////////////////////////////////////////////////////////////////////////
1:     public void testCRLF11() throws Exception {
1: 
0:         for (TransportConnector connector : broker.getTransportConnectors()) {
1:             LOG.info("try: " + connector.getConnectUri());
1: 
1:             StompConnection stompConnection = new StompConnection();
0:             stompConnection.open(createSocket(connector.getConnectUri()));
1:             String frame = "CONNECT\r\naccept-version:1.1\r\n\r\n" + Stomp.NULL;
1:             stompConnection.sendFrame(frame);
1: 
1:             frame = stompConnection.receiveFrame();
1:             LOG.info("response from: " + connector.getConnectUri() + ", " + frame);
1:             assertTrue(frame.startsWith("CONNECTED"));
1:             stompConnection.close();
1:         }
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:e32ff5c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
0: import java.net.URI;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class StompTelnetTest extends CombinationTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompTelnetTest.class);
1: 
0:     private BrokerService broker;
1: 
0:     @Override
0:     protected void setUp() throws Exception {
1: 
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         broker.addConnector("stomp://localhost:0");
0:         broker.addConnector("stomp+nio://localhost:0");
1: 
0:         broker.start();
0:         broker.waitUntilStarted();
1:     }
1: 
1:     public void testCRLF() throws Exception {
1: 
0:         for (TransportConnector connector : broker.getTransportConnectors()) {
1:             LOG.info("try: " + connector.getConnectUri());
1: 
1:             StompConnection stompConnection = new StompConnection();
0:             stompConnection.open(createSocket(connector.getConnectUri()));
1:             String frame = "CONNECT\r\n\r\n" + Stomp.NULL;
1:             stompConnection.sendFrame(frame);
1: 
1:             frame = stompConnection.receiveFrame();
1:             LOG.info("response from: " + connector.getConnectUri() + ", " + frame);
1:             assertTrue(frame.startsWith("CONNECTED"));
1:             stompConnection.close();
1:         }
1:     }
1: 
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
0:     protected String getQueueName() {
0:         return getClass().getName() + "." + getName();
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
1: }
============================================================================