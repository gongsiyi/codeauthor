1:023b2ac: /**
1:023b2ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:023b2ac:  * contributor license agreements.  See the NOTICE file distributed with
1:023b2ac:  * this work for additional information regarding copyright ownership.
1:023b2ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:023b2ac:  * (the "License"); you may not use this file except in compliance with
1:023b2ac:  * the License.  You may obtain a copy of the License at
1:023b2ac:  *
1:023b2ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:023b2ac:  *
1:023b2ac:  * Unless required by applicable law or agreed to in writing, software
1:023b2ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:023b2ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:023b2ac:  * See the License for the specific language governing permissions and
1:023b2ac:  * limitations under the License.
1:023b2ac:  */
1:023b2ac: package org.apache.activemq.store.kahadb.disk.journal;
2:023b2ac: 
1:023b2ac: import org.apache.activemq.store.kahadb.KahaDBStore;
1:3b7613d: import org.apache.activemq.store.kahadb.data.KahaTraceCommand;
1:2949e8d: import org.apache.activemq.util.Wait;
1:023b2ac: import org.junit.Test;
1:4a82118: import org.slf4j.Logger;
1:4a82118: import org.slf4j.LoggerFactory;
1:023b2ac: 
1:023b2ac: import java.io.File;
1:023b2ac: import java.io.FileInputStream;
1:023b2ac: import java.nio.ByteBuffer;
1:023b2ac: import java.nio.channels.FileChannel;
1:023b2ac: import java.util.Random;
1:023b2ac: import java.util.concurrent.TimeUnit;
1:023b2ac: 
1:023b2ac: import static org.junit.Assert.assertEquals;
1:023b2ac: import static org.junit.Assert.assertTrue;
1:023b2ac: 
1:023b2ac: /**
1:023b2ac:  * Created by ceposta
1:023b2ac:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:023b2ac:  */
1:023b2ac: public class PreallocationJournalTest  {
1:023b2ac: 
1:4a82118:     private static final Logger LOG = LoggerFactory.getLogger(PreallocationJournalTest.class);
1:4a82118: 
1:023b2ac:     @Test
1:023b2ac:     public void testSparseFilePreallocation() throws Exception {
1:023b2ac:         executeTest("sparse_file");
1:023b2ac:     }
1:023b2ac: 
1:023b2ac:     @Test
1:023b2ac:     public void testOSCopyPreallocation() throws Exception {
1:023b2ac:         executeTest("os_kernel_copy");
1:023b2ac:     }
1:023b2ac: 
1:023b2ac:     @Test
1:023b2ac:     public void testZerosPreallocation() throws Exception {
1:023b2ac:         executeTest("zeros");
1:023b2ac:     }
1:023b2ac: 
1:3b7613d:     @Test
1:3b7613d:     public void testZerosLoop() throws Exception {
1:3b7613d:         Random rand = new Random();
1:3b7613d:         int randInt = rand.nextInt(100);
1:3b7613d:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1:3b7613d: 
1:3b7613d:         KahaDBStore store = new KahaDBStore();
1:3b7613d:         store.setJournalMaxFileLength(5*1024*1024);
1:3b7613d:         store.deleteAllMessages();
1:3b7613d:         store.setDirectory(dataDirectory);
1:3b7613d:         store.setPreallocationStrategy("zeros");
1:3b7613d:         store.start();
1:3b7613d: 
1:3b7613d:         final File journalLog = new File(dataDirectory, "db-1.log");
1:3b7613d:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:3b7613d:             @Override
1:3b7613d:             public boolean isSatisified() throws Exception {
1:3b7613d:                 return journalLog.exists();
1:3b7613d:             }
1:3b7613d:         }));
1:3b7613d: 
1:3b7613d: 
1:3b7613d:         KahaTraceCommand traceCommand = new KahaTraceCommand();
1:3b7613d:         traceCommand.setMessage(new String(new byte[2*1024*1024]));
1:3b7613d:         Location location = null;
1:3b7613d:         for (int i=0; i<20; i++) {
1:3b7613d:             location = store.store(traceCommand);
1:3b7613d:         }
1:3b7613d:         LOG.info("Last location:" + location);
1:3b7613d: 
1:3b7613d:         LOG.info("Store journal files:" + store.getJournal().getFiles().size());
1:3b7613d: 
1:3b7613d:     }
1:3b7613d: 
1:023b2ac:     private void executeTest(String preallocationStrategy)throws Exception {
1:023b2ac:         Random rand = new Random();
1:023b2ac:         int randInt = rand.nextInt(100);
1:023b2ac:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1:023b2ac: 
1:023b2ac:         KahaDBStore store = new KahaDBStore();
1:023b2ac:         store.deleteAllMessages();
1:023b2ac:         store.setDirectory(dataDirectory);
1:023b2ac:         store.setPreallocationStrategy(preallocationStrategy);
1:023b2ac:         store.start();
1:023b2ac: 
1:2949e8d:         final File journalLog = new File(dataDirectory, "db-1.log");
1:2949e8d:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:2949e8d:             @Override
1:2949e8d:             public boolean isSatisified() throws Exception {
1:2949e8d:                 return journalLog.exists();
1:2949e8d:             }
1:2949e8d:         }));
1:023b2ac: 
1:023b2ac: 
1:023b2ac:         FileInputStream is = new FileInputStream(journalLog);
1:2949e8d:         final FileChannel channel = is.getChannel();
1:2949e8d:         assertTrue("file size as expected", Wait.waitFor(new Wait.Condition() {
1:2949e8d:             @Override
1:2949e8d:             public boolean isSatisified() throws Exception {
1:4a82118:                 LOG.info ("file size:" + journalLog + ", chan.size " + channel.size() + ", jfileSize.length: " + journalLog.length());
1:2949e8d:                 return Journal.DEFAULT_MAX_FILE_LENGTH == channel.size();
1:2949e8d:             }
1:2949e8d:         }));
1:023b2ac: 
1:023b2ac:         channel.position(1 * 1024 * 1024 + 1);
1:023b2ac:         ByteBuffer buff = ByteBuffer.allocate(1);
1:023b2ac:         channel.read(buff);
1:023b2ac:         buff.flip();
1:023b2ac:         buff.position(0);
1:023b2ac:         assertEquals(0x00, buff.get());
1:023b2ac: 
1:4a82118:         LOG.info("File size: " + channel.size());
1:023b2ac: 
1:023b2ac:         store.stop();
1:023b2ac:     }
1:023b2ac: 
1:023b2ac: 
1:023b2ac: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3b7613d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.data.KahaTraceCommand;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testZerosLoop() throws Exception {
1:         Random rand = new Random();
1:         int randInt = rand.nextInt(100);
1:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1: 
1:         KahaDBStore store = new KahaDBStore();
1:         store.setJournalMaxFileLength(5*1024*1024);
1:         store.deleteAllMessages();
1:         store.setDirectory(dataDirectory);
1:         store.setPreallocationStrategy("zeros");
1:         store.start();
1: 
1:         final File journalLog = new File(dataDirectory, "db-1.log");
1:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return journalLog.exists();
1:             }
1:         }));
1: 
1: 
1:         KahaTraceCommand traceCommand = new KahaTraceCommand();
1:         traceCommand.setMessage(new String(new byte[2*1024*1024]));
1:         Location location = null;
1:         for (int i=0; i<20; i++) {
1:             location = store.store(traceCommand);
1:         }
1:         LOG.info("Last location:" + location);
1: 
1:         LOG.info("Store journal files:" + store.getJournal().getFiles().size());
1: 
1:     }
1: 
commit:4a82118
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(PreallocationJournalTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info ("file size:" + journalLog + ", chan.size " + channel.size() + ", jfileSize.length: " + journalLog.length());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("File size: " + channel.size());
commit:2949e8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final File journalLog = new File(dataDirectory, "db-1.log");
1:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return journalLog.exists();
1:             }
1:         }));
1:         final FileChannel channel = is.getChannel();
1:         assertTrue("file size as expected", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return Journal.DEFAULT_MAX_FILE_LENGTH == channel.size();
1:             }
1:         }));
author:Christian Posta
-------------------------------------------------------------------------------
commit:023b2ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.Random;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Created by ceposta
1:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:  */
1: public class PreallocationJournalTest  {
1: 
1:     @Test
1:     public void testSparseFilePreallocation() throws Exception {
1:         executeTest("sparse_file");
1:     }
1: 
1:     @Test
1:     public void testOSCopyPreallocation() throws Exception {
1:         executeTest("os_kernel_copy");
1:     }
1: 
1:     @Test
1:     public void testZerosPreallocation() throws Exception {
1:         executeTest("zeros");
1:     }
1: 
1:     private void executeTest(String preallocationStrategy)throws Exception {
1:         Random rand = new Random();
1:         int randInt = rand.nextInt(100);
1:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1: 
1:         KahaDBStore store = new KahaDBStore();
1:         store.deleteAllMessages();
1:         store.setDirectory(dataDirectory);
1:         store.setPreallocationStrategy(preallocationStrategy);
1:         store.start();
1: 
0:         // time for files to get there.. i know this is a brittle test! need to find
0:         // a better way (callbacks?) to notify when the journal is completely up
0:         TimeUnit.MILLISECONDS.sleep(500);
0:         File journalLog = new File(dataDirectory, "db-1.log");
0:         assertTrue(journalLog.exists());
1: 
1: 
1:         FileInputStream is = new FileInputStream(journalLog);
0:         FileChannel channel = is.getChannel();
0:         assertEquals(Journal.DEFAULT_MAX_FILE_LENGTH, channel.size());
1: 
1:         channel.position(1 * 1024 * 1024 + 1);
1:         ByteBuffer buff = ByteBuffer.allocate(1);
1:         channel.read(buff);
1:         buff.flip();
1:         buff.position(0);
1:         assertEquals(0x00, buff.get());
1: 
0:         System.out.println("File size: " + channel.size());
1: 
1: 
1:         store.stop();
1:     }
1: 
1: 
1: }
============================================================================