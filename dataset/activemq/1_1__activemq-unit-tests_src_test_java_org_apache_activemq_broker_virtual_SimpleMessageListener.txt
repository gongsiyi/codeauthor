1:4e63ee7: /**
1:4e63ee7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4e63ee7:  * contributor license agreements.  See the NOTICE file distributed with
1:4e63ee7:  * this work for additional information regarding copyright ownership.
1:4e63ee7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4e63ee7:  * (the "License"); you may not use this file except in compliance with
1:4e63ee7:  * the License.  You may obtain a copy of the License at
1:4e63ee7:  *
1:4e63ee7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4e63ee7:  *
1:4e63ee7:  * Unless required by applicable law or agreed to in writing, software
1:4e63ee7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4e63ee7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e63ee7:  * See the License for the specific language governing permissions and
1:4e63ee7:  * limitations under the License.
1:4e63ee7:  */
1:4e63ee7: package org.apache.activemq.broker.virtual;
1:4e63ee7: 
1:4e63ee7: import java.util.Enumeration;
1:4e63ee7: import java.util.concurrent.CountDownLatch;
1:4e63ee7: 
1:4e63ee7: import javax.jms.JMSException;
1:4e63ee7: import javax.jms.Message;
1:4e63ee7: import javax.jms.MessageListener;
1:4e63ee7: import javax.jms.TextMessage;
1:4e63ee7: 
1:4e63ee7: import org.slf4j.Logger;
1:4e63ee7: import org.slf4j.LoggerFactory;
1:4e63ee7: 
1:4e63ee7: public class SimpleMessageListener implements MessageListener {
1:4e63ee7: 
1:4e63ee7:   private static final Logger LOG = LoggerFactory.getLogger(SimpleMessageListener.class);
1:4e63ee7: 
1:4e63ee7:   private CountDownLatch messageReceivedToken;
1:4e63ee7: 
1:4e63ee7:   private String lastJMSDestination;
1:4e63ee7: 
1:4e63ee7:   @Override
1:4e63ee7:   public void onMessage(Message message) {
1:4e63ee7:     try {
1:4e63ee7:       Thread.sleep(2000L);
1:4e63ee7:       if (message instanceof TextMessage) {
1:4e63ee7:         LOG.info("Dest:" + message.getJMSDestination());
1:4e63ee7:         lastJMSDestination = message.getJMSDestination().toString();
1:4e63ee7: 
1:4e63ee7:         Enumeration propertyNames = message.getPropertyNames();
1:4e63ee7:         while (propertyNames.hasMoreElements()) {
1:4e63ee7:           Object object = propertyNames.nextElement();
1:4e63ee7:         }
1:4e63ee7: 
1:4e63ee7:       }
1:4e63ee7:       messageReceivedToken.countDown();
1:4e63ee7: 
1:4e63ee7:     }
1:4e63ee7:     catch (JMSException e) {
1:4e63ee7:       LOG.error("Error while listening to a message", message);
1:4e63ee7:     }
1:4e63ee7:     catch (InterruptedException e) {
1:4e63ee7:       LOG.error("Interrupted while listening to a message", message);
1:4e63ee7:     }
1:4e63ee7:   }
1:4e63ee7: 
1:4e63ee7:   /**
1:4e63ee7:    * @param countDown
1:4e63ee7:    *          the countDown to set
1:4e63ee7:    */
1:4e63ee7:   public void setCountDown(CountDownLatch countDown) {
1:4e63ee7:     this.messageReceivedToken = countDown;
1:4e63ee7:   }
1:4e63ee7: 
1:4e63ee7:   /**
1:4e63ee7:    * @return the lastJMSDestination
1:4e63ee7:    */
1:4e63ee7:   public String getLastJMSDestination() {
1:4e63ee7:     return lastJMSDestination;
1:4e63ee7:   }
1:4e63ee7: 
1:4e63ee7: }
1:4e63ee7: 
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4e63ee7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import java.util.Enumeration;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.TextMessage;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class SimpleMessageListener implements MessageListener {
1: 
1:   private static final Logger LOG = LoggerFactory.getLogger(SimpleMessageListener.class);
1: 
1:   private CountDownLatch messageReceivedToken;
1: 
1:   private String lastJMSDestination;
1: 
1:   @Override
1:   public void onMessage(Message message) {
1:     try {
1:       Thread.sleep(2000L);
1:       if (message instanceof TextMessage) {
1:         LOG.info("Dest:" + message.getJMSDestination());
1:         lastJMSDestination = message.getJMSDestination().toString();
1: 
1:         Enumeration propertyNames = message.getPropertyNames();
1:         while (propertyNames.hasMoreElements()) {
1:           Object object = propertyNames.nextElement();
1:         }
1: 
1:       }
1:       messageReceivedToken.countDown();
1: 
1:     }
1:     catch (JMSException e) {
1:       LOG.error("Error while listening to a message", message);
1:     }
1:     catch (InterruptedException e) {
1:       LOG.error("Interrupted while listening to a message", message);
1:     }
1:   }
1: 
1:   /**
1:    * @param countDown
1:    *          the countDown to set
1:    */
1:   public void setCountDown(CountDownLatch countDown) {
1:     this.messageReceivedToken = countDown;
1:   }
1: 
1:   /**
1:    * @return the lastJMSDestination
1:    */
1:   public String getLastJMSDestination() {
1:     return lastJMSDestination;
1:   }
1: 
1: }
1: 
============================================================================