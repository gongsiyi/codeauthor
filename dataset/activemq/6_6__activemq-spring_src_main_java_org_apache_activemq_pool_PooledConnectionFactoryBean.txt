1:2e57fb5: /*
1:2e57fb5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e57fb5:  * contributor license agreements.  See the NOTICE file distributed with
1:2e57fb5:  * this work for additional information regarding copyright ownership.
1:2e57fb5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e57fb5:  * (the "License"); you may not use this file except in compliance with
1:2e57fb5:  * the License.  You may obtain a copy of the License at
1:2e57fb5:  *
1:2e57fb5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2e57fb5:  *
1:2e57fb5:  * Unless required by applicable law or agreed to in writing, software
1:2e57fb5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e57fb5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e57fb5:  * See the License for the specific language governing permissions and
1:2e57fb5:  * limitations under the License.
1:2e57fb5:  */
1:2e57fb5: package org.apache.activemq.pool;
8:2e57fb5: 
1:09fab74: import javax.annotation.PostConstruct;
1:09fab74: import javax.annotation.PreDestroy;
1:2e57fb5: import javax.jms.ConnectionFactory;
1:2e57fb5: import javax.transaction.TransactionManager;
1:b66559e: import org.apache.activemq.jms.pool.PooledConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:76de7c0: import org.springframework.beans.factory.FactoryBean;
1:76de7c0: 
1:2e57fb5: /**
1:2e57fb5:  * Simple factory bean used to create a jencks connection pool.
1:2e57fb5:  * Depending on the properties set, it will create a simple pool,
1:2e57fb5:  * a transaction aware connection pool, or a jca aware connection pool.
1:09fab74:  *
1:2e57fb5:  * <pre class="code">
1:2e57fb5:  * <bean id="pooledConnectionFactory" class="javax.script.ScriptEngineFactory.PooledConnectionFactoryFactoryBean">
1:2e57fb5:  *   <property name="connectionFactory" ref="connectionFactory" />
1:2e57fb5:  *   <property name="transactionManager" ref="transactionManager" />
1:2e57fb5:  *   <property name="resourceName" value="ResourceName" />
1:2e57fb5:  * </bean>
1:2e57fb5:  * </pre>
1:2e57fb5:  *
1:b66559e:  * The <code>resourceName</code> property should be used along with the {@link org.apache.activemq.jms.pool.GenericResourceManager} and have
1:2e57fb5:  * the same value than its <code>resourceName</code> property. This will make sure the transaction manager
1:2e57fb5:  * maps correctly the connection factory to the recovery process.
1:2e57fb5:  *
1:09fab74:  * @org.apache.xbean.XBean
1:2e57fb5:  */
1:76de7c0: public class PooledConnectionFactoryBean implements FactoryBean {
1:2e57fb5: 
1:8bf987b:     private static final Logger LOGGER = LoggerFactory.getLogger(PooledConnectionFactoryBean.class);
1:2e57fb5: 
1:1590da2:     private PooledConnectionFactory pooledConnectionFactory;
1:2e57fb5:     private ConnectionFactory connectionFactory;
1:1bd6be8:     private int maxConnections = 1;
1:1bd6be8:     private int maximumActive = 500;
1:2e57fb5:     private Object transactionManager;
1:2e57fb5:     private String resourceName;
1:2e57fb5: 
1:2e57fb5:     public int getMaxConnections() {
1:2e57fb5:         return maxConnections;
6:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setMaxConnections(int maxConnections) {
1:2e57fb5:         this.maxConnections = maxConnections;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public int getMaximumActive() {
1:2e57fb5:         return maximumActive;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setMaximumActive(int maximumActive) {
1:2e57fb5:         this.maximumActive = maximumActive;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public Object getTransactionManager() {
1:2e57fb5:         return transactionManager;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setTransactionManager(Object transactionManager) {
1:2e57fb5:         this.transactionManager = transactionManager;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public String getResourceName() {
1:2e57fb5:         return resourceName;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setResourceName(String resourceName) {
1:2e57fb5:         this.resourceName = resourceName;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public ConnectionFactory getConnectionFactory() {
1:2e57fb5:         return connectionFactory;
1:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:2e57fb5:         this.connectionFactory = connectionFactory;
1:2e57fb5:     }
1:2e57fb5: 
1:09fab74:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:174fe15:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.InitMethod
1:09fab74:      */
1:2e57fb5:     public void afterPropertiesSet() throws Exception {
1:2e57fb5:         if (pooledConnectionFactory == null && transactionManager != null && resourceName != null) {
1:2e57fb5:             try {
1:2e57fb5:                 LOGGER.debug("Trying to build a JcaPooledConnectionFactory");
1:2e57fb5:                 JcaPooledConnectionFactory f = new JcaPooledConnectionFactory();
1:2e57fb5:                 f.setName(resourceName);
1:2e57fb5:                 f.setTransactionManager((TransactionManager) transactionManager);
1:2e57fb5:                 f.setMaxConnections(maxConnections);
1:931ca18:                 f.setMaximumActiveSessionPerConnection(maximumActive);
1:2e57fb5:                 f.setConnectionFactory(connectionFactory);
1:2e57fb5:                 this.pooledConnectionFactory = f;
1:2e57fb5:             } catch (Throwable t) {
1:2e57fb5:                 LOGGER.debug("Could not create JCA enabled connection factory: " + t, t);
1:2e57fb5:             }
1:2e57fb5:         }
1:2e57fb5:         if (pooledConnectionFactory == null && transactionManager != null) {
1:2e57fb5:             try {
1:2e57fb5:                 LOGGER.debug("Trying to build a XaPooledConnectionFactory");
1:2e57fb5:                 XaPooledConnectionFactory f = new XaPooledConnectionFactory();
1:2e57fb5:                 f.setTransactionManager((TransactionManager) transactionManager);
1:2e57fb5:                 f.setMaxConnections(maxConnections);
1:931ca18:                 f.setMaximumActiveSessionPerConnection(maximumActive);
1:2e57fb5:                 f.setConnectionFactory(connectionFactory);
1:2e57fb5:                 this.pooledConnectionFactory = f;
1:2e57fb5:             } catch (Throwable t) {
1:2e57fb5:                 LOGGER.debug("Could not create XA enabled connection factory: " + t, t);
1:2e57fb5:             }
1:2e57fb5:         }
1:2e57fb5:         if (pooledConnectionFactory == null) {
1:2e57fb5:             try {
1:2e57fb5:                 LOGGER.debug("Trying to build a PooledConnectionFactory");
1:2e57fb5:                 PooledConnectionFactory f = new PooledConnectionFactory();
1:2e57fb5:                 f.setMaxConnections(maxConnections);
1:931ca18:                 f.setMaximumActiveSessionPerConnection(maximumActive);
1:2e57fb5:                 f.setConnectionFactory(connectionFactory);
1:2e57fb5:                 this.pooledConnectionFactory = f;
1:2e57fb5:             } catch (Throwable t) {
1:2e57fb5:                 LOGGER.debug("Could not create pooled connection factory: " + t, t);
1:2e57fb5:             }
1:2e57fb5:         }
1:2e57fb5:         if (pooledConnectionFactory == null) {
1:2e57fb5:             throw new IllegalStateException("Unable to create pooled connection factory.  Enable DEBUG log level for more informations");
1:2e57fb5:         }
1:2e57fb5:     }
1:1590da2: 
1:09fab74:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:09fab74:      *
1:174fe15:      * delegates to destroy, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PreDestroy
1:174fe15:     private void preDestroy() {
1:174fe15:         try {
1:174fe15:             destroy();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:2e57fb5:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.DestroyMethod
1:09fab74:      */
1:1590da2:     public void destroy() throws Exception {
1:1590da2:         if (pooledConnectionFactory != null) {
1:1590da2:             pooledConnectionFactory.stop();
1:1590da2:             pooledConnectionFactory = null;
1:1590da2:         }
1:1590da2:     }
1:76de7c0: 
1:931ca18:     @Override
1:76de7c0:     public Object getObject() throws Exception {
1:4ddbb85:         // in case spring-dm calls getObject before this bean has been initialized
1:4ddbb85:         if (pooledConnectionFactory == null) {
1:4ddbb85:             afterPropertiesSet();
1:4ddbb85:         }
1:76de7c0:         return pooledConnectionFactory;
1:76de7c0:     }
1:76de7c0: 
1:931ca18:     @Override
1:76de7c0:     public Class getObjectType() {
1:76de7c0:         return ConnectionFactory.class;
1:76de7c0:     }
1:76de7c0: 
1:931ca18:     @Override
1:76de7c0:     public boolean isSingleton() {
1:76de7c0:         return true;
1:76de7c0:     }
1:2e57fb5: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4ddbb85
/////////////////////////////////////////////////////////////////////////
1:         // in case spring-dm calls getObject before this bean has been initialized
1:         if (pooledConnectionFactory == null) {
1:             afterPropertiesSet();
1:         }
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jms.pool.PooledConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:  * The <code>resourceName</code> property should be used along with the {@link org.apache.activemq.jms.pool.GenericResourceManager} and have
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to destroy, done to prevent backwards incompatible signature change.
1:      */
1:     @PreDestroy
1:     private void preDestroy() {
1:         try {
1:             destroy();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
commit:931ca18
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 f.setMaximumActiveSessionPerConnection(maximumActive);
/////////////////////////////////////////////////////////////////////////
1:                 f.setMaximumActiveSessionPerConnection(maximumActive);
/////////////////////////////////////////////////////////////////////////
1:                 f.setMaximumActiveSessionPerConnection(maximumActive);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PooledConnectionFactoryBean.class);
commit:76de7c0
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.springframework.beans.factory.FactoryBean;
/////////////////////////////////////////////////////////////////////////
1: public class PooledConnectionFactoryBean implements FactoryBean {
/////////////////////////////////////////////////////////////////////////
1: 
0:     // FactoryBean methods
1:     public Object getObject() throws Exception {
1:         return pooledConnectionFactory;
1:     }
1: 
1:     public Class getObjectType() {
1:         return ConnectionFactory.class;
1:     }
1: 
1:     public boolean isSingleton() {
1:         return true;
1:     }
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
1: import javax.annotation.PreDestroy;
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
0: public class PooledConnectionFactoryBean {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * @throws Exception
1:      * @org.apache.xbean.DestroyMethod
1:      */
0:     @PreDestroy
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1590da2
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.beans.factory.DisposableBean;
/////////////////////////////////////////////////////////////////////////
0: public class PooledConnectionFactoryBean implements FactoryBean, InitializingBean, DisposableBean {
1:     private PooledConnectionFactory pooledConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void destroy() throws Exception {
1:         if (pooledConnectionFactory != null) {
1:             pooledConnectionFactory.stop();
1:             pooledConnectionFactory = null;
1:         }
1:     }
commit:1bd6be8
/////////////////////////////////////////////////////////////////////////
1:     private int maxConnections = 1;
1:     private int maximumActive = 500;
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.transaction.TransactionManager;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.commons.pool.ObjectPoolFactory;
0: import org.springframework.beans.factory.FactoryBean;
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: /**
1:  * Simple factory bean used to create a jencks connection pool.
1:  * Depending on the properties set, it will create a simple pool,
1:  * a transaction aware connection pool, or a jca aware connection pool.
1:  *
1:  * <pre class="code">
1:  * <bean id="pooledConnectionFactory" class="javax.script.ScriptEngineFactory.PooledConnectionFactoryFactoryBean">
1:  *   <property name="connectionFactory" ref="connectionFactory" />
1:  *   <property name="transactionManager" ref="transactionManager" />
1:  *   <property name="resourceName" value="ResourceName" />
1:  * </bean>
1:  * </pre>
1:  *
0:  * The <code>resourceName</code> property should be used along with the {@link ActiveMQResourceManager} and have
1:  * the same value than its <code>resourceName</code> property. This will make sure the transaction manager
1:  * maps correctly the connection factory to the recovery process.
1:  *
1:  */
0: public class PooledConnectionFactoryBean implements FactoryBean, InitializingBean {
1: 
0:     private static final Log LOGGER = LogFactory.getLog(PooledConnectionFactoryBean.class);
1: 
0:     private ConnectionFactory pooledConnectionFactory;
1:     private ConnectionFactory connectionFactory;
0:     private int maxConnections;
0:     private int maximumActive;
1:     private Object transactionManager;
1:     private String resourceName;
0:     private ObjectPoolFactory poolFactory;
1: 
0:     public Object getObject() throws Exception {
0:         return pooledConnectionFactory;
1:     }
1: 
0:     public Class getObjectType() {
0:         return ConnectionFactory.class;
1:     }
1: 
0:     public boolean isSingleton() {
0:         return true;
1:     }
1: 
1:     public int getMaxConnections() {
1:         return maxConnections;
1:     }
1: 
1:     public void setMaxConnections(int maxConnections) {
1:         this.maxConnections = maxConnections;
1:     }
1: 
1:     public int getMaximumActive() {
1:         return maximumActive;
1:     }
1: 
1:     public void setMaximumActive(int maximumActive) {
1:         this.maximumActive = maximumActive;
1:     }
1: 
1:     public Object getTransactionManager() {
1:         return transactionManager;
1:     }
1: 
1:     public void setTransactionManager(Object transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     public String getResourceName() {
1:         return resourceName;
1:     }
1: 
1:     public void setResourceName(String resourceName) {
1:         this.resourceName = resourceName;
1:     }
1: 
1:     public ConnectionFactory getConnectionFactory() {
1:         return connectionFactory;
1:     }
1: 
1:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
0:     public ObjectPoolFactory getPoolFactory() {
0:         return poolFactory;
1:     }
1: 
0:     public void setPoolFactory(ObjectPoolFactory poolFactory) {
0:         this.poolFactory = poolFactory;
1:     }
1: 
1:     public void afterPropertiesSet() throws Exception {
1:         if (pooledConnectionFactory == null && transactionManager != null && resourceName != null) {
1:             try {
1:                 LOGGER.debug("Trying to build a JcaPooledConnectionFactory");
1:                 JcaPooledConnectionFactory f = new JcaPooledConnectionFactory();
1:                 f.setName(resourceName);
1:                 f.setTransactionManager((TransactionManager) transactionManager);
1:                 f.setMaxConnections(maxConnections);
0:                 f.setMaximumActive(maximumActive);
1:                 f.setConnectionFactory(connectionFactory);
0:                 f.setPoolFactory(poolFactory);
1:                 this.pooledConnectionFactory = f;
1:             } catch (Throwable t) {
1:                 LOGGER.debug("Could not create JCA enabled connection factory: " + t, t);
1:             }
1:         }
1:         if (pooledConnectionFactory == null && transactionManager != null) {
1:             try {
1:                 LOGGER.debug("Trying to build a XaPooledConnectionFactory");
1:                 XaPooledConnectionFactory f = new XaPooledConnectionFactory();
1:                 f.setTransactionManager((TransactionManager) transactionManager);
1:                 f.setMaxConnections(maxConnections);
0:                 f.setMaximumActive(maximumActive);
1:                 f.setConnectionFactory(connectionFactory);
0:                 f.setPoolFactory(poolFactory);
1:                 this.pooledConnectionFactory = f;
1:             } catch (Throwable t) {
1:                 LOGGER.debug("Could not create XA enabled connection factory: " + t, t);
1:             }
1:         }
1:         if (pooledConnectionFactory == null) {
1:             try {
1:                 LOGGER.debug("Trying to build a PooledConnectionFactory");
1:                 PooledConnectionFactory f = new PooledConnectionFactory();
1:                 f.setMaxConnections(maxConnections);
0:                 f.setMaximumActive(maximumActive);
1:                 f.setConnectionFactory(connectionFactory);
0:                 f.setPoolFactory(poolFactory);
1:                 this.pooledConnectionFactory = f;
1:             } catch (Throwable t) {
1:                 LOGGER.debug("Could not create pooled connection factory: " + t, t);
1:             }
1:         }
1:         if (pooledConnectionFactory == null) {
1:             throw new IllegalStateException("Unable to create pooled connection factory.  Enable DEBUG log level for more informations");
1:         }
1:     }
1: }
============================================================================