1:d8c939a: /**
1:d8c939a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8c939a:  * contributor license agreements.  See the NOTICE file distributed with
1:d8c939a:  * this work for additional information regarding copyright ownership.
1:d8c939a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8c939a:  * (the "License"); you may not use this file except in compliance with
1:d8c939a:  * the License.  You may obtain a copy of the License at
1:d8c939a:  * <p>
1:d8c939a:  * http://www.apache.org/licenses/LICENSE-2.0
1:d8c939a:  * <p>
1:d8c939a:  * Unless required by applicable law or agreed to in writing, software
1:d8c939a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8c939a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8c939a:  * See the License for the specific language governing permissions and
1:d8c939a:  * limitations under the License.
1:d8c939a:  */
1:d8c939a: package org.apache.activemq.camel;
1:d8c939a: 
1:d8c939a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d8c939a: import org.apache.activemq.broker.*;
1:d8c939a: import org.apache.activemq.command.ActiveMQQueue;
1:d8c939a: import org.apache.activemq.command.ConnectionInfo;
1:d8c939a: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:d8c939a: import org.junit.Test;
1:d8c939a: import org.slf4j.Logger;
1:d8c939a: import org.slf4j.LoggerFactory;
1:d8c939a: import org.springframework.context.support.AbstractXmlApplicationContext;
1:d8c939a: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:d8c939a: 
1:d8c939a: import javax.jms.*;
1:d8c939a: import javax.jms.Connection;
1:d8c939a: import java.util.concurrent.atomic.AtomicInteger;
1:d8c939a: 
1:d8c939a: public class JmsBridge extends CamelSpringTestSupport {
1:d8c939a: 
1:d8c939a:     private static final Logger LOG = LoggerFactory.getLogger(JmsBridge.class);
1:d8c939a: 
1:d8c939a:     BrokerService brokerSub = null;
1:d8c939a:     BrokerService brokerPub = null;
1:d8c939a: 
1:d8c939a:     int messageCount;
1:d8c939a:     final int backLog = 50;
1:d8c939a:     final int errorLimit = 10;
1:d8c939a:     AtomicInteger sendCount = new AtomicInteger();
1:d8c939a:     AtomicInteger connectionCount = new AtomicInteger();
1:d8c939a: 
1:d8c939a: 
1:d8c939a:     @Test
1:d8c939a:     public void testBridgeWorks() throws Exception {
1:d8c939a:         sendJMSMessageToKickOffRoute();
1:d8c939a: 
1:d8c939a:         consumeMessages();
1:d8c939a: 
1:d8c939a:         LOG.info("ConnectionCount: " + connectionCount.get());
1:d8c939a:         assertEquals("x connections", 5 + errorLimit, connectionCount.get());
1:d8c939a:     }
1:d8c939a: 
1:d8c939a:     private void consumeMessages() throws Exception {
1:d8c939a: 
1:d8c939a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://sub");
1:d8c939a:         factory.setWatchTopicAdvisories(false);
1:d8c939a:         Connection connection = factory.createConnection();
1:d8c939a:         connection.start();
1:d8c939a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d8c939a:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to"));
1:d8c939a: 
1:d8c939a:         int messagesToConsume = messageCount;
1:d8c939a:         while (messagesToConsume > 0) {
1:d8c939a:             Message message = consumer.receive(5000);
1:d8c939a:             if (message != null) {
1:d8c939a:                 messagesToConsume--;
1:d8c939a:             }
1:d8c939a:         }
1:d8c939a:     }
1:d8c939a: 
1:d8c939a:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:d8c939a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://pub");
1:d8c939a:         factory.setWatchTopicAdvisories(false);
1:d8c939a:         Connection connection = factory.createConnection();
1:d8c939a:         connection.start();
1:d8c939a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d8c939a:         MessageProducer producer = session.createProducer(new ActiveMQQueue("from"));
1:d8c939a: 
1:d8c939a:         for (int i = 0; i < backLog; i++) {
1:d8c939a:             TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:d8c939a:             message.setIntProperty("seq", messageCount);
1:d8c939a:             producer.send(message);
1:d8c939a:         }
1:d8c939a:         connection.close();
1:d8c939a:     }
1:d8c939a: 
1:d8c939a:     private BrokerService createBroker(String name, int port, boolean deleteAllMessages) throws Exception {
1:d8c939a:         BrokerService brokerService = new BrokerService();
1:d8c939a:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:d8c939a:         brokerService.setBrokerName(name);
1:d8c939a:         brokerService.setAdvisorySupport(false);
1:d8c939a:         brokerService.setUseJmx(false);
1:d8c939a:         brokerService.setDataDirectory("target/data");
1:d8c939a:         if (port > 0) {
1:d8c939a:             brokerService.addConnector("tcp://0.0.0.0:" + port);
1:d8c939a:         }
1:d8c939a:         return brokerService;
1:d8c939a:     }
1:d8c939a: 
1:d8c939a:     @SuppressWarnings("unchecked")
1:d8c939a:     @Override
1:d8c939a:     protected AbstractXmlApplicationContext createApplicationContext() {
1:d8c939a: 
1:d8c939a:         try {
1:d8c939a:             brokerSub = createBroker("sub", 61617, true);
1:d8c939a:             brokerSub.setPlugins(new BrokerPlugin[]{new BrokerPluginSupport() {
1:d8c939a:                 @Override
1:d8c939a:                 public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:d8c939a:                     if (sendCount.incrementAndGet() <= errorLimit) {
1:d8c939a:                         throw new RuntimeException("You need to try send " + errorLimit + " times!");
1:d8c939a:                     }
1:d8c939a:                     super.send(producerExchange, messageSend);
1:d8c939a:                 }
1:d8c939a: 
1:d8c939a:                 @Override
1:d8c939a:                 public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:d8c939a:                     if (((TransportConnector) context.getConnector()).getConnectUri().getScheme().equals("tcp") && connectionCount.incrementAndGet() <= errorLimit) {
1:d8c939a:                         throw new SecurityException("You need to try connect " + errorLimit + " times!");
1:d8c939a:                     }
1:d8c939a:                     super.addConnection(context, info);
1:d8c939a:                 }
1:d8c939a:             }});
1:d8c939a:             brokerSub.start();
1:d8c939a: 
1:d8c939a:             brokerPub = createBroker("pub", 61616, true);
1:d8c939a:             brokerPub.start();
1:d8c939a: 
1:d8c939a: 
1:d8c939a:         } catch (Exception e) {
1:d8c939a:             throw new RuntimeException("Failed to start broker", e);
1:d8c939a:         }
1:d8c939a: 
1:d8c939a:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsBridge.xml");
1:d8c939a:     }
1:d8c939a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d8c939a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.*;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: import javax.jms.*;
1: import javax.jms.Connection;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: public class JmsBridge extends CamelSpringTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsBridge.class);
1: 
1:     BrokerService brokerSub = null;
1:     BrokerService brokerPub = null;
1: 
1:     int messageCount;
1:     final int backLog = 50;
1:     final int errorLimit = 10;
1:     AtomicInteger sendCount = new AtomicInteger();
1:     AtomicInteger connectionCount = new AtomicInteger();
1: 
1: 
1:     @Test
1:     public void testBridgeWorks() throws Exception {
1:         sendJMSMessageToKickOffRoute();
1: 
1:         consumeMessages();
1: 
1:         LOG.info("ConnectionCount: " + connectionCount.get());
1:         assertEquals("x connections", 5 + errorLimit, connectionCount.get());
1:     }
1: 
1:     private void consumeMessages() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://sub");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to"));
1: 
1:         int messagesToConsume = messageCount;
1:         while (messagesToConsume > 0) {
1:             Message message = consumer.receive(5000);
1:             if (message != null) {
1:                 messagesToConsume--;
1:             }
1:         }
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://pub");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("from"));
1: 
1:         for (int i = 0; i < backLog; i++) {
1:             TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:             message.setIntProperty("seq", messageCount);
1:             producer.send(message);
1:         }
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(String name, int port, boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName(name);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectory("target/data");
1:         if (port > 0) {
1:             brokerService.addConnector("tcp://0.0.0.0:" + port);
1:         }
1:         return brokerService;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1: 
1:         try {
1:             brokerSub = createBroker("sub", 61617, true);
1:             brokerSub.setPlugins(new BrokerPlugin[]{new BrokerPluginSupport() {
1:                 @Override
1:                 public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:                     if (sendCount.incrementAndGet() <= errorLimit) {
1:                         throw new RuntimeException("You need to try send " + errorLimit + " times!");
1:                     }
1:                     super.send(producerExchange, messageSend);
1:                 }
1: 
1:                 @Override
1:                 public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:                     if (((TransportConnector) context.getConnector()).getConnectUri().getScheme().equals("tcp") && connectionCount.incrementAndGet() <= errorLimit) {
1:                         throw new SecurityException("You need to try connect " + errorLimit + " times!");
1:                     }
1:                     super.addConnection(context, info);
1:                 }
1:             }});
1:             brokerSub.start();
1: 
1:             brokerPub = createBroker("pub", 61616, true);
1:             brokerPub.start();
1: 
1: 
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1: 
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsBridge.xml");
1:     }
1: }
============================================================================