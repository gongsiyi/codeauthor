1:301203e: /**
1:301203e:  *
1:301203e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:301203e:  * contributor license agreements.  See the NOTICE file distributed with
1:301203e:  * this work for additional information regarding copyright ownership.
1:301203e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:301203e:  * (the "License"); you may not use this file except in compliance with
1:301203e:  * the License.  You may obtain a copy of the License at
1:301203e:  *
1:301203e:  * http://www.apache.org/licenses/LICENSE-2.0
1:301203e:  *
1:301203e:  * Unless required by applicable law or agreed to in writing, software
1:301203e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:301203e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:301203e:  * See the License for the specific language governing permissions and
1:301203e:  * limitations under the License.
1:301203e:  */
1:301203e: 
1:301203e: package org.apache.activemq.openwire.v4;
1:301203e: 
1:301203e: import java.io.DataInput;
1:301203e: import java.io.DataOutput;
1:301203e: import java.io.IOException;
1:301203e: 
1:301203e: import org.apache.activemq.openwire.*;
1:301203e: import org.apache.activemq.command.*;
1:301203e: 
1:301203e: 
1:301203e: 
1:301203e: /**
1:301203e:  * Marshalling code for Open Wire Format for ActiveMQMessageMarshaller
1:301203e:  *
1:301203e:  *
1:301203e:  * NOTE!: This file is auto generated - do not modify!
1:301203e:  *        if you need to make a change, please see the modify the groovy scripts in the
1:301203e:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:301203e:  *        this file.
1:0bbc0ac:  *
1:301203e:  * 
1:301203e:  */
1:301203e: public class ActiveMQMessageMarshaller extends MessageMarshaller {
1:301203e: 
1:301203e:     /**
1:301203e:      * Return the type of Data Structure we marshal
1:301203e:      * @return short representation of the type data structure
1:301203e:      */
1:301203e:     public byte getDataStructureType() {
1:301203e:         return ActiveMQMessage.DATA_STRUCTURE_TYPE;
1:301203e:     }
1:301203e:     
1:301203e:     /**
1:301203e:      * @return a new object instance
1:301203e:      */
1:301203e:     public DataStructure createObject() {
1:301203e:         return new ActiveMQMessage();
1:301203e:     }
1:301203e: 
1:301203e:     /**
1:301203e:      * Un-marshal an object instance from the data input stream
1:301203e:      *
1:301203e:      * @param o the object to un-marshal
1:301203e:      * @param dataIn the data input stream to build the object from
1:301203e:      * @throws IOException
1:301203e:      */
1:301203e:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:301203e:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:301203e: 
1:301203e:     }
1:301203e: 
1:301203e: 
1:301203e:     /**
1:301203e:      * Write the booleans that this object uses to a BooleanStream
1:301203e:      */
1:301203e:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:301203e: 
1:301203e:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:301203e: 
1:301203e:         return rc + 0;
1:301203e:     }
1:301203e: 
1:301203e:     /**
1:301203e:      * Write a object instance to data output stream
1:301203e:      *
1:301203e:      * @param o the instance to be marshaled
1:301203e:      * @param dataOut the output stream
1:301203e:      * @throws IOException thrown if an error occurs
1:301203e:      */
1:301203e:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:301203e:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:301203e: 
1:301203e:     }
1:301203e: 
1:301203e:     /**
1:301203e:      * Un-marshal an object instance from the data input stream
1:301203e:      *
1:301203e:      * @param o the object to un-marshal
1:301203e:      * @param dataIn the data input stream to build the object from
1:301203e:      * @throws IOException
1:301203e:      */
1:301203e:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:301203e:         super.looseUnmarshal(wireFormat, o, dataIn);
1:301203e: 
1:301203e:     }
1:301203e: 
1:301203e: 
1:301203e:     /**
1:301203e:      * Write the booleans that this object uses to a BooleanStream
1:301203e:      */
1:301203e:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:301203e: 
1:301203e:         super.looseMarshal(wireFormat, o, dataOut);
1:301203e: 
1:301203e:     }
1:301203e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9c39f4e
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:301203e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v4;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for ActiveMQMessageMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public class ActiveMQMessageMarshaller extends MessageMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return ActiveMQMessage.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new ActiveMQMessage();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1: 
1:         return rc + 0;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1: 
1:     }
1: }
============================================================================