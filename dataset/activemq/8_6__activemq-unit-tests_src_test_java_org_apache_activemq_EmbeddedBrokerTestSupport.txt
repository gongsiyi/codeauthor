1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
9:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:93dc39b: 
1:02dc6ce: import javax.jms.Connection;
1:02dc6ce: import javax.jms.ConnectionFactory;
1:02dc6ce: import javax.jms.Destination;
1:02dc6ce: 
1:93dc39b: import org.apache.activemq.broker.BrokerService;
1:a0426cb: import org.apache.activemq.command.ActiveMQDestination;
1:93dc39b: import org.apache.activemq.command.ActiveMQQueue;
1:93dc39b: import org.apache.activemq.command.ActiveMQTopic;
1:93dc39b: import org.springframework.jms.core.JmsTemplate;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A useful base class which creates and closes an embedded broker
1:42e51a3:  *
1:42e51a3:  *
1:d29ca2a:  */
1:049b43c: public abstract class EmbeddedBrokerTestSupport extends CombinationTestSupport {
1:93dc39b: 
1:d29ca2a:     protected BrokerService broker;
1:74a7a8b:     // protected String bindAddress = "tcp://localhost:61616";
1:d29ca2a:     protected String bindAddress = "vm://localhost";
1:d29ca2a:     protected ConnectionFactory connectionFactory;
1:230a86c:     protected boolean useTopic;
1:a0426cb:     protected ActiveMQDestination destination;
1:d29ca2a:     protected JmsTemplate template;
1:42e51a3: 
1:02dc6ce:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         if (broker == null) {
1:d29ca2a:             broker = createBroker();
4:d29ca2a:         }
1:d29ca2a:         startBroker();
7:d29ca2a: 
1:d29ca2a:         connectionFactory = createConnectionFactory();
1:d29ca2a: 
1:d29ca2a:         destination = createDestination();
1:d29ca2a: 
1:d29ca2a:         template = createJmsTemplate();
1:d29ca2a:         template.setDefaultDestination(destination);
1:d29ca2a:         template.setPubSubDomain(useTopic);
1:d29ca2a:         template.afterPropertiesSet();
1:d29ca2a:     }
1:d29ca2a: 
1:02dc6ce:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (broker != null) {
1:8163b0b:             try {
1:8163b0b:                 broker.stop();
1:8163b0b:             } catch (Exception e) {
1:8163b0b:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new {@link JmsTemplate}
1:42e51a3:      *
1:d29ca2a:      * @return a newly created JmsTemplate
1:d29ca2a:      */
1:d29ca2a:     protected JmsTemplate createJmsTemplate() {
1:d29ca2a:         return new JmsTemplate(connectionFactory);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new {@link Destination}
1:42e51a3:      *
1:d29ca2a:      * @return newly created Destinaiton
1:d29ca2a:      */
1:a0426cb:     protected ActiveMQDestination createDestination() {
1:d29ca2a:         return createDestination(getDestinationString());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create the destination in either the queue or topic
1:d29ca2a:      * space based on the value of the {@link #useTopic} field
1:d29ca2a:      */
1:a0426cb:     protected ActiveMQDestination createDestination(String subject) {
1:d29ca2a:         if (useTopic) {
1:d29ca2a:             return new ActiveMQTopic(subject);
1:74a7a8b:         } else {
1:d29ca2a:             return new ActiveMQQueue(subject);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the name of the destination used in this test case
1:d29ca2a:      */
1:d29ca2a:     protected String getDestinationString() {
1:d29ca2a:         return getClass().getName() + "." + getName();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new {@link ConnectionFactory} instance
1:42e51a3:      *
1:d29ca2a:      * @return a newly created connection factory
1:d29ca2a:      */
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         return new ActiveMQConnectionFactory(bindAddress);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new broker
1:42e51a3:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         BrokerService answer = new BrokerService();
1:d29ca2a:         answer.setPersistent(isPersistent());
1:02dc6ce:         answer.getManagementContext().setCreateConnector(false);
1:d29ca2a:         answer.addConnector(bindAddress);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void startBroker() throws Exception {
1:d29ca2a:         broker.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return whether or not persistence should be used
1:d29ca2a:      */
1:d29ca2a:     protected boolean isPersistent() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new connection
1:d29ca2a:      */
1:d29ca2a:     protected Connection createConnection() throws Exception {
1:d29ca2a:         return connectionFactory.createConnection();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:02dc6ce
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         answer.getManagementContext().setCreateConnector(false);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8163b0b
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 broker.stop();
1:             } catch (Exception e) {
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(EmbeddedBrokerTestSupport.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1:     // protected String bindAddress = "tcp://localhost:61616";
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log LOG = LogFactory.getLog(EmbeddedBrokerTestSupport.class);
1:     protected boolean useTopic;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.pool.PooledConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.jms.core.JmsTemplate;
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(EmbeddedBrokerTestSupport.class);
1:     
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.pool.PooledConnectionFactory;
0: import org.springframework.jms.core.JmsTemplate;
1: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Destination;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  * A useful base class which creates and closes an embedded broker
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class EmbeddedBrokerTestSupport extends TestCase {
1: 
1:     protected BrokerService broker;
0:     //protected String bindAddress = "tcp://localhost:61616";
1:     protected String bindAddress = "vm://localhost";
1:     protected ConnectionFactory connectionFactory;
0:     protected boolean useTopic = false;
0:     protected Destination destination;
1:     protected JmsTemplate template;
0:     private boolean usePooledConnectionWithTemplate = true;
1: 
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         startBroker();
1: 
1:         connectionFactory = createConnectionFactory();
1: 
1:         destination = createDestination();
1: 
1:         template = createJmsTemplate();
1:         template.setDefaultDestination(destination);
1:         template.setPubSubDomain(useTopic);
1:         template.afterPropertiesSet();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (broker != null) {
0:             broker.stop();
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a new {@link JmsTemplate}
1:      * 
1:      * @return a newly created JmsTemplate
1:      */
1:     protected JmsTemplate createJmsTemplate() {
0:         if (usePooledConnectionWithTemplate) {
0:             // lets use a pool to avoid creating and closing producers
0:             return new JmsTemplate(new PooledConnectionFactory(bindAddress));
1:         }
0:         else {
1:             return new JmsTemplate(connectionFactory);
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a new {@link Destination}
1:      * 
1:      * @return newly created Destinaiton
1:      */
0:     protected Destination createDestination() {
1:         return createDestination(getDestinationString());
1:     }
1: 
1:     /**
1:      * Factory method to create the destination in either the queue or topic
1:      * space based on the value of the {@link #useTopic} field
1:      */
0:     protected Destination createDestination(String subject) {
1:         if (useTopic) {
1:             return new ActiveMQTopic(subject);
1:         }
0:         else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
1:     /**
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
1:         return getClass().getName() + "." + getName();
1:     }
1: 
1:     /**
1:      * Factory method to create a new {@link ConnectionFactory} instance
1:      * 
1:      * @return a newly created connection factory
1:      */
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(bindAddress);
1:     }
1: 
1:     /**
1:      * Factory method to create a new broker
1:      * 
1:      * @throws Exception
1:      */
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(isPersistent());
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         broker.start();
1:     }
1: 
1:     /**
1:      * @return whether or not persistence should be used
1:      */
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
1:     /**
1:      * Factory method to create a new connection
1:      */
1:     protected Connection createConnection() throws Exception {
1:         return connectionFactory.createConnection();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:a0426cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination destination;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination createDestination() {
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination createDestination(String subject) {
commit:0c12790
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:049b43c
/////////////////////////////////////////////////////////////////////////
1: public abstract class EmbeddedBrokerTestSupport extends CombinationTestSupport {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:         return new JmsTemplate(connectionFactory);
author:James Strachan
-------------------------------------------------------------------------------
commit:4ae7e1c
/////////////////////////////////////////////////////////////////////////
0: public abstract class EmbeddedBrokerTestSupport extends TestCase {
============================================================================