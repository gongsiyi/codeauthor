1:f798865: /**
1:f798865:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f798865:  * contributor license agreements.  See the NOTICE file distributed with
1:f798865:  * this work for additional information regarding copyright ownership.
1:f798865:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f798865:  * (the "License"); you may not use this file except in compliance with
1:f798865:  * the License.  You may obtain a copy of the License at
1:f798865:  *
1:f798865:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f798865:  *
1:f798865:  * Unless required by applicable law or agreed to in writing, software
1:f798865:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f798865:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f798865:  * See the License for the specific language governing permissions and
1:f798865:  * limitations under the License.
1:f798865:  */
1:f798865: 
1:f798865: package org.apache.activemq.broker.region;
1:f798865: 
1:f798865: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f798865: import org.apache.activemq.broker.BrokerService;
1:f798865: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:f798865: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:f798865: import org.apache.activemq.broker.region.policy.PolicyMap;
1:f798865: import org.apache.activemq.broker.region.policy.UniquePropertyMessageEvictionStrategy;
1:f798865: 
1:f798865: import javax.jms.*;
1:f798865: import java.util.ArrayList;
1:f798865: import java.util.List;
1:f798865: 
1:f798865: public class UniquePropertyMessageEvictionStrategyTest extends EmbeddedBrokerTestSupport {
1:f798865: 
1:f798865: 
1:f798865: 
1:f798865:     @Override
1:f798865:     protected BrokerService createBroker() throws Exception {
1:f798865:         BrokerService broker =  super.createBroker();
1:f798865:                 final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:f798865:         final PolicyEntry entry = new PolicyEntry();
1:f798865:         entry.setTopic(">");
1:f798865: 
1:f798865:         entry.setAdvisoryForDiscardingMessages(true);
1:f798865:         entry.setTopicPrefetch(1);
1:f798865: 
1:f798865:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:f798865:         pendingMessageLimitStrategy.setLimit(10);
1:f798865:         entry.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1:f798865: 
1:f798865: 
1:f798865:         UniquePropertyMessageEvictionStrategy messageEvictionStrategy = new UniquePropertyMessageEvictionStrategy();
1:f798865:         messageEvictionStrategy.setPropertyName("sequenceI");
1:f798865:         entry.setMessageEvictionStrategy(messageEvictionStrategy);
1:f798865: 
1:f798865:         // let evicted messages disappear
1:f798865:         entry.setDeadLetterStrategy(null);
1:f798865:         policyEntries.add(entry);
1:f798865: 
1:f798865:         final PolicyMap policyMap = new PolicyMap();
1:f798865:         policyMap.setPolicyEntries(policyEntries);
1:f798865:         broker.setDestinationPolicy(policyMap);
1:f798865: 
1:f798865:         return broker;
1:f798865:     }
1:f798865: 
1:f798865:     public void testEviction() throws Exception {
1:f798865:         Connection conn = connectionFactory.createConnection();
1:f798865:         conn.start();
1:f798865:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f798865:         javax.jms.Topic destination = session.createTopic("TEST");
1:f798865: 
1:f798865:         MessageProducer producer = session.createProducer(destination);
1:f798865:         MessageConsumer consumer = session.createConsumer(destination);
1:f798865: 
1:f798865:         for (int i = 0; i < 10; i++) {
1:f798865:             for (int j = 0; j < 10; j++) {
1:f798865:                 TextMessage msg = session.createTextMessage("message " + i + j);
1:f798865:                 msg.setIntProperty("sequenceI", i);
1:f798865:                 msg.setIntProperty("sequenceJ", j);
1:f798865:                 producer.send(msg);
1:f798865:                 Thread.sleep(100);
1:f798865:             }
1:f798865:         }
1:f798865: 
1:f798865: 
1:f798865:         for (int i = 0; i < 11; i++) {
1:f798865:             javax.jms.Message msg = consumer.receive(1000);
1:f798865:             assertNotNull(msg);
1:f798865:             int seqI = msg.getIntProperty("sequenceI");
1:f798865:             int seqJ = msg.getIntProperty("sequenceJ");
1:f798865:             if (i ==0 ) {
1:f798865:                 assertEquals(0, seqI);
1:f798865:                 assertEquals(0, seqJ);
1:f798865:             } else {
1:f798865:                     assertEquals(9, seqJ);
1:f798865:                     assertEquals(i - 1, seqI);
1:f798865:             }
1:f798865:             //System.out.println(msg.getIntProperty("sequenceI") + " " + msg.getIntProperty("sequenceJ"));
1:f798865:         }
1:f798865: 
1:f798865:         javax.jms.Message msg = consumer.receive(1000);
1:f798865:         assertNull(msg);
1:f798865: 
1:f798865:     }
1:f798865: 
1:f798865: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f798865
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.UniquePropertyMessageEvictionStrategy;
1: 
1: import javax.jms.*;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: public class UniquePropertyMessageEvictionStrategyTest extends EmbeddedBrokerTestSupport {
1: 
1: 
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker =  super.createBroker();
1:                 final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setTopic(">");
1: 
1:         entry.setAdvisoryForDiscardingMessages(true);
1:         entry.setTopicPrefetch(1);
1: 
1:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:         pendingMessageLimitStrategy.setLimit(10);
1:         entry.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1: 
1: 
1:         UniquePropertyMessageEvictionStrategy messageEvictionStrategy = new UniquePropertyMessageEvictionStrategy();
1:         messageEvictionStrategy.setPropertyName("sequenceI");
1:         entry.setMessageEvictionStrategy(messageEvictionStrategy);
1: 
1:         // let evicted messages disappear
1:         entry.setDeadLetterStrategy(null);
1:         policyEntries.add(entry);
1: 
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         return broker;
1:     }
1: 
1:     public void testEviction() throws Exception {
1:         Connection conn = connectionFactory.createConnection();
1:         conn.start();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         javax.jms.Topic destination = session.createTopic("TEST");
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             for (int j = 0; j < 10; j++) {
1:                 TextMessage msg = session.createTextMessage("message " + i + j);
1:                 msg.setIntProperty("sequenceI", i);
1:                 msg.setIntProperty("sequenceJ", j);
1:                 producer.send(msg);
1:                 Thread.sleep(100);
1:             }
1:         }
1: 
1: 
1:         for (int i = 0; i < 11; i++) {
1:             javax.jms.Message msg = consumer.receive(1000);
1:             assertNotNull(msg);
1:             int seqI = msg.getIntProperty("sequenceI");
1:             int seqJ = msg.getIntProperty("sequenceJ");
1:             if (i ==0 ) {
1:                 assertEquals(0, seqI);
1:                 assertEquals(0, seqJ);
1:             } else {
1:                     assertEquals(9, seqJ);
1:                     assertEquals(i - 1, seqI);
1:             }
1:             //System.out.println(msg.getIntProperty("sequenceI") + " " + msg.getIntProperty("sequenceJ"));
1:         }
1: 
1:         javax.jms.Message msg = consumer.receive(1000);
1:         assertNull(msg);
1: 
1:     }
1: 
1: }
============================================================================