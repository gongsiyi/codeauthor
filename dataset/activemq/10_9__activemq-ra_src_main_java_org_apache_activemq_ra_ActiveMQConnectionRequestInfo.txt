1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
11:40a7d3b: 
1:40a7d3b: import java.io.Serializable;
1:40a7d3b: 
1:540dd5c: import javax.resource.spi.ConnectionRequestInfo;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.ActiveMQConnectionFactory;
1:540dd5c: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:9becfc0: import org.apache.activemq.ActiveMQSslConnectionFactory;
1:540dd5c: import org.apache.activemq.RedeliveryPolicy;
1:9becfc0: import org.slf4j.Logger;
1:9becfc0: import org.slf4j.LoggerFactory;
1:540dd5c: 
1:40a7d3b: /**
1:da36f78:  * Must override equals and hashCode (JCA spec 16.4)
1:40a7d3b:  */
1:40a7d3b: public class ActiveMQConnectionRequestInfo implements ConnectionRequestInfo, Serializable, Cloneable {
1:205ac11: 
1:40a7d3b:     private static final long serialVersionUID = -5754338187296859149L;
1:9becfc0:     protected Logger log = LoggerFactory.getLogger(getClass());
1:40a7d3b: 
1:40a7d3b:     private String userName;
1:40a7d3b:     private String password;
1:40a7d3b:     private String serverUrl;
1:40a7d3b:     private String clientid;
1:40a7d3b:     private Boolean useInboundSession;
1:c91724c:     private RedeliveryPolicy redeliveryPolicy;
1:c91724c:     private ActiveMQPrefetchPolicy prefetchPolicy;
1:9e13901:     private Boolean useSessionArgs;
1:9becfc0:     private String trustStore;
1:9becfc0:     private String trustStorePassword;
1:9becfc0:     private String keyStore;
1:9becfc0:     private String keyStorePassword;
1:9becfc0:     private String keyStoreKeyPassword;
1:40a7d3b: 
1:40a7d3b:     public ActiveMQConnectionRequestInfo copy() {
1:40a7d3b:         try {
1:da36f78:             ActiveMQConnectionRequestInfo answer = (ActiveMQConnectionRequestInfo) clone();
1:c91724c:             if (redeliveryPolicy != null) {
1:c91724c:                 answer.redeliveryPolicy = redeliveryPolicy.copy();
1:c91724c:             }
1:205ac11:             return answer;
1:540dd5c:         } catch (CloneNotSupportedException e) {
1:205ac11:             throw new RuntimeException("Could not clone: " + e, e);
4:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * Returns true if this object will configure an ActiveMQConnectionFactory
1:540dd5c:      * in any way
1:c91724c:      */
1:c91724c:     public boolean isConnectionFactoryConfigured() {
1:c91724c:         return serverUrl != null || clientid != null || redeliveryPolicy != null || prefetchPolicy != null;
1:c91724c:     }
1:c91724c: 
1:c91724c:     /**
1:c91724c:      * Configures the given connection factory
1:c91724c:      */
1:9becfc0:     public void configure(ActiveMQConnectionFactory factory, MessageActivationSpec activationSpec) {
1:c91724c:         if (serverUrl != null) {
1:c91724c:             factory.setBrokerURL(serverUrl);
1:c91724c:         }
1:c91724c:         if (clientid != null) {
1:c91724c:             factory.setClientID(clientid);
1:c91724c:         }
1:540dd5c:         if (redeliveryPolicy != null) {
1:c91724c:             factory.setRedeliveryPolicy(redeliveryPolicy);
1:c91724c:         }
1:c91724c:         if (prefetchPolicy != null) {
1:c91724c:             factory.setPrefetchPolicy(prefetchPolicy);
1:c91724c:         }
1:9becfc0:         if (factory instanceof ActiveMQSslConnectionFactory) {
1:9becfc0:             String trustStore = defaultValue(activationSpec == null ? null : activationSpec.getTrustStore(), getTrustStore());
1:9becfc0:             String trustStorePassword = defaultValue(activationSpec == null ? null : activationSpec.getTrustStorePassword(), getTrustStorePassword());
1:9becfc0:             String keyStore = defaultValue(activationSpec == null ? null : activationSpec.getKeyStore(), getKeyStore());
1:9becfc0:             String keyStorePassword = defaultValue(activationSpec == null ? null : activationSpec.getKeyStorePassword(), getKeyStorePassword());
1:9becfc0:             String keyStoreKeyPassword = defaultValue(activationSpec == null ? null : activationSpec.getKeyStoreKeyPassword(), getKeyStoreKeyPassword());
1:9becfc0:             ActiveMQSslConnectionFactory sslFactory = (ActiveMQSslConnectionFactory) factory;
1:9becfc0:             if (trustStore != null) {
1:9becfc0:                 try {
1:9becfc0:                     sslFactory.setTrustStore(trustStore);
1:9becfc0:                 } catch (Exception e) {
1:9becfc0:                     log.warn("Unable to set TrustStore", e);
1:9becfc0:                 }
1:9becfc0:             }
1:9becfc0:             if (trustStorePassword != null) {
1:9becfc0:                 sslFactory.setTrustStorePassword(trustStorePassword);
1:9becfc0:             }
1:9becfc0:             if (keyStore != null) {
1:9becfc0:                 try {
1:9becfc0:                     sslFactory.setKeyStore(keyStore);
1:9becfc0:                 } catch (Exception e) {
1:9becfc0:                     log.warn("Unable to set KeyStore", e);
1:9becfc0:                 }
1:9becfc0:             }
1:9becfc0:             if (keyStorePassword != null) {
1:9becfc0:                 sslFactory.setKeyStorePassword(keyStorePassword);
1:9becfc0:             }
1:9becfc0:             if (keyStoreKeyPassword != null) {
1:9becfc0:                 sslFactory.setKeyStoreKeyPassword(keyStoreKeyPassword);
1:9becfc0:             }
1:9becfc0:         }
1:c91724c:     }
1:540dd5c: 
1:c91724c:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionRequestInfo#hashCode()
1:40a7d3b:      */
1:da36f78:     @Override
1:40a7d3b:     public int hashCode() {
1:40a7d3b:         int rc = 0;
1:40a7d3b:         if (useInboundSession != null) {
1:40a7d3b:             rc ^= useInboundSession.hashCode();
1:40a7d3b:         }
1:9e13901:         if (useSessionArgs != null) {
1:9e13901:             rc ^= useSessionArgs.hashCode();
1:9e13901:         }
1:40a7d3b:         if (serverUrl != null) {
1:40a7d3b:             rc ^= serverUrl.hashCode();
1:40a7d3b:         }
1:40a7d3b:         return rc;
1:40a7d3b:     }
1:c91724c: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionRequestInfo#equals(java.lang.Object)
1:40a7d3b:      */
1:da36f78:     @Override
1:40a7d3b:     public boolean equals(Object o) {
1:40a7d3b:         if (o == null) {
1:40a7d3b:             return false;
1:40a7d3b:         }
1:40a7d3b:         if (!getClass().equals(o.getClass())) {
1:40a7d3b:             return false;
1:40a7d3b:         }
1:da36f78:         ActiveMQConnectionRequestInfo i = (ActiveMQConnectionRequestInfo) o;
1:205ac11:         if (notEqual(serverUrl, i.serverUrl)) {
1:40a7d3b:             return false;
1:40a7d3b:         }
1:205ac11:         if (notEqual(useInboundSession, i.useInboundSession)) {
1:40a7d3b:             return false;
1:40a7d3b:         }
1:9e13901:         if (notEqual(useSessionArgs, i.useSessionArgs)) {
1:9e13901:             return false;
1:9e13901:         }
1:40a7d3b:         return true;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param i
1:40a7d3b:      * @return
1:40a7d3b:      */
1:40a7d3b:     private boolean notEqual(Object o1, Object o2) {
1:40a7d3b:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return Returns the url.
1:40a7d3b:      */
1:40a7d3b:     public String getServerUrl() {
1:40a7d3b:         return serverUrl;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:da36f78:      * @param url
1:da36f78:      *        The url to set.
1:40a7d3b:      */
1:40a7d3b:     public void setServerUrl(String url) {
1:40a7d3b:         this.serverUrl = url;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return Returns the password.
1:40a7d3b:      */
1:40a7d3b:     public String getPassword() {
1:40a7d3b:         return password;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:da36f78:      * @param password
1:da36f78:      *        The password to set.
1:40a7d3b:      */
1:40a7d3b:     public void setPassword(String password) {
1:40a7d3b:         this.password = password;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return Returns the userid.
1:40a7d3b:      */
1:40a7d3b:     public String getUserName() {
1:40a7d3b:         return userName;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:da36f78:      * @param userid
1:da36f78:      *        The userid to set.
1:40a7d3b:      */
1:40a7d3b:     public void setUserName(String userid) {
1:40a7d3b:         this.userName = userid;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return Returns the clientid.
1:40a7d3b:      */
1:40a7d3b:     public String getClientid() {
1:40a7d3b:         return clientid;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:da36f78:      * @param clientid
1:da36f78:      *        The clientid to set.
1:40a7d3b:      */
1:40a7d3b:     public void setClientid(String clientid) {
1:40a7d3b:         this.clientid = clientid;
1:40a7d3b:     }
1:40a7d3b: 
1:9becfc0:     public String getTrustStore() {
1:9becfc0:         return trustStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setTrustStore(String trustStore) {
1:9becfc0:         this.trustStore = trustStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getTrustStorePassword() {
1:9becfc0:         return trustStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setTrustStorePassword(String trustStorePassword) {
1:9becfc0:         this.trustStorePassword = trustStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStore() {
1:9becfc0:         return keyStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStore(String keyStore) {
1:9becfc0:         this.keyStore = keyStore;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStorePassword() {
1:9becfc0:         return keyStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStorePassword(String keyStorePassword) {
1:9becfc0:         this.keyStorePassword = keyStorePassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public String getKeyStoreKeyPassword() {
1:9becfc0:         return keyStoreKeyPassword;
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:9becfc0:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:9becfc0:     }
1:9becfc0: 
1:8733d17:     @Override
1:40a7d3b:     public String toString() {
1:da36f78:         return new StringBuffer("ActiveMQConnectionRequestInfo{ userName = '").append(userName).append("' ").append(", serverUrl = '").append(serverUrl)
1:da36f78:             .append("' ").append(", clientid = '").append(clientid).append("' ").append(", userName = '").append(userName).append("' ")
1:da36f78:             .append(", useSessionArgs = '").append(useSessionArgs).append("' ").append(", useInboundSession = '").append(useInboundSession).append("'  }")
1:da36f78:             .toString();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Boolean getUseInboundSession() {
1:40a7d3b:         return useInboundSession;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setUseInboundSession(Boolean useInboundSession) {
1:40a7d3b:         this.useInboundSession = useInboundSession;
1:205ac11:     }
1:205ac11: 
1:40a7d3b:     public boolean isUseInboundSessionEnabled() {
1:205ac11:         return useInboundSession != null && useInboundSession.booleanValue();
1:205ac11:     }
1:205ac11: 
1:9cc9873:     public Double getRedeliveryBackOffMultiplier() {
1:9cc9873:         return Double.valueOf(redeliveryPolicy().getBackOffMultiplier());
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Long getInitialRedeliveryDelay() {
1:2256ec0:         return Long.valueOf(redeliveryPolicy().getInitialRedeliveryDelay());
1:205ac11:     }
1:205ac11: 
1:8fba621:     public Long getMaximumRedeliveryDelay() {
1:8fba621:         return Long.valueOf(redeliveryPolicy().getMaximumRedeliveryDelay());
1:8fba621:     }
1:8fba621: 
1:205ac11:     public Integer getMaximumRedeliveries() {
1:2256ec0:         return Integer.valueOf(redeliveryPolicy().getMaximumRedeliveries());
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Boolean getRedeliveryUseExponentialBackOff() {
1:2256ec0:         return Boolean.valueOf(redeliveryPolicy().isUseExponentialBackOff());
1:205ac11:     }
1:205ac11: 
1:37b9cb8:     public void setRedeliveryBackOffMultiplier(Double value) {
1:205ac11:         if (value != null) {
1:37b9cb8:             redeliveryPolicy().setBackOffMultiplier(value);
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setInitialRedeliveryDelay(Long value) {
1:205ac11:         if (value != null) {
1:c91724c:             redeliveryPolicy().setInitialRedeliveryDelay(value.longValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:8fba621:     public void setMaximumRedeliveryDelay(Long value) {
1:8fba621:         if (value != null) {
1:8fba621:             redeliveryPolicy().setMaximumRedeliveryDelay(value.longValue());
1:8fba621:         }
1:8fba621:     }
1:8fba621: 
1:205ac11:     public void setMaximumRedeliveries(Integer value) {
1:205ac11:         if (value != null) {
1:c91724c:             redeliveryPolicy().setMaximumRedeliveries(value.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
1:205ac11:         if (value != null) {
1:c91724c:             redeliveryPolicy().setUseExponentialBackOff(value.booleanValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Integer getDurableTopicPrefetch() {
1:2256ec0:         return Integer.valueOf(prefetchPolicy().getDurableTopicPrefetch());
1:205ac11:     }
1:205ac11: 
1:00bdf00:     public Integer getOptimizeDurableTopicPrefetch() {
1:00bdf00:         return Integer.valueOf(prefetchPolicy().getOptimizeDurableTopicPrefetch());
1:00bdf00:     }
1:00bdf00: 
1:da36f78:     @Deprecated
1:205ac11:     public Integer getInputStreamPrefetch() {
1:da36f78:         return 0;
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Integer getQueueBrowserPrefetch() {
1:2256ec0:         return Integer.valueOf(prefetchPolicy().getQueueBrowserPrefetch());
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Integer getQueuePrefetch() {
1:2256ec0:         return Integer.valueOf(prefetchPolicy().getQueuePrefetch());
1:205ac11:     }
1:205ac11: 
1:205ac11:     public Integer getTopicPrefetch() {
1:2256ec0:         return Integer.valueOf(prefetchPolicy().getTopicPrefetch());
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setAllPrefetchValues(Integer i) {
1:205ac11:         if (i != null) {
1:c91724c:             prefetchPolicy().setAll(i.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
1:205ac11:         if (durableTopicPrefetch != null) {
1:c91724c:             prefetchPolicy().setDurableTopicPrefetch(durableTopicPrefetch.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:86e9527:     public void setOptimizeDurableTopicPrefetch(Integer optimizeDurableTopicPrefetch) {
1:86e9527:         if (optimizeDurableTopicPrefetch != null) {
1:86e9527:             prefetchPolicy().setOptimizeDurableTopicPrefetch(optimizeDurableTopicPrefetch.intValue());
1:86e9527:         }
1:86e9527:     }
1:86e9527: 
1:205ac11:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
1:205ac11:         if (queueBrowserPrefetch != null) {
1:c91724c:             prefetchPolicy().setQueueBrowserPrefetch(queueBrowserPrefetch.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setQueuePrefetch(Integer queuePrefetch) {
1:205ac11:         if (queuePrefetch != null) {
1:c91724c:             prefetchPolicy().setQueuePrefetch(queuePrefetch.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     public void setTopicPrefetch(Integer topicPrefetch) {
1:205ac11:         if (topicPrefetch != null) {
1:c91724c:             prefetchPolicy().setTopicPrefetch(topicPrefetch.intValue());
1:205ac11:         }
1:205ac11:     }
1:205ac11: 
1:205ac11:     /**
1:205ac11:      * Returns the redelivery policy; not using bean properties to avoid
2:205ac11:      * breaking compatibility with JCA configuration in J2EE
1:205ac11:      */
1:205ac11:     public RedeliveryPolicy redeliveryPolicy() {
1:242353b:         if (redeliveryPolicy == null) {
1:c91724c:             redeliveryPolicy = new RedeliveryPolicy();
1:c91724c:         }
1:205ac11:         return redeliveryPolicy;
1:205ac11:     }
1:205ac11: 
1:205ac11:     /**
1:540dd5c:      * Returns the prefetch policy; not using bean properties to avoid breaking
1:540dd5c:      * compatibility with JCA configuration in J2EE
1:205ac11:      */
1:205ac11:     public ActiveMQPrefetchPolicy prefetchPolicy() {
1:242353b:         if (prefetchPolicy == null) {
1:c91724c:             prefetchPolicy = new ActiveMQPrefetchPolicy();
1:c91724c:         }
1:205ac11:         return prefetchPolicy;
1:205ac11:     }
1:9e13901: 
1:9e13901:     public boolean isUseSessionArgs() {
1:9e13901:         return useSessionArgs != null ? useSessionArgs.booleanValue() : false;
1:9e13901:     }
1:9e13901: 
1:9e13901:     public Boolean getUseSessionArgs() {
1:9e13901:         return useSessionArgs;
1:9e13901:     }
1:9e13901: 
1:9e13901:     public void setUseSessionArgs(Boolean useSessionArgs) {
1:9e13901:         this.useSessionArgs = useSessionArgs;
1:9e13901:     }
1:9becfc0: 
1:9becfc0:     protected String defaultValue(String value, String defaultValue) {
1:9becfc0:         if (value != null) {
1:9becfc0:             return value;
1:9becfc0:         }
1:9becfc0:         return defaultValue;
1:9becfc0:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da36f78
/////////////////////////////////////////////////////////////////////////
1:  * Must override equals and hashCode (JCA spec 16.4)
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionRequestInfo answer = (ActiveMQConnectionRequestInfo) clone();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionRequestInfo i = (ActiveMQConnectionRequestInfo) o;
/////////////////////////////////////////////////////////////////////////
1:      * @param url
1:      *        The url to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param password
1:      *        The password to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param userid
1:      *        The userid to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param clientid
1:      *        The clientid to set.
/////////////////////////////////////////////////////////////////////////
1:         return new StringBuffer("ActiveMQConnectionRequestInfo{ userName = '").append(userName).append("' ").append(", serverUrl = '").append(serverUrl)
1:             .append("' ").append(", clientid = '").append(clientid).append("' ").append(", userName = '").append(userName).append("' ")
1:             .append(", useSessionArgs = '").append(useSessionArgs).append("' ").append(", useInboundSession = '").append(useInboundSession).append("'  }")
1:             .toString();
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:         return 0;
/////////////////////////////////////////////////////////////////////////
author:Andy Taylor
-------------------------------------------------------------------------------
commit:9becfc0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSslConnectionFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected Logger log = LoggerFactory.getLogger(getClass());
/////////////////////////////////////////////////////////////////////////
1:     private String trustStore;
1:     private String trustStorePassword;
1:     private String keyStore;
1:     private String keyStorePassword;
1:     private String keyStoreKeyPassword;
/////////////////////////////////////////////////////////////////////////
1:     public void configure(ActiveMQConnectionFactory factory, MessageActivationSpec activationSpec) {
/////////////////////////////////////////////////////////////////////////
1:         if (factory instanceof ActiveMQSslConnectionFactory) {
1:             String trustStore = defaultValue(activationSpec == null ? null : activationSpec.getTrustStore(), getTrustStore());
1:             String trustStorePassword = defaultValue(activationSpec == null ? null : activationSpec.getTrustStorePassword(), getTrustStorePassword());
1:             String keyStore = defaultValue(activationSpec == null ? null : activationSpec.getKeyStore(), getKeyStore());
1:             String keyStorePassword = defaultValue(activationSpec == null ? null : activationSpec.getKeyStorePassword(), getKeyStorePassword());
1:             String keyStoreKeyPassword = defaultValue(activationSpec == null ? null : activationSpec.getKeyStoreKeyPassword(), getKeyStoreKeyPassword());
1:             ActiveMQSslConnectionFactory sslFactory = (ActiveMQSslConnectionFactory) factory;
1:             if (trustStore != null) {
1:                 try {
1:                     sslFactory.setTrustStore(trustStore);
1:                 } catch (Exception e) {
1:                     log.warn("Unable to set TrustStore", e);
1:                 }
1:             }
1:             if (trustStorePassword != null) {
1:                 sslFactory.setTrustStorePassword(trustStorePassword);
1:             }
1:             if (keyStore != null) {
1:                 try {
1:                     sslFactory.setKeyStore(keyStore);
1:                 } catch (Exception e) {
1:                     log.warn("Unable to set KeyStore", e);
1:                 }
1:             }
1:             if (keyStorePassword != null) {
1:                 sslFactory.setKeyStorePassword(keyStorePassword);
1:             }
1:             if (keyStoreKeyPassword != null) {
1:                 sslFactory.setKeyStoreKeyPassword(keyStoreKeyPassword);
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public String getTrustStore() {
1:         return trustStore;
1:     }
1: 
1:     public void setTrustStore(String trustStore) {
1:         this.trustStore = trustStore;
1:     }
1: 
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
1: 
1:     public void setTrustStorePassword(String trustStorePassword) {
1:         this.trustStorePassword = trustStorePassword;
1:     }
1: 
1:     public String getKeyStore() {
1:         return keyStore;
1:     }
1: 
1:     public void setKeyStore(String keyStore) {
1:         this.keyStore = keyStore;
1:     }
1: 
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
1: 
1:     public void setKeyStorePassword(String keyStorePassword) {
1:         this.keyStorePassword = keyStorePassword;
1:     }
1: 
1:     public String getKeyStoreKeyPassword() {
1:         return keyStoreKeyPassword;
1:     }
1: 
1:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String defaultValue(String value, String defaultValue) {
1:         if (value != null) {
1:             return value;
1:         }
1:         return defaultValue;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:9e13901
/////////////////////////////////////////////////////////////////////////
1:     private Boolean useSessionArgs;
/////////////////////////////////////////////////////////////////////////
1:         if (useSessionArgs != null) {
1:             rc ^= useSessionArgs.hashCode();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (notEqual(useSessionArgs, i.useSessionArgs)) {
1:             return false;
1:         }
/////////////////////////////////////////////////////////////////////////
0:                 .append(", useSessionArgs = '").append(useSessionArgs).append("' ")
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isUseSessionArgs() {
1:         return useSessionArgs != null ? useSessionArgs.booleanValue() : false;
1:     }
1: 
1:     public Boolean getUseSessionArgs() {
1:         return useSessionArgs;
1:     }
1: 
1:     public void setUseSessionArgs(Boolean useSessionArgs) {
1:         this.useSessionArgs = useSessionArgs;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:00bdf00
/////////////////////////////////////////////////////////////////////////
1:     public Integer getOptimizeDurableTopicPrefetch() {
1:         return Integer.valueOf(prefetchPolicy().getOptimizeDurableTopicPrefetch());
1:     }
1: 
commit:86e9527
/////////////////////////////////////////////////////////////////////////
1:     public void setOptimizeDurableTopicPrefetch(Integer optimizeDurableTopicPrefetch) {
1:         if (optimizeDurableTopicPrefetch != null) {
1:             prefetchPolicy().setOptimizeDurableTopicPrefetch(optimizeDurableTopicPrefetch.intValue());
1:         }
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:8fba621
/////////////////////////////////////////////////////////////////////////
1:     public Long getMaximumRedeliveryDelay() {
1:         return Long.valueOf(redeliveryPolicy().getMaximumRedeliveryDelay());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setMaximumRedeliveryDelay(Long value) {
1:         if (value != null) {
1:             redeliveryPolicy().setMaximumRedeliveryDelay(value.longValue());
1:         }
1:     }
1: 
commit:37b9cb8
/////////////////////////////////////////////////////////////////////////
1:     public void setRedeliveryBackOffMultiplier(Double value) {
1:             redeliveryPolicy().setBackOffMultiplier(value);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  *  Must override equals and hashCode (JCA spec 16.4)
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.resource.spi.ConnectionRequestInfo;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.RedeliveryPolicy;
1: 
0:  * @version $Revision$ Must override equals and hashCode (JCA spec 16.4)
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQConnectionRequestInfo answer = (ActiveMQConnectionRequestInfo)clone();
1:         } catch (CloneNotSupportedException e) {
1:      * Returns true if this object will configure an ActiveMQConnectionFactory
1:      * in any way
/////////////////////////////////////////////////////////////////////////
1:         if (redeliveryPolicy != null) {
1: 
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionRequestInfo i = (ActiveMQConnectionRequestInfo)o;
/////////////////////////////////////////////////////////////////////////
0:      * @param url The url to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param password The password to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param userid The userid to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param clientid The clientid to set.
0:         return "ActiveMQConnectionRequestInfo{ " + "userName = '" + userName + "' " + ", serverUrl = '" + serverUrl + "' " + ", clientid = '" + clientid + "' " + ", userName = '" + userName + "' "
0:                + ", useInboundSession = '" + useInboundSession + "' " + " }";
/////////////////////////////////////////////////////////////////////////
1:      * Returns the prefetch policy; not using bean properties to avoid breaking
1:      * compatibility with JCA configuration in J2EE
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Robert Davies
-------------------------------------------------------------------------------
commit:9cc9873
/////////////////////////////////////////////////////////////////////////
1:     public Double getRedeliveryBackOffMultiplier() {
1:         return Double.valueOf(redeliveryPolicy().getBackOffMultiplier());
commit:8733d17
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         return new StringBuffer("ActiveMQConnectionRequestInfo{ userName = '").append(userName).append("' ")
0:                 .append(", serverUrl = '").append(serverUrl).append("' ")
0:                 .append(", clientid = '").append(clientid).append("' ")
0:                 .append(", userName = '").append(userName).append("' ")
0:                 .append(", useInboundSession = '").append(useInboundSession).append("'  }")
0:                 .toString();
commit:2256ec0
/////////////////////////////////////////////////////////////////////////
0:         return Short.valueOf(redeliveryPolicy().getBackOffMultiplier());
1:         return Long.valueOf(redeliveryPolicy().getInitialRedeliveryDelay());
1:         return Integer.valueOf(redeliveryPolicy().getMaximumRedeliveries());
1:         return Boolean.valueOf(redeliveryPolicy().isUseExponentialBackOff());
/////////////////////////////////////////////////////////////////////////
1:         return Integer.valueOf(prefetchPolicy().getDurableTopicPrefetch());
0:         return Integer.valueOf(prefetchPolicy().getInputStreamPrefetch());
1:         return Integer.valueOf(prefetchPolicy().getQueueBrowserPrefetch());
1:         return Integer.valueOf(prefetchPolicy().getQueuePrefetch());
1:         return Integer.valueOf(prefetchPolicy().getTopicPrefetch());
author:James Strachan
-------------------------------------------------------------------------------
commit:242353b
/////////////////////////////////////////////////////////////////////////
1:         if (redeliveryPolicy == null) {
/////////////////////////////////////////////////////////////////////////
1:         if (prefetchPolicy == null) {
commit:c91724c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     private RedeliveryPolicy redeliveryPolicy;
1:     private ActiveMQPrefetchPolicy prefetchPolicy;
1:             if (redeliveryPolicy != null) {
1:                 answer.redeliveryPolicy = redeliveryPolicy.copy();
1:             }
/////////////////////////////////////////////////////////////////////////
0:      * Returns true if this object will configure an ActiveMQConnectionFactory in any way
1:      */
1:     public boolean isConnectionFactoryConfigured() {
1:         return serverUrl != null || clientid != null || redeliveryPolicy != null || prefetchPolicy != null;
1:     }
1: 
1:     /**
1:      * Configures the given connection factory
1:      */
0:     public void configure(ActiveMQConnectionFactory factory) {
1:         if (serverUrl != null) {
1:             factory.setBrokerURL(serverUrl);
1:         }
1:         if (clientid != null) {
1:             factory.setClientID(clientid);
1:         }
0:         if (redeliveryPolicy != null) { 
1:             factory.setRedeliveryPolicy(redeliveryPolicy);
1:         }
1:         if (prefetchPolicy != null) {
1:             factory.setPrefetchPolicy(prefetchPolicy);
1:         }
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:         return new Short(redeliveryPolicy().getBackOffMultiplier());
0:         return new Long(redeliveryPolicy().getInitialRedeliveryDelay());
0:         return new Integer(redeliveryPolicy().getMaximumRedeliveries());
0:         return new Boolean(redeliveryPolicy().isUseExponentialBackOff());
0:             redeliveryPolicy().setBackOffMultiplier(value.shortValue());
1:             redeliveryPolicy().setInitialRedeliveryDelay(value.longValue());
1:             redeliveryPolicy().setMaximumRedeliveries(value.intValue());
1:             redeliveryPolicy().setUseExponentialBackOff(value.booleanValue());
0:         return new Integer(prefetchPolicy().getDurableTopicPrefetch());
0:         return new Integer(prefetchPolicy().getInputStreamPrefetch());
0:         return new Integer(prefetchPolicy().getQueueBrowserPrefetch());
0:         return new Integer(prefetchPolicy().getQueuePrefetch());
0:         return new Integer(prefetchPolicy().getTopicPrefetch());
1:             prefetchPolicy().setAll(i.intValue());
1:             prefetchPolicy().setDurableTopicPrefetch(durableTopicPrefetch.intValue());
0:             prefetchPolicy().setInputStreamPrefetch(inputStreamPrefetch.intValue());
1:             prefetchPolicy().setQueueBrowserPrefetch(queueBrowserPrefetch.intValue());
1:             prefetchPolicy().setQueuePrefetch(queuePrefetch.intValue());
1:             prefetchPolicy().setTopicPrefetch(topicPrefetch.intValue());
/////////////////////////////////////////////////////////////////////////
0:         if (redeliveryPolicy != null) {
1:             redeliveryPolicy = new RedeliveryPolicy();
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (prefetchPolicy != null) {
1:             prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         }
commit:205ac11
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQPrefetchPolicy;
0: import org.apache.activemq.RedeliveryPolicy;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
0:     private ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
0:             ActiveMQConnectionRequestInfo answer = (ActiveMQConnectionRequestInfo) clone();
0:             answer.redeliveryPolicy = redeliveryPolicy.copy();
1:             return answer;
1:             throw new RuntimeException("Could not clone: " + e, e);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (notEqual(serverUrl, i.serverUrl)) {
1:         if (notEqual(useInboundSession, i.useInboundSession)) {
/////////////////////////////////////////////////////////////////////////
0:      * @param url
0:      *            The url to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param password
0:      *            The password to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param userid
0:      *            The userid to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param clientid
0:      *            The clientid to set.
0:         return "ActiveMQConnectionRequestInfo{ " + "userName = '" + userName + "' " + ", serverUrl = '" + serverUrl + "' " + ", clientid = '" + clientid + "' "
0:                 + ", userName = '" + userName + "' " + ", useInboundSession = '" + useInboundSession + "' " + " }";
1:         return useInboundSession != null && useInboundSession.booleanValue();
1:     }
1: 
0:     public Short getRedeliveryBackOffMultiplier() {
0:         return new Short(redeliveryPolicy.getBackOffMultiplier());
1:     }
1: 
1:     public Long getInitialRedeliveryDelay() {
0:         return new Long(redeliveryPolicy.getInitialRedeliveryDelay());
1:     }
1: 
1:     public Integer getMaximumRedeliveries() {
0:         return new Integer(redeliveryPolicy.getMaximumRedeliveries());
1:     }
1: 
1:     public Boolean getRedeliveryUseExponentialBackOff() {
0:         return new Boolean(redeliveryPolicy.isUseExponentialBackOff());
1:     }
1: 
0:     public void setRedeliveryBackOffMultiplier(Short value) {
1:         if (value != null) {
0:             redeliveryPolicy.setBackOffMultiplier(value.shortValue());
1:         }
1:     }
1: 
1:     public void setInitialRedeliveryDelay(Long value) {
1:         if (value != null) {
0:             redeliveryPolicy.setInitialRedeliveryDelay(value.longValue());
1:         }
1:     }
1: 
1:     public void setMaximumRedeliveries(Integer value) {
1:         if (value != null) {
0:             redeliveryPolicy.setMaximumRedeliveries(value.intValue());
1:         }
1:     }
1: 
1:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
1:         if (value != null) {
0:             redeliveryPolicy.setUseExponentialBackOff(value.booleanValue());
1:         }
1:     }
1: 
1:     public Integer getDurableTopicPrefetch() {
0:         return new Integer(prefetchPolicy.getDurableTopicPrefetch());
1:     }
1: 
1:     public Integer getInputStreamPrefetch() {
0:         return new Integer(prefetchPolicy.getInputStreamPrefetch());
1:     }
1: 
1:     public Integer getQueueBrowserPrefetch() {
0:         return new Integer(prefetchPolicy.getQueueBrowserPrefetch());
1:     }
1: 
1:     public Integer getQueuePrefetch() {
0:         return new Integer(prefetchPolicy.getQueuePrefetch());
1:     }
1: 
1:     public Integer getTopicPrefetch() {
0:         return new Integer(prefetchPolicy.getTopicPrefetch());
1:     }
1: 
1:     public void setAllPrefetchValues(Integer i) {
1:         if (i != null) {
0:             prefetchPolicy.setAll(i.intValue());
1:         }
1:     }
1: 
1:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
1:         if (durableTopicPrefetch != null) {
0:             prefetchPolicy.setDurableTopicPrefetch(durableTopicPrefetch.intValue());
1:         }
1:     }
1: 
0:     public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
0:         if (inputStreamPrefetch != null) {
0:             prefetchPolicy.setInputStreamPrefetch(inputStreamPrefetch.intValue());
1:         }
1:     }
1: 
1:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
1:         if (queueBrowserPrefetch != null) {
0:             prefetchPolicy.setQueueBrowserPrefetch(queueBrowserPrefetch.intValue());
1:         }
1:     }
1: 
1:     public void setQueuePrefetch(Integer queuePrefetch) {
1:         if (queuePrefetch != null) {
0:             prefetchPolicy.setQueuePrefetch(queuePrefetch.intValue());
1:         }
1:     }
1: 
1:     public void setTopicPrefetch(Integer topicPrefetch) {
1:         if (topicPrefetch != null) {
0:             prefetchPolicy.setTopicPrefetch(topicPrefetch.intValue());
1:         }
1:     }
1: 
1:     /**
1:      * Returns the redelivery policy; not using bean properties to avoid
1:      * breaking compatibility with JCA configuration in J2EE
1:      */
1:     public RedeliveryPolicy redeliveryPolicy() {
1:         return redeliveryPolicy;
1:     }
1: 
1:     /**
0:      * Returns the prefetch policy; not using bean properties to avoid
1:      * breaking compatibility with JCA configuration in J2EE
1:      */
1:     public ActiveMQPrefetchPolicy prefetchPolicy() {
1:         return prefetchPolicy;
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
1:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
1:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, 
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
1:  * See the License for the specific language governing permissions and 
1:  * limitations under the License. 
1:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import javax.resource.spi.ConnectionRequestInfo;
1: import java.io.Serializable;
1: 
1: 
1: /**
0:  * @version $Revision$
1:  * 
0:  * Must override equals and hashCode (JCA spec 16.4)
1:  */
1: public class ActiveMQConnectionRequestInfo implements ConnectionRequestInfo, Serializable, Cloneable {
1: 
1:     private static final long serialVersionUID = -5754338187296859149L;
1: 
1:     private String userName;
1:     private String password;
1:     private String serverUrl;
1:     private String clientid;
1:     private Boolean useInboundSession;
1: 
1:     public ActiveMQConnectionRequestInfo copy() {
1:         try {
0:             return (ActiveMQConnectionRequestInfo) clone();
1:         }
0:         catch (CloneNotSupportedException e) {
0:             throw new RuntimeException("Could not clone: ", e);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionRequestInfo#hashCode()
1:      */
1:     public int hashCode() {
1:         int rc = 0;
1:         if (useInboundSession != null) {
1:             rc ^= useInboundSession.hashCode();
1:         }
1:         if (serverUrl != null) {
1:             rc ^= serverUrl.hashCode();
1:         }
1:         return rc;
1:     }
1: 
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionRequestInfo#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object o) {
1:         if (o == null) {
1:             return false;
1:         }
1:         if (!getClass().equals(o.getClass())) {
1:             return false;
1:         }
0:         ActiveMQConnectionRequestInfo i = (ActiveMQConnectionRequestInfo) o;
0:         if ( notEqual(serverUrl, i.serverUrl) ) {
1:             return false;
1:         }
0:         if ( notEqual(useInboundSession, i.useInboundSession) ) {
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1: 
1:     /**
1:      * @param i
1:      * @return
1:      */
1:     private boolean notEqual(Object o1, Object o2) {
1:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
1:     }
1: 
1:     /**
1:      * @return Returns the url.
1:      */
1:     public String getServerUrl() {
1:         return serverUrl;
1:     }
1: 
1:     /**
0:      * @param url The url to set.
1:      */
1:     public void setServerUrl(String url) {
1:         this.serverUrl = url;
1:     }
1: 
1:     /**
1:      * @return Returns the password.
1:      */
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     /**
0:      * @param password The password to set.
1:      */
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     /**
1:      * @return Returns the userid.
1:      */
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
1:     /**
0:      * @param userid The userid to set.
1:      */
1:     public void setUserName(String userid) {
1:         this.userName = userid;
1:     }
1: 
1:     /**
1:      * @return Returns the clientid.
1:      */
1:     public String getClientid() {
1:         return clientid;
1:     }
1: 
1:     /**
0:      * @param clientid The clientid to set.
1:      */
1:     public void setClientid(String clientid) {
1:         this.clientid = clientid;
1:     }
1: 
1:     public String toString() {
0:         return "ActiveMQConnectionRequestInfo{ " +
0:                 "userName = '" + userName + "' " +
0:                 ", serverUrl = '" + serverUrl + "' " +
0:                 ", clientid = '" + clientid + "' " +
0:                 ", userName = '" + userName + "' " +
0:                 ", useInboundSession = '" + useInboundSession + "' " +
0:                 " }";
1:     }
1: 
1: 
1:     public Boolean getUseInboundSession() {
1:         return useInboundSession;
1:     }
1: 
1: 
1:     public void setUseInboundSession(Boolean useInboundSession) {
1:         this.useInboundSession = useInboundSession;
1:     }
1: 
1: 
1:     public boolean isUseInboundSessionEnabled() {
0:         return useInboundSession!=null && useInboundSession.booleanValue();
1:     }
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
============================================================================