1:4b4cf7c: /**
1:4b4cf7c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b4cf7c:  * contributor license agreements.  See the NOTICE file distributed with
1:4b4cf7c:  * this work for additional information regarding copyright ownership.
1:4b4cf7c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b4cf7c:  * (the "License"); you may not use this file except in compliance with
1:4b4cf7c:  * the License.  You may obtain a copy of the License at
1:4b4cf7c:  *
1:4b4cf7c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b4cf7c:  *
1:4b4cf7c:  * Unless required by applicable law or agreed to in writing, software
1:4b4cf7c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b4cf7c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b4cf7c:  * See the License for the specific language governing permissions and
1:4b4cf7c:  * limitations under the License.
1:4b4cf7c:  */
1:4b4cf7c: package org.apache.activemq.transport.amqp.interop;
1:4b4cf7c: 
1:4b4cf7c: import static org.junit.Assert.assertEquals;
1:4b4cf7c: import static org.junit.Assert.assertFalse;
1:4b4cf7c: import static org.junit.Assert.assertNotNull;
1:4b4cf7c: import static org.junit.Assert.assertTrue;
1:4b4cf7c: 
1:4b4cf7c: import java.net.URI;
1:4b4cf7c: import java.util.concurrent.CountDownLatch;
1:4b4cf7c: import java.util.concurrent.TimeUnit;
1:4b4cf7c: 
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1:4b4cf7c: import org.apache.activemq.util.SocketProxy;
1:4b4cf7c: import org.apache.activemq.util.Wait;
1:4b4cf7c: import org.junit.After;
1:4b4cf7c: import org.junit.Before;
1:4b4cf7c: import org.junit.Test;
1:4b4cf7c: 
1:4b4cf7c: /**
1:4b4cf7c:  * Test for idle timeout processing using SocketProxy to interrupt coms.
1:4b4cf7c:  */
1:4b4cf7c: public class AmqpSocketProxyIdleTimeoutTests extends AmqpClientTestSupport {
1:4b4cf7c: 
1:4b4cf7c:     private final int TEST_IDLE_TIMEOUT = 3000;
1:4b4cf7c: 
1:4b4cf7c:     private SocketProxy socketProxy;
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:4b4cf7c:     @Before
1:4b4cf7c:     public void setUp() throws Exception {
1:4b4cf7c:         super.setUp();
1:4b4cf7c: 
1:4b4cf7c:         socketProxy = new SocketProxy(super.getBrokerAmqpConnectionURI());
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:4b4cf7c:     @After
1:4b4cf7c:     public void tearDown() throws Exception {
1:4b4cf7c:         if (socketProxy != null) {
1:4b4cf7c:             socketProxy.close();
1:4b4cf7c:             socketProxy = null;
1:4b4cf7c:         }
1:4b4cf7c: 
1:4b4cf7c:         super.tearDown();
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:4b4cf7c:     public URI getBrokerAmqpConnectionURI() {
1:4b4cf7c:         return socketProxy.getUrl();
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:4b4cf7c:     protected String getAdditionalConfig() {
1:4b4cf7c:         return "&transport.wireFormat.idleTimeout=" + TEST_IDLE_TIMEOUT;
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Test(timeout = 60000)
1:4b4cf7c:     public void testBrokerSendsRequestedHeartbeats() throws Exception {
1:4b4cf7c: 
1:4b4cf7c:         final CountDownLatch disconnected = new CountDownLatch(1);
1:4b4cf7c: 
1:4b4cf7c:         AmqpClient client = createAmqpClient();
1:4b4cf7c:         assertNotNull(client);
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4b4cf7c:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT);
1:4b4cf7c:         assertNotNull(connection);
1:4b4cf7c: 
1:4b4cf7c:         connection.setListener(new AmqpConnectionListener() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public void onException(Throwable ex) {
1:4b4cf7c:                 disconnected.countDown();
1:4b4cf7c:             }
1:4b4cf7c:         });
1:4b4cf7c: 
1:4b4cf7c:         connection.connect();
1:4b4cf7c: 
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:4b4cf7c:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:4b4cf7c: 
1:4b4cf7c:         socketProxy.pause();
1:4b4cf7c: 
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:4b4cf7c:         assertTrue(disconnected.await(10, TimeUnit.SECONDS));
1:4b4cf7c: 
1:4b4cf7c:         socketProxy.goOn();
1:4b4cf7c: 
1:4b4cf7c:         connection.close();
1:4b4cf7c: 
1:4b4cf7c:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public boolean isSatisified() throws Exception {
1:4b4cf7c:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:4b4cf7c:             }
1:4b4cf7c:         }));
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Test(timeout = 60000)
1:4b4cf7c:     public void testClientWithoutHeartbeatsGetsDropped() throws Exception {
1:4b4cf7c: 
1:4b4cf7c:         final CountDownLatch disconnected = new CountDownLatch(1);
1:4b4cf7c: 
1:4b4cf7c:         AmqpClient client = createAmqpClient();
1:4b4cf7c:         assertNotNull(client);
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4b4cf7c:         connection.setCloseTimeout(1000);  // Socket will have silently gone away, don't wait to long.
1:4b4cf7c:         assertNotNull(connection);
1:4b4cf7c: 
1:4b4cf7c:         connection.setListener(new AmqpConnectionListener() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public void onException(Throwable ex) {
1:4b4cf7c:                 disconnected.countDown();
1:4b4cf7c:             }
1:4b4cf7c:         });
1:4b4cf7c: 
1:4b4cf7c:         connection.connect();
1:4b4cf7c: 
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:4b4cf7c: 
1:4b4cf7c:         socketProxy.pause();
1:4b4cf7c: 
1:4b4cf7c:         // Client still sends ok but broker doesn't see them.
1:4b4cf7c:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
1:4b4cf7c:         socketProxy.halfClose();
1:4b4cf7c:         assertTrue(disconnected.await(15, TimeUnit.SECONDS));
1:4b4cf7c:         socketProxy.close();
1:4b4cf7c: 
1:4b4cf7c:         connection.close();
1:4b4cf7c: 
1:4b4cf7c:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public boolean isSatisified() throws Exception {
1:4b4cf7c:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:4b4cf7c:             }
1:4b4cf7c:         }));
1:4b4cf7c:     }
1:4b4cf7c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URI;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test for idle timeout processing using SocketProxy to interrupt coms.
1:  */
1: public class AmqpSocketProxyIdleTimeoutTests extends AmqpClientTestSupport {
1: 
1:     private final int TEST_IDLE_TIMEOUT = 3000;
1: 
1:     private SocketProxy socketProxy;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         socketProxy = new SocketProxy(super.getBrokerAmqpConnectionURI());
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (socketProxy != null) {
1:             socketProxy.close();
1:             socketProxy = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     public URI getBrokerAmqpConnectionURI() {
1:         return socketProxy.getUrl();
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "&transport.wireFormat.idleTimeout=" + TEST_IDLE_TIMEOUT;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBrokerSendsRequestedHeartbeats() throws Exception {
1: 
1:         final CountDownLatch disconnected = new CountDownLatch(1);
1: 
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection = client.createConnection();
1:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT);
1:         assertNotNull(connection);
1: 
1:         connection.setListener(new AmqpConnectionListener() {
1: 
1:             @Override
1:             public void onException(Throwable ex) {
1:                 disconnected.countDown();
1:             }
1:         });
1: 
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         socketProxy.pause();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:         assertTrue(disconnected.await(10, TimeUnit.SECONDS));
1: 
1:         socketProxy.goOn();
1: 
1:         connection.close();
1: 
1:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testClientWithoutHeartbeatsGetsDropped() throws Exception {
1: 
1:         final CountDownLatch disconnected = new CountDownLatch(1);
1: 
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection = client.createConnection();
1:         connection.setCloseTimeout(1000);  // Socket will have silently gone away, don't wait to long.
1:         assertNotNull(connection);
1: 
1:         connection.setListener(new AmqpConnectionListener() {
1: 
1:             @Override
1:             public void onException(Throwable ex) {
1:                 disconnected.countDown();
1:             }
1:         });
1: 
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         socketProxy.pause();
1: 
1:         // Client still sends ok but broker doesn't see them.
1:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
1:         socketProxy.halfClose();
1:         assertTrue(disconnected.await(15, TimeUnit.SECONDS));
1:         socketProxy.close();
1: 
1:         connection.close();
1: 
1:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: }
============================================================================