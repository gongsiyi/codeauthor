1:ae5bd2e: /**
1:ae5bd2e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ae5bd2e:  * contributor license agreements.  See the NOTICE file distributed with
1:ae5bd2e:  * this work for additional information regarding copyright ownership.
1:ae5bd2e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ae5bd2e:  * (the "License"); you may not use this file except in compliance with
1:ae5bd2e:  * the License.  You may obtain a copy of the License at
1:ae5bd2e:  *
1:ae5bd2e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ae5bd2e:  *
1:ae5bd2e:  * Unless required by applicable law or agreed to in writing, software
1:ae5bd2e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ae5bd2e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ae5bd2e:  * See the License for the specific language governing permissions and
1:ae5bd2e:  * limitations under the License.
1:ae5bd2e:  */
1:ae5bd2e: package org.apache.activemq.transport.stomp;
6:ae5bd2e: 
1:ae5bd2e: import static org.junit.Assert.assertEquals;
1:ae5bd2e: import static org.junit.Assert.fail;
1:ae5bd2e: 
1:ae5bd2e: import java.util.HashMap;
1:ae5bd2e: import java.util.UUID;
1:ae5bd2e: 
1:ae5bd2e: import org.junit.Test;
1:ae5bd2e: import org.slf4j.Logger;
1:ae5bd2e: import org.slf4j.LoggerFactory;
1:ae5bd2e: 
1:1236bbf: public class StompMissingMessageTest extends StompTestSupport {
1:ae5bd2e: 
1:ae5bd2e:     private static final Logger LOG = LoggerFactory.getLogger(StompMissingMessageTest.class);
1:ae5bd2e: 
1:ae5bd2e:     protected String destination;
1:ae5bd2e: 
1:1236bbf:     @Override
1:ae5bd2e:     public void setUp() throws Exception {
1:1236bbf:         super.setUp();
1:ae5bd2e:         destination = "/topic/" + getTopicName();
5:ae5bd2e:     }
1:ae5bd2e: 
1:540a66b:     @Test(timeout = 60000)
1:ae5bd2e:     public void testProducerConsumerLoop() throws Exception {
1:ae5bd2e:         final int ITERATIONS = 500;
1:ae5bd2e:         int received = 0;
1:ae5bd2e: 
1:ae5bd2e:         for (int i = 1; i <= ITERATIONS*2; i+=2) {
1:ae5bd2e:             if (doTestProducerConsumer(i) != null) {
1:ae5bd2e:                 received++;
1:ae5bd2e:             }
1:ae5bd2e:         }
1:ae5bd2e: 
1:ae5bd2e:         assertEquals(ITERATIONS, received);
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     public String doTestProducerConsumer(int index) throws Exception {
1:ae5bd2e:         String message = null;
1:ae5bd2e: 
1:1236bbf:         assertEquals("Should not be any consumers", 0, brokerService.getAdminView().getTopicSubscribers().length);
1:ae5bd2e: 
1:ae5bd2e:         StompConnection producer = stompConnect();
1:ae5bd2e:         StompConnection consumer = stompConnect();
1:ae5bd2e: 
1:ae5bd2e:         subscribe(consumer, Integer.toString(index));
1:ae5bd2e: 
1:ae5bd2e:         sendMessage(producer, index);
1:ae5bd2e: 
1:ae5bd2e:         try {
1:ae5bd2e:             StompFrame frame = consumer.receive();
1:ae5bd2e:             LOG.debug("Consumer got frame: " + message);
1:ae5bd2e:             assertEquals(index, (int) Integer.valueOf(frame.getBody()));
1:ae5bd2e:             message = frame.getBody();
1:ae5bd2e:         } catch(Exception e) {
1:ae5bd2e:             fail("Consumer["+index+"] got error while consuming: " + e.getMessage());
1:ae5bd2e:         }
1:ae5bd2e: 
1:ae5bd2e:         unsubscribe(consumer, Integer.toString(index));
1:ae5bd2e: 
1:ae5bd2e:         stompDisconnect(consumer);
1:ae5bd2e:         stompDisconnect(producer);
1:ae5bd2e: 
1:ae5bd2e:         return message;
1:ae5bd2e:     }
1:ae5bd2e: 
1:540a66b:     @Test(timeout = 60000)
1:ae5bd2e:     public void testProducerDurableConsumerLoop() throws Exception {
1:ae5bd2e:         final int ITERATIONS = 500;
1:ae5bd2e:         int received = 0;
1:ae5bd2e: 
1:ae5bd2e:         for (int i = 1; i <= ITERATIONS*2; i+=2) {
1:ae5bd2e:             if (doTestProducerDurableConsumer(i) != null) {
1:ae5bd2e:                 received++;
1:ae5bd2e:             }
1:ae5bd2e:         }
1:ae5bd2e: 
1:ae5bd2e:         assertEquals(ITERATIONS, received);
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     public String doTestProducerDurableConsumer(int index) throws Exception {
1:ae5bd2e:         String message = null;
1:ae5bd2e: 
1:1236bbf:         assertEquals("Should not be any consumers", 0, brokerService.getAdminView().getTopicSubscribers().length);
1:ae5bd2e: 
1:ae5bd2e:         StompConnection producer = stompConnect();
1:ae5bd2e:         StompConnection consumer = stompConnect("test");
1:ae5bd2e: 
1:ae5bd2e:         subscribe(consumer, Integer.toString(index), true);
1:ae5bd2e: 
1:ae5bd2e:         sendMessage(producer, index);
1:ae5bd2e: 
1:ae5bd2e:         try {
1:ae5bd2e:             StompFrame frame = consumer.receive();
1:ae5bd2e:             LOG.debug("Consumer got frame: " + message);
1:ae5bd2e:             assertEquals(index, (int) Integer.valueOf(frame.getBody()));
1:ae5bd2e:             message = frame.getBody();
1:ae5bd2e:         } catch(Exception e) {
1:ae5bd2e:             fail("Consumer["+index+"] got error while consuming: " + e.getMessage());
1:ae5bd2e:         }
1:ae5bd2e: 
1:ae5bd2e:         unsubscribe(consumer, Integer.toString(index));
1:ae5bd2e: 
1:ae5bd2e:         stompDisconnect(consumer);
1:ae5bd2e:         stompDisconnect(producer);
1:ae5bd2e: 
1:ae5bd2e:         return message;
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected void subscribe(StompConnection stompConnection, String subscriptionId) throws Exception {
1:ae5bd2e:         subscribe(stompConnection, subscriptionId, false);
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected void subscribe(StompConnection stompConnection, String subscriptionId, boolean durable) throws Exception {
1:ae5bd2e:         HashMap<String, String> headers = new HashMap<String, String>();
1:ae5bd2e:         headers.put("id", subscriptionId);
1:ae5bd2e:         if (durable) {
1:ae5bd2e:             headers.put("activemq.subscriptionName", subscriptionId);
1:ae5bd2e:         }
1:ae5bd2e:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1:ae5bd2e: 
1:ae5bd2e:         stompConnection.subscribe(destination, "auto", headers);
1:ae5bd2e: 
1:ae5bd2e:         StompFrame received = stompConnection.receive();
1:ae5bd2e:         assertEquals("RECEIPT", received.getAction());
1:ae5bd2e:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:ae5bd2e:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected void unsubscribe(StompConnection stompConnection, String subscriptionId) throws Exception {
1:ae5bd2e:         HashMap<String, String> headers = new HashMap<String, String>();
1:ae5bd2e:         headers.put("id", subscriptionId);
1:ae5bd2e:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1:ae5bd2e: 
1:ae5bd2e:         stompConnection.unsubscribe(destination, headers);
1:ae5bd2e: 
1:ae5bd2e:         StompFrame received = stompConnection.receive();
1:ae5bd2e:         assertEquals("RECEIPT", received.getAction());
1:ae5bd2e:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:ae5bd2e:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected void sendMessage(StompConnection producer, int index) throws Exception {
1:ae5bd2e:         HashMap<String, String> headers = new HashMap<String, String>();
1:ae5bd2e:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1:ae5bd2e: 
1:ae5bd2e:         producer.send(destination, Integer.toString(index), null, headers);
1:ae5bd2e: 
1:ae5bd2e:         StompFrame received = producer.receive();
1:ae5bd2e:         assertEquals("RECEIPT", received.getAction());
1:ae5bd2e:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:ae5bd2e:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:ae5bd2e:     }
1:ae5bd2e: 
1:1236bbf:     @Override
1:ae5bd2e:     protected StompConnection stompConnect() throws Exception {
1:1236bbf:         StompConnection stompConnection = new StompConnection();
1:1236bbf:         stompConnect(stompConnection);
1:1236bbf:         stompConnection.connect("system", "manager", null);
1:1236bbf:         return stompConnection;
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected StompConnection stompConnect(String clientId) throws Exception {
1:ae5bd2e:         StompConnection stompConnection = new StompConnection();
1:1236bbf:         stompConnect(stompConnection);
1:ae5bd2e:         stompConnection.connect("system", "manager", clientId);
1:ae5bd2e:         return stompConnection;
1:ae5bd2e:     }
1:ae5bd2e: 
1:ae5bd2e:     protected void stompDisconnect(StompConnection connection) throws Exception {
1:ae5bd2e:         if (connection != null) {
1:ae5bd2e:             String receiptId = UUID.randomUUID().toString();
1:ae5bd2e:             connection.disconnect(receiptId);
1:ae5bd2e:             if (!connection.receive().getAction().equals(Stomp.Responses.RECEIPT)) {
1:ae5bd2e:                 throw new Exception("Failed to receive receipt for disconnect.");
1:ae5bd2e:             }
1:ae5bd2e:             connection.close();
1:ae5bd2e:             connection = null;
1:ae5bd2e:         }
1:ae5bd2e:     }
1:ae5bd2e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnector;
1: public class StompMissingMessageTest extends StompTestSupport {
1:     @Override
1:         super.setUp();
1:     @Override
0: 	protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Should not be any consumers", 0, brokerService.getAdminView().getTopicSubscribers().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Should not be any consumers", 0, brokerService.getAdminView().getTopicSubscribers().length);
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:         StompConnection stompConnection = new StompConnection();
1:         stompConnect(stompConnection);
1:         stompConnection.connect("system", "manager", null);
1:         return stompConnection;
1:         stompConnect(stompConnection);
commit:ae5bd2e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.UUID;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class StompMissingMessageTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompMissingMessageTest.class);
1: 
0:     protected String bindAddress = "stomp://localhost:61613";
0:     protected String confUri = "xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml";
0:     protected String jmsUri = "vm://localhost";
1: 
0:     private BrokerService broker;
1:     protected String destination;
1: 
0:     @Before
1:     public void setUp() throws Exception {
0:         broker = BrokerFactory.createBroker(new URI(confUri));
0:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
1:         destination = "/topic/" + getTopicName();
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         if (broker != null) {
0:             broker.stop();
0:             broker.waitUntilStopped();
1:         }
1:     }
1: 
0:     @Test
1:     public void testProducerConsumerLoop() throws Exception {
1:         final int ITERATIONS = 500;
1:         int received = 0;
1: 
1:         for (int i = 1; i <= ITERATIONS*2; i+=2) {
1:             if (doTestProducerConsumer(i) != null) {
1:                 received++;
1:             }
1:         }
1: 
1:         assertEquals(ITERATIONS, received);
1:     }
1: 
1:     public String doTestProducerConsumer(int index) throws Exception {
1:         String message = null;
1: 
0:         assertEquals("Should not be any consumers", 0, broker.getAdminView().getTopicSubscribers().length);
1: 
1:         StompConnection producer = stompConnect();
1:         StompConnection consumer = stompConnect();
1: 
1:         subscribe(consumer, Integer.toString(index));
1: 
1:         sendMessage(producer, index);
1: 
1:         try {
1:             StompFrame frame = consumer.receive();
1:             LOG.debug("Consumer got frame: " + message);
1:             assertEquals(index, (int) Integer.valueOf(frame.getBody()));
1:             message = frame.getBody();
1:         } catch(Exception e) {
1:             fail("Consumer["+index+"] got error while consuming: " + e.getMessage());
1:         }
1: 
1:         unsubscribe(consumer, Integer.toString(index));
1: 
1:         stompDisconnect(consumer);
1:         stompDisconnect(producer);
1: 
1:         return message;
1:     }
1: 
0:     @Test
1:     public void testProducerDurableConsumerLoop() throws Exception {
1:         final int ITERATIONS = 500;
1:         int received = 0;
1: 
1:         for (int i = 1; i <= ITERATIONS*2; i+=2) {
1:             if (doTestProducerDurableConsumer(i) != null) {
1:                 received++;
1:             }
1:         }
1: 
1:         assertEquals(ITERATIONS, received);
1:     }
1: 
1:     public String doTestProducerDurableConsumer(int index) throws Exception {
1:         String message = null;
1: 
0:         assertEquals("Should not be any consumers", 0, broker.getAdminView().getTopicSubscribers().length);
1: 
1:         StompConnection producer = stompConnect();
1:         StompConnection consumer = stompConnect("test");
1: 
1:         subscribe(consumer, Integer.toString(index), true);
1: 
1:         sendMessage(producer, index);
1: 
1:         try {
1:             StompFrame frame = consumer.receive();
1:             LOG.debug("Consumer got frame: " + message);
1:             assertEquals(index, (int) Integer.valueOf(frame.getBody()));
1:             message = frame.getBody();
1:         } catch(Exception e) {
1:             fail("Consumer["+index+"] got error while consuming: " + e.getMessage());
1:         }
1: 
1:         unsubscribe(consumer, Integer.toString(index));
1: 
1:         stompDisconnect(consumer);
1:         stompDisconnect(producer);
1: 
1:         return message;
1:     }
1: 
1:     protected void subscribe(StompConnection stompConnection, String subscriptionId) throws Exception {
1:         subscribe(stompConnection, subscriptionId, false);
1:     }
1: 
1:     protected void subscribe(StompConnection stompConnection, String subscriptionId, boolean durable) throws Exception {
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put("id", subscriptionId);
1:         if (durable) {
1:             headers.put("activemq.subscriptionName", subscriptionId);
1:         }
1:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1: 
1:         stompConnection.subscribe(destination, "auto", headers);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertEquals("RECEIPT", received.getAction());
1:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:     }
1: 
1:     protected void unsubscribe(StompConnection stompConnection, String subscriptionId) throws Exception {
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put("id", subscriptionId);
1:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1: 
1:         stompConnection.unsubscribe(destination, headers);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertEquals("RECEIPT", received.getAction());
1:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:     }
1: 
1:     protected void sendMessage(StompConnection producer, int index) throws Exception {
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put(Stomp.Headers.RECEIPT_REQUESTED, UUID.randomUUID().toString());
1: 
1:         producer.send(destination, Integer.toString(index), null, headers);
1: 
1:         StompFrame received = producer.receive();
1:         assertEquals("RECEIPT", received.getAction());
1:         String receipt = received.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID);
1:         assertEquals(headers.get(Stomp.Headers.RECEIPT_REQUESTED), receipt);
1:     }
1: 
1:     protected StompConnection stompConnect() throws Exception {
0:         return stompConnect(null);
1:     }
1: 
1:     protected StompConnection stompConnect(String clientId) throws Exception {
1:         StompConnection stompConnection = new StompConnection();
0:         URI connectUri = new URI(bindAddress);
0:         stompConnection.open(createSocket(connectUri));
1:         stompConnection.connect("system", "manager", clientId);
1:         return stompConnection;
1:     }
1: 
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
0:     protected String getTopicName() {
0:         return getClass().getName() + ".Messages";
1:     }
1: 
1:     protected void stompDisconnect(StompConnection connection) throws Exception {
1:         if (connection != null) {
1:             String receiptId = UUID.randomUUID().toString();
1:             connection.disconnect(receiptId);
1:             if (!connection.receive().getAction().equals(Stomp.Responses.RECEIPT)) {
1:                 throw new Exception("Failed to receive receipt for disconnect.");
1:             }
1:             connection.close();
1:             connection = null;
1:         }
1:     }
1: }
============================================================================