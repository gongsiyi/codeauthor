1:a8a032a: /**
1:a8a032a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a8a032a:  * contributor license agreements.  See the NOTICE file distributed with
1:a8a032a:  * this work for additional information regarding copyright ownership.
1:a8a032a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a8a032a:  * (the "License"); you may not use this file except in compliance with
1:a8a032a:  * the License.  You may obtain a copy of the License at
1:a8a032a:  *
1:a8a032a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8a032a:  *
1:a8a032a:  * Unless required by applicable law or agreed to in writing, software
1:a8a032a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8a032a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8a032a:  * See the License for the specific language governing permissions and
1:a8a032a:  * limitations under the License.
1:a8a032a:  */
1:a8a032a: package org.apache.activemq.network;
1:a8a032a: 
1:a8a032a: import static org.junit.Assert.*;
1:a8a032a: import static org.mockito.Matchers.any;
1:a8a032a: import static org.mockito.Mockito.verify;
1:a8a032a: import static org.mockito.Mockito.verifyNoMoreInteractions;
1:a8a032a: 
1:a8a032a: import java.util.Arrays;
1:a8a032a: import java.util.List;
1:a8a032a: import java.util.concurrent.TimeUnit;
1:a8a032a: import java.util.function.Supplier;
1:a8a032a: 
1:a8a032a: import org.apache.activemq.command.ActiveMQQueue;
1:a8a032a: import org.apache.activemq.command.Message;
1:a8a032a: import org.apache.activemq.transport.Transport;
1:a8a032a: import org.junit.Test;
1:a8a032a: import org.mockito.Mockito;
1:a8a032a: 
1:a8a032a: import javax.jms.JMSException;
1:a8a032a: import javax.jms.MessageConsumer;
1:a8a032a: import javax.jms.MessageProducer;
1:a8a032a: import javax.jms.Session;
1:a8a032a: import javax.jms.TextMessage;
1:a8a032a: 
1:a8a032a: /**
1:a8a032a:  * Basic test which verify if custom bridge factory receives any interactions when configured.
1:a8a032a:  */
1:a8a032a: public class CustomBridgeFactoryTest extends BaseNetworkTest {
1:a8a032a: 
1:a8a032a:     private ActiveMQQueue outgoing = new ActiveMQQueue("outgoing");
1:a8a032a: 
1:a8a032a:     /**
1:a8a032a:      * Verification of outgoing communication - from local broker (with customized bridge configured) to remote one.
1:a8a032a:      */
1:a8a032a:     @Test
1:a8a032a:     public void verifyOutgoingCommunication() throws JMSException {
1:a8a032a:         CustomNetworkBridgeFactory bridgeFactory = getCustomNetworkBridgeFactory();
1:a8a032a:         NetworkBridgeListener listener = bridgeFactory.getListener();
1:a8a032a: 
1:a8a032a:         verify(listener).onStart(any(NetworkBridge.class));
1:a8a032a:         verifyNoMoreInteractions(listener);
1:a8a032a: 
1:a8a032a:         send(localSession, outgoing, localSession.createTextMessage("test message"));
1:a8a032a:         assertNotNull("Message didn't arrive", receive(remoteSession, outgoing));
1:a8a032a: 
1:a8a032a:         verify(listener).onOutboundMessage(any(NetworkBridge.class), any(Message.class));
1:a8a032a:         verifyNoMoreInteractions(listener);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     /**
1:a8a032a:      * Additional test which makes sure that custom bridge receives notification about broker shutdown.
1:a8a032a:      */
1:a8a032a:     @Test
1:a8a032a:     public void verifyBrokerShutdown() {
1:a8a032a:         shutdownTest(() -> {
1:a8a032a:             try {
1:a8a032a:                 localBroker.stop();
1:a8a032a:             } catch (Exception e) {
1:a8a032a:                 return e;
1:a8a032a:             }
1:a8a032a:             return null;
1:a8a032a:         });
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     /**
1:a8a032a:      * Verification of network connector shutdown.
1:a8a032a:      */
1:a8a032a:     @Test
1:a8a032a:     public void verifyConnectorShutdown() {
1:a8a032a:         shutdownTest(() -> {
1:a8a032a:             try {
1:a8a032a:                 getLocalConnector(0).stop();
1:a8a032a:             } catch (Exception e) {
1:a8a032a:                 return e;
1:a8a032a:             }
1:a8a032a:             return null;
1:a8a032a:         });
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     private void shutdownTest(Supplier<Throwable> callback) {
1:a8a032a:         CustomNetworkBridgeFactory bridgeFactory = getCustomNetworkBridgeFactory();
1:a8a032a:         NetworkBridgeListener listener = bridgeFactory.getListener();
1:a8a032a: 
1:a8a032a:         verify(listener).onStart(any(NetworkBridge.class));
1:a8a032a:         verifyNoMoreInteractions(listener);
1:a8a032a: 
1:a8a032a:         Throwable throwable = callback.get();
1:a8a032a:         assertNull("Unexpected error", throwable);
1:a8a032a: 
1:a8a032a:         verify(listener).onStop(any(NetworkBridge.class));
1:a8a032a:         verifyNoMoreInteractions(listener);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     // helper methods
1:a8a032a:     private void send(Session session, ActiveMQQueue destination, TextMessage message) throws JMSException {
1:a8a032a:         MessageProducer producer = session.createProducer(destination);
1:a8a032a:         try {
1:a8a032a:             producer.send(message);
1:a8a032a:         } finally {
1:a8a032a:             producer.close();
1:a8a032a:         }
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     private javax.jms.Message receive(Session session, ActiveMQQueue destination) throws JMSException {
1:a8a032a:         MessageConsumer consumer = session.createConsumer(destination);
1:a8a032a:         try {
1:a8a032a:             return consumer.receive(TimeUnit.SECONDS.toMillis(5));
1:a8a032a:         } finally {
1:a8a032a:             consumer.close();
1:a8a032a:         }
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     // infrastructure operations digging for connectors in running broker
1:a8a032a:     private CustomNetworkBridgeFactory getCustomNetworkBridgeFactory() {
1:a8a032a:         NetworkConnector connector = getLocalConnector(0);
1:a8a032a: 
1:a8a032a:         assertTrue(connector.getBridgeFactory() instanceof CustomNetworkBridgeFactory);
1:a8a032a: 
1:a8a032a:         return (CustomNetworkBridgeFactory) connector.getBridgeFactory();
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     private NetworkConnector getLocalConnector(int index) {
1:a8a032a:         return localBroker.getNetworkConnectors().get(index);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     // customizations
1:a8a032a:     protected String getLocalBrokerURI() {
1:a8a032a:         return "org/apache/activemq/network/localBroker-custom-factory.xml";
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     // test classes
1:a8a032a:     static class CustomNetworkBridgeFactory implements BridgeFactory {
1:a8a032a: 
1:a8a032a:         private final NetworkBridgeListener listener;
1:a8a032a: 
1:a8a032a:         CustomNetworkBridgeFactory() {
1:a8a032a:             this(Mockito.mock(NetworkBridgeListener.class));
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         CustomNetworkBridgeFactory(NetworkBridgeListener listener) {
1:a8a032a:             this.listener = listener;
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         public NetworkBridgeListener getListener() {
1:a8a032a:             return listener;
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, NetworkBridgeListener listener) {
1:a8a032a:             DemandForwardingBridge bridge = new DemandForwardingBridge(configuration, localTransport, remoteTransport);
1:a8a032a:             bridge.setNetworkBridgeListener(new CompositeNetworkBridgeListener(this.listener, listener));
1:a8a032a:             return bridge;
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     static class CompositeNetworkBridgeListener implements NetworkBridgeListener {
1:a8a032a: 
1:a8a032a:         private final List<NetworkBridgeListener> listeners;
1:a8a032a: 
1:a8a032a:         public CompositeNetworkBridgeListener(NetworkBridgeListener ... wrapped) {
1:a8a032a:             this.listeners = Arrays.asList(wrapped);
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public void bridgeFailed() {
1:a8a032a:             for (NetworkBridgeListener listener : listeners) {
1:a8a032a:                 listener.bridgeFailed();
1:a8a032a:             }
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public void onStart(NetworkBridge bridge) {
1:a8a032a:             for (NetworkBridgeListener listener : listeners) {
1:a8a032a:                 listener.onStart(bridge);
1:a8a032a:             }
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public void onStop(NetworkBridge bridge) {
1:a8a032a:             for (NetworkBridgeListener listener : listeners) {
1:a8a032a:                 listener.onStop(bridge);
1:a8a032a:             }
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public void onOutboundMessage(NetworkBridge bridge, Message message) {
1:a8a032a:             for (NetworkBridgeListener listener : listeners) {
1:a8a032a:                 listener.onOutboundMessage(bridge, message);
1:a8a032a:             }
1:a8a032a:         }
1:a8a032a: 
1:a8a032a:         @Override
1:a8a032a:         public void onInboundMessage(NetworkBridge bridge, Message message) {
1:a8a032a:             for (NetworkBridgeListener listener : listeners) {
1:a8a032a:                 listener.onInboundMessage(bridge, message);
1:a8a032a:             }
1:a8a032a:         }
1:a8a032a:     }
1:a8a032a: 
1:a8a032a: }
============================================================================
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import static org.junit.Assert.*;
1: import static org.mockito.Matchers.any;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.verifyNoMoreInteractions;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: import java.util.function.Supplier;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.transport.Transport;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
1:  * Basic test which verify if custom bridge factory receives any interactions when configured.
1:  */
1: public class CustomBridgeFactoryTest extends BaseNetworkTest {
1: 
1:     private ActiveMQQueue outgoing = new ActiveMQQueue("outgoing");
1: 
1:     /**
1:      * Verification of outgoing communication - from local broker (with customized bridge configured) to remote one.
1:      */
1:     @Test
1:     public void verifyOutgoingCommunication() throws JMSException {
1:         CustomNetworkBridgeFactory bridgeFactory = getCustomNetworkBridgeFactory();
1:         NetworkBridgeListener listener = bridgeFactory.getListener();
1: 
1:         verify(listener).onStart(any(NetworkBridge.class));
1:         verifyNoMoreInteractions(listener);
1: 
1:         send(localSession, outgoing, localSession.createTextMessage("test message"));
1:         assertNotNull("Message didn't arrive", receive(remoteSession, outgoing));
1: 
1:         verify(listener).onOutboundMessage(any(NetworkBridge.class), any(Message.class));
1:         verifyNoMoreInteractions(listener);
1:     }
1: 
1:     /**
1:      * Additional test which makes sure that custom bridge receives notification about broker shutdown.
1:      */
1:     @Test
1:     public void verifyBrokerShutdown() {
1:         shutdownTest(() -> {
1:             try {
1:                 localBroker.stop();
1:             } catch (Exception e) {
1:                 return e;
1:             }
1:             return null;
1:         });
1:     }
1: 
1:     /**
1:      * Verification of network connector shutdown.
1:      */
1:     @Test
1:     public void verifyConnectorShutdown() {
1:         shutdownTest(() -> {
1:             try {
1:                 getLocalConnector(0).stop();
1:             } catch (Exception e) {
1:                 return e;
1:             }
1:             return null;
1:         });
1:     }
1: 
1:     private void shutdownTest(Supplier<Throwable> callback) {
1:         CustomNetworkBridgeFactory bridgeFactory = getCustomNetworkBridgeFactory();
1:         NetworkBridgeListener listener = bridgeFactory.getListener();
1: 
1:         verify(listener).onStart(any(NetworkBridge.class));
1:         verifyNoMoreInteractions(listener);
1: 
1:         Throwable throwable = callback.get();
1:         assertNull("Unexpected error", throwable);
1: 
1:         verify(listener).onStop(any(NetworkBridge.class));
1:         verifyNoMoreInteractions(listener);
1:     }
1: 
1:     // helper methods
1:     private void send(Session session, ActiveMQQueue destination, TextMessage message) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         try {
1:             producer.send(message);
1:         } finally {
1:             producer.close();
1:         }
1:     }
1: 
1:     private javax.jms.Message receive(Session session, ActiveMQQueue destination) throws JMSException {
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         try {
1:             return consumer.receive(TimeUnit.SECONDS.toMillis(5));
1:         } finally {
1:             consumer.close();
1:         }
1:     }
1: 
1:     // infrastructure operations digging for connectors in running broker
1:     private CustomNetworkBridgeFactory getCustomNetworkBridgeFactory() {
1:         NetworkConnector connector = getLocalConnector(0);
1: 
1:         assertTrue(connector.getBridgeFactory() instanceof CustomNetworkBridgeFactory);
1: 
1:         return (CustomNetworkBridgeFactory) connector.getBridgeFactory();
1:     }
1: 
1:     private NetworkConnector getLocalConnector(int index) {
1:         return localBroker.getNetworkConnectors().get(index);
1:     }
1: 
1:     // customizations
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/localBroker-custom-factory.xml";
1:     }
1: 
1:     // test classes
1:     static class CustomNetworkBridgeFactory implements BridgeFactory {
1: 
1:         private final NetworkBridgeListener listener;
1: 
1:         CustomNetworkBridgeFactory() {
1:             this(Mockito.mock(NetworkBridgeListener.class));
1:         }
1: 
1:         CustomNetworkBridgeFactory(NetworkBridgeListener listener) {
1:             this.listener = listener;
1:         }
1: 
1:         public NetworkBridgeListener getListener() {
1:             return listener;
1:         }
1: 
1:         @Override
1:         public DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, NetworkBridgeListener listener) {
1:             DemandForwardingBridge bridge = new DemandForwardingBridge(configuration, localTransport, remoteTransport);
1:             bridge.setNetworkBridgeListener(new CompositeNetworkBridgeListener(this.listener, listener));
1:             return bridge;
1:         }
1: 
1:     }
1: 
1:     static class CompositeNetworkBridgeListener implements NetworkBridgeListener {
1: 
1:         private final List<NetworkBridgeListener> listeners;
1: 
1:         public CompositeNetworkBridgeListener(NetworkBridgeListener ... wrapped) {
1:             this.listeners = Arrays.asList(wrapped);
1:         }
1: 
1:         @Override
1:         public void bridgeFailed() {
1:             for (NetworkBridgeListener listener : listeners) {
1:                 listener.bridgeFailed();
1:             }
1:         }
1: 
1:         @Override
1:         public void onStart(NetworkBridge bridge) {
1:             for (NetworkBridgeListener listener : listeners) {
1:                 listener.onStart(bridge);
1:             }
1:         }
1: 
1:         @Override
1:         public void onStop(NetworkBridge bridge) {
1:             for (NetworkBridgeListener listener : listeners) {
1:                 listener.onStop(bridge);
1:             }
1:         }
1: 
1:         @Override
1:         public void onOutboundMessage(NetworkBridge bridge, Message message) {
1:             for (NetworkBridgeListener listener : listeners) {
1:                 listener.onOutboundMessage(bridge, message);
1:             }
1:         }
1: 
1:         @Override
1:         public void onInboundMessage(NetworkBridge bridge, Message message) {
1:             for (NetworkBridgeListener listener : listeners) {
1:                 listener.onInboundMessage(bridge, message);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================