1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
2:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: import junit.textui.TestRunner;
1:d29ca2a: 
1:d29ca2a: public class MessageTest extends DataStructureTestSupport {
1:d29ca2a: 
1:d29ca2a:     public boolean cacheEnabled;
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(MessageTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestActiveMQMessageMarshaling() {
1:ecf89a6:         addCombinationValues("cacheEnabled", new Object[] {Boolean.TRUE, Boolean.FALSE});
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testActiveMQMessageMarshaling() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setMessageId(new MessageId("c1:1:1", 1));
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testActiveMQMessageMarshalingBigMessageId() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setMessageId(new MessageId("c1:1:1", Short.MAX_VALUE));
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testActiveMQMessageMarshalingBiggerMessageId() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setMessageId(new MessageId("c1:1:1", Integer.MAX_VALUE));
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testActiveMQMessageMarshalingBiggestMessageId() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setMessageId(new MessageId("c1:1:1", Long.MAX_VALUE));
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testMessageIdMarshaling() throws IOException {
1:d29ca2a:         assertBeanMarshalls(new MessageId("c1:1:1", 1));
1:d29ca2a:     }
1:d29ca2a: 
1:c07514f:     public void testPropRemove() throws Exception {
1:c07514f:         ActiveMQMessage message = new ActiveMQMessage();
1:c07514f:         message.setStringProperty("RM","RM");
1:c07514f: 
1:c07514f:         ActiveMQMessage unMarshalled = (ActiveMQMessage) marshalAndUnmarshall(message, wireFormat);
1:c07514f: 
1:c07514f:         unMarshalled.getBooleanProperty("NA");
1:c07514f:         unMarshalled.removeProperty("RM");
1:c07514f: 
1:c07514f:         ActiveMQMessage unMarshalledAgain = (ActiveMQMessage) marshalAndUnmarshall(unMarshalled, wireFormat);
1:c07514f:         assertNull("Prop is gone", unMarshalledAgain.getProperty("RM"));
1:c07514f:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:c07514f
/////////////////////////////////////////////////////////////////////////
1:     public void testPropRemove() throws Exception {
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         message.setStringProperty("RM","RM");
1: 
1:         ActiveMQMessage unMarshalled = (ActiveMQMessage) marshalAndUnmarshall(message, wireFormat);
1: 
1:         unMarshalled.getBooleanProperty("NA");
1:         unMarshalled.removeProperty("RM");
1: 
1:         ActiveMQMessage unMarshalledAgain = (ActiveMQMessage) marshalAndUnmarshall(unMarshalled, wireFormat);
1:         assertNull("Prop is gone", unMarshalledAgain.getProperty("RM"));
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("cacheEnabled", new Object[] {Boolean.TRUE, Boolean.FALSE});
1:         message.setCommandId((short)1);
/////////////////////////////////////////////////////////////////////////
1:         message.setCommandId((short)1);
/////////////////////////////////////////////////////////////////////////
1:         message.setCommandId((short)1);
/////////////////////////////////////////////////////////////////////////
1:         message.setCommandId((short)1);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import org.activeio.command.WireFormat;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.openwire.OpenWireFormat;
1: 
1: import java.io.IOException;
1: 
1: import junit.framework.Test;
1: import junit.textui.TestRunner;
1: 
1: public class MessageTest extends DataStructureTestSupport {
1: 
1:     public boolean cacheEnabled;
1: 
1:     public static Test suite() {
1:         return suite(MessageTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         TestRunner.run(suite());
1:     }
1: 
1:     public void initCombosForTestActiveMQMessageMarshaling() {
0:         addCombinationValues("cacheEnabled", new Object[] { Boolean.TRUE, Boolean.FALSE });
1:     }
1: 
1:     public void testActiveMQMessageMarshaling() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
0:         message.setCommandId((short) 1);
1:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setMessageId(new MessageId("c1:1:1", 1));
1:         assertBeanMarshalls(message);
1:     }
1: 
1:     public void testActiveMQMessageMarshalingBigMessageId() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
0:         message.setCommandId((short) 1);
1:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setMessageId(new MessageId("c1:1:1", Short.MAX_VALUE));
1:         assertBeanMarshalls(message);
1:     }
1: 
1:     public void testActiveMQMessageMarshalingBiggerMessageId() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
0:         message.setCommandId((short) 1);
1:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setMessageId(new MessageId("c1:1:1", Integer.MAX_VALUE));
1:         assertBeanMarshalls(message);
1:     }
1: 
1:     public void testActiveMQMessageMarshalingBiggestMessageId() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
0:         message.setCommandId((short) 1);
1:         message.setOriginalDestination(new ActiveMQQueue("queue"));
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setMessageId(new MessageId("c1:1:1", Long.MAX_VALUE));
1:         assertBeanMarshalls(message);
1:     }
1: 
1:     public void testMessageIdMarshaling() throws IOException {
1:         assertBeanMarshalls(new MessageId("c1:1:1", 1));
1:     }
1: 
1: }
============================================================================