1:98c5866: /**
1:98c5866:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:98c5866:  * contributor license agreements.  See the NOTICE file distributed with
1:98c5866:  * this work for additional information regarding copyright ownership.
1:98c5866:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:98c5866:  * (the "License"); you may not use this file except in compliance with
1:98c5866:  * the License.  You may obtain a copy of the License at
1:98c5866:  *
1:98c5866:  *      http://www.apache.org/licenses/LICENSE-2.0
1:98c5866:  *
1:98c5866:  * Unless required by applicable law or agreed to in writing, software
1:98c5866:  * distributed under the License is distributed on an "AS IS" BASIS,
1:98c5866:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c5866:  * See the License for the specific language governing permissions and
1:98c5866:  * limitations under the License.
1:98c5866:  */
1:98c5866: package org.apache.activemq.transport.stomp.auto;
1:98c5866: 
1:98c5866: import static org.junit.Assert.assertTrue;
1:98c5866: 
1:98c5866: import java.io.IOException;
1:98c5866: import java.net.Socket;
1:98c5866: import java.security.cert.X509Certificate;
1:98c5866: import java.util.Arrays;
1:98c5866: import java.util.Collection;
1:98c5866: import java.util.List;
1:98c5866: 
1:98c5866: import javax.jms.Connection;
1:98c5866: import javax.net.SocketFactory;
1:98c5866: import javax.net.ssl.SSLSocketFactory;
1:98c5866: 
1:98c5866: import org.apache.activemq.broker.Broker;
1:98c5866: import org.apache.activemq.broker.BrokerFilter;
1:98c5866: import org.apache.activemq.broker.BrokerPlugin;
1:98c5866: import org.apache.activemq.broker.ConnectionContext;
1:98c5866: import org.apache.activemq.command.ConnectionInfo;
1:98c5866: import org.apache.activemq.transport.stomp.Stomp;
1:98c5866: import org.apache.activemq.transport.stomp.StompTestSupport;
1:98c5866: import org.junit.Test;
1:98c5866: import org.junit.runner.RunWith;
1:98c5866: import org.junit.runners.Parameterized;
1:98c5866: import org.junit.runners.Parameterized.Parameters;
1:98c5866: 
1:98c5866: @RunWith(Parameterized.class)
1:98c5866: public class StompAutoSslAuthTest extends StompTestSupport {
1:98c5866: 
1:98c5866:     private final boolean isNio;
1:98c5866:     private boolean hasCertificate = false;
1:98c5866:     private Connection connection;
1:98c5866: 
1:98c5866:     @Parameters(name="isNio={0}")
1:98c5866:     public static Collection<Object[]> data() {
1:98c5866:         return Arrays.asList(new Object[][] {
1:98c5866:                 {false},
1:98c5866:                 {true}
1:98c5866:             });
1:98c5866:     }
1:98c5866: 
1:98c5866:     /**
1:98c5866:      * @param isNio
1:98c5866:      */
1:98c5866:     public StompAutoSslAuthTest(boolean isNio) {
1:98c5866:         this.isNio = isNio;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected boolean isUseAutoSslConnector() {
1:98c5866:         return !isNio;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected boolean isUseAutoNioPlusSslConnector() {
1:98c5866:         return isNio;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public void setUp() throws Exception {
1:98c5866:         super.setUp();
1:98c5866: 
1:98c5866:         hasCertificate = false;
1:98c5866: 
1:98c5866:         stompConnect();
1:98c5866: 
1:98c5866:         connection = cf.createConnection("system", "manager");
1:98c5866:         connection.start();
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public void tearDown() throws Exception {
1:98c5866:         try {
1:98c5866:             connection.close();
1:98c5866:         } catch (Exception ex) {}
1:98c5866: 
1:98c5866:         super.tearDown();
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected Socket createSocket() throws IOException {
1:98c5866:         SocketFactory factory = SSLSocketFactory.getDefault();
1:98c5866:         return factory.createSocket("127.0.0.1", isNio ? this.autoNioSslPort : this.autoSslPort);
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected String getAdditionalConfig() {
1:69fad2a:         return "?transport.needClientAuth=true&transport.verifyHostName=false";
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:98c5866:         super.addAdditionalPlugins(plugins);
1:98c5866:         plugins.add(new BrokerPlugin() {
1:98c5866: 
1:98c5866:             @Override
1:98c5866:             public Broker installPlugin(Broker broker) throws Exception {
1:98c5866:                 return new BrokerFilter(broker) {
1:98c5866: 
1:98c5866:                     @Override
1:98c5866:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:98c5866:                         super.addConnection(context, info);
1:98c5866:                         //The second time should contain the certificate
1:98c5866:                         hasCertificate = info.getTransportContext() instanceof X509Certificate[];
1:98c5866:                     }
1:98c5866:                 };
1:98c5866:             }
1:98c5866:         });
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Test(timeout = 60000)
1:98c5866:     public void testConnect() throws Exception {
1:98c5866: 
1:98c5866:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" + "request-id:1\n" + "\n" + Stomp.NULL;
1:98c5866:         stompConnection.sendFrame(connectFrame);
1:98c5866: 
1:98c5866:         String f = stompConnection.receiveFrame();
1:98c5866:         assertTrue(f.startsWith("CONNECTED"));
1:98c5866:         assertTrue(f.indexOf("response-id:1") >= 0);
1:98c5866: 
1:98c5866:         assertTrue(hasCertificate);
1:98c5866:     }
1:98c5866: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1:         return "?transport.needClientAuth=true&transport.verifyHostName=false";
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp.auto;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.security.cert.X509Certificate;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompTestSupport;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class StompAutoSslAuthTest extends StompTestSupport {
1: 
1:     private final boolean isNio;
1:     private boolean hasCertificate = false;
1:     private Connection connection;
1: 
1:     @Parameters(name="isNio={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {false},
1:                 {true}
1:             });
1:     }
1: 
1:     /**
1:      * @param isNio
1:      */
1:     public StompAutoSslAuthTest(boolean isNio) {
1:         this.isNio = isNio;
1:     }
1: 
1:     @Override
1:     protected boolean isUseAutoSslConnector() {
1:         return !isNio;
1:     }
1: 
1:     @Override
1:     protected boolean isUseAutoNioPlusSslConnector() {
1:         return isNio;
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         hasCertificate = false;
1: 
1:         stompConnect();
1: 
1:         connection = cf.createConnection("system", "manager");
1:         connection.start();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         try {
1:             connection.close();
1:         } catch (Exception ex) {}
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected Socket createSocket() throws IOException {
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket("127.0.0.1", isNio ? this.autoNioSslPort : this.autoSslPort);
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
0:         return "?transport.needClientAuth=true";
1:     }
1: 
1:     @Override
1:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:         super.addAdditionalPlugins(plugins);
1:         plugins.add(new BrokerPlugin() {
1: 
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1: 
1:                     @Override
1:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:                         super.addConnection(context, info);
1:                         //The second time should contain the certificate
1:                         hasCertificate = info.getTransportContext() instanceof X509Certificate[];
1:                     }
1:                 };
1:             }
1:         });
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnect() throws Exception {
1: 
1:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" + "request-id:1\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("response-id:1") >= 0);
1: 
1:         assertTrue(hasCertificate);
1:     }
1: }
============================================================================