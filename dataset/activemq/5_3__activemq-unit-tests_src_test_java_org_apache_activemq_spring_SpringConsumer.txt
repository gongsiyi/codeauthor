1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.spring;
5:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: import org.springframework.jms.core.JmsTemplate;
1:74a7a8b: 
1:d29ca2a: public class SpringConsumer extends ConsumerBean implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SpringConsumer.class);
1:d29ca2a:     private JmsTemplate template;
1:d29ca2a:     private String myId = "foo";
1:d29ca2a:     private Destination destination;
1:d29ca2a:     private Connection connection;
1:d29ca2a:     private Session session;
1:d29ca2a:     private MessageConsumer consumer;
1:d29ca2a: 
1:d29ca2a:     public void start() throws JMSException {
1:d29ca2a:         String selector = "next = '" + myId + "'";
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             ConnectionFactory factory = template.getConnectionFactory();
1:d29ca2a:             connection = factory.createConnection();
1:d29ca2a: 
1:d29ca2a:             // we might be a reusable connection in spring
1:d29ca2a:             // so lets only set the client ID once if its not set
1:d29ca2a:             synchronized (connection) {
1:d29ca2a:                 if (connection.getClientID() == null) {
1:d29ca2a:                     connection.setClientID(myId);
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             connection.start();
1:d29ca2a: 
1:d29ca2a:             session = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:             consumer = session.createConsumer(destination, selector, false);
1:d29ca2a:             consumer.setMessageListener(this);
1:74a7a8b:         } catch (JMSException ex) {
1:fc00993:             LOG.error("", ex);
1:d29ca2a:             throw ex;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws JMSException {
1:67310ad:         if (consumer != null) {
1:d29ca2a:             consumer.close();
1:d29ca2a:         }
1:67310ad:         if (session != null) {
1:d29ca2a:             session.close();
3:67310ad:         }
1:67310ad:         if (connection != null) {
1:d29ca2a:             connection.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onMessage(Message message) {
1:d29ca2a:         super.onMessage(message);
1:d29ca2a:         try {
1:d29ca2a:             message.acknowledge();
1:74a7a8b:         } catch (JMSException e) {
1:fc00993:             LOG.error("Failed to acknowledge: " + e, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Properties
1:74a7a8b:     // -------------------------------------------------------------------------
1:d29ca2a:     public Destination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDestination(Destination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getMyId() {
1:d29ca2a:         return myId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setMyId(String myId) {
1:d29ca2a:         this.myId = myId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public JmsTemplate getTemplate() {
1:d29ca2a:         return template;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setTemplate(JmsTemplate template) {
1:d29ca2a:         this.template = template;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SpringConsumer.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SpringConsumer.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("", ex);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Failed to acknowledge: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.jms.core.JmsTemplate;
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException ex) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:     // -------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.spring;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.springframework.jms.core.JmsTemplate;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: public class SpringConsumer extends ConsumerBean implements MessageListener {
0:     private static final Log log = LogFactory.getLog(SpringConsumer.class);
1: 
1:     private JmsTemplate template;
1:     private String myId = "foo";
1:     private Destination destination;
1:     private Connection connection;
1:     private Session session;
1:     private MessageConsumer consumer;
1: 
1:     public void start() throws JMSException {
1:         String selector = "next = '" + myId + "'";
1: 
1:         try {
1:             ConnectionFactory factory = template.getConnectionFactory();
1:             connection = factory.createConnection();
1: 
1:             // we might be a reusable connection in spring
1:             // so lets only set the client ID once if its not set
1:             synchronized (connection) {
1:                 if (connection.getClientID() == null) {
1:                     connection.setClientID(myId);
1:                 }
1:             }
1: 
1:             connection.start();
1: 
1:             session = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:             consumer = session.createConsumer(destination, selector, false);
1:             consumer.setMessageListener(this);
1:         }
0:         catch (JMSException ex) {
0:             log.error("", ex);
1:             throw ex;
1:         }
1:     }
1: 
1: 
1:     public void stop() throws JMSException {
0: 		if( consumer!=null )
1: 			consumer.close();
0: 		if( session!=null )
1: 			session.close();
0: 		if( connection!=null )
1: 			connection.close();
1:     }
1: 
1:     public void onMessage(Message message) {
1:         super.onMessage(message);
1:         try {
1:             message.acknowledge();
1:         }
0:         catch (JMSException e) {
0:             log.error("Failed to acknowledge: " + e, e);
1:         }
1:     }
1: 
1:     // Properties
0:     //-------------------------------------------------------------------------
1:     public Destination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(Destination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     public String getMyId() {
1:         return myId;
1:     }
1: 
1:     public void setMyId(String myId) {
1:         this.myId = myId;
1:     }
1: 
1:     public JmsTemplate getTemplate() {
1:         return template;
1:     }
1: 
1:     public void setTemplate(JmsTemplate template) {
1:         this.template = template;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:67310ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (consumer != null) {
0:             consumer.close();
1:         }
1:         if (session != null) {
0:             session.close();
1:         }
1:         if (connection != null) {
0:             connection.close();
1:         }
============================================================================