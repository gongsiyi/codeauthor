1:29f34f4: /**
1:29f34f4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29f34f4:  * contributor license agreements.  See the NOTICE file distributed with
1:29f34f4:  * this work for additional information regarding copyright ownership.
1:29f34f4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29f34f4:  * (the "License"); you may not use this file except in compliance with
1:29f34f4:  * the License.  You may obtain a copy of the License at
1:29f34f4:  *
1:29f34f4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:29f34f4:  *
1:29f34f4:  * Unless required by applicable law or agreed to in writing, software
1:29f34f4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29f34f4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29f34f4:  * See the License for the specific language governing permissions and
1:29f34f4:  * limitations under the License.
1:29f34f4:  */
1:29f34f4: package org.apache.activemq.broker.region;
1:29f34f4: 
1:29f34f4: import java.io.File;
1:29f34f4: 
1:29f34f4: import static org.junit.matchers.JUnitMatchers.containsString;
1:29f34f4: import static org.junit.Assert.*;
1:29f34f4: 
1:29f34f4: import javax.jms.Connection;
1:29f34f4: import javax.jms.JMSException;
1:29f34f4: import javax.jms.Message;
1:29f34f4: import javax.jms.MessageConsumer;
1:29f34f4: import javax.jms.MessageListener;
1:29f34f4: import javax.jms.MessageProducer;
1:29f34f4: import javax.jms.Queue;
1:29f34f4: import javax.jms.Session;
1:29f34f4: 
1:29f34f4: import org.apache.activemq.ActiveMQConnectionFactory;
1:29f34f4: import org.apache.activemq.command.ActiveMQQueue;
1:29f34f4: import org.apache.activemq.broker.BrokerService;
1:29f34f4: 
1:29f34f4: import org.slf4j.Logger;
1:29f34f4: import org.slf4j.LoggerFactory;
1:29f34f4: 
1:29f34f4: import org.junit.*;
1:29f34f4: 
1:29f34f4: /**
1:29f34f4:  * Confirm that the broker does not resend unacknowledged messages during a broker shutdown.
1:29f34f4:  */
1:29f34f4: public class QueueResendDuringShutdownTest {
1:29f34f4:     private static final Logger         LOG = LoggerFactory.getLogger(QueueResendDuringShutdownTest.class);
1:29f34f4:     public static final int             NUM_CONNECTION_TO_TEST = 8;
1:29f34f4: 
1:29f34f4:     private static boolean              iterationFoundFailure = false;
1:29f34f4: 
1:29f34f4:     private BrokerService               broker;
1:29f34f4:     private ActiveMQConnectionFactory   factory;
1:29f34f4:     private Connection[]                connections;
1:29f34f4:     private Connection                  producerConnection;
1:29f34f4:     private Queue                       queue;
1:29f34f4: 
1:29f34f4:     private Object                      messageReceiveSync = new Object();
1:29f34f4:     private int                         receiveCount;
1:29f34f4: 
1:29f34f4:     @Before
1:29f34f4:     public void setUp () throws Exception {
1:29f34f4:         this.receiveCount = 0;
1:29f34f4: 
1:29f34f4:         this.broker = new BrokerService();
1:29f34f4:         this.broker.setPersistent(false);
1:29f34f4:         this.broker.start();
1:29f34f4:         this.broker.waitUntilStarted();
1:29f34f4: 
1:29f34f4:         this.factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:29f34f4:         this.queue = new ActiveMQQueue("TESTQUEUE");
1:29f34f4: 
1:29f34f4:         connections = new Connection[NUM_CONNECTION_TO_TEST];
1:29f34f4:         int iter = 0;
1:29f34f4:         while ( iter < NUM_CONNECTION_TO_TEST ) {
1:29f34f4:             this.connections[iter] = factory.createConnection();
1:29f34f4:             iter++;
1:29f34f4:         }
1:29f34f4: 
1:29f34f4:         this.producerConnection = factory.createConnection();
1:29f34f4:         this.producerConnection.start();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     @After
1:29f34f4:     public void cleanup () throws Exception {
1:29f34f4:         for ( Connection oneConnection : connections ) {
1:29f34f4:             if ( oneConnection != null ) {
1:29f34f4:                 closeConnection(oneConnection);
1:29f34f4:             }
1:29f34f4:         }
1:29f34f4:         connections = null;
1:29f34f4: 
1:29f34f4:         if ( this.producerConnection != null ) {
1:29f34f4:             closeConnection(this.producerConnection);
1:29f34f4:             this.producerConnection = null;
1:29f34f4:         }
1:29f34f4: 
1:29f34f4:         this.broker.stop();
1:29f34f4:         this.broker.waitUntilStopped();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     @Test(timeout=3000)
1:29f34f4:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter1 () throws Throwable {
1:29f34f4:         runTestIteration();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     @Test(timeout=3000)
1:29f34f4:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter2 () throws Throwable {
1:29f34f4:         runTestIteration();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     @Test(timeout=3000)
1:29f34f4:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter3 () throws Throwable {
1:29f34f4:         runTestIteration();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Run one iteration of the test, skipping it if a failure was found on a prior iteration since a single failure is
1:29f34f4:      * enough.  Also keep track of the state of failure for the iteration.
1:29f34f4:      */
1:29f34f4:     protected void  runTestIteration () throws Throwable {
1:29f34f4:         if ( iterationFoundFailure ) {
1:29f34f4:             LOG.info("skipping test iteration; failure previously detected");
1:29f34f4:             return;
1:29f34f4:         } try {
1:29f34f4:             testRedeliverAtBrokerShutdownAutoAckMsgListener();
1:29f34f4:         } catch ( Throwable thrown ) {
1:29f34f4:             iterationFoundFailure = true;
1:29f34f4:             throw thrown;
1:29f34f4:         }
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     protected void  testRedeliverAtBrokerShutdownAutoAckMsgListener () throws Exception {
1:29f34f4:         // Start consumers on all of the connections
1:29f34f4:         for ( Connection oneConnection : connections ) {
1:29f34f4:             MessageConsumer consumer = startupConsumer(oneConnection, false, Session.AUTO_ACKNOWLEDGE);
1:29f34f4:             configureMessageListener(consumer);
1:29f34f4:             oneConnection.start();
1:29f34f4:         }
1:29f34f4: 
1:29f34f4:         // Send one message to the Queue and wait a short time for the dispatch to occur.
1:29f34f4:         this.sendMessage();
1:29f34f4:         waitForMessage(1000);
1:29f34f4: 
1:29f34f4:         // Verify one consumer received it
1:29f34f4:         assertEquals(1, this.receiveCount);
1:29f34f4: 
1:29f34f4:         // Shutdown the broker
1:29f34f4:         this.broker.stop();
1:29f34f4:         this.broker.waitUntilStopped();
1:29f34f4:         delay(100, "give queue time flush");
1:29f34f4: 
1:29f34f4:         // Verify still only one consumer received it
1:29f34f4:         assertEquals(1, this.receiveCount);
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Start a consumer on the given connection using the session transaction and acknowledge settings given.
1:29f34f4:      */
1:29f34f4:     protected MessageConsumer   startupConsumer (Connection conn, boolean transInd, int ackMode)
1:29f34f4:     throws JMSException {
1:29f34f4:         Session         sess;
1:29f34f4:         MessageConsumer consumer;
1:29f34f4: 
1:29f34f4:         sess = conn.createSession(transInd, ackMode);
1:29f34f4:         consumer = sess.createConsumer(queue);
1:29f34f4: 
1:29f34f4:         return  consumer;
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Mark the receipt of a message from one of the consumers.
1:29f34f4:      */
1:29f34f4:     protected void  messageReceived () {
1:29f34f4:         synchronized ( this ) {
1:29f34f4:             this.receiveCount++;
1:29f34f4:             synchronized ( this.messageReceiveSync ) {
1:29f34f4:                 this.messageReceiveSync.notifyAll();
1:29f34f4:             }
1:29f34f4:         }
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Setup the MessageListener for the given consumer.  The listener uses a long delay on receiving the message to
1:29f34f4:      * simulate the reported case of problems at shutdown caused by a message listener's connection closing while it is
1:29f34f4:      * still processing.
1:29f34f4:      */
1:29f34f4:     protected void  configureMessageListener (MessageConsumer consumer) throws JMSException {
1:29f34f4:         final MessageConsumer   fConsumer = consumer;
1:29f34f4: 
1:29f34f4:         consumer.setMessageListener(new MessageListener() {
1:29f34f4:             public void onMessage (Message msg) {
1:29f34f4:                 LOG.debug("got a message on consumer {}", fConsumer);
1:29f34f4:                 messageReceived();
1:29f34f4: 
1:29f34f4:                 // Delay long enough for the consumer to get closed while this delay is active.
1:29f34f4:                 delay(3000, "pause so connection shutdown leads to unacked message redelivery");
1:29f34f4:             }
1:29f34f4:         });
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Send a test message now.
1:29f34f4:      */
1:29f34f4:     protected void  sendMessage () throws JMSException {
1:29f34f4:         Session sess = this.producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:29f34f4:         MessageProducer prod = sess.createProducer(queue);
1:29f34f4:         prod.send(sess.createTextMessage("X-TEST-MSG-X"));
1:29f34f4:         prod.close();
1:29f34f4:         sess.close();
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Close the given connection safely and log any exception caught.
1:29f34f4:      */
1:29f34f4:     protected void  closeConnection (Connection conn) {
1:29f34f4:         try {
1:29f34f4:             conn.close();
1:29f34f4:         } catch ( JMSException jmsExc ) {
1:29f34f4:             LOG.info("failed to cleanup connection", jmsExc);
1:29f34f4:         }
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Pause for the given length of time, in milliseconds, logging an interruption if one occurs.  Don't try to
1:29f34f4:      * recover from interrupt - the test case does not support interrupting and such an occurrence likely means the
1:29f34f4:      * test is being aborted.
1:29f34f4:      */
1:29f34f4:     protected void  delay (long delayMs, String desc) {
1:29f34f4:         try {
1:29f34f4:             Thread.sleep(delayMs);
1:29f34f4:         } catch ( InterruptedException intExc ) {
1:29f34f4:             LOG.warn("sleep interrupted: " + desc, intExc);
1:29f34f4:         }
1:29f34f4:     }
1:29f34f4: 
1:29f34f4:     /**
1:29f34f4:      * Wait up to the specified duration for a message to be received by any consumer.
1:29f34f4:      */
1:29f34f4:     protected void  waitForMessage (long delayMs) {
1:29f34f4:         try {
1:29f34f4:             synchronized ( this.messageReceiveSync ) {
1:29f34f4:                 if ( this.receiveCount == 0 ) {
1:29f34f4:                     this.messageReceiveSync.wait(delayMs);
1:29f34f4:                 }
1:29f34f4:             }
1:29f34f4:         } catch ( InterruptedException intExc ) {
1:29f34f4:             LOG.warn("sleep interrupted: wait for message to arrive");
1:29f34f4:         }
1:29f34f4:     }
1:29f34f4: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:29f34f4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.File;
1: 
1: import static org.junit.matchers.JUnitMatchers.containsString;
1: import static org.junit.Assert.*;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.junit.*;
1: 
1: /**
1:  * Confirm that the broker does not resend unacknowledged messages during a broker shutdown.
1:  */
1: public class QueueResendDuringShutdownTest {
1:     private static final Logger         LOG = LoggerFactory.getLogger(QueueResendDuringShutdownTest.class);
1:     public static final int             NUM_CONNECTION_TO_TEST = 8;
1: 
1:     private static boolean              iterationFoundFailure = false;
1: 
1:     private BrokerService               broker;
1:     private ActiveMQConnectionFactory   factory;
1:     private Connection[]                connections;
1:     private Connection                  producerConnection;
1:     private Queue                       queue;
1: 
1:     private Object                      messageReceiveSync = new Object();
1:     private int                         receiveCount;
1: 
1:     @Before
1:     public void setUp () throws Exception {
1:         this.receiveCount = 0;
1: 
1:         this.broker = new BrokerService();
1:         this.broker.setPersistent(false);
1:         this.broker.start();
1:         this.broker.waitUntilStarted();
1: 
1:         this.factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         this.queue = new ActiveMQQueue("TESTQUEUE");
1: 
1:         connections = new Connection[NUM_CONNECTION_TO_TEST];
1:         int iter = 0;
1:         while ( iter < NUM_CONNECTION_TO_TEST ) {
1:             this.connections[iter] = factory.createConnection();
1:             iter++;
1:         }
1: 
1:         this.producerConnection = factory.createConnection();
1:         this.producerConnection.start();
1:     }
1: 
1:     @After
1:     public void cleanup () throws Exception {
1:         for ( Connection oneConnection : connections ) {
1:             if ( oneConnection != null ) {
1:                 closeConnection(oneConnection);
1:             }
1:         }
1:         connections = null;
1: 
1:         if ( this.producerConnection != null ) {
1:             closeConnection(this.producerConnection);
1:             this.producerConnection = null;
1:         }
1: 
1:         this.broker.stop();
1:         this.broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout=3000)
1:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter1 () throws Throwable {
1:         runTestIteration();
1:     }
1: 
1:     @Test(timeout=3000)
1:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter2 () throws Throwable {
1:         runTestIteration();
1:     }
1: 
1:     @Test(timeout=3000)
1:     public void testRedeliverAtBrokerShutdownAutoAckMsgListenerIter3 () throws Throwable {
1:         runTestIteration();
1:     }
1: 
1:     /**
1:      * Run one iteration of the test, skipping it if a failure was found on a prior iteration since a single failure is
1:      * enough.  Also keep track of the state of failure for the iteration.
1:      */
1:     protected void  runTestIteration () throws Throwable {
1:         if ( iterationFoundFailure ) {
1:             LOG.info("skipping test iteration; failure previously detected");
1:             return;
1:         } try {
1:             testRedeliverAtBrokerShutdownAutoAckMsgListener();
1:         } catch ( Throwable thrown ) {
1:             iterationFoundFailure = true;
1:             throw thrown;
1:         }
1:     }
1: 
1:     protected void  testRedeliverAtBrokerShutdownAutoAckMsgListener () throws Exception {
1:         // Start consumers on all of the connections
1:         for ( Connection oneConnection : connections ) {
1:             MessageConsumer consumer = startupConsumer(oneConnection, false, Session.AUTO_ACKNOWLEDGE);
1:             configureMessageListener(consumer);
1:             oneConnection.start();
1:         }
1: 
1:         // Send one message to the Queue and wait a short time for the dispatch to occur.
1:         this.sendMessage();
1:         waitForMessage(1000);
1: 
1:         // Verify one consumer received it
1:         assertEquals(1, this.receiveCount);
1: 
1:         // Shutdown the broker
1:         this.broker.stop();
1:         this.broker.waitUntilStopped();
1:         delay(100, "give queue time flush");
1: 
1:         // Verify still only one consumer received it
1:         assertEquals(1, this.receiveCount);
1:     }
1: 
1:     /**
1:      * Start a consumer on the given connection using the session transaction and acknowledge settings given.
1:      */
1:     protected MessageConsumer   startupConsumer (Connection conn, boolean transInd, int ackMode)
1:     throws JMSException {
1:         Session         sess;
1:         MessageConsumer consumer;
1: 
1:         sess = conn.createSession(transInd, ackMode);
1:         consumer = sess.createConsumer(queue);
1: 
1:         return  consumer;
1:     }
1: 
1:     /**
1:      * Mark the receipt of a message from one of the consumers.
1:      */
1:     protected void  messageReceived () {
1:         synchronized ( this ) {
1:             this.receiveCount++;
1:             synchronized ( this.messageReceiveSync ) {
1:                 this.messageReceiveSync.notifyAll();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Setup the MessageListener for the given consumer.  The listener uses a long delay on receiving the message to
1:      * simulate the reported case of problems at shutdown caused by a message listener's connection closing while it is
1:      * still processing.
1:      */
1:     protected void  configureMessageListener (MessageConsumer consumer) throws JMSException {
1:         final MessageConsumer   fConsumer = consumer;
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage (Message msg) {
1:                 LOG.debug("got a message on consumer {}", fConsumer);
1:                 messageReceived();
1: 
1:                 // Delay long enough for the consumer to get closed while this delay is active.
1:                 delay(3000, "pause so connection shutdown leads to unacked message redelivery");
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Send a test message now.
1:      */
1:     protected void  sendMessage () throws JMSException {
1:         Session sess = this.producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer prod = sess.createProducer(queue);
1:         prod.send(sess.createTextMessage("X-TEST-MSG-X"));
1:         prod.close();
1:         sess.close();
1:     }
1: 
1:     /**
1:      * Close the given connection safely and log any exception caught.
1:      */
1:     protected void  closeConnection (Connection conn) {
1:         try {
1:             conn.close();
1:         } catch ( JMSException jmsExc ) {
1:             LOG.info("failed to cleanup connection", jmsExc);
1:         }
1:     }
1: 
1:     /**
1:      * Pause for the given length of time, in milliseconds, logging an interruption if one occurs.  Don't try to
1:      * recover from interrupt - the test case does not support interrupting and such an occurrence likely means the
1:      * test is being aborted.
1:      */
1:     protected void  delay (long delayMs, String desc) {
1:         try {
1:             Thread.sleep(delayMs);
1:         } catch ( InterruptedException intExc ) {
1:             LOG.warn("sleep interrupted: " + desc, intExc);
1:         }
1:     }
1: 
1:     /**
1:      * Wait up to the specified duration for a message to be received by any consumer.
1:      */
1:     protected void  waitForMessage (long delayMs) {
1:         try {
1:             synchronized ( this.messageReceiveSync ) {
1:                 if ( this.receiveCount == 0 ) {
1:                     this.messageReceiveSync.wait(delayMs);
1:                 }
1:             }
1:         } catch ( InterruptedException intExc ) {
1:             LOG.warn("sleep interrupted: wait for message to arrive");
1:         }
1:     }
1: }
============================================================================