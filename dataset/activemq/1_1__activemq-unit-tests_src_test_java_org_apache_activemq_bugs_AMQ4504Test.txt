1:4742c7d: /**
1:4742c7d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4742c7d:  * contributor license agreements.  See the NOTICE file distributed with
1:4742c7d:  * this work for additional information regarding copyright ownership.
1:4742c7d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4742c7d:  * (the "License"); you may not use this file except in compliance with
1:4742c7d:  * the License.  You may obtain a copy of the License at
1:4742c7d:  *
1:4742c7d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4742c7d:  *
1:4742c7d:  * Unless required by applicable law or agreed to in writing, software
1:4742c7d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4742c7d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4742c7d:  * See the License for the specific language governing permissions and
1:4742c7d:  * limitations under the License.
1:4742c7d:  */
1:4742c7d: package org.apache.activemq.bugs;
1:4742c7d: 
1:4742c7d: import javax.jms.Connection;
1:4742c7d: import javax.jms.ConnectionFactory;
1:4742c7d: import javax.jms.MessageConsumer;
1:4742c7d: import javax.jms.MessageProducer;
1:4742c7d: import javax.jms.Session;
1:4742c7d: import org.apache.activemq.ActiveMQConnectionFactory;
1:4742c7d: import org.apache.activemq.broker.BrokerService;
1:4742c7d: import org.apache.activemq.command.ActiveMQQueue;
1:4742c7d: import org.apache.activemq.command.ActiveMQTextMessage;
1:4742c7d: import org.junit.After;
1:4742c7d: import org.junit.Before;
1:4742c7d: import org.junit.Test;
1:4742c7d: 
1:4742c7d: 
1:4742c7d: import static org.junit.Assert.assertNotNull;
1:4742c7d: 
1:4742c7d: public class AMQ4504Test {
1:4742c7d: 
1:4742c7d:     BrokerService brokerService;
1:4742c7d: 
1:4742c7d:     @Before
1:4742c7d:     public void setup() throws Exception {
1:4742c7d:         brokerService = new BrokerService();
1:4742c7d:         brokerService.setPersistent(false);
1:4742c7d:         brokerService.start();
1:4742c7d:     }
1:4742c7d: 
1:4742c7d:     @After
1:4742c7d:     public void stop() throws Exception {
1:4742c7d:         brokerService.stop();
1:4742c7d:     }
1:4742c7d: 
1:4742c7d:     @Test
1:4742c7d:     public void testCompositeDestConsumer() throws Exception {
1:4742c7d: 
1:4742c7d:         final int numDests = 20;
1:4742c7d:         final int numMessages = 200;
1:4742c7d:         StringBuffer stringBuffer = new StringBuffer();
1:4742c7d:         for (int i=0; i<numDests; i++) {
1:4742c7d:             if (stringBuffer.length() != 0) {
1:4742c7d:                 stringBuffer.append(',');
1:4742c7d:             }
1:4742c7d:             stringBuffer.append("ST." + i);
1:4742c7d:         }
1:4742c7d:         stringBuffer.append("?consumer.prefetchSize=100");
1:4742c7d:         ActiveMQQueue activeMQQueue = new ActiveMQQueue(stringBuffer.toString());
1:4742c7d:         ConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:4742c7d:         Connection connection = factory.createConnection();
1:4742c7d:         connection.start();
1:4742c7d:         MessageProducer producer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(activeMQQueue);
1:4742c7d:         for (int i=0; i<numMessages; i++) {
1:4742c7d:             producer.send(new ActiveMQTextMessage());
1:4742c7d:         }
1:4742c7d: 
1:4742c7d:         MessageConsumer consumer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(activeMQQueue);
1:4742c7d:         try {
1:4742c7d:             for (int i=0; i< numMessages * numDests; i++) {
1:4742c7d:                 assertNotNull("recieved:"  + i, consumer.receive(4000));
1:4742c7d:             }
1:4742c7d:         } finally {
1:4742c7d:             connection.close();
1:4742c7d:         }
1:4742c7d:     }
1:4742c7d: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:4742c7d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class AMQ4504Test {
1: 
1:     BrokerService brokerService;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stop() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     public void testCompositeDestConsumer() throws Exception {
1: 
1:         final int numDests = 20;
1:         final int numMessages = 200;
1:         StringBuffer stringBuffer = new StringBuffer();
1:         for (int i=0; i<numDests; i++) {
1:             if (stringBuffer.length() != 0) {
1:                 stringBuffer.append(',');
1:             }
1:             stringBuffer.append("ST." + i);
1:         }
1:         stringBuffer.append("?consumer.prefetchSize=100");
1:         ActiveMQQueue activeMQQueue = new ActiveMQQueue(stringBuffer.toString());
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         MessageProducer producer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(activeMQQueue);
1:         for (int i=0; i<numMessages; i++) {
1:             producer.send(new ActiveMQTextMessage());
1:         }
1: 
1:         MessageConsumer consumer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(activeMQQueue);
1:         try {
1:             for (int i=0; i< numMessages * numDests; i++) {
1:                 assertNotNull("recieved:"  + i, consumer.receive(4000));
1:             }
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: }
============================================================================